/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025-EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0000.log
 *  Created     : 12:24:28 (30/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[12:24:28.641]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:24:28.641]  
[12:24:28.641]  <debugvars>
[12:24:28.641]    // Pre-defined
[12:24:28.642]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:28.642]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:24:28.642]    __dp=0x00000000
[12:24:28.642]    __ap=0x00000000
[12:24:28.642]    __traceout=0x00000000      (Trace Disabled)
[12:24:28.642]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:28.642]    __FlashAddr=0x00000000
[12:24:28.642]    __FlashLen=0x00000000
[12:24:28.642]    __FlashArg=0x00000000
[12:24:28.642]    __FlashOp=0x00000000
[12:24:28.642]    __Result=0x00000000
[12:24:28.642]  </debugvars>
[12:24:28.642]  
[12:24:28.642]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:24:28.642]    <block atomic="false" info="">
[12:24:28.642]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:24:28.642]        // -> [isSWJ <= 0x00000001]
[12:24:28.642]      __var hasDormant = __protocol & 0x00020000;
[12:24:28.642]        // -> [hasDormant <= 0x00000000]
[12:24:28.642]      __var protType   = __protocol & 0x0000FFFF;
[12:24:28.642]        // -> [protType <= 0x00000002]
[12:24:28.642]    </block>
[12:24:28.642]    <control if="protType == 1" while="" timeout="0" info="">
[12:24:28.642]      // if-block "protType == 1"
[12:24:28.642]        // =>  FALSE
[12:24:28.645]      // skip if-block "protType == 1"
[12:24:28.645]    </control>
[12:24:28.645]    <control if="protType == 2" while="" timeout="0" info="">
[12:24:28.645]      // if-block "protType == 2"
[12:24:28.645]        // =>  TRUE
[12:24:28.645]      <control if="isSWJ" while="" timeout="0" info="">
[12:24:28.645]        // if-block "isSWJ"
[12:24:28.645]          // =>  TRUE
[12:24:28.645]        <control if="hasDormant" while="" timeout="0" info="">
[12:24:28.645]          // if-block "hasDormant"
[12:24:28.645]            // =>  FALSE
[12:24:28.645]          // skip if-block "hasDormant"
[12:24:28.645]        </control>
[12:24:28.645]        <control if="!hasDormant" while="" timeout="0" info="">
[12:24:28.645]          // if-block "!hasDormant"
[12:24:28.645]            // =>  TRUE
[12:24:28.645]          <block atomic="false" info="">
[12:24:28.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:24:28.650]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:28.650]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:24:28.653]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:24:28.653]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:24:28.663]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:28.663]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:24:28.665]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:24:28.669]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:24:28.671]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:28.671]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:24:28.677]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:24:28.677]          </block>
[12:24:28.677]          // end if-block "!hasDormant"
[12:24:28.677]        </control>
[12:24:28.677]        // end if-block "isSWJ"
[12:24:28.678]      </control>
[12:24:28.678]      <control if="!isSWJ" while="" timeout="0" info="">
[12:24:28.678]        // if-block "!isSWJ"
[12:24:28.678]          // =>  FALSE
[12:24:28.678]        // skip if-block "!isSWJ"
[12:24:28.678]      </control>
[12:24:28.678]      <block atomic="false" info="">
[12:24:28.678]        ReadDP(0x0);
[12:24:28.685]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:24:28.685]      </block>
[12:24:28.685]      // end if-block "protType == 2"
[12:24:28.685]    </control>
[12:24:28.685]  </sequence>
[12:24:28.689]  
[12:24:34.876]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:24:34.876]  
[12:24:34.876]  <debugvars>
[12:24:34.876]    // Pre-defined
[12:24:34.876]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:34.876]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:24:34.876]    __dp=0x00000000
[12:24:34.876]    __ap=0x00000000
[12:24:34.876]    __traceout=0x00000000      (Trace Disabled)
[12:24:34.876]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:34.876]    __FlashAddr=0x00000000
[12:24:34.879]    __FlashLen=0x00000000
[12:24:34.879]    __FlashArg=0x00000000
[12:24:34.879]    __FlashOp=0x00000000
[12:24:34.879]    __Result=0x00000000
[12:24:34.879]  </debugvars>
[12:24:34.879]  
[12:24:34.879]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:24:34.879]    <block atomic="false" info="">
[12:24:34.879]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:24:34.879]        // -> [isSWJ <= 0x00000001]
[12:24:34.879]      __var hasDormant = __protocol & 0x00020000;
[12:24:34.879]        // -> [hasDormant <= 0x00000000]
[12:24:34.880]      __var protType   = __protocol & 0x0000FFFF;
[12:24:34.880]        // -> [protType <= 0x00000002]
[12:24:34.880]    </block>
[12:24:34.880]    <control if="protType == 1" while="" timeout="0" info="">
[12:24:34.880]      // if-block "protType == 1"
[12:24:34.880]        // =>  FALSE
[12:24:34.880]      // skip if-block "protType == 1"
[12:24:34.880]    </control>
[12:24:34.880]    <control if="protType == 2" while="" timeout="0" info="">
[12:24:34.880]      // if-block "protType == 2"
[12:24:34.881]        // =>  TRUE
[12:24:34.881]      <control if="isSWJ" while="" timeout="0" info="">
[12:24:34.881]        // if-block "isSWJ"
[12:24:34.881]          // =>  TRUE
[12:24:34.881]        <control if="hasDormant" while="" timeout="0" info="">
[12:24:34.881]          // if-block "hasDormant"
[12:24:34.881]            // =>  FALSE
[12:24:34.881]          // skip if-block "hasDormant"
[12:24:34.881]        </control>
[12:24:34.881]        <control if="!hasDormant" while="" timeout="0" info="">
[12:24:34.881]          // if-block "!hasDormant"
[12:24:34.883]            // =>  TRUE
[12:24:34.883]          <block atomic="false" info="">
[12:24:34.883]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:24:34.883]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:34.883]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:24:34.888]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:24:34.888]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:24:34.890]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:34.890]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:24:34.892]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:24:34.892]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:24:34.893]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:34.893]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:24:34.896]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:24:34.896]          </block>
[12:24:34.896]          // end if-block "!hasDormant"
[12:24:34.896]        </control>
[12:24:34.896]        // end if-block "isSWJ"
[12:24:34.896]      </control>
[12:24:34.896]      <control if="!isSWJ" while="" timeout="0" info="">
[12:24:34.896]        // if-block "!isSWJ"
[12:24:34.896]          // =>  FALSE
[12:24:34.897]        // skip if-block "!isSWJ"
[12:24:34.897]      </control>
[12:24:34.897]      <block atomic="false" info="">
[12:24:34.897]        ReadDP(0x0);
[12:24:34.901]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:24:34.901]      </block>
[12:24:34.901]      // end if-block "protType == 2"
[12:24:34.901]    </control>
[12:24:34.901]  </sequence>
[12:24:34.901]  
[12:24:50.784]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:24:50.784]  
[12:24:50.792]  <debugvars>
[12:24:50.792]    // Pre-defined
[12:24:50.792]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:50.792]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:24:50.792]    __dp=0x00000000
[12:24:50.792]    __ap=0x00000000
[12:24:50.792]    __traceout=0x00000000      (Trace Disabled)
[12:24:50.792]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:50.792]    __FlashAddr=0x00000000
[12:24:50.792]    __FlashLen=0x00000000
[12:24:50.792]    __FlashArg=0x00000000
[12:24:50.792]    __FlashOp=0x00000000
[12:24:50.792]    __Result=0x00000000
[12:24:50.792]  </debugvars>
[12:24:50.792]  
[12:24:50.792]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:24:50.792]    <block atomic="false" info="">
[12:24:50.792]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:24:50.792]        // -> [isSWJ <= 0x00000001]
[12:24:50.792]      __var hasDormant = __protocol & 0x00020000;
[12:24:50.792]        // -> [hasDormant <= 0x00000000]
[12:24:50.792]      __var protType   = __protocol & 0x0000FFFF;
[12:24:50.792]        // -> [protType <= 0x00000002]
[12:24:50.792]    </block>
[12:24:50.792]    <control if="protType == 1" while="" timeout="0" info="">
[12:24:50.792]      // if-block "protType == 1"
[12:24:50.792]        // =>  FALSE
[12:24:50.792]      // skip if-block "protType == 1"
[12:24:50.792]    </control>
[12:24:50.792]    <control if="protType == 2" while="" timeout="0" info="">
[12:24:50.792]      // if-block "protType == 2"
[12:24:50.792]        // =>  TRUE
[12:24:50.792]      <control if="isSWJ" while="" timeout="0" info="">
[12:24:50.792]        // if-block "isSWJ"
[12:24:50.792]          // =>  TRUE
[12:24:50.792]        <control if="hasDormant" while="" timeout="0" info="">
[12:24:50.792]          // if-block "hasDormant"
[12:24:50.796]            // =>  FALSE
[12:24:50.796]          // skip if-block "hasDormant"
[12:24:50.796]        </control>
[12:24:50.796]        <control if="!hasDormant" while="" timeout="0" info="">
[12:24:50.796]          // if-block "!hasDormant"
[12:24:50.796]            // =>  TRUE
[12:24:50.796]          <block atomic="false" info="">
[12:24:50.796]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:24:50.796]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:50.796]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:24:50.800]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:24:50.800]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:24:50.802]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:50.802]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:24:50.804]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:24:50.804]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:24:50.813]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:50.813]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:24:50.815]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:24:50.815]          </block>
[12:24:50.815]          // end if-block "!hasDormant"
[12:24:50.815]        </control>
[12:24:50.816]        // end if-block "isSWJ"
[12:24:50.816]      </control>
[12:24:50.816]      <control if="!isSWJ" while="" timeout="0" info="">
[12:24:50.816]        // if-block "!isSWJ"
[12:24:50.816]          // =>  FALSE
[12:24:50.816]        // skip if-block "!isSWJ"
[12:24:50.816]      </control>
[12:24:50.816]      <block atomic="false" info="">
[12:24:50.816]        ReadDP(0x0);
[12:24:50.819]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:24:50.819]      </block>
[12:24:50.819]      // end if-block "protType == 2"
[12:24:50.819]    </control>
[12:24:50.819]  </sequence>
[12:24:50.819]  
[12:24:50.823]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:24:50.823]  
[12:24:50.823]  <debugvars>
[12:24:50.823]    // Pre-defined
[12:24:50.823]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:50.823]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:24:50.823]    __dp=0x00000000
[12:24:50.823]    __ap=0x00000000
[12:24:50.823]    __traceout=0x00000000      (Trace Disabled)
[12:24:50.823]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:50.823]    __FlashAddr=0x00000000
[12:24:50.823]    __FlashLen=0x00000000
[12:24:50.824]    __FlashArg=0x00000000
[12:24:50.824]    __FlashOp=0x00000000
[12:24:50.824]    __Result=0x00000000
[12:24:50.824]  </debugvars>
[12:24:50.824]  
[12:24:50.824]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:24:50.824]    <block atomic="false" info="">
[12:24:50.825]      __var SW_DP_ABORT       = 0x0;
[12:24:50.825]        // -> [SW_DP_ABORT <= 0x00000000]
[12:24:50.825]      __var DP_CTRL_STAT      = 0x4;
[12:24:50.825]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:24:50.825]      __var DP_SELECT         = 0x8;
[12:24:50.825]        // -> [DP_SELECT <= 0x00000008]
[12:24:50.825]      __var powered_down      = 0;
[12:24:50.825]        // -> [powered_down <= 0x00000000]
[12:24:50.825]      WriteDP(DP_SELECT, 0x00000000);
[12:24:50.828]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:24:50.828]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:24:50.828]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:24:50.828]        // -> [powered_down <= 0x00000001]
[12:24:50.828]    </block>
[12:24:50.831]    <control if="powered_down" while="" timeout="0" info="">
[12:24:50.831]      // if-block "powered_down"
[12:24:50.831]        // =>  TRUE
[12:24:50.831]      <block atomic="false" info="">
[12:24:50.831]        Message(0, "Debug/System power-up request sent");
[12:24:50.833]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:24:50.835]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:24:50.835]      </block>
[12:24:50.835]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:24:50.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:24:50.837]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:24:50.837]        // while-condition  =>  FALSE
[12:24:50.837]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:24:50.837]      </control>
[12:24:50.837]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:24:50.837]        // if-block "(__protocol & 0xFFFF) == 1"
[12:24:50.838]          // =>  FALSE
[12:24:50.838]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:24:50.838]      </control>
[12:24:50.838]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:24:50.838]        // if-block "(__protocol & 0xFFFF) == 2"
[12:24:50.838]          // =>  TRUE
[12:24:50.838]        <block atomic="false" info="">
[12:24:50.838]          Message(0, "executing SWD power up");
[12:24:50.841]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:24:50.841]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:24:50.841]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:24:50.852]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:24:50.852]        </block>
[12:24:50.852]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:24:50.852]      </control>
[12:24:50.852]      // end if-block "powered_down"
[12:24:50.854]    </control>
[12:24:50.854]    <block atomic="false" info="">
[12:24:50.854]      __var DEBUG_PORT_VAL    = 0;
[12:24:50.854]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:24:50.854]      __var ACCESS_POINT_VAL  = 0;
[12:24:50.854]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:24:50.854]      __ap = 1; 
[12:24:50.854]        // -> [__ap <= 0x00000001]
[12:24:50.854]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:24:50.865]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:24:50.865]      __ap = 4;
[12:24:50.865]        // -> [__ap <= 0x00000004]
[12:24:50.865]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:24:50.870]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:24:50.870]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:24:50.870]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:24:50.872]    </block>
[12:24:50.872]    <block atomic="false" info="">
[12:24:50.872]      __var nReset = 0x80;
[12:24:50.872]        // -> [nReset <= 0x00000080]
[12:24:50.872]      __var canReadPins = 0;
[12:24:50.872]        // -> [canReadPins <= 0x00000000]
[12:24:50.872]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:24:50.878]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:24:50.878]        // -> [canReadPins <= 0x00000001]
[12:24:50.878]    </block>
[12:24:50.878]    <control if="" while="1" timeout="200" info="">
[12:24:50.878]      // while "1"  (timeout="200")
[12:24:50.878]      // while-condition  =>  TRUE
[12:24:50.878]      // while "1"  (timeout="200")
[12:24:50.878]      // while-condition  =>  TRUE
[12:24:50.878]      // while "1"  (timeout="200")
[12:24:50.878]      // while-condition  =>  TRUE
[12:24:50.878]      // while "1"  (timeout="200")
[12:24:50.880]      // while-condition  =>  TRUE
[12:24:50.880]      // while "1"  (timeout="200")
[12:24:50.880]      // while  =>  TIMEOUT
[12:24:50.880]      // end while "1"
[12:24:50.880]    </control>
[12:24:50.880]    <control if="canReadPins" while="" timeout="0" info="">
[12:24:50.881]      // if-block "canReadPins"
[12:24:50.881]        // =>  TRUE
[12:24:50.881]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:24:50.881]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:24:50.884]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:24:50.884]        // while-condition  =>  FALSE
[12:24:50.884]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:24:50.884]      </control>
[12:24:50.884]      // end if-block "canReadPins"
[12:24:50.884]    </control>
[12:24:50.884]    <control if="!canReadPins" while="" timeout="0" info="">
[12:24:50.884]      // if-block "!canReadPins"
[12:24:50.884]        // =>  FALSE
[12:24:50.884]      // skip if-block "!canReadPins"
[12:24:50.884]    </control>
[12:24:50.884]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:24:50.884]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:24:50.884]        // =>  TRUE
[12:24:50.884]      <block atomic="false" info="">
[12:24:50.884]        WriteAP(0x00, 0x190008);
[12:24:50.888]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:24:50.890]        WriteAP(0xF0, 0x01);
[12:24:50.893]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:24:50.893]      </block>
[12:24:50.893]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:24:50.893]    </control>
[12:24:50.893]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:24:50.894]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:24:50.894]        // =>  FALSE
[12:24:50.894]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:24:50.894]    </control>
[12:24:50.894]    <block atomic="false" info="">
[12:24:50.894]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:24:50.903]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:24:50.903]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:24:50.903]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:24:50.906]      __ap = 0; //lets make sure we reset the access point selection
[12:24:50.906]        // -> [__ap <= 0x00000000]
[12:24:50.907]    </block>
[12:24:50.907]  </sequence>
[12:24:50.907]  
[12:24:50.935]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:24:50.935]  
[12:24:50.935]  <debugvars>
[12:24:50.935]    // Pre-defined
[12:24:50.935]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:50.935]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:24:50.935]    __dp=0x00000000
[12:24:50.935]    __ap=0x00000000
[12:24:50.935]    __traceout=0x00000000      (Trace Disabled)
[12:24:50.935]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:50.935]    __FlashAddr=0x00000000
[12:24:50.935]    __FlashLen=0x00000000
[12:24:50.935]    __FlashArg=0x00000000
[12:24:50.935]    __FlashOp=0x00000000
[12:24:50.935]    __Result=0x00000000
[12:24:50.935]  </debugvars>
[12:24:50.935]  
[12:24:50.935]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:24:50.935]    <block atomic="false" info="">
[12:24:50.935]      __var deviceID = 0;
[12:24:50.935]        // -> [deviceID <= 0x00000000]
[12:24:50.935]      __var version = 0;
[12:24:50.935]        // -> [version <= 0x00000000]
[12:24:50.935]      __var partNum = 0;
[12:24:50.935]        // -> [partNum <= 0x00000000]
[12:24:50.935]      __var manuf = 0;
[12:24:50.935]        // -> [manuf <= 0x00000000]
[12:24:50.935]      __var isMSPM0G1X0X_G3X0X = 0;
[12:24:50.935]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:24:50.935]      __var isProduction = 0;
[12:24:50.939]        // -> [isProduction <= 0x00000000]
[12:24:50.939]      __var continueId = 0;
[12:24:50.939]        // -> [continueId <= 0x00000000]
[12:24:50.939]      deviceID =   Read32(0x41C40004);
[12:24:50.945]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:24:50.945]        // -> [deviceID <= 0x2BB8802F]
[12:24:50.945]      version = deviceID >> 28;
[12:24:50.945]        // -> [version <= 0x00000002]
[12:24:50.945]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:24:50.945]        // -> [partNum <= 0x0000BB88]
[12:24:50.945]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:24:50.945]        // -> [manuf <= 0x00000017]
[12:24:50.945]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:24:50.945]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:24:50.945]      isProduction = (version > 0);
[12:24:50.945]        // -> [isProduction <= 0x00000001]
[12:24:50.945]    </block>
[12:24:50.945]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:24:50.945]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:24:50.945]        // =>  FALSE
[12:24:50.945]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:24:50.947]    </control>
[12:24:50.947]    <control if="continueId == 4" while="" timeout="0" info="">
[12:24:50.947]      // if-block "continueId == 4"
[12:24:50.947]        // =>  FALSE
[12:24:50.947]      // skip if-block "continueId == 4"
[12:24:50.947]    </control>
[12:24:50.947]    <control if="!isProduction" while="" timeout="0" info="">
[12:24:50.947]      // if-block "!isProduction"
[12:24:50.947]        // =>  FALSE
[12:24:50.947]      // skip if-block "!isProduction"
[12:24:50.947]    </control>
[12:24:50.947]  </sequence>
[12:24:50.947]  
[12:24:57.649]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:24:57.649]  
[12:24:57.658]  <debugvars>
[12:24:57.658]    // Pre-defined
[12:24:57.658]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:57.658]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:24:57.658]    __dp=0x00000000
[12:24:57.658]    __ap=0x00000000
[12:24:57.658]    __traceout=0x00000000      (Trace Disabled)
[12:24:57.658]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:57.658]    __FlashAddr=0x00000000
[12:24:57.658]    __FlashLen=0x00000000
[12:24:57.658]    __FlashArg=0x00000000
[12:24:57.658]    __FlashOp=0x00000000
[12:24:57.658]    __Result=0x00000000
[12:24:57.658]  </debugvars>
[12:24:57.658]  
[12:24:57.658]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:24:57.658]    <block atomic="false" info="">
[12:24:57.658]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:24:57.658]        // -> [isSWJ <= 0x00000001]
[12:24:57.658]      __var hasDormant = __protocol & 0x00020000;
[12:24:57.658]        // -> [hasDormant <= 0x00000000]
[12:24:57.660]      __var protType   = __protocol & 0x0000FFFF;
[12:24:57.660]        // -> [protType <= 0x00000002]
[12:24:57.660]    </block>
[12:24:57.660]    <control if="protType == 1" while="" timeout="0" info="">
[12:24:57.660]      // if-block "protType == 1"
[12:24:57.660]        // =>  FALSE
[12:24:57.660]      // skip if-block "protType == 1"
[12:24:57.660]    </control>
[12:24:57.660]    <control if="protType == 2" while="" timeout="0" info="">
[12:24:57.660]      // if-block "protType == 2"
[12:24:57.660]        // =>  TRUE
[12:24:57.661]      <control if="isSWJ" while="" timeout="0" info="">
[12:24:57.661]        // if-block "isSWJ"
[12:24:57.661]          // =>  TRUE
[12:24:57.661]        <control if="hasDormant" while="" timeout="0" info="">
[12:24:57.661]          // if-block "hasDormant"
[12:24:57.661]            // =>  FALSE
[12:24:57.661]          // skip if-block "hasDormant"
[12:24:57.661]        </control>
[12:24:57.661]        <control if="!hasDormant" while="" timeout="0" info="">
[12:24:57.661]          // if-block "!hasDormant"
[12:24:57.661]            // =>  TRUE
[12:24:57.661]          <block atomic="false" info="">
[12:24:57.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:24:57.664]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:57.664]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:24:57.667]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:24:57.667]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:24:57.669]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:57.669]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:24:57.675]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:24:57.675]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:24:57.681]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:24:57.682]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:24:57.688]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:24:57.688]          </block>
[12:24:57.688]          // end if-block "!hasDormant"
[12:24:57.688]        </control>
[12:24:57.690]        // end if-block "isSWJ"
[12:24:57.690]      </control>
[12:24:57.690]      <control if="!isSWJ" while="" timeout="0" info="">
[12:24:57.690]        // if-block "!isSWJ"
[12:24:57.690]          // =>  FALSE
[12:24:57.690]        // skip if-block "!isSWJ"
[12:24:57.690]      </control>
[12:24:57.690]      <block atomic="false" info="">
[12:24:57.690]        ReadDP(0x0);
[12:24:57.692]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:24:57.692]      </block>
[12:24:57.692]      // end if-block "protType == 2"
[12:24:57.692]    </control>
[12:24:57.692]  </sequence>
[12:24:57.692]  
[12:24:57.693]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:24:57.693]  
[12:24:57.693]  <debugvars>
[12:24:57.693]    // Pre-defined
[12:24:57.696]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:57.696]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:24:57.696]    __dp=0x00000000
[12:24:57.696]    __ap=0x00000000
[12:24:57.696]    __traceout=0x00000000      (Trace Disabled)
[12:24:57.696]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:57.696]    __FlashAddr=0x00000000
[12:24:57.696]    __FlashLen=0x00000000
[12:24:57.696]    __FlashArg=0x00000000
[12:24:57.696]    __FlashOp=0x00000000
[12:24:57.696]    __Result=0x00000000
[12:24:57.696]  </debugvars>
[12:24:57.696]  
[12:24:57.696]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:24:57.696]    <block atomic="false" info="">
[12:24:57.697]      __var SW_DP_ABORT       = 0x0;
[12:24:57.697]        // -> [SW_DP_ABORT <= 0x00000000]
[12:24:57.697]      __var DP_CTRL_STAT      = 0x4;
[12:24:57.697]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:24:57.697]      __var DP_SELECT         = 0x8;
[12:24:57.697]        // -> [DP_SELECT <= 0x00000008]
[12:24:57.697]      __var powered_down      = 0;
[12:24:57.697]        // -> [powered_down <= 0x00000000]
[12:24:57.697]      WriteDP(DP_SELECT, 0x00000000);
[12:24:57.699]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:24:57.699]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:24:57.701]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:24:57.701]        // -> [powered_down <= 0x00000001]
[12:24:57.701]    </block>
[12:24:57.701]    <control if="powered_down" while="" timeout="0" info="">
[12:24:57.701]      // if-block "powered_down"
[12:24:57.701]        // =>  TRUE
[12:24:57.701]      <block atomic="false" info="">
[12:24:57.701]        Message(0, "Debug/System power-up request sent");
[12:24:57.702]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:24:57.705]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:24:57.705]      </block>
[12:24:57.705]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:24:57.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:24:57.711]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:24:57.711]        // while-condition  =>  FALSE
[12:24:57.711]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:24:57.711]      </control>
[12:24:57.711]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:24:57.712]        // if-block "(__protocol & 0xFFFF) == 1"
[12:24:57.712]          // =>  FALSE
[12:24:57.712]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:24:57.712]      </control>
[12:24:57.712]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:24:57.712]        // if-block "(__protocol & 0xFFFF) == 2"
[12:24:57.712]          // =>  TRUE
[12:24:57.712]        <block atomic="false" info="">
[12:24:57.712]          Message(0, "executing SWD power up");
[12:24:57.714]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:24:57.716]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:24:57.716]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:24:57.725]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:24:57.725]        </block>
[12:24:57.725]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:24:57.725]      </control>
[12:24:57.725]      // end if-block "powered_down"
[12:24:57.725]    </control>
[12:24:57.725]    <block atomic="false" info="">
[12:24:57.725]      __var DEBUG_PORT_VAL    = 0;
[12:24:57.725]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:24:57.725]      __var ACCESS_POINT_VAL  = 0;
[12:24:57.725]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:24:57.725]      __ap = 1; 
[12:24:57.725]        // -> [__ap <= 0x00000001]
[12:24:57.725]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:24:57.729]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:24:57.729]      __ap = 4;
[12:24:57.730]        // -> [__ap <= 0x00000004]
[12:24:57.730]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:24:57.733]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:24:57.733]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:24:57.733]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:24:57.733]    </block>
[12:24:57.733]    <block atomic="false" info="">
[12:24:57.733]      __var nReset = 0x80;
[12:24:57.733]        // -> [nReset <= 0x00000080]
[12:24:57.733]      __var canReadPins = 0;
[12:24:57.733]        // -> [canReadPins <= 0x00000000]
[12:24:57.733]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:24:57.740]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:24:57.740]        // -> [canReadPins <= 0x00000001]
[12:24:57.740]    </block>
[12:24:57.740]    <control if="" while="1" timeout="200" info="">
[12:24:57.740]      // while "1"  (timeout="200")
[12:24:57.740]      // while-condition  =>  TRUE
[12:24:57.740]      // while "1"  (timeout="200")
[12:24:57.740]      // while-condition  =>  TRUE
[12:24:57.740]      // while "1"  (timeout="200")
[12:24:57.740]      // while-condition  =>  TRUE
[12:24:57.741]      // while "1"  (timeout="200")
[12:24:57.741]      // while-condition  =>  TRUE
[12:24:57.741]      // while "1"  (timeout="200")
[12:24:57.741]      // while-condition  =>  TRUE
[12:24:57.741]      // while "1"  (timeout="200")
[12:24:57.741]      // while-condition  =>  TRUE
[12:24:57.741]      // while "1"  (timeout="200")
[12:24:57.741]      // while-condition  =>  TRUE
[12:24:57.741]      // while "1"  (timeout="200")
[12:24:57.741]      // while-condition  =>  TRUE
[12:24:57.741]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.742]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.742]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.742]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.742]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.742]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.742]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.742]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.742]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.742]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.742]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.742]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.742]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.742]      // while "1"  (timeout="200")
[12:24:57.742]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.745]      // while-condition  =>  TRUE
[12:24:57.745]      // while "1"  (timeout="200")
[12:24:57.749]      // while-condition  =>  TRUE
[12:24:57.749]      // while "1"  (timeout="200")
[12:24:57.749]      // while-condition  =>  TRUE
[12:24:57.749]      // while "1"  (timeout="200")
[12:24:57.749]      // while-condition  =>  TRUE
[12:24:57.749]      // while "1"  (timeout="200")
[12:24:57.749]      // while-condition  =>  TRUE
[12:24:57.749]      // while "1"  (timeout="200")
[12:24:57.749]      // while-condition  =>  TRUE
[12:24:57.749]      // while "1"  (timeout="200")
[12:24:57.749]      // while-condition  =>  TRUE
[12:24:57.749]      // while "1"  (timeout="200")
[12:24:57.750]      // while-condition  =>  TRUE
[12:24:57.750]      // while "1"  (timeout="200")
[12:24:57.750]      // while-condition  =>  TRUE
[12:24:57.750]      // while "1"  (timeout="200")
[12:24:57.750]      // while-condition  =>  TRUE
[12:24:57.750]      // while "1"  (timeout="200")
[12:24:57.750]      // while-condition  =>  TRUE
[12:24:57.750]      // while "1"  (timeout="200")
[12:24:57.750]      // while-condition  =>  TRUE
[12:24:57.750]      // while "1"  (timeout="200")
[12:24:57.750]      // while-condition  =>  TRUE
[12:24:57.751]      // while "1"  (timeout="200")
[12:24:57.751]      // while-condition  =>  TRUE
[12:24:57.751]      // while "1"  (timeout="200")
[12:24:57.751]      // while-condition  =>  TRUE
[12:24:57.751]      // while "1"  (timeout="200")
[12:24:57.751]      // while-condition  =>  TRUE
[12:24:57.751]      // while "1"  (timeout="200")
[12:24:57.751]      // while-condition  =>  TRUE
[12:24:57.751]      // while "1"  (timeout="200")
[12:24:57.751]      // while-condition  =>  TRUE
[12:24:57.751]      // while "1"  (timeout="200")
[12:24:57.751]      // while-condition  =>  TRUE
[12:24:57.751]      // while "1"  (timeout="200")
[12:24:57.751]      // while-condition  =>  TRUE
[12:24:57.751]      // while "1"  (timeout="200")
[12:24:57.751]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.753]      // while-condition  =>  TRUE
[12:24:57.753]      // while "1"  (timeout="200")
[12:24:57.757]      // while-condition  =>  TRUE
[12:24:57.757]      // while "1"  (timeout="200")
[12:24:57.757]      // while  =>  TIMEOUT
[12:24:57.757]      // end while "1"
[12:24:57.757]    </control>
[12:24:57.757]    <control if="canReadPins" while="" timeout="0" info="">
[12:24:57.757]      // if-block "canReadPins"
[12:24:57.757]        // =>  TRUE
[12:24:57.757]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:24:57.757]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:24:57.763]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:24:57.763]        // while-condition  =>  FALSE
[12:24:57.763]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:24:57.765]      </control>
[12:24:57.765]      // end if-block "canReadPins"
[12:24:57.765]    </control>
[12:24:57.765]    <control if="!canReadPins" while="" timeout="0" info="">
[12:24:57.765]      // if-block "!canReadPins"
[12:24:57.765]        // =>  FALSE
[12:24:57.765]      // skip if-block "!canReadPins"
[12:24:57.765]    </control>
[12:24:57.765]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:24:57.765]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:24:57.765]        // =>  TRUE
[12:24:57.765]      <block atomic="false" info="">
[12:24:57.766]        WriteAP(0x00, 0x190008);
[12:24:57.766]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:24:57.766]        WriteAP(0xF0, 0x01);
[12:24:57.771]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:24:57.771]      </block>
[12:24:57.771]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:24:57.773]    </control>
[12:24:57.773]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:24:57.773]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:24:57.773]        // =>  FALSE
[12:24:57.773]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:24:57.773]    </control>
[12:24:57.773]    <block atomic="false" info="">
[12:24:57.773]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:24:57.782]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:24:57.783]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:24:57.783]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:24:57.784]      __ap = 0; //lets make sure we reset the access point selection
[12:24:57.784]        // -> [__ap <= 0x00000000]
[12:24:57.784]    </block>
[12:24:57.784]  </sequence>
[12:24:57.784]  
[12:24:57.815]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:24:57.815]  
[12:24:57.815]  <debugvars>
[12:24:57.815]    // Pre-defined
[12:24:57.817]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:24:57.817]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:24:57.817]    __dp=0x00000000
[12:24:57.817]    __ap=0x00000000
[12:24:57.817]    __traceout=0x00000000      (Trace Disabled)
[12:24:57.817]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:24:57.817]    __FlashAddr=0x00000000
[12:24:57.817]    __FlashLen=0x00000000
[12:24:57.817]    __FlashArg=0x00000000
[12:24:57.817]    __FlashOp=0x00000000
[12:24:57.817]    __Result=0x00000000
[12:24:57.817]  </debugvars>
[12:24:57.817]  
[12:24:57.817]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:24:57.817]    <block atomic="false" info="">
[12:24:57.817]      __var deviceID = 0;
[12:24:57.817]        // -> [deviceID <= 0x00000000]
[12:24:57.817]      __var version = 0;
[12:24:57.819]        // -> [version <= 0x00000000]
[12:24:57.819]      __var partNum = 0;
[12:24:57.819]        // -> [partNum <= 0x00000000]
[12:24:57.819]      __var manuf = 0;
[12:24:57.819]        // -> [manuf <= 0x00000000]
[12:24:57.819]      __var isMSPM0G1X0X_G3X0X = 0;
[12:24:57.819]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:24:57.819]      __var isProduction = 0;
[12:24:57.819]        // -> [isProduction <= 0x00000000]
[12:24:57.819]      __var continueId = 0;
[12:24:57.819]        // -> [continueId <= 0x00000000]
[12:24:57.819]      deviceID =   Read32(0x41C40004);
[12:24:57.826]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:24:57.826]        // -> [deviceID <= 0x2BB8802F]
[12:24:57.826]      version = deviceID >> 28;
[12:24:57.826]        // -> [version <= 0x00000002]
[12:24:57.826]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:24:57.826]        // -> [partNum <= 0x0000BB88]
[12:24:57.826]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:24:57.826]        // -> [manuf <= 0x00000017]
[12:24:57.826]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:24:57.826]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:24:57.829]      isProduction = (version > 0);
[12:24:57.829]        // -> [isProduction <= 0x00000001]
[12:24:57.829]    </block>
[12:24:57.829]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:24:57.829]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:24:57.829]        // =>  FALSE
[12:24:57.829]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:24:57.829]    </control>
[12:24:57.829]    <control if="continueId == 4" while="" timeout="0" info="">
[12:24:57.829]      // if-block "continueId == 4"
[12:24:57.829]        // =>  FALSE
[12:24:57.829]      // skip if-block "continueId == 4"
[12:24:57.829]    </control>
[12:24:57.829]    <control if="!isProduction" while="" timeout="0" info="">
[12:24:57.829]      // if-block "!isProduction"
[12:24:57.829]        // =>  FALSE
[12:24:57.829]      // skip if-block "!isProduction"
[12:24:57.829]    </control>
[12:24:57.829]  </sequence>
[12:24:57.829]  
[12:26:15.699]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:26:15.699]  
[12:26:15.699]  <debugvars>
[12:26:15.699]    // Pre-defined
[12:26:15.699]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:26:15.699]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:26:15.699]    __dp=0x00000000
[12:26:15.699]    __ap=0x00000000
[12:26:15.699]    __traceout=0x00000000      (Trace Disabled)
[12:26:15.699]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:26:15.699]    __FlashAddr=0x00000000
[12:26:15.699]    __FlashLen=0x00000000
[12:26:15.699]    __FlashArg=0x00000000
[12:26:15.699]    __FlashOp=0x00000000
[12:26:15.699]    __Result=0x00000000
[12:26:15.701]  </debugvars>
[12:26:15.701]  
[12:26:15.701]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:26:15.701]    <block atomic="false" info="">
[12:26:15.701]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:26:15.701]        // -> [isSWJ <= 0x00000001]
[12:26:15.701]      __var hasDormant = __protocol & 0x00020000;
[12:26:15.701]        // -> [hasDormant <= 0x00000000]
[12:26:15.701]      __var protType   = __protocol & 0x0000FFFF;
[12:26:15.701]        // -> [protType <= 0x00000002]
[12:26:15.701]    </block>
[12:26:15.701]    <control if="protType == 1" while="" timeout="0" info="">
[12:26:15.701]      // if-block "protType == 1"
[12:26:15.701]        // =>  FALSE
[12:26:15.701]      // skip if-block "protType == 1"
[12:26:15.701]    </control>
[12:26:15.701]    <control if="protType == 2" while="" timeout="0" info="">
[12:26:15.701]      // if-block "protType == 2"
[12:26:15.703]        // =>  TRUE
[12:26:15.703]      <control if="isSWJ" while="" timeout="0" info="">
[12:26:15.703]        // if-block "isSWJ"
[12:26:15.703]          // =>  TRUE
[12:26:15.703]        <control if="hasDormant" while="" timeout="0" info="">
[12:26:15.703]          // if-block "hasDormant"
[12:26:15.703]            // =>  FALSE
[12:26:15.703]          // skip if-block "hasDormant"
[12:26:15.703]        </control>
[12:26:15.703]        <control if="!hasDormant" while="" timeout="0" info="">
[12:26:15.703]          // if-block "!hasDormant"
[12:26:15.703]            // =>  TRUE
[12:26:15.703]          <block atomic="false" info="">
[12:26:15.703]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:26:15.704]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:26:15.704]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:26:15.707]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:26:15.707]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:26:15.708]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:26:15.708]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:26:15.715]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:26:15.715]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:26:15.717]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:26:15.717]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:26:15.717]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:26:15.719]          </block>
[12:26:15.719]          // end if-block "!hasDormant"
[12:26:15.719]        </control>
[12:26:15.719]        // end if-block "isSWJ"
[12:26:15.719]      </control>
[12:26:15.719]      <control if="!isSWJ" while="" timeout="0" info="">
[12:26:15.719]        // if-block "!isSWJ"
[12:26:15.719]          // =>  FALSE
[12:26:15.719]        // skip if-block "!isSWJ"
[12:26:15.719]      </control>
[12:26:15.719]      <block atomic="false" info="">
[12:26:15.719]        ReadDP(0x0);
[12:26:15.721]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:26:15.721]      </block>
[12:26:15.721]      // end if-block "protType == 2"
[12:26:15.721]    </control>
[12:26:15.721]  </sequence>
[12:26:15.721]  
[12:26:15.725]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:26:15.725]  
[12:26:15.725]  <debugvars>
[12:26:15.725]    // Pre-defined
[12:26:15.725]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:26:15.725]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:26:15.725]    __dp=0x00000000
[12:26:15.725]    __ap=0x00000000
[12:26:15.725]    __traceout=0x00000000      (Trace Disabled)
[12:26:15.725]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:26:15.725]    __FlashAddr=0x00000000
[12:26:15.727]    __FlashLen=0x00000000
[12:26:15.727]    __FlashArg=0x00000000
[12:26:15.727]    __FlashOp=0x00000000
[12:26:15.727]    __Result=0x00000000
[12:26:15.727]  </debugvars>
[12:26:15.727]  
[12:26:15.727]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:26:15.727]    <block atomic="false" info="">
[12:26:15.727]      __var SW_DP_ABORT       = 0x0;
[12:26:15.727]        // -> [SW_DP_ABORT <= 0x00000000]
[12:26:15.727]      __var DP_CTRL_STAT      = 0x4;
[12:26:15.728]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:26:15.728]      __var DP_SELECT         = 0x8;
[12:26:15.728]        // -> [DP_SELECT <= 0x00000008]
[12:26:15.728]      __var powered_down      = 0;
[12:26:15.728]        // -> [powered_down <= 0x00000000]
[12:26:15.728]      WriteDP(DP_SELECT, 0x00000000);
[12:26:15.736]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:26:15.736]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:26:15.738]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:26:15.738]        // -> [powered_down <= 0x00000001]
[12:26:15.738]    </block>
[12:26:15.738]    <control if="powered_down" while="" timeout="0" info="">
[12:26:15.738]      // if-block "powered_down"
[12:26:15.738]        // =>  TRUE
[12:26:15.738]      <block atomic="false" info="">
[12:26:15.738]        Message(0, "Debug/System power-up request sent");
[12:26:15.741]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:26:15.743]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:26:15.743]      </block>
[12:26:15.743]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:26:15.743]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:26:15.745]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:26:15.745]        // while-condition  =>  FALSE
[12:26:15.745]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:26:15.745]      </control>
[12:26:15.745]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:26:15.746]        // if-block "(__protocol & 0xFFFF) == 1"
[12:26:15.746]          // =>  FALSE
[12:26:15.746]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:26:15.746]      </control>
[12:26:15.746]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:26:15.746]        // if-block "(__protocol & 0xFFFF) == 2"
[12:26:15.746]          // =>  TRUE
[12:26:15.746]        <block atomic="false" info="">
[12:26:15.746]          Message(0, "executing SWD power up");
[12:26:15.748]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:26:15.749]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:26:15.749]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:26:15.751]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:26:15.751]        </block>
[12:26:15.751]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:26:15.751]      </control>
[12:26:15.752]      // end if-block "powered_down"
[12:26:15.752]    </control>
[12:26:15.752]    <block atomic="false" info="">
[12:26:15.752]      __var DEBUG_PORT_VAL    = 0;
[12:26:15.752]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:26:15.752]      __var ACCESS_POINT_VAL  = 0;
[12:26:15.752]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:26:15.752]      __ap = 1; 
[12:26:15.752]        // -> [__ap <= 0x00000001]
[12:26:15.752]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:26:15.753]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:26:15.753]      __ap = 4;
[12:26:15.753]        // -> [__ap <= 0x00000004]
[12:26:15.753]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:26:15.763]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:26:15.763]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:26:15.763]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:26:15.766]    </block>
[12:26:15.766]    <block atomic="false" info="">
[12:26:15.766]      __var nReset = 0x80;
[12:26:15.766]        // -> [nReset <= 0x00000080]
[12:26:15.766]      __var canReadPins = 0;
[12:26:15.766]        // -> [canReadPins <= 0x00000000]
[12:26:15.766]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:26:15.768]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:26:15.768]        // -> [canReadPins <= 0x00000001]
[12:26:15.768]    </block>
[12:26:15.768]    <control if="" while="1" timeout="200" info="">
[12:26:15.768]      // while "1"  (timeout="200")
[12:26:15.768]      // while-condition  =>  TRUE
[12:26:15.768]      // while "1"  (timeout="200")
[12:26:15.768]      // while-condition  =>  TRUE
[12:26:15.768]      // while "1"  (timeout="200")
[12:26:15.768]      // while-condition  =>  TRUE
[12:26:15.768]      // while "1"  (timeout="200")
[12:26:15.768]      // while-condition  =>  TRUE
[12:26:15.768]      // while "1"  (timeout="200")
[12:26:15.768]      // while-condition  =>  TRUE
[12:26:15.768]      // while "1"  (timeout="200")
[12:26:15.768]      // while-condition  =>  TRUE
[12:26:15.768]      // while "1"  (timeout="200")
[12:26:15.768]      // while-condition  =>  TRUE
[12:26:15.768]      // while "1"  (timeout="200")
[12:26:15.768]      // while-condition  =>  TRUE
[12:26:15.768]      // while "1"  (timeout="200")
[12:26:15.768]      // while-condition  =>  TRUE
[12:26:15.768]      // while "1"  (timeout="200")
[12:26:15.768]      // while-condition  =>  TRUE
[12:26:15.768]      // while "1"  (timeout="200")
[12:26:15.768]      // while-condition  =>  TRUE
[12:26:15.768]      // while "1"  (timeout="200")
[12:26:15.770]      // while-condition  =>  TRUE
[12:26:15.770]      // while "1"  (timeout="200")
[12:26:15.771]      // while  =>  TIMEOUT
[12:26:15.771]      // end while "1"
[12:26:15.771]    </control>
[12:26:15.771]    <control if="canReadPins" while="" timeout="0" info="">
[12:26:15.771]      // if-block "canReadPins"
[12:26:15.771]        // =>  TRUE
[12:26:15.771]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:26:15.771]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:26:15.772]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:26:15.772]        // while-condition  =>  FALSE
[12:26:15.772]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:26:15.772]      </control>
[12:26:15.772]      // end if-block "canReadPins"
[12:26:15.772]    </control>
[12:26:15.772]    <control if="!canReadPins" while="" timeout="0" info="">
[12:26:15.772]      // if-block "!canReadPins"
[12:26:15.774]        // =>  FALSE
[12:26:15.774]      // skip if-block "!canReadPins"
[12:26:15.774]    </control>
[12:26:15.774]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:26:15.774]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:26:15.774]        // =>  TRUE
[12:26:15.774]      <block atomic="false" info="">
[12:26:15.774]        WriteAP(0x00, 0x190008);
[12:26:15.774]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:26:15.774]        WriteAP(0xF0, 0x01);
[12:26:15.781]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:26:15.782]      </block>
[12:26:15.782]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:26:15.782]    </control>
[12:26:15.782]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:26:15.782]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:26:15.782]        // =>  FALSE
[12:26:15.782]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:26:15.782]    </control>
[12:26:15.782]    <block atomic="false" info="">
[12:26:15.782]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:26:15.786]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:26:15.786]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:26:15.786]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:26:15.789]      __ap = 0; //lets make sure we reset the access point selection
[12:26:15.789]        // -> [__ap <= 0x00000000]
[12:26:15.789]    </block>
[12:26:15.789]  </sequence>
[12:26:15.789]  
[12:26:15.823]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:26:15.823]  
[12:26:15.823]  <debugvars>
[12:26:15.823]    // Pre-defined
[12:26:15.823]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:26:15.823]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:26:15.823]    __dp=0x00000000
[12:26:15.823]    __ap=0x00000000
[12:26:15.823]    __traceout=0x00000000      (Trace Disabled)
[12:26:15.823]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:26:15.823]    __FlashAddr=0x00000000
[12:26:15.823]    __FlashLen=0x00000000
[12:26:15.823]    __FlashArg=0x00000000
[12:26:15.823]    __FlashOp=0x00000000
[12:26:15.823]    __Result=0x00000000
[12:26:15.823]  </debugvars>
[12:26:15.823]  
[12:26:15.823]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:26:15.823]    <block atomic="false" info="">
[12:26:15.823]      __var deviceID = 0;
[12:26:15.823]        // -> [deviceID <= 0x00000000]
[12:26:15.823]      __var version = 0;
[12:26:15.823]        // -> [version <= 0x00000000]
[12:26:15.823]      __var partNum = 0;
[12:26:15.823]        // -> [partNum <= 0x00000000]
[12:26:15.823]      __var manuf = 0;
[12:26:15.823]        // -> [manuf <= 0x00000000]
[12:26:15.823]      __var isMSPM0G1X0X_G3X0X = 0;
[12:26:15.823]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:26:15.827]      __var isProduction = 0;
[12:26:15.827]        // -> [isProduction <= 0x00000000]
[12:26:15.827]      __var continueId = 0;
[12:26:15.827]        // -> [continueId <= 0x00000000]
[12:26:15.827]      deviceID =   Read32(0x41C40004);
[12:26:15.831]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:26:15.831]        // -> [deviceID <= 0x2BB8802F]
[12:26:15.831]      version = deviceID >> 28;
[12:26:15.831]        // -> [version <= 0x00000002]
[12:26:15.831]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:26:15.831]        // -> [partNum <= 0x0000BB88]
[12:26:15.831]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:26:15.831]        // -> [manuf <= 0x00000017]
[12:26:15.831]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:26:15.832]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:26:15.832]      isProduction = (version > 0);
[12:26:15.832]        // -> [isProduction <= 0x00000001]
[12:26:15.832]    </block>
[12:26:15.832]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:26:15.832]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:26:15.832]        // =>  FALSE
[12:26:15.832]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:26:15.832]    </control>
[12:26:15.832]    <control if="continueId == 4" while="" timeout="0" info="">
[12:26:15.832]      // if-block "continueId == 4"
[12:26:15.832]        // =>  FALSE
[12:26:15.832]      // skip if-block "continueId == 4"
[12:26:15.832]    </control>
[12:26:15.832]    <control if="!isProduction" while="" timeout="0" info="">
[12:26:15.832]      // if-block "!isProduction"
[12:26:15.832]        // =>  FALSE
[12:26:15.832]      // skip if-block "!isProduction"
[12:26:15.832]    </control>
[12:26:15.832]  </sequence>
[12:26:15.832]  
[12:26:22.551]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:26:22.551]  
[12:26:22.551]  <debugvars>
[12:26:22.551]    // Pre-defined
[12:26:22.554]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:26:22.554]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:26:22.554]    __dp=0x00000000
[12:26:22.554]    __ap=0x00000000
[12:26:22.554]    __traceout=0x00000000      (Trace Disabled)
[12:26:22.554]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:26:22.554]    __FlashAddr=0x00000000
[12:26:22.554]    __FlashLen=0x00000000
[12:26:22.554]    __FlashArg=0x00000000
[12:26:22.554]    __FlashOp=0x00000000
[12:26:22.554]    __Result=0x00000000
[12:26:22.554]  </debugvars>
[12:26:22.554]  
[12:26:22.554]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:26:22.554]    <block atomic="false" info="">
[12:26:22.554]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:26:22.554]        // -> [isSWJ <= 0x00000001]
[12:26:22.556]      __var hasDormant = __protocol & 0x00020000;
[12:26:22.556]        // -> [hasDormant <= 0x00000000]
[12:26:22.556]      __var protType   = __protocol & 0x0000FFFF;
[12:26:22.556]        // -> [protType <= 0x00000002]
[12:26:22.556]    </block>
[12:26:22.556]    <control if="protType == 1" while="" timeout="0" info="">
[12:26:22.557]      // if-block "protType == 1"
[12:26:22.557]        // =>  FALSE
[12:26:22.557]      // skip if-block "protType == 1"
[12:26:22.557]    </control>
[12:26:22.557]    <control if="protType == 2" while="" timeout="0" info="">
[12:26:22.557]      // if-block "protType == 2"
[12:26:22.557]        // =>  TRUE
[12:26:22.557]      <control if="isSWJ" while="" timeout="0" info="">
[12:26:22.557]        // if-block "isSWJ"
[12:26:22.557]          // =>  TRUE
[12:26:22.557]        <control if="hasDormant" while="" timeout="0" info="">
[12:26:22.557]          // if-block "hasDormant"
[12:26:22.557]            // =>  FALSE
[12:26:22.558]          // skip if-block "hasDormant"
[12:26:22.558]        </control>
[12:26:22.558]        <control if="!hasDormant" while="" timeout="0" info="">
[12:26:22.558]          // if-block "!hasDormant"
[12:26:22.558]            // =>  TRUE
[12:26:22.558]          <block atomic="false" info="">
[12:26:22.558]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:26:22.558]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:26:22.558]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:26:22.561]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:26:22.561]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:26:22.569]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:26:22.569]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:26:22.577]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:26:22.577]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:26:22.581]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:26:22.581]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:26:22.582]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:26:22.582]          </block>
[12:26:22.582]          // end if-block "!hasDormant"
[12:26:22.582]        </control>
[12:26:22.582]        // end if-block "isSWJ"
[12:26:22.582]      </control>
[12:26:22.582]      <control if="!isSWJ" while="" timeout="0" info="">
[12:26:22.582]        // if-block "!isSWJ"
[12:26:22.582]          // =>  FALSE
[12:26:22.582]        // skip if-block "!isSWJ"
[12:26:22.582]      </control>
[12:26:22.582]      <block atomic="false" info="">
[12:26:22.582]        ReadDP(0x0);
[12:26:22.584]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:26:22.584]      </block>
[12:26:22.584]      // end if-block "protType == 2"
[12:26:22.584]    </control>
[12:26:22.584]  </sequence>
[12:26:22.586]  
[12:26:22.589]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:26:22.589]  
[12:26:22.589]  <debugvars>
[12:26:22.589]    // Pre-defined
[12:26:22.589]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:26:22.589]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:26:22.589]    __dp=0x00000000
[12:26:22.589]    __ap=0x00000000
[12:26:22.589]    __traceout=0x00000000      (Trace Disabled)
[12:26:22.589]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:26:22.589]    __FlashAddr=0x00000000
[12:26:22.589]    __FlashLen=0x00000000
[12:26:22.589]    __FlashArg=0x00000000
[12:26:22.589]    __FlashOp=0x00000000
[12:26:22.589]    __Result=0x00000000
[12:26:22.589]  </debugvars>
[12:26:22.589]  
[12:26:22.589]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:26:22.589]    <block atomic="false" info="">
[12:26:22.589]      __var SW_DP_ABORT       = 0x0;
[12:26:22.589]        // -> [SW_DP_ABORT <= 0x00000000]
[12:26:22.591]      __var DP_CTRL_STAT      = 0x4;
[12:26:22.591]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:26:22.591]      __var DP_SELECT         = 0x8;
[12:26:22.591]        // -> [DP_SELECT <= 0x00000008]
[12:26:22.591]      __var powered_down      = 0;
[12:26:22.591]        // -> [powered_down <= 0x00000000]
[12:26:22.591]      WriteDP(DP_SELECT, 0x00000000);
[12:26:22.594]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:26:22.597]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:26:22.598]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:26:22.598]        // -> [powered_down <= 0x00000001]
[12:26:22.598]    </block>
[12:26:22.598]    <control if="powered_down" while="" timeout="0" info="">
[12:26:22.598]      // if-block "powered_down"
[12:26:22.598]        // =>  TRUE
[12:26:22.598]      <block atomic="false" info="">
[12:26:22.598]        Message(0, "Debug/System power-up request sent");
[12:26:22.600]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:26:22.604]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:26:22.604]      </block>
[12:26:22.604]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:26:22.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:26:22.605]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:26:22.605]        // while-condition  =>  FALSE
[12:26:22.605]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:26:22.605]      </control>
[12:26:22.605]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:26:22.605]        // if-block "(__protocol & 0xFFFF) == 1"
[12:26:22.605]          // =>  FALSE
[12:26:22.605]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:26:22.605]      </control>
[12:26:22.605]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:26:22.605]        // if-block "(__protocol & 0xFFFF) == 2"
[12:26:22.605]          // =>  TRUE
[12:26:22.605]        <block atomic="false" info="">
[12:26:22.605]          Message(0, "executing SWD power up");
[12:26:22.608]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:26:22.611]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:26:22.611]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:26:22.613]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:26:22.613]        </block>
[12:26:22.613]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:26:22.613]      </control>
[12:26:22.613]      // end if-block "powered_down"
[12:26:22.613]    </control>
[12:26:22.613]    <block atomic="false" info="">
[12:26:22.613]      __var DEBUG_PORT_VAL    = 0;
[12:26:22.614]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:26:22.614]      __var ACCESS_POINT_VAL  = 0;
[12:26:22.614]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:26:22.614]      __ap = 1; 
[12:26:22.614]        // -> [__ap <= 0x00000001]
[12:26:22.614]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:26:22.617]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:26:22.617]      __ap = 4;
[12:26:22.617]        // -> [__ap <= 0x00000004]
[12:26:22.617]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:26:22.621]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:26:22.621]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:26:22.621]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:26:22.622]    </block>
[12:26:22.622]    <block atomic="false" info="">
[12:26:22.622]      __var nReset = 0x80;
[12:26:22.622]        // -> [nReset <= 0x00000080]
[12:26:22.622]      __var canReadPins = 0;
[12:26:22.622]        // -> [canReadPins <= 0x00000000]
[12:26:22.622]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:26:22.625]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:26:22.625]        // -> [canReadPins <= 0x00000001]
[12:26:22.625]    </block>
[12:26:22.625]    <control if="" while="1" timeout="200" info="">
[12:26:22.625]      // while "1"  (timeout="200")
[12:26:22.625]      // while-condition  =>  TRUE
[12:26:22.625]      // while "1"  (timeout="200")
[12:26:22.625]      // while-condition  =>  TRUE
[12:26:22.625]      // while "1"  (timeout="200")
[12:26:22.629]      // while-condition  =>  TRUE
[12:26:22.629]      // while "1"  (timeout="200")
[12:26:22.629]      // while  =>  TIMEOUT
[12:26:22.629]      // end while "1"
[12:26:22.629]    </control>
[12:26:22.629]    <control if="canReadPins" while="" timeout="0" info="">
[12:26:22.629]      // if-block "canReadPins"
[12:26:22.629]        // =>  TRUE
[12:26:22.629]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:26:22.629]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:26:22.631]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:26:22.631]        // while-condition  =>  FALSE
[12:26:22.631]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:26:22.631]      </control>
[12:26:22.631]      // end if-block "canReadPins"
[12:26:22.631]    </control>
[12:26:22.631]    <control if="!canReadPins" while="" timeout="0" info="">
[12:26:22.631]      // if-block "!canReadPins"
[12:26:22.631]        // =>  FALSE
[12:26:22.631]      // skip if-block "!canReadPins"
[12:26:22.631]    </control>
[12:26:22.631]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:26:22.631]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:26:22.633]        // =>  TRUE
[12:26:22.633]      <block atomic="false" info="">
[12:26:22.633]        WriteAP(0x00, 0x190008);
[12:26:22.637]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:26:22.637]        WriteAP(0xF0, 0x01);
[12:26:22.642]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:26:22.642]      </block>
[12:26:22.642]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:26:22.642]    </control>
[12:26:22.642]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:26:22.642]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:26:22.642]        // =>  FALSE
[12:26:22.642]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:26:22.642]    </control>
[12:26:22.642]    <block atomic="false" info="">
[12:26:22.642]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:26:22.645]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:26:22.645]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:26:22.645]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:26:22.650]      __ap = 0; //lets make sure we reset the access point selection
[12:26:22.650]        // -> [__ap <= 0x00000000]
[12:26:22.650]    </block>
[12:26:22.650]  </sequence>
[12:26:22.650]  
[12:26:22.681]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:26:22.681]  
[12:26:22.681]  <debugvars>
[12:26:22.681]    // Pre-defined
[12:26:22.681]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:26:22.681]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:26:22.681]    __dp=0x00000000
[12:26:22.681]    __ap=0x00000000
[12:26:22.681]    __traceout=0x00000000      (Trace Disabled)
[12:26:22.681]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:26:22.681]    __FlashAddr=0x00000000
[12:26:22.681]    __FlashLen=0x00000000
[12:26:22.681]    __FlashArg=0x00000000
[12:26:22.683]    __FlashOp=0x00000000
[12:26:22.683]    __Result=0x00000000
[12:26:22.683]  </debugvars>
[12:26:22.683]  
[12:26:22.683]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:26:22.683]    <block atomic="false" info="">
[12:26:22.683]      __var deviceID = 0;
[12:26:22.683]        // -> [deviceID <= 0x00000000]
[12:26:22.683]      __var version = 0;
[12:26:22.683]        // -> [version <= 0x00000000]
[12:26:22.683]      __var partNum = 0;
[12:26:22.683]        // -> [partNum <= 0x00000000]
[12:26:22.684]      __var manuf = 0;
[12:26:22.684]        // -> [manuf <= 0x00000000]
[12:26:22.684]      __var isMSPM0G1X0X_G3X0X = 0;
[12:26:22.684]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:26:22.684]      __var isProduction = 0;
[12:26:22.684]        // -> [isProduction <= 0x00000000]
[12:26:22.684]      __var continueId = 0;
[12:26:22.684]        // -> [continueId <= 0x00000000]
[12:26:22.684]      deviceID =   Read32(0x41C40004);
[12:26:22.686]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:26:22.686]        // -> [deviceID <= 0x2BB8802F]
[12:26:22.686]      version = deviceID >> 28;
[12:26:22.686]        // -> [version <= 0x00000002]
[12:26:22.686]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:26:22.686]        // -> [partNum <= 0x0000BB88]
[12:26:22.686]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:26:22.690]        // -> [manuf <= 0x00000017]
[12:26:22.691]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:26:22.691]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:26:22.691]      isProduction = (version > 0);
[12:26:22.691]        // -> [isProduction <= 0x00000001]
[12:26:22.691]    </block>
[12:26:22.691]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:26:22.691]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:26:22.691]        // =>  FALSE
[12:26:22.692]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:26:22.692]    </control>
[12:26:22.692]    <control if="continueId == 4" while="" timeout="0" info="">
[12:26:22.692]      // if-block "continueId == 4"
[12:26:22.692]        // =>  FALSE
[12:26:22.692]      // skip if-block "continueId == 4"
[12:26:22.692]    </control>
[12:26:22.692]    <control if="!isProduction" while="" timeout="0" info="">
[12:26:22.692]      // if-block "!isProduction"
[12:26:22.692]        // =>  FALSE
[12:26:22.692]      // skip if-block "!isProduction"
[12:26:22.692]    </control>
[12:26:22.692]  </sequence>
[12:26:22.692]  
[12:27:49.766]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:27:49.766]  
[12:27:49.766]  <debugvars>
[12:27:49.766]    // Pre-defined
[12:27:49.766]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:49.766]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:27:49.766]    __dp=0x00000000
[12:27:49.766]    __ap=0x00000000
[12:27:49.766]    __traceout=0x00000000      (Trace Disabled)
[12:27:49.766]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:49.766]    __FlashAddr=0x00000000
[12:27:49.766]    __FlashLen=0x00000000
[12:27:49.766]    __FlashArg=0x00000000
[12:27:49.766]    __FlashOp=0x00000000
[12:27:49.766]    __Result=0x00000000
[12:27:49.766]  </debugvars>
[12:27:49.766]  
[12:27:49.766]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:27:49.766]    <block atomic="false" info="">
[12:27:49.769]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:27:49.769]        // -> [isSWJ <= 0x00000001]
[12:27:49.769]      __var hasDormant = __protocol & 0x00020000;
[12:27:49.769]        // -> [hasDormant <= 0x00000000]
[12:27:49.769]      __var protType   = __protocol & 0x0000FFFF;
[12:27:49.769]        // -> [protType <= 0x00000002]
[12:27:49.769]    </block>
[12:27:49.769]    <control if="protType == 1" while="" timeout="0" info="">
[12:27:49.769]      // if-block "protType == 1"
[12:27:49.769]        // =>  FALSE
[12:27:49.769]      // skip if-block "protType == 1"
[12:27:49.769]    </control>
[12:27:49.769]    <control if="protType == 2" while="" timeout="0" info="">
[12:27:49.769]      // if-block "protType == 2"
[12:27:49.769]        // =>  TRUE
[12:27:49.769]      <control if="isSWJ" while="" timeout="0" info="">
[12:27:49.769]        // if-block "isSWJ"
[12:27:49.769]          // =>  TRUE
[12:27:49.769]        <control if="hasDormant" while="" timeout="0" info="">
[12:27:49.769]          // if-block "hasDormant"
[12:27:49.769]            // =>  FALSE
[12:27:49.771]          // skip if-block "hasDormant"
[12:27:49.771]        </control>
[12:27:49.771]        <control if="!hasDormant" while="" timeout="0" info="">
[12:27:49.771]          // if-block "!hasDormant"
[12:27:49.771]            // =>  TRUE
[12:27:49.771]          <block atomic="false" info="">
[12:27:49.771]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:27:49.772]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:49.772]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:27:49.776]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:27:49.776]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:27:49.780]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:49.780]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:27:49.782]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:27:49.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:27:49.782]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:49.782]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:27:49.786]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:27:49.786]          </block>
[12:27:49.786]          // end if-block "!hasDormant"
[12:27:49.786]        </control>
[12:27:49.786]        // end if-block "isSWJ"
[12:27:49.786]      </control>
[12:27:49.786]      <control if="!isSWJ" while="" timeout="0" info="">
[12:27:49.786]        // if-block "!isSWJ"
[12:27:49.786]          // =>  FALSE
[12:27:49.786]        // skip if-block "!isSWJ"
[12:27:49.788]      </control>
[12:27:49.788]      <block atomic="false" info="">
[12:27:49.788]        ReadDP(0x0);
[12:27:49.790]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:27:49.790]      </block>
[12:27:49.790]      // end if-block "protType == 2"
[12:27:49.790]    </control>
[12:27:49.790]  </sequence>
[12:27:49.790]  
[12:27:49.793]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:27:49.793]  
[12:27:49.793]  <debugvars>
[12:27:49.793]    // Pre-defined
[12:27:49.793]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:49.793]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:27:49.793]    __dp=0x00000000
[12:27:49.793]    __ap=0x00000000
[12:27:49.793]    __traceout=0x00000000      (Trace Disabled)
[12:27:49.793]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:49.793]    __FlashAddr=0x00000000
[12:27:49.793]    __FlashLen=0x00000000
[12:27:49.793]    __FlashArg=0x00000000
[12:27:49.793]    __FlashOp=0x00000000
[12:27:49.793]    __Result=0x00000000
[12:27:49.793]  </debugvars>
[12:27:49.793]  
[12:27:49.795]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:27:49.795]    <block atomic="false" info="">
[12:27:49.795]      __var SW_DP_ABORT       = 0x0;
[12:27:49.795]        // -> [SW_DP_ABORT <= 0x00000000]
[12:27:49.795]      __var DP_CTRL_STAT      = 0x4;
[12:27:49.795]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:27:49.795]      __var DP_SELECT         = 0x8;
[12:27:49.795]        // -> [DP_SELECT <= 0x00000008]
[12:27:49.795]      __var powered_down      = 0;
[12:27:49.795]        // -> [powered_down <= 0x00000000]
[12:27:49.795]      WriteDP(DP_SELECT, 0x00000000);
[12:27:49.797]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:27:49.797]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:27:49.801]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:27:49.801]        // -> [powered_down <= 0x00000001]
[12:27:49.801]    </block>
[12:27:49.801]    <control if="powered_down" while="" timeout="0" info="">
[12:27:49.801]      // if-block "powered_down"
[12:27:49.801]        // =>  TRUE
[12:27:49.801]      <block atomic="false" info="">
[12:27:49.801]        Message(0, "Debug/System power-up request sent");
[12:27:49.803]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:27:49.805]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:27:49.805]      </block>
[12:27:49.805]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:27:49.805]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:27:49.807]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:27:49.807]        // while-condition  =>  FALSE
[12:27:49.807]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:27:49.807]      </control>
[12:27:49.807]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:27:49.807]        // if-block "(__protocol & 0xFFFF) == 1"
[12:27:49.807]          // =>  FALSE
[12:27:49.807]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:27:49.807]      </control>
[12:27:49.807]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:27:49.807]        // if-block "(__protocol & 0xFFFF) == 2"
[12:27:49.807]          // =>  TRUE
[12:27:49.807]        <block atomic="false" info="">
[12:27:49.807]          Message(0, "executing SWD power up");
[12:27:49.812]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:27:49.814]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:27:49.814]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:27:49.818]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:27:49.818]        </block>
[12:27:49.818]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:27:49.818]      </control>
[12:27:49.821]      // end if-block "powered_down"
[12:27:49.821]    </control>
[12:27:49.821]    <block atomic="false" info="">
[12:27:49.821]      __var DEBUG_PORT_VAL    = 0;
[12:27:49.821]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:27:49.821]      __var ACCESS_POINT_VAL  = 0;
[12:27:49.821]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:27:49.821]      __ap = 1; 
[12:27:49.821]        // -> [__ap <= 0x00000001]
[12:27:49.821]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:27:49.825]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:27:49.825]      __ap = 4;
[12:27:49.828]        // -> [__ap <= 0x00000004]
[12:27:49.828]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:27:49.832]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:27:49.832]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:27:49.832]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:27:49.834]    </block>
[12:27:49.835]    <block atomic="false" info="">
[12:27:49.835]      __var nReset = 0x80;
[12:27:49.835]        // -> [nReset <= 0x00000080]
[12:27:49.835]      __var canReadPins = 0;
[12:27:49.835]        // -> [canReadPins <= 0x00000000]
[12:27:49.835]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:27:49.837]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:27:49.837]        // -> [canReadPins <= 0x00000001]
[12:27:49.838]    </block>
[12:27:49.838]    <control if="" while="1" timeout="200" info="">
[12:27:49.838]      // while "1"  (timeout="200")
[12:27:49.838]      // while-condition  =>  TRUE
[12:27:49.838]      // while "1"  (timeout="200")
[12:27:49.838]      // while-condition  =>  TRUE
[12:27:49.838]      // while "1"  (timeout="200")
[12:27:49.838]      // while-condition  =>  TRUE
[12:27:49.840]      // while "1"  (timeout="200")
[12:27:49.840]      // while-condition  =>  TRUE
[12:27:49.840]      // while "1"  (timeout="200")
[12:27:49.840]      // while-condition  =>  TRUE
[12:27:49.840]      // while "1"  (timeout="200")
[12:27:49.840]      // while-condition  =>  TRUE
[12:27:49.840]      // while "1"  (timeout="200")
[12:27:49.840]      // while-condition  =>  TRUE
[12:27:49.840]      // while "1"  (timeout="200")
[12:27:49.840]      // while-condition  =>  TRUE
[12:27:49.840]      // while "1"  (timeout="200")
[12:27:49.841]      // while-condition  =>  TRUE
[12:27:49.841]      // while "1"  (timeout="200")
[12:27:49.841]      // while-condition  =>  TRUE
[12:27:49.841]      // while "1"  (timeout="200")
[12:27:49.841]      // while-condition  =>  TRUE
[12:27:49.841]      // while "1"  (timeout="200")
[12:27:49.841]      // while-condition  =>  TRUE
[12:27:49.841]      // while "1"  (timeout="200")
[12:27:49.841]      // while-condition  =>  TRUE
[12:27:49.841]      // while "1"  (timeout="200")
[12:27:49.841]      // while-condition  =>  TRUE
[12:27:49.841]      // while "1"  (timeout="200")
[12:27:49.841]      // while-condition  =>  TRUE
[12:27:49.841]      // while "1"  (timeout="200")
[12:27:49.841]      // while-condition  =>  TRUE
[12:27:49.841]      // while "1"  (timeout="200")
[12:27:49.841]      // while-condition  =>  TRUE
[12:27:49.841]      // while "1"  (timeout="200")
[12:27:49.843]      // while-condition  =>  TRUE
[12:27:49.843]      // while "1"  (timeout="200")
[12:27:49.843]      // while-condition  =>  TRUE
[12:27:49.843]      // while "1"  (timeout="200")
[12:27:49.843]      // while-condition  =>  TRUE
[12:27:49.843]      // while "1"  (timeout="200")
[12:27:49.843]      // while-condition  =>  TRUE
[12:27:49.843]      // while "1"  (timeout="200")
[12:27:49.843]      // while-condition  =>  TRUE
[12:27:49.843]      // while "1"  (timeout="200")
[12:27:49.843]      // while-condition  =>  TRUE
[12:27:49.843]      // while "1"  (timeout="200")
[12:27:49.843]      // while-condition  =>  TRUE
[12:27:49.843]      // while "1"  (timeout="200")
[12:27:49.844]      // while-condition  =>  TRUE
[12:27:49.844]      // while "1"  (timeout="200")
[12:27:49.844]      // while-condition  =>  TRUE
[12:27:49.844]      // while "1"  (timeout="200")
[12:27:49.844]      // while-condition  =>  TRUE
[12:27:49.844]      // while "1"  (timeout="200")
[12:27:49.844]      // while-condition  =>  TRUE
[12:27:49.844]      // while "1"  (timeout="200")
[12:27:49.844]      // while-condition  =>  TRUE
[12:27:49.844]      // while "1"  (timeout="200")
[12:27:49.844]      // while-condition  =>  TRUE
[12:27:49.844]      // while "1"  (timeout="200")
[12:27:49.844]      // while-condition  =>  TRUE
[12:27:49.845]      // while "1"  (timeout="200")
[12:27:49.845]      // while-condition  =>  TRUE
[12:27:49.845]      // while "1"  (timeout="200")
[12:27:49.845]      // while-condition  =>  TRUE
[12:27:49.845]      // while "1"  (timeout="200")
[12:27:49.845]      // while-condition  =>  TRUE
[12:27:49.845]      // while "1"  (timeout="200")
[12:27:49.845]      // while-condition  =>  TRUE
[12:27:49.845]      // while "1"  (timeout="200")
[12:27:49.845]      // while-condition  =>  TRUE
[12:27:49.845]      // while "1"  (timeout="200")
[12:27:49.845]      // while-condition  =>  TRUE
[12:27:49.845]      // while "1"  (timeout="200")
[12:27:49.845]      // while-condition  =>  TRUE
[12:27:49.845]      // while "1"  (timeout="200")
[12:27:49.847]      // while-condition  =>  TRUE
[12:27:49.847]      // while "1"  (timeout="200")
[12:27:49.847]      // while-condition  =>  TRUE
[12:27:49.847]      // while "1"  (timeout="200")
[12:27:49.847]      // while-condition  =>  TRUE
[12:27:49.847]      // while "1"  (timeout="200")
[12:27:49.847]      // while-condition  =>  TRUE
[12:27:49.847]      // while "1"  (timeout="200")
[12:27:49.847]      // while-condition  =>  TRUE
[12:27:49.847]      // while "1"  (timeout="200")
[12:27:49.847]      // while-condition  =>  TRUE
[12:27:49.847]      // while "1"  (timeout="200")
[12:27:49.847]      // while-condition  =>  TRUE
[12:27:49.847]      // while "1"  (timeout="200")
[12:27:49.847]      // while-condition  =>  TRUE
[12:27:49.847]      // while "1"  (timeout="200")
[12:27:49.847]      // while-condition  =>  TRUE
[12:27:49.847]      // while "1"  (timeout="200")
[12:27:49.849]      // while-condition  =>  TRUE
[12:27:49.849]      // while "1"  (timeout="200")
[12:27:49.849]      // while  =>  TIMEOUT
[12:27:49.849]      // end while "1"
[12:27:49.849]    </control>
[12:27:49.849]    <control if="canReadPins" while="" timeout="0" info="">
[12:27:49.849]      // if-block "canReadPins"
[12:27:49.849]        // =>  TRUE
[12:27:49.850]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:27:49.850]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:27:49.853]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:27:49.853]        // while-condition  =>  FALSE
[12:27:49.853]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:27:49.853]      </control>
[12:27:49.853]      // end if-block "canReadPins"
[12:27:49.853]    </control>
[12:27:49.853]    <control if="!canReadPins" while="" timeout="0" info="">
[12:27:49.853]      // if-block "!canReadPins"
[12:27:49.853]        // =>  FALSE
[12:27:49.853]      // skip if-block "!canReadPins"
[12:27:49.853]    </control>
[12:27:49.853]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:27:49.853]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:27:49.853]        // =>  TRUE
[12:27:49.853]      <block atomic="false" info="">
[12:27:49.853]        WriteAP(0x00, 0x190008);
[12:27:49.857]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:27:49.857]        WriteAP(0xF0, 0x01);
[12:27:49.866]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:27:49.866]      </block>
[12:27:49.866]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:27:49.866]    </control>
[12:27:49.866]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:27:49.866]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:27:49.866]        // =>  FALSE
[12:27:49.867]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:27:49.867]    </control>
[12:27:49.867]    <block atomic="false" info="">
[12:27:49.867]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:27:49.874]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:27:49.874]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:27:49.874]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:27:49.876]      __ap = 0; //lets make sure we reset the access point selection
[12:27:49.877]        // -> [__ap <= 0x00000000]
[12:27:49.877]    </block>
[12:27:49.877]  </sequence>
[12:27:49.877]  
[12:27:49.907]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:27:49.907]  
[12:27:49.907]  <debugvars>
[12:27:49.907]    // Pre-defined
[12:27:49.907]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:49.907]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:27:49.907]    __dp=0x00000000
[12:27:49.910]    __ap=0x00000000
[12:27:49.910]    __traceout=0x00000000      (Trace Disabled)
[12:27:49.910]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:49.910]    __FlashAddr=0x00000000
[12:27:49.910]    __FlashLen=0x00000000
[12:27:49.910]    __FlashArg=0x00000000
[12:27:49.910]    __FlashOp=0x00000000
[12:27:49.910]    __Result=0x00000000
[12:27:49.910]  </debugvars>
[12:27:49.910]  
[12:27:49.910]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:27:49.911]    <block atomic="false" info="">
[12:27:49.911]      __var deviceID = 0;
[12:27:49.911]        // -> [deviceID <= 0x00000000]
[12:27:49.911]      __var version = 0;
[12:27:49.911]        // -> [version <= 0x00000000]
[12:27:49.911]      __var partNum = 0;
[12:27:49.911]        // -> [partNum <= 0x00000000]
[12:27:49.911]      __var manuf = 0;
[12:27:49.911]        // -> [manuf <= 0x00000000]
[12:27:49.911]      __var isMSPM0G1X0X_G3X0X = 0;
[12:27:49.911]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:27:49.911]      __var isProduction = 0;
[12:27:49.911]        // -> [isProduction <= 0x00000000]
[12:27:49.911]      __var continueId = 0;
[12:27:49.911]        // -> [continueId <= 0x00000000]
[12:27:49.911]      deviceID =   Read32(0x41C40004);
[12:27:49.918]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:27:49.918]        // -> [deviceID <= 0x2BB8802F]
[12:27:49.918]      version = deviceID >> 28;
[12:27:49.918]        // -> [version <= 0x00000002]
[12:27:49.918]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:27:49.920]        // -> [partNum <= 0x0000BB88]
[12:27:49.920]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:27:49.920]        // -> [manuf <= 0x00000017]
[12:27:49.920]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:27:49.920]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:27:49.920]      isProduction = (version > 0);
[12:27:49.920]        // -> [isProduction <= 0x00000001]
[12:27:49.920]    </block>
[12:27:49.920]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:27:49.920]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:27:49.920]        // =>  FALSE
[12:27:49.920]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:27:49.920]    </control>
[12:27:49.920]    <control if="continueId == 4" while="" timeout="0" info="">
[12:27:49.920]      // if-block "continueId == 4"
[12:27:49.920]        // =>  FALSE
[12:27:49.920]      // skip if-block "continueId == 4"
[12:27:49.921]    </control>
[12:27:49.921]    <control if="!isProduction" while="" timeout="0" info="">
[12:27:49.921]      // if-block "!isProduction"
[12:27:49.921]        // =>  FALSE
[12:27:49.921]      // skip if-block "!isProduction"
[12:27:49.921]    </control>
[12:27:49.921]  </sequence>
[12:27:49.921]  
[12:27:56.493]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:27:56.493]  
[12:27:56.503]  <debugvars>
[12:27:56.503]    // Pre-defined
[12:27:56.503]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:56.503]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:27:56.503]    __dp=0x00000000
[12:27:56.504]    __ap=0x00000000
[12:27:56.504]    __traceout=0x00000000      (Trace Disabled)
[12:27:56.504]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:56.504]    __FlashAddr=0x00000000
[12:27:56.504]    __FlashLen=0x00000000
[12:27:56.504]    __FlashArg=0x00000000
[12:27:56.504]    __FlashOp=0x00000000
[12:27:56.504]    __Result=0x00000000
[12:27:56.504]  </debugvars>
[12:27:56.504]  
[12:27:56.504]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:27:56.504]    <block atomic="false" info="">
[12:27:56.504]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:27:56.504]        // -> [isSWJ <= 0x00000001]
[12:27:56.504]      __var hasDormant = __protocol & 0x00020000;
[12:27:56.504]        // -> [hasDormant <= 0x00000000]
[12:27:56.504]      __var protType   = __protocol & 0x0000FFFF;
[12:27:56.504]        // -> [protType <= 0x00000002]
[12:27:56.504]    </block>
[12:27:56.504]    <control if="protType == 1" while="" timeout="0" info="">
[12:27:56.506]      // if-block "protType == 1"
[12:27:56.506]        // =>  FALSE
[12:27:56.506]      // skip if-block "protType == 1"
[12:27:56.506]    </control>
[12:27:56.506]    <control if="protType == 2" while="" timeout="0" info="">
[12:27:56.506]      // if-block "protType == 2"
[12:27:56.506]        // =>  TRUE
[12:27:56.506]      <control if="isSWJ" while="" timeout="0" info="">
[12:27:56.506]        // if-block "isSWJ"
[12:27:56.506]          // =>  TRUE
[12:27:56.506]        <control if="hasDormant" while="" timeout="0" info="">
[12:27:56.506]          // if-block "hasDormant"
[12:27:56.506]            // =>  FALSE
[12:27:56.506]          // skip if-block "hasDormant"
[12:27:56.506]        </control>
[12:27:56.506]        <control if="!hasDormant" while="" timeout="0" info="">
[12:27:56.506]          // if-block "!hasDormant"
[12:27:56.506]            // =>  TRUE
[12:27:56.508]          <block atomic="false" info="">
[12:27:56.508]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:27:56.511]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:56.511]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:27:56.513]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:27:56.513]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:27:56.514]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:56.514]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:27:56.514]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:27:56.516]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:27:56.517]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:27:56.517]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:27:56.518]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:27:56.518]          </block>
[12:27:56.518]          // end if-block "!hasDormant"
[12:27:56.518]        </control>
[12:27:56.518]        // end if-block "isSWJ"
[12:27:56.518]      </control>
[12:27:56.518]      <control if="!isSWJ" while="" timeout="0" info="">
[12:27:56.518]        // if-block "!isSWJ"
[12:27:56.518]          // =>  FALSE
[12:27:56.518]        // skip if-block "!isSWJ"
[12:27:56.518]      </control>
[12:27:56.520]      <block atomic="false" info="">
[12:27:56.520]        ReadDP(0x0);
[12:27:56.521]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:27:56.521]      </block>
[12:27:56.522]      // end if-block "protType == 2"
[12:27:56.522]    </control>
[12:27:56.522]  </sequence>
[12:27:56.522]  
[12:27:56.524]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:27:56.524]  
[12:27:56.524]  <debugvars>
[12:27:56.524]    // Pre-defined
[12:27:56.524]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:56.524]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:27:56.524]    __dp=0x00000000
[12:27:56.524]    __ap=0x00000000
[12:27:56.524]    __traceout=0x00000000      (Trace Disabled)
[12:27:56.524]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:56.526]    __FlashAddr=0x00000000
[12:27:56.526]    __FlashLen=0x00000000
[12:27:56.526]    __FlashArg=0x00000000
[12:27:56.526]    __FlashOp=0x00000000
[12:27:56.526]    __Result=0x00000000
[12:27:56.526]  </debugvars>
[12:27:56.526]  
[12:27:56.526]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:27:56.526]    <block atomic="false" info="">
[12:27:56.526]      __var SW_DP_ABORT       = 0x0;
[12:27:56.526]        // -> [SW_DP_ABORT <= 0x00000000]
[12:27:56.526]      __var DP_CTRL_STAT      = 0x4;
[12:27:56.526]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:27:56.526]      __var DP_SELECT         = 0x8;
[12:27:56.526]        // -> [DP_SELECT <= 0x00000008]
[12:27:56.526]      __var powered_down      = 0;
[12:27:56.526]        // -> [powered_down <= 0x00000000]
[12:27:56.526]      WriteDP(DP_SELECT, 0x00000000);
[12:27:56.529]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:27:56.529]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:27:56.530]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:27:56.531]        // -> [powered_down <= 0x00000001]
[12:27:56.531]    </block>
[12:27:56.531]    <control if="powered_down" while="" timeout="0" info="">
[12:27:56.531]      // if-block "powered_down"
[12:27:56.531]        // =>  TRUE
[12:27:56.531]      <block atomic="false" info="">
[12:27:56.531]        Message(0, "Debug/System power-up request sent");
[12:27:56.532]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:27:56.535]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:27:56.535]      </block>
[12:27:56.535]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:27:56.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:27:56.536]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:27:56.536]        // while-condition  =>  FALSE
[12:27:56.536]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:27:56.536]      </control>
[12:27:56.536]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:27:56.538]        // if-block "(__protocol & 0xFFFF) == 1"
[12:27:56.538]          // =>  FALSE
[12:27:56.538]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:27:56.538]      </control>
[12:27:56.538]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:27:56.538]        // if-block "(__protocol & 0xFFFF) == 2"
[12:27:56.538]          // =>  TRUE
[12:27:56.538]        <block atomic="false" info="">
[12:27:56.538]          Message(0, "executing SWD power up");
[12:27:56.540]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:27:56.542]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:27:56.542]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:27:56.543]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:27:56.543]        </block>
[12:27:56.543]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:27:56.543]      </control>
[12:27:56.543]      // end if-block "powered_down"
[12:27:56.543]    </control>
[12:27:56.546]    <block atomic="false" info="">
[12:27:56.546]      __var DEBUG_PORT_VAL    = 0;
[12:27:56.546]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:27:56.546]      __var ACCESS_POINT_VAL  = 0;
[12:27:56.546]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:27:56.546]      __ap = 1; 
[12:27:56.546]        // -> [__ap <= 0x00000001]
[12:27:56.546]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:27:56.553]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:27:56.553]      __ap = 4;
[12:27:56.553]        // -> [__ap <= 0x00000004]
[12:27:56.553]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:27:56.555]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:27:56.555]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:27:56.558]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:27:56.560]    </block>
[12:27:56.560]    <block atomic="false" info="">
[12:27:56.560]      __var nReset = 0x80;
[12:27:56.560]        // -> [nReset <= 0x00000080]
[12:27:56.560]      __var canReadPins = 0;
[12:27:56.560]        // -> [canReadPins <= 0x00000000]
[12:27:56.560]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:27:56.563]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:27:56.563]        // -> [canReadPins <= 0x00000001]
[12:27:56.563]    </block>
[12:27:56.563]    <control if="" while="1" timeout="200" info="">
[12:27:56.563]      // while "1"  (timeout="200")
[12:27:56.563]      // while-condition  =>  TRUE
[12:27:56.563]      // while "1"  (timeout="200")
[12:27:56.564]      // while-condition  =>  TRUE
[12:27:56.564]      // while "1"  (timeout="200")
[12:27:56.564]      // while-condition  =>  TRUE
[12:27:56.564]      // while "1"  (timeout="200")
[12:27:56.564]      // while-condition  =>  TRUE
[12:27:56.564]      // while "1"  (timeout="200")
[12:27:56.565]      // while-condition  =>  TRUE
[12:27:56.565]      // while "1"  (timeout="200")
[12:27:56.565]      // while-condition  =>  TRUE
[12:27:56.565]      // while "1"  (timeout="200")
[12:27:56.565]      // while-condition  =>  TRUE
[12:27:56.565]      // while "1"  (timeout="200")
[12:27:56.565]      // while-condition  =>  TRUE
[12:27:56.565]      // while "1"  (timeout="200")
[12:27:56.565]      // while-condition  =>  TRUE
[12:27:56.565]      // while "1"  (timeout="200")
[12:27:56.565]      // while-condition  =>  TRUE
[12:27:56.566]      // while "1"  (timeout="200")
[12:27:56.566]      // while-condition  =>  TRUE
[12:27:56.566]      // while "1"  (timeout="200")
[12:27:56.566]      // while-condition  =>  TRUE
[12:27:56.566]      // while "1"  (timeout="200")
[12:27:56.566]      // while-condition  =>  TRUE
[12:27:56.567]      // while "1"  (timeout="200")
[12:27:56.567]      // while  =>  TIMEOUT
[12:27:56.567]      // end while "1"
[12:27:56.567]    </control>
[12:27:56.567]    <control if="canReadPins" while="" timeout="0" info="">
[12:27:56.567]      // if-block "canReadPins"
[12:27:56.568]        // =>  TRUE
[12:27:56.568]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:27:56.568]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:27:56.569]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:27:56.569]        // while-condition  =>  FALSE
[12:27:56.569]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:27:56.569]      </control>
[12:27:56.569]      // end if-block "canReadPins"
[12:27:56.569]    </control>
[12:27:56.570]    <control if="!canReadPins" while="" timeout="0" info="">
[12:27:56.570]      // if-block "!canReadPins"
[12:27:56.570]        // =>  FALSE
[12:27:56.570]      // skip if-block "!canReadPins"
[12:27:56.570]    </control>
[12:27:56.570]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:27:56.570]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:27:56.570]        // =>  TRUE
[12:27:56.570]      <block atomic="false" info="">
[12:27:56.571]        WriteAP(0x00, 0x190008);
[12:27:56.572]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:27:56.572]        WriteAP(0xF0, 0x01);
[12:27:56.576]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:27:56.576]      </block>
[12:27:56.580]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:27:56.580]    </control>
[12:27:56.580]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:27:56.580]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:27:56.580]        // =>  FALSE
[12:27:56.580]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:27:56.580]    </control>
[12:27:56.580]    <block atomic="false" info="">
[12:27:56.580]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:27:56.582]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:27:56.584]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:27:56.584]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:27:56.585]      __ap = 0; //lets make sure we reset the access point selection
[12:27:56.585]        // -> [__ap <= 0x00000000]
[12:27:56.585]    </block>
[12:27:56.585]  </sequence>
[12:27:56.585]  
[12:27:56.610]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:27:56.610]  
[12:27:56.610]  <debugvars>
[12:27:56.610]    // Pre-defined
[12:27:56.610]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:27:56.610]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:27:56.610]    __dp=0x00000000
[12:27:56.610]    __ap=0x00000000
[12:27:56.610]    __traceout=0x00000000      (Trace Disabled)
[12:27:56.610]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:27:56.611]    __FlashAddr=0x00000000
[12:27:56.611]    __FlashLen=0x00000000
[12:27:56.611]    __FlashArg=0x00000000
[12:27:56.611]    __FlashOp=0x00000000
[12:27:56.611]    __Result=0x00000000
[12:27:56.611]  </debugvars>
[12:27:56.611]  
[12:27:56.611]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:27:56.611]    <block atomic="false" info="">
[12:27:56.611]      __var deviceID = 0;
[12:27:56.611]        // -> [deviceID <= 0x00000000]
[12:27:56.611]      __var version = 0;
[12:27:56.611]        // -> [version <= 0x00000000]
[12:27:56.611]      __var partNum = 0;
[12:27:56.611]        // -> [partNum <= 0x00000000]
[12:27:56.611]      __var manuf = 0;
[12:27:56.611]        // -> [manuf <= 0x00000000]
[12:27:56.611]      __var isMSPM0G1X0X_G3X0X = 0;
[12:27:56.611]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:27:56.611]      __var isProduction = 0;
[12:27:56.611]        // -> [isProduction <= 0x00000000]
[12:27:56.611]      __var continueId = 0;
[12:27:56.611]        // -> [continueId <= 0x00000000]
[12:27:56.611]      deviceID =   Read32(0x41C40004);
[12:27:56.623]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:27:56.623]        // -> [deviceID <= 0x2BB8802F]
[12:27:56.628]      version = deviceID >> 28;
[12:27:56.628]        // -> [version <= 0x00000002]
[12:27:56.628]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:27:56.628]        // -> [partNum <= 0x0000BB88]
[12:27:56.628]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:27:56.628]        // -> [manuf <= 0x00000017]
[12:27:56.628]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:27:56.628]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:27:56.628]      isProduction = (version > 0);
[12:27:56.628]        // -> [isProduction <= 0x00000001]
[12:27:56.628]    </block>
[12:27:56.628]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:27:56.628]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:27:56.628]        // =>  FALSE
[12:27:56.628]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:27:56.628]    </control>
[12:27:56.628]    <control if="continueId == 4" while="" timeout="0" info="">
[12:27:56.630]      // if-block "continueId == 4"
[12:27:56.630]        // =>  FALSE
[12:27:56.630]      // skip if-block "continueId == 4"
[12:27:56.630]    </control>
[12:27:56.630]    <control if="!isProduction" while="" timeout="0" info="">
[12:27:56.630]      // if-block "!isProduction"
[12:27:56.630]        // =>  FALSE
[12:27:56.630]      // skip if-block "!isProduction"
[12:27:56.630]    </control>
[12:27:56.630]  </sequence>
[12:27:56.631]  
[12:29:23.321]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:29:23.321]  
[12:29:23.331]  <debugvars>
[12:29:23.331]    // Pre-defined
[12:29:23.331]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:29:23.331]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:29:23.331]    __dp=0x00000000
[12:29:23.331]    __ap=0x00000000
[12:29:23.331]    __traceout=0x00000000      (Trace Disabled)
[12:29:23.331]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:29:23.331]    __FlashAddr=0x00000000
[12:29:23.331]    __FlashLen=0x00000000
[12:29:23.331]    __FlashArg=0x00000000
[12:29:23.331]    __FlashOp=0x00000000
[12:29:23.331]    __Result=0x00000000
[12:29:23.331]  </debugvars>
[12:29:23.331]  
[12:29:23.331]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:29:23.331]    <block atomic="false" info="">
[12:29:23.331]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:29:23.331]        // -> [isSWJ <= 0x00000001]
[12:29:23.331]      __var hasDormant = __protocol & 0x00020000;
[12:29:23.331]        // -> [hasDormant <= 0x00000000]
[12:29:23.331]      __var protType   = __protocol & 0x0000FFFF;
[12:29:23.331]        // -> [protType <= 0x00000002]
[12:29:23.331]    </block>
[12:29:23.331]    <control if="protType == 1" while="" timeout="0" info="">
[12:29:23.331]      // if-block "protType == 1"
[12:29:23.331]        // =>  FALSE
[12:29:23.331]      // skip if-block "protType == 1"
[12:29:23.331]    </control>
[12:29:23.331]    <control if="protType == 2" while="" timeout="0" info="">
[12:29:23.331]      // if-block "protType == 2"
[12:29:23.331]        // =>  TRUE
[12:29:23.331]      <control if="isSWJ" while="" timeout="0" info="">
[12:29:23.331]        // if-block "isSWJ"
[12:29:23.331]          // =>  TRUE
[12:29:23.331]        <control if="hasDormant" while="" timeout="0" info="">
[12:29:23.331]          // if-block "hasDormant"
[12:29:23.331]            // =>  FALSE
[12:29:23.331]          // skip if-block "hasDormant"
[12:29:23.335]        </control>
[12:29:23.335]        <control if="!hasDormant" while="" timeout="0" info="">
[12:29:23.335]          // if-block "!hasDormant"
[12:29:23.335]            // =>  TRUE
[12:29:23.335]          <block atomic="false" info="">
[12:29:23.335]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:29:23.337]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:29:23.337]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:29:23.339]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:29:23.339]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:29:23.340]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:29:23.341]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:29:23.347]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:29:23.347]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:29:23.349]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:29:23.349]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:29:23.351]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:29:23.351]          </block>
[12:29:23.351]          // end if-block "!hasDormant"
[12:29:23.351]        </control>
[12:29:23.351]        // end if-block "isSWJ"
[12:29:23.351]      </control>
[12:29:23.351]      <control if="!isSWJ" while="" timeout="0" info="">
[12:29:23.351]        // if-block "!isSWJ"
[12:29:23.351]          // =>  FALSE
[12:29:23.351]        // skip if-block "!isSWJ"
[12:29:23.351]      </control>
[12:29:23.351]      <block atomic="false" info="">
[12:29:23.351]        ReadDP(0x0);
[12:29:23.351]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:29:23.355]      </block>
[12:29:23.355]      // end if-block "protType == 2"
[12:29:23.355]    </control>
[12:29:23.355]  </sequence>
[12:29:23.355]  
[12:29:23.359]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:29:23.359]  
[12:29:23.359]  <debugvars>
[12:29:23.359]    // Pre-defined
[12:29:23.360]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:29:23.360]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:29:23.360]    __dp=0x00000000
[12:29:23.360]    __ap=0x00000000
[12:29:23.360]    __traceout=0x00000000      (Trace Disabled)
[12:29:23.360]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:29:23.360]    __FlashAddr=0x00000000
[12:29:23.360]    __FlashLen=0x00000000
[12:29:23.360]    __FlashArg=0x00000000
[12:29:23.361]    __FlashOp=0x00000000
[12:29:23.361]    __Result=0x00000000
[12:29:23.361]  </debugvars>
[12:29:23.361]  
[12:29:23.361]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:29:23.361]    <block atomic="false" info="">
[12:29:23.361]      __var SW_DP_ABORT       = 0x0;
[12:29:23.361]        // -> [SW_DP_ABORT <= 0x00000000]
[12:29:23.361]      __var DP_CTRL_STAT      = 0x4;
[12:29:23.361]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:29:23.361]      __var DP_SELECT         = 0x8;
[12:29:23.361]        // -> [DP_SELECT <= 0x00000008]
[12:29:23.361]      __var powered_down      = 0;
[12:29:23.361]        // -> [powered_down <= 0x00000000]
[12:29:23.361]      WriteDP(DP_SELECT, 0x00000000);
[12:29:23.363]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:29:23.363]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:29:23.363]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:29:23.363]        // -> [powered_down <= 0x00000001]
[12:29:23.363]    </block>
[12:29:23.363]    <control if="powered_down" while="" timeout="0" info="">
[12:29:23.363]      // if-block "powered_down"
[12:29:23.363]        // =>  TRUE
[12:29:23.363]      <block atomic="false" info="">
[12:29:23.363]        Message(0, "Debug/System power-up request sent");
[12:29:23.370]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:29:23.376]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:29:23.376]      </block>
[12:29:23.376]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:29:23.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:29:23.376]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:29:23.376]        // while-condition  =>  FALSE
[12:29:23.376]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:29:23.379]      </control>
[12:29:23.379]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:29:23.379]        // if-block "(__protocol & 0xFFFF) == 1"
[12:29:23.379]          // =>  FALSE
[12:29:23.379]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:29:23.379]      </control>
[12:29:23.379]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:29:23.379]        // if-block "(__protocol & 0xFFFF) == 2"
[12:29:23.379]          // =>  TRUE
[12:29:23.379]        <block atomic="false" info="">
[12:29:23.380]          Message(0, "executing SWD power up");
[12:29:23.381]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:29:23.384]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:29:23.384]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:29:23.390]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:29:23.390]        </block>
[12:29:23.390]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:29:23.390]      </control>
[12:29:23.390]      // end if-block "powered_down"
[12:29:23.390]    </control>
[12:29:23.390]    <block atomic="false" info="">
[12:29:23.390]      __var DEBUG_PORT_VAL    = 0;
[12:29:23.390]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:29:23.390]      __var ACCESS_POINT_VAL  = 0;
[12:29:23.390]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:29:23.390]      __ap = 1; 
[12:29:23.390]        // -> [__ap <= 0x00000001]
[12:29:23.390]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:29:23.400]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:29:23.400]      __ap = 4;
[12:29:23.400]        // -> [__ap <= 0x00000004]
[12:29:23.401]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:29:23.405]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:29:23.405]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:29:23.405]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:29:23.405]    </block>
[12:29:23.405]    <block atomic="false" info="">
[12:29:23.405]      __var nReset = 0x80;
[12:29:23.405]        // -> [nReset <= 0x00000080]
[12:29:23.405]      __var canReadPins = 0;
[12:29:23.405]        // -> [canReadPins <= 0x00000000]
[12:29:23.405]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:29:23.410]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:29:23.410]        // -> [canReadPins <= 0x00000001]
[12:29:23.410]    </block>
[12:29:23.411]    <control if="" while="1" timeout="200" info="">
[12:29:23.411]      // while "1"  (timeout="200")
[12:29:23.411]      // while-condition  =>  TRUE
[12:29:23.411]      // while "1"  (timeout="200")
[12:29:23.411]      // while-condition  =>  TRUE
[12:29:23.412]      // while "1"  (timeout="200")
[12:29:23.412]      // while-condition  =>  TRUE
[12:29:23.412]      // while "1"  (timeout="200")
[12:29:23.412]      // while-condition  =>  TRUE
[12:29:23.412]      // while "1"  (timeout="200")
[12:29:23.412]      // while-condition  =>  TRUE
[12:29:23.412]      // while "1"  (timeout="200")
[12:29:23.412]      // while-condition  =>  TRUE
[12:29:23.412]      // while "1"  (timeout="200")
[12:29:23.412]      // while-condition  =>  TRUE
[12:29:23.412]      // while "1"  (timeout="200")
[12:29:23.413]      // while-condition  =>  TRUE
[12:29:23.413]      // while "1"  (timeout="200")
[12:29:23.413]      // while-condition  =>  TRUE
[12:29:23.413]      // while "1"  (timeout="200")
[12:29:23.413]      // while-condition  =>  TRUE
[12:29:23.413]      // while "1"  (timeout="200")
[12:29:23.413]      // while-condition  =>  TRUE
[12:29:23.413]      // while "1"  (timeout="200")
[12:29:23.413]      // while-condition  =>  TRUE
[12:29:23.414]      // while "1"  (timeout="200")
[12:29:23.414]      // while-condition  =>  TRUE
[12:29:23.414]      // while "1"  (timeout="200")
[12:29:23.414]      // while-condition  =>  TRUE
[12:29:23.414]      // while "1"  (timeout="200")
[12:29:23.414]      // while-condition  =>  TRUE
[12:29:23.414]      // while "1"  (timeout="200")
[12:29:23.414]      // while-condition  =>  TRUE
[12:29:23.414]      // while "1"  (timeout="200")
[12:29:23.414]      // while-condition  =>  TRUE
[12:29:23.415]      // while "1"  (timeout="200")
[12:29:23.415]      // while-condition  =>  TRUE
[12:29:23.415]      // while "1"  (timeout="200")
[12:29:23.416]      // while-condition  =>  TRUE
[12:29:23.416]      // while "1"  (timeout="200")
[12:29:23.416]      // while-condition  =>  TRUE
[12:29:23.416]      // while "1"  (timeout="200")
[12:29:23.416]      // while-condition  =>  TRUE
[12:29:23.416]      // while "1"  (timeout="200")
[12:29:23.416]      // while-condition  =>  TRUE
[12:29:23.416]      // while "1"  (timeout="200")
[12:29:23.416]      // while-condition  =>  TRUE
[12:29:23.416]      // while "1"  (timeout="200")
[12:29:23.416]      // while-condition  =>  TRUE
[12:29:23.416]      // while "1"  (timeout="200")
[12:29:23.417]      // while-condition  =>  TRUE
[12:29:23.417]      // while "1"  (timeout="200")
[12:29:23.417]      // while-condition  =>  TRUE
[12:29:23.417]      // while "1"  (timeout="200")
[12:29:23.417]      // while-condition  =>  TRUE
[12:29:23.417]      // while "1"  (timeout="200")
[12:29:23.417]      // while-condition  =>  TRUE
[12:29:23.417]      // while "1"  (timeout="200")
[12:29:23.417]      // while-condition  =>  TRUE
[12:29:23.417]      // while "1"  (timeout="200")
[12:29:23.417]      // while-condition  =>  TRUE
[12:29:23.418]      // while "1"  (timeout="200")
[12:29:23.418]      // while-condition  =>  TRUE
[12:29:23.418]      // while "1"  (timeout="200")
[12:29:23.418]      // while-condition  =>  TRUE
[12:29:23.418]      // while "1"  (timeout="200")
[12:29:23.418]      // while-condition  =>  TRUE
[12:29:23.418]      // while "1"  (timeout="200")
[12:29:23.418]      // while-condition  =>  TRUE
[12:29:23.418]      // while "1"  (timeout="200")
[12:29:23.418]      // while-condition  =>  TRUE
[12:29:23.418]      // while "1"  (timeout="200")
[12:29:23.419]      // while-condition  =>  TRUE
[12:29:23.419]      // while "1"  (timeout="200")
[12:29:23.419]      // while-condition  =>  TRUE
[12:29:23.419]      // while "1"  (timeout="200")
[12:29:23.419]      // while-condition  =>  TRUE
[12:29:23.419]      // while "1"  (timeout="200")
[12:29:23.419]      // while-condition  =>  TRUE
[12:29:23.419]      // while "1"  (timeout="200")
[12:29:23.419]      // while-condition  =>  TRUE
[12:29:23.420]      // while "1"  (timeout="200")
[12:29:23.420]      // while-condition  =>  TRUE
[12:29:23.420]      // while "1"  (timeout="200")
[12:29:23.420]      // while-condition  =>  TRUE
[12:29:23.420]      // while "1"  (timeout="200")
[12:29:23.420]      // while-condition  =>  TRUE
[12:29:23.420]      // while "1"  (timeout="200")
[12:29:23.421]      // while-condition  =>  TRUE
[12:29:23.421]      // while "1"  (timeout="200")
[12:29:23.421]      // while-condition  =>  TRUE
[12:29:23.421]      // while "1"  (timeout="200")
[12:29:23.421]      // while-condition  =>  TRUE
[12:29:23.421]      // while "1"  (timeout="200")
[12:29:23.421]      // while-condition  =>  TRUE
[12:29:23.421]      // while "1"  (timeout="200")
[12:29:23.421]      // while-condition  =>  TRUE
[12:29:23.421]      // while "1"  (timeout="200")
[12:29:23.422]      // while-condition  =>  TRUE
[12:29:23.422]      // while "1"  (timeout="200")
[12:29:23.422]      // while-condition  =>  TRUE
[12:29:23.422]      // while "1"  (timeout="200")
[12:29:23.422]      // while-condition  =>  TRUE
[12:29:23.422]      // while "1"  (timeout="200")
[12:29:23.422]      // while-condition  =>  TRUE
[12:29:23.422]      // while "1"  (timeout="200")
[12:29:23.422]      // while-condition  =>  TRUE
[12:29:23.423]      // while "1"  (timeout="200")
[12:29:23.423]      // while-condition  =>  TRUE
[12:29:23.423]      // while "1"  (timeout="200")
[12:29:23.423]      // while-condition  =>  TRUE
[12:29:23.423]      // while "1"  (timeout="200")
[12:29:23.423]      // while-condition  =>  TRUE
[12:29:23.423]      // while "1"  (timeout="200")
[12:29:23.423]      // while-condition  =>  TRUE
[12:29:23.423]      // while "1"  (timeout="200")
[12:29:23.423]      // while-condition  =>  TRUE
[12:29:23.424]      // while "1"  (timeout="200")
[12:29:23.424]      // while-condition  =>  TRUE
[12:29:23.424]      // while "1"  (timeout="200")
[12:29:23.424]      // while-condition  =>  TRUE
[12:29:23.424]      // while "1"  (timeout="200")
[12:29:23.424]      // while-condition  =>  TRUE
[12:29:23.424]      // while "1"  (timeout="200")
[12:29:23.424]      // while-condition  =>  TRUE
[12:29:23.425]      // while "1"  (timeout="200")
[12:29:23.425]      // while-condition  =>  TRUE
[12:29:23.425]      // while "1"  (timeout="200")
[12:29:23.425]      // while-condition  =>  TRUE
[12:29:23.425]      // while "1"  (timeout="200")
[12:29:23.425]      // while-condition  =>  TRUE
[12:29:23.425]      // while "1"  (timeout="200")
[12:29:23.425]      // while-condition  =>  TRUE
[12:29:23.425]      // while "1"  (timeout="200")
[12:29:23.426]      // while-condition  =>  TRUE
[12:29:23.426]      // while "1"  (timeout="200")
[12:29:23.426]      // while  =>  TIMEOUT
[12:29:23.426]      // end while "1"
[12:29:23.426]    </control>
[12:29:23.426]    <control if="canReadPins" while="" timeout="0" info="">
[12:29:23.426]      // if-block "canReadPins"
[12:29:23.426]        // =>  TRUE
[12:29:23.426]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:29:23.426]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:29:23.428]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:29:23.428]        // while-condition  =>  FALSE
[12:29:23.428]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:29:23.429]      </control>
[12:29:23.429]      // end if-block "canReadPins"
[12:29:23.429]    </control>
[12:29:23.429]    <control if="!canReadPins" while="" timeout="0" info="">
[12:29:23.429]      // if-block "!canReadPins"
[12:29:23.429]        // =>  FALSE
[12:29:23.429]      // skip if-block "!canReadPins"
[12:29:23.429]    </control>
[12:29:23.429]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:29:23.430]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:29:23.430]        // =>  TRUE
[12:29:23.430]      <block atomic="false" info="">
[12:29:23.430]        WriteAP(0x00, 0x190008);
[12:29:23.432]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:29:23.432]        WriteAP(0xF0, 0x01);
[12:29:23.439]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:29:23.440]      </block>
[12:29:23.440]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:29:23.440]    </control>
[12:29:23.440]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:29:23.440]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:29:23.440]        // =>  FALSE
[12:29:23.440]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:29:23.440]    </control>
[12:29:23.440]    <block atomic="false" info="">
[12:29:23.440]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:29:23.451]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:29:23.451]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:29:23.451]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:29:23.454]      __ap = 0; //lets make sure we reset the access point selection
[12:29:23.454]        // -> [__ap <= 0x00000000]
[12:29:23.454]    </block>
[12:29:23.454]  </sequence>
[12:29:23.454]  
[12:29:23.487]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:29:23.487]  
[12:29:23.489]  <debugvars>
[12:29:23.489]    // Pre-defined
[12:29:23.489]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:29:23.489]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:29:23.489]    __dp=0x00000000
[12:29:23.489]    __ap=0x00000000
[12:29:23.489]    __traceout=0x00000000      (Trace Disabled)
[12:29:23.489]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:29:23.489]    __FlashAddr=0x00000000
[12:29:23.490]    __FlashLen=0x00000000
[12:29:23.490]    __FlashArg=0x00000000
[12:29:23.490]    __FlashOp=0x00000000
[12:29:23.490]    __Result=0x00000000
[12:29:23.490]  </debugvars>
[12:29:23.490]  
[12:29:23.490]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:29:23.491]    <block atomic="false" info="">
[12:29:23.491]      __var deviceID = 0;
[12:29:23.491]        // -> [deviceID <= 0x00000000]
[12:29:23.491]      __var version = 0;
[12:29:23.491]        // -> [version <= 0x00000000]
[12:29:23.491]      __var partNum = 0;
[12:29:23.491]        // -> [partNum <= 0x00000000]
[12:29:23.491]      __var manuf = 0;
[12:29:23.491]        // -> [manuf <= 0x00000000]
[12:29:23.491]      __var isMSPM0G1X0X_G3X0X = 0;
[12:29:23.491]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:29:23.491]      __var isProduction = 0;
[12:29:23.491]        // -> [isProduction <= 0x00000000]
[12:29:23.491]      __var continueId = 0;
[12:29:23.491]        // -> [continueId <= 0x00000000]
[12:29:23.491]      deviceID =   Read32(0x41C40004);
[12:29:23.500]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:29:23.500]        // -> [deviceID <= 0x2BB8802F]
[12:29:23.500]      version = deviceID >> 28;
[12:29:23.500]        // -> [version <= 0x00000002]
[12:29:23.500]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:29:23.500]        // -> [partNum <= 0x0000BB88]
[12:29:23.500]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:29:23.500]        // -> [manuf <= 0x00000017]
[12:29:23.500]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:29:23.500]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:29:23.500]      isProduction = (version > 0);
[12:29:23.500]        // -> [isProduction <= 0x00000001]
[12:29:23.500]    </block>
[12:29:23.500]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:29:23.500]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:29:23.500]        // =>  FALSE
[12:29:23.500]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:29:23.500]    </control>
[12:29:23.500]    <control if="continueId == 4" while="" timeout="0" info="">
[12:29:23.500]      // if-block "continueId == 4"
[12:29:23.500]        // =>  FALSE
[12:29:23.500]      // skip if-block "continueId == 4"
[12:29:23.500]    </control>
[12:29:23.500]    <control if="!isProduction" while="" timeout="0" info="">
[12:29:23.500]      // if-block "!isProduction"
[12:29:23.500]        // =>  FALSE
[12:29:23.500]      // skip if-block "!isProduction"
[12:29:23.500]    </control>
[12:29:23.500]  </sequence>
[12:29:23.503]  
[12:29:30.065]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:29:30.065]  
[12:29:30.073]  <debugvars>
[12:29:30.073]    // Pre-defined
[12:29:30.073]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:29:30.073]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:29:30.073]    __dp=0x00000000
[12:29:30.073]    __ap=0x00000000
[12:29:30.073]    __traceout=0x00000000      (Trace Disabled)
[12:29:30.073]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:29:30.073]    __FlashAddr=0x00000000
[12:29:30.073]    __FlashLen=0x00000000
[12:29:30.073]    __FlashArg=0x00000000
[12:29:30.073]    __FlashOp=0x00000000
[12:29:30.073]    __Result=0x00000000
[12:29:30.073]  </debugvars>
[12:29:30.073]  
[12:29:30.073]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:29:30.075]    <block atomic="false" info="">
[12:29:30.075]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:29:30.075]        // -> [isSWJ <= 0x00000001]
[12:29:30.075]      __var hasDormant = __protocol & 0x00020000;
[12:29:30.075]        // -> [hasDormant <= 0x00000000]
[12:29:30.075]      __var protType   = __protocol & 0x0000FFFF;
[12:29:30.075]        // -> [protType <= 0x00000002]
[12:29:30.076]    </block>
[12:29:30.076]    <control if="protType == 1" while="" timeout="0" info="">
[12:29:30.076]      // if-block "protType == 1"
[12:29:30.076]        // =>  FALSE
[12:29:30.076]      // skip if-block "protType == 1"
[12:29:30.076]    </control>
[12:29:30.076]    <control if="protType == 2" while="" timeout="0" info="">
[12:29:30.076]      // if-block "protType == 2"
[12:29:30.076]        // =>  TRUE
[12:29:30.076]      <control if="isSWJ" while="" timeout="0" info="">
[12:29:30.077]        // if-block "isSWJ"
[12:29:30.077]          // =>  TRUE
[12:29:30.077]        <control if="hasDormant" while="" timeout="0" info="">
[12:29:30.077]          // if-block "hasDormant"
[12:29:30.077]            // =>  FALSE
[12:29:30.077]          // skip if-block "hasDormant"
[12:29:30.077]        </control>
[12:29:30.077]        <control if="!hasDormant" while="" timeout="0" info="">
[12:29:30.077]          // if-block "!hasDormant"
[12:29:30.077]            // =>  TRUE
[12:29:30.077]          <block atomic="false" info="">
[12:29:30.078]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:29:30.079]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:29:30.080]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:29:30.081]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:29:30.081]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:29:30.083]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:29:30.083]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:29:30.084]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:29:30.084]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:29:30.089]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:29:30.090]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:29:30.091]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:29:30.091]          </block>
[12:29:30.091]          // end if-block "!hasDormant"
[12:29:30.091]        </control>
[12:29:30.091]        // end if-block "isSWJ"
[12:29:30.091]      </control>
[12:29:30.091]      <control if="!isSWJ" while="" timeout="0" info="">
[12:29:30.091]        // if-block "!isSWJ"
[12:29:30.091]          // =>  FALSE
[12:29:30.093]        // skip if-block "!isSWJ"
[12:29:30.093]      </control>
[12:29:30.093]      <block atomic="false" info="">
[12:29:30.093]        ReadDP(0x0);
[12:29:30.094]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:29:30.094]      </block>
[12:29:30.094]      // end if-block "protType == 2"
[12:29:30.094]    </control>
[12:29:30.094]  </sequence>
[12:29:30.094]  
[12:29:30.098]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:29:30.098]  
[12:29:30.098]  <debugvars>
[12:29:30.098]    // Pre-defined
[12:29:30.098]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:29:30.098]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:29:30.098]    __dp=0x00000000
[12:29:30.098]    __ap=0x00000000
[12:29:30.099]    __traceout=0x00000000      (Trace Disabled)
[12:29:30.099]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:29:30.099]    __FlashAddr=0x00000000
[12:29:30.099]    __FlashLen=0x00000000
[12:29:30.099]    __FlashArg=0x00000000
[12:29:30.099]    __FlashOp=0x00000000
[12:29:30.099]    __Result=0x00000000
[12:29:30.099]  </debugvars>
[12:29:30.099]  
[12:29:30.099]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:29:30.099]    <block atomic="false" info="">
[12:29:30.100]      __var SW_DP_ABORT       = 0x0;
[12:29:30.100]        // -> [SW_DP_ABORT <= 0x00000000]
[12:29:30.100]      __var DP_CTRL_STAT      = 0x4;
[12:29:30.100]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:29:30.100]      __var DP_SELECT         = 0x8;
[12:29:30.100]        // -> [DP_SELECT <= 0x00000008]
[12:29:30.100]      __var powered_down      = 0;
[12:29:30.100]        // -> [powered_down <= 0x00000000]
[12:29:30.100]      WriteDP(DP_SELECT, 0x00000000);
[12:29:30.107]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:29:30.107]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:29:30.107]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:29:30.109]        // -> [powered_down <= 0x00000001]
[12:29:30.109]    </block>
[12:29:30.109]    <control if="powered_down" while="" timeout="0" info="">
[12:29:30.109]      // if-block "powered_down"
[12:29:30.110]        // =>  TRUE
[12:29:30.110]      <block atomic="false" info="">
[12:29:30.110]        Message(0, "Debug/System power-up request sent");
[12:29:30.112]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:29:30.114]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:29:30.114]      </block>
[12:29:30.114]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:29:30.114]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:29:30.114]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:29:30.114]        // while-condition  =>  FALSE
[12:29:30.114]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:29:30.114]      </control>
[12:29:30.114]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:29:30.114]        // if-block "(__protocol & 0xFFFF) == 1"
[12:29:30.114]          // =>  FALSE
[12:29:30.114]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:29:30.114]      </control>
[12:29:30.114]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:29:30.114]        // if-block "(__protocol & 0xFFFF) == 2"
[12:29:30.114]          // =>  TRUE
[12:29:30.118]        <block atomic="false" info="">
[12:29:30.118]          Message(0, "executing SWD power up");
[12:29:30.120]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:29:30.122]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:29:30.122]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:29:30.124]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:29:30.124]        </block>
[12:29:30.124]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:29:30.124]      </control>
[12:29:30.124]      // end if-block "powered_down"
[12:29:30.124]    </control>
[12:29:30.124]    <block atomic="false" info="">
[12:29:30.124]      __var DEBUG_PORT_VAL    = 0;
[12:29:30.124]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:29:30.124]      __var ACCESS_POINT_VAL  = 0;
[12:29:30.124]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:29:30.126]      __ap = 1; 
[12:29:30.126]        // -> [__ap <= 0x00000001]
[12:29:30.126]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:29:30.130]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:29:30.130]      __ap = 4;
[12:29:30.130]        // -> [__ap <= 0x00000004]
[12:29:30.130]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:29:30.132]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:29:30.132]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:29:30.132]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:29:30.135]    </block>
[12:29:30.135]    <block atomic="false" info="">
[12:29:30.135]      __var nReset = 0x80;
[12:29:30.135]        // -> [nReset <= 0x00000080]
[12:29:30.135]      __var canReadPins = 0;
[12:29:30.135]        // -> [canReadPins <= 0x00000000]
[12:29:30.136]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:29:30.140]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:29:30.140]        // -> [canReadPins <= 0x00000001]
[12:29:30.142]    </block>
[12:29:30.142]    <control if="" while="1" timeout="200" info="">
[12:29:30.142]      // while "1"  (timeout="200")
[12:29:30.142]      // while-condition  =>  TRUE
[12:29:30.142]      // while "1"  (timeout="200")
[12:29:30.142]      // while-condition  =>  TRUE
[12:29:30.142]      // while "1"  (timeout="200")
[12:29:30.142]      // while-condition  =>  TRUE
[12:29:30.142]      // while "1"  (timeout="200")
[12:29:30.143]      // while-condition  =>  TRUE
[12:29:30.143]      // while "1"  (timeout="200")
[12:29:30.144]      // while-condition  =>  TRUE
[12:29:30.144]      // while "1"  (timeout="200")
[12:29:30.144]      // while-condition  =>  TRUE
[12:29:30.144]      // while "1"  (timeout="200")
[12:29:30.144]      // while-condition  =>  TRUE
[12:29:30.144]      // while "1"  (timeout="200")
[12:29:30.144]      // while-condition  =>  TRUE
[12:29:30.144]      // while "1"  (timeout="200")
[12:29:30.144]      // while-condition  =>  TRUE
[12:29:30.144]      // while "1"  (timeout="200")
[12:29:30.144]      // while-condition  =>  TRUE
[12:29:30.144]      // while "1"  (timeout="200")
[12:29:30.144]      // while-condition  =>  TRUE
[12:29:30.144]      // while "1"  (timeout="200")
[12:29:30.144]      // while-condition  =>  TRUE
[12:29:30.144]      // while "1"  (timeout="200")
[12:29:30.144]      // while-condition  =>  TRUE
[12:29:30.144]      // while "1"  (timeout="200")
[12:29:30.144]      // while-condition  =>  TRUE
[12:29:30.145]      // while "1"  (timeout="200")
[12:29:30.145]      // while  =>  TIMEOUT
[12:29:30.145]      // end while "1"
[12:29:30.145]    </control>
[12:29:30.145]    <control if="canReadPins" while="" timeout="0" info="">
[12:29:30.145]      // if-block "canReadPins"
[12:29:30.145]        // =>  TRUE
[12:29:30.145]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:29:30.145]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:29:30.151]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:29:30.151]        // while-condition  =>  FALSE
[12:29:30.151]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:29:30.151]      </control>
[12:29:30.151]      // end if-block "canReadPins"
[12:29:30.151]    </control>
[12:29:30.154]    <control if="!canReadPins" while="" timeout="0" info="">
[12:29:30.154]      // if-block "!canReadPins"
[12:29:30.154]        // =>  FALSE
[12:29:30.154]      // skip if-block "!canReadPins"
[12:29:30.154]    </control>
[12:29:30.154]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:29:30.154]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:29:30.154]        // =>  TRUE
[12:29:30.154]      <block atomic="false" info="">
[12:29:30.154]        WriteAP(0x00, 0x190008);
[12:29:30.155]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:29:30.155]        WriteAP(0xF0, 0x01);
[12:29:30.160]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:29:30.160]      </block>
[12:29:30.160]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:29:30.160]    </control>
[12:29:30.160]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:29:30.160]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:29:30.160]        // =>  FALSE
[12:29:30.160]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:29:30.160]    </control>
[12:29:30.160]    <block atomic="false" info="">
[12:29:30.160]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:29:30.163]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:29:30.163]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:29:30.163]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:29:30.165]      __ap = 0; //lets make sure we reset the access point selection
[12:29:30.165]        // -> [__ap <= 0x00000000]
[12:29:30.165]    </block>
[12:29:30.165]  </sequence>
[12:29:30.165]  
[12:29:30.188]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:29:30.188]  
[12:29:30.188]  <debugvars>
[12:29:30.189]    // Pre-defined
[12:29:30.189]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:29:30.189]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:29:30.189]    __dp=0x00000000
[12:29:30.189]    __ap=0x00000000
[12:29:30.190]    __traceout=0x00000000      (Trace Disabled)
[12:29:30.190]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:29:30.190]    __FlashAddr=0x00000000
[12:29:30.190]    __FlashLen=0x00000000
[12:29:30.190]    __FlashArg=0x00000000
[12:29:30.190]    __FlashOp=0x00000000
[12:29:30.190]    __Result=0x00000000
[12:29:30.190]  </debugvars>
[12:29:30.190]  
[12:29:30.190]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:29:30.191]    <block atomic="false" info="">
[12:29:30.191]      __var deviceID = 0;
[12:29:30.191]        // -> [deviceID <= 0x00000000]
[12:29:30.191]      __var version = 0;
[12:29:30.191]        // -> [version <= 0x00000000]
[12:29:30.191]      __var partNum = 0;
[12:29:30.191]        // -> [partNum <= 0x00000000]
[12:29:30.191]      __var manuf = 0;
[12:29:30.191]        // -> [manuf <= 0x00000000]
[12:29:30.191]      __var isMSPM0G1X0X_G3X0X = 0;
[12:29:30.192]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:29:30.192]      __var isProduction = 0;
[12:29:30.192]        // -> [isProduction <= 0x00000000]
[12:29:30.192]      __var continueId = 0;
[12:29:30.192]        // -> [continueId <= 0x00000000]
[12:29:30.192]      deviceID =   Read32(0x41C40004);
[12:29:30.200]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:29:30.200]        // -> [deviceID <= 0x2BB8802F]
[12:29:30.200]      version = deviceID >> 28;
[12:29:30.200]        // -> [version <= 0x00000002]
[12:29:30.200]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:29:30.200]        // -> [partNum <= 0x0000BB88]
[12:29:30.200]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:29:30.200]        // -> [manuf <= 0x00000017]
[12:29:30.200]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:29:30.200]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:29:30.200]      isProduction = (version > 0);
[12:29:30.200]        // -> [isProduction <= 0x00000001]
[12:29:30.200]    </block>
[12:29:30.200]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:29:30.200]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:29:30.200]        // =>  FALSE
[12:29:30.200]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:29:30.200]    </control>
[12:29:30.200]    <control if="continueId == 4" while="" timeout="0" info="">
[12:29:30.200]      // if-block "continueId == 4"
[12:29:30.200]        // =>  FALSE
[12:29:30.204]      // skip if-block "continueId == 4"
[12:29:30.204]    </control>
[12:29:30.204]    <control if="!isProduction" while="" timeout="0" info="">
[12:29:30.204]      // if-block "!isProduction"
[12:29:30.204]        // =>  FALSE
[12:29:30.204]      // skip if-block "!isProduction"
[12:29:30.204]    </control>
[12:29:30.204]  </sequence>
[12:29:30.204]  
[12:33:07.690]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:33:07.690]  
[12:33:07.701]  <debugvars>
[12:33:07.701]    // Pre-defined
[12:33:07.701]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:33:07.701]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:33:07.701]    __dp=0x00000000
[12:33:07.701]    __ap=0x00000000
[12:33:07.701]    __traceout=0x00000000      (Trace Disabled)
[12:33:07.701]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:33:07.701]    __FlashAddr=0x00000000
[12:33:07.701]    __FlashLen=0x00000000
[12:33:07.701]    __FlashArg=0x00000000
[12:33:07.702]    __FlashOp=0x00000000
[12:33:07.702]    __Result=0x00000000
[12:33:07.702]  </debugvars>
[12:33:07.702]  
[12:33:07.702]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:33:07.702]    <block atomic="false" info="">
[12:33:07.702]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:33:07.702]        // -> [isSWJ <= 0x00000001]
[12:33:07.703]      __var hasDormant = __protocol & 0x00020000;
[12:33:07.703]        // -> [hasDormant <= 0x00000000]
[12:33:07.703]      __var protType   = __protocol & 0x0000FFFF;
[12:33:07.703]        // -> [protType <= 0x00000002]
[12:33:07.703]    </block>
[12:33:07.703]    <control if="protType == 1" while="" timeout="0" info="">
[12:33:07.703]      // if-block "protType == 1"
[12:33:07.703]        // =>  FALSE
[12:33:07.703]      // skip if-block "protType == 1"
[12:33:07.703]    </control>
[12:33:07.703]    <control if="protType == 2" while="" timeout="0" info="">
[12:33:07.704]      // if-block "protType == 2"
[12:33:07.704]        // =>  TRUE
[12:33:07.704]      <control if="isSWJ" while="" timeout="0" info="">
[12:33:07.704]        // if-block "isSWJ"
[12:33:07.704]          // =>  TRUE
[12:33:07.704]        <control if="hasDormant" while="" timeout="0" info="">
[12:33:07.704]          // if-block "hasDormant"
[12:33:07.704]            // =>  FALSE
[12:33:07.704]          // skip if-block "hasDormant"
[12:33:07.704]        </control>
[12:33:07.704]        <control if="!hasDormant" while="" timeout="0" info="">
[12:33:07.704]          // if-block "!hasDormant"
[12:33:07.704]            // =>  TRUE
[12:33:07.704]          <block atomic="false" info="">
[12:33:07.704]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:33:07.710]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:33:07.710]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:33:07.714]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:33:07.714]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:33:07.718]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:33:07.718]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:33:07.725]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:33:07.725]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:33:07.731]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:33:07.731]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:33:07.733]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:33:07.733]          </block>
[12:33:07.733]          // end if-block "!hasDormant"
[12:33:07.733]        </control>
[12:33:07.733]        // end if-block "isSWJ"
[12:33:07.733]      </control>
[12:33:07.733]      <control if="!isSWJ" while="" timeout="0" info="">
[12:33:07.733]        // if-block "!isSWJ"
[12:33:07.733]          // =>  FALSE
[12:33:07.733]        // skip if-block "!isSWJ"
[12:33:07.733]      </control>
[12:33:07.733]      <block atomic="false" info="">
[12:33:07.733]        ReadDP(0x0);
[12:33:07.733]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:33:07.733]      </block>
[12:33:07.737]      // end if-block "protType == 2"
[12:33:07.737]    </control>
[12:33:07.737]  </sequence>
[12:33:07.737]  
[12:33:07.740]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:33:07.740]  
[12:33:07.740]  <debugvars>
[12:33:07.740]    // Pre-defined
[12:33:07.741]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:33:07.741]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:33:07.741]    __dp=0x00000000
[12:33:07.741]    __ap=0x00000000
[12:33:07.741]    __traceout=0x00000000      (Trace Disabled)
[12:33:07.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:33:07.741]    __FlashAddr=0x00000000
[12:33:07.742]    __FlashLen=0x00000000
[12:33:07.742]    __FlashArg=0x00000000
[12:33:07.742]    __FlashOp=0x00000000
[12:33:07.742]    __Result=0x00000000
[12:33:07.742]  </debugvars>
[12:33:07.742]  
[12:33:07.742]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:33:07.742]    <block atomic="false" info="">
[12:33:07.742]      __var SW_DP_ABORT       = 0x0;
[12:33:07.742]        // -> [SW_DP_ABORT <= 0x00000000]
[12:33:07.742]      __var DP_CTRL_STAT      = 0x4;
[12:33:07.743]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:33:07.743]      __var DP_SELECT         = 0x8;
[12:33:07.743]        // -> [DP_SELECT <= 0x00000008]
[12:33:07.743]      __var powered_down      = 0;
[12:33:07.743]        // -> [powered_down <= 0x00000000]
[12:33:07.743]      WriteDP(DP_SELECT, 0x00000000);
[12:33:07.745]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:33:07.745]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:33:07.748]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:33:07.748]        // -> [powered_down <= 0x00000001]
[12:33:07.748]    </block>
[12:33:07.748]    <control if="powered_down" while="" timeout="0" info="">
[12:33:07.749]      // if-block "powered_down"
[12:33:07.749]        // =>  TRUE
[12:33:07.749]      <block atomic="false" info="">
[12:33:07.749]        Message(0, "Debug/System power-up request sent");
[12:33:07.749]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:33:07.751]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:33:07.751]      </block>
[12:33:07.751]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:33:07.751]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:33:07.759]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:33:07.759]        // while-condition  =>  FALSE
[12:33:07.759]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:33:07.760]      </control>
[12:33:07.760]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:33:07.760]        // if-block "(__protocol & 0xFFFF) == 1"
[12:33:07.760]          // =>  FALSE
[12:33:07.760]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:33:07.760]      </control>
[12:33:07.760]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:33:07.760]        // if-block "(__protocol & 0xFFFF) == 2"
[12:33:07.760]          // =>  TRUE
[12:33:07.760]        <block atomic="false" info="">
[12:33:07.762]          Message(0, "executing SWD power up");
[12:33:07.762]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:33:07.765]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:33:07.765]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:33:07.771]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:33:07.771]        </block>
[12:33:07.771]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:33:07.771]      </control>
[12:33:07.771]      // end if-block "powered_down"
[12:33:07.771]    </control>
[12:33:07.771]    <block atomic="false" info="">
[12:33:07.771]      __var DEBUG_PORT_VAL    = 0;
[12:33:07.771]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:33:07.771]      __var ACCESS_POINT_VAL  = 0;
[12:33:07.771]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:33:07.771]      __ap = 1; 
[12:33:07.771]        // -> [__ap <= 0x00000001]
[12:33:07.771]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:33:07.776]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:33:07.776]      __ap = 4;
[12:33:07.776]        // -> [__ap <= 0x00000004]
[12:33:07.776]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:33:07.790]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:33:07.790]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:33:07.790]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:33:07.790]    </block>
[12:33:07.791]    <block atomic="false" info="">
[12:33:07.791]      __var nReset = 0x80;
[12:33:07.791]        // -> [nReset <= 0x00000080]
[12:33:07.791]      __var canReadPins = 0;
[12:33:07.791]        // -> [canReadPins <= 0x00000000]
[12:33:07.791]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:33:07.791]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:33:07.791]        // -> [canReadPins <= 0x00000001]
[12:33:07.791]    </block>
[12:33:07.794]    <control if="" while="1" timeout="200" info="">
[12:33:07.794]      // while "1"  (timeout="200")
[12:33:07.794]      // while-condition  =>  TRUE
[12:33:07.794]      // while "1"  (timeout="200")
[12:33:07.794]      // while-condition  =>  TRUE
[12:33:07.794]      // while "1"  (timeout="200")
[12:33:07.794]      // while-condition  =>  TRUE
[12:33:07.794]      // while "1"  (timeout="200")
[12:33:07.794]      // while-condition  =>  TRUE
[12:33:07.794]      // while "1"  (timeout="200")
[12:33:07.794]      // while-condition  =>  TRUE
[12:33:07.794]      // while "1"  (timeout="200")
[12:33:07.794]      // while-condition  =>  TRUE
[12:33:07.794]      // while "1"  (timeout="200")
[12:33:07.795]      // while-condition  =>  TRUE
[12:33:07.795]      // while "1"  (timeout="200")
[12:33:07.795]      // while-condition  =>  TRUE
[12:33:07.795]      // while "1"  (timeout="200")
[12:33:07.795]      // while-condition  =>  TRUE
[12:33:07.795]      // while "1"  (timeout="200")
[12:33:07.795]      // while-condition  =>  TRUE
[12:33:07.795]      // while "1"  (timeout="200")
[12:33:07.795]      // while-condition  =>  TRUE
[12:33:07.795]      // while "1"  (timeout="200")
[12:33:07.795]      // while-condition  =>  TRUE
[12:33:07.795]      // while "1"  (timeout="200")
[12:33:07.795]      // while-condition  =>  TRUE
[12:33:07.795]      // while "1"  (timeout="200")
[12:33:07.795]      // while-condition  =>  TRUE
[12:33:07.795]      // while "1"  (timeout="200")
[12:33:07.795]      // while-condition  =>  TRUE
[12:33:07.795]      // while "1"  (timeout="200")
[12:33:07.795]      // while-condition  =>  TRUE
[12:33:07.795]      // while "1"  (timeout="200")
[12:33:07.795]      // while-condition  =>  TRUE
[12:33:07.795]      // while "1"  (timeout="200")
[12:33:07.795]      // while-condition  =>  TRUE
[12:33:07.795]      // while "1"  (timeout="200")
[12:33:07.797]      // while-condition  =>  TRUE
[12:33:07.797]      // while "1"  (timeout="200")
[12:33:07.797]      // while-condition  =>  TRUE
[12:33:07.797]      // while "1"  (timeout="200")
[12:33:07.797]      // while-condition  =>  TRUE
[12:33:07.797]      // while "1"  (timeout="200")
[12:33:07.797]      // while-condition  =>  TRUE
[12:33:07.797]      // while "1"  (timeout="200")
[12:33:07.797]      // while-condition  =>  TRUE
[12:33:07.797]      // while "1"  (timeout="200")
[12:33:07.797]      // while-condition  =>  TRUE
[12:33:07.797]      // while "1"  (timeout="200")
[12:33:07.797]      // while-condition  =>  TRUE
[12:33:07.797]      // while "1"  (timeout="200")
[12:33:07.797]      // while-condition  =>  TRUE
[12:33:07.797]      // while "1"  (timeout="200")
[12:33:07.797]      // while-condition  =>  TRUE
[12:33:07.799]      // while "1"  (timeout="200")
[12:33:07.799]      // while-condition  =>  TRUE
[12:33:07.799]      // while "1"  (timeout="200")
[12:33:07.799]      // while-condition  =>  TRUE
[12:33:07.799]      // while "1"  (timeout="200")
[12:33:07.799]      // while-condition  =>  TRUE
[12:33:07.799]      // while "1"  (timeout="200")
[12:33:07.799]      // while-condition  =>  TRUE
[12:33:07.799]      // while "1"  (timeout="200")
[12:33:07.799]      // while-condition  =>  TRUE
[12:33:07.800]      // while "1"  (timeout="200")
[12:33:07.800]      // while-condition  =>  TRUE
[12:33:07.800]      // while "1"  (timeout="200")
[12:33:07.800]      // while-condition  =>  TRUE
[12:33:07.800]      // while "1"  (timeout="200")
[12:33:07.800]      // while-condition  =>  TRUE
[12:33:07.800]      // while "1"  (timeout="200")
[12:33:07.800]      // while-condition  =>  TRUE
[12:33:07.800]      // while "1"  (timeout="200")
[12:33:07.800]      // while-condition  =>  TRUE
[12:33:07.800]      // while "1"  (timeout="200")
[12:33:07.801]      // while-condition  =>  TRUE
[12:33:07.801]      // while "1"  (timeout="200")
[12:33:07.801]      // while  =>  TIMEOUT
[12:33:07.801]      // end while "1"
[12:33:07.801]    </control>
[12:33:07.801]    <control if="canReadPins" while="" timeout="0" info="">
[12:33:07.801]      // if-block "canReadPins"
[12:33:07.801]        // =>  TRUE
[12:33:07.801]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:33:07.801]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:33:07.809]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:33:07.809]        // while-condition  =>  FALSE
[12:33:07.809]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:33:07.809]      </control>
[12:33:07.810]      // end if-block "canReadPins"
[12:33:07.810]    </control>
[12:33:07.810]    <control if="!canReadPins" while="" timeout="0" info="">
[12:33:07.810]      // if-block "!canReadPins"
[12:33:07.810]        // =>  FALSE
[12:33:07.810]      // skip if-block "!canReadPins"
[12:33:07.810]    </control>
[12:33:07.810]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:33:07.810]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:33:07.811]        // =>  TRUE
[12:33:07.811]      <block atomic="false" info="">
[12:33:07.811]        WriteAP(0x00, 0x190008);
[12:33:07.819]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:33:07.819]        WriteAP(0xF0, 0x01);
[12:33:07.830]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:33:07.830]      </block>
[12:33:07.830]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:33:07.830]    </control>
[12:33:07.831]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:33:07.831]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:33:07.831]        // =>  FALSE
[12:33:07.831]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:33:07.831]    </control>
[12:33:07.831]    <block atomic="false" info="">
[12:33:07.831]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:33:07.837]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:33:07.837]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:33:07.837]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:33:07.840]      __ap = 0; //lets make sure we reset the access point selection
[12:33:07.840]        // -> [__ap <= 0x00000000]
[12:33:07.841]    </block>
[12:33:07.841]  </sequence>
[12:33:07.841]  
[12:33:07.883]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:33:07.883]  
[12:33:07.883]  <debugvars>
[12:33:07.883]    // Pre-defined
[12:33:07.883]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:33:07.885]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:33:07.885]    __dp=0x00000000
[12:33:07.885]    __ap=0x00000000
[12:33:07.885]    __traceout=0x00000000      (Trace Disabled)
[12:33:07.885]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:33:07.885]    __FlashAddr=0x00000000
[12:33:07.885]    __FlashLen=0x00000000
[12:33:07.885]    __FlashArg=0x00000000
[12:33:07.885]    __FlashOp=0x00000000
[12:33:07.885]    __Result=0x00000000
[12:33:07.885]  </debugvars>
[12:33:07.885]  
[12:33:07.885]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:33:07.885]    <block atomic="false" info="">
[12:33:07.885]      __var deviceID = 0;
[12:33:07.885]        // -> [deviceID <= 0x00000000]
[12:33:07.885]      __var version = 0;
[12:33:07.885]        // -> [version <= 0x00000000]
[12:33:07.885]      __var partNum = 0;
[12:33:07.885]        // -> [partNum <= 0x00000000]
[12:33:07.885]      __var manuf = 0;
[12:33:07.885]        // -> [manuf <= 0x00000000]
[12:33:07.885]      __var isMSPM0G1X0X_G3X0X = 0;
[12:33:07.885]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:33:07.885]      __var isProduction = 0;
[12:33:07.885]        // -> [isProduction <= 0x00000000]
[12:33:07.887]      __var continueId = 0;
[12:33:07.887]        // -> [continueId <= 0x00000000]
[12:33:07.887]      deviceID =   Read32(0x41C40004);
[12:33:07.901]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:33:07.901]        // -> [deviceID <= 0x2BB8802F]
[12:33:07.901]      version = deviceID >> 28;
[12:33:07.901]        // -> [version <= 0x00000002]
[12:33:07.901]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:33:07.901]        // -> [partNum <= 0x0000BB88]
[12:33:07.901]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:33:07.901]        // -> [manuf <= 0x00000017]
[12:33:07.901]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:33:07.901]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:33:07.901]      isProduction = (version > 0);
[12:33:07.901]        // -> [isProduction <= 0x00000001]
[12:33:07.901]    </block>
[12:33:07.903]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:33:07.903]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:33:07.903]        // =>  FALSE
[12:33:07.903]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:33:07.903]    </control>
[12:33:07.903]    <control if="continueId == 4" while="" timeout="0" info="">
[12:33:07.903]      // if-block "continueId == 4"
[12:33:07.903]        // =>  FALSE
[12:33:07.903]      // skip if-block "continueId == 4"
[12:33:07.903]    </control>
[12:33:07.903]    <control if="!isProduction" while="" timeout="0" info="">
[12:33:07.903]      // if-block "!isProduction"
[12:33:07.903]        // =>  FALSE
[12:33:07.903]      // skip if-block "!isProduction"
[12:33:07.903]    </control>
[12:33:07.903]  </sequence>
[12:33:07.903]  
[12:33:14.810]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:33:14.810]  
[12:33:14.819]  <debugvars>
[12:33:14.819]    // Pre-defined
[12:33:14.819]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:33:14.819]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:33:14.819]    __dp=0x00000000
[12:33:14.819]    __ap=0x00000000
[12:33:14.819]    __traceout=0x00000000      (Trace Disabled)
[12:33:14.819]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:33:14.820]    __FlashAddr=0x00000000
[12:33:14.820]    __FlashLen=0x00000000
[12:33:14.820]    __FlashArg=0x00000000
[12:33:14.820]    __FlashOp=0x00000000
[12:33:14.820]    __Result=0x00000000
[12:33:14.820]  </debugvars>
[12:33:14.820]  
[12:33:14.820]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:33:14.820]    <block atomic="false" info="">
[12:33:14.820]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:33:14.820]        // -> [isSWJ <= 0x00000001]
[12:33:14.820]      __var hasDormant = __protocol & 0x00020000;
[12:33:14.820]        // -> [hasDormant <= 0x00000000]
[12:33:14.820]      __var protType   = __protocol & 0x0000FFFF;
[12:33:14.820]        // -> [protType <= 0x00000002]
[12:33:14.820]    </block>
[12:33:14.820]    <control if="protType == 1" while="" timeout="0" info="">
[12:33:14.820]      // if-block "protType == 1"
[12:33:14.820]        // =>  FALSE
[12:33:14.820]      // skip if-block "protType == 1"
[12:33:14.820]    </control>
[12:33:14.820]    <control if="protType == 2" while="" timeout="0" info="">
[12:33:14.820]      // if-block "protType == 2"
[12:33:14.820]        // =>  TRUE
[12:33:14.820]      <control if="isSWJ" while="" timeout="0" info="">
[12:33:14.820]        // if-block "isSWJ"
[12:33:14.820]          // =>  TRUE
[12:33:14.820]        <control if="hasDormant" while="" timeout="0" info="">
[12:33:14.820]          // if-block "hasDormant"
[12:33:14.820]            // =>  FALSE
[12:33:14.820]          // skip if-block "hasDormant"
[12:33:14.820]        </control>
[12:33:14.820]        <control if="!hasDormant" while="" timeout="0" info="">
[12:33:14.823]          // if-block "!hasDormant"
[12:33:14.823]            // =>  TRUE
[12:33:14.823]          <block atomic="false" info="">
[12:33:14.823]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:33:14.827]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:33:14.827]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:33:14.831]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:33:14.832]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:33:14.832]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:33:14.832]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:33:14.836]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:33:14.836]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:33:14.839]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:33:14.839]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:33:14.840]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:33:14.844]          </block>
[12:33:14.844]          // end if-block "!hasDormant"
[12:33:14.844]        </control>
[12:33:14.844]        // end if-block "isSWJ"
[12:33:14.844]      </control>
[12:33:14.844]      <control if="!isSWJ" while="" timeout="0" info="">
[12:33:14.844]        // if-block "!isSWJ"
[12:33:14.844]          // =>  FALSE
[12:33:14.844]        // skip if-block "!isSWJ"
[12:33:14.844]      </control>
[12:33:14.844]      <block atomic="false" info="">
[12:33:14.844]        ReadDP(0x0);
[12:33:14.846]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:33:14.848]      </block>
[12:33:14.848]      // end if-block "protType == 2"
[12:33:14.848]    </control>
[12:33:14.848]  </sequence>
[12:33:14.848]  
[12:33:14.853]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:33:14.853]  
[12:33:14.853]  <debugvars>
[12:33:14.853]    // Pre-defined
[12:33:14.853]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:33:14.853]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:33:14.853]    __dp=0x00000000
[12:33:14.853]    __ap=0x00000000
[12:33:14.853]    __traceout=0x00000000      (Trace Disabled)
[12:33:14.853]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:33:14.853]    __FlashAddr=0x00000000
[12:33:14.853]    __FlashLen=0x00000000
[12:33:14.853]    __FlashArg=0x00000000
[12:33:14.853]    __FlashOp=0x00000000
[12:33:14.853]    __Result=0x00000000
[12:33:14.853]  </debugvars>
[12:33:14.853]  
[12:33:14.853]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:33:14.856]    <block atomic="false" info="">
[12:33:14.856]      __var SW_DP_ABORT       = 0x0;
[12:33:14.856]        // -> [SW_DP_ABORT <= 0x00000000]
[12:33:14.856]      __var DP_CTRL_STAT      = 0x4;
[12:33:14.856]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:33:14.856]      __var DP_SELECT         = 0x8;
[12:33:14.856]        // -> [DP_SELECT <= 0x00000008]
[12:33:14.856]      __var powered_down      = 0;
[12:33:14.856]        // -> [powered_down <= 0x00000000]
[12:33:14.856]      WriteDP(DP_SELECT, 0x00000000);
[12:33:14.864]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:33:14.864]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:33:14.864]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:33:14.864]        // -> [powered_down <= 0x00000001]
[12:33:14.864]    </block>
[12:33:14.864]    <control if="powered_down" while="" timeout="0" info="">
[12:33:14.864]      // if-block "powered_down"
[12:33:14.864]        // =>  TRUE
[12:33:14.864]      <block atomic="false" info="">
[12:33:14.864]        Message(0, "Debug/System power-up request sent");
[12:33:14.868]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:33:14.871]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:33:14.871]      </block>
[12:33:14.872]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:33:14.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:33:14.872]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:33:14.872]        // while-condition  =>  FALSE
[12:33:14.872]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:33:14.872]      </control>
[12:33:14.872]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:33:14.872]        // if-block "(__protocol & 0xFFFF) == 1"
[12:33:14.872]          // =>  FALSE
[12:33:14.872]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:33:14.872]      </control>
[12:33:14.872]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:33:14.872]        // if-block "(__protocol & 0xFFFF) == 2"
[12:33:14.872]          // =>  TRUE
[12:33:14.872]        <block atomic="false" info="">
[12:33:14.876]          Message(0, "executing SWD power up");
[12:33:14.876]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:33:14.884]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:33:14.884]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:33:14.889]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:33:14.890]        </block>
[12:33:14.890]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:33:14.890]      </control>
[12:33:14.890]      // end if-block "powered_down"
[12:33:14.890]    </control>
[12:33:14.890]    <block atomic="false" info="">
[12:33:14.890]      __var DEBUG_PORT_VAL    = 0;
[12:33:14.891]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:33:14.891]      __var ACCESS_POINT_VAL  = 0;
[12:33:14.891]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:33:14.891]      __ap = 1; 
[12:33:14.891]        // -> [__ap <= 0x00000001]
[12:33:14.891]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:33:14.893]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:33:14.893]      __ap = 4;
[12:33:14.893]        // -> [__ap <= 0x00000004]
[12:33:14.893]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:33:14.897]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:33:14.897]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:33:14.897]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:33:14.900]    </block>
[12:33:14.900]    <block atomic="false" info="">
[12:33:14.900]      __var nReset = 0x80;
[12:33:14.900]        // -> [nReset <= 0x00000080]
[12:33:14.900]      __var canReadPins = 0;
[12:33:14.900]        // -> [canReadPins <= 0x00000000]
[12:33:14.900]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:33:14.901]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:33:14.901]        // -> [canReadPins <= 0x00000001]
[12:33:14.901]    </block>
[12:33:14.901]    <control if="" while="1" timeout="200" info="">
[12:33:14.901]      // while "1"  (timeout="200")
[12:33:14.901]      // while-condition  =>  TRUE
[12:33:14.901]      // while "1"  (timeout="200")
[12:33:14.901]      // while-condition  =>  TRUE
[12:33:14.901]      // while "1"  (timeout="200")
[12:33:14.901]      // while-condition  =>  TRUE
[12:33:14.901]      // while "1"  (timeout="200")
[12:33:14.901]      // while-condition  =>  TRUE
[12:33:14.901]      // while "1"  (timeout="200")
[12:33:14.901]      // while-condition  =>  TRUE
[12:33:14.901]      // while "1"  (timeout="200")
[12:33:14.901]      // while-condition  =>  TRUE
[12:33:14.901]      // while "1"  (timeout="200")
[12:33:14.901]      // while-condition  =>  TRUE
[12:33:14.901]      // while "1"  (timeout="200")
[12:33:14.901]      // while-condition  =>  TRUE
[12:33:14.901]      // while "1"  (timeout="200")
[12:33:14.901]      // while-condition  =>  TRUE
[12:33:14.905]      // while "1"  (timeout="200")
[12:33:14.905]      // while-condition  =>  TRUE
[12:33:14.905]      // while "1"  (timeout="200")
[12:33:14.905]      // while-condition  =>  TRUE
[12:33:14.905]      // while "1"  (timeout="200")
[12:33:14.905]      // while-condition  =>  TRUE
[12:33:14.905]      // while "1"  (timeout="200")
[12:33:14.905]      // while-condition  =>  TRUE
[12:33:14.905]      // while "1"  (timeout="200")
[12:33:14.905]      // while-condition  =>  TRUE
[12:33:14.905]      // while "1"  (timeout="200")
[12:33:14.905]      // while-condition  =>  TRUE
[12:33:14.905]      // while "1"  (timeout="200")
[12:33:14.907]      // while-condition  =>  TRUE
[12:33:14.907]      // while "1"  (timeout="200")
[12:33:14.907]      // while-condition  =>  TRUE
[12:33:14.907]      // while "1"  (timeout="200")
[12:33:14.907]      // while-condition  =>  TRUE
[12:33:14.907]      // while "1"  (timeout="200")
[12:33:14.907]      // while-condition  =>  TRUE
[12:33:14.907]      // while "1"  (timeout="200")
[12:33:14.907]      // while-condition  =>  TRUE
[12:33:14.907]      // while "1"  (timeout="200")
[12:33:14.907]      // while-condition  =>  TRUE
[12:33:14.907]      // while "1"  (timeout="200")
[12:33:14.907]      // while-condition  =>  TRUE
[12:33:14.907]      // while "1"  (timeout="200")
[12:33:14.907]      // while-condition  =>  TRUE
[12:33:14.907]      // while "1"  (timeout="200")
[12:33:14.907]      // while-condition  =>  TRUE
[12:33:14.907]      // while "1"  (timeout="200")
[12:33:14.907]      // while-condition  =>  TRUE
[12:33:14.909]      // while "1"  (timeout="200")
[12:33:14.909]      // while-condition  =>  TRUE
[12:33:14.909]      // while "1"  (timeout="200")
[12:33:14.909]      // while-condition  =>  TRUE
[12:33:14.909]      // while "1"  (timeout="200")
[12:33:14.910]      // while-condition  =>  TRUE
[12:33:14.910]      // while "1"  (timeout="200")
[12:33:14.910]      // while-condition  =>  TRUE
[12:33:14.910]      // while "1"  (timeout="200")
[12:33:14.910]      // while-condition  =>  TRUE
[12:33:14.910]      // while "1"  (timeout="200")
[12:33:14.910]      // while-condition  =>  TRUE
[12:33:14.910]      // while "1"  (timeout="200")
[12:33:14.911]      // while-condition  =>  TRUE
[12:33:14.911]      // while "1"  (timeout="200")
[12:33:14.911]      // while  =>  TIMEOUT
[12:33:14.911]      // end while "1"
[12:33:14.911]    </control>
[12:33:14.911]    <control if="canReadPins" while="" timeout="0" info="">
[12:33:14.911]      // if-block "canReadPins"
[12:33:14.911]        // =>  TRUE
[12:33:14.911]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:33:14.911]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:33:14.913]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:33:14.913]        // while-condition  =>  FALSE
[12:33:14.913]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:33:14.913]      </control>
[12:33:14.913]      // end if-block "canReadPins"
[12:33:14.913]    </control>
[12:33:14.913]    <control if="!canReadPins" while="" timeout="0" info="">
[12:33:14.913]      // if-block "!canReadPins"
[12:33:14.913]        // =>  FALSE
[12:33:14.913]      // skip if-block "!canReadPins"
[12:33:14.913]    </control>
[12:33:14.913]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:33:14.913]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:33:14.913]        // =>  TRUE
[12:33:14.913]      <block atomic="false" info="">
[12:33:14.913]        WriteAP(0x00, 0x190008);
[12:33:14.913]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:33:14.917]        WriteAP(0xF0, 0x01);
[12:33:14.920]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:33:14.920]      </block>
[12:33:14.920]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:33:14.921]    </control>
[12:33:14.921]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:33:14.921]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:33:14.921]        // =>  FALSE
[12:33:14.921]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:33:14.921]    </control>
[12:33:14.921]    <block atomic="false" info="">
[12:33:14.921]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:33:14.925]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:33:14.925]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:33:14.925]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:33:14.925]      __ap = 0; //lets make sure we reset the access point selection
[12:33:14.925]        // -> [__ap <= 0x00000000]
[12:33:14.925]    </block>
[12:33:14.925]  </sequence>
[12:33:14.925]  
[12:33:14.953]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:33:14.953]  
[12:33:14.953]  <debugvars>
[12:33:14.953]    // Pre-defined
[12:33:14.957]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:33:14.957]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:33:14.957]    __dp=0x00000000
[12:33:14.957]    __ap=0x00000000
[12:33:14.957]    __traceout=0x00000000      (Trace Disabled)
[12:33:14.957]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:33:14.957]    __FlashAddr=0x00000000
[12:33:14.957]    __FlashLen=0x00000000
[12:33:14.957]    __FlashArg=0x00000000
[12:33:14.957]    __FlashOp=0x00000000
[12:33:14.957]    __Result=0x00000000
[12:33:14.957]  </debugvars>
[12:33:14.957]  
[12:33:14.959]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:33:14.959]    <block atomic="false" info="">
[12:33:14.959]      __var deviceID = 0;
[12:33:14.959]        // -> [deviceID <= 0x00000000]
[12:33:14.959]      __var version = 0;
[12:33:14.959]        // -> [version <= 0x00000000]
[12:33:14.959]      __var partNum = 0;
[12:33:14.959]        // -> [partNum <= 0x00000000]
[12:33:14.959]      __var manuf = 0;
[12:33:14.959]        // -> [manuf <= 0x00000000]
[12:33:14.959]      __var isMSPM0G1X0X_G3X0X = 0;
[12:33:14.959]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:33:14.960]      __var isProduction = 0;
[12:33:14.960]        // -> [isProduction <= 0x00000000]
[12:33:14.960]      __var continueId = 0;
[12:33:14.960]        // -> [continueId <= 0x00000000]
[12:33:14.960]      deviceID =   Read32(0x41C40004);
[12:33:14.982]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:33:14.982]        // -> [deviceID <= 0x2BB8802F]
[12:33:14.982]      version = deviceID >> 28;
[12:33:14.982]        // -> [version <= 0x00000002]
[12:33:14.982]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:33:14.982]        // -> [partNum <= 0x0000BB88]
[12:33:14.982]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:33:14.982]        // -> [manuf <= 0x00000017]
[12:33:14.982]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:33:14.982]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:33:14.982]      isProduction = (version > 0);
[12:33:14.982]        // -> [isProduction <= 0x00000001]
[12:33:14.982]    </block>
[12:33:14.982]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:33:14.982]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:33:14.982]        // =>  FALSE
[12:33:14.982]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:33:14.982]    </control>
[12:33:14.982]    <control if="continueId == 4" while="" timeout="0" info="">
[12:33:14.982]      // if-block "continueId == 4"
[12:33:14.982]        // =>  FALSE
[12:33:14.982]      // skip if-block "continueId == 4"
[12:33:14.986]    </control>
[12:33:14.986]    <control if="!isProduction" while="" timeout="0" info="">
[12:33:14.986]      // if-block "!isProduction"
[12:33:14.986]        // =>  FALSE
[12:33:14.986]      // skip if-block "!isProduction"
[12:33:14.986]    </control>
[12:33:14.986]  </sequence>
[12:33:14.986]  
[12:45:24.366]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:45:24.366]  
[12:45:24.374]  <debugvars>
[12:45:24.374]    // Pre-defined
[12:45:24.374]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:45:24.374]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:45:24.375]    __dp=0x00000000
[12:45:24.375]    __ap=0x00000000
[12:45:24.375]    __traceout=0x00000000      (Trace Disabled)
[12:45:24.375]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:45:24.375]    __FlashAddr=0x00000000
[12:45:24.375]    __FlashLen=0x00000000
[12:45:24.375]    __FlashArg=0x00000000
[12:45:24.375]    __FlashOp=0x00000000
[12:45:24.376]    __Result=0x00000000
[12:45:24.376]  </debugvars>
[12:45:24.376]  
[12:45:24.376]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:45:24.376]    <block atomic="false" info="">
[12:45:24.376]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:45:24.376]        // -> [isSWJ <= 0x00000001]
[12:45:24.377]      __var hasDormant = __protocol & 0x00020000;
[12:45:24.377]        // -> [hasDormant <= 0x00000000]
[12:45:24.377]      __var protType   = __protocol & 0x0000FFFF;
[12:45:24.377]        // -> [protType <= 0x00000002]
[12:45:24.377]    </block>
[12:45:24.377]    <control if="protType == 1" while="" timeout="0" info="">
[12:45:24.377]      // if-block "protType == 1"
[12:45:24.377]        // =>  FALSE
[12:45:24.377]      // skip if-block "protType == 1"
[12:45:24.377]    </control>
[12:45:24.377]    <control if="protType == 2" while="" timeout="0" info="">
[12:45:24.377]      // if-block "protType == 2"
[12:45:24.377]        // =>  TRUE
[12:45:24.377]      <control if="isSWJ" while="" timeout="0" info="">
[12:45:24.377]        // if-block "isSWJ"
[12:45:24.377]          // =>  TRUE
[12:45:24.377]        <control if="hasDormant" while="" timeout="0" info="">
[12:45:24.378]          // if-block "hasDormant"
[12:45:24.378]            // =>  FALSE
[12:45:24.378]          // skip if-block "hasDormant"
[12:45:24.378]        </control>
[12:45:24.378]        <control if="!hasDormant" while="" timeout="0" info="">
[12:45:24.379]          // if-block "!hasDormant"
[12:45:24.379]            // =>  TRUE
[12:45:24.379]          <block atomic="false" info="">
[12:45:24.379]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:45:24.385]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:45:24.385]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:45:24.386]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:45:24.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:45:24.389]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:45:24.391]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:45:24.393]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:45:24.393]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:45:24.394]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:45:24.394]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:45:24.402]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:45:24.402]          </block>
[12:45:24.402]          // end if-block "!hasDormant"
[12:45:24.402]        </control>
[12:45:24.402]        // end if-block "isSWJ"
[12:45:24.402]      </control>
[12:45:24.404]      <control if="!isSWJ" while="" timeout="0" info="">
[12:45:24.404]        // if-block "!isSWJ"
[12:45:24.404]          // =>  FALSE
[12:45:24.404]        // skip if-block "!isSWJ"
[12:45:24.404]      </control>
[12:45:24.404]      <block atomic="false" info="">
[12:45:24.404]        ReadDP(0x0);
[12:45:24.406]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:45:24.406]      </block>
[12:45:24.406]      // end if-block "protType == 2"
[12:45:24.406]    </control>
[12:45:24.406]  </sequence>
[12:45:24.406]  
[12:45:24.408]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:45:24.408]  
[12:45:24.408]  <debugvars>
[12:45:24.408]    // Pre-defined
[12:45:24.408]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:45:24.408]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:45:24.408]    __dp=0x00000000
[12:45:24.408]    __ap=0x00000000
[12:45:24.408]    __traceout=0x00000000      (Trace Disabled)
[12:45:24.408]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:45:24.408]    __FlashAddr=0x00000000
[12:45:24.408]    __FlashLen=0x00000000
[12:45:24.408]    __FlashArg=0x00000000
[12:45:24.408]    __FlashOp=0x00000000
[12:45:24.408]    __Result=0x00000000
[12:45:24.408]  </debugvars>
[12:45:24.408]  
[12:45:24.408]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:45:24.408]    <block atomic="false" info="">
[12:45:24.408]      __var SW_DP_ABORT       = 0x0;
[12:45:24.408]        // -> [SW_DP_ABORT <= 0x00000000]
[12:45:24.408]      __var DP_CTRL_STAT      = 0x4;
[12:45:24.408]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:45:24.408]      __var DP_SELECT         = 0x8;
[12:45:24.408]        // -> [DP_SELECT <= 0x00000008]
[12:45:24.408]      __var powered_down      = 0;
[12:45:24.408]        // -> [powered_down <= 0x00000000]
[12:45:24.412]      WriteDP(DP_SELECT, 0x00000000);
[12:45:24.413]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:45:24.413]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:45:24.414]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:45:24.414]        // -> [powered_down <= 0x00000001]
[12:45:24.414]    </block>
[12:45:24.414]    <control if="powered_down" while="" timeout="0" info="">
[12:45:24.414]      // if-block "powered_down"
[12:45:24.414]        // =>  TRUE
[12:45:24.415]      <block atomic="false" info="">
[12:45:24.415]        Message(0, "Debug/System power-up request sent");
[12:45:24.417]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:45:24.417]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:45:24.417]      </block>
[12:45:24.417]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:45:24.417]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:45:24.420]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:45:24.420]        // while-condition  =>  FALSE
[12:45:24.420]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:45:24.420]      </control>
[12:45:24.424]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:45:24.424]        // if-block "(__protocol & 0xFFFF) == 1"
[12:45:24.424]          // =>  FALSE
[12:45:24.424]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:45:24.424]      </control>
[12:45:24.424]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:45:24.424]        // if-block "(__protocol & 0xFFFF) == 2"
[12:45:24.425]          // =>  TRUE
[12:45:24.425]        <block atomic="false" info="">
[12:45:24.425]          Message(0, "executing SWD power up");
[12:45:24.426]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:45:24.428]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:45:24.428]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:45:24.428]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:45:24.428]        </block>
[12:45:24.428]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:45:24.428]      </control>
[12:45:24.428]      // end if-block "powered_down"
[12:45:24.428]    </control>
[12:45:24.428]    <block atomic="false" info="">
[12:45:24.428]      __var DEBUG_PORT_VAL    = 0;
[12:45:24.428]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:45:24.428]      __var ACCESS_POINT_VAL  = 0;
[12:45:24.428]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:45:24.428]      __ap = 1; 
[12:45:24.428]        // -> [__ap <= 0x00000001]
[12:45:24.428]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:45:24.432]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:45:24.432]      __ap = 4;
[12:45:24.432]        // -> [__ap <= 0x00000004]
[12:45:24.432]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:45:24.437]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:45:24.437]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:45:24.437]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:45:24.437]    </block>
[12:45:24.437]    <block atomic="false" info="">
[12:45:24.437]      __var nReset = 0x80;
[12:45:24.437]        // -> [nReset <= 0x00000080]
[12:45:24.437]      __var canReadPins = 0;
[12:45:24.437]        // -> [canReadPins <= 0x00000000]
[12:45:24.437]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:45:24.440]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:45:24.440]        // -> [canReadPins <= 0x00000001]
[12:45:24.440]    </block>
[12:45:24.440]    <control if="" while="1" timeout="200" info="">
[12:45:24.440]      // while "1"  (timeout="200")
[12:45:24.440]      // while-condition  =>  TRUE
[12:45:24.440]      // while "1"  (timeout="200")
[12:45:24.440]      // while-condition  =>  TRUE
[12:45:24.440]      // while "1"  (timeout="200")
[12:45:24.440]      // while-condition  =>  TRUE
[12:45:24.440]      // while "1"  (timeout="200")
[12:45:24.440]      // while-condition  =>  TRUE
[12:45:24.440]      // while "1"  (timeout="200")
[12:45:24.440]      // while-condition  =>  TRUE
[12:45:24.440]      // while "1"  (timeout="200")
[12:45:24.440]      // while-condition  =>  TRUE
[12:45:24.440]      // while "1"  (timeout="200")
[12:45:24.440]      // while-condition  =>  TRUE
[12:45:24.440]      // while "1"  (timeout="200")
[12:45:24.440]      // while-condition  =>  TRUE
[12:45:24.440]      // while "1"  (timeout="200")
[12:45:24.440]      // while-condition  =>  TRUE
[12:45:24.440]      // while "1"  (timeout="200")
[12:45:24.440]      // while-condition  =>  TRUE
[12:45:24.440]      // while "1"  (timeout="200")
[12:45:24.440]      // while-condition  =>  TRUE
[12:45:24.440]      // while "1"  (timeout="200")
[12:45:24.440]      // while-condition  =>  TRUE
[12:45:24.444]      // while "1"  (timeout="200")
[12:45:24.444]      // while  =>  TIMEOUT
[12:45:24.444]      // end while "1"
[12:45:24.444]    </control>
[12:45:24.444]    <control if="canReadPins" while="" timeout="0" info="">
[12:45:24.444]      // if-block "canReadPins"
[12:45:24.444]        // =>  TRUE
[12:45:24.444]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:45:24.444]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:45:24.446]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:45:24.446]        // while-condition  =>  FALSE
[12:45:24.446]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:45:24.446]      </control>
[12:45:24.446]      // end if-block "canReadPins"
[12:45:24.446]    </control>
[12:45:24.446]    <control if="!canReadPins" while="" timeout="0" info="">
[12:45:24.446]      // if-block "!canReadPins"
[12:45:24.446]        // =>  FALSE
[12:45:24.446]      // skip if-block "!canReadPins"
[12:45:24.446]    </control>
[12:45:24.446]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:45:24.446]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:45:24.446]        // =>  TRUE
[12:45:24.446]      <block atomic="false" info="">
[12:45:24.446]        WriteAP(0x00, 0x190008);
[12:45:24.448]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:45:24.448]        WriteAP(0xF0, 0x01);
[12:45:24.453]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:45:24.453]      </block>
[12:45:24.453]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:45:24.453]    </control>
[12:45:24.453]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:45:24.453]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:45:24.453]        // =>  FALSE
[12:45:24.453]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:45:24.453]    </control>
[12:45:24.453]    <block atomic="false" info="">
[12:45:24.453]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:45:24.456]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:45:24.456]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:45:24.456]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:45:24.456]      __ap = 0; //lets make sure we reset the access point selection
[12:45:24.456]        // -> [__ap <= 0x00000000]
[12:45:24.456]    </block>
[12:45:24.456]  </sequence>
[12:45:24.456]  
[12:45:24.486]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:45:24.486]  
[12:45:24.486]  <debugvars>
[12:45:24.486]    // Pre-defined
[12:45:24.486]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:45:24.486]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:45:24.486]    __dp=0x00000000
[12:45:24.486]    __ap=0x00000000
[12:45:24.486]    __traceout=0x00000000      (Trace Disabled)
[12:45:24.486]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:45:24.489]    __FlashAddr=0x00000000
[12:45:24.489]    __FlashLen=0x00000000
[12:45:24.489]    __FlashArg=0x00000000
[12:45:24.489]    __FlashOp=0x00000000
[12:45:24.489]    __Result=0x00000000
[12:45:24.489]  </debugvars>
[12:45:24.489]  
[12:45:24.489]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:45:24.489]    <block atomic="false" info="">
[12:45:24.489]      __var deviceID = 0;
[12:45:24.489]        // -> [deviceID <= 0x00000000]
[12:45:24.489]      __var version = 0;
[12:45:24.489]        // -> [version <= 0x00000000]
[12:45:24.489]      __var partNum = 0;
[12:45:24.489]        // -> [partNum <= 0x00000000]
[12:45:24.489]      __var manuf = 0;
[12:45:24.489]        // -> [manuf <= 0x00000000]
[12:45:24.489]      __var isMSPM0G1X0X_G3X0X = 0;
[12:45:24.489]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:45:24.489]      __var isProduction = 0;
[12:45:24.489]        // -> [isProduction <= 0x00000000]
[12:45:24.489]      __var continueId = 0;
[12:45:24.489]        // -> [continueId <= 0x00000000]
[12:45:24.489]      deviceID =   Read32(0x41C40004);
[12:45:24.497]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:45:24.497]        // -> [deviceID <= 0x2BB8802F]
[12:45:24.497]      version = deviceID >> 28;
[12:45:24.497]        // -> [version <= 0x00000002]
[12:45:24.497]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:45:24.497]        // -> [partNum <= 0x0000BB88]
[12:45:24.497]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:45:24.497]        // -> [manuf <= 0x00000017]
[12:45:24.497]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:45:24.497]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:45:24.497]      isProduction = (version > 0);
[12:45:24.497]        // -> [isProduction <= 0x00000001]
[12:45:24.497]    </block>
[12:45:24.497]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:45:24.497]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:45:24.497]        // =>  FALSE
[12:45:24.497]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:45:24.497]    </control>
[12:45:24.497]    <control if="continueId == 4" while="" timeout="0" info="">
[12:45:24.497]      // if-block "continueId == 4"
[12:45:24.497]        // =>  FALSE
[12:45:24.497]      // skip if-block "continueId == 4"
[12:45:24.497]    </control>
[12:45:24.497]    <control if="!isProduction" while="" timeout="0" info="">
[12:45:24.497]      // if-block "!isProduction"
[12:45:24.497]        // =>  FALSE
[12:45:24.501]      // skip if-block "!isProduction"
[12:45:24.501]    </control>
[12:45:24.501]  </sequence>
[12:45:24.501]  
[12:46:35.462]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:46:35.462]  
[12:46:35.472]  <debugvars>
[12:46:35.472]    // Pre-defined
[12:46:35.472]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:46:35.472]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:46:35.472]    __dp=0x00000000
[12:46:35.472]    __ap=0x00000000
[12:46:35.472]    __traceout=0x00000000      (Trace Disabled)
[12:46:35.472]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:46:35.472]    __FlashAddr=0x00000000
[12:46:35.473]    __FlashLen=0x00000000
[12:46:35.473]    __FlashArg=0x00000000
[12:46:35.473]    __FlashOp=0x00000000
[12:46:35.473]    __Result=0x00000000
[12:46:35.473]  </debugvars>
[12:46:35.473]  
[12:46:35.473]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:46:35.473]    <block atomic="false" info="">
[12:46:35.474]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:46:35.474]        // -> [isSWJ <= 0x00000001]
[12:46:35.474]      __var hasDormant = __protocol & 0x00020000;
[12:46:35.474]        // -> [hasDormant <= 0x00000000]
[12:46:35.474]      __var protType   = __protocol & 0x0000FFFF;
[12:46:35.474]        // -> [protType <= 0x00000002]
[12:46:35.474]    </block>
[12:46:35.474]    <control if="protType == 1" while="" timeout="0" info="">
[12:46:35.474]      // if-block "protType == 1"
[12:46:35.474]        // =>  FALSE
[12:46:35.475]      // skip if-block "protType == 1"
[12:46:35.475]    </control>
[12:46:35.475]    <control if="protType == 2" while="" timeout="0" info="">
[12:46:35.475]      // if-block "protType == 2"
[12:46:35.475]        // =>  TRUE
[12:46:35.475]      <control if="isSWJ" while="" timeout="0" info="">
[12:46:35.475]        // if-block "isSWJ"
[12:46:35.475]          // =>  TRUE
[12:46:35.475]        <control if="hasDormant" while="" timeout="0" info="">
[12:46:35.475]          // if-block "hasDormant"
[12:46:35.475]            // =>  FALSE
[12:46:35.475]          // skip if-block "hasDormant"
[12:46:35.475]        </control>
[12:46:35.475]        <control if="!hasDormant" while="" timeout="0" info="">
[12:46:35.475]          // if-block "!hasDormant"
[12:46:35.475]            // =>  TRUE
[12:46:35.475]          <block atomic="false" info="">
[12:46:35.475]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:46:35.478]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:46:35.478]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:46:35.481]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:46:35.481]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:46:35.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:46:35.482]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:46:35.483]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:46:35.483]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:46:35.486]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:46:35.486]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:46:35.490]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:46:35.490]          </block>
[12:46:35.490]          // end if-block "!hasDormant"
[12:46:35.490]        </control>
[12:46:35.490]        // end if-block "isSWJ"
[12:46:35.490]      </control>
[12:46:35.490]      <control if="!isSWJ" while="" timeout="0" info="">
[12:46:35.490]        // if-block "!isSWJ"
[12:46:35.490]          // =>  FALSE
[12:46:35.490]        // skip if-block "!isSWJ"
[12:46:35.490]      </control>
[12:46:35.492]      <block atomic="false" info="">
[12:46:35.492]        ReadDP(0x0);
[12:46:35.498]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:46:35.498]      </block>
[12:46:35.498]      // end if-block "protType == 2"
[12:46:35.498]    </control>
[12:46:35.501]  </sequence>
[12:46:35.501]  
[12:46:35.504]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:46:35.504]  
[12:46:35.504]  <debugvars>
[12:46:35.504]    // Pre-defined
[12:46:35.504]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:46:35.504]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:46:35.504]    __dp=0x00000000
[12:46:35.504]    __ap=0x00000000
[12:46:35.504]    __traceout=0x00000000      (Trace Disabled)
[12:46:35.504]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:46:35.504]    __FlashAddr=0x00000000
[12:46:35.504]    __FlashLen=0x00000000
[12:46:35.504]    __FlashArg=0x00000000
[12:46:35.504]    __FlashOp=0x00000000
[12:46:35.504]    __Result=0x00000000
[12:46:35.506]  </debugvars>
[12:46:35.506]  
[12:46:35.506]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:46:35.506]    <block atomic="false" info="">
[12:46:35.506]      __var SW_DP_ABORT       = 0x0;
[12:46:35.506]        // -> [SW_DP_ABORT <= 0x00000000]
[12:46:35.506]      __var DP_CTRL_STAT      = 0x4;
[12:46:35.506]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:46:35.506]      __var DP_SELECT         = 0x8;
[12:46:35.506]        // -> [DP_SELECT <= 0x00000008]
[12:46:35.506]      __var powered_down      = 0;
[12:46:35.506]        // -> [powered_down <= 0x00000000]
[12:46:35.506]      WriteDP(DP_SELECT, 0x00000000);
[12:46:35.506]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:46:35.506]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:46:35.512]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:46:35.512]        // -> [powered_down <= 0x00000001]
[12:46:35.512]    </block>
[12:46:35.512]    <control if="powered_down" while="" timeout="0" info="">
[12:46:35.512]      // if-block "powered_down"
[12:46:35.512]        // =>  TRUE
[12:46:35.512]      <block atomic="false" info="">
[12:46:35.513]        Message(0, "Debug/System power-up request sent");
[12:46:35.513]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:46:35.518]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:46:35.518]      </block>
[12:46:35.518]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:46:35.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:46:35.518]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:46:35.518]        // while-condition  =>  FALSE
[12:46:35.518]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:46:35.518]      </control>
[12:46:35.518]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:46:35.518]        // if-block "(__protocol & 0xFFFF) == 1"
[12:46:35.518]          // =>  FALSE
[12:46:35.518]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:46:35.518]      </control>
[12:46:35.518]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:46:35.518]        // if-block "(__protocol & 0xFFFF) == 2"
[12:46:35.518]          // =>  TRUE
[12:46:35.522]        <block atomic="false" info="">
[12:46:35.522]          Message(0, "executing SWD power up");
[12:46:35.523]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:46:35.526]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:46:35.526]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:46:35.532]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:46:35.534]        </block>
[12:46:35.534]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:46:35.534]      </control>
[12:46:35.534]      // end if-block "powered_down"
[12:46:35.534]    </control>
[12:46:35.534]    <block atomic="false" info="">
[12:46:35.535]      __var DEBUG_PORT_VAL    = 0;
[12:46:35.535]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:46:35.535]      __var ACCESS_POINT_VAL  = 0;
[12:46:35.535]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:46:35.535]      __ap = 1; 
[12:46:35.535]        // -> [__ap <= 0x00000001]
[12:46:35.535]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:46:35.546]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:46:35.546]      __ap = 4;
[12:46:35.546]        // -> [__ap <= 0x00000004]
[12:46:35.546]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:46:35.552]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:46:35.552]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:46:35.552]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:46:35.552]    </block>
[12:46:35.554]    <block atomic="false" info="">
[12:46:35.554]      __var nReset = 0x80;
[12:46:35.554]        // -> [nReset <= 0x00000080]
[12:46:35.554]      __var canReadPins = 0;
[12:46:35.554]        // -> [canReadPins <= 0x00000000]
[12:46:35.554]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:46:35.554]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:46:35.554]        // -> [canReadPins <= 0x00000001]
[12:46:35.554]    </block>
[12:46:35.554]    <control if="" while="1" timeout="200" info="">
[12:46:35.554]      // while "1"  (timeout="200")
[12:46:35.554]      // while-condition  =>  TRUE
[12:46:35.554]      // while "1"  (timeout="200")
[12:46:35.554]      // while-condition  =>  TRUE
[12:46:35.554]      // while "1"  (timeout="200")
[12:46:35.554]      // while-condition  =>  TRUE
[12:46:35.554]      // while "1"  (timeout="200")
[12:46:35.558]      // while-condition  =>  TRUE
[12:46:35.558]      // while "1"  (timeout="200")
[12:46:35.558]      // while-condition  =>  TRUE
[12:46:35.558]      // while "1"  (timeout="200")
[12:46:35.558]      // while-condition  =>  TRUE
[12:46:35.558]      // while "1"  (timeout="200")
[12:46:35.558]      // while-condition  =>  TRUE
[12:46:35.559]      // while "1"  (timeout="200")
[12:46:35.559]      // while-condition  =>  TRUE
[12:46:35.559]      // while "1"  (timeout="200")
[12:46:35.559]      // while-condition  =>  TRUE
[12:46:35.559]      // while "1"  (timeout="200")
[12:46:35.559]      // while-condition  =>  TRUE
[12:46:35.559]      // while "1"  (timeout="200")
[12:46:35.560]      // while-condition  =>  TRUE
[12:46:35.560]      // while "1"  (timeout="200")
[12:46:35.560]      // while-condition  =>  TRUE
[12:46:35.560]      // while "1"  (timeout="200")
[12:46:35.560]      // while-condition  =>  TRUE
[12:46:35.560]      // while "1"  (timeout="200")
[12:46:35.560]      // while-condition  =>  TRUE
[12:46:35.560]      // while "1"  (timeout="200")
[12:46:35.560]      // while-condition  =>  TRUE
[12:46:35.561]      // while "1"  (timeout="200")
[12:46:35.561]      // while-condition  =>  TRUE
[12:46:35.561]      // while "1"  (timeout="200")
[12:46:35.561]      // while-condition  =>  TRUE
[12:46:35.561]      // while "1"  (timeout="200")
[12:46:35.561]      // while-condition  =>  TRUE
[12:46:35.561]      // while "1"  (timeout="200")
[12:46:35.561]      // while-condition  =>  TRUE
[12:46:35.561]      // while "1"  (timeout="200")
[12:46:35.561]      // while-condition  =>  TRUE
[12:46:35.561]      // while "1"  (timeout="200")
[12:46:35.562]      // while-condition  =>  TRUE
[12:46:35.562]      // while "1"  (timeout="200")
[12:46:35.562]      // while-condition  =>  TRUE
[12:46:35.562]      // while "1"  (timeout="200")
[12:46:35.562]      // while-condition  =>  TRUE
[12:46:35.562]      // while "1"  (timeout="200")
[12:46:35.562]      // while-condition  =>  TRUE
[12:46:35.562]      // while "1"  (timeout="200")
[12:46:35.563]      // while-condition  =>  TRUE
[12:46:35.563]      // while "1"  (timeout="200")
[12:46:35.563]      // while-condition  =>  TRUE
[12:46:35.563]      // while "1"  (timeout="200")
[12:46:35.563]      // while-condition  =>  TRUE
[12:46:35.563]      // while "1"  (timeout="200")
[12:46:35.563]      // while-condition  =>  TRUE
[12:46:35.563]      // while "1"  (timeout="200")
[12:46:35.563]      // while-condition  =>  TRUE
[12:46:35.563]      // while "1"  (timeout="200")
[12:46:35.563]      // while-condition  =>  TRUE
[12:46:35.564]      // while "1"  (timeout="200")
[12:46:35.564]      // while-condition  =>  TRUE
[12:46:35.564]      // while "1"  (timeout="200")
[12:46:35.564]      // while-condition  =>  TRUE
[12:46:35.564]      // while "1"  (timeout="200")
[12:46:35.564]      // while-condition  =>  TRUE
[12:46:35.564]      // while "1"  (timeout="200")
[12:46:35.564]      // while-condition  =>  TRUE
[12:46:35.564]      // while "1"  (timeout="200")
[12:46:35.564]      // while-condition  =>  TRUE
[12:46:35.565]      // while "1"  (timeout="200")
[12:46:35.565]      // while-condition  =>  TRUE
[12:46:35.565]      // while "1"  (timeout="200")
[12:46:35.565]      // while-condition  =>  TRUE
[12:46:35.565]      // while "1"  (timeout="200")
[12:46:35.565]      // while-condition  =>  TRUE
[12:46:35.565]      // while "1"  (timeout="200")
[12:46:35.565]      // while-condition  =>  TRUE
[12:46:35.565]      // while "1"  (timeout="200")
[12:46:35.565]      // while-condition  =>  TRUE
[12:46:35.566]      // while "1"  (timeout="200")
[12:46:35.566]      // while-condition  =>  TRUE
[12:46:35.566]      // while "1"  (timeout="200")
[12:46:35.566]      // while-condition  =>  TRUE
[12:46:35.566]      // while "1"  (timeout="200")
[12:46:35.567]      // while-condition  =>  TRUE
[12:46:35.567]      // while "1"  (timeout="200")
[12:46:35.567]      // while  =>  TIMEOUT
[12:46:35.567]      // end while "1"
[12:46:35.567]    </control>
[12:46:35.567]    <control if="canReadPins" while="" timeout="0" info="">
[12:46:35.567]      // if-block "canReadPins"
[12:46:35.567]        // =>  TRUE
[12:46:35.567]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:46:35.567]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:46:35.570]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:46:35.570]        // while-condition  =>  FALSE
[12:46:35.570]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:46:35.570]      </control>
[12:46:35.571]      // end if-block "canReadPins"
[12:46:35.571]    </control>
[12:46:35.571]    <control if="!canReadPins" while="" timeout="0" info="">
[12:46:35.571]      // if-block "!canReadPins"
[12:46:35.571]        // =>  FALSE
[12:46:35.571]      // skip if-block "!canReadPins"
[12:46:35.571]    </control>
[12:46:35.571]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:46:35.571]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:46:35.572]        // =>  TRUE
[12:46:35.572]      <block atomic="false" info="">
[12:46:35.572]        WriteAP(0x00, 0x190008);
[12:46:35.574]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:46:35.574]        WriteAP(0xF0, 0x01);
[12:46:35.581]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:46:35.581]      </block>
[12:46:35.581]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:46:35.581]    </control>
[12:46:35.582]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:46:35.582]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:46:35.582]        // =>  FALSE
[12:46:35.582]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:46:35.582]    </control>
[12:46:35.582]    <block atomic="false" info="">
[12:46:35.582]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:46:35.585]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:46:35.586]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:46:35.586]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:46:35.591]      __ap = 0; //lets make sure we reset the access point selection
[12:46:35.591]        // -> [__ap <= 0x00000000]
[12:46:35.591]    </block>
[12:46:35.591]  </sequence>
[12:46:35.592]  
[12:46:35.620]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:46:35.620]  
[12:46:35.620]  <debugvars>
[12:46:35.620]    // Pre-defined
[12:46:35.620]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:46:35.620]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:46:35.620]    __dp=0x00000000
[12:46:35.620]    __ap=0x00000000
[12:46:35.620]    __traceout=0x00000000      (Trace Disabled)
[12:46:35.622]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:46:35.622]    __FlashAddr=0x00000000
[12:46:35.622]    __FlashLen=0x00000000
[12:46:35.622]    __FlashArg=0x00000000
[12:46:35.622]    __FlashOp=0x00000000
[12:46:35.622]    __Result=0x00000000
[12:46:35.622]  </debugvars>
[12:46:35.622]  
[12:46:35.622]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:46:35.623]    <block atomic="false" info="">
[12:46:35.623]      __var deviceID = 0;
[12:46:35.623]        // -> [deviceID <= 0x00000000]
[12:46:35.623]      __var version = 0;
[12:46:35.623]        // -> [version <= 0x00000000]
[12:46:35.623]      __var partNum = 0;
[12:46:35.623]        // -> [partNum <= 0x00000000]
[12:46:35.623]      __var manuf = 0;
[12:46:35.623]        // -> [manuf <= 0x00000000]
[12:46:35.623]      __var isMSPM0G1X0X_G3X0X = 0;
[12:46:35.624]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:46:35.624]      __var isProduction = 0;
[12:46:35.624]        // -> [isProduction <= 0x00000000]
[12:46:35.624]      __var continueId = 0;
[12:46:35.624]        // -> [continueId <= 0x00000000]
[12:46:35.624]      deviceID =   Read32(0x41C40004);
[12:46:35.629]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:46:35.629]        // -> [deviceID <= 0x2BB8802F]
[12:46:35.629]      version = deviceID >> 28;
[12:46:35.629]        // -> [version <= 0x00000002]
[12:46:35.629]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:46:35.629]        // -> [partNum <= 0x0000BB88]
[12:46:35.629]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:46:35.629]        // -> [manuf <= 0x00000017]
[12:46:35.629]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:46:35.629]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:46:35.629]      isProduction = (version > 0);
[12:46:35.629]        // -> [isProduction <= 0x00000001]
[12:46:35.630]    </block>
[12:46:35.630]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:46:35.630]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:46:35.630]        // =>  FALSE
[12:46:35.630]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:46:35.630]    </control>
[12:46:35.630]    <control if="continueId == 4" while="" timeout="0" info="">
[12:46:35.630]      // if-block "continueId == 4"
[12:46:35.630]        // =>  FALSE
[12:46:35.630]      // skip if-block "continueId == 4"
[12:46:35.630]    </control>
[12:46:35.630]    <control if="!isProduction" while="" timeout="0" info="">
[12:46:35.630]      // if-block "!isProduction"
[12:46:35.632]        // =>  FALSE
[12:46:35.632]      // skip if-block "!isProduction"
[12:46:35.632]    </control>
[12:46:35.632]  </sequence>
[12:46:35.632]  
[12:46:42.692]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:46:42.692]  
[12:46:42.692]  <debugvars>
[12:46:42.692]    // Pre-defined
[12:46:42.692]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:46:42.692]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:46:42.693]    __dp=0x00000000
[12:46:42.693]    __ap=0x00000000
[12:46:42.693]    __traceout=0x00000000      (Trace Disabled)
[12:46:42.693]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:46:42.693]    __FlashAddr=0x00000000
[12:46:42.693]    __FlashLen=0x00000000
[12:46:42.693]    __FlashArg=0x00000000
[12:46:42.693]    __FlashOp=0x00000000
[12:46:42.693]    __Result=0x00000000
[12:46:42.693]  </debugvars>
[12:46:42.693]  
[12:46:42.693]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:46:42.693]    <block atomic="false" info="">
[12:46:42.693]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:46:42.693]        // -> [isSWJ <= 0x00000001]
[12:46:42.693]      __var hasDormant = __protocol & 0x00020000;
[12:46:42.693]        // -> [hasDormant <= 0x00000000]
[12:46:42.693]      __var protType   = __protocol & 0x0000FFFF;
[12:46:42.693]        // -> [protType <= 0x00000002]
[12:46:42.693]    </block>
[12:46:42.693]    <control if="protType == 1" while="" timeout="0" info="">
[12:46:42.693]      // if-block "protType == 1"
[12:46:42.693]        // =>  FALSE
[12:46:42.693]      // skip if-block "protType == 1"
[12:46:42.696]    </control>
[12:46:42.696]    <control if="protType == 2" while="" timeout="0" info="">
[12:46:42.696]      // if-block "protType == 2"
[12:46:42.696]        // =>  TRUE
[12:46:42.696]      <control if="isSWJ" while="" timeout="0" info="">
[12:46:42.696]        // if-block "isSWJ"
[12:46:42.696]          // =>  TRUE
[12:46:42.696]        <control if="hasDormant" while="" timeout="0" info="">
[12:46:42.696]          // if-block "hasDormant"
[12:46:42.696]            // =>  FALSE
[12:46:42.696]          // skip if-block "hasDormant"
[12:46:42.696]        </control>
[12:46:42.696]        <control if="!hasDormant" while="" timeout="0" info="">
[12:46:42.696]          // if-block "!hasDormant"
[12:46:42.696]            // =>  TRUE
[12:46:42.698]          <block atomic="false" info="">
[12:46:42.698]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:46:42.704]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:46:42.704]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:46:42.708]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:46:42.708]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:46:42.728]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:46:42.728]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:46:42.732]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:46:42.732]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:46:42.734]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:46:42.734]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:46:42.736]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:46:42.736]          </block>
[12:46:42.736]          // end if-block "!hasDormant"
[12:46:42.736]        </control>
[12:46:42.736]        // end if-block "isSWJ"
[12:46:42.736]      </control>
[12:46:42.736]      <control if="!isSWJ" while="" timeout="0" info="">
[12:46:42.736]        // if-block "!isSWJ"
[12:46:42.736]          // =>  FALSE
[12:46:42.736]        // skip if-block "!isSWJ"
[12:46:42.736]      </control>
[12:46:42.736]      <block atomic="false" info="">
[12:46:42.736]        ReadDP(0x0);
[12:46:42.740]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:46:42.740]      </block>
[12:46:42.740]      // end if-block "protType == 2"
[12:46:42.740]    </control>
[12:46:42.740]  </sequence>
[12:46:42.740]  
[12:46:42.744]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:46:42.744]  
[12:46:42.744]  <debugvars>
[12:46:42.744]    // Pre-defined
[12:46:42.744]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:46:42.744]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:46:42.744]    __dp=0x00000000
[12:46:42.744]    __ap=0x00000000
[12:46:42.744]    __traceout=0x00000000      (Trace Disabled)
[12:46:42.744]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:46:42.744]    __FlashAddr=0x00000000
[12:46:42.744]    __FlashLen=0x00000000
[12:46:42.744]    __FlashArg=0x00000000
[12:46:42.744]    __FlashOp=0x00000000
[12:46:42.744]    __Result=0x00000000
[12:46:42.744]  </debugvars>
[12:46:42.744]  
[12:46:42.744]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:46:42.744]    <block atomic="false" info="">
[12:46:42.744]      __var SW_DP_ABORT       = 0x0;
[12:46:42.744]        // -> [SW_DP_ABORT <= 0x00000000]
[12:46:42.744]      __var DP_CTRL_STAT      = 0x4;
[12:46:42.744]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:46:42.744]      __var DP_SELECT         = 0x8;
[12:46:42.744]        // -> [DP_SELECT <= 0x00000008]
[12:46:42.744]      __var powered_down      = 0;
[12:46:42.744]        // -> [powered_down <= 0x00000000]
[12:46:42.744]      WriteDP(DP_SELECT, 0x00000000);
[12:46:42.748]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:46:42.748]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:46:42.748]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:46:42.748]        // -> [powered_down <= 0x00000001]
[12:46:42.748]    </block>
[12:46:42.748]    <control if="powered_down" while="" timeout="0" info="">
[12:46:42.748]      // if-block "powered_down"
[12:46:42.748]        // =>  TRUE
[12:46:42.748]      <block atomic="false" info="">
[12:46:42.748]        Message(0, "Debug/System power-up request sent");
[12:46:42.752]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:46:42.754]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:46:42.754]      </block>
[12:46:42.754]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:46:42.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:46:42.756]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:46:42.756]        // while-condition  =>  FALSE
[12:46:42.756]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:46:42.756]      </control>
[12:46:42.756]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:46:42.756]        // if-block "(__protocol & 0xFFFF) == 1"
[12:46:42.756]          // =>  FALSE
[12:46:42.756]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:46:42.756]      </control>
[12:46:42.756]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:46:42.756]        // if-block "(__protocol & 0xFFFF) == 2"
[12:46:42.756]          // =>  TRUE
[12:46:42.756]        <block atomic="false" info="">
[12:46:42.756]          Message(0, "executing SWD power up");
[12:46:42.756]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:46:42.760]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:46:42.760]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:46:42.764]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:46:42.764]        </block>
[12:46:42.764]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:46:42.764]      </control>
[12:46:42.764]      // end if-block "powered_down"
[12:46:42.764]    </control>
[12:46:42.764]    <block atomic="false" info="">
[12:46:42.764]      __var DEBUG_PORT_VAL    = 0;
[12:46:42.764]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:46:42.764]      __var ACCESS_POINT_VAL  = 0;
[12:46:42.764]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:46:42.764]      __ap = 1; 
[12:46:42.764]        // -> [__ap <= 0x00000001]
[12:46:42.764]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:46:42.768]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:46:42.768]      __ap = 4;
[12:46:42.768]        // -> [__ap <= 0x00000004]
[12:46:42.770]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:46:42.775]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:46:42.775]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:46:42.775]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:46:42.777]    </block>
[12:46:42.777]    <block atomic="false" info="">
[12:46:42.777]      __var nReset = 0x80;
[12:46:42.777]        // -> [nReset <= 0x00000080]
[12:46:42.777]      __var canReadPins = 0;
[12:46:42.777]        // -> [canReadPins <= 0x00000000]
[12:46:42.777]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:46:42.778]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:46:42.779]        // -> [canReadPins <= 0x00000001]
[12:46:42.779]    </block>
[12:46:42.779]    <control if="" while="1" timeout="200" info="">
[12:46:42.779]      // while "1"  (timeout="200")
[12:46:42.779]      // while-condition  =>  TRUE
[12:46:42.779]      // while "1"  (timeout="200")
[12:46:42.780]      // while-condition  =>  TRUE
[12:46:42.780]      // while "1"  (timeout="200")
[12:46:42.780]      // while-condition  =>  TRUE
[12:46:42.780]      // while "1"  (timeout="200")
[12:46:42.781]      // while-condition  =>  TRUE
[12:46:42.781]      // while "1"  (timeout="200")
[12:46:42.781]      // while-condition  =>  TRUE
[12:46:42.781]      // while "1"  (timeout="200")
[12:46:42.781]      // while-condition  =>  TRUE
[12:46:42.781]      // while "1"  (timeout="200")
[12:46:42.781]      // while-condition  =>  TRUE
[12:46:42.781]      // while "1"  (timeout="200")
[12:46:42.781]      // while-condition  =>  TRUE
[12:46:42.782]      // while "1"  (timeout="200")
[12:46:42.782]      // while-condition  =>  TRUE
[12:46:42.782]      // while "1"  (timeout="200")
[12:46:42.782]      // while-condition  =>  TRUE
[12:46:42.782]      // while "1"  (timeout="200")
[12:46:42.782]      // while-condition  =>  TRUE
[12:46:42.782]      // while "1"  (timeout="200")
[12:46:42.782]      // while-condition  =>  TRUE
[12:46:42.782]      // while "1"  (timeout="200")
[12:46:42.782]      // while-condition  =>  TRUE
[12:46:42.783]      // while "1"  (timeout="200")
[12:46:42.783]      // while-condition  =>  TRUE
[12:46:42.783]      // while "1"  (timeout="200")
[12:46:42.783]      // while-condition  =>  TRUE
[12:46:42.783]      // while "1"  (timeout="200")
[12:46:42.783]      // while-condition  =>  TRUE
[12:46:42.783]      // while "1"  (timeout="200")
[12:46:42.783]      // while-condition  =>  TRUE
[12:46:42.783]      // while "1"  (timeout="200")
[12:46:42.783]      // while-condition  =>  TRUE
[12:46:42.784]      // while "1"  (timeout="200")
[12:46:42.784]      // while-condition  =>  TRUE
[12:46:42.784]      // while "1"  (timeout="200")
[12:46:42.784]      // while-condition  =>  TRUE
[12:46:42.784]      // while "1"  (timeout="200")
[12:46:42.784]      // while-condition  =>  TRUE
[12:46:42.784]      // while "1"  (timeout="200")
[12:46:42.784]      // while-condition  =>  TRUE
[12:46:42.784]      // while "1"  (timeout="200")
[12:46:42.784]      // while-condition  =>  TRUE
[12:46:42.785]      // while "1"  (timeout="200")
[12:46:42.785]      // while-condition  =>  TRUE
[12:46:42.785]      // while "1"  (timeout="200")
[12:46:42.785]      // while-condition  =>  TRUE
[12:46:42.785]      // while "1"  (timeout="200")
[12:46:42.785]      // while-condition  =>  TRUE
[12:46:42.785]      // while "1"  (timeout="200")
[12:46:42.785]      // while  =>  TIMEOUT
[12:46:42.785]      // end while "1"
[12:46:42.785]    </control>
[12:46:42.785]    <control if="canReadPins" while="" timeout="0" info="">
[12:46:42.786]      // if-block "canReadPins"
[12:46:42.786]        // =>  TRUE
[12:46:42.786]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:46:42.786]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:46:42.787]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:46:42.787]        // while-condition  =>  FALSE
[12:46:42.787]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:46:42.788]      </control>
[12:46:42.788]      // end if-block "canReadPins"
[12:46:42.788]    </control>
[12:46:42.788]    <control if="!canReadPins" while="" timeout="0" info="">
[12:46:42.788]      // if-block "!canReadPins"
[12:46:42.788]        // =>  FALSE
[12:46:42.788]      // skip if-block "!canReadPins"
[12:46:42.788]    </control>
[12:46:42.788]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:46:42.788]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:46:42.789]        // =>  TRUE
[12:46:42.789]      <block atomic="false" info="">
[12:46:42.789]        WriteAP(0x00, 0x190008);
[12:46:42.791]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:46:42.792]        WriteAP(0xF0, 0x01);
[12:46:42.796]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:46:42.796]      </block>
[12:46:42.796]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:46:42.796]    </control>
[12:46:42.796]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:46:42.796]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:46:42.796]        // =>  FALSE
[12:46:42.796]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:46:42.796]    </control>
[12:46:42.796]    <block atomic="false" info="">
[12:46:42.797]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:46:42.806]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:46:42.807]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:46:42.807]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:46:42.808]      __ap = 0; //lets make sure we reset the access point selection
[12:46:42.808]        // -> [__ap <= 0x00000000]
[12:46:42.808]    </block>
[12:46:42.808]  </sequence>
[12:46:42.808]  
[12:46:42.844]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:46:42.844]  
[12:46:42.844]  <debugvars>
[12:46:42.844]    // Pre-defined
[12:46:42.844]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:46:42.844]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:46:42.844]    __dp=0x00000000
[12:46:42.844]    __ap=0x00000000
[12:46:42.844]    __traceout=0x00000000      (Trace Disabled)
[12:46:42.844]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:46:42.844]    __FlashAddr=0x00000000
[12:46:42.844]    __FlashLen=0x00000000
[12:46:42.844]    __FlashArg=0x00000000
[12:46:42.844]    __FlashOp=0x00000000
[12:46:42.844]    __Result=0x00000000
[12:46:42.844]  </debugvars>
[12:46:42.844]  
[12:46:42.844]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:46:42.844]    <block atomic="false" info="">
[12:46:42.844]      __var deviceID = 0;
[12:46:42.844]        // -> [deviceID <= 0x00000000]
[12:46:42.844]      __var version = 0;
[12:46:42.844]        // -> [version <= 0x00000000]
[12:46:42.844]      __var partNum = 0;
[12:46:42.844]        // -> [partNum <= 0x00000000]
[12:46:42.847]      __var manuf = 0;
[12:46:42.847]        // -> [manuf <= 0x00000000]
[12:46:42.847]      __var isMSPM0G1X0X_G3X0X = 0;
[12:46:42.847]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:46:42.847]      __var isProduction = 0;
[12:46:42.847]        // -> [isProduction <= 0x00000000]
[12:46:42.847]      __var continueId = 0;
[12:46:42.847]        // -> [continueId <= 0x00000000]
[12:46:42.847]      deviceID =   Read32(0x41C40004);
[12:46:42.852]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:46:42.852]        // -> [deviceID <= 0x2BB8802F]
[12:46:42.852]      version = deviceID >> 28;
[12:46:42.852]        // -> [version <= 0x00000002]
[12:46:42.852]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:46:42.852]        // -> [partNum <= 0x0000BB88]
[12:46:42.852]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:46:42.852]        // -> [manuf <= 0x00000017]
[12:46:42.852]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:46:42.852]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:46:42.852]      isProduction = (version > 0);
[12:46:42.855]        // -> [isProduction <= 0x00000001]
[12:46:42.855]    </block>
[12:46:42.855]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:46:42.855]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:46:42.855]        // =>  FALSE
[12:46:42.855]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:46:42.855]    </control>
[12:46:42.855]    <control if="continueId == 4" while="" timeout="0" info="">
[12:46:42.855]      // if-block "continueId == 4"
[12:46:42.855]        // =>  FALSE
[12:46:42.855]      // skip if-block "continueId == 4"
[12:46:42.855]    </control>
[12:46:42.855]    <control if="!isProduction" while="" timeout="0" info="">
[12:46:42.855]      // if-block "!isProduction"
[12:46:42.855]        // =>  FALSE
[12:46:42.855]      // skip if-block "!isProduction"
[12:46:42.855]    </control>
[12:46:42.855]  </sequence>
[12:46:42.855]  
[12:48:18.748]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:48:18.748]  
[12:48:18.756]  <debugvars>
[12:48:18.756]    // Pre-defined
[12:48:18.756]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:48:18.756]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:48:18.756]    __dp=0x00000000
[12:48:18.756]    __ap=0x00000000
[12:48:18.756]    __traceout=0x00000000      (Trace Disabled)
[12:48:18.756]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:48:18.756]    __FlashAddr=0x00000000
[12:48:18.756]    __FlashLen=0x00000000
[12:48:18.756]    __FlashArg=0x00000000
[12:48:18.756]    __FlashOp=0x00000000
[12:48:18.756]    __Result=0x00000000
[12:48:18.756]  </debugvars>
[12:48:18.756]  
[12:48:18.756]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:48:18.756]    <block atomic="false" info="">
[12:48:18.756]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:48:18.756]        // -> [isSWJ <= 0x00000001]
[12:48:18.756]      __var hasDormant = __protocol & 0x00020000;
[12:48:18.756]        // -> [hasDormant <= 0x00000000]
[12:48:18.756]      __var protType   = __protocol & 0x0000FFFF;
[12:48:18.756]        // -> [protType <= 0x00000002]
[12:48:18.759]    </block>
[12:48:18.759]    <control if="protType == 1" while="" timeout="0" info="">
[12:48:18.759]      // if-block "protType == 1"
[12:48:18.759]        // =>  FALSE
[12:48:18.759]      // skip if-block "protType == 1"
[12:48:18.759]    </control>
[12:48:18.760]    <control if="protType == 2" while="" timeout="0" info="">
[12:48:18.760]      // if-block "protType == 2"
[12:48:18.760]        // =>  TRUE
[12:48:18.761]      <control if="isSWJ" while="" timeout="0" info="">
[12:48:18.761]        // if-block "isSWJ"
[12:48:18.761]          // =>  TRUE
[12:48:18.761]        <control if="hasDormant" while="" timeout="0" info="">
[12:48:18.761]          // if-block "hasDormant"
[12:48:18.761]            // =>  FALSE
[12:48:18.761]          // skip if-block "hasDormant"
[12:48:18.761]        </control>
[12:48:18.761]        <control if="!hasDormant" while="" timeout="0" info="">
[12:48:18.761]          // if-block "!hasDormant"
[12:48:18.761]            // =>  TRUE
[12:48:18.762]          <block atomic="false" info="">
[12:48:18.762]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:48:18.763]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:48:18.763]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:48:18.764]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:48:18.764]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:48:18.772]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:48:18.772]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:48:18.776]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:48:18.776]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:48:18.777]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:48:18.777]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:48:18.782]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:48:18.782]          </block>
[12:48:18.782]          // end if-block "!hasDormant"
[12:48:18.782]        </control>
[12:48:18.782]        // end if-block "isSWJ"
[12:48:18.782]      </control>
[12:48:18.783]      <control if="!isSWJ" while="" timeout="0" info="">
[12:48:18.783]        // if-block "!isSWJ"
[12:48:18.783]          // =>  FALSE
[12:48:18.783]        // skip if-block "!isSWJ"
[12:48:18.783]      </control>
[12:48:18.783]      <block atomic="false" info="">
[12:48:18.783]        ReadDP(0x0);
[12:48:18.786]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:48:18.786]      </block>
[12:48:18.786]      // end if-block "protType == 2"
[12:48:18.786]    </control>
[12:48:18.786]  </sequence>
[12:48:18.786]  
[12:48:18.790]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:48:18.790]  
[12:48:18.790]  <debugvars>
[12:48:18.790]    // Pre-defined
[12:48:18.790]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:48:18.790]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:48:18.790]    __dp=0x00000000
[12:48:18.790]    __ap=0x00000000
[12:48:18.790]    __traceout=0x00000000      (Trace Disabled)
[12:48:18.790]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:48:18.790]    __FlashAddr=0x00000000
[12:48:18.790]    __FlashLen=0x00000000
[12:48:18.790]    __FlashArg=0x00000000
[12:48:18.791]    __FlashOp=0x00000000
[12:48:18.791]    __Result=0x00000000
[12:48:18.791]  </debugvars>
[12:48:18.792]  
[12:48:18.792]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:48:18.792]    <block atomic="false" info="">
[12:48:18.792]      __var SW_DP_ABORT       = 0x0;
[12:48:18.792]        // -> [SW_DP_ABORT <= 0x00000000]
[12:48:18.792]      __var DP_CTRL_STAT      = 0x4;
[12:48:18.792]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:48:18.792]      __var DP_SELECT         = 0x8;
[12:48:18.792]        // -> [DP_SELECT <= 0x00000008]
[12:48:18.792]      __var powered_down      = 0;
[12:48:18.792]        // -> [powered_down <= 0x00000000]
[12:48:18.792]      WriteDP(DP_SELECT, 0x00000000);
[12:48:18.794]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:48:18.794]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:48:18.796]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:48:18.796]        // -> [powered_down <= 0x00000001]
[12:48:18.796]    </block>
[12:48:18.796]    <control if="powered_down" while="" timeout="0" info="">
[12:48:18.796]      // if-block "powered_down"
[12:48:18.796]        // =>  TRUE
[12:48:18.796]      <block atomic="false" info="">
[12:48:18.798]        Message(0, "Debug/System power-up request sent");
[12:48:18.800]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:48:18.801]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:48:18.801]      </block>
[12:48:18.801]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:48:18.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:48:18.803]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:48:18.803]        // while-condition  =>  FALSE
[12:48:18.804]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:48:18.804]      </control>
[12:48:18.804]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:48:18.804]        // if-block "(__protocol & 0xFFFF) == 1"
[12:48:18.804]          // =>  FALSE
[12:48:18.804]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:48:18.804]      </control>
[12:48:18.804]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:48:18.804]        // if-block "(__protocol & 0xFFFF) == 2"
[12:48:18.804]          // =>  TRUE
[12:48:18.804]        <block atomic="false" info="">
[12:48:18.804]          Message(0, "executing SWD power up");
[12:48:18.806]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:48:18.813]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:48:18.813]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:48:18.814]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:48:18.814]        </block>
[12:48:18.814]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:48:18.814]      </control>
[12:48:18.814]      // end if-block "powered_down"
[12:48:18.814]    </control>
[12:48:18.814]    <block atomic="false" info="">
[12:48:18.814]      __var DEBUG_PORT_VAL    = 0;
[12:48:18.814]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:48:18.814]      __var ACCESS_POINT_VAL  = 0;
[12:48:18.814]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:48:18.814]      __ap = 1; 
[12:48:18.814]        // -> [__ap <= 0x00000001]
[12:48:18.814]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:48:18.819]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:48:18.819]      __ap = 4;
[12:48:18.819]        // -> [__ap <= 0x00000004]
[12:48:18.819]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:48:18.826]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:48:18.826]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:48:18.826]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:48:18.830]    </block>
[12:48:18.830]    <block atomic="false" info="">
[12:48:18.830]      __var nReset = 0x80;
[12:48:18.830]        // -> [nReset <= 0x00000080]
[12:48:18.831]      __var canReadPins = 0;
[12:48:18.831]        // -> [canReadPins <= 0x00000000]
[12:48:18.831]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:48:18.834]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:48:18.834]        // -> [canReadPins <= 0x00000001]
[12:48:18.834]    </block>
[12:48:18.834]    <control if="" while="1" timeout="200" info="">
[12:48:18.834]      // while "1"  (timeout="200")
[12:48:18.834]      // while-condition  =>  TRUE
[12:48:18.834]      // while "1"  (timeout="200")
[12:48:18.834]      // while-condition  =>  TRUE
[12:48:18.834]      // while "1"  (timeout="200")
[12:48:18.834]      // while-condition  =>  TRUE
[12:48:18.834]      // while "1"  (timeout="200")
[12:48:18.834]      // while-condition  =>  TRUE
[12:48:18.834]      // while "1"  (timeout="200")
[12:48:18.834]      // while-condition  =>  TRUE
[12:48:18.834]      // while "1"  (timeout="200")
[12:48:18.834]      // while-condition  =>  TRUE
[12:48:18.834]      // while "1"  (timeout="200")
[12:48:18.834]      // while-condition  =>  TRUE
[12:48:18.834]      // while "1"  (timeout="200")
[12:48:18.834]      // while-condition  =>  TRUE
[12:48:18.834]      // while "1"  (timeout="200")
[12:48:18.834]      // while-condition  =>  TRUE
[12:48:18.834]      // while "1"  (timeout="200")
[12:48:18.834]      // while-condition  =>  TRUE
[12:48:18.834]      // while "1"  (timeout="200")
[12:48:18.834]      // while-condition  =>  TRUE
[12:48:18.834]      // while "1"  (timeout="200")
[12:48:18.834]      // while-condition  =>  TRUE
[12:48:18.834]      // while "1"  (timeout="200")
[12:48:18.834]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.838]      // while-condition  =>  TRUE
[12:48:18.838]      // while "1"  (timeout="200")
[12:48:18.842]      // while-condition  =>  TRUE
[12:48:18.842]      // while "1"  (timeout="200")
[12:48:18.842]      // while-condition  =>  TRUE
[12:48:18.842]      // while "1"  (timeout="200")
[12:48:18.842]      // while-condition  =>  TRUE
[12:48:18.842]      // while "1"  (timeout="200")
[12:48:18.842]      // while-condition  =>  TRUE
[12:48:18.842]      // while "1"  (timeout="200")
[12:48:18.842]      // while-condition  =>  TRUE
[12:48:18.842]      // while "1"  (timeout="200")
[12:48:18.842]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.843]      // while "1"  (timeout="200")
[12:48:18.843]      // while-condition  =>  TRUE
[12:48:18.846]      // while "1"  (timeout="200")
[12:48:18.846]      // while-condition  =>  TRUE
[12:48:18.846]      // while "1"  (timeout="200")
[12:48:18.847]      // while-condition  =>  TRUE
[12:48:18.847]      // while "1"  (timeout="200")
[12:48:18.847]      // while-condition  =>  TRUE
[12:48:18.847]      // while "1"  (timeout="200")
[12:48:18.847]      // while-condition  =>  TRUE
[12:48:18.847]      // while "1"  (timeout="200")
[12:48:18.847]      // while-condition  =>  TRUE
[12:48:18.847]      // while "1"  (timeout="200")
[12:48:18.847]      // while-condition  =>  TRUE
[12:48:18.847]      // while "1"  (timeout="200")
[12:48:18.847]      // while-condition  =>  TRUE
[12:48:18.847]      // while "1"  (timeout="200")
[12:48:18.847]      // while-condition  =>  TRUE
[12:48:18.847]      // while "1"  (timeout="200")
[12:48:18.847]      // while-condition  =>  TRUE
[12:48:18.847]      // while "1"  (timeout="200")
[12:48:18.847]      // while-condition  =>  TRUE
[12:48:18.849]      // while "1"  (timeout="200")
[12:48:18.849]      // while  =>  TIMEOUT
[12:48:18.849]      // end while "1"
[12:48:18.849]    </control>
[12:48:18.849]    <control if="canReadPins" while="" timeout="0" info="">
[12:48:18.849]      // if-block "canReadPins"
[12:48:18.849]        // =>  TRUE
[12:48:18.849]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:48:18.849]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:48:18.853]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:48:18.853]        // while-condition  =>  FALSE
[12:48:18.853]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:48:18.853]      </control>
[12:48:18.853]      // end if-block "canReadPins"
[12:48:18.853]    </control>
[12:48:18.853]    <control if="!canReadPins" while="" timeout="0" info="">
[12:48:18.853]      // if-block "!canReadPins"
[12:48:18.853]        // =>  FALSE
[12:48:18.853]      // skip if-block "!canReadPins"
[12:48:18.853]    </control>
[12:48:18.853]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:48:18.853]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:48:18.853]        // =>  TRUE
[12:48:18.853]      <block atomic="false" info="">
[12:48:18.853]        WriteAP(0x00, 0x190008);
[12:48:18.859]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:48:18.859]        WriteAP(0xF0, 0x01);
[12:48:18.864]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:48:18.864]      </block>
[12:48:18.864]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:48:18.864]    </control>
[12:48:18.864]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:48:18.864]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:48:18.864]        // =>  FALSE
[12:48:18.864]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:48:18.864]    </control>
[12:48:18.864]    <block atomic="false" info="">
[12:48:18.865]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:48:18.871]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:48:18.871]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:48:18.871]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:48:18.873]      __ap = 0; //lets make sure we reset the access point selection
[12:48:18.875]        // -> [__ap <= 0x00000000]
[12:48:18.875]    </block>
[12:48:18.875]  </sequence>
[12:48:18.875]  
[12:48:18.910]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:48:18.910]  
[12:48:18.910]  <debugvars>
[12:48:18.910]    // Pre-defined
[12:48:18.910]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:48:18.910]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:48:18.910]    __dp=0x00000000
[12:48:18.910]    __ap=0x00000000
[12:48:18.910]    __traceout=0x00000000      (Trace Disabled)
[12:48:18.910]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:48:18.910]    __FlashAddr=0x00000000
[12:48:18.910]    __FlashLen=0x00000000
[12:48:18.910]    __FlashArg=0x00000000
[12:48:18.910]    __FlashOp=0x00000000
[12:48:18.910]    __Result=0x00000000
[12:48:18.910]  </debugvars>
[12:48:18.910]  
[12:48:18.910]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:48:18.910]    <block atomic="false" info="">
[12:48:18.910]      __var deviceID = 0;
[12:48:18.912]        // -> [deviceID <= 0x00000000]
[12:48:18.912]      __var version = 0;
[12:48:18.912]        // -> [version <= 0x00000000]
[12:48:18.912]      __var partNum = 0;
[12:48:18.912]        // -> [partNum <= 0x00000000]
[12:48:18.912]      __var manuf = 0;
[12:48:18.912]        // -> [manuf <= 0x00000000]
[12:48:18.912]      __var isMSPM0G1X0X_G3X0X = 0;
[12:48:18.912]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:48:18.912]      __var isProduction = 0;
[12:48:18.913]        // -> [isProduction <= 0x00000000]
[12:48:18.913]      __var continueId = 0;
[12:48:18.913]        // -> [continueId <= 0x00000000]
[12:48:18.913]      deviceID =   Read32(0x41C40004);
[12:48:18.916]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:48:18.920]        // -> [deviceID <= 0x2BB8802F]
[12:48:18.920]      version = deviceID >> 28;
[12:48:18.920]        // -> [version <= 0x00000002]
[12:48:18.920]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:48:18.920]        // -> [partNum <= 0x0000BB88]
[12:48:18.920]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:48:18.920]        // -> [manuf <= 0x00000017]
[12:48:18.920]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:48:18.920]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:48:18.920]      isProduction = (version > 0);
[12:48:18.920]        // -> [isProduction <= 0x00000001]
[12:48:18.920]    </block>
[12:48:18.921]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:48:18.921]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:48:18.921]        // =>  FALSE
[12:48:18.921]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:48:18.921]    </control>
[12:48:18.921]    <control if="continueId == 4" while="" timeout="0" info="">
[12:48:18.921]      // if-block "continueId == 4"
[12:48:18.921]        // =>  FALSE
[12:48:18.921]      // skip if-block "continueId == 4"
[12:48:18.922]    </control>
[12:48:18.922]    <control if="!isProduction" while="" timeout="0" info="">
[12:48:18.922]      // if-block "!isProduction"
[12:48:18.922]        // =>  FALSE
[12:48:18.922]      // skip if-block "!isProduction"
[12:48:18.922]    </control>
[12:48:18.922]  </sequence>
[12:48:18.922]  
[12:49:29.887]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:49:29.887]  
[12:49:29.887]  <debugvars>
[12:49:29.887]    // Pre-defined
[12:49:29.887]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:49:29.887]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:49:29.887]    __dp=0x00000000
[12:49:29.887]    __ap=0x00000000
[12:49:29.887]    __traceout=0x00000000      (Trace Disabled)
[12:49:29.887]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:49:29.887]    __FlashAddr=0x00000000
[12:49:29.887]    __FlashLen=0x00000000
[12:49:29.887]    __FlashArg=0x00000000
[12:49:29.887]    __FlashOp=0x00000000
[12:49:29.887]    __Result=0x00000000
[12:49:29.891]  </debugvars>
[12:49:29.891]  
[12:49:29.891]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:49:29.891]    <block atomic="false" info="">
[12:49:29.891]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:49:29.891]        // -> [isSWJ <= 0x00000001]
[12:49:29.891]      __var hasDormant = __protocol & 0x00020000;
[12:49:29.891]        // -> [hasDormant <= 0x00000000]
[12:49:29.891]      __var protType   = __protocol & 0x0000FFFF;
[12:49:29.892]        // -> [protType <= 0x00000002]
[12:49:29.892]    </block>
[12:49:29.892]    <control if="protType == 1" while="" timeout="0" info="">
[12:49:29.892]      // if-block "protType == 1"
[12:49:29.892]        // =>  FALSE
[12:49:29.892]      // skip if-block "protType == 1"
[12:49:29.892]    </control>
[12:49:29.892]    <control if="protType == 2" while="" timeout="0" info="">
[12:49:29.892]      // if-block "protType == 2"
[12:49:29.892]        // =>  TRUE
[12:49:29.892]      <control if="isSWJ" while="" timeout="0" info="">
[12:49:29.892]        // if-block "isSWJ"
[12:49:29.892]          // =>  TRUE
[12:49:29.892]        <control if="hasDormant" while="" timeout="0" info="">
[12:49:29.892]          // if-block "hasDormant"
[12:49:29.892]            // =>  FALSE
[12:49:29.892]          // skip if-block "hasDormant"
[12:49:29.892]        </control>
[12:49:29.892]        <control if="!hasDormant" while="" timeout="0" info="">
[12:49:29.892]          // if-block "!hasDormant"
[12:49:29.892]            // =>  TRUE
[12:49:29.892]          <block atomic="false" info="">
[12:49:29.892]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:49:29.895]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:49:29.895]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:49:29.895]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:49:29.895]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:49:29.899]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:49:29.899]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:49:29.902]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:49:29.902]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:49:29.904]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:49:29.904]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:49:29.907]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:49:29.907]          </block>
[12:49:29.907]          // end if-block "!hasDormant"
[12:49:29.907]        </control>
[12:49:29.907]        // end if-block "isSWJ"
[12:49:29.907]      </control>
[12:49:29.907]      <control if="!isSWJ" while="" timeout="0" info="">
[12:49:29.907]        // if-block "!isSWJ"
[12:49:29.907]          // =>  FALSE
[12:49:29.911]        // skip if-block "!isSWJ"
[12:49:29.911]      </control>
[12:49:29.911]      <block atomic="false" info="">
[12:49:29.911]        ReadDP(0x0);
[12:49:29.912]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:49:29.912]      </block>
[12:49:29.912]      // end if-block "protType == 2"
[12:49:29.912]    </control>
[12:49:29.912]  </sequence>
[12:49:29.912]  
[12:49:29.915]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:49:29.915]  
[12:49:29.915]  <debugvars>
[12:49:29.915]    // Pre-defined
[12:49:29.915]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:49:29.915]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:49:29.915]    __dp=0x00000000
[12:49:29.915]    __ap=0x00000000
[12:49:29.915]    __traceout=0x00000000      (Trace Disabled)
[12:49:29.915]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:49:29.915]    __FlashAddr=0x00000000
[12:49:29.915]    __FlashLen=0x00000000
[12:49:29.915]    __FlashArg=0x00000000
[12:49:29.915]    __FlashOp=0x00000000
[12:49:29.915]    __Result=0x00000000
[12:49:29.915]  </debugvars>
[12:49:29.915]  
[12:49:29.915]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:49:29.915]    <block atomic="false" info="">
[12:49:29.915]      __var SW_DP_ABORT       = 0x0;
[12:49:29.915]        // -> [SW_DP_ABORT <= 0x00000000]
[12:49:29.915]      __var DP_CTRL_STAT      = 0x4;
[12:49:29.915]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:49:29.919]      __var DP_SELECT         = 0x8;
[12:49:29.919]        // -> [DP_SELECT <= 0x00000008]
[12:49:29.919]      __var powered_down      = 0;
[12:49:29.919]        // -> [powered_down <= 0x00000000]
[12:49:29.919]      WriteDP(DP_SELECT, 0x00000000);
[12:49:29.922]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:49:29.922]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:49:29.924]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:49:29.924]        // -> [powered_down <= 0x00000001]
[12:49:29.924]    </block>
[12:49:29.924]    <control if="powered_down" while="" timeout="0" info="">
[12:49:29.924]      // if-block "powered_down"
[12:49:29.924]        // =>  TRUE
[12:49:29.924]      <block atomic="false" info="">
[12:49:29.924]        Message(0, "Debug/System power-up request sent");
[12:49:29.924]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:49:29.928]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:49:29.928]      </block>
[12:49:29.928]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:49:29.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:49:29.928]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:49:29.932]        // while-condition  =>  FALSE
[12:49:29.932]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:49:29.932]      </control>
[12:49:29.932]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:49:29.932]        // if-block "(__protocol & 0xFFFF) == 1"
[12:49:29.932]          // =>  FALSE
[12:49:29.932]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:49:29.932]      </control>
[12:49:29.932]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:49:29.932]        // if-block "(__protocol & 0xFFFF) == 2"
[12:49:29.932]          // =>  TRUE
[12:49:29.932]        <block atomic="false" info="">
[12:49:29.932]          Message(0, "executing SWD power up");
[12:49:29.932]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:49:29.936]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:49:29.936]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:49:29.936]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:49:29.936]        </block>
[12:49:29.936]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:49:29.936]      </control>
[12:49:29.936]      // end if-block "powered_down"
[12:49:29.936]    </control>
[12:49:29.940]    <block atomic="false" info="">
[12:49:29.940]      __var DEBUG_PORT_VAL    = 0;
[12:49:29.940]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:49:29.940]      __var ACCESS_POINT_VAL  = 0;
[12:49:29.940]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:49:29.940]      __ap = 1; 
[12:49:29.940]        // -> [__ap <= 0x00000001]
[12:49:29.940]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:49:29.943]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:49:29.943]      __ap = 4;
[12:49:29.943]        // -> [__ap <= 0x00000004]
[12:49:29.943]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:49:29.952]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:49:29.952]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:49:29.952]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:49:29.955]    </block>
[12:49:29.955]    <block atomic="false" info="">
[12:49:29.955]      __var nReset = 0x80;
[12:49:29.955]        // -> [nReset <= 0x00000080]
[12:49:29.955]      __var canReadPins = 0;
[12:49:29.955]        // -> [canReadPins <= 0x00000000]
[12:49:29.955]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:49:29.959]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:49:29.959]        // -> [canReadPins <= 0x00000001]
[12:49:29.959]    </block>
[12:49:29.959]    <control if="" while="1" timeout="200" info="">
[12:49:29.959]      // while "1"  (timeout="200")
[12:49:29.959]      // while-condition  =>  TRUE
[12:49:29.959]      // while "1"  (timeout="200")
[12:49:29.961]      // while-condition  =>  TRUE
[12:49:29.961]      // while "1"  (timeout="200")
[12:49:29.961]      // while-condition  =>  TRUE
[12:49:29.961]      // while "1"  (timeout="200")
[12:49:29.961]      // while-condition  =>  TRUE
[12:49:29.961]      // while "1"  (timeout="200")
[12:49:29.961]      // while-condition  =>  TRUE
[12:49:29.962]      // while "1"  (timeout="200")
[12:49:29.962]      // while-condition  =>  TRUE
[12:49:29.962]      // while "1"  (timeout="200")
[12:49:29.962]      // while-condition  =>  TRUE
[12:49:29.962]      // while "1"  (timeout="200")
[12:49:29.962]      // while-condition  =>  TRUE
[12:49:29.962]      // while "1"  (timeout="200")
[12:49:29.962]      // while-condition  =>  TRUE
[12:49:29.962]      // while "1"  (timeout="200")
[12:49:29.962]      // while-condition  =>  TRUE
[12:49:29.962]      // while "1"  (timeout="200")
[12:49:29.962]      // while-condition  =>  TRUE
[12:49:29.964]      // while "1"  (timeout="200")
[12:49:29.964]      // while-condition  =>  TRUE
[12:49:29.964]      // while "1"  (timeout="200")
[12:49:29.964]      // while-condition  =>  TRUE
[12:49:29.964]      // while "1"  (timeout="200")
[12:49:29.964]      // while-condition  =>  TRUE
[12:49:29.964]      // while "1"  (timeout="200")
[12:49:29.964]      // while-condition  =>  TRUE
[12:49:29.964]      // while "1"  (timeout="200")
[12:49:29.964]      // while-condition  =>  TRUE
[12:49:29.964]      // while "1"  (timeout="200")
[12:49:29.964]      // while-condition  =>  TRUE
[12:49:29.964]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.965]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.965]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.965]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.965]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.965]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.965]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.965]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.965]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.965]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.965]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.965]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.965]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.965]      // while "1"  (timeout="200")
[12:49:29.965]      // while-condition  =>  TRUE
[12:49:29.968]      // while "1"  (timeout="200")
[12:49:29.968]      // while-condition  =>  TRUE
[12:49:29.968]      // while "1"  (timeout="200")
[12:49:29.968]      // while-condition  =>  TRUE
[12:49:29.968]      // while "1"  (timeout="200")
[12:49:29.968]      // while-condition  =>  TRUE
[12:49:29.968]      // while "1"  (timeout="200")
[12:49:29.968]      // while-condition  =>  TRUE
[12:49:29.968]      // while "1"  (timeout="200")
[12:49:29.968]      // while-condition  =>  TRUE
[12:49:29.968]      // while "1"  (timeout="200")
[12:49:29.968]      // while-condition  =>  TRUE
[12:49:29.968]      // while "1"  (timeout="200")
[12:49:29.968]      // while-condition  =>  TRUE
[12:49:29.968]      // while "1"  (timeout="200")
[12:49:29.968]      // while-condition  =>  TRUE
[12:49:29.968]      // while "1"  (timeout="200")
[12:49:29.968]      // while-condition  =>  TRUE
[12:49:29.970]      // while "1"  (timeout="200")
[12:49:29.970]      // while-condition  =>  TRUE
[12:49:29.970]      // while "1"  (timeout="200")
[12:49:29.970]      // while-condition  =>  TRUE
[12:49:29.970]      // while "1"  (timeout="200")
[12:49:29.970]      // while-condition  =>  TRUE
[12:49:29.970]      // while "1"  (timeout="200")
[12:49:29.970]      // while-condition  =>  TRUE
[12:49:29.970]      // while "1"  (timeout="200")
[12:49:29.970]      // while-condition  =>  TRUE
[12:49:29.970]      // while "1"  (timeout="200")
[12:49:29.970]      // while-condition  =>  TRUE
[12:49:29.970]      // while "1"  (timeout="200")
[12:49:29.970]      // while-condition  =>  TRUE
[12:49:29.970]      // while "1"  (timeout="200")
[12:49:29.970]      // while-condition  =>  TRUE
[12:49:29.970]      // while "1"  (timeout="200")
[12:49:29.970]      // while-condition  =>  TRUE
[12:49:29.970]      // while "1"  (timeout="200")
[12:49:29.970]      // while-condition  =>  TRUE
[12:49:29.972]      // while "1"  (timeout="200")
[12:49:29.972]      // while-condition  =>  TRUE
[12:49:29.972]      // while "1"  (timeout="200")
[12:49:29.972]      // while-condition  =>  TRUE
[12:49:29.972]      // while "1"  (timeout="200")
[12:49:29.972]      // while-condition  =>  TRUE
[12:49:29.972]      // while "1"  (timeout="200")
[12:49:29.972]      // while-condition  =>  TRUE
[12:49:29.972]      // while "1"  (timeout="200")
[12:49:29.972]      // while-condition  =>  TRUE
[12:49:29.973]      // while "1"  (timeout="200")
[12:49:29.973]      // while  =>  TIMEOUT
[12:49:29.973]      // end while "1"
[12:49:29.973]    </control>
[12:49:29.973]    <control if="canReadPins" while="" timeout="0" info="">
[12:49:29.973]      // if-block "canReadPins"
[12:49:29.973]        // =>  TRUE
[12:49:29.973]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:49:29.973]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:49:29.980]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:49:29.981]        // while-condition  =>  FALSE
[12:49:29.981]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:49:29.981]      </control>
[12:49:29.981]      // end if-block "canReadPins"
[12:49:29.981]    </control>
[12:49:29.981]    <control if="!canReadPins" while="" timeout="0" info="">
[12:49:29.981]      // if-block "!canReadPins"
[12:49:29.981]        // =>  FALSE
[12:49:29.981]      // skip if-block "!canReadPins"
[12:49:29.981]    </control>
[12:49:29.981]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:49:29.981]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:49:29.981]        // =>  TRUE
[12:49:29.981]      <block atomic="false" info="">
[12:49:29.981]        WriteAP(0x00, 0x190008);
[12:49:29.984]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:49:29.984]        WriteAP(0xF0, 0x01);
[12:49:29.988]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:49:29.988]      </block>
[12:49:29.988]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:49:29.988]    </control>
[12:49:29.988]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:49:29.988]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:49:29.988]        // =>  FALSE
[12:49:29.988]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:49:29.988]    </control>
[12:49:29.988]    <block atomic="false" info="">
[12:49:29.988]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:49:29.992]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:49:29.993]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:49:29.993]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:49:29.995]      __ap = 0; //lets make sure we reset the access point selection
[12:49:29.995]        // -> [__ap <= 0x00000000]
[12:49:29.995]    </block>
[12:49:29.995]  </sequence>
[12:49:29.995]  
[12:49:30.033]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:49:30.033]  
[12:49:30.033]  <debugvars>
[12:49:30.033]    // Pre-defined
[12:49:30.033]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:49:30.033]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:49:30.033]    __dp=0x00000000
[12:49:30.034]    __ap=0x00000000
[12:49:30.034]    __traceout=0x00000000      (Trace Disabled)
[12:49:30.034]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:49:30.034]    __FlashAddr=0x00000000
[12:49:30.034]    __FlashLen=0x00000000
[12:49:30.034]    __FlashArg=0x00000000
[12:49:30.034]    __FlashOp=0x00000000
[12:49:30.034]    __Result=0x00000000
[12:49:30.034]  </debugvars>
[12:49:30.034]  
[12:49:30.034]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:49:30.034]    <block atomic="false" info="">
[12:49:30.034]      __var deviceID = 0;
[12:49:30.034]        // -> [deviceID <= 0x00000000]
[12:49:30.034]      __var version = 0;
[12:49:30.034]        // -> [version <= 0x00000000]
[12:49:30.034]      __var partNum = 0;
[12:49:30.034]        // -> [partNum <= 0x00000000]
[12:49:30.034]      __var manuf = 0;
[12:49:30.034]        // -> [manuf <= 0x00000000]
[12:49:30.034]      __var isMSPM0G1X0X_G3X0X = 0;
[12:49:30.034]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:49:30.034]      __var isProduction = 0;
[12:49:30.034]        // -> [isProduction <= 0x00000000]
[12:49:30.034]      __var continueId = 0;
[12:49:30.034]        // -> [continueId <= 0x00000000]
[12:49:30.034]      deviceID =   Read32(0x41C40004);
[12:49:31.045]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:49:31.054]        // -> [deviceID <= 0x2BB8802F]
[12:49:31.054]      version = deviceID >> 28;
[12:49:31.054]        // -> [version <= 0x00000002]
[12:49:31.054]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:49:31.054]        // -> [partNum <= 0x0000BB88]
[12:49:31.054]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:49:31.054]        // -> [manuf <= 0x00000017]
[12:49:31.054]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:49:31.054]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:49:31.054]      isProduction = (version > 0);
[12:49:31.054]        // -> [isProduction <= 0x00000001]
[12:49:31.054]    </block>
[12:49:31.054]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:49:31.054]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:49:31.054]        // =>  FALSE
[12:49:31.054]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:49:31.054]    </control>
[12:49:31.054]    <control if="continueId == 4" while="" timeout="0" info="">
[12:49:31.054]      // if-block "continueId == 4"
[12:49:31.054]        // =>  FALSE
[12:49:31.054]      // skip if-block "continueId == 4"
[12:49:31.054]    </control>
[12:49:31.054]    <control if="!isProduction" while="" timeout="0" info="">
[12:49:31.054]      // if-block "!isProduction"
[12:49:31.054]        // =>  FALSE
[12:49:31.054]      // skip if-block "!isProduction"
[12:49:31.054]    </control>
[12:49:31.054]  </sequence>
[12:49:31.054]  
[12:49:51.468]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:49:51.468]  
[12:49:51.477]  <debugvars>
[12:49:51.477]    // Pre-defined
[12:49:51.477]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:49:51.477]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:49:51.477]    __dp=0x00000000
[12:49:51.477]    __ap=0x00000000
[12:49:51.478]    __traceout=0x00000000      (Trace Disabled)
[12:49:51.478]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:49:51.478]    __FlashAddr=0x00000000
[12:49:51.478]    __FlashLen=0x00000000
[12:49:51.478]    __FlashArg=0x00000000
[12:49:51.478]    __FlashOp=0x00000000
[12:49:51.478]    __Result=0x00000000
[12:49:51.478]  </debugvars>
[12:49:51.478]  
[12:49:51.478]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:49:51.478]    <block atomic="false" info="">
[12:49:51.478]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:49:51.478]        // -> [isSWJ <= 0x00000001]
[12:49:51.478]      __var hasDormant = __protocol & 0x00020000;
[12:49:51.478]        // -> [hasDormant <= 0x00000000]
[12:49:51.478]      __var protType   = __protocol & 0x0000FFFF;
[12:49:51.478]        // -> [protType <= 0x00000002]
[12:49:51.478]    </block>
[12:49:51.478]    <control if="protType == 1" while="" timeout="0" info="">
[12:49:51.478]      // if-block "protType == 1"
[12:49:51.478]        // =>  FALSE
[12:49:51.478]      // skip if-block "protType == 1"
[12:49:51.478]    </control>
[12:49:51.478]    <control if="protType == 2" while="" timeout="0" info="">
[12:49:51.478]      // if-block "protType == 2"
[12:49:51.478]        // =>  TRUE
[12:49:51.478]      <control if="isSWJ" while="" timeout="0" info="">
[12:49:51.478]        // if-block "isSWJ"
[12:49:51.478]          // =>  TRUE
[12:49:51.482]        <control if="hasDormant" while="" timeout="0" info="">
[12:49:51.482]          // if-block "hasDormant"
[12:49:51.482]            // =>  FALSE
[12:49:51.482]          // skip if-block "hasDormant"
[12:49:51.482]        </control>
[12:49:51.482]        <control if="!hasDormant" while="" timeout="0" info="">
[12:49:51.482]          // if-block "!hasDormant"
[12:49:51.482]            // =>  TRUE
[12:49:51.483]          <block atomic="false" info="">
[12:49:51.483]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:49:51.483]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:49:51.483]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:49:51.486]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:49:51.486]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:49:51.486]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:49:51.486]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:49:51.490]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:49:51.490]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:49:51.493]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:49:51.493]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:49:51.494]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:49:51.494]          </block>
[12:49:51.494]          // end if-block "!hasDormant"
[12:49:51.494]        </control>
[12:49:51.494]        // end if-block "isSWJ"
[12:49:51.495]      </control>
[12:49:51.495]      <control if="!isSWJ" while="" timeout="0" info="">
[12:49:51.495]        // if-block "!isSWJ"
[12:49:51.495]          // =>  FALSE
[12:49:51.495]        // skip if-block "!isSWJ"
[12:49:51.495]      </control>
[12:49:51.495]      <block atomic="false" info="">
[12:49:51.495]        ReadDP(0x0);
[12:49:51.497]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:49:51.497]      </block>
[12:49:51.497]      // end if-block "protType == 2"
[12:49:51.497]    </control>
[12:49:51.497]  </sequence>
[12:49:51.497]  
[12:49:51.502]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:49:51.502]  
[12:49:51.502]  <debugvars>
[12:49:51.502]    // Pre-defined
[12:49:51.503]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:49:51.503]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:49:51.503]    __dp=0x00000000
[12:49:51.503]    __ap=0x00000000
[12:49:51.503]    __traceout=0x00000000      (Trace Disabled)
[12:49:51.503]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:49:51.504]    __FlashAddr=0x00000000
[12:49:51.504]    __FlashLen=0x00000000
[12:49:51.504]    __FlashArg=0x00000000
[12:49:51.504]    __FlashOp=0x00000000
[12:49:51.504]    __Result=0x00000000
[12:49:51.504]  </debugvars>
[12:49:51.504]  
[12:49:51.504]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:49:51.504]    <block atomic="false" info="">
[12:49:51.504]      __var SW_DP_ABORT       = 0x0;
[12:49:51.504]        // -> [SW_DP_ABORT <= 0x00000000]
[12:49:51.504]      __var DP_CTRL_STAT      = 0x4;
[12:49:51.504]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:49:51.504]      __var DP_SELECT         = 0x8;
[12:49:51.504]        // -> [DP_SELECT <= 0x00000008]
[12:49:51.504]      __var powered_down      = 0;
[12:49:51.504]        // -> [powered_down <= 0x00000000]
[12:49:51.504]      WriteDP(DP_SELECT, 0x00000000);
[12:49:51.510]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:49:51.510]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:49:51.514]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:49:51.514]        // -> [powered_down <= 0x00000001]
[12:49:51.514]    </block>
[12:49:51.515]    <control if="powered_down" while="" timeout="0" info="">
[12:49:51.515]      // if-block "powered_down"
[12:49:51.515]        // =>  TRUE
[12:49:51.515]      <block atomic="false" info="">
[12:49:51.515]        Message(0, "Debug/System power-up request sent");
[12:49:51.516]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:49:51.519]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:49:51.519]      </block>
[12:49:51.519]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:49:51.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:49:51.522]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:49:51.522]        // while-condition  =>  FALSE
[12:49:51.522]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:49:51.522]      </control>
[12:49:51.522]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:49:51.522]        // if-block "(__protocol & 0xFFFF) == 1"
[12:49:51.522]          // =>  FALSE
[12:49:51.522]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:49:51.522]      </control>
[12:49:51.522]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:49:51.522]        // if-block "(__protocol & 0xFFFF) == 2"
[12:49:51.522]          // =>  TRUE
[12:49:51.522]        <block atomic="false" info="">
[12:49:51.522]          Message(0, "executing SWD power up");
[12:49:51.522]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:49:51.526]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:49:51.526]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:49:51.529]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:49:51.529]        </block>
[12:49:51.530]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:49:51.530]      </control>
[12:49:51.530]      // end if-block "powered_down"
[12:49:51.530]    </control>
[12:49:51.530]    <block atomic="false" info="">
[12:49:51.530]      __var DEBUG_PORT_VAL    = 0;
[12:49:51.530]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:49:51.530]      __var ACCESS_POINT_VAL  = 0;
[12:49:51.530]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:49:51.530]      __ap = 1; 
[12:49:51.530]        // -> [__ap <= 0x00000001]
[12:49:51.532]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:49:51.545]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:49:51.545]      __ap = 4;
[12:49:51.545]        // -> [__ap <= 0x00000004]
[12:49:51.546]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:49:51.549]        // -> [ReadAP(0x00000000) => 0x00080427]   (__dp=0x00000000, __ap=0x00000004)
[12:49:51.549]        // -> [ACCESS_POINT_VAL <= 0x00080427]
[12:49:51.549]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:49:51.550]    </block>
[12:49:51.551]    <block atomic="false" info="">
[12:49:51.551]      __var nReset = 0x80;
[12:49:51.551]        // -> [nReset <= 0x00000080]
[12:49:51.551]      __var canReadPins = 0;
[12:49:51.551]        // -> [canReadPins <= 0x00000000]
[12:49:51.551]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:49:51.553]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:49:51.553]        // -> [canReadPins <= 0x00000001]
[12:49:51.553]    </block>
[12:49:51.553]    <control if="" while="1" timeout="200" info="">
[12:49:51.553]      // while "1"  (timeout="200")
[12:49:51.553]      // while-condition  =>  TRUE
[12:49:51.553]      // while "1"  (timeout="200")
[12:49:51.553]      // while-condition  =>  TRUE
[12:49:51.555]      // while "1"  (timeout="200")
[12:49:51.555]      // while-condition  =>  TRUE
[12:49:51.555]      // while "1"  (timeout="200")
[12:49:51.555]      // while-condition  =>  TRUE
[12:49:51.555]      // while "1"  (timeout="200")
[12:49:51.555]      // while-condition  =>  TRUE
[12:49:51.555]      // while "1"  (timeout="200")
[12:49:51.555]      // while-condition  =>  TRUE
[12:49:51.555]      // while "1"  (timeout="200")
[12:49:51.555]      // while-condition  =>  TRUE
[12:49:51.555]      // while "1"  (timeout="200")
[12:49:51.555]      // while-condition  =>  TRUE
[12:49:51.555]      // while "1"  (timeout="200")
[12:49:51.555]      // while-condition  =>  TRUE
[12:49:51.555]      // while "1"  (timeout="200")
[12:49:51.555]      // while-condition  =>  TRUE
[12:49:51.557]      // while "1"  (timeout="200")
[12:49:51.557]      // while-condition  =>  TRUE
[12:49:51.557]      // while "1"  (timeout="200")
[12:49:51.557]      // while-condition  =>  TRUE
[12:49:51.557]      // while "1"  (timeout="200")
[12:49:51.557]      // while-condition  =>  TRUE
[12:49:51.557]      // while "1"  (timeout="200")
[12:49:51.557]      // while-condition  =>  TRUE
[12:49:51.557]      // while "1"  (timeout="200")
[12:49:51.557]      // while-condition  =>  TRUE
[12:49:51.557]      // while "1"  (timeout="200")
[12:49:51.557]      // while-condition  =>  TRUE
[12:49:51.557]      // while "1"  (timeout="200")
[12:49:51.557]      // while-condition  =>  TRUE
[12:49:51.557]      // while "1"  (timeout="200")
[12:49:51.557]      // while-condition  =>  TRUE
[12:49:51.557]      // while "1"  (timeout="200")
[12:49:51.557]      // while-condition  =>  TRUE
[12:49:51.557]      // while "1"  (timeout="200")
[12:49:51.557]      // while-condition  =>  TRUE
[12:49:51.557]      // while "1"  (timeout="200")
[12:49:51.557]      // while-condition  =>  TRUE
[12:49:51.559]      // while "1"  (timeout="200")
[12:49:51.559]      // while-condition  =>  TRUE
[12:49:51.559]      // while "1"  (timeout="200")
[12:49:51.559]      // while-condition  =>  TRUE
[12:49:51.559]      // while "1"  (timeout="200")
[12:49:51.559]      // while-condition  =>  TRUE
[12:49:51.559]      // while "1"  (timeout="200")
[12:49:51.559]      // while-condition  =>  TRUE
[12:49:51.559]      // while "1"  (timeout="200")
[12:49:51.559]      // while-condition  =>  TRUE
[12:49:51.559]      // while "1"  (timeout="200")
[12:49:51.560]      // while-condition  =>  TRUE
[12:49:51.560]      // while "1"  (timeout="200")
[12:49:51.560]      // while-condition  =>  TRUE
[12:49:51.560]      // while "1"  (timeout="200")
[12:49:51.560]      // while-condition  =>  TRUE
[12:49:51.560]      // while "1"  (timeout="200")
[12:49:51.560]      // while-condition  =>  TRUE
[12:49:51.560]      // while "1"  (timeout="200")
[12:49:51.560]      // while-condition  =>  TRUE
[12:49:51.560]      // while "1"  (timeout="200")
[12:49:51.561]      // while-condition  =>  TRUE
[12:49:51.561]      // while "1"  (timeout="200")
[12:49:51.561]      // while-condition  =>  TRUE
[12:49:51.561]      // while "1"  (timeout="200")
[12:49:51.561]      // while-condition  =>  TRUE
[12:49:51.561]      // while "1"  (timeout="200")
[12:49:51.561]      // while-condition  =>  TRUE
[12:49:51.561]      // while "1"  (timeout="200")
[12:49:51.561]      // while-condition  =>  TRUE
[12:49:51.561]      // while "1"  (timeout="200")
[12:49:51.562]      // while-condition  =>  TRUE
[12:49:51.562]      // while "1"  (timeout="200")
[12:49:51.562]      // while-condition  =>  TRUE
[12:49:51.562]      // while "1"  (timeout="200")
[12:49:51.562]      // while-condition  =>  TRUE
[12:49:51.562]      // while "1"  (timeout="200")
[12:49:51.562]      // while-condition  =>  TRUE
[12:49:51.564]      // while "1"  (timeout="200")
[12:49:51.564]      // while-condition  =>  TRUE
[12:49:51.564]      // while "1"  (timeout="200")
[12:49:51.564]      // while-condition  =>  TRUE
[12:49:51.564]      // while "1"  (timeout="200")
[12:49:51.564]      // while-condition  =>  TRUE
[12:49:51.564]      // while "1"  (timeout="200")
[12:49:51.564]      // while-condition  =>  TRUE
[12:49:51.564]      // while "1"  (timeout="200")
[12:49:51.564]      // while-condition  =>  TRUE
[12:49:51.564]      // while "1"  (timeout="200")
[12:49:51.564]      // while-condition  =>  TRUE
[12:49:51.564]      // while "1"  (timeout="200")
[12:49:51.564]      // while-condition  =>  TRUE
[12:49:51.564]      // while "1"  (timeout="200")
[12:49:51.564]      // while-condition  =>  TRUE
[12:49:51.564]      // while "1"  (timeout="200")
[12:49:51.564]      // while-condition  =>  TRUE
[12:49:51.564]      // while "1"  (timeout="200")
[12:49:51.566]      // while-condition  =>  TRUE
[12:49:51.566]      // while "1"  (timeout="200")
[12:49:51.566]      // while-condition  =>  TRUE
[12:49:51.566]      // while "1"  (timeout="200")
[12:49:51.566]      // while-condition  =>  TRUE
[12:49:51.566]      // while "1"  (timeout="200")
[12:49:51.566]      // while-condition  =>  TRUE
[12:49:51.566]      // while "1"  (timeout="200")
[12:49:51.566]      // while-condition  =>  TRUE
[12:49:51.566]      // while "1"  (timeout="200")
[12:49:51.566]      // while-condition  =>  TRUE
[12:49:51.566]      // while "1"  (timeout="200")
[12:49:51.566]      // while-condition  =>  TRUE
[12:49:51.566]      // while "1"  (timeout="200")
[12:49:51.566]      // while-condition  =>  TRUE
[12:49:51.566]      // while "1"  (timeout="200")
[12:49:51.568]      // while-condition  =>  TRUE
[12:49:51.568]      // while "1"  (timeout="200")
[12:49:51.568]      // while  =>  TIMEOUT
[12:49:51.568]      // end while "1"
[12:49:51.568]    </control>
[12:49:51.569]    <control if="canReadPins" while="" timeout="0" info="">
[12:49:51.569]      // if-block "canReadPins"
[12:49:51.569]        // =>  TRUE
[12:49:51.569]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:49:51.569]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:49:51.569]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:49:51.569]        // while-condition  =>  FALSE
[12:49:51.569]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:49:51.569]      </control>
[12:49:51.569]      // end if-block "canReadPins"
[12:49:51.572]    </control>
[12:49:51.572]    <control if="!canReadPins" while="" timeout="0" info="">
[12:49:51.572]      // if-block "!canReadPins"
[12:49:51.572]        // =>  FALSE
[12:49:51.572]      // skip if-block "!canReadPins"
[12:49:51.572]    </control>
[12:49:51.572]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:49:51.572]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:49:51.572]        // =>  TRUE
[12:49:51.572]      <block atomic="false" info="">
[12:49:51.572]        WriteAP(0x00, 0x190008);
[12:49:51.573]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:49:51.573]        WriteAP(0xF0, 0x01);
[12:49:51.576]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:49:51.576]      </block>
[12:49:51.576]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:49:51.576]    </control>
[12:49:51.576]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:49:51.576]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:49:51.576]        // =>  FALSE
[12:49:51.576]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:49:51.576]    </control>
[12:49:51.576]    <block atomic="false" info="">
[12:49:51.580]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:49:51.585]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[12:49:51.586]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[12:49:51.586]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:49:51.587]      __ap = 0; //lets make sure we reset the access point selection
[12:49:51.588]        // -> [__ap <= 0x00000000]
[12:49:51.588]    </block>
[12:49:51.588]  </sequence>
[12:49:51.588]  
[12:49:51.640]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:49:51.640]  
[12:49:51.640]  <debugvars>
[12:49:51.640]    // Pre-defined
[12:49:51.640]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:49:51.640]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:49:51.640]    __dp=0x00000000
[12:49:51.640]    __ap=0x00000000
[12:49:51.641]    __traceout=0x00000000      (Trace Disabled)
[12:49:51.641]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:49:51.641]    __FlashAddr=0x00000000
[12:49:51.641]    __FlashLen=0x00000000
[12:49:51.641]    __FlashArg=0x00000000
[12:49:51.641]    __FlashOp=0x00000000
[12:49:51.641]    __Result=0x00000000
[12:49:51.641]  </debugvars>
[12:49:51.641]  
[12:49:51.642]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:49:51.642]    <block atomic="false" info="">
[12:49:51.642]      __var deviceID = 0;
[12:49:51.642]        // -> [deviceID <= 0x00000000]
[12:49:51.642]      __var version = 0;
[12:49:51.643]        // -> [version <= 0x00000000]
[12:49:51.643]      __var partNum = 0;
[12:49:51.643]        // -> [partNum <= 0x00000000]
[12:49:51.643]      __var manuf = 0;
[12:49:51.643]        // -> [manuf <= 0x00000000]
[12:49:51.643]      __var isMSPM0G1X0X_G3X0X = 0;
[12:49:51.644]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:49:51.644]      __var isProduction = 0;
[12:49:51.644]        // -> [isProduction <= 0x00000000]
[12:49:51.644]      __var continueId = 0;
[12:49:51.644]        // -> [continueId <= 0x00000000]
[12:49:51.644]      deviceID =   Read32(0x41C40004);
[12:49:51.649]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:49:51.649]        // -> [deviceID <= 0x2BB8802F]
[12:49:51.649]      version = deviceID >> 28;
[12:49:51.649]        // -> [version <= 0x00000002]
[12:49:51.649]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:49:51.649]        // -> [partNum <= 0x0000BB88]
[12:49:51.649]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:49:51.649]        // -> [manuf <= 0x00000017]
[12:49:51.649]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:49:51.649]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:49:51.651]      isProduction = (version > 0);
[12:49:51.651]        // -> [isProduction <= 0x00000001]
[12:49:51.651]    </block>
[12:49:51.651]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:49:51.651]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:49:51.651]        // =>  FALSE
[12:49:51.651]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:49:51.651]    </control>
[12:49:51.651]    <control if="continueId == 4" while="" timeout="0" info="">
[12:49:51.651]      // if-block "continueId == 4"
[12:49:51.652]        // =>  FALSE
[12:49:51.652]      // skip if-block "continueId == 4"
[12:49:51.652]    </control>
[12:49:51.652]    <control if="!isProduction" while="" timeout="0" info="">
[12:49:51.652]      // if-block "!isProduction"
[12:49:51.652]        // =>  FALSE
[12:49:51.652]      // skip if-block "!isProduction"
[12:49:51.652]    </control>
[12:49:51.652]  </sequence>
[12:49:51.652]  
[12:50:04.120]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:50:04.120]  
[12:50:04.128]  <debugvars>
[12:50:04.128]    // Pre-defined
[12:50:04.128]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:50:04.128]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:50:04.128]    __dp=0x00000000
[12:50:04.128]    __ap=0x00000000
[12:50:04.128]    __traceout=0x00000000      (Trace Disabled)
[12:50:04.128]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:50:04.128]    __FlashAddr=0x00000000
[12:50:04.128]    __FlashLen=0x00000000
[12:50:04.128]    __FlashArg=0x00000000
[12:50:04.128]    __FlashOp=0x00000000
[12:50:04.128]    __Result=0x00000000
[12:50:04.128]  </debugvars>
[12:50:04.128]  
[12:50:04.128]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:50:04.128]    <block atomic="false" info="">
[12:50:04.128]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:50:04.128]        // -> [isSWJ <= 0x00000001]
[12:50:04.131]      __var hasDormant = __protocol & 0x00020000;
[12:50:04.131]        // -> [hasDormant <= 0x00000000]
[12:50:04.131]      __var protType   = __protocol & 0x0000FFFF;
[12:50:04.131]        // -> [protType <= 0x00000002]
[12:50:04.131]    </block>
[12:50:04.132]    <control if="protType == 1" while="" timeout="0" info="">
[12:50:04.132]      // if-block "protType == 1"
[12:50:04.132]        // =>  FALSE
[12:50:04.132]      // skip if-block "protType == 1"
[12:50:04.132]    </control>
[12:50:04.132]    <control if="protType == 2" while="" timeout="0" info="">
[12:50:04.132]      // if-block "protType == 2"
[12:50:04.132]        // =>  TRUE
[12:50:04.132]      <control if="isSWJ" while="" timeout="0" info="">
[12:50:04.132]        // if-block "isSWJ"
[12:50:04.132]          // =>  TRUE
[12:50:04.132]        <control if="hasDormant" while="" timeout="0" info="">
[12:50:04.132]          // if-block "hasDormant"
[12:50:04.132]            // =>  FALSE
[12:50:04.132]          // skip if-block "hasDormant"
[12:50:04.132]        </control>
[12:50:04.132]        <control if="!hasDormant" while="" timeout="0" info="">
[12:50:04.132]          // if-block "!hasDormant"
[12:50:04.133]            // =>  TRUE
[12:50:04.133]          <block atomic="false" info="">
[12:50:04.133]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:50:04.134]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:04.134]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:50:04.134]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:50:04.134]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:50:04.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:04.137]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:50:04.139]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:50:04.139]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:50:04.146]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:04.146]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:50:04.149]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:50:04.150]          </block>
[12:50:04.150]          // end if-block "!hasDormant"
[12:50:04.150]        </control>
[12:50:04.150]        // end if-block "isSWJ"
[12:50:04.150]      </control>
[12:50:04.150]      <control if="!isSWJ" while="" timeout="0" info="">
[12:50:04.150]        // if-block "!isSWJ"
[12:50:04.150]          // =>  FALSE
[12:50:04.150]        // skip if-block "!isSWJ"
[12:50:04.151]      </control>
[12:50:04.151]      <block atomic="false" info="">
[12:50:04.151]        ReadDP(0x0);
[12:50:04.152]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:50:04.152]      </block>
[12:50:04.152]      // end if-block "protType == 2"
[12:50:04.152]    </control>
[12:50:04.153]  </sequence>
[12:50:04.153]  
[12:50:24.803]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:50:24.803]  
[12:50:24.803]  <debugvars>
[12:50:24.803]    // Pre-defined
[12:50:24.803]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:50:24.803]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:50:24.803]    __dp=0x00000000
[12:50:24.803]    __ap=0x00000000
[12:50:24.803]    __traceout=0x00000000      (Trace Disabled)
[12:50:24.805]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:50:24.805]    __FlashAddr=0x00000000
[12:50:24.805]    __FlashLen=0x00000000
[12:50:24.805]    __FlashArg=0x00000000
[12:50:24.805]    __FlashOp=0x00000000
[12:50:24.805]    __Result=0x00000000
[12:50:24.805]  </debugvars>
[12:50:24.805]  
[12:50:24.805]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:50:24.805]    <block atomic="false" info="">
[12:50:24.805]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:50:24.805]        // -> [isSWJ <= 0x00000001]
[12:50:24.805]      __var hasDormant = __protocol & 0x00020000;
[12:50:24.805]        // -> [hasDormant <= 0x00000000]
[12:50:24.805]      __var protType   = __protocol & 0x0000FFFF;
[12:50:24.805]        // -> [protType <= 0x00000002]
[12:50:24.805]    </block>
[12:50:24.805]    <control if="protType == 1" while="" timeout="0" info="">
[12:50:24.807]      // if-block "protType == 1"
[12:50:24.807]        // =>  FALSE
[12:50:24.807]      // skip if-block "protType == 1"
[12:50:24.807]    </control>
[12:50:24.807]    <control if="protType == 2" while="" timeout="0" info="">
[12:50:24.807]      // if-block "protType == 2"
[12:50:24.807]        // =>  TRUE
[12:50:24.807]      <control if="isSWJ" while="" timeout="0" info="">
[12:50:24.807]        // if-block "isSWJ"
[12:50:24.807]          // =>  TRUE
[12:50:24.807]        <control if="hasDormant" while="" timeout="0" info="">
[12:50:24.807]          // if-block "hasDormant"
[12:50:24.807]            // =>  FALSE
[12:50:24.807]          // skip if-block "hasDormant"
[12:50:24.807]        </control>
[12:50:24.807]        <control if="!hasDormant" while="" timeout="0" info="">
[12:50:24.807]          // if-block "!hasDormant"
[12:50:24.807]            // =>  TRUE
[12:50:24.807]          <block atomic="false" info="">
[12:50:24.807]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:50:24.811]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:24.811]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:50:24.813]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:50:24.813]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:50:24.814]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:24.814]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:50:24.815]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:50:24.815]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:50:24.819]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:24.819]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:50:24.821]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:50:24.821]          </block>
[12:50:24.821]          // end if-block "!hasDormant"
[12:50:24.821]        </control>
[12:50:24.821]        // end if-block "isSWJ"
[12:50:24.821]      </control>
[12:50:24.822]      <control if="!isSWJ" while="" timeout="0" info="">
[12:50:24.822]        // if-block "!isSWJ"
[12:50:24.822]          // =>  FALSE
[12:50:24.822]        // skip if-block "!isSWJ"
[12:50:24.822]      </control>
[12:50:24.822]      <block atomic="false" info="">
[12:50:24.822]        ReadDP(0x0);
[12:50:24.822]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:50:24.822]      </block>
[12:50:24.822]      // end if-block "protType == 2"
[12:50:24.822]    </control>
[12:50:24.822]  </sequence>
[12:50:24.822]  
[12:50:24.830]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:50:24.830]  
[12:50:24.830]  <debugvars>
[12:50:24.830]    // Pre-defined
[12:50:24.830]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:50:24.831]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:50:24.831]    __dp=0x00000000
[12:50:24.831]    __ap=0x00000000
[12:50:24.831]    __traceout=0x00000000      (Trace Disabled)
[12:50:24.831]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:50:24.831]    __FlashAddr=0x00000000
[12:50:24.831]    __FlashLen=0x00000000
[12:50:24.831]    __FlashArg=0x00000000
[12:50:24.831]    __FlashOp=0x00000000
[12:50:24.832]    __Result=0x00000000
[12:50:24.832]  </debugvars>
[12:50:24.832]  
[12:50:24.832]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:50:24.832]    <block atomic="false" info="">
[12:50:24.832]      __var SW_DP_ABORT       = 0x0;
[12:50:24.832]        // -> [SW_DP_ABORT <= 0x00000000]
[12:50:24.834]      __var DP_CTRL_STAT      = 0x4;
[12:50:24.834]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:50:24.834]      __var DP_SELECT         = 0x8;
[12:50:24.834]        // -> [DP_SELECT <= 0x00000008]
[12:50:24.834]      __var powered_down      = 0;
[12:50:24.834]        // -> [powered_down <= 0x00000000]
[12:50:24.834]      WriteDP(DP_SELECT, 0x00000000);
[12:50:24.839]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:50:24.839]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:50:24.845]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:50:24.845]        // -> [powered_down <= 0x00000001]
[12:50:24.845]    </block>
[12:50:24.845]    <control if="powered_down" while="" timeout="0" info="">
[12:50:24.845]      // if-block "powered_down"
[12:50:24.845]        // =>  TRUE
[12:50:24.845]      <block atomic="false" info="">
[12:50:24.845]        Message(0, "Debug/System power-up request sent");
[12:50:24.847]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:50:24.847]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:50:24.847]      </block>
[12:50:24.847]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:50:24.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:50:24.853]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:50:24.853]        // while-condition  =>  FALSE
[12:50:24.853]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:50:24.853]      </control>
[12:50:24.853]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:50:24.853]        // if-block "(__protocol & 0xFFFF) == 1"
[12:50:24.853]          // =>  FALSE
[12:50:24.853]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:50:24.853]      </control>
[12:50:24.853]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:50:24.853]        // if-block "(__protocol & 0xFFFF) == 2"
[12:50:24.853]          // =>  TRUE
[12:50:24.853]        <block atomic="false" info="">
[12:50:24.853]          Message(0, "executing SWD power up");
[12:50:24.856]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:50:24.857]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:50:24.857]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:50:24.857]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:50:24.857]        </block>
[12:50:24.857]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:50:24.857]      </control>
[12:50:24.860]      // end if-block "powered_down"
[12:50:24.860]    </control>
[12:50:24.860]    <block atomic="false" info="">
[12:50:24.860]      __var DEBUG_PORT_VAL    = 0;
[12:50:24.860]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:50:24.860]      __var ACCESS_POINT_VAL  = 0;
[12:50:24.860]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:50:24.860]      __ap = 1; 
[12:50:24.860]        // -> [__ap <= 0x00000001]
[12:50:24.860]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:50:24.864]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:50:24.864]      __ap = 4;
[12:50:24.864]        // -> [__ap <= 0x00000004]
[12:50:24.864]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:50:24.870]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:50:24.870]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:50:24.870]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:50:24.872]    </block>
[12:50:24.872]    <block atomic="false" info="">
[12:50:24.872]      __var nReset = 0x80;
[12:50:24.872]        // -> [nReset <= 0x00000080]
[12:50:24.872]      __var canReadPins = 0;
[12:50:24.872]        // -> [canReadPins <= 0x00000000]
[12:50:24.872]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:50:24.882]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:50:24.882]        // -> [canReadPins <= 0x00000001]
[12:50:24.882]    </block>
[12:50:24.882]    <control if="" while="1" timeout="200" info="">
[12:50:24.883]      // while "1"  (timeout="200")
[12:50:24.883]      // while-condition  =>  TRUE
[12:50:24.883]      // while "1"  (timeout="200")
[12:50:24.883]      // while-condition  =>  TRUE
[12:50:24.883]      // while "1"  (timeout="200")
[12:50:24.883]      // while-condition  =>  TRUE
[12:50:24.883]      // while "1"  (timeout="200")
[12:50:24.883]      // while-condition  =>  TRUE
[12:50:24.883]      // while "1"  (timeout="200")
[12:50:24.883]      // while-condition  =>  TRUE
[12:50:24.883]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.884]      // while-condition  =>  TRUE
[12:50:24.884]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.888]      // while-condition  =>  TRUE
[12:50:24.888]      // while "1"  (timeout="200")
[12:50:24.891]      // while-condition  =>  TRUE
[12:50:24.891]      // while "1"  (timeout="200")
[12:50:24.891]      // while-condition  =>  TRUE
[12:50:24.891]      // while "1"  (timeout="200")
[12:50:24.891]      // while-condition  =>  TRUE
[12:50:24.891]      // while "1"  (timeout="200")
[12:50:24.891]      // while-condition  =>  TRUE
[12:50:24.891]      // while "1"  (timeout="200")
[12:50:24.891]      // while-condition  =>  TRUE
[12:50:24.893]      // while "1"  (timeout="200")
[12:50:24.893]      // while-condition  =>  TRUE
[12:50:24.893]      // while "1"  (timeout="200")
[12:50:24.893]      // while-condition  =>  TRUE
[12:50:24.893]      // while "1"  (timeout="200")
[12:50:24.893]      // while-condition  =>  TRUE
[12:50:24.893]      // while "1"  (timeout="200")
[12:50:24.893]      // while-condition  =>  TRUE
[12:50:24.893]      // while "1"  (timeout="200")
[12:50:24.893]      // while-condition  =>  TRUE
[12:50:24.893]      // while "1"  (timeout="200")
[12:50:24.893]      // while-condition  =>  TRUE
[12:50:24.893]      // while "1"  (timeout="200")
[12:50:24.893]      // while-condition  =>  TRUE
[12:50:24.894]      // while "1"  (timeout="200")
[12:50:24.894]      // while-condition  =>  TRUE
[12:50:24.894]      // while "1"  (timeout="200")
[12:50:24.894]      // while-condition  =>  TRUE
[12:50:24.894]      // while "1"  (timeout="200")
[12:50:24.894]      // while-condition  =>  TRUE
[12:50:24.894]      // while "1"  (timeout="200")
[12:50:24.894]      // while-condition  =>  TRUE
[12:50:24.894]      // while "1"  (timeout="200")
[12:50:24.894]      // while-condition  =>  TRUE
[12:50:24.894]      // while "1"  (timeout="200")
[12:50:24.894]      // while-condition  =>  TRUE
[12:50:24.894]      // while "1"  (timeout="200")
[12:50:24.894]      // while-condition  =>  TRUE
[12:50:24.894]      // while "1"  (timeout="200")
[12:50:24.894]      // while-condition  =>  TRUE
[12:50:24.896]      // while "1"  (timeout="200")
[12:50:24.896]      // while  =>  TIMEOUT
[12:50:24.896]      // end while "1"
[12:50:24.896]    </control>
[12:50:24.896]    <control if="canReadPins" while="" timeout="0" info="">
[12:50:24.896]      // if-block "canReadPins"
[12:50:24.896]        // =>  TRUE
[12:50:24.896]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:50:24.896]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:50:24.899]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:50:24.899]        // while-condition  =>  FALSE
[12:50:24.899]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:50:24.899]      </control>
[12:50:24.899]      // end if-block "canReadPins"
[12:50:24.899]    </control>
[12:50:24.899]    <control if="!canReadPins" while="" timeout="0" info="">
[12:50:24.899]      // if-block "!canReadPins"
[12:50:24.899]        // =>  FALSE
[12:50:24.899]      // skip if-block "!canReadPins"
[12:50:24.901]    </control>
[12:50:24.901]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:50:24.901]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:50:24.901]        // =>  TRUE
[12:50:24.902]      <block atomic="false" info="">
[12:50:24.902]        WriteAP(0x00, 0x190008);
[12:50:24.905]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:50:24.905]        WriteAP(0xF0, 0x01);
[12:50:24.912]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:50:24.912]      </block>
[12:50:24.912]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:50:24.912]    </control>
[12:50:24.912]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:50:24.912]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:50:24.912]        // =>  FALSE
[12:50:24.912]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:50:24.912]    </control>
[12:50:24.912]    <block atomic="false" info="">
[12:50:24.914]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:50:24.916]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:50:24.916]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:50:24.916]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:50:24.918]      __ap = 0; //lets make sure we reset the access point selection
[12:50:24.918]        // -> [__ap <= 0x00000000]
[12:50:24.918]    </block>
[12:50:24.918]  </sequence>
[12:50:24.918]  
[12:50:24.958]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:50:24.958]  
[12:50:24.958]  <debugvars>
[12:50:24.961]    // Pre-defined
[12:50:24.961]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:50:24.961]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:50:24.961]    __dp=0x00000000
[12:50:24.961]    __ap=0x00000000
[12:50:24.961]    __traceout=0x00000000      (Trace Disabled)
[12:50:24.961]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:50:24.962]    __FlashAddr=0x00000000
[12:50:24.962]    __FlashLen=0x00000000
[12:50:24.962]    __FlashArg=0x00000000
[12:50:24.962]    __FlashOp=0x00000000
[12:50:24.962]    __Result=0x00000000
[12:50:24.962]  </debugvars>
[12:50:24.962]  
[12:50:24.962]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:50:24.962]    <block atomic="false" info="">
[12:50:24.964]      __var deviceID = 0;
[12:50:24.964]        // -> [deviceID <= 0x00000000]
[12:50:24.964]      __var version = 0;
[12:50:24.964]        // -> [version <= 0x00000000]
[12:50:24.964]      __var partNum = 0;
[12:50:24.964]        // -> [partNum <= 0x00000000]
[12:50:24.964]      __var manuf = 0;
[12:50:24.964]        // -> [manuf <= 0x00000000]
[12:50:24.964]      __var isMSPM0G1X0X_G3X0X = 0;
[12:50:24.964]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:50:24.964]      __var isProduction = 0;
[12:50:24.964]        // -> [isProduction <= 0x00000000]
[12:50:24.964]      __var continueId = 0;
[12:50:24.964]        // -> [continueId <= 0x00000000]
[12:50:24.964]      deviceID =   Read32(0x41C40004);
[12:50:24.981]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:50:24.981]        // -> [deviceID <= 0x2BB8802F]
[12:50:24.981]      version = deviceID >> 28;
[12:50:24.981]        // -> [version <= 0x00000002]
[12:50:24.981]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:50:24.982]        // -> [partNum <= 0x0000BB88]
[12:50:24.982]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:50:24.982]        // -> [manuf <= 0x00000017]
[12:50:24.982]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:50:24.982]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:50:24.982]      isProduction = (version > 0);
[12:50:24.982]        // -> [isProduction <= 0x00000001]
[12:50:24.984]    </block>
[12:50:24.984]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:50:24.984]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:50:24.984]        // =>  FALSE
[12:50:24.984]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:50:24.984]    </control>
[12:50:24.984]    <control if="continueId == 4" while="" timeout="0" info="">
[12:50:24.984]      // if-block "continueId == 4"
[12:50:24.984]        // =>  FALSE
[12:50:24.984]      // skip if-block "continueId == 4"
[12:50:24.984]    </control>
[12:50:24.984]    <control if="!isProduction" while="" timeout="0" info="">
[12:50:24.984]      // if-block "!isProduction"
[12:50:24.984]        // =>  FALSE
[12:50:24.984]      // skip if-block "!isProduction"
[12:50:24.984]    </control>
[12:50:24.984]  </sequence>
[12:50:24.984]  
[12:50:34.559]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:50:34.559]  
[12:50:34.569]  <debugvars>
[12:50:34.569]    // Pre-defined
[12:50:34.569]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:50:34.569]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:50:34.569]    __dp=0x00000000
[12:50:34.569]    __ap=0x00000000
[12:50:34.569]    __traceout=0x00000000      (Trace Disabled)
[12:50:34.569]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:50:34.569]    __FlashAddr=0x00000000
[12:50:34.569]    __FlashLen=0x00000000
[12:50:34.569]    __FlashArg=0x00000000
[12:50:34.569]    __FlashOp=0x00000000
[12:50:34.569]    __Result=0x00000000
[12:50:34.569]  </debugvars>
[12:50:34.569]  
[12:50:34.569]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:50:34.569]    <block atomic="false" info="">
[12:50:34.569]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:50:34.571]        // -> [isSWJ <= 0x00000001]
[12:50:34.571]      __var hasDormant = __protocol & 0x00020000;
[12:50:34.571]        // -> [hasDormant <= 0x00000000]
[12:50:34.571]      __var protType   = __protocol & 0x0000FFFF;
[12:50:34.571]        // -> [protType <= 0x00000002]
[12:50:34.571]    </block>
[12:50:34.571]    <control if="protType == 1" while="" timeout="0" info="">
[12:50:34.571]      // if-block "protType == 1"
[12:50:34.571]        // =>  FALSE
[12:50:34.571]      // skip if-block "protType == 1"
[12:50:34.571]    </control>
[12:50:34.571]    <control if="protType == 2" while="" timeout="0" info="">
[12:50:34.571]      // if-block "protType == 2"
[12:50:34.571]        // =>  TRUE
[12:50:34.572]      <control if="isSWJ" while="" timeout="0" info="">
[12:50:34.572]        // if-block "isSWJ"
[12:50:34.572]          // =>  TRUE
[12:50:34.572]        <control if="hasDormant" while="" timeout="0" info="">
[12:50:34.572]          // if-block "hasDormant"
[12:50:34.572]            // =>  FALSE
[12:50:34.572]          // skip if-block "hasDormant"
[12:50:34.572]        </control>
[12:50:34.572]        <control if="!hasDormant" while="" timeout="0" info="">
[12:50:34.572]          // if-block "!hasDormant"
[12:50:34.572]            // =>  TRUE
[12:50:34.572]          <block atomic="false" info="">
[12:50:34.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:50:34.577]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:34.577]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:50:34.577]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:50:34.577]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:50:34.584]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:34.584]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:50:34.584]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:50:34.584]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:50:34.584]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:50:34.584]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:50:34.592]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:50:34.595]          </block>
[12:50:34.595]          // end if-block "!hasDormant"
[12:50:34.595]        </control>
[12:50:34.595]        // end if-block "isSWJ"
[12:50:34.595]      </control>
[12:50:34.595]      <control if="!isSWJ" while="" timeout="0" info="">
[12:50:34.595]        // if-block "!isSWJ"
[12:50:34.595]          // =>  FALSE
[12:50:34.595]        // skip if-block "!isSWJ"
[12:50:34.595]      </control>
[12:50:34.595]      <block atomic="false" info="">
[12:50:34.595]        ReadDP(0x0);
[12:50:34.603]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:50:34.604]      </block>
[12:50:34.604]      // end if-block "protType == 2"
[12:50:34.604]    </control>
[12:50:34.604]  </sequence>
[12:50:34.604]  
[12:50:34.609]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:50:34.609]  
[12:50:34.612]  <debugvars>
[12:50:34.612]    // Pre-defined
[12:50:34.612]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:50:34.612]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:50:34.612]    __dp=0x00000000
[12:50:34.612]    __ap=0x00000000
[12:50:34.612]    __traceout=0x00000000      (Trace Disabled)
[12:50:34.612]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:50:34.612]    __FlashAddr=0x00000000
[12:50:34.612]    __FlashLen=0x00000000
[12:50:34.612]    __FlashArg=0x00000000
[12:50:34.613]    __FlashOp=0x00000000
[12:50:34.614]    __Result=0x00000000
[12:50:34.614]  </debugvars>
[12:50:34.614]  
[12:50:34.614]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:50:34.614]    <block atomic="false" info="">
[12:50:34.614]      __var SW_DP_ABORT       = 0x0;
[12:50:34.614]        // -> [SW_DP_ABORT <= 0x00000000]
[12:50:34.614]      __var DP_CTRL_STAT      = 0x4;
[12:50:34.615]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:50:34.615]      __var DP_SELECT         = 0x8;
[12:50:34.615]        // -> [DP_SELECT <= 0x00000008]
[12:50:34.615]      __var powered_down      = 0;
[12:50:34.615]        // -> [powered_down <= 0x00000000]
[12:50:34.615]      WriteDP(DP_SELECT, 0x00000000);
[12:50:34.616]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:50:34.617]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:50:34.622]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:50:34.622]        // -> [powered_down <= 0x00000001]
[12:50:34.622]    </block>
[12:50:34.622]    <control if="powered_down" while="" timeout="0" info="">
[12:50:34.623]      // if-block "powered_down"
[12:50:34.623]        // =>  TRUE
[12:50:34.623]      <block atomic="false" info="">
[12:50:34.623]        Message(0, "Debug/System power-up request sent");
[12:50:34.625]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:50:34.634]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:50:34.635]      </block>
[12:50:34.635]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:50:34.635]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:50:34.637]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:50:34.637]        // while-condition  =>  FALSE
[12:50:34.637]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:50:34.637]      </control>
[12:50:34.637]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:50:34.637]        // if-block "(__protocol & 0xFFFF) == 1"
[12:50:34.637]          // =>  FALSE
[12:50:34.637]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:50:34.639]      </control>
[12:50:34.639]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:50:34.639]        // if-block "(__protocol & 0xFFFF) == 2"
[12:50:34.639]          // =>  TRUE
[12:50:34.639]        <block atomic="false" info="">
[12:50:34.639]          Message(0, "executing SWD power up");
[12:50:34.640]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:50:34.642]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:50:34.642]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:50:34.648]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:50:34.648]        </block>
[12:50:34.648]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:50:34.648]      </control>
[12:50:34.648]      // end if-block "powered_down"
[12:50:34.648]    </control>
[12:50:34.648]    <block atomic="false" info="">
[12:50:34.648]      __var DEBUG_PORT_VAL    = 0;
[12:50:34.648]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:50:34.648]      __var ACCESS_POINT_VAL  = 0;
[12:50:34.648]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:50:34.648]      __ap = 1; 
[12:50:34.648]        // -> [__ap <= 0x00000001]
[12:50:34.648]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:50:34.662]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:50:34.662]      __ap = 4;
[12:50:34.662]        // -> [__ap <= 0x00000004]
[12:50:34.662]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:50:34.665]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:50:34.665]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:50:34.665]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:50:34.669]    </block>
[12:50:34.669]    <block atomic="false" info="">
[12:50:34.669]      __var nReset = 0x80;
[12:50:34.669]        // -> [nReset <= 0x00000080]
[12:50:34.669]      __var canReadPins = 0;
[12:50:34.669]        // -> [canReadPins <= 0x00000000]
[12:50:34.669]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:50:34.676]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:50:34.676]        // -> [canReadPins <= 0x00000001]
[12:50:34.676]    </block>
[12:50:34.676]    <control if="" while="1" timeout="200" info="">
[12:50:34.676]      // while "1"  (timeout="200")
[12:50:34.676]      // while-condition  =>  TRUE
[12:50:34.676]      // while "1"  (timeout="200")
[12:50:34.676]      // while-condition  =>  TRUE
[12:50:34.676]      // while "1"  (timeout="200")
[12:50:34.676]      // while-condition  =>  TRUE
[12:50:34.676]      // while "1"  (timeout="200")
[12:50:34.676]      // while-condition  =>  TRUE
[12:50:34.677]      // while "1"  (timeout="200")
[12:50:34.677]      // while-condition  =>  TRUE
[12:50:34.677]      // while "1"  (timeout="200")
[12:50:34.677]      // while-condition  =>  TRUE
[12:50:34.677]      // while "1"  (timeout="200")
[12:50:34.678]      // while-condition  =>  TRUE
[12:50:34.678]      // while "1"  (timeout="200")
[12:50:34.678]      // while-condition  =>  TRUE
[12:50:34.678]      // while "1"  (timeout="200")
[12:50:34.678]      // while-condition  =>  TRUE
[12:50:34.678]      // while "1"  (timeout="200")
[12:50:34.678]      // while-condition  =>  TRUE
[12:50:34.678]      // while "1"  (timeout="200")
[12:50:34.678]      // while-condition  =>  TRUE
[12:50:34.678]      // while "1"  (timeout="200")
[12:50:34.678]      // while-condition  =>  TRUE
[12:50:34.678]      // while "1"  (timeout="200")
[12:50:34.678]      // while-condition  =>  TRUE
[12:50:34.678]      // while "1"  (timeout="200")
[12:50:34.678]      // while-condition  =>  TRUE
[12:50:34.678]      // while "1"  (timeout="200")
[12:50:34.678]      // while-condition  =>  TRUE
[12:50:34.678]      // while "1"  (timeout="200")
[12:50:34.678]      // while-condition  =>  TRUE
[12:50:34.678]      // while "1"  (timeout="200")
[12:50:34.680]      // while-condition  =>  TRUE
[12:50:34.680]      // while "1"  (timeout="200")
[12:50:34.680]      // while-condition  =>  TRUE
[12:50:34.680]      // while "1"  (timeout="200")
[12:50:34.680]      // while-condition  =>  TRUE
[12:50:34.680]      // while "1"  (timeout="200")
[12:50:34.680]      // while-condition  =>  TRUE
[12:50:34.680]      // while "1"  (timeout="200")
[12:50:34.680]      // while-condition  =>  TRUE
[12:50:34.680]      // while "1"  (timeout="200")
[12:50:34.680]      // while-condition  =>  TRUE
[12:50:34.680]      // while "1"  (timeout="200")
[12:50:34.680]      // while-condition  =>  TRUE
[12:50:34.680]      // while "1"  (timeout="200")
[12:50:34.681]      // while-condition  =>  TRUE
[12:50:34.681]      // while "1"  (timeout="200")
[12:50:34.681]      // while-condition  =>  TRUE
[12:50:34.681]      // while "1"  (timeout="200")
[12:50:34.681]      // while-condition  =>  TRUE
[12:50:34.681]      // while "1"  (timeout="200")
[12:50:34.681]      // while-condition  =>  TRUE
[12:50:34.681]      // while "1"  (timeout="200")
[12:50:34.681]      // while-condition  =>  TRUE
[12:50:34.681]      // while "1"  (timeout="200")
[12:50:34.681]      // while-condition  =>  TRUE
[12:50:34.682]      // while "1"  (timeout="200")
[12:50:34.682]      // while-condition  =>  TRUE
[12:50:34.682]      // while "1"  (timeout="200")
[12:50:34.682]      // while-condition  =>  TRUE
[12:50:34.682]      // while "1"  (timeout="200")
[12:50:34.682]      // while-condition  =>  TRUE
[12:50:34.682]      // while "1"  (timeout="200")
[12:50:34.682]      // while-condition  =>  TRUE
[12:50:34.682]      // while "1"  (timeout="200")
[12:50:34.682]      // while-condition  =>  TRUE
[12:50:34.682]      // while "1"  (timeout="200")
[12:50:34.682]      // while-condition  =>  TRUE
[12:50:34.684]      // while "1"  (timeout="200")
[12:50:34.684]      // while-condition  =>  TRUE
[12:50:34.684]      // while "1"  (timeout="200")
[12:50:34.684]      // while-condition  =>  TRUE
[12:50:34.684]      // while "1"  (timeout="200")
[12:50:34.684]      // while-condition  =>  TRUE
[12:50:34.684]      // while "1"  (timeout="200")
[12:50:34.684]      // while-condition  =>  TRUE
[12:50:34.684]      // while "1"  (timeout="200")
[12:50:34.684]      // while-condition  =>  TRUE
[12:50:34.684]      // while "1"  (timeout="200")
[12:50:34.684]      // while-condition  =>  TRUE
[12:50:34.684]      // while "1"  (timeout="200")
[12:50:34.685]      // while-condition  =>  TRUE
[12:50:34.685]      // while "1"  (timeout="200")
[12:50:34.685]      // while-condition  =>  TRUE
[12:50:34.685]      // while "1"  (timeout="200")
[12:50:34.685]      // while-condition  =>  TRUE
[12:50:34.685]      // while "1"  (timeout="200")
[12:50:34.685]      // while-condition  =>  TRUE
[12:50:34.685]      // while "1"  (timeout="200")
[12:50:34.685]      // while-condition  =>  TRUE
[12:50:34.685]      // while "1"  (timeout="200")
[12:50:34.685]      // while-condition  =>  TRUE
[12:50:34.685]      // while "1"  (timeout="200")
[12:50:34.685]      // while-condition  =>  TRUE
[12:50:34.685]      // while "1"  (timeout="200")
[12:50:34.685]      // while-condition  =>  TRUE
[12:50:34.685]      // while "1"  (timeout="200")
[12:50:34.685]      // while-condition  =>  TRUE
[12:50:34.685]      // while "1"  (timeout="200")
[12:50:34.685]      // while-condition  =>  TRUE
[12:50:34.685]      // while "1"  (timeout="200")
[12:50:34.685]      // while-condition  =>  TRUE
[12:50:34.685]      // while "1"  (timeout="200")
[12:50:34.687]      // while-condition  =>  TRUE
[12:50:34.687]      // while "1"  (timeout="200")
[12:50:34.687]      // while-condition  =>  TRUE
[12:50:34.687]      // while "1"  (timeout="200")
[12:50:34.687]      // while-condition  =>  TRUE
[12:50:34.687]      // while "1"  (timeout="200")
[12:50:34.687]      // while-condition  =>  TRUE
[12:50:34.687]      // while "1"  (timeout="200")
[12:50:34.687]      // while-condition  =>  TRUE
[12:50:34.687]      // while "1"  (timeout="200")
[12:50:34.687]      // while-condition  =>  TRUE
[12:50:34.687]      // while "1"  (timeout="200")
[12:50:34.687]      // while-condition  =>  TRUE
[12:50:34.687]      // while "1"  (timeout="200")
[12:50:34.687]      // while-condition  =>  TRUE
[12:50:34.687]      // while "1"  (timeout="200")
[12:50:34.687]      // while-condition  =>  TRUE
[12:50:34.687]      // while "1"  (timeout="200")
[12:50:34.687]      // while-condition  =>  TRUE
[12:50:34.687]      // while "1"  (timeout="200")
[12:50:34.689]      // while-condition  =>  TRUE
[12:50:34.689]      // while "1"  (timeout="200")
[12:50:34.689]      // while-condition  =>  TRUE
[12:50:34.689]      // while "1"  (timeout="200")
[12:50:34.689]      // while-condition  =>  TRUE
[12:50:34.689]      // while "1"  (timeout="200")
[12:50:34.689]      // while-condition  =>  TRUE
[12:50:34.689]      // while "1"  (timeout="200")
[12:50:34.689]      // while-condition  =>  TRUE
[12:50:34.689]      // while "1"  (timeout="200")
[12:50:34.689]      // while-condition  =>  TRUE
[12:50:34.689]      // while "1"  (timeout="200")
[12:50:34.689]      // while-condition  =>  TRUE
[12:50:34.689]      // while "1"  (timeout="200")
[12:50:34.689]      // while-condition  =>  TRUE
[12:50:34.689]      // while "1"  (timeout="200")
[12:50:34.689]      // while-condition  =>  TRUE
[12:50:34.689]      // while "1"  (timeout="200")
[12:50:34.689]      // while-condition  =>  TRUE
[12:50:34.692]      // while "1"  (timeout="200")
[12:50:34.692]      // while  =>  TIMEOUT
[12:50:34.692]      // end while "1"
[12:50:34.692]    </control>
[12:50:34.692]    <control if="canReadPins" while="" timeout="0" info="">
[12:50:34.692]      // if-block "canReadPins"
[12:50:34.692]        // =>  TRUE
[12:50:34.692]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:50:34.692]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:50:34.694]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:50:34.694]        // while-condition  =>  FALSE
[12:50:34.694]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:50:34.694]      </control>
[12:50:34.694]      // end if-block "canReadPins"
[12:50:34.694]    </control>
[12:50:34.694]    <control if="!canReadPins" while="" timeout="0" info="">
[12:50:34.694]      // if-block "!canReadPins"
[12:50:34.694]        // =>  FALSE
[12:50:34.694]      // skip if-block "!canReadPins"
[12:50:34.694]    </control>
[12:50:34.694]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:50:34.694]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:50:34.694]        // =>  TRUE
[12:50:34.694]      <block atomic="false" info="">
[12:50:34.694]        WriteAP(0x00, 0x190008);
[12:50:34.703]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:50:34.703]        WriteAP(0xF0, 0x01);
[12:50:34.712]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:50:34.712]      </block>
[12:50:34.712]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:50:34.712]    </control>
[12:50:34.712]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:50:34.714]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:50:34.714]        // =>  FALSE
[12:50:34.714]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:50:34.714]    </control>
[12:50:34.714]    <block atomic="false" info="">
[12:50:34.714]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:50:34.718]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:50:34.718]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:50:34.718]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:50:34.718]      __ap = 0; //lets make sure we reset the access point selection
[12:50:34.718]        // -> [__ap <= 0x00000000]
[12:50:34.718]    </block>
[12:50:34.718]  </sequence>
[12:50:34.718]  
[12:50:34.764]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:50:34.764]  
[12:50:34.764]  <debugvars>
[12:50:34.764]    // Pre-defined
[12:50:34.764]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:50:34.764]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:50:34.764]    __dp=0x00000000
[12:50:34.764]    __ap=0x00000000
[12:50:34.765]    __traceout=0x00000000      (Trace Disabled)
[12:50:34.765]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:50:34.765]    __FlashAddr=0x00000000
[12:50:34.765]    __FlashLen=0x00000000
[12:50:34.765]    __FlashArg=0x00000000
[12:50:34.765]    __FlashOp=0x00000000
[12:50:34.765]    __Result=0x00000000
[12:50:34.765]  </debugvars>
[12:50:34.765]  
[12:50:34.766]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:50:34.766]    <block atomic="false" info="">
[12:50:34.766]      __var deviceID = 0;
[12:50:34.766]        // -> [deviceID <= 0x00000000]
[12:50:34.766]      __var version = 0;
[12:50:34.766]        // -> [version <= 0x00000000]
[12:50:34.766]      __var partNum = 0;
[12:50:34.766]        // -> [partNum <= 0x00000000]
[12:50:34.766]      __var manuf = 0;
[12:50:34.766]        // -> [manuf <= 0x00000000]
[12:50:34.766]      __var isMSPM0G1X0X_G3X0X = 0;
[12:50:34.766]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:50:34.767]      __var isProduction = 0;
[12:50:34.767]        // -> [isProduction <= 0x00000000]
[12:50:34.767]      __var continueId = 0;
[12:50:34.767]        // -> [continueId <= 0x00000000]
[12:50:34.767]      deviceID =   Read32(0x41C40004);
[12:50:34.775]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:50:34.775]        // -> [deviceID <= 0x2BB8802F]
[12:50:34.775]      version = deviceID >> 28;
[12:50:34.775]        // -> [version <= 0x00000002]
[12:50:34.775]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:50:34.775]        // -> [partNum <= 0x0000BB88]
[12:50:34.775]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:50:34.775]        // -> [manuf <= 0x00000017]
[12:50:34.775]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:50:34.775]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:50:34.775]      isProduction = (version > 0);
[12:50:34.775]        // -> [isProduction <= 0x00000001]
[12:50:34.775]    </block>
[12:50:34.775]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:50:34.775]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:50:34.775]        // =>  FALSE
[12:50:34.777]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:50:34.777]    </control>
[12:50:34.777]    <control if="continueId == 4" while="" timeout="0" info="">
[12:50:34.777]      // if-block "continueId == 4"
[12:50:34.777]        // =>  FALSE
[12:50:34.777]      // skip if-block "continueId == 4"
[12:50:34.777]    </control>
[12:50:34.777]    <control if="!isProduction" while="" timeout="0" info="">
[12:50:34.777]      // if-block "!isProduction"
[12:50:34.777]        // =>  FALSE
[12:50:34.777]      // skip if-block "!isProduction"
[12:50:34.777]    </control>
[12:50:34.777]  </sequence>
[12:50:34.777]  
[12:52:25.257]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:52:25.257]  
[12:52:25.266]  <debugvars>
[12:52:25.266]    // Pre-defined
[12:52:25.266]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:52:25.266]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:52:25.266]    __dp=0x00000000
[12:52:25.266]    __ap=0x00000000
[12:52:25.266]    __traceout=0x00000000      (Trace Disabled)
[12:52:25.266]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:52:25.266]    __FlashAddr=0x00000000
[12:52:25.266]    __FlashLen=0x00000000
[12:52:25.266]    __FlashArg=0x00000000
[12:52:25.266]    __FlashOp=0x00000000
[12:52:25.266]    __Result=0x00000000
[12:52:25.266]  </debugvars>
[12:52:25.266]  
[12:52:25.266]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:52:25.266]    <block atomic="false" info="">
[12:52:25.266]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:52:25.266]        // -> [isSWJ <= 0x00000001]
[12:52:25.266]      __var hasDormant = __protocol & 0x00020000;
[12:52:25.266]        // -> [hasDormant <= 0x00000000]
[12:52:25.266]      __var protType   = __protocol & 0x0000FFFF;
[12:52:25.266]        // -> [protType <= 0x00000002]
[12:52:25.266]    </block>
[12:52:25.266]    <control if="protType == 1" while="" timeout="0" info="">
[12:52:25.266]      // if-block "protType == 1"
[12:52:25.266]        // =>  FALSE
[12:52:25.266]      // skip if-block "protType == 1"
[12:52:25.269]    </control>
[12:52:25.269]    <control if="protType == 2" while="" timeout="0" info="">
[12:52:25.269]      // if-block "protType == 2"
[12:52:25.269]        // =>  TRUE
[12:52:25.269]      <control if="isSWJ" while="" timeout="0" info="">
[12:52:25.270]        // if-block "isSWJ"
[12:52:25.270]          // =>  TRUE
[12:52:25.270]        <control if="hasDormant" while="" timeout="0" info="">
[12:52:25.270]          // if-block "hasDormant"
[12:52:25.270]            // =>  FALSE
[12:52:25.270]          // skip if-block "hasDormant"
[12:52:25.270]        </control>
[12:52:25.270]        <control if="!hasDormant" while="" timeout="0" info="">
[12:52:25.270]          // if-block "!hasDormant"
[12:52:25.270]            // =>  TRUE
[12:52:25.270]          <block atomic="false" info="">
[12:52:25.271]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:52:25.271]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:52:25.271]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:52:25.276]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:52:25.276]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:52:25.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:52:25.277]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:52:25.277]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:52:25.277]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:52:25.281]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:52:25.281]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:52:25.287]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:52:25.287]          </block>
[12:52:25.287]          // end if-block "!hasDormant"
[12:52:25.287]        </control>
[12:52:25.287]        // end if-block "isSWJ"
[12:52:25.287]      </control>
[12:52:25.287]      <control if="!isSWJ" while="" timeout="0" info="">
[12:52:25.287]        // if-block "!isSWJ"
[12:52:25.287]          // =>  FALSE
[12:52:25.287]        // skip if-block "!isSWJ"
[12:52:25.287]      </control>
[12:52:25.287]      <block atomic="false" info="">
[12:52:25.287]        ReadDP(0x0);
[12:52:25.290]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:52:25.290]      </block>
[12:52:25.294]      // end if-block "protType == 2"
[12:52:25.294]    </control>
[12:52:25.294]  </sequence>
[12:52:25.294]  
[12:52:25.298]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:52:25.298]  
[12:52:25.298]  <debugvars>
[12:52:25.298]    // Pre-defined
[12:52:25.298]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:52:25.298]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:52:25.298]    __dp=0x00000000
[12:52:25.298]    __ap=0x00000000
[12:52:25.298]    __traceout=0x00000000      (Trace Disabled)
[12:52:25.298]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:52:25.298]    __FlashAddr=0x00000000
[12:52:25.298]    __FlashLen=0x00000000
[12:52:25.298]    __FlashArg=0x00000000
[12:52:25.298]    __FlashOp=0x00000000
[12:52:25.298]    __Result=0x00000000
[12:52:25.298]  </debugvars>
[12:52:25.298]  
[12:52:25.298]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:52:25.298]    <block atomic="false" info="">
[12:52:25.298]      __var SW_DP_ABORT       = 0x0;
[12:52:25.298]        // -> [SW_DP_ABORT <= 0x00000000]
[12:52:25.302]      __var DP_CTRL_STAT      = 0x4;
[12:52:25.302]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:52:25.302]      __var DP_SELECT         = 0x8;
[12:52:25.302]        // -> [DP_SELECT <= 0x00000008]
[12:52:25.302]      __var powered_down      = 0;
[12:52:25.302]        // -> [powered_down <= 0x00000000]
[12:52:25.302]      WriteDP(DP_SELECT, 0x00000000);
[12:52:25.302]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:52:25.302]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:52:25.309]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:52:25.309]        // -> [powered_down <= 0x00000001]
[12:52:25.309]    </block>
[12:52:25.309]    <control if="powered_down" while="" timeout="0" info="">
[12:52:25.309]      // if-block "powered_down"
[12:52:25.309]        // =>  TRUE
[12:52:25.309]      <block atomic="false" info="">
[12:52:25.310]        Message(0, "Debug/System power-up request sent");
[12:52:25.310]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:52:25.315]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:52:25.315]      </block>
[12:52:25.315]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:52:25.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:52:25.322]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:52:25.322]        // while-condition  =>  FALSE
[12:52:25.322]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:52:25.322]      </control>
[12:52:25.323]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:52:25.323]        // if-block "(__protocol & 0xFFFF) == 1"
[12:52:25.323]          // =>  FALSE
[12:52:25.323]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:52:25.323]      </control>
[12:52:25.323]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:52:25.323]        // if-block "(__protocol & 0xFFFF) == 2"
[12:52:25.323]          // =>  TRUE
[12:52:25.323]        <block atomic="false" info="">
[12:52:25.323]          Message(0, "executing SWD power up");
[12:52:25.325]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:52:25.326]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:52:25.326]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:52:25.326]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:52:25.326]        </block>
[12:52:25.326]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:52:25.326]      </control>
[12:52:25.326]      // end if-block "powered_down"
[12:52:25.326]    </control>
[12:52:25.326]    <block atomic="false" info="">
[12:52:25.326]      __var DEBUG_PORT_VAL    = 0;
[12:52:25.331]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:52:25.331]      __var ACCESS_POINT_VAL  = 0;
[12:52:25.331]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:52:25.331]      __ap = 1; 
[12:52:25.331]        // -> [__ap <= 0x00000001]
[12:52:25.331]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:52:25.337]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:52:25.337]      __ap = 4;
[12:52:25.337]        // -> [__ap <= 0x00000004]
[12:52:25.337]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:52:25.344]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:52:25.346]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:52:25.346]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:52:25.346]    </block>
[12:52:25.346]    <block atomic="false" info="">
[12:52:25.348]      __var nReset = 0x80;
[12:52:25.348]        // -> [nReset <= 0x00000080]
[12:52:25.348]      __var canReadPins = 0;
[12:52:25.348]        // -> [canReadPins <= 0x00000000]
[12:52:25.348]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:52:25.349]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:52:25.349]        // -> [canReadPins <= 0x00000001]
[12:52:25.349]    </block>
[12:52:25.349]    <control if="" while="1" timeout="200" info="">
[12:52:25.351]      // while "1"  (timeout="200")
[12:52:25.351]      // while-condition  =>  TRUE
[12:52:25.351]      // while "1"  (timeout="200")
[12:52:25.351]      // while-condition  =>  TRUE
[12:52:25.351]      // while "1"  (timeout="200")
[12:52:25.351]      // while-condition  =>  TRUE
[12:52:25.351]      // while "1"  (timeout="200")
[12:52:25.351]      // while-condition  =>  TRUE
[12:52:25.351]      // while "1"  (timeout="200")
[12:52:25.351]      // while-condition  =>  TRUE
[12:52:25.352]      // while "1"  (timeout="200")
[12:52:25.352]      // while-condition  =>  TRUE
[12:52:25.352]      // while "1"  (timeout="200")
[12:52:25.352]      // while-condition  =>  TRUE
[12:52:25.352]      // while "1"  (timeout="200")
[12:52:25.352]      // while-condition  =>  TRUE
[12:52:25.352]      // while "1"  (timeout="200")
[12:52:25.352]      // while-condition  =>  TRUE
[12:52:25.352]      // while "1"  (timeout="200")
[12:52:25.352]      // while-condition  =>  TRUE
[12:52:25.353]      // while "1"  (timeout="200")
[12:52:25.353]      // while-condition  =>  TRUE
[12:52:25.353]      // while "1"  (timeout="200")
[12:52:25.353]      // while-condition  =>  TRUE
[12:52:25.353]      // while "1"  (timeout="200")
[12:52:25.353]      // while-condition  =>  TRUE
[12:52:25.353]      // while "1"  (timeout="200")
[12:52:25.353]      // while-condition  =>  TRUE
[12:52:25.353]      // while "1"  (timeout="200")
[12:52:25.353]      // while-condition  =>  TRUE
[12:52:25.353]      // while "1"  (timeout="200")
[12:52:25.355]      // while-condition  =>  TRUE
[12:52:25.355]      // while "1"  (timeout="200")
[12:52:25.355]      // while-condition  =>  TRUE
[12:52:25.355]      // while "1"  (timeout="200")
[12:52:25.355]      // while-condition  =>  TRUE
[12:52:25.355]      // while "1"  (timeout="200")
[12:52:25.355]      // while-condition  =>  TRUE
[12:52:25.355]      // while "1"  (timeout="200")
[12:52:25.355]      // while-condition  =>  TRUE
[12:52:25.355]      // while "1"  (timeout="200")
[12:52:25.356]      // while-condition  =>  TRUE
[12:52:25.356]      // while "1"  (timeout="200")
[12:52:25.356]      // while-condition  =>  TRUE
[12:52:25.356]      // while "1"  (timeout="200")
[12:52:25.356]      // while-condition  =>  TRUE
[12:52:25.356]      // while "1"  (timeout="200")
[12:52:25.356]      // while-condition  =>  TRUE
[12:52:25.356]      // while "1"  (timeout="200")
[12:52:25.356]      // while-condition  =>  TRUE
[12:52:25.357]      // while "1"  (timeout="200")
[12:52:25.357]      // while-condition  =>  TRUE
[12:52:25.357]      // while "1"  (timeout="200")
[12:52:25.357]      // while-condition  =>  TRUE
[12:52:25.357]      // while "1"  (timeout="200")
[12:52:25.357]      // while-condition  =>  TRUE
[12:52:25.357]      // while "1"  (timeout="200")
[12:52:25.357]      // while-condition  =>  TRUE
[12:52:25.357]      // while "1"  (timeout="200")
[12:52:25.357]      // while-condition  =>  TRUE
[12:52:25.357]      // while "1"  (timeout="200")
[12:52:25.357]      // while-condition  =>  TRUE
[12:52:25.357]      // while "1"  (timeout="200")
[12:52:25.357]      // while-condition  =>  TRUE
[12:52:25.357]      // while "1"  (timeout="200")
[12:52:25.357]      // while-condition  =>  TRUE
[12:52:25.357]      // while "1"  (timeout="200")
[12:52:25.357]      // while-condition  =>  TRUE
[12:52:25.357]      // while "1"  (timeout="200")
[12:52:25.357]      // while-condition  =>  TRUE
[12:52:25.357]      // while "1"  (timeout="200")
[12:52:25.357]      // while-condition  =>  TRUE
[12:52:25.357]      // while "1"  (timeout="200")
[12:52:25.357]      // while-condition  =>  TRUE
[12:52:25.357]      // while "1"  (timeout="200")
[12:52:25.357]      // while-condition  =>  TRUE
[12:52:25.359]      // while "1"  (timeout="200")
[12:52:25.359]      // while-condition  =>  TRUE
[12:52:25.359]      // while "1"  (timeout="200")
[12:52:25.359]      // while-condition  =>  TRUE
[12:52:25.359]      // while "1"  (timeout="200")
[12:52:25.359]      // while-condition  =>  TRUE
[12:52:25.360]      // while "1"  (timeout="200")
[12:52:25.360]      // while-condition  =>  TRUE
[12:52:25.360]      // while "1"  (timeout="200")
[12:52:25.360]      // while-condition  =>  TRUE
[12:52:25.360]      // while "1"  (timeout="200")
[12:52:25.360]      // while-condition  =>  TRUE
[12:52:25.360]      // while "1"  (timeout="200")
[12:52:25.360]      // while-condition  =>  TRUE
[12:52:25.360]      // while "1"  (timeout="200")
[12:52:25.360]      // while-condition  =>  TRUE
[12:52:25.360]      // while "1"  (timeout="200")
[12:52:25.360]      // while-condition  =>  TRUE
[12:52:25.360]      // while "1"  (timeout="200")
[12:52:25.360]      // while-condition  =>  TRUE
[12:52:25.360]      // while "1"  (timeout="200")
[12:52:25.360]      // while-condition  =>  TRUE
[12:52:25.360]      // while "1"  (timeout="200")
[12:52:25.360]      // while-condition  =>  TRUE
[12:52:25.360]      // while "1"  (timeout="200")
[12:52:25.362]      // while-condition  =>  TRUE
[12:52:25.362]      // while "1"  (timeout="200")
[12:52:25.362]      // while-condition  =>  TRUE
[12:52:25.362]      // while "1"  (timeout="200")
[12:52:25.362]      // while-condition  =>  TRUE
[12:52:25.362]      // while "1"  (timeout="200")
[12:52:25.362]      // while-condition  =>  TRUE
[12:52:25.362]      // while "1"  (timeout="200")
[12:52:25.362]      // while-condition  =>  TRUE
[12:52:25.362]      // while "1"  (timeout="200")
[12:52:25.362]      // while-condition  =>  TRUE
[12:52:25.362]      // while "1"  (timeout="200")
[12:52:25.362]      // while-condition  =>  TRUE
[12:52:25.362]      // while "1"  (timeout="200")
[12:52:25.362]      // while-condition  =>  TRUE
[12:52:25.362]      // while "1"  (timeout="200")
[12:52:25.362]      // while-condition  =>  TRUE
[12:52:25.362]      // while "1"  (timeout="200")
[12:52:25.362]      // while-condition  =>  TRUE
[12:52:25.362]      // while "1"  (timeout="200")
[12:52:25.365]      // while-condition  =>  TRUE
[12:52:25.365]      // while "1"  (timeout="200")
[12:52:25.365]      // while  =>  TIMEOUT
[12:52:25.365]      // end while "1"
[12:52:25.365]    </control>
[12:52:25.365]    <control if="canReadPins" while="" timeout="0" info="">
[12:52:25.365]      // if-block "canReadPins"
[12:52:25.365]        // =>  TRUE
[12:52:25.365]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:52:25.365]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:52:25.366]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:52:25.366]        // while-condition  =>  FALSE
[12:52:25.366]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:52:25.366]      </control>
[12:52:25.366]      // end if-block "canReadPins"
[12:52:25.369]    </control>
[12:52:25.369]    <control if="!canReadPins" while="" timeout="0" info="">
[12:52:25.369]      // if-block "!canReadPins"
[12:52:25.369]        // =>  FALSE
[12:52:25.369]      // skip if-block "!canReadPins"
[12:52:25.369]    </control>
[12:52:25.369]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:52:25.369]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:52:25.369]        // =>  TRUE
[12:52:25.369]      <block atomic="false" info="">
[12:52:25.369]        WriteAP(0x00, 0x190008);
[12:52:25.373]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:52:25.373]        WriteAP(0xF0, 0x01);
[12:52:25.380]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:52:25.380]      </block>
[12:52:25.380]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:52:25.380]    </control>
[12:52:25.380]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:52:25.380]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:52:25.380]        // =>  FALSE
[12:52:25.380]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:52:25.380]    </control>
[12:52:25.380]    <block atomic="false" info="">
[12:52:25.380]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:52:25.389]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:52:25.389]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:52:25.389]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:52:25.390]      __ap = 0; //lets make sure we reset the access point selection
[12:52:25.390]        // -> [__ap <= 0x00000000]
[12:52:25.390]    </block>
[12:52:25.390]  </sequence>
[12:52:25.390]  
[12:52:25.423]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:52:25.423]  
[12:52:25.423]  <debugvars>
[12:52:25.423]    // Pre-defined
[12:52:25.423]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:52:25.423]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:52:25.423]    __dp=0x00000000
[12:52:25.423]    __ap=0x00000000
[12:52:25.423]    __traceout=0x00000000      (Trace Disabled)
[12:52:25.423]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:52:25.423]    __FlashAddr=0x00000000
[12:52:25.423]    __FlashLen=0x00000000
[12:52:25.423]    __FlashArg=0x00000000
[12:52:25.423]    __FlashOp=0x00000000
[12:52:25.423]    __Result=0x00000000
[12:52:25.423]  </debugvars>
[12:52:25.423]  
[12:52:25.425]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:52:25.425]    <block atomic="false" info="">
[12:52:25.425]      __var deviceID = 0;
[12:52:25.425]        // -> [deviceID <= 0x00000000]
[12:52:25.425]      __var version = 0;
[12:52:25.425]        // -> [version <= 0x00000000]
[12:52:25.425]      __var partNum = 0;
[12:52:25.425]        // -> [partNum <= 0x00000000]
[12:52:25.426]      __var manuf = 0;
[12:52:25.426]        // -> [manuf <= 0x00000000]
[12:52:25.426]      __var isMSPM0G1X0X_G3X0X = 0;
[12:52:25.426]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:52:25.426]      __var isProduction = 0;
[12:52:25.426]        // -> [isProduction <= 0x00000000]
[12:52:25.426]      __var continueId = 0;
[12:52:25.426]        // -> [continueId <= 0x00000000]
[12:52:25.426]      deviceID =   Read32(0x41C40004);
[12:52:25.438]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:52:25.438]        // -> [deviceID <= 0x2BB8802F]
[12:52:25.438]      version = deviceID >> 28;
[12:52:25.438]        // -> [version <= 0x00000002]
[12:52:25.438]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:52:25.438]        // -> [partNum <= 0x0000BB88]
[12:52:25.438]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:52:25.438]        // -> [manuf <= 0x00000017]
[12:52:25.438]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:52:25.438]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:52:25.438]      isProduction = (version > 0);
[12:52:25.438]        // -> [isProduction <= 0x00000001]
[12:52:25.438]    </block>
[12:52:25.438]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:52:25.438]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:52:25.442]        // =>  FALSE
[12:52:25.442]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:52:25.442]    </control>
[12:52:25.442]    <control if="continueId == 4" while="" timeout="0" info="">
[12:52:25.442]      // if-block "continueId == 4"
[12:52:25.442]        // =>  FALSE
[12:52:25.442]      // skip if-block "continueId == 4"
[12:52:25.442]    </control>
[12:52:25.442]    <control if="!isProduction" while="" timeout="0" info="">
[12:52:25.443]      // if-block "!isProduction"
[12:52:25.443]        // =>  FALSE
[12:52:25.443]      // skip if-block "!isProduction"
[12:52:25.443]    </control>
[12:52:25.443]  </sequence>
[12:52:25.443]  
[12:52:32.001]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:52:32.001]  
[12:52:32.010]  <debugvars>
[12:52:32.010]    // Pre-defined
[12:52:32.010]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:52:32.010]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:52:32.010]    __dp=0x00000000
[12:52:32.010]    __ap=0x00000000
[12:52:32.010]    __traceout=0x00000000      (Trace Disabled)
[12:52:32.010]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:52:32.010]    __FlashAddr=0x00000000
[12:52:32.010]    __FlashLen=0x00000000
[12:52:32.010]    __FlashArg=0x00000000
[12:52:32.010]    __FlashOp=0x00000000
[12:52:32.010]    __Result=0x00000000
[12:52:32.010]  </debugvars>
[12:52:32.010]  
[12:52:32.010]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:52:32.010]    <block atomic="false" info="">
[12:52:32.010]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:52:32.012]        // -> [isSWJ <= 0x00000001]
[12:52:32.012]      __var hasDormant = __protocol & 0x00020000;
[12:52:32.012]        // -> [hasDormant <= 0x00000000]
[12:52:32.012]      __var protType   = __protocol & 0x0000FFFF;
[12:52:32.012]        // -> [protType <= 0x00000002]
[12:52:32.012]    </block>
[12:52:32.012]    <control if="protType == 1" while="" timeout="0" info="">
[12:52:32.012]      // if-block "protType == 1"
[12:52:32.012]        // =>  FALSE
[12:52:32.012]      // skip if-block "protType == 1"
[12:52:32.012]    </control>
[12:52:32.013]    <control if="protType == 2" while="" timeout="0" info="">
[12:52:32.013]      // if-block "protType == 2"
[12:52:32.013]        // =>  TRUE
[12:52:32.013]      <control if="isSWJ" while="" timeout="0" info="">
[12:52:32.013]        // if-block "isSWJ"
[12:52:32.013]          // =>  TRUE
[12:52:32.013]        <control if="hasDormant" while="" timeout="0" info="">
[12:52:32.013]          // if-block "hasDormant"
[12:52:32.013]            // =>  FALSE
[12:52:32.013]          // skip if-block "hasDormant"
[12:52:32.013]        </control>
[12:52:32.013]        <control if="!hasDormant" while="" timeout="0" info="">
[12:52:32.013]          // if-block "!hasDormant"
[12:52:32.013]            // =>  TRUE
[12:52:32.013]          <block atomic="false" info="">
[12:52:32.013]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:52:32.015]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:52:32.016]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:52:32.017]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:52:32.018]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:52:32.018]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:52:32.018]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:52:32.018]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:52:32.018]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:52:32.021]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:52:32.021]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:52:32.026]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:52:32.026]          </block>
[12:52:32.026]          // end if-block "!hasDormant"
[12:52:32.026]        </control>
[12:52:32.026]        // end if-block "isSWJ"
[12:52:32.026]      </control>
[12:52:32.026]      <control if="!isSWJ" while="" timeout="0" info="">
[12:52:32.026]        // if-block "!isSWJ"
[12:52:32.026]          // =>  FALSE
[12:52:32.026]        // skip if-block "!isSWJ"
[12:52:32.026]      </control>
[12:52:32.026]      <block atomic="false" info="">
[12:52:32.026]        ReadDP(0x0);
[12:52:32.029]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:52:32.029]      </block>
[12:52:32.029]      // end if-block "protType == 2"
[12:52:32.029]    </control>
[12:52:32.029]  </sequence>
[12:52:32.029]  
[12:52:32.029]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:52:32.029]  
[12:52:32.033]  <debugvars>
[12:52:32.033]    // Pre-defined
[12:52:32.033]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:52:32.033]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:52:32.033]    __dp=0x00000000
[12:52:32.033]    __ap=0x00000000
[12:52:32.033]    __traceout=0x00000000      (Trace Disabled)
[12:52:32.034]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:52:32.034]    __FlashAddr=0x00000000
[12:52:32.034]    __FlashLen=0x00000000
[12:52:32.034]    __FlashArg=0x00000000
[12:52:32.034]    __FlashOp=0x00000000
[12:52:32.034]    __Result=0x00000000
[12:52:32.034]  </debugvars>
[12:52:32.034]  
[12:52:32.034]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:52:32.034]    <block atomic="false" info="">
[12:52:32.034]      __var SW_DP_ABORT       = 0x0;
[12:52:32.035]        // -> [SW_DP_ABORT <= 0x00000000]
[12:52:32.035]      __var DP_CTRL_STAT      = 0x4;
[12:52:32.035]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:52:32.035]      __var DP_SELECT         = 0x8;
[12:52:32.035]        // -> [DP_SELECT <= 0x00000008]
[12:52:32.035]      __var powered_down      = 0;
[12:52:32.035]        // -> [powered_down <= 0x00000000]
[12:52:32.035]      WriteDP(DP_SELECT, 0x00000000);
[12:52:32.039]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:52:32.039]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:52:32.042]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:52:32.042]        // -> [powered_down <= 0x00000001]
[12:52:32.042]    </block>
[12:52:32.042]    <control if="powered_down" while="" timeout="0" info="">
[12:52:32.042]      // if-block "powered_down"
[12:52:32.042]        // =>  TRUE
[12:52:32.042]      <block atomic="false" info="">
[12:52:32.042]        Message(0, "Debug/System power-up request sent");
[12:52:32.045]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:52:32.049]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:52:32.049]      </block>
[12:52:32.049]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:52:32.049]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:52:32.053]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:52:32.053]        // while-condition  =>  FALSE
[12:52:32.053]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:52:32.053]      </control>
[12:52:32.053]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:52:32.053]        // if-block "(__protocol & 0xFFFF) == 1"
[12:52:32.054]          // =>  FALSE
[12:52:32.054]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:52:32.054]      </control>
[12:52:32.054]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:52:32.054]        // if-block "(__protocol & 0xFFFF) == 2"
[12:52:32.054]          // =>  TRUE
[12:52:32.054]        <block atomic="false" info="">
[12:52:32.054]          Message(0, "executing SWD power up");
[12:52:32.056]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:52:32.058]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:52:32.058]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:52:32.062]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:52:32.062]        </block>
[12:52:32.062]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:52:32.062]      </control>
[12:52:32.062]      // end if-block "powered_down"
[12:52:32.062]    </control>
[12:52:32.062]    <block atomic="false" info="">
[12:52:32.062]      __var DEBUG_PORT_VAL    = 0;
[12:52:32.062]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:52:32.062]      __var ACCESS_POINT_VAL  = 0;
[12:52:32.062]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:52:32.062]      __ap = 1; 
[12:52:32.062]        // -> [__ap <= 0x00000001]
[12:52:32.062]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:52:32.066]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:52:32.066]      __ap = 4;
[12:52:32.066]        // -> [__ap <= 0x00000004]
[12:52:32.066]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:52:32.070]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:52:32.070]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:52:32.070]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:52:32.070]    </block>
[12:52:32.070]    <block atomic="false" info="">
[12:52:32.070]      __var nReset = 0x80;
[12:52:32.070]        // -> [nReset <= 0x00000080]
[12:52:32.070]      __var canReadPins = 0;
[12:52:32.070]        // -> [canReadPins <= 0x00000000]
[12:52:32.070]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:52:32.078]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:52:32.078]        // -> [canReadPins <= 0x00000001]
[12:52:32.078]    </block>
[12:52:32.078]    <control if="" while="1" timeout="200" info="">
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.078]      // while-condition  =>  TRUE
[12:52:32.078]      // while "1"  (timeout="200")
[12:52:32.083]      // while-condition  =>  TRUE
[12:52:32.083]      // while "1"  (timeout="200")
[12:52:32.083]      // while  =>  TIMEOUT
[12:52:32.083]      // end while "1"
[12:52:32.083]    </control>
[12:52:32.083]    <control if="canReadPins" while="" timeout="0" info="">
[12:52:32.083]      // if-block "canReadPins"
[12:52:32.083]        // =>  TRUE
[12:52:32.083]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:52:32.083]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:52:32.083]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:52:32.083]        // while-condition  =>  FALSE
[12:52:32.083]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:52:32.083]      </control>
[12:52:32.083]      // end if-block "canReadPins"
[12:52:32.086]    </control>
[12:52:32.086]    <control if="!canReadPins" while="" timeout="0" info="">
[12:52:32.086]      // if-block "!canReadPins"
[12:52:32.086]        // =>  FALSE
[12:52:32.086]      // skip if-block "!canReadPins"
[12:52:32.086]    </control>
[12:52:32.086]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:52:32.086]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:52:32.086]        // =>  TRUE
[12:52:32.086]      <block atomic="false" info="">
[12:52:32.086]        WriteAP(0x00, 0x190008);
[12:52:32.088]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:52:32.088]        WriteAP(0xF0, 0x01);
[12:52:32.091]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:52:32.091]      </block>
[12:52:32.091]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:52:32.091]    </control>
[12:52:32.093]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:52:32.093]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:52:32.093]        // =>  FALSE
[12:52:32.093]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:52:32.093]    </control>
[12:52:32.093]    <block atomic="false" info="">
[12:52:32.093]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:52:32.097]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:52:32.097]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:52:32.097]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:52:32.099]      __ap = 0; //lets make sure we reset the access point selection
[12:52:32.099]        // -> [__ap <= 0x00000000]
[12:52:32.099]    </block>
[12:52:32.099]  </sequence>
[12:52:32.099]  
[12:52:32.127]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:52:32.127]  
[12:52:32.127]  <debugvars>
[12:52:32.127]    // Pre-defined
[12:52:32.127]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:52:32.127]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:52:32.127]    __dp=0x00000000
[12:52:32.127]    __ap=0x00000000
[12:52:32.127]    __traceout=0x00000000      (Trace Disabled)
[12:52:32.127]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:52:32.127]    __FlashAddr=0x00000000
[12:52:32.127]    __FlashLen=0x00000000
[12:52:32.127]    __FlashArg=0x00000000
[12:52:32.127]    __FlashOp=0x00000000
[12:52:32.127]    __Result=0x00000000
[12:52:32.127]  </debugvars>
[12:52:32.127]  
[12:52:32.131]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:52:32.131]    <block atomic="false" info="">
[12:52:32.131]      __var deviceID = 0;
[12:52:32.131]        // -> [deviceID <= 0x00000000]
[12:52:32.131]      __var version = 0;
[12:52:32.131]        // -> [version <= 0x00000000]
[12:52:32.131]      __var partNum = 0;
[12:52:32.131]        // -> [partNum <= 0x00000000]
[12:52:32.131]      __var manuf = 0;
[12:52:32.131]        // -> [manuf <= 0x00000000]
[12:52:32.131]      __var isMSPM0G1X0X_G3X0X = 0;
[12:52:32.131]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:52:32.131]      __var isProduction = 0;
[12:52:32.131]        // -> [isProduction <= 0x00000000]
[12:52:32.131]      __var continueId = 0;
[12:52:32.131]        // -> [continueId <= 0x00000000]
[12:52:32.131]      deviceID =   Read32(0x41C40004);
[12:52:32.137]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:52:32.137]        // -> [deviceID <= 0x2BB8802F]
[12:52:32.137]      version = deviceID >> 28;
[12:52:32.137]        // -> [version <= 0x00000002]
[12:52:32.139]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:52:32.139]        // -> [partNum <= 0x0000BB88]
[12:52:32.139]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:52:32.139]        // -> [manuf <= 0x00000017]
[12:52:32.139]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:52:32.139]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:52:32.139]      isProduction = (version > 0);
[12:52:32.139]        // -> [isProduction <= 0x00000001]
[12:52:32.139]    </block>
[12:52:32.139]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:52:32.139]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:52:32.139]        // =>  FALSE
[12:52:32.139]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:52:32.139]    </control>
[12:52:32.139]    <control if="continueId == 4" while="" timeout="0" info="">
[12:52:32.139]      // if-block "continueId == 4"
[12:52:32.139]        // =>  FALSE
[12:52:32.139]      // skip if-block "continueId == 4"
[12:52:32.139]    </control>
[12:52:32.139]    <control if="!isProduction" while="" timeout="0" info="">
[12:52:32.139]      // if-block "!isProduction"
[12:52:32.139]        // =>  FALSE
[12:52:32.139]      // skip if-block "!isProduction"
[12:52:32.139]    </control>
[12:52:32.139]  </sequence>
[12:52:32.142]  
[12:54:27.530]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:54:27.534]  
[12:54:27.534]  <debugvars>
[12:54:27.534]    // Pre-defined
[12:54:27.534]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:54:27.535]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:54:27.535]    __dp=0x00000000
[12:54:27.535]    __ap=0x00000000
[12:54:27.535]    __traceout=0x00000000      (Trace Disabled)
[12:54:27.535]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:54:27.535]    __FlashAddr=0x00000000
[12:54:27.535]    __FlashLen=0x00000000
[12:54:27.535]    __FlashArg=0x00000000
[12:54:27.535]    __FlashOp=0x00000000
[12:54:27.535]    __Result=0x00000000
[12:54:27.535]  </debugvars>
[12:54:27.535]  
[12:54:27.536]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:54:27.536]    <block atomic="false" info="">
[12:54:27.536]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:54:27.536]        // -> [isSWJ <= 0x00000001]
[12:54:27.536]      __var hasDormant = __protocol & 0x00020000;
[12:54:27.536]        // -> [hasDormant <= 0x00000000]
[12:54:27.536]      __var protType   = __protocol & 0x0000FFFF;
[12:54:27.536]        // -> [protType <= 0x00000002]
[12:54:27.536]    </block>
[12:54:27.536]    <control if="protType == 1" while="" timeout="0" info="">
[12:54:27.536]      // if-block "protType == 1"
[12:54:27.536]        // =>  FALSE
[12:54:27.536]      // skip if-block "protType == 1"
[12:54:27.536]    </control>
[12:54:27.538]    <control if="protType == 2" while="" timeout="0" info="">
[12:54:27.538]      // if-block "protType == 2"
[12:54:27.538]        // =>  TRUE
[12:54:27.538]      <control if="isSWJ" while="" timeout="0" info="">
[12:54:27.538]        // if-block "isSWJ"
[12:54:27.538]          // =>  TRUE
[12:54:27.538]        <control if="hasDormant" while="" timeout="0" info="">
[12:54:27.538]          // if-block "hasDormant"
[12:54:27.538]            // =>  FALSE
[12:54:27.538]          // skip if-block "hasDormant"
[12:54:27.538]        </control>
[12:54:27.539]        <control if="!hasDormant" while="" timeout="0" info="">
[12:54:27.539]          // if-block "!hasDormant"
[12:54:27.539]            // =>  TRUE
[12:54:27.539]          <block atomic="false" info="">
[12:54:27.539]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:54:27.541]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:54:27.541]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:54:27.541]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:54:27.541]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:54:27.543]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:54:27.543]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:54:27.543]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:54:27.545]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:54:27.546]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:54:27.546]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:54:27.555]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:54:27.556]          </block>
[12:54:27.556]          // end if-block "!hasDormant"
[12:54:27.556]        </control>
[12:54:27.556]        // end if-block "isSWJ"
[12:54:27.556]      </control>
[12:54:27.556]      <control if="!isSWJ" while="" timeout="0" info="">
[12:54:27.556]        // if-block "!isSWJ"
[12:54:27.556]          // =>  FALSE
[12:54:27.556]        // skip if-block "!isSWJ"
[12:54:27.556]      </control>
[12:54:27.557]      <block atomic="false" info="">
[12:54:27.557]        ReadDP(0x0);
[12:54:27.559]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:54:27.559]      </block>
[12:54:27.559]      // end if-block "protType == 2"
[12:54:27.559]    </control>
[12:54:27.559]  </sequence>
[12:54:27.559]  
[12:54:27.563]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:54:27.563]  
[12:54:27.563]  <debugvars>
[12:54:27.563]    // Pre-defined
[12:54:27.563]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:54:27.563]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:54:27.563]    __dp=0x00000000
[12:54:27.563]    __ap=0x00000000
[12:54:27.563]    __traceout=0x00000000      (Trace Disabled)
[12:54:27.563]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:54:27.563]    __FlashAddr=0x00000000
[12:54:27.563]    __FlashLen=0x00000000
[12:54:27.563]    __FlashArg=0x00000000
[12:54:27.563]    __FlashOp=0x00000000
[12:54:27.563]    __Result=0x00000000
[12:54:27.563]  </debugvars>
[12:54:27.565]  
[12:54:27.565]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:54:27.565]    <block atomic="false" info="">
[12:54:27.565]      __var SW_DP_ABORT       = 0x0;
[12:54:27.565]        // -> [SW_DP_ABORT <= 0x00000000]
[12:54:27.565]      __var DP_CTRL_STAT      = 0x4;
[12:54:27.565]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:54:27.565]      __var DP_SELECT         = 0x8;
[12:54:27.565]        // -> [DP_SELECT <= 0x00000008]
[12:54:27.566]      __var powered_down      = 0;
[12:54:27.566]        // -> [powered_down <= 0x00000000]
[12:54:27.566]      WriteDP(DP_SELECT, 0x00000000);
[12:54:27.566]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:54:27.566]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:54:27.576]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:54:27.576]        // -> [powered_down <= 0x00000001]
[12:54:27.576]    </block>
[12:54:27.576]    <control if="powered_down" while="" timeout="0" info="">
[12:54:27.576]      // if-block "powered_down"
[12:54:27.576]        // =>  TRUE
[12:54:27.576]      <block atomic="false" info="">
[12:54:27.576]        Message(0, "Debug/System power-up request sent");
[12:54:27.578]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:54:27.586]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:54:27.586]      </block>
[12:54:27.586]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:54:27.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:54:27.591]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:54:27.591]        // while-condition  =>  FALSE
[12:54:27.591]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:54:27.591]      </control>
[12:54:27.591]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:54:27.591]        // if-block "(__protocol & 0xFFFF) == 1"
[12:54:27.591]          // =>  FALSE
[12:54:27.591]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:54:27.591]      </control>
[12:54:27.591]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:54:27.591]        // if-block "(__protocol & 0xFFFF) == 2"
[12:54:27.593]          // =>  TRUE
[12:54:27.593]        <block atomic="false" info="">
[12:54:27.593]          Message(0, "executing SWD power up");
[12:54:27.594]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:54:27.596]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:54:27.596]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:54:27.599]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:54:27.599]        </block>
[12:54:27.599]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:54:27.599]      </control>
[12:54:27.599]      // end if-block "powered_down"
[12:54:27.599]    </control>
[12:54:27.599]    <block atomic="false" info="">
[12:54:27.599]      __var DEBUG_PORT_VAL    = 0;
[12:54:27.599]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:54:27.599]      __var ACCESS_POINT_VAL  = 0;
[12:54:27.599]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:54:27.599]      __ap = 1; 
[12:54:27.599]        // -> [__ap <= 0x00000001]
[12:54:27.599]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:54:27.608]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:54:27.608]      __ap = 4;
[12:54:27.608]        // -> [__ap <= 0x00000004]
[12:54:27.609]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:54:27.614]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:54:27.614]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:54:27.614]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:54:27.617]    </block>
[12:54:27.617]    <block atomic="false" info="">
[12:54:27.617]      __var nReset = 0x80;
[12:54:27.617]        // -> [nReset <= 0x00000080]
[12:54:27.617]      __var canReadPins = 0;
[12:54:27.617]        // -> [canReadPins <= 0x00000000]
[12:54:27.617]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:54:27.620]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:54:27.620]        // -> [canReadPins <= 0x00000001]
[12:54:27.620]    </block>
[12:54:27.620]    <control if="" while="1" timeout="200" info="">
[12:54:27.620]      // while "1"  (timeout="200")
[12:54:27.620]      // while-condition  =>  TRUE
[12:54:27.620]      // while "1"  (timeout="200")
[12:54:27.620]      // while-condition  =>  TRUE
[12:54:27.620]      // while "1"  (timeout="200")
[12:54:27.620]      // while-condition  =>  TRUE
[12:54:27.620]      // while "1"  (timeout="200")
[12:54:27.620]      // while-condition  =>  TRUE
[12:54:27.620]      // while "1"  (timeout="200")
[12:54:27.620]      // while-condition  =>  TRUE
[12:54:27.620]      // while "1"  (timeout="200")
[12:54:27.620]      // while-condition  =>  TRUE
[12:54:27.620]      // while "1"  (timeout="200")
[12:54:27.621]      // while-condition  =>  TRUE
[12:54:27.621]      // while "1"  (timeout="200")
[12:54:27.621]      // while-condition  =>  TRUE
[12:54:27.621]      // while "1"  (timeout="200")
[12:54:27.622]      // while-condition  =>  TRUE
[12:54:27.622]      // while "1"  (timeout="200")
[12:54:27.622]      // while-condition  =>  TRUE
[12:54:27.622]      // while "1"  (timeout="200")
[12:54:27.622]      // while-condition  =>  TRUE
[12:54:27.622]      // while "1"  (timeout="200")
[12:54:27.622]      // while-condition  =>  TRUE
[12:54:27.622]      // while "1"  (timeout="200")
[12:54:27.622]      // while-condition  =>  TRUE
[12:54:27.622]      // while "1"  (timeout="200")
[12:54:27.622]      // while-condition  =>  TRUE
[12:54:27.622]      // while "1"  (timeout="200")
[12:54:27.622]      // while-condition  =>  TRUE
[12:54:27.622]      // while "1"  (timeout="200")
[12:54:27.623]      // while-condition  =>  TRUE
[12:54:27.623]      // while "1"  (timeout="200")
[12:54:27.623]      // while-condition  =>  TRUE
[12:54:27.623]      // while "1"  (timeout="200")
[12:54:27.623]      // while-condition  =>  TRUE
[12:54:27.623]      // while "1"  (timeout="200")
[12:54:27.623]      // while-condition  =>  TRUE
[12:54:27.623]      // while "1"  (timeout="200")
[12:54:27.623]      // while-condition  =>  TRUE
[12:54:27.623]      // while "1"  (timeout="200")
[12:54:27.623]      // while-condition  =>  TRUE
[12:54:27.623]      // while "1"  (timeout="200")
[12:54:27.623]      // while-condition  =>  TRUE
[12:54:27.623]      // while "1"  (timeout="200")
[12:54:27.623]      // while-condition  =>  TRUE
[12:54:27.623]      // while "1"  (timeout="200")
[12:54:27.623]      // while-condition  =>  TRUE
[12:54:27.625]      // while "1"  (timeout="200")
[12:54:27.625]      // while-condition  =>  TRUE
[12:54:27.625]      // while "1"  (timeout="200")
[12:54:27.625]      // while-condition  =>  TRUE
[12:54:27.625]      // while "1"  (timeout="200")
[12:54:27.625]      // while-condition  =>  TRUE
[12:54:27.625]      // while "1"  (timeout="200")
[12:54:27.625]      // while-condition  =>  TRUE
[12:54:27.625]      // while "1"  (timeout="200")
[12:54:27.625]      // while-condition  =>  TRUE
[12:54:27.625]      // while "1"  (timeout="200")
[12:54:27.626]      // while-condition  =>  TRUE
[12:54:27.626]      // while "1"  (timeout="200")
[12:54:27.626]      // while-condition  =>  TRUE
[12:54:27.626]      // while "1"  (timeout="200")
[12:54:27.626]      // while-condition  =>  TRUE
[12:54:27.626]      // while "1"  (timeout="200")
[12:54:27.626]      // while-condition  =>  TRUE
[12:54:27.626]      // while "1"  (timeout="200")
[12:54:27.626]      // while-condition  =>  TRUE
[12:54:27.626]      // while "1"  (timeout="200")
[12:54:27.626]      // while-condition  =>  TRUE
[12:54:27.626]      // while "1"  (timeout="200")
[12:54:27.626]      // while-condition  =>  TRUE
[12:54:27.626]      // while "1"  (timeout="200")
[12:54:27.626]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.628]      // while-condition  =>  TRUE
[12:54:27.628]      // while "1"  (timeout="200")
[12:54:27.632]      // while-condition  =>  TRUE
[12:54:27.632]      // while "1"  (timeout="200")
[12:54:27.632]      // while  =>  TIMEOUT
[12:54:27.632]      // end while "1"
[12:54:27.632]    </control>
[12:54:27.632]    <control if="canReadPins" while="" timeout="0" info="">
[12:54:27.632]      // if-block "canReadPins"
[12:54:27.632]        // =>  TRUE
[12:54:27.632]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:54:27.632]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:54:27.632]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:54:27.632]        // while-condition  =>  FALSE
[12:54:27.632]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:54:27.632]      </control>
[12:54:27.632]      // end if-block "canReadPins"
[12:54:27.632]    </control>
[12:54:27.632]    <control if="!canReadPins" while="" timeout="0" info="">
[12:54:27.632]      // if-block "!canReadPins"
[12:54:27.632]        // =>  FALSE
[12:54:27.632]      // skip if-block "!canReadPins"
[12:54:27.632]    </control>
[12:54:27.635]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:54:27.635]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:54:27.635]        // =>  TRUE
[12:54:27.635]      <block atomic="false" info="">
[12:54:27.635]        WriteAP(0x00, 0x190008);
[12:54:27.638]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:54:27.638]        WriteAP(0xF0, 0x01);
[12:54:27.649]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:54:27.649]      </block>
[12:54:27.649]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:54:27.649]    </control>
[12:54:27.649]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:54:27.649]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:54:27.649]        // =>  FALSE
[12:54:27.652]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:54:27.652]    </control>
[12:54:27.652]    <block atomic="false" info="">
[12:54:27.652]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:54:27.656]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:54:27.656]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:54:27.656]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:54:27.657]      __ap = 0; //lets make sure we reset the access point selection
[12:54:27.657]        // -> [__ap <= 0x00000000]
[12:54:27.657]    </block>
[12:54:27.657]  </sequence>
[12:54:27.657]  
[12:54:27.683]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:54:27.683]  
[12:54:27.683]  <debugvars>
[12:54:27.683]    // Pre-defined
[12:54:27.683]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:54:27.683]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:54:27.683]    __dp=0x00000000
[12:54:27.683]    __ap=0x00000000
[12:54:27.683]    __traceout=0x00000000      (Trace Disabled)
[12:54:27.683]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:54:27.683]    __FlashAddr=0x00000000
[12:54:27.683]    __FlashLen=0x00000000
[12:54:27.683]    __FlashArg=0x00000000
[12:54:27.683]    __FlashOp=0x00000000
[12:54:27.685]    __Result=0x00000000
[12:54:27.685]  </debugvars>
[12:54:27.685]  
[12:54:27.685]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:54:27.686]    <block atomic="false" info="">
[12:54:27.686]      __var deviceID = 0;
[12:54:27.686]        // -> [deviceID <= 0x00000000]
[12:54:27.686]      __var version = 0;
[12:54:27.686]        // -> [version <= 0x00000000]
[12:54:27.686]      __var partNum = 0;
[12:54:27.686]        // -> [partNum <= 0x00000000]
[12:54:27.686]      __var manuf = 0;
[12:54:27.686]        // -> [manuf <= 0x00000000]
[12:54:27.686]      __var isMSPM0G1X0X_G3X0X = 0;
[12:54:27.686]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:54:27.686]      __var isProduction = 0;
[12:54:27.686]        // -> [isProduction <= 0x00000000]
[12:54:27.687]      __var continueId = 0;
[12:54:27.687]        // -> [continueId <= 0x00000000]
[12:54:27.687]      deviceID =   Read32(0x41C40004);
[12:54:27.698]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:54:27.698]        // -> [deviceID <= 0x2BB8802F]
[12:54:27.698]      version = deviceID >> 28;
[12:54:27.698]        // -> [version <= 0x00000002]
[12:54:27.698]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:54:27.698]        // -> [partNum <= 0x0000BB88]
[12:54:27.698]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:54:27.698]        // -> [manuf <= 0x00000017]
[12:54:27.698]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:54:27.698]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:54:27.698]      isProduction = (version > 0);
[12:54:27.698]        // -> [isProduction <= 0x00000001]
[12:54:27.698]    </block>
[12:54:27.698]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:54:27.698]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:54:27.698]        // =>  FALSE
[12:54:27.698]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:54:27.698]    </control>
[12:54:27.698]    <control if="continueId == 4" while="" timeout="0" info="">
[12:54:27.698]      // if-block "continueId == 4"
[12:54:27.698]        // =>  FALSE
[12:54:27.698]      // skip if-block "continueId == 4"
[12:54:27.702]    </control>
[12:54:27.702]    <control if="!isProduction" while="" timeout="0" info="">
[12:54:27.702]      // if-block "!isProduction"
[12:54:27.702]        // =>  FALSE
[12:54:27.702]      // skip if-block "!isProduction"
[12:54:27.702]    </control>
[12:54:27.702]  </sequence>
[12:54:27.702]  
[12:54:34.172]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:54:34.172]  
[12:54:34.172]  <debugvars>
[12:54:34.172]    // Pre-defined
[12:54:34.172]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:54:34.172]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:54:34.172]    __dp=0x00000000
[12:54:34.173]    __ap=0x00000000
[12:54:34.173]    __traceout=0x00000000      (Trace Disabled)
[12:54:34.173]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:54:34.173]    __FlashAddr=0x00000000
[12:54:34.173]    __FlashLen=0x00000000
[12:54:34.173]    __FlashArg=0x00000000
[12:54:34.174]    __FlashOp=0x00000000
[12:54:34.174]    __Result=0x00000000
[12:54:34.174]  </debugvars>
[12:54:34.174]  
[12:54:34.174]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:54:34.174]    <block atomic="false" info="">
[12:54:34.174]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:54:34.174]        // -> [isSWJ <= 0x00000001]
[12:54:34.174]      __var hasDormant = __protocol & 0x00020000;
[12:54:34.174]        // -> [hasDormant <= 0x00000000]
[12:54:34.174]      __var protType   = __protocol & 0x0000FFFF;
[12:54:34.174]        // -> [protType <= 0x00000002]
[12:54:34.174]    </block>
[12:54:34.174]    <control if="protType == 1" while="" timeout="0" info="">
[12:54:34.175]      // if-block "protType == 1"
[12:54:34.175]        // =>  FALSE
[12:54:34.175]      // skip if-block "protType == 1"
[12:54:34.175]    </control>
[12:54:34.175]    <control if="protType == 2" while="" timeout="0" info="">
[12:54:34.175]      // if-block "protType == 2"
[12:54:34.175]        // =>  TRUE
[12:54:34.175]      <control if="isSWJ" while="" timeout="0" info="">
[12:54:34.175]        // if-block "isSWJ"
[12:54:34.175]          // =>  TRUE
[12:54:34.175]        <control if="hasDormant" while="" timeout="0" info="">
[12:54:34.176]          // if-block "hasDormant"
[12:54:34.176]            // =>  FALSE
[12:54:34.176]          // skip if-block "hasDormant"
[12:54:34.176]        </control>
[12:54:34.176]        <control if="!hasDormant" while="" timeout="0" info="">
[12:54:34.176]          // if-block "!hasDormant"
[12:54:34.176]            // =>  TRUE
[12:54:34.176]          <block atomic="false" info="">
[12:54:34.177]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:54:34.177]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:54:34.177]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:54:34.180]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:54:34.180]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:54:34.183]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:54:34.183]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:54:34.185]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:54:34.185]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:54:34.186]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:54:34.186]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:54:34.189]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:54:34.189]          </block>
[12:54:34.189]          // end if-block "!hasDormant"
[12:54:34.189]        </control>
[12:54:34.189]        // end if-block "isSWJ"
[12:54:34.189]      </control>
[12:54:34.189]      <control if="!isSWJ" while="" timeout="0" info="">
[12:54:34.189]        // if-block "!isSWJ"
[12:54:34.189]          // =>  FALSE
[12:54:34.189]        // skip if-block "!isSWJ"
[12:54:34.189]      </control>
[12:54:34.189]      <block atomic="false" info="">
[12:54:34.189]        ReadDP(0x0);
[12:54:34.191]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:54:34.191]      </block>
[12:54:34.191]      // end if-block "protType == 2"
[12:54:34.191]    </control>
[12:54:34.191]  </sequence>
[12:54:34.191]  
[12:54:34.197]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:54:34.197]  
[12:54:34.197]  <debugvars>
[12:54:34.197]    // Pre-defined
[12:54:34.197]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:54:34.197]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:54:34.197]    __dp=0x00000000
[12:54:34.197]    __ap=0x00000000
[12:54:34.197]    __traceout=0x00000000      (Trace Disabled)
[12:54:34.197]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:54:34.197]    __FlashAddr=0x00000000
[12:54:34.197]    __FlashLen=0x00000000
[12:54:34.197]    __FlashArg=0x00000000
[12:54:34.197]    __FlashOp=0x00000000
[12:54:34.197]    __Result=0x00000000
[12:54:34.197]  </debugvars>
[12:54:34.197]  
[12:54:34.197]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:54:34.197]    <block atomic="false" info="">
[12:54:34.197]      __var SW_DP_ABORT       = 0x0;
[12:54:34.197]        // -> [SW_DP_ABORT <= 0x00000000]
[12:54:34.197]      __var DP_CTRL_STAT      = 0x4;
[12:54:34.197]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:54:34.197]      __var DP_SELECT         = 0x8;
[12:54:34.197]        // -> [DP_SELECT <= 0x00000008]
[12:54:34.197]      __var powered_down      = 0;
[12:54:34.197]        // -> [powered_down <= 0x00000000]
[12:54:34.197]      WriteDP(DP_SELECT, 0x00000000);
[12:54:34.206]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:54:34.206]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:54:34.206]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:54:34.210]        // -> [powered_down <= 0x00000001]
[12:54:34.210]    </block>
[12:54:34.210]    <control if="powered_down" while="" timeout="0" info="">
[12:54:34.210]      // if-block "powered_down"
[12:54:34.210]        // =>  TRUE
[12:54:34.210]      <block atomic="false" info="">
[12:54:34.210]        Message(0, "Debug/System power-up request sent");
[12:54:34.210]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:54:34.216]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:54:34.216]      </block>
[12:54:34.217]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:54:34.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:54:34.218]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:54:34.219]        // while-condition  =>  FALSE
[12:54:34.219]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:54:34.219]      </control>
[12:54:34.219]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:54:34.219]        // if-block "(__protocol & 0xFFFF) == 1"
[12:54:34.219]          // =>  FALSE
[12:54:34.219]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:54:34.219]      </control>
[12:54:34.219]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:54:34.219]        // if-block "(__protocol & 0xFFFF) == 2"
[12:54:34.219]          // =>  TRUE
[12:54:34.219]        <block atomic="false" info="">
[12:54:34.219]          Message(0, "executing SWD power up");
[12:54:34.222]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:54:34.222]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:54:34.225]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:54:34.227]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:54:34.227]        </block>
[12:54:34.227]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:54:34.227]      </control>
[12:54:34.227]      // end if-block "powered_down"
[12:54:34.227]    </control>
[12:54:34.227]    <block atomic="false" info="">
[12:54:34.227]      __var DEBUG_PORT_VAL    = 0;
[12:54:34.227]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:54:34.227]      __var ACCESS_POINT_VAL  = 0;
[12:54:34.227]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:54:34.227]      __ap = 1; 
[12:54:34.227]        // -> [__ap <= 0x00000001]
[12:54:34.227]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:54:34.230]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:54:34.230]      __ap = 4;
[12:54:34.230]        // -> [__ap <= 0x00000004]
[12:54:34.230]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:54:34.236]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:54:34.236]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:54:34.236]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:54:34.237]    </block>
[12:54:34.237]    <block atomic="false" info="">
[12:54:34.237]      __var nReset = 0x80;
[12:54:34.237]        // -> [nReset <= 0x00000080]
[12:54:34.239]      __var canReadPins = 0;
[12:54:34.239]        // -> [canReadPins <= 0x00000000]
[12:54:34.239]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:54:34.239]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:54:34.239]        // -> [canReadPins <= 0x00000001]
[12:54:34.239]    </block>
[12:54:34.239]    <control if="" while="1" timeout="200" info="">
[12:54:34.239]      // while "1"  (timeout="200")
[12:54:34.239]      // while-condition  =>  TRUE
[12:54:34.239]      // while "1"  (timeout="200")
[12:54:34.239]      // while-condition  =>  TRUE
[12:54:34.239]      // while "1"  (timeout="200")
[12:54:34.239]      // while-condition  =>  TRUE
[12:54:34.239]      // while "1"  (timeout="200")
[12:54:34.239]      // while-condition  =>  TRUE
[12:54:34.239]      // while "1"  (timeout="200")
[12:54:34.239]      // while-condition  =>  TRUE
[12:54:34.243]      // while "1"  (timeout="200")
[12:54:34.243]      // while-condition  =>  TRUE
[12:54:34.243]      // while "1"  (timeout="200")
[12:54:34.243]      // while-condition  =>  TRUE
[12:54:34.243]      // while "1"  (timeout="200")
[12:54:34.243]      // while-condition  =>  TRUE
[12:54:34.243]      // while "1"  (timeout="200")
[12:54:34.243]      // while-condition  =>  TRUE
[12:54:34.243]      // while "1"  (timeout="200")
[12:54:34.243]      // while-condition  =>  TRUE
[12:54:34.243]      // while "1"  (timeout="200")
[12:54:34.243]      // while-condition  =>  TRUE
[12:54:34.243]      // while "1"  (timeout="200")
[12:54:34.243]      // while-condition  =>  TRUE
[12:54:34.243]      // while "1"  (timeout="200")
[12:54:34.243]      // while-condition  =>  TRUE
[12:54:34.243]      // while "1"  (timeout="200")
[12:54:34.243]      // while-condition  =>  TRUE
[12:54:34.243]      // while "1"  (timeout="200")
[12:54:34.245]      // while-condition  =>  TRUE
[12:54:34.245]      // while "1"  (timeout="200")
[12:54:34.245]      // while-condition  =>  TRUE
[12:54:34.245]      // while "1"  (timeout="200")
[12:54:34.245]      // while-condition  =>  TRUE
[12:54:34.245]      // while "1"  (timeout="200")
[12:54:34.245]      // while-condition  =>  TRUE
[12:54:34.245]      // while "1"  (timeout="200")
[12:54:34.245]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.246]      // while-condition  =>  TRUE
[12:54:34.246]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.250]      // while-condition  =>  TRUE
[12:54:34.250]      // while "1"  (timeout="200")
[12:54:34.254]      // while-condition  =>  TRUE
[12:54:34.254]      // while "1"  (timeout="200")
[12:54:34.254]      // while  =>  TIMEOUT
[12:54:34.254]      // end while "1"
[12:54:34.254]    </control>
[12:54:34.254]    <control if="canReadPins" while="" timeout="0" info="">
[12:54:34.255]      // if-block "canReadPins"
[12:54:34.255]        // =>  TRUE
[12:54:34.255]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:54:34.255]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:54:34.262]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:54:34.262]        // while-condition  =>  FALSE
[12:54:34.262]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:54:34.262]      </control>
[12:54:34.262]      // end if-block "canReadPins"
[12:54:34.262]    </control>
[12:54:34.262]    <control if="!canReadPins" while="" timeout="0" info="">
[12:54:34.262]      // if-block "!canReadPins"
[12:54:34.262]        // =>  FALSE
[12:54:34.262]      // skip if-block "!canReadPins"
[12:54:34.262]    </control>
[12:54:34.262]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:54:34.262]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:54:34.262]        // =>  TRUE
[12:54:34.262]      <block atomic="false" info="">
[12:54:34.262]        WriteAP(0x00, 0x190008);
[12:54:34.267]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:54:34.267]        WriteAP(0xF0, 0x01);
[12:54:34.270]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:54:34.270]      </block>
[12:54:34.270]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:54:34.270]    </control>
[12:54:34.270]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:54:34.270]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:54:34.270]        // =>  FALSE
[12:54:34.270]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:54:34.270]    </control>
[12:54:34.270]    <block atomic="false" info="">
[12:54:34.270]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:54:34.275]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:54:34.275]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:54:34.275]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:54:34.278]      __ap = 0; //lets make sure we reset the access point selection
[12:54:34.278]        // -> [__ap <= 0x00000000]
[12:54:34.278]    </block>
[12:54:34.278]  </sequence>
[12:54:34.278]  
[12:54:34.310]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:54:34.310]  
[12:54:34.310]  <debugvars>
[12:54:34.310]    // Pre-defined
[12:54:34.310]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:54:34.310]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:54:34.310]    __dp=0x00000000
[12:54:34.310]    __ap=0x00000000
[12:54:34.310]    __traceout=0x00000000      (Trace Disabled)
[12:54:34.310]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:54:34.310]    __FlashAddr=0x00000000
[12:54:34.310]    __FlashLen=0x00000000
[12:54:34.310]    __FlashArg=0x00000000
[12:54:34.310]    __FlashOp=0x00000000
[12:54:34.310]    __Result=0x00000000
[12:54:34.310]  </debugvars>
[12:54:34.310]  
[12:54:34.310]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:54:34.310]    <block atomic="false" info="">
[12:54:34.310]      __var deviceID = 0;
[12:54:34.310]        // -> [deviceID <= 0x00000000]
[12:54:34.310]      __var version = 0;
[12:54:34.310]        // -> [version <= 0x00000000]
[12:54:34.310]      __var partNum = 0;
[12:54:34.310]        // -> [partNum <= 0x00000000]
[12:54:34.310]      __var manuf = 0;
[12:54:34.310]        // -> [manuf <= 0x00000000]
[12:54:34.310]      __var isMSPM0G1X0X_G3X0X = 0;
[12:54:34.310]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:54:34.310]      __var isProduction = 0;
[12:54:34.310]        // -> [isProduction <= 0x00000000]
[12:54:34.314]      __var continueId = 0;
[12:54:34.314]        // -> [continueId <= 0x00000000]
[12:54:34.314]      deviceID =   Read32(0x41C40004);
[12:54:34.323]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:54:34.323]        // -> [deviceID <= 0x2BB8802F]
[12:54:34.323]      version = deviceID >> 28;
[12:54:34.323]        // -> [version <= 0x00000002]
[12:54:34.323]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:54:34.323]        // -> [partNum <= 0x0000BB88]
[12:54:34.323]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:54:34.323]        // -> [manuf <= 0x00000017]
[12:54:34.323]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:54:34.323]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:54:34.325]      isProduction = (version > 0);
[12:54:34.325]        // -> [isProduction <= 0x00000001]
[12:54:34.325]    </block>
[12:54:34.325]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:54:34.325]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:54:34.325]        // =>  FALSE
[12:54:34.325]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:54:34.325]    </control>
[12:54:34.325]    <control if="continueId == 4" while="" timeout="0" info="">
[12:54:34.326]      // if-block "continueId == 4"
[12:54:34.326]        // =>  FALSE
[12:54:34.326]      // skip if-block "continueId == 4"
[12:54:34.326]    </control>
[12:54:34.326]    <control if="!isProduction" while="" timeout="0" info="">
[12:54:34.326]      // if-block "!isProduction"
[12:54:34.326]        // =>  FALSE
[12:54:34.326]      // skip if-block "!isProduction"
[12:54:34.326]    </control>
[12:54:34.326]  </sequence>
[12:54:34.326]  
[12:55:17.118]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:55:17.118]  
[12:55:17.118]  <debugvars>
[12:55:17.118]    // Pre-defined
[12:55:17.118]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:55:17.118]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:55:17.118]    __dp=0x00000000
[12:55:17.118]    __ap=0x00000000
[12:55:17.118]    __traceout=0x00000000      (Trace Disabled)
[12:55:17.118]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:55:17.118]    __FlashAddr=0x00000000
[12:55:17.118]    __FlashLen=0x00000000
[12:55:17.118]    __FlashArg=0x00000000
[12:55:17.118]    __FlashOp=0x00000000
[12:55:17.118]    __Result=0x00000000
[12:55:17.118]  </debugvars>
[12:55:17.118]  
[12:55:17.118]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:55:17.118]    <block atomic="false" info="">
[12:55:17.118]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:55:17.118]        // -> [isSWJ <= 0x00000001]
[12:55:17.118]      __var hasDormant = __protocol & 0x00020000;
[12:55:17.118]        // -> [hasDormant <= 0x00000000]
[12:55:17.118]      __var protType   = __protocol & 0x0000FFFF;
[12:55:17.118]        // -> [protType <= 0x00000002]
[12:55:17.118]    </block>
[12:55:17.118]    <control if="protType == 1" while="" timeout="0" info="">
[12:55:17.118]      // if-block "protType == 1"
[12:55:17.118]        // =>  FALSE
[12:55:17.118]      // skip if-block "protType == 1"
[12:55:17.118]    </control>
[12:55:17.118]    <control if="protType == 2" while="" timeout="0" info="">
[12:55:17.118]      // if-block "protType == 2"
[12:55:17.118]        // =>  TRUE
[12:55:17.118]      <control if="isSWJ" while="" timeout="0" info="">
[12:55:17.118]        // if-block "isSWJ"
[12:55:17.118]          // =>  TRUE
[12:55:17.118]        <control if="hasDormant" while="" timeout="0" info="">
[12:55:17.118]          // if-block "hasDormant"
[12:55:17.118]            // =>  FALSE
[12:55:17.122]          // skip if-block "hasDormant"
[12:55:17.122]        </control>
[12:55:17.122]        <control if="!hasDormant" while="" timeout="0" info="">
[12:55:17.122]          // if-block "!hasDormant"
[12:55:17.122]            // =>  TRUE
[12:55:17.122]          <block atomic="false" info="">
[12:55:17.122]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:55:17.130]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:55:17.130]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:55:17.130]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:55:17.130]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:55:17.134]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:55:17.134]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:55:17.136]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:55:17.136]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:55:17.138]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:55:17.138]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:55:17.142]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:55:17.142]          </block>
[12:55:17.142]          // end if-block "!hasDormant"
[12:55:17.142]        </control>
[12:55:17.142]        // end if-block "isSWJ"
[12:55:17.142]      </control>
[12:55:17.142]      <control if="!isSWJ" while="" timeout="0" info="">
[12:55:17.142]        // if-block "!isSWJ"
[12:55:17.142]          // =>  FALSE
[12:55:17.142]        // skip if-block "!isSWJ"
[12:55:17.142]      </control>
[12:55:17.142]      <block atomic="false" info="">
[12:55:17.142]        ReadDP(0x0);
[12:55:17.146]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:55:17.146]      </block>
[12:55:17.146]      // end if-block "protType == 2"
[12:55:17.146]    </control>
[12:55:17.146]  </sequence>
[12:55:17.146]  
[12:55:17.146]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:55:17.146]  
[12:55:17.146]  <debugvars>
[12:55:17.146]    // Pre-defined
[12:55:17.146]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:55:17.146]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:55:17.146]    __dp=0x00000000
[12:55:17.146]    __ap=0x00000000
[12:55:17.146]    __traceout=0x00000000      (Trace Disabled)
[12:55:17.146]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:55:17.146]    __FlashAddr=0x00000000
[12:55:17.150]    __FlashLen=0x00000000
[12:55:17.150]    __FlashArg=0x00000000
[12:55:17.150]    __FlashOp=0x00000000
[12:55:17.150]    __Result=0x00000000
[12:55:17.150]  </debugvars>
[12:55:17.150]  
[12:55:17.150]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:55:17.150]    <block atomic="false" info="">
[12:55:17.150]      __var SW_DP_ABORT       = 0x0;
[12:55:17.150]        // -> [SW_DP_ABORT <= 0x00000000]
[12:55:17.150]      __var DP_CTRL_STAT      = 0x4;
[12:55:17.150]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:55:17.150]      __var DP_SELECT         = 0x8;
[12:55:17.150]        // -> [DP_SELECT <= 0x00000008]
[12:55:17.150]      __var powered_down      = 0;
[12:55:17.150]        // -> [powered_down <= 0x00000000]
[12:55:17.150]      WriteDP(DP_SELECT, 0x00000000);
[12:55:17.154]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:55:17.154]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:55:17.156]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:55:17.156]        // -> [powered_down <= 0x00000001]
[12:55:17.156]    </block>
[12:55:17.156]    <control if="powered_down" while="" timeout="0" info="">
[12:55:17.156]      // if-block "powered_down"
[12:55:17.156]        // =>  TRUE
[12:55:17.157]      <block atomic="false" info="">
[12:55:17.157]        Message(0, "Debug/System power-up request sent");
[12:55:17.159]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:55:17.161]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:55:17.161]      </block>
[12:55:17.161]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:55:17.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:55:17.166]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:55:17.166]        // while-condition  =>  FALSE
[12:55:17.166]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:55:17.166]      </control>
[12:55:17.166]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:55:17.166]        // if-block "(__protocol & 0xFFFF) == 1"
[12:55:17.166]          // =>  FALSE
[12:55:17.166]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:55:17.166]      </control>
[12:55:17.166]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:55:17.166]        // if-block "(__protocol & 0xFFFF) == 2"
[12:55:17.166]          // =>  TRUE
[12:55:17.166]        <block atomic="false" info="">
[12:55:17.166]          Message(0, "executing SWD power up");
[12:55:17.170]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:55:17.170]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:55:17.170]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:55:17.174]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:55:17.174]        </block>
[12:55:17.174]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:55:17.174]      </control>
[12:55:17.174]      // end if-block "powered_down"
[12:55:17.174]    </control>
[12:55:17.174]    <block atomic="false" info="">
[12:55:17.174]      __var DEBUG_PORT_VAL    = 0;
[12:55:17.174]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:55:17.174]      __var ACCESS_POINT_VAL  = 0;
[12:55:17.174]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:55:17.174]      __ap = 1; 
[12:55:17.176]        // -> [__ap <= 0x00000001]
[12:55:17.176]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:55:17.178]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:55:17.178]      __ap = 4;
[12:55:17.178]        // -> [__ap <= 0x00000004]
[12:55:17.178]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:55:17.186]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:55:17.186]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:55:17.186]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:55:17.186]    </block>
[12:55:17.186]    <block atomic="false" info="">
[12:55:17.186]      __var nReset = 0x80;
[12:55:17.186]        // -> [nReset <= 0x00000080]
[12:55:17.190]      __var canReadPins = 0;
[12:55:17.190]        // -> [canReadPins <= 0x00000000]
[12:55:17.190]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:55:17.196]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:55:17.196]        // -> [canReadPins <= 0x00000001]
[12:55:17.197]    </block>
[12:55:17.197]    <control if="" while="1" timeout="200" info="">
[12:55:17.197]      // while "1"  (timeout="200")
[12:55:17.197]      // while-condition  =>  TRUE
[12:55:17.197]      // while "1"  (timeout="200")
[12:55:17.197]      // while-condition  =>  TRUE
[12:55:17.197]      // while "1"  (timeout="200")
[12:55:17.197]      // while-condition  =>  TRUE
[12:55:17.197]      // while "1"  (timeout="200")
[12:55:17.197]      // while-condition  =>  TRUE
[12:55:17.197]      // while "1"  (timeout="200")
[12:55:17.197]      // while-condition  =>  TRUE
[12:55:17.197]      // while "1"  (timeout="200")
[12:55:17.197]      // while-condition  =>  TRUE
[12:55:17.197]      // while "1"  (timeout="200")
[12:55:17.197]      // while-condition  =>  TRUE
[12:55:17.197]      // while "1"  (timeout="200")
[12:55:17.197]      // while-condition  =>  TRUE
[12:55:17.197]      // while "1"  (timeout="200")
[12:55:17.197]      // while-condition  =>  TRUE
[12:55:17.197]      // while "1"  (timeout="200")
[12:55:17.197]      // while-condition  =>  TRUE
[12:55:17.197]      // while "1"  (timeout="200")
[12:55:17.197]      // while-condition  =>  TRUE
[12:55:17.197]      // while "1"  (timeout="200")
[12:55:17.197]      // while-condition  =>  TRUE
[12:55:17.197]      // while "1"  (timeout="200")
[12:55:17.197]      // while-condition  =>  TRUE
[12:55:17.200]      // while "1"  (timeout="200")
[12:55:17.200]      // while-condition  =>  TRUE
[12:55:17.201]      // while "1"  (timeout="200")
[12:55:17.201]      // while-condition  =>  TRUE
[12:55:17.201]      // while "1"  (timeout="200")
[12:55:17.201]      // while-condition  =>  TRUE
[12:55:17.201]      // while "1"  (timeout="200")
[12:55:17.201]      // while-condition  =>  TRUE
[12:55:17.201]      // while "1"  (timeout="200")
[12:55:17.201]      // while-condition  =>  TRUE
[12:55:17.201]      // while "1"  (timeout="200")
[12:55:17.201]      // while-condition  =>  TRUE
[12:55:17.201]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.202]      // while "1"  (timeout="200")
[12:55:17.202]      // while-condition  =>  TRUE
[12:55:17.205]      // while "1"  (timeout="200")
[12:55:17.205]      // while-condition  =>  TRUE
[12:55:17.205]      // while "1"  (timeout="200")
[12:55:17.205]      // while-condition  =>  TRUE
[12:55:17.205]      // while "1"  (timeout="200")
[12:55:17.205]      // while-condition  =>  TRUE
[12:55:17.205]      // while "1"  (timeout="200")
[12:55:17.205]      // while-condition  =>  TRUE
[12:55:17.205]      // while "1"  (timeout="200")
[12:55:17.205]      // while-condition  =>  TRUE
[12:55:17.205]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.206]      // while-condition  =>  TRUE
[12:55:17.206]      // while "1"  (timeout="200")
[12:55:17.209]      // while-condition  =>  TRUE
[12:55:17.209]      // while "1"  (timeout="200")
[12:55:17.209]      // while  =>  TIMEOUT
[12:55:17.209]      // end while "1"
[12:55:17.209]    </control>
[12:55:17.209]    <control if="canReadPins" while="" timeout="0" info="">
[12:55:17.209]      // if-block "canReadPins"
[12:55:17.209]        // =>  TRUE
[12:55:17.209]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:55:17.209]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:55:17.209]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:55:17.209]        // while-condition  =>  FALSE
[12:55:17.209]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:55:17.209]      </control>
[12:55:17.209]      // end if-block "canReadPins"
[12:55:17.209]    </control>
[12:55:17.209]    <control if="!canReadPins" while="" timeout="0" info="">
[12:55:17.209]      // if-block "!canReadPins"
[12:55:17.209]        // =>  FALSE
[12:55:17.209]      // skip if-block "!canReadPins"
[12:55:17.209]    </control>
[12:55:17.209]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:55:17.209]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:55:17.213]        // =>  TRUE
[12:55:17.213]      <block atomic="false" info="">
[12:55:17.213]        WriteAP(0x00, 0x190008);
[12:55:17.213]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:55:17.213]        WriteAP(0xF0, 0x01);
[12:55:17.219]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:55:17.219]      </block>
[12:55:17.219]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:55:17.219]    </control>
[12:55:17.219]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:55:17.219]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:55:17.219]        // =>  FALSE
[12:55:17.219]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:55:17.219]    </control>
[12:55:17.219]    <block atomic="false" info="">
[12:55:17.219]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:55:17.229]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:55:17.229]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:55:17.229]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:55:17.229]      __ap = 0; //lets make sure we reset the access point selection
[12:55:17.229]        // -> [__ap <= 0x00000000]
[12:55:17.229]    </block>
[12:55:17.229]  </sequence>
[12:55:17.229]  
[12:55:17.268]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:55:17.268]  
[12:55:17.268]  <debugvars>
[12:55:17.268]    // Pre-defined
[12:55:17.269]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:55:17.270]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:55:17.270]    __dp=0x00000000
[12:55:17.270]    __ap=0x00000000
[12:55:17.270]    __traceout=0x00000000      (Trace Disabled)
[12:55:17.270]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:55:17.270]    __FlashAddr=0x00000000
[12:55:17.270]    __FlashLen=0x00000000
[12:55:17.270]    __FlashArg=0x00000000
[12:55:17.270]    __FlashOp=0x00000000
[12:55:17.270]    __Result=0x00000000
[12:55:17.270]  </debugvars>
[12:55:17.270]  
[12:55:17.270]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:55:17.270]    <block atomic="false" info="">
[12:55:17.270]      __var deviceID = 0;
[12:55:17.270]        // -> [deviceID <= 0x00000000]
[12:55:17.270]      __var version = 0;
[12:55:17.270]        // -> [version <= 0x00000000]
[12:55:17.270]      __var partNum = 0;
[12:55:17.270]        // -> [partNum <= 0x00000000]
[12:55:17.270]      __var manuf = 0;
[12:55:17.271]        // -> [manuf <= 0x00000000]
[12:55:17.271]      __var isMSPM0G1X0X_G3X0X = 0;
[12:55:17.271]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:55:17.271]      __var isProduction = 0;
[12:55:17.271]        // -> [isProduction <= 0x00000000]
[12:55:17.271]      __var continueId = 0;
[12:55:17.271]        // -> [continueId <= 0x00000000]
[12:55:17.271]      deviceID =   Read32(0x41C40004);
[12:55:17.278]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:55:17.278]        // -> [deviceID <= 0x2BB8802F]
[12:55:17.278]      version = deviceID >> 28;
[12:55:17.278]        // -> [version <= 0x00000002]
[12:55:17.278]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:55:17.278]        // -> [partNum <= 0x0000BB88]
[12:55:17.278]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:55:17.278]        // -> [manuf <= 0x00000017]
[12:55:17.278]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:55:17.278]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:55:17.278]      isProduction = (version > 0);
[12:55:17.278]        // -> [isProduction <= 0x00000001]
[12:55:17.279]    </block>
[12:55:17.279]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:55:17.279]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:55:17.279]        // =>  FALSE
[12:55:17.279]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:55:17.279]    </control>
[12:55:17.279]    <control if="continueId == 4" while="" timeout="0" info="">
[12:55:17.279]      // if-block "continueId == 4"
[12:55:17.279]        // =>  FALSE
[12:55:17.279]      // skip if-block "continueId == 4"
[12:55:17.279]    </control>
[12:55:17.279]    <control if="!isProduction" while="" timeout="0" info="">
[12:55:17.279]      // if-block "!isProduction"
[12:55:17.279]        // =>  FALSE
[12:55:17.279]      // skip if-block "!isProduction"
[12:55:17.281]    </control>
[12:55:17.281]  </sequence>
[12:55:17.281]  
[12:55:20.918]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:55:20.918]  
[12:55:20.928]  <debugvars>
[12:55:20.928]    // Pre-defined
[12:55:20.928]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:55:20.928]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:55:20.928]    __dp=0x00000000
[12:55:20.928]    __ap=0x00000000
[12:55:20.928]    __traceout=0x00000000      (Trace Disabled)
[12:55:20.928]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:55:20.928]    __FlashAddr=0x00000000
[12:55:20.928]    __FlashLen=0x00000000
[12:55:20.929]    __FlashArg=0x00000000
[12:55:20.929]    __FlashOp=0x00000000
[12:55:20.929]    __Result=0x00000000
[12:55:20.929]  </debugvars>
[12:55:20.929]  
[12:55:20.929]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:55:20.929]    <block atomic="false" info="">
[12:55:20.929]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:55:20.929]        // -> [isSWJ <= 0x00000001]
[12:55:20.929]      __var hasDormant = __protocol & 0x00020000;
[12:55:20.929]        // -> [hasDormant <= 0x00000000]
[12:55:20.929]      __var protType   = __protocol & 0x0000FFFF;
[12:55:20.929]        // -> [protType <= 0x00000002]
[12:55:20.929]    </block>
[12:55:20.929]    <control if="protType == 1" while="" timeout="0" info="">
[12:55:20.929]      // if-block "protType == 1"
[12:55:20.931]        // =>  FALSE
[12:55:20.931]      // skip if-block "protType == 1"
[12:55:20.931]    </control>
[12:55:20.931]    <control if="protType == 2" while="" timeout="0" info="">
[12:55:20.931]      // if-block "protType == 2"
[12:55:20.931]        // =>  TRUE
[12:55:20.931]      <control if="isSWJ" while="" timeout="0" info="">
[12:55:20.931]        // if-block "isSWJ"
[12:55:20.931]          // =>  TRUE
[12:55:20.931]        <control if="hasDormant" while="" timeout="0" info="">
[12:55:20.931]          // if-block "hasDormant"
[12:55:20.931]            // =>  FALSE
[12:55:20.931]          // skip if-block "hasDormant"
[12:55:20.931]        </control>
[12:55:20.931]        <control if="!hasDormant" while="" timeout="0" info="">
[12:55:20.931]          // if-block "!hasDormant"
[12:55:20.931]            // =>  TRUE
[12:55:20.931]          <block atomic="false" info="">
[12:55:20.931]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:55:20.935]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:55:20.935]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:55:20.936]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:55:20.937]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:55:20.937]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:55:20.937]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:55:20.937]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:55:20.937]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:55:20.941]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:55:20.941]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:55:20.946]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:55:20.946]          </block>
[12:55:20.946]          // end if-block "!hasDormant"
[12:55:20.946]        </control>
[12:55:20.946]        // end if-block "isSWJ"
[12:55:20.946]      </control>
[12:55:20.946]      <control if="!isSWJ" while="" timeout="0" info="">
[12:55:20.946]        // if-block "!isSWJ"
[12:55:20.946]          // =>  FALSE
[12:55:20.946]        // skip if-block "!isSWJ"
[12:55:20.946]      </control>
[12:55:20.946]      <block atomic="false" info="">
[12:55:20.946]        ReadDP(0x0);
[12:55:20.949]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:55:20.949]      </block>
[12:55:20.949]      // end if-block "protType == 2"
[12:55:20.949]    </control>
[12:55:20.949]  </sequence>
[12:55:20.949]  
[12:55:20.958]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:55:20.958]  
[12:55:20.958]  <debugvars>
[12:55:20.958]    // Pre-defined
[12:55:20.958]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:55:20.958]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:55:20.958]    __dp=0x00000000
[12:55:20.958]    __ap=0x00000000
[12:55:20.958]    __traceout=0x00000000      (Trace Disabled)
[12:55:20.958]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:55:20.958]    __FlashAddr=0x00000000
[12:55:20.958]    __FlashLen=0x00000000
[12:55:20.958]    __FlashArg=0x00000000
[12:55:20.958]    __FlashOp=0x00000000
[12:55:20.958]    __Result=0x00000000
[12:55:20.958]  </debugvars>
[12:55:20.958]  
[12:55:20.958]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:55:20.958]    <block atomic="false" info="">
[12:55:20.958]      __var SW_DP_ABORT       = 0x0;
[12:55:20.958]        // -> [SW_DP_ABORT <= 0x00000000]
[12:55:20.958]      __var DP_CTRL_STAT      = 0x4;
[12:55:20.958]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:55:20.958]      __var DP_SELECT         = 0x8;
[12:55:20.958]        // -> [DP_SELECT <= 0x00000008]
[12:55:20.958]      __var powered_down      = 0;
[12:55:20.958]        // -> [powered_down <= 0x00000000]
[12:55:20.958]      WriteDP(DP_SELECT, 0x00000000);
[12:55:20.962]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:55:20.962]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:55:20.962]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:55:20.962]        // -> [powered_down <= 0x00000001]
[12:55:20.962]    </block>
[12:55:20.962]    <control if="powered_down" while="" timeout="0" info="">
[12:55:20.962]      // if-block "powered_down"
[12:55:20.962]        // =>  TRUE
[12:55:20.962]      <block atomic="false" info="">
[12:55:20.962]        Message(0, "Debug/System power-up request sent");
[12:55:20.966]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:55:20.967]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:55:20.967]      </block>
[12:55:20.967]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:55:20.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:55:20.970]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:55:20.970]        // while-condition  =>  FALSE
[12:55:20.970]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:55:20.970]      </control>
[12:55:20.970]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:55:20.970]        // if-block "(__protocol & 0xFFFF) == 1"
[12:55:20.970]          // =>  FALSE
[12:55:20.970]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:55:20.970]      </control>
[12:55:20.970]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:55:20.970]        // if-block "(__protocol & 0xFFFF) == 2"
[12:55:20.970]          // =>  TRUE
[12:55:20.970]        <block atomic="false" info="">
[12:55:20.970]          Message(0, "executing SWD power up");
[12:55:20.973]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:55:20.976]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:55:20.976]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:55:20.978]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:55:20.978]        </block>
[12:55:20.978]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:55:20.978]      </control>
[12:55:20.978]      // end if-block "powered_down"
[12:55:20.978]    </control>
[12:55:20.981]    <block atomic="false" info="">
[12:55:20.981]      __var DEBUG_PORT_VAL    = 0;
[12:55:20.981]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:55:20.981]      __var ACCESS_POINT_VAL  = 0;
[12:55:20.981]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:55:20.981]      __ap = 1; 
[12:55:20.981]        // -> [__ap <= 0x00000001]
[12:55:20.981]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:55:20.986]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:55:20.986]      __ap = 4;
[12:55:20.986]        // -> [__ap <= 0x00000004]
[12:55:20.986]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:55:20.989]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:55:20.989]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:55:20.989]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:55:20.989]    </block>
[12:55:20.989]    <block atomic="false" info="">
[12:55:20.989]      __var nReset = 0x80;
[12:55:20.993]        // -> [nReset <= 0x00000080]
[12:55:20.993]      __var canReadPins = 0;
[12:55:20.993]        // -> [canReadPins <= 0x00000000]
[12:55:20.993]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:55:20.996]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:55:20.996]        // -> [canReadPins <= 0x00000001]
[12:55:20.996]    </block>
[12:55:20.997]    <control if="" while="1" timeout="200" info="">
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:20.997]      // while-condition  =>  TRUE
[12:55:20.997]      // while "1"  (timeout="200")
[12:55:21.000]      // while-condition  =>  TRUE
[12:55:21.000]      // while "1"  (timeout="200")
[12:55:21.000]      // while-condition  =>  TRUE
[12:55:21.000]      // while "1"  (timeout="200")
[12:55:21.000]      // while-condition  =>  TRUE
[12:55:21.000]      // while "1"  (timeout="200")
[12:55:21.000]      // while-condition  =>  TRUE
[12:55:21.000]      // while "1"  (timeout="200")
[12:55:21.000]      // while-condition  =>  TRUE
[12:55:21.000]      // while "1"  (timeout="200")
[12:55:21.000]      // while-condition  =>  TRUE
[12:55:21.001]      // while "1"  (timeout="200")
[12:55:21.001]      // while-condition  =>  TRUE
[12:55:21.001]      // while "1"  (timeout="200")
[12:55:21.001]      // while-condition  =>  TRUE
[12:55:21.001]      // while "1"  (timeout="200")
[12:55:21.001]      // while-condition  =>  TRUE
[12:55:21.001]      // while "1"  (timeout="200")
[12:55:21.001]      // while-condition  =>  TRUE
[12:55:21.001]      // while "1"  (timeout="200")
[12:55:21.001]      // while-condition  =>  TRUE
[12:55:21.001]      // while "1"  (timeout="200")
[12:55:21.001]      // while-condition  =>  TRUE
[12:55:21.001]      // while "1"  (timeout="200")
[12:55:21.003]      // while-condition  =>  TRUE
[12:55:21.003]      // while "1"  (timeout="200")
[12:55:21.003]      // while-condition  =>  TRUE
[12:55:21.003]      // while "1"  (timeout="200")
[12:55:21.003]      // while-condition  =>  TRUE
[12:55:21.003]      // while "1"  (timeout="200")
[12:55:21.003]      // while-condition  =>  TRUE
[12:55:21.003]      // while "1"  (timeout="200")
[12:55:21.003]      // while-condition  =>  TRUE
[12:55:21.003]      // while "1"  (timeout="200")
[12:55:21.003]      // while-condition  =>  TRUE
[12:55:21.004]      // while "1"  (timeout="200")
[12:55:21.004]      // while  =>  TIMEOUT
[12:55:21.004]      // end while "1"
[12:55:21.004]    </control>
[12:55:21.004]    <control if="canReadPins" while="" timeout="0" info="">
[12:55:21.004]      // if-block "canReadPins"
[12:55:21.004]        // =>  TRUE
[12:55:21.004]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:55:21.004]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:55:21.006]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:55:21.006]        // while-condition  =>  FALSE
[12:55:21.006]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:55:21.006]      </control>
[12:55:21.006]      // end if-block "canReadPins"
[12:55:21.006]    </control>
[12:55:21.006]    <control if="!canReadPins" while="" timeout="0" info="">
[12:55:21.007]      // if-block "!canReadPins"
[12:55:21.007]        // =>  FALSE
[12:55:21.007]      // skip if-block "!canReadPins"
[12:55:21.007]    </control>
[12:55:21.007]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:55:21.007]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:55:21.007]        // =>  TRUE
[12:55:21.007]      <block atomic="false" info="">
[12:55:21.007]        WriteAP(0x00, 0x190008);
[12:55:21.008]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:55:21.010]        WriteAP(0xF0, 0x01);
[12:55:21.011]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:55:21.011]      </block>
[12:55:21.011]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:55:21.014]    </control>
[12:55:21.014]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:55:21.014]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:55:21.014]        // =>  FALSE
[12:55:21.014]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:55:21.014]    </control>
[12:55:21.014]    <block atomic="false" info="">
[12:55:21.014]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:55:21.026]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:55:21.026]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:55:21.027]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:55:21.027]      __ap = 0; //lets make sure we reset the access point selection
[12:55:21.027]        // -> [__ap <= 0x00000000]
[12:55:21.027]    </block>
[12:55:21.027]  </sequence>
[12:55:21.027]  
[12:55:21.049]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:55:21.049]  
[12:55:21.049]  <debugvars>
[12:55:21.049]    // Pre-defined
[12:55:21.049]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:55:21.049]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:55:21.049]    __dp=0x00000000
[12:55:21.051]    __ap=0x00000000
[12:55:21.051]    __traceout=0x00000000      (Trace Disabled)
[12:55:21.051]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:55:21.051]    __FlashAddr=0x00000000
[12:55:21.051]    __FlashLen=0x00000000
[12:55:21.051]    __FlashArg=0x00000000
[12:55:21.051]    __FlashOp=0x00000000
[12:55:21.051]    __Result=0x00000000
[12:55:21.051]  </debugvars>
[12:55:21.051]  
[12:55:21.051]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:55:21.053]    <block atomic="false" info="">
[12:55:21.053]      __var deviceID = 0;
[12:55:21.053]        // -> [deviceID <= 0x00000000]
[12:55:21.053]      __var version = 0;
[12:55:21.053]        // -> [version <= 0x00000000]
[12:55:21.053]      __var partNum = 0;
[12:55:21.053]        // -> [partNum <= 0x00000000]
[12:55:21.053]      __var manuf = 0;
[12:55:21.053]        // -> [manuf <= 0x00000000]
[12:55:21.053]      __var isMSPM0G1X0X_G3X0X = 0;
[12:55:21.053]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:55:21.053]      __var isProduction = 0;
[12:55:21.053]        // -> [isProduction <= 0x00000000]
[12:55:21.054]      __var continueId = 0;
[12:55:21.054]        // -> [continueId <= 0x00000000]
[12:55:21.054]      deviceID =   Read32(0x41C40004);
[12:55:21.058]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:55:21.058]        // -> [deviceID <= 0x2BB8802F]
[12:55:21.061]      version = deviceID >> 28;
[12:55:21.061]        // -> [version <= 0x00000002]
[12:55:21.061]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:55:21.061]        // -> [partNum <= 0x0000BB88]
[12:55:21.061]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:55:21.061]        // -> [manuf <= 0x00000017]
[12:55:21.061]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:55:21.061]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:55:21.061]      isProduction = (version > 0);
[12:55:21.061]        // -> [isProduction <= 0x00000001]
[12:55:21.061]    </block>
[12:55:21.061]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:55:21.061]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:55:21.061]        // =>  FALSE
[12:55:21.061]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:55:21.061]    </control>
[12:55:21.061]    <control if="continueId == 4" while="" timeout="0" info="">
[12:55:21.061]      // if-block "continueId == 4"
[12:55:21.061]        // =>  FALSE
[12:55:21.061]      // skip if-block "continueId == 4"
[12:55:21.061]    </control>
[12:55:21.061]    <control if="!isProduction" while="" timeout="0" info="">
[12:55:21.061]      // if-block "!isProduction"
[12:55:21.061]        // =>  FALSE
[12:55:21.061]      // skip if-block "!isProduction"
[12:55:21.061]    </control>
[12:55:21.061]  </sequence>
[12:55:21.061]  
[12:56:21.751]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:56:21.751]  
[12:56:21.759]  <debugvars>
[12:56:21.759]    // Pre-defined
[12:56:21.759]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:56:21.759]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:56:21.759]    __dp=0x00000000
[12:56:21.759]    __ap=0x00000000
[12:56:21.759]    __traceout=0x00000000      (Trace Disabled)
[12:56:21.759]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:56:21.759]    __FlashAddr=0x00000000
[12:56:21.759]    __FlashLen=0x00000000
[12:56:21.759]    __FlashArg=0x00000000
[12:56:21.759]    __FlashOp=0x00000000
[12:56:21.759]    __Result=0x00000000
[12:56:21.759]  </debugvars>
[12:56:21.759]  
[12:56:21.759]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:56:21.759]    <block atomic="false" info="">
[12:56:21.759]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:56:21.759]        // -> [isSWJ <= 0x00000001]
[12:56:21.759]      __var hasDormant = __protocol & 0x00020000;
[12:56:21.759]        // -> [hasDormant <= 0x00000000]
[12:56:21.759]      __var protType   = __protocol & 0x0000FFFF;
[12:56:21.759]        // -> [protType <= 0x00000002]
[12:56:21.759]    </block>
[12:56:21.759]    <control if="protType == 1" while="" timeout="0" info="">
[12:56:21.759]      // if-block "protType == 1"
[12:56:21.759]        // =>  FALSE
[12:56:21.759]      // skip if-block "protType == 1"
[12:56:21.759]    </control>
[12:56:21.759]    <control if="protType == 2" while="" timeout="0" info="">
[12:56:21.759]      // if-block "protType == 2"
[12:56:21.759]        // =>  TRUE
[12:56:21.759]      <control if="isSWJ" while="" timeout="0" info="">
[12:56:21.763]        // if-block "isSWJ"
[12:56:21.763]          // =>  TRUE
[12:56:21.763]        <control if="hasDormant" while="" timeout="0" info="">
[12:56:21.763]          // if-block "hasDormant"
[12:56:21.763]            // =>  FALSE
[12:56:21.763]          // skip if-block "hasDormant"
[12:56:21.763]        </control>
[12:56:21.763]        <control if="!hasDormant" while="" timeout="0" info="">
[12:56:21.763]          // if-block "!hasDormant"
[12:56:21.763]            // =>  TRUE
[12:56:21.763]          <block atomic="false" info="">
[12:56:21.763]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:56:21.765]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:56:21.765]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:56:21.767]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:56:21.767]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:56:21.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:56:21.769]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:56:21.774]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:56:21.774]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:56:21.779]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:56:21.779]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:56:21.779]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:56:21.779]          </block>
[12:56:21.779]          // end if-block "!hasDormant"
[12:56:21.779]        </control>
[12:56:21.779]        // end if-block "isSWJ"
[12:56:21.779]      </control>
[12:56:21.779]      <control if="!isSWJ" while="" timeout="0" info="">
[12:56:21.779]        // if-block "!isSWJ"
[12:56:21.779]          // =>  FALSE
[12:56:21.782]        // skip if-block "!isSWJ"
[12:56:21.782]      </control>
[12:56:21.782]      <block atomic="false" info="">
[12:56:21.782]        ReadDP(0x0);
[12:56:21.783]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:56:21.783]      </block>
[12:56:21.783]      // end if-block "protType == 2"
[12:56:21.783]    </control>
[12:56:21.783]  </sequence>
[12:56:21.783]  
[12:56:21.790]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:56:21.790]  
[12:56:21.791]  <debugvars>
[12:56:21.791]    // Pre-defined
[12:56:21.791]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:56:21.791]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:56:21.791]    __dp=0x00000000
[12:56:21.791]    __ap=0x00000000
[12:56:21.791]    __traceout=0x00000000      (Trace Disabled)
[12:56:21.791]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:56:21.791]    __FlashAddr=0x00000000
[12:56:21.791]    __FlashLen=0x00000000
[12:56:21.791]    __FlashArg=0x00000000
[12:56:21.791]    __FlashOp=0x00000000
[12:56:21.791]    __Result=0x00000000
[12:56:21.791]  </debugvars>
[12:56:21.791]  
[12:56:21.791]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:56:21.791]    <block atomic="false" info="">
[12:56:21.791]      __var SW_DP_ABORT       = 0x0;
[12:56:21.791]        // -> [SW_DP_ABORT <= 0x00000000]
[12:56:21.791]      __var DP_CTRL_STAT      = 0x4;
[12:56:21.791]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:56:21.791]      __var DP_SELECT         = 0x8;
[12:56:21.791]        // -> [DP_SELECT <= 0x00000008]
[12:56:21.791]      __var powered_down      = 0;
[12:56:21.791]        // -> [powered_down <= 0x00000000]
[12:56:21.791]      WriteDP(DP_SELECT, 0x00000000);
[12:56:21.793]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:56:21.793]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:56:21.797]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:56:21.797]        // -> [powered_down <= 0x00000001]
[12:56:21.797]    </block>
[12:56:21.797]    <control if="powered_down" while="" timeout="0" info="">
[12:56:21.797]      // if-block "powered_down"
[12:56:21.798]        // =>  TRUE
[12:56:21.798]      <block atomic="false" info="">
[12:56:21.798]        Message(0, "Debug/System power-up request sent");
[12:56:21.799]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:56:21.802]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:56:21.802]      </block>
[12:56:21.802]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:56:21.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:56:21.804]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:56:21.805]        // while-condition  =>  FALSE
[12:56:21.805]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:56:21.805]      </control>
[12:56:21.805]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:56:21.805]        // if-block "(__protocol & 0xFFFF) == 1"
[12:56:21.805]          // =>  FALSE
[12:56:21.805]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:56:21.805]      </control>
[12:56:21.805]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:56:21.805]        // if-block "(__protocol & 0xFFFF) == 2"
[12:56:21.805]          // =>  TRUE
[12:56:21.805]        <block atomic="false" info="">
[12:56:21.805]          Message(0, "executing SWD power up");
[12:56:21.808]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:56:21.809]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:56:21.809]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:56:21.811]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:56:21.811]        </block>
[12:56:21.811]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:56:21.811]      </control>
[12:56:21.811]      // end if-block "powered_down"
[12:56:21.811]    </control>
[12:56:21.811]    <block atomic="false" info="">
[12:56:21.811]      __var DEBUG_PORT_VAL    = 0;
[12:56:21.811]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:56:21.811]      __var ACCESS_POINT_VAL  = 0;
[12:56:21.811]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:56:21.811]      __ap = 1; 
[12:56:21.811]        // -> [__ap <= 0x00000001]
[12:56:21.811]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:56:21.814]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:56:21.814]      __ap = 4;
[12:56:21.814]        // -> [__ap <= 0x00000004]
[12:56:21.814]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:56:21.822]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:56:21.822]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:56:21.823]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:56:21.824]    </block>
[12:56:21.824]    <block atomic="false" info="">
[12:56:21.824]      __var nReset = 0x80;
[12:56:21.824]        // -> [nReset <= 0x00000080]
[12:56:21.824]      __var canReadPins = 0;
[12:56:21.824]        // -> [canReadPins <= 0x00000000]
[12:56:21.824]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:56:21.828]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:56:21.828]        // -> [canReadPins <= 0x00000001]
[12:56:21.828]    </block>
[12:56:21.828]    <control if="" while="1" timeout="200" info="">
[12:56:21.828]      // while "1"  (timeout="200")
[12:56:21.828]      // while-condition  =>  TRUE
[12:56:21.828]      // while "1"  (timeout="200")
[12:56:21.829]      // while-condition  =>  TRUE
[12:56:21.829]      // while "1"  (timeout="200")
[12:56:21.829]      // while-condition  =>  TRUE
[12:56:21.829]      // while "1"  (timeout="200")
[12:56:21.829]      // while-condition  =>  TRUE
[12:56:21.829]      // while "1"  (timeout="200")
[12:56:21.829]      // while-condition  =>  TRUE
[12:56:21.829]      // while "1"  (timeout="200")
[12:56:21.829]      // while-condition  =>  TRUE
[12:56:21.829]      // while "1"  (timeout="200")
[12:56:21.829]      // while-condition  =>  TRUE
[12:56:21.829]      // while "1"  (timeout="200")
[12:56:21.829]      // while-condition  =>  TRUE
[12:56:21.829]      // while "1"  (timeout="200")
[12:56:21.829]      // while-condition  =>  TRUE
[12:56:21.829]      // while "1"  (timeout="200")
[12:56:21.829]      // while-condition  =>  TRUE
[12:56:21.829]      // while "1"  (timeout="200")
[12:56:21.830]      // while-condition  =>  TRUE
[12:56:21.830]      // while "1"  (timeout="200")
[12:56:21.830]      // while-condition  =>  TRUE
[12:56:21.830]      // while "1"  (timeout="200")
[12:56:21.830]      // while-condition  =>  TRUE
[12:56:21.830]      // while "1"  (timeout="200")
[12:56:21.830]      // while-condition  =>  TRUE
[12:56:21.830]      // while "1"  (timeout="200")
[12:56:21.831]      // while-condition  =>  TRUE
[12:56:21.831]      // while "1"  (timeout="200")
[12:56:21.831]      // while-condition  =>  TRUE
[12:56:21.831]      // while "1"  (timeout="200")
[12:56:21.831]      // while-condition  =>  TRUE
[12:56:21.831]      // while "1"  (timeout="200")
[12:56:21.831]      // while-condition  =>  TRUE
[12:56:21.831]      // while "1"  (timeout="200")
[12:56:21.831]      // while-condition  =>  TRUE
[12:56:21.831]      // while "1"  (timeout="200")
[12:56:21.831]      // while-condition  =>  TRUE
[12:56:21.831]      // while "1"  (timeout="200")
[12:56:21.831]      // while-condition  =>  TRUE
[12:56:21.831]      // while "1"  (timeout="200")
[12:56:21.833]      // while-condition  =>  TRUE
[12:56:21.833]      // while "1"  (timeout="200")
[12:56:21.833]      // while  =>  TIMEOUT
[12:56:21.833]      // end while "1"
[12:56:21.833]    </control>
[12:56:21.833]    <control if="canReadPins" while="" timeout="0" info="">
[12:56:21.833]      // if-block "canReadPins"
[12:56:21.833]        // =>  TRUE
[12:56:21.833]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:56:21.833]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:56:21.835]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:56:21.835]        // while-condition  =>  FALSE
[12:56:21.835]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:56:21.835]      </control>
[12:56:21.838]      // end if-block "canReadPins"
[12:56:21.838]    </control>
[12:56:21.838]    <control if="!canReadPins" while="" timeout="0" info="">
[12:56:21.838]      // if-block "!canReadPins"
[12:56:21.838]        // =>  FALSE
[12:56:21.838]      // skip if-block "!canReadPins"
[12:56:21.838]    </control>
[12:56:21.838]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:56:21.838]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:56:21.838]        // =>  TRUE
[12:56:21.838]      <block atomic="false" info="">
[12:56:21.839]        WriteAP(0x00, 0x190008);
[12:56:21.840]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:56:21.840]        WriteAP(0xF0, 0x01);
[12:56:21.848]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:56:21.848]      </block>
[12:56:21.848]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:56:21.848]    </control>
[12:56:21.848]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:56:21.848]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:56:21.848]        // =>  FALSE
[12:56:21.848]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:56:21.848]    </control>
[12:56:21.848]    <block atomic="false" info="">
[12:56:21.848]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:56:21.851]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:56:21.851]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:56:21.851]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:56:21.856]      __ap = 0; //lets make sure we reset the access point selection
[12:56:21.856]        // -> [__ap <= 0x00000000]
[12:56:21.856]    </block>
[12:56:21.856]  </sequence>
[12:56:21.856]  
[12:56:21.880]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:56:21.880]  
[12:56:21.880]  <debugvars>
[12:56:21.880]    // Pre-defined
[12:56:21.880]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:56:21.880]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:56:21.880]    __dp=0x00000000
[12:56:21.884]    __ap=0x00000000
[12:56:21.884]    __traceout=0x00000000      (Trace Disabled)
[12:56:21.884]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:56:21.884]    __FlashAddr=0x00000000
[12:56:21.884]    __FlashLen=0x00000000
[12:56:21.884]    __FlashArg=0x00000000
[12:56:21.884]    __FlashOp=0x00000000
[12:56:21.884]    __Result=0x00000000
[12:56:21.884]  </debugvars>
[12:56:21.884]  
[12:56:21.884]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:56:21.884]    <block atomic="false" info="">
[12:56:21.884]      __var deviceID = 0;
[12:56:21.884]        // -> [deviceID <= 0x00000000]
[12:56:21.884]      __var version = 0;
[12:56:21.884]        // -> [version <= 0x00000000]
[12:56:21.884]      __var partNum = 0;
[12:56:21.884]        // -> [partNum <= 0x00000000]
[12:56:21.884]      __var manuf = 0;
[12:56:21.884]        // -> [manuf <= 0x00000000]
[12:56:21.884]      __var isMSPM0G1X0X_G3X0X = 0;
[12:56:21.884]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:56:21.884]      __var isProduction = 0;
[12:56:21.884]        // -> [isProduction <= 0x00000000]
[12:56:21.884]      __var continueId = 0;
[12:56:21.884]        // -> [continueId <= 0x00000000]
[12:56:21.884]      deviceID =   Read32(0x41C40004);
[12:56:21.892]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:56:21.896]        // -> [deviceID <= 0x2BB8802F]
[12:56:21.896]      version = deviceID >> 28;
[12:56:21.896]        // -> [version <= 0x00000002]
[12:56:21.896]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:56:21.896]        // -> [partNum <= 0x0000BB88]
[12:56:21.896]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:56:21.896]        // -> [manuf <= 0x00000017]
[12:56:21.896]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:56:21.896]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:56:21.896]      isProduction = (version > 0);
[12:56:21.896]        // -> [isProduction <= 0x00000001]
[12:56:21.896]    </block>
[12:56:21.898]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:56:21.898]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:56:21.898]        // =>  FALSE
[12:56:21.898]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:56:21.898]    </control>
[12:56:21.898]    <control if="continueId == 4" while="" timeout="0" info="">
[12:56:21.898]      // if-block "continueId == 4"
[12:56:21.898]        // =>  FALSE
[12:56:21.898]      // skip if-block "continueId == 4"
[12:56:21.898]    </control>
[12:56:21.899]    <control if="!isProduction" while="" timeout="0" info="">
[12:56:21.899]      // if-block "!isProduction"
[12:56:21.899]        // =>  FALSE
[12:56:21.899]      // skip if-block "!isProduction"
[12:56:21.899]    </control>
[12:56:21.899]  </sequence>
[12:56:21.899]  
[12:56:25.588]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:56:25.588]  
[12:56:25.596]  <debugvars>
[12:56:25.596]    // Pre-defined
[12:56:25.596]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:56:25.596]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:56:25.596]    __dp=0x00000000
[12:56:25.596]    __ap=0x00000000
[12:56:25.596]    __traceout=0x00000000      (Trace Disabled)
[12:56:25.596]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:56:25.598]    __FlashAddr=0x00000000
[12:56:25.598]    __FlashLen=0x00000000
[12:56:25.598]    __FlashArg=0x00000000
[12:56:25.598]    __FlashOp=0x00000000
[12:56:25.598]    __Result=0x00000000
[12:56:25.598]  </debugvars>
[12:56:25.598]  
[12:56:25.598]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:56:25.598]    <block atomic="false" info="">
[12:56:25.599]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:56:25.599]        // -> [isSWJ <= 0x00000001]
[12:56:25.599]      __var hasDormant = __protocol & 0x00020000;
[12:56:25.599]        // -> [hasDormant <= 0x00000000]
[12:56:25.599]      __var protType   = __protocol & 0x0000FFFF;
[12:56:25.599]        // -> [protType <= 0x00000002]
[12:56:25.599]    </block>
[12:56:25.599]    <control if="protType == 1" while="" timeout="0" info="">
[12:56:25.599]      // if-block "protType == 1"
[12:56:25.599]        // =>  FALSE
[12:56:25.599]      // skip if-block "protType == 1"
[12:56:25.599]    </control>
[12:56:25.599]    <control if="protType == 2" while="" timeout="0" info="">
[12:56:25.599]      // if-block "protType == 2"
[12:56:25.599]        // =>  TRUE
[12:56:25.599]      <control if="isSWJ" while="" timeout="0" info="">
[12:56:25.599]        // if-block "isSWJ"
[12:56:25.599]          // =>  TRUE
[12:56:25.599]        <control if="hasDormant" while="" timeout="0" info="">
[12:56:25.599]          // if-block "hasDormant"
[12:56:25.599]            // =>  FALSE
[12:56:25.599]          // skip if-block "hasDormant"
[12:56:25.599]        </control>
[12:56:25.599]        <control if="!hasDormant" while="" timeout="0" info="">
[12:56:25.599]          // if-block "!hasDormant"
[12:56:25.599]            // =>  TRUE
[12:56:25.599]          <block atomic="false" info="">
[12:56:25.599]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:56:25.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:56:25.603]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:56:25.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:56:25.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:56:25.606]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:56:25.608]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:56:25.609]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:56:25.609]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:56:25.611]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:56:25.611]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:56:25.611]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:56:25.611]          </block>
[12:56:25.611]          // end if-block "!hasDormant"
[12:56:25.611]        </control>
[12:56:25.611]        // end if-block "isSWJ"
[12:56:25.611]      </control>
[12:56:25.611]      <control if="!isSWJ" while="" timeout="0" info="">
[12:56:25.611]        // if-block "!isSWJ"
[12:56:25.611]          // =>  FALSE
[12:56:25.611]        // skip if-block "!isSWJ"
[12:56:25.611]      </control>
[12:56:25.615]      <block atomic="false" info="">
[12:56:25.615]        ReadDP(0x0);
[12:56:25.616]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:56:25.616]      </block>
[12:56:25.616]      // end if-block "protType == 2"
[12:56:25.616]    </control>
[12:56:25.616]  </sequence>
[12:56:25.616]  
[12:56:25.619]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:56:25.619]  
[12:56:25.619]  <debugvars>
[12:56:25.619]    // Pre-defined
[12:56:25.619]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:56:25.619]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:56:25.619]    __dp=0x00000000
[12:56:25.619]    __ap=0x00000000
[12:56:25.619]    __traceout=0x00000000      (Trace Disabled)
[12:56:25.619]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:56:25.619]    __FlashAddr=0x00000000
[12:56:25.619]    __FlashLen=0x00000000
[12:56:25.619]    __FlashArg=0x00000000
[12:56:25.619]    __FlashOp=0x00000000
[12:56:25.619]    __Result=0x00000000
[12:56:25.619]  </debugvars>
[12:56:25.619]  
[12:56:25.619]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:56:25.619]    <block atomic="false" info="">
[12:56:25.619]      __var SW_DP_ABORT       = 0x0;
[12:56:25.623]        // -> [SW_DP_ABORT <= 0x00000000]
[12:56:25.623]      __var DP_CTRL_STAT      = 0x4;
[12:56:25.623]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:56:25.623]      __var DP_SELECT         = 0x8;
[12:56:25.623]        // -> [DP_SELECT <= 0x00000008]
[12:56:25.623]      __var powered_down      = 0;
[12:56:25.623]        // -> [powered_down <= 0x00000000]
[12:56:25.623]      WriteDP(DP_SELECT, 0x00000000);
[12:56:25.625]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:56:25.625]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:56:25.628]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:56:25.628]        // -> [powered_down <= 0x00000001]
[12:56:25.628]    </block>
[12:56:25.628]    <control if="powered_down" while="" timeout="0" info="">
[12:56:25.629]      // if-block "powered_down"
[12:56:25.629]        // =>  TRUE
[12:56:25.629]      <block atomic="false" info="">
[12:56:25.629]        Message(0, "Debug/System power-up request sent");
[12:56:25.632]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:56:25.636]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:56:25.636]      </block>
[12:56:25.636]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:56:25.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:56:25.640]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:56:25.640]        // while-condition  =>  FALSE
[12:56:25.640]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:56:25.640]      </control>
[12:56:25.640]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:56:25.640]        // if-block "(__protocol & 0xFFFF) == 1"
[12:56:25.640]          // =>  FALSE
[12:56:25.640]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:56:25.640]      </control>
[12:56:25.640]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:56:25.640]        // if-block "(__protocol & 0xFFFF) == 2"
[12:56:25.640]          // =>  TRUE
[12:56:25.640]        <block atomic="false" info="">
[12:56:25.640]          Message(0, "executing SWD power up");
[12:56:25.645]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:56:25.647]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:56:25.647]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:56:25.649]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:56:25.649]        </block>
[12:56:25.649]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:56:25.650]      </control>
[12:56:25.650]      // end if-block "powered_down"
[12:56:25.650]    </control>
[12:56:25.650]    <block atomic="false" info="">
[12:56:25.650]      __var DEBUG_PORT_VAL    = 0;
[12:56:25.650]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:56:25.650]      __var ACCESS_POINT_VAL  = 0;
[12:56:25.650]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:56:25.650]      __ap = 1; 
[12:56:25.650]        // -> [__ap <= 0x00000001]
[12:56:25.650]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:56:25.658]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:56:25.658]      __ap = 4;
[12:56:25.659]        // -> [__ap <= 0x00000004]
[12:56:25.659]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:56:25.660]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:56:25.660]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:56:25.660]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:56:25.664]    </block>
[12:56:25.664]    <block atomic="false" info="">
[12:56:25.664]      __var nReset = 0x80;
[12:56:25.664]        // -> [nReset <= 0x00000080]
[12:56:25.664]      __var canReadPins = 0;
[12:56:25.664]        // -> [canReadPins <= 0x00000000]
[12:56:25.664]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:56:25.668]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:56:25.668]        // -> [canReadPins <= 0x00000001]
[12:56:25.668]    </block>
[12:56:25.668]    <control if="" while="1" timeout="200" info="">
[12:56:25.668]      // while "1"  (timeout="200")
[12:56:25.669]      // while-condition  =>  TRUE
[12:56:25.669]      // while "1"  (timeout="200")
[12:56:25.669]      // while-condition  =>  TRUE
[12:56:25.669]      // while "1"  (timeout="200")
[12:56:25.669]      // while-condition  =>  TRUE
[12:56:25.669]      // while "1"  (timeout="200")
[12:56:25.669]      // while-condition  =>  TRUE
[12:56:25.669]      // while "1"  (timeout="200")
[12:56:25.669]      // while-condition  =>  TRUE
[12:56:25.669]      // while "1"  (timeout="200")
[12:56:25.669]      // while-condition  =>  TRUE
[12:56:25.669]      // while "1"  (timeout="200")
[12:56:25.669]      // while-condition  =>  TRUE
[12:56:25.669]      // while "1"  (timeout="200")
[12:56:25.669]      // while-condition  =>  TRUE
[12:56:25.669]      // while "1"  (timeout="200")
[12:56:25.669]      // while-condition  =>  TRUE
[12:56:25.669]      // while "1"  (timeout="200")
[12:56:25.669]      // while-condition  =>  TRUE
[12:56:25.669]      // while "1"  (timeout="200")
[12:56:25.669]      // while-condition  =>  TRUE
[12:56:25.669]      // while "1"  (timeout="200")
[12:56:25.669]      // while-condition  =>  TRUE
[12:56:25.669]      // while "1"  (timeout="200")
[12:56:25.669]      // while-condition  =>  TRUE
[12:56:25.669]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.672]      // while "1"  (timeout="200")
[12:56:25.672]      // while-condition  =>  TRUE
[12:56:25.676]      // while "1"  (timeout="200")
[12:56:25.676]      // while  =>  TIMEOUT
[12:56:25.676]      // end while "1"
[12:56:25.676]    </control>
[12:56:25.676]    <control if="canReadPins" while="" timeout="0" info="">
[12:56:25.676]      // if-block "canReadPins"
[12:56:25.676]        // =>  TRUE
[12:56:25.676]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:56:25.676]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:56:25.678]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:56:25.678]        // while-condition  =>  FALSE
[12:56:25.678]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:56:25.678]      </control>
[12:56:25.678]      // end if-block "canReadPins"
[12:56:25.678]    </control>
[12:56:25.678]    <control if="!canReadPins" while="" timeout="0" info="">
[12:56:25.678]      // if-block "!canReadPins"
[12:56:25.678]        // =>  FALSE
[12:56:25.678]      // skip if-block "!canReadPins"
[12:56:25.679]    </control>
[12:56:25.679]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:56:25.679]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:56:25.679]        // =>  TRUE
[12:56:25.679]      <block atomic="false" info="">
[12:56:25.679]        WriteAP(0x00, 0x190008);
[12:56:25.680]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:56:25.680]        WriteAP(0xF0, 0x01);
[12:56:25.689]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:56:25.689]      </block>
[12:56:25.689]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:56:25.689]    </control>
[12:56:25.689]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:56:25.689]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:56:25.689]        // =>  FALSE
[12:56:25.689]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:56:25.692]    </control>
[12:56:25.692]    <block atomic="false" info="">
[12:56:25.692]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:56:25.698]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:56:25.698]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:56:25.699]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:56:25.700]      __ap = 0; //lets make sure we reset the access point selection
[12:56:25.700]        // -> [__ap <= 0x00000000]
[12:56:25.700]    </block>
[12:56:25.700]  </sequence>
[12:56:25.700]  
[12:56:25.740]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:56:25.740]  
[12:56:25.740]  <debugvars>
[12:56:25.740]    // Pre-defined
[12:56:25.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:56:25.740]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:56:25.740]    __dp=0x00000000
[12:56:25.740]    __ap=0x00000000
[12:56:25.740]    __traceout=0x00000000      (Trace Disabled)
[12:56:25.740]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:56:25.740]    __FlashAddr=0x00000000
[12:56:25.740]    __FlashLen=0x00000000
[12:56:25.740]    __FlashArg=0x00000000
[12:56:25.740]    __FlashOp=0x00000000
[12:56:25.740]    __Result=0x00000000
[12:56:25.740]  </debugvars>
[12:56:25.740]  
[12:56:25.740]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:56:25.740]    <block atomic="false" info="">
[12:56:25.740]      __var deviceID = 0;
[12:56:25.740]        // -> [deviceID <= 0x00000000]
[12:56:25.740]      __var version = 0;
[12:56:25.744]        // -> [version <= 0x00000000]
[12:56:25.744]      __var partNum = 0;
[12:56:25.744]        // -> [partNum <= 0x00000000]
[12:56:25.744]      __var manuf = 0;
[12:56:25.744]        // -> [manuf <= 0x00000000]
[12:56:25.744]      __var isMSPM0G1X0X_G3X0X = 0;
[12:56:25.744]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:56:25.744]      __var isProduction = 0;
[12:56:25.744]        // -> [isProduction <= 0x00000000]
[12:56:25.744]      __var continueId = 0;
[12:56:25.744]        // -> [continueId <= 0x00000000]
[12:56:25.744]      deviceID =   Read32(0x41C40004);
[12:56:25.752]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:56:25.752]        // -> [deviceID <= 0x2BB8802F]
[12:56:25.752]      version = deviceID >> 28;
[12:56:25.752]        // -> [version <= 0x00000002]
[12:56:25.752]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:56:25.753]        // -> [partNum <= 0x0000BB88]
[12:56:25.753]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:56:25.753]        // -> [manuf <= 0x00000017]
[12:56:25.753]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:56:25.753]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:56:25.753]      isProduction = (version > 0);
[12:56:25.753]        // -> [isProduction <= 0x00000001]
[12:56:25.753]    </block>
[12:56:25.753]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:56:25.753]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:56:25.753]        // =>  FALSE
[12:56:25.753]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:56:25.753]    </control>
[12:56:25.753]    <control if="continueId == 4" while="" timeout="0" info="">
[12:56:25.753]      // if-block "continueId == 4"
[12:56:25.753]        // =>  FALSE
[12:56:25.753]      // skip if-block "continueId == 4"
[12:56:25.753]    </control>
[12:56:25.753]    <control if="!isProduction" while="" timeout="0" info="">
[12:56:25.753]      // if-block "!isProduction"
[12:56:25.753]        // =>  FALSE
[12:56:25.753]      // skip if-block "!isProduction"
[12:56:25.753]    </control>
[12:56:25.756]  </sequence>
[12:56:25.756]  
[12:56:55.430]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:56:55.430]  
[12:56:55.441]  <debugvars>
[12:56:55.441]    // Pre-defined
[12:56:55.441]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:56:55.441]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:56:55.441]    __dp=0x00000000
[12:56:55.441]    __ap=0x00000000
[12:56:55.441]    __traceout=0x00000000      (Trace Disabled)
[12:56:55.441]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:56:55.441]    __FlashAddr=0x00000000
[12:56:55.441]    __FlashLen=0x00000000
[12:56:55.441]    __FlashArg=0x00000000
[12:56:55.441]    __FlashOp=0x00000000
[12:56:55.441]    __Result=0x00000000
[12:56:55.443]  </debugvars>
[12:56:55.443]  
[12:56:55.443]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:56:55.443]    <block atomic="false" info="">
[12:56:55.443]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:56:55.443]        // -> [isSWJ <= 0x00000001]
[12:56:55.443]      __var hasDormant = __protocol & 0x00020000;
[12:56:55.443]        // -> [hasDormant <= 0x00000000]
[12:56:55.443]      __var protType   = __protocol & 0x0000FFFF;
[12:56:55.444]        // -> [protType <= 0x00000002]
[12:56:55.444]    </block>
[12:56:55.444]    <control if="protType == 1" while="" timeout="0" info="">
[12:56:55.444]      // if-block "protType == 1"
[12:56:55.444]        // =>  FALSE
[12:56:55.444]      // skip if-block "protType == 1"
[12:56:55.444]    </control>
[12:56:55.444]    <control if="protType == 2" while="" timeout="0" info="">
[12:56:55.444]      // if-block "protType == 2"
[12:56:55.444]        // =>  TRUE
[12:56:55.444]      <control if="isSWJ" while="" timeout="0" info="">
[12:56:55.444]        // if-block "isSWJ"
[12:56:55.444]          // =>  TRUE
[12:56:55.444]        <control if="hasDormant" while="" timeout="0" info="">
[12:56:55.444]          // if-block "hasDormant"
[12:56:55.444]            // =>  FALSE
[12:56:55.444]          // skip if-block "hasDormant"
[12:56:55.444]        </control>
[12:56:55.445]        <control if="!hasDormant" while="" timeout="0" info="">
[12:56:55.445]          // if-block "!hasDormant"
[12:56:55.445]            // =>  TRUE
[12:56:55.445]          <block atomic="false" info="">
[12:56:55.445]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:56:55.448]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:56:55.448]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:56:55.451]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:56:55.451]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:56:55.453]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:56:55.453]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:56:55.454]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:56:55.454]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:56:55.456]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:56:55.458]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:56:55.459]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:56:55.459]          </block>
[12:56:55.460]          // end if-block "!hasDormant"
[12:56:55.460]        </control>
[12:56:55.460]        // end if-block "isSWJ"
[12:56:55.460]      </control>
[12:56:55.460]      <control if="!isSWJ" while="" timeout="0" info="">
[12:56:55.460]        // if-block "!isSWJ"
[12:56:55.461]          // =>  FALSE
[12:56:55.461]        // skip if-block "!isSWJ"
[12:56:55.461]      </control>
[12:56:55.461]      <block atomic="false" info="">
[12:56:55.461]        ReadDP(0x0);
[12:56:55.462]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:56:55.462]      </block>
[12:56:55.462]      // end if-block "protType == 2"
[12:56:55.462]    </control>
[12:56:55.462]  </sequence>
[12:56:55.462]  
[12:56:55.466]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:56:55.466]  
[12:56:55.466]  <debugvars>
[12:56:55.466]    // Pre-defined
[12:56:55.466]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:56:55.466]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:56:55.466]    __dp=0x00000000
[12:56:55.466]    __ap=0x00000000
[12:56:55.466]    __traceout=0x00000000      (Trace Disabled)
[12:56:55.466]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:56:55.466]    __FlashAddr=0x00000000
[12:56:55.466]    __FlashLen=0x00000000
[12:56:55.466]    __FlashArg=0x00000000
[12:56:55.466]    __FlashOp=0x00000000
[12:56:55.466]    __Result=0x00000000
[12:56:55.466]  </debugvars>
[12:56:55.468]  
[12:56:55.468]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:56:55.468]    <block atomic="false" info="">
[12:56:55.468]      __var SW_DP_ABORT       = 0x0;
[12:56:55.468]        // -> [SW_DP_ABORT <= 0x00000000]
[12:56:55.468]      __var DP_CTRL_STAT      = 0x4;
[12:56:55.468]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:56:55.469]      __var DP_SELECT         = 0x8;
[12:56:55.469]        // -> [DP_SELECT <= 0x00000008]
[12:56:55.469]      __var powered_down      = 0;
[12:56:55.469]        // -> [powered_down <= 0x00000000]
[12:56:55.469]      WriteDP(DP_SELECT, 0x00000000);
[12:56:55.473]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:56:55.473]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:56:55.475]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:56:55.475]        // -> [powered_down <= 0x00000001]
[12:56:55.475]    </block>
[12:56:55.475]    <control if="powered_down" while="" timeout="0" info="">
[12:56:55.475]      // if-block "powered_down"
[12:56:55.475]        // =>  TRUE
[12:56:55.475]      <block atomic="false" info="">
[12:56:55.475]        Message(0, "Debug/System power-up request sent");
[12:56:55.478]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:56:55.479]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:56:55.479]      </block>
[12:56:55.479]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:56:55.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:56:55.488]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:56:55.488]        // while-condition  =>  FALSE
[12:56:55.489]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:56:55.489]      </control>
[12:56:55.489]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:56:55.489]        // if-block "(__protocol & 0xFFFF) == 1"
[12:56:55.489]          // =>  FALSE
[12:56:55.489]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:56:55.489]      </control>
[12:56:55.489]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:56:55.489]        // if-block "(__protocol & 0xFFFF) == 2"
[12:56:55.489]          // =>  TRUE
[12:56:55.489]        <block atomic="false" info="">
[12:56:55.489]          Message(0, "executing SWD power up");
[12:56:55.491]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:56:55.491]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:56:55.491]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:56:55.495]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:56:55.495]        </block>
[12:56:55.495]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:56:55.495]      </control>
[12:56:55.495]      // end if-block "powered_down"
[12:56:55.495]    </control>
[12:56:55.495]    <block atomic="false" info="">
[12:56:55.495]      __var DEBUG_PORT_VAL    = 0;
[12:56:55.495]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:56:55.495]      __var ACCESS_POINT_VAL  = 0;
[12:56:55.497]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:56:55.497]      __ap = 1; 
[12:56:55.497]        // -> [__ap <= 0x00000001]
[12:56:55.497]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:56:55.509]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:56:55.509]      __ap = 4;
[12:56:55.509]        // -> [__ap <= 0x00000004]
[12:56:55.509]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:56:55.513]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:56:55.513]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:56:55.513]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:56:55.514]    </block>
[12:56:55.514]    <block atomic="false" info="">
[12:56:55.514]      __var nReset = 0x80;
[12:56:55.514]        // -> [nReset <= 0x00000080]
[12:56:55.514]      __var canReadPins = 0;
[12:56:55.514]        // -> [canReadPins <= 0x00000000]
[12:56:55.514]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:56:55.516]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:56:55.516]        // -> [canReadPins <= 0x00000001]
[12:56:55.516]    </block>
[12:56:55.516]    <control if="" while="1" timeout="200" info="">
[12:56:55.516]      // while "1"  (timeout="200")
[12:56:55.516]      // while-condition  =>  TRUE
[12:56:55.516]      // while "1"  (timeout="200")
[12:56:55.516]      // while-condition  =>  TRUE
[12:56:55.518]      // while "1"  (timeout="200")
[12:56:55.518]      // while-condition  =>  TRUE
[12:56:55.518]      // while "1"  (timeout="200")
[12:56:55.518]      // while-condition  =>  TRUE
[12:56:55.518]      // while "1"  (timeout="200")
[12:56:55.518]      // while-condition  =>  TRUE
[12:56:55.518]      // while "1"  (timeout="200")
[12:56:55.518]      // while-condition  =>  TRUE
[12:56:55.518]      // while "1"  (timeout="200")
[12:56:55.518]      // while-condition  =>  TRUE
[12:56:55.519]      // while "1"  (timeout="200")
[12:56:55.519]      // while-condition  =>  TRUE
[12:56:55.519]      // while "1"  (timeout="200")
[12:56:55.519]      // while-condition  =>  TRUE
[12:56:55.519]      // while "1"  (timeout="200")
[12:56:55.519]      // while-condition  =>  TRUE
[12:56:55.519]      // while "1"  (timeout="200")
[12:56:55.519]      // while-condition  =>  TRUE
[12:56:55.519]      // while "1"  (timeout="200")
[12:56:55.520]      // while-condition  =>  TRUE
[12:56:55.520]      // while "1"  (timeout="200")
[12:56:55.520]      // while  =>  TIMEOUT
[12:56:55.520]      // end while "1"
[12:56:55.520]    </control>
[12:56:55.520]    <control if="canReadPins" while="" timeout="0" info="">
[12:56:55.520]      // if-block "canReadPins"
[12:56:55.520]        // =>  TRUE
[12:56:55.520]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:56:55.520]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:56:55.522]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:56:55.522]        // while-condition  =>  FALSE
[12:56:55.522]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:56:55.522]      </control>
[12:56:55.522]      // end if-block "canReadPins"
[12:56:55.522]    </control>
[12:56:55.522]    <control if="!canReadPins" while="" timeout="0" info="">
[12:56:55.522]      // if-block "!canReadPins"
[12:56:55.522]        // =>  FALSE
[12:56:55.522]      // skip if-block "!canReadPins"
[12:56:55.522]    </control>
[12:56:55.522]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:56:55.522]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:56:55.522]        // =>  TRUE
[12:56:55.522]      <block atomic="false" info="">
[12:56:55.522]        WriteAP(0x00, 0x190008);
[12:56:55.530]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:56:55.530]        WriteAP(0xF0, 0x01);
[12:56:55.538]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:56:55.538]      </block>
[12:56:55.538]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:56:55.539]    </control>
[12:56:55.539]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:56:55.539]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:56:55.539]        // =>  FALSE
[12:56:55.539]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:56:55.539]    </control>
[12:56:55.539]    <block atomic="false" info="">
[12:56:55.539]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:56:55.542]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:56:55.542]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:56:55.542]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:56:55.544]      __ap = 0; //lets make sure we reset the access point selection
[12:56:55.544]        // -> [__ap <= 0x00000000]
[12:56:55.544]    </block>
[12:56:55.544]  </sequence>
[12:56:55.544]  
[12:56:55.571]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:56:55.571]  
[12:56:55.571]  <debugvars>
[12:56:55.571]    // Pre-defined
[12:56:55.571]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:56:55.571]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:56:55.571]    __dp=0x00000000
[12:56:55.573]    __ap=0x00000000
[12:56:55.573]    __traceout=0x00000000      (Trace Disabled)
[12:56:55.573]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:56:55.573]    __FlashAddr=0x00000000
[12:56:55.573]    __FlashLen=0x00000000
[12:56:55.573]    __FlashArg=0x00000000
[12:56:55.573]    __FlashOp=0x00000000
[12:56:55.573]    __Result=0x00000000
[12:56:55.573]  </debugvars>
[12:56:55.573]  
[12:56:55.573]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:56:55.573]    <block atomic="false" info="">
[12:56:55.573]      __var deviceID = 0;
[12:56:55.573]        // -> [deviceID <= 0x00000000]
[12:56:55.573]      __var version = 0;
[12:56:55.573]        // -> [version <= 0x00000000]
[12:56:55.574]      __var partNum = 0;
[12:56:55.574]        // -> [partNum <= 0x00000000]
[12:56:55.574]      __var manuf = 0;
[12:56:55.574]        // -> [manuf <= 0x00000000]
[12:56:55.574]      __var isMSPM0G1X0X_G3X0X = 0;
[12:56:55.574]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:56:55.574]      __var isProduction = 0;
[12:56:55.574]        // -> [isProduction <= 0x00000000]
[12:56:55.574]      __var continueId = 0;
[12:56:55.574]        // -> [continueId <= 0x00000000]
[12:56:55.574]      deviceID =   Read32(0x41C40004);
[12:56:55.591]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:56:55.591]        // -> [deviceID <= 0x2BB8802F]
[12:56:55.591]      version = deviceID >> 28;
[12:56:55.591]        // -> [version <= 0x00000002]
[12:56:55.591]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:56:55.591]        // -> [partNum <= 0x0000BB88]
[12:56:55.591]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:56:55.591]        // -> [manuf <= 0x00000017]
[12:56:55.591]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:56:55.591]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:56:55.595]      isProduction = (version > 0);
[12:56:55.595]        // -> [isProduction <= 0x00000001]
[12:56:55.595]    </block>
[12:56:55.595]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:56:55.595]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:56:55.595]        // =>  FALSE
[12:56:55.595]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:56:55.595]    </control>
[12:56:55.595]    <control if="continueId == 4" while="" timeout="0" info="">
[12:56:55.595]      // if-block "continueId == 4"
[12:56:55.595]        // =>  FALSE
[12:56:55.596]      // skip if-block "continueId == 4"
[12:56:55.596]    </control>
[12:56:55.596]    <control if="!isProduction" while="" timeout="0" info="">
[12:56:55.596]      // if-block "!isProduction"
[12:56:55.596]        // =>  FALSE
[12:56:55.596]      // skip if-block "!isProduction"
[12:56:55.596]    </control>
[12:56:55.596]  </sequence>
[12:56:55.596]  
[12:56:59.369]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:56:59.369]  
[12:56:59.369]  <debugvars>
[12:56:59.369]    // Pre-defined
[12:56:59.369]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:56:59.369]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:56:59.369]    __dp=0x00000000
[12:56:59.369]    __ap=0x00000000
[12:56:59.369]    __traceout=0x00000000      (Trace Disabled)
[12:56:59.369]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:56:59.369]    __FlashAddr=0x00000000
[12:56:59.372]    __FlashLen=0x00000000
[12:56:59.372]    __FlashArg=0x00000000
[12:56:59.372]    __FlashOp=0x00000000
[12:56:59.372]    __Result=0x00000000
[12:56:59.372]  </debugvars>
[12:56:59.372]  
[12:56:59.372]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:56:59.372]    <block atomic="false" info="">
[12:56:59.372]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:56:59.372]        // -> [isSWJ <= 0x00000001]
[12:56:59.372]      __var hasDormant = __protocol & 0x00020000;
[12:56:59.372]        // -> [hasDormant <= 0x00000000]
[12:56:59.372]      __var protType   = __protocol & 0x0000FFFF;
[12:56:59.372]        // -> [protType <= 0x00000002]
[12:56:59.372]    </block>
[12:56:59.372]    <control if="protType == 1" while="" timeout="0" info="">
[12:56:59.372]      // if-block "protType == 1"
[12:56:59.372]        // =>  FALSE
[12:56:59.372]      // skip if-block "protType == 1"
[12:56:59.372]    </control>
[12:56:59.372]    <control if="protType == 2" while="" timeout="0" info="">
[12:56:59.372]      // if-block "protType == 2"
[12:56:59.372]        // =>  TRUE
[12:56:59.372]      <control if="isSWJ" while="" timeout="0" info="">
[12:56:59.372]        // if-block "isSWJ"
[12:56:59.372]          // =>  TRUE
[12:56:59.372]        <control if="hasDormant" while="" timeout="0" info="">
[12:56:59.372]          // if-block "hasDormant"
[12:56:59.372]            // =>  FALSE
[12:56:59.372]          // skip if-block "hasDormant"
[12:56:59.372]        </control>
[12:56:59.372]        <control if="!hasDormant" while="" timeout="0" info="">
[12:56:59.372]          // if-block "!hasDormant"
[12:56:59.372]            // =>  TRUE
[12:56:59.372]          <block atomic="false" info="">
[12:56:59.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:56:59.376]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:56:59.376]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:56:59.378]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:56:59.378]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:56:59.380]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:56:59.380]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:56:59.380]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:56:59.380]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:56:59.389]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:56:59.389]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:56:59.389]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:56:59.390]          </block>
[12:56:59.390]          // end if-block "!hasDormant"
[12:56:59.390]        </control>
[12:56:59.390]        // end if-block "isSWJ"
[12:56:59.390]      </control>
[12:56:59.390]      <control if="!isSWJ" while="" timeout="0" info="">
[12:56:59.390]        // if-block "!isSWJ"
[12:56:59.390]          // =>  FALSE
[12:56:59.390]        // skip if-block "!isSWJ"
[12:56:59.390]      </control>
[12:56:59.390]      <block atomic="false" info="">
[12:56:59.390]        ReadDP(0x0);
[12:56:59.393]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:56:59.393]      </block>
[12:56:59.393]      // end if-block "protType == 2"
[12:56:59.393]    </control>
[12:56:59.393]  </sequence>
[12:56:59.393]  
[12:56:59.398]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:56:59.398]  
[12:56:59.398]  <debugvars>
[12:56:59.399]    // Pre-defined
[12:56:59.399]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:56:59.399]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:56:59.399]    __dp=0x00000000
[12:56:59.399]    __ap=0x00000000
[12:56:59.399]    __traceout=0x00000000      (Trace Disabled)
[12:56:59.399]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:56:59.399]    __FlashAddr=0x00000000
[12:56:59.399]    __FlashLen=0x00000000
[12:56:59.400]    __FlashArg=0x00000000
[12:56:59.400]    __FlashOp=0x00000000
[12:56:59.400]    __Result=0x00000000
[12:56:59.400]  </debugvars>
[12:56:59.400]  
[12:56:59.400]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:56:59.400]    <block atomic="false" info="">
[12:56:59.400]      __var SW_DP_ABORT       = 0x0;
[12:56:59.400]        // -> [SW_DP_ABORT <= 0x00000000]
[12:56:59.400]      __var DP_CTRL_STAT      = 0x4;
[12:56:59.400]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:56:59.400]      __var DP_SELECT         = 0x8;
[12:56:59.400]        // -> [DP_SELECT <= 0x00000008]
[12:56:59.400]      __var powered_down      = 0;
[12:56:59.400]        // -> [powered_down <= 0x00000000]
[12:56:59.400]      WriteDP(DP_SELECT, 0x00000000);
[12:56:59.402]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:56:59.402]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:56:59.404]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:56:59.404]        // -> [powered_down <= 0x00000001]
[12:56:59.404]    </block>
[12:56:59.404]    <control if="powered_down" while="" timeout="0" info="">
[12:56:59.404]      // if-block "powered_down"
[12:56:59.404]        // =>  TRUE
[12:56:59.404]      <block atomic="false" info="">
[12:56:59.404]        Message(0, "Debug/System power-up request sent");
[12:56:59.409]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:56:59.410]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:56:59.410]      </block>
[12:56:59.410]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:56:59.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:56:59.414]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:56:59.414]        // while-condition  =>  FALSE
[12:56:59.414]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:56:59.414]      </control>
[12:56:59.416]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:56:59.416]        // if-block "(__protocol & 0xFFFF) == 1"
[12:56:59.416]          // =>  FALSE
[12:56:59.416]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:56:59.416]      </control>
[12:56:59.416]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:56:59.416]        // if-block "(__protocol & 0xFFFF) == 2"
[12:56:59.416]          // =>  TRUE
[12:56:59.416]        <block atomic="false" info="">
[12:56:59.416]          Message(0, "executing SWD power up");
[12:56:59.416]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:56:59.420]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:56:59.420]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:56:59.422]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:56:59.422]        </block>
[12:56:59.422]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:56:59.422]      </control>
[12:56:59.422]      // end if-block "powered_down"
[12:56:59.422]    </control>
[12:56:59.422]    <block atomic="false" info="">
[12:56:59.422]      __var DEBUG_PORT_VAL    = 0;
[12:56:59.422]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:56:59.422]      __var ACCESS_POINT_VAL  = 0;
[12:56:59.422]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:56:59.422]      __ap = 1; 
[12:56:59.422]        // -> [__ap <= 0x00000001]
[12:56:59.422]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:56:59.429]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:56:59.429]      __ap = 4;
[12:56:59.429]        // -> [__ap <= 0x00000004]
[12:56:59.429]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:56:59.435]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:56:59.435]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:56:59.435]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:56:59.436]    </block>
[12:56:59.436]    <block atomic="false" info="">
[12:56:59.436]      __var nReset = 0x80;
[12:56:59.436]        // -> [nReset <= 0x00000080]
[12:56:59.436]      __var canReadPins = 0;
[12:56:59.436]        // -> [canReadPins <= 0x00000000]
[12:56:59.436]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:56:59.439]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:56:59.439]        // -> [canReadPins <= 0x00000001]
[12:56:59.439]    </block>
[12:56:59.439]    <control if="" while="1" timeout="200" info="">
[12:56:59.439]      // while "1"  (timeout="200")
[12:56:59.439]      // while-condition  =>  TRUE
[12:56:59.439]      // while "1"  (timeout="200")
[12:56:59.439]      // while-condition  =>  TRUE
[12:56:59.439]      // while "1"  (timeout="200")
[12:56:59.439]      // while-condition  =>  TRUE
[12:56:59.439]      // while "1"  (timeout="200")
[12:56:59.439]      // while-condition  =>  TRUE
[12:56:59.439]      // while "1"  (timeout="200")
[12:56:59.439]      // while-condition  =>  TRUE
[12:56:59.439]      // while "1"  (timeout="200")
[12:56:59.439]      // while-condition  =>  TRUE
[12:56:59.439]      // while "1"  (timeout="200")
[12:56:59.439]      // while-condition  =>  TRUE
[12:56:59.441]      // while "1"  (timeout="200")
[12:56:59.441]      // while-condition  =>  TRUE
[12:56:59.441]      // while "1"  (timeout="200")
[12:56:59.441]      // while-condition  =>  TRUE
[12:56:59.441]      // while "1"  (timeout="200")
[12:56:59.441]      // while-condition  =>  TRUE
[12:56:59.441]      // while "1"  (timeout="200")
[12:56:59.441]      // while-condition  =>  TRUE
[12:56:59.441]      // while "1"  (timeout="200")
[12:56:59.441]      // while-condition  =>  TRUE
[12:56:59.441]      // while "1"  (timeout="200")
[12:56:59.441]      // while-condition  =>  TRUE
[12:56:59.442]      // while "1"  (timeout="200")
[12:56:59.442]      // while  =>  TIMEOUT
[12:56:59.442]      // end while "1"
[12:56:59.442]    </control>
[12:56:59.442]    <control if="canReadPins" while="" timeout="0" info="">
[12:56:59.442]      // if-block "canReadPins"
[12:56:59.442]        // =>  TRUE
[12:56:59.442]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:56:59.442]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:56:59.445]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:56:59.445]        // while-condition  =>  FALSE
[12:56:59.445]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:56:59.448]      </control>
[12:56:59.448]      // end if-block "canReadPins"
[12:56:59.448]    </control>
[12:56:59.448]    <control if="!canReadPins" while="" timeout="0" info="">
[12:56:59.448]      // if-block "!canReadPins"
[12:56:59.448]        // =>  FALSE
[12:56:59.448]      // skip if-block "!canReadPins"
[12:56:59.449]    </control>
[12:56:59.449]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:56:59.449]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:56:59.449]        // =>  TRUE
[12:56:59.449]      <block atomic="false" info="">
[12:56:59.449]        WriteAP(0x00, 0x190008);
[12:56:59.458]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:56:59.458]        WriteAP(0xF0, 0x01);
[12:56:59.462]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:56:59.462]      </block>
[12:56:59.462]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:56:59.462]    </control>
[12:56:59.462]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:56:59.462]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:56:59.462]        // =>  FALSE
[12:56:59.462]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:56:59.462]    </control>
[12:56:59.462]    <block atomic="false" info="">
[12:56:59.462]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:56:59.465]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:56:59.465]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:56:59.465]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:56:59.468]      __ap = 0; //lets make sure we reset the access point selection
[12:56:59.468]        // -> [__ap <= 0x00000000]
[12:56:59.468]    </block>
[12:56:59.468]  </sequence>
[12:56:59.468]  
[12:56:59.494]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:56:59.494]  
[12:56:59.494]  <debugvars>
[12:56:59.494]    // Pre-defined
[12:56:59.494]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:56:59.494]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:56:59.494]    __dp=0x00000000
[12:56:59.494]    __ap=0x00000000
[12:56:59.498]    __traceout=0x00000000      (Trace Disabled)
[12:56:59.498]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:56:59.498]    __FlashAddr=0x00000000
[12:56:59.498]    __FlashLen=0x00000000
[12:56:59.498]    __FlashArg=0x00000000
[12:56:59.498]    __FlashOp=0x00000000
[12:56:59.499]    __Result=0x00000000
[12:56:59.499]  </debugvars>
[12:56:59.499]  
[12:56:59.499]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:56:59.499]    <block atomic="false" info="">
[12:56:59.499]      __var deviceID = 0;
[12:56:59.499]        // -> [deviceID <= 0x00000000]
[12:56:59.499]      __var version = 0;
[12:56:59.499]        // -> [version <= 0x00000000]
[12:56:59.500]      __var partNum = 0;
[12:56:59.500]        // -> [partNum <= 0x00000000]
[12:56:59.500]      __var manuf = 0;
[12:56:59.500]        // -> [manuf <= 0x00000000]
[12:56:59.500]      __var isMSPM0G1X0X_G3X0X = 0;
[12:56:59.500]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:56:59.500]      __var isProduction = 0;
[12:56:59.500]        // -> [isProduction <= 0x00000000]
[12:56:59.500]      __var continueId = 0;
[12:56:59.500]        // -> [continueId <= 0x00000000]
[12:56:59.500]      deviceID =   Read32(0x41C40004);
[12:56:59.506]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:56:59.506]        // -> [deviceID <= 0x2BB8802F]
[12:56:59.506]      version = deviceID >> 28;
[12:56:59.506]        // -> [version <= 0x00000002]
[12:56:59.506]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:56:59.506]        // -> [partNum <= 0x0000BB88]
[12:56:59.506]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:56:59.508]        // -> [manuf <= 0x00000017]
[12:56:59.508]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:56:59.508]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:56:59.508]      isProduction = (version > 0);
[12:56:59.508]        // -> [isProduction <= 0x00000001]
[12:56:59.508]    </block>
[12:56:59.508]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:56:59.508]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:56:59.508]        // =>  FALSE
[12:56:59.508]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:56:59.508]    </control>
[12:56:59.508]    <control if="continueId == 4" while="" timeout="0" info="">
[12:56:59.509]      // if-block "continueId == 4"
[12:56:59.509]        // =>  FALSE
[12:56:59.509]      // skip if-block "continueId == 4"
[12:56:59.509]    </control>
[12:56:59.509]    <control if="!isProduction" while="" timeout="0" info="">
[12:56:59.509]      // if-block "!isProduction"
[12:56:59.509]        // =>  FALSE
[12:56:59.509]      // skip if-block "!isProduction"
[12:56:59.509]    </control>
[12:56:59.509]  </sequence>
[12:56:59.509]  
[12:57:38.468]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:57:38.468]  
[12:57:38.468]  <debugvars>
[12:57:38.468]    // Pre-defined
[12:57:38.468]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:57:38.468]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:57:38.468]    __dp=0x00000000
[12:57:38.468]    __ap=0x00000000
[12:57:38.468]    __traceout=0x00000000      (Trace Disabled)
[12:57:38.468]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:57:38.468]    __FlashAddr=0x00000000
[12:57:38.468]    __FlashLen=0x00000000
[12:57:38.468]    __FlashArg=0x00000000
[12:57:38.468]    __FlashOp=0x00000000
[12:57:38.468]    __Result=0x00000000
[12:57:38.468]  </debugvars>
[12:57:38.470]  
[12:57:38.470]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:57:38.470]    <block atomic="false" info="">
[12:57:38.470]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:57:38.470]        // -> [isSWJ <= 0x00000001]
[12:57:38.470]      __var hasDormant = __protocol & 0x00020000;
[12:57:38.470]        // -> [hasDormant <= 0x00000000]
[12:57:38.470]      __var protType   = __protocol & 0x0000FFFF;
[12:57:38.470]        // -> [protType <= 0x00000002]
[12:57:38.471]    </block>
[12:57:38.471]    <control if="protType == 1" while="" timeout="0" info="">
[12:57:38.471]      // if-block "protType == 1"
[12:57:38.471]        // =>  FALSE
[12:57:38.471]      // skip if-block "protType == 1"
[12:57:38.471]    </control>
[12:57:38.471]    <control if="protType == 2" while="" timeout="0" info="">
[12:57:38.471]      // if-block "protType == 2"
[12:57:38.471]        // =>  TRUE
[12:57:38.471]      <control if="isSWJ" while="" timeout="0" info="">
[12:57:38.471]        // if-block "isSWJ"
[12:57:38.471]          // =>  TRUE
[12:57:38.471]        <control if="hasDormant" while="" timeout="0" info="">
[12:57:38.471]          // if-block "hasDormant"
[12:57:38.471]            // =>  FALSE
[12:57:38.471]          // skip if-block "hasDormant"
[12:57:38.471]        </control>
[12:57:38.473]        <control if="!hasDormant" while="" timeout="0" info="">
[12:57:38.473]          // if-block "!hasDormant"
[12:57:38.473]            // =>  TRUE
[12:57:38.473]          <block atomic="false" info="">
[12:57:38.473]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:57:38.475]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:57:38.475]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:57:38.484]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:57:38.484]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:57:38.485]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:57:38.485]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:57:38.487]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:57:38.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:57:38.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:57:38.488]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:57:38.490]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:57:38.490]          </block>
[12:57:38.490]          // end if-block "!hasDormant"
[12:57:38.490]        </control>
[12:57:38.490]        // end if-block "isSWJ"
[12:57:38.490]      </control>
[12:57:38.490]      <control if="!isSWJ" while="" timeout="0" info="">
[12:57:38.490]        // if-block "!isSWJ"
[12:57:38.490]          // =>  FALSE
[12:57:38.490]        // skip if-block "!isSWJ"
[12:57:38.490]      </control>
[12:57:38.490]      <block atomic="false" info="">
[12:57:38.490]        ReadDP(0x0);
[12:57:38.493]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:57:38.494]      </block>
[12:57:38.494]      // end if-block "protType == 2"
[12:57:38.494]    </control>
[12:57:38.494]  </sequence>
[12:57:38.494]  
[12:57:38.496]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:57:38.496]  
[12:57:38.496]  <debugvars>
[12:57:38.496]    // Pre-defined
[12:57:38.496]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:57:38.496]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:57:38.496]    __dp=0x00000000
[12:57:38.496]    __ap=0x00000000
[12:57:38.496]    __traceout=0x00000000      (Trace Disabled)
[12:57:38.496]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:57:38.496]    __FlashAddr=0x00000000
[12:57:38.498]    __FlashLen=0x00000000
[12:57:38.498]    __FlashArg=0x00000000
[12:57:38.498]    __FlashOp=0x00000000
[12:57:38.498]    __Result=0x00000000
[12:57:38.498]  </debugvars>
[12:57:38.498]  
[12:57:38.498]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:57:38.498]    <block atomic="false" info="">
[12:57:38.498]      __var SW_DP_ABORT       = 0x0;
[12:57:38.498]        // -> [SW_DP_ABORT <= 0x00000000]
[12:57:38.498]      __var DP_CTRL_STAT      = 0x4;
[12:57:38.498]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:57:38.498]      __var DP_SELECT         = 0x8;
[12:57:38.498]        // -> [DP_SELECT <= 0x00000008]
[12:57:38.498]      __var powered_down      = 0;
[12:57:38.498]        // -> [powered_down <= 0x00000000]
[12:57:38.498]      WriteDP(DP_SELECT, 0x00000000);
[12:57:38.500]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:57:38.500]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:57:38.505]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:57:38.505]        // -> [powered_down <= 0x00000001]
[12:57:38.505]    </block>
[12:57:38.505]    <control if="powered_down" while="" timeout="0" info="">
[12:57:38.505]      // if-block "powered_down"
[12:57:38.506]        // =>  TRUE
[12:57:38.506]      <block atomic="false" info="">
[12:57:38.506]        Message(0, "Debug/System power-up request sent");
[12:57:38.508]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:57:38.510]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:57:38.510]      </block>
[12:57:38.510]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:57:38.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:57:38.516]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:57:38.516]        // while-condition  =>  FALSE
[12:57:38.516]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:57:38.516]      </control>
[12:57:38.516]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:57:38.516]        // if-block "(__protocol & 0xFFFF) == 1"
[12:57:38.516]          // =>  FALSE
[12:57:38.516]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:57:38.516]      </control>
[12:57:38.516]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:57:38.516]        // if-block "(__protocol & 0xFFFF) == 2"
[12:57:38.518]          // =>  TRUE
[12:57:38.518]        <block atomic="false" info="">
[12:57:38.518]          Message(0, "executing SWD power up");
[12:57:38.519]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:57:38.519]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:57:38.519]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:57:38.523]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:57:38.523]        </block>
[12:57:38.523]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:57:38.524]      </control>
[12:57:38.524]      // end if-block "powered_down"
[12:57:38.524]    </control>
[12:57:38.524]    <block atomic="false" info="">
[12:57:38.524]      __var DEBUG_PORT_VAL    = 0;
[12:57:38.524]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:57:38.524]      __var ACCESS_POINT_VAL  = 0;
[12:57:38.524]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:57:38.524]      __ap = 1; 
[12:57:38.524]        // -> [__ap <= 0x00000001]
[12:57:38.524]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:57:38.531]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:57:38.531]      __ap = 4;
[12:57:38.531]        // -> [__ap <= 0x00000004]
[12:57:38.531]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:57:38.535]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:57:38.535]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:57:38.535]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:57:38.537]    </block>
[12:57:38.537]    <block atomic="false" info="">
[12:57:38.537]      __var nReset = 0x80;
[12:57:38.537]        // -> [nReset <= 0x00000080]
[12:57:38.537]      __var canReadPins = 0;
[12:57:38.537]        // -> [canReadPins <= 0x00000000]
[12:57:38.537]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:57:38.538]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:57:38.538]        // -> [canReadPins <= 0x00000001]
[12:57:38.538]    </block>
[12:57:38.538]    <control if="" while="1" timeout="200" info="">
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.538]      // while "1"  (timeout="200")
[12:57:38.538]      // while-condition  =>  TRUE
[12:57:38.542]      // while "1"  (timeout="200")
[12:57:38.543]      // while-condition  =>  TRUE
[12:57:38.543]      // while "1"  (timeout="200")
[12:57:38.543]      // while-condition  =>  TRUE
[12:57:38.543]      // while "1"  (timeout="200")
[12:57:38.543]      // while-condition  =>  TRUE
[12:57:38.543]      // while "1"  (timeout="200")
[12:57:38.543]      // while-condition  =>  TRUE
[12:57:38.543]      // while "1"  (timeout="200")
[12:57:38.543]      // while-condition  =>  TRUE
[12:57:38.543]      // while "1"  (timeout="200")
[12:57:38.543]      // while-condition  =>  TRUE
[12:57:38.543]      // while "1"  (timeout="200")
[12:57:38.544]      // while-condition  =>  TRUE
[12:57:38.544]      // while "1"  (timeout="200")
[12:57:38.544]      // while-condition  =>  TRUE
[12:57:38.544]      // while "1"  (timeout="200")
[12:57:38.544]      // while-condition  =>  TRUE
[12:57:38.544]      // while "1"  (timeout="200")
[12:57:38.544]      // while-condition  =>  TRUE
[12:57:38.544]      // while "1"  (timeout="200")
[12:57:38.544]      // while-condition  =>  TRUE
[12:57:38.544]      // while "1"  (timeout="200")
[12:57:38.544]      // while-condition  =>  TRUE
[12:57:38.544]      // while "1"  (timeout="200")
[12:57:38.545]      // while-condition  =>  TRUE
[12:57:38.545]      // while "1"  (timeout="200")
[12:57:38.545]      // while-condition  =>  TRUE
[12:57:38.545]      // while "1"  (timeout="200")
[12:57:38.545]      // while-condition  =>  TRUE
[12:57:38.545]      // while "1"  (timeout="200")
[12:57:38.545]      // while-condition  =>  TRUE
[12:57:38.545]      // while "1"  (timeout="200")
[12:57:38.545]      // while-condition  =>  TRUE
[12:57:38.545]      // while "1"  (timeout="200")
[12:57:38.545]      // while-condition  =>  TRUE
[12:57:38.547]      // while "1"  (timeout="200")
[12:57:38.547]      // while-condition  =>  TRUE
[12:57:38.547]      // while "1"  (timeout="200")
[12:57:38.547]      // while-condition  =>  TRUE
[12:57:38.547]      // while "1"  (timeout="200")
[12:57:38.547]      // while-condition  =>  TRUE
[12:57:38.547]      // while "1"  (timeout="200")
[12:57:38.547]      // while-condition  =>  TRUE
[12:57:38.547]      // while "1"  (timeout="200")
[12:57:38.547]      // while-condition  =>  TRUE
[12:57:38.547]      // while "1"  (timeout="200")
[12:57:38.547]      // while-condition  =>  TRUE
[12:57:38.547]      // while "1"  (timeout="200")
[12:57:38.547]      // while-condition  =>  TRUE
[12:57:38.547]      // while "1"  (timeout="200")
[12:57:38.547]      // while-condition  =>  TRUE
[12:57:38.547]      // while "1"  (timeout="200")
[12:57:38.548]      // while-condition  =>  TRUE
[12:57:38.548]      // while "1"  (timeout="200")
[12:57:38.548]      // while-condition  =>  TRUE
[12:57:38.548]      // while "1"  (timeout="200")
[12:57:38.548]      // while-condition  =>  TRUE
[12:57:38.548]      // while "1"  (timeout="200")
[12:57:38.548]      // while-condition  =>  TRUE
[12:57:38.548]      // while "1"  (timeout="200")
[12:57:38.548]      // while-condition  =>  TRUE
[12:57:38.548]      // while "1"  (timeout="200")
[12:57:38.548]      // while-condition  =>  TRUE
[12:57:38.548]      // while "1"  (timeout="200")
[12:57:38.549]      // while-condition  =>  TRUE
[12:57:38.549]      // while "1"  (timeout="200")
[12:57:38.549]      // while-condition  =>  TRUE
[12:57:38.549]      // while "1"  (timeout="200")
[12:57:38.549]      // while-condition  =>  TRUE
[12:57:38.549]      // while "1"  (timeout="200")
[12:57:38.549]      // while-condition  =>  TRUE
[12:57:38.549]      // while "1"  (timeout="200")
[12:57:38.549]      // while-condition  =>  TRUE
[12:57:38.549]      // while "1"  (timeout="200")
[12:57:38.549]      // while-condition  =>  TRUE
[12:57:38.549]      // while "1"  (timeout="200")
[12:57:38.549]      // while-condition  =>  TRUE
[12:57:38.549]      // while "1"  (timeout="200")
[12:57:38.549]      // while-condition  =>  TRUE
[12:57:38.549]      // while "1"  (timeout="200")
[12:57:38.551]      // while-condition  =>  TRUE
[12:57:38.551]      // while "1"  (timeout="200")
[12:57:38.551]      // while  =>  TIMEOUT
[12:57:38.551]      // end while "1"
[12:57:38.551]    </control>
[12:57:38.551]    <control if="canReadPins" while="" timeout="0" info="">
[12:57:38.551]      // if-block "canReadPins"
[12:57:38.551]        // =>  TRUE
[12:57:38.551]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:57:38.551]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:57:38.553]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:57:38.553]        // while-condition  =>  FALSE
[12:57:38.553]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:57:38.553]      </control>
[12:57:38.553]      // end if-block "canReadPins"
[12:57:38.553]    </control>
[12:57:38.555]    <control if="!canReadPins" while="" timeout="0" info="">
[12:57:38.555]      // if-block "!canReadPins"
[12:57:38.555]        // =>  FALSE
[12:57:38.555]      // skip if-block "!canReadPins"
[12:57:38.555]    </control>
[12:57:38.555]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:57:38.555]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:57:38.555]        // =>  TRUE
[12:57:38.555]      <block atomic="false" info="">
[12:57:38.555]        WriteAP(0x00, 0x190008);
[12:57:38.563]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:57:38.563]        WriteAP(0xF0, 0x01);
[12:57:38.567]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:57:38.567]      </block>
[12:57:38.567]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:57:38.567]    </control>
[12:57:38.567]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:57:38.567]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:57:38.567]        // =>  FALSE
[12:57:38.567]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:57:38.567]    </control>
[12:57:38.567]    <block atomic="false" info="">
[12:57:38.568]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:57:38.570]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:57:38.570]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:57:38.570]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:57:38.573]      __ap = 0; //lets make sure we reset the access point selection
[12:57:38.573]        // -> [__ap <= 0x00000000]
[12:57:38.573]    </block>
[12:57:38.573]  </sequence>
[12:57:38.575]  
[12:57:38.602]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:57:38.602]  
[12:57:38.604]  <debugvars>
[12:57:38.604]    // Pre-defined
[12:57:38.604]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:57:38.604]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:57:38.604]    __dp=0x00000000
[12:57:38.604]    __ap=0x00000000
[12:57:38.604]    __traceout=0x00000000      (Trace Disabled)
[12:57:38.604]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:57:38.604]    __FlashAddr=0x00000000
[12:57:38.605]    __FlashLen=0x00000000
[12:57:38.605]    __FlashArg=0x00000000
[12:57:38.605]    __FlashOp=0x00000000
[12:57:38.605]    __Result=0x00000000
[12:57:38.605]  </debugvars>
[12:57:38.605]  
[12:57:38.605]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:57:38.605]    <block atomic="false" info="">
[12:57:38.605]      __var deviceID = 0;
[12:57:38.605]        // -> [deviceID <= 0x00000000]
[12:57:38.605]      __var version = 0;
[12:57:38.605]        // -> [version <= 0x00000000]
[12:57:38.605]      __var partNum = 0;
[12:57:38.605]        // -> [partNum <= 0x00000000]
[12:57:38.605]      __var manuf = 0;
[12:57:38.605]        // -> [manuf <= 0x00000000]
[12:57:38.605]      __var isMSPM0G1X0X_G3X0X = 0;
[12:57:38.605]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:57:38.605]      __var isProduction = 0;
[12:57:38.605]        // -> [isProduction <= 0x00000000]
[12:57:38.605]      __var continueId = 0;
[12:57:38.605]        // -> [continueId <= 0x00000000]
[12:57:38.605]      deviceID =   Read32(0x41C40004);
[12:57:38.612]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:57:38.614]        // -> [deviceID <= 0x2BB8802F]
[12:57:38.614]      version = deviceID >> 28;
[12:57:38.614]        // -> [version <= 0x00000002]
[12:57:38.614]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:57:38.614]        // -> [partNum <= 0x0000BB88]
[12:57:38.614]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:57:38.615]        // -> [manuf <= 0x00000017]
[12:57:38.615]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:57:38.615]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:57:38.615]      isProduction = (version > 0);
[12:57:38.615]        // -> [isProduction <= 0x00000001]
[12:57:38.616]    </block>
[12:57:38.616]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:57:38.616]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:57:38.616]        // =>  FALSE
[12:57:38.616]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:57:38.616]    </control>
[12:57:38.616]    <control if="continueId == 4" while="" timeout="0" info="">
[12:57:38.616]      // if-block "continueId == 4"
[12:57:38.616]        // =>  FALSE
[12:57:38.616]      // skip if-block "continueId == 4"
[12:57:38.616]    </control>
[12:57:38.616]    <control if="!isProduction" while="" timeout="0" info="">
[12:57:38.616]      // if-block "!isProduction"
[12:57:38.616]        // =>  FALSE
[12:57:38.616]      // skip if-block "!isProduction"
[12:57:38.616]    </control>
[12:57:38.616]  </sequence>
[12:57:38.616]  
[12:57:42.584]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:57:42.584]  
[12:57:42.593]  <debugvars>
[12:57:42.593]    // Pre-defined
[12:57:42.593]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:57:42.593]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:57:42.593]    __dp=0x00000000
[12:57:42.593]    __ap=0x00000000
[12:57:42.593]    __traceout=0x00000000      (Trace Disabled)
[12:57:42.593]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:57:42.593]    __FlashAddr=0x00000000
[12:57:42.593]    __FlashLen=0x00000000
[12:57:42.594]    __FlashArg=0x00000000
[12:57:42.594]    __FlashOp=0x00000000
[12:57:42.594]    __Result=0x00000000
[12:57:42.594]  </debugvars>
[12:57:42.594]  
[12:57:42.594]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:57:42.594]    <block atomic="false" info="">
[12:57:42.594]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:57:42.594]        // -> [isSWJ <= 0x00000001]
[12:57:42.594]      __var hasDormant = __protocol & 0x00020000;
[12:57:42.594]        // -> [hasDormant <= 0x00000000]
[12:57:42.594]      __var protType   = __protocol & 0x0000FFFF;
[12:57:42.594]        // -> [protType <= 0x00000002]
[12:57:42.594]    </block>
[12:57:42.594]    <control if="protType == 1" while="" timeout="0" info="">
[12:57:42.595]      // if-block "protType == 1"
[12:57:42.595]        // =>  FALSE
[12:57:42.595]      // skip if-block "protType == 1"
[12:57:42.595]    </control>
[12:57:42.595]    <control if="protType == 2" while="" timeout="0" info="">
[12:57:42.595]      // if-block "protType == 2"
[12:57:42.595]        // =>  TRUE
[12:57:42.595]      <control if="isSWJ" while="" timeout="0" info="">
[12:57:42.595]        // if-block "isSWJ"
[12:57:42.595]          // =>  TRUE
[12:57:42.595]        <control if="hasDormant" while="" timeout="0" info="">
[12:57:42.595]          // if-block "hasDormant"
[12:57:42.595]            // =>  FALSE
[12:57:42.595]          // skip if-block "hasDormant"
[12:57:42.595]        </control>
[12:57:42.595]        <control if="!hasDormant" while="" timeout="0" info="">
[12:57:42.595]          // if-block "!hasDormant"
[12:57:42.595]            // =>  TRUE
[12:57:42.595]          <block atomic="false" info="">
[12:57:42.597]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:57:42.600]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:57:42.600]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:57:42.600]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:57:42.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:57:42.606]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:57:42.606]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:57:42.607]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:57:42.607]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:57:42.607]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:57:42.607]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:57:42.607]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:57:42.607]          </block>
[12:57:42.607]          // end if-block "!hasDormant"
[12:57:42.610]        </control>
[12:57:42.610]        // end if-block "isSWJ"
[12:57:42.610]      </control>
[12:57:42.610]      <control if="!isSWJ" while="" timeout="0" info="">
[12:57:42.610]        // if-block "!isSWJ"
[12:57:42.610]          // =>  FALSE
[12:57:42.610]        // skip if-block "!isSWJ"
[12:57:42.610]      </control>
[12:57:42.610]      <block atomic="false" info="">
[12:57:42.610]        ReadDP(0x0);
[12:57:42.614]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:57:42.614]      </block>
[12:57:42.614]      // end if-block "protType == 2"
[12:57:42.615]    </control>
[12:57:42.615]  </sequence>
[12:57:42.615]  
[12:57:42.615]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:57:42.615]  
[12:57:42.615]  <debugvars>
[12:57:42.615]    // Pre-defined
[12:57:42.618]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:57:42.618]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:57:42.618]    __dp=0x00000000
[12:57:42.618]    __ap=0x00000000
[12:57:42.618]    __traceout=0x00000000      (Trace Disabled)
[12:57:42.618]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:57:42.618]    __FlashAddr=0x00000000
[12:57:42.618]    __FlashLen=0x00000000
[12:57:42.618]    __FlashArg=0x00000000
[12:57:42.618]    __FlashOp=0x00000000
[12:57:42.618]    __Result=0x00000000
[12:57:42.618]  </debugvars>
[12:57:42.618]  
[12:57:42.618]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:57:42.618]    <block atomic="false" info="">
[12:57:42.618]      __var SW_DP_ABORT       = 0x0;
[12:57:42.618]        // -> [SW_DP_ABORT <= 0x00000000]
[12:57:42.618]      __var DP_CTRL_STAT      = 0x4;
[12:57:42.618]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:57:42.618]      __var DP_SELECT         = 0x8;
[12:57:42.618]        // -> [DP_SELECT <= 0x00000008]
[12:57:42.618]      __var powered_down      = 0;
[12:57:42.618]        // -> [powered_down <= 0x00000000]
[12:57:42.618]      WriteDP(DP_SELECT, 0x00000000);
[12:57:42.623]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:57:42.623]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:57:42.628]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:57:42.628]        // -> [powered_down <= 0x00000001]
[12:57:42.628]    </block>
[12:57:42.628]    <control if="powered_down" while="" timeout="0" info="">
[12:57:42.628]      // if-block "powered_down"
[12:57:42.628]        // =>  TRUE
[12:57:42.628]      <block atomic="false" info="">
[12:57:42.628]        Message(0, "Debug/System power-up request sent");
[12:57:42.630]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:57:42.632]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:57:42.632]      </block>
[12:57:42.632]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:57:42.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:57:42.635]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:57:42.635]        // while-condition  =>  FALSE
[12:57:42.635]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:57:42.635]      </control>
[12:57:42.635]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:57:42.635]        // if-block "(__protocol & 0xFFFF) == 1"
[12:57:42.635]          // =>  FALSE
[12:57:42.635]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:57:42.635]      </control>
[12:57:42.635]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:57:42.635]        // if-block "(__protocol & 0xFFFF) == 2"
[12:57:42.637]          // =>  TRUE
[12:57:42.637]        <block atomic="false" info="">
[12:57:42.637]          Message(0, "executing SWD power up");
[12:57:42.639]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:57:42.641]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:57:42.641]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:57:42.643]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:57:42.643]        </block>
[12:57:42.643]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:57:42.643]      </control>
[12:57:42.643]      // end if-block "powered_down"
[12:57:42.643]    </control>
[12:57:42.644]    <block atomic="false" info="">
[12:57:42.644]      __var DEBUG_PORT_VAL    = 0;
[12:57:42.644]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:57:42.644]      __var ACCESS_POINT_VAL  = 0;
[12:57:42.644]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:57:42.644]      __ap = 1; 
[12:57:42.644]        // -> [__ap <= 0x00000001]
[12:57:42.644]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:57:42.647]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:57:42.647]      __ap = 4;
[12:57:42.647]        // -> [__ap <= 0x00000004]
[12:57:42.647]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:57:42.651]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:57:42.651]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:57:42.651]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:57:42.652]    </block>
[12:57:42.652]    <block atomic="false" info="">
[12:57:42.652]      __var nReset = 0x80;
[12:57:42.652]        // -> [nReset <= 0x00000080]
[12:57:42.652]      __var canReadPins = 0;
[12:57:42.652]        // -> [canReadPins <= 0x00000000]
[12:57:42.652]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:57:42.655]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:57:42.655]        // -> [canReadPins <= 0x00000001]
[12:57:42.655]    </block>
[12:57:42.655]    <control if="" while="1" timeout="200" info="">
[12:57:42.655]      // while "1"  (timeout="200")
[12:57:42.655]      // while-condition  =>  TRUE
[12:57:42.655]      // while "1"  (timeout="200")
[12:57:42.655]      // while-condition  =>  TRUE
[12:57:42.655]      // while "1"  (timeout="200")
[12:57:42.655]      // while-condition  =>  TRUE
[12:57:42.655]      // while "1"  (timeout="200")
[12:57:42.657]      // while-condition  =>  TRUE
[12:57:42.657]      // while "1"  (timeout="200")
[12:57:42.657]      // while-condition  =>  TRUE
[12:57:42.657]      // while "1"  (timeout="200")
[12:57:42.657]      // while-condition  =>  TRUE
[12:57:42.657]      // while "1"  (timeout="200")
[12:57:42.657]      // while-condition  =>  TRUE
[12:57:42.657]      // while "1"  (timeout="200")
[12:57:42.657]      // while-condition  =>  TRUE
[12:57:42.657]      // while "1"  (timeout="200")
[12:57:42.657]      // while-condition  =>  TRUE
[12:57:42.657]      // while "1"  (timeout="200")
[12:57:42.658]      // while-condition  =>  TRUE
[12:57:42.658]      // while "1"  (timeout="200")
[12:57:42.658]      // while-condition  =>  TRUE
[12:57:42.658]      // while "1"  (timeout="200")
[12:57:42.658]      // while-condition  =>  TRUE
[12:57:42.658]      // while "1"  (timeout="200")
[12:57:42.658]      // while-condition  =>  TRUE
[12:57:42.658]      // while "1"  (timeout="200")
[12:57:42.658]      // while-condition  =>  TRUE
[12:57:42.658]      // while "1"  (timeout="200")
[12:57:42.658]      // while-condition  =>  TRUE
[12:57:42.660]      // while "1"  (timeout="200")
[12:57:42.660]      // while-condition  =>  TRUE
[12:57:42.660]      // while "1"  (timeout="200")
[12:57:42.660]      // while-condition  =>  TRUE
[12:57:42.660]      // while "1"  (timeout="200")
[12:57:42.660]      // while-condition  =>  TRUE
[12:57:42.660]      // while "1"  (timeout="200")
[12:57:42.660]      // while-condition  =>  TRUE
[12:57:42.661]      // while "1"  (timeout="200")
[12:57:42.661]      // while  =>  TIMEOUT
[12:57:42.661]      // end while "1"
[12:57:42.661]    </control>
[12:57:42.661]    <control if="canReadPins" while="" timeout="0" info="">
[12:57:42.661]      // if-block "canReadPins"
[12:57:42.661]        // =>  TRUE
[12:57:42.661]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:57:42.661]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:57:42.662]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:57:42.662]        // while-condition  =>  FALSE
[12:57:42.662]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:57:42.662]      </control>
[12:57:42.664]      // end if-block "canReadPins"
[12:57:42.664]    </control>
[12:57:42.664]    <control if="!canReadPins" while="" timeout="0" info="">
[12:57:42.664]      // if-block "!canReadPins"
[12:57:42.664]        // =>  FALSE
[12:57:42.664]      // skip if-block "!canReadPins"
[12:57:42.664]    </control>
[12:57:42.664]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:57:42.665]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:57:42.665]        // =>  TRUE
[12:57:42.665]      <block atomic="false" info="">
[12:57:42.665]        WriteAP(0x00, 0x190008);
[12:57:42.668]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:57:42.668]        WriteAP(0xF0, 0x01);
[12:57:42.677]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:57:42.677]      </block>
[12:57:42.677]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:57:42.677]    </control>
[12:57:42.677]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:57:42.677]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:57:42.678]        // =>  FALSE
[12:57:42.678]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:57:42.678]    </control>
[12:57:42.678]    <block atomic="false" info="">
[12:57:42.678]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:57:42.685]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:57:42.685]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:57:42.685]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:57:42.685]      __ap = 0; //lets make sure we reset the access point selection
[12:57:42.685]        // -> [__ap <= 0x00000000]
[12:57:42.685]    </block>
[12:57:42.685]  </sequence>
[12:57:42.685]  
[12:57:42.713]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:57:42.713]  
[12:57:42.713]  <debugvars>
[12:57:42.713]    // Pre-defined
[12:57:42.713]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:57:42.713]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:57:42.713]    __dp=0x00000000
[12:57:42.713]    __ap=0x00000000
[12:57:42.713]    __traceout=0x00000000      (Trace Disabled)
[12:57:42.713]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:57:42.714]    __FlashAddr=0x00000000
[12:57:42.714]    __FlashLen=0x00000000
[12:57:42.714]    __FlashArg=0x00000000
[12:57:42.714]    __FlashOp=0x00000000
[12:57:42.714]    __Result=0x00000000
[12:57:42.714]  </debugvars>
[12:57:42.714]  
[12:57:42.714]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:57:42.714]    <block atomic="false" info="">
[12:57:42.714]      __var deviceID = 0;
[12:57:42.715]        // -> [deviceID <= 0x00000000]
[12:57:42.715]      __var version = 0;
[12:57:42.715]        // -> [version <= 0x00000000]
[12:57:42.715]      __var partNum = 0;
[12:57:42.716]        // -> [partNum <= 0x00000000]
[12:57:42.716]      __var manuf = 0;
[12:57:42.716]        // -> [manuf <= 0x00000000]
[12:57:42.716]      __var isMSPM0G1X0X_G3X0X = 0;
[12:57:42.716]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:57:42.716]      __var isProduction = 0;
[12:57:42.716]        // -> [isProduction <= 0x00000000]
[12:57:42.716]      __var continueId = 0;
[12:57:42.716]        // -> [continueId <= 0x00000000]
[12:57:42.716]      deviceID =   Read32(0x41C40004);
[12:57:42.721]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:57:42.721]        // -> [deviceID <= 0x2BB8802F]
[12:57:42.721]      version = deviceID >> 28;
[12:57:42.721]        // -> [version <= 0x00000002]
[12:57:42.721]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:57:42.721]        // -> [partNum <= 0x0000BB88]
[12:57:42.721]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:57:42.721]        // -> [manuf <= 0x00000017]
[12:57:42.721]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:57:42.721]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:57:42.721]      isProduction = (version > 0);
[12:57:42.721]        // -> [isProduction <= 0x00000001]
[12:57:42.721]    </block>
[12:57:42.723]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:57:42.723]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:57:42.723]        // =>  FALSE
[12:57:42.723]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:57:42.723]    </control>
[12:57:42.723]    <control if="continueId == 4" while="" timeout="0" info="">
[12:57:42.723]      // if-block "continueId == 4"
[12:57:42.723]        // =>  FALSE
[12:57:42.723]      // skip if-block "continueId == 4"
[12:57:42.723]    </control>
[12:57:42.723]    <control if="!isProduction" while="" timeout="0" info="">
[12:57:42.723]      // if-block "!isProduction"
[12:57:42.723]        // =>  FALSE
[12:57:42.723]      // skip if-block "!isProduction"
[12:57:42.723]    </control>
[12:57:42.725]  </sequence>
[12:57:42.725]  
[12:58:19.428]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:58:19.428]  
[12:58:19.428]  <debugvars>
[12:58:19.428]    // Pre-defined
[12:58:19.428]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:58:19.428]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:58:19.428]    __dp=0x00000000
[12:58:19.428]    __ap=0x00000000
[12:58:19.428]    __traceout=0x00000000      (Trace Disabled)
[12:58:19.428]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:58:19.428]    __FlashAddr=0x00000000
[12:58:19.428]    __FlashLen=0x00000000
[12:58:19.428]    __FlashArg=0x00000000
[12:58:19.428]    __FlashOp=0x00000000
[12:58:19.428]    __Result=0x00000000
[12:58:19.428]  </debugvars>
[12:58:19.430]  
[12:58:19.430]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:58:19.430]    <block atomic="false" info="">
[12:58:19.430]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:58:19.430]        // -> [isSWJ <= 0x00000001]
[12:58:19.430]      __var hasDormant = __protocol & 0x00020000;
[12:58:19.430]        // -> [hasDormant <= 0x00000000]
[12:58:19.430]      __var protType   = __protocol & 0x0000FFFF;
[12:58:19.430]        // -> [protType <= 0x00000002]
[12:58:19.430]    </block>
[12:58:19.430]    <control if="protType == 1" while="" timeout="0" info="">
[12:58:19.430]      // if-block "protType == 1"
[12:58:19.430]        // =>  FALSE
[12:58:19.430]      // skip if-block "protType == 1"
[12:58:19.430]    </control>
[12:58:19.430]    <control if="protType == 2" while="" timeout="0" info="">
[12:58:19.430]      // if-block "protType == 2"
[12:58:19.430]        // =>  TRUE
[12:58:19.430]      <control if="isSWJ" while="" timeout="0" info="">
[12:58:19.430]        // if-block "isSWJ"
[12:58:19.432]          // =>  TRUE
[12:58:19.432]        <control if="hasDormant" while="" timeout="0" info="">
[12:58:19.432]          // if-block "hasDormant"
[12:58:19.432]            // =>  FALSE
[12:58:19.432]          // skip if-block "hasDormant"
[12:58:19.432]        </control>
[12:58:19.432]        <control if="!hasDormant" while="" timeout="0" info="">
[12:58:19.432]          // if-block "!hasDormant"
[12:58:19.432]            // =>  TRUE
[12:58:19.432]          <block atomic="false" info="">
[12:58:19.432]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:58:19.434]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:58:19.434]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:58:19.436]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:58:19.436]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:58:19.436]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:58:19.436]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:58:19.442]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:58:19.442]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:58:19.442]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:58:19.442]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:58:19.447]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:58:19.448]          </block>
[12:58:19.448]          // end if-block "!hasDormant"
[12:58:19.448]        </control>
[12:58:19.448]        // end if-block "isSWJ"
[12:58:19.448]      </control>
[12:58:19.448]      <control if="!isSWJ" while="" timeout="0" info="">
[12:58:19.448]        // if-block "!isSWJ"
[12:58:19.448]          // =>  FALSE
[12:58:19.448]        // skip if-block "!isSWJ"
[12:58:19.448]      </control>
[12:58:19.448]      <block atomic="false" info="">
[12:58:19.448]        ReadDP(0x0);
[12:58:19.448]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:58:19.448]      </block>
[12:58:19.448]      // end if-block "protType == 2"
[12:58:19.448]    </control>
[12:58:19.448]  </sequence>
[12:58:19.448]  
[12:58:19.457]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:58:19.457]  
[12:58:19.457]  <debugvars>
[12:58:19.457]    // Pre-defined
[12:58:19.457]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:58:19.457]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:58:19.457]    __dp=0x00000000
[12:58:19.458]    __ap=0x00000000
[12:58:19.458]    __traceout=0x00000000      (Trace Disabled)
[12:58:19.458]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:58:19.458]    __FlashAddr=0x00000000
[12:58:19.458]    __FlashLen=0x00000000
[12:58:19.458]    __FlashArg=0x00000000
[12:58:19.458]    __FlashOp=0x00000000
[12:58:19.458]    __Result=0x00000000
[12:58:19.458]  </debugvars>
[12:58:19.458]  
[12:58:19.458]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:58:19.458]    <block atomic="false" info="">
[12:58:19.458]      __var SW_DP_ABORT       = 0x0;
[12:58:19.458]        // -> [SW_DP_ABORT <= 0x00000000]
[12:58:19.458]      __var DP_CTRL_STAT      = 0x4;
[12:58:19.458]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:58:19.460]      __var DP_SELECT         = 0x8;
[12:58:19.460]        // -> [DP_SELECT <= 0x00000008]
[12:58:19.460]      __var powered_down      = 0;
[12:58:19.460]        // -> [powered_down <= 0x00000000]
[12:58:19.460]      WriteDP(DP_SELECT, 0x00000000);
[12:58:19.460]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:58:19.464]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:58:19.465]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:58:19.465]        // -> [powered_down <= 0x00000001]
[12:58:19.465]    </block>
[12:58:19.465]    <control if="powered_down" while="" timeout="0" info="">
[12:58:19.466]      // if-block "powered_down"
[12:58:19.466]        // =>  TRUE
[12:58:19.466]      <block atomic="false" info="">
[12:58:19.466]        Message(0, "Debug/System power-up request sent");
[12:58:19.469]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:58:19.469]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:58:19.469]      </block>
[12:58:19.469]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:58:19.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:58:19.472]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:58:19.472]        // while-condition  =>  FALSE
[12:58:19.472]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:58:19.472]      </control>
[12:58:19.472]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:58:19.472]        // if-block "(__protocol & 0xFFFF) == 1"
[12:58:19.472]          // =>  FALSE
[12:58:19.472]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:58:19.472]      </control>
[12:58:19.472]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:58:19.474]        // if-block "(__protocol & 0xFFFF) == 2"
[12:58:19.474]          // =>  TRUE
[12:58:19.474]        <block atomic="false" info="">
[12:58:19.474]          Message(0, "executing SWD power up");
[12:58:19.477]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:58:19.478]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:58:19.478]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:58:19.478]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:58:19.481]        </block>
[12:58:19.481]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:58:19.481]      </control>
[12:58:19.481]      // end if-block "powered_down"
[12:58:19.481]    </control>
[12:58:19.481]    <block atomic="false" info="">
[12:58:19.481]      __var DEBUG_PORT_VAL    = 0;
[12:58:19.481]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:58:19.481]      __var ACCESS_POINT_VAL  = 0;
[12:58:19.481]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:58:19.481]      __ap = 1; 
[12:58:19.481]        // -> [__ap <= 0x00000001]
[12:58:19.481]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:58:19.488]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:58:19.488]      __ap = 4;
[12:58:19.488]        // -> [__ap <= 0x00000004]
[12:58:19.488]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:58:19.490]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:58:19.490]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:58:19.490]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:58:19.494]    </block>
[12:58:19.495]    <block atomic="false" info="">
[12:58:19.495]      __var nReset = 0x80;
[12:58:19.495]        // -> [nReset <= 0x00000080]
[12:58:19.495]      __var canReadPins = 0;
[12:58:19.495]        // -> [canReadPins <= 0x00000000]
[12:58:19.495]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:58:19.496]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:58:19.496]        // -> [canReadPins <= 0x00000001]
[12:58:19.496]    </block>
[12:58:19.496]    <control if="" while="1" timeout="200" info="">
[12:58:19.496]      // while "1"  (timeout="200")
[12:58:19.496]      // while-condition  =>  TRUE
[12:58:19.496]      // while "1"  (timeout="200")
[12:58:19.496]      // while-condition  =>  TRUE
[12:58:19.496]      // while "1"  (timeout="200")
[12:58:19.496]      // while-condition  =>  TRUE
[12:58:19.496]      // while "1"  (timeout="200")
[12:58:19.496]      // while-condition  =>  TRUE
[12:58:19.496]      // while "1"  (timeout="200")
[12:58:19.496]      // while-condition  =>  TRUE
[12:58:19.496]      // while "1"  (timeout="200")
[12:58:19.496]      // while-condition  =>  TRUE
[12:58:19.496]      // while "1"  (timeout="200")
[12:58:19.496]      // while-condition  =>  TRUE
[12:58:19.496]      // while "1"  (timeout="200")
[12:58:19.496]      // while-condition  =>  TRUE
[12:58:19.496]      // while "1"  (timeout="200")
[12:58:19.496]      // while-condition  =>  TRUE
[12:58:19.500]      // while "1"  (timeout="200")
[12:58:19.500]      // while-condition  =>  TRUE
[12:58:19.500]      // while "1"  (timeout="200")
[12:58:19.500]      // while-condition  =>  TRUE
[12:58:19.500]      // while "1"  (timeout="200")
[12:58:19.500]      // while-condition  =>  TRUE
[12:58:19.500]      // while "1"  (timeout="200")
[12:58:19.500]      // while-condition  =>  TRUE
[12:58:19.500]      // while "1"  (timeout="200")
[12:58:19.501]      // while-condition  =>  TRUE
[12:58:19.501]      // while "1"  (timeout="200")
[12:58:19.501]      // while-condition  =>  TRUE
[12:58:19.501]      // while "1"  (timeout="200")
[12:58:19.501]      // while-condition  =>  TRUE
[12:58:19.501]      // while "1"  (timeout="200")
[12:58:19.501]      // while-condition  =>  TRUE
[12:58:19.502]      // while "1"  (timeout="200")
[12:58:19.502]      // while-condition  =>  TRUE
[12:58:19.502]      // while "1"  (timeout="200")
[12:58:19.502]      // while-condition  =>  TRUE
[12:58:19.502]      // while "1"  (timeout="200")
[12:58:19.502]      // while-condition  =>  TRUE
[12:58:19.502]      // while "1"  (timeout="200")
[12:58:19.502]      // while-condition  =>  TRUE
[12:58:19.502]      // while "1"  (timeout="200")
[12:58:19.502]      // while-condition  =>  TRUE
[12:58:19.502]      // while "1"  (timeout="200")
[12:58:19.502]      // while-condition  =>  TRUE
[12:58:19.502]      // while "1"  (timeout="200")
[12:58:19.502]      // while-condition  =>  TRUE
[12:58:19.502]      // while "1"  (timeout="200")
[12:58:19.502]      // while-condition  =>  TRUE
[12:58:19.502]      // while "1"  (timeout="200")
[12:58:19.502]      // while-condition  =>  TRUE
[12:58:19.502]      // while "1"  (timeout="200")
[12:58:19.502]      // while-condition  =>  TRUE
[12:58:19.504]      // while "1"  (timeout="200")
[12:58:19.504]      // while  =>  TIMEOUT
[12:58:19.504]      // end while "1"
[12:58:19.504]    </control>
[12:58:19.504]    <control if="canReadPins" while="" timeout="0" info="">
[12:58:19.504]      // if-block "canReadPins"
[12:58:19.504]        // =>  TRUE
[12:58:19.505]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:58:19.506]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:58:19.507]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:58:19.507]        // while-condition  =>  FALSE
[12:58:19.507]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:58:19.507]      </control>
[12:58:19.507]      // end if-block "canReadPins"
[12:58:19.507]    </control>
[12:58:19.507]    <control if="!canReadPins" while="" timeout="0" info="">
[12:58:19.507]      // if-block "!canReadPins"
[12:58:19.508]        // =>  FALSE
[12:58:19.508]      // skip if-block "!canReadPins"
[12:58:19.508]    </control>
[12:58:19.508]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:58:19.508]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:58:19.508]        // =>  TRUE
[12:58:19.508]      <block atomic="false" info="">
[12:58:19.508]        WriteAP(0x00, 0x190008);
[12:58:19.511]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:58:19.511]        WriteAP(0xF0, 0x01);
[12:58:19.515]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:58:19.515]      </block>
[12:58:19.515]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:58:19.516]    </control>
[12:58:19.516]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:58:19.516]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:58:19.516]        // =>  FALSE
[12:58:19.516]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:58:19.516]    </control>
[12:58:19.516]    <block atomic="false" info="">
[12:58:19.516]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:58:19.521]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:58:19.521]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:58:19.521]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:58:19.525]      __ap = 0; //lets make sure we reset the access point selection
[12:58:19.525]        // -> [__ap <= 0x00000000]
[12:58:19.525]    </block>
[12:58:19.525]  </sequence>
[12:58:19.525]  
[12:58:19.551]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:58:19.551]  
[12:58:19.551]  <debugvars>
[12:58:19.551]    // Pre-defined
[12:58:19.551]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:58:19.551]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:58:19.553]    __dp=0x00000000
[12:58:19.553]    __ap=0x00000000
[12:58:19.553]    __traceout=0x00000000      (Trace Disabled)
[12:58:19.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:58:19.553]    __FlashAddr=0x00000000
[12:58:19.553]    __FlashLen=0x00000000
[12:58:19.553]    __FlashArg=0x00000000
[12:58:19.554]    __FlashOp=0x00000000
[12:58:19.554]    __Result=0x00000000
[12:58:19.554]  </debugvars>
[12:58:19.554]  
[12:58:19.554]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:58:19.554]    <block atomic="false" info="">
[12:58:19.554]      __var deviceID = 0;
[12:58:19.554]        // -> [deviceID <= 0x00000000]
[12:58:19.554]      __var version = 0;
[12:58:19.555]        // -> [version <= 0x00000000]
[12:58:19.555]      __var partNum = 0;
[12:58:19.555]        // -> [partNum <= 0x00000000]
[12:58:19.555]      __var manuf = 0;
[12:58:19.555]        // -> [manuf <= 0x00000000]
[12:58:19.555]      __var isMSPM0G1X0X_G3X0X = 0;
[12:58:19.556]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:58:19.556]      __var isProduction = 0;
[12:58:19.556]        // -> [isProduction <= 0x00000000]
[12:58:19.556]      __var continueId = 0;
[12:58:19.556]        // -> [continueId <= 0x00000000]
[12:58:19.556]      deviceID =   Read32(0x41C40004);
[12:58:19.562]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:58:19.562]        // -> [deviceID <= 0x2BB8802F]
[12:58:19.562]      version = deviceID >> 28;
[12:58:19.562]        // -> [version <= 0x00000002]
[12:58:19.562]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:58:19.562]        // -> [partNum <= 0x0000BB88]
[12:58:19.562]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:58:19.562]        // -> [manuf <= 0x00000017]
[12:58:19.562]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:58:19.562]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:58:19.562]      isProduction = (version > 0);
[12:58:19.562]        // -> [isProduction <= 0x00000001]
[12:58:19.562]    </block>
[12:58:19.562]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:58:19.562]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:58:19.562]        // =>  FALSE
[12:58:19.562]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:58:19.564]    </control>
[12:58:19.564]    <control if="continueId == 4" while="" timeout="0" info="">
[12:58:19.564]      // if-block "continueId == 4"
[12:58:19.564]        // =>  FALSE
[12:58:19.564]      // skip if-block "continueId == 4"
[12:58:19.564]    </control>
[12:58:19.564]    <control if="!isProduction" while="" timeout="0" info="">
[12:58:19.564]      // if-block "!isProduction"
[12:58:19.564]        // =>  FALSE
[12:58:19.564]      // skip if-block "!isProduction"
[12:58:19.564]    </control>
[12:58:19.564]  </sequence>
[12:58:19.564]  
[12:58:23.873]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:58:23.873]  
[12:58:23.882]  <debugvars>
[12:58:23.882]    // Pre-defined
[12:58:23.882]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:58:23.882]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:58:23.882]    __dp=0x00000000
[12:58:23.882]    __ap=0x00000000
[12:58:23.882]    __traceout=0x00000000      (Trace Disabled)
[12:58:23.882]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:58:23.882]    __FlashAddr=0x00000000
[12:58:23.882]    __FlashLen=0x00000000
[12:58:23.882]    __FlashArg=0x00000000
[12:58:23.882]    __FlashOp=0x00000000
[12:58:23.883]    __Result=0x00000000
[12:58:23.883]  </debugvars>
[12:58:23.883]  
[12:58:23.883]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:58:23.883]    <block atomic="false" info="">
[12:58:23.883]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:58:23.883]        // -> [isSWJ <= 0x00000001]
[12:58:23.883]      __var hasDormant = __protocol & 0x00020000;
[12:58:23.883]        // -> [hasDormant <= 0x00000000]
[12:58:23.884]      __var protType   = __protocol & 0x0000FFFF;
[12:58:23.884]        // -> [protType <= 0x00000002]
[12:58:23.884]    </block>
[12:58:23.884]    <control if="protType == 1" while="" timeout="0" info="">
[12:58:23.884]      // if-block "protType == 1"
[12:58:23.884]        // =>  FALSE
[12:58:23.884]      // skip if-block "protType == 1"
[12:58:23.884]    </control>
[12:58:23.884]    <control if="protType == 2" while="" timeout="0" info="">
[12:58:23.884]      // if-block "protType == 2"
[12:58:23.884]        // =>  TRUE
[12:58:23.884]      <control if="isSWJ" while="" timeout="0" info="">
[12:58:23.885]        // if-block "isSWJ"
[12:58:23.885]          // =>  TRUE
[12:58:23.885]        <control if="hasDormant" while="" timeout="0" info="">
[12:58:23.885]          // if-block "hasDormant"
[12:58:23.885]            // =>  FALSE
[12:58:23.885]          // skip if-block "hasDormant"
[12:58:23.885]        </control>
[12:58:23.885]        <control if="!hasDormant" while="" timeout="0" info="">
[12:58:23.885]          // if-block "!hasDormant"
[12:58:23.885]            // =>  TRUE
[12:58:23.885]          <block atomic="false" info="">
[12:58:23.886]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:58:23.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:58:23.889]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:58:23.890]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:58:23.890]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:58:23.892]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:58:23.892]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:58:23.893]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:58:23.893]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:58:23.894]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:58:23.895]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:58:23.896]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:58:23.896]          </block>
[12:58:23.896]          // end if-block "!hasDormant"
[12:58:23.896]        </control>
[12:58:23.896]        // end if-block "isSWJ"
[12:58:23.896]      </control>
[12:58:23.896]      <control if="!isSWJ" while="" timeout="0" info="">
[12:58:23.896]        // if-block "!isSWJ"
[12:58:23.896]          // =>  FALSE
[12:58:23.896]        // skip if-block "!isSWJ"
[12:58:23.896]      </control>
[12:58:23.896]      <block atomic="false" info="">
[12:58:23.896]        ReadDP(0x0);
[12:58:23.899]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:58:23.899]      </block>
[12:58:23.899]      // end if-block "protType == 2"
[12:58:23.899]    </control>
[12:58:23.899]  </sequence>
[12:58:23.899]  
[12:58:23.908]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:58:23.908]  
[12:58:23.908]  <debugvars>
[12:58:23.908]    // Pre-defined
[12:58:23.909]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:58:23.909]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:58:23.909]    __dp=0x00000000
[12:58:23.909]    __ap=0x00000000
[12:58:23.909]    __traceout=0x00000000      (Trace Disabled)
[12:58:23.909]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:58:23.909]    __FlashAddr=0x00000000
[12:58:23.909]    __FlashLen=0x00000000
[12:58:23.909]    __FlashArg=0x00000000
[12:58:23.909]    __FlashOp=0x00000000
[12:58:23.909]    __Result=0x00000000
[12:58:23.909]  </debugvars>
[12:58:23.909]  
[12:58:23.909]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:58:23.909]    <block atomic="false" info="">
[12:58:23.909]      __var SW_DP_ABORT       = 0x0;
[12:58:23.909]        // -> [SW_DP_ABORT <= 0x00000000]
[12:58:23.909]      __var DP_CTRL_STAT      = 0x4;
[12:58:23.909]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:58:23.909]      __var DP_SELECT         = 0x8;
[12:58:23.909]        // -> [DP_SELECT <= 0x00000008]
[12:58:23.909]      __var powered_down      = 0;
[12:58:23.909]        // -> [powered_down <= 0x00000000]
[12:58:23.909]      WriteDP(DP_SELECT, 0x00000000);
[12:58:23.913]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:58:23.913]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:58:23.916]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:58:23.916]        // -> [powered_down <= 0x00000001]
[12:58:23.916]    </block>
[12:58:23.916]    <control if="powered_down" while="" timeout="0" info="">
[12:58:23.919]      // if-block "powered_down"
[12:58:23.919]        // =>  TRUE
[12:58:23.919]      <block atomic="false" info="">
[12:58:23.919]        Message(0, "Debug/System power-up request sent");
[12:58:23.920]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:58:23.920]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:58:23.923]      </block>
[12:58:23.923]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:58:23.923]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:58:23.925]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:58:23.925]        // while-condition  =>  FALSE
[12:58:23.925]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:58:23.925]      </control>
[12:58:23.925]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:58:23.925]        // if-block "(__protocol & 0xFFFF) == 1"
[12:58:23.925]          // =>  FALSE
[12:58:23.925]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:58:23.926]      </control>
[12:58:23.926]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:58:23.926]        // if-block "(__protocol & 0xFFFF) == 2"
[12:58:23.926]          // =>  TRUE
[12:58:23.926]        <block atomic="false" info="">
[12:58:23.926]          Message(0, "executing SWD power up");
[12:58:23.928]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:58:23.928]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:58:23.928]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:58:23.933]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:58:23.933]        </block>
[12:58:23.933]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:58:23.933]      </control>
[12:58:23.933]      // end if-block "powered_down"
[12:58:23.933]    </control>
[12:58:23.933]    <block atomic="false" info="">
[12:58:23.933]      __var DEBUG_PORT_VAL    = 0;
[12:58:23.933]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:58:23.933]      __var ACCESS_POINT_VAL  = 0;
[12:58:23.933]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:58:23.933]      __ap = 1; 
[12:58:23.933]        // -> [__ap <= 0x00000001]
[12:58:23.933]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:58:23.935]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:58:23.935]      __ap = 4;
[12:58:23.935]        // -> [__ap <= 0x00000004]
[12:58:23.935]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:58:23.941]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:58:23.941]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:58:23.941]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:58:23.942]    </block>
[12:58:23.942]    <block atomic="false" info="">
[12:58:23.942]      __var nReset = 0x80;
[12:58:23.942]        // -> [nReset <= 0x00000080]
[12:58:23.942]      __var canReadPins = 0;
[12:58:23.942]        // -> [canReadPins <= 0x00000000]
[12:58:23.942]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:58:23.945]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:58:23.945]        // -> [canReadPins <= 0x00000001]
[12:58:23.945]    </block>
[12:58:23.945]    <control if="" while="1" timeout="200" info="">
[12:58:23.945]      // while "1"  (timeout="200")
[12:58:23.945]      // while-condition  =>  TRUE
[12:58:23.945]      // while "1"  (timeout="200")
[12:58:23.945]      // while-condition  =>  TRUE
[12:58:23.945]      // while "1"  (timeout="200")
[12:58:23.945]      // while-condition  =>  TRUE
[12:58:23.945]      // while "1"  (timeout="200")
[12:58:23.945]      // while-condition  =>  TRUE
[12:58:23.945]      // while "1"  (timeout="200")
[12:58:23.945]      // while-condition  =>  TRUE
[12:58:23.946]      // while "1"  (timeout="200")
[12:58:23.946]      // while-condition  =>  TRUE
[12:58:23.946]      // while "1"  (timeout="200")
[12:58:23.946]      // while-condition  =>  TRUE
[12:58:23.946]      // while "1"  (timeout="200")
[12:58:23.946]      // while-condition  =>  TRUE
[12:58:23.946]      // while "1"  (timeout="200")
[12:58:23.946]      // while-condition  =>  TRUE
[12:58:23.946]      // while "1"  (timeout="200")
[12:58:23.946]      // while-condition  =>  TRUE
[12:58:23.946]      // while "1"  (timeout="200")
[12:58:23.946]      // while-condition  =>  TRUE
[12:58:23.946]      // while "1"  (timeout="200")
[12:58:23.946]      // while-condition  =>  TRUE
[12:58:23.946]      // while "1"  (timeout="200")
[12:58:23.946]      // while-condition  =>  TRUE
[12:58:23.946]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.948]      // while "1"  (timeout="200")
[12:58:23.948]      // while-condition  =>  TRUE
[12:58:23.952]      // while "1"  (timeout="200")
[12:58:23.952]      // while-condition  =>  TRUE
[12:58:23.952]      // while "1"  (timeout="200")
[12:58:23.952]      // while-condition  =>  TRUE
[12:58:23.952]      // while "1"  (timeout="200")
[12:58:23.952]      // while-condition  =>  TRUE
[12:58:23.952]      // while "1"  (timeout="200")
[12:58:23.953]      // while-condition  =>  TRUE
[12:58:23.953]      // while "1"  (timeout="200")
[12:58:23.953]      // while-condition  =>  TRUE
[12:58:23.953]      // while "1"  (timeout="200")
[12:58:23.953]      // while-condition  =>  TRUE
[12:58:23.953]      // while "1"  (timeout="200")
[12:58:23.953]      // while-condition  =>  TRUE
[12:58:23.953]      // while "1"  (timeout="200")
[12:58:23.953]      // while-condition  =>  TRUE
[12:58:23.953]      // while "1"  (timeout="200")
[12:58:23.953]      // while-condition  =>  TRUE
[12:58:23.953]      // while "1"  (timeout="200")
[12:58:23.953]      // while-condition  =>  TRUE
[12:58:23.953]      // while "1"  (timeout="200")
[12:58:23.953]      // while-condition  =>  TRUE
[12:58:23.953]      // while "1"  (timeout="200")
[12:58:23.953]      // while-condition  =>  TRUE
[12:58:23.954]      // while "1"  (timeout="200")
[12:58:23.954]      // while-condition  =>  TRUE
[12:58:23.954]      // while "1"  (timeout="200")
[12:58:23.954]      // while-condition  =>  TRUE
[12:58:23.954]      // while "1"  (timeout="200")
[12:58:23.955]      // while-condition  =>  TRUE
[12:58:23.955]      // while "1"  (timeout="200")
[12:58:23.955]      // while-condition  =>  TRUE
[12:58:23.955]      // while "1"  (timeout="200")
[12:58:23.955]      // while-condition  =>  TRUE
[12:58:23.955]      // while "1"  (timeout="200")
[12:58:23.955]      // while-condition  =>  TRUE
[12:58:23.955]      // while "1"  (timeout="200")
[12:58:23.955]      // while-condition  =>  TRUE
[12:58:23.955]      // while "1"  (timeout="200")
[12:58:23.955]      // while-condition  =>  TRUE
[12:58:23.955]      // while "1"  (timeout="200")
[12:58:23.955]      // while-condition  =>  TRUE
[12:58:23.955]      // while "1"  (timeout="200")
[12:58:23.955]      // while-condition  =>  TRUE
[12:58:23.956]      // while "1"  (timeout="200")
[12:58:23.956]      // while-condition  =>  TRUE
[12:58:23.956]      // while "1"  (timeout="200")
[12:58:23.956]      // while-condition  =>  TRUE
[12:58:23.956]      // while "1"  (timeout="200")
[12:58:23.956]      // while-condition  =>  TRUE
[12:58:23.956]      // while "1"  (timeout="200")
[12:58:23.956]      // while-condition  =>  TRUE
[12:58:23.956]      // while "1"  (timeout="200")
[12:58:23.956]      // while-condition  =>  TRUE
[12:58:23.956]      // while "1"  (timeout="200")
[12:58:23.957]      // while-condition  =>  TRUE
[12:58:23.957]      // while "1"  (timeout="200")
[12:58:23.957]      // while  =>  TIMEOUT
[12:58:23.957]      // end while "1"
[12:58:23.957]    </control>
[12:58:23.957]    <control if="canReadPins" while="" timeout="0" info="">
[12:58:23.957]      // if-block "canReadPins"
[12:58:23.957]        // =>  TRUE
[12:58:23.959]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:58:23.959]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:58:23.960]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:58:23.960]        // while-condition  =>  FALSE
[12:58:23.960]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:58:23.960]      </control>
[12:58:23.960]      // end if-block "canReadPins"
[12:58:23.960]    </control>
[12:58:23.960]    <control if="!canReadPins" while="" timeout="0" info="">
[12:58:23.960]      // if-block "!canReadPins"
[12:58:23.960]        // =>  FALSE
[12:58:23.960]      // skip if-block "!canReadPins"
[12:58:23.960]    </control>
[12:58:23.960]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:58:23.960]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:58:23.960]        // =>  TRUE
[12:58:23.960]      <block atomic="false" info="">
[12:58:23.960]        WriteAP(0x00, 0x190008);
[12:58:23.964]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:58:23.964]        WriteAP(0xF0, 0x01);
[12:58:23.968]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:58:23.968]      </block>
[12:58:23.968]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:58:23.968]    </control>
[12:58:23.968]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:58:23.968]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:58:23.968]        // =>  FALSE
[12:58:23.968]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:58:23.968]    </control>
[12:58:23.968]    <block atomic="false" info="">
[12:58:23.968]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:58:23.981]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:58:23.982]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:58:23.982]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:58:23.983]      __ap = 0; //lets make sure we reset the access point selection
[12:58:23.983]        // -> [__ap <= 0x00000000]
[12:58:23.983]    </block>
[12:58:23.983]  </sequence>
[12:58:23.983]  
[12:58:24.009]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:58:24.009]  
[12:58:24.009]  <debugvars>
[12:58:24.009]    // Pre-defined
[12:58:24.009]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:58:24.009]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:58:24.009]    __dp=0x00000000
[12:58:24.009]    __ap=0x00000000
[12:58:24.009]    __traceout=0x00000000      (Trace Disabled)
[12:58:24.009]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:58:24.009]    __FlashAddr=0x00000000
[12:58:24.009]    __FlashLen=0x00000000
[12:58:24.009]    __FlashArg=0x00000000
[12:58:24.009]    __FlashOp=0x00000000
[12:58:24.009]    __Result=0x00000000
[12:58:24.009]  </debugvars>
[12:58:24.011]  
[12:58:24.011]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:58:24.011]    <block atomic="false" info="">
[12:58:24.011]      __var deviceID = 0;
[12:58:24.011]        // -> [deviceID <= 0x00000000]
[12:58:24.011]      __var version = 0;
[12:58:24.011]        // -> [version <= 0x00000000]
[12:58:24.011]      __var partNum = 0;
[12:58:24.011]        // -> [partNum <= 0x00000000]
[12:58:24.011]      __var manuf = 0;
[12:58:24.011]        // -> [manuf <= 0x00000000]
[12:58:24.011]      __var isMSPM0G1X0X_G3X0X = 0;
[12:58:24.011]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:58:24.011]      __var isProduction = 0;
[12:58:24.011]        // -> [isProduction <= 0x00000000]
[12:58:24.011]      __var continueId = 0;
[12:58:24.011]        // -> [continueId <= 0x00000000]
[12:58:24.011]      deviceID =   Read32(0x41C40004);
[12:58:24.021]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:58:24.021]        // -> [deviceID <= 0x2BB8802F]
[12:58:24.021]      version = deviceID >> 28;
[12:58:24.021]        // -> [version <= 0x00000002]
[12:58:24.021]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:58:24.021]        // -> [partNum <= 0x0000BB88]
[12:58:24.021]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:58:24.021]        // -> [manuf <= 0x00000017]
[12:58:24.021]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:58:24.021]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:58:24.021]      isProduction = (version > 0);
[12:58:24.021]        // -> [isProduction <= 0x00000001]
[12:58:24.021]    </block>
[12:58:24.021]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:58:24.021]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:58:24.021]        // =>  FALSE
[12:58:24.023]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:58:24.023]    </control>
[12:58:24.023]    <control if="continueId == 4" while="" timeout="0" info="">
[12:58:24.023]      // if-block "continueId == 4"
[12:58:24.023]        // =>  FALSE
[12:58:24.023]      // skip if-block "continueId == 4"
[12:58:24.023]    </control>
[12:58:24.023]    <control if="!isProduction" while="" timeout="0" info="">
[12:58:24.023]      // if-block "!isProduction"
[12:58:24.023]        // =>  FALSE
[12:58:24.023]      // skip if-block "!isProduction"
[12:58:24.024]    </control>
[12:58:24.024]  </sequence>
[12:58:24.024]  
[12:59:13.980]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:59:13.980]  
[12:59:13.980]  <debugvars>
[12:59:13.980]    // Pre-defined
[12:59:13.980]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:59:13.980]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:59:13.980]    __dp=0x00000000
[12:59:13.980]    __ap=0x00000000
[12:59:13.980]    __traceout=0x00000000      (Trace Disabled)
[12:59:13.980]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:59:13.980]    __FlashAddr=0x00000000
[12:59:13.980]    __FlashLen=0x00000000
[12:59:13.980]    __FlashArg=0x00000000
[12:59:13.980]    __FlashOp=0x00000000
[12:59:13.980]    __Result=0x00000000
[12:59:13.980]  </debugvars>
[12:59:13.984]  
[12:59:13.984]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:59:13.984]    <block atomic="false" info="">
[12:59:13.984]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:59:13.984]        // -> [isSWJ <= 0x00000001]
[12:59:13.984]      __var hasDormant = __protocol & 0x00020000;
[12:59:13.984]        // -> [hasDormant <= 0x00000000]
[12:59:13.985]      __var protType   = __protocol & 0x0000FFFF;
[12:59:13.985]        // -> [protType <= 0x00000002]
[12:59:13.985]    </block>
[12:59:13.985]    <control if="protType == 1" while="" timeout="0" info="">
[12:59:13.985]      // if-block "protType == 1"
[12:59:13.985]        // =>  FALSE
[12:59:13.985]      // skip if-block "protType == 1"
[12:59:13.985]    </control>
[12:59:13.985]    <control if="protType == 2" while="" timeout="0" info="">
[12:59:13.985]      // if-block "protType == 2"
[12:59:13.985]        // =>  TRUE
[12:59:13.985]      <control if="isSWJ" while="" timeout="0" info="">
[12:59:13.985]        // if-block "isSWJ"
[12:59:13.985]          // =>  TRUE
[12:59:13.985]        <control if="hasDormant" while="" timeout="0" info="">
[12:59:13.985]          // if-block "hasDormant"
[12:59:13.985]            // =>  FALSE
[12:59:13.985]          // skip if-block "hasDormant"
[12:59:13.988]        </control>
[12:59:13.988]        <control if="!hasDormant" while="" timeout="0" info="">
[12:59:13.988]          // if-block "!hasDormant"
[12:59:13.988]            // =>  TRUE
[12:59:13.988]          <block atomic="false" info="">
[12:59:13.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:59:13.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:59:13.990]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:59:13.990]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:59:13.990]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:59:13.994]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:59:13.994]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:59:13.996]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:59:13.996]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:59:13.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:59:13.997]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:59:14.001]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:59:14.001]          </block>
[12:59:14.001]          // end if-block "!hasDormant"
[12:59:14.001]        </control>
[12:59:14.001]        // end if-block "isSWJ"
[12:59:14.001]      </control>
[12:59:14.001]      <control if="!isSWJ" while="" timeout="0" info="">
[12:59:14.001]        // if-block "!isSWJ"
[12:59:14.001]          // =>  FALSE
[12:59:14.001]        // skip if-block "!isSWJ"
[12:59:14.001]      </control>
[12:59:14.001]      <block atomic="false" info="">
[12:59:14.003]        ReadDP(0x0);
[12:59:14.004]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:59:14.004]      </block>
[12:59:14.004]      // end if-block "protType == 2"
[12:59:14.004]    </control>
[12:59:14.004]  </sequence>
[12:59:14.004]  
[12:59:14.006]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:59:14.006]  
[12:59:14.006]  <debugvars>
[12:59:14.006]    // Pre-defined
[12:59:14.006]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:59:14.006]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:59:14.006]    __dp=0x00000000
[12:59:14.006]    __ap=0x00000000
[12:59:14.006]    __traceout=0x00000000      (Trace Disabled)
[12:59:14.009]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:59:14.009]    __FlashAddr=0x00000000
[12:59:14.009]    __FlashLen=0x00000000
[12:59:14.009]    __FlashArg=0x00000000
[12:59:14.009]    __FlashOp=0x00000000
[12:59:14.009]    __Result=0x00000000
[12:59:14.009]  </debugvars>
[12:59:14.009]  
[12:59:14.009]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:59:14.009]    <block atomic="false" info="">
[12:59:14.009]      __var SW_DP_ABORT       = 0x0;
[12:59:14.009]        // -> [SW_DP_ABORT <= 0x00000000]
[12:59:14.009]      __var DP_CTRL_STAT      = 0x4;
[12:59:14.009]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:59:14.009]      __var DP_SELECT         = 0x8;
[12:59:14.011]        // -> [DP_SELECT <= 0x00000008]
[12:59:14.011]      __var powered_down      = 0;
[12:59:14.011]        // -> [powered_down <= 0x00000000]
[12:59:14.011]      WriteDP(DP_SELECT, 0x00000000);
[12:59:14.014]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:59:14.014]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:59:14.016]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:59:14.016]        // -> [powered_down <= 0x00000001]
[12:59:14.016]    </block>
[12:59:14.016]    <control if="powered_down" while="" timeout="0" info="">
[12:59:14.016]      // if-block "powered_down"
[12:59:14.016]        // =>  TRUE
[12:59:14.016]      <block atomic="false" info="">
[12:59:14.016]        Message(0, "Debug/System power-up request sent");
[12:59:14.019]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:59:14.025]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:59:14.025]      </block>
[12:59:14.025]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:59:14.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:59:14.028]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:59:14.028]        // while-condition  =>  FALSE
[12:59:14.028]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:59:14.028]      </control>
[12:59:14.028]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:59:14.028]        // if-block "(__protocol & 0xFFFF) == 1"
[12:59:14.028]          // =>  FALSE
[12:59:14.028]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:59:14.028]      </control>
[12:59:14.028]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:59:14.028]        // if-block "(__protocol & 0xFFFF) == 2"
[12:59:14.028]          // =>  TRUE
[12:59:14.028]        <block atomic="false" info="">
[12:59:14.028]          Message(0, "executing SWD power up");
[12:59:14.033]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:59:14.034]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:59:14.034]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:59:14.036]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:59:14.036]        </block>
[12:59:14.036]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:59:14.036]      </control>
[12:59:14.036]      // end if-block "powered_down"
[12:59:14.036]    </control>
[12:59:14.036]    <block atomic="false" info="">
[12:59:14.036]      __var DEBUG_PORT_VAL    = 0;
[12:59:14.036]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:59:14.038]      __var ACCESS_POINT_VAL  = 0;
[12:59:14.038]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:59:14.038]      __ap = 1; 
[12:59:14.038]        // -> [__ap <= 0x00000001]
[12:59:14.038]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:59:14.042]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:59:14.042]      __ap = 4;
[12:59:14.042]        // -> [__ap <= 0x00000004]
[12:59:14.042]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:59:14.048]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:59:14.048]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:59:14.048]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:59:14.050]    </block>
[12:59:14.050]    <block atomic="false" info="">
[12:59:14.050]      __var nReset = 0x80;
[12:59:14.050]        // -> [nReset <= 0x00000080]
[12:59:14.052]      __var canReadPins = 0;
[12:59:14.052]        // -> [canReadPins <= 0x00000000]
[12:59:14.052]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:59:14.058]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:59:14.058]        // -> [canReadPins <= 0x00000001]
[12:59:14.058]    </block>
[12:59:14.058]    <control if="" while="1" timeout="200" info="">
[12:59:14.058]      // while "1"  (timeout="200")
[12:59:14.060]      // while-condition  =>  TRUE
[12:59:14.060]      // while "1"  (timeout="200")
[12:59:14.060]      // while-condition  =>  TRUE
[12:59:14.060]      // while "1"  (timeout="200")
[12:59:14.060]      // while-condition  =>  TRUE
[12:59:14.060]      // while "1"  (timeout="200")
[12:59:14.060]      // while-condition  =>  TRUE
[12:59:14.060]      // while "1"  (timeout="200")
[12:59:14.060]      // while-condition  =>  TRUE
[12:59:14.060]      // while "1"  (timeout="200")
[12:59:14.060]      // while-condition  =>  TRUE
[12:59:14.060]      // while "1"  (timeout="200")
[12:59:14.060]      // while-condition  =>  TRUE
[12:59:14.060]      // while "1"  (timeout="200")
[12:59:14.060]      // while-condition  =>  TRUE
[12:59:14.060]      // while "1"  (timeout="200")
[12:59:14.063]      // while-condition  =>  TRUE
[12:59:14.063]      // while "1"  (timeout="200")
[12:59:14.063]      // while-condition  =>  TRUE
[12:59:14.063]      // while "1"  (timeout="200")
[12:59:14.063]      // while-condition  =>  TRUE
[12:59:14.063]      // while "1"  (timeout="200")
[12:59:14.063]      // while-condition  =>  TRUE
[12:59:14.063]      // while "1"  (timeout="200")
[12:59:14.063]      // while-condition  =>  TRUE
[12:59:14.063]      // while "1"  (timeout="200")
[12:59:14.063]      // while-condition  =>  TRUE
[12:59:14.064]      // while "1"  (timeout="200")
[12:59:14.064]      // while-condition  =>  TRUE
[12:59:14.064]      // while "1"  (timeout="200")
[12:59:14.064]      // while-condition  =>  TRUE
[12:59:14.064]      // while "1"  (timeout="200")
[12:59:14.064]      // while-condition  =>  TRUE
[12:59:14.064]      // while "1"  (timeout="200")
[12:59:14.064]      // while-condition  =>  TRUE
[12:59:14.064]      // while "1"  (timeout="200")
[12:59:14.064]      // while-condition  =>  TRUE
[12:59:14.065]      // while "1"  (timeout="200")
[12:59:14.065]      // while-condition  =>  TRUE
[12:59:14.065]      // while "1"  (timeout="200")
[12:59:14.065]      // while-condition  =>  TRUE
[12:59:14.065]      // while "1"  (timeout="200")
[12:59:14.065]      // while-condition  =>  TRUE
[12:59:14.065]      // while "1"  (timeout="200")
[12:59:14.065]      // while-condition  =>  TRUE
[12:59:14.065]      // while "1"  (timeout="200")
[12:59:14.065]      // while-condition  =>  TRUE
[12:59:14.066]      // while "1"  (timeout="200")
[12:59:14.066]      // while-condition  =>  TRUE
[12:59:14.066]      // while "1"  (timeout="200")
[12:59:14.066]      // while-condition  =>  TRUE
[12:59:14.066]      // while "1"  (timeout="200")
[12:59:14.066]      // while-condition  =>  TRUE
[12:59:14.066]      // while "1"  (timeout="200")
[12:59:14.066]      // while-condition  =>  TRUE
[12:59:14.066]      // while "1"  (timeout="200")
[12:59:14.066]      // while-condition  =>  TRUE
[12:59:14.066]      // while "1"  (timeout="200")
[12:59:14.066]      // while-condition  =>  TRUE
[12:59:14.066]      // while "1"  (timeout="200")
[12:59:14.066]      // while-condition  =>  TRUE
[12:59:14.066]      // while "1"  (timeout="200")
[12:59:14.066]      // while-condition  =>  TRUE
[12:59:14.066]      // while "1"  (timeout="200")
[12:59:14.066]      // while-condition  =>  TRUE
[12:59:14.066]      // while "1"  (timeout="200")
[12:59:14.066]      // while-condition  =>  TRUE
[12:59:14.066]      // while "1"  (timeout="200")
[12:59:14.068]      // while-condition  =>  TRUE
[12:59:14.068]      // while "1"  (timeout="200")
[12:59:14.068]      // while  =>  TIMEOUT
[12:59:14.068]      // end while "1"
[12:59:14.068]    </control>
[12:59:14.068]    <control if="canReadPins" while="" timeout="0" info="">
[12:59:14.068]      // if-block "canReadPins"
[12:59:14.068]        // =>  TRUE
[12:59:14.068]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:59:14.068]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:59:14.068]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:59:14.068]        // while-condition  =>  FALSE
[12:59:14.068]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:59:14.068]      </control>
[12:59:14.068]      // end if-block "canReadPins"
[12:59:14.068]    </control>
[12:59:14.072]    <control if="!canReadPins" while="" timeout="0" info="">
[12:59:14.072]      // if-block "!canReadPins"
[12:59:14.072]        // =>  FALSE
[12:59:14.072]      // skip if-block "!canReadPins"
[12:59:14.072]    </control>
[12:59:14.072]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:59:14.072]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:59:14.072]        // =>  TRUE
[12:59:14.072]      <block atomic="false" info="">
[12:59:14.072]        WriteAP(0x00, 0x190008);
[12:59:14.075]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:59:14.075]        WriteAP(0xF0, 0x01);
[12:59:14.085]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:59:14.085]      </block>
[12:59:14.085]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:59:14.086]    </control>
[12:59:14.086]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:59:14.086]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:59:14.086]        // =>  FALSE
[12:59:14.086]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:59:14.086]    </control>
[12:59:14.086]    <block atomic="false" info="">
[12:59:14.086]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:59:14.089]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:59:14.089]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:59:14.089]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:59:14.089]      __ap = 0; //lets make sure we reset the access point selection
[12:59:14.089]        // -> [__ap <= 0x00000000]
[12:59:14.089]    </block>
[12:59:14.089]  </sequence>
[12:59:14.089]  
[12:59:14.117]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:59:14.117]  
[12:59:14.117]  <debugvars>
[12:59:14.117]    // Pre-defined
[12:59:14.117]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:59:14.117]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:59:14.117]    __dp=0x00000000
[12:59:14.121]    __ap=0x00000000
[12:59:14.121]    __traceout=0x00000000      (Trace Disabled)
[12:59:14.121]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:59:14.121]    __FlashAddr=0x00000000
[12:59:14.121]    __FlashLen=0x00000000
[12:59:14.121]    __FlashArg=0x00000000
[12:59:14.121]    __FlashOp=0x00000000
[12:59:14.121]    __Result=0x00000000
[12:59:14.121]  </debugvars>
[12:59:14.121]  
[12:59:14.121]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:59:14.121]    <block atomic="false" info="">
[12:59:14.121]      __var deviceID = 0;
[12:59:14.121]        // -> [deviceID <= 0x00000000]
[12:59:14.121]      __var version = 0;
[12:59:14.121]        // -> [version <= 0x00000000]
[12:59:14.121]      __var partNum = 0;
[12:59:14.121]        // -> [partNum <= 0x00000000]
[12:59:14.121]      __var manuf = 0;
[12:59:14.121]        // -> [manuf <= 0x00000000]
[12:59:14.121]      __var isMSPM0G1X0X_G3X0X = 0;
[12:59:14.121]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:59:14.121]      __var isProduction = 0;
[12:59:14.121]        // -> [isProduction <= 0x00000000]
[12:59:14.121]      __var continueId = 0;
[12:59:14.121]        // -> [continueId <= 0x00000000]
[12:59:14.121]      deviceID =   Read32(0x41C40004);
[12:59:14.126]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:59:14.126]        // -> [deviceID <= 0x2BB8802F]
[12:59:14.126]      version = deviceID >> 28;
[12:59:14.126]        // -> [version <= 0x00000002]
[12:59:14.129]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:59:14.129]        // -> [partNum <= 0x0000BB88]
[12:59:14.129]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:59:14.129]        // -> [manuf <= 0x00000017]
[12:59:14.129]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:59:14.129]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:59:14.129]      isProduction = (version > 0);
[12:59:14.129]        // -> [isProduction <= 0x00000001]
[12:59:14.129]    </block>
[12:59:14.129]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:59:14.129]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:59:14.129]        // =>  FALSE
[12:59:14.129]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:59:14.129]    </control>
[12:59:14.129]    <control if="continueId == 4" while="" timeout="0" info="">
[12:59:14.129]      // if-block "continueId == 4"
[12:59:14.129]        // =>  FALSE
[12:59:14.129]      // skip if-block "continueId == 4"
[12:59:14.129]    </control>
[12:59:14.129]    <control if="!isProduction" while="" timeout="0" info="">
[12:59:14.129]      // if-block "!isProduction"
[12:59:14.129]        // =>  FALSE
[12:59:14.129]      // skip if-block "!isProduction"
[12:59:14.129]    </control>
[12:59:14.129]  </sequence>
[12:59:14.129]  
[12:59:20.730]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:59:20.730]  
[12:59:20.740]  <debugvars>
[12:59:20.740]    // Pre-defined
[12:59:20.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:59:20.740]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:59:20.740]    __dp=0x00000000
[12:59:20.740]    __ap=0x00000000
[12:59:20.740]    __traceout=0x00000000      (Trace Disabled)
[12:59:20.740]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:59:20.740]    __FlashAddr=0x00000000
[12:59:20.740]    __FlashLen=0x00000000
[12:59:20.740]    __FlashArg=0x00000000
[12:59:20.740]    __FlashOp=0x00000000
[12:59:20.740]    __Result=0x00000000
[12:59:20.740]  </debugvars>
[12:59:20.740]  
[12:59:20.740]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:59:20.740]    <block atomic="false" info="">
[12:59:20.740]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:59:20.740]        // -> [isSWJ <= 0x00000001]
[12:59:20.740]      __var hasDormant = __protocol & 0x00020000;
[12:59:20.740]        // -> [hasDormant <= 0x00000000]
[12:59:20.740]      __var protType   = __protocol & 0x0000FFFF;
[12:59:20.742]        // -> [protType <= 0x00000002]
[12:59:20.742]    </block>
[12:59:20.742]    <control if="protType == 1" while="" timeout="0" info="">
[12:59:20.742]      // if-block "protType == 1"
[12:59:20.742]        // =>  FALSE
[12:59:20.742]      // skip if-block "protType == 1"
[12:59:20.742]    </control>
[12:59:20.742]    <control if="protType == 2" while="" timeout="0" info="">
[12:59:20.742]      // if-block "protType == 2"
[12:59:20.742]        // =>  TRUE
[12:59:20.742]      <control if="isSWJ" while="" timeout="0" info="">
[12:59:20.742]        // if-block "isSWJ"
[12:59:20.742]          // =>  TRUE
[12:59:20.742]        <control if="hasDormant" while="" timeout="0" info="">
[12:59:20.742]          // if-block "hasDormant"
[12:59:20.742]            // =>  FALSE
[12:59:20.742]          // skip if-block "hasDormant"
[12:59:20.742]        </control>
[12:59:20.742]        <control if="!hasDormant" while="" timeout="0" info="">
[12:59:20.742]          // if-block "!hasDormant"
[12:59:20.742]            // =>  TRUE
[12:59:20.742]          <block atomic="false" info="">
[12:59:20.744]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:59:20.746]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:59:20.746]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:59:20.746]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:59:20.746]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:59:20.749]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:59:20.749]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:59:20.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:59:20.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:59:20.754]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:59:20.754]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:59:20.756]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:59:20.756]          </block>
[12:59:20.756]          // end if-block "!hasDormant"
[12:59:20.756]        </control>
[12:59:20.756]        // end if-block "isSWJ"
[12:59:20.756]      </control>
[12:59:20.756]      <control if="!isSWJ" while="" timeout="0" info="">
[12:59:20.756]        // if-block "!isSWJ"
[12:59:20.757]          // =>  FALSE
[12:59:20.757]        // skip if-block "!isSWJ"
[12:59:20.757]      </control>
[12:59:20.757]      <block atomic="false" info="">
[12:59:20.757]        ReadDP(0x0);
[12:59:20.761]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:59:20.764]      </block>
[12:59:20.764]      // end if-block "protType == 2"
[12:59:20.764]    </control>
[12:59:20.764]  </sequence>
[12:59:20.764]  
[12:59:20.770]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:59:20.770]  
[12:59:20.770]  <debugvars>
[12:59:20.770]    // Pre-defined
[12:59:20.773]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:59:20.773]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:59:20.773]    __dp=0x00000000
[12:59:20.773]    __ap=0x00000000
[12:59:20.773]    __traceout=0x00000000      (Trace Disabled)
[12:59:20.773]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:59:20.773]    __FlashAddr=0x00000000
[12:59:20.773]    __FlashLen=0x00000000
[12:59:20.774]    __FlashArg=0x00000000
[12:59:20.774]    __FlashOp=0x00000000
[12:59:20.774]    __Result=0x00000000
[12:59:20.775]  </debugvars>
[12:59:20.775]  
[12:59:20.775]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:59:20.775]    <block atomic="false" info="">
[12:59:20.775]      __var SW_DP_ABORT       = 0x0;
[12:59:20.775]        // -> [SW_DP_ABORT <= 0x00000000]
[12:59:20.775]      __var DP_CTRL_STAT      = 0x4;
[12:59:20.775]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:59:20.775]      __var DP_SELECT         = 0x8;
[12:59:20.775]        // -> [DP_SELECT <= 0x00000008]
[12:59:20.775]      __var powered_down      = 0;
[12:59:20.775]        // -> [powered_down <= 0x00000000]
[12:59:20.775]      WriteDP(DP_SELECT, 0x00000000);
[12:59:20.777]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:59:20.777]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:59:20.777]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:59:20.777]        // -> [powered_down <= 0x00000001]
[12:59:20.777]    </block>
[12:59:20.777]    <control if="powered_down" while="" timeout="0" info="">
[12:59:20.777]      // if-block "powered_down"
[12:59:20.777]        // =>  TRUE
[12:59:20.777]      <block atomic="false" info="">
[12:59:20.777]        Message(0, "Debug/System power-up request sent");
[12:59:20.783]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:59:20.784]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:59:20.784]      </block>
[12:59:20.784]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:59:20.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:59:20.785]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:59:20.785]        // while-condition  =>  FALSE
[12:59:20.786]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:59:20.786]      </control>
[12:59:20.786]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:59:20.786]        // if-block "(__protocol & 0xFFFF) == 1"
[12:59:20.786]          // =>  FALSE
[12:59:20.786]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:59:20.786]      </control>
[12:59:20.786]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:59:20.786]        // if-block "(__protocol & 0xFFFF) == 2"
[12:59:20.786]          // =>  TRUE
[12:59:20.786]        <block atomic="false" info="">
[12:59:20.786]          Message(0, "executing SWD power up");
[12:59:20.786]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:59:20.790]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:59:20.790]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:59:20.790]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:59:20.790]        </block>
[12:59:20.790]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:59:20.790]      </control>
[12:59:20.790]      // end if-block "powered_down"
[12:59:20.790]    </control>
[12:59:20.790]    <block atomic="false" info="">
[12:59:20.790]      __var DEBUG_PORT_VAL    = 0;
[12:59:20.793]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:59:20.793]      __var ACCESS_POINT_VAL  = 0;
[12:59:20.793]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:59:20.793]      __ap = 1; 
[12:59:20.793]        // -> [__ap <= 0x00000001]
[12:59:20.793]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:59:20.796]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:59:20.796]      __ap = 4;
[12:59:20.796]        // -> [__ap <= 0x00000004]
[12:59:20.796]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:59:20.801]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:59:20.803]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:59:20.803]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:59:20.804]    </block>
[12:59:20.804]    <block atomic="false" info="">
[12:59:20.804]      __var nReset = 0x80;
[12:59:20.804]        // -> [nReset <= 0x00000080]
[12:59:20.804]      __var canReadPins = 0;
[12:59:20.804]        // -> [canReadPins <= 0x00000000]
[12:59:20.804]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:59:20.807]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:59:20.807]        // -> [canReadPins <= 0x00000001]
[12:59:20.807]    </block>
[12:59:20.807]    <control if="" while="1" timeout="200" info="">
[12:59:20.807]      // while "1"  (timeout="200")
[12:59:20.807]      // while-condition  =>  TRUE
[12:59:20.807]      // while "1"  (timeout="200")
[12:59:20.807]      // while-condition  =>  TRUE
[12:59:20.807]      // while "1"  (timeout="200")
[12:59:20.807]      // while-condition  =>  TRUE
[12:59:20.807]      // while "1"  (timeout="200")
[12:59:20.807]      // while-condition  =>  TRUE
[12:59:20.807]      // while "1"  (timeout="200")
[12:59:20.807]      // while-condition  =>  TRUE
[12:59:20.807]      // while "1"  (timeout="200")
[12:59:20.807]      // while-condition  =>  TRUE
[12:59:20.807]      // while "1"  (timeout="200")
[12:59:20.807]      // while-condition  =>  TRUE
[12:59:20.809]      // while "1"  (timeout="200")
[12:59:20.809]      // while-condition  =>  TRUE
[12:59:20.809]      // while "1"  (timeout="200")
[12:59:20.809]      // while-condition  =>  TRUE
[12:59:20.809]      // while "1"  (timeout="200")
[12:59:20.809]      // while-condition  =>  TRUE
[12:59:20.809]      // while "1"  (timeout="200")
[12:59:20.809]      // while-condition  =>  TRUE
[12:59:20.809]      // while "1"  (timeout="200")
[12:59:20.809]      // while-condition  =>  TRUE
[12:59:20.809]      // while "1"  (timeout="200")
[12:59:20.809]      // while-condition  =>  TRUE
[12:59:20.809]      // while "1"  (timeout="200")
[12:59:20.809]      // while-condition  =>  TRUE
[12:59:20.809]      // while "1"  (timeout="200")
[12:59:20.809]      // while-condition  =>  TRUE
[12:59:20.809]      // while "1"  (timeout="200")
[12:59:20.809]      // while-condition  =>  TRUE
[12:59:20.809]      // while "1"  (timeout="200")
[12:59:20.809]      // while-condition  =>  TRUE
[12:59:20.809]      // while "1"  (timeout="200")
[12:59:20.809]      // while-condition  =>  TRUE
[12:59:20.809]      // while "1"  (timeout="200")
[12:59:20.811]      // while-condition  =>  TRUE
[12:59:20.811]      // while "1"  (timeout="200")
[12:59:20.811]      // while-condition  =>  TRUE
[12:59:20.811]      // while "1"  (timeout="200")
[12:59:20.811]      // while-condition  =>  TRUE
[12:59:20.811]      // while "1"  (timeout="200")
[12:59:20.811]      // while-condition  =>  TRUE
[12:59:20.811]      // while "1"  (timeout="200")
[12:59:20.811]      // while-condition  =>  TRUE
[12:59:20.811]      // while "1"  (timeout="200")
[12:59:20.811]      // while-condition  =>  TRUE
[12:59:20.811]      // while "1"  (timeout="200")
[12:59:20.812]      // while-condition  =>  TRUE
[12:59:20.812]      // while "1"  (timeout="200")
[12:59:20.812]      // while-condition  =>  TRUE
[12:59:20.812]      // while "1"  (timeout="200")
[12:59:20.812]      // while-condition  =>  TRUE
[12:59:20.812]      // while "1"  (timeout="200")
[12:59:20.812]      // while-condition  =>  TRUE
[12:59:20.812]      // while "1"  (timeout="200")
[12:59:20.812]      // while-condition  =>  TRUE
[12:59:20.812]      // while "1"  (timeout="200")
[12:59:20.812]      // while-condition  =>  TRUE
[12:59:20.812]      // while "1"  (timeout="200")
[12:59:20.813]      // while-condition  =>  TRUE
[12:59:20.813]      // while "1"  (timeout="200")
[12:59:20.813]      // while-condition  =>  TRUE
[12:59:20.813]      // while "1"  (timeout="200")
[12:59:20.813]      // while-condition  =>  TRUE
[12:59:20.813]      // while "1"  (timeout="200")
[12:59:20.813]      // while-condition  =>  TRUE
[12:59:20.813]      // while "1"  (timeout="200")
[12:59:20.813]      // while-condition  =>  TRUE
[12:59:20.813]      // while "1"  (timeout="200")
[12:59:20.813]      // while-condition  =>  TRUE
[12:59:20.813]      // while "1"  (timeout="200")
[12:59:20.814]      // while-condition  =>  TRUE
[12:59:20.814]      // while "1"  (timeout="200")
[12:59:20.814]      // while-condition  =>  TRUE
[12:59:20.814]      // while "1"  (timeout="200")
[12:59:20.814]      // while-condition  =>  TRUE
[12:59:20.814]      // while "1"  (timeout="200")
[12:59:20.814]      // while-condition  =>  TRUE
[12:59:20.814]      // while "1"  (timeout="200")
[12:59:20.814]      // while-condition  =>  TRUE
[12:59:20.814]      // while "1"  (timeout="200")
[12:59:20.814]      // while-condition  =>  TRUE
[12:59:20.815]      // while "1"  (timeout="200")
[12:59:20.815]      // while-condition  =>  TRUE
[12:59:20.815]      // while "1"  (timeout="200")
[12:59:20.815]      // while-condition  =>  TRUE
[12:59:20.815]      // while "1"  (timeout="200")
[12:59:20.815]      // while-condition  =>  TRUE
[12:59:20.815]      // while "1"  (timeout="200")
[12:59:20.815]      // while-condition  =>  TRUE
[12:59:20.816]      // while "1"  (timeout="200")
[12:59:20.816]      // while-condition  =>  TRUE
[12:59:20.816]      // while "1"  (timeout="200")
[12:59:20.816]      // while-condition  =>  TRUE
[12:59:20.816]      // while "1"  (timeout="200")
[12:59:20.816]      // while-condition  =>  TRUE
[12:59:20.816]      // while "1"  (timeout="200")
[12:59:20.816]      // while-condition  =>  TRUE
[12:59:20.816]      // while "1"  (timeout="200")
[12:59:20.816]      // while-condition  =>  TRUE
[12:59:20.816]      // while "1"  (timeout="200")
[12:59:20.816]      // while-condition  =>  TRUE
[12:59:20.816]      // while "1"  (timeout="200")
[12:59:20.817]      // while-condition  =>  TRUE
[12:59:20.817]      // while "1"  (timeout="200")
[12:59:20.817]      // while  =>  TIMEOUT
[12:59:20.817]      // end while "1"
[12:59:20.817]    </control>
[12:59:20.817]    <control if="canReadPins" while="" timeout="0" info="">
[12:59:20.817]      // if-block "canReadPins"
[12:59:20.817]        // =>  TRUE
[12:59:20.817]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:59:20.817]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:59:20.819]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:59:20.819]        // while-condition  =>  FALSE
[12:59:20.819]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:59:20.819]      </control>
[12:59:20.819]      // end if-block "canReadPins"
[12:59:20.819]    </control>
[12:59:20.819]    <control if="!canReadPins" while="" timeout="0" info="">
[12:59:20.819]      // if-block "!canReadPins"
[12:59:20.819]        // =>  FALSE
[12:59:20.819]      // skip if-block "!canReadPins"
[12:59:20.819]    </control>
[12:59:20.819]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:59:20.819]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:59:20.819]        // =>  TRUE
[12:59:20.819]      <block atomic="false" info="">
[12:59:20.819]        WriteAP(0x00, 0x190008);
[12:59:20.825]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:59:20.825]        WriteAP(0xF0, 0x01);
[12:59:20.833]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:59:20.833]      </block>
[12:59:20.833]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:59:20.833]    </control>
[12:59:20.833]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:59:20.833]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:59:20.833]        // =>  FALSE
[12:59:20.833]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:59:20.833]    </control>
[12:59:20.833]    <block atomic="false" info="">
[12:59:20.833]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:59:20.835]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:59:20.835]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:59:20.835]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:59:20.835]      __ap = 0; //lets make sure we reset the access point selection
[12:59:20.835]        // -> [__ap <= 0x00000000]
[12:59:20.835]    </block>
[12:59:20.835]  </sequence>
[12:59:20.835]  
[12:59:20.857]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:59:20.857]  
[12:59:20.857]  <debugvars>
[12:59:20.857]    // Pre-defined
[12:59:20.857]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:59:20.857]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:59:20.857]    __dp=0x00000000
[12:59:20.857]    __ap=0x00000000
[12:59:20.857]    __traceout=0x00000000      (Trace Disabled)
[12:59:20.857]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:59:20.857]    __FlashAddr=0x00000000
[12:59:20.857]    __FlashLen=0x00000000
[12:59:20.857]    __FlashArg=0x00000000
[12:59:20.859]    __FlashOp=0x00000000
[12:59:20.859]    __Result=0x00000000
[12:59:20.859]  </debugvars>
[12:59:20.859]  
[12:59:20.859]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:59:20.859]    <block atomic="false" info="">
[12:59:20.859]      __var deviceID = 0;
[12:59:20.859]        // -> [deviceID <= 0x00000000]
[12:59:20.859]      __var version = 0;
[12:59:20.859]        // -> [version <= 0x00000000]
[12:59:20.859]      __var partNum = 0;
[12:59:20.859]        // -> [partNum <= 0x00000000]
[12:59:20.860]      __var manuf = 0;
[12:59:20.860]        // -> [manuf <= 0x00000000]
[12:59:20.860]      __var isMSPM0G1X0X_G3X0X = 0;
[12:59:20.860]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:59:20.860]      __var isProduction = 0;
[12:59:20.860]        // -> [isProduction <= 0x00000000]
[12:59:20.860]      __var continueId = 0;
[12:59:20.860]        // -> [continueId <= 0x00000000]
[12:59:20.860]      deviceID =   Read32(0x41C40004);
[12:59:20.865]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:59:20.866]        // -> [deviceID <= 0x2BB8802F]
[12:59:20.866]      version = deviceID >> 28;
[12:59:20.866]        // -> [version <= 0x00000002]
[12:59:20.866]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:59:20.866]        // -> [partNum <= 0x0000BB88]
[12:59:20.866]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:59:20.866]        // -> [manuf <= 0x00000017]
[12:59:20.866]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:59:20.866]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:59:20.866]      isProduction = (version > 0);
[12:59:20.866]        // -> [isProduction <= 0x00000001]
[12:59:20.866]    </block>
[12:59:20.866]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:59:20.866]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:59:20.866]        // =>  FALSE
[12:59:20.866]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:59:20.866]    </control>
[12:59:20.866]    <control if="continueId == 4" while="" timeout="0" info="">
[12:59:20.866]      // if-block "continueId == 4"
[12:59:20.866]        // =>  FALSE
[12:59:20.866]      // skip if-block "continueId == 4"
[12:59:20.866]    </control>
[12:59:20.868]    <control if="!isProduction" while="" timeout="0" info="">
[12:59:20.868]      // if-block "!isProduction"
[12:59:20.868]        // =>  FALSE
[12:59:20.868]      // skip if-block "!isProduction"
[12:59:20.868]    </control>
[12:59:20.868]  </sequence>
[12:59:20.868]  
[13:00:15.780]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:00:15.780]  
[13:00:15.789]  <debugvars>
[13:00:15.789]    // Pre-defined
[13:00:15.789]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:00:15.789]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:00:15.789]    __dp=0x00000000
[13:00:15.789]    __ap=0x00000000
[13:00:15.789]    __traceout=0x00000000      (Trace Disabled)
[13:00:15.789]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:00:15.789]    __FlashAddr=0x00000000
[13:00:15.789]    __FlashLen=0x00000000
[13:00:15.789]    __FlashArg=0x00000000
[13:00:15.789]    __FlashOp=0x00000000
[13:00:15.789]    __Result=0x00000000
[13:00:15.789]  </debugvars>
[13:00:15.789]  
[13:00:15.789]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:00:15.789]    <block atomic="false" info="">
[13:00:15.789]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:00:15.789]        // -> [isSWJ <= 0x00000001]
[13:00:15.789]      __var hasDormant = __protocol & 0x00020000;
[13:00:15.789]        // -> [hasDormant <= 0x00000000]
[13:00:15.789]      __var protType   = __protocol & 0x0000FFFF;
[13:00:15.789]        // -> [protType <= 0x00000002]
[13:00:15.789]    </block>
[13:00:15.789]    <control if="protType == 1" while="" timeout="0" info="">
[13:00:15.789]      // if-block "protType == 1"
[13:00:15.789]        // =>  FALSE
[13:00:15.789]      // skip if-block "protType == 1"
[13:00:15.789]    </control>
[13:00:15.789]    <control if="protType == 2" while="" timeout="0" info="">
[13:00:15.789]      // if-block "protType == 2"
[13:00:15.789]        // =>  TRUE
[13:00:15.789]      <control if="isSWJ" while="" timeout="0" info="">
[13:00:15.792]        // if-block "isSWJ"
[13:00:15.792]          // =>  TRUE
[13:00:15.792]        <control if="hasDormant" while="" timeout="0" info="">
[13:00:15.792]          // if-block "hasDormant"
[13:00:15.792]            // =>  FALSE
[13:00:15.792]          // skip if-block "hasDormant"
[13:00:15.792]        </control>
[13:00:15.792]        <control if="!hasDormant" while="" timeout="0" info="">
[13:00:15.792]          // if-block "!hasDormant"
[13:00:15.792]            // =>  TRUE
[13:00:15.792]          <block atomic="false" info="">
[13:00:15.792]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:00:15.794]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:00:15.794]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:00:15.801]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:00:15.801]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:00:15.805]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:00:15.805]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:00:15.805]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:00:15.805]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:00:15.808]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:00:15.808]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:00:15.812]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:00:15.812]          </block>
[13:00:15.812]          // end if-block "!hasDormant"
[13:00:15.812]        </control>
[13:00:15.812]        // end if-block "isSWJ"
[13:00:15.812]      </control>
[13:00:15.812]      <control if="!isSWJ" while="" timeout="0" info="">
[13:00:15.812]        // if-block "!isSWJ"
[13:00:15.812]          // =>  FALSE
[13:00:15.814]        // skip if-block "!isSWJ"
[13:00:15.814]      </control>
[13:00:15.814]      <block atomic="false" info="">
[13:00:15.814]        ReadDP(0x0);
[13:00:15.816]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:00:15.816]      </block>
[13:00:15.816]      // end if-block "protType == 2"
[13:00:15.816]    </control>
[13:00:15.816]  </sequence>
[13:00:15.816]  
[13:00:15.818]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:00:15.818]  
[13:00:15.818]  <debugvars>
[13:00:15.818]    // Pre-defined
[13:00:15.818]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:00:15.818]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:00:15.818]    __dp=0x00000000
[13:00:15.818]    __ap=0x00000000
[13:00:15.818]    __traceout=0x00000000      (Trace Disabled)
[13:00:15.818]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:00:15.818]    __FlashAddr=0x00000000
[13:00:15.818]    __FlashLen=0x00000000
[13:00:15.818]    __FlashArg=0x00000000
[13:00:15.818]    __FlashOp=0x00000000
[13:00:15.818]    __Result=0x00000000
[13:00:15.818]  </debugvars>
[13:00:15.818]  
[13:00:15.820]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:00:15.820]    <block atomic="false" info="">
[13:00:15.820]      __var SW_DP_ABORT       = 0x0;
[13:00:15.820]        // -> [SW_DP_ABORT <= 0x00000000]
[13:00:15.820]      __var DP_CTRL_STAT      = 0x4;
[13:00:15.820]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:00:15.820]      __var DP_SELECT         = 0x8;
[13:00:15.820]        // -> [DP_SELECT <= 0x00000008]
[13:00:15.820]      __var powered_down      = 0;
[13:00:15.820]        // -> [powered_down <= 0x00000000]
[13:00:15.820]      WriteDP(DP_SELECT, 0x00000000);
[13:00:15.822]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:00:15.822]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:00:15.824]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:00:15.824]        // -> [powered_down <= 0x00000001]
[13:00:15.824]    </block>
[13:00:15.824]    <control if="powered_down" while="" timeout="0" info="">
[13:00:15.824]      // if-block "powered_down"
[13:00:15.824]        // =>  TRUE
[13:00:15.824]      <block atomic="false" info="">
[13:00:15.824]        Message(0, "Debug/System power-up request sent");
[13:00:15.829]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:00:15.829]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:00:15.829]      </block>
[13:00:15.829]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:00:15.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:00:15.832]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:00:15.832]        // while-condition  =>  FALSE
[13:00:15.833]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:00:15.833]      </control>
[13:00:15.833]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:00:15.833]        // if-block "(__protocol & 0xFFFF) == 1"
[13:00:15.833]          // =>  FALSE
[13:00:15.833]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:00:15.833]      </control>
[13:00:15.833]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:00:15.833]        // if-block "(__protocol & 0xFFFF) == 2"
[13:00:15.833]          // =>  TRUE
[13:00:15.833]        <block atomic="false" info="">
[13:00:15.834]          Message(0, "executing SWD power up");
[13:00:15.835]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:00:15.837]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:00:15.837]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:00:15.839]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:00:15.839]        </block>
[13:00:15.839]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:00:15.839]      </control>
[13:00:15.839]      // end if-block "powered_down"
[13:00:15.839]    </control>
[13:00:15.839]    <block atomic="false" info="">
[13:00:15.839]      __var DEBUG_PORT_VAL    = 0;
[13:00:15.839]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:00:15.839]      __var ACCESS_POINT_VAL  = 0;
[13:00:15.839]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:00:15.841]      __ap = 1; 
[13:00:15.841]        // -> [__ap <= 0x00000001]
[13:00:15.841]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:00:15.842]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:00:15.845]      __ap = 4;
[13:00:15.845]        // -> [__ap <= 0x00000004]
[13:00:15.845]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:00:15.849]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:00:15.849]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:00:15.849]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:00:15.853]    </block>
[13:00:15.853]    <block atomic="false" info="">
[13:00:15.853]      __var nReset = 0x80;
[13:00:15.853]        // -> [nReset <= 0x00000080]
[13:00:15.854]      __var canReadPins = 0;
[13:00:15.854]        // -> [canReadPins <= 0x00000000]
[13:00:15.854]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:00:15.855]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:00:15.855]        // -> [canReadPins <= 0x00000001]
[13:00:15.855]    </block>
[13:00:15.855]    <control if="" while="1" timeout="200" info="">
[13:00:15.855]      // while "1"  (timeout="200")
[13:00:15.855]      // while-condition  =>  TRUE
[13:00:15.855]      // while "1"  (timeout="200")
[13:00:15.855]      // while-condition  =>  TRUE
[13:00:15.855]      // while "1"  (timeout="200")
[13:00:15.855]      // while-condition  =>  TRUE
[13:00:15.857]      // while "1"  (timeout="200")
[13:00:15.857]      // while-condition  =>  TRUE
[13:00:15.857]      // while "1"  (timeout="200")
[13:00:15.857]      // while-condition  =>  TRUE
[13:00:15.857]      // while "1"  (timeout="200")
[13:00:15.857]      // while-condition  =>  TRUE
[13:00:15.857]      // while "1"  (timeout="200")
[13:00:15.857]      // while-condition  =>  TRUE
[13:00:15.858]      // while "1"  (timeout="200")
[13:00:15.858]      // while-condition  =>  TRUE
[13:00:15.858]      // while "1"  (timeout="200")
[13:00:15.858]      // while-condition  =>  TRUE
[13:00:15.858]      // while "1"  (timeout="200")
[13:00:15.858]      // while-condition  =>  TRUE
[13:00:15.858]      // while "1"  (timeout="200")
[13:00:15.858]      // while-condition  =>  TRUE
[13:00:15.858]      // while "1"  (timeout="200")
[13:00:15.858]      // while-condition  =>  TRUE
[13:00:15.859]      // while "1"  (timeout="200")
[13:00:15.859]      // while-condition  =>  TRUE
[13:00:15.859]      // while "1"  (timeout="200")
[13:00:15.859]      // while-condition  =>  TRUE
[13:00:15.859]      // while "1"  (timeout="200")
[13:00:15.859]      // while-condition  =>  TRUE
[13:00:15.859]      // while "1"  (timeout="200")
[13:00:15.859]      // while-condition  =>  TRUE
[13:00:15.859]      // while "1"  (timeout="200")
[13:00:15.859]      // while-condition  =>  TRUE
[13:00:15.859]      // while "1"  (timeout="200")
[13:00:15.859]      // while-condition  =>  TRUE
[13:00:15.859]      // while "1"  (timeout="200")
[13:00:15.859]      // while-condition  =>  TRUE
[13:00:15.859]      // while "1"  (timeout="200")
[13:00:15.859]      // while-condition  =>  TRUE
[13:00:15.861]      // while "1"  (timeout="200")
[13:00:15.861]      // while-condition  =>  TRUE
[13:00:15.861]      // while "1"  (timeout="200")
[13:00:15.861]      // while-condition  =>  TRUE
[13:00:15.861]      // while "1"  (timeout="200")
[13:00:15.861]      // while-condition  =>  TRUE
[13:00:15.861]      // while "1"  (timeout="200")
[13:00:15.861]      // while-condition  =>  TRUE
[13:00:15.861]      // while "1"  (timeout="200")
[13:00:15.861]      // while-condition  =>  TRUE
[13:00:15.862]      // while "1"  (timeout="200")
[13:00:15.862]      // while-condition  =>  TRUE
[13:00:15.862]      // while "1"  (timeout="200")
[13:00:15.862]      // while-condition  =>  TRUE
[13:00:15.862]      // while "1"  (timeout="200")
[13:00:15.862]      // while-condition  =>  TRUE
[13:00:15.862]      // while "1"  (timeout="200")
[13:00:15.862]      // while-condition  =>  TRUE
[13:00:15.862]      // while "1"  (timeout="200")
[13:00:15.862]      // while-condition  =>  TRUE
[13:00:15.862]      // while "1"  (timeout="200")
[13:00:15.862]      // while-condition  =>  TRUE
[13:00:15.862]      // while "1"  (timeout="200")
[13:00:15.863]      // while-condition  =>  TRUE
[13:00:15.863]      // while "1"  (timeout="200")
[13:00:15.863]      // while-condition  =>  TRUE
[13:00:15.863]      // while "1"  (timeout="200")
[13:00:15.863]      // while-condition  =>  TRUE
[13:00:15.863]      // while "1"  (timeout="200")
[13:00:15.863]      // while-condition  =>  TRUE
[13:00:15.863]      // while "1"  (timeout="200")
[13:00:15.863]      // while-condition  =>  TRUE
[13:00:15.863]      // while "1"  (timeout="200")
[13:00:15.863]      // while-condition  =>  TRUE
[13:00:15.863]      // while "1"  (timeout="200")
[13:00:15.863]      // while-condition  =>  TRUE
[13:00:15.863]      // while "1"  (timeout="200")
[13:00:15.863]      // while-condition  =>  TRUE
[13:00:15.863]      // while "1"  (timeout="200")
[13:00:15.864]      // while-condition  =>  TRUE
[13:00:15.864]      // while "1"  (timeout="200")
[13:00:15.864]      // while  =>  TIMEOUT
[13:00:15.864]      // end while "1"
[13:00:15.865]    </control>
[13:00:15.865]    <control if="canReadPins" while="" timeout="0" info="">
[13:00:15.865]      // if-block "canReadPins"
[13:00:15.865]        // =>  TRUE
[13:00:15.865]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:00:15.865]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:00:15.867]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:00:15.867]        // while-condition  =>  FALSE
[13:00:15.867]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:00:15.867]      </control>
[13:00:15.867]      // end if-block "canReadPins"
[13:00:15.867]    </control>
[13:00:15.867]    <control if="!canReadPins" while="" timeout="0" info="">
[13:00:15.869]      // if-block "!canReadPins"
[13:00:15.869]        // =>  FALSE
[13:00:15.869]      // skip if-block "!canReadPins"
[13:00:15.869]    </control>
[13:00:15.869]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:00:15.869]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:00:15.869]        // =>  TRUE
[13:00:15.869]      <block atomic="false" info="">
[13:00:15.869]        WriteAP(0x00, 0x190008);
[13:00:15.871]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:00:15.871]        WriteAP(0xF0, 0x01);
[13:00:15.882]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:00:15.882]      </block>
[13:00:15.882]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:00:15.882]    </control>
[13:00:15.882]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:00:15.882]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:00:15.882]        // =>  FALSE
[13:00:15.882]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:00:15.882]    </control>
[13:00:15.882]    <block atomic="false" info="">
[13:00:15.882]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:00:15.886]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:00:15.886]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:00:15.886]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:00:15.888]      __ap = 0; //lets make sure we reset the access point selection
[13:00:15.888]        // -> [__ap <= 0x00000000]
[13:00:15.888]    </block>
[13:00:15.888]  </sequence>
[13:00:15.888]  
[13:00:15.927]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:00:15.927]  
[13:00:15.927]  <debugvars>
[13:00:15.927]    // Pre-defined
[13:00:15.927]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:00:15.930]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:00:15.930]    __dp=0x00000000
[13:00:15.930]    __ap=0x00000000
[13:00:15.930]    __traceout=0x00000000      (Trace Disabled)
[13:00:15.930]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:00:15.930]    __FlashAddr=0x00000000
[13:00:15.930]    __FlashLen=0x00000000
[13:00:15.930]    __FlashArg=0x00000000
[13:00:15.931]    __FlashOp=0x00000000
[13:00:15.931]    __Result=0x00000000
[13:00:15.931]  </debugvars>
[13:00:15.931]  
[13:00:15.931]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:00:15.931]    <block atomic="false" info="">
[13:00:15.931]      __var deviceID = 0;
[13:00:15.931]        // -> [deviceID <= 0x00000000]
[13:00:15.931]      __var version = 0;
[13:00:15.931]        // -> [version <= 0x00000000]
[13:00:15.931]      __var partNum = 0;
[13:00:15.931]        // -> [partNum <= 0x00000000]
[13:00:15.931]      __var manuf = 0;
[13:00:15.931]        // -> [manuf <= 0x00000000]
[13:00:15.931]      __var isMSPM0G1X0X_G3X0X = 0;
[13:00:15.931]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:00:15.931]      __var isProduction = 0;
[13:00:15.931]        // -> [isProduction <= 0x00000000]
[13:00:15.931]      __var continueId = 0;
[13:00:15.931]        // -> [continueId <= 0x00000000]
[13:00:15.931]      deviceID =   Read32(0x41C40004);
[13:00:15.936]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:00:15.936]        // -> [deviceID <= 0x2BB8802F]
[13:00:15.936]      version = deviceID >> 28;
[13:00:15.936]        // -> [version <= 0x00000002]
[13:00:15.936]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:00:15.936]        // -> [partNum <= 0x0000BB88]
[13:00:15.936]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:00:15.936]        // -> [manuf <= 0x00000017]
[13:00:15.939]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:00:15.939]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:00:15.939]      isProduction = (version > 0);
[13:00:15.939]        // -> [isProduction <= 0x00000001]
[13:00:15.939]    </block>
[13:00:15.939]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:00:15.939]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:00:15.939]        // =>  FALSE
[13:00:15.939]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:00:15.939]    </control>
[13:00:15.939]    <control if="continueId == 4" while="" timeout="0" info="">
[13:00:15.939]      // if-block "continueId == 4"
[13:00:15.939]        // =>  FALSE
[13:00:15.939]      // skip if-block "continueId == 4"
[13:00:15.939]    </control>
[13:00:15.939]    <control if="!isProduction" while="" timeout="0" info="">
[13:00:15.939]      // if-block "!isProduction"
[13:00:15.939]        // =>  FALSE
[13:00:15.939]      // skip if-block "!isProduction"
[13:00:15.939]    </control>
[13:00:15.939]  </sequence>
[13:00:15.939]  
[13:00:22.869]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:00:22.869]  
[13:00:22.869]  <debugvars>
[13:00:22.869]    // Pre-defined
[13:00:22.869]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:00:22.869]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:00:22.869]    __dp=0x00000000
[13:00:22.869]    __ap=0x00000000
[13:00:22.869]    __traceout=0x00000000      (Trace Disabled)
[13:00:22.869]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:00:22.869]    __FlashAddr=0x00000000
[13:00:22.869]    __FlashLen=0x00000000
[13:00:22.869]    __FlashArg=0x00000000
[13:00:22.869]    __FlashOp=0x00000000
[13:00:22.869]    __Result=0x00000000
[13:00:22.869]  </debugvars>
[13:00:22.869]  
[13:00:22.869]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:00:22.869]    <block atomic="false" info="">
[13:00:22.869]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:00:22.872]        // -> [isSWJ <= 0x00000001]
[13:00:22.872]      __var hasDormant = __protocol & 0x00020000;
[13:00:22.872]        // -> [hasDormant <= 0x00000000]
[13:00:22.872]      __var protType   = __protocol & 0x0000FFFF;
[13:00:22.872]        // -> [protType <= 0x00000002]
[13:00:22.872]    </block>
[13:00:22.872]    <control if="protType == 1" while="" timeout="0" info="">
[13:00:22.872]      // if-block "protType == 1"
[13:00:22.873]        // =>  FALSE
[13:00:22.873]      // skip if-block "protType == 1"
[13:00:22.873]    </control>
[13:00:22.873]    <control if="protType == 2" while="" timeout="0" info="">
[13:00:22.873]      // if-block "protType == 2"
[13:00:22.873]        // =>  TRUE
[13:00:22.873]      <control if="isSWJ" while="" timeout="0" info="">
[13:00:22.873]        // if-block "isSWJ"
[13:00:22.873]          // =>  TRUE
[13:00:22.873]        <control if="hasDormant" while="" timeout="0" info="">
[13:00:22.874]          // if-block "hasDormant"
[13:00:22.874]            // =>  FALSE
[13:00:22.874]          // skip if-block "hasDormant"
[13:00:22.874]        </control>
[13:00:22.874]        <control if="!hasDormant" while="" timeout="0" info="">
[13:00:22.874]          // if-block "!hasDormant"
[13:00:22.874]            // =>  TRUE
[13:00:22.874]          <block atomic="false" info="">
[13:00:22.874]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:00:22.877]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:00:22.877]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:00:22.877]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:00:22.877]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:00:22.881]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:00:22.881]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:00:22.883]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:00:22.883]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:00:22.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:00:22.885]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:00:22.887]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:00:22.887]          </block>
[13:00:22.887]          // end if-block "!hasDormant"
[13:00:22.887]        </control>
[13:00:22.887]        // end if-block "isSWJ"
[13:00:22.887]      </control>
[13:00:22.887]      <control if="!isSWJ" while="" timeout="0" info="">
[13:00:22.887]        // if-block "!isSWJ"
[13:00:22.887]          // =>  FALSE
[13:00:22.887]        // skip if-block "!isSWJ"
[13:00:22.887]      </control>
[13:00:22.887]      <block atomic="false" info="">
[13:00:22.887]        ReadDP(0x0);
[13:00:22.890]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:00:22.890]      </block>
[13:00:22.890]      // end if-block "protType == 2"
[13:00:22.893]    </control>
[13:00:22.893]  </sequence>
[13:00:22.893]  
[13:00:22.895]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:00:22.895]  
[13:00:22.895]  <debugvars>
[13:00:22.895]    // Pre-defined
[13:00:22.897]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:00:22.897]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:00:22.897]    __dp=0x00000000
[13:00:22.897]    __ap=0x00000000
[13:00:22.897]    __traceout=0x00000000      (Trace Disabled)
[13:00:22.897]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:00:22.897]    __FlashAddr=0x00000000
[13:00:22.898]    __FlashLen=0x00000000
[13:00:22.898]    __FlashArg=0x00000000
[13:00:22.898]    __FlashOp=0x00000000
[13:00:22.898]    __Result=0x00000000
[13:00:22.898]  </debugvars>
[13:00:22.898]  
[13:00:22.898]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:00:22.898]    <block atomic="false" info="">
[13:00:22.898]      __var SW_DP_ABORT       = 0x0;
[13:00:22.899]        // -> [SW_DP_ABORT <= 0x00000000]
[13:00:22.899]      __var DP_CTRL_STAT      = 0x4;
[13:00:22.899]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:00:22.899]      __var DP_SELECT         = 0x8;
[13:00:22.899]        // -> [DP_SELECT <= 0x00000008]
[13:00:22.899]      __var powered_down      = 0;
[13:00:22.899]        // -> [powered_down <= 0x00000000]
[13:00:22.899]      WriteDP(DP_SELECT, 0x00000000);
[13:00:22.901]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:00:22.901]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:00:22.902]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:00:22.902]        // -> [powered_down <= 0x00000001]
[13:00:22.902]    </block>
[13:00:22.902]    <control if="powered_down" while="" timeout="0" info="">
[13:00:22.902]      // if-block "powered_down"
[13:00:22.902]        // =>  TRUE
[13:00:22.902]      <block atomic="false" info="">
[13:00:22.902]        Message(0, "Debug/System power-up request sent");
[13:00:22.904]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:00:22.908]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:00:22.908]      </block>
[13:00:22.908]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:00:22.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:00:22.915]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:00:22.915]        // while-condition  =>  FALSE
[13:00:22.915]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:00:22.915]      </control>
[13:00:22.915]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:00:22.915]        // if-block "(__protocol & 0xFFFF) == 1"
[13:00:22.915]          // =>  FALSE
[13:00:22.915]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:00:22.915]      </control>
[13:00:22.915]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:00:22.917]        // if-block "(__protocol & 0xFFFF) == 2"
[13:00:22.917]          // =>  TRUE
[13:00:22.917]        <block atomic="false" info="">
[13:00:22.917]          Message(0, "executing SWD power up");
[13:00:22.918]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:00:22.918]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:00:22.918]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:00:22.918]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:00:22.918]        </block>
[13:00:22.918]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:00:22.918]      </control>
[13:00:22.918]      // end if-block "powered_down"
[13:00:22.922]    </control>
[13:00:22.922]    <block atomic="false" info="">
[13:00:22.922]      __var DEBUG_PORT_VAL    = 0;
[13:00:22.922]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:00:22.922]      __var ACCESS_POINT_VAL  = 0;
[13:00:22.922]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:00:22.922]      __ap = 1; 
[13:00:22.922]        // -> [__ap <= 0x00000001]
[13:00:22.922]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:00:22.926]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:00:22.926]      __ap = 4;
[13:00:22.926]        // -> [__ap <= 0x00000004]
[13:00:22.926]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:00:22.936]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:00:22.936]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:00:22.936]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:00:22.939]    </block>
[13:00:22.939]    <block atomic="false" info="">
[13:00:22.939]      __var nReset = 0x80;
[13:00:22.939]        // -> [nReset <= 0x00000080]
[13:00:22.939]      __var canReadPins = 0;
[13:00:22.939]        // -> [canReadPins <= 0x00000000]
[13:00:22.939]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:00:22.943]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:00:22.943]        // -> [canReadPins <= 0x00000001]
[13:00:22.943]    </block>
[13:00:22.943]    <control if="" while="1" timeout="200" info="">
[13:00:22.943]      // while "1"  (timeout="200")
[13:00:22.943]      // while-condition  =>  TRUE
[13:00:22.943]      // while "1"  (timeout="200")
[13:00:22.943]      // while-condition  =>  TRUE
[13:00:22.943]      // while "1"  (timeout="200")
[13:00:22.943]      // while-condition  =>  TRUE
[13:00:22.944]      // while "1"  (timeout="200")
[13:00:22.944]      // while-condition  =>  TRUE
[13:00:22.944]      // while "1"  (timeout="200")
[13:00:22.944]      // while-condition  =>  TRUE
[13:00:22.944]      // while "1"  (timeout="200")
[13:00:22.944]      // while-condition  =>  TRUE
[13:00:22.944]      // while "1"  (timeout="200")
[13:00:22.944]      // while-condition  =>  TRUE
[13:00:22.944]      // while "1"  (timeout="200")
[13:00:22.944]      // while-condition  =>  TRUE
[13:00:22.945]      // while "1"  (timeout="200")
[13:00:22.945]      // while-condition  =>  TRUE
[13:00:22.945]      // while "1"  (timeout="200")
[13:00:22.945]      // while-condition  =>  TRUE
[13:00:22.945]      // while "1"  (timeout="200")
[13:00:22.945]      // while-condition  =>  TRUE
[13:00:22.945]      // while "1"  (timeout="200")
[13:00:22.945]      // while-condition  =>  TRUE
[13:00:22.945]      // while "1"  (timeout="200")
[13:00:22.945]      // while-condition  =>  TRUE
[13:00:22.946]      // while "1"  (timeout="200")
[13:00:22.946]      // while-condition  =>  TRUE
[13:00:22.946]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.947]      // while "1"  (timeout="200")
[13:00:22.947]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.951]      // while-condition  =>  TRUE
[13:00:22.951]      // while "1"  (timeout="200")
[13:00:22.954]      // while-condition  =>  TRUE
[13:00:22.954]      // while "1"  (timeout="200")
[13:00:22.954]      // while-condition  =>  TRUE
[13:00:22.954]      // while "1"  (timeout="200")
[13:00:22.954]      // while-condition  =>  TRUE
[13:00:22.954]      // while "1"  (timeout="200")
[13:00:22.954]      // while-condition  =>  TRUE
[13:00:22.954]      // while "1"  (timeout="200")
[13:00:22.954]      // while-condition  =>  TRUE
[13:00:22.954]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.955]      // while-condition  =>  TRUE
[13:00:22.955]      // while "1"  (timeout="200")
[13:00:22.958]      // while-condition  =>  TRUE
[13:00:22.958]      // while "1"  (timeout="200")
[13:00:22.958]      // while  =>  TIMEOUT
[13:00:22.958]      // end while "1"
[13:00:22.958]    </control>
[13:00:22.958]    <control if="canReadPins" while="" timeout="0" info="">
[13:00:22.958]      // if-block "canReadPins"
[13:00:22.958]        // =>  TRUE
[13:00:22.958]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:00:22.958]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:00:22.958]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:00:22.958]        // while-condition  =>  FALSE
[13:00:22.958]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:00:22.958]      </control>
[13:00:22.958]      // end if-block "canReadPins"
[13:00:22.958]    </control>
[13:00:22.958]    <control if="!canReadPins" while="" timeout="0" info="">
[13:00:22.958]      // if-block "!canReadPins"
[13:00:22.958]        // =>  FALSE
[13:00:22.962]      // skip if-block "!canReadPins"
[13:00:22.962]    </control>
[13:00:22.962]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:00:22.962]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:00:22.962]        // =>  TRUE
[13:00:22.962]      <block atomic="false" info="">
[13:00:22.962]        WriteAP(0x00, 0x190008);
[13:00:22.965]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:00:22.965]        WriteAP(0xF0, 0x01);
[13:00:22.969]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:00:22.969]      </block>
[13:00:22.969]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:00:22.969]    </control>
[13:00:22.969]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:00:22.969]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:00:22.969]        // =>  FALSE
[13:00:22.969]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:00:22.969]    </control>
[13:00:22.969]    <block atomic="false" info="">
[13:00:22.969]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:00:22.970]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:00:22.974]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:00:22.974]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:00:22.975]      __ap = 0; //lets make sure we reset the access point selection
[13:00:22.975]        // -> [__ap <= 0x00000000]
[13:00:22.975]    </block>
[13:00:22.975]  </sequence>
[13:00:22.975]  
[13:00:23.000]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:00:23.000]  
[13:00:23.000]  <debugvars>
[13:00:23.004]    // Pre-defined
[13:00:23.004]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:00:23.004]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:00:23.004]    __dp=0x00000000
[13:00:23.004]    __ap=0x00000000
[13:00:23.004]    __traceout=0x00000000      (Trace Disabled)
[13:00:23.005]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:00:23.005]    __FlashAddr=0x00000000
[13:00:23.005]    __FlashLen=0x00000000
[13:00:23.005]    __FlashArg=0x00000000
[13:00:23.005]    __FlashOp=0x00000000
[13:00:23.005]    __Result=0x00000000
[13:00:23.005]  </debugvars>
[13:00:23.005]  
[13:00:23.005]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:00:23.005]    <block atomic="false" info="">
[13:00:23.005]      __var deviceID = 0;
[13:00:23.006]        // -> [deviceID <= 0x00000000]
[13:00:23.006]      __var version = 0;
[13:00:23.006]        // -> [version <= 0x00000000]
[13:00:23.006]      __var partNum = 0;
[13:00:23.006]        // -> [partNum <= 0x00000000]
[13:00:23.006]      __var manuf = 0;
[13:00:23.006]        // -> [manuf <= 0x00000000]
[13:00:23.006]      __var isMSPM0G1X0X_G3X0X = 0;
[13:00:23.006]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:00:23.006]      __var isProduction = 0;
[13:00:23.006]        // -> [isProduction <= 0x00000000]
[13:00:23.006]      __var continueId = 0;
[13:00:23.006]        // -> [continueId <= 0x00000000]
[13:00:23.006]      deviceID =   Read32(0x41C40004);
[13:00:23.008]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:00:23.008]        // -> [deviceID <= 0x2BB8802F]
[13:00:23.008]      version = deviceID >> 28;
[13:00:23.008]        // -> [version <= 0x00000002]
[13:00:23.012]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:00:23.012]        // -> [partNum <= 0x0000BB88]
[13:00:23.012]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:00:23.012]        // -> [manuf <= 0x00000017]
[13:00:23.012]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:00:23.012]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:00:23.012]      isProduction = (version > 0);
[13:00:23.012]        // -> [isProduction <= 0x00000001]
[13:00:23.012]    </block>
[13:00:23.012]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:00:23.012]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:00:23.012]        // =>  FALSE
[13:00:23.012]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:00:23.012]    </control>
[13:00:23.014]    <control if="continueId == 4" while="" timeout="0" info="">
[13:00:23.014]      // if-block "continueId == 4"
[13:00:23.014]        // =>  FALSE
[13:00:23.014]      // skip if-block "continueId == 4"
[13:00:23.014]    </control>
[13:00:23.014]    <control if="!isProduction" while="" timeout="0" info="">
[13:00:23.014]      // if-block "!isProduction"
[13:00:23.014]        // =>  FALSE
[13:00:23.015]      // skip if-block "!isProduction"
[13:00:23.015]    </control>
[13:00:23.015]  </sequence>
[13:00:23.015]  
[13:02:24.663]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:02:24.663]  
[13:02:24.671]  <debugvars>
[13:02:24.671]    // Pre-defined
[13:02:24.671]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:02:24.671]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:02:24.671]    __dp=0x00000000
[13:02:24.671]    __ap=0x00000000
[13:02:24.671]    __traceout=0x00000000      (Trace Disabled)
[13:02:24.672]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:02:24.672]    __FlashAddr=0x00000000
[13:02:24.672]    __FlashLen=0x00000000
[13:02:24.672]    __FlashArg=0x00000000
[13:02:24.672]    __FlashOp=0x00000000
[13:02:24.672]    __Result=0x00000000
[13:02:24.672]  </debugvars>
[13:02:24.672]  
[13:02:24.672]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:02:24.672]    <block atomic="false" info="">
[13:02:24.672]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:02:24.672]        // -> [isSWJ <= 0x00000001]
[13:02:24.672]      __var hasDormant = __protocol & 0x00020000;
[13:02:24.672]        // -> [hasDormant <= 0x00000000]
[13:02:24.672]      __var protType   = __protocol & 0x0000FFFF;
[13:02:24.672]        // -> [protType <= 0x00000002]
[13:02:24.672]    </block>
[13:02:24.672]    <control if="protType == 1" while="" timeout="0" info="">
[13:02:24.672]      // if-block "protType == 1"
[13:02:24.672]        // =>  FALSE
[13:02:24.672]      // skip if-block "protType == 1"
[13:02:24.672]    </control>
[13:02:24.672]    <control if="protType == 2" while="" timeout="0" info="">
[13:02:24.672]      // if-block "protType == 2"
[13:02:24.672]        // =>  TRUE
[13:02:24.672]      <control if="isSWJ" while="" timeout="0" info="">
[13:02:24.672]        // if-block "isSWJ"
[13:02:24.672]          // =>  TRUE
[13:02:24.672]        <control if="hasDormant" while="" timeout="0" info="">
[13:02:24.672]          // if-block "hasDormant"
[13:02:24.672]            // =>  FALSE
[13:02:24.672]          // skip if-block "hasDormant"
[13:02:24.672]        </control>
[13:02:24.672]        <control if="!hasDormant" while="" timeout="0" info="">
[13:02:24.672]          // if-block "!hasDormant"
[13:02:24.672]            // =>  TRUE
[13:02:24.672]          <block atomic="false" info="">
[13:02:24.676]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:02:24.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:02:24.677]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:02:24.678]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:02:24.678]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:02:24.680]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:02:24.680]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:02:24.680]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:02:24.680]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:02:24.688]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:02:24.688]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:02:24.688]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:02:24.688]          </block>
[13:02:24.688]          // end if-block "!hasDormant"
[13:02:24.688]        </control>
[13:02:24.688]        // end if-block "isSWJ"
[13:02:24.688]      </control>
[13:02:24.688]      <control if="!isSWJ" while="" timeout="0" info="">
[13:02:24.688]        // if-block "!isSWJ"
[13:02:24.688]          // =>  FALSE
[13:02:24.688]        // skip if-block "!isSWJ"
[13:02:24.692]      </control>
[13:02:24.692]      <block atomic="false" info="">
[13:02:24.692]        ReadDP(0x0);
[13:02:24.693]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:02:24.693]      </block>
[13:02:24.693]      // end if-block "protType == 2"
[13:02:24.693]    </control>
[13:02:24.693]  </sequence>
[13:02:24.693]  
[13:02:24.698]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:02:24.698]  
[13:02:24.698]  <debugvars>
[13:02:24.698]    // Pre-defined
[13:02:24.698]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:02:24.698]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:02:24.698]    __dp=0x00000000
[13:02:24.698]    __ap=0x00000000
[13:02:24.698]    __traceout=0x00000000      (Trace Disabled)
[13:02:24.698]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:02:24.701]    __FlashAddr=0x00000000
[13:02:24.701]    __FlashLen=0x00000000
[13:02:24.701]    __FlashArg=0x00000000
[13:02:24.701]    __FlashOp=0x00000000
[13:02:24.701]    __Result=0x00000000
[13:02:24.701]  </debugvars>
[13:02:24.701]  
[13:02:24.701]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:02:24.701]    <block atomic="false" info="">
[13:02:24.701]      __var SW_DP_ABORT       = 0x0;
[13:02:24.701]        // -> [SW_DP_ABORT <= 0x00000000]
[13:02:24.701]      __var DP_CTRL_STAT      = 0x4;
[13:02:24.701]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:02:24.701]      __var DP_SELECT         = 0x8;
[13:02:24.701]        // -> [DP_SELECT <= 0x00000008]
[13:02:24.701]      __var powered_down      = 0;
[13:02:24.701]        // -> [powered_down <= 0x00000000]
[13:02:24.701]      WriteDP(DP_SELECT, 0x00000000);
[13:02:24.705]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:02:24.705]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:02:24.706]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:02:24.707]        // -> [powered_down <= 0x00000001]
[13:02:24.707]    </block>
[13:02:24.707]    <control if="powered_down" while="" timeout="0" info="">
[13:02:24.707]      // if-block "powered_down"
[13:02:24.707]        // =>  TRUE
[13:02:24.707]      <block atomic="false" info="">
[13:02:24.707]        Message(0, "Debug/System power-up request sent");
[13:02:24.709]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:02:24.711]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:02:24.711]      </block>
[13:02:24.711]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:02:24.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:02:24.713]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:02:24.714]        // while-condition  =>  FALSE
[13:02:24.714]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:02:24.714]      </control>
[13:02:24.714]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:02:24.714]        // if-block "(__protocol & 0xFFFF) == 1"
[13:02:24.714]          // =>  FALSE
[13:02:24.714]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:02:24.714]      </control>
[13:02:24.714]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:02:24.714]        // if-block "(__protocol & 0xFFFF) == 2"
[13:02:24.714]          // =>  TRUE
[13:02:24.714]        <block atomic="false" info="">
[13:02:24.714]          Message(0, "executing SWD power up");
[13:02:24.716]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:02:24.718]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:02:24.718]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:02:24.721]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:02:24.721]        </block>
[13:02:24.721]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:02:24.721]      </control>
[13:02:24.721]      // end if-block "powered_down"
[13:02:24.721]    </control>
[13:02:24.721]    <block atomic="false" info="">
[13:02:24.721]      __var DEBUG_PORT_VAL    = 0;
[13:02:24.721]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:02:24.721]      __var ACCESS_POINT_VAL  = 0;
[13:02:24.721]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:02:24.725]      __ap = 1; 
[13:02:24.725]        // -> [__ap <= 0x00000001]
[13:02:24.725]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:02:24.737]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:02:24.737]      __ap = 4;
[13:02:24.737]        // -> [__ap <= 0x00000004]
[13:02:24.737]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:02:24.741]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:02:24.741]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:02:24.741]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:02:24.741]    </block>
[13:02:24.741]    <block atomic="false" info="">
[13:02:24.741]      __var nReset = 0x80;
[13:02:24.741]        // -> [nReset <= 0x00000080]
[13:02:24.745]      __var canReadPins = 0;
[13:02:24.745]        // -> [canReadPins <= 0x00000000]
[13:02:24.745]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:02:24.746]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:02:24.746]        // -> [canReadPins <= 0x00000001]
[13:02:24.746]    </block>
[13:02:24.747]    <control if="" while="1" timeout="200" info="">
[13:02:24.747]      // while "1"  (timeout="200")
[13:02:24.747]      // while-condition  =>  TRUE
[13:02:24.747]      // while "1"  (timeout="200")
[13:02:24.747]      // while-condition  =>  TRUE
[13:02:24.747]      // while "1"  (timeout="200")
[13:02:24.747]      // while-condition  =>  TRUE
[13:02:24.747]      // while "1"  (timeout="200")
[13:02:24.747]      // while-condition  =>  TRUE
[13:02:24.747]      // while "1"  (timeout="200")
[13:02:24.747]      // while-condition  =>  TRUE
[13:02:24.747]      // while "1"  (timeout="200")
[13:02:24.747]      // while-condition  =>  TRUE
[13:02:24.747]      // while "1"  (timeout="200")
[13:02:24.747]      // while-condition  =>  TRUE
[13:02:24.747]      // while "1"  (timeout="200")
[13:02:24.747]      // while-condition  =>  TRUE
[13:02:24.747]      // while "1"  (timeout="200")
[13:02:24.747]      // while-condition  =>  TRUE
[13:02:24.749]      // while "1"  (timeout="200")
[13:02:24.749]      // while-condition  =>  TRUE
[13:02:24.749]      // while "1"  (timeout="200")
[13:02:24.749]      // while-condition  =>  TRUE
[13:02:24.749]      // while "1"  (timeout="200")
[13:02:24.749]      // while-condition  =>  TRUE
[13:02:24.749]      // while "1"  (timeout="200")
[13:02:24.749]      // while-condition  =>  TRUE
[13:02:24.750]      // while "1"  (timeout="200")
[13:02:24.750]      // while-condition  =>  TRUE
[13:02:24.750]      // while "1"  (timeout="200")
[13:02:24.750]      // while-condition  =>  TRUE
[13:02:24.750]      // while "1"  (timeout="200")
[13:02:24.750]      // while-condition  =>  TRUE
[13:02:24.750]      // while "1"  (timeout="200")
[13:02:24.750]      // while-condition  =>  TRUE
[13:02:24.750]      // while "1"  (timeout="200")
[13:02:24.750]      // while-condition  =>  TRUE
[13:02:24.750]      // while "1"  (timeout="200")
[13:02:24.751]      // while-condition  =>  TRUE
[13:02:24.751]      // while "1"  (timeout="200")
[13:02:24.751]      // while-condition  =>  TRUE
[13:02:24.751]      // while "1"  (timeout="200")
[13:02:24.751]      // while-condition  =>  TRUE
[13:02:24.751]      // while "1"  (timeout="200")
[13:02:24.751]      // while-condition  =>  TRUE
[13:02:24.751]      // while "1"  (timeout="200")
[13:02:24.751]      // while-condition  =>  TRUE
[13:02:24.751]      // while "1"  (timeout="200")
[13:02:24.751]      // while-condition  =>  TRUE
[13:02:24.751]      // while "1"  (timeout="200")
[13:02:24.751]      // while-condition  =>  TRUE
[13:02:24.751]      // while "1"  (timeout="200")
[13:02:24.751]      // while-condition  =>  TRUE
[13:02:24.751]      // while "1"  (timeout="200")
[13:02:24.751]      // while-condition  =>  TRUE
[13:02:24.751]      // while "1"  (timeout="200")
[13:02:24.751]      // while-condition  =>  TRUE
[13:02:24.751]      // while "1"  (timeout="200")
[13:02:24.751]      // while-condition  =>  TRUE
[13:02:24.751]      // while "1"  (timeout="200")
[13:02:24.753]      // while-condition  =>  TRUE
[13:02:24.753]      // while "1"  (timeout="200")
[13:02:24.753]      // while-condition  =>  TRUE
[13:02:24.753]      // while "1"  (timeout="200")
[13:02:24.753]      // while-condition  =>  TRUE
[13:02:24.753]      // while "1"  (timeout="200")
[13:02:24.753]      // while-condition  =>  TRUE
[13:02:24.753]      // while "1"  (timeout="200")
[13:02:24.753]      // while-condition  =>  TRUE
[13:02:24.753]      // while "1"  (timeout="200")
[13:02:24.753]      // while-condition  =>  TRUE
[13:02:24.753]      // while "1"  (timeout="200")
[13:02:24.753]      // while-condition  =>  TRUE
[13:02:24.753]      // while "1"  (timeout="200")
[13:02:24.753]      // while-condition  =>  TRUE
[13:02:24.753]      // while "1"  (timeout="200")
[13:02:24.753]      // while-condition  =>  TRUE
[13:02:24.753]      // while "1"  (timeout="200")
[13:02:24.753]      // while-condition  =>  TRUE
[13:02:24.753]      // while "1"  (timeout="200")
[13:02:24.756]      // while-condition  =>  TRUE
[13:02:24.756]      // while "1"  (timeout="200")
[13:02:24.756]      // while  =>  TIMEOUT
[13:02:24.756]      // end while "1"
[13:02:24.756]    </control>
[13:02:24.756]    <control if="canReadPins" while="" timeout="0" info="">
[13:02:24.756]      // if-block "canReadPins"
[13:02:24.756]        // =>  TRUE
[13:02:24.756]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:02:24.756]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:02:24.758]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:02:24.758]        // while-condition  =>  FALSE
[13:02:24.758]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:02:24.758]      </control>
[13:02:24.758]      // end if-block "canReadPins"
[13:02:24.758]    </control>
[13:02:24.758]    <control if="!canReadPins" while="" timeout="0" info="">
[13:02:24.758]      // if-block "!canReadPins"
[13:02:24.758]        // =>  FALSE
[13:02:24.758]      // skip if-block "!canReadPins"
[13:02:24.758]    </control>
[13:02:24.758]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:02:24.758]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:02:24.758]        // =>  TRUE
[13:02:24.758]      <block atomic="false" info="">
[13:02:24.758]        WriteAP(0x00, 0x190008);
[13:02:24.761]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:02:24.761]        WriteAP(0xF0, 0x01);
[13:02:24.768]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:02:24.768]      </block>
[13:02:24.768]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:02:24.768]    </control>
[13:02:24.768]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:02:24.768]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:02:24.768]        // =>  FALSE
[13:02:24.768]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:02:24.768]    </control>
[13:02:24.768]    <block atomic="false" info="">
[13:02:24.768]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:02:24.773]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:02:24.773]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:02:24.773]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:02:24.776]      __ap = 0; //lets make sure we reset the access point selection
[13:02:24.776]        // -> [__ap <= 0x00000000]
[13:02:24.776]    </block>
[13:02:24.776]  </sequence>
[13:02:24.776]  
[13:02:24.806]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:02:24.806]  
[13:02:24.806]  <debugvars>
[13:02:24.806]    // Pre-defined
[13:02:24.806]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:02:24.806]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:02:24.807]    __dp=0x00000000
[13:02:24.807]    __ap=0x00000000
[13:02:24.807]    __traceout=0x00000000      (Trace Disabled)
[13:02:24.807]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:02:24.808]    __FlashAddr=0x00000000
[13:02:24.808]    __FlashLen=0x00000000
[13:02:24.808]    __FlashArg=0x00000000
[13:02:24.808]    __FlashOp=0x00000000
[13:02:24.808]    __Result=0x00000000
[13:02:24.808]  </debugvars>
[13:02:24.808]  
[13:02:24.808]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:02:24.808]    <block atomic="false" info="">
[13:02:24.808]      __var deviceID = 0;
[13:02:24.808]        // -> [deviceID <= 0x00000000]
[13:02:24.808]      __var version = 0;
[13:02:24.808]        // -> [version <= 0x00000000]
[13:02:24.808]      __var partNum = 0;
[13:02:24.808]        // -> [partNum <= 0x00000000]
[13:02:24.808]      __var manuf = 0;
[13:02:24.808]        // -> [manuf <= 0x00000000]
[13:02:24.808]      __var isMSPM0G1X0X_G3X0X = 0;
[13:02:24.808]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:02:24.808]      __var isProduction = 0;
[13:02:24.808]        // -> [isProduction <= 0x00000000]
[13:02:24.808]      __var continueId = 0;
[13:02:24.808]        // -> [continueId <= 0x00000000]
[13:02:24.808]      deviceID =   Read32(0x41C40004);
[13:02:24.817]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:02:24.817]        // -> [deviceID <= 0x2BB8802F]
[13:02:24.817]      version = deviceID >> 28;
[13:02:24.817]        // -> [version <= 0x00000002]
[13:02:24.820]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:02:24.820]        // -> [partNum <= 0x0000BB88]
[13:02:24.820]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:02:24.820]        // -> [manuf <= 0x00000017]
[13:02:24.820]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:02:24.820]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:02:24.820]      isProduction = (version > 0);
[13:02:24.820]        // -> [isProduction <= 0x00000001]
[13:02:24.820]    </block>
[13:02:24.820]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:02:24.820]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:02:24.820]        // =>  FALSE
[13:02:24.820]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:02:24.820]    </control>
[13:02:24.820]    <control if="continueId == 4" while="" timeout="0" info="">
[13:02:24.820]      // if-block "continueId == 4"
[13:02:24.820]        // =>  FALSE
[13:02:24.820]      // skip if-block "continueId == 4"
[13:02:24.820]    </control>
[13:02:24.820]    <control if="!isProduction" while="" timeout="0" info="">
[13:02:24.820]      // if-block "!isProduction"
[13:02:24.820]        // =>  FALSE
[13:02:24.820]      // skip if-block "!isProduction"
[13:02:24.820]    </control>
[13:02:24.820]  </sequence>
[13:02:24.820]  
[13:02:31.480]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:02:31.480]  
[13:02:31.493]  <debugvars>
[13:02:31.493]    // Pre-defined
[13:02:31.493]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:02:31.493]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:02:31.493]    __dp=0x00000000
[13:02:31.493]    __ap=0x00000000
[13:02:31.493]    __traceout=0x00000000      (Trace Disabled)
[13:02:31.493]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:02:31.493]    __FlashAddr=0x00000000
[13:02:31.493]    __FlashLen=0x00000000
[13:02:31.493]    __FlashArg=0x00000000
[13:02:31.493]    __FlashOp=0x00000000
[13:02:31.493]    __Result=0x00000000
[13:02:31.493]  </debugvars>
[13:02:31.493]  
[13:02:31.493]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:02:31.493]    <block atomic="false" info="">
[13:02:31.493]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:02:31.493]        // -> [isSWJ <= 0x00000001]
[13:02:31.493]      __var hasDormant = __protocol & 0x00020000;
[13:02:31.493]        // -> [hasDormant <= 0x00000000]
[13:02:31.493]      __var protType   = __protocol & 0x0000FFFF;
[13:02:31.493]        // -> [protType <= 0x00000002]
[13:02:31.493]    </block>
[13:02:31.496]    <control if="protType == 1" while="" timeout="0" info="">
[13:02:31.496]      // if-block "protType == 1"
[13:02:31.496]        // =>  FALSE
[13:02:31.496]      // skip if-block "protType == 1"
[13:02:31.496]    </control>
[13:02:31.496]    <control if="protType == 2" while="" timeout="0" info="">
[13:02:31.497]      // if-block "protType == 2"
[13:02:31.497]        // =>  TRUE
[13:02:31.497]      <control if="isSWJ" while="" timeout="0" info="">
[13:02:31.497]        // if-block "isSWJ"
[13:02:31.497]          // =>  TRUE
[13:02:31.497]        <control if="hasDormant" while="" timeout="0" info="">
[13:02:31.497]          // if-block "hasDormant"
[13:02:31.497]            // =>  FALSE
[13:02:31.497]          // skip if-block "hasDormant"
[13:02:31.497]        </control>
[13:02:31.497]        <control if="!hasDormant" while="" timeout="0" info="">
[13:02:31.497]          // if-block "!hasDormant"
[13:02:31.497]            // =>  TRUE
[13:02:31.497]          <block atomic="false" info="">
[13:02:31.497]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:02:31.497]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:02:31.497]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:02:31.500]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:02:31.500]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:02:31.500]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:02:31.500]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:02:31.500]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:02:31.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:02:31.506]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:02:31.507]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:02:31.512]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:02:31.512]          </block>
[13:02:31.512]          // end if-block "!hasDormant"
[13:02:31.512]        </control>
[13:02:31.512]        // end if-block "isSWJ"
[13:02:31.512]      </control>
[13:02:31.512]      <control if="!isSWJ" while="" timeout="0" info="">
[13:02:31.512]        // if-block "!isSWJ"
[13:02:31.512]          // =>  FALSE
[13:02:31.512]        // skip if-block "!isSWJ"
[13:02:31.512]      </control>
[13:02:31.512]      <block atomic="false" info="">
[13:02:31.512]        ReadDP(0x0);
[13:02:31.517]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:02:31.517]      </block>
[13:02:31.517]      // end if-block "protType == 2"
[13:02:31.517]    </control>
[13:02:31.517]  </sequence>
[13:02:31.517]  
[13:02:31.520]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:02:31.520]  
[13:02:31.520]  <debugvars>
[13:02:31.520]    // Pre-defined
[13:02:31.520]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:02:31.520]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:02:31.520]    __dp=0x00000000
[13:02:31.520]    __ap=0x00000000
[13:02:31.520]    __traceout=0x00000000      (Trace Disabled)
[13:02:31.520]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:02:31.520]    __FlashAddr=0x00000000
[13:02:31.520]    __FlashLen=0x00000000
[13:02:31.520]    __FlashArg=0x00000000
[13:02:31.520]    __FlashOp=0x00000000
[13:02:31.520]    __Result=0x00000000
[13:02:31.520]  </debugvars>
[13:02:31.520]  
[13:02:31.520]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:02:31.520]    <block atomic="false" info="">
[13:02:31.520]      __var SW_DP_ABORT       = 0x0;
[13:02:31.524]        // -> [SW_DP_ABORT <= 0x00000000]
[13:02:31.524]      __var DP_CTRL_STAT      = 0x4;
[13:02:31.524]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:02:31.524]      __var DP_SELECT         = 0x8;
[13:02:31.524]        // -> [DP_SELECT <= 0x00000008]
[13:02:31.524]      __var powered_down      = 0;
[13:02:31.524]        // -> [powered_down <= 0x00000000]
[13:02:31.524]      WriteDP(DP_SELECT, 0x00000000);
[13:02:31.527]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:02:31.527]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:02:31.528]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:02:31.528]        // -> [powered_down <= 0x00000001]
[13:02:31.528]    </block>
[13:02:31.528]    <control if="powered_down" while="" timeout="0" info="">
[13:02:31.528]      // if-block "powered_down"
[13:02:31.528]        // =>  TRUE
[13:02:31.528]      <block atomic="false" info="">
[13:02:31.528]        Message(0, "Debug/System power-up request sent");
[13:02:31.532]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:02:31.532]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:02:31.532]      </block>
[13:02:31.532]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:02:31.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:02:31.532]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:02:31.532]        // while-condition  =>  FALSE
[13:02:31.532]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:02:31.532]      </control>
[13:02:31.532]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:02:31.532]        // if-block "(__protocol & 0xFFFF) == 1"
[13:02:31.536]          // =>  FALSE
[13:02:31.536]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:02:31.536]      </control>
[13:02:31.536]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:02:31.536]        // if-block "(__protocol & 0xFFFF) == 2"
[13:02:31.536]          // =>  TRUE
[13:02:31.536]        <block atomic="false" info="">
[13:02:31.536]          Message(0, "executing SWD power up");
[13:02:31.537]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:02:31.537]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:02:31.537]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:02:31.540]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:02:31.540]        </block>
[13:02:31.540]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:02:31.540]      </control>
[13:02:31.540]      // end if-block "powered_down"
[13:02:31.540]    </control>
[13:02:31.540]    <block atomic="false" info="">
[13:02:31.540]      __var DEBUG_PORT_VAL    = 0;
[13:02:31.540]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:02:31.540]      __var ACCESS_POINT_VAL  = 0;
[13:02:31.540]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:02:31.540]      __ap = 1; 
[13:02:31.540]        // -> [__ap <= 0x00000001]
[13:02:31.540]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:02:31.547]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:02:31.547]      __ap = 4;
[13:02:31.547]        // -> [__ap <= 0x00000004]
[13:02:31.547]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:02:31.548]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:02:31.548]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:02:31.548]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:02:31.552]    </block>
[13:02:31.552]    <block atomic="false" info="">
[13:02:31.552]      __var nReset = 0x80;
[13:02:31.552]        // -> [nReset <= 0x00000080]
[13:02:31.552]      __var canReadPins = 0;
[13:02:31.552]        // -> [canReadPins <= 0x00000000]
[13:02:31.552]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:02:31.560]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:02:31.560]        // -> [canReadPins <= 0x00000001]
[13:02:31.560]    </block>
[13:02:31.560]    <control if="" while="1" timeout="200" info="">
[13:02:31.560]      // while "1"  (timeout="200")
[13:02:31.560]      // while-condition  =>  TRUE
[13:02:31.560]      // while "1"  (timeout="200")
[13:02:31.560]      // while-condition  =>  TRUE
[13:02:31.560]      // while "1"  (timeout="200")
[13:02:31.560]      // while-condition  =>  TRUE
[13:02:31.560]      // while "1"  (timeout="200")
[13:02:31.560]      // while-condition  =>  TRUE
[13:02:31.560]      // while "1"  (timeout="200")
[13:02:31.560]      // while-condition  =>  TRUE
[13:02:31.560]      // while "1"  (timeout="200")
[13:02:31.560]      // while-condition  =>  TRUE
[13:02:31.560]      // while "1"  (timeout="200")
[13:02:31.560]      // while-condition  =>  TRUE
[13:02:31.560]      // while "1"  (timeout="200")
[13:02:31.560]      // while-condition  =>  TRUE
[13:02:31.560]      // while "1"  (timeout="200")
[13:02:31.560]      // while-condition  =>  TRUE
[13:02:31.560]      // while "1"  (timeout="200")
[13:02:31.560]      // while-condition  =>  TRUE
[13:02:31.560]      // while "1"  (timeout="200")
[13:02:31.560]      // while-condition  =>  TRUE
[13:02:31.560]      // while "1"  (timeout="200")
[13:02:31.560]      // while-condition  =>  TRUE
[13:02:31.560]      // while "1"  (timeout="200")
[13:02:31.564]      // while-condition  =>  TRUE
[13:02:31.564]      // while "1"  (timeout="200")
[13:02:31.564]      // while-condition  =>  TRUE
[13:02:31.564]      // while "1"  (timeout="200")
[13:02:31.564]      // while-condition  =>  TRUE
[13:02:31.564]      // while "1"  (timeout="200")
[13:02:31.564]      // while-condition  =>  TRUE
[13:02:31.564]      // while "1"  (timeout="200")
[13:02:31.564]      // while-condition  =>  TRUE
[13:02:31.564]      // while "1"  (timeout="200")
[13:02:31.564]      // while-condition  =>  TRUE
[13:02:31.564]      // while "1"  (timeout="200")
[13:02:31.564]      // while-condition  =>  TRUE
[13:02:31.564]      // while "1"  (timeout="200")
[13:02:31.564]      // while-condition  =>  TRUE
[13:02:31.564]      // while "1"  (timeout="200")
[13:02:31.564]      // while-condition  =>  TRUE
[13:02:31.564]      // while "1"  (timeout="200")
[13:02:31.564]      // while-condition  =>  TRUE
[13:02:31.564]      // while "1"  (timeout="200")
[13:02:31.564]      // while-condition  =>  TRUE
[13:02:31.564]      // while "1"  (timeout="200")
[13:02:31.566]      // while-condition  =>  TRUE
[13:02:31.566]      // while "1"  (timeout="200")
[13:02:31.566]      // while  =>  TIMEOUT
[13:02:31.566]      // end while "1"
[13:02:31.566]    </control>
[13:02:31.567]    <control if="canReadPins" while="" timeout="0" info="">
[13:02:31.567]      // if-block "canReadPins"
[13:02:31.567]        // =>  TRUE
[13:02:31.567]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:02:31.567]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:02:31.568]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:02:31.568]        // while-condition  =>  FALSE
[13:02:31.568]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:02:31.568]      </control>
[13:02:31.568]      // end if-block "canReadPins"
[13:02:31.568]    </control>
[13:02:31.568]    <control if="!canReadPins" while="" timeout="0" info="">
[13:02:31.568]      // if-block "!canReadPins"
[13:02:31.568]        // =>  FALSE
[13:02:31.568]      // skip if-block "!canReadPins"
[13:02:31.568]    </control>
[13:02:31.568]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:02:31.568]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:02:31.568]        // =>  TRUE
[13:02:31.568]      <block atomic="false" info="">
[13:02:31.568]        WriteAP(0x00, 0x190008);
[13:02:31.568]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:02:31.568]        WriteAP(0xF0, 0x01);
[13:02:31.572]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:02:31.572]      </block>
[13:02:31.572]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:02:31.572]    </control>
[13:02:31.572]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:02:31.576]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:02:31.576]        // =>  FALSE
[13:02:31.576]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:02:31.576]    </control>
[13:02:31.576]    <block atomic="false" info="">
[13:02:31.576]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:02:31.584]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:02:31.584]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:02:31.584]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:02:31.586]      __ap = 0; //lets make sure we reset the access point selection
[13:02:31.586]        // -> [__ap <= 0x00000000]
[13:02:31.586]    </block>
[13:02:31.586]  </sequence>
[13:02:31.587]  
[13:02:31.621]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:02:31.621]  
[13:02:31.621]  <debugvars>
[13:02:31.621]    // Pre-defined
[13:02:31.621]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:02:31.621]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:02:31.621]    __dp=0x00000000
[13:02:31.621]    __ap=0x00000000
[13:02:31.621]    __traceout=0x00000000      (Trace Disabled)
[13:02:31.621]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:02:31.621]    __FlashAddr=0x00000000
[13:02:31.621]    __FlashLen=0x00000000
[13:02:31.621]    __FlashArg=0x00000000
[13:02:31.621]    __FlashOp=0x00000000
[13:02:31.621]    __Result=0x00000000
[13:02:31.621]  </debugvars>
[13:02:31.621]  
[13:02:31.621]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:02:31.621]    <block atomic="false" info="">
[13:02:31.621]      __var deviceID = 0;
[13:02:31.621]        // -> [deviceID <= 0x00000000]
[13:02:31.621]      __var version = 0;
[13:02:31.625]        // -> [version <= 0x00000000]
[13:02:31.625]      __var partNum = 0;
[13:02:31.625]        // -> [partNum <= 0x00000000]
[13:02:31.625]      __var manuf = 0;
[13:02:31.625]        // -> [manuf <= 0x00000000]
[13:02:31.625]      __var isMSPM0G1X0X_G3X0X = 0;
[13:02:31.625]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:02:31.625]      __var isProduction = 0;
[13:02:31.625]        // -> [isProduction <= 0x00000000]
[13:02:31.626]      __var continueId = 0;
[13:02:31.626]        // -> [continueId <= 0x00000000]
[13:02:31.626]      deviceID =   Read32(0x41C40004);
[13:02:31.632]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:02:31.632]        // -> [deviceID <= 0x2BB8802F]
[13:02:31.632]      version = deviceID >> 28;
[13:02:31.632]        // -> [version <= 0x00000002]
[13:02:31.632]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:02:31.634]        // -> [partNum <= 0x0000BB88]
[13:02:31.634]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:02:31.634]        // -> [manuf <= 0x00000017]
[13:02:31.634]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:02:31.634]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:02:31.634]      isProduction = (version > 0);
[13:02:31.634]        // -> [isProduction <= 0x00000001]
[13:02:31.634]    </block>
[13:02:31.634]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:02:31.634]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:02:31.634]        // =>  FALSE
[13:02:31.634]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:02:31.634]    </control>
[13:02:31.634]    <control if="continueId == 4" while="" timeout="0" info="">
[13:02:31.634]      // if-block "continueId == 4"
[13:02:31.634]        // =>  FALSE
[13:02:31.634]      // skip if-block "continueId == 4"
[13:02:31.634]    </control>
[13:02:31.634]    <control if="!isProduction" while="" timeout="0" info="">
[13:02:31.634]      // if-block "!isProduction"
[13:02:31.634]        // =>  FALSE
[13:02:31.634]      // skip if-block "!isProduction"
[13:02:31.634]    </control>
[13:02:31.636]  </sequence>
[13:02:31.636]  
[13:06:17.474]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:06:17.474]  
[13:06:17.474]  <debugvars>
[13:06:17.474]    // Pre-defined
[13:06:17.474]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:06:17.474]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:06:17.474]    __dp=0x00000000
[13:06:17.474]    __ap=0x00000000
[13:06:17.474]    __traceout=0x00000000      (Trace Disabled)
[13:06:17.477]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:06:17.477]    __FlashAddr=0x00000000
[13:06:17.477]    __FlashLen=0x00000000
[13:06:17.477]    __FlashArg=0x00000000
[13:06:17.477]    __FlashOp=0x00000000
[13:06:17.477]    __Result=0x00000000
[13:06:17.477]  </debugvars>
[13:06:17.477]  
[13:06:17.477]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:06:17.477]    <block atomic="false" info="">
[13:06:17.477]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:06:17.477]        // -> [isSWJ <= 0x00000001]
[13:06:17.478]      __var hasDormant = __protocol & 0x00020000;
[13:06:17.478]        // -> [hasDormant <= 0x00000000]
[13:06:17.478]      __var protType   = __protocol & 0x0000FFFF;
[13:06:17.478]        // -> [protType <= 0x00000002]
[13:06:17.478]    </block>
[13:06:17.479]    <control if="protType == 1" while="" timeout="0" info="">
[13:06:17.479]      // if-block "protType == 1"
[13:06:17.479]        // =>  FALSE
[13:06:17.479]      // skip if-block "protType == 1"
[13:06:17.479]    </control>
[13:06:17.479]    <control if="protType == 2" while="" timeout="0" info="">
[13:06:17.479]      // if-block "protType == 2"
[13:06:17.479]        // =>  TRUE
[13:06:17.479]      <control if="isSWJ" while="" timeout="0" info="">
[13:06:17.479]        // if-block "isSWJ"
[13:06:17.479]          // =>  TRUE
[13:06:17.479]        <control if="hasDormant" while="" timeout="0" info="">
[13:06:17.480]          // if-block "hasDormant"
[13:06:17.480]            // =>  FALSE
[13:06:17.480]          // skip if-block "hasDormant"
[13:06:17.480]        </control>
[13:06:17.480]        <control if="!hasDormant" while="" timeout="0" info="">
[13:06:17.480]          // if-block "!hasDormant"
[13:06:17.480]            // =>  TRUE
[13:06:17.480]          <block atomic="false" info="">
[13:06:17.480]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:06:17.483]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:06:17.483]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:06:17.483]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:06:17.483]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:06:17.487]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:06:17.487]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:06:17.488]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:06:17.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:06:17.490]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:06:17.490]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:06:17.492]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:06:17.492]          </block>
[13:06:17.492]          // end if-block "!hasDormant"
[13:06:17.492]        </control>
[13:06:17.492]        // end if-block "isSWJ"
[13:06:17.492]      </control>
[13:06:17.492]      <control if="!isSWJ" while="" timeout="0" info="">
[13:06:17.492]        // if-block "!isSWJ"
[13:06:17.492]          // =>  FALSE
[13:06:17.492]        // skip if-block "!isSWJ"
[13:06:17.492]      </control>
[13:06:17.492]      <block atomic="false" info="">
[13:06:17.492]        ReadDP(0x0);
[13:06:17.497]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:06:17.497]      </block>
[13:06:17.497]      // end if-block "protType == 2"
[13:06:17.497]    </control>
[13:06:17.497]  </sequence>
[13:06:17.499]  
[13:06:17.509]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:06:17.509]  
[13:06:17.509]  <debugvars>
[13:06:17.509]    // Pre-defined
[13:06:17.509]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:06:17.510]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:06:17.510]    __dp=0x00000000
[13:06:17.510]    __ap=0x00000000
[13:06:17.510]    __traceout=0x00000000      (Trace Disabled)
[13:06:17.510]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:06:17.510]    __FlashAddr=0x00000000
[13:06:17.511]    __FlashLen=0x00000000
[13:06:17.511]    __FlashArg=0x00000000
[13:06:17.511]    __FlashOp=0x00000000
[13:06:17.511]    __Result=0x00000000
[13:06:17.511]  </debugvars>
[13:06:17.511]  
[13:06:17.511]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:06:17.511]    <block atomic="false" info="">
[13:06:17.511]      __var SW_DP_ABORT       = 0x0;
[13:06:17.511]        // -> [SW_DP_ABORT <= 0x00000000]
[13:06:17.511]      __var DP_CTRL_STAT      = 0x4;
[13:06:17.511]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:06:17.511]      __var DP_SELECT         = 0x8;
[13:06:17.511]        // -> [DP_SELECT <= 0x00000008]
[13:06:17.511]      __var powered_down      = 0;
[13:06:17.511]        // -> [powered_down <= 0x00000000]
[13:06:17.511]      WriteDP(DP_SELECT, 0x00000000);
[13:06:17.516]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:06:17.516]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:06:17.518]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:06:17.518]        // -> [powered_down <= 0x00000001]
[13:06:17.518]    </block>
[13:06:17.518]    <control if="powered_down" while="" timeout="0" info="">
[13:06:17.518]      // if-block "powered_down"
[13:06:17.518]        // =>  TRUE
[13:06:17.518]      <block atomic="false" info="">
[13:06:17.518]        Message(0, "Debug/System power-up request sent");
[13:06:17.520]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:06:17.527]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:06:17.527]      </block>
[13:06:17.527]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:06:17.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:06:17.530]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:06:17.530]        // while-condition  =>  FALSE
[13:06:17.530]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:06:17.530]      </control>
[13:06:17.530]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:06:17.530]        // if-block "(__protocol & 0xFFFF) == 1"
[13:06:17.530]          // =>  FALSE
[13:06:17.530]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:06:17.530]      </control>
[13:06:17.530]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:06:17.530]        // if-block "(__protocol & 0xFFFF) == 2"
[13:06:17.530]          // =>  TRUE
[13:06:17.530]        <block atomic="false" info="">
[13:06:17.530]          Message(0, "executing SWD power up");
[13:06:17.532]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:06:17.534]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:06:17.536]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:06:17.537]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:06:17.537]        </block>
[13:06:17.537]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:06:17.537]      </control>
[13:06:17.537]      // end if-block "powered_down"
[13:06:17.538]    </control>
[13:06:17.538]    <block atomic="false" info="">
[13:06:17.538]      __var DEBUG_PORT_VAL    = 0;
[13:06:17.538]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:06:17.538]      __var ACCESS_POINT_VAL  = 0;
[13:06:17.538]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:06:17.538]      __ap = 1; 
[13:06:17.538]        // -> [__ap <= 0x00000001]
[13:06:17.538]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:06:17.544]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:06:17.544]      __ap = 4;
[13:06:17.544]        // -> [__ap <= 0x00000004]
[13:06:17.544]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:06:17.547]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:06:17.547]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:06:17.547]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:06:17.549]    </block>
[13:06:17.549]    <block atomic="false" info="">
[13:06:17.549]      __var nReset = 0x80;
[13:06:17.549]        // -> [nReset <= 0x00000080]
[13:06:17.549]      __var canReadPins = 0;
[13:06:17.549]        // -> [canReadPins <= 0x00000000]
[13:06:17.549]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:06:17.553]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:06:17.553]        // -> [canReadPins <= 0x00000001]
[13:06:17.553]    </block>
[13:06:17.553]    <control if="" while="1" timeout="200" info="">
[13:06:17.553]      // while "1"  (timeout="200")
[13:06:17.553]      // while-condition  =>  TRUE
[13:06:17.553]      // while "1"  (timeout="200")
[13:06:17.553]      // while-condition  =>  TRUE
[13:06:17.553]      // while "1"  (timeout="200")
[13:06:17.553]      // while-condition  =>  TRUE
[13:06:17.553]      // while "1"  (timeout="200")
[13:06:17.553]      // while-condition  =>  TRUE
[13:06:17.553]      // while "1"  (timeout="200")
[13:06:17.553]      // while-condition  =>  TRUE
[13:06:17.553]      // while "1"  (timeout="200")
[13:06:17.553]      // while-condition  =>  TRUE
[13:06:17.553]      // while "1"  (timeout="200")
[13:06:17.553]      // while-condition  =>  TRUE
[13:06:17.553]      // while "1"  (timeout="200")
[13:06:17.553]      // while-condition  =>  TRUE
[13:06:17.553]      // while "1"  (timeout="200")
[13:06:17.553]      // while-condition  =>  TRUE
[13:06:17.553]      // while "1"  (timeout="200")
[13:06:17.553]      // while-condition  =>  TRUE
[13:06:17.553]      // while "1"  (timeout="200")
[13:06:17.553]      // while-condition  =>  TRUE
[13:06:17.553]      // while "1"  (timeout="200")
[13:06:17.553]      // while-condition  =>  TRUE
[13:06:17.553]      // while "1"  (timeout="200")
[13:06:17.557]      // while-condition  =>  TRUE
[13:06:17.557]      // while "1"  (timeout="200")
[13:06:17.557]      // while-condition  =>  TRUE
[13:06:17.557]      // while "1"  (timeout="200")
[13:06:17.557]      // while-condition  =>  TRUE
[13:06:17.557]      // while "1"  (timeout="200")
[13:06:17.557]      // while-condition  =>  TRUE
[13:06:17.557]      // while "1"  (timeout="200")
[13:06:17.557]      // while-condition  =>  TRUE
[13:06:17.557]      // while "1"  (timeout="200")
[13:06:17.557]      // while-condition  =>  TRUE
[13:06:17.557]      // while "1"  (timeout="200")
[13:06:17.557]      // while-condition  =>  TRUE
[13:06:17.557]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.558]      // while-condition  =>  TRUE
[13:06:17.558]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.561]      // while "1"  (timeout="200")
[13:06:17.561]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.565]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.565]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.565]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.565]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.565]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.565]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.565]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.565]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.565]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.565]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.565]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.565]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.565]      // while-condition  =>  TRUE
[13:06:17.565]      // while "1"  (timeout="200")
[13:06:17.567]      // while-condition  =>  TRUE
[13:06:17.567]      // while "1"  (timeout="200")
[13:06:17.567]      // while  =>  TIMEOUT
[13:06:17.567]      // end while "1"
[13:06:17.567]    </control>
[13:06:17.567]    <control if="canReadPins" while="" timeout="0" info="">
[13:06:17.567]      // if-block "canReadPins"
[13:06:17.567]        // =>  TRUE
[13:06:17.567]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:06:17.567]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:06:17.569]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:06:17.569]        // while-condition  =>  FALSE
[13:06:17.569]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:06:17.569]      </control>
[13:06:17.569]      // end if-block "canReadPins"
[13:06:17.569]    </control>
[13:06:17.569]    <control if="!canReadPins" while="" timeout="0" info="">
[13:06:17.569]      // if-block "!canReadPins"
[13:06:17.569]        // =>  FALSE
[13:06:17.569]      // skip if-block "!canReadPins"
[13:06:17.569]    </control>
[13:06:17.569]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:06:17.569]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:06:17.569]        // =>  TRUE
[13:06:17.569]      <block atomic="false" info="">
[13:06:17.569]        WriteAP(0x00, 0x190008);
[13:06:17.573]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:06:17.573]        WriteAP(0xF0, 0x01);
[13:06:17.581]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:06:17.581]      </block>
[13:06:17.581]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:06:17.581]    </control>
[13:06:17.581]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:06:17.581]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:06:17.581]        // =>  FALSE
[13:06:17.581]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:06:17.581]    </control>
[13:06:17.581]    <block atomic="false" info="">
[13:06:17.581]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:06:17.586]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:06:17.586]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:06:17.586]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:06:17.587]      __ap = 0; //lets make sure we reset the access point selection
[13:06:17.588]        // -> [__ap <= 0x00000000]
[13:06:17.588]    </block>
[13:06:17.588]  </sequence>
[13:06:17.588]  
[13:06:17.637]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:06:17.637]  
[13:06:17.637]  <debugvars>
[13:06:17.637]    // Pre-defined
[13:06:17.637]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:06:17.638]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:06:17.638]    __dp=0x00000000
[13:06:17.638]    __ap=0x00000000
[13:06:17.638]    __traceout=0x00000000      (Trace Disabled)
[13:06:17.638]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:06:17.638]    __FlashAddr=0x00000000
[13:06:17.638]    __FlashLen=0x00000000
[13:06:17.638]    __FlashArg=0x00000000
[13:06:17.638]    __FlashOp=0x00000000
[13:06:17.638]    __Result=0x00000000
[13:06:17.638]  </debugvars>
[13:06:17.638]  
[13:06:17.640]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:06:17.640]    <block atomic="false" info="">
[13:06:17.640]      __var deviceID = 0;
[13:06:17.640]        // -> [deviceID <= 0x00000000]
[13:06:17.640]      __var version = 0;
[13:06:17.640]        // -> [version <= 0x00000000]
[13:06:17.640]      __var partNum = 0;
[13:06:17.640]        // -> [partNum <= 0x00000000]
[13:06:17.640]      __var manuf = 0;
[13:06:17.640]        // -> [manuf <= 0x00000000]
[13:06:17.640]      __var isMSPM0G1X0X_G3X0X = 0;
[13:06:17.640]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:06:17.640]      __var isProduction = 0;
[13:06:17.640]        // -> [isProduction <= 0x00000000]
[13:06:17.640]      __var continueId = 0;
[13:06:17.641]        // -> [continueId <= 0x00000000]
[13:06:17.641]      deviceID =   Read32(0x41C40004);
[13:06:17.647]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:06:17.647]        // -> [deviceID <= 0x2BB8802F]
[13:06:17.647]      version = deviceID >> 28;
[13:06:17.647]        // -> [version <= 0x00000002]
[13:06:17.647]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:06:17.647]        // -> [partNum <= 0x0000BB88]
[13:06:17.647]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:06:17.647]        // -> [manuf <= 0x00000017]
[13:06:17.648]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:06:17.648]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:06:17.648]      isProduction = (version > 0);
[13:06:17.648]        // -> [isProduction <= 0x00000001]
[13:06:17.648]    </block>
[13:06:17.648]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:06:17.648]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:06:17.648]        // =>  FALSE
[13:06:17.648]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:06:17.648]    </control>
[13:06:17.648]    <control if="continueId == 4" while="" timeout="0" info="">
[13:06:17.649]      // if-block "continueId == 4"
[13:06:17.649]        // =>  FALSE
[13:06:17.649]      // skip if-block "continueId == 4"
[13:06:17.649]    </control>
[13:06:17.649]    <control if="!isProduction" while="" timeout="0" info="">
[13:06:17.649]      // if-block "!isProduction"
[13:06:17.649]        // =>  FALSE
[13:06:17.649]      // skip if-block "!isProduction"
[13:06:17.649]    </control>
[13:06:17.649]  </sequence>
[13:06:17.649]  
[13:06:24.980]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:06:24.980]  
[13:06:24.989]  <debugvars>
[13:06:24.989]    // Pre-defined
[13:06:24.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:06:24.989]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:06:24.989]    __dp=0x00000000
[13:06:24.989]    __ap=0x00000000
[13:06:24.989]    __traceout=0x00000000      (Trace Disabled)
[13:06:24.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:06:24.989]    __FlashAddr=0x00000000
[13:06:24.989]    __FlashLen=0x00000000
[13:06:24.989]    __FlashArg=0x00000000
[13:06:24.989]    __FlashOp=0x00000000
[13:06:24.989]    __Result=0x00000000
[13:06:24.989]  </debugvars>
[13:06:24.989]  
[13:06:24.989]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:06:24.989]    <block atomic="false" info="">
[13:06:24.989]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:06:24.989]        // -> [isSWJ <= 0x00000001]
[13:06:24.989]      __var hasDormant = __protocol & 0x00020000;
[13:06:24.989]        // -> [hasDormant <= 0x00000000]
[13:06:24.989]      __var protType   = __protocol & 0x0000FFFF;
[13:06:24.989]        // -> [protType <= 0x00000002]
[13:06:24.989]    </block>
[13:06:24.989]    <control if="protType == 1" while="" timeout="0" info="">
[13:06:24.989]      // if-block "protType == 1"
[13:06:24.992]        // =>  FALSE
[13:06:24.992]      // skip if-block "protType == 1"
[13:06:24.992]    </control>
[13:06:24.992]    <control if="protType == 2" while="" timeout="0" info="">
[13:06:24.992]      // if-block "protType == 2"
[13:06:24.992]        // =>  TRUE
[13:06:24.992]      <control if="isSWJ" while="" timeout="0" info="">
[13:06:24.992]        // if-block "isSWJ"
[13:06:24.992]          // =>  TRUE
[13:06:24.992]        <control if="hasDormant" while="" timeout="0" info="">
[13:06:24.992]          // if-block "hasDormant"
[13:06:24.992]            // =>  FALSE
[13:06:24.992]          // skip if-block "hasDormant"
[13:06:24.992]        </control>
[13:06:24.992]        <control if="!hasDormant" while="" timeout="0" info="">
[13:06:24.992]          // if-block "!hasDormant"
[13:06:24.992]            // =>  TRUE
[13:06:24.992]          <block atomic="false" info="">
[13:06:24.992]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:06:24.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:06:24.997]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:06:25.000]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:06:25.000]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:06:25.004]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:06:25.004]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:06:25.008]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:06:25.008]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:06:25.008]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:06:25.011]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:06:25.011]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:06:25.011]          </block>
[13:06:25.011]          // end if-block "!hasDormant"
[13:06:25.011]        </control>
[13:06:25.011]        // end if-block "isSWJ"
[13:06:25.011]      </control>
[13:06:25.011]      <control if="!isSWJ" while="" timeout="0" info="">
[13:06:25.011]        // if-block "!isSWJ"
[13:06:25.011]          // =>  FALSE
[13:06:25.011]        // skip if-block "!isSWJ"
[13:06:25.011]      </control>
[13:06:25.011]      <block atomic="false" info="">
[13:06:25.011]        ReadDP(0x0);
[13:06:25.015]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:06:25.015]      </block>
[13:06:25.015]      // end if-block "protType == 2"
[13:06:25.015]    </control>
[13:06:25.015]  </sequence>
[13:06:25.015]  
[13:06:25.020]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:06:25.020]  
[13:06:25.020]  <debugvars>
[13:06:25.020]    // Pre-defined
[13:06:25.020]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:06:25.020]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:06:25.020]    __dp=0x00000000
[13:06:25.023]    __ap=0x00000000
[13:06:25.023]    __traceout=0x00000000      (Trace Disabled)
[13:06:25.023]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:06:25.023]    __FlashAddr=0x00000000
[13:06:25.023]    __FlashLen=0x00000000
[13:06:25.023]    __FlashArg=0x00000000
[13:06:25.023]    __FlashOp=0x00000000
[13:06:25.023]    __Result=0x00000000
[13:06:25.023]  </debugvars>
[13:06:25.023]  
[13:06:25.023]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:06:25.023]    <block atomic="false" info="">
[13:06:25.023]      __var SW_DP_ABORT       = 0x0;
[13:06:25.023]        // -> [SW_DP_ABORT <= 0x00000000]
[13:06:25.023]      __var DP_CTRL_STAT      = 0x4;
[13:06:25.023]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:06:25.023]      __var DP_SELECT         = 0x8;
[13:06:25.023]        // -> [DP_SELECT <= 0x00000008]
[13:06:25.023]      __var powered_down      = 0;
[13:06:25.023]        // -> [powered_down <= 0x00000000]
[13:06:25.023]      WriteDP(DP_SELECT, 0x00000000);
[13:06:25.027]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:06:25.027]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:06:25.028]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:06:25.028]        // -> [powered_down <= 0x00000001]
[13:06:25.028]    </block>
[13:06:25.028]    <control if="powered_down" while="" timeout="0" info="">
[13:06:25.030]      // if-block "powered_down"
[13:06:25.030]        // =>  TRUE
[13:06:25.030]      <block atomic="false" info="">
[13:06:25.030]        Message(0, "Debug/System power-up request sent");
[13:06:25.032]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:06:25.032]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:06:25.032]      </block>
[13:06:25.032]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:06:25.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:06:25.035]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:06:25.035]        // while-condition  =>  FALSE
[13:06:25.035]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:06:25.036]      </control>
[13:06:25.036]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:06:25.036]        // if-block "(__protocol & 0xFFFF) == 1"
[13:06:25.036]          // =>  FALSE
[13:06:25.036]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:06:25.036]      </control>
[13:06:25.036]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:06:25.036]        // if-block "(__protocol & 0xFFFF) == 2"
[13:06:25.036]          // =>  TRUE
[13:06:25.036]        <block atomic="false" info="">
[13:06:25.036]          Message(0, "executing SWD power up");
[13:06:25.038]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:06:25.041]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:06:25.041]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:06:25.041]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:06:25.041]        </block>
[13:06:25.041]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:06:25.044]      </control>
[13:06:25.044]      // end if-block "powered_down"
[13:06:25.044]    </control>
[13:06:25.044]    <block atomic="false" info="">
[13:06:25.044]      __var DEBUG_PORT_VAL    = 0;
[13:06:25.044]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:06:25.044]      __var ACCESS_POINT_VAL  = 0;
[13:06:25.044]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:06:25.044]      __ap = 1; 
[13:06:25.044]        // -> [__ap <= 0x00000001]
[13:06:25.044]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:06:25.048]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:06:25.048]      __ap = 4;
[13:06:25.048]        // -> [__ap <= 0x00000004]
[13:06:25.051]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:06:25.055]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:06:25.055]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:06:25.055]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:06:25.058]    </block>
[13:06:25.058]    <block atomic="false" info="">
[13:06:25.058]      __var nReset = 0x80;
[13:06:25.059]        // -> [nReset <= 0x00000080]
[13:06:25.059]      __var canReadPins = 0;
[13:06:25.059]        // -> [canReadPins <= 0x00000000]
[13:06:25.059]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:06:25.063]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:06:25.063]        // -> [canReadPins <= 0x00000001]
[13:06:25.063]    </block>
[13:06:25.063]    <control if="" while="1" timeout="200" info="">
[13:06:25.063]      // while "1"  (timeout="200")
[13:06:25.063]      // while-condition  =>  TRUE
[13:06:25.063]      // while "1"  (timeout="200")
[13:06:25.063]      // while-condition  =>  TRUE
[13:06:25.063]      // while "1"  (timeout="200")
[13:06:25.063]      // while-condition  =>  TRUE
[13:06:25.063]      // while "1"  (timeout="200")
[13:06:25.063]      // while-condition  =>  TRUE
[13:06:25.063]      // while "1"  (timeout="200")
[13:06:25.063]      // while-condition  =>  TRUE
[13:06:25.063]      // while "1"  (timeout="200")
[13:06:25.063]      // while-condition  =>  TRUE
[13:06:25.063]      // while "1"  (timeout="200")
[13:06:25.063]      // while-condition  =>  TRUE
[13:06:25.063]      // while "1"  (timeout="200")
[13:06:25.063]      // while-condition  =>  TRUE
[13:06:25.063]      // while "1"  (timeout="200")
[13:06:25.067]      // while-condition  =>  TRUE
[13:06:25.067]      // while "1"  (timeout="200")
[13:06:25.067]      // while  =>  TIMEOUT
[13:06:25.067]      // end while "1"
[13:06:25.068]    </control>
[13:06:25.068]    <control if="canReadPins" while="" timeout="0" info="">
[13:06:25.068]      // if-block "canReadPins"
[13:06:25.068]        // =>  TRUE
[13:06:25.068]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:06:25.068]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:06:25.073]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:06:25.073]        // while-condition  =>  FALSE
[13:06:25.073]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:06:25.073]      </control>
[13:06:25.074]      // end if-block "canReadPins"
[13:06:25.074]    </control>
[13:06:25.074]    <control if="!canReadPins" while="" timeout="0" info="">
[13:06:25.074]      // if-block "!canReadPins"
[13:06:25.074]        // =>  FALSE
[13:06:25.074]      // skip if-block "!canReadPins"
[13:06:25.074]    </control>
[13:06:25.074]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:06:25.074]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:06:25.074]        // =>  TRUE
[13:06:25.075]      <block atomic="false" info="">
[13:06:25.075]        WriteAP(0x00, 0x190008);
[13:06:25.075]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:06:25.075]        WriteAP(0xF0, 0x01);
[13:06:25.080]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:06:25.080]      </block>
[13:06:25.080]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:06:25.080]    </control>
[13:06:25.082]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:06:25.082]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:06:25.082]        // =>  FALSE
[13:06:25.082]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:06:25.082]    </control>
[13:06:25.082]    <block atomic="false" info="">
[13:06:25.082]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:06:25.088]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:06:25.088]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:06:25.088]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:06:25.088]      __ap = 0; //lets make sure we reset the access point selection
[13:06:25.088]        // -> [__ap <= 0x00000000]
[13:06:25.088]    </block>
[13:06:25.092]  </sequence>
[13:06:25.092]  
[13:06:25.125]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:06:25.125]  
[13:06:25.125]  <debugvars>
[13:06:25.125]    // Pre-defined
[13:06:25.125]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:06:25.127]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:06:25.127]    __dp=0x00000000
[13:06:25.127]    __ap=0x00000000
[13:06:25.127]    __traceout=0x00000000      (Trace Disabled)
[13:06:25.127]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:06:25.127]    __FlashAddr=0x00000000
[13:06:25.127]    __FlashLen=0x00000000
[13:06:25.128]    __FlashArg=0x00000000
[13:06:25.128]    __FlashOp=0x00000000
[13:06:25.128]    __Result=0x00000000
[13:06:25.128]  </debugvars>
[13:06:25.128]  
[13:06:25.128]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:06:25.129]    <block atomic="false" info="">
[13:06:25.129]      __var deviceID = 0;
[13:06:25.129]        // -> [deviceID <= 0x00000000]
[13:06:25.129]      __var version = 0;
[13:06:25.129]        // -> [version <= 0x00000000]
[13:06:25.129]      __var partNum = 0;
[13:06:25.129]        // -> [partNum <= 0x00000000]
[13:06:25.129]      __var manuf = 0;
[13:06:25.129]        // -> [manuf <= 0x00000000]
[13:06:25.129]      __var isMSPM0G1X0X_G3X0X = 0;
[13:06:25.129]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:06:25.129]      __var isProduction = 0;
[13:06:25.129]        // -> [isProduction <= 0x00000000]
[13:06:25.129]      __var continueId = 0;
[13:06:25.129]        // -> [continueId <= 0x00000000]
[13:06:25.129]      deviceID =   Read32(0x41C40004);
[13:06:25.138]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:06:25.138]        // -> [deviceID <= 0x2BB8802F]
[13:06:25.139]      version = deviceID >> 28;
[13:06:25.139]        // -> [version <= 0x00000002]
[13:06:25.139]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:06:25.139]        // -> [partNum <= 0x0000BB88]
[13:06:25.139]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:06:25.139]        // -> [manuf <= 0x00000017]
[13:06:25.139]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:06:25.139]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:06:25.139]      isProduction = (version > 0);
[13:06:25.139]        // -> [isProduction <= 0x00000001]
[13:06:25.139]    </block>
[13:06:25.139]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:06:25.139]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:06:25.139]        // =>  FALSE
[13:06:25.139]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:06:25.139]    </control>
[13:06:25.139]    <control if="continueId == 4" while="" timeout="0" info="">
[13:06:25.139]      // if-block "continueId == 4"
[13:06:25.139]        // =>  FALSE
[13:06:25.139]      // skip if-block "continueId == 4"
[13:06:25.142]    </control>
[13:06:25.142]    <control if="!isProduction" while="" timeout="0" info="">
[13:06:25.142]      // if-block "!isProduction"
[13:06:25.142]        // =>  FALSE
[13:06:25.142]      // skip if-block "!isProduction"
[13:06:25.142]    </control>
[13:06:25.142]  </sequence>
[13:06:25.142]  
[13:07:58.579]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:07:58.579]  
[13:07:58.579]  <debugvars>
[13:07:58.579]    // Pre-defined
[13:07:58.580]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:07:58.580]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:07:58.580]    __dp=0x00000000
[13:07:58.580]    __ap=0x00000000
[13:07:58.580]    __traceout=0x00000000      (Trace Disabled)
[13:07:58.580]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:07:58.580]    __FlashAddr=0x00000000
[13:07:58.580]    __FlashLen=0x00000000
[13:07:58.580]    __FlashArg=0x00000000
[13:07:58.580]    __FlashOp=0x00000000
[13:07:58.580]    __Result=0x00000000
[13:07:58.580]  </debugvars>
[13:07:58.580]  
[13:07:58.580]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:07:58.580]    <block atomic="false" info="">
[13:07:58.580]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:07:58.580]        // -> [isSWJ <= 0x00000001]
[13:07:58.580]      __var hasDormant = __protocol & 0x00020000;
[13:07:58.580]        // -> [hasDormant <= 0x00000000]
[13:07:58.580]      __var protType   = __protocol & 0x0000FFFF;
[13:07:58.580]        // -> [protType <= 0x00000002]
[13:07:58.580]    </block>
[13:07:58.580]    <control if="protType == 1" while="" timeout="0" info="">
[13:07:58.580]      // if-block "protType == 1"
[13:07:58.580]        // =>  FALSE
[13:07:58.580]      // skip if-block "protType == 1"
[13:07:58.580]    </control>
[13:07:58.580]    <control if="protType == 2" while="" timeout="0" info="">
[13:07:58.580]      // if-block "protType == 2"
[13:07:58.580]        // =>  TRUE
[13:07:58.580]      <control if="isSWJ" while="" timeout="0" info="">
[13:07:58.580]        // if-block "isSWJ"
[13:07:58.580]          // =>  TRUE
[13:07:58.580]        <control if="hasDormant" while="" timeout="0" info="">
[13:07:58.580]          // if-block "hasDormant"
[13:07:58.580]            // =>  FALSE
[13:07:58.580]          // skip if-block "hasDormant"
[13:07:58.580]        </control>
[13:07:58.580]        <control if="!hasDormant" while="" timeout="0" info="">
[13:07:58.580]          // if-block "!hasDormant"
[13:07:58.580]            // =>  TRUE
[13:07:58.580]          <block atomic="false" info="">
[13:07:58.580]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:07:58.584]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:07:58.584]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:07:58.588]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:07:58.588]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:07:58.590]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:07:58.590]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:07:58.604]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:07:58.604]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:07:58.604]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:07:58.604]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:07:58.608]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:07:58.608]          </block>
[13:07:58.608]          // end if-block "!hasDormant"
[13:07:58.608]        </control>
[13:07:58.608]        // end if-block "isSWJ"
[13:07:58.609]      </control>
[13:07:58.609]      <control if="!isSWJ" while="" timeout="0" info="">
[13:07:58.609]        // if-block "!isSWJ"
[13:07:58.609]          // =>  FALSE
[13:07:58.609]        // skip if-block "!isSWJ"
[13:07:58.609]      </control>
[13:07:58.609]      <block atomic="false" info="">
[13:07:58.609]        ReadDP(0x0);
[13:07:58.610]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:07:58.610]      </block>
[13:07:58.610]      // end if-block "protType == 2"
[13:07:58.610]    </control>
[13:07:58.610]  </sequence>
[13:07:58.610]  
[13:07:58.612]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:07:58.612]  
[13:07:58.612]  <debugvars>
[13:07:58.612]    // Pre-defined
[13:07:58.612]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:07:58.612]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:07:58.612]    __dp=0x00000000
[13:07:58.612]    __ap=0x00000000
[13:07:58.612]    __traceout=0x00000000      (Trace Disabled)
[13:07:58.612]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:07:58.612]    __FlashAddr=0x00000000
[13:07:58.612]    __FlashLen=0x00000000
[13:07:58.612]    __FlashArg=0x00000000
[13:07:58.612]    __FlashOp=0x00000000
[13:07:58.612]    __Result=0x00000000
[13:07:58.612]  </debugvars>
[13:07:58.612]  
[13:07:58.612]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:07:58.612]    <block atomic="false" info="">
[13:07:58.612]      __var SW_DP_ABORT       = 0x0;
[13:07:58.612]        // -> [SW_DP_ABORT <= 0x00000000]
[13:07:58.616]      __var DP_CTRL_STAT      = 0x4;
[13:07:58.616]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:07:58.616]      __var DP_SELECT         = 0x8;
[13:07:58.616]        // -> [DP_SELECT <= 0x00000008]
[13:07:58.616]      __var powered_down      = 0;
[13:07:58.616]        // -> [powered_down <= 0x00000000]
[13:07:58.616]      WriteDP(DP_SELECT, 0x00000000);
[13:07:58.618]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:07:58.618]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:07:58.620]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:07:58.620]        // -> [powered_down <= 0x00000001]
[13:07:58.620]    </block>
[13:07:58.620]    <control if="powered_down" while="" timeout="0" info="">
[13:07:58.620]      // if-block "powered_down"
[13:07:58.620]        // =>  TRUE
[13:07:58.620]      <block atomic="false" info="">
[13:07:58.620]        Message(0, "Debug/System power-up request sent");
[13:07:58.623]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:07:58.624]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:07:58.625]      </block>
[13:07:58.625]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:07:58.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:07:58.627]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:07:58.627]        // while-condition  =>  FALSE
[13:07:58.627]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:07:58.627]      </control>
[13:07:58.627]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:07:58.627]        // if-block "(__protocol & 0xFFFF) == 1"
[13:07:58.627]          // =>  FALSE
[13:07:58.628]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:07:58.628]      </control>
[13:07:58.628]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:07:58.628]        // if-block "(__protocol & 0xFFFF) == 2"
[13:07:58.628]          // =>  TRUE
[13:07:58.628]        <block atomic="false" info="">
[13:07:58.628]          Message(0, "executing SWD power up");
[13:07:58.630]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:07:58.632]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:07:58.632]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:07:58.635]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:07:58.635]        </block>
[13:07:58.635]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:07:58.636]      </control>
[13:07:58.636]      // end if-block "powered_down"
[13:07:58.636]    </control>
[13:07:58.636]    <block atomic="false" info="">
[13:07:58.636]      __var DEBUG_PORT_VAL    = 0;
[13:07:58.637]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:07:58.637]      __var ACCESS_POINT_VAL  = 0;
[13:07:58.637]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:07:58.637]      __ap = 1; 
[13:07:58.637]        // -> [__ap <= 0x00000001]
[13:07:58.637]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:07:58.653]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:07:58.653]      __ap = 4;
[13:07:58.653]        // -> [__ap <= 0x00000004]
[13:07:58.653]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:07:58.654]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:07:58.654]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:07:58.654]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:07:58.658]    </block>
[13:07:58.658]    <block atomic="false" info="">
[13:07:58.658]      __var nReset = 0x80;
[13:07:58.658]        // -> [nReset <= 0x00000080]
[13:07:58.658]      __var canReadPins = 0;
[13:07:58.658]        // -> [canReadPins <= 0x00000000]
[13:07:58.658]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:07:58.662]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:07:58.662]        // -> [canReadPins <= 0x00000001]
[13:07:58.662]    </block>
[13:07:58.662]    <control if="" while="1" timeout="200" info="">
[13:07:58.662]      // while "1"  (timeout="200")
[13:07:58.662]      // while-condition  =>  TRUE
[13:07:58.662]      // while "1"  (timeout="200")
[13:07:58.662]      // while-condition  =>  TRUE
[13:07:58.662]      // while "1"  (timeout="200")
[13:07:58.662]      // while-condition  =>  TRUE
[13:07:58.662]      // while "1"  (timeout="200")
[13:07:58.662]      // while-condition  =>  TRUE
[13:07:58.662]      // while "1"  (timeout="200")
[13:07:58.662]      // while-condition  =>  TRUE
[13:07:58.662]      // while "1"  (timeout="200")
[13:07:58.662]      // while-condition  =>  TRUE
[13:07:58.662]      // while "1"  (timeout="200")
[13:07:58.662]      // while-condition  =>  TRUE
[13:07:58.662]      // while "1"  (timeout="200")
[13:07:58.662]      // while-condition  =>  TRUE
[13:07:58.662]      // while "1"  (timeout="200")
[13:07:58.666]      // while-condition  =>  TRUE
[13:07:58.666]      // while "1"  (timeout="200")
[13:07:58.666]      // while-condition  =>  TRUE
[13:07:58.666]      // while "1"  (timeout="200")
[13:07:58.666]      // while-condition  =>  TRUE
[13:07:58.666]      // while "1"  (timeout="200")
[13:07:58.666]      // while-condition  =>  TRUE
[13:07:58.666]      // while "1"  (timeout="200")
[13:07:58.666]      // while-condition  =>  TRUE
[13:07:58.666]      // while "1"  (timeout="200")
[13:07:58.666]      // while-condition  =>  TRUE
[13:07:58.666]      // while "1"  (timeout="200")
[13:07:58.666]      // while-condition  =>  TRUE
[13:07:58.666]      // while "1"  (timeout="200")
[13:07:58.666]      // while-condition  =>  TRUE
[13:07:58.666]      // while "1"  (timeout="200")
[13:07:58.666]      // while-condition  =>  TRUE
[13:07:58.666]      // while "1"  (timeout="200")
[13:07:58.666]      // while-condition  =>  TRUE
[13:07:58.666]      // while "1"  (timeout="200")
[13:07:58.666]      // while-condition  =>  TRUE
[13:07:58.666]      // while "1"  (timeout="200")
[13:07:58.666]      // while-condition  =>  TRUE
[13:07:58.668]      // while "1"  (timeout="200")
[13:07:58.668]      // while-condition  =>  TRUE
[13:07:58.668]      // while "1"  (timeout="200")
[13:07:58.668]      // while-condition  =>  TRUE
[13:07:58.668]      // while "1"  (timeout="200")
[13:07:58.668]      // while-condition  =>  TRUE
[13:07:58.668]      // while "1"  (timeout="200")
[13:07:58.668]      // while-condition  =>  TRUE
[13:07:58.668]      // while "1"  (timeout="200")
[13:07:58.668]      // while-condition  =>  TRUE
[13:07:58.668]      // while "1"  (timeout="200")
[13:07:58.668]      // while-condition  =>  TRUE
[13:07:58.668]      // while "1"  (timeout="200")
[13:07:58.668]      // while-condition  =>  TRUE
[13:07:58.669]      // while "1"  (timeout="200")
[13:07:58.669]      // while-condition  =>  TRUE
[13:07:58.669]      // while "1"  (timeout="200")
[13:07:58.669]      // while-condition  =>  TRUE
[13:07:58.669]      // while "1"  (timeout="200")
[13:07:58.669]      // while-condition  =>  TRUE
[13:07:58.669]      // while "1"  (timeout="200")
[13:07:58.669]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.670]      // while-condition  =>  TRUE
[13:07:58.670]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.674]      // while-condition  =>  TRUE
[13:07:58.674]      // while "1"  (timeout="200")
[13:07:58.678]      // while-condition  =>  TRUE
[13:07:58.678]      // while "1"  (timeout="200")
[13:07:58.678]      // while  =>  TIMEOUT
[13:07:58.678]      // end while "1"
[13:07:58.678]    </control>
[13:07:58.678]    <control if="canReadPins" while="" timeout="0" info="">
[13:07:58.678]      // if-block "canReadPins"
[13:07:58.678]        // =>  TRUE
[13:07:58.678]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:07:58.678]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:07:58.678]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:07:58.678]        // while-condition  =>  FALSE
[13:07:58.678]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:07:58.678]      </control>
[13:07:58.678]      // end if-block "canReadPins"
[13:07:58.678]    </control>
[13:07:58.678]    <control if="!canReadPins" while="" timeout="0" info="">
[13:07:58.678]      // if-block "!canReadPins"
[13:07:58.678]        // =>  FALSE
[13:07:58.678]      // skip if-block "!canReadPins"
[13:07:58.678]    </control>
[13:07:58.678]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:07:58.678]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:07:58.678]        // =>  TRUE
[13:07:58.678]      <block atomic="false" info="">
[13:07:58.678]        WriteAP(0x00, 0x190008);
[13:07:58.682]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:07:58.682]        WriteAP(0xF0, 0x01);
[13:07:58.689]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:07:58.689]      </block>
[13:07:58.689]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:07:58.689]    </control>
[13:07:58.689]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:07:58.689]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:07:58.689]        // =>  FALSE
[13:07:58.689]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:07:58.689]    </control>
[13:07:58.689]    <block atomic="false" info="">
[13:07:58.689]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:07:58.693]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:07:58.693]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:07:58.693]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:07:58.693]      __ap = 0; //lets make sure we reset the access point selection
[13:07:58.697]        // -> [__ap <= 0x00000000]
[13:07:58.697]    </block>
[13:07:58.697]  </sequence>
[13:07:58.697]  
[13:07:58.722]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:07:58.722]  
[13:07:58.722]  <debugvars>
[13:07:58.722]    // Pre-defined
[13:07:58.722]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:07:58.722]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:07:58.722]    __dp=0x00000000
[13:07:58.722]    __ap=0x00000000
[13:07:58.722]    __traceout=0x00000000      (Trace Disabled)
[13:07:58.722]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:07:58.722]    __FlashAddr=0x00000000
[13:07:58.722]    __FlashLen=0x00000000
[13:07:58.722]    __FlashArg=0x00000000
[13:07:58.722]    __FlashOp=0x00000000
[13:07:58.722]    __Result=0x00000000
[13:07:58.722]  </debugvars>
[13:07:58.722]  
[13:07:58.722]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:07:58.722]    <block atomic="false" info="">
[13:07:58.722]      __var deviceID = 0;
[13:07:58.722]        // -> [deviceID <= 0x00000000]
[13:07:58.722]      __var version = 0;
[13:07:58.722]        // -> [version <= 0x00000000]
[13:07:58.722]      __var partNum = 0;
[13:07:58.722]        // -> [partNum <= 0x00000000]
[13:07:58.722]      __var manuf = 0;
[13:07:58.722]        // -> [manuf <= 0x00000000]
[13:07:58.722]      __var isMSPM0G1X0X_G3X0X = 0;
[13:07:58.726]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:07:58.726]      __var isProduction = 0;
[13:07:58.726]        // -> [isProduction <= 0x00000000]
[13:07:58.726]      __var continueId = 0;
[13:07:58.726]        // -> [continueId <= 0x00000000]
[13:07:58.726]      deviceID =   Read32(0x41C40004);
[13:07:58.734]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:07:58.734]        // -> [deviceID <= 0x2BB8802F]
[13:07:58.734]      version = deviceID >> 28;
[13:07:58.734]        // -> [version <= 0x00000002]
[13:07:58.734]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:07:58.734]        // -> [partNum <= 0x0000BB88]
[13:07:58.734]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:07:58.734]        // -> [manuf <= 0x00000017]
[13:07:58.734]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:07:58.734]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:07:58.734]      isProduction = (version > 0);
[13:07:58.734]        // -> [isProduction <= 0x00000001]
[13:07:58.736]    </block>
[13:07:58.736]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:07:58.736]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:07:58.736]        // =>  FALSE
[13:07:58.736]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:07:58.736]    </control>
[13:07:58.736]    <control if="continueId == 4" while="" timeout="0" info="">
[13:07:58.736]      // if-block "continueId == 4"
[13:07:58.736]        // =>  FALSE
[13:07:58.736]      // skip if-block "continueId == 4"
[13:07:58.736]    </control>
[13:07:58.736]    <control if="!isProduction" while="" timeout="0" info="">
[13:07:58.736]      // if-block "!isProduction"
[13:07:58.736]        // =>  FALSE
[13:07:58.736]      // skip if-block "!isProduction"
[13:07:58.736]    </control>
[13:07:58.736]  </sequence>
[13:07:58.736]  
[13:08:06.100]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:08:06.100]  
[13:08:06.109]  <debugvars>
[13:08:06.109]    // Pre-defined
[13:08:06.109]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:08:06.109]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:08:06.109]    __dp=0x00000000
[13:08:06.109]    __ap=0x00000000
[13:08:06.110]    __traceout=0x00000000      (Trace Disabled)
[13:08:06.110]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:08:06.110]    __FlashAddr=0x00000000
[13:08:06.110]    __FlashLen=0x00000000
[13:08:06.110]    __FlashArg=0x00000000
[13:08:06.110]    __FlashOp=0x00000000
[13:08:06.110]    __Result=0x00000000
[13:08:06.110]  </debugvars>
[13:08:06.110]  
[13:08:06.110]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:08:06.110]    <block atomic="false" info="">
[13:08:06.110]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:08:06.110]        // -> [isSWJ <= 0x00000001]
[13:08:06.110]      __var hasDormant = __protocol & 0x00020000;
[13:08:06.110]        // -> [hasDormant <= 0x00000000]
[13:08:06.110]      __var protType   = __protocol & 0x0000FFFF;
[13:08:06.110]        // -> [protType <= 0x00000002]
[13:08:06.110]    </block>
[13:08:06.110]    <control if="protType == 1" while="" timeout="0" info="">
[13:08:06.110]      // if-block "protType == 1"
[13:08:06.110]        // =>  FALSE
[13:08:06.110]      // skip if-block "protType == 1"
[13:08:06.110]    </control>
[13:08:06.110]    <control if="protType == 2" while="" timeout="0" info="">
[13:08:06.110]      // if-block "protType == 2"
[13:08:06.110]        // =>  TRUE
[13:08:06.110]      <control if="isSWJ" while="" timeout="0" info="">
[13:08:06.110]        // if-block "isSWJ"
[13:08:06.110]          // =>  TRUE
[13:08:06.110]        <control if="hasDormant" while="" timeout="0" info="">
[13:08:06.110]          // if-block "hasDormant"
[13:08:06.110]            // =>  FALSE
[13:08:06.114]          // skip if-block "hasDormant"
[13:08:06.114]        </control>
[13:08:06.114]        <control if="!hasDormant" while="" timeout="0" info="">
[13:08:06.114]          // if-block "!hasDormant"
[13:08:06.114]            // =>  TRUE
[13:08:06.114]          <block atomic="false" info="">
[13:08:06.114]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:08:06.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:08:06.120]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:08:06.124]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:08:06.124]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:08:06.130]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:08:06.130]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:08:06.130]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:08:06.130]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:08:06.134]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:08:06.134]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:08:06.134]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:08:06.134]          </block>
[13:08:06.134]          // end if-block "!hasDormant"
[13:08:06.138]        </control>
[13:08:06.138]        // end if-block "isSWJ"
[13:08:06.138]      </control>
[13:08:06.138]      <control if="!isSWJ" while="" timeout="0" info="">
[13:08:06.138]        // if-block "!isSWJ"
[13:08:06.138]          // =>  FALSE
[13:08:06.138]        // skip if-block "!isSWJ"
[13:08:06.139]      </control>
[13:08:06.139]      <block atomic="false" info="">
[13:08:06.139]        ReadDP(0x0);
[13:08:06.142]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:08:06.142]      </block>
[13:08:06.142]      // end if-block "protType == 2"
[13:08:06.142]    </control>
[13:08:06.142]  </sequence>
[13:08:06.142]  
[13:08:06.142]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:08:06.142]  
[13:08:06.142]  <debugvars>
[13:08:06.142]    // Pre-defined
[13:08:06.142]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:08:06.146]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:08:06.146]    __dp=0x00000000
[13:08:06.146]    __ap=0x00000000
[13:08:06.146]    __traceout=0x00000000      (Trace Disabled)
[13:08:06.146]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:08:06.146]    __FlashAddr=0x00000000
[13:08:06.146]    __FlashLen=0x00000000
[13:08:06.146]    __FlashArg=0x00000000
[13:08:06.146]    __FlashOp=0x00000000
[13:08:06.146]    __Result=0x00000000
[13:08:06.146]  </debugvars>
[13:08:06.146]  
[13:08:06.146]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:08:06.148]    <block atomic="false" info="">
[13:08:06.148]      __var SW_DP_ABORT       = 0x0;
[13:08:06.148]        // -> [SW_DP_ABORT <= 0x00000000]
[13:08:06.148]      __var DP_CTRL_STAT      = 0x4;
[13:08:06.148]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:08:06.148]      __var DP_SELECT         = 0x8;
[13:08:06.148]        // -> [DP_SELECT <= 0x00000008]
[13:08:06.148]      __var powered_down      = 0;
[13:08:06.148]        // -> [powered_down <= 0x00000000]
[13:08:06.148]      WriteDP(DP_SELECT, 0x00000000);
[13:08:06.150]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:08:06.150]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:08:06.154]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:08:06.154]        // -> [powered_down <= 0x00000001]
[13:08:06.154]    </block>
[13:08:06.154]    <control if="powered_down" while="" timeout="0" info="">
[13:08:06.154]      // if-block "powered_down"
[13:08:06.154]        // =>  TRUE
[13:08:06.154]      <block atomic="false" info="">
[13:08:06.154]        Message(0, "Debug/System power-up request sent");
[13:08:06.157]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:08:06.160]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:08:06.160]      </block>
[13:08:06.160]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:08:06.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:08:06.162]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:08:06.162]        // while-condition  =>  FALSE
[13:08:06.162]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:08:06.162]      </control>
[13:08:06.162]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:08:06.162]        // if-block "(__protocol & 0xFFFF) == 1"
[13:08:06.162]          // =>  FALSE
[13:08:06.162]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:08:06.162]      </control>
[13:08:06.162]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:08:06.162]        // if-block "(__protocol & 0xFFFF) == 2"
[13:08:06.165]          // =>  TRUE
[13:08:06.165]        <block atomic="false" info="">
[13:08:06.165]          Message(0, "executing SWD power up");
[13:08:06.165]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:08:06.169]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:08:06.169]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:08:06.177]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:08:06.177]        </block>
[13:08:06.177]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:08:06.177]      </control>
[13:08:06.177]      // end if-block "powered_down"
[13:08:06.178]    </control>
[13:08:06.178]    <block atomic="false" info="">
[13:08:06.178]      __var DEBUG_PORT_VAL    = 0;
[13:08:06.178]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:08:06.178]      __var ACCESS_POINT_VAL  = 0;
[13:08:06.178]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:08:06.178]      __ap = 1; 
[13:08:06.178]        // -> [__ap <= 0x00000001]
[13:08:06.178]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:08:06.181]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:08:06.181]      __ap = 4;
[13:08:06.181]        // -> [__ap <= 0x00000004]
[13:08:06.185]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:08:06.189]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:08:06.189]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:08:06.189]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:08:06.189]    </block>
[13:08:06.189]    <block atomic="false" info="">
[13:08:06.189]      __var nReset = 0x80;
[13:08:06.189]        // -> [nReset <= 0x00000080]
[13:08:06.189]      __var canReadPins = 0;
[13:08:06.193]        // -> [canReadPins <= 0x00000000]
[13:08:06.193]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:08:06.193]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:08:06.193]        // -> [canReadPins <= 0x00000001]
[13:08:06.193]    </block>
[13:08:06.193]    <control if="" while="1" timeout="200" info="">
[13:08:06.193]      // while "1"  (timeout="200")
[13:08:06.193]      // while-condition  =>  TRUE
[13:08:06.193]      // while "1"  (timeout="200")
[13:08:06.193]      // while-condition  =>  TRUE
[13:08:06.193]      // while "1"  (timeout="200")
[13:08:06.193]      // while-condition  =>  TRUE
[13:08:06.193]      // while "1"  (timeout="200")
[13:08:06.193]      // while-condition  =>  TRUE
[13:08:06.193]      // while "1"  (timeout="200")
[13:08:06.193]      // while-condition  =>  TRUE
[13:08:06.193]      // while "1"  (timeout="200")
[13:08:06.193]      // while-condition  =>  TRUE
[13:08:06.193]      // while "1"  (timeout="200")
[13:08:06.193]      // while-condition  =>  TRUE
[13:08:06.193]      // while "1"  (timeout="200")
[13:08:06.193]      // while-condition  =>  TRUE
[13:08:06.193]      // while "1"  (timeout="200")
[13:08:06.193]      // while-condition  =>  TRUE
[13:08:06.193]      // while "1"  (timeout="200")
[13:08:06.193]      // while-condition  =>  TRUE
[13:08:06.197]      // while "1"  (timeout="200")
[13:08:06.197]      // while-condition  =>  TRUE
[13:08:06.197]      // while "1"  (timeout="200")
[13:08:06.197]      // while-condition  =>  TRUE
[13:08:06.197]      // while "1"  (timeout="200")
[13:08:06.197]      // while-condition  =>  TRUE
[13:08:06.197]      // while "1"  (timeout="200")
[13:08:06.197]      // while-condition  =>  TRUE
[13:08:06.198]      // while "1"  (timeout="200")
[13:08:06.198]      // while-condition  =>  TRUE
[13:08:06.198]      // while "1"  (timeout="200")
[13:08:06.198]      // while-condition  =>  TRUE
[13:08:06.198]      // while "1"  (timeout="200")
[13:08:06.198]      // while-condition  =>  TRUE
[13:08:06.198]      // while "1"  (timeout="200")
[13:08:06.198]      // while-condition  =>  TRUE
[13:08:06.198]      // while "1"  (timeout="200")
[13:08:06.200]      // while-condition  =>  TRUE
[13:08:06.200]      // while "1"  (timeout="200")
[13:08:06.200]      // while-condition  =>  TRUE
[13:08:06.200]      // while "1"  (timeout="200")
[13:08:06.200]      // while-condition  =>  TRUE
[13:08:06.200]      // while "1"  (timeout="200")
[13:08:06.200]      // while-condition  =>  TRUE
[13:08:06.200]      // while "1"  (timeout="200")
[13:08:06.200]      // while-condition  =>  TRUE
[13:08:06.200]      // while "1"  (timeout="200")
[13:08:06.200]      // while-condition  =>  TRUE
[13:08:06.200]      // while "1"  (timeout="200")
[13:08:06.200]      // while-condition  =>  TRUE
[13:08:06.201]      // while "1"  (timeout="200")
[13:08:06.201]      // while-condition  =>  TRUE
[13:08:06.201]      // while "1"  (timeout="200")
[13:08:06.201]      // while-condition  =>  TRUE
[13:08:06.201]      // while "1"  (timeout="200")
[13:08:06.201]      // while-condition  =>  TRUE
[13:08:06.201]      // while "1"  (timeout="200")
[13:08:06.201]      // while-condition  =>  TRUE
[13:08:06.201]      // while "1"  (timeout="200")
[13:08:06.201]      // while-condition  =>  TRUE
[13:08:06.201]      // while "1"  (timeout="200")
[13:08:06.201]      // while-condition  =>  TRUE
[13:08:06.201]      // while "1"  (timeout="200")
[13:08:06.203]      // while-condition  =>  TRUE
[13:08:06.203]      // while "1"  (timeout="200")
[13:08:06.203]      // while-condition  =>  TRUE
[13:08:06.203]      // while "1"  (timeout="200")
[13:08:06.203]      // while-condition  =>  TRUE
[13:08:06.203]      // while "1"  (timeout="200")
[13:08:06.203]      // while-condition  =>  TRUE
[13:08:06.203]      // while "1"  (timeout="200")
[13:08:06.203]      // while-condition  =>  TRUE
[13:08:06.203]      // while "1"  (timeout="200")
[13:08:06.203]      // while-condition  =>  TRUE
[13:08:06.203]      // while "1"  (timeout="200")
[13:08:06.203]      // while-condition  =>  TRUE
[13:08:06.203]      // while "1"  (timeout="200")
[13:08:06.203]      // while-condition  =>  TRUE
[13:08:06.203]      // while "1"  (timeout="200")
[13:08:06.203]      // while-condition  =>  TRUE
[13:08:06.203]      // while "1"  (timeout="200")
[13:08:06.203]      // while-condition  =>  TRUE
[13:08:06.203]      // while "1"  (timeout="200")
[13:08:06.203]      // while-condition  =>  TRUE
[13:08:06.205]      // while "1"  (timeout="200")
[13:08:06.205]      // while-condition  =>  TRUE
[13:08:06.205]      // while "1"  (timeout="200")
[13:08:06.205]      // while-condition  =>  TRUE
[13:08:06.205]      // while "1"  (timeout="200")
[13:08:06.205]      // while-condition  =>  TRUE
[13:08:06.205]      // while "1"  (timeout="200")
[13:08:06.205]      // while-condition  =>  TRUE
[13:08:06.205]      // while "1"  (timeout="200")
[13:08:06.205]      // while-condition  =>  TRUE
[13:08:06.205]      // while "1"  (timeout="200")
[13:08:06.207]      // while-condition  =>  TRUE
[13:08:06.207]      // while "1"  (timeout="200")
[13:08:06.207]      // while-condition  =>  TRUE
[13:08:06.207]      // while "1"  (timeout="200")
[13:08:06.207]      // while-condition  =>  TRUE
[13:08:06.207]      // while "1"  (timeout="200")
[13:08:06.208]      // while-condition  =>  TRUE
[13:08:06.208]      // while "1"  (timeout="200")
[13:08:06.208]      // while  =>  TIMEOUT
[13:08:06.208]      // end while "1"
[13:08:06.208]    </control>
[13:08:06.208]    <control if="canReadPins" while="" timeout="0" info="">
[13:08:06.208]      // if-block "canReadPins"
[13:08:06.209]        // =>  TRUE
[13:08:06.209]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:08:06.209]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:08:06.219]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:08:06.219]        // while-condition  =>  FALSE
[13:08:06.219]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:08:06.219]      </control>
[13:08:06.219]      // end if-block "canReadPins"
[13:08:06.220]    </control>
[13:08:06.220]    <control if="!canReadPins" while="" timeout="0" info="">
[13:08:06.220]      // if-block "!canReadPins"
[13:08:06.220]        // =>  FALSE
[13:08:06.220]      // skip if-block "!canReadPins"
[13:08:06.220]    </control>
[13:08:06.220]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:08:06.220]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:08:06.220]        // =>  TRUE
[13:08:06.220]      <block atomic="false" info="">
[13:08:06.220]        WriteAP(0x00, 0x190008);
[13:08:06.226]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:08:06.226]        WriteAP(0xF0, 0x01);
[13:08:06.230]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:08:06.231]      </block>
[13:08:06.231]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:08:06.231]    </control>
[13:08:06.231]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:08:06.231]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:08:06.231]        // =>  FALSE
[13:08:06.231]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:08:06.231]    </control>
[13:08:06.231]    <block atomic="false" info="">
[13:08:06.231]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:08:06.239]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:08:06.239]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:08:06.239]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:08:06.243]      __ap = 0; //lets make sure we reset the access point selection
[13:08:06.243]        // -> [__ap <= 0x00000000]
[13:08:06.243]    </block>
[13:08:06.243]  </sequence>
[13:08:06.243]  
[13:08:06.272]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:08:06.272]  
[13:08:06.272]  <debugvars>
[13:08:06.272]    // Pre-defined
[13:08:06.272]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:08:06.272]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:08:06.272]    __dp=0x00000000
[13:08:06.272]    __ap=0x00000000
[13:08:06.276]    __traceout=0x00000000      (Trace Disabled)
[13:08:06.276]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:08:06.276]    __FlashAddr=0x00000000
[13:08:06.276]    __FlashLen=0x00000000
[13:08:06.276]    __FlashArg=0x00000000
[13:08:06.276]    __FlashOp=0x00000000
[13:08:06.276]    __Result=0x00000000
[13:08:06.276]  </debugvars>
[13:08:06.276]  
[13:08:06.276]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:08:06.276]    <block atomic="false" info="">
[13:08:06.277]      __var deviceID = 0;
[13:08:06.277]        // -> [deviceID <= 0x00000000]
[13:08:06.277]      __var version = 0;
[13:08:06.277]        // -> [version <= 0x00000000]
[13:08:06.277]      __var partNum = 0;
[13:08:06.278]        // -> [partNum <= 0x00000000]
[13:08:06.278]      __var manuf = 0;
[13:08:06.278]        // -> [manuf <= 0x00000000]
[13:08:06.278]      __var isMSPM0G1X0X_G3X0X = 0;
[13:08:06.278]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:08:06.278]      __var isProduction = 0;
[13:08:06.278]        // -> [isProduction <= 0x00000000]
[13:08:06.278]      __var continueId = 0;
[13:08:06.279]        // -> [continueId <= 0x00000000]
[13:08:06.279]      deviceID =   Read32(0x41C40004);
[13:08:06.284]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:08:06.284]        // -> [deviceID <= 0x2BB8802F]
[13:08:06.284]      version = deviceID >> 28;
[13:08:06.284]        // -> [version <= 0x00000002]
[13:08:06.284]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:08:06.284]        // -> [partNum <= 0x0000BB88]
[13:08:06.285]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:08:06.285]        // -> [manuf <= 0x00000017]
[13:08:06.285]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:08:06.285]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:08:06.285]      isProduction = (version > 0);
[13:08:06.285]        // -> [isProduction <= 0x00000001]
[13:08:06.285]    </block>
[13:08:06.285]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:08:06.285]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:08:06.285]        // =>  FALSE
[13:08:06.285]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:08:06.286]    </control>
[13:08:06.286]    <control if="continueId == 4" while="" timeout="0" info="">
[13:08:06.286]      // if-block "continueId == 4"
[13:08:06.286]        // =>  FALSE
[13:08:06.286]      // skip if-block "continueId == 4"
[13:08:06.286]    </control>
[13:08:06.286]    <control if="!isProduction" while="" timeout="0" info="">
[13:08:06.286]      // if-block "!isProduction"
[13:08:06.286]        // =>  FALSE
[13:08:06.286]      // skip if-block "!isProduction"
[13:08:06.286]    </control>
[13:08:06.286]  </sequence>
[13:08:06.288]  
[13:11:11.314]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:11:11.314]  
[13:11:11.322]  <debugvars>
[13:11:11.322]    // Pre-defined
[13:11:11.322]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:11:11.322]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:11:11.322]    __dp=0x00000000
[13:11:11.322]    __ap=0x00000000
[13:11:11.322]    __traceout=0x00000000      (Trace Disabled)
[13:11:11.322]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:11:11.322]    __FlashAddr=0x00000000
[13:11:11.322]    __FlashLen=0x00000000
[13:11:11.322]    __FlashArg=0x00000000
[13:11:11.322]    __FlashOp=0x00000000
[13:11:11.322]    __Result=0x00000000
[13:11:11.322]  </debugvars>
[13:11:11.322]  
[13:11:11.322]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:11:11.324]    <block atomic="false" info="">
[13:11:11.324]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:11:11.324]        // -> [isSWJ <= 0x00000001]
[13:11:11.324]      __var hasDormant = __protocol & 0x00020000;
[13:11:11.324]        // -> [hasDormant <= 0x00000000]
[13:11:11.324]      __var protType   = __protocol & 0x0000FFFF;
[13:11:11.324]        // -> [protType <= 0x00000002]
[13:11:11.324]    </block>
[13:11:11.326]    <control if="protType == 1" while="" timeout="0" info="">
[13:11:11.326]      // if-block "protType == 1"
[13:11:11.326]        // =>  FALSE
[13:11:11.326]      // skip if-block "protType == 1"
[13:11:11.326]    </control>
[13:11:11.326]    <control if="protType == 2" while="" timeout="0" info="">
[13:11:11.326]      // if-block "protType == 2"
[13:11:11.326]        // =>  TRUE
[13:11:11.326]      <control if="isSWJ" while="" timeout="0" info="">
[13:11:11.326]        // if-block "isSWJ"
[13:11:11.326]          // =>  TRUE
[13:11:11.326]        <control if="hasDormant" while="" timeout="0" info="">
[13:11:11.326]          // if-block "hasDormant"
[13:11:11.326]            // =>  FALSE
[13:11:11.328]          // skip if-block "hasDormant"
[13:11:11.328]        </control>
[13:11:11.328]        <control if="!hasDormant" while="" timeout="0" info="">
[13:11:11.328]          // if-block "!hasDormant"
[13:11:11.328]            // =>  TRUE
[13:11:11.328]          <block atomic="false" info="">
[13:11:11.328]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:11:11.330]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:11:11.330]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:11:11.338]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:11:11.338]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:11:11.339]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:11:11.339]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:11:11.339]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:11:11.339]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:11:11.342]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:11:11.342]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:11:11.342]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:11:11.342]          </block>
[13:11:11.342]          // end if-block "!hasDormant"
[13:11:11.342]        </control>
[13:11:11.342]        // end if-block "isSWJ"
[13:11:11.342]      </control>
[13:11:11.342]      <control if="!isSWJ" while="" timeout="0" info="">
[13:11:11.342]        // if-block "!isSWJ"
[13:11:11.346]          // =>  FALSE
[13:11:11.346]        // skip if-block "!isSWJ"
[13:11:11.346]      </control>
[13:11:11.346]      <block atomic="false" info="">
[13:11:11.346]        ReadDP(0x0);
[13:11:11.346]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:11:11.346]      </block>
[13:11:11.348]      // end if-block "protType == 2"
[13:11:11.348]    </control>
[13:11:11.348]  </sequence>
[13:11:11.348]  
[13:11:11.351]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:11:11.351]  
[13:11:11.351]  <debugvars>
[13:11:11.351]    // Pre-defined
[13:11:11.351]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:11:11.351]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:11:11.351]    __dp=0x00000000
[13:11:11.351]    __ap=0x00000000
[13:11:11.351]    __traceout=0x00000000      (Trace Disabled)
[13:11:11.351]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:11:11.351]    __FlashAddr=0x00000000
[13:11:11.351]    __FlashLen=0x00000000
[13:11:11.351]    __FlashArg=0x00000000
[13:11:11.351]    __FlashOp=0x00000000
[13:11:11.351]    __Result=0x00000000
[13:11:11.351]  </debugvars>
[13:11:11.351]  
[13:11:11.351]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:11:11.351]    <block atomic="false" info="">
[13:11:11.351]      __var SW_DP_ABORT       = 0x0;
[13:11:11.351]        // -> [SW_DP_ABORT <= 0x00000000]
[13:11:11.351]      __var DP_CTRL_STAT      = 0x4;
[13:11:11.351]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:11:11.351]      __var DP_SELECT         = 0x8;
[13:11:11.351]        // -> [DP_SELECT <= 0x00000008]
[13:11:11.351]      __var powered_down      = 0;
[13:11:11.351]        // -> [powered_down <= 0x00000000]
[13:11:11.351]      WriteDP(DP_SELECT, 0x00000000);
[13:11:11.354]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:11:11.354]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:11:11.354]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:11:11.354]        // -> [powered_down <= 0x00000001]
[13:11:11.354]    </block>
[13:11:11.358]    <control if="powered_down" while="" timeout="0" info="">
[13:11:11.358]      // if-block "powered_down"
[13:11:11.358]        // =>  TRUE
[13:11:11.358]      <block atomic="false" info="">
[13:11:11.358]        Message(0, "Debug/System power-up request sent");
[13:11:11.359]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:11:11.366]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:11:11.366]      </block>
[13:11:11.366]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:11:11.366]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:11:11.370]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:11:11.370]        // while-condition  =>  FALSE
[13:11:11.370]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:11:11.370]      </control>
[13:11:11.370]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:11:11.371]        // if-block "(__protocol & 0xFFFF) == 1"
[13:11:11.371]          // =>  FALSE
[13:11:11.371]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:11:11.371]      </control>
[13:11:11.371]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:11:11.371]        // if-block "(__protocol & 0xFFFF) == 2"
[13:11:11.371]          // =>  TRUE
[13:11:11.371]        <block atomic="false" info="">
[13:11:11.371]          Message(0, "executing SWD power up");
[13:11:11.374]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:11:11.374]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:11:11.374]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:11:11.374]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:11:11.374]        </block>
[13:11:11.378]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:11:11.378]      </control>
[13:11:11.378]      // end if-block "powered_down"
[13:11:11.378]    </control>
[13:11:11.378]    <block atomic="false" info="">
[13:11:11.378]      __var DEBUG_PORT_VAL    = 0;
[13:11:11.379]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:11:11.379]      __var ACCESS_POINT_VAL  = 0;
[13:11:11.379]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:11:11.379]      __ap = 1; 
[13:11:11.379]        // -> [__ap <= 0x00000001]
[13:11:11.379]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:11:11.386]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:11:11.386]      __ap = 4;
[13:11:11.387]        // -> [__ap <= 0x00000004]
[13:11:11.387]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:11:11.394]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:11:11.394]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:11:11.394]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:11:11.394]    </block>
[13:11:11.394]    <block atomic="false" info="">
[13:11:11.398]      __var nReset = 0x80;
[13:11:11.398]        // -> [nReset <= 0x00000080]
[13:11:11.398]      __var canReadPins = 0;
[13:11:11.398]        // -> [canReadPins <= 0x00000000]
[13:11:11.398]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:11:11.407]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:11:11.407]        // -> [canReadPins <= 0x00000001]
[13:11:11.408]    </block>
[13:11:11.408]    <control if="" while="1" timeout="200" info="">
[13:11:11.408]      // while "1"  (timeout="200")
[13:11:11.408]      // while-condition  =>  TRUE
[13:11:11.408]      // while "1"  (timeout="200")
[13:11:11.409]      // while-condition  =>  TRUE
[13:11:11.409]      // while "1"  (timeout="200")
[13:11:11.409]      // while-condition  =>  TRUE
[13:11:11.409]      // while "1"  (timeout="200")
[13:11:11.409]      // while-condition  =>  TRUE
[13:11:11.409]      // while "1"  (timeout="200")
[13:11:11.409]      // while-condition  =>  TRUE
[13:11:11.409]      // while "1"  (timeout="200")
[13:11:11.409]      // while-condition  =>  TRUE
[13:11:11.409]      // while "1"  (timeout="200")
[13:11:11.409]      // while-condition  =>  TRUE
[13:11:11.409]      // while "1"  (timeout="200")
[13:11:11.409]      // while-condition  =>  TRUE
[13:11:11.409]      // while "1"  (timeout="200")
[13:11:11.409]      // while-condition  =>  TRUE
[13:11:11.409]      // while "1"  (timeout="200")
[13:11:11.409]      // while-condition  =>  TRUE
[13:11:11.411]      // while "1"  (timeout="200")
[13:11:11.411]      // while  =>  TIMEOUT
[13:11:11.411]      // end while "1"
[13:11:11.411]    </control>
[13:11:11.411]    <control if="canReadPins" while="" timeout="0" info="">
[13:11:11.411]      // if-block "canReadPins"
[13:11:11.411]        // =>  TRUE
[13:11:11.411]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:11:11.411]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:11:11.413]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:11:11.413]        // while-condition  =>  FALSE
[13:11:11.413]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:11:11.413]      </control>
[13:11:11.413]      // end if-block "canReadPins"
[13:11:11.413]    </control>
[13:11:11.413]    <control if="!canReadPins" while="" timeout="0" info="">
[13:11:11.413]      // if-block "!canReadPins"
[13:11:11.413]        // =>  FALSE
[13:11:11.413]      // skip if-block "!canReadPins"
[13:11:11.413]    </control>
[13:11:11.413]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:11:11.413]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:11:11.413]        // =>  TRUE
[13:11:11.413]      <block atomic="false" info="">
[13:11:11.413]        WriteAP(0x00, 0x190008);
[13:11:11.415]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:11:11.415]        WriteAP(0xF0, 0x01);
[13:11:11.420]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:11:11.420]      </block>
[13:11:11.420]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:11:11.420]    </control>
[13:11:11.420]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:11:11.423]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:11:11.423]        // =>  FALSE
[13:11:11.423]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:11:11.423]    </control>
[13:11:11.423]    <block atomic="false" info="">
[13:11:11.423]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:11:11.429]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:11:11.429]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:11:11.429]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:11:11.431]      __ap = 0; //lets make sure we reset the access point selection
[13:11:11.431]        // -> [__ap <= 0x00000000]
[13:11:11.431]    </block>
[13:11:11.431]  </sequence>
[13:11:11.431]  
[13:11:11.469]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:11:11.469]  
[13:11:11.469]  <debugvars>
[13:11:11.469]    // Pre-defined
[13:11:11.469]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:11:11.469]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:11:11.469]    __dp=0x00000000
[13:11:11.469]    __ap=0x00000000
[13:11:11.469]    __traceout=0x00000000      (Trace Disabled)
[13:11:11.469]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:11:11.469]    __FlashAddr=0x00000000
[13:11:11.469]    __FlashLen=0x00000000
[13:11:11.469]    __FlashArg=0x00000000
[13:11:11.469]    __FlashOp=0x00000000
[13:11:11.469]    __Result=0x00000000
[13:11:11.469]  </debugvars>
[13:11:11.469]  
[13:11:11.469]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:11:11.469]    <block atomic="false" info="">
[13:11:11.469]      __var deviceID = 0;
[13:11:11.469]        // -> [deviceID <= 0x00000000]
[13:11:11.469]      __var version = 0;
[13:11:11.469]        // -> [version <= 0x00000000]
[13:11:11.469]      __var partNum = 0;
[13:11:11.469]        // -> [partNum <= 0x00000000]
[13:11:11.469]      __var manuf = 0;
[13:11:11.472]        // -> [manuf <= 0x00000000]
[13:11:11.472]      __var isMSPM0G1X0X_G3X0X = 0;
[13:11:11.472]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:11:11.472]      __var isProduction = 0;
[13:11:11.472]        // -> [isProduction <= 0x00000000]
[13:11:11.472]      __var continueId = 0;
[13:11:11.472]        // -> [continueId <= 0x00000000]
[13:11:11.472]      deviceID =   Read32(0x41C40004);
[13:11:11.480]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:11:11.480]        // -> [deviceID <= 0x2BB8802F]
[13:11:11.480]      version = deviceID >> 28;
[13:11:11.480]        // -> [version <= 0x00000002]
[13:11:11.480]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:11:11.480]        // -> [partNum <= 0x0000BB88]
[13:11:11.480]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:11:11.480]        // -> [manuf <= 0x00000017]
[13:11:11.480]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:11:11.480]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:11:11.480]      isProduction = (version > 0);
[13:11:11.480]        // -> [isProduction <= 0x00000001]
[13:11:11.480]    </block>
[13:11:11.480]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:11:11.480]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:11:11.480]        // =>  FALSE
[13:11:11.480]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:11:11.480]    </control>
[13:11:11.480]    <control if="continueId == 4" while="" timeout="0" info="">
[13:11:11.484]      // if-block "continueId == 4"
[13:11:11.484]        // =>  FALSE
[13:11:11.484]      // skip if-block "continueId == 4"
[13:11:11.484]    </control>
[13:11:11.484]    <control if="!isProduction" while="" timeout="0" info="">
[13:11:11.484]      // if-block "!isProduction"
[13:11:11.484]        // =>  FALSE
[13:11:11.484]      // skip if-block "!isProduction"
[13:11:11.484]    </control>
[13:11:11.484]  </sequence>
[13:11:11.484]  
[13:11:18.274]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:11:18.274]  
[13:11:18.274]  <debugvars>
[13:11:18.274]    // Pre-defined
[13:11:18.274]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:11:18.278]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:11:18.278]    __dp=0x00000000
[13:11:18.278]    __ap=0x00000000
[13:11:18.278]    __traceout=0x00000000      (Trace Disabled)
[13:11:18.278]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:11:18.278]    __FlashAddr=0x00000000
[13:11:18.278]    __FlashLen=0x00000000
[13:11:18.278]    __FlashArg=0x00000000
[13:11:18.278]    __FlashOp=0x00000000
[13:11:18.278]    __Result=0x00000000
[13:11:18.279]  </debugvars>
[13:11:18.279]  
[13:11:18.279]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:11:18.279]    <block atomic="false" info="">
[13:11:18.279]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:11:18.279]        // -> [isSWJ <= 0x00000001]
[13:11:18.279]      __var hasDormant = __protocol & 0x00020000;
[13:11:18.279]        // -> [hasDormant <= 0x00000000]
[13:11:18.280]      __var protType   = __protocol & 0x0000FFFF;
[13:11:18.280]        // -> [protType <= 0x00000002]
[13:11:18.280]    </block>
[13:11:18.280]    <control if="protType == 1" while="" timeout="0" info="">
[13:11:18.280]      // if-block "protType == 1"
[13:11:18.280]        // =>  FALSE
[13:11:18.280]      // skip if-block "protType == 1"
[13:11:18.280]    </control>
[13:11:18.280]    <control if="protType == 2" while="" timeout="0" info="">
[13:11:18.280]      // if-block "protType == 2"
[13:11:18.280]        // =>  TRUE
[13:11:18.280]      <control if="isSWJ" while="" timeout="0" info="">
[13:11:18.280]        // if-block "isSWJ"
[13:11:18.280]          // =>  TRUE
[13:11:18.280]        <control if="hasDormant" while="" timeout="0" info="">
[13:11:18.282]          // if-block "hasDormant"
[13:11:18.282]            // =>  FALSE
[13:11:18.282]          // skip if-block "hasDormant"
[13:11:18.282]        </control>
[13:11:18.282]        <control if="!hasDormant" while="" timeout="0" info="">
[13:11:18.282]          // if-block "!hasDormant"
[13:11:18.282]            // =>  TRUE
[13:11:18.282]          <block atomic="false" info="">
[13:11:18.282]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:11:18.283]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:11:18.283]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:11:18.286]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:11:18.286]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:11:18.290]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:11:18.294]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:11:18.296]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:11:18.296]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:11:18.298]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:11:18.298]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:11:18.299]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:11:18.299]          </block>
[13:11:18.299]          // end if-block "!hasDormant"
[13:11:18.299]        </control>
[13:11:18.302]        // end if-block "isSWJ"
[13:11:18.302]      </control>
[13:11:18.302]      <control if="!isSWJ" while="" timeout="0" info="">
[13:11:18.302]        // if-block "!isSWJ"
[13:11:18.302]          // =>  FALSE
[13:11:18.302]        // skip if-block "!isSWJ"
[13:11:18.302]      </control>
[13:11:18.302]      <block atomic="false" info="">
[13:11:18.302]        ReadDP(0x0);
[13:11:18.305]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:11:18.305]      </block>
[13:11:18.305]      // end if-block "protType == 2"
[13:11:18.305]    </control>
[13:11:18.305]  </sequence>
[13:11:18.305]  
[13:11:18.311]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:11:18.311]  
[13:11:18.311]  <debugvars>
[13:11:18.311]    // Pre-defined
[13:11:18.311]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:11:18.312]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:11:18.312]    __dp=0x00000000
[13:11:18.312]    __ap=0x00000000
[13:11:18.312]    __traceout=0x00000000      (Trace Disabled)
[13:11:18.312]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:11:18.312]    __FlashAddr=0x00000000
[13:11:18.312]    __FlashLen=0x00000000
[13:11:18.312]    __FlashArg=0x00000000
[13:11:18.312]    __FlashOp=0x00000000
[13:11:18.312]    __Result=0x00000000
[13:11:18.312]  </debugvars>
[13:11:18.312]  
[13:11:18.312]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:11:18.312]    <block atomic="false" info="">
[13:11:18.312]      __var SW_DP_ABORT       = 0x0;
[13:11:18.312]        // -> [SW_DP_ABORT <= 0x00000000]
[13:11:18.312]      __var DP_CTRL_STAT      = 0x4;
[13:11:18.312]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:11:18.312]      __var DP_SELECT         = 0x8;
[13:11:18.312]        // -> [DP_SELECT <= 0x00000008]
[13:11:18.312]      __var powered_down      = 0;
[13:11:18.312]        // -> [powered_down <= 0x00000000]
[13:11:18.312]      WriteDP(DP_SELECT, 0x00000000);
[13:11:18.318]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:11:18.319]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:11:18.319]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:11:18.319]        // -> [powered_down <= 0x00000001]
[13:11:18.319]    </block>
[13:11:18.319]    <control if="powered_down" while="" timeout="0" info="">
[13:11:18.319]      // if-block "powered_down"
[13:11:18.319]        // =>  TRUE
[13:11:18.319]      <block atomic="false" info="">
[13:11:18.319]        Message(0, "Debug/System power-up request sent");
[13:11:18.322]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:11:18.327]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:11:18.327]      </block>
[13:11:18.327]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:11:18.328]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:11:18.333]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:11:18.333]        // while-condition  =>  FALSE
[13:11:18.333]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:11:18.334]      </control>
[13:11:18.334]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:11:18.334]        // if-block "(__protocol & 0xFFFF) == 1"
[13:11:18.334]          // =>  FALSE
[13:11:18.334]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:11:18.334]      </control>
[13:11:18.334]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:11:18.334]        // if-block "(__protocol & 0xFFFF) == 2"
[13:11:18.334]          // =>  TRUE
[13:11:18.335]        <block atomic="false" info="">
[13:11:18.335]          Message(0, "executing SWD power up");
[13:11:18.336]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:11:18.340]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:11:18.340]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:11:18.344]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:11:18.344]        </block>
[13:11:18.344]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:11:18.344]      </control>
[13:11:18.344]      // end if-block "powered_down"
[13:11:18.344]    </control>
[13:11:18.344]    <block atomic="false" info="">
[13:11:18.344]      __var DEBUG_PORT_VAL    = 0;
[13:11:18.344]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:11:18.344]      __var ACCESS_POINT_VAL  = 0;
[13:11:18.344]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:11:18.344]      __ap = 1; 
[13:11:18.344]        // -> [__ap <= 0x00000001]
[13:11:18.344]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:11:18.358]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:11:18.358]      __ap = 4;
[13:11:18.358]        // -> [__ap <= 0x00000004]
[13:11:18.358]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:11:18.371]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:11:18.371]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:11:18.371]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:11:18.375]    </block>
[13:11:18.375]    <block atomic="false" info="">
[13:11:18.375]      __var nReset = 0x80;
[13:11:18.375]        // -> [nReset <= 0x00000080]
[13:11:18.375]      __var canReadPins = 0;
[13:11:18.375]        // -> [canReadPins <= 0x00000000]
[13:11:18.375]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:11:18.378]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:11:18.379]        // -> [canReadPins <= 0x00000001]
[13:11:18.379]    </block>
[13:11:18.379]    <control if="" while="1" timeout="200" info="">
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.379]      // while-condition  =>  TRUE
[13:11:18.379]      // while "1"  (timeout="200")
[13:11:18.383]      // while-condition  =>  TRUE
[13:11:18.383]      // while "1"  (timeout="200")
[13:11:18.383]      // while-condition  =>  TRUE
[13:11:18.383]      // while "1"  (timeout="200")
[13:11:18.383]      // while-condition  =>  TRUE
[13:11:18.383]      // while "1"  (timeout="200")
[13:11:18.383]      // while-condition  =>  TRUE
[13:11:18.383]      // while "1"  (timeout="200")
[13:11:18.383]      // while-condition  =>  TRUE
[13:11:18.383]      // while "1"  (timeout="200")
[13:11:18.383]      // while-condition  =>  TRUE
[13:11:18.383]      // while "1"  (timeout="200")
[13:11:18.383]      // while-condition  =>  TRUE
[13:11:18.383]      // while "1"  (timeout="200")
[13:11:18.383]      // while-condition  =>  TRUE
[13:11:18.383]      // while "1"  (timeout="200")
[13:11:18.383]      // while-condition  =>  TRUE
[13:11:18.385]      // while "1"  (timeout="200")
[13:11:18.385]      // while-condition  =>  TRUE
[13:11:18.385]      // while "1"  (timeout="200")
[13:11:18.386]      // while-condition  =>  TRUE
[13:11:18.386]      // while "1"  (timeout="200")
[13:11:18.386]      // while-condition  =>  TRUE
[13:11:18.386]      // while "1"  (timeout="200")
[13:11:18.386]      // while-condition  =>  TRUE
[13:11:18.386]      // while "1"  (timeout="200")
[13:11:18.386]      // while-condition  =>  TRUE
[13:11:18.386]      // while "1"  (timeout="200")
[13:11:18.386]      // while-condition  =>  TRUE
[13:11:18.386]      // while "1"  (timeout="200")
[13:11:18.386]      // while-condition  =>  TRUE
[13:11:18.386]      // while "1"  (timeout="200")
[13:11:18.386]      // while-condition  =>  TRUE
[13:11:18.386]      // while "1"  (timeout="200")
[13:11:18.386]      // while-condition  =>  TRUE
[13:11:18.386]      // while "1"  (timeout="200")
[13:11:18.386]      // while-condition  =>  TRUE
[13:11:18.387]      // while "1"  (timeout="200")
[13:11:18.387]      // while-condition  =>  TRUE
[13:11:18.388]      // while "1"  (timeout="200")
[13:11:18.388]      // while-condition  =>  TRUE
[13:11:18.388]      // while "1"  (timeout="200")
[13:11:18.388]      // while-condition  =>  TRUE
[13:11:18.388]      // while "1"  (timeout="200")
[13:11:18.388]      // while-condition  =>  TRUE
[13:11:18.388]      // while "1"  (timeout="200")
[13:11:18.388]      // while-condition  =>  TRUE
[13:11:18.388]      // while "1"  (timeout="200")
[13:11:18.388]      // while-condition  =>  TRUE
[13:11:18.388]      // while "1"  (timeout="200")
[13:11:18.389]      // while-condition  =>  TRUE
[13:11:18.389]      // while "1"  (timeout="200")
[13:11:18.389]      // while-condition  =>  TRUE
[13:11:18.389]      // while "1"  (timeout="200")
[13:11:18.389]      // while-condition  =>  TRUE
[13:11:18.389]      // while "1"  (timeout="200")
[13:11:18.389]      // while-condition  =>  TRUE
[13:11:18.389]      // while "1"  (timeout="200")
[13:11:18.389]      // while-condition  =>  TRUE
[13:11:18.389]      // while "1"  (timeout="200")
[13:11:18.390]      // while-condition  =>  TRUE
[13:11:18.390]      // while "1"  (timeout="200")
[13:11:18.390]      // while-condition  =>  TRUE
[13:11:18.390]      // while "1"  (timeout="200")
[13:11:18.390]      // while-condition  =>  TRUE
[13:11:18.390]      // while "1"  (timeout="200")
[13:11:18.390]      // while-condition  =>  TRUE
[13:11:18.390]      // while "1"  (timeout="200")
[13:11:18.390]      // while-condition  =>  TRUE
[13:11:18.390]      // while "1"  (timeout="200")
[13:11:18.390]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.391]      // while-condition  =>  TRUE
[13:11:18.391]      // while "1"  (timeout="200")
[13:11:18.395]      // while-condition  =>  TRUE
[13:11:18.395]      // while "1"  (timeout="200")
[13:11:18.395]      // while  =>  TIMEOUT
[13:11:18.395]      // end while "1"
[13:11:18.395]    </control>
[13:11:18.395]    <control if="canReadPins" while="" timeout="0" info="">
[13:11:18.395]      // if-block "canReadPins"
[13:11:18.395]        // =>  TRUE
[13:11:18.395]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:11:18.395]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:11:18.399]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:11:18.399]        // while-condition  =>  FALSE
[13:11:18.399]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:11:18.399]      </control>
[13:11:18.399]      // end if-block "canReadPins"
[13:11:18.399]    </control>
[13:11:18.399]    <control if="!canReadPins" while="" timeout="0" info="">
[13:11:18.399]      // if-block "!canReadPins"
[13:11:18.399]        // =>  FALSE
[13:11:18.399]      // skip if-block "!canReadPins"
[13:11:18.399]    </control>
[13:11:18.399]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:11:18.399]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:11:18.399]        // =>  TRUE
[13:11:18.399]      <block atomic="false" info="">
[13:11:18.399]        WriteAP(0x00, 0x190008);
[13:11:18.407]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:11:18.407]        WriteAP(0xF0, 0x01);
[13:11:18.411]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:11:18.411]      </block>
[13:11:18.411]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:11:18.415]    </control>
[13:11:18.415]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:11:18.415]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:11:18.415]        // =>  FALSE
[13:11:18.415]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:11:18.415]    </control>
[13:11:18.415]    <block atomic="false" info="">
[13:11:18.415]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:11:18.420]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:11:18.420]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:11:18.420]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:11:18.423]      __ap = 0; //lets make sure we reset the access point selection
[13:11:18.423]        // -> [__ap <= 0x00000000]
[13:11:18.423]    </block>
[13:11:18.423]  </sequence>
[13:11:18.423]  
[13:11:18.455]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:11:18.455]  
[13:11:18.455]  <debugvars>
[13:11:18.455]    // Pre-defined
[13:11:18.455]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:11:18.455]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:11:18.455]    __dp=0x00000000
[13:11:18.455]    __ap=0x00000000
[13:11:18.455]    __traceout=0x00000000      (Trace Disabled)
[13:11:18.455]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:11:18.455]    __FlashAddr=0x00000000
[13:11:18.455]    __FlashLen=0x00000000
[13:11:18.455]    __FlashArg=0x00000000
[13:11:18.455]    __FlashOp=0x00000000
[13:11:18.455]    __Result=0x00000000
[13:11:18.455]  </debugvars>
[13:11:18.455]  
[13:11:18.455]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:11:18.458]    <block atomic="false" info="">
[13:11:18.458]      __var deviceID = 0;
[13:11:18.458]        // -> [deviceID <= 0x00000000]
[13:11:18.458]      __var version = 0;
[13:11:18.458]        // -> [version <= 0x00000000]
[13:11:18.458]      __var partNum = 0;
[13:11:18.458]        // -> [partNum <= 0x00000000]
[13:11:18.459]      __var manuf = 0;
[13:11:18.459]        // -> [manuf <= 0x00000000]
[13:11:18.459]      __var isMSPM0G1X0X_G3X0X = 0;
[13:11:18.459]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:11:18.459]      __var isProduction = 0;
[13:11:18.459]        // -> [isProduction <= 0x00000000]
[13:11:18.459]      __var continueId = 0;
[13:11:18.459]        // -> [continueId <= 0x00000000]
[13:11:18.459]      deviceID =   Read32(0x41C40004);
[13:11:18.464]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:11:18.464]        // -> [deviceID <= 0x2BB8802F]
[13:11:18.464]      version = deviceID >> 28;
[13:11:18.464]        // -> [version <= 0x00000002]
[13:11:18.464]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:11:18.464]        // -> [partNum <= 0x0000BB88]
[13:11:18.464]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:11:18.464]        // -> [manuf <= 0x00000017]
[13:11:18.464]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:11:18.464]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:11:18.464]      isProduction = (version > 0);
[13:11:18.464]        // -> [isProduction <= 0x00000001]
[13:11:18.464]    </block>
[13:11:18.464]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:11:18.464]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:11:18.464]        // =>  FALSE
[13:11:18.464]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:11:18.464]    </control>
[13:11:18.464]    <control if="continueId == 4" while="" timeout="0" info="">
[13:11:18.468]      // if-block "continueId == 4"
[13:11:18.468]        // =>  FALSE
[13:11:18.468]      // skip if-block "continueId == 4"
[13:11:18.468]    </control>
[13:11:18.468]    <control if="!isProduction" while="" timeout="0" info="">
[13:11:18.468]      // if-block "!isProduction"
[13:11:18.468]        // =>  FALSE
[13:11:18.468]      // skip if-block "!isProduction"
[13:11:18.469]    </control>
[13:11:18.469]  </sequence>
[13:11:18.469]  
[13:13:58.084]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:13:58.084]  
[13:13:58.092]  <debugvars>
[13:13:58.092]    // Pre-defined
[13:13:58.092]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:13:58.092]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:13:58.092]    __dp=0x00000000
[13:13:58.093]    __ap=0x00000000
[13:13:58.093]    __traceout=0x00000000      (Trace Disabled)
[13:13:58.093]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:13:58.093]    __FlashAddr=0x00000000
[13:13:58.093]    __FlashLen=0x00000000
[13:13:58.093]    __FlashArg=0x00000000
[13:13:58.093]    __FlashOp=0x00000000
[13:13:58.093]    __Result=0x00000000
[13:13:58.093]  </debugvars>
[13:13:58.093]  
[13:13:58.093]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:13:58.093]    <block atomic="false" info="">
[13:13:58.093]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:13:58.094]        // -> [isSWJ <= 0x00000001]
[13:13:58.094]      __var hasDormant = __protocol & 0x00020000;
[13:13:58.094]        // -> [hasDormant <= 0x00000000]
[13:13:58.094]      __var protType   = __protocol & 0x0000FFFF;
[13:13:58.094]        // -> [protType <= 0x00000002]
[13:13:58.094]    </block>
[13:13:58.094]    <control if="protType == 1" while="" timeout="0" info="">
[13:13:58.094]      // if-block "protType == 1"
[13:13:58.094]        // =>  FALSE
[13:13:58.094]      // skip if-block "protType == 1"
[13:13:58.094]    </control>
[13:13:58.094]    <control if="protType == 2" while="" timeout="0" info="">
[13:13:58.094]      // if-block "protType == 2"
[13:13:58.094]        // =>  TRUE
[13:13:58.094]      <control if="isSWJ" while="" timeout="0" info="">
[13:13:58.094]        // if-block "isSWJ"
[13:13:58.094]          // =>  TRUE
[13:13:58.094]        <control if="hasDormant" while="" timeout="0" info="">
[13:13:58.094]          // if-block "hasDormant"
[13:13:58.094]            // =>  FALSE
[13:13:58.094]          // skip if-block "hasDormant"
[13:13:58.094]        </control>
[13:13:58.094]        <control if="!hasDormant" while="" timeout="0" info="">
[13:13:58.094]          // if-block "!hasDormant"
[13:13:58.094]            // =>  TRUE
[13:13:58.094]          <block atomic="false" info="">
[13:13:58.094]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:13:58.094]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:13:58.094]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:13:58.099]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:13:58.099]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:13:58.103]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:13:58.103]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:13:58.113]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:13:58.113]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:13:58.113]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:13:58.113]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:13:58.118]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:13:58.118]          </block>
[13:13:58.118]          // end if-block "!hasDormant"
[13:13:58.118]        </control>
[13:13:58.118]        // end if-block "isSWJ"
[13:13:58.118]      </control>
[13:13:58.118]      <control if="!isSWJ" while="" timeout="0" info="">
[13:13:58.118]        // if-block "!isSWJ"
[13:13:58.119]          // =>  FALSE
[13:13:58.119]        // skip if-block "!isSWJ"
[13:13:58.119]      </control>
[13:13:58.119]      <block atomic="false" info="">
[13:13:58.119]        ReadDP(0x0);
[13:13:58.119]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:13:58.119]      </block>
[13:13:58.119]      // end if-block "protType == 2"
[13:13:58.119]    </control>
[13:13:58.119]  </sequence>
[13:13:58.119]  
[13:13:58.134]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:13:58.134]  
[13:13:58.134]  <debugvars>
[13:13:58.134]    // Pre-defined
[13:13:58.134]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:13:58.134]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:13:58.134]    __dp=0x00000000
[13:13:58.134]    __ap=0x00000000
[13:13:58.134]    __traceout=0x00000000      (Trace Disabled)
[13:13:58.134]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:13:58.134]    __FlashAddr=0x00000000
[13:13:58.134]    __FlashLen=0x00000000
[13:13:58.134]    __FlashArg=0x00000000
[13:13:58.134]    __FlashOp=0x00000000
[13:13:58.134]    __Result=0x00000000
[13:13:58.134]  </debugvars>
[13:13:58.134]  
[13:13:58.134]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:13:58.134]    <block atomic="false" info="">
[13:13:58.134]      __var SW_DP_ABORT       = 0x0;
[13:13:58.134]        // -> [SW_DP_ABORT <= 0x00000000]
[13:13:58.134]      __var DP_CTRL_STAT      = 0x4;
[13:13:58.138]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:13:58.138]      __var DP_SELECT         = 0x8;
[13:13:58.138]        // -> [DP_SELECT <= 0x00000008]
[13:13:58.138]      __var powered_down      = 0;
[13:13:58.138]        // -> [powered_down <= 0x00000000]
[13:13:58.138]      WriteDP(DP_SELECT, 0x00000000);
[13:13:58.139]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:13:58.139]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:13:58.141]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:13:58.141]        // -> [powered_down <= 0x00000001]
[13:13:58.141]    </block>
[13:13:58.141]    <control if="powered_down" while="" timeout="0" info="">
[13:13:58.141]      // if-block "powered_down"
[13:13:58.141]        // =>  TRUE
[13:13:58.141]      <block atomic="false" info="">
[13:13:58.141]        Message(0, "Debug/System power-up request sent");
[13:13:58.143]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:13:58.144]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:13:58.144]      </block>
[13:13:58.144]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:13:58.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:13:58.153]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:13:58.153]        // while-condition  =>  FALSE
[13:13:58.154]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:13:58.154]      </control>
[13:13:58.154]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:13:58.154]        // if-block "(__protocol & 0xFFFF) == 1"
[13:13:58.154]          // =>  FALSE
[13:13:58.154]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:13:58.154]      </control>
[13:13:58.154]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:13:58.154]        // if-block "(__protocol & 0xFFFF) == 2"
[13:13:58.154]          // =>  TRUE
[13:13:58.154]        <block atomic="false" info="">
[13:13:58.154]          Message(0, "executing SWD power up");
[13:13:58.156]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:13:58.160]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:13:58.160]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:13:58.162]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:13:58.162]        </block>
[13:13:58.163]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:13:58.163]      </control>
[13:13:58.163]      // end if-block "powered_down"
[13:13:58.163]    </control>
[13:13:58.163]    <block atomic="false" info="">
[13:13:58.163]      __var DEBUG_PORT_VAL    = 0;
[13:13:58.164]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:13:58.164]      __var ACCESS_POINT_VAL  = 0;
[13:13:58.164]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:13:58.164]      __ap = 1; 
[13:13:58.164]        // -> [__ap <= 0x00000001]
[13:13:58.164]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:13:58.172]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:13:58.172]      __ap = 4;
[13:13:58.172]        // -> [__ap <= 0x00000004]
[13:13:58.172]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:13:58.176]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:13:58.176]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:13:58.176]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:13:58.179]    </block>
[13:13:58.179]    <block atomic="false" info="">
[13:13:58.179]      __var nReset = 0x80;
[13:13:58.179]        // -> [nReset <= 0x00000080]
[13:13:58.179]      __var canReadPins = 0;
[13:13:58.180]        // -> [canReadPins <= 0x00000000]
[13:13:58.180]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:13:58.182]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:13:58.183]        // -> [canReadPins <= 0x00000001]
[13:13:58.183]    </block>
[13:13:58.183]    <control if="" while="1" timeout="200" info="">
[13:13:58.183]      // while "1"  (timeout="200")
[13:13:58.183]      // while-condition  =>  TRUE
[13:13:58.183]      // while "1"  (timeout="200")
[13:13:58.183]      // while-condition  =>  TRUE
[13:13:58.183]      // while "1"  (timeout="200")
[13:13:58.183]      // while-condition  =>  TRUE
[13:13:58.184]      // while "1"  (timeout="200")
[13:13:58.184]      // while-condition  =>  TRUE
[13:13:58.184]      // while "1"  (timeout="200")
[13:13:58.184]      // while-condition  =>  TRUE
[13:13:58.184]      // while "1"  (timeout="200")
[13:13:58.184]      // while-condition  =>  TRUE
[13:13:58.184]      // while "1"  (timeout="200")
[13:13:58.184]      // while-condition  =>  TRUE
[13:13:58.184]      // while "1"  (timeout="200")
[13:13:58.184]      // while-condition  =>  TRUE
[13:13:58.184]      // while "1"  (timeout="200")
[13:13:58.184]      // while-condition  =>  TRUE
[13:13:58.185]      // while "1"  (timeout="200")
[13:13:58.185]      // while-condition  =>  TRUE
[13:13:58.185]      // while "1"  (timeout="200")
[13:13:58.185]      // while-condition  =>  TRUE
[13:13:58.185]      // while "1"  (timeout="200")
[13:13:58.185]      // while-condition  =>  TRUE
[13:13:58.185]      // while "1"  (timeout="200")
[13:13:58.185]      // while-condition  =>  TRUE
[13:13:58.185]      // while "1"  (timeout="200")
[13:13:58.185]      // while-condition  =>  TRUE
[13:13:58.185]      // while "1"  (timeout="200")
[13:13:58.185]      // while-condition  =>  TRUE
[13:13:58.185]      // while "1"  (timeout="200")
[13:13:58.185]      // while-condition  =>  TRUE
[13:13:58.185]      // while "1"  (timeout="200")
[13:13:58.185]      // while-condition  =>  TRUE
[13:13:58.185]      // while "1"  (timeout="200")
[13:13:58.186]      // while-condition  =>  TRUE
[13:13:58.186]      // while "1"  (timeout="200")
[13:13:58.186]      // while-condition  =>  TRUE
[13:13:58.186]      // while "1"  (timeout="200")
[13:13:58.186]      // while-condition  =>  TRUE
[13:13:58.186]      // while "1"  (timeout="200")
[13:13:58.186]      // while-condition  =>  TRUE
[13:13:58.186]      // while "1"  (timeout="200")
[13:13:58.186]      // while-condition  =>  TRUE
[13:13:58.186]      // while "1"  (timeout="200")
[13:13:58.186]      // while-condition  =>  TRUE
[13:13:58.186]      // while "1"  (timeout="200")
[13:13:58.186]      // while-condition  =>  TRUE
[13:13:58.186]      // while "1"  (timeout="200")
[13:13:58.186]      // while-condition  =>  TRUE
[13:13:58.186]      // while "1"  (timeout="200")
[13:13:58.186]      // while-condition  =>  TRUE
[13:13:58.188]      // while "1"  (timeout="200")
[13:13:58.188]      // while-condition  =>  TRUE
[13:13:58.188]      // while "1"  (timeout="200")
[13:13:58.188]      // while-condition  =>  TRUE
[13:13:58.188]      // while "1"  (timeout="200")
[13:13:58.188]      // while-condition  =>  TRUE
[13:13:58.188]      // while "1"  (timeout="200")
[13:13:58.188]      // while-condition  =>  TRUE
[13:13:58.188]      // while "1"  (timeout="200")
[13:13:58.188]      // while-condition  =>  TRUE
[13:13:58.189]      // while "1"  (timeout="200")
[13:13:58.189]      // while-condition  =>  TRUE
[13:13:58.189]      // while "1"  (timeout="200")
[13:13:58.189]      // while-condition  =>  TRUE
[13:13:58.189]      // while "1"  (timeout="200")
[13:13:58.189]      // while-condition  =>  TRUE
[13:13:58.189]      // while "1"  (timeout="200")
[13:13:58.189]      // while-condition  =>  TRUE
[13:13:58.189]      // while "1"  (timeout="200")
[13:13:58.189]      // while-condition  =>  TRUE
[13:13:58.189]      // while "1"  (timeout="200")
[13:13:58.189]      // while-condition  =>  TRUE
[13:13:58.190]      // while "1"  (timeout="200")
[13:13:58.190]      // while-condition  =>  TRUE
[13:13:58.190]      // while "1"  (timeout="200")
[13:13:58.190]      // while-condition  =>  TRUE
[13:13:58.190]      // while "1"  (timeout="200")
[13:13:58.190]      // while-condition  =>  TRUE
[13:13:58.190]      // while "1"  (timeout="200")
[13:13:58.190]      // while-condition  =>  TRUE
[13:13:58.190]      // while "1"  (timeout="200")
[13:13:58.190]      // while-condition  =>  TRUE
[13:13:58.190]      // while "1"  (timeout="200")
[13:13:58.190]      // while-condition  =>  TRUE
[13:13:58.190]      // while "1"  (timeout="200")
[13:13:58.190]      // while-condition  =>  TRUE
[13:13:58.190]      // while "1"  (timeout="200")
[13:13:58.190]      // while-condition  =>  TRUE
[13:13:58.191]      // while "1"  (timeout="200")
[13:13:58.191]      // while  =>  TIMEOUT
[13:13:58.191]      // end while "1"
[13:13:58.191]    </control>
[13:13:58.191]    <control if="canReadPins" while="" timeout="0" info="">
[13:13:58.191]      // if-block "canReadPins"
[13:13:58.191]        // =>  TRUE
[13:13:58.191]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:13:58.191]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:13:58.193]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:13:58.193]        // while-condition  =>  FALSE
[13:13:58.193]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:13:58.193]      </control>
[13:13:58.193]      // end if-block "canReadPins"
[13:13:58.193]    </control>
[13:13:58.193]    <control if="!canReadPins" while="" timeout="0" info="">
[13:13:58.193]      // if-block "!canReadPins"
[13:13:58.193]        // =>  FALSE
[13:13:58.193]      // skip if-block "!canReadPins"
[13:13:58.193]    </control>
[13:13:58.193]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:13:58.193]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:13:58.193]        // =>  TRUE
[13:13:58.193]      <block atomic="false" info="">
[13:13:58.193]        WriteAP(0x00, 0x190008);
[13:13:58.199]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:13:58.199]        WriteAP(0xF0, 0x01);
[13:13:58.205]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:13:58.205]      </block>
[13:13:58.205]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:13:58.205]    </control>
[13:13:58.205]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:13:58.205]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:13:58.205]        // =>  FALSE
[13:13:58.205]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:13:58.205]    </control>
[13:13:58.205]    <block atomic="false" info="">
[13:13:58.205]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:13:58.211]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:13:58.211]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:13:58.211]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:13:58.213]      __ap = 0; //lets make sure we reset the access point selection
[13:13:58.213]        // -> [__ap <= 0x00000000]
[13:13:58.213]    </block>
[13:13:58.213]  </sequence>
[13:13:58.213]  
[13:13:58.243]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:13:58.243]  
[13:13:58.243]  <debugvars>
[13:13:58.243]    // Pre-defined
[13:13:58.243]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:13:58.244]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:13:58.244]    __dp=0x00000000
[13:13:58.244]    __ap=0x00000000
[13:13:58.244]    __traceout=0x00000000      (Trace Disabled)
[13:13:58.244]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:13:58.244]    __FlashAddr=0x00000000
[13:13:58.244]    __FlashLen=0x00000000
[13:13:58.244]    __FlashArg=0x00000000
[13:13:58.244]    __FlashOp=0x00000000
[13:13:58.244]    __Result=0x00000000
[13:13:58.245]  </debugvars>
[13:13:58.245]  
[13:13:58.245]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:13:58.245]    <block atomic="false" info="">
[13:13:58.245]      __var deviceID = 0;
[13:13:58.245]        // -> [deviceID <= 0x00000000]
[13:13:58.245]      __var version = 0;
[13:13:58.245]        // -> [version <= 0x00000000]
[13:13:58.245]      __var partNum = 0;
[13:13:58.245]        // -> [partNum <= 0x00000000]
[13:13:58.245]      __var manuf = 0;
[13:13:58.245]        // -> [manuf <= 0x00000000]
[13:13:58.245]      __var isMSPM0G1X0X_G3X0X = 0;
[13:13:58.245]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:13:58.245]      __var isProduction = 0;
[13:13:58.245]        // -> [isProduction <= 0x00000000]
[13:13:58.245]      __var continueId = 0;
[13:13:58.245]        // -> [continueId <= 0x00000000]
[13:13:58.245]      deviceID =   Read32(0x41C40004);
[13:13:58.253]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:13:58.254]        // -> [deviceID <= 0x2BB8802F]
[13:13:58.254]      version = deviceID >> 28;
[13:13:58.254]        // -> [version <= 0x00000002]
[13:13:58.254]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:13:58.254]        // -> [partNum <= 0x0000BB88]
[13:13:58.254]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:13:58.254]        // -> [manuf <= 0x00000017]
[13:13:58.254]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:13:58.254]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:13:58.254]      isProduction = (version > 0);
[13:13:58.254]        // -> [isProduction <= 0x00000001]
[13:13:58.254]    </block>
[13:13:58.254]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:13:58.254]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:13:58.254]        // =>  FALSE
[13:13:58.254]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:13:58.254]    </control>
[13:13:58.254]    <control if="continueId == 4" while="" timeout="0" info="">
[13:13:58.254]      // if-block "continueId == 4"
[13:13:58.254]        // =>  FALSE
[13:13:58.254]      // skip if-block "continueId == 4"
[13:13:58.254]    </control>
[13:13:58.254]    <control if="!isProduction" while="" timeout="0" info="">
[13:13:58.254]      // if-block "!isProduction"
[13:13:58.254]        // =>  FALSE
[13:13:58.254]      // skip if-block "!isProduction"
[13:13:58.254]    </control>
[13:13:58.254]  </sequence>
[13:13:58.254]  
[13:14:05.458]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:14:05.458]  
[13:14:05.468]  <debugvars>
[13:14:05.468]    // Pre-defined
[13:14:05.468]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:14:05.468]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:14:05.468]    __dp=0x00000000
[13:14:05.468]    __ap=0x00000000
[13:14:05.468]    __traceout=0x00000000      (Trace Disabled)
[13:14:05.469]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:14:05.469]    __FlashAddr=0x00000000
[13:14:05.469]    __FlashLen=0x00000000
[13:14:05.469]    __FlashArg=0x00000000
[13:14:05.469]    __FlashOp=0x00000000
[13:14:05.469]    __Result=0x00000000
[13:14:05.469]  </debugvars>
[13:14:05.469]  
[13:14:05.470]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:14:05.470]    <block atomic="false" info="">
[13:14:05.470]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:14:05.470]        // -> [isSWJ <= 0x00000001]
[13:14:05.470]      __var hasDormant = __protocol & 0x00020000;
[13:14:05.471]        // -> [hasDormant <= 0x00000000]
[13:14:05.471]      __var protType   = __protocol & 0x0000FFFF;
[13:14:05.471]        // -> [protType <= 0x00000002]
[13:14:05.471]    </block>
[13:14:05.471]    <control if="protType == 1" while="" timeout="0" info="">
[13:14:05.471]      // if-block "protType == 1"
[13:14:05.471]        // =>  FALSE
[13:14:05.471]      // skip if-block "protType == 1"
[13:14:05.471]    </control>
[13:14:05.472]    <control if="protType == 2" while="" timeout="0" info="">
[13:14:05.472]      // if-block "protType == 2"
[13:14:05.472]        // =>  TRUE
[13:14:05.472]      <control if="isSWJ" while="" timeout="0" info="">
[13:14:05.472]        // if-block "isSWJ"
[13:14:05.472]          // =>  TRUE
[13:14:05.472]        <control if="hasDormant" while="" timeout="0" info="">
[13:14:05.472]          // if-block "hasDormant"
[13:14:05.472]            // =>  FALSE
[13:14:05.473]          // skip if-block "hasDormant"
[13:14:05.473]        </control>
[13:14:05.473]        <control if="!hasDormant" while="" timeout="0" info="">
[13:14:05.473]          // if-block "!hasDormant"
[13:14:05.473]            // =>  TRUE
[13:14:05.473]          <block atomic="false" info="">
[13:14:05.473]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:14:05.476]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:14:05.476]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:14:05.477]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:14:05.477]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:14:05.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:14:05.482]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:14:05.487]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:14:05.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:14:05.493]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:14:05.493]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:14:05.494]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:14:05.495]          </block>
[13:14:05.495]          // end if-block "!hasDormant"
[13:14:05.495]        </control>
[13:14:05.495]        // end if-block "isSWJ"
[13:14:05.495]      </control>
[13:14:05.495]      <control if="!isSWJ" while="" timeout="0" info="">
[13:14:05.495]        // if-block "!isSWJ"
[13:14:05.495]          // =>  FALSE
[13:14:05.495]        // skip if-block "!isSWJ"
[13:14:05.495]      </control>
[13:14:05.496]      <block atomic="false" info="">
[13:14:05.496]        ReadDP(0x0);
[13:14:05.502]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:14:05.502]      </block>
[13:14:05.502]      // end if-block "protType == 2"
[13:14:05.502]    </control>
[13:14:05.502]  </sequence>
[13:14:05.503]  
[13:14:05.508]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:14:05.508]  
[13:14:05.508]  <debugvars>
[13:14:05.508]    // Pre-defined
[13:14:05.508]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:14:05.508]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:14:05.508]    __dp=0x00000000
[13:14:05.509]    __ap=0x00000000
[13:14:05.509]    __traceout=0x00000000      (Trace Disabled)
[13:14:05.509]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:14:05.509]    __FlashAddr=0x00000000
[13:14:05.509]    __FlashLen=0x00000000
[13:14:05.509]    __FlashArg=0x00000000
[13:14:05.509]    __FlashOp=0x00000000
[13:14:05.509]    __Result=0x00000000
[13:14:05.510]  </debugvars>
[13:14:05.510]  
[13:14:05.510]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:14:05.510]    <block atomic="false" info="">
[13:14:05.510]      __var SW_DP_ABORT       = 0x0;
[13:14:05.510]        // -> [SW_DP_ABORT <= 0x00000000]
[13:14:05.510]      __var DP_CTRL_STAT      = 0x4;
[13:14:05.510]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:14:05.510]      __var DP_SELECT         = 0x8;
[13:14:05.511]        // -> [DP_SELECT <= 0x00000008]
[13:14:05.511]      __var powered_down      = 0;
[13:14:05.511]        // -> [powered_down <= 0x00000000]
[13:14:05.511]      WriteDP(DP_SELECT, 0x00000000);
[13:14:05.514]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:14:05.514]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:14:05.517]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:14:05.517]        // -> [powered_down <= 0x00000001]
[13:14:05.517]    </block>
[13:14:05.517]    <control if="powered_down" while="" timeout="0" info="">
[13:14:05.518]      // if-block "powered_down"
[13:14:05.518]        // =>  TRUE
[13:14:05.518]      <block atomic="false" info="">
[13:14:05.518]        Message(0, "Debug/System power-up request sent");
[13:14:05.519]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:14:05.523]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:14:05.523]      </block>
[13:14:05.523]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:14:05.523]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:14:05.525]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:14:05.525]        // while-condition  =>  FALSE
[13:14:05.525]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:14:05.525]      </control>
[13:14:05.525]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:14:05.525]        // if-block "(__protocol & 0xFFFF) == 1"
[13:14:05.525]          // =>  FALSE
[13:14:05.525]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:14:05.525]      </control>
[13:14:05.525]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:14:05.525]        // if-block "(__protocol & 0xFFFF) == 2"
[13:14:05.525]          // =>  TRUE
[13:14:05.525]        <block atomic="false" info="">
[13:14:05.525]          Message(0, "executing SWD power up");
[13:14:05.529]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:14:05.529]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:14:05.529]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:14:05.534]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:14:05.534]        </block>
[13:14:05.534]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:14:05.534]      </control>
[13:14:05.534]      // end if-block "powered_down"
[13:14:05.534]    </control>
[13:14:05.534]    <block atomic="false" info="">
[13:14:05.534]      __var DEBUG_PORT_VAL    = 0;
[13:14:05.534]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:14:05.534]      __var ACCESS_POINT_VAL  = 0;
[13:14:05.534]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:14:05.534]      __ap = 1; 
[13:14:05.534]        // -> [__ap <= 0x00000001]
[13:14:05.534]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:14:05.544]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:14:05.544]      __ap = 4;
[13:14:05.544]        // -> [__ap <= 0x00000004]
[13:14:05.544]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:14:05.548]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:14:05.549]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:14:05.549]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:14:05.550]    </block>
[13:14:05.550]    <block atomic="false" info="">
[13:14:05.550]      __var nReset = 0x80;
[13:14:05.550]        // -> [nReset <= 0x00000080]
[13:14:05.550]      __var canReadPins = 0;
[13:14:05.550]        // -> [canReadPins <= 0x00000000]
[13:14:05.550]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:14:05.554]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:14:05.554]        // -> [canReadPins <= 0x00000001]
[13:14:05.554]    </block>
[13:14:05.554]    <control if="" while="1" timeout="200" info="">
[13:14:05.554]      // while "1"  (timeout="200")
[13:14:05.554]      // while-condition  =>  TRUE
[13:14:05.554]      // while "1"  (timeout="200")
[13:14:05.554]      // while-condition  =>  TRUE
[13:14:05.554]      // while "1"  (timeout="200")
[13:14:05.554]      // while-condition  =>  TRUE
[13:14:05.554]      // while "1"  (timeout="200")
[13:14:05.554]      // while-condition  =>  TRUE
[13:14:05.554]      // while "1"  (timeout="200")
[13:14:05.554]      // while-condition  =>  TRUE
[13:14:05.554]      // while "1"  (timeout="200")
[13:14:05.554]      // while-condition  =>  TRUE
[13:14:05.554]      // while "1"  (timeout="200")
[13:14:05.554]      // while-condition  =>  TRUE
[13:14:05.554]      // while "1"  (timeout="200")
[13:14:05.554]      // while-condition  =>  TRUE
[13:14:05.554]      // while "1"  (timeout="200")
[13:14:05.554]      // while-condition  =>  TRUE
[13:14:05.557]      // while "1"  (timeout="200")
[13:14:05.557]      // while-condition  =>  TRUE
[13:14:05.557]      // while "1"  (timeout="200")
[13:14:05.557]      // while-condition  =>  TRUE
[13:14:05.557]      // while "1"  (timeout="200")
[13:14:05.557]      // while-condition  =>  TRUE
[13:14:05.557]      // while "1"  (timeout="200")
[13:14:05.557]      // while-condition  =>  TRUE
[13:14:05.557]      // while "1"  (timeout="200")
[13:14:05.557]      // while-condition  =>  TRUE
[13:14:05.557]      // while "1"  (timeout="200")
[13:14:05.557]      // while-condition  =>  TRUE
[13:14:05.558]      // while "1"  (timeout="200")
[13:14:05.558]      // while-condition  =>  TRUE
[13:14:05.558]      // while "1"  (timeout="200")
[13:14:05.558]      // while-condition  =>  TRUE
[13:14:05.558]      // while "1"  (timeout="200")
[13:14:05.558]      // while-condition  =>  TRUE
[13:14:05.558]      // while "1"  (timeout="200")
[13:14:05.558]      // while-condition  =>  TRUE
[13:14:05.558]      // while "1"  (timeout="200")
[13:14:05.558]      // while-condition  =>  TRUE
[13:14:05.558]      // while "1"  (timeout="200")
[13:14:05.558]      // while-condition  =>  TRUE
[13:14:05.558]      // while "1"  (timeout="200")
[13:14:05.558]      // while-condition  =>  TRUE
[13:14:05.558]      // while "1"  (timeout="200")
[13:14:05.558]      // while-condition  =>  TRUE
[13:14:05.559]      // while "1"  (timeout="200")
[13:14:05.559]      // while-condition  =>  TRUE
[13:14:05.559]      // while "1"  (timeout="200")
[13:14:05.559]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.560]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.560]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.560]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.560]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.560]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.560]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.560]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.560]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.560]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.560]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.560]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.560]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.560]      // while-condition  =>  TRUE
[13:14:05.560]      // while "1"  (timeout="200")
[13:14:05.563]      // while-condition  =>  TRUE
[13:14:05.563]      // while "1"  (timeout="200")
[13:14:05.563]      // while-condition  =>  TRUE
[13:14:05.563]      // while "1"  (timeout="200")
[13:14:05.563]      // while-condition  =>  TRUE
[13:14:05.563]      // while "1"  (timeout="200")
[13:14:05.563]      // while-condition  =>  TRUE
[13:14:05.563]      // while "1"  (timeout="200")
[13:14:05.563]      // while-condition  =>  TRUE
[13:14:05.563]      // while "1"  (timeout="200")
[13:14:05.563]      // while-condition  =>  TRUE
[13:14:05.564]      // while "1"  (timeout="200")
[13:14:05.564]      // while-condition  =>  TRUE
[13:14:05.564]      // while "1"  (timeout="200")
[13:14:05.564]      // while-condition  =>  TRUE
[13:14:05.564]      // while "1"  (timeout="200")
[13:14:05.564]      // while-condition  =>  TRUE
[13:14:05.564]      // while "1"  (timeout="200")
[13:14:05.564]      // while-condition  =>  TRUE
[13:14:05.564]      // while "1"  (timeout="200")
[13:14:05.564]      // while-condition  =>  TRUE
[13:14:05.564]      // while "1"  (timeout="200")
[13:14:05.565]      // while-condition  =>  TRUE
[13:14:05.565]      // while "1"  (timeout="200")
[13:14:05.565]      // while-condition  =>  TRUE
[13:14:05.565]      // while "1"  (timeout="200")
[13:14:05.565]      // while-condition  =>  TRUE
[13:14:05.565]      // while "1"  (timeout="200")
[13:14:05.565]      // while-condition  =>  TRUE
[13:14:05.565]      // while "1"  (timeout="200")
[13:14:05.565]      // while-condition  =>  TRUE
[13:14:05.565]      // while "1"  (timeout="200")
[13:14:05.565]      // while-condition  =>  TRUE
[13:14:05.565]      // while "1"  (timeout="200")
[13:14:05.566]      // while-condition  =>  TRUE
[13:14:05.566]      // while "1"  (timeout="200")
[13:14:05.566]      // while-condition  =>  TRUE
[13:14:05.566]      // while "1"  (timeout="200")
[13:14:05.566]      // while-condition  =>  TRUE
[13:14:05.566]      // while "1"  (timeout="200")
[13:14:05.566]      // while-condition  =>  TRUE
[13:14:05.566]      // while "1"  (timeout="200")
[13:14:05.566]      // while-condition  =>  TRUE
[13:14:05.566]      // while "1"  (timeout="200")
[13:14:05.566]      // while-condition  =>  TRUE
[13:14:05.566]      // while "1"  (timeout="200")
[13:14:05.566]      // while-condition  =>  TRUE
[13:14:05.566]      // while "1"  (timeout="200")
[13:14:05.566]      // while-condition  =>  TRUE
[13:14:05.566]      // while "1"  (timeout="200")
[13:14:05.566]      // while-condition  =>  TRUE
[13:14:05.566]      // while "1"  (timeout="200")
[13:14:05.566]      // while-condition  =>  TRUE
[13:14:05.566]      // while "1"  (timeout="200")
[13:14:05.566]      // while-condition  =>  TRUE
[13:14:05.566]      // while "1"  (timeout="200")
[13:14:05.569]      // while-condition  =>  TRUE
[13:14:05.569]      // while "1"  (timeout="200")
[13:14:05.569]      // while  =>  TIMEOUT
[13:14:05.569]      // end while "1"
[13:14:05.569]    </control>
[13:14:05.569]    <control if="canReadPins" while="" timeout="0" info="">
[13:14:05.569]      // if-block "canReadPins"
[13:14:05.569]        // =>  TRUE
[13:14:05.569]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:14:05.569]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:14:05.571]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:14:05.571]        // while-condition  =>  FALSE
[13:14:05.571]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:14:05.571]      </control>
[13:14:05.571]      // end if-block "canReadPins"
[13:14:05.573]    </control>
[13:14:05.573]    <control if="!canReadPins" while="" timeout="0" info="">
[13:14:05.573]      // if-block "!canReadPins"
[13:14:05.573]        // =>  FALSE
[13:14:05.573]      // skip if-block "!canReadPins"
[13:14:05.573]    </control>
[13:14:05.573]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:14:05.573]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:14:05.573]        // =>  TRUE
[13:14:05.573]      <block atomic="false" info="">
[13:14:05.573]        WriteAP(0x00, 0x190008);
[13:14:05.573]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:14:05.573]        WriteAP(0xF0, 0x01);
[13:14:05.584]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:14:05.584]      </block>
[13:14:05.584]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:14:05.584]    </control>
[13:14:05.584]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:14:05.584]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:14:05.584]        // =>  FALSE
[13:14:05.584]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:14:05.584]    </control>
[13:14:05.584]    <block atomic="false" info="">
[13:14:05.584]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:14:05.594]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:14:05.594]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:14:05.594]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:14:05.598]      __ap = 0; //lets make sure we reset the access point selection
[13:14:05.598]        // -> [__ap <= 0x00000000]
[13:14:05.598]    </block>
[13:14:05.598]  </sequence>
[13:14:05.598]  
[13:14:05.635]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:14:05.635]  
[13:14:05.635]  <debugvars>
[13:14:05.635]    // Pre-defined
[13:14:05.635]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:14:05.635]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:14:05.635]    __dp=0x00000000
[13:14:05.639]    __ap=0x00000000
[13:14:05.639]    __traceout=0x00000000      (Trace Disabled)
[13:14:05.639]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:14:05.639]    __FlashAddr=0x00000000
[13:14:05.639]    __FlashLen=0x00000000
[13:14:05.639]    __FlashArg=0x00000000
[13:14:05.639]    __FlashOp=0x00000000
[13:14:05.639]    __Result=0x00000000
[13:14:05.639]  </debugvars>
[13:14:05.639]  
[13:14:05.639]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:14:05.639]    <block atomic="false" info="">
[13:14:05.639]      __var deviceID = 0;
[13:14:05.639]        // -> [deviceID <= 0x00000000]
[13:14:05.639]      __var version = 0;
[13:14:05.639]        // -> [version <= 0x00000000]
[13:14:05.639]      __var partNum = 0;
[13:14:05.639]        // -> [partNum <= 0x00000000]
[13:14:05.640]      __var manuf = 0;
[13:14:05.640]        // -> [manuf <= 0x00000000]
[13:14:05.640]      __var isMSPM0G1X0X_G3X0X = 0;
[13:14:05.640]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:14:05.640]      __var isProduction = 0;
[13:14:05.640]        // -> [isProduction <= 0x00000000]
[13:14:05.640]      __var continueId = 0;
[13:14:05.640]        // -> [continueId <= 0x00000000]
[13:14:05.640]      deviceID =   Read32(0x41C40004);
[13:14:05.647]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:14:05.647]        // -> [deviceID <= 0x2BB8802F]
[13:14:05.647]      version = deviceID >> 28;
[13:14:05.647]        // -> [version <= 0x00000002]
[13:14:05.648]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:14:05.648]        // -> [partNum <= 0x0000BB88]
[13:14:05.648]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:14:05.648]        // -> [manuf <= 0x00000017]
[13:14:05.648]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:14:05.648]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:14:05.648]      isProduction = (version > 0);
[13:14:05.648]        // -> [isProduction <= 0x00000001]
[13:14:05.648]    </block>
[13:14:05.648]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:14:05.648]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:14:05.648]        // =>  FALSE
[13:14:05.649]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:14:05.649]    </control>
[13:14:05.649]    <control if="continueId == 4" while="" timeout="0" info="">
[13:14:05.649]      // if-block "continueId == 4"
[13:14:05.649]        // =>  FALSE
[13:14:05.649]      // skip if-block "continueId == 4"
[13:14:05.649]    </control>
[13:14:05.649]    <control if="!isProduction" while="" timeout="0" info="">
[13:14:05.649]      // if-block "!isProduction"
[13:14:05.649]        // =>  FALSE
[13:14:05.649]      // skip if-block "!isProduction"
[13:14:05.649]    </control>
[13:14:05.649]  </sequence>
[13:14:05.649]  
[13:14:37.874]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:14:37.874]  
[13:14:37.874]  <debugvars>
[13:14:37.874]    // Pre-defined
[13:14:37.874]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:14:37.874]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:14:37.874]    __dp=0x00000000
[13:14:37.874]    __ap=0x00000000
[13:14:37.874]    __traceout=0x00000000      (Trace Disabled)
[13:14:37.874]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:14:37.874]    __FlashAddr=0x00000000
[13:14:37.874]    __FlashLen=0x00000000
[13:14:37.874]    __FlashArg=0x00000000
[13:14:37.874]    __FlashOp=0x00000000
[13:14:37.874]    __Result=0x00000000
[13:14:37.874]  </debugvars>
[13:14:37.874]  
[13:14:37.874]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:14:37.874]    <block atomic="false" info="">
[13:14:37.874]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:14:37.874]        // -> [isSWJ <= 0x00000001]
[13:14:37.874]      __var hasDormant = __protocol & 0x00020000;
[13:14:37.874]        // -> [hasDormant <= 0x00000000]
[13:14:37.874]      __var protType   = __protocol & 0x0000FFFF;
[13:14:37.874]        // -> [protType <= 0x00000002]
[13:14:37.882]    </block>
[13:14:37.882]    <control if="protType == 1" while="" timeout="0" info="">
[13:14:37.882]      // if-block "protType == 1"
[13:14:37.882]        // =>  FALSE
[13:14:37.882]      // skip if-block "protType == 1"
[13:14:37.882]    </control>
[13:14:37.882]    <control if="protType == 2" while="" timeout="0" info="">
[13:14:37.882]      // if-block "protType == 2"
[13:14:37.882]        // =>  TRUE
[13:14:37.884]      <control if="isSWJ" while="" timeout="0" info="">
[13:14:37.884]        // if-block "isSWJ"
[13:14:37.884]          // =>  TRUE
[13:14:37.884]        <control if="hasDormant" while="" timeout="0" info="">
[13:14:37.884]          // if-block "hasDormant"
[13:14:37.884]            // =>  FALSE
[13:14:37.884]          // skip if-block "hasDormant"
[13:14:37.884]        </control>
[13:14:37.884]        <control if="!hasDormant" while="" timeout="0" info="">
[13:14:37.884]          // if-block "!hasDormant"
[13:14:37.885]            // =>  TRUE
[13:14:37.885]          <block atomic="false" info="">
[13:14:37.885]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:14:37.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:14:37.885]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:14:37.885]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:14:37.885]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:14:37.885]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:14:37.885]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:14:37.885]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:14:37.885]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:14:37.893]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:14:37.893]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:14:37.894]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:14:37.894]          </block>
[13:14:37.894]          // end if-block "!hasDormant"
[13:14:37.894]        </control>
[13:14:37.894]        // end if-block "isSWJ"
[13:14:37.895]      </control>
[13:14:37.895]      <control if="!isSWJ" while="" timeout="0" info="">
[13:14:37.895]        // if-block "!isSWJ"
[13:14:37.895]          // =>  FALSE
[13:14:37.895]        // skip if-block "!isSWJ"
[13:14:37.895]      </control>
[13:14:37.895]      <block atomic="false" info="">
[13:14:37.895]        ReadDP(0x0);
[13:14:37.897]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:14:37.897]      </block>
[13:14:37.897]      // end if-block "protType == 2"
[13:14:37.897]    </control>
[13:14:37.897]  </sequence>
[13:14:37.897]  
[13:14:37.905]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:14:37.905]  
[13:14:37.905]  <debugvars>
[13:14:37.905]    // Pre-defined
[13:14:37.905]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:14:37.905]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:14:37.905]    __dp=0x00000000
[13:14:37.905]    __ap=0x00000000
[13:14:37.905]    __traceout=0x00000000      (Trace Disabled)
[13:14:37.905]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:14:37.905]    __FlashAddr=0x00000000
[13:14:37.905]    __FlashLen=0x00000000
[13:14:37.905]    __FlashArg=0x00000000
[13:14:37.907]    __FlashOp=0x00000000
[13:14:37.907]    __Result=0x00000000
[13:14:37.907]  </debugvars>
[13:14:37.907]  
[13:14:37.907]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:14:37.907]    <block atomic="false" info="">
[13:14:37.907]      __var SW_DP_ABORT       = 0x0;
[13:14:37.907]        // -> [SW_DP_ABORT <= 0x00000000]
[13:14:37.907]      __var DP_CTRL_STAT      = 0x4;
[13:14:37.907]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:14:37.907]      __var DP_SELECT         = 0x8;
[13:14:37.907]        // -> [DP_SELECT <= 0x00000008]
[13:14:37.908]      __var powered_down      = 0;
[13:14:37.908]        // -> [powered_down <= 0x00000000]
[13:14:37.908]      WriteDP(DP_SELECT, 0x00000000);
[13:14:37.914]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:14:37.914]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:14:37.914]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:14:37.914]        // -> [powered_down <= 0x00000001]
[13:14:37.914]    </block>
[13:14:37.914]    <control if="powered_down" while="" timeout="0" info="">
[13:14:37.914]      // if-block "powered_down"
[13:14:37.914]        // =>  TRUE
[13:14:37.914]      <block atomic="false" info="">
[13:14:37.914]        Message(0, "Debug/System power-up request sent");
[13:14:37.920]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:14:37.923]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:14:37.923]      </block>
[13:14:37.923]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:14:37.923]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:14:37.925]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:14:37.925]        // while-condition  =>  FALSE
[13:14:37.925]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:14:37.925]      </control>
[13:14:37.925]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:14:37.925]        // if-block "(__protocol & 0xFFFF) == 1"
[13:14:37.925]          // =>  FALSE
[13:14:37.925]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:14:37.925]      </control>
[13:14:37.925]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:14:37.925]        // if-block "(__protocol & 0xFFFF) == 2"
[13:14:37.925]          // =>  TRUE
[13:14:37.925]        <block atomic="false" info="">
[13:14:37.925]          Message(0, "executing SWD power up");
[13:14:37.927]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:14:37.929]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:14:37.929]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:14:37.933]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:14:37.933]        </block>
[13:14:37.933]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:14:37.933]      </control>
[13:14:37.933]      // end if-block "powered_down"
[13:14:37.933]    </control>
[13:14:37.933]    <block atomic="false" info="">
[13:14:37.933]      __var DEBUG_PORT_VAL    = 0;
[13:14:37.933]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:14:37.933]      __var ACCESS_POINT_VAL  = 0;
[13:14:37.933]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:14:37.933]      __ap = 1; 
[13:14:37.933]        // -> [__ap <= 0x00000001]
[13:14:37.933]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:14:37.943]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:14:37.943]      __ap = 4;
[13:14:37.945]        // -> [__ap <= 0x00000004]
[13:14:37.945]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:14:37.954]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:14:37.954]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:14:37.954]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:14:37.956]    </block>
[13:14:37.956]    <block atomic="false" info="">
[13:14:37.956]      __var nReset = 0x80;
[13:14:37.956]        // -> [nReset <= 0x00000080]
[13:14:37.956]      __var canReadPins = 0;
[13:14:37.956]        // -> [canReadPins <= 0x00000000]
[13:14:37.956]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:14:37.957]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:14:37.957]        // -> [canReadPins <= 0x00000001]
[13:14:37.957]    </block>
[13:14:37.957]    <control if="" while="1" timeout="200" info="">
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.957]      // while "1"  (timeout="200")
[13:14:37.957]      // while-condition  =>  TRUE
[13:14:37.963]      // while "1"  (timeout="200")
[13:14:37.963]      // while  =>  TIMEOUT
[13:14:37.963]      // end while "1"
[13:14:37.963]    </control>
[13:14:37.964]    <control if="canReadPins" while="" timeout="0" info="">
[13:14:37.964]      // if-block "canReadPins"
[13:14:37.964]        // =>  TRUE
[13:14:37.964]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:14:37.964]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:14:37.967]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:14:37.967]        // while-condition  =>  FALSE
[13:14:37.967]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:14:37.967]      </control>
[13:14:37.967]      // end if-block "canReadPins"
[13:14:37.967]    </control>
[13:14:37.967]    <control if="!canReadPins" while="" timeout="0" info="">
[13:14:37.967]      // if-block "!canReadPins"
[13:14:37.967]        // =>  FALSE
[13:14:37.967]      // skip if-block "!canReadPins"
[13:14:37.967]    </control>
[13:14:37.967]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:14:37.967]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:14:37.969]        // =>  TRUE
[13:14:37.969]      <block atomic="false" info="">
[13:14:37.969]        WriteAP(0x00, 0x190008);
[13:14:37.974]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:14:37.974]        WriteAP(0xF0, 0x01);
[13:14:37.974]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:14:37.982]      </block>
[13:14:37.982]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:14:37.982]    </control>
[13:14:37.983]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:14:37.983]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:14:37.983]        // =>  FALSE
[13:14:37.983]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:14:37.983]    </control>
[13:14:37.983]    <block atomic="false" info="">
[13:14:37.983]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:14:37.984]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:14:37.984]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:14:37.984]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:14:37.990]      __ap = 0; //lets make sure we reset the access point selection
[13:14:37.990]        // -> [__ap <= 0x00000000]
[13:14:37.990]    </block>
[13:14:37.990]  </sequence>
[13:14:37.990]  
[13:14:38.024]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:14:38.024]  
[13:14:38.024]  <debugvars>
[13:14:38.024]    // Pre-defined
[13:14:38.024]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:14:38.024]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:14:38.024]    __dp=0x00000000
[13:14:38.024]    __ap=0x00000000
[13:14:38.024]    __traceout=0x00000000      (Trace Disabled)
[13:14:38.024]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:14:38.024]    __FlashAddr=0x00000000
[13:14:38.024]    __FlashLen=0x00000000
[13:14:38.024]    __FlashArg=0x00000000
[13:14:38.024]    __FlashOp=0x00000000
[13:14:38.024]    __Result=0x00000000
[13:14:38.024]  </debugvars>
[13:14:38.024]  
[13:14:38.024]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:14:38.024]    <block atomic="false" info="">
[13:14:38.024]      __var deviceID = 0;
[13:14:38.024]        // -> [deviceID <= 0x00000000]
[13:14:38.024]      __var version = 0;
[13:14:38.024]        // -> [version <= 0x00000000]
[13:14:38.024]      __var partNum = 0;
[13:14:38.024]        // -> [partNum <= 0x00000000]
[13:14:38.024]      __var manuf = 0;
[13:14:38.024]        // -> [manuf <= 0x00000000]
[13:14:38.024]      __var isMSPM0G1X0X_G3X0X = 0;
[13:14:38.024]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:14:38.024]      __var isProduction = 0;
[13:14:38.024]        // -> [isProduction <= 0x00000000]
[13:14:38.024]      __var continueId = 0;
[13:14:38.024]        // -> [continueId <= 0x00000000]
[13:14:38.024]      deviceID =   Read32(0x41C40004);
[13:14:38.035]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:14:38.035]        // -> [deviceID <= 0x2BB8802F]
[13:14:38.035]      version = deviceID >> 28;
[13:14:38.035]        // -> [version <= 0x00000002]
[13:14:38.035]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:14:38.035]        // -> [partNum <= 0x0000BB88]
[13:14:38.035]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:14:38.035]        // -> [manuf <= 0x00000017]
[13:14:38.035]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:14:38.035]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:14:38.035]      isProduction = (version > 0);
[13:14:38.035]        // -> [isProduction <= 0x00000001]
[13:14:38.035]    </block>
[13:14:38.035]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:14:38.035]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:14:38.035]        // =>  FALSE
[13:14:38.035]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:14:38.035]    </control>
[13:14:38.035]    <control if="continueId == 4" while="" timeout="0" info="">
[13:14:38.035]      // if-block "continueId == 4"
[13:14:38.035]        // =>  FALSE
[13:14:38.035]      // skip if-block "continueId == 4"
[13:14:38.035]    </control>
[13:14:38.035]    <control if="!isProduction" while="" timeout="0" info="">
[13:14:38.035]      // if-block "!isProduction"
[13:14:38.035]        // =>  FALSE
[13:14:38.035]      // skip if-block "!isProduction"
[13:14:38.035]    </control>
[13:14:38.035]  </sequence>
[13:14:38.035]  
[13:14:44.685]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:14:44.685]  
[13:14:44.685]  <debugvars>
[13:14:44.685]    // Pre-defined
[13:14:44.685]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:14:44.685]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:14:44.685]    __dp=0x00000000
[13:14:44.685]    __ap=0x00000000
[13:14:44.685]    __traceout=0x00000000      (Trace Disabled)
[13:14:44.685]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:14:44.685]    __FlashAddr=0x00000000
[13:14:44.685]    __FlashLen=0x00000000
[13:14:44.685]    __FlashArg=0x00000000
[13:14:44.685]    __FlashOp=0x00000000
[13:14:44.685]    __Result=0x00000000
[13:14:44.685]  </debugvars>
[13:14:44.685]  
[13:14:44.685]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:14:44.685]    <block atomic="false" info="">
[13:14:44.685]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:14:44.685]        // -> [isSWJ <= 0x00000001]
[13:14:44.685]      __var hasDormant = __protocol & 0x00020000;
[13:14:44.685]        // -> [hasDormant <= 0x00000000]
[13:14:44.685]      __var protType   = __protocol & 0x0000FFFF;
[13:14:44.685]        // -> [protType <= 0x00000002]
[13:14:44.685]    </block>
[13:14:44.685]    <control if="protType == 1" while="" timeout="0" info="">
[13:14:44.685]      // if-block "protType == 1"
[13:14:44.685]        // =>  FALSE
[13:14:44.685]      // skip if-block "protType == 1"
[13:14:44.685]    </control>
[13:14:44.685]    <control if="protType == 2" while="" timeout="0" info="">
[13:14:44.685]      // if-block "protType == 2"
[13:14:44.685]        // =>  TRUE
[13:14:44.685]      <control if="isSWJ" while="" timeout="0" info="">
[13:14:44.685]        // if-block "isSWJ"
[13:14:44.685]          // =>  TRUE
[13:14:44.685]        <control if="hasDormant" while="" timeout="0" info="">
[13:14:44.685]          // if-block "hasDormant"
[13:14:44.685]            // =>  FALSE
[13:14:44.685]          // skip if-block "hasDormant"
[13:14:44.685]        </control>
[13:14:44.685]        <control if="!hasDormant" while="" timeout="0" info="">
[13:14:44.685]          // if-block "!hasDormant"
[13:14:44.685]            // =>  TRUE
[13:14:44.685]          <block atomic="false" info="">
[13:14:44.685]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:14:44.685]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:14:44.693]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:14:44.694]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:14:44.694]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:14:44.694]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:14:44.694]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:14:44.694]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:14:44.694]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:14:44.704]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:14:44.704]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:14:44.704]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:14:44.704]          </block>
[13:14:44.704]          // end if-block "!hasDormant"
[13:14:44.704]        </control>
[13:14:44.704]        // end if-block "isSWJ"
[13:14:44.704]      </control>
[13:14:44.704]      <control if="!isSWJ" while="" timeout="0" info="">
[13:14:44.704]        // if-block "!isSWJ"
[13:14:44.704]          // =>  FALSE
[13:14:44.704]        // skip if-block "!isSWJ"
[13:14:44.704]      </control>
[13:14:44.704]      <block atomic="false" info="">
[13:14:44.704]        ReadDP(0x0);
[13:14:44.704]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:14:44.704]      </block>
[13:14:44.704]      // end if-block "protType == 2"
[13:14:44.704]    </control>
[13:14:44.704]  </sequence>
[13:14:44.704]  
[13:14:44.714]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:14:44.714]  
[13:14:44.714]  <debugvars>
[13:14:44.714]    // Pre-defined
[13:14:44.714]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:14:44.714]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:14:44.714]    __dp=0x00000000
[13:14:44.714]    __ap=0x00000000
[13:14:44.714]    __traceout=0x00000000      (Trace Disabled)
[13:14:44.714]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:14:44.714]    __FlashAddr=0x00000000
[13:14:44.714]    __FlashLen=0x00000000
[13:14:44.714]    __FlashArg=0x00000000
[13:14:44.714]    __FlashOp=0x00000000
[13:14:44.714]    __Result=0x00000000
[13:14:44.714]  </debugvars>
[13:14:44.714]  
[13:14:44.714]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:14:44.714]    <block atomic="false" info="">
[13:14:44.714]      __var SW_DP_ABORT       = 0x0;
[13:14:44.714]        // -> [SW_DP_ABORT <= 0x00000000]
[13:14:44.714]      __var DP_CTRL_STAT      = 0x4;
[13:14:44.714]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:14:44.714]      __var DP_SELECT         = 0x8;
[13:14:44.714]        // -> [DP_SELECT <= 0x00000008]
[13:14:44.714]      __var powered_down      = 0;
[13:14:44.718]        // -> [powered_down <= 0x00000000]
[13:14:44.718]      WriteDP(DP_SELECT, 0x00000000);
[13:14:44.720]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:14:44.720]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:14:44.720]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:14:44.720]        // -> [powered_down <= 0x00000001]
[13:14:44.720]    </block>
[13:14:44.720]    <control if="powered_down" while="" timeout="0" info="">
[13:14:44.720]      // if-block "powered_down"
[13:14:44.720]        // =>  TRUE
[13:14:44.720]      <block atomic="false" info="">
[13:14:44.720]        Message(0, "Debug/System power-up request sent");
[13:14:44.725]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:14:44.727]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:14:44.727]      </block>
[13:14:44.727]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:14:44.727]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:14:44.735]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:14:44.735]        // while-condition  =>  FALSE
[13:14:44.735]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:14:44.735]      </control>
[13:14:44.735]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:14:44.735]        // if-block "(__protocol & 0xFFFF) == 1"
[13:14:44.735]          // =>  FALSE
[13:14:44.735]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:14:44.735]      </control>
[13:14:44.735]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:14:44.735]        // if-block "(__protocol & 0xFFFF) == 2"
[13:14:44.735]          // =>  TRUE
[13:14:44.735]        <block atomic="false" info="">
[13:14:44.735]          Message(0, "executing SWD power up");
[13:14:44.735]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:14:44.735]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:14:44.735]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:14:44.747]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:14:44.747]        </block>
[13:14:44.747]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:14:44.747]      </control>
[13:14:44.747]      // end if-block "powered_down"
[13:14:44.747]    </control>
[13:14:44.747]    <block atomic="false" info="">
[13:14:44.747]      __var DEBUG_PORT_VAL    = 0;
[13:14:44.747]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:14:44.747]      __var ACCESS_POINT_VAL  = 0;
[13:14:44.747]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:14:44.747]      __ap = 1; 
[13:14:44.747]        // -> [__ap <= 0x00000001]
[13:14:44.747]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:14:44.753]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:14:44.753]      __ap = 4;
[13:14:44.753]        // -> [__ap <= 0x00000004]
[13:14:44.753]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:14:44.756]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:14:44.757]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:14:44.757]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:14:44.758]    </block>
[13:14:44.758]    <block atomic="false" info="">
[13:14:44.758]      __var nReset = 0x80;
[13:14:44.758]        // -> [nReset <= 0x00000080]
[13:14:44.758]      __var canReadPins = 0;
[13:14:44.758]        // -> [canReadPins <= 0x00000000]
[13:14:44.758]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:14:44.760]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:14:44.760]        // -> [canReadPins <= 0x00000001]
[13:14:44.760]    </block>
[13:14:44.760]    <control if="" while="1" timeout="200" info="">
[13:14:44.760]      // while "1"  (timeout="200")
[13:14:44.760]      // while-condition  =>  TRUE
[13:14:44.760]      // while "1"  (timeout="200")
[13:14:44.760]      // while-condition  =>  TRUE
[13:14:44.760]      // while "1"  (timeout="200")
[13:14:44.760]      // while-condition  =>  TRUE
[13:14:44.763]      // while "1"  (timeout="200")
[13:14:44.763]      // while-condition  =>  TRUE
[13:14:44.763]      // while "1"  (timeout="200")
[13:14:44.763]      // while-condition  =>  TRUE
[13:14:44.763]      // while "1"  (timeout="200")
[13:14:44.763]      // while-condition  =>  TRUE
[13:14:44.763]      // while "1"  (timeout="200")
[13:14:44.764]      // while-condition  =>  TRUE
[13:14:44.764]      // while "1"  (timeout="200")
[13:14:44.764]      // while-condition  =>  TRUE
[13:14:44.764]      // while "1"  (timeout="200")
[13:14:44.764]      // while-condition  =>  TRUE
[13:14:44.764]      // while "1"  (timeout="200")
[13:14:44.764]      // while-condition  =>  TRUE
[13:14:44.764]      // while "1"  (timeout="200")
[13:14:44.764]      // while-condition  =>  TRUE
[13:14:44.764]      // while "1"  (timeout="200")
[13:14:44.764]      // while-condition  =>  TRUE
[13:14:44.764]      // while "1"  (timeout="200")
[13:14:44.764]      // while-condition  =>  TRUE
[13:14:44.764]      // while "1"  (timeout="200")
[13:14:44.765]      // while-condition  =>  TRUE
[13:14:44.765]      // while "1"  (timeout="200")
[13:14:44.765]      // while-condition  =>  TRUE
[13:14:44.765]      // while "1"  (timeout="200")
[13:14:44.765]      // while-condition  =>  TRUE
[13:14:44.765]      // while "1"  (timeout="200")
[13:14:44.765]      // while-condition  =>  TRUE
[13:14:44.765]      // while "1"  (timeout="200")
[13:14:44.765]      // while-condition  =>  TRUE
[13:14:44.765]      // while "1"  (timeout="200")
[13:14:44.765]      // while-condition  =>  TRUE
[13:14:44.765]      // while "1"  (timeout="200")
[13:14:44.765]      // while-condition  =>  TRUE
[13:14:44.767]      // while "1"  (timeout="200")
[13:14:44.767]      // while-condition  =>  TRUE
[13:14:44.767]      // while "1"  (timeout="200")
[13:14:44.767]      // while-condition  =>  TRUE
[13:14:44.767]      // while "1"  (timeout="200")
[13:14:44.767]      // while-condition  =>  TRUE
[13:14:44.767]      // while "1"  (timeout="200")
[13:14:44.767]      // while-condition  =>  TRUE
[13:14:44.767]      // while "1"  (timeout="200")
[13:14:44.767]      // while-condition  =>  TRUE
[13:14:44.767]      // while "1"  (timeout="200")
[13:14:44.767]      // while-condition  =>  TRUE
[13:14:44.768]      // while "1"  (timeout="200")
[13:14:44.768]      // while-condition  =>  TRUE
[13:14:44.768]      // while "1"  (timeout="200")
[13:14:44.768]      // while-condition  =>  TRUE
[13:14:44.768]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.769]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.769]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.769]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.769]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.769]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.769]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.769]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.769]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.769]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.769]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.769]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.769]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.769]      // while "1"  (timeout="200")
[13:14:44.769]      // while-condition  =>  TRUE
[13:14:44.771]      // while "1"  (timeout="200")
[13:14:44.771]      // while  =>  TIMEOUT
[13:14:44.771]      // end while "1"
[13:14:44.771]    </control>
[13:14:44.771]    <control if="canReadPins" while="" timeout="0" info="">
[13:14:44.771]      // if-block "canReadPins"
[13:14:44.771]        // =>  TRUE
[13:14:44.771]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:14:44.771]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:14:44.776]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:14:44.776]        // while-condition  =>  FALSE
[13:14:44.776]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:14:44.776]      </control>
[13:14:44.776]      // end if-block "canReadPins"
[13:14:44.776]    </control>
[13:14:44.776]    <control if="!canReadPins" while="" timeout="0" info="">
[13:14:44.776]      // if-block "!canReadPins"
[13:14:44.776]        // =>  FALSE
[13:14:44.776]      // skip if-block "!canReadPins"
[13:14:44.776]    </control>
[13:14:44.776]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:14:44.776]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:14:44.776]        // =>  TRUE
[13:14:44.776]      <block atomic="false" info="">
[13:14:44.776]        WriteAP(0x00, 0x190008);
[13:14:44.779]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:14:44.779]        WriteAP(0xF0, 0x01);
[13:14:44.784]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:14:44.784]      </block>
[13:14:44.784]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:14:44.784]    </control>
[13:14:44.784]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:14:44.784]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:14:44.784]        // =>  FALSE
[13:14:44.784]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:14:44.784]    </control>
[13:14:44.784]    <block atomic="false" info="">
[13:14:44.784]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:14:44.787]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:14:44.787]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:14:44.787]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:14:44.791]      __ap = 0; //lets make sure we reset the access point selection
[13:14:44.791]        // -> [__ap <= 0x00000000]
[13:14:44.793]    </block>
[13:14:44.793]  </sequence>
[13:14:44.793]  
[13:14:44.824]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:14:44.824]  
[13:14:44.824]  <debugvars>
[13:14:44.824]    // Pre-defined
[13:14:44.824]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:14:44.824]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:14:44.824]    __dp=0x00000000
[13:14:44.824]    __ap=0x00000000
[13:14:44.824]    __traceout=0x00000000      (Trace Disabled)
[13:14:44.824]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:14:44.824]    __FlashAddr=0x00000000
[13:14:44.824]    __FlashLen=0x00000000
[13:14:44.824]    __FlashArg=0x00000000
[13:14:44.824]    __FlashOp=0x00000000
[13:14:44.824]    __Result=0x00000000
[13:14:44.824]  </debugvars>
[13:14:44.824]  
[13:14:44.827]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:14:44.827]    <block atomic="false" info="">
[13:14:44.827]      __var deviceID = 0;
[13:14:44.827]        // -> [deviceID <= 0x00000000]
[13:14:44.827]      __var version = 0;
[13:14:44.827]        // -> [version <= 0x00000000]
[13:14:44.827]      __var partNum = 0;
[13:14:44.827]        // -> [partNum <= 0x00000000]
[13:14:44.827]      __var manuf = 0;
[13:14:44.827]        // -> [manuf <= 0x00000000]
[13:14:44.827]      __var isMSPM0G1X0X_G3X0X = 0;
[13:14:44.827]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:14:44.827]      __var isProduction = 0;
[13:14:44.827]        // -> [isProduction <= 0x00000000]
[13:14:44.827]      __var continueId = 0;
[13:14:44.827]        // -> [continueId <= 0x00000000]
[13:14:44.827]      deviceID =   Read32(0x41C40004);
[13:14:44.833]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:14:44.833]        // -> [deviceID <= 0x2BB8802F]
[13:14:44.833]      version = deviceID >> 28;
[13:14:44.833]        // -> [version <= 0x00000002]
[13:14:44.833]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:14:44.833]        // -> [partNum <= 0x0000BB88]
[13:14:44.833]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:14:44.833]        // -> [manuf <= 0x00000017]
[13:14:44.833]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:14:44.833]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:14:44.833]      isProduction = (version > 0);
[13:14:44.833]        // -> [isProduction <= 0x00000001]
[13:14:44.833]    </block>
[13:14:44.833]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:14:44.833]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:14:44.833]        // =>  FALSE
[13:14:44.833]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:14:44.833]    </control>
[13:14:44.833]    <control if="continueId == 4" while="" timeout="0" info="">
[13:14:44.833]      // if-block "continueId == 4"
[13:14:44.833]        // =>  FALSE
[13:14:44.833]      // skip if-block "continueId == 4"
[13:14:44.833]    </control>
[13:14:44.833]    <control if="!isProduction" while="" timeout="0" info="">
[13:14:44.833]      // if-block "!isProduction"
[13:14:44.833]        // =>  FALSE
[13:14:44.833]      // skip if-block "!isProduction"
[13:14:44.833]    </control>
[13:14:44.833]  </sequence>
[13:14:44.833]  
[13:16:16.904]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:16:16.904]  
[13:16:16.915]  <debugvars>
[13:16:16.915]    // Pre-defined
[13:16:16.915]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:16:16.915]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:16:16.915]    __dp=0x00000000
[13:16:16.915]    __ap=0x00000000
[13:16:16.915]    __traceout=0x00000000      (Trace Disabled)
[13:16:16.915]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:16:16.915]    __FlashAddr=0x00000000
[13:16:16.915]    __FlashLen=0x00000000
[13:16:16.915]    __FlashArg=0x00000000
[13:16:16.915]    __FlashOp=0x00000000
[13:16:16.915]    __Result=0x00000000
[13:16:16.915]  </debugvars>
[13:16:16.915]  
[13:16:16.915]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:16:16.915]    <block atomic="false" info="">
[13:16:16.915]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:16:16.915]        // -> [isSWJ <= 0x00000001]
[13:16:16.915]      __var hasDormant = __protocol & 0x00020000;
[13:16:16.915]        // -> [hasDormant <= 0x00000000]
[13:16:16.915]      __var protType   = __protocol & 0x0000FFFF;
[13:16:16.915]        // -> [protType <= 0x00000002]
[13:16:16.915]    </block>
[13:16:16.915]    <control if="protType == 1" while="" timeout="0" info="">
[13:16:16.915]      // if-block "protType == 1"
[13:16:16.915]        // =>  FALSE
[13:16:16.915]      // skip if-block "protType == 1"
[13:16:16.915]    </control>
[13:16:16.915]    <control if="protType == 2" while="" timeout="0" info="">
[13:16:16.915]      // if-block "protType == 2"
[13:16:16.915]        // =>  TRUE
[13:16:16.915]      <control if="isSWJ" while="" timeout="0" info="">
[13:16:16.919]        // if-block "isSWJ"
[13:16:16.919]          // =>  TRUE
[13:16:16.919]        <control if="hasDormant" while="" timeout="0" info="">
[13:16:16.919]          // if-block "hasDormant"
[13:16:16.919]            // =>  FALSE
[13:16:16.919]          // skip if-block "hasDormant"
[13:16:16.919]        </control>
[13:16:16.919]        <control if="!hasDormant" while="" timeout="0" info="">
[13:16:16.919]          // if-block "!hasDormant"
[13:16:16.919]            // =>  TRUE
[13:16:16.919]          <block atomic="false" info="">
[13:16:16.919]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:16:16.919]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:16:16.919]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:16:16.923]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:16:16.923]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:16:16.924]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:16:16.924]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:16:16.926]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:16:16.926]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:16:16.930]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:16:16.930]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:16:16.932]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:16:16.933]          </block>
[13:16:16.933]          // end if-block "!hasDormant"
[13:16:16.933]        </control>
[13:16:16.933]        // end if-block "isSWJ"
[13:16:16.933]      </control>
[13:16:16.933]      <control if="!isSWJ" while="" timeout="0" info="">
[13:16:16.933]        // if-block "!isSWJ"
[13:16:16.933]          // =>  FALSE
[13:16:16.933]        // skip if-block "!isSWJ"
[13:16:16.934]      </control>
[13:16:16.934]      <block atomic="false" info="">
[13:16:16.934]        ReadDP(0x0);
[13:16:16.934]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:16:16.934]      </block>
[13:16:16.934]      // end if-block "protType == 2"
[13:16:16.934]    </control>
[13:16:16.938]  </sequence>
[13:16:16.938]  
[13:16:16.940]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:16:16.940]  
[13:16:16.940]  <debugvars>
[13:16:16.942]    // Pre-defined
[13:16:16.942]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:16:16.942]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:16:16.942]    __dp=0x00000000
[13:16:16.942]    __ap=0x00000000
[13:16:16.942]    __traceout=0x00000000      (Trace Disabled)
[13:16:16.942]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:16:16.942]    __FlashAddr=0x00000000
[13:16:16.942]    __FlashLen=0x00000000
[13:16:16.942]    __FlashArg=0x00000000
[13:16:16.942]    __FlashOp=0x00000000
[13:16:16.943]    __Result=0x00000000
[13:16:16.943]  </debugvars>
[13:16:16.943]  
[13:16:16.943]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:16:16.943]    <block atomic="false" info="">
[13:16:16.943]      __var SW_DP_ABORT       = 0x0;
[13:16:16.943]        // -> [SW_DP_ABORT <= 0x00000000]
[13:16:16.943]      __var DP_CTRL_STAT      = 0x4;
[13:16:16.943]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:16:16.943]      __var DP_SELECT         = 0x8;
[13:16:16.943]        // -> [DP_SELECT <= 0x00000008]
[13:16:16.944]      __var powered_down      = 0;
[13:16:16.944]        // -> [powered_down <= 0x00000000]
[13:16:16.944]      WriteDP(DP_SELECT, 0x00000000);
[13:16:16.946]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:16:16.946]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:16:16.946]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:16:16.946]        // -> [powered_down <= 0x00000001]
[13:16:16.946]    </block>
[13:16:16.946]    <control if="powered_down" while="" timeout="0" info="">
[13:16:16.946]      // if-block "powered_down"
[13:16:16.946]        // =>  TRUE
[13:16:16.946]      <block atomic="false" info="">
[13:16:16.946]        Message(0, "Debug/System power-up request sent");
[13:16:16.950]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:16:16.950]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:16:16.952]      </block>
[13:16:16.952]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:16:16.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:16:16.956]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:16:16.956]        // while-condition  =>  FALSE
[13:16:16.956]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:16:16.956]      </control>
[13:16:16.956]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:16:16.956]        // if-block "(__protocol & 0xFFFF) == 1"
[13:16:16.956]          // =>  FALSE
[13:16:16.956]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:16:16.956]      </control>
[13:16:16.956]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:16:16.956]        // if-block "(__protocol & 0xFFFF) == 2"
[13:16:16.956]          // =>  TRUE
[13:16:16.956]        <block atomic="false" info="">
[13:16:16.956]          Message(0, "executing SWD power up");
[13:16:16.958]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:16:16.962]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:16:16.962]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:16:16.963]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:16:16.963]        </block>
[13:16:16.963]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:16:16.965]      </control>
[13:16:16.965]      // end if-block "powered_down"
[13:16:16.965]    </control>
[13:16:16.965]    <block atomic="false" info="">
[13:16:16.965]      __var DEBUG_PORT_VAL    = 0;
[13:16:16.965]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:16:16.965]      __var ACCESS_POINT_VAL  = 0;
[13:16:16.965]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:16:16.965]      __ap = 1; 
[13:16:16.965]        // -> [__ap <= 0x00000001]
[13:16:16.965]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:16:16.974]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:16:16.974]      __ap = 4;
[13:16:16.974]        // -> [__ap <= 0x00000004]
[13:16:16.974]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:16:16.977]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:16:16.978]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:16:16.978]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:16:16.979]    </block>
[13:16:16.979]    <block atomic="false" info="">
[13:16:16.979]      __var nReset = 0x80;
[13:16:16.979]        // -> [nReset <= 0x00000080]
[13:16:16.979]      __var canReadPins = 0;
[13:16:16.979]        // -> [canReadPins <= 0x00000000]
[13:16:16.979]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:16:16.986]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:16:16.986]        // -> [canReadPins <= 0x00000001]
[13:16:16.986]    </block>
[13:16:16.986]    <control if="" while="1" timeout="200" info="">
[13:16:16.986]      // while "1"  (timeout="200")
[13:16:16.986]      // while-condition  =>  TRUE
[13:16:16.986]      // while "1"  (timeout="200")
[13:16:16.986]      // while-condition  =>  TRUE
[13:16:16.986]      // while "1"  (timeout="200")
[13:16:16.986]      // while-condition  =>  TRUE
[13:16:16.986]      // while "1"  (timeout="200")
[13:16:16.986]      // while-condition  =>  TRUE
[13:16:16.986]      // while "1"  (timeout="200")
[13:16:16.988]      // while-condition  =>  TRUE
[13:16:16.988]      // while "1"  (timeout="200")
[13:16:16.988]      // while-condition  =>  TRUE
[13:16:16.988]      // while "1"  (timeout="200")
[13:16:16.988]      // while-condition  =>  TRUE
[13:16:16.988]      // while "1"  (timeout="200")
[13:16:16.988]      // while-condition  =>  TRUE
[13:16:16.988]      // while "1"  (timeout="200")
[13:16:16.988]      // while-condition  =>  TRUE
[13:16:16.988]      // while "1"  (timeout="200")
[13:16:16.988]      // while-condition  =>  TRUE
[13:16:16.988]      // while "1"  (timeout="200")
[13:16:16.988]      // while-condition  =>  TRUE
[13:16:16.988]      // while "1"  (timeout="200")
[13:16:16.988]      // while-condition  =>  TRUE
[13:16:16.988]      // while "1"  (timeout="200")
[13:16:16.988]      // while-condition  =>  TRUE
[13:16:16.988]      // while "1"  (timeout="200")
[13:16:16.988]      // while-condition  =>  TRUE
[13:16:16.988]      // while "1"  (timeout="200")
[13:16:16.990]      // while-condition  =>  TRUE
[13:16:16.990]      // while "1"  (timeout="200")
[13:16:16.990]      // while  =>  TIMEOUT
[13:16:16.990]      // end while "1"
[13:16:16.990]    </control>
[13:16:16.990]    <control if="canReadPins" while="" timeout="0" info="">
[13:16:16.990]      // if-block "canReadPins"
[13:16:16.990]        // =>  TRUE
[13:16:16.991]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:16:16.991]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:16:17.000]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:16:17.000]        // while-condition  =>  FALSE
[13:16:17.000]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:16:17.000]      </control>
[13:16:17.000]      // end if-block "canReadPins"
[13:16:17.000]    </control>
[13:16:17.000]    <control if="!canReadPins" while="" timeout="0" info="">
[13:16:17.000]      // if-block "!canReadPins"
[13:16:17.000]        // =>  FALSE
[13:16:17.000]      // skip if-block "!canReadPins"
[13:16:17.000]    </control>
[13:16:17.000]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:16:17.000]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:16:17.000]        // =>  TRUE
[13:16:17.001]      <block atomic="false" info="">
[13:16:17.001]        WriteAP(0x00, 0x190008);
[13:16:17.007]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:16:17.007]        WriteAP(0xF0, 0x01);
[13:16:17.011]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:16:17.011]      </block>
[13:16:17.011]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:16:17.011]    </control>
[13:16:17.011]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:16:17.011]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:16:17.011]        // =>  FALSE
[13:16:17.011]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:16:17.011]    </control>
[13:16:17.011]    <block atomic="false" info="">
[13:16:17.012]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:16:17.015]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:16:17.015]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:16:17.015]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:16:17.015]      __ap = 0; //lets make sure we reset the access point selection
[13:16:17.019]        // -> [__ap <= 0x00000000]
[13:16:17.019]    </block>
[13:16:17.019]  </sequence>
[13:16:17.019]  
[13:16:17.055]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:16:17.055]  
[13:16:17.055]  <debugvars>
[13:16:17.055]    // Pre-defined
[13:16:17.055]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:16:17.055]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:16:17.055]    __dp=0x00000000
[13:16:17.055]    __ap=0x00000000
[13:16:17.055]    __traceout=0x00000000      (Trace Disabled)
[13:16:17.055]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:16:17.055]    __FlashAddr=0x00000000
[13:16:17.055]    __FlashLen=0x00000000
[13:16:17.055]    __FlashArg=0x00000000
[13:16:17.055]    __FlashOp=0x00000000
[13:16:17.055]    __Result=0x00000000
[13:16:17.055]  </debugvars>
[13:16:17.055]  
[13:16:17.055]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:16:17.055]    <block atomic="false" info="">
[13:16:17.055]      __var deviceID = 0;
[13:16:17.055]        // -> [deviceID <= 0x00000000]
[13:16:17.055]      __var version = 0;
[13:16:17.055]        // -> [version <= 0x00000000]
[13:16:17.055]      __var partNum = 0;
[13:16:17.055]        // -> [partNum <= 0x00000000]
[13:16:17.055]      __var manuf = 0;
[13:16:17.055]        // -> [manuf <= 0x00000000]
[13:16:17.055]      __var isMSPM0G1X0X_G3X0X = 0;
[13:16:17.059]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:16:17.059]      __var isProduction = 0;
[13:16:17.059]        // -> [isProduction <= 0x00000000]
[13:16:17.059]      __var continueId = 0;
[13:16:17.059]        // -> [continueId <= 0x00000000]
[13:16:17.059]      deviceID =   Read32(0x41C40004);
[13:16:17.067]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:16:17.067]        // -> [deviceID <= 0x2BB8802F]
[13:16:17.067]      version = deviceID >> 28;
[13:16:17.067]        // -> [version <= 0x00000002]
[13:16:17.067]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:16:17.067]        // -> [partNum <= 0x0000BB88]
[13:16:17.067]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:16:17.067]        // -> [manuf <= 0x00000017]
[13:16:17.067]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:16:17.067]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:16:17.067]      isProduction = (version > 0);
[13:16:17.067]        // -> [isProduction <= 0x00000001]
[13:16:17.067]    </block>
[13:16:17.067]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:16:17.067]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:16:17.067]        // =>  FALSE
[13:16:17.067]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:16:17.067]    </control>
[13:16:17.067]    <control if="continueId == 4" while="" timeout="0" info="">
[13:16:17.067]      // if-block "continueId == 4"
[13:16:17.067]        // =>  FALSE
[13:16:17.067]      // skip if-block "continueId == 4"
[13:16:17.067]    </control>
[13:16:17.067]    <control if="!isProduction" while="" timeout="0" info="">
[13:16:17.067]      // if-block "!isProduction"
[13:16:17.067]        // =>  FALSE
[13:16:17.067]      // skip if-block "!isProduction"
[13:16:17.067]    </control>
[13:16:17.067]  </sequence>
[13:16:17.067]  
[13:16:23.632]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:16:23.632]  
[13:16:23.632]  <debugvars>
[13:16:23.632]    // Pre-defined
[13:16:23.633]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:16:23.633]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:16:23.633]    __dp=0x00000000
[13:16:23.633]    __ap=0x00000000
[13:16:23.633]    __traceout=0x00000000      (Trace Disabled)
[13:16:23.633]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:16:23.633]    __FlashAddr=0x00000000
[13:16:23.633]    __FlashLen=0x00000000
[13:16:23.633]    __FlashArg=0x00000000
[13:16:23.633]    __FlashOp=0x00000000
[13:16:23.634]    __Result=0x00000000
[13:16:23.634]  </debugvars>
[13:16:23.634]  
[13:16:23.634]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:16:23.634]    <block atomic="false" info="">
[13:16:23.634]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:16:23.634]        // -> [isSWJ <= 0x00000001]
[13:16:23.634]      __var hasDormant = __protocol & 0x00020000;
[13:16:23.634]        // -> [hasDormant <= 0x00000000]
[13:16:23.634]      __var protType   = __protocol & 0x0000FFFF;
[13:16:23.634]        // -> [protType <= 0x00000002]
[13:16:23.634]    </block>
[13:16:23.634]    <control if="protType == 1" while="" timeout="0" info="">
[13:16:23.634]      // if-block "protType == 1"
[13:16:23.634]        // =>  FALSE
[13:16:23.634]      // skip if-block "protType == 1"
[13:16:23.634]    </control>
[13:16:23.634]    <control if="protType == 2" while="" timeout="0" info="">
[13:16:23.634]      // if-block "protType == 2"
[13:16:23.634]        // =>  TRUE
[13:16:23.634]      <control if="isSWJ" while="" timeout="0" info="">
[13:16:23.634]        // if-block "isSWJ"
[13:16:23.634]          // =>  TRUE
[13:16:23.634]        <control if="hasDormant" while="" timeout="0" info="">
[13:16:23.634]          // if-block "hasDormant"
[13:16:23.634]            // =>  FALSE
[13:16:23.634]          // skip if-block "hasDormant"
[13:16:23.634]        </control>
[13:16:23.634]        <control if="!hasDormant" while="" timeout="0" info="">
[13:16:23.634]          // if-block "!hasDormant"
[13:16:23.634]            // =>  TRUE
[13:16:23.634]          <block atomic="false" info="">
[13:16:23.634]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:16:23.634]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:16:23.634]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:16:23.642]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:16:23.642]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:16:23.643]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:16:23.644]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:16:23.645]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:16:23.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:16:23.645]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:16:23.645]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:16:23.645]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:16:23.645]          </block>
[13:16:23.645]          // end if-block "!hasDormant"
[13:16:23.645]        </control>
[13:16:23.645]        // end if-block "isSWJ"
[13:16:23.645]      </control>
[13:16:23.645]      <control if="!isSWJ" while="" timeout="0" info="">
[13:16:23.645]        // if-block "!isSWJ"
[13:16:23.645]          // =>  FALSE
[13:16:23.645]        // skip if-block "!isSWJ"
[13:16:23.645]      </control>
[13:16:23.645]      <block atomic="false" info="">
[13:16:23.645]        ReadDP(0x0);
[13:16:23.654]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:16:23.654]      </block>
[13:16:23.655]      // end if-block "protType == 2"
[13:16:23.655]    </control>
[13:16:23.655]  </sequence>
[13:16:23.655]  
[13:16:23.655]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:16:23.655]  
[13:16:23.655]  <debugvars>
[13:16:23.655]    // Pre-defined
[13:16:23.655]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:16:23.655]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:16:23.655]    __dp=0x00000000
[13:16:23.655]    __ap=0x00000000
[13:16:23.655]    __traceout=0x00000000      (Trace Disabled)
[13:16:23.655]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:16:23.655]    __FlashAddr=0x00000000
[13:16:23.655]    __FlashLen=0x00000000
[13:16:23.655]    __FlashArg=0x00000000
[13:16:23.655]    __FlashOp=0x00000000
[13:16:23.655]    __Result=0x00000000
[13:16:23.655]  </debugvars>
[13:16:23.655]  
[13:16:23.655]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:16:23.655]    <block atomic="false" info="">
[13:16:23.655]      __var SW_DP_ABORT       = 0x0;
[13:16:23.655]        // -> [SW_DP_ABORT <= 0x00000000]
[13:16:23.655]      __var DP_CTRL_STAT      = 0x4;
[13:16:23.655]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:16:23.655]      __var DP_SELECT         = 0x8;
[13:16:23.655]        // -> [DP_SELECT <= 0x00000008]
[13:16:23.655]      __var powered_down      = 0;
[13:16:23.655]        // -> [powered_down <= 0x00000000]
[13:16:23.655]      WriteDP(DP_SELECT, 0x00000000);
[13:16:23.663]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:16:23.663]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:16:23.663]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:16:23.663]        // -> [powered_down <= 0x00000001]
[13:16:23.663]    </block>
[13:16:23.663]    <control if="powered_down" while="" timeout="0" info="">
[13:16:23.663]      // if-block "powered_down"
[13:16:23.663]        // =>  TRUE
[13:16:23.663]      <block atomic="false" info="">
[13:16:23.663]        Message(0, "Debug/System power-up request sent");
[13:16:23.667]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:16:23.667]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:16:23.667]      </block>
[13:16:23.667]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:16:23.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:16:23.673]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:16:23.673]        // while-condition  =>  FALSE
[13:16:23.673]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:16:23.673]      </control>
[13:16:23.674]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:16:23.674]        // if-block "(__protocol & 0xFFFF) == 1"
[13:16:23.674]          // =>  FALSE
[13:16:23.674]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:16:23.674]      </control>
[13:16:23.674]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:16:23.674]        // if-block "(__protocol & 0xFFFF) == 2"
[13:16:23.674]          // =>  TRUE
[13:16:23.674]        <block atomic="false" info="">
[13:16:23.674]          Message(0, "executing SWD power up");
[13:16:23.674]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:16:23.682]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:16:23.682]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:16:23.683]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:16:23.683]        </block>
[13:16:23.683]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:16:23.683]      </control>
[13:16:23.683]      // end if-block "powered_down"
[13:16:23.683]    </control>
[13:16:23.683]    <block atomic="false" info="">
[13:16:23.683]      __var DEBUG_PORT_VAL    = 0;
[13:16:23.683]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:16:23.683]      __var ACCESS_POINT_VAL  = 0;
[13:16:23.683]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:16:23.687]      __ap = 1; 
[13:16:23.687]        // -> [__ap <= 0x00000001]
[13:16:23.687]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:16:23.687]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:16:23.687]      __ap = 4;
[13:16:23.687]        // -> [__ap <= 0x00000004]
[13:16:23.687]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:16:23.694]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:16:23.694]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:16:23.694]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:16:23.694]    </block>
[13:16:23.694]    <block atomic="false" info="">
[13:16:23.694]      __var nReset = 0x80;
[13:16:23.694]        // -> [nReset <= 0x00000080]
[13:16:23.694]      __var canReadPins = 0;
[13:16:23.694]        // -> [canReadPins <= 0x00000000]
[13:16:23.694]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:16:23.703]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:16:23.703]        // -> [canReadPins <= 0x00000001]
[13:16:23.703]    </block>
[13:16:23.703]    <control if="" while="1" timeout="200" info="">
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.703]      // while "1"  (timeout="200")
[13:16:23.703]      // while-condition  =>  TRUE
[13:16:23.712]      // while "1"  (timeout="200")
[13:16:23.712]      // while  =>  TIMEOUT
[13:16:23.712]      // end while "1"
[13:16:23.712]    </control>
[13:16:23.712]    <control if="canReadPins" while="" timeout="0" info="">
[13:16:23.713]      // if-block "canReadPins"
[13:16:23.713]        // =>  TRUE
[13:16:23.713]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:16:23.713]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:16:23.714]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:16:23.714]        // while-condition  =>  FALSE
[13:16:23.714]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:16:23.714]      </control>
[13:16:23.714]      // end if-block "canReadPins"
[13:16:23.714]    </control>
[13:16:23.714]    <control if="!canReadPins" while="" timeout="0" info="">
[13:16:23.714]      // if-block "!canReadPins"
[13:16:23.714]        // =>  FALSE
[13:16:23.714]      // skip if-block "!canReadPins"
[13:16:23.714]    </control>
[13:16:23.714]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:16:23.714]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:16:23.714]        // =>  TRUE
[13:16:23.714]      <block atomic="false" info="">
[13:16:23.714]        WriteAP(0x00, 0x190008);
[13:16:23.714]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:16:23.714]        WriteAP(0xF0, 0x01);
[13:16:23.723]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:16:23.723]      </block>
[13:16:23.723]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:16:23.723]    </control>
[13:16:23.723]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:16:23.723]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:16:23.723]        // =>  FALSE
[13:16:23.723]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:16:23.723]    </control>
[13:16:23.723]    <block atomic="false" info="">
[13:16:23.723]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:16:23.733]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:16:23.733]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:16:23.733]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:16:23.734]      __ap = 0; //lets make sure we reset the access point selection
[13:16:23.734]        // -> [__ap <= 0x00000000]
[13:16:23.734]    </block>
[13:16:23.734]  </sequence>
[13:16:23.734]  
[13:16:23.773]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:16:23.773]  
[13:16:23.773]  <debugvars>
[13:16:23.773]    // Pre-defined
[13:16:23.773]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:16:23.773]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:16:23.773]    __dp=0x00000000
[13:16:23.774]    __ap=0x00000000
[13:16:23.774]    __traceout=0x00000000      (Trace Disabled)
[13:16:23.774]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:16:23.774]    __FlashAddr=0x00000000
[13:16:23.774]    __FlashLen=0x00000000
[13:16:23.774]    __FlashArg=0x00000000
[13:16:23.774]    __FlashOp=0x00000000
[13:16:23.774]    __Result=0x00000000
[13:16:23.774]  </debugvars>
[13:16:23.774]  
[13:16:23.774]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:16:23.775]    <block atomic="false" info="">
[13:16:23.775]      __var deviceID = 0;
[13:16:23.775]        // -> [deviceID <= 0x00000000]
[13:16:23.775]      __var version = 0;
[13:16:23.776]        // -> [version <= 0x00000000]
[13:16:23.776]      __var partNum = 0;
[13:16:23.776]        // -> [partNum <= 0x00000000]
[13:16:23.776]      __var manuf = 0;
[13:16:23.776]        // -> [manuf <= 0x00000000]
[13:16:23.776]      __var isMSPM0G1X0X_G3X0X = 0;
[13:16:23.776]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:16:23.776]      __var isProduction = 0;
[13:16:23.776]        // -> [isProduction <= 0x00000000]
[13:16:23.776]      __var continueId = 0;
[13:16:23.777]        // -> [continueId <= 0x00000000]
[13:16:23.777]      deviceID =   Read32(0x41C40004);
[13:16:23.783]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:16:23.783]        // -> [deviceID <= 0x2BB8802F]
[13:16:23.783]      version = deviceID >> 28;
[13:16:23.783]        // -> [version <= 0x00000002]
[13:16:23.783]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:16:23.784]        // -> [partNum <= 0x0000BB88]
[13:16:23.784]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:16:23.784]        // -> [manuf <= 0x00000017]
[13:16:23.784]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:16:23.784]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:16:23.784]      isProduction = (version > 0);
[13:16:23.784]        // -> [isProduction <= 0x00000001]
[13:16:23.784]    </block>
[13:16:23.784]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:16:23.784]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:16:23.784]        // =>  FALSE
[13:16:23.784]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:16:23.784]    </control>
[13:16:23.784]    <control if="continueId == 4" while="" timeout="0" info="">
[13:16:23.784]      // if-block "continueId == 4"
[13:16:23.785]        // =>  FALSE
[13:16:23.785]      // skip if-block "continueId == 4"
[13:16:23.785]    </control>
[13:16:23.785]    <control if="!isProduction" while="" timeout="0" info="">
[13:16:23.785]      // if-block "!isProduction"
[13:16:23.785]        // =>  FALSE
[13:16:23.785]      // skip if-block "!isProduction"
[13:16:23.785]    </control>
[13:16:23.785]  </sequence>
[13:16:23.785]  
[13:18:34.163]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:18:34.163]  
[13:18:34.173]  <debugvars>
[13:18:34.173]    // Pre-defined
[13:18:34.173]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:18:34.173]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:18:34.173]    __dp=0x00000000
[13:18:34.173]    __ap=0x00000000
[13:18:34.173]    __traceout=0x00000000      (Trace Disabled)
[13:18:34.173]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:18:34.173]    __FlashAddr=0x00000000
[13:18:34.173]    __FlashLen=0x00000000
[13:18:34.173]    __FlashArg=0x00000000
[13:18:34.173]    __FlashOp=0x00000000
[13:18:34.174]    __Result=0x00000000
[13:18:34.174]  </debugvars>
[13:18:34.174]  
[13:18:34.174]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:18:34.174]    <block atomic="false" info="">
[13:18:34.174]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:18:34.174]        // -> [isSWJ <= 0x00000001]
[13:18:34.174]      __var hasDormant = __protocol & 0x00020000;
[13:18:34.174]        // -> [hasDormant <= 0x00000000]
[13:18:34.174]      __var protType   = __protocol & 0x0000FFFF;
[13:18:34.174]        // -> [protType <= 0x00000002]
[13:18:34.174]    </block>
[13:18:34.175]    <control if="protType == 1" while="" timeout="0" info="">
[13:18:34.175]      // if-block "protType == 1"
[13:18:34.175]        // =>  FALSE
[13:18:34.175]      // skip if-block "protType == 1"
[13:18:34.175]    </control>
[13:18:34.175]    <control if="protType == 2" while="" timeout="0" info="">
[13:18:34.175]      // if-block "protType == 2"
[13:18:34.175]        // =>  TRUE
[13:18:34.175]      <control if="isSWJ" while="" timeout="0" info="">
[13:18:34.175]        // if-block "isSWJ"
[13:18:34.175]          // =>  TRUE
[13:18:34.175]        <control if="hasDormant" while="" timeout="0" info="">
[13:18:34.177]          // if-block "hasDormant"
[13:18:34.177]            // =>  FALSE
[13:18:34.177]          // skip if-block "hasDormant"
[13:18:34.177]        </control>
[13:18:34.177]        <control if="!hasDormant" while="" timeout="0" info="">
[13:18:34.177]          // if-block "!hasDormant"
[13:18:34.177]            // =>  TRUE
[13:18:34.177]          <block atomic="false" info="">
[13:18:34.177]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:18:34.178]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:18:34.178]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:18:34.180]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:18:34.180]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:18:34.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:18:34.182]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:18:34.183]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:18:34.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:18:34.183]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:18:34.183]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:18:34.193]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:18:34.193]          </block>
[13:18:34.193]          // end if-block "!hasDormant"
[13:18:34.193]        </control>
[13:18:34.193]        // end if-block "isSWJ"
[13:18:34.193]      </control>
[13:18:34.193]      <control if="!isSWJ" while="" timeout="0" info="">
[13:18:34.193]        // if-block "!isSWJ"
[13:18:34.194]          // =>  FALSE
[13:18:34.194]        // skip if-block "!isSWJ"
[13:18:34.194]      </control>
[13:18:34.194]      <block atomic="false" info="">
[13:18:34.194]        ReadDP(0x0);
[13:18:34.200]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:18:34.200]      </block>
[13:18:34.200]      // end if-block "protType == 2"
[13:18:34.200]    </control>
[13:18:34.200]  </sequence>
[13:18:34.200]  
[13:18:34.203]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:18:34.203]  
[13:18:34.203]  <debugvars>
[13:18:34.203]    // Pre-defined
[13:18:34.203]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:18:34.203]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:18:34.203]    __dp=0x00000000
[13:18:34.203]    __ap=0x00000000
[13:18:34.203]    __traceout=0x00000000      (Trace Disabled)
[13:18:34.203]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:18:34.203]    __FlashAddr=0x00000000
[13:18:34.203]    __FlashLen=0x00000000
[13:18:34.203]    __FlashArg=0x00000000
[13:18:34.203]    __FlashOp=0x00000000
[13:18:34.203]    __Result=0x00000000
[13:18:34.203]  </debugvars>
[13:18:34.203]  
[13:18:34.203]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:18:34.203]    <block atomic="false" info="">
[13:18:34.203]      __var SW_DP_ABORT       = 0x0;
[13:18:34.203]        // -> [SW_DP_ABORT <= 0x00000000]
[13:18:34.203]      __var DP_CTRL_STAT      = 0x4;
[13:18:34.203]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:18:34.203]      __var DP_SELECT         = 0x8;
[13:18:34.207]        // -> [DP_SELECT <= 0x00000008]
[13:18:34.207]      __var powered_down      = 0;
[13:18:34.207]        // -> [powered_down <= 0x00000000]
[13:18:34.207]      WriteDP(DP_SELECT, 0x00000000);
[13:18:34.207]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:18:34.207]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:18:34.210]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:18:34.212]        // -> [powered_down <= 0x00000001]
[13:18:34.212]    </block>
[13:18:34.212]    <control if="powered_down" while="" timeout="0" info="">
[13:18:34.212]      // if-block "powered_down"
[13:18:34.212]        // =>  TRUE
[13:18:34.212]      <block atomic="false" info="">
[13:18:34.212]        Message(0, "Debug/System power-up request sent");
[13:18:34.214]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:18:34.214]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:18:34.214]      </block>
[13:18:34.214]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:18:34.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:18:34.214]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:18:34.214]        // while-condition  =>  FALSE
[13:18:34.214]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:18:34.214]      </control>
[13:18:34.214]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:18:34.214]        // if-block "(__protocol & 0xFFFF) == 1"
[13:18:34.214]          // =>  FALSE
[13:18:34.214]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:18:34.214]      </control>
[13:18:34.214]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:18:34.214]        // if-block "(__protocol & 0xFFFF) == 2"
[13:18:34.214]          // =>  TRUE
[13:18:34.214]        <block atomic="false" info="">
[13:18:34.214]          Message(0, "executing SWD power up");
[13:18:34.222]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:18:34.223]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:18:34.223]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:18:34.223]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:18:34.223]        </block>
[13:18:34.226]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:18:34.226]      </control>
[13:18:34.226]      // end if-block "powered_down"
[13:18:34.226]    </control>
[13:18:34.226]    <block atomic="false" info="">
[13:18:34.226]      __var DEBUG_PORT_VAL    = 0;
[13:18:34.226]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:18:34.226]      __var ACCESS_POINT_VAL  = 0;
[13:18:34.226]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:18:34.226]      __ap = 1; 
[13:18:34.226]        // -> [__ap <= 0x00000001]
[13:18:34.226]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:18:34.231]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:18:34.231]      __ap = 4;
[13:18:34.231]        // -> [__ap <= 0x00000004]
[13:18:34.231]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:18:34.234]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:18:34.234]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:18:34.234]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:18:34.234]    </block>
[13:18:34.234]    <block atomic="false" info="">
[13:18:34.234]      __var nReset = 0x80;
[13:18:34.234]        // -> [nReset <= 0x00000080]
[13:18:34.234]      __var canReadPins = 0;
[13:18:34.234]        // -> [canReadPins <= 0x00000000]
[13:18:34.234]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:18:34.234]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:18:34.234]        // -> [canReadPins <= 0x00000001]
[13:18:34.234]    </block>
[13:18:34.234]    <control if="" while="1" timeout="200" info="">
[13:18:34.234]      // while "1"  (timeout="200")
[13:18:34.234]      // while-condition  =>  TRUE
[13:18:34.234]      // while "1"  (timeout="200")
[13:18:34.234]      // while-condition  =>  TRUE
[13:18:34.240]      // while "1"  (timeout="200")
[13:18:34.240]      // while  =>  TIMEOUT
[13:18:34.240]      // end while "1"
[13:18:34.240]    </control>
[13:18:34.240]    <control if="canReadPins" while="" timeout="0" info="">
[13:18:34.240]      // if-block "canReadPins"
[13:18:34.240]        // =>  TRUE
[13:18:34.240]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:18:34.240]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:18:34.242]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:18:34.242]        // while-condition  =>  FALSE
[13:18:34.242]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:18:34.242]      </control>
[13:18:34.243]      // end if-block "canReadPins"
[13:18:34.243]    </control>
[13:18:34.243]    <control if="!canReadPins" while="" timeout="0" info="">
[13:18:34.243]      // if-block "!canReadPins"
[13:18:34.243]        // =>  FALSE
[13:18:34.243]      // skip if-block "!canReadPins"
[13:18:34.243]    </control>
[13:18:34.243]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:18:34.243]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:18:34.243]        // =>  TRUE
[13:18:34.243]      <block atomic="false" info="">
[13:18:34.243]        WriteAP(0x00, 0x190008);
[13:18:34.243]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:18:34.243]        WriteAP(0xF0, 0x01);
[13:18:34.243]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:18:34.243]      </block>
[13:18:34.243]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:18:34.243]    </control>
[13:18:34.243]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:18:34.243]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:18:34.243]        // =>  FALSE
[13:18:34.243]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:18:34.243]    </control>
[13:18:34.243]    <block atomic="false" info="">
[13:18:34.243]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:18:34.254]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:18:34.254]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:18:34.254]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:18:34.254]      __ap = 0; //lets make sure we reset the access point selection
[13:18:34.254]        // -> [__ap <= 0x00000000]
[13:18:34.254]    </block>
[13:18:34.254]  </sequence>
[13:18:34.254]  
[13:18:34.298]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:18:34.298]  
[13:18:34.298]  <debugvars>
[13:18:34.298]    // Pre-defined
[13:18:34.298]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:18:34.298]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:18:34.298]    __dp=0x00000000
[13:18:34.298]    __ap=0x00000000
[13:18:34.298]    __traceout=0x00000000      (Trace Disabled)
[13:18:34.298]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:18:34.298]    __FlashAddr=0x00000000
[13:18:34.298]    __FlashLen=0x00000000
[13:18:34.298]    __FlashArg=0x00000000
[13:18:34.298]    __FlashOp=0x00000000
[13:18:34.298]    __Result=0x00000000
[13:18:34.298]  </debugvars>
[13:18:34.298]  
[13:18:34.298]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:18:34.302]    <block atomic="false" info="">
[13:18:34.302]      __var deviceID = 0;
[13:18:34.302]        // -> [deviceID <= 0x00000000]
[13:18:34.302]      __var version = 0;
[13:18:34.302]        // -> [version <= 0x00000000]
[13:18:34.302]      __var partNum = 0;
[13:18:34.303]        // -> [partNum <= 0x00000000]
[13:18:34.303]      __var manuf = 0;
[13:18:34.303]        // -> [manuf <= 0x00000000]
[13:18:34.303]      __var isMSPM0G1X0X_G3X0X = 0;
[13:18:34.303]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:18:34.303]      __var isProduction = 0;
[13:18:34.303]        // -> [isProduction <= 0x00000000]
[13:18:34.303]      __var continueId = 0;
[13:18:34.303]        // -> [continueId <= 0x00000000]
[13:18:34.303]      deviceID =   Read32(0x41C40004);
[13:18:34.304]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:18:34.304]        // -> [deviceID <= 0x2BB8802F]
[13:18:34.304]      version = deviceID >> 28;
[13:18:34.304]        // -> [version <= 0x00000002]
[13:18:34.304]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:18:34.304]        // -> [partNum <= 0x0000BB88]
[13:18:34.304]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:18:34.304]        // -> [manuf <= 0x00000017]
[13:18:34.304]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:18:34.304]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:18:34.304]      isProduction = (version > 0);
[13:18:34.304]        // -> [isProduction <= 0x00000001]
[13:18:34.304]    </block>
[13:18:34.312]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:18:34.312]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:18:34.312]        // =>  FALSE
[13:18:34.312]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:18:34.312]    </control>
[13:18:34.312]    <control if="continueId == 4" while="" timeout="0" info="">
[13:18:34.312]      // if-block "continueId == 4"
[13:18:34.312]        // =>  FALSE
[13:18:34.313]      // skip if-block "continueId == 4"
[13:18:34.313]    </control>
[13:18:34.313]    <control if="!isProduction" while="" timeout="0" info="">
[13:18:34.313]      // if-block "!isProduction"
[13:18:34.313]        // =>  FALSE
[13:18:34.313]      // skip if-block "!isProduction"
[13:18:34.313]    </control>
[13:18:34.313]  </sequence>
[13:18:34.313]  
[13:19:43.734]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:19:43.734]  
[13:19:43.742]  <debugvars>
[13:19:43.742]    // Pre-defined
[13:19:43.742]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:19:43.742]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:19:43.742]    __dp=0x00000000
[13:19:43.742]    __ap=0x00000000
[13:19:43.742]    __traceout=0x00000000      (Trace Disabled)
[13:19:43.743]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:19:43.743]    __FlashAddr=0x00000000
[13:19:43.743]    __FlashLen=0x00000000
[13:19:43.743]    __FlashArg=0x00000000
[13:19:43.743]    __FlashOp=0x00000000
[13:19:43.743]    __Result=0x00000000
[13:19:43.743]  </debugvars>
[13:19:43.743]  
[13:19:43.743]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:19:43.743]    <block atomic="false" info="">
[13:19:43.743]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:19:43.743]        // -> [isSWJ <= 0x00000001]
[13:19:43.743]      __var hasDormant = __protocol & 0x00020000;
[13:19:43.743]        // -> [hasDormant <= 0x00000000]
[13:19:43.743]      __var protType   = __protocol & 0x0000FFFF;
[13:19:43.743]        // -> [protType <= 0x00000002]
[13:19:43.743]    </block>
[13:19:43.743]    <control if="protType == 1" while="" timeout="0" info="">
[13:19:43.743]      // if-block "protType == 1"
[13:19:43.743]        // =>  FALSE
[13:19:43.743]      // skip if-block "protType == 1"
[13:19:43.743]    </control>
[13:19:43.743]    <control if="protType == 2" while="" timeout="0" info="">
[13:19:43.743]      // if-block "protType == 2"
[13:19:43.743]        // =>  TRUE
[13:19:43.743]      <control if="isSWJ" while="" timeout="0" info="">
[13:19:43.743]        // if-block "isSWJ"
[13:19:43.743]          // =>  TRUE
[13:19:43.743]        <control if="hasDormant" while="" timeout="0" info="">
[13:19:43.743]          // if-block "hasDormant"
[13:19:43.743]            // =>  FALSE
[13:19:43.743]          // skip if-block "hasDormant"
[13:19:43.743]        </control>
[13:19:43.743]        <control if="!hasDormant" while="" timeout="0" info="">
[13:19:43.743]          // if-block "!hasDormant"
[13:19:43.743]            // =>  TRUE
[13:19:43.743]          <block atomic="false" info="">
[13:19:43.743]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:19:43.752]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:19:43.753]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:19:43.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:19:43.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:19:43.753]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:19:43.753]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:19:43.753]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:19:43.753]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:19:43.753]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:19:43.753]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:19:43.764]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:19:43.764]          </block>
[13:19:43.764]          // end if-block "!hasDormant"
[13:19:43.764]        </control>
[13:19:43.764]        // end if-block "isSWJ"
[13:19:43.764]      </control>
[13:19:43.764]      <control if="!isSWJ" while="" timeout="0" info="">
[13:19:43.764]        // if-block "!isSWJ"
[13:19:43.764]          // =>  FALSE
[13:19:43.764]        // skip if-block "!isSWJ"
[13:19:43.764]      </control>
[13:19:43.764]      <block atomic="false" info="">
[13:19:43.764]        ReadDP(0x0);
[13:19:43.773]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:19:43.773]      </block>
[13:19:43.773]      // end if-block "protType == 2"
[13:19:43.773]    </control>
[13:19:43.773]  </sequence>
[13:19:43.773]  
[13:19:43.774]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:19:43.774]  
[13:19:43.774]  <debugvars>
[13:19:43.774]    // Pre-defined
[13:19:43.774]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:19:43.774]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:19:43.774]    __dp=0x00000000
[13:19:43.774]    __ap=0x00000000
[13:19:43.774]    __traceout=0x00000000      (Trace Disabled)
[13:19:43.774]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:19:43.774]    __FlashAddr=0x00000000
[13:19:43.774]    __FlashLen=0x00000000
[13:19:43.774]    __FlashArg=0x00000000
[13:19:43.774]    __FlashOp=0x00000000
[13:19:43.774]    __Result=0x00000000
[13:19:43.774]  </debugvars>
[13:19:43.782]  
[13:19:43.782]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:19:43.782]    <block atomic="false" info="">
[13:19:43.782]      __var SW_DP_ABORT       = 0x0;
[13:19:43.782]        // -> [SW_DP_ABORT <= 0x00000000]
[13:19:43.782]      __var DP_CTRL_STAT      = 0x4;
[13:19:43.782]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:19:43.782]      __var DP_SELECT         = 0x8;
[13:19:43.782]        // -> [DP_SELECT <= 0x00000008]
[13:19:43.783]      __var powered_down      = 0;
[13:19:43.783]        // -> [powered_down <= 0x00000000]
[13:19:43.783]      WriteDP(DP_SELECT, 0x00000000);
[13:19:43.784]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:19:43.784]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:19:43.792]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:19:43.792]        // -> [powered_down <= 0x00000001]
[13:19:43.792]    </block>
[13:19:43.792]    <control if="powered_down" while="" timeout="0" info="">
[13:19:43.793]      // if-block "powered_down"
[13:19:43.793]        // =>  TRUE
[13:19:43.793]      <block atomic="false" info="">
[13:19:43.793]        Message(0, "Debug/System power-up request sent");
[13:19:43.795]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:19:43.795]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:19:43.795]      </block>
[13:19:43.795]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:19:43.795]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:19:43.802]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:19:43.803]        // while-condition  =>  FALSE
[13:19:43.803]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:19:43.803]      </control>
[13:19:43.803]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:19:43.803]        // if-block "(__protocol & 0xFFFF) == 1"
[13:19:43.803]          // =>  FALSE
[13:19:43.803]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:19:43.803]      </control>
[13:19:43.803]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:19:43.804]        // if-block "(__protocol & 0xFFFF) == 2"
[13:19:43.804]          // =>  TRUE
[13:19:43.804]        <block atomic="false" info="">
[13:19:43.804]          Message(0, "executing SWD power up");
[13:19:43.804]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:19:43.804]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:19:43.804]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:19:43.813]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:19:43.813]        </block>
[13:19:43.813]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:19:43.813]      </control>
[13:19:43.813]      // end if-block "powered_down"
[13:19:43.813]    </control>
[13:19:43.813]    <block atomic="false" info="">
[13:19:43.813]      __var DEBUG_PORT_VAL    = 0;
[13:19:43.813]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:19:43.813]      __var ACCESS_POINT_VAL  = 0;
[13:19:43.813]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:19:43.813]      __ap = 1; 
[13:19:43.813]        // -> [__ap <= 0x00000001]
[13:19:43.813]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:19:43.813]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:19:43.813]      __ap = 4;
[13:19:43.813]        // -> [__ap <= 0x00000004]
[13:19:43.813]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:19:43.821]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:19:43.822]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:19:43.822]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:19:43.824]    </block>
[13:19:43.825]    <block atomic="false" info="">
[13:19:43.825]      __var nReset = 0x80;
[13:19:43.825]        // -> [nReset <= 0x00000080]
[13:19:43.825]      __var canReadPins = 0;
[13:19:43.825]        // -> [canReadPins <= 0x00000000]
[13:19:43.825]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:19:43.825]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:19:43.825]        // -> [canReadPins <= 0x00000001]
[13:19:43.825]    </block>
[13:19:43.825]    <control if="" while="1" timeout="200" info="">
[13:19:43.825]      // while "1"  (timeout="200")
[13:19:43.825]      // while-condition  =>  TRUE
[13:19:43.825]      // while "1"  (timeout="200")
[13:19:43.825]      // while-condition  =>  TRUE
[13:19:43.825]      // while "1"  (timeout="200")
[13:19:43.825]      // while-condition  =>  TRUE
[13:19:43.825]      // while "1"  (timeout="200")
[13:19:43.825]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.828]      // while "1"  (timeout="200")
[13:19:43.828]      // while-condition  =>  TRUE
[13:19:43.832]      // while "1"  (timeout="200")
[13:19:43.832]      // while-condition  =>  TRUE
[13:19:43.832]      // while "1"  (timeout="200")
[13:19:43.832]      // while-condition  =>  TRUE
[13:19:43.832]      // while "1"  (timeout="200")
[13:19:43.832]      // while-condition  =>  TRUE
[13:19:43.832]      // while "1"  (timeout="200")
[13:19:43.832]      // while-condition  =>  TRUE
[13:19:43.832]      // while "1"  (timeout="200")
[13:19:43.833]      // while-condition  =>  TRUE
[13:19:43.833]      // while "1"  (timeout="200")
[13:19:43.833]      // while  =>  TIMEOUT
[13:19:43.833]      // end while "1"
[13:19:43.833]    </control>
[13:19:43.833]    <control if="canReadPins" while="" timeout="0" info="">
[13:19:43.833]      // if-block "canReadPins"
[13:19:43.833]        // =>  TRUE
[13:19:43.833]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:19:43.833]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:19:43.833]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:19:43.833]        // while-condition  =>  FALSE
[13:19:43.833]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:19:43.833]      </control>
[13:19:43.833]      // end if-block "canReadPins"
[13:19:43.833]    </control>
[13:19:43.833]    <control if="!canReadPins" while="" timeout="0" info="">
[13:19:43.833]      // if-block "!canReadPins"
[13:19:43.833]        // =>  FALSE
[13:19:43.833]      // skip if-block "!canReadPins"
[13:19:43.833]    </control>
[13:19:43.833]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:19:43.833]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:19:43.833]        // =>  TRUE
[13:19:43.833]      <block atomic="false" info="">
[13:19:43.833]        WriteAP(0x00, 0x190008);
[13:19:43.833]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:19:43.833]        WriteAP(0xF0, 0x01);
[13:19:43.843]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:19:43.843]      </block>
[13:19:43.843]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:19:43.843]    </control>
[13:19:43.843]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:19:43.843]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:19:43.843]        // =>  FALSE
[13:19:43.843]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:19:43.844]    </control>
[13:19:43.844]    <block atomic="false" info="">
[13:19:43.844]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:19:43.844]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:19:43.844]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:19:43.844]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:19:43.844]      __ap = 0; //lets make sure we reset the access point selection
[13:19:43.844]        // -> [__ap <= 0x00000000]
[13:19:43.844]    </block>
[13:19:43.844]  </sequence>
[13:19:43.844]  
[13:19:43.874]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:19:43.874]  
[13:19:43.874]  <debugvars>
[13:19:43.874]    // Pre-defined
[13:19:43.874]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:19:43.874]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:19:43.874]    __dp=0x00000000
[13:19:43.874]    __ap=0x00000000
[13:19:43.874]    __traceout=0x00000000      (Trace Disabled)
[13:19:43.874]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:19:43.874]    __FlashAddr=0x00000000
[13:19:43.874]    __FlashLen=0x00000000
[13:19:43.874]    __FlashArg=0x00000000
[13:19:43.874]    __FlashOp=0x00000000
[13:19:43.874]    __Result=0x00000000
[13:19:43.874]  </debugvars>
[13:19:43.874]  
[13:19:43.874]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:19:43.874]    <block atomic="false" info="">
[13:19:43.874]      __var deviceID = 0;
[13:19:43.874]        // -> [deviceID <= 0x00000000]
[13:19:43.874]      __var version = 0;
[13:19:43.874]        // -> [version <= 0x00000000]
[13:19:43.874]      __var partNum = 0;
[13:19:43.874]        // -> [partNum <= 0x00000000]
[13:19:43.882]      __var manuf = 0;
[13:19:43.882]        // -> [manuf <= 0x00000000]
[13:19:43.882]      __var isMSPM0G1X0X_G3X0X = 0;
[13:19:43.882]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:19:43.882]      __var isProduction = 0;
[13:19:43.882]        // -> [isProduction <= 0x00000000]
[13:19:43.883]      __var continueId = 0;
[13:19:43.883]        // -> [continueId <= 0x00000000]
[13:19:43.883]      deviceID =   Read32(0x41C40004);
[13:19:43.884]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:19:43.884]        // -> [deviceID <= 0x2BB8802F]
[13:19:43.884]      version = deviceID >> 28;
[13:19:43.884]        // -> [version <= 0x00000002]
[13:19:43.884]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:19:43.884]        // -> [partNum <= 0x0000BB88]
[13:19:43.884]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:19:43.884]        // -> [manuf <= 0x00000017]
[13:19:43.884]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:19:43.884]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:19:43.884]      isProduction = (version > 0);
[13:19:43.889]        // -> [isProduction <= 0x00000001]
[13:19:43.889]    </block>
[13:19:43.889]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:19:43.889]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:19:43.889]        // =>  FALSE
[13:19:43.889]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:19:43.889]    </control>
[13:19:43.889]    <control if="continueId == 4" while="" timeout="0" info="">
[13:19:43.889]      // if-block "continueId == 4"
[13:19:43.889]        // =>  FALSE
[13:19:43.891]      // skip if-block "continueId == 4"
[13:19:43.891]    </control>
[13:19:43.891]    <control if="!isProduction" while="" timeout="0" info="">
[13:19:43.891]      // if-block "!isProduction"
[13:19:43.891]        // =>  FALSE
[13:19:43.891]      // skip if-block "!isProduction"
[13:19:43.891]    </control>
[13:19:43.891]  </sequence>
[13:19:43.891]  
[13:23:50.731]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:23:50.731]  
[13:23:50.741]  <debugvars>
[13:23:50.741]    // Pre-defined
[13:23:50.741]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:23:50.741]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:23:50.741]    __dp=0x00000000
[13:23:50.741]    __ap=0x00000000
[13:23:50.741]    __traceout=0x00000000      (Trace Disabled)
[13:23:50.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:23:50.741]    __FlashAddr=0x00000000
[13:23:50.741]    __FlashLen=0x00000000
[13:23:50.741]    __FlashArg=0x00000000
[13:23:50.741]    __FlashOp=0x00000000
[13:23:50.741]    __Result=0x00000000
[13:23:50.741]  </debugvars>
[13:23:50.741]  
[13:23:50.741]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:23:50.741]    <block atomic="false" info="">
[13:23:50.741]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:23:50.741]        // -> [isSWJ <= 0x00000001]
[13:23:50.741]      __var hasDormant = __protocol & 0x00020000;
[13:23:50.741]        // -> [hasDormant <= 0x00000000]
[13:23:50.743]      __var protType   = __protocol & 0x0000FFFF;
[13:23:50.743]        // -> [protType <= 0x00000002]
[13:23:50.743]    </block>
[13:23:50.743]    <control if="protType == 1" while="" timeout="0" info="">
[13:23:50.743]      // if-block "protType == 1"
[13:23:50.743]        // =>  FALSE
[13:23:50.743]      // skip if-block "protType == 1"
[13:23:50.743]    </control>
[13:23:50.743]    <control if="protType == 2" while="" timeout="0" info="">
[13:23:50.743]      // if-block "protType == 2"
[13:23:50.743]        // =>  TRUE
[13:23:50.743]      <control if="isSWJ" while="" timeout="0" info="">
[13:23:50.743]        // if-block "isSWJ"
[13:23:50.743]          // =>  TRUE
[13:23:50.743]        <control if="hasDormant" while="" timeout="0" info="">
[13:23:50.743]          // if-block "hasDormant"
[13:23:50.743]            // =>  FALSE
[13:23:50.743]          // skip if-block "hasDormant"
[13:23:50.743]        </control>
[13:23:50.743]        <control if="!hasDormant" while="" timeout="0" info="">
[13:23:50.743]          // if-block "!hasDormant"
[13:23:50.743]            // =>  TRUE
[13:23:50.743]          <block atomic="false" info="">
[13:23:50.743]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:23:50.747]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:23:50.747]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:23:50.747]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:23:50.748]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:23:50.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:23:50.748]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:23:50.751]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:23:50.751]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:23:50.752]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:23:50.753]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:23:50.753]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:23:50.753]          </block>
[13:23:50.753]          // end if-block "!hasDormant"
[13:23:50.753]        </control>
[13:23:50.753]        // end if-block "isSWJ"
[13:23:50.753]      </control>
[13:23:50.753]      <control if="!isSWJ" while="" timeout="0" info="">
[13:23:50.753]        // if-block "!isSWJ"
[13:23:50.753]          // =>  FALSE
[13:23:50.753]        // skip if-block "!isSWJ"
[13:23:50.755]      </control>
[13:23:50.755]      <block atomic="false" info="">
[13:23:50.755]        ReadDP(0x0);
[13:23:50.766]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:23:50.766]      </block>
[13:23:50.766]      // end if-block "protType == 2"
[13:23:50.766]    </control>
[13:23:50.766]  </sequence>
[13:23:50.766]  
[13:23:50.772]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:23:50.772]  
[13:23:50.772]  <debugvars>
[13:23:50.772]    // Pre-defined
[13:23:50.772]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:23:50.772]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:23:50.772]    __dp=0x00000000
[13:23:50.772]    __ap=0x00000000
[13:23:50.772]    __traceout=0x00000000      (Trace Disabled)
[13:23:50.776]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:23:50.777]    __FlashAddr=0x00000000
[13:23:50.777]    __FlashLen=0x00000000
[13:23:50.777]    __FlashArg=0x00000000
[13:23:50.777]    __FlashOp=0x00000000
[13:23:50.777]    __Result=0x00000000
[13:23:50.777]  </debugvars>
[13:23:50.777]  
[13:23:50.777]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:23:50.777]    <block atomic="false" info="">
[13:23:50.777]      __var SW_DP_ABORT       = 0x0;
[13:23:50.777]        // -> [SW_DP_ABORT <= 0x00000000]
[13:23:50.777]      __var DP_CTRL_STAT      = 0x4;
[13:23:50.777]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:23:50.777]      __var DP_SELECT         = 0x8;
[13:23:50.777]        // -> [DP_SELECT <= 0x00000008]
[13:23:50.777]      __var powered_down      = 0;
[13:23:50.777]        // -> [powered_down <= 0x00000000]
[13:23:50.777]      WriteDP(DP_SELECT, 0x00000000);
[13:23:50.781]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:23:50.781]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:23:50.785]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:23:50.785]        // -> [powered_down <= 0x00000001]
[13:23:50.785]    </block>
[13:23:50.785]    <control if="powered_down" while="" timeout="0" info="">
[13:23:50.785]      // if-block "powered_down"
[13:23:50.785]        // =>  TRUE
[13:23:50.785]      <block atomic="false" info="">
[13:23:50.785]        Message(0, "Debug/System power-up request sent");
[13:23:50.786]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:23:50.788]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:23:50.788]      </block>
[13:23:50.788]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:23:50.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:23:50.788]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:23:50.788]        // while-condition  =>  FALSE
[13:23:50.788]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:23:50.788]      </control>
[13:23:50.788]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:23:50.788]        // if-block "(__protocol & 0xFFFF) == 1"
[13:23:50.788]          // =>  FALSE
[13:23:50.788]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:23:50.792]      </control>
[13:23:50.792]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:23:50.792]        // if-block "(__protocol & 0xFFFF) == 2"
[13:23:50.792]          // =>  TRUE
[13:23:50.792]        <block atomic="false" info="">
[13:23:50.792]          Message(0, "executing SWD power up");
[13:23:50.792]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:23:50.797]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:23:50.797]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:23:50.800]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:23:50.800]        </block>
[13:23:50.800]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:23:50.800]      </control>
[13:23:50.800]      // end if-block "powered_down"
[13:23:50.800]    </control>
[13:23:50.800]    <block atomic="false" info="">
[13:23:50.800]      __var DEBUG_PORT_VAL    = 0;
[13:23:50.800]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:23:50.800]      __var ACCESS_POINT_VAL  = 0;
[13:23:50.800]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:23:50.800]      __ap = 1; 
[13:23:50.800]        // -> [__ap <= 0x00000001]
[13:23:50.800]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:23:50.817]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:23:50.817]      __ap = 4;
[13:23:50.817]        // -> [__ap <= 0x00000004]
[13:23:50.820]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:23:50.824]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:23:50.824]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:23:50.824]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:23:50.827]    </block>
[13:23:50.828]    <block atomic="false" info="">
[13:23:50.828]      __var nReset = 0x80;
[13:23:50.828]        // -> [nReset <= 0x00000080]
[13:23:50.828]      __var canReadPins = 0;
[13:23:50.828]        // -> [canReadPins <= 0x00000000]
[13:23:50.828]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:23:50.839]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:23:50.839]        // -> [canReadPins <= 0x00000001]
[13:23:50.839]    </block>
[13:23:50.839]    <control if="" while="1" timeout="200" info="">
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.839]      // while "1"  (timeout="200")
[13:23:50.839]      // while-condition  =>  TRUE
[13:23:50.843]      // while "1"  (timeout="200")
[13:23:50.843]      // while-condition  =>  TRUE
[13:23:50.843]      // while "1"  (timeout="200")
[13:23:50.843]      // while-condition  =>  TRUE
[13:23:50.843]      // while "1"  (timeout="200")
[13:23:50.843]      // while-condition  =>  TRUE
[13:23:50.843]      // while "1"  (timeout="200")
[13:23:50.843]      // while-condition  =>  TRUE
[13:23:50.843]      // while "1"  (timeout="200")
[13:23:50.843]      // while-condition  =>  TRUE
[13:23:50.843]      // while "1"  (timeout="200")
[13:23:50.843]      // while-condition  =>  TRUE
[13:23:50.843]      // while "1"  (timeout="200")
[13:23:50.843]      // while-condition  =>  TRUE
[13:23:50.843]      // while "1"  (timeout="200")
[13:23:50.843]      // while-condition  =>  TRUE
[13:23:50.843]      // while "1"  (timeout="200")
[13:23:50.843]      // while-condition  =>  TRUE
[13:23:50.843]      // while "1"  (timeout="200")
[13:23:50.843]      // while-condition  =>  TRUE
[13:23:50.843]      // while "1"  (timeout="200")
[13:23:50.846]      // while-condition  =>  TRUE
[13:23:50.846]      // while "1"  (timeout="200")
[13:23:50.846]      // while-condition  =>  TRUE
[13:23:50.846]      // while "1"  (timeout="200")
[13:23:50.846]      // while-condition  =>  TRUE
[13:23:50.846]      // while "1"  (timeout="200")
[13:23:50.846]      // while-condition  =>  TRUE
[13:23:50.846]      // while "1"  (timeout="200")
[13:23:50.846]      // while-condition  =>  TRUE
[13:23:50.846]      // while "1"  (timeout="200")
[13:23:50.846]      // while-condition  =>  TRUE
[13:23:50.847]      // while "1"  (timeout="200")
[13:23:50.847]      // while-condition  =>  TRUE
[13:23:50.847]      // while "1"  (timeout="200")
[13:23:50.847]      // while-condition  =>  TRUE
[13:23:50.847]      // while "1"  (timeout="200")
[13:23:50.848]      // while-condition  =>  TRUE
[13:23:50.848]      // while "1"  (timeout="200")
[13:23:50.848]      // while  =>  TIMEOUT
[13:23:50.848]      // end while "1"
[13:23:50.848]    </control>
[13:23:50.848]    <control if="canReadPins" while="" timeout="0" info="">
[13:23:50.848]      // if-block "canReadPins"
[13:23:50.848]        // =>  TRUE
[13:23:50.848]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:23:50.848]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:23:50.849]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:23:50.849]        // while-condition  =>  FALSE
[13:23:50.849]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:23:50.849]      </control>
[13:23:50.849]      // end if-block "canReadPins"
[13:23:50.849]    </control>
[13:23:50.849]    <control if="!canReadPins" while="" timeout="0" info="">
[13:23:50.851]      // if-block "!canReadPins"
[13:23:50.851]        // =>  FALSE
[13:23:50.851]      // skip if-block "!canReadPins"
[13:23:50.851]    </control>
[13:23:50.851]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:23:50.851]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:23:50.851]        // =>  TRUE
[13:23:50.851]      <block atomic="false" info="">
[13:23:50.851]        WriteAP(0x00, 0x190008);
[13:23:50.851]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:23:50.851]        WriteAP(0xF0, 0x01);
[13:23:50.860]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:23:50.864]      </block>
[13:23:50.864]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:23:50.864]    </control>
[13:23:50.864]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:23:50.864]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:23:50.864]        // =>  FALSE
[13:23:50.864]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:23:50.864]    </control>
[13:23:50.864]    <block atomic="false" info="">
[13:23:50.864]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:23:50.867]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:23:50.867]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:23:50.867]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:23:50.869]      __ap = 0; //lets make sure we reset the access point selection
[13:23:50.869]        // -> [__ap <= 0x00000000]
[13:23:50.869]    </block>
[13:23:50.869]  </sequence>
[13:23:50.870]  
[13:23:50.889]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:23:50.889]  
[13:23:50.889]  <debugvars>
[13:23:50.892]    // Pre-defined
[13:23:50.892]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:23:50.892]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:23:50.892]    __dp=0x00000000
[13:23:50.892]    __ap=0x00000000
[13:23:50.892]    __traceout=0x00000000      (Trace Disabled)
[13:23:50.892]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:23:50.892]    __FlashAddr=0x00000000
[13:23:50.892]    __FlashLen=0x00000000
[13:23:50.892]    __FlashArg=0x00000000
[13:23:50.892]    __FlashOp=0x00000000
[13:23:50.892]    __Result=0x00000000
[13:23:50.892]  </debugvars>
[13:23:50.892]  
[13:23:50.892]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:23:50.892]    <block atomic="false" info="">
[13:23:50.892]      __var deviceID = 0;
[13:23:50.892]        // -> [deviceID <= 0x00000000]
[13:23:50.892]      __var version = 0;
[13:23:50.892]        // -> [version <= 0x00000000]
[13:23:50.892]      __var partNum = 0;
[13:23:50.892]        // -> [partNum <= 0x00000000]
[13:23:50.892]      __var manuf = 0;
[13:23:50.892]        // -> [manuf <= 0x00000000]
[13:23:50.892]      __var isMSPM0G1X0X_G3X0X = 0;
[13:23:50.892]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:23:50.892]      __var isProduction = 0;
[13:23:50.892]        // -> [isProduction <= 0x00000000]
[13:23:50.892]      __var continueId = 0;
[13:23:50.892]        // -> [continueId <= 0x00000000]
[13:23:50.892]      deviceID =   Read32(0x41C40004);
[13:23:50.900]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:23:50.900]        // -> [deviceID <= 0x2BB8802F]
[13:23:50.900]      version = deviceID >> 28;
[13:23:50.900]        // -> [version <= 0x00000002]
[13:23:50.900]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:23:50.900]        // -> [partNum <= 0x0000BB88]
[13:23:50.900]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:23:50.900]        // -> [manuf <= 0x00000017]
[13:23:50.900]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:23:50.900]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:23:50.900]      isProduction = (version > 0);
[13:23:50.900]        // -> [isProduction <= 0x00000001]
[13:23:50.900]    </block>
[13:23:50.900]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:23:50.900]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:23:50.900]        // =>  FALSE
[13:23:50.900]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:23:50.900]    </control>
[13:23:50.900]    <control if="continueId == 4" while="" timeout="0" info="">
[13:23:50.900]      // if-block "continueId == 4"
[13:23:50.900]        // =>  FALSE
[13:23:50.900]      // skip if-block "continueId == 4"
[13:23:50.904]    </control>
[13:23:50.904]    <control if="!isProduction" while="" timeout="0" info="">
[13:23:50.904]      // if-block "!isProduction"
[13:23:50.904]        // =>  FALSE
[13:23:50.904]      // skip if-block "!isProduction"
[13:23:50.904]    </control>
[13:23:50.904]  </sequence>
[13:23:50.904]  
[13:23:58.292]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:23:58.292]  
[13:23:58.301]  <debugvars>
[13:23:58.301]    // Pre-defined
[13:23:58.301]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:23:58.301]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:23:58.301]    __dp=0x00000000
[13:23:58.301]    __ap=0x00000000
[13:23:58.302]    __traceout=0x00000000      (Trace Disabled)
[13:23:58.302]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:23:58.302]    __FlashAddr=0x00000000
[13:23:58.302]    __FlashLen=0x00000000
[13:23:58.303]    __FlashArg=0x00000000
[13:23:58.303]    __FlashOp=0x00000000
[13:23:58.303]    __Result=0x00000000
[13:23:58.303]  </debugvars>
[13:23:58.303]  
[13:23:58.303]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:23:58.303]    <block atomic="false" info="">
[13:23:58.303]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:23:58.303]        // -> [isSWJ <= 0x00000001]
[13:23:58.303]      __var hasDormant = __protocol & 0x00020000;
[13:23:58.303]        // -> [hasDormant <= 0x00000000]
[13:23:58.303]      __var protType   = __protocol & 0x0000FFFF;
[13:23:58.303]        // -> [protType <= 0x00000002]
[13:23:58.303]    </block>
[13:23:58.303]    <control if="protType == 1" while="" timeout="0" info="">
[13:23:58.303]      // if-block "protType == 1"
[13:23:58.303]        // =>  FALSE
[13:23:58.303]      // skip if-block "protType == 1"
[13:23:58.303]    </control>
[13:23:58.303]    <control if="protType == 2" while="" timeout="0" info="">
[13:23:58.303]      // if-block "protType == 2"
[13:23:58.303]        // =>  TRUE
[13:23:58.303]      <control if="isSWJ" while="" timeout="0" info="">
[13:23:58.303]        // if-block "isSWJ"
[13:23:58.303]          // =>  TRUE
[13:23:58.303]        <control if="hasDormant" while="" timeout="0" info="">
[13:23:58.303]          // if-block "hasDormant"
[13:23:58.303]            // =>  FALSE
[13:23:58.303]          // skip if-block "hasDormant"
[13:23:58.303]        </control>
[13:23:58.303]        <control if="!hasDormant" while="" timeout="0" info="">
[13:23:58.303]          // if-block "!hasDormant"
[13:23:58.303]            // =>  TRUE
[13:23:58.303]          <block atomic="false" info="">
[13:23:58.306]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:23:58.307]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:23:58.307]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:23:58.310]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:23:58.310]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:23:58.322]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:23:58.322]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:23:58.322]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:23:58.322]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:23:58.327]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:23:58.327]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:23:58.331]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:23:58.331]          </block>
[13:23:58.331]          // end if-block "!hasDormant"
[13:23:58.331]        </control>
[13:23:58.331]        // end if-block "isSWJ"
[13:23:58.331]      </control>
[13:23:58.331]      <control if="!isSWJ" while="" timeout="0" info="">
[13:23:58.331]        // if-block "!isSWJ"
[13:23:58.331]          // =>  FALSE
[13:23:58.331]        // skip if-block "!isSWJ"
[13:23:58.331]      </control>
[13:23:58.331]      <block atomic="false" info="">
[13:23:58.331]        ReadDP(0x0);
[13:23:58.338]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:23:58.338]      </block>
[13:23:58.338]      // end if-block "protType == 2"
[13:23:58.338]    </control>
[13:23:58.338]  </sequence>
[13:23:58.338]  
[13:23:58.342]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:23:58.342]  
[13:23:58.342]  <debugvars>
[13:23:58.342]    // Pre-defined
[13:23:58.342]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:23:58.342]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:23:58.342]    __dp=0x00000000
[13:23:58.342]    __ap=0x00000000
[13:23:58.342]    __traceout=0x00000000      (Trace Disabled)
[13:23:58.346]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:23:58.346]    __FlashAddr=0x00000000
[13:23:58.346]    __FlashLen=0x00000000
[13:23:58.346]    __FlashArg=0x00000000
[13:23:58.346]    __FlashOp=0x00000000
[13:23:58.346]    __Result=0x00000000
[13:23:58.346]  </debugvars>
[13:23:58.346]  
[13:23:58.346]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:23:58.346]    <block atomic="false" info="">
[13:23:58.347]      __var SW_DP_ABORT       = 0x0;
[13:23:58.347]        // -> [SW_DP_ABORT <= 0x00000000]
[13:23:58.347]      __var DP_CTRL_STAT      = 0x4;
[13:23:58.347]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:23:58.347]      __var DP_SELECT         = 0x8;
[13:23:58.347]        // -> [DP_SELECT <= 0x00000008]
[13:23:58.347]      __var powered_down      = 0;
[13:23:58.347]        // -> [powered_down <= 0x00000000]
[13:23:58.347]      WriteDP(DP_SELECT, 0x00000000);
[13:23:58.350]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:23:58.350]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:23:58.354]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:23:58.354]        // -> [powered_down <= 0x00000001]
[13:23:58.354]    </block>
[13:23:58.354]    <control if="powered_down" while="" timeout="0" info="">
[13:23:58.354]      // if-block "powered_down"
[13:23:58.354]        // =>  TRUE
[13:23:58.354]      <block atomic="false" info="">
[13:23:58.354]        Message(0, "Debug/System power-up request sent");
[13:23:58.357]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:23:58.367]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:23:58.367]      </block>
[13:23:58.367]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:23:58.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:23:58.370]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:23:58.370]        // while-condition  =>  FALSE
[13:23:58.370]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:23:58.370]      </control>
[13:23:58.370]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:23:58.370]        // if-block "(__protocol & 0xFFFF) == 1"
[13:23:58.370]          // =>  FALSE
[13:23:58.370]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:23:58.370]      </control>
[13:23:58.370]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:23:58.370]        // if-block "(__protocol & 0xFFFF) == 2"
[13:23:58.370]          // =>  TRUE
[13:23:58.370]        <block atomic="false" info="">
[13:23:58.370]          Message(0, "executing SWD power up");
[13:23:58.374]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:23:58.376]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:23:58.376]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:23:58.379]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:23:58.379]        </block>
[13:23:58.379]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:23:58.379]      </control>
[13:23:58.379]      // end if-block "powered_down"
[13:23:58.379]    </control>
[13:23:58.379]    <block atomic="false" info="">
[13:23:58.379]      __var DEBUG_PORT_VAL    = 0;
[13:23:58.379]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:23:58.379]      __var ACCESS_POINT_VAL  = 0;
[13:23:58.379]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:23:58.379]      __ap = 1; 
[13:23:58.379]        // -> [__ap <= 0x00000001]
[13:23:58.379]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:23:58.383]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:23:58.383]      __ap = 4;
[13:23:58.383]        // -> [__ap <= 0x00000004]
[13:23:58.383]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:23:58.387]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:23:58.387]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:23:58.387]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:23:58.391]    </block>
[13:23:58.391]    <block atomic="false" info="">
[13:23:58.391]      __var nReset = 0x80;
[13:23:58.391]        // -> [nReset <= 0x00000080]
[13:23:58.391]      __var canReadPins = 0;
[13:23:58.391]        // -> [canReadPins <= 0x00000000]
[13:23:58.391]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:23:58.391]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:23:58.391]        // -> [canReadPins <= 0x00000001]
[13:23:58.391]    </block>
[13:23:58.391]    <control if="" while="1" timeout="200" info="">
[13:23:58.391]      // while "1"  (timeout="200")
[13:23:58.395]      // while-condition  =>  TRUE
[13:23:58.395]      // while "1"  (timeout="200")
[13:23:58.395]      // while  =>  TIMEOUT
[13:23:58.395]      // end while "1"
[13:23:58.395]    </control>
[13:23:58.395]    <control if="canReadPins" while="" timeout="0" info="">
[13:23:58.395]      // if-block "canReadPins"
[13:23:58.395]        // =>  TRUE
[13:23:58.395]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:23:58.395]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:23:58.397]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:23:58.397]        // while-condition  =>  FALSE
[13:23:58.397]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:23:58.397]      </control>
[13:23:58.397]      // end if-block "canReadPins"
[13:23:58.397]    </control>
[13:23:58.397]    <control if="!canReadPins" while="" timeout="0" info="">
[13:23:58.397]      // if-block "!canReadPins"
[13:23:58.398]        // =>  FALSE
[13:23:58.398]      // skip if-block "!canReadPins"
[13:23:58.398]    </control>
[13:23:58.398]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:23:58.398]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:23:58.398]        // =>  TRUE
[13:23:58.398]      <block atomic="false" info="">
[13:23:58.398]        WriteAP(0x00, 0x190008);
[13:23:58.403]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:23:58.403]        WriteAP(0xF0, 0x01);
[13:23:58.407]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:23:58.407]      </block>
[13:23:58.407]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:23:58.407]    </control>
[13:23:58.407]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:23:58.407]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:23:58.407]        // =>  FALSE
[13:23:58.410]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:23:58.410]    </control>
[13:23:58.410]    <block atomic="false" info="">
[13:23:58.410]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:23:58.414]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:23:58.414]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:23:58.414]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:23:58.416]      __ap = 0; //lets make sure we reset the access point selection
[13:23:58.416]        // -> [__ap <= 0x00000000]
[13:23:58.417]    </block>
[13:23:58.417]  </sequence>
[13:23:58.417]  
[13:23:58.454]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:23:58.454]  
[13:23:58.454]  <debugvars>
[13:23:58.454]    // Pre-defined
[13:23:58.454]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:23:58.454]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:23:58.454]    __dp=0x00000000
[13:23:58.454]    __ap=0x00000000
[13:23:58.454]    __traceout=0x00000000      (Trace Disabled)
[13:23:58.454]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:23:58.454]    __FlashAddr=0x00000000
[13:23:58.454]    __FlashLen=0x00000000
[13:23:58.454]    __FlashArg=0x00000000
[13:23:58.454]    __FlashOp=0x00000000
[13:23:58.454]    __Result=0x00000000
[13:23:58.454]  </debugvars>
[13:23:58.454]  
[13:23:58.454]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:23:58.456]    <block atomic="false" info="">
[13:23:58.456]      __var deviceID = 0;
[13:23:58.456]        // -> [deviceID <= 0x00000000]
[13:23:58.456]      __var version = 0;
[13:23:58.456]        // -> [version <= 0x00000000]
[13:23:58.456]      __var partNum = 0;
[13:23:58.456]        // -> [partNum <= 0x00000000]
[13:23:58.456]      __var manuf = 0;
[13:23:58.457]        // -> [manuf <= 0x00000000]
[13:23:58.457]      __var isMSPM0G1X0X_G3X0X = 0;
[13:23:58.457]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:23:58.457]      __var isProduction = 0;
[13:23:58.457]        // -> [isProduction <= 0x00000000]
[13:23:58.457]      __var continueId = 0;
[13:23:58.457]        // -> [continueId <= 0x00000000]
[13:23:58.457]      deviceID =   Read32(0x41C40004);
[13:23:58.471]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:23:58.471]        // -> [deviceID <= 0x2BB8802F]
[13:23:58.471]      version = deviceID >> 28;
[13:23:58.471]        // -> [version <= 0x00000002]
[13:23:58.471]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:23:58.471]        // -> [partNum <= 0x0000BB88]
[13:23:58.471]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:23:58.471]        // -> [manuf <= 0x00000017]
[13:23:58.471]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:23:58.471]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:23:58.471]      isProduction = (version > 0);
[13:23:58.471]        // -> [isProduction <= 0x00000001]
[13:23:58.471]    </block>
[13:23:58.471]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:23:58.471]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:23:58.471]        // =>  FALSE
[13:23:58.471]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:23:58.475]    </control>
[13:23:58.475]    <control if="continueId == 4" while="" timeout="0" info="">
[13:23:58.475]      // if-block "continueId == 4"
[13:23:58.475]        // =>  FALSE
[13:23:58.475]      // skip if-block "continueId == 4"
[13:23:58.475]    </control>
[13:23:58.475]    <control if="!isProduction" while="" timeout="0" info="">
[13:23:58.475]      // if-block "!isProduction"
[13:23:58.475]        // =>  FALSE
[13:23:58.476]      // skip if-block "!isProduction"
[13:23:58.476]    </control>
[13:23:58.476]  </sequence>
[13:23:58.476]  
[13:25:32.606]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:25:32.606]  
[13:25:32.614]  <debugvars>
[13:25:32.614]    // Pre-defined
[13:25:32.614]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:25:32.614]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:25:32.614]    __dp=0x00000000
[13:25:32.614]    __ap=0x00000000
[13:25:32.614]    __traceout=0x00000000      (Trace Disabled)
[13:25:32.614]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:25:32.614]    __FlashAddr=0x00000000
[13:25:32.614]    __FlashLen=0x00000000
[13:25:32.614]    __FlashArg=0x00000000
[13:25:32.614]    __FlashOp=0x00000000
[13:25:32.614]    __Result=0x00000000
[13:25:32.614]  </debugvars>
[13:25:32.614]  
[13:25:32.614]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:25:32.614]    <block atomic="false" info="">
[13:25:32.614]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:25:32.614]        // -> [isSWJ <= 0x00000001]
[13:25:32.614]      __var hasDormant = __protocol & 0x00020000;
[13:25:32.614]        // -> [hasDormant <= 0x00000000]
[13:25:32.614]      __var protType   = __protocol & 0x0000FFFF;
[13:25:32.616]        // -> [protType <= 0x00000002]
[13:25:32.616]    </block>
[13:25:32.616]    <control if="protType == 1" while="" timeout="0" info="">
[13:25:32.617]      // if-block "protType == 1"
[13:25:32.617]        // =>  FALSE
[13:25:32.617]      // skip if-block "protType == 1"
[13:25:32.617]    </control>
[13:25:32.617]    <control if="protType == 2" while="" timeout="0" info="">
[13:25:32.617]      // if-block "protType == 2"
[13:25:32.617]        // =>  TRUE
[13:25:32.617]      <control if="isSWJ" while="" timeout="0" info="">
[13:25:32.617]        // if-block "isSWJ"
[13:25:32.617]          // =>  TRUE
[13:25:32.617]        <control if="hasDormant" while="" timeout="0" info="">
[13:25:32.617]          // if-block "hasDormant"
[13:25:32.617]            // =>  FALSE
[13:25:32.619]          // skip if-block "hasDormant"
[13:25:32.619]        </control>
[13:25:32.619]        <control if="!hasDormant" while="" timeout="0" info="">
[13:25:32.619]          // if-block "!hasDormant"
[13:25:32.619]            // =>  TRUE
[13:25:32.619]          <block atomic="false" info="">
[13:25:32.619]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:25:32.619]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:25:32.619]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:25:32.623]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:25:32.623]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:25:32.623]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:25:32.623]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:25:32.626]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:25:32.626]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:25:32.628]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:25:32.628]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:25:32.630]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:25:32.630]          </block>
[13:25:32.630]          // end if-block "!hasDormant"
[13:25:32.630]        </control>
[13:25:32.630]        // end if-block "isSWJ"
[13:25:32.630]      </control>
[13:25:32.630]      <control if="!isSWJ" while="" timeout="0" info="">
[13:25:32.630]        // if-block "!isSWJ"
[13:25:32.630]          // =>  FALSE
[13:25:32.630]        // skip if-block "!isSWJ"
[13:25:32.630]      </control>
[13:25:32.630]      <block atomic="false" info="">
[13:25:32.630]        ReadDP(0x0);
[13:25:32.633]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:25:32.633]      </block>
[13:25:32.634]      // end if-block "protType == 2"
[13:25:32.634]    </control>
[13:25:32.634]  </sequence>
[13:25:32.634]  
[13:25:32.639]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:25:32.639]  
[13:25:32.639]  <debugvars>
[13:25:32.639]    // Pre-defined
[13:25:32.639]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:25:32.639]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:25:32.639]    __dp=0x00000000
[13:25:32.639]    __ap=0x00000000
[13:25:32.639]    __traceout=0x00000000      (Trace Disabled)
[13:25:32.639]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:25:32.639]    __FlashAddr=0x00000000
[13:25:32.639]    __FlashLen=0x00000000
[13:25:32.639]    __FlashArg=0x00000000
[13:25:32.639]    __FlashOp=0x00000000
[13:25:32.639]    __Result=0x00000000
[13:25:32.639]  </debugvars>
[13:25:32.639]  
[13:25:32.639]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:25:32.639]    <block atomic="false" info="">
[13:25:32.639]      __var SW_DP_ABORT       = 0x0;
[13:25:32.639]        // -> [SW_DP_ABORT <= 0x00000000]
[13:25:32.639]      __var DP_CTRL_STAT      = 0x4;
[13:25:32.639]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:25:32.639]      __var DP_SELECT         = 0x8;
[13:25:32.639]        // -> [DP_SELECT <= 0x00000008]
[13:25:32.643]      __var powered_down      = 0;
[13:25:32.643]        // -> [powered_down <= 0x00000000]
[13:25:32.643]      WriteDP(DP_SELECT, 0x00000000);
[13:25:32.644]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:25:32.644]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:25:32.647]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:25:32.647]        // -> [powered_down <= 0x00000001]
[13:25:32.647]    </block>
[13:25:32.647]    <control if="powered_down" while="" timeout="0" info="">
[13:25:32.647]      // if-block "powered_down"
[13:25:32.648]        // =>  TRUE
[13:25:32.648]      <block atomic="false" info="">
[13:25:32.648]        Message(0, "Debug/System power-up request sent");
[13:25:32.649]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:25:32.651]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:25:32.651]      </block>
[13:25:32.651]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:25:32.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:25:32.653]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:25:32.653]        // while-condition  =>  FALSE
[13:25:32.653]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:25:32.653]      </control>
[13:25:32.653]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:25:32.653]        // if-block "(__protocol & 0xFFFF) == 1"
[13:25:32.653]          // =>  FALSE
[13:25:32.653]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:25:32.653]      </control>
[13:25:32.653]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:25:32.653]        // if-block "(__protocol & 0xFFFF) == 2"
[13:25:32.653]          // =>  TRUE
[13:25:32.653]        <block atomic="false" info="">
[13:25:32.655]          Message(0, "executing SWD power up");
[13:25:32.657]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:25:32.659]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:25:32.659]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:25:32.665]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:25:32.665]        </block>
[13:25:32.665]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:25:32.665]      </control>
[13:25:32.665]      // end if-block "powered_down"
[13:25:32.665]    </control>
[13:25:32.665]    <block atomic="false" info="">
[13:25:32.665]      __var DEBUG_PORT_VAL    = 0;
[13:25:32.665]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:25:32.665]      __var ACCESS_POINT_VAL  = 0;
[13:25:32.665]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:25:32.665]      __ap = 1; 
[13:25:32.665]        // -> [__ap <= 0x00000001]
[13:25:32.665]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:25:32.667]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:25:32.667]      __ap = 4;
[13:25:32.669]        // -> [__ap <= 0x00000004]
[13:25:32.669]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:25:32.680]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:25:32.680]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:25:32.680]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:25:32.682]    </block>
[13:25:32.682]    <block atomic="false" info="">
[13:25:32.682]      __var nReset = 0x80;
[13:25:32.682]        // -> [nReset <= 0x00000080]
[13:25:32.682]      __var canReadPins = 0;
[13:25:32.682]        // -> [canReadPins <= 0x00000000]
[13:25:32.682]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:25:32.686]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:25:32.686]        // -> [canReadPins <= 0x00000001]
[13:25:32.686]    </block>
[13:25:32.687]    <control if="" while="1" timeout="200" info="">
[13:25:32.687]      // while "1"  (timeout="200")
[13:25:32.687]      // while-condition  =>  TRUE
[13:25:32.687]      // while "1"  (timeout="200")
[13:25:32.687]      // while-condition  =>  TRUE
[13:25:32.687]      // while "1"  (timeout="200")
[13:25:32.687]      // while-condition  =>  TRUE
[13:25:32.687]      // while "1"  (timeout="200")
[13:25:32.687]      // while-condition  =>  TRUE
[13:25:32.687]      // while "1"  (timeout="200")
[13:25:32.688]      // while-condition  =>  TRUE
[13:25:32.688]      // while "1"  (timeout="200")
[13:25:32.688]      // while-condition  =>  TRUE
[13:25:32.688]      // while "1"  (timeout="200")
[13:25:32.688]      // while-condition  =>  TRUE
[13:25:32.688]      // while "1"  (timeout="200")
[13:25:32.688]      // while-condition  =>  TRUE
[13:25:32.688]      // while "1"  (timeout="200")
[13:25:32.688]      // while-condition  =>  TRUE
[13:25:32.688]      // while "1"  (timeout="200")
[13:25:32.688]      // while-condition  =>  TRUE
[13:25:32.688]      // while "1"  (timeout="200")
[13:25:32.688]      // while-condition  =>  TRUE
[13:25:32.690]      // while "1"  (timeout="200")
[13:25:32.690]      // while-condition  =>  TRUE
[13:25:32.690]      // while "1"  (timeout="200")
[13:25:32.690]      // while-condition  =>  TRUE
[13:25:32.690]      // while "1"  (timeout="200")
[13:25:32.690]      // while-condition  =>  TRUE
[13:25:32.690]      // while "1"  (timeout="200")
[13:25:32.690]      // while-condition  =>  TRUE
[13:25:32.690]      // while "1"  (timeout="200")
[13:25:32.690]      // while-condition  =>  TRUE
[13:25:32.690]      // while "1"  (timeout="200")
[13:25:32.690]      // while-condition  =>  TRUE
[13:25:32.690]      // while "1"  (timeout="200")
[13:25:32.690]      // while-condition  =>  TRUE
[13:25:32.690]      // while "1"  (timeout="200")
[13:25:32.690]      // while-condition  =>  TRUE
[13:25:32.690]      // while "1"  (timeout="200")
[13:25:32.690]      // while-condition  =>  TRUE
[13:25:32.690]      // while "1"  (timeout="200")
[13:25:32.692]      // while-condition  =>  TRUE
[13:25:32.692]      // while "1"  (timeout="200")
[13:25:32.692]      // while  =>  TIMEOUT
[13:25:32.692]      // end while "1"
[13:25:32.692]    </control>
[13:25:32.692]    <control if="canReadPins" while="" timeout="0" info="">
[13:25:32.692]      // if-block "canReadPins"
[13:25:32.692]        // =>  TRUE
[13:25:32.692]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:25:32.692]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:25:32.694]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:25:32.694]        // while-condition  =>  FALSE
[13:25:32.694]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:25:32.694]      </control>
[13:25:32.694]      // end if-block "canReadPins"
[13:25:32.694]    </control>
[13:25:32.694]    <control if="!canReadPins" while="" timeout="0" info="">
[13:25:32.694]      // if-block "!canReadPins"
[13:25:32.694]        // =>  FALSE
[13:25:32.694]      // skip if-block "!canReadPins"
[13:25:32.694]    </control>
[13:25:32.694]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:25:32.694]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:25:32.694]        // =>  TRUE
[13:25:32.696]      <block atomic="false" info="">
[13:25:32.696]        WriteAP(0x00, 0x190008);
[13:25:32.697]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:25:32.697]        WriteAP(0xF0, 0x01);
[13:25:32.700]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:25:32.703]      </block>
[13:25:32.703]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:25:32.703]    </control>
[13:25:32.703]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:25:32.703]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:25:32.703]        // =>  FALSE
[13:25:32.703]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:25:32.704]    </control>
[13:25:32.704]    <block atomic="false" info="">
[13:25:32.704]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:25:32.709]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:25:32.709]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:25:32.709]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:25:32.713]      __ap = 0; //lets make sure we reset the access point selection
[13:25:32.714]        // -> [__ap <= 0x00000000]
[13:25:32.715]    </block>
[13:25:32.715]  </sequence>
[13:25:32.715]  
[13:25:32.747]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:25:32.747]  
[13:25:32.747]  <debugvars>
[13:25:32.747]    // Pre-defined
[13:25:32.747]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:25:32.747]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:25:32.750]    __dp=0x00000000
[13:25:32.750]    __ap=0x00000000
[13:25:32.750]    __traceout=0x00000000      (Trace Disabled)
[13:25:32.750]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:25:32.750]    __FlashAddr=0x00000000
[13:25:32.750]    __FlashLen=0x00000000
[13:25:32.750]    __FlashArg=0x00000000
[13:25:32.750]    __FlashOp=0x00000000
[13:25:32.750]    __Result=0x00000000
[13:25:32.750]  </debugvars>
[13:25:32.750]  
[13:25:32.750]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:25:32.750]    <block atomic="false" info="">
[13:25:32.750]      __var deviceID = 0;
[13:25:32.750]        // -> [deviceID <= 0x00000000]
[13:25:32.750]      __var version = 0;
[13:25:32.750]        // -> [version <= 0x00000000]
[13:25:32.750]      __var partNum = 0;
[13:25:32.750]        // -> [partNum <= 0x00000000]
[13:25:32.750]      __var manuf = 0;
[13:25:32.750]        // -> [manuf <= 0x00000000]
[13:25:32.750]      __var isMSPM0G1X0X_G3X0X = 0;
[13:25:32.750]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:25:32.750]      __var isProduction = 0;
[13:25:32.750]        // -> [isProduction <= 0x00000000]
[13:25:32.750]      __var continueId = 0;
[13:25:32.750]        // -> [continueId <= 0x00000000]
[13:25:32.750]      deviceID =   Read32(0x41C40004);
[13:25:32.758]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:25:32.758]        // -> [deviceID <= 0x2BB8802F]
[13:25:32.758]      version = deviceID >> 28;
[13:25:32.762]        // -> [version <= 0x00000002]
[13:25:32.762]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:25:32.763]        // -> [partNum <= 0x0000BB88]
[13:25:32.763]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:25:32.763]        // -> [manuf <= 0x00000017]
[13:25:32.763]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:25:32.763]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:25:32.763]      isProduction = (version > 0);
[13:25:32.763]        // -> [isProduction <= 0x00000001]
[13:25:32.763]    </block>
[13:25:32.763]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:25:32.763]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:25:32.763]        // =>  FALSE
[13:25:32.763]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:25:32.763]    </control>
[13:25:32.763]    <control if="continueId == 4" while="" timeout="0" info="">
[13:25:32.763]      // if-block "continueId == 4"
[13:25:32.763]        // =>  FALSE
[13:25:32.763]      // skip if-block "continueId == 4"
[13:25:32.765]    </control>
[13:25:32.765]    <control if="!isProduction" while="" timeout="0" info="">
[13:25:32.765]      // if-block "!isProduction"
[13:25:32.765]        // =>  FALSE
[13:25:32.765]      // skip if-block "!isProduction"
[13:25:32.765]    </control>
[13:25:32.765]  </sequence>
[13:25:32.765]  
[13:25:39.722]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:25:39.722]  
[13:25:39.731]  <debugvars>
[13:25:39.731]    // Pre-defined
[13:25:39.731]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:25:39.731]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:25:39.731]    __dp=0x00000000
[13:25:39.731]    __ap=0x00000000
[13:25:39.731]    __traceout=0x00000000      (Trace Disabled)
[13:25:39.731]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:25:39.731]    __FlashAddr=0x00000000
[13:25:39.733]    __FlashLen=0x00000000
[13:25:39.733]    __FlashArg=0x00000000
[13:25:39.733]    __FlashOp=0x00000000
[13:25:39.733]    __Result=0x00000000
[13:25:39.733]  </debugvars>
[13:25:39.733]  
[13:25:39.733]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:25:39.733]    <block atomic="false" info="">
[13:25:39.733]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:25:39.733]        // -> [isSWJ <= 0x00000001]
[13:25:39.733]      __var hasDormant = __protocol & 0x00020000;
[13:25:39.733]        // -> [hasDormant <= 0x00000000]
[13:25:39.733]      __var protType   = __protocol & 0x0000FFFF;
[13:25:39.733]        // -> [protType <= 0x00000002]
[13:25:39.733]    </block>
[13:25:39.733]    <control if="protType == 1" while="" timeout="0" info="">
[13:25:39.733]      // if-block "protType == 1"
[13:25:39.733]        // =>  FALSE
[13:25:39.733]      // skip if-block "protType == 1"
[13:25:39.735]    </control>
[13:25:39.735]    <control if="protType == 2" while="" timeout="0" info="">
[13:25:39.735]      // if-block "protType == 2"
[13:25:39.735]        // =>  TRUE
[13:25:39.735]      <control if="isSWJ" while="" timeout="0" info="">
[13:25:39.735]        // if-block "isSWJ"
[13:25:39.735]          // =>  TRUE
[13:25:39.735]        <control if="hasDormant" while="" timeout="0" info="">
[13:25:39.735]          // if-block "hasDormant"
[13:25:39.735]            // =>  FALSE
[13:25:39.735]          // skip if-block "hasDormant"
[13:25:39.735]        </control>
[13:25:39.735]        <control if="!hasDormant" while="" timeout="0" info="">
[13:25:39.735]          // if-block "!hasDormant"
[13:25:39.735]            // =>  TRUE
[13:25:39.735]          <block atomic="false" info="">
[13:25:39.735]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:25:39.738]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:25:39.738]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:25:39.738]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:25:39.738]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:25:39.739]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:25:39.739]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:25:39.744]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:25:39.744]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:25:39.746]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:25:39.746]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:25:39.748]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:25:39.748]          </block>
[13:25:39.748]          // end if-block "!hasDormant"
[13:25:39.748]        </control>
[13:25:39.748]        // end if-block "isSWJ"
[13:25:39.748]      </control>
[13:25:39.748]      <control if="!isSWJ" while="" timeout="0" info="">
[13:25:39.750]        // if-block "!isSWJ"
[13:25:39.750]          // =>  FALSE
[13:25:39.750]        // skip if-block "!isSWJ"
[13:25:39.750]      </control>
[13:25:39.750]      <block atomic="false" info="">
[13:25:39.750]        ReadDP(0x0);
[13:25:39.753]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:25:39.753]      </block>
[13:25:39.753]      // end if-block "protType == 2"
[13:25:39.753]    </control>
[13:25:39.753]  </sequence>
[13:25:39.753]  
[13:25:39.755]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:25:39.755]  
[13:25:39.755]  <debugvars>
[13:25:39.755]    // Pre-defined
[13:25:39.756]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:25:39.756]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:25:39.756]    __dp=0x00000000
[13:25:39.756]    __ap=0x00000000
[13:25:39.756]    __traceout=0x00000000      (Trace Disabled)
[13:25:39.756]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:25:39.756]    __FlashAddr=0x00000000
[13:25:39.756]    __FlashLen=0x00000000
[13:25:39.757]    __FlashArg=0x00000000
[13:25:39.757]    __FlashOp=0x00000000
[13:25:39.757]    __Result=0x00000000
[13:25:39.757]  </debugvars>
[13:25:39.757]  
[13:25:39.757]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:25:39.757]    <block atomic="false" info="">
[13:25:39.757]      __var SW_DP_ABORT       = 0x0;
[13:25:39.757]        // -> [SW_DP_ABORT <= 0x00000000]
[13:25:39.758]      __var DP_CTRL_STAT      = 0x4;
[13:25:39.758]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:25:39.758]      __var DP_SELECT         = 0x8;
[13:25:39.758]        // -> [DP_SELECT <= 0x00000008]
[13:25:39.758]      __var powered_down      = 0;
[13:25:39.758]        // -> [powered_down <= 0x00000000]
[13:25:39.758]      WriteDP(DP_SELECT, 0x00000000);
[13:25:39.769]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:25:39.769]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:25:39.775]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:25:39.775]        // -> [powered_down <= 0x00000001]
[13:25:39.775]    </block>
[13:25:39.775]    <control if="powered_down" while="" timeout="0" info="">
[13:25:39.776]      // if-block "powered_down"
[13:25:39.776]        // =>  TRUE
[13:25:39.776]      <block atomic="false" info="">
[13:25:39.776]        Message(0, "Debug/System power-up request sent");
[13:25:39.777]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:25:39.778]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:25:39.782]      </block>
[13:25:39.782]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:25:39.782]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:25:39.782]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:25:39.782]        // while-condition  =>  FALSE
[13:25:39.782]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:25:39.782]      </control>
[13:25:39.782]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:25:39.782]        // if-block "(__protocol & 0xFFFF) == 1"
[13:25:39.782]          // =>  FALSE
[13:25:39.782]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:25:39.782]      </control>
[13:25:39.786]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:25:39.786]        // if-block "(__protocol & 0xFFFF) == 2"
[13:25:39.786]          // =>  TRUE
[13:25:39.786]        <block atomic="false" info="">
[13:25:39.786]          Message(0, "executing SWD power up");
[13:25:39.788]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:25:39.790]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:25:39.790]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:25:39.794]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:25:39.794]        </block>
[13:25:39.794]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:25:39.794]      </control>
[13:25:39.794]      // end if-block "powered_down"
[13:25:39.794]    </control>
[13:25:39.794]    <block atomic="false" info="">
[13:25:39.796]      __var DEBUG_PORT_VAL    = 0;
[13:25:39.796]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:25:39.796]      __var ACCESS_POINT_VAL  = 0;
[13:25:39.796]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:25:39.796]      __ap = 1; 
[13:25:39.796]        // -> [__ap <= 0x00000001]
[13:25:39.796]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:25:39.799]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:25:39.799]      __ap = 4;
[13:25:39.799]        // -> [__ap <= 0x00000004]
[13:25:39.799]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:25:39.807]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:25:39.807]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:25:39.807]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:25:39.812]    </block>
[13:25:39.812]    <block atomic="false" info="">
[13:25:39.812]      __var nReset = 0x80;
[13:25:39.812]        // -> [nReset <= 0x00000080]
[13:25:39.812]      __var canReadPins = 0;
[13:25:39.812]        // -> [canReadPins <= 0x00000000]
[13:25:39.812]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:25:39.816]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:25:39.816]        // -> [canReadPins <= 0x00000001]
[13:25:39.817]    </block>
[13:25:39.817]    <control if="" while="1" timeout="200" info="">
[13:25:39.817]      // while "1"  (timeout="200")
[13:25:39.817]      // while-condition  =>  TRUE
[13:25:39.817]      // while "1"  (timeout="200")
[13:25:39.817]      // while-condition  =>  TRUE
[13:25:39.817]      // while "1"  (timeout="200")
[13:25:39.817]      // while-condition  =>  TRUE
[13:25:39.817]      // while "1"  (timeout="200")
[13:25:39.817]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.818]      // while-condition  =>  TRUE
[13:25:39.818]      // while "1"  (timeout="200")
[13:25:39.822]      // while-condition  =>  TRUE
[13:25:39.822]      // while "1"  (timeout="200")
[13:25:39.822]      // while-condition  =>  TRUE
[13:25:39.822]      // while "1"  (timeout="200")
[13:25:39.822]      // while-condition  =>  TRUE
[13:25:39.822]      // while "1"  (timeout="200")
[13:25:39.822]      // while-condition  =>  TRUE
[13:25:39.822]      // while "1"  (timeout="200")
[13:25:39.822]      // while-condition  =>  TRUE
[13:25:39.822]      // while "1"  (timeout="200")
[13:25:39.822]      // while-condition  =>  TRUE
[13:25:39.822]      // while "1"  (timeout="200")
[13:25:39.822]      // while-condition  =>  TRUE
[13:25:39.822]      // while "1"  (timeout="200")
[13:25:39.822]      // while-condition  =>  TRUE
[13:25:39.822]      // while "1"  (timeout="200")
[13:25:39.822]      // while-condition  =>  TRUE
[13:25:39.822]      // while "1"  (timeout="200")
[13:25:39.824]      // while-condition  =>  TRUE
[13:25:39.824]      // while "1"  (timeout="200")
[13:25:39.824]      // while-condition  =>  TRUE
[13:25:39.824]      // while "1"  (timeout="200")
[13:25:39.824]      // while-condition  =>  TRUE
[13:25:39.824]      // while "1"  (timeout="200")
[13:25:39.824]      // while-condition  =>  TRUE
[13:25:39.824]      // while "1"  (timeout="200")
[13:25:39.824]      // while-condition  =>  TRUE
[13:25:39.824]      // while "1"  (timeout="200")
[13:25:39.824]      // while-condition  =>  TRUE
[13:25:39.824]      // while "1"  (timeout="200")
[13:25:39.824]      // while-condition  =>  TRUE
[13:25:39.824]      // while "1"  (timeout="200")
[13:25:39.824]      // while-condition  =>  TRUE
[13:25:39.824]      // while "1"  (timeout="200")
[13:25:39.824]      // while-condition  =>  TRUE
[13:25:39.824]      // while "1"  (timeout="200")
[13:25:39.824]      // while-condition  =>  TRUE
[13:25:39.824]      // while "1"  (timeout="200")
[13:25:39.824]      // while-condition  =>  TRUE
[13:25:39.824]      // while "1"  (timeout="200")
[13:25:39.826]      // while-condition  =>  TRUE
[13:25:39.826]      // while "1"  (timeout="200")
[13:25:39.826]      // while-condition  =>  TRUE
[13:25:39.826]      // while "1"  (timeout="200")
[13:25:39.826]      // while-condition  =>  TRUE
[13:25:39.826]      // while "1"  (timeout="200")
[13:25:39.826]      // while-condition  =>  TRUE
[13:25:39.826]      // while "1"  (timeout="200")
[13:25:39.826]      // while-condition  =>  TRUE
[13:25:39.826]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.827]      // while-condition  =>  TRUE
[13:25:39.827]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.830]      // while-condition  =>  TRUE
[13:25:39.830]      // while "1"  (timeout="200")
[13:25:39.834]      // while-condition  =>  TRUE
[13:25:39.834]      // while "1"  (timeout="200")
[13:25:39.834]      // while  =>  TIMEOUT
[13:25:39.834]      // end while "1"
[13:25:39.834]    </control>
[13:25:39.834]    <control if="canReadPins" while="" timeout="0" info="">
[13:25:39.834]      // if-block "canReadPins"
[13:25:39.834]        // =>  TRUE
[13:25:39.834]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:25:39.834]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:25:39.838]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:25:39.838]        // while-condition  =>  FALSE
[13:25:39.838]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:25:39.838]      </control>
[13:25:39.838]      // end if-block "canReadPins"
[13:25:39.838]    </control>
[13:25:39.838]    <control if="!canReadPins" while="" timeout="0" info="">
[13:25:39.838]      // if-block "!canReadPins"
[13:25:39.838]        // =>  FALSE
[13:25:39.838]      // skip if-block "!canReadPins"
[13:25:39.838]    </control>
[13:25:39.838]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:25:39.838]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:25:39.838]        // =>  TRUE
[13:25:39.838]      <block atomic="false" info="">
[13:25:39.838]        WriteAP(0x00, 0x190008);
[13:25:39.842]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:25:39.842]        WriteAP(0xF0, 0x01);
[13:25:39.842]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:25:39.842]      </block>
[13:25:39.846]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:25:39.846]    </control>
[13:25:39.847]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:25:39.847]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:25:39.847]        // =>  FALSE
[13:25:39.847]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:25:39.847]    </control>
[13:25:39.847]    <block atomic="false" info="">
[13:25:39.848]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:25:39.856]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:25:39.856]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:25:39.856]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:25:39.857]      __ap = 0; //lets make sure we reset the access point selection
[13:25:39.857]        // -> [__ap <= 0x00000000]
[13:25:39.857]    </block>
[13:25:39.857]  </sequence>
[13:25:39.857]  
[13:25:39.888]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:25:39.888]  
[13:25:39.888]  <debugvars>
[13:25:39.888]    // Pre-defined
[13:25:39.888]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:25:39.888]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:25:39.888]    __dp=0x00000000
[13:25:39.888]    __ap=0x00000000
[13:25:39.888]    __traceout=0x00000000      (Trace Disabled)
[13:25:39.888]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:25:39.888]    __FlashAddr=0x00000000
[13:25:39.888]    __FlashLen=0x00000000
[13:25:39.888]    __FlashArg=0x00000000
[13:25:39.888]    __FlashOp=0x00000000
[13:25:39.888]    __Result=0x00000000
[13:25:39.891]  </debugvars>
[13:25:39.891]  
[13:25:39.891]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:25:39.891]    <block atomic="false" info="">
[13:25:39.891]      __var deviceID = 0;
[13:25:39.891]        // -> [deviceID <= 0x00000000]
[13:25:39.892]      __var version = 0;
[13:25:39.892]        // -> [version <= 0x00000000]
[13:25:39.892]      __var partNum = 0;
[13:25:39.892]        // -> [partNum <= 0x00000000]
[13:25:39.892]      __var manuf = 0;
[13:25:39.892]        // -> [manuf <= 0x00000000]
[13:25:39.892]      __var isMSPM0G1X0X_G3X0X = 0;
[13:25:39.892]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:25:39.892]      __var isProduction = 0;
[13:25:39.892]        // -> [isProduction <= 0x00000000]
[13:25:39.892]      __var continueId = 0;
[13:25:39.892]        // -> [continueId <= 0x00000000]
[13:25:39.892]      deviceID =   Read32(0x41C40004);
[13:25:39.898]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:25:39.898]        // -> [deviceID <= 0x2BB8802F]
[13:25:39.898]      version = deviceID >> 28;
[13:25:39.898]        // -> [version <= 0x00000002]
[13:25:39.898]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:25:39.898]        // -> [partNum <= 0x0000BB88]
[13:25:39.898]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:25:39.898]        // -> [manuf <= 0x00000017]
[13:25:39.898]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:25:39.898]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:25:39.898]      isProduction = (version > 0);
[13:25:39.898]        // -> [isProduction <= 0x00000001]
[13:25:39.900]    </block>
[13:25:39.900]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:25:39.900]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:25:39.900]        // =>  FALSE
[13:25:39.900]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:25:39.900]    </control>
[13:25:39.901]    <control if="continueId == 4" while="" timeout="0" info="">
[13:25:39.901]      // if-block "continueId == 4"
[13:25:39.901]        // =>  FALSE
[13:25:39.901]      // skip if-block "continueId == 4"
[13:25:39.901]    </control>
[13:25:39.901]    <control if="!isProduction" while="" timeout="0" info="">
[13:25:39.901]      // if-block "!isProduction"
[13:25:39.901]        // =>  FALSE
[13:25:39.901]      // skip if-block "!isProduction"
[13:25:39.901]    </control>
[13:25:39.901]  </sequence>
[13:25:39.901]  
[13:26:12.907]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:26:12.907]  
[13:26:12.915]  <debugvars>
[13:26:12.915]    // Pre-defined
[13:26:12.915]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:26:12.915]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:26:12.915]    __dp=0x00000000
[13:26:12.915]    __ap=0x00000000
[13:26:12.915]    __traceout=0x00000000      (Trace Disabled)
[13:26:12.915]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:26:12.915]    __FlashAddr=0x00000000
[13:26:12.915]    __FlashLen=0x00000000
[13:26:12.916]    __FlashArg=0x00000000
[13:26:12.916]    __FlashOp=0x00000000
[13:26:12.916]    __Result=0x00000000
[13:26:12.916]  </debugvars>
[13:26:12.916]  
[13:26:12.916]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:26:12.916]    <block atomic="false" info="">
[13:26:12.916]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:26:12.916]        // -> [isSWJ <= 0x00000001]
[13:26:12.916]      __var hasDormant = __protocol & 0x00020000;
[13:26:12.916]        // -> [hasDormant <= 0x00000000]
[13:26:12.916]      __var protType   = __protocol & 0x0000FFFF;
[13:26:12.917]        // -> [protType <= 0x00000002]
[13:26:12.917]    </block>
[13:26:12.917]    <control if="protType == 1" while="" timeout="0" info="">
[13:26:12.917]      // if-block "protType == 1"
[13:26:12.917]        // =>  FALSE
[13:26:12.917]      // skip if-block "protType == 1"
[13:26:12.917]    </control>
[13:26:12.917]    <control if="protType == 2" while="" timeout="0" info="">
[13:26:12.917]      // if-block "protType == 2"
[13:26:12.917]        // =>  TRUE
[13:26:12.917]      <control if="isSWJ" while="" timeout="0" info="">
[13:26:12.918]        // if-block "isSWJ"
[13:26:12.918]          // =>  TRUE
[13:26:12.918]        <control if="hasDormant" while="" timeout="0" info="">
[13:26:12.918]          // if-block "hasDormant"
[13:26:12.918]            // =>  FALSE
[13:26:12.918]          // skip if-block "hasDormant"
[13:26:12.918]        </control>
[13:26:12.918]        <control if="!hasDormant" while="" timeout="0" info="">
[13:26:12.918]          // if-block "!hasDormant"
[13:26:12.918]            // =>  TRUE
[13:26:12.918]          <block atomic="false" info="">
[13:26:12.918]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:26:12.918]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:26:12.918]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:26:12.922]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:26:12.922]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:26:12.922]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:26:12.922]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:26:12.927]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:26:12.927]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:26:12.928]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:26:12.928]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:26:12.930]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:26:12.930]          </block>
[13:26:12.930]          // end if-block "!hasDormant"
[13:26:12.930]        </control>
[13:26:12.930]        // end if-block "isSWJ"
[13:26:12.930]      </control>
[13:26:12.930]      <control if="!isSWJ" while="" timeout="0" info="">
[13:26:12.930]        // if-block "!isSWJ"
[13:26:12.930]          // =>  FALSE
[13:26:12.930]        // skip if-block "!isSWJ"
[13:26:12.930]      </control>
[13:26:12.930]      <block atomic="false" info="">
[13:26:12.930]        ReadDP(0x0);
[13:26:12.930]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:26:12.930]      </block>
[13:26:12.930]      // end if-block "protType == 2"
[13:26:12.930]    </control>
[13:26:12.930]  </sequence>
[13:26:12.934]  
[13:26:12.938]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:26:12.938]  
[13:26:12.938]  <debugvars>
[13:26:12.938]    // Pre-defined
[13:26:12.938]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:26:12.938]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:26:12.938]    __dp=0x00000000
[13:26:12.938]    __ap=0x00000000
[13:26:12.938]    __traceout=0x00000000      (Trace Disabled)
[13:26:12.938]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:26:12.938]    __FlashAddr=0x00000000
[13:26:12.938]    __FlashLen=0x00000000
[13:26:12.938]    __FlashArg=0x00000000
[13:26:12.938]    __FlashOp=0x00000000
[13:26:12.938]    __Result=0x00000000
[13:26:12.938]  </debugvars>
[13:26:12.938]  
[13:26:12.938]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:26:12.938]    <block atomic="false" info="">
[13:26:12.938]      __var SW_DP_ABORT       = 0x0;
[13:26:12.938]        // -> [SW_DP_ABORT <= 0x00000000]
[13:26:12.938]      __var DP_CTRL_STAT      = 0x4;
[13:26:12.938]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:26:12.938]      __var DP_SELECT         = 0x8;
[13:26:12.938]        // -> [DP_SELECT <= 0x00000008]
[13:26:12.938]      __var powered_down      = 0;
[13:26:12.938]        // -> [powered_down <= 0x00000000]
[13:26:12.938]      WriteDP(DP_SELECT, 0x00000000);
[13:26:12.942]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:26:12.942]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:26:12.942]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:26:12.942]        // -> [powered_down <= 0x00000001]
[13:26:12.942]    </block>
[13:26:12.942]    <control if="powered_down" while="" timeout="0" info="">
[13:26:12.942]      // if-block "powered_down"
[13:26:12.942]        // =>  TRUE
[13:26:12.942]      <block atomic="false" info="">
[13:26:12.942]        Message(0, "Debug/System power-up request sent");
[13:26:12.942]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:26:12.948]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:26:12.948]      </block>
[13:26:12.948]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:26:12.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:26:12.951]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:26:12.951]        // while-condition  =>  FALSE
[13:26:12.951]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:26:12.951]      </control>
[13:26:12.951]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:26:12.951]        // if-block "(__protocol & 0xFFFF) == 1"
[13:26:12.951]          // =>  FALSE
[13:26:12.951]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:26:12.951]      </control>
[13:26:12.951]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:26:12.951]        // if-block "(__protocol & 0xFFFF) == 2"
[13:26:12.951]          // =>  TRUE
[13:26:12.951]        <block atomic="false" info="">
[13:26:12.951]          Message(0, "executing SWD power up");
[13:26:12.951]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:26:12.956]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:26:12.956]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:26:12.957]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:26:12.957]        </block>
[13:26:12.957]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:26:12.959]      </control>
[13:26:12.959]      // end if-block "powered_down"
[13:26:12.959]    </control>
[13:26:12.959]    <block atomic="false" info="">
[13:26:12.959]      __var DEBUG_PORT_VAL    = 0;
[13:26:12.959]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:26:12.959]      __var ACCESS_POINT_VAL  = 0;
[13:26:12.959]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:26:12.959]      __ap = 1; 
[13:26:12.959]        // -> [__ap <= 0x00000001]
[13:26:12.959]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:26:12.963]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:26:12.963]      __ap = 4;
[13:26:12.963]        // -> [__ap <= 0x00000004]
[13:26:12.963]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:26:12.967]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:26:12.967]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:26:12.967]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:26:12.967]    </block>
[13:26:12.967]    <block atomic="false" info="">
[13:26:12.967]      __var nReset = 0x80;
[13:26:12.967]        // -> [nReset <= 0x00000080]
[13:26:12.967]      __var canReadPins = 0;
[13:26:12.967]        // -> [canReadPins <= 0x00000000]
[13:26:12.967]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:26:12.968]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:26:12.968]        // -> [canReadPins <= 0x00000001]
[13:26:12.968]    </block>
[13:26:12.968]    <control if="" while="1" timeout="200" info="">
[13:26:12.968]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.971]      // while "1"  (timeout="200")
[13:26:12.971]      // while-condition  =>  TRUE
[13:26:12.975]      // while "1"  (timeout="200")
[13:26:12.975]      // while  =>  TIMEOUT
[13:26:12.975]      // end while "1"
[13:26:12.975]    </control>
[13:26:12.975]    <control if="canReadPins" while="" timeout="0" info="">
[13:26:12.975]      // if-block "canReadPins"
[13:26:12.975]        // =>  TRUE
[13:26:12.975]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:26:12.975]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:26:12.976]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:26:12.976]        // while-condition  =>  FALSE
[13:26:12.976]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:26:12.977]      </control>
[13:26:12.977]      // end if-block "canReadPins"
[13:26:12.977]    </control>
[13:26:12.977]    <control if="!canReadPins" while="" timeout="0" info="">
[13:26:12.977]      // if-block "!canReadPins"
[13:26:12.977]        // =>  FALSE
[13:26:12.977]      // skip if-block "!canReadPins"
[13:26:12.977]    </control>
[13:26:12.977]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:26:12.977]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:26:12.977]        // =>  TRUE
[13:26:12.977]      <block atomic="false" info="">
[13:26:12.977]        WriteAP(0x00, 0x190008);
[13:26:12.979]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:26:12.979]        WriteAP(0xF0, 0x01);
[13:26:12.987]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:26:12.987]      </block>
[13:26:12.987]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:26:12.991]    </control>
[13:26:12.991]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:26:12.991]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:26:12.991]        // =>  FALSE
[13:26:12.991]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:26:12.991]    </control>
[13:26:12.991]    <block atomic="false" info="">
[13:26:12.991]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:26:12.998]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:26:12.998]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:26:12.998]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:26:13.002]      __ap = 0; //lets make sure we reset the access point selection
[13:26:13.002]        // -> [__ap <= 0x00000000]
[13:26:13.002]    </block>
[13:26:13.002]  </sequence>
[13:26:13.002]  
[13:26:13.035]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:26:13.035]  
[13:26:13.035]  <debugvars>
[13:26:13.035]    // Pre-defined
[13:26:13.035]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:26:13.035]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:26:13.035]    __dp=0x00000000
[13:26:13.035]    __ap=0x00000000
[13:26:13.035]    __traceout=0x00000000      (Trace Disabled)
[13:26:13.035]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:26:13.037]    __FlashAddr=0x00000000
[13:26:13.037]    __FlashLen=0x00000000
[13:26:13.037]    __FlashArg=0x00000000
[13:26:13.037]    __FlashOp=0x00000000
[13:26:13.037]    __Result=0x00000000
[13:26:13.037]  </debugvars>
[13:26:13.037]  
[13:26:13.037]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:26:13.037]    <block atomic="false" info="">
[13:26:13.037]      __var deviceID = 0;
[13:26:13.037]        // -> [deviceID <= 0x00000000]
[13:26:13.037]      __var version = 0;
[13:26:13.037]        // -> [version <= 0x00000000]
[13:26:13.037]      __var partNum = 0;
[13:26:13.037]        // -> [partNum <= 0x00000000]
[13:26:13.037]      __var manuf = 0;
[13:26:13.037]        // -> [manuf <= 0x00000000]
[13:26:13.038]      __var isMSPM0G1X0X_G3X0X = 0;
[13:26:13.038]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:26:13.038]      __var isProduction = 0;
[13:26:13.038]        // -> [isProduction <= 0x00000000]
[13:26:13.038]      __var continueId = 0;
[13:26:13.039]        // -> [continueId <= 0x00000000]
[13:26:13.039]      deviceID =   Read32(0x41C40004);
[13:26:13.047]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:26:13.047]        // -> [deviceID <= 0x2BB8802F]
[13:26:13.047]      version = deviceID >> 28;
[13:26:13.047]        // -> [version <= 0x00000002]
[13:26:13.047]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:26:13.047]        // -> [partNum <= 0x0000BB88]
[13:26:13.047]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:26:13.047]        // -> [manuf <= 0x00000017]
[13:26:13.047]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:26:13.047]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:26:13.047]      isProduction = (version > 0);
[13:26:13.047]        // -> [isProduction <= 0x00000001]
[13:26:13.047]    </block>
[13:26:13.047]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:26:13.047]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:26:13.047]        // =>  FALSE
[13:26:13.047]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:26:13.047]    </control>
[13:26:13.047]    <control if="continueId == 4" while="" timeout="0" info="">
[13:26:13.047]      // if-block "continueId == 4"
[13:26:13.051]        // =>  FALSE
[13:26:13.051]      // skip if-block "continueId == 4"
[13:26:13.051]    </control>
[13:26:13.051]    <control if="!isProduction" while="" timeout="0" info="">
[13:26:13.051]      // if-block "!isProduction"
[13:26:13.051]        // =>  FALSE
[13:26:13.051]      // skip if-block "!isProduction"
[13:26:13.051]    </control>
[13:26:13.051]  </sequence>
[13:26:13.051]  
[13:26:19.937]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:26:19.937]  
[13:26:19.937]  <debugvars>
[13:26:19.937]    // Pre-defined
[13:26:19.937]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:26:19.940]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:26:19.940]    __dp=0x00000000
[13:26:19.940]    __ap=0x00000000
[13:26:19.940]    __traceout=0x00000000      (Trace Disabled)
[13:26:19.940]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:26:19.940]    __FlashAddr=0x00000000
[13:26:19.940]    __FlashLen=0x00000000
[13:26:19.940]    __FlashArg=0x00000000
[13:26:19.940]    __FlashOp=0x00000000
[13:26:19.940]    __Result=0x00000000
[13:26:19.940]  </debugvars>
[13:26:19.940]  
[13:26:19.940]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:26:19.940]    <block atomic="false" info="">
[13:26:19.940]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:26:19.940]        // -> [isSWJ <= 0x00000001]
[13:26:19.940]      __var hasDormant = __protocol & 0x00020000;
[13:26:19.940]        // -> [hasDormant <= 0x00000000]
[13:26:19.940]      __var protType   = __protocol & 0x0000FFFF;
[13:26:19.940]        // -> [protType <= 0x00000002]
[13:26:19.940]    </block>
[13:26:19.940]    <control if="protType == 1" while="" timeout="0" info="">
[13:26:19.940]      // if-block "protType == 1"
[13:26:19.940]        // =>  FALSE
[13:26:19.940]      // skip if-block "protType == 1"
[13:26:19.940]    </control>
[13:26:19.940]    <control if="protType == 2" while="" timeout="0" info="">
[13:26:19.940]      // if-block "protType == 2"
[13:26:19.940]        // =>  TRUE
[13:26:19.940]      <control if="isSWJ" while="" timeout="0" info="">
[13:26:19.940]        // if-block "isSWJ"
[13:26:19.944]          // =>  TRUE
[13:26:19.944]        <control if="hasDormant" while="" timeout="0" info="">
[13:26:19.944]          // if-block "hasDormant"
[13:26:19.944]            // =>  FALSE
[13:26:19.944]          // skip if-block "hasDormant"
[13:26:19.944]        </control>
[13:26:19.944]        <control if="!hasDormant" while="" timeout="0" info="">
[13:26:19.944]          // if-block "!hasDormant"
[13:26:19.944]            // =>  TRUE
[13:26:19.944]          <block atomic="false" info="">
[13:26:19.944]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:26:19.950]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:26:19.950]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:26:19.952]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:26:19.952]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:26:19.952]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:26:19.952]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:26:19.957]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:26:19.957]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:26:19.961]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:26:19.961]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:26:19.964]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:26:19.964]          </block>
[13:26:19.964]          // end if-block "!hasDormant"
[13:26:19.965]        </control>
[13:26:19.965]        // end if-block "isSWJ"
[13:26:19.965]      </control>
[13:26:19.965]      <control if="!isSWJ" while="" timeout="0" info="">
[13:26:19.965]        // if-block "!isSWJ"
[13:26:19.965]          // =>  FALSE
[13:26:19.965]        // skip if-block "!isSWJ"
[13:26:19.965]      </control>
[13:26:19.965]      <block atomic="false" info="">
[13:26:19.965]        ReadDP(0x0);
[13:26:19.967]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:26:19.967]      </block>
[13:26:19.968]      // end if-block "protType == 2"
[13:26:19.968]    </control>
[13:26:19.968]  </sequence>
[13:26:19.968]  
[13:26:19.973]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:26:19.973]  
[13:26:19.973]  <debugvars>
[13:26:19.973]    // Pre-defined
[13:26:19.973]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:26:19.973]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:26:19.973]    __dp=0x00000000
[13:26:19.973]    __ap=0x00000000
[13:26:19.973]    __traceout=0x00000000      (Trace Disabled)
[13:26:19.973]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:26:19.973]    __FlashAddr=0x00000000
[13:26:19.973]    __FlashLen=0x00000000
[13:26:19.973]    __FlashArg=0x00000000
[13:26:19.973]    __FlashOp=0x00000000
[13:26:19.973]    __Result=0x00000000
[13:26:19.973]  </debugvars>
[13:26:19.973]  
[13:26:19.973]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:26:19.973]    <block atomic="false" info="">
[13:26:19.973]      __var SW_DP_ABORT       = 0x0;
[13:26:19.973]        // -> [SW_DP_ABORT <= 0x00000000]
[13:26:19.973]      __var DP_CTRL_STAT      = 0x4;
[13:26:19.973]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:26:19.973]      __var DP_SELECT         = 0x8;
[13:26:19.973]        // -> [DP_SELECT <= 0x00000008]
[13:26:19.977]      __var powered_down      = 0;
[13:26:19.977]        // -> [powered_down <= 0x00000000]
[13:26:19.977]      WriteDP(DP_SELECT, 0x00000000);
[13:26:19.978]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:26:19.978]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:26:19.981]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:26:19.981]        // -> [powered_down <= 0x00000001]
[13:26:19.981]    </block>
[13:26:19.981]    <control if="powered_down" while="" timeout="0" info="">
[13:26:19.981]      // if-block "powered_down"
[13:26:19.981]        // =>  TRUE
[13:26:19.981]      <block atomic="false" info="">
[13:26:19.981]        Message(0, "Debug/System power-up request sent");
[13:26:19.985]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:26:19.987]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:26:19.987]      </block>
[13:26:19.987]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:26:19.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:26:19.993]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:26:19.993]        // while-condition  =>  FALSE
[13:26:19.993]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:26:19.993]      </control>
[13:26:19.993]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:26:19.993]        // if-block "(__protocol & 0xFFFF) == 1"
[13:26:19.993]          // =>  FALSE
[13:26:19.993]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:26:19.993]      </control>
[13:26:19.993]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:26:19.993]        // if-block "(__protocol & 0xFFFF) == 2"
[13:26:19.993]          // =>  TRUE
[13:26:19.993]        <block atomic="false" info="">
[13:26:19.993]          Message(0, "executing SWD power up");
[13:26:19.993]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:26:20.000]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:26:20.000]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:26:20.006]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:26:20.006]        </block>
[13:26:20.006]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:26:20.006]      </control>
[13:26:20.007]      // end if-block "powered_down"
[13:26:20.007]    </control>
[13:26:20.007]    <block atomic="false" info="">
[13:26:20.007]      __var DEBUG_PORT_VAL    = 0;
[13:26:20.007]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:26:20.007]      __var ACCESS_POINT_VAL  = 0;
[13:26:20.007]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:26:20.008]      __ap = 1; 
[13:26:20.008]        // -> [__ap <= 0x00000001]
[13:26:20.008]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:26:20.013]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:26:20.013]      __ap = 4;
[13:26:20.013]        // -> [__ap <= 0x00000004]
[13:26:20.013]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:26:20.022]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:26:20.022]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:26:20.022]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:26:20.027]    </block>
[13:26:20.027]    <block atomic="false" info="">
[13:26:20.027]      __var nReset = 0x80;
[13:26:20.027]        // -> [nReset <= 0x00000080]
[13:26:20.027]      __var canReadPins = 0;
[13:26:20.027]        // -> [canReadPins <= 0x00000000]
[13:26:20.027]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:26:20.028]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:26:20.028]        // -> [canReadPins <= 0x00000001]
[13:26:20.029]    </block>
[13:26:20.029]    <control if="" while="1" timeout="200" info="">
[13:26:20.029]      // while "1"  (timeout="200")
[13:26:20.029]      // while-condition  =>  TRUE
[13:26:20.029]      // while "1"  (timeout="200")
[13:26:20.029]      // while-condition  =>  TRUE
[13:26:20.029]      // while "1"  (timeout="200")
[13:26:20.029]      // while-condition  =>  TRUE
[13:26:20.029]      // while "1"  (timeout="200")
[13:26:20.029]      // while-condition  =>  TRUE
[13:26:20.029]      // while "1"  (timeout="200")
[13:26:20.029]      // while-condition  =>  TRUE
[13:26:20.031]      // while "1"  (timeout="200")
[13:26:20.031]      // while-condition  =>  TRUE
[13:26:20.031]      // while "1"  (timeout="200")
[13:26:20.031]      // while-condition  =>  TRUE
[13:26:20.031]      // while "1"  (timeout="200")
[13:26:20.031]      // while-condition  =>  TRUE
[13:26:20.031]      // while "1"  (timeout="200")
[13:26:20.031]      // while-condition  =>  TRUE
[13:26:20.031]      // while "1"  (timeout="200")
[13:26:20.031]      // while-condition  =>  TRUE
[13:26:20.031]      // while "1"  (timeout="200")
[13:26:20.031]      // while-condition  =>  TRUE
[13:26:20.031]      // while "1"  (timeout="200")
[13:26:20.031]      // while-condition  =>  TRUE
[13:26:20.031]      // while "1"  (timeout="200")
[13:26:20.032]      // while-condition  =>  TRUE
[13:26:20.032]      // while "1"  (timeout="200")
[13:26:20.032]      // while-condition  =>  TRUE
[13:26:20.032]      // while "1"  (timeout="200")
[13:26:20.032]      // while-condition  =>  TRUE
[13:26:20.032]      // while "1"  (timeout="200")
[13:26:20.032]      // while-condition  =>  TRUE
[13:26:20.032]      // while "1"  (timeout="200")
[13:26:20.032]      // while-condition  =>  TRUE
[13:26:20.034]      // while "1"  (timeout="200")
[13:26:20.034]      // while-condition  =>  TRUE
[13:26:20.034]      // while "1"  (timeout="200")
[13:26:20.034]      // while-condition  =>  TRUE
[13:26:20.034]      // while "1"  (timeout="200")
[13:26:20.034]      // while-condition  =>  TRUE
[13:26:20.034]      // while "1"  (timeout="200")
[13:26:20.034]      // while-condition  =>  TRUE
[13:26:20.034]      // while "1"  (timeout="200")
[13:26:20.034]      // while-condition  =>  TRUE
[13:26:20.034]      // while "1"  (timeout="200")
[13:26:20.034]      // while-condition  =>  TRUE
[13:26:20.034]      // while "1"  (timeout="200")
[13:26:20.034]      // while-condition  =>  TRUE
[13:26:20.034]      // while "1"  (timeout="200")
[13:26:20.034]      // while-condition  =>  TRUE
[13:26:20.034]      // while "1"  (timeout="200")
[13:26:20.034]      // while-condition  =>  TRUE
[13:26:20.034]      // while "1"  (timeout="200")
[13:26:20.034]      // while-condition  =>  TRUE
[13:26:20.034]      // while "1"  (timeout="200")
[13:26:20.034]      // while-condition  =>  TRUE
[13:26:20.034]      // while "1"  (timeout="200")
[13:26:20.034]      // while-condition  =>  TRUE
[13:26:20.034]      // while "1"  (timeout="200")
[13:26:20.034]      // while-condition  =>  TRUE
[13:26:20.036]      // while "1"  (timeout="200")
[13:26:20.036]      // while  =>  TIMEOUT
[13:26:20.036]      // end while "1"
[13:26:20.036]    </control>
[13:26:20.036]    <control if="canReadPins" while="" timeout="0" info="">
[13:26:20.036]      // if-block "canReadPins"
[13:26:20.036]        // =>  TRUE
[13:26:20.036]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:26:20.036]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:26:20.041]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:26:20.041]        // while-condition  =>  FALSE
[13:26:20.041]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:26:20.041]      </control>
[13:26:20.041]      // end if-block "canReadPins"
[13:26:20.041]    </control>
[13:26:20.041]    <control if="!canReadPins" while="" timeout="0" info="">
[13:26:20.041]      // if-block "!canReadPins"
[13:26:20.041]        // =>  FALSE
[13:26:20.041]      // skip if-block "!canReadPins"
[13:26:20.041]    </control>
[13:26:20.041]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:26:20.041]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:26:20.041]        // =>  TRUE
[13:26:20.041]      <block atomic="false" info="">
[13:26:20.041]        WriteAP(0x00, 0x190008);
[13:26:20.046]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:26:20.046]        WriteAP(0xF0, 0x01);
[13:26:20.050]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:26:20.050]      </block>
[13:26:20.050]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:26:20.050]    </control>
[13:26:20.050]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:26:20.050]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:26:20.050]        // =>  FALSE
[13:26:20.050]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:26:20.050]    </control>
[13:26:20.050]    <block atomic="false" info="">
[13:26:20.050]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:26:20.054]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:26:20.054]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:26:20.054]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:26:20.056]      __ap = 0; //lets make sure we reset the access point selection
[13:26:20.056]        // -> [__ap <= 0x00000000]
[13:26:20.056]    </block>
[13:26:20.056]  </sequence>
[13:26:20.056]  
[13:26:20.098]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:26:20.098]  
[13:26:20.098]  <debugvars>
[13:26:20.098]    // Pre-defined
[13:26:20.098]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:26:20.098]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:26:20.098]    __dp=0x00000000
[13:26:20.098]    __ap=0x00000000
[13:26:20.098]    __traceout=0x00000000      (Trace Disabled)
[13:26:20.098]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:26:20.098]    __FlashAddr=0x00000000
[13:26:20.098]    __FlashLen=0x00000000
[13:26:20.098]    __FlashArg=0x00000000
[13:26:20.098]    __FlashOp=0x00000000
[13:26:20.098]    __Result=0x00000000
[13:26:20.100]  </debugvars>
[13:26:20.100]  
[13:26:20.100]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:26:20.100]    <block atomic="false" info="">
[13:26:20.100]      __var deviceID = 0;
[13:26:20.100]        // -> [deviceID <= 0x00000000]
[13:26:20.100]      __var version = 0;
[13:26:20.100]        // -> [version <= 0x00000000]
[13:26:20.100]      __var partNum = 0;
[13:26:20.100]        // -> [partNum <= 0x00000000]
[13:26:20.100]      __var manuf = 0;
[13:26:20.100]        // -> [manuf <= 0x00000000]
[13:26:20.100]      __var isMSPM0G1X0X_G3X0X = 0;
[13:26:20.100]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:26:20.100]      __var isProduction = 0;
[13:26:20.100]        // -> [isProduction <= 0x00000000]
[13:26:20.100]      __var continueId = 0;
[13:26:20.100]        // -> [continueId <= 0x00000000]
[13:26:20.100]      deviceID =   Read32(0x41C40004);
[13:26:20.108]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:26:20.112]        // -> [deviceID <= 0x2BB8802F]
[13:26:20.112]      version = deviceID >> 28;
[13:26:20.112]        // -> [version <= 0x00000002]
[13:26:20.112]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:26:20.112]        // -> [partNum <= 0x0000BB88]
[13:26:20.112]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:26:20.112]        // -> [manuf <= 0x00000017]
[13:26:20.112]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:26:20.113]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:26:20.113]      isProduction = (version > 0);
[13:26:20.113]        // -> [isProduction <= 0x00000001]
[13:26:20.113]    </block>
[13:26:20.113]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:26:20.113]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:26:20.113]        // =>  FALSE
[13:26:20.113]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:26:20.113]    </control>
[13:26:20.113]    <control if="continueId == 4" while="" timeout="0" info="">
[13:26:20.113]      // if-block "continueId == 4"
[13:26:20.113]        // =>  FALSE
[13:26:20.113]      // skip if-block "continueId == 4"
[13:26:20.114]    </control>
[13:26:20.114]    <control if="!isProduction" while="" timeout="0" info="">
[13:26:20.114]      // if-block "!isProduction"
[13:26:20.114]        // =>  FALSE
[13:26:20.114]      // skip if-block "!isProduction"
[13:26:20.114]    </control>
[13:26:20.114]  </sequence>
[13:26:20.114]  
[13:28:23.993]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:28:23.993]  
[13:28:23.994]  <debugvars>
[13:28:23.994]    // Pre-defined
[13:28:23.994]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:28:23.994]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:28:23.994]    __dp=0x00000000
[13:28:23.994]    __ap=0x00000000
[13:28:23.994]    __traceout=0x00000000      (Trace Disabled)
[13:28:23.995]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:28:23.995]    __FlashAddr=0x00000000
[13:28:23.995]    __FlashLen=0x00000000
[13:28:23.995]    __FlashArg=0x00000000
[13:28:23.995]    __FlashOp=0x00000000
[13:28:23.995]    __Result=0x00000000
[13:28:23.995]  </debugvars>
[13:28:23.995]  
[13:28:23.996]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:28:23.996]    <block atomic="false" info="">
[13:28:23.996]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:28:23.996]        // -> [isSWJ <= 0x00000001]
[13:28:23.996]      __var hasDormant = __protocol & 0x00020000;
[13:28:23.996]        // -> [hasDormant <= 0x00000000]
[13:28:23.996]      __var protType   = __protocol & 0x0000FFFF;
[13:28:23.996]        // -> [protType <= 0x00000002]
[13:28:23.997]    </block>
[13:28:23.997]    <control if="protType == 1" while="" timeout="0" info="">
[13:28:23.997]      // if-block "protType == 1"
[13:28:23.997]        // =>  FALSE
[13:28:23.997]      // skip if-block "protType == 1"
[13:28:23.997]    </control>
[13:28:23.997]    <control if="protType == 2" while="" timeout="0" info="">
[13:28:23.997]      // if-block "protType == 2"
[13:28:23.997]        // =>  TRUE
[13:28:23.997]      <control if="isSWJ" while="" timeout="0" info="">
[13:28:23.997]        // if-block "isSWJ"
[13:28:23.997]          // =>  TRUE
[13:28:23.999]        <control if="hasDormant" while="" timeout="0" info="">
[13:28:23.999]          // if-block "hasDormant"
[13:28:23.999]            // =>  FALSE
[13:28:23.999]          // skip if-block "hasDormant"
[13:28:23.999]        </control>
[13:28:23.999]        <control if="!hasDormant" while="" timeout="0" info="">
[13:28:23.999]          // if-block "!hasDormant"
[13:28:23.999]            // =>  TRUE
[13:28:23.999]          <block atomic="false" info="">
[13:28:23.999]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:28:24.002]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:28:24.002]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:28:24.004]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:28:24.004]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:28:24.004]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:28:24.004]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:28:24.007]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:28:24.007]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:28:24.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:28:24.011]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:28:24.012]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:28:24.012]          </block>
[13:28:24.012]          // end if-block "!hasDormant"
[13:28:24.012]        </control>
[13:28:24.012]        // end if-block "isSWJ"
[13:28:24.012]      </control>
[13:28:24.012]      <control if="!isSWJ" while="" timeout="0" info="">
[13:28:24.013]        // if-block "!isSWJ"
[13:28:24.013]          // =>  FALSE
[13:28:24.013]        // skip if-block "!isSWJ"
[13:28:24.013]      </control>
[13:28:24.013]      <block atomic="false" info="">
[13:28:24.013]        ReadDP(0x0);
[13:28:24.013]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:28:24.013]      </block>
[13:28:24.013]      // end if-block "protType == 2"
[13:28:24.015]    </control>
[13:28:24.015]  </sequence>
[13:28:24.015]  
[13:28:24.024]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:28:24.024]  
[13:28:24.024]  <debugvars>
[13:28:24.024]    // Pre-defined
[13:28:24.024]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:28:24.024]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:28:24.024]    __dp=0x00000000
[13:28:24.024]    __ap=0x00000000
[13:28:24.024]    __traceout=0x00000000      (Trace Disabled)
[13:28:24.024]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:28:24.028]    __FlashAddr=0x00000000
[13:28:24.028]    __FlashLen=0x00000000
[13:28:24.028]    __FlashArg=0x00000000
[13:28:24.028]    __FlashOp=0x00000000
[13:28:24.028]    __Result=0x00000000
[13:28:24.028]  </debugvars>
[13:28:24.028]  
[13:28:24.028]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:28:24.028]    <block atomic="false" info="">
[13:28:24.028]      __var SW_DP_ABORT       = 0x0;
[13:28:24.028]        // -> [SW_DP_ABORT <= 0x00000000]
[13:28:24.028]      __var DP_CTRL_STAT      = 0x4;
[13:28:24.028]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:28:24.028]      __var DP_SELECT         = 0x8;
[13:28:24.028]        // -> [DP_SELECT <= 0x00000008]
[13:28:24.028]      __var powered_down      = 0;
[13:28:24.028]        // -> [powered_down <= 0x00000000]
[13:28:24.028]      WriteDP(DP_SELECT, 0x00000000);
[13:28:24.032]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:28:24.032]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:28:24.034]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:28:24.034]        // -> [powered_down <= 0x00000001]
[13:28:24.034]    </block>
[13:28:24.034]    <control if="powered_down" while="" timeout="0" info="">
[13:28:24.034]      // if-block "powered_down"
[13:28:24.034]        // =>  TRUE
[13:28:24.035]      <block atomic="false" info="">
[13:28:24.035]        Message(0, "Debug/System power-up request sent");
[13:28:24.036]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:28:24.037]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:28:24.037]      </block>
[13:28:24.037]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:28:24.037]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:28:24.039]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:28:24.039]        // while-condition  =>  FALSE
[13:28:24.039]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:28:24.039]      </control>
[13:28:24.039]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:28:24.039]        // if-block "(__protocol & 0xFFFF) == 1"
[13:28:24.039]          // =>  FALSE
[13:28:24.039]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:28:24.039]      </control>
[13:28:24.039]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:28:24.039]        // if-block "(__protocol & 0xFFFF) == 2"
[13:28:24.039]          // =>  TRUE
[13:28:24.039]        <block atomic="false" info="">
[13:28:24.039]          Message(0, "executing SWD power up");
[13:28:24.042]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:28:24.043]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:28:24.043]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:28:24.048]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:28:24.048]        </block>
[13:28:24.048]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:28:24.048]      </control>
[13:28:24.048]      // end if-block "powered_down"
[13:28:24.048]    </control>
[13:28:24.048]    <block atomic="false" info="">
[13:28:24.048]      __var DEBUG_PORT_VAL    = 0;
[13:28:24.048]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:28:24.048]      __var ACCESS_POINT_VAL  = 0;
[13:28:24.048]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:28:24.048]      __ap = 1; 
[13:28:24.048]        // -> [__ap <= 0x00000001]
[13:28:24.050]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:28:24.057]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:28:24.060]      __ap = 4;
[13:28:24.060]        // -> [__ap <= 0x00000004]
[13:28:24.060]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:28:24.062]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:28:24.062]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:28:24.062]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:28:24.065]    </block>
[13:28:24.065]    <block atomic="false" info="">
[13:28:24.065]      __var nReset = 0x80;
[13:28:24.065]        // -> [nReset <= 0x00000080]
[13:28:24.065]      __var canReadPins = 0;
[13:28:24.065]        // -> [canReadPins <= 0x00000000]
[13:28:24.065]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:28:24.068]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:28:24.068]        // -> [canReadPins <= 0x00000001]
[13:28:24.068]    </block>
[13:28:24.068]    <control if="" while="1" timeout="200" info="">
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.068]      // while-condition  =>  TRUE
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.068]      // while-condition  =>  TRUE
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.068]      // while-condition  =>  TRUE
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.068]      // while-condition  =>  TRUE
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.068]      // while-condition  =>  TRUE
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.068]      // while-condition  =>  TRUE
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.068]      // while-condition  =>  TRUE
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.068]      // while-condition  =>  TRUE
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.068]      // while-condition  =>  TRUE
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.068]      // while-condition  =>  TRUE
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.068]      // while-condition  =>  TRUE
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.068]      // while-condition  =>  TRUE
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.068]      // while-condition  =>  TRUE
[13:28:24.068]      // while "1"  (timeout="200")
[13:28:24.071]      // while-condition  =>  TRUE
[13:28:24.071]      // while "1"  (timeout="200")
[13:28:24.071]      // while-condition  =>  TRUE
[13:28:24.071]      // while "1"  (timeout="200")
[13:28:24.071]      // while-condition  =>  TRUE
[13:28:24.071]      // while "1"  (timeout="200")
[13:28:24.071]      // while-condition  =>  TRUE
[13:28:24.071]      // while "1"  (timeout="200")
[13:28:24.071]      // while-condition  =>  TRUE
[13:28:24.071]      // while "1"  (timeout="200")
[13:28:24.072]      // while-condition  =>  TRUE
[13:28:24.072]      // while "1"  (timeout="200")
[13:28:24.072]      // while-condition  =>  TRUE
[13:28:24.072]      // while "1"  (timeout="200")
[13:28:24.072]      // while-condition  =>  TRUE
[13:28:24.072]      // while "1"  (timeout="200")
[13:28:24.072]      // while-condition  =>  TRUE
[13:28:24.073]      // while "1"  (timeout="200")
[13:28:24.073]      // while-condition  =>  TRUE
[13:28:24.073]      // while "1"  (timeout="200")
[13:28:24.073]      // while-condition  =>  TRUE
[13:28:24.073]      // while "1"  (timeout="200")
[13:28:24.074]      // while-condition  =>  TRUE
[13:28:24.074]      // while "1"  (timeout="200")
[13:28:24.074]      // while-condition  =>  TRUE
[13:28:24.074]      // while "1"  (timeout="200")
[13:28:24.074]      // while-condition  =>  TRUE
[13:28:24.074]      // while "1"  (timeout="200")
[13:28:24.074]      // while-condition  =>  TRUE
[13:28:24.074]      // while "1"  (timeout="200")
[13:28:24.074]      // while-condition  =>  TRUE
[13:28:24.074]      // while "1"  (timeout="200")
[13:28:24.074]      // while-condition  =>  TRUE
[13:28:24.074]      // while "1"  (timeout="200")
[13:28:24.074]      // while-condition  =>  TRUE
[13:28:24.074]      // while "1"  (timeout="200")
[13:28:24.074]      // while-condition  =>  TRUE
[13:28:24.074]      // while "1"  (timeout="200")
[13:28:24.074]      // while-condition  =>  TRUE
[13:28:24.074]      // while "1"  (timeout="200")
[13:28:24.074]      // while-condition  =>  TRUE
[13:28:24.074]      // while "1"  (timeout="200")
[13:28:24.074]      // while-condition  =>  TRUE
[13:28:24.074]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.076]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.076]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.076]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.076]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.076]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.076]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.076]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.076]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.076]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.076]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.076]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.076]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.076]      // while "1"  (timeout="200")
[13:28:24.076]      // while-condition  =>  TRUE
[13:28:24.080]      // while "1"  (timeout="200")
[13:28:24.080]      // while-condition  =>  TRUE
[13:28:24.080]      // while "1"  (timeout="200")
[13:28:24.080]      // while-condition  =>  TRUE
[13:28:24.080]      // while "1"  (timeout="200")
[13:28:24.080]      // while-condition  =>  TRUE
[13:28:24.080]      // while "1"  (timeout="200")
[13:28:24.080]      // while-condition  =>  TRUE
[13:28:24.080]      // while "1"  (timeout="200")
[13:28:24.080]      // while-condition  =>  TRUE
[13:28:24.080]      // while "1"  (timeout="200")
[13:28:24.080]      // while-condition  =>  TRUE
[13:28:24.080]      // while "1"  (timeout="200")
[13:28:24.081]      // while-condition  =>  TRUE
[13:28:24.081]      // while "1"  (timeout="200")
[13:28:24.081]      // while-condition  =>  TRUE
[13:28:24.081]      // while "1"  (timeout="200")
[13:28:24.081]      // while-condition  =>  TRUE
[13:28:24.081]      // while "1"  (timeout="200")
[13:28:24.081]      // while-condition  =>  TRUE
[13:28:24.081]      // while "1"  (timeout="200")
[13:28:24.081]      // while-condition  =>  TRUE
[13:28:24.081]      // while "1"  (timeout="200")
[13:28:24.081]      // while-condition  =>  TRUE
[13:28:24.081]      // while "1"  (timeout="200")
[13:28:24.082]      // while-condition  =>  TRUE
[13:28:24.082]      // while "1"  (timeout="200")
[13:28:24.082]      // while  =>  TIMEOUT
[13:28:24.082]      // end while "1"
[13:28:24.082]    </control>
[13:28:24.082]    <control if="canReadPins" while="" timeout="0" info="">
[13:28:24.082]      // if-block "canReadPins"
[13:28:24.082]        // =>  TRUE
[13:28:24.082]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:28:24.082]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:28:24.089]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:28:24.089]        // while-condition  =>  FALSE
[13:28:24.091]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:28:24.091]      </control>
[13:28:24.091]      // end if-block "canReadPins"
[13:28:24.091]    </control>
[13:28:24.091]    <control if="!canReadPins" while="" timeout="0" info="">
[13:28:24.091]      // if-block "!canReadPins"
[13:28:24.091]        // =>  FALSE
[13:28:24.091]      // skip if-block "!canReadPins"
[13:28:24.091]    </control>
[13:28:24.091]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:28:24.091]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:28:24.091]        // =>  TRUE
[13:28:24.091]      <block atomic="false" info="">
[13:28:24.091]        WriteAP(0x00, 0x190008);
[13:28:24.093]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:28:24.098]        WriteAP(0xF0, 0x01);
[13:28:24.101]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:28:24.101]      </block>
[13:28:24.101]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:28:24.101]    </control>
[13:28:24.101]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:28:24.101]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:28:24.101]        // =>  FALSE
[13:28:24.101]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:28:24.101]    </control>
[13:28:24.101]    <block atomic="false" info="">
[13:28:24.102]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:28:24.105]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:28:24.105]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:28:24.105]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:28:24.105]      __ap = 0; //lets make sure we reset the access point selection
[13:28:24.105]        // -> [__ap <= 0x00000000]
[13:28:24.105]    </block>
[13:28:24.105]  </sequence>
[13:28:24.105]  
[13:28:24.145]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:28:24.145]  
[13:28:24.145]  <debugvars>
[13:28:24.145]    // Pre-defined
[13:28:24.145]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:28:24.145]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:28:24.145]    __dp=0x00000000
[13:28:24.145]    __ap=0x00000000
[13:28:24.145]    __traceout=0x00000000      (Trace Disabled)
[13:28:24.145]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:28:24.145]    __FlashAddr=0x00000000
[13:28:24.145]    __FlashLen=0x00000000
[13:28:24.145]    __FlashArg=0x00000000
[13:28:24.145]    __FlashOp=0x00000000
[13:28:24.145]    __Result=0x00000000
[13:28:24.145]  </debugvars>
[13:28:24.145]  
[13:28:24.145]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:28:24.145]    <block atomic="false" info="">
[13:28:24.145]      __var deviceID = 0;
[13:28:24.145]        // -> [deviceID <= 0x00000000]
[13:28:24.145]      __var version = 0;
[13:28:24.145]        // -> [version <= 0x00000000]
[13:28:24.145]      __var partNum = 0;
[13:28:24.145]        // -> [partNum <= 0x00000000]
[13:28:24.145]      __var manuf = 0;
[13:28:24.145]        // -> [manuf <= 0x00000000]
[13:28:24.145]      __var isMSPM0G1X0X_G3X0X = 0;
[13:28:24.145]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:28:24.145]      __var isProduction = 0;
[13:28:24.145]        // -> [isProduction <= 0x00000000]
[13:28:24.145]      __var continueId = 0;
[13:28:24.149]        // -> [continueId <= 0x00000000]
[13:28:24.149]      deviceID =   Read32(0x41C40004);
[13:28:24.154]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:28:24.158]        // -> [deviceID <= 0x2BB8802F]
[13:28:24.158]      version = deviceID >> 28;
[13:28:24.158]        // -> [version <= 0x00000002]
[13:28:24.158]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:28:24.158]        // -> [partNum <= 0x0000BB88]
[13:28:24.158]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:28:24.158]        // -> [manuf <= 0x00000017]
[13:28:24.158]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:28:24.158]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:28:24.158]      isProduction = (version > 0);
[13:28:24.158]        // -> [isProduction <= 0x00000001]
[13:28:24.158]    </block>
[13:28:24.158]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:28:24.158]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:28:24.158]        // =>  FALSE
[13:28:24.158]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:28:24.158]    </control>
[13:28:24.158]    <control if="continueId == 4" while="" timeout="0" info="">
[13:28:24.158]      // if-block "continueId == 4"
[13:28:24.158]        // =>  FALSE
[13:28:24.158]      // skip if-block "continueId == 4"
[13:28:24.158]    </control>
[13:28:24.158]    <control if="!isProduction" while="" timeout="0" info="">
[13:28:24.158]      // if-block "!isProduction"
[13:28:24.158]        // =>  FALSE
[13:28:24.158]      // skip if-block "!isProduction"
[13:28:24.158]    </control>
[13:28:24.158]  </sequence>
[13:28:24.158]  
[13:28:31.296]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:28:31.296]  
[13:28:31.308]  <debugvars>
[13:28:31.308]    // Pre-defined
[13:28:31.308]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:28:31.308]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:28:31.308]    __dp=0x00000000
[13:28:31.308]    __ap=0x00000000
[13:28:31.308]    __traceout=0x00000000      (Trace Disabled)
[13:28:31.308]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:28:31.309]    __FlashAddr=0x00000000
[13:28:31.309]    __FlashLen=0x00000000
[13:28:31.309]    __FlashArg=0x00000000
[13:28:31.309]    __FlashOp=0x00000000
[13:28:31.309]    __Result=0x00000000
[13:28:31.309]  </debugvars>
[13:28:31.309]  
[13:28:31.309]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:28:31.309]    <block atomic="false" info="">
[13:28:31.309]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:28:31.309]        // -> [isSWJ <= 0x00000001]
[13:28:31.309]      __var hasDormant = __protocol & 0x00020000;
[13:28:31.309]        // -> [hasDormant <= 0x00000000]
[13:28:31.309]      __var protType   = __protocol & 0x0000FFFF;
[13:28:31.309]        // -> [protType <= 0x00000002]
[13:28:31.310]    </block>
[13:28:31.310]    <control if="protType == 1" while="" timeout="0" info="">
[13:28:31.310]      // if-block "protType == 1"
[13:28:31.310]        // =>  FALSE
[13:28:31.310]      // skip if-block "protType == 1"
[13:28:31.311]    </control>
[13:28:31.311]    <control if="protType == 2" while="" timeout="0" info="">
[13:28:31.311]      // if-block "protType == 2"
[13:28:31.311]        // =>  TRUE
[13:28:31.311]      <control if="isSWJ" while="" timeout="0" info="">
[13:28:31.311]        // if-block "isSWJ"
[13:28:31.312]          // =>  TRUE
[13:28:31.312]        <control if="hasDormant" while="" timeout="0" info="">
[13:28:31.312]          // if-block "hasDormant"
[13:28:31.312]            // =>  FALSE
[13:28:31.312]          // skip if-block "hasDormant"
[13:28:31.312]        </control>
[13:28:31.312]        <control if="!hasDormant" while="" timeout="0" info="">
[13:28:31.312]          // if-block "!hasDormant"
[13:28:31.312]            // =>  TRUE
[13:28:31.312]          <block atomic="false" info="">
[13:28:31.312]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:28:31.315]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:28:31.315]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:28:31.317]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:28:31.317]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:28:31.319]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:28:31.319]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:28:31.320]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:28:31.320]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:28:31.325]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:28:31.325]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:28:31.330]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:28:31.330]          </block>
[13:28:31.330]          // end if-block "!hasDormant"
[13:28:31.330]        </control>
[13:28:31.331]        // end if-block "isSWJ"
[13:28:31.331]      </control>
[13:28:31.331]      <control if="!isSWJ" while="" timeout="0" info="">
[13:28:31.331]        // if-block "!isSWJ"
[13:28:31.331]          // =>  FALSE
[13:28:31.331]        // skip if-block "!isSWJ"
[13:28:31.331]      </control>
[13:28:31.331]      <block atomic="false" info="">
[13:28:31.331]        ReadDP(0x0);
[13:28:31.333]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:28:31.333]      </block>
[13:28:31.333]      // end if-block "protType == 2"
[13:28:31.333]    </control>
[13:28:31.333]  </sequence>
[13:28:31.333]  
[13:28:31.336]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:28:31.336]  
[13:28:31.336]  <debugvars>
[13:28:31.337]    // Pre-defined
[13:28:31.337]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:28:31.337]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:28:31.337]    __dp=0x00000000
[13:28:31.337]    __ap=0x00000000
[13:28:31.337]    __traceout=0x00000000      (Trace Disabled)
[13:28:31.337]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:28:31.337]    __FlashAddr=0x00000000
[13:28:31.337]    __FlashLen=0x00000000
[13:28:31.337]    __FlashArg=0x00000000
[13:28:31.337]    __FlashOp=0x00000000
[13:28:31.337]    __Result=0x00000000
[13:28:31.338]  </debugvars>
[13:28:31.338]  
[13:28:31.338]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:28:31.338]    <block atomic="false" info="">
[13:28:31.338]      __var SW_DP_ABORT       = 0x0;
[13:28:31.338]        // -> [SW_DP_ABORT <= 0x00000000]
[13:28:31.338]      __var DP_CTRL_STAT      = 0x4;
[13:28:31.338]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:28:31.338]      __var DP_SELECT         = 0x8;
[13:28:31.338]        // -> [DP_SELECT <= 0x00000008]
[13:28:31.338]      __var powered_down      = 0;
[13:28:31.338]        // -> [powered_down <= 0x00000000]
[13:28:31.338]      WriteDP(DP_SELECT, 0x00000000);
[13:28:31.341]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:28:31.341]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:28:31.342]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:28:31.342]        // -> [powered_down <= 0x00000001]
[13:28:31.344]    </block>
[13:28:31.344]    <control if="powered_down" while="" timeout="0" info="">
[13:28:31.344]      // if-block "powered_down"
[13:28:31.344]        // =>  TRUE
[13:28:31.344]      <block atomic="false" info="">
[13:28:31.344]        Message(0, "Debug/System power-up request sent");
[13:28:31.344]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:28:31.348]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:28:31.348]      </block>
[13:28:31.348]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:28:31.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:28:31.350]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:28:31.350]        // while-condition  =>  FALSE
[13:28:31.350]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:28:31.350]      </control>
[13:28:31.350]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:28:31.350]        // if-block "(__protocol & 0xFFFF) == 1"
[13:28:31.350]          // =>  FALSE
[13:28:31.350]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:28:31.350]      </control>
[13:28:31.350]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:28:31.350]        // if-block "(__protocol & 0xFFFF) == 2"
[13:28:31.350]          // =>  TRUE
[13:28:31.350]        <block atomic="false" info="">
[13:28:31.351]          Message(0, "executing SWD power up");
[13:28:31.352]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:28:31.357]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:28:31.357]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:28:31.364]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:28:31.364]        </block>
[13:28:31.364]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:28:31.364]      </control>
[13:28:31.364]      // end if-block "powered_down"
[13:28:31.365]    </control>
[13:28:31.365]    <block atomic="false" info="">
[13:28:31.365]      __var DEBUG_PORT_VAL    = 0;
[13:28:31.365]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:28:31.365]      __var ACCESS_POINT_VAL  = 0;
[13:28:31.365]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:28:31.365]      __ap = 1; 
[13:28:31.365]        // -> [__ap <= 0x00000001]
[13:28:31.365]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:28:31.368]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:28:31.368]      __ap = 4;
[13:28:31.368]        // -> [__ap <= 0x00000004]
[13:28:31.368]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:28:31.373]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:28:31.375]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:28:31.375]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:28:31.376]    </block>
[13:28:31.376]    <block atomic="false" info="">
[13:28:31.376]      __var nReset = 0x80;
[13:28:31.376]        // -> [nReset <= 0x00000080]
[13:28:31.376]      __var canReadPins = 0;
[13:28:31.376]        // -> [canReadPins <= 0x00000000]
[13:28:31.376]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:28:31.381]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:28:31.381]        // -> [canReadPins <= 0x00000001]
[13:28:31.381]    </block>
[13:28:31.381]    <control if="" while="1" timeout="200" info="">
[13:28:31.381]      // while "1"  (timeout="200")
[13:28:31.381]      // while-condition  =>  TRUE
[13:28:31.381]      // while "1"  (timeout="200")
[13:28:31.382]      // while-condition  =>  TRUE
[13:28:31.382]      // while "1"  (timeout="200")
[13:28:31.382]      // while-condition  =>  TRUE
[13:28:31.382]      // while "1"  (timeout="200")
[13:28:31.382]      // while-condition  =>  TRUE
[13:28:31.382]      // while "1"  (timeout="200")
[13:28:31.382]      // while-condition  =>  TRUE
[13:28:31.382]      // while "1"  (timeout="200")
[13:28:31.382]      // while-condition  =>  TRUE
[13:28:31.382]      // while "1"  (timeout="200")
[13:28:31.383]      // while-condition  =>  TRUE
[13:28:31.383]      // while "1"  (timeout="200")
[13:28:31.383]      // while-condition  =>  TRUE
[13:28:31.383]      // while "1"  (timeout="200")
[13:28:31.383]      // while-condition  =>  TRUE
[13:28:31.383]      // while "1"  (timeout="200")
[13:28:31.383]      // while-condition  =>  TRUE
[13:28:31.383]      // while "1"  (timeout="200")
[13:28:31.383]      // while-condition  =>  TRUE
[13:28:31.383]      // while "1"  (timeout="200")
[13:28:31.383]      // while-condition  =>  TRUE
[13:28:31.383]      // while "1"  (timeout="200")
[13:28:31.383]      // while-condition  =>  TRUE
[13:28:31.383]      // while "1"  (timeout="200")
[13:28:31.383]      // while-condition  =>  TRUE
[13:28:31.383]      // while "1"  (timeout="200")
[13:28:31.383]      // while-condition  =>  TRUE
[13:28:31.383]      // while "1"  (timeout="200")
[13:28:31.386]      // while-condition  =>  TRUE
[13:28:31.386]      // while "1"  (timeout="200")
[13:28:31.386]      // while-condition  =>  TRUE
[13:28:31.386]      // while "1"  (timeout="200")
[13:28:31.386]      // while-condition  =>  TRUE
[13:28:31.386]      // while "1"  (timeout="200")
[13:28:31.386]      // while-condition  =>  TRUE
[13:28:31.386]      // while "1"  (timeout="200")
[13:28:31.386]      // while-condition  =>  TRUE
[13:28:31.386]      // while "1"  (timeout="200")
[13:28:31.386]      // while-condition  =>  TRUE
[13:28:31.386]      // while "1"  (timeout="200")
[13:28:31.386]      // while-condition  =>  TRUE
[13:28:31.386]      // while "1"  (timeout="200")
[13:28:31.386]      // while-condition  =>  TRUE
[13:28:31.386]      // while "1"  (timeout="200")
[13:28:31.388]      // while-condition  =>  TRUE
[13:28:31.388]      // while "1"  (timeout="200")
[13:28:31.388]      // while-condition  =>  TRUE
[13:28:31.388]      // while "1"  (timeout="200")
[13:28:31.388]      // while-condition  =>  TRUE
[13:28:31.388]      // while "1"  (timeout="200")
[13:28:31.388]      // while-condition  =>  TRUE
[13:28:31.388]      // while "1"  (timeout="200")
[13:28:31.388]      // while-condition  =>  TRUE
[13:28:31.388]      // while "1"  (timeout="200")
[13:28:31.388]      // while-condition  =>  TRUE
[13:28:31.388]      // while "1"  (timeout="200")
[13:28:31.389]      // while-condition  =>  TRUE
[13:28:31.389]      // while "1"  (timeout="200")
[13:28:31.389]      // while-condition  =>  TRUE
[13:28:31.389]      // while "1"  (timeout="200")
[13:28:31.389]      // while-condition  =>  TRUE
[13:28:31.389]      // while "1"  (timeout="200")
[13:28:31.389]      // while-condition  =>  TRUE
[13:28:31.389]      // while "1"  (timeout="200")
[13:28:31.389]      // while-condition  =>  TRUE
[13:28:31.389]      // while "1"  (timeout="200")
[13:28:31.389]      // while-condition  =>  TRUE
[13:28:31.389]      // while "1"  (timeout="200")
[13:28:31.389]      // while-condition  =>  TRUE
[13:28:31.389]      // while "1"  (timeout="200")
[13:28:31.389]      // while-condition  =>  TRUE
[13:28:31.389]      // while "1"  (timeout="200")
[13:28:31.390]      // while-condition  =>  TRUE
[13:28:31.390]      // while "1"  (timeout="200")
[13:28:31.390]      // while-condition  =>  TRUE
[13:28:31.390]      // while "1"  (timeout="200")
[13:28:31.390]      // while-condition  =>  TRUE
[13:28:31.390]      // while "1"  (timeout="200")
[13:28:31.390]      // while-condition  =>  TRUE
[13:28:31.390]      // while "1"  (timeout="200")
[13:28:31.390]      // while-condition  =>  TRUE
[13:28:31.390]      // while "1"  (timeout="200")
[13:28:31.391]      // while-condition  =>  TRUE
[13:28:31.391]      // while "1"  (timeout="200")
[13:28:31.391]      // while-condition  =>  TRUE
[13:28:31.391]      // while "1"  (timeout="200")
[13:28:31.391]      // while-condition  =>  TRUE
[13:28:31.391]      // while "1"  (timeout="200")
[13:28:31.391]      // while-condition  =>  TRUE
[13:28:31.391]      // while "1"  (timeout="200")
[13:28:31.391]      // while-condition  =>  TRUE
[13:28:31.392]      // while "1"  (timeout="200")
[13:28:31.392]      // while-condition  =>  TRUE
[13:28:31.392]      // while "1"  (timeout="200")
[13:28:31.392]      // while-condition  =>  TRUE
[13:28:31.392]      // while "1"  (timeout="200")
[13:28:31.392]      // while-condition  =>  TRUE
[13:28:31.392]      // while "1"  (timeout="200")
[13:28:31.392]      // while-condition  =>  TRUE
[13:28:31.392]      // while "1"  (timeout="200")
[13:28:31.392]      // while-condition  =>  TRUE
[13:28:31.392]      // while "1"  (timeout="200")
[13:28:31.393]      // while-condition  =>  TRUE
[13:28:31.393]      // while "1"  (timeout="200")
[13:28:31.393]      // while-condition  =>  TRUE
[13:28:31.393]      // while "1"  (timeout="200")
[13:28:31.393]      // while-condition  =>  TRUE
[13:28:31.393]      // while "1"  (timeout="200")
[13:28:31.393]      // while-condition  =>  TRUE
[13:28:31.393]      // while "1"  (timeout="200")
[13:28:31.393]      // while-condition  =>  TRUE
[13:28:31.393]      // while "1"  (timeout="200")
[13:28:31.393]      // while-condition  =>  TRUE
[13:28:31.393]      // while "1"  (timeout="200")
[13:28:31.393]      // while-condition  =>  TRUE
[13:28:31.393]      // while "1"  (timeout="200")
[13:28:31.393]      // while-condition  =>  TRUE
[13:28:31.393]      // while "1"  (timeout="200")
[13:28:31.393]      // while-condition  =>  TRUE
[13:28:31.393]      // while "1"  (timeout="200")
[13:28:31.393]      // while-condition  =>  TRUE
[13:28:31.393]      // while "1"  (timeout="200")
[13:28:31.396]      // while-condition  =>  TRUE
[13:28:31.396]      // while "1"  (timeout="200")
[13:28:31.396]      // while  =>  TIMEOUT
[13:28:31.396]      // end while "1"
[13:28:31.396]    </control>
[13:28:31.396]    <control if="canReadPins" while="" timeout="0" info="">
[13:28:31.396]      // if-block "canReadPins"
[13:28:31.396]        // =>  TRUE
[13:28:31.396]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:28:31.396]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:28:31.398]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:28:31.400]        // while-condition  =>  FALSE
[13:28:31.400]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:28:31.400]      </control>
[13:28:31.400]      // end if-block "canReadPins"
[13:28:31.400]    </control>
[13:28:31.400]    <control if="!canReadPins" while="" timeout="0" info="">
[13:28:31.400]      // if-block "!canReadPins"
[13:28:31.400]        // =>  FALSE
[13:28:31.400]      // skip if-block "!canReadPins"
[13:28:31.400]    </control>
[13:28:31.400]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:28:31.401]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:28:31.401]        // =>  TRUE
[13:28:31.401]      <block atomic="false" info="">
[13:28:31.401]        WriteAP(0x00, 0x190008);
[13:28:31.402]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:28:31.402]        WriteAP(0xF0, 0x01);
[13:28:31.406]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:28:31.406]      </block>
[13:28:31.406]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:28:31.406]    </control>
[13:28:31.406]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:28:31.408]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:28:31.408]        // =>  FALSE
[13:28:31.408]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:28:31.408]    </control>
[13:28:31.408]    <block atomic="false" info="">
[13:28:31.408]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:28:31.411]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:28:31.411]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:28:31.411]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:28:31.412]      __ap = 0; //lets make sure we reset the access point selection
[13:28:31.412]        // -> [__ap <= 0x00000000]
[13:28:31.412]    </block>
[13:28:31.413]  </sequence>
[13:28:31.413]  
[13:28:31.445]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:28:31.445]  
[13:28:31.445]  <debugvars>
[13:28:31.445]    // Pre-defined
[13:28:31.445]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:28:31.445]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:28:31.446]    __dp=0x00000000
[13:28:31.446]    __ap=0x00000000
[13:28:31.446]    __traceout=0x00000000      (Trace Disabled)
[13:28:31.446]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:28:31.446]    __FlashAddr=0x00000000
[13:28:31.446]    __FlashLen=0x00000000
[13:28:31.446]    __FlashArg=0x00000000
[13:28:31.446]    __FlashOp=0x00000000
[13:28:31.446]    __Result=0x00000000
[13:28:31.446]  </debugvars>
[13:28:31.446]  
[13:28:31.446]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:28:31.446]    <block atomic="false" info="">
[13:28:31.446]      __var deviceID = 0;
[13:28:31.446]        // -> [deviceID <= 0x00000000]
[13:28:31.446]      __var version = 0;
[13:28:31.446]        // -> [version <= 0x00000000]
[13:28:31.446]      __var partNum = 0;
[13:28:31.446]        // -> [partNum <= 0x00000000]
[13:28:31.446]      __var manuf = 0;
[13:28:31.446]        // -> [manuf <= 0x00000000]
[13:28:31.446]      __var isMSPM0G1X0X_G3X0X = 0;
[13:28:31.446]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:28:31.446]      __var isProduction = 0;
[13:28:31.446]        // -> [isProduction <= 0x00000000]
[13:28:31.446]      __var continueId = 0;
[13:28:31.446]        // -> [continueId <= 0x00000000]
[13:28:31.446]      deviceID =   Read32(0x41C40004);
[13:28:31.455]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:28:31.455]        // -> [deviceID <= 0x2BB8802F]
[13:28:31.455]      version = deviceID >> 28;
[13:28:31.455]        // -> [version <= 0x00000002]
[13:28:31.455]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:28:31.455]        // -> [partNum <= 0x0000BB88]
[13:28:31.455]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:28:31.455]        // -> [manuf <= 0x00000017]
[13:28:31.455]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:28:31.455]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:28:31.458]      isProduction = (version > 0);
[13:28:31.458]        // -> [isProduction <= 0x00000001]
[13:28:31.458]    </block>
[13:28:31.458]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:28:31.458]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:28:31.458]        // =>  FALSE
[13:28:31.458]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:28:31.458]    </control>
[13:28:31.458]    <control if="continueId == 4" while="" timeout="0" info="">
[13:28:31.458]      // if-block "continueId == 4"
[13:28:31.458]        // =>  FALSE
[13:28:31.458]      // skip if-block "continueId == 4"
[13:28:31.459]    </control>
[13:28:31.459]    <control if="!isProduction" while="" timeout="0" info="">
[13:28:31.459]      // if-block "!isProduction"
[13:28:31.459]        // =>  FALSE
[13:28:31.459]      // skip if-block "!isProduction"
[13:28:31.459]    </control>
[13:28:31.459]  </sequence>
[13:28:31.459]  
[13:32:48.433]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:32:48.433]  
[13:32:48.433]  <debugvars>
[13:32:48.433]    // Pre-defined
[13:32:48.433]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:32:48.433]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:32:48.433]    __dp=0x00000000
[13:32:48.433]    __ap=0x00000000
[13:32:48.433]    __traceout=0x00000000      (Trace Disabled)
[13:32:48.433]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:32:48.433]    __FlashAddr=0x00000000
[13:32:48.433]    __FlashLen=0x00000000
[13:32:48.433]    __FlashArg=0x00000000
[13:32:48.433]    __FlashOp=0x00000000
[13:32:48.433]    __Result=0x00000000
[13:32:48.433]  </debugvars>
[13:32:48.433]  
[13:32:48.433]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:32:48.433]    <block atomic="false" info="">
[13:32:48.433]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:32:48.433]        // -> [isSWJ <= 0x00000001]
[13:32:48.433]      __var hasDormant = __protocol & 0x00020000;
[13:32:48.433]        // -> [hasDormant <= 0x00000000]
[13:32:48.433]      __var protType   = __protocol & 0x0000FFFF;
[13:32:48.433]        // -> [protType <= 0x00000002]
[13:32:48.433]    </block>
[13:32:48.433]    <control if="protType == 1" while="" timeout="0" info="">
[13:32:48.433]      // if-block "protType == 1"
[13:32:48.433]        // =>  FALSE
[13:32:48.433]      // skip if-block "protType == 1"
[13:32:48.433]    </control>
[13:32:48.433]    <control if="protType == 2" while="" timeout="0" info="">
[13:32:48.433]      // if-block "protType == 2"
[13:32:48.433]        // =>  TRUE
[13:32:48.433]      <control if="isSWJ" while="" timeout="0" info="">
[13:32:48.433]        // if-block "isSWJ"
[13:32:48.437]          // =>  TRUE
[13:32:48.437]        <control if="hasDormant" while="" timeout="0" info="">
[13:32:48.437]          // if-block "hasDormant"
[13:32:48.437]            // =>  FALSE
[13:32:48.437]          // skip if-block "hasDormant"
[13:32:48.437]        </control>
[13:32:48.437]        <control if="!hasDormant" while="" timeout="0" info="">
[13:32:48.437]          // if-block "!hasDormant"
[13:32:48.437]            // =>  TRUE
[13:32:48.437]          <block atomic="false" info="">
[13:32:48.437]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:32:48.437]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:32:48.437]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:32:48.445]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:32:48.445]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:32:48.445]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:32:48.449]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:32:48.449]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:32:48.449]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:32:48.452]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:32:48.452]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:32:48.454]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:32:48.454]          </block>
[13:32:48.454]          // end if-block "!hasDormant"
[13:32:48.454]        </control>
[13:32:48.454]        // end if-block "isSWJ"
[13:32:48.454]      </control>
[13:32:48.454]      <control if="!isSWJ" while="" timeout="0" info="">
[13:32:48.454]        // if-block "!isSWJ"
[13:32:48.454]          // =>  FALSE
[13:32:48.454]        // skip if-block "!isSWJ"
[13:32:48.454]      </control>
[13:32:48.454]      <block atomic="false" info="">
[13:32:48.454]        ReadDP(0x0);
[13:32:48.457]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:32:48.457]      </block>
[13:32:48.457]      // end if-block "protType == 2"
[13:32:48.457]    </control>
[13:32:48.457]  </sequence>
[13:32:48.457]  
[13:32:48.461]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:32:48.461]  
[13:32:48.461]  <debugvars>
[13:32:48.461]    // Pre-defined
[13:32:48.461]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:32:48.461]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:32:48.462]    __dp=0x00000000
[13:32:48.462]    __ap=0x00000000
[13:32:48.462]    __traceout=0x00000000      (Trace Disabled)
[13:32:48.462]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:32:48.462]    __FlashAddr=0x00000000
[13:32:48.462]    __FlashLen=0x00000000
[13:32:48.462]    __FlashArg=0x00000000
[13:32:48.462]    __FlashOp=0x00000000
[13:32:48.462]    __Result=0x00000000
[13:32:48.463]  </debugvars>
[13:32:48.463]  
[13:32:48.463]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:32:48.463]    <block atomic="false" info="">
[13:32:48.463]      __var SW_DP_ABORT       = 0x0;
[13:32:48.463]        // -> [SW_DP_ABORT <= 0x00000000]
[13:32:48.463]      __var DP_CTRL_STAT      = 0x4;
[13:32:48.463]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:32:48.463]      __var DP_SELECT         = 0x8;
[13:32:48.463]        // -> [DP_SELECT <= 0x00000008]
[13:32:48.463]      __var powered_down      = 0;
[13:32:48.464]        // -> [powered_down <= 0x00000000]
[13:32:48.464]      WriteDP(DP_SELECT, 0x00000000);
[13:32:48.470]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:32:48.470]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:32:48.478]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:32:48.478]        // -> [powered_down <= 0x00000001]
[13:32:48.478]    </block>
[13:32:48.478]    <control if="powered_down" while="" timeout="0" info="">
[13:32:48.481]      // if-block "powered_down"
[13:32:48.481]        // =>  TRUE
[13:32:48.481]      <block atomic="false" info="">
[13:32:48.482]        Message(0, "Debug/System power-up request sent");
[13:32:48.482]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:32:48.486]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:32:48.486]      </block>
[13:32:48.486]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:32:48.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:32:48.490]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:32:48.490]        // while-condition  =>  FALSE
[13:32:48.490]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:32:48.490]      </control>
[13:32:48.490]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:32:48.490]        // if-block "(__protocol & 0xFFFF) == 1"
[13:32:48.490]          // =>  FALSE
[13:32:48.490]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:32:48.491]      </control>
[13:32:48.491]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:32:48.491]        // if-block "(__protocol & 0xFFFF) == 2"
[13:32:48.491]          // =>  TRUE
[13:32:48.491]        <block atomic="false" info="">
[13:32:48.491]          Message(0, "executing SWD power up");
[13:32:48.495]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:32:48.498]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:32:48.498]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:32:48.505]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:32:48.505]        </block>
[13:32:48.505]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:32:48.505]      </control>
[13:32:48.505]      // end if-block "powered_down"
[13:32:48.505]    </control>
[13:32:48.505]    <block atomic="false" info="">
[13:32:48.505]      __var DEBUG_PORT_VAL    = 0;
[13:32:48.505]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:32:48.505]      __var ACCESS_POINT_VAL  = 0;
[13:32:48.505]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:32:48.505]      __ap = 1; 
[13:32:48.505]        // -> [__ap <= 0x00000001]
[13:32:48.505]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:32:48.513]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:32:48.513]      __ap = 4;
[13:32:48.513]        // -> [__ap <= 0x00000004]
[13:32:48.514]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:32:48.518]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:32:48.518]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:32:48.518]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:32:48.518]    </block>
[13:32:48.518]    <block atomic="false" info="">
[13:32:48.518]      __var nReset = 0x80;
[13:32:48.518]        // -> [nReset <= 0x00000080]
[13:32:48.518]      __var canReadPins = 0;
[13:32:48.518]        // -> [canReadPins <= 0x00000000]
[13:32:48.518]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:32:48.523]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:32:48.523]        // -> [canReadPins <= 0x00000001]
[13:32:48.523]    </block>
[13:32:48.523]    <control if="" while="1" timeout="200" info="">
[13:32:48.523]      // while "1"  (timeout="200")
[13:32:48.523]      // while-condition  =>  TRUE
[13:32:48.523]      // while "1"  (timeout="200")
[13:32:48.523]      // while-condition  =>  TRUE
[13:32:48.523]      // while "1"  (timeout="200")
[13:32:48.523]      // while-condition  =>  TRUE
[13:32:48.523]      // while "1"  (timeout="200")
[13:32:48.523]      // while-condition  =>  TRUE
[13:32:48.523]      // while "1"  (timeout="200")
[13:32:48.523]      // while-condition  =>  TRUE
[13:32:48.523]      // while "1"  (timeout="200")
[13:32:48.523]      // while-condition  =>  TRUE
[13:32:48.523]      // while "1"  (timeout="200")
[13:32:48.523]      // while-condition  =>  TRUE
[13:32:48.523]      // while "1"  (timeout="200")
[13:32:48.523]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.526]      // while-condition  =>  TRUE
[13:32:48.526]      // while "1"  (timeout="200")
[13:32:48.530]      // while-condition  =>  TRUE
[13:32:48.530]      // while "1"  (timeout="200")
[13:32:48.530]      // while-condition  =>  TRUE
[13:32:48.530]      // while "1"  (timeout="200")
[13:32:48.530]      // while-condition  =>  TRUE
[13:32:48.530]      // while "1"  (timeout="200")
[13:32:48.530]      // while-condition  =>  TRUE
[13:32:48.530]      // while "1"  (timeout="200")
[13:32:48.530]      // while-condition  =>  TRUE
[13:32:48.530]      // while "1"  (timeout="200")
[13:32:48.530]      // while-condition  =>  TRUE
[13:32:48.530]      // while "1"  (timeout="200")
[13:32:48.530]      // while-condition  =>  TRUE
[13:32:48.530]      // while "1"  (timeout="200")
[13:32:48.531]      // while-condition  =>  TRUE
[13:32:48.531]      // while "1"  (timeout="200")
[13:32:48.531]      // while-condition  =>  TRUE
[13:32:48.531]      // while "1"  (timeout="200")
[13:32:48.531]      // while-condition  =>  TRUE
[13:32:48.531]      // while "1"  (timeout="200")
[13:32:48.531]      // while-condition  =>  TRUE
[13:32:48.531]      // while "1"  (timeout="200")
[13:32:48.531]      // while-condition  =>  TRUE
[13:32:48.531]      // while "1"  (timeout="200")
[13:32:48.532]      // while-condition  =>  TRUE
[13:32:48.532]      // while "1"  (timeout="200")
[13:32:48.532]      // while-condition  =>  TRUE
[13:32:48.532]      // while "1"  (timeout="200")
[13:32:48.532]      // while-condition  =>  TRUE
[13:32:48.532]      // while "1"  (timeout="200")
[13:32:48.532]      // while-condition  =>  TRUE
[13:32:48.532]      // while "1"  (timeout="200")
[13:32:48.532]      // while-condition  =>  TRUE
[13:32:48.532]      // while "1"  (timeout="200")
[13:32:48.532]      // while-condition  =>  TRUE
[13:32:48.532]      // while "1"  (timeout="200")
[13:32:48.532]      // while-condition  =>  TRUE
[13:32:48.534]      // while "1"  (timeout="200")
[13:32:48.534]      // while-condition  =>  TRUE
[13:32:48.534]      // while "1"  (timeout="200")
[13:32:48.534]      // while-condition  =>  TRUE
[13:32:48.534]      // while "1"  (timeout="200")
[13:32:48.534]      // while-condition  =>  TRUE
[13:32:48.534]      // while "1"  (timeout="200")
[13:32:48.534]      // while-condition  =>  TRUE
[13:32:48.534]      // while "1"  (timeout="200")
[13:32:48.534]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.535]      // while-condition  =>  TRUE
[13:32:48.535]      // while "1"  (timeout="200")
[13:32:48.538]      // while-condition  =>  TRUE
[13:32:48.538]      // while "1"  (timeout="200")
[13:32:48.538]      // while  =>  TIMEOUT
[13:32:48.538]      // end while "1"
[13:32:48.538]    </control>
[13:32:48.538]    <control if="canReadPins" while="" timeout="0" info="">
[13:32:48.538]      // if-block "canReadPins"
[13:32:48.538]        // =>  TRUE
[13:32:48.538]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:32:48.538]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:32:48.541]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:32:48.541]        // while-condition  =>  FALSE
[13:32:48.541]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:32:48.541]      </control>
[13:32:48.541]      // end if-block "canReadPins"
[13:32:48.541]    </control>
[13:32:48.542]    <control if="!canReadPins" while="" timeout="0" info="">
[13:32:48.543]      // if-block "!canReadPins"
[13:32:48.543]        // =>  FALSE
[13:32:48.543]      // skip if-block "!canReadPins"
[13:32:48.543]    </control>
[13:32:48.543]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:32:48.543]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:32:48.543]        // =>  TRUE
[13:32:48.543]      <block atomic="false" info="">
[13:32:48.543]        WriteAP(0x00, 0x190008);
[13:32:48.547]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:32:48.547]        WriteAP(0xF0, 0x01);
[13:32:48.554]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:32:48.554]      </block>
[13:32:48.554]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:32:48.554]    </control>
[13:32:48.554]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:32:48.554]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:32:48.554]        // =>  FALSE
[13:32:48.554]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:32:48.554]    </control>
[13:32:48.554]    <block atomic="false" info="">
[13:32:48.554]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:32:48.562]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:32:48.562]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:32:48.562]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:32:48.563]      __ap = 0; //lets make sure we reset the access point selection
[13:32:48.563]        // -> [__ap <= 0x00000000]
[13:32:48.563]    </block>
[13:32:48.563]  </sequence>
[13:32:48.565]  
[13:32:48.597]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:32:48.597]  
[13:32:48.597]  <debugvars>
[13:32:48.597]    // Pre-defined
[13:32:48.597]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:32:48.597]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:32:48.597]    __dp=0x00000000
[13:32:48.597]    __ap=0x00000000
[13:32:48.597]    __traceout=0x00000000      (Trace Disabled)
[13:32:48.597]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:32:48.601]    __FlashAddr=0x00000000
[13:32:48.601]    __FlashLen=0x00000000
[13:32:48.601]    __FlashArg=0x00000000
[13:32:48.601]    __FlashOp=0x00000000
[13:32:48.601]    __Result=0x00000000
[13:32:48.601]  </debugvars>
[13:32:48.601]  
[13:32:48.601]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:32:48.601]    <block atomic="false" info="">
[13:32:48.601]      __var deviceID = 0;
[13:32:48.602]        // -> [deviceID <= 0x00000000]
[13:32:48.602]      __var version = 0;
[13:32:48.602]        // -> [version <= 0x00000000]
[13:32:48.602]      __var partNum = 0;
[13:32:48.602]        // -> [partNum <= 0x00000000]
[13:32:48.602]      __var manuf = 0;
[13:32:48.602]        // -> [manuf <= 0x00000000]
[13:32:48.602]      __var isMSPM0G1X0X_G3X0X = 0;
[13:32:48.602]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:32:48.602]      __var isProduction = 0;
[13:32:48.602]        // -> [isProduction <= 0x00000000]
[13:32:48.602]      __var continueId = 0;
[13:32:48.602]        // -> [continueId <= 0x00000000]
[13:32:48.602]      deviceID =   Read32(0x41C40004);
[13:32:48.612]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:32:48.612]        // -> [deviceID <= 0x2BB8802F]
[13:32:48.612]      version = deviceID >> 28;
[13:32:48.612]        // -> [version <= 0x00000002]
[13:32:48.613]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:32:48.613]        // -> [partNum <= 0x0000BB88]
[13:32:48.613]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:32:48.613]        // -> [manuf <= 0x00000017]
[13:32:48.613]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:32:48.613]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:32:48.613]      isProduction = (version > 0);
[13:32:48.613]        // -> [isProduction <= 0x00000001]
[13:32:48.613]    </block>
[13:32:48.613]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:32:48.613]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:32:48.613]        // =>  FALSE
[13:32:48.613]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:32:48.613]    </control>
[13:32:48.613]    <control if="continueId == 4" while="" timeout="0" info="">
[13:32:48.613]      // if-block "continueId == 4"
[13:32:48.613]        // =>  FALSE
[13:32:48.613]      // skip if-block "continueId == 4"
[13:32:48.613]    </control>
[13:32:48.613]    <control if="!isProduction" while="" timeout="0" info="">
[13:32:48.613]      // if-block "!isProduction"
[13:32:48.613]        // =>  FALSE
[13:32:48.613]      // skip if-block "!isProduction"
[13:32:48.613]    </control>
[13:32:48.613]  </sequence>
[13:32:48.613]  
[13:32:56.381]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:32:56.381]  
[13:32:56.390]  <debugvars>
[13:32:56.390]    // Pre-defined
[13:32:56.390]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:32:56.390]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:32:56.390]    __dp=0x00000000
[13:32:56.390]    __ap=0x00000000
[13:32:56.390]    __traceout=0x00000000      (Trace Disabled)
[13:32:56.390]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:32:56.391]    __FlashAddr=0x00000000
[13:32:56.391]    __FlashLen=0x00000000
[13:32:56.391]    __FlashArg=0x00000000
[13:32:56.391]    __FlashOp=0x00000000
[13:32:56.391]    __Result=0x00000000
[13:32:56.391]  </debugvars>
[13:32:56.391]  
[13:32:56.391]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:32:56.391]    <block atomic="false" info="">
[13:32:56.392]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:32:56.392]        // -> [isSWJ <= 0x00000001]
[13:32:56.393]      __var hasDormant = __protocol & 0x00020000;
[13:32:56.393]        // -> [hasDormant <= 0x00000000]
[13:32:56.393]      __var protType   = __protocol & 0x0000FFFF;
[13:32:56.393]        // -> [protType <= 0x00000002]
[13:32:56.393]    </block>
[13:32:56.393]    <control if="protType == 1" while="" timeout="0" info="">
[13:32:56.394]      // if-block "protType == 1"
[13:32:56.394]        // =>  FALSE
[13:32:56.394]      // skip if-block "protType == 1"
[13:32:56.394]    </control>
[13:32:56.394]    <control if="protType == 2" while="" timeout="0" info="">
[13:32:56.394]      // if-block "protType == 2"
[13:32:56.394]        // =>  TRUE
[13:32:56.394]      <control if="isSWJ" while="" timeout="0" info="">
[13:32:56.394]        // if-block "isSWJ"
[13:32:56.395]          // =>  TRUE
[13:32:56.395]        <control if="hasDormant" while="" timeout="0" info="">
[13:32:56.395]          // if-block "hasDormant"
[13:32:56.395]            // =>  FALSE
[13:32:56.395]          // skip if-block "hasDormant"
[13:32:56.395]        </control>
[13:32:56.395]        <control if="!hasDormant" while="" timeout="0" info="">
[13:32:56.395]          // if-block "!hasDormant"
[13:32:56.395]            // =>  TRUE
[13:32:56.395]          <block atomic="false" info="">
[13:32:56.395]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:32:56.403]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:32:56.403]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:32:56.405]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:32:56.405]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:32:56.407]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:32:56.407]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:32:56.408]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:32:56.408]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:32:56.417]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:32:56.417]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:32:56.420]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:32:56.420]          </block>
[13:32:56.420]          // end if-block "!hasDormant"
[13:32:56.420]        </control>
[13:32:56.420]        // end if-block "isSWJ"
[13:32:56.420]      </control>
[13:32:56.421]      <control if="!isSWJ" while="" timeout="0" info="">
[13:32:56.421]        // if-block "!isSWJ"
[13:32:56.421]          // =>  FALSE
[13:32:56.421]        // skip if-block "!isSWJ"
[13:32:56.421]      </control>
[13:32:56.421]      <block atomic="false" info="">
[13:32:56.421]        ReadDP(0x0);
[13:32:56.435]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:32:56.435]      </block>
[13:32:56.436]      // end if-block "protType == 2"
[13:32:56.436]    </control>
[13:32:56.436]  </sequence>
[13:32:56.436]  
[13:32:56.438]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:32:56.438]  
[13:32:56.439]  <debugvars>
[13:32:56.439]    // Pre-defined
[13:32:56.439]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:32:56.439]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:32:56.439]    __dp=0x00000000
[13:32:56.439]    __ap=0x00000000
[13:32:56.439]    __traceout=0x00000000      (Trace Disabled)
[13:32:56.439]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:32:56.439]    __FlashAddr=0x00000000
[13:32:56.439]    __FlashLen=0x00000000
[13:32:56.439]    __FlashArg=0x00000000
[13:32:56.439]    __FlashOp=0x00000000
[13:32:56.439]    __Result=0x00000000
[13:32:56.439]  </debugvars>
[13:32:56.439]  
[13:32:56.439]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:32:56.439]    <block atomic="false" info="">
[13:32:56.439]      __var SW_DP_ABORT       = 0x0;
[13:32:56.439]        // -> [SW_DP_ABORT <= 0x00000000]
[13:32:56.439]      __var DP_CTRL_STAT      = 0x4;
[13:32:56.439]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:32:56.441]      __var DP_SELECT         = 0x8;
[13:32:56.441]        // -> [DP_SELECT <= 0x00000008]
[13:32:56.441]      __var powered_down      = 0;
[13:32:56.441]        // -> [powered_down <= 0x00000000]
[13:32:56.441]      WriteDP(DP_SELECT, 0x00000000);
[13:32:56.443]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:32:56.443]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:32:56.447]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:32:56.447]        // -> [powered_down <= 0x00000001]
[13:32:56.447]    </block>
[13:32:56.447]    <control if="powered_down" while="" timeout="0" info="">
[13:32:56.447]      // if-block "powered_down"
[13:32:56.447]        // =>  TRUE
[13:32:56.447]      <block atomic="false" info="">
[13:32:56.447]        Message(0, "Debug/System power-up request sent");
[13:32:56.452]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:32:56.455]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:32:56.455]      </block>
[13:32:56.455]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:32:56.455]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:32:56.459]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:32:56.459]        // while-condition  =>  FALSE
[13:32:56.459]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:32:56.459]      </control>
[13:32:56.461]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:32:56.461]        // if-block "(__protocol & 0xFFFF) == 1"
[13:32:56.461]          // =>  FALSE
[13:32:56.461]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:32:56.461]      </control>
[13:32:56.461]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:32:56.461]        // if-block "(__protocol & 0xFFFF) == 2"
[13:32:56.461]          // =>  TRUE
[13:32:56.461]        <block atomic="false" info="">
[13:32:56.461]          Message(0, "executing SWD power up");
[13:32:56.463]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:32:56.465]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:32:56.467]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:32:56.467]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:32:56.467]        </block>
[13:32:56.467]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:32:56.467]      </control>
[13:32:56.467]      // end if-block "powered_down"
[13:32:56.467]    </control>
[13:32:56.467]    <block atomic="false" info="">
[13:32:56.467]      __var DEBUG_PORT_VAL    = 0;
[13:32:56.467]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:32:56.467]      __var ACCESS_POINT_VAL  = 0;
[13:32:56.467]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:32:56.467]      __ap = 1; 
[13:32:56.467]        // -> [__ap <= 0x00000001]
[13:32:56.467]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:32:56.475]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:32:56.475]      __ap = 4;
[13:32:56.475]        // -> [__ap <= 0x00000004]
[13:32:56.475]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:32:56.482]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:32:56.482]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:32:56.482]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:32:56.483]    </block>
[13:32:56.483]    <block atomic="false" info="">
[13:32:56.483]      __var nReset = 0x80;
[13:32:56.484]        // -> [nReset <= 0x00000080]
[13:32:56.484]      __var canReadPins = 0;
[13:32:56.484]        // -> [canReadPins <= 0x00000000]
[13:32:56.484]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:32:56.484]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:32:56.484]        // -> [canReadPins <= 0x00000001]
[13:32:56.484]    </block>
[13:32:56.484]    <control if="" while="1" timeout="200" info="">
[13:32:56.484]      // while "1"  (timeout="200")
[13:32:56.484]      // while-condition  =>  TRUE
[13:32:56.484]      // while "1"  (timeout="200")
[13:32:56.484]      // while-condition  =>  TRUE
[13:32:56.484]      // while "1"  (timeout="200")
[13:32:56.484]      // while-condition  =>  TRUE
[13:32:56.484]      // while "1"  (timeout="200")
[13:32:56.484]      // while-condition  =>  TRUE
[13:32:56.484]      // while "1"  (timeout="200")
[13:32:56.484]      // while-condition  =>  TRUE
[13:32:56.484]      // while "1"  (timeout="200")
[13:32:56.484]      // while-condition  =>  TRUE
[13:32:56.484]      // while "1"  (timeout="200")
[13:32:56.484]      // while-condition  =>  TRUE
[13:32:56.484]      // while "1"  (timeout="200")
[13:32:56.484]      // while-condition  =>  TRUE
[13:32:56.484]      // while "1"  (timeout="200")
[13:32:56.484]      // while-condition  =>  TRUE
[13:32:56.484]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.488]      // while-condition  =>  TRUE
[13:32:56.488]      // while "1"  (timeout="200")
[13:32:56.491]      // while-condition  =>  TRUE
[13:32:56.491]      // while "1"  (timeout="200")
[13:32:56.491]      // while  =>  TIMEOUT
[13:32:56.491]      // end while "1"
[13:32:56.491]    </control>
[13:32:56.491]    <control if="canReadPins" while="" timeout="0" info="">
[13:32:56.491]      // if-block "canReadPins"
[13:32:56.491]        // =>  TRUE
[13:32:56.492]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:32:56.492]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:32:56.492]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:32:56.492]        // while-condition  =>  FALSE
[13:32:56.492]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:32:56.492]      </control>
[13:32:56.492]      // end if-block "canReadPins"
[13:32:56.492]    </control>
[13:32:56.492]    <control if="!canReadPins" while="" timeout="0" info="">
[13:32:56.492]      // if-block "!canReadPins"
[13:32:56.492]        // =>  FALSE
[13:32:56.492]      // skip if-block "!canReadPins"
[13:32:56.492]    </control>
[13:32:56.492]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:32:56.492]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:32:56.496]        // =>  TRUE
[13:32:56.496]      <block atomic="false" info="">
[13:32:56.496]        WriteAP(0x00, 0x190008);
[13:32:56.496]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:32:56.496]        WriteAP(0xF0, 0x01);
[13:32:56.504]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:32:56.504]      </block>
[13:32:56.504]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:32:56.504]    </control>
[13:32:56.504]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:32:56.504]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:32:56.504]        // =>  FALSE
[13:32:56.504]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:32:56.504]    </control>
[13:32:56.504]    <block atomic="false" info="">
[13:32:56.504]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:32:56.512]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:32:56.512]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:32:56.512]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:32:56.514]      __ap = 0; //lets make sure we reset the access point selection
[13:32:56.514]        // -> [__ap <= 0x00000000]
[13:32:56.514]    </block>
[13:32:56.514]  </sequence>
[13:32:56.514]  
[13:32:56.552]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:32:56.552]  
[13:32:56.552]  <debugvars>
[13:32:56.552]    // Pre-defined
[13:32:56.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:32:56.552]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:32:56.553]    __dp=0x00000000
[13:32:56.553]    __ap=0x00000000
[13:32:56.553]    __traceout=0x00000000      (Trace Disabled)
[13:32:56.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:32:56.553]    __FlashAddr=0x00000000
[13:32:56.553]    __FlashLen=0x00000000
[13:32:56.553]    __FlashArg=0x00000000
[13:32:56.553]    __FlashOp=0x00000000
[13:32:56.553]    __Result=0x00000000
[13:32:56.553]  </debugvars>
[13:32:56.553]  
[13:32:56.553]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:32:56.553]    <block atomic="false" info="">
[13:32:56.553]      __var deviceID = 0;
[13:32:56.553]        // -> [deviceID <= 0x00000000]
[13:32:56.553]      __var version = 0;
[13:32:56.553]        // -> [version <= 0x00000000]
[13:32:56.553]      __var partNum = 0;
[13:32:56.553]        // -> [partNum <= 0x00000000]
[13:32:56.553]      __var manuf = 0;
[13:32:56.553]        // -> [manuf <= 0x00000000]
[13:32:56.553]      __var isMSPM0G1X0X_G3X0X = 0;
[13:32:56.553]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:32:56.553]      __var isProduction = 0;
[13:32:56.553]        // -> [isProduction <= 0x00000000]
[13:32:56.553]      __var continueId = 0;
[13:32:56.553]        // -> [continueId <= 0x00000000]
[13:32:56.553]      deviceID =   Read32(0x41C40004);
[13:32:56.561]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:32:56.562]        // -> [deviceID <= 0x2BB8802F]
[13:32:56.562]      version = deviceID >> 28;
[13:32:56.562]        // -> [version <= 0x00000002]
[13:32:56.562]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:32:56.562]        // -> [partNum <= 0x0000BB88]
[13:32:56.562]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:32:56.562]        // -> [manuf <= 0x00000017]
[13:32:56.562]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:32:56.563]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:32:56.563]      isProduction = (version > 0);
[13:32:56.563]        // -> [isProduction <= 0x00000001]
[13:32:56.563]    </block>
[13:32:56.563]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:32:56.563]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:32:56.563]        // =>  FALSE
[13:32:56.563]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:32:56.563]    </control>
[13:32:56.563]    <control if="continueId == 4" while="" timeout="0" info="">
[13:32:56.564]      // if-block "continueId == 4"
[13:32:56.564]        // =>  FALSE
[13:32:56.564]      // skip if-block "continueId == 4"
[13:32:56.564]    </control>
[13:32:56.564]    <control if="!isProduction" while="" timeout="0" info="">
[13:32:56.564]      // if-block "!isProduction"
[13:32:56.564]        // =>  FALSE
[13:32:56.564]      // skip if-block "!isProduction"
[13:32:56.564]    </control>
[13:32:56.564]  </sequence>
[13:32:56.564]  
[13:38:18.446]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:38:18.446]  
[13:38:18.458]  <debugvars>
[13:38:18.458]    // Pre-defined
[13:38:18.458]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:38:18.458]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:38:18.458]    __dp=0x00000000
[13:38:18.458]    __ap=0x00000000
[13:38:18.458]    __traceout=0x00000000      (Trace Disabled)
[13:38:18.458]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:38:18.458]    __FlashAddr=0x00000000
[13:38:18.458]    __FlashLen=0x00000000
[13:38:18.458]    __FlashArg=0x00000000
[13:38:18.458]    __FlashOp=0x00000000
[13:38:18.458]    __Result=0x00000000
[13:38:18.458]  </debugvars>
[13:38:18.458]  
[13:38:18.458]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:38:18.458]    <block atomic="false" info="">
[13:38:18.460]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:38:18.460]        // -> [isSWJ <= 0x00000001]
[13:38:18.460]      __var hasDormant = __protocol & 0x00020000;
[13:38:18.460]        // -> [hasDormant <= 0x00000000]
[13:38:18.460]      __var protType   = __protocol & 0x0000FFFF;
[13:38:18.460]        // -> [protType <= 0x00000002]
[13:38:18.460]    </block>
[13:38:18.460]    <control if="protType == 1" while="" timeout="0" info="">
[13:38:18.460]      // if-block "protType == 1"
[13:38:18.460]        // =>  FALSE
[13:38:18.460]      // skip if-block "protType == 1"
[13:38:18.461]    </control>
[13:38:18.461]    <control if="protType == 2" while="" timeout="0" info="">
[13:38:18.461]      // if-block "protType == 2"
[13:38:18.461]        // =>  TRUE
[13:38:18.461]      <control if="isSWJ" while="" timeout="0" info="">
[13:38:18.461]        // if-block "isSWJ"
[13:38:18.461]          // =>  TRUE
[13:38:18.462]        <control if="hasDormant" while="" timeout="0" info="">
[13:38:18.462]          // if-block "hasDormant"
[13:38:18.462]            // =>  FALSE
[13:38:18.462]          // skip if-block "hasDormant"
[13:38:18.462]        </control>
[13:38:18.462]        <control if="!hasDormant" while="" timeout="0" info="">
[13:38:18.462]          // if-block "!hasDormant"
[13:38:18.462]            // =>  TRUE
[13:38:18.462]          <block atomic="false" info="">
[13:38:18.462]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:38:18.462]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:38:18.462]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:38:18.462]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:38:18.462]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:38:18.470]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:38:18.470]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:38:18.471]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:38:18.471]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:38:18.477]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:38:18.477]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:38:18.477]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:38:18.477]          </block>
[13:38:18.479]          // end if-block "!hasDormant"
[13:38:18.479]        </control>
[13:38:18.479]        // end if-block "isSWJ"
[13:38:18.479]      </control>
[13:38:18.479]      <control if="!isSWJ" while="" timeout="0" info="">
[13:38:18.479]        // if-block "!isSWJ"
[13:38:18.479]          // =>  FALSE
[13:38:18.479]        // skip if-block "!isSWJ"
[13:38:18.479]      </control>
[13:38:18.479]      <block atomic="false" info="">
[13:38:18.479]        ReadDP(0x0);
[13:38:18.481]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:38:18.481]      </block>
[13:38:18.481]      // end if-block "protType == 2"
[13:38:18.481]    </control>
[13:38:18.481]  </sequence>
[13:38:18.481]  
[13:38:18.487]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:38:18.487]  
[13:38:18.487]  <debugvars>
[13:38:18.487]    // Pre-defined
[13:38:18.487]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:38:18.487]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:38:18.487]    __dp=0x00000000
[13:38:18.487]    __ap=0x00000000
[13:38:18.487]    __traceout=0x00000000      (Trace Disabled)
[13:38:18.487]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:38:18.487]    __FlashAddr=0x00000000
[13:38:18.487]    __FlashLen=0x00000000
[13:38:18.487]    __FlashArg=0x00000000
[13:38:18.487]    __FlashOp=0x00000000
[13:38:18.487]    __Result=0x00000000
[13:38:18.487]  </debugvars>
[13:38:18.487]  
[13:38:18.487]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:38:18.487]    <block atomic="false" info="">
[13:38:18.487]      __var SW_DP_ABORT       = 0x0;
[13:38:18.487]        // -> [SW_DP_ABORT <= 0x00000000]
[13:38:18.489]      __var DP_CTRL_STAT      = 0x4;
[13:38:18.489]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:38:18.489]      __var DP_SELECT         = 0x8;
[13:38:18.489]        // -> [DP_SELECT <= 0x00000008]
[13:38:18.489]      __var powered_down      = 0;
[13:38:18.489]        // -> [powered_down <= 0x00000000]
[13:38:18.489]      WriteDP(DP_SELECT, 0x00000000);
[13:38:18.490]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:38:18.490]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:38:18.494]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:38:18.494]        // -> [powered_down <= 0x00000001]
[13:38:18.494]    </block>
[13:38:18.494]    <control if="powered_down" while="" timeout="0" info="">
[13:38:18.494]      // if-block "powered_down"
[13:38:18.494]        // =>  TRUE
[13:38:18.494]      <block atomic="false" info="">
[13:38:18.494]        Message(0, "Debug/System power-up request sent");
[13:38:18.494]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:38:18.499]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:38:18.499]      </block>
[13:38:18.499]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:38:18.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:38:18.502]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:38:18.502]        // while-condition  =>  FALSE
[13:38:18.502]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:38:18.502]      </control>
[13:38:18.502]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:38:18.502]        // if-block "(__protocol & 0xFFFF) == 1"
[13:38:18.502]          // =>  FALSE
[13:38:18.502]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:38:18.502]      </control>
[13:38:18.502]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:38:18.502]        // if-block "(__protocol & 0xFFFF) == 2"
[13:38:18.502]          // =>  TRUE
[13:38:18.502]        <block atomic="false" info="">
[13:38:18.502]          Message(0, "executing SWD power up");
[13:38:18.502]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:38:18.508]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:38:18.508]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:38:18.510]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:38:18.510]        </block>
[13:38:18.510]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:38:18.510]      </control>
[13:38:18.510]      // end if-block "powered_down"
[13:38:18.510]    </control>
[13:38:18.510]    <block atomic="false" info="">
[13:38:18.510]      __var DEBUG_PORT_VAL    = 0;
[13:38:18.510]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:38:18.510]      __var ACCESS_POINT_VAL  = 0;
[13:38:18.510]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:38:18.510]      __ap = 1; 
[13:38:18.510]        // -> [__ap <= 0x00000001]
[13:38:18.510]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:38:18.510]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:38:18.510]      __ap = 4;
[13:38:18.510]        // -> [__ap <= 0x00000004]
[13:38:18.510]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:38:18.521]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:38:18.521]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:38:18.521]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:38:18.521]    </block>
[13:38:18.521]    <block atomic="false" info="">
[13:38:18.521]      __var nReset = 0x80;
[13:38:18.521]        // -> [nReset <= 0x00000080]
[13:38:18.521]      __var canReadPins = 0;
[13:38:18.521]        // -> [canReadPins <= 0x00000000]
[13:38:18.521]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:38:18.528]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:38:18.528]        // -> [canReadPins <= 0x00000001]
[13:38:18.528]    </block>
[13:38:18.528]    <control if="" while="1" timeout="200" info="">
[13:38:18.528]      // while "1"  (timeout="200")
[13:38:18.528]      // while-condition  =>  TRUE
[13:38:18.529]      // while "1"  (timeout="200")
[13:38:18.529]      // while-condition  =>  TRUE
[13:38:18.529]      // while "1"  (timeout="200")
[13:38:18.529]      // while-condition  =>  TRUE
[13:38:18.529]      // while "1"  (timeout="200")
[13:38:18.529]      // while-condition  =>  TRUE
[13:38:18.529]      // while "1"  (timeout="200")
[13:38:18.529]      // while-condition  =>  TRUE
[13:38:18.529]      // while "1"  (timeout="200")
[13:38:18.529]      // while-condition  =>  TRUE
[13:38:18.529]      // while "1"  (timeout="200")
[13:38:18.529]      // while-condition  =>  TRUE
[13:38:18.530]      // while "1"  (timeout="200")
[13:38:18.530]      // while-condition  =>  TRUE
[13:38:18.530]      // while "1"  (timeout="200")
[13:38:18.530]      // while-condition  =>  TRUE
[13:38:18.530]      // while "1"  (timeout="200")
[13:38:18.530]      // while-condition  =>  TRUE
[13:38:18.530]      // while "1"  (timeout="200")
[13:38:18.530]      // while-condition  =>  TRUE
[13:38:18.530]      // while "1"  (timeout="200")
[13:38:18.530]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.531]      // while "1"  (timeout="200")
[13:38:18.531]      // while-condition  =>  TRUE
[13:38:18.538]      // while "1"  (timeout="200")
[13:38:18.538]      // while  =>  TIMEOUT
[13:38:18.538]      // end while "1"
[13:38:18.538]    </control>
[13:38:18.538]    <control if="canReadPins" while="" timeout="0" info="">
[13:38:18.538]      // if-block "canReadPins"
[13:38:18.538]        // =>  TRUE
[13:38:18.538]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:38:18.538]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:38:18.541]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:38:18.541]        // while-condition  =>  FALSE
[13:38:18.541]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:38:18.541]      </control>
[13:38:18.541]      // end if-block "canReadPins"
[13:38:18.541]    </control>
[13:38:18.541]    <control if="!canReadPins" while="" timeout="0" info="">
[13:38:18.541]      // if-block "!canReadPins"
[13:38:18.541]        // =>  FALSE
[13:38:18.541]      // skip if-block "!canReadPins"
[13:38:18.541]    </control>
[13:38:18.541]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:38:18.541]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:38:18.541]        // =>  TRUE
[13:38:18.541]      <block atomic="false" info="">
[13:38:18.541]        WriteAP(0x00, 0x190008);
[13:38:18.541]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:38:18.541]        WriteAP(0xF0, 0x01);
[13:38:18.551]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:38:18.552]      </block>
[13:38:18.552]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:38:18.552]    </control>
[13:38:18.552]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:38:18.552]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:38:18.552]        // =>  FALSE
[13:38:18.552]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:38:18.552]    </control>
[13:38:18.552]    <block atomic="false" info="">
[13:38:18.552]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:38:18.552]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:38:18.552]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:38:18.552]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:38:18.552]      __ap = 0; //lets make sure we reset the access point selection
[13:38:18.552]        // -> [__ap <= 0x00000000]
[13:38:18.552]    </block>
[13:38:18.552]  </sequence>
[13:38:18.552]  
[13:38:18.592]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:38:18.592]  
[13:38:18.592]  <debugvars>
[13:38:18.592]    // Pre-defined
[13:38:18.592]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:38:18.592]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:38:18.592]    __dp=0x00000000
[13:38:18.592]    __ap=0x00000000
[13:38:18.592]    __traceout=0x00000000      (Trace Disabled)
[13:38:18.592]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:38:18.592]    __FlashAddr=0x00000000
[13:38:18.592]    __FlashLen=0x00000000
[13:38:18.592]    __FlashArg=0x00000000
[13:38:18.592]    __FlashOp=0x00000000
[13:38:18.592]    __Result=0x00000000
[13:38:18.592]  </debugvars>
[13:38:18.592]  
[13:38:18.592]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:38:18.592]    <block atomic="false" info="">
[13:38:18.592]      __var deviceID = 0;
[13:38:18.592]        // -> [deviceID <= 0x00000000]
[13:38:18.592]      __var version = 0;
[13:38:18.592]        // -> [version <= 0x00000000]
[13:38:18.592]      __var partNum = 0;
[13:38:18.595]        // -> [partNum <= 0x00000000]
[13:38:18.595]      __var manuf = 0;
[13:38:18.595]        // -> [manuf <= 0x00000000]
[13:38:18.595]      __var isMSPM0G1X0X_G3X0X = 0;
[13:38:18.595]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:38:18.595]      __var isProduction = 0;
[13:38:18.595]        // -> [isProduction <= 0x00000000]
[13:38:18.595]      __var continueId = 0;
[13:38:18.595]        // -> [continueId <= 0x00000000]
[13:38:18.595]      deviceID =   Read32(0x41C40004);
[13:38:18.602]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:38:18.602]        // -> [deviceID <= 0x2BB8802F]
[13:38:18.603]      version = deviceID >> 28;
[13:38:18.603]        // -> [version <= 0x00000002]
[13:38:18.603]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:38:18.603]        // -> [partNum <= 0x0000BB88]
[13:38:18.603]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:38:18.603]        // -> [manuf <= 0x00000017]
[13:38:18.603]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:38:18.603]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:38:18.603]      isProduction = (version > 0);
[13:38:18.603]        // -> [isProduction <= 0x00000001]
[13:38:18.603]    </block>
[13:38:18.603]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:38:18.603]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:38:18.603]        // =>  FALSE
[13:38:18.603]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:38:18.603]    </control>
[13:38:18.603]    <control if="continueId == 4" while="" timeout="0" info="">
[13:38:18.603]      // if-block "continueId == 4"
[13:38:18.603]        // =>  FALSE
[13:38:18.603]      // skip if-block "continueId == 4"
[13:38:18.603]    </control>
[13:38:18.603]    <control if="!isProduction" while="" timeout="0" info="">
[13:38:18.603]      // if-block "!isProduction"
[13:38:18.603]        // =>  FALSE
[13:38:18.603]      // skip if-block "!isProduction"
[13:38:18.603]    </control>
[13:38:18.603]  </sequence>
[13:38:18.603]  
[13:38:26.087]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:38:26.087]  
[13:38:26.095]  <debugvars>
[13:38:26.095]    // Pre-defined
[13:38:26.095]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:38:26.095]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:38:26.095]    __dp=0x00000000
[13:38:26.095]    __ap=0x00000000
[13:38:26.095]    __traceout=0x00000000      (Trace Disabled)
[13:38:26.095]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:38:26.095]    __FlashAddr=0x00000000
[13:38:26.095]    __FlashLen=0x00000000
[13:38:26.095]    __FlashArg=0x00000000
[13:38:26.095]    __FlashOp=0x00000000
[13:38:26.095]    __Result=0x00000000
[13:38:26.095]  </debugvars>
[13:38:26.095]  
[13:38:26.095]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:38:26.095]    <block atomic="false" info="">
[13:38:26.095]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:38:26.095]        // -> [isSWJ <= 0x00000001]
[13:38:26.095]      __var hasDormant = __protocol & 0x00020000;
[13:38:26.095]        // -> [hasDormant <= 0x00000000]
[13:38:26.095]      __var protType   = __protocol & 0x0000FFFF;
[13:38:26.095]        // -> [protType <= 0x00000002]
[13:38:26.095]    </block>
[13:38:26.095]    <control if="protType == 1" while="" timeout="0" info="">
[13:38:26.095]      // if-block "protType == 1"
[13:38:26.095]        // =>  FALSE
[13:38:26.095]      // skip if-block "protType == 1"
[13:38:26.095]    </control>
[13:38:26.095]    <control if="protType == 2" while="" timeout="0" info="">
[13:38:26.095]      // if-block "protType == 2"
[13:38:26.095]        // =>  TRUE
[13:38:26.095]      <control if="isSWJ" while="" timeout="0" info="">
[13:38:26.095]        // if-block "isSWJ"
[13:38:26.095]          // =>  TRUE
[13:38:26.095]        <control if="hasDormant" while="" timeout="0" info="">
[13:38:26.095]          // if-block "hasDormant"
[13:38:26.095]            // =>  FALSE
[13:38:26.100]          // skip if-block "hasDormant"
[13:38:26.100]        </control>
[13:38:26.100]        <control if="!hasDormant" while="" timeout="0" info="">
[13:38:26.100]          // if-block "!hasDormant"
[13:38:26.100]            // =>  TRUE
[13:38:26.100]          <block atomic="false" info="">
[13:38:26.100]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:38:26.102]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:38:26.102]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:38:26.102]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:38:26.102]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:38:26.102]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:38:26.102]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:38:26.109]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:38:26.109]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:38:26.112]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:38:26.112]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:38:26.120]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:38:26.120]          </block>
[13:38:26.120]          // end if-block "!hasDormant"
[13:38:26.120]        </control>
[13:38:26.120]        // end if-block "isSWJ"
[13:38:26.120]      </control>
[13:38:26.120]      <control if="!isSWJ" while="" timeout="0" info="">
[13:38:26.120]        // if-block "!isSWJ"
[13:38:26.120]          // =>  FALSE
[13:38:26.121]        // skip if-block "!isSWJ"
[13:38:26.121]      </control>
[13:38:26.121]      <block atomic="false" info="">
[13:38:26.121]        ReadDP(0x0);
[13:38:26.121]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:38:26.121]      </block>
[13:38:26.121]      // end if-block "protType == 2"
[13:38:26.121]    </control>
[13:38:26.121]  </sequence>
[13:38:26.121]  
[13:38:26.131]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:38:26.131]  
[13:38:26.131]  <debugvars>
[13:38:26.131]    // Pre-defined
[13:38:26.131]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:38:26.131]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:38:26.131]    __dp=0x00000000
[13:38:26.131]    __ap=0x00000000
[13:38:26.131]    __traceout=0x00000000      (Trace Disabled)
[13:38:26.131]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:38:26.133]    __FlashAddr=0x00000000
[13:38:26.133]    __FlashLen=0x00000000
[13:38:26.133]    __FlashArg=0x00000000
[13:38:26.133]    __FlashOp=0x00000000
[13:38:26.133]    __Result=0x00000000
[13:38:26.133]  </debugvars>
[13:38:26.133]  
[13:38:26.133]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:38:26.133]    <block atomic="false" info="">
[13:38:26.133]      __var SW_DP_ABORT       = 0x0;
[13:38:26.133]        // -> [SW_DP_ABORT <= 0x00000000]
[13:38:26.133]      __var DP_CTRL_STAT      = 0x4;
[13:38:26.133]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:38:26.133]      __var DP_SELECT         = 0x8;
[13:38:26.133]        // -> [DP_SELECT <= 0x00000008]
[13:38:26.133]      __var powered_down      = 0;
[13:38:26.133]        // -> [powered_down <= 0x00000000]
[13:38:26.133]      WriteDP(DP_SELECT, 0x00000000);
[13:38:26.133]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:38:26.133]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:38:26.133]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:38:26.133]        // -> [powered_down <= 0x00000001]
[13:38:26.133]    </block>
[13:38:26.133]    <control if="powered_down" while="" timeout="0" info="">
[13:38:26.133]      // if-block "powered_down"
[13:38:26.133]        // =>  TRUE
[13:38:26.133]      <block atomic="false" info="">
[13:38:26.133]        Message(0, "Debug/System power-up request sent");
[13:38:26.141]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:38:26.142]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:38:26.142]      </block>
[13:38:26.142]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:38:26.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:38:26.142]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:38:26.142]        // while-condition  =>  FALSE
[13:38:26.142]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:38:26.142]      </control>
[13:38:26.142]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:38:26.142]        // if-block "(__protocol & 0xFFFF) == 1"
[13:38:26.142]          // =>  FALSE
[13:38:26.142]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:38:26.142]      </control>
[13:38:26.142]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:38:26.142]        // if-block "(__protocol & 0xFFFF) == 2"
[13:38:26.142]          // =>  TRUE
[13:38:26.142]        <block atomic="false" info="">
[13:38:26.142]          Message(0, "executing SWD power up");
[13:38:26.142]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:38:26.154]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:38:26.154]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:38:26.156]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:38:26.156]        </block>
[13:38:26.156]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:38:26.156]      </control>
[13:38:26.156]      // end if-block "powered_down"
[13:38:26.156]    </control>
[13:38:26.156]    <block atomic="false" info="">
[13:38:26.156]      __var DEBUG_PORT_VAL    = 0;
[13:38:26.156]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:38:26.156]      __var ACCESS_POINT_VAL  = 0;
[13:38:26.159]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:38:26.159]      __ap = 1; 
[13:38:26.159]        // -> [__ap <= 0x00000001]
[13:38:26.159]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:38:26.161]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:38:26.161]      __ap = 4;
[13:38:26.161]        // -> [__ap <= 0x00000004]
[13:38:26.161]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:38:26.161]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:38:26.161]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:38:26.161]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:38:26.169]    </block>
[13:38:26.170]    <block atomic="false" info="">
[13:38:26.170]      __var nReset = 0x80;
[13:38:26.170]        // -> [nReset <= 0x00000080]
[13:38:26.170]      __var canReadPins = 0;
[13:38:26.170]        // -> [canReadPins <= 0x00000000]
[13:38:26.171]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:38:26.172]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:38:26.172]        // -> [canReadPins <= 0x00000001]
[13:38:26.172]    </block>
[13:38:26.172]    <control if="" while="1" timeout="200" info="">
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.172]      // while-condition  =>  TRUE
[13:38:26.172]      // while "1"  (timeout="200")
[13:38:26.180]      // while-condition  =>  TRUE
[13:38:26.180]      // while "1"  (timeout="200")
[13:38:26.180]      // while  =>  TIMEOUT
[13:38:26.180]      // end while "1"
[13:38:26.180]    </control>
[13:38:26.180]    <control if="canReadPins" while="" timeout="0" info="">
[13:38:26.180]      // if-block "canReadPins"
[13:38:26.180]        // =>  TRUE
[13:38:26.180]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:38:26.180]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:38:26.182]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:38:26.182]        // while-condition  =>  FALSE
[13:38:26.182]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:38:26.182]      </control>
[13:38:26.182]      // end if-block "canReadPins"
[13:38:26.182]    </control>
[13:38:26.182]    <control if="!canReadPins" while="" timeout="0" info="">
[13:38:26.182]      // if-block "!canReadPins"
[13:38:26.182]        // =>  FALSE
[13:38:26.182]      // skip if-block "!canReadPins"
[13:38:26.182]    </control>
[13:38:26.182]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:38:26.182]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:38:26.182]        // =>  TRUE
[13:38:26.182]      <block atomic="false" info="">
[13:38:26.182]        WriteAP(0x00, 0x190008);
[13:38:26.182]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:38:26.182]        WriteAP(0xF0, 0x01);
[13:38:26.191]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:38:26.191]      </block>
[13:38:26.191]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:38:26.191]    </control>
[13:38:26.191]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:38:26.191]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:38:26.191]        // =>  FALSE
[13:38:26.191]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:38:26.191]    </control>
[13:38:26.191]    <block atomic="false" info="">
[13:38:26.195]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:38:26.202]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:38:26.202]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:38:26.202]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:38:26.202]      __ap = 0; //lets make sure we reset the access point selection
[13:38:26.202]        // -> [__ap <= 0x00000000]
[13:38:26.202]    </block>
[13:38:26.202]  </sequence>
[13:38:26.202]  
[13:38:26.240]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:38:26.240]  
[13:38:26.240]  <debugvars>
[13:38:26.240]    // Pre-defined
[13:38:26.240]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:38:26.240]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:38:26.240]    __dp=0x00000000
[13:38:26.240]    __ap=0x00000000
[13:38:26.240]    __traceout=0x00000000      (Trace Disabled)
[13:38:26.240]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:38:26.240]    __FlashAddr=0x00000000
[13:38:26.240]    __FlashLen=0x00000000
[13:38:26.240]    __FlashArg=0x00000000
[13:38:26.240]    __FlashOp=0x00000000
[13:38:26.240]    __Result=0x00000000
[13:38:26.240]  </debugvars>
[13:38:26.240]  
[13:38:26.240]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:38:26.240]    <block atomic="false" info="">
[13:38:26.240]      __var deviceID = 0;
[13:38:26.240]        // -> [deviceID <= 0x00000000]
[13:38:26.240]      __var version = 0;
[13:38:26.240]        // -> [version <= 0x00000000]
[13:38:26.240]      __var partNum = 0;
[13:38:26.240]        // -> [partNum <= 0x00000000]
[13:38:26.240]      __var manuf = 0;
[13:38:26.240]        // -> [manuf <= 0x00000000]
[13:38:26.240]      __var isMSPM0G1X0X_G3X0X = 0;
[13:38:26.240]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:38:26.240]      __var isProduction = 0;
[13:38:26.240]        // -> [isProduction <= 0x00000000]
[13:38:26.240]      __var continueId = 0;
[13:38:26.240]        // -> [continueId <= 0x00000000]
[13:38:26.240]      deviceID =   Read32(0x41C40004);
[13:38:26.262]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:38:26.262]        // -> [deviceID <= 0x2BB8802F]
[13:38:26.262]      version = deviceID >> 28;
[13:38:26.262]        // -> [version <= 0x00000002]
[13:38:26.262]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:38:26.262]        // -> [partNum <= 0x0000BB88]
[13:38:26.262]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:38:26.262]        // -> [manuf <= 0x00000017]
[13:38:26.262]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:38:26.262]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:38:26.262]      isProduction = (version > 0);
[13:38:26.262]        // -> [isProduction <= 0x00000001]
[13:38:26.262]    </block>
[13:38:26.262]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:38:26.262]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:38:26.262]        // =>  FALSE
[13:38:26.262]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:38:26.262]    </control>
[13:38:26.262]    <control if="continueId == 4" while="" timeout="0" info="">
[13:38:26.262]      // if-block "continueId == 4"
[13:38:26.262]        // =>  FALSE
[13:38:26.262]      // skip if-block "continueId == 4"
[13:38:26.262]    </control>
[13:38:26.262]    <control if="!isProduction" while="" timeout="0" info="">
[13:38:26.265]      // if-block "!isProduction"
[13:38:26.265]        // =>  FALSE
[13:38:26.265]      // skip if-block "!isProduction"
[13:38:26.265]    </control>
[13:38:26.265]  </sequence>
[13:38:26.265]  
[13:47:32.354]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:47:32.354]  
[13:47:32.354]  <debugvars>
[13:47:32.354]    // Pre-defined
[13:47:32.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:47:32.355]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:47:32.355]    __dp=0x00000000
[13:47:32.355]    __ap=0x00000000
[13:47:32.355]    __traceout=0x00000000      (Trace Disabled)
[13:47:32.355]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:47:32.355]    __FlashAddr=0x00000000
[13:47:32.355]    __FlashLen=0x00000000
[13:47:32.355]    __FlashArg=0x00000000
[13:47:32.355]    __FlashOp=0x00000000
[13:47:32.355]    __Result=0x00000000
[13:47:32.355]  </debugvars>
[13:47:32.355]  
[13:47:32.355]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:47:32.355]    <block atomic="false" info="">
[13:47:32.355]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:47:32.356]        // -> [isSWJ <= 0x00000001]
[13:47:32.356]      __var hasDormant = __protocol & 0x00020000;
[13:47:32.356]        // -> [hasDormant <= 0x00000000]
[13:47:32.356]      __var protType   = __protocol & 0x0000FFFF;
[13:47:32.356]        // -> [protType <= 0x00000002]
[13:47:32.356]    </block>
[13:47:32.356]    <control if="protType == 1" while="" timeout="0" info="">
[13:47:32.356]      // if-block "protType == 1"
[13:47:32.356]        // =>  FALSE
[13:47:32.356]      // skip if-block "protType == 1"
[13:47:32.356]    </control>
[13:47:32.356]    <control if="protType == 2" while="" timeout="0" info="">
[13:47:32.356]      // if-block "protType == 2"
[13:47:32.356]        // =>  TRUE
[13:47:32.356]      <control if="isSWJ" while="" timeout="0" info="">
[13:47:32.356]        // if-block "isSWJ"
[13:47:32.356]          // =>  TRUE
[13:47:32.356]        <control if="hasDormant" while="" timeout="0" info="">
[13:47:32.356]          // if-block "hasDormant"
[13:47:32.358]            // =>  FALSE
[13:47:32.358]          // skip if-block "hasDormant"
[13:47:32.358]        </control>
[13:47:32.358]        <control if="!hasDormant" while="" timeout="0" info="">
[13:47:32.358]          // if-block "!hasDormant"
[13:47:32.358]            // =>  TRUE
[13:47:32.358]          <block atomic="false" info="">
[13:47:32.358]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:47:32.359]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:47:32.359]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:47:32.362]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:47:32.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:47:32.363]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:47:32.364]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:47:32.364]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:47:32.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:47:32.367]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:47:32.367]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:47:32.368]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:47:32.368]          </block>
[13:47:32.368]          // end if-block "!hasDormant"
[13:47:32.368]        </control>
[13:47:32.368]        // end if-block "isSWJ"
[13:47:32.368]      </control>
[13:47:32.368]      <control if="!isSWJ" while="" timeout="0" info="">
[13:47:32.368]        // if-block "!isSWJ"
[13:47:32.368]          // =>  FALSE
[13:47:32.368]        // skip if-block "!isSWJ"
[13:47:32.368]      </control>
[13:47:32.368]      <block atomic="false" info="">
[13:47:32.368]        ReadDP(0x0);
[13:47:32.371]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:47:32.371]      </block>
[13:47:32.371]      // end if-block "protType == 2"
[13:47:32.371]    </control>
[13:47:32.371]  </sequence>
[13:47:32.371]  
[13:47:32.374]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:47:32.374]  
[13:47:32.374]  <debugvars>
[13:47:32.374]    // Pre-defined
[13:47:32.374]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:47:32.375]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:47:32.375]    __dp=0x00000000
[13:47:32.375]    __ap=0x00000000
[13:47:32.375]    __traceout=0x00000000      (Trace Disabled)
[13:47:32.375]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:47:32.375]    __FlashAddr=0x00000000
[13:47:32.375]    __FlashLen=0x00000000
[13:47:32.375]    __FlashArg=0x00000000
[13:47:32.375]    __FlashOp=0x00000000
[13:47:32.375]    __Result=0x00000000
[13:47:32.375]  </debugvars>
[13:47:32.375]  
[13:47:32.375]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:47:32.375]    <block atomic="false" info="">
[13:47:32.375]      __var SW_DP_ABORT       = 0x0;
[13:47:32.375]        // -> [SW_DP_ABORT <= 0x00000000]
[13:47:32.375]      __var DP_CTRL_STAT      = 0x4;
[13:47:32.375]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:47:32.375]      __var DP_SELECT         = 0x8;
[13:47:32.375]        // -> [DP_SELECT <= 0x00000008]
[13:47:32.376]      __var powered_down      = 0;
[13:47:32.376]        // -> [powered_down <= 0x00000000]
[13:47:32.376]      WriteDP(DP_SELECT, 0x00000000);
[13:47:32.378]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:47:32.378]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:47:32.380]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:47:32.380]        // -> [powered_down <= 0x00000001]
[13:47:32.380]    </block>
[13:47:32.380]    <control if="powered_down" while="" timeout="0" info="">
[13:47:32.381]      // if-block "powered_down"
[13:47:32.381]        // =>  TRUE
[13:47:32.381]      <block atomic="false" info="">
[13:47:32.381]        Message(0, "Debug/System power-up request sent");
[13:47:32.386]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:47:32.387]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:47:32.387]      </block>
[13:47:32.387]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:47:32.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:47:32.389]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:47:32.389]        // while-condition  =>  FALSE
[13:47:32.389]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:47:32.389]      </control>
[13:47:32.391]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:47:32.391]        // if-block "(__protocol & 0xFFFF) == 1"
[13:47:32.391]          // =>  FALSE
[13:47:32.391]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:47:32.391]      </control>
[13:47:32.391]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:47:32.391]        // if-block "(__protocol & 0xFFFF) == 2"
[13:47:32.391]          // =>  TRUE
[13:47:32.391]        <block atomic="false" info="">
[13:47:32.391]          Message(0, "executing SWD power up");
[13:47:32.392]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:47:32.395]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:47:32.395]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:47:32.397]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:47:32.397]        </block>
[13:47:32.397]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:47:32.397]      </control>
[13:47:32.397]      // end if-block "powered_down"
[13:47:32.397]    </control>
[13:47:32.397]    <block atomic="false" info="">
[13:47:32.397]      __var DEBUG_PORT_VAL    = 0;
[13:47:32.397]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:47:32.397]      __var ACCESS_POINT_VAL  = 0;
[13:47:32.397]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:47:32.397]      __ap = 1; 
[13:47:32.397]        // -> [__ap <= 0x00000001]
[13:47:32.397]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:47:32.404]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:47:32.404]      __ap = 4;
[13:47:32.404]        // -> [__ap <= 0x00000004]
[13:47:32.404]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:47:32.407]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:47:32.407]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:47:32.407]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:47:32.410]    </block>
[13:47:32.410]    <block atomic="false" info="">
[13:47:32.410]      __var nReset = 0x80;
[13:47:32.410]        // -> [nReset <= 0x00000080]
[13:47:32.410]      __var canReadPins = 0;
[13:47:32.410]        // -> [canReadPins <= 0x00000000]
[13:47:32.410]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:47:32.416]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:47:32.416]        // -> [canReadPins <= 0x00000001]
[13:47:32.416]    </block>
[13:47:32.416]    <control if="" while="1" timeout="200" info="">
[13:47:32.416]      // while "1"  (timeout="200")
[13:47:32.416]      // while-condition  =>  TRUE
[13:47:32.416]      // while "1"  (timeout="200")
[13:47:32.416]      // while-condition  =>  TRUE
[13:47:32.416]      // while "1"  (timeout="200")
[13:47:32.416]      // while-condition  =>  TRUE
[13:47:32.417]      // while "1"  (timeout="200")
[13:47:32.417]      // while-condition  =>  TRUE
[13:47:32.417]      // while "1"  (timeout="200")
[13:47:32.417]      // while-condition  =>  TRUE
[13:47:32.417]      // while "1"  (timeout="200")
[13:47:32.417]      // while-condition  =>  TRUE
[13:47:32.417]      // while "1"  (timeout="200")
[13:47:32.417]      // while-condition  =>  TRUE
[13:47:32.417]      // while "1"  (timeout="200")
[13:47:32.417]      // while-condition  =>  TRUE
[13:47:32.417]      // while "1"  (timeout="200")
[13:47:32.417]      // while-condition  =>  TRUE
[13:47:32.417]      // while "1"  (timeout="200")
[13:47:32.418]      // while-condition  =>  TRUE
[13:47:32.418]      // while "1"  (timeout="200")
[13:47:32.418]      // while-condition  =>  TRUE
[13:47:32.418]      // while "1"  (timeout="200")
[13:47:32.418]      // while-condition  =>  TRUE
[13:47:32.418]      // while "1"  (timeout="200")
[13:47:32.418]      // while-condition  =>  TRUE
[13:47:32.418]      // while "1"  (timeout="200")
[13:47:32.418]      // while-condition  =>  TRUE
[13:47:32.418]      // while "1"  (timeout="200")
[13:47:32.418]      // while-condition  =>  TRUE
[13:47:32.418]      // while "1"  (timeout="200")
[13:47:32.418]      // while-condition  =>  TRUE
[13:47:32.418]      // while "1"  (timeout="200")
[13:47:32.418]      // while-condition  =>  TRUE
[13:47:32.418]      // while "1"  (timeout="200")
[13:47:32.418]      // while-condition  =>  TRUE
[13:47:32.418]      // while "1"  (timeout="200")
[13:47:32.420]      // while-condition  =>  TRUE
[13:47:32.420]      // while "1"  (timeout="200")
[13:47:32.420]      // while-condition  =>  TRUE
[13:47:32.420]      // while "1"  (timeout="200")
[13:47:32.420]      // while-condition  =>  TRUE
[13:47:32.420]      // while "1"  (timeout="200")
[13:47:32.420]      // while-condition  =>  TRUE
[13:47:32.420]      // while "1"  (timeout="200")
[13:47:32.420]      // while-condition  =>  TRUE
[13:47:32.420]      // while "1"  (timeout="200")
[13:47:32.420]      // while-condition  =>  TRUE
[13:47:32.420]      // while "1"  (timeout="200")
[13:47:32.420]      // while-condition  =>  TRUE
[13:47:32.420]      // while "1"  (timeout="200")
[13:47:32.421]      // while-condition  =>  TRUE
[13:47:32.421]      // while "1"  (timeout="200")
[13:47:32.421]      // while-condition  =>  TRUE
[13:47:32.421]      // while "1"  (timeout="200")
[13:47:32.421]      // while-condition  =>  TRUE
[13:47:32.421]      // while "1"  (timeout="200")
[13:47:32.421]      // while-condition  =>  TRUE
[13:47:32.421]      // while "1"  (timeout="200")
[13:47:32.421]      // while-condition  =>  TRUE
[13:47:32.421]      // while "1"  (timeout="200")
[13:47:32.421]      // while-condition  =>  TRUE
[13:47:32.421]      // while "1"  (timeout="200")
[13:47:32.421]      // while-condition  =>  TRUE
[13:47:32.421]      // while "1"  (timeout="200")
[13:47:32.421]      // while-condition  =>  TRUE
[13:47:32.423]      // while "1"  (timeout="200")
[13:47:32.423]      // while-condition  =>  TRUE
[13:47:32.423]      // while "1"  (timeout="200")
[13:47:32.423]      // while-condition  =>  TRUE
[13:47:32.424]      // while "1"  (timeout="200")
[13:47:32.424]      // while-condition  =>  TRUE
[13:47:32.424]      // while "1"  (timeout="200")
[13:47:32.424]      // while-condition  =>  TRUE
[13:47:32.424]      // while "1"  (timeout="200")
[13:47:32.424]      // while-condition  =>  TRUE
[13:47:32.424]      // while "1"  (timeout="200")
[13:47:32.424]      // while-condition  =>  TRUE
[13:47:32.424]      // while "1"  (timeout="200")
[13:47:32.424]      // while-condition  =>  TRUE
[13:47:32.424]      // while "1"  (timeout="200")
[13:47:32.424]      // while-condition  =>  TRUE
[13:47:32.425]      // while "1"  (timeout="200")
[13:47:32.425]      // while-condition  =>  TRUE
[13:47:32.425]      // while "1"  (timeout="200")
[13:47:32.425]      // while-condition  =>  TRUE
[13:47:32.425]      // while "1"  (timeout="200")
[13:47:32.425]      // while-condition  =>  TRUE
[13:47:32.425]      // while "1"  (timeout="200")
[13:47:32.425]      // while-condition  =>  TRUE
[13:47:32.425]      // while "1"  (timeout="200")
[13:47:32.425]      // while-condition  =>  TRUE
[13:47:32.425]      // while "1"  (timeout="200")
[13:47:32.425]      // while-condition  =>  TRUE
[13:47:32.425]      // while "1"  (timeout="200")
[13:47:32.425]      // while-condition  =>  TRUE
[13:47:32.425]      // while "1"  (timeout="200")
[13:47:32.425]      // while-condition  =>  TRUE
[13:47:32.425]      // while "1"  (timeout="200")
[13:47:32.425]      // while-condition  =>  TRUE
[13:47:32.425]      // while "1"  (timeout="200")
[13:47:32.427]      // while-condition  =>  TRUE
[13:47:32.427]      // while "1"  (timeout="200")
[13:47:32.427]      // while  =>  TIMEOUT
[13:47:32.427]      // end while "1"
[13:47:32.427]    </control>
[13:47:32.427]    <control if="canReadPins" while="" timeout="0" info="">
[13:47:32.427]      // if-block "canReadPins"
[13:47:32.427]        // =>  TRUE
[13:47:32.427]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:47:32.427]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:47:32.429]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:47:32.429]        // while-condition  =>  FALSE
[13:47:32.429]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:47:32.429]      </control>
[13:47:32.429]      // end if-block "canReadPins"
[13:47:32.429]    </control>
[13:47:32.429]    <control if="!canReadPins" while="" timeout="0" info="">
[13:47:32.429]      // if-block "!canReadPins"
[13:47:32.429]        // =>  FALSE
[13:47:32.429]      // skip if-block "!canReadPins"
[13:47:32.429]    </control>
[13:47:32.429]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:47:32.429]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:47:32.429]        // =>  TRUE
[13:47:32.431]      <block atomic="false" info="">
[13:47:32.431]        WriteAP(0x00, 0x190008);
[13:47:32.436]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:47:32.436]        WriteAP(0xF0, 0x01);
[13:47:32.441]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:47:32.441]      </block>
[13:47:32.441]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:47:32.441]    </control>
[13:47:32.441]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:47:32.441]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:47:32.441]        // =>  FALSE
[13:47:32.441]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:47:32.441]    </control>
[13:47:32.441]    <block atomic="false" info="">
[13:47:32.441]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:47:32.445]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:47:32.445]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:47:32.445]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:47:32.445]      __ap = 0; //lets make sure we reset the access point selection
[13:47:32.445]        // -> [__ap <= 0x00000000]
[13:47:32.445]    </block>
[13:47:32.445]  </sequence>
[13:47:32.445]  
[13:47:32.476]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:47:32.476]  
[13:47:32.476]  <debugvars>
[13:47:32.476]    // Pre-defined
[13:47:32.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:47:32.476]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:47:32.476]    __dp=0x00000000
[13:47:32.476]    __ap=0x00000000
[13:47:32.476]    __traceout=0x00000000      (Trace Disabled)
[13:47:32.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:47:32.476]    __FlashAddr=0x00000000
[13:47:32.476]    __FlashLen=0x00000000
[13:47:32.476]    __FlashArg=0x00000000
[13:47:32.476]    __FlashOp=0x00000000
[13:47:32.476]    __Result=0x00000000
[13:47:32.476]  </debugvars>
[13:47:32.476]  
[13:47:32.476]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:47:32.476]    <block atomic="false" info="">
[13:47:32.476]      __var deviceID = 0;
[13:47:32.476]        // -> [deviceID <= 0x00000000]
[13:47:32.476]      __var version = 0;
[13:47:32.476]        // -> [version <= 0x00000000]
[13:47:32.476]      __var partNum = 0;
[13:47:32.476]        // -> [partNum <= 0x00000000]
[13:47:32.476]      __var manuf = 0;
[13:47:32.476]        // -> [manuf <= 0x00000000]
[13:47:32.476]      __var isMSPM0G1X0X_G3X0X = 0;
[13:47:32.476]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:47:32.476]      __var isProduction = 0;
[13:47:32.476]        // -> [isProduction <= 0x00000000]
[13:47:32.476]      __var continueId = 0;
[13:47:32.476]        // -> [continueId <= 0x00000000]
[13:47:32.476]      deviceID =   Read32(0x41C40004);
[13:47:32.485]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:47:32.485]        // -> [deviceID <= 0x2BB8802F]
[13:47:32.485]      version = deviceID >> 28;
[13:47:32.485]        // -> [version <= 0x00000002]
[13:47:32.485]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:47:32.485]        // -> [partNum <= 0x0000BB88]
[13:47:32.485]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:47:32.485]        // -> [manuf <= 0x00000017]
[13:47:32.485]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:47:32.485]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:47:32.485]      isProduction = (version > 0);
[13:47:32.485]        // -> [isProduction <= 0x00000001]
[13:47:32.485]    </block>
[13:47:32.485]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:47:32.485]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:47:32.485]        // =>  FALSE
[13:47:32.485]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:47:32.485]    </control>
[13:47:32.485]    <control if="continueId == 4" while="" timeout="0" info="">
[13:47:32.485]      // if-block "continueId == 4"
[13:47:32.485]        // =>  FALSE
[13:47:32.485]      // skip if-block "continueId == 4"
[13:47:32.485]    </control>
[13:47:32.485]    <control if="!isProduction" while="" timeout="0" info="">
[13:47:32.485]      // if-block "!isProduction"
[13:47:32.485]        // =>  FALSE
[13:47:32.485]      // skip if-block "!isProduction"
[13:47:32.485]    </control>
[13:47:32.485]  </sequence>
[13:47:32.485]  
[19:27:51.681]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:27:51.681]  
[19:27:51.681]  <debugvars>
[19:27:51.681]    // Pre-defined
[19:27:51.681]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:27:51.681]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:27:51.681]    __dp=0x00000000
[19:27:51.681]    __ap=0x00000000
[19:27:51.681]    __traceout=0x00000000      (Trace Disabled)
[19:27:51.681]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:27:51.681]    __FlashAddr=0x00000000
[19:27:51.681]    __FlashLen=0x00000000
[19:27:51.681]    __FlashArg=0x00000000
[19:27:51.681]    __FlashOp=0x00000000
[19:27:51.681]    __Result=0x00000000
[19:27:51.681]  </debugvars>
[19:27:51.681]  
[19:27:51.681]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:27:51.681]    <block atomic="false" info="">
[19:27:51.681]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:27:51.681]        // -> [isSWJ <= 0x00000001]
[19:27:51.681]      __var hasDormant = __protocol & 0x00020000;
[19:27:51.681]        // -> [hasDormant <= 0x00000000]
[19:27:51.681]      __var protType   = __protocol & 0x0000FFFF;
[19:27:51.681]        // -> [protType <= 0x00000002]
[19:27:51.681]    </block>
[19:27:51.681]    <control if="protType == 1" while="" timeout="0" info="">
[19:27:51.681]      // if-block "protType == 1"
[19:27:51.681]        // =>  FALSE
[19:27:51.681]      // skip if-block "protType == 1"
[19:27:51.681]    </control>
[19:27:51.681]    <control if="protType == 2" while="" timeout="0" info="">
[19:27:51.681]      // if-block "protType == 2"
[19:27:51.681]        // =>  TRUE
[19:27:51.691]      <control if="isSWJ" while="" timeout="0" info="">
[19:27:51.691]        // if-block "isSWJ"
[19:27:51.691]          // =>  TRUE
[19:27:51.691]        <control if="hasDormant" while="" timeout="0" info="">
[19:27:51.691]          // if-block "hasDormant"
[19:27:51.691]            // =>  FALSE
[19:27:51.691]          // skip if-block "hasDormant"
[19:27:51.691]        </control>
[19:27:51.691]        <control if="!hasDormant" while="" timeout="0" info="">
[19:27:51.691]          // if-block "!hasDormant"
[19:27:51.691]            // =>  TRUE
[19:27:51.691]          <block atomic="false" info="">
[19:27:51.691]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:27:51.693]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:27:51.693]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:27:51.693]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:27:51.693]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:27:51.693]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:27:51.693]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:27:51.693]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:27:51.693]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:27:51.693]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:27:51.701]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:27:51.701]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:27:51.701]          </block>
[19:27:51.701]          // end if-block "!hasDormant"
[19:27:51.701]        </control>
[19:27:51.701]        // end if-block "isSWJ"
[19:27:51.701]      </control>
[19:27:51.701]      <control if="!isSWJ" while="" timeout="0" info="">
[19:27:51.701]        // if-block "!isSWJ"
[19:27:51.701]          // =>  FALSE
[19:27:51.701]        // skip if-block "!isSWJ"
[19:27:51.701]      </control>
[19:27:51.701]      <block atomic="false" info="">
[19:27:51.701]        ReadDP(0x0);
[19:27:51.701]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:27:51.701]      </block>
[19:27:51.701]      // end if-block "protType == 2"
[19:27:51.701]    </control>
[19:27:51.701]  </sequence>
[19:27:51.701]  
[19:27:51.701]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:27:51.701]  
[19:27:51.701]  <debugvars>
[19:27:51.701]    // Pre-defined
[19:27:51.701]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:27:51.701]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:27:51.701]    __dp=0x00000000
[19:27:51.701]    __ap=0x00000000
[19:27:51.701]    __traceout=0x00000000      (Trace Disabled)
[19:27:51.701]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:27:51.701]    __FlashAddr=0x00000000
[19:27:51.701]    __FlashLen=0x00000000
[19:27:51.701]    __FlashArg=0x00000000
[19:27:51.701]    __FlashOp=0x00000000
[19:27:51.701]    __Result=0x00000000
[19:27:51.701]  </debugvars>
[19:27:51.701]  
[19:27:51.701]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:27:51.701]    <block atomic="false" info="">
[19:27:51.701]      __var SW_DP_ABORT       = 0x0;
[19:27:51.701]        // -> [SW_DP_ABORT <= 0x00000000]
[19:27:51.701]      __var DP_CTRL_STAT      = 0x4;
[19:27:51.701]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:27:51.701]      __var DP_SELECT         = 0x8;
[19:27:51.701]        // -> [DP_SELECT <= 0x00000008]
[19:27:51.701]      __var powered_down      = 0;
[19:27:51.701]        // -> [powered_down <= 0x00000000]
[19:27:51.701]      WriteDP(DP_SELECT, 0x00000000);
[19:27:51.711]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:27:51.711]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:27:51.711]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:27:51.711]        // -> [powered_down <= 0x00000001]
[19:27:51.711]    </block>
[19:27:51.711]    <control if="powered_down" while="" timeout="0" info="">
[19:27:51.711]      // if-block "powered_down"
[19:27:51.711]        // =>  TRUE
[19:27:51.711]      <block atomic="false" info="">
[19:27:51.711]        Message(0, "Debug/System power-up request sent");
[19:27:51.711]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:27:51.721]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:27:51.721]      </block>
[19:27:51.723]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:27:51.723]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:27:51.723]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:27:51.723]        // while-condition  =>  FALSE
[19:27:51.723]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:27:51.723]      </control>
[19:27:51.723]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:27:51.723]        // if-block "(__protocol & 0xFFFF) == 1"
[19:27:51.723]          // =>  FALSE
[19:27:51.723]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:27:51.723]      </control>
[19:27:51.723]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:27:51.723]        // if-block "(__protocol & 0xFFFF) == 2"
[19:27:51.732]          // =>  TRUE
[19:27:51.732]        <block atomic="false" info="">
[19:27:51.732]          Message(0, "executing SWD power up");
[19:27:51.732]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:27:51.732]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:27:51.732]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:27:51.732]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:27:51.732]        </block>
[19:27:51.732]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:27:51.732]      </control>
[19:27:51.732]      // end if-block "powered_down"
[19:27:51.732]    </control>
[19:27:51.732]    <block atomic="false" info="">
[19:27:51.732]      __var DEBUG_PORT_VAL    = 0;
[19:27:51.732]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:27:51.732]      __var ACCESS_POINT_VAL  = 0;
[19:27:51.732]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:27:51.732]      __ap = 1; 
[19:27:51.732]        // -> [__ap <= 0x00000001]
[19:27:51.732]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:27:51.742]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:27:51.742]      __ap = 4;
[19:27:51.742]        // -> [__ap <= 0x00000004]
[19:27:51.742]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:27:51.742]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:27:51.742]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:27:51.742]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:27:51.742]    </block>
[19:27:51.742]    <block atomic="false" info="">
[19:27:51.742]      __var nReset = 0x80;
[19:27:51.742]        // -> [nReset <= 0x00000080]
[19:27:51.742]      __var canReadPins = 0;
[19:27:51.742]        // -> [canReadPins <= 0x00000000]
[19:27:51.742]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:27:51.752]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:27:51.752]        // -> [canReadPins <= 0x00000001]
[19:27:51.752]    </block>
[19:27:51.752]    <control if="" while="1" timeout="200" info="">
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.752]      // while-condition  =>  TRUE
[19:27:51.752]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.762]      // while "1"  (timeout="200")
[19:27:51.762]      // while-condition  =>  TRUE
[19:27:51.772]      // while "1"  (timeout="200")
[19:27:51.772]      // while  =>  TIMEOUT
[19:27:51.772]      // end while "1"
[19:27:51.772]    </control>
[19:27:51.772]    <control if="canReadPins" while="" timeout="0" info="">
[19:27:51.772]      // if-block "canReadPins"
[19:27:51.772]        // =>  TRUE
[19:27:51.772]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:27:51.772]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:27:51.774]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:27:51.774]        // while-condition  =>  FALSE
[19:27:51.774]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:27:51.774]      </control>
[19:27:51.774]      // end if-block "canReadPins"
[19:27:51.774]    </control>
[19:27:51.774]    <control if="!canReadPins" while="" timeout="0" info="">
[19:27:51.774]      // if-block "!canReadPins"
[19:27:51.774]        // =>  FALSE
[19:27:51.774]      // skip if-block "!canReadPins"
[19:27:51.774]    </control>
[19:27:51.774]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:27:51.774]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:27:51.774]        // =>  TRUE
[19:27:51.774]      <block atomic="false" info="">
[19:27:51.774]        WriteAP(0x00, 0x190008);
[19:27:51.774]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:27:51.774]        WriteAP(0xF0, 0x01);
[19:27:51.782]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:27:51.782]      </block>
[19:27:51.782]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:27:51.782]    </control>
[19:27:51.782]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:27:51.782]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:27:51.782]        // =>  FALSE
[19:27:51.782]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:27:51.782]    </control>
[19:27:51.782]    <block atomic="false" info="">
[19:27:51.782]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:27:51.792]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:27:51.792]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:27:51.792]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:27:51.792]      __ap = 0; //lets make sure we reset the access point selection
[19:27:51.794]        // -> [__ap <= 0x00000000]
[19:27:51.794]    </block>
[19:27:51.794]  </sequence>
[19:27:51.794]  
[19:27:51.813]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:27:51.813]  
[19:27:51.813]  <debugvars>
[19:27:51.813]    // Pre-defined
[19:27:51.813]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:27:51.813]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:27:51.813]    __dp=0x00000000
[19:27:51.813]    __ap=0x00000000
[19:27:51.813]    __traceout=0x00000000      (Trace Disabled)
[19:27:51.813]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:27:51.813]    __FlashAddr=0x00000000
[19:27:51.813]    __FlashLen=0x00000000
[19:27:51.813]    __FlashArg=0x00000000
[19:27:51.813]    __FlashOp=0x00000000
[19:27:51.813]    __Result=0x00000000
[19:27:51.813]  </debugvars>
[19:27:51.813]  
[19:27:51.813]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:27:51.813]    <block atomic="false" info="">
[19:27:51.813]      __var deviceID = 0;
[19:27:51.813]        // -> [deviceID <= 0x00000000]
[19:27:51.813]      __var version = 0;
[19:27:51.813]        // -> [version <= 0x00000000]
[19:27:51.813]      __var partNum = 0;
[19:27:51.813]        // -> [partNum <= 0x00000000]
[19:27:51.817]      __var manuf = 0;
[19:27:51.817]        // -> [manuf <= 0x00000000]
[19:27:51.817]      __var isMSPM0G1X0X_G3X0X = 0;
[19:27:51.817]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:27:51.817]      __var isProduction = 0;
[19:27:51.817]        // -> [isProduction <= 0x00000000]
[19:27:51.817]      __var continueId = 0;
[19:27:51.817]        // -> [continueId <= 0x00000000]
[19:27:51.817]      deviceID =   Read32(0x41C40004);
[19:27:51.821]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:27:51.821]        // -> [deviceID <= 0x2BB8802F]
[19:27:51.823]      version = deviceID >> 28;
[19:27:51.823]        // -> [version <= 0x00000002]
[19:27:51.823]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:27:51.823]        // -> [partNum <= 0x0000BB88]
[19:27:51.823]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:27:51.823]        // -> [manuf <= 0x00000017]
[19:27:51.823]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:27:51.823]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:27:51.823]      isProduction = (version > 0);
[19:27:51.823]        // -> [isProduction <= 0x00000001]
[19:27:51.824]    </block>
[19:27:51.824]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:27:51.824]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:27:51.824]        // =>  FALSE
[19:27:51.824]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:27:51.824]    </control>
[19:27:51.824]    <control if="continueId == 4" while="" timeout="0" info="">
[19:27:51.824]      // if-block "continueId == 4"
[19:27:51.824]        // =>  FALSE
[19:27:51.824]      // skip if-block "continueId == 4"
[19:27:51.824]    </control>
[19:27:51.824]    <control if="!isProduction" while="" timeout="0" info="">
[19:27:51.825]      // if-block "!isProduction"
[19:27:51.825]        // =>  FALSE
[19:27:51.825]      // skip if-block "!isProduction"
[19:27:51.825]    </control>
[19:27:51.825]  </sequence>
[19:27:51.825]  
[19:27:58.303]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:27:58.303]  
[19:27:58.303]  <debugvars>
[19:27:58.303]    // Pre-defined
[19:27:58.303]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:27:58.303]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:27:58.303]    __dp=0x00000000
[19:27:58.303]    __ap=0x00000000
[19:27:58.303]    __traceout=0x00000000      (Trace Disabled)
[19:27:58.303]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:27:58.303]    __FlashAddr=0x00000000
[19:27:58.303]    __FlashLen=0x00000000
[19:27:58.303]    __FlashArg=0x00000000
[19:27:58.303]    __FlashOp=0x00000000
[19:27:58.303]    __Result=0x00000000
[19:27:58.303]  </debugvars>
[19:27:58.303]  
[19:27:58.303]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:27:58.303]    <block atomic="false" info="">
[19:27:58.303]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:27:58.303]        // -> [isSWJ <= 0x00000001]
[19:27:58.303]      __var hasDormant = __protocol & 0x00020000;
[19:27:58.303]        // -> [hasDormant <= 0x00000000]
[19:27:58.303]      __var protType   = __protocol & 0x0000FFFF;
[19:27:58.303]        // -> [protType <= 0x00000002]
[19:27:58.303]    </block>
[19:27:58.303]    <control if="protType == 1" while="" timeout="0" info="">
[19:27:58.303]      // if-block "protType == 1"
[19:27:58.303]        // =>  FALSE
[19:27:58.303]      // skip if-block "protType == 1"
[19:27:58.303]    </control>
[19:27:58.303]    <control if="protType == 2" while="" timeout="0" info="">
[19:27:58.303]      // if-block "protType == 2"
[19:27:58.303]        // =>  TRUE
[19:27:58.303]      <control if="isSWJ" while="" timeout="0" info="">
[19:27:58.303]        // if-block "isSWJ"
[19:27:58.303]          // =>  TRUE
[19:27:58.303]        <control if="hasDormant" while="" timeout="0" info="">
[19:27:58.303]          // if-block "hasDormant"
[19:27:58.303]            // =>  FALSE
[19:27:58.303]          // skip if-block "hasDormant"
[19:27:58.303]        </control>
[19:27:58.303]        <control if="!hasDormant" while="" timeout="0" info="">
[19:27:58.303]          // if-block "!hasDormant"
[19:27:58.303]            // =>  TRUE
[19:27:58.303]          <block atomic="false" info="">
[19:27:58.303]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:27:58.313]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:27:58.313]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:27:58.313]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:27:58.313]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:27:58.316]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:27:58.316]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:27:58.316]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:27:58.316]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:27:58.316]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:27:58.316]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:27:58.324]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:27:58.324]          </block>
[19:27:58.324]          // end if-block "!hasDormant"
[19:27:58.324]        </control>
[19:27:58.324]        // end if-block "isSWJ"
[19:27:58.324]      </control>
[19:27:58.324]      <control if="!isSWJ" while="" timeout="0" info="">
[19:27:58.324]        // if-block "!isSWJ"
[19:27:58.324]          // =>  FALSE
[19:27:58.324]        // skip if-block "!isSWJ"
[19:27:58.324]      </control>
[19:27:58.324]      <block atomic="false" info="">
[19:27:58.324]        ReadDP(0x0);
[19:27:58.324]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:27:58.324]      </block>
[19:27:58.324]      // end if-block "protType == 2"
[19:27:58.324]    </control>
[19:27:58.324]  </sequence>
[19:27:58.324]  
[19:27:58.324]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:27:58.324]  
[19:27:58.324]  <debugvars>
[19:27:58.324]    // Pre-defined
[19:27:58.324]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:27:58.324]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:27:58.324]    __dp=0x00000000
[19:27:58.324]    __ap=0x00000000
[19:27:58.324]    __traceout=0x00000000      (Trace Disabled)
[19:27:58.324]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:27:58.324]    __FlashAddr=0x00000000
[19:27:58.324]    __FlashLen=0x00000000
[19:27:58.324]    __FlashArg=0x00000000
[19:27:58.324]    __FlashOp=0x00000000
[19:27:58.324]    __Result=0x00000000
[19:27:58.324]  </debugvars>
[19:27:58.324]  
[19:27:58.324]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:27:58.324]    <block atomic="false" info="">
[19:27:58.324]      __var SW_DP_ABORT       = 0x0;
[19:27:58.334]        // -> [SW_DP_ABORT <= 0x00000000]
[19:27:58.334]      __var DP_CTRL_STAT      = 0x4;
[19:27:58.334]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:27:58.334]      __var DP_SELECT         = 0x8;
[19:27:58.334]        // -> [DP_SELECT <= 0x00000008]
[19:27:58.334]      __var powered_down      = 0;
[19:27:58.334]        // -> [powered_down <= 0x00000000]
[19:27:58.334]      WriteDP(DP_SELECT, 0x00000000);
[19:27:58.344]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:27:58.344]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:27:58.344]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:27:58.344]        // -> [powered_down <= 0x00000001]
[19:27:58.344]    </block>
[19:27:58.344]    <control if="powered_down" while="" timeout="0" info="">
[19:27:58.344]      // if-block "powered_down"
[19:27:58.354]        // =>  TRUE
[19:27:58.354]      <block atomic="false" info="">
[19:27:58.354]        Message(0, "Debug/System power-up request sent");
[19:27:58.354]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:27:58.354]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:27:58.354]      </block>
[19:27:58.354]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:27:58.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:27:58.354]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:27:58.354]        // while-condition  =>  FALSE
[19:27:58.354]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:27:58.354]      </control>
[19:27:58.354]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:27:58.354]        // if-block "(__protocol & 0xFFFF) == 1"
[19:27:58.364]          // =>  FALSE
[19:27:58.364]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:27:58.364]      </control>
[19:27:58.364]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:27:58.364]        // if-block "(__protocol & 0xFFFF) == 2"
[19:27:58.364]          // =>  TRUE
[19:27:58.364]        <block atomic="false" info="">
[19:27:58.364]          Message(0, "executing SWD power up");
[19:27:58.365]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:27:58.365]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:27:58.365]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:27:58.365]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:27:58.365]        </block>
[19:27:58.365]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:27:58.365]      </control>
[19:27:58.365]      // end if-block "powered_down"
[19:27:58.365]    </control>
[19:27:58.365]    <block atomic="false" info="">
[19:27:58.365]      __var DEBUG_PORT_VAL    = 0;
[19:27:58.365]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:27:58.365]      __var ACCESS_POINT_VAL  = 0;
[19:27:58.365]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:27:58.365]      __ap = 1; 
[19:27:58.365]        // -> [__ap <= 0x00000001]
[19:27:58.365]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:27:58.374]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:27:58.374]      __ap = 4;
[19:27:58.374]        // -> [__ap <= 0x00000004]
[19:27:58.374]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:27:58.374]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:27:58.374]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:27:58.374]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:27:58.374]    </block>
[19:27:58.374]    <block atomic="false" info="">
[19:27:58.374]      __var nReset = 0x80;
[19:27:58.374]        // -> [nReset <= 0x00000080]
[19:27:58.374]      __var canReadPins = 0;
[19:27:58.374]        // -> [canReadPins <= 0x00000000]
[19:27:58.374]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:27:58.374]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:27:58.374]        // -> [canReadPins <= 0x00000001]
[19:27:58.374]    </block>
[19:27:58.374]    <control if="" while="1" timeout="200" info="">
[19:27:58.374]      // while "1"  (timeout="200")
[19:27:58.374]      // while-condition  =>  TRUE
[19:27:58.374]      // while "1"  (timeout="200")
[19:27:58.374]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.384]      // while "1"  (timeout="200")
[19:27:58.384]      // while-condition  =>  TRUE
[19:27:58.394]      // while "1"  (timeout="200")
[19:27:58.394]      // while  =>  TIMEOUT
[19:27:58.394]      // end while "1"
[19:27:58.394]    </control>
[19:27:58.394]    <control if="canReadPins" while="" timeout="0" info="">
[19:27:58.394]      // if-block "canReadPins"
[19:27:58.394]        // =>  TRUE
[19:27:58.394]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:27:58.394]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:27:58.396]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:27:58.396]        // while-condition  =>  FALSE
[19:27:58.396]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:27:58.396]      </control>
[19:27:58.396]      // end if-block "canReadPins"
[19:27:58.396]    </control>
[19:27:58.396]    <control if="!canReadPins" while="" timeout="0" info="">
[19:27:58.396]      // if-block "!canReadPins"
[19:27:58.396]        // =>  FALSE
[19:27:58.396]      // skip if-block "!canReadPins"
[19:27:58.396]    </control>
[19:27:58.396]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:27:58.396]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:27:58.396]        // =>  TRUE
[19:27:58.396]      <block atomic="false" info="">
[19:27:58.396]        WriteAP(0x00, 0x190008);
[19:27:58.396]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:27:58.396]        WriteAP(0xF0, 0x01);
[19:27:58.404]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:27:58.404]      </block>
[19:27:58.404]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:27:58.404]    </control>
[19:27:58.404]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:27:58.404]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:27:58.404]        // =>  FALSE
[19:27:58.404]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:27:58.404]    </control>
[19:27:58.404]    <block atomic="false" info="">
[19:27:58.404]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:27:58.404]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:27:58.404]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:27:58.404]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:27:58.414]      __ap = 0; //lets make sure we reset the access point selection
[19:27:58.414]        // -> [__ap <= 0x00000000]
[19:27:58.414]    </block>
[19:27:58.414]  </sequence>
[19:27:58.414]  
[19:27:58.444]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:27:58.444]  
[19:27:58.444]  <debugvars>
[19:27:58.444]    // Pre-defined
[19:27:58.444]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:27:58.444]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:27:58.444]    __dp=0x00000000
[19:27:58.444]    __ap=0x00000000
[19:27:58.444]    __traceout=0x00000000      (Trace Disabled)
[19:27:58.444]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:27:58.444]    __FlashAddr=0x00000000
[19:27:58.446]    __FlashLen=0x00000000
[19:27:58.446]    __FlashArg=0x00000000
[19:27:58.446]    __FlashOp=0x00000000
[19:27:58.446]    __Result=0x00000000
[19:27:58.446]  </debugvars>
[19:27:58.446]  
[19:27:58.446]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:27:58.446]    <block atomic="false" info="">
[19:27:58.446]      __var deviceID = 0;
[19:27:58.446]        // -> [deviceID <= 0x00000000]
[19:27:58.446]      __var version = 0;
[19:27:58.446]        // -> [version <= 0x00000000]
[19:27:58.446]      __var partNum = 0;
[19:27:58.446]        // -> [partNum <= 0x00000000]
[19:27:58.446]      __var manuf = 0;
[19:27:58.446]        // -> [manuf <= 0x00000000]
[19:27:58.446]      __var isMSPM0G1X0X_G3X0X = 0;
[19:27:58.446]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:27:58.446]      __var isProduction = 0;
[19:27:58.446]        // -> [isProduction <= 0x00000000]
[19:27:58.446]      __var continueId = 0;
[19:27:58.446]        // -> [continueId <= 0x00000000]
[19:27:58.446]      deviceID =   Read32(0x41C40004);
[19:27:58.455]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:27:58.455]        // -> [deviceID <= 0x2BB8802F]
[19:27:58.455]      version = deviceID >> 28;
[19:27:58.455]        // -> [version <= 0x00000002]
[19:27:58.455]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:27:58.455]        // -> [partNum <= 0x0000BB88]
[19:27:58.455]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:27:58.455]        // -> [manuf <= 0x00000017]
[19:27:58.455]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:27:58.455]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:27:58.455]      isProduction = (version > 0);
[19:27:58.455]        // -> [isProduction <= 0x00000001]
[19:27:58.455]    </block>
[19:27:58.455]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:27:58.455]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:27:58.455]        // =>  FALSE
[19:27:58.455]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:27:58.455]    </control>
[19:27:58.457]    <control if="continueId == 4" while="" timeout="0" info="">
[19:27:58.457]      // if-block "continueId == 4"
[19:27:58.457]        // =>  FALSE
[19:27:58.457]      // skip if-block "continueId == 4"
[19:27:58.457]    </control>
[19:27:58.457]    <control if="!isProduction" while="" timeout="0" info="">
[19:27:58.457]      // if-block "!isProduction"
[19:27:58.457]        // =>  FALSE
[19:27:58.457]      // skip if-block "!isProduction"
[19:27:58.457]    </control>
[19:27:58.457]  </sequence>
[19:27:58.457]  
