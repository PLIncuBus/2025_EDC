/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0000.log
 *  Created     : 15:36:06 (20/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[15:36:06.703]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[15:36:06.703]  
[15:36:06.703]  <debugvars>
[15:36:06.704]    // Pre-defined
[15:36:06.704]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[15:36:06.705]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[15:36:06.705]    __dp=0x00000000
[15:36:06.705]    __ap=0x00000000
[15:36:06.705]    __traceout=0x00000000      (Trace Disabled)
[15:36:06.705]    __errorcontrol=0x00000000  (Skip Errors="False")
[15:36:06.705]    __FlashAddr=0x00000000
[15:36:06.705]    __FlashLen=0x00000000
[15:36:06.705]    __FlashArg=0x00000000
[15:36:06.705]    __FlashOp=0x00000000
[15:36:06.705]    __Result=0x00000000
[15:36:06.705]  </debugvars>
[15:36:06.705]  
[15:36:06.706]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[15:36:06.706]    <block atomic="false" info="">
[15:36:06.706]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[15:36:06.706]        // -> [isSWJ <= 0x00000001]
[15:36:06.706]      __var hasDormant = __protocol & 0x00020000;
[15:36:06.706]        // -> [hasDormant <= 0x00000000]
[15:36:06.706]      __var protType   = __protocol & 0x0000FFFF;
[15:36:06.706]        // -> [protType <= 0x00000002]
[15:36:06.706]    </block>
[15:36:06.706]    <control if="protType == 1" while="" timeout="0" info="">
[15:36:06.706]      // if-block "protType == 1"
[15:36:06.706]        // =>  FALSE
[15:36:06.707]      // skip if-block "protType == 1"
[15:36:06.707]    </control>
[15:36:06.707]    <control if="protType == 2" while="" timeout="0" info="">
[15:36:06.707]      // if-block "protType == 2"
[15:36:06.707]        // =>  TRUE
[15:36:06.707]      <control if="isSWJ" while="" timeout="0" info="">
[15:36:06.708]        // if-block "isSWJ"
[15:36:06.708]          // =>  TRUE
[15:36:06.708]        <control if="hasDormant" while="" timeout="0" info="">
[15:36:06.708]          // if-block "hasDormant"
[15:36:06.708]            // =>  FALSE
[15:36:06.708]          // skip if-block "hasDormant"
[15:36:06.708]        </control>
[15:36:06.708]        <control if="!hasDormant" while="" timeout="0" info="">
[15:36:06.708]          // if-block "!hasDormant"
[15:36:06.709]            // =>  TRUE
[15:36:06.709]          <block atomic="false" info="">
[15:36:06.709]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[15:36:06.711]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:36:06.712]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[15:36:06.713]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[15:36:06.713]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[15:36:06.715]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:36:06.715]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[15:36:06.717]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[15:36:06.717]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[15:36:06.719]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[15:36:06.719]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[15:36:06.721]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[15:36:06.721]          </block>
[15:36:06.721]          // end if-block "!hasDormant"
[15:36:06.721]        </control>
[15:36:06.721]        // end if-block "isSWJ"
[15:36:06.721]      </control>
[15:36:06.721]      <control if="!isSWJ" while="" timeout="0" info="">
[15:36:06.721]        // if-block "!isSWJ"
[15:36:06.721]          // =>  FALSE
[15:36:06.721]        // skip if-block "!isSWJ"
[15:36:06.721]      </control>
[15:36:06.722]      <block atomic="false" info="">
[15:36:06.722]        ReadDP(0x0);
[15:36:06.723]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[15:36:06.723]      </block>
[15:36:06.723]      // end if-block "protType == 2"
[15:36:06.723]    </control>
[15:36:06.725]  </sequence>
[15:36:06.725]  
[16:05:01.830]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:05:01.830]  
[16:05:01.830]  <debugvars>
[16:05:01.831]    // Pre-defined
[16:05:01.831]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:01.831]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:05:01.831]    __dp=0x00000000
[16:05:01.831]    __ap=0x00000000
[16:05:01.831]    __traceout=0x00000000      (Trace Disabled)
[16:05:01.831]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:01.831]    __FlashAddr=0x00000000
[16:05:01.831]    __FlashLen=0x00000000
[16:05:01.831]    __FlashArg=0x00000000
[16:05:01.831]    __FlashOp=0x00000000
[16:05:01.832]    __Result=0x00000000
[16:05:01.832]  </debugvars>
[16:05:01.832]  
[16:05:01.832]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:05:01.832]    <block atomic="false" info="">
[16:05:01.832]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:05:01.832]        // -> [isSWJ <= 0x00000001]
[16:05:01.833]      __var hasDormant = __protocol & 0x00020000;
[16:05:01.833]        // -> [hasDormant <= 0x00000000]
[16:05:01.833]      __var protType   = __protocol & 0x0000FFFF;
[16:05:01.833]        // -> [protType <= 0x00000002]
[16:05:01.833]    </block>
[16:05:01.833]    <control if="protType == 1" while="" timeout="0" info="">
[16:05:01.833]      // if-block "protType == 1"
[16:05:01.833]        // =>  FALSE
[16:05:01.834]      // skip if-block "protType == 1"
[16:05:01.834]    </control>
[16:05:01.834]    <control if="protType == 2" while="" timeout="0" info="">
[16:05:01.834]      // if-block "protType == 2"
[16:05:01.834]        // =>  TRUE
[16:05:01.834]      <control if="isSWJ" while="" timeout="0" info="">
[16:05:01.834]        // if-block "isSWJ"
[16:05:01.834]          // =>  TRUE
[16:05:01.834]        <control if="hasDormant" while="" timeout="0" info="">
[16:05:01.834]          // if-block "hasDormant"
[16:05:01.835]            // =>  FALSE
[16:05:01.835]          // skip if-block "hasDormant"
[16:05:01.835]        </control>
[16:05:01.835]        <control if="!hasDormant" while="" timeout="0" info="">
[16:05:01.835]          // if-block "!hasDormant"
[16:05:01.835]            // =>  TRUE
[16:05:01.835]          <block atomic="false" info="">
[16:05:01.835]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:05:01.836]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:01.836]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:05:01.838]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:05:01.838]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:05:01.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:01.841]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:05:01.843]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:05:01.843]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:05:01.845]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:01.845]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:05:01.847]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:05:01.847]          </block>
[16:05:01.847]          // end if-block "!hasDormant"
[16:05:01.847]        </control>
[16:05:01.848]        // end if-block "isSWJ"
[16:05:01.848]      </control>
[16:05:01.848]      <control if="!isSWJ" while="" timeout="0" info="">
[16:05:01.848]        // if-block "!isSWJ"
[16:05:01.848]          // =>  FALSE
[16:05:01.848]        // skip if-block "!isSWJ"
[16:05:01.848]      </control>
[16:05:01.848]      <block atomic="false" info="">
[16:05:01.848]        ReadDP(0x0);
[16:05:01.850]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:05:01.850]      </block>
[16:05:01.850]      // end if-block "protType == 2"
[16:05:01.850]    </control>
[16:05:01.850]  </sequence>
[16:05:01.850]  
[16:05:17.233]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:05:17.233]  
[16:05:17.233]  <debugvars>
[16:05:17.233]    // Pre-defined
[16:05:17.233]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:17.233]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:05:17.233]    __dp=0x00000000
[16:05:17.234]    __ap=0x00000000
[16:05:17.234]    __traceout=0x00000000      (Trace Disabled)
[16:05:17.234]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:17.234]    __FlashAddr=0x00000000
[16:05:17.234]    __FlashLen=0x00000000
[16:05:17.234]    __FlashArg=0x00000000
[16:05:17.234]    __FlashOp=0x00000000
[16:05:17.235]    __Result=0x00000000
[16:05:17.235]  </debugvars>
[16:05:17.235]  
[16:05:17.235]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:05:17.235]    <block atomic="false" info="">
[16:05:17.235]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:05:17.235]        // -> [isSWJ <= 0x00000001]
[16:05:17.235]      __var hasDormant = __protocol & 0x00020000;
[16:05:17.236]        // -> [hasDormant <= 0x00000000]
[16:05:17.236]      __var protType   = __protocol & 0x0000FFFF;
[16:05:17.236]        // -> [protType <= 0x00000002]
[16:05:17.236]    </block>
[16:05:17.236]    <control if="protType == 1" while="" timeout="0" info="">
[16:05:17.236]      // if-block "protType == 1"
[16:05:17.236]        // =>  FALSE
[16:05:17.236]      // skip if-block "protType == 1"
[16:05:17.236]    </control>
[16:05:17.236]    <control if="protType == 2" while="" timeout="0" info="">
[16:05:17.236]      // if-block "protType == 2"
[16:05:17.237]        // =>  TRUE
[16:05:17.237]      <control if="isSWJ" while="" timeout="0" info="">
[16:05:17.237]        // if-block "isSWJ"
[16:05:17.237]          // =>  TRUE
[16:05:17.237]        <control if="hasDormant" while="" timeout="0" info="">
[16:05:17.238]          // if-block "hasDormant"
[16:05:17.238]            // =>  FALSE
[16:05:17.238]          // skip if-block "hasDormant"
[16:05:17.238]        </control>
[16:05:17.238]        <control if="!hasDormant" while="" timeout="0" info="">
[16:05:17.238]          // if-block "!hasDormant"
[16:05:17.238]            // =>  TRUE
[16:05:17.238]          <block atomic="false" info="">
[16:05:17.238]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:05:17.240]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:17.240]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:05:17.243]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:05:17.243]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:05:17.244]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:17.245]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:05:17.247]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:05:17.247]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:05:17.248]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:17.248]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:05:17.250]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:05:17.250]          </block>
[16:05:17.250]          // end if-block "!hasDormant"
[16:05:17.251]        </control>
[16:05:17.251]        // end if-block "isSWJ"
[16:05:17.251]      </control>
[16:05:17.251]      <control if="!isSWJ" while="" timeout="0" info="">
[16:05:17.251]        // if-block "!isSWJ"
[16:05:17.251]          // =>  FALSE
[16:05:17.251]        // skip if-block "!isSWJ"
[16:05:17.251]      </control>
[16:05:17.251]      <block atomic="false" info="">
[16:05:17.252]        ReadDP(0x0);
[16:05:17.253]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:05:17.253]      </block>
[16:05:17.254]      // end if-block "protType == 2"
[16:05:17.254]    </control>
[16:05:17.254]  </sequence>
[16:05:17.254]  
[16:05:19.349]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:05:19.349]  
[16:05:19.349]  <debugvars>
[16:05:19.349]    // Pre-defined
[16:05:19.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:19.349]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:05:19.349]    __dp=0x00000000
[16:05:19.349]    __ap=0x00000000
[16:05:19.350]    __traceout=0x00000000      (Trace Disabled)
[16:05:19.350]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:19.350]    __FlashAddr=0x00000000
[16:05:19.350]    __FlashLen=0x00000000
[16:05:19.350]    __FlashArg=0x00000000
[16:05:19.350]    __FlashOp=0x00000000
[16:05:19.350]    __Result=0x00000000
[16:05:19.350]  </debugvars>
[16:05:19.350]  
[16:05:19.350]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:05:19.350]    <block atomic="false" info="">
[16:05:19.350]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:05:19.350]        // -> [isSWJ <= 0x00000001]
[16:05:19.350]      __var hasDormant = __protocol & 0x00020000;
[16:05:19.350]        // -> [hasDormant <= 0x00000000]
[16:05:19.351]      __var protType   = __protocol & 0x0000FFFF;
[16:05:19.351]        // -> [protType <= 0x00000002]
[16:05:19.351]    </block>
[16:05:19.351]    <control if="protType == 1" while="" timeout="0" info="">
[16:05:19.351]      // if-block "protType == 1"
[16:05:19.351]        // =>  FALSE
[16:05:19.351]      // skip if-block "protType == 1"
[16:05:19.351]    </control>
[16:05:19.352]    <control if="protType == 2" while="" timeout="0" info="">
[16:05:19.352]      // if-block "protType == 2"
[16:05:19.352]        // =>  TRUE
[16:05:19.352]      <control if="isSWJ" while="" timeout="0" info="">
[16:05:19.352]        // if-block "isSWJ"
[16:05:19.352]          // =>  TRUE
[16:05:19.352]        <control if="hasDormant" while="" timeout="0" info="">
[16:05:19.352]          // if-block "hasDormant"
[16:05:19.352]            // =>  FALSE
[16:05:19.352]          // skip if-block "hasDormant"
[16:05:19.352]        </control>
[16:05:19.353]        <control if="!hasDormant" while="" timeout="0" info="">
[16:05:19.353]          // if-block "!hasDormant"
[16:05:19.353]            // =>  TRUE
[16:05:19.353]          <block atomic="false" info="">
[16:05:19.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:05:19.353]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:19.353]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:05:19.354]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:05:19.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:05:19.354]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:19.354]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:05:19.354]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:05:19.354]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:05:19.355]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:19.355]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:05:19.355]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:05:19.355]          </block>
[16:05:19.355]          // end if-block "!hasDormant"
[16:05:19.356]        </control>
[16:05:19.356]        // end if-block "isSWJ"
[16:05:19.356]      </control>
[16:05:19.356]      <control if="!isSWJ" while="" timeout="0" info="">
[16:05:19.356]        // if-block "!isSWJ"
[16:05:19.356]          // =>  FALSE
[16:05:19.356]        // skip if-block "!isSWJ"
[16:05:19.356]      </control>
[16:05:19.356]      <block atomic="false" info="">
[16:05:19.356]        ReadDP(0x0);
[16:05:19.358]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:05:19.358]      </block>
[16:05:19.358]      // end if-block "protType == 2"
[16:05:19.358]    </control>
[16:05:19.358]  </sequence>
[16:05:19.358]  
[16:05:22.005]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:05:22.005]  
[16:05:22.005]  <debugvars>
[16:05:22.006]    // Pre-defined
[16:05:22.006]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:22.006]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:22.006]    __dp=0x00000000
[16:05:22.006]    __ap=0x00000000
[16:05:22.006]    __traceout=0x00000000      (Trace Disabled)
[16:05:22.006]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:22.007]    __FlashAddr=0x00000000
[16:05:22.007]    __FlashLen=0x00000000
[16:05:22.007]    __FlashArg=0x00000000
[16:05:22.007]    __FlashOp=0x00000000
[16:05:22.007]    __Result=0x00000000
[16:05:22.007]  </debugvars>
[16:05:22.007]  
[16:05:22.007]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:05:22.007]    <block atomic="false" info="">
[16:05:22.008]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:05:22.008]        // -> [isSWJ <= 0x00000001]
[16:05:22.008]      __var hasDormant = __protocol & 0x00020000;
[16:05:22.008]        // -> [hasDormant <= 0x00000000]
[16:05:22.008]      __var protType   = __protocol & 0x0000FFFF;
[16:05:22.008]        // -> [protType <= 0x00000002]
[16:05:22.009]    </block>
[16:05:22.009]    <control if="protType == 1" while="" timeout="0" info="">
[16:05:22.009]      // if-block "protType == 1"
[16:05:22.009]        // =>  FALSE
[16:05:22.009]      // skip if-block "protType == 1"
[16:05:22.009]    </control>
[16:05:22.009]    <control if="protType == 2" while="" timeout="0" info="">
[16:05:22.009]      // if-block "protType == 2"
[16:05:22.009]        // =>  TRUE
[16:05:22.009]      <control if="isSWJ" while="" timeout="0" info="">
[16:05:22.009]        // if-block "isSWJ"
[16:05:22.010]          // =>  TRUE
[16:05:22.010]        <control if="hasDormant" while="" timeout="0" info="">
[16:05:22.010]          // if-block "hasDormant"
[16:05:22.010]            // =>  FALSE
[16:05:22.010]          // skip if-block "hasDormant"
[16:05:22.010]        </control>
[16:05:22.010]        <control if="!hasDormant" while="" timeout="0" info="">
[16:05:22.010]          // if-block "!hasDormant"
[16:05:22.010]            // =>  TRUE
[16:05:22.010]          <block atomic="false" info="">
[16:05:22.010]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:05:22.011]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:22.011]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:05:22.011]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:05:22.011]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:05:22.011]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:22.011]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:05:22.012]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:05:22.012]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:05:22.012]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:22.012]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:05:22.012]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:05:22.012]          </block>
[16:05:22.013]          // end if-block "!hasDormant"
[16:05:22.013]        </control>
[16:05:22.013]        // end if-block "isSWJ"
[16:05:22.013]      </control>
[16:05:22.013]      <control if="!isSWJ" while="" timeout="0" info="">
[16:05:22.013]        // if-block "!isSWJ"
[16:05:22.013]          // =>  FALSE
[16:05:22.013]        // skip if-block "!isSWJ"
[16:05:22.014]      </control>
[16:05:22.014]      <block atomic="false" info="">
[16:05:22.014]        ReadDP(0x0);
[16:05:22.014]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:05:22.014]      </block>
[16:05:22.014]      // end if-block "protType == 2"
[16:05:22.014]    </control>
[16:05:22.014]  </sequence>
[16:05:22.015]  
[16:05:22.015]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:05:22.015]  
[16:05:22.015]  <debugvars>
[16:05:22.015]    // Pre-defined
[16:05:22.015]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:22.016]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:22.016]    __dp=0x00000000
[16:05:22.016]    __ap=0x00000000
[16:05:22.016]    __traceout=0x00000000      (Trace Disabled)
[16:05:22.016]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:22.016]    __FlashAddr=0x00000000
[16:05:22.016]    __FlashLen=0x00000000
[16:05:22.016]    __FlashArg=0x00000000
[16:05:22.016]    __FlashOp=0x00000000
[16:05:22.016]    __Result=0x00000000
[16:05:22.016]  </debugvars>
[16:05:22.018]  
[16:05:22.018]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:05:22.018]    <block atomic="false" info="">
[16:05:22.018]      __var SW_DP_ABORT       = 0x0;
[16:05:22.018]        // -> [SW_DP_ABORT <= 0x00000000]
[16:05:22.018]      __var DP_CTRL_STAT      = 0x4;
[16:05:22.018]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:05:22.018]      __var DP_SELECT         = 0x8;
[16:05:22.018]        // -> [DP_SELECT <= 0x00000008]
[16:05:22.018]      __var powered_down      = 0;
[16:05:22.019]        // -> [powered_down <= 0x00000000]
[16:05:22.019]      WriteDP(DP_SELECT, 0x00000000);
[16:05:22.019]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:05:22.019]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:05:22.019]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:05:22.019]        // -> [powered_down <= 0x00000001]
[16:05:22.020]    </block>
[16:05:22.020]    <control if="powered_down" while="" timeout="0" info="">
[16:05:22.020]      // if-block "powered_down"
[16:05:22.020]        // =>  TRUE
[16:05:22.020]      <block atomic="false" info="">
[16:05:22.020]        Message(0, "Debug/System power-up request sent");
[16:05:22.023]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:05:22.023]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:05:22.024]      </block>
[16:05:22.024]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:05:22.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:05:22.024]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:05:22.024]        // while-condition  =>  FALSE
[16:05:22.024]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:05:22.025]      </control>
[16:05:22.025]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:05:22.025]        // if-block "(__protocol & 0xFFFF) == 1"
[16:05:22.025]          // =>  FALSE
[16:05:22.025]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:05:22.025]      </control>
[16:05:22.025]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:05:22.025]        // if-block "(__protocol & 0xFFFF) == 2"
[16:05:22.025]          // =>  TRUE
[16:05:22.025]        <block atomic="false" info="">
[16:05:22.025]          Message(0, "executing SWD power up");
[16:05:22.027]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:05:22.028]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:05:22.028]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:05:22.028]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:05:22.028]        </block>
[16:05:22.028]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:05:22.028]      </control>
[16:05:22.028]      // end if-block "powered_down"
[16:05:22.028]    </control>
[16:05:22.028]    <block atomic="false" info="">
[16:05:22.028]      __var DEBUG_PORT_VAL    = 0;
[16:05:22.028]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:05:22.028]      __var ACCESS_POINT_VAL  = 0;
[16:05:22.028]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:05:22.028]      __ap = 1; 
[16:05:22.029]        // -> [__ap <= 0x00000001]
[16:05:22.029]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:05:22.029]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:05:22.029]      __ap = 4;
[16:05:22.029]        // -> [__ap <= 0x00000004]
[16:05:22.029]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:05:22.030]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:05:22.030]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:05:22.030]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:05:22.033]    </block>
[16:05:22.033]    <block atomic="false" info="">
[16:05:22.033]      __var nReset = 0x80;
[16:05:22.033]        // -> [nReset <= 0x00000080]
[16:05:22.033]      __var canReadPins = 0;
[16:05:22.033]        // -> [canReadPins <= 0x00000000]
[16:05:22.033]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:05:22.034]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:05:22.034]        // -> [canReadPins <= 0x00000001]
[16:05:22.034]    </block>
[16:05:22.034]    <control if="" while="1" timeout="200" info="">
[16:05:22.034]      // while "1"  (timeout="200")
[16:05:22.034]      // while-condition  =>  TRUE
[16:05:22.034]      // while "1"  (timeout="200")
[16:05:22.034]      // while-condition  =>  TRUE
[16:05:22.035]      // while "1"  (timeout="200")
[16:05:22.035]      // while-condition  =>  TRUE
[16:05:22.035]      // while "1"  (timeout="200")
[16:05:22.035]      // while-condition  =>  TRUE
[16:05:22.035]      // while "1"  (timeout="200")
[16:05:22.035]      // while-condition  =>  TRUE
[16:05:22.036]      // while "1"  (timeout="200")
[16:05:22.036]      // while-condition  =>  TRUE
[16:05:22.036]      // while "1"  (timeout="200")
[16:05:22.036]      // while-condition  =>  TRUE
[16:05:22.036]      // while "1"  (timeout="200")
[16:05:22.036]      // while-condition  =>  TRUE
[16:05:22.036]      // while "1"  (timeout="200")
[16:05:22.036]      // while-condition  =>  TRUE
[16:05:22.036]      // while "1"  (timeout="200")
[16:05:22.037]      // while-condition  =>  TRUE
[16:05:22.037]      // while "1"  (timeout="200")
[16:05:22.037]      // while-condition  =>  TRUE
[16:05:22.037]      // while "1"  (timeout="200")
[16:05:22.037]      // while-condition  =>  TRUE
[16:05:22.037]      // while "1"  (timeout="200")
[16:05:22.037]      // while-condition  =>  TRUE
[16:05:22.038]      // while "1"  (timeout="200")
[16:05:22.038]      // while-condition  =>  TRUE
[16:05:22.038]      // while "1"  (timeout="200")
[16:05:22.038]      // while-condition  =>  TRUE
[16:05:22.038]      // while "1"  (timeout="200")
[16:05:22.038]      // while-condition  =>  TRUE
[16:05:22.038]      // while "1"  (timeout="200")
[16:05:22.038]      // while-condition  =>  TRUE
[16:05:22.038]      // while "1"  (timeout="200")
[16:05:22.038]      // while-condition  =>  TRUE
[16:05:22.038]      // while "1"  (timeout="200")
[16:05:22.039]      // while-condition  =>  TRUE
[16:05:22.039]      // while "1"  (timeout="200")
[16:05:22.039]      // while-condition  =>  TRUE
[16:05:22.039]      // while "1"  (timeout="200")
[16:05:22.039]      // while-condition  =>  TRUE
[16:05:22.039]      // while "1"  (timeout="200")
[16:05:22.039]      // while-condition  =>  TRUE
[16:05:22.039]      // while "1"  (timeout="200")
[16:05:22.039]      // while-condition  =>  TRUE
[16:05:22.040]      // while "1"  (timeout="200")
[16:05:22.040]      // while-condition  =>  TRUE
[16:05:22.040]      // while "1"  (timeout="200")
[16:05:22.040]      // while-condition  =>  TRUE
[16:05:22.040]      // while "1"  (timeout="200")
[16:05:22.040]      // while-condition  =>  TRUE
[16:05:22.041]      // while "1"  (timeout="200")
[16:05:22.041]      // while-condition  =>  TRUE
[16:05:22.041]      // while "1"  (timeout="200")
[16:05:22.041]      // while-condition  =>  TRUE
[16:05:22.041]      // while "1"  (timeout="200")
[16:05:22.041]      // while-condition  =>  TRUE
[16:05:22.041]      // while "1"  (timeout="200")
[16:05:22.041]      // while-condition  =>  TRUE
[16:05:22.041]      // while "1"  (timeout="200")
[16:05:22.041]      // while-condition  =>  TRUE
[16:05:22.042]      // while "1"  (timeout="200")
[16:05:22.042]      // while-condition  =>  TRUE
[16:05:22.042]      // while "1"  (timeout="200")
[16:05:22.042]      // while-condition  =>  TRUE
[16:05:22.042]      // while "1"  (timeout="200")
[16:05:22.042]      // while-condition  =>  TRUE
[16:05:22.042]      // while "1"  (timeout="200")
[16:05:22.042]      // while-condition  =>  TRUE
[16:05:22.042]      // while "1"  (timeout="200")
[16:05:22.042]      // while-condition  =>  TRUE
[16:05:22.043]      // while "1"  (timeout="200")
[16:05:22.043]      // while-condition  =>  TRUE
[16:05:22.043]      // while "1"  (timeout="200")
[16:05:22.043]      // while-condition  =>  TRUE
[16:05:22.043]      // while "1"  (timeout="200")
[16:05:22.043]      // while-condition  =>  TRUE
[16:05:22.043]      // while "1"  (timeout="200")
[16:05:22.043]      // while-condition  =>  TRUE
[16:05:22.043]      // while "1"  (timeout="200")
[16:05:22.044]      // while-condition  =>  TRUE
[16:05:22.044]      // while "1"  (timeout="200")
[16:05:22.044]      // while-condition  =>  TRUE
[16:05:22.044]      // while "1"  (timeout="200")
[16:05:22.044]      // while-condition  =>  TRUE
[16:05:22.044]      // while "1"  (timeout="200")
[16:05:22.044]      // while-condition  =>  TRUE
[16:05:22.044]      // while "1"  (timeout="200")
[16:05:22.044]      // while-condition  =>  TRUE
[16:05:22.044]      // while "1"  (timeout="200")
[16:05:22.045]      // while-condition  =>  TRUE
[16:05:22.045]      // while "1"  (timeout="200")
[16:05:22.045]      // while-condition  =>  TRUE
[16:05:22.045]      // while "1"  (timeout="200")
[16:05:22.045]      // while-condition  =>  TRUE
[16:05:22.045]      // while "1"  (timeout="200")
[16:05:22.045]      // while-condition  =>  TRUE
[16:05:22.045]      // while "1"  (timeout="200")
[16:05:22.045]      // while-condition  =>  TRUE
[16:05:22.046]      // while "1"  (timeout="200")
[16:05:22.046]      // while-condition  =>  TRUE
[16:05:22.046]      // while "1"  (timeout="200")
[16:05:22.046]      // while-condition  =>  TRUE
[16:05:22.046]      // while "1"  (timeout="200")
[16:05:22.046]      // while-condition  =>  TRUE
[16:05:22.046]      // while "1"  (timeout="200")
[16:05:22.046]      // while-condition  =>  TRUE
[16:05:22.046]      // while "1"  (timeout="200")
[16:05:22.046]      // while-condition  =>  TRUE
[16:05:22.046]      // while "1"  (timeout="200")
[16:05:22.047]      // while-condition  =>  TRUE
[16:05:22.047]      // while "1"  (timeout="200")
[16:05:22.047]      // while-condition  =>  TRUE
[16:05:22.047]      // while "1"  (timeout="200")
[16:05:22.048]      // while-condition  =>  TRUE
[16:05:22.048]      // while "1"  (timeout="200")
[16:05:22.048]      // while-condition  =>  TRUE
[16:05:22.049]      // while "1"  (timeout="200")
[16:05:22.049]      // while-condition  =>  TRUE
[16:05:22.049]      // while "1"  (timeout="200")
[16:05:22.049]      // while-condition  =>  TRUE
[16:05:22.049]      // while "1"  (timeout="200")
[16:05:22.049]      // while-condition  =>  TRUE
[16:05:22.049]      // while "1"  (timeout="200")
[16:05:22.049]      // while-condition  =>  TRUE
[16:05:22.049]      // while "1"  (timeout="200")
[16:05:22.050]      // while-condition  =>  TRUE
[16:05:22.050]      // while "1"  (timeout="200")
[16:05:22.050]      // while  =>  TIMEOUT
[16:05:22.050]      // end while "1"
[16:05:22.050]    </control>
[16:05:22.050]    <control if="canReadPins" while="" timeout="0" info="">
[16:05:22.050]      // if-block "canReadPins"
[16:05:22.050]        // =>  TRUE
[16:05:22.050]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:05:22.050]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:05:22.051]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:05:22.051]        // while-condition  =>  FALSE
[16:05:22.051]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:05:22.051]      </control>
[16:05:22.051]      // end if-block "canReadPins"
[16:05:22.051]    </control>
[16:05:22.051]    <control if="!canReadPins" while="" timeout="0" info="">
[16:05:22.051]      // if-block "!canReadPins"
[16:05:22.051]        // =>  FALSE
[16:05:22.052]      // skip if-block "!canReadPins"
[16:05:22.052]    </control>
[16:05:22.052]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:05:22.052]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:05:22.052]        // =>  TRUE
[16:05:22.052]      <block atomic="false" info="">
[16:05:22.052]        WriteAP(0x00, 0x190008);
[16:05:22.052]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:05:22.052]        WriteAP(0xF0, 0x01);
[16:05:22.053]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:05:22.053]      </block>
[16:05:22.053]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:05:22.053]    </control>
[16:05:22.053]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:05:22.054]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:05:22.054]        // =>  FALSE
[16:05:22.054]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:05:22.054]    </control>
[16:05:22.054]    <block atomic="false" info="">
[16:05:22.054]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:05:22.054]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:05:22.055]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:05:22.055]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:05:22.057]      __ap = 0; //lets make sure we reset the access point selection
[16:05:22.057]        // -> [__ap <= 0x00000000]
[16:05:22.057]    </block>
[16:05:22.057]  </sequence>
[16:05:22.058]  
[16:05:22.060]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:05:22.060]  
[16:05:22.060]  <debugvars>
[16:05:22.060]    // Pre-defined
[16:05:22.060]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:22.060]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:22.060]    __dp=0x00000000
[16:05:22.060]    __ap=0x00000000
[16:05:22.060]    __traceout=0x00000000      (Trace Disabled)
[16:05:22.060]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:22.060]    __FlashAddr=0x00000000
[16:05:22.060]    __FlashLen=0x00000000
[16:05:22.060]    __FlashArg=0x00000000
[16:05:22.061]    __FlashOp=0x00000000
[16:05:22.061]    __Result=0x00000000
[16:05:22.061]  </debugvars>
[16:05:22.061]  
[16:05:22.061]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:05:22.061]    <block atomic="false" info="">
[16:05:22.061]      __var deviceID = 0;
[16:05:22.061]        // -> [deviceID <= 0x00000000]
[16:05:22.061]      __var version = 0;
[16:05:22.061]        // -> [version <= 0x00000000]
[16:05:22.062]      __var partNum = 0;
[16:05:22.062]        // -> [partNum <= 0x00000000]
[16:05:22.062]      __var manuf = 0;
[16:05:22.062]        // -> [manuf <= 0x00000000]
[16:05:22.062]      __var isMSPM0G1X0X_G3X0X = 0;
[16:05:22.062]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:05:22.062]      __var isProduction = 0;
[16:05:22.062]        // -> [isProduction <= 0x00000000]
[16:05:22.063]      __var continueId = 0;
[16:05:22.063]        // -> [continueId <= 0x00000000]
[16:05:22.063]      deviceID =   Read32(0x41C40004);
[16:05:22.064]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:05:22.064]        // -> [deviceID <= 0x2BB8802F]
[16:05:22.064]      version = deviceID >> 28;
[16:05:22.064]        // -> [version <= 0x00000002]
[16:05:22.065]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:05:22.065]        // -> [partNum <= 0x0000BB88]
[16:05:22.065]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:05:22.065]        // -> [manuf <= 0x00000017]
[16:05:22.065]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:05:22.065]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:05:22.065]      isProduction = (version > 0);
[16:05:22.065]        // -> [isProduction <= 0x00000001]
[16:05:22.065]    </block>
[16:05:22.065]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:05:22.065]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:05:22.065]        // =>  FALSE
[16:05:22.065]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:05:22.065]    </control>
[16:05:22.065]    <control if="continueId == 4" while="" timeout="0" info="">
[16:05:22.065]      // if-block "continueId == 4"
[16:05:22.065]        // =>  FALSE
[16:05:22.065]      // skip if-block "continueId == 4"
[16:05:22.065]    </control>
[16:05:22.065]    <control if="!isProduction" while="" timeout="0" info="">
[16:05:22.065]      // if-block "!isProduction"
[16:05:22.067]        // =>  FALSE
[16:05:22.067]      // skip if-block "!isProduction"
[16:05:22.067]    </control>
[16:05:22.067]  </sequence>
[16:05:22.067]  
[16:05:24.999]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:05:24.999]  
[16:05:24.999]  <debugvars>
[16:05:24.999]    // Pre-defined
[16:05:24.999]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:24.999]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:24.999]    __dp=0x00000000
[16:05:24.999]    __ap=0x00000000
[16:05:25.000]    __traceout=0x00000000      (Trace Disabled)
[16:05:25.000]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:25.000]    __FlashAddr=0x00000000
[16:05:25.000]    __FlashLen=0x00000000
[16:05:25.000]    __FlashArg=0x00000000
[16:05:25.000]    __FlashOp=0x00000000
[16:05:25.000]    __Result=0x00000000
[16:05:25.000]  </debugvars>
[16:05:25.000]  
[16:05:25.000]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:05:25.000]    <block atomic="false" info="">
[16:05:25.001]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:05:25.001]        // -> [isSWJ <= 0x00000001]
[16:05:25.001]      __var hasDormant = __protocol & 0x00020000;
[16:05:25.001]        // -> [hasDormant <= 0x00000000]
[16:05:25.001]      __var protType   = __protocol & 0x0000FFFF;
[16:05:25.001]        // -> [protType <= 0x00000002]
[16:05:25.001]    </block>
[16:05:25.001]    <control if="protType == 1" while="" timeout="0" info="">
[16:05:25.001]      // if-block "protType == 1"
[16:05:25.002]        // =>  FALSE
[16:05:25.002]      // skip if-block "protType == 1"
[16:05:25.002]    </control>
[16:05:25.002]    <control if="protType == 2" while="" timeout="0" info="">
[16:05:25.002]      // if-block "protType == 2"
[16:05:25.002]        // =>  TRUE
[16:05:25.003]      <control if="isSWJ" while="" timeout="0" info="">
[16:05:25.003]        // if-block "isSWJ"
[16:05:25.003]          // =>  TRUE
[16:05:25.003]        <control if="hasDormant" while="" timeout="0" info="">
[16:05:25.003]          // if-block "hasDormant"
[16:05:25.003]            // =>  FALSE
[16:05:25.003]          // skip if-block "hasDormant"
[16:05:25.003]        </control>
[16:05:25.003]        <control if="!hasDormant" while="" timeout="0" info="">
[16:05:25.003]          // if-block "!hasDormant"
[16:05:25.003]            // =>  TRUE
[16:05:25.004]          <block atomic="false" info="">
[16:05:25.004]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:05:25.004]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:25.004]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:05:25.004]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:05:25.005]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:05:25.005]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:25.005]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:05:25.006]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:05:25.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:05:25.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:25.006]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:05:25.006]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:05:25.006]          </block>
[16:05:25.007]          // end if-block "!hasDormant"
[16:05:25.007]        </control>
[16:05:25.007]        // end if-block "isSWJ"
[16:05:25.007]      </control>
[16:05:25.007]      <control if="!isSWJ" while="" timeout="0" info="">
[16:05:25.007]        // if-block "!isSWJ"
[16:05:25.007]          // =>  FALSE
[16:05:25.007]        // skip if-block "!isSWJ"
[16:05:25.007]      </control>
[16:05:25.008]      <block atomic="false" info="">
[16:05:25.008]        ReadDP(0x0);
[16:05:25.008]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:05:25.008]      </block>
[16:05:25.008]      // end if-block "protType == 2"
[16:05:25.008]    </control>
[16:05:25.008]  </sequence>
[16:05:25.008]  
[16:05:25.009]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:05:25.009]  
[16:05:25.009]  <debugvars>
[16:05:25.009]    // Pre-defined
[16:05:25.009]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:25.009]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:25.009]    __dp=0x00000000
[16:05:25.010]    __ap=0x00000000
[16:05:25.010]    __traceout=0x00000000      (Trace Disabled)
[16:05:25.010]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:25.010]    __FlashAddr=0x00000000
[16:05:25.010]    __FlashLen=0x00000000
[16:05:25.010]    __FlashArg=0x00000000
[16:05:25.011]    __FlashOp=0x00000000
[16:05:25.011]    __Result=0x00000000
[16:05:25.011]  </debugvars>
[16:05:25.011]  
[16:05:25.011]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:05:25.011]    <block atomic="false" info="">
[16:05:25.012]      __var SW_DP_ABORT       = 0x0;
[16:05:25.012]        // -> [SW_DP_ABORT <= 0x00000000]
[16:05:25.012]      __var DP_CTRL_STAT      = 0x4;
[16:05:25.012]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:05:25.012]      __var DP_SELECT         = 0x8;
[16:05:25.012]        // -> [DP_SELECT <= 0x00000008]
[16:05:25.012]      __var powered_down      = 0;
[16:05:25.012]        // -> [powered_down <= 0x00000000]
[16:05:25.012]      WriteDP(DP_SELECT, 0x00000000);
[16:05:25.013]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:05:25.013]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:05:25.013]        // -> [ReadDP(0x00000004) => 0xF0000F40]   (__dp=0x00000000)
[16:05:25.013]        // -> [powered_down <= 0x00000000]
[16:05:25.013]    </block>
[16:05:25.013]    <control if="powered_down" while="" timeout="0" info="">
[16:05:25.013]      // if-block "powered_down"
[16:05:25.013]        // =>  FALSE
[16:05:25.013]      // skip if-block "powered_down"
[16:05:25.014]    </control>
[16:05:25.014]    <block atomic="false" info="">
[16:05:25.014]      __var DEBUG_PORT_VAL    = 0;
[16:05:25.014]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:05:25.014]      __var ACCESS_POINT_VAL  = 0;
[16:05:25.014]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:05:25.014]      __ap = 1; 
[16:05:25.014]        // -> [__ap <= 0x00000001]
[16:05:25.014]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:05:25.015]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:05:25.015]      __ap = 4;
[16:05:25.015]        // -> [__ap <= 0x00000004]
[16:05:25.015]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:05:25.016]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[16:05:25.016]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[16:05:25.016]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:05:25.018]    </block>
[16:05:25.019]    <block atomic="false" info="">
[16:05:25.019]      __var nReset = 0x80;
[16:05:25.019]        // -> [nReset <= 0x00000080]
[16:05:25.019]      __var canReadPins = 0;
[16:05:25.019]        // -> [canReadPins <= 0x00000000]
[16:05:25.019]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:05:25.019]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:05:25.020]        // -> [canReadPins <= 0x00000001]
[16:05:25.020]    </block>
[16:05:25.020]    <control if="" while="1" timeout="200" info="">
[16:05:25.020]      // while "1"  (timeout="200")
[16:05:25.020]      // while-condition  =>  TRUE
[16:05:25.020]      // while "1"  (timeout="200")
[16:05:25.020]      // while-condition  =>  TRUE
[16:05:25.020]      // while "1"  (timeout="200")
[16:05:25.020]      // while-condition  =>  TRUE
[16:05:25.021]      // while "1"  (timeout="200")
[16:05:25.021]      // while-condition  =>  TRUE
[16:05:25.021]      // while "1"  (timeout="200")
[16:05:25.021]      // while-condition  =>  TRUE
[16:05:25.021]      // while "1"  (timeout="200")
[16:05:25.021]      // while-condition  =>  TRUE
[16:05:25.021]      // while "1"  (timeout="200")
[16:05:25.021]      // while-condition  =>  TRUE
[16:05:25.021]      // while "1"  (timeout="200")
[16:05:25.022]      // while-condition  =>  TRUE
[16:05:25.022]      // while "1"  (timeout="200")
[16:05:25.022]      // while-condition  =>  TRUE
[16:05:25.022]      // while "1"  (timeout="200")
[16:05:25.022]      // while-condition  =>  TRUE
[16:05:25.022]      // while "1"  (timeout="200")
[16:05:25.022]      // while-condition  =>  TRUE
[16:05:25.022]      // while "1"  (timeout="200")
[16:05:25.022]      // while-condition  =>  TRUE
[16:05:25.022]      // while "1"  (timeout="200")
[16:05:25.022]      // while-condition  =>  TRUE
[16:05:25.022]      // while "1"  (timeout="200")
[16:05:25.023]      // while-condition  =>  TRUE
[16:05:25.023]      // while "1"  (timeout="200")
[16:05:25.023]      // while-condition  =>  TRUE
[16:05:25.023]      // while "1"  (timeout="200")
[16:05:25.023]      // while-condition  =>  TRUE
[16:05:25.023]      // while "1"  (timeout="200")
[16:05:25.023]      // while-condition  =>  TRUE
[16:05:25.023]      // while "1"  (timeout="200")
[16:05:25.023]      // while-condition  =>  TRUE
[16:05:25.023]      // while "1"  (timeout="200")
[16:05:25.023]      // while-condition  =>  TRUE
[16:05:25.024]      // while "1"  (timeout="200")
[16:05:25.024]      // while-condition  =>  TRUE
[16:05:25.024]      // while "1"  (timeout="200")
[16:05:25.024]      // while-condition  =>  TRUE
[16:05:25.024]      // while "1"  (timeout="200")
[16:05:25.024]      // while-condition  =>  TRUE
[16:05:25.024]      // while "1"  (timeout="200")
[16:05:25.024]      // while-condition  =>  TRUE
[16:05:25.024]      // while "1"  (timeout="200")
[16:05:25.024]      // while-condition  =>  TRUE
[16:05:25.024]      // while "1"  (timeout="200")
[16:05:25.025]      // while-condition  =>  TRUE
[16:05:25.025]      // while "1"  (timeout="200")
[16:05:25.025]      // while-condition  =>  TRUE
[16:05:25.025]      // while "1"  (timeout="200")
[16:05:25.025]      // while-condition  =>  TRUE
[16:05:25.025]      // while "1"  (timeout="200")
[16:05:25.025]      // while-condition  =>  TRUE
[16:05:25.025]      // while "1"  (timeout="200")
[16:05:25.025]      // while-condition  =>  TRUE
[16:05:25.025]      // while "1"  (timeout="200")
[16:05:25.025]      // while-condition  =>  TRUE
[16:05:25.026]      // while "1"  (timeout="200")
[16:05:25.026]      // while-condition  =>  TRUE
[16:05:25.026]      // while "1"  (timeout="200")
[16:05:25.026]      // while-condition  =>  TRUE
[16:05:25.026]      // while "1"  (timeout="200")
[16:05:25.026]      // while-condition  =>  TRUE
[16:05:25.026]      // while "1"  (timeout="200")
[16:05:25.026]      // while-condition  =>  TRUE
[16:05:25.026]      // while "1"  (timeout="200")
[16:05:25.026]      // while-condition  =>  TRUE
[16:05:25.027]      // while "1"  (timeout="200")
[16:05:25.027]      // while-condition  =>  TRUE
[16:05:25.027]      // while "1"  (timeout="200")
[16:05:25.027]      // while-condition  =>  TRUE
[16:05:25.027]      // while "1"  (timeout="200")
[16:05:25.027]      // while-condition  =>  TRUE
[16:05:25.027]      // while "1"  (timeout="200")
[16:05:25.027]      // while-condition  =>  TRUE
[16:05:25.027]      // while "1"  (timeout="200")
[16:05:25.028]      // while-condition  =>  TRUE
[16:05:25.028]      // while "1"  (timeout="200")
[16:05:25.028]      // while-condition  =>  TRUE
[16:05:25.028]      // while "1"  (timeout="200")
[16:05:25.029]      // while-condition  =>  TRUE
[16:05:25.029]      // while "1"  (timeout="200")
[16:05:25.029]      // while-condition  =>  TRUE
[16:05:25.029]      // while "1"  (timeout="200")
[16:05:25.029]      // while-condition  =>  TRUE
[16:05:25.029]      // while "1"  (timeout="200")
[16:05:25.029]      // while-condition  =>  TRUE
[16:05:25.029]      // while "1"  (timeout="200")
[16:05:25.029]      // while-condition  =>  TRUE
[16:05:25.029]      // while "1"  (timeout="200")
[16:05:25.029]      // while-condition  =>  TRUE
[16:05:25.030]      // while "1"  (timeout="200")
[16:05:25.030]      // while-condition  =>  TRUE
[16:05:25.030]      // while "1"  (timeout="200")
[16:05:25.030]      // while-condition  =>  TRUE
[16:05:25.030]      // while "1"  (timeout="200")
[16:05:25.030]      // while-condition  =>  TRUE
[16:05:25.030]      // while "1"  (timeout="200")
[16:05:25.030]      // while-condition  =>  TRUE
[16:05:25.031]      // while "1"  (timeout="200")
[16:05:25.031]      // while-condition  =>  TRUE
[16:05:25.031]      // while "1"  (timeout="200")
[16:05:25.031]      // while-condition  =>  TRUE
[16:05:25.031]      // while "1"  (timeout="200")
[16:05:25.031]      // while-condition  =>  TRUE
[16:05:25.031]      // while "1"  (timeout="200")
[16:05:25.031]      // while-condition  =>  TRUE
[16:05:25.031]      // while "1"  (timeout="200")
[16:05:25.031]      // while-condition  =>  TRUE
[16:05:25.031]      // while "1"  (timeout="200")
[16:05:25.031]      // while-condition  =>  TRUE
[16:05:25.031]      // while "1"  (timeout="200")
[16:05:25.031]      // while-condition  =>  TRUE
[16:05:25.032]      // while "1"  (timeout="200")
[16:05:25.032]      // while-condition  =>  TRUE
[16:05:25.032]      // while "1"  (timeout="200")
[16:05:25.032]      // while-condition  =>  TRUE
[16:05:25.032]      // while "1"  (timeout="200")
[16:05:25.032]      // while-condition  =>  TRUE
[16:05:25.032]      // while "1"  (timeout="200")
[16:05:25.032]      // while-condition  =>  TRUE
[16:05:25.032]      // while "1"  (timeout="200")
[16:05:25.032]      // while-condition  =>  TRUE
[16:05:25.032]      // while "1"  (timeout="200")
[16:05:25.032]      // while-condition  =>  TRUE
[16:05:25.033]      // while "1"  (timeout="200")
[16:05:25.033]      // while-condition  =>  TRUE
[16:05:25.033]      // while "1"  (timeout="200")
[16:05:25.033]      // while-condition  =>  TRUE
[16:05:25.033]      // while "1"  (timeout="200")
[16:05:25.033]      // while-condition  =>  TRUE
[16:05:25.033]      // while "1"  (timeout="200")
[16:05:25.034]      // while-condition  =>  TRUE
[16:05:25.034]      // while "1"  (timeout="200")
[16:05:25.034]      // while  =>  TIMEOUT
[16:05:25.034]      // end while "1"
[16:05:25.034]    </control>
[16:05:25.034]    <control if="canReadPins" while="" timeout="0" info="">
[16:05:25.035]      // if-block "canReadPins"
[16:05:25.035]        // =>  TRUE
[16:05:25.035]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:05:25.035]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:05:25.035]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:05:25.035]        // while-condition  =>  FALSE
[16:05:25.035]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:05:25.035]      </control>
[16:05:25.035]      // end if-block "canReadPins"
[16:05:25.035]    </control>
[16:05:25.036]    <control if="!canReadPins" while="" timeout="0" info="">
[16:05:25.036]      // if-block "!canReadPins"
[16:05:25.036]        // =>  FALSE
[16:05:25.036]      // skip if-block "!canReadPins"
[16:05:25.036]    </control>
[16:05:25.036]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:05:25.036]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:05:25.036]        // =>  FALSE
[16:05:25.036]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:05:25.036]    </control>
[16:05:25.036]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:05:25.036]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:05:25.036]        // =>  TRUE
[16:05:25.036]      <block atomic="false" info="">
[16:05:25.038]        WriteAP(0xF0, 0x01);
[16:05:25.038]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:05:25.038]        WriteAP(0x00, 0xF90008);
[16:05:25.039]          // -> [WriteAP(0x00000000, 0x00F90008)]   (__dp=0x00000000, __ap=0x00000004)
[16:05:25.039]        WriteAP(0xF0, 0x01);
[16:05:25.039]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:05:25.040]      </block>
[16:05:25.040]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:05:25.040]    </control>
[16:05:25.040]    <block atomic="false" info="">
[16:05:25.040]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:05:25.040]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[16:05:25.041]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[16:05:25.041]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:05:25.042]      __ap = 0; //lets make sure we reset the access point selection
[16:05:25.043]        // -> [__ap <= 0x00000000]
[16:05:25.043]    </block>
[16:05:25.043]  </sequence>
[16:05:25.043]  
[16:05:25.045]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:05:25.045]  
[16:05:25.045]  <debugvars>
[16:05:25.045]    // Pre-defined
[16:05:25.046]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:25.046]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:25.046]    __dp=0x00000000
[16:05:25.046]    __ap=0x00000000
[16:05:25.046]    __traceout=0x00000000      (Trace Disabled)
[16:05:25.046]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:25.046]    __FlashAddr=0x00000000
[16:05:25.046]    __FlashLen=0x00000000
[16:05:25.046]    __FlashArg=0x00000000
[16:05:25.046]    __FlashOp=0x00000000
[16:05:25.046]    __Result=0x00000000
[16:05:25.046]  </debugvars>
[16:05:25.046]  
[16:05:25.046]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:05:25.046]    <block atomic="false" info="">
[16:05:25.046]      __var deviceID = 0;
[16:05:25.046]        // -> [deviceID <= 0x00000000]
[16:05:25.048]      __var version = 0;
[16:05:25.048]        // -> [version <= 0x00000000]
[16:05:25.048]      __var partNum = 0;
[16:05:25.048]        // -> [partNum <= 0x00000000]
[16:05:25.048]      __var manuf = 0;
[16:05:25.048]        // -> [manuf <= 0x00000000]
[16:05:25.048]      __var isMSPM0G1X0X_G3X0X = 0;
[16:05:25.048]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:05:25.048]      __var isProduction = 0;
[16:05:25.048]        // -> [isProduction <= 0x00000000]
[16:05:25.048]      __var continueId = 0;
[16:05:25.048]        // -> [continueId <= 0x00000000]
[16:05:25.048]      deviceID =   Read32(0x41C40004);
[16:05:25.050]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:05:25.050]        // -> [deviceID <= 0x2BB8802F]
[16:05:25.050]      version = deviceID >> 28;
[16:05:25.050]        // -> [version <= 0x00000002]
[16:05:25.050]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:05:25.050]        // -> [partNum <= 0x0000BB88]
[16:05:25.050]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:05:25.050]        // -> [manuf <= 0x00000017]
[16:05:25.050]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:05:25.050]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:05:25.050]      isProduction = (version > 0);
[16:05:25.050]        // -> [isProduction <= 0x00000001]
[16:05:25.051]    </block>
[16:05:25.051]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:05:25.051]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:05:25.051]        // =>  FALSE
[16:05:25.051]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:05:25.051]    </control>
[16:05:25.051]    <control if="continueId == 4" while="" timeout="0" info="">
[16:05:25.051]      // if-block "continueId == 4"
[16:05:25.051]        // =>  FALSE
[16:05:25.051]      // skip if-block "continueId == 4"
[16:05:25.051]    </control>
[16:05:25.052]    <control if="!isProduction" while="" timeout="0" info="">
[16:05:25.052]      // if-block "!isProduction"
[16:05:25.052]        // =>  FALSE
[16:05:25.052]      // skip if-block "!isProduction"
[16:05:25.052]    </control>
[16:05:25.052]  </sequence>
[16:05:25.052]  
[16:05:33.671]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:05:33.671]  
[16:05:33.671]  <debugvars>
[16:05:33.672]    // Pre-defined
[16:05:33.672]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:33.672]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:33.672]    __dp=0x00000000
[16:05:33.672]    __ap=0x00000000
[16:05:33.672]    __traceout=0x00000000      (Trace Disabled)
[16:05:33.672]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:33.672]    __FlashAddr=0x00000000
[16:05:33.672]    __FlashLen=0x00000000
[16:05:33.673]    __FlashArg=0x00000000
[16:05:33.673]    __FlashOp=0x00000000
[16:05:33.673]    __Result=0x00000000
[16:05:33.673]  </debugvars>
[16:05:33.673]  
[16:05:33.673]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:05:33.673]    <block atomic="false" info="">
[16:05:33.673]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:05:33.673]        // -> [isSWJ <= 0x00000001]
[16:05:33.673]      __var hasDormant = __protocol & 0x00020000;
[16:05:33.674]        // -> [hasDormant <= 0x00000000]
[16:05:33.674]      __var protType   = __protocol & 0x0000FFFF;
[16:05:33.674]        // -> [protType <= 0x00000002]
[16:05:33.674]    </block>
[16:05:33.674]    <control if="protType == 1" while="" timeout="0" info="">
[16:05:33.674]      // if-block "protType == 1"
[16:05:33.674]        // =>  FALSE
[16:05:33.674]      // skip if-block "protType == 1"
[16:05:33.674]    </control>
[16:05:33.674]    <control if="protType == 2" while="" timeout="0" info="">
[16:05:33.674]      // if-block "protType == 2"
[16:05:33.674]        // =>  TRUE
[16:05:33.675]      <control if="isSWJ" while="" timeout="0" info="">
[16:05:33.675]        // if-block "isSWJ"
[16:05:33.675]          // =>  TRUE
[16:05:33.675]        <control if="hasDormant" while="" timeout="0" info="">
[16:05:33.675]          // if-block "hasDormant"
[16:05:33.675]            // =>  FALSE
[16:05:33.675]          // skip if-block "hasDormant"
[16:05:33.675]        </control>
[16:05:33.675]        <control if="!hasDormant" while="" timeout="0" info="">
[16:05:33.675]          // if-block "!hasDormant"
[16:05:33.675]            // =>  TRUE
[16:05:33.676]          <block atomic="false" info="">
[16:05:33.676]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:05:33.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:33.676]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:05:33.676]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:05:33.676]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:05:33.676]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:33.678]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:05:33.678]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:05:33.678]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:05:33.678]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:33.679]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:05:33.679]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:05:33.679]          </block>
[16:05:33.679]          // end if-block "!hasDormant"
[16:05:33.679]        </control>
[16:05:33.679]        // end if-block "isSWJ"
[16:05:33.679]      </control>
[16:05:33.679]      <control if="!isSWJ" while="" timeout="0" info="">
[16:05:33.679]        // if-block "!isSWJ"
[16:05:33.680]          // =>  FALSE
[16:05:33.680]        // skip if-block "!isSWJ"
[16:05:33.680]      </control>
[16:05:33.680]      <block atomic="false" info="">
[16:05:33.680]        ReadDP(0x0);
[16:05:33.680]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:05:33.680]      </block>
[16:05:33.680]      // end if-block "protType == 2"
[16:05:33.681]    </control>
[16:05:33.681]  </sequence>
[16:05:33.681]  
[16:05:33.681]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:05:33.681]  
[16:05:33.681]  <debugvars>
[16:05:33.681]    // Pre-defined
[16:05:33.681]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:33.681]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:33.682]    __dp=0x00000000
[16:05:33.682]    __ap=0x00000000
[16:05:33.682]    __traceout=0x00000000      (Trace Disabled)
[16:05:33.682]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:33.682]    __FlashAddr=0x00000000
[16:05:33.682]    __FlashLen=0x00000000
[16:05:33.682]    __FlashArg=0x00000000
[16:05:33.682]    __FlashOp=0x00000000
[16:05:33.682]    __Result=0x00000000
[16:05:33.682]  </debugvars>
[16:05:33.682]  
[16:05:33.683]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:05:33.683]    <block atomic="false" info="">
[16:05:33.683]      __var SW_DP_ABORT       = 0x0;
[16:05:33.683]        // -> [SW_DP_ABORT <= 0x00000000]
[16:05:33.683]      __var DP_CTRL_STAT      = 0x4;
[16:05:33.683]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:05:33.683]      __var DP_SELECT         = 0x8;
[16:05:33.683]        // -> [DP_SELECT <= 0x00000008]
[16:05:33.684]      __var powered_down      = 0;
[16:05:33.684]        // -> [powered_down <= 0x00000000]
[16:05:33.684]      WriteDP(DP_SELECT, 0x00000000);
[16:05:33.684]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:05:33.684]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:05:33.684]        // -> [ReadDP(0x00000004) => 0xF0000F40]   (__dp=0x00000000)
[16:05:33.685]        // -> [powered_down <= 0x00000000]
[16:05:33.685]    </block>
[16:05:33.685]    <control if="powered_down" while="" timeout="0" info="">
[16:05:33.685]      // if-block "powered_down"
[16:05:33.685]        // =>  FALSE
[16:05:33.685]      // skip if-block "powered_down"
[16:05:33.685]    </control>
[16:05:33.685]    <block atomic="false" info="">
[16:05:33.686]      __var DEBUG_PORT_VAL    = 0;
[16:05:33.686]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:05:33.686]      __var ACCESS_POINT_VAL  = 0;
[16:05:33.686]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:05:33.686]      __ap = 1; 
[16:05:33.686]        // -> [__ap <= 0x00000001]
[16:05:33.687]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:05:33.687]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:05:33.687]      __ap = 4;
[16:05:33.687]        // -> [__ap <= 0x00000004]
[16:05:33.688]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:05:33.688]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[16:05:33.688]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[16:05:33.688]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:05:33.690]    </block>
[16:05:33.690]    <block atomic="false" info="">
[16:05:33.690]      __var nReset = 0x80;
[16:05:33.690]        // -> [nReset <= 0x00000080]
[16:05:33.690]      __var canReadPins = 0;
[16:05:33.690]        // -> [canReadPins <= 0x00000000]
[16:05:33.690]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:05:33.691]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:05:33.691]        // -> [canReadPins <= 0x00000001]
[16:05:33.691]    </block>
[16:05:33.691]    <control if="" while="1" timeout="200" info="">
[16:05:33.691]      // while "1"  (timeout="200")
[16:05:33.691]      // while-condition  =>  TRUE
[16:05:33.691]      // while "1"  (timeout="200")
[16:05:33.692]      // while-condition  =>  TRUE
[16:05:33.692]      // while "1"  (timeout="200")
[16:05:33.692]      // while-condition  =>  TRUE
[16:05:33.692]      // while "1"  (timeout="200")
[16:05:33.692]      // while-condition  =>  TRUE
[16:05:33.692]      // while "1"  (timeout="200")
[16:05:33.692]      // while-condition  =>  TRUE
[16:05:33.693]      // while "1"  (timeout="200")
[16:05:33.693]      // while-condition  =>  TRUE
[16:05:33.693]      // while "1"  (timeout="200")
[16:05:33.693]      // while-condition  =>  TRUE
[16:05:33.693]      // while "1"  (timeout="200")
[16:05:33.693]      // while-condition  =>  TRUE
[16:05:33.693]      // while "1"  (timeout="200")
[16:05:33.694]      // while-condition  =>  TRUE
[16:05:33.694]      // while "1"  (timeout="200")
[16:05:33.694]      // while-condition  =>  TRUE
[16:05:33.694]      // while "1"  (timeout="200")
[16:05:33.694]      // while-condition  =>  TRUE
[16:05:33.695]      // while "1"  (timeout="200")
[16:05:33.695]      // while-condition  =>  TRUE
[16:05:33.695]      // while "1"  (timeout="200")
[16:05:33.695]      // while-condition  =>  TRUE
[16:05:33.695]      // while "1"  (timeout="200")
[16:05:33.695]      // while-condition  =>  TRUE
[16:05:33.695]      // while "1"  (timeout="200")
[16:05:33.695]      // while-condition  =>  TRUE
[16:05:33.695]      // while "1"  (timeout="200")
[16:05:33.695]      // while-condition  =>  TRUE
[16:05:33.695]      // while "1"  (timeout="200")
[16:05:33.696]      // while-condition  =>  TRUE
[16:05:33.696]      // while "1"  (timeout="200")
[16:05:33.696]      // while-condition  =>  TRUE
[16:05:33.696]      // while "1"  (timeout="200")
[16:05:33.696]      // while-condition  =>  TRUE
[16:05:33.696]      // while "1"  (timeout="200")
[16:05:33.696]      // while-condition  =>  TRUE
[16:05:33.696]      // while "1"  (timeout="200")
[16:05:33.696]      // while-condition  =>  TRUE
[16:05:33.696]      // while "1"  (timeout="200")
[16:05:33.697]      // while-condition  =>  TRUE
[16:05:33.697]      // while "1"  (timeout="200")
[16:05:33.697]      // while-condition  =>  TRUE
[16:05:33.697]      // while "1"  (timeout="200")
[16:05:33.697]      // while-condition  =>  TRUE
[16:05:33.697]      // while "1"  (timeout="200")
[16:05:33.697]      // while-condition  =>  TRUE
[16:05:33.697]      // while "1"  (timeout="200")
[16:05:33.697]      // while-condition  =>  TRUE
[16:05:33.697]      // while "1"  (timeout="200")
[16:05:33.697]      // while-condition  =>  TRUE
[16:05:33.698]      // while "1"  (timeout="200")
[16:05:33.698]      // while-condition  =>  TRUE
[16:05:33.698]      // while "1"  (timeout="200")
[16:05:33.698]      // while-condition  =>  TRUE
[16:05:33.698]      // while "1"  (timeout="200")
[16:05:33.698]      // while-condition  =>  TRUE
[16:05:33.698]      // while "1"  (timeout="200")
[16:05:33.698]      // while-condition  =>  TRUE
[16:05:33.698]      // while "1"  (timeout="200")
[16:05:33.698]      // while-condition  =>  TRUE
[16:05:33.699]      // while "1"  (timeout="200")
[16:05:33.699]      // while-condition  =>  TRUE
[16:05:33.699]      // while "1"  (timeout="200")
[16:05:33.699]      // while-condition  =>  TRUE
[16:05:33.699]      // while "1"  (timeout="200")
[16:05:33.699]      // while-condition  =>  TRUE
[16:05:33.699]      // while "1"  (timeout="200")
[16:05:33.699]      // while-condition  =>  TRUE
[16:05:33.699]      // while "1"  (timeout="200")
[16:05:33.699]      // while-condition  =>  TRUE
[16:05:33.699]      // while "1"  (timeout="200")
[16:05:33.700]      // while-condition  =>  TRUE
[16:05:33.700]      // while "1"  (timeout="200")
[16:05:33.700]      // while-condition  =>  TRUE
[16:05:33.700]      // while "1"  (timeout="200")
[16:05:33.700]      // while-condition  =>  TRUE
[16:05:33.700]      // while "1"  (timeout="200")
[16:05:33.700]      // while-condition  =>  TRUE
[16:05:33.700]      // while "1"  (timeout="200")
[16:05:33.700]      // while-condition  =>  TRUE
[16:05:33.701]      // while "1"  (timeout="200")
[16:05:33.701]      // while-condition  =>  TRUE
[16:05:33.701]      // while "1"  (timeout="200")
[16:05:33.701]      // while-condition  =>  TRUE
[16:05:33.701]      // while "1"  (timeout="200")
[16:05:33.701]      // while-condition  =>  TRUE
[16:05:33.701]      // while "1"  (timeout="200")
[16:05:33.702]      // while-condition  =>  TRUE
[16:05:33.702]      // while "1"  (timeout="200")
[16:05:33.702]      // while-condition  =>  TRUE
[16:05:33.702]      // while "1"  (timeout="200")
[16:05:33.702]      // while-condition  =>  TRUE
[16:05:33.702]      // while "1"  (timeout="200")
[16:05:33.702]      // while-condition  =>  TRUE
[16:05:33.702]      // while "1"  (timeout="200")
[16:05:33.702]      // while-condition  =>  TRUE
[16:05:33.702]      // while "1"  (timeout="200")
[16:05:33.703]      // while-condition  =>  TRUE
[16:05:33.703]      // while "1"  (timeout="200")
[16:05:33.703]      // while-condition  =>  TRUE
[16:05:33.703]      // while "1"  (timeout="200")
[16:05:33.703]      // while-condition  =>  TRUE
[16:05:33.703]      // while "1"  (timeout="200")
[16:05:33.703]      // while-condition  =>  TRUE
[16:05:33.703]      // while "1"  (timeout="200")
[16:05:33.703]      // while-condition  =>  TRUE
[16:05:33.703]      // while "1"  (timeout="200")
[16:05:33.704]      // while-condition  =>  TRUE
[16:05:33.704]      // while "1"  (timeout="200")
[16:05:33.704]      // while-condition  =>  TRUE
[16:05:33.704]      // while "1"  (timeout="200")
[16:05:33.704]      // while-condition  =>  TRUE
[16:05:33.705]      // while "1"  (timeout="200")
[16:05:33.705]      // while-condition  =>  TRUE
[16:05:33.705]      // while "1"  (timeout="200")
[16:05:33.705]      // while-condition  =>  TRUE
[16:05:33.705]      // while "1"  (timeout="200")
[16:05:33.705]      // while-condition  =>  TRUE
[16:05:33.705]      // while "1"  (timeout="200")
[16:05:33.705]      // while-condition  =>  TRUE
[16:05:33.705]      // while "1"  (timeout="200")
[16:05:33.705]      // while-condition  =>  TRUE
[16:05:33.705]      // while "1"  (timeout="200")
[16:05:33.705]      // while-condition  =>  TRUE
[16:05:33.706]      // while "1"  (timeout="200")
[16:05:33.706]      // while  =>  TIMEOUT
[16:05:33.706]      // end while "1"
[16:05:33.706]    </control>
[16:05:33.706]    <control if="canReadPins" while="" timeout="0" info="">
[16:05:33.706]      // if-block "canReadPins"
[16:05:33.706]        // =>  TRUE
[16:05:33.706]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:05:33.706]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:05:33.706]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:05:33.707]        // while-condition  =>  FALSE
[16:05:33.707]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:05:33.707]      </control>
[16:05:33.707]      // end if-block "canReadPins"
[16:05:33.707]    </control>
[16:05:33.707]    <control if="!canReadPins" while="" timeout="0" info="">
[16:05:33.707]      // if-block "!canReadPins"
[16:05:33.707]        // =>  FALSE
[16:05:33.707]      // skip if-block "!canReadPins"
[16:05:33.707]    </control>
[16:05:33.707]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:05:33.708]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:05:33.708]        // =>  FALSE
[16:05:33.708]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:05:33.708]    </control>
[16:05:33.708]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:05:33.708]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:05:33.708]        // =>  TRUE
[16:05:33.708]      <block atomic="false" info="">
[16:05:33.708]        WriteAP(0xF0, 0x01);
[16:05:33.709]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:05:33.709]        WriteAP(0x00, 0xF90008);
[16:05:33.709]          // -> [WriteAP(0x00000000, 0x00F90008)]   (__dp=0x00000000, __ap=0x00000004)
[16:05:33.709]        WriteAP(0xF0, 0x01);
[16:05:33.710]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:05:33.710]      </block>
[16:05:33.710]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:05:33.710]    </control>
[16:05:33.710]    <block atomic="false" info="">
[16:05:33.710]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:05:33.711]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[16:05:33.711]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[16:05:33.711]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:05:33.713]      __ap = 0; //lets make sure we reset the access point selection
[16:05:33.713]        // -> [__ap <= 0x00000000]
[16:05:33.713]    </block>
[16:05:33.713]  </sequence>
[16:05:33.713]  
[16:05:33.716]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:05:33.716]  
[16:05:33.716]  <debugvars>
[16:05:33.716]    // Pre-defined
[16:05:33.716]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:33.716]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:05:33.716]    __dp=0x00000000
[16:05:33.716]    __ap=0x00000000
[16:05:33.716]    __traceout=0x00000000      (Trace Disabled)
[16:05:33.716]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:33.716]    __FlashAddr=0x00000000
[16:05:33.716]    __FlashLen=0x00000000
[16:05:33.716]    __FlashArg=0x00000000
[16:05:33.716]    __FlashOp=0x00000000
[16:05:33.716]    __Result=0x00000000
[16:05:33.718]  </debugvars>
[16:05:33.718]  
[16:05:33.718]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:05:33.718]    <block atomic="false" info="">
[16:05:33.718]      __var deviceID = 0;
[16:05:33.718]        // -> [deviceID <= 0x00000000]
[16:05:33.718]      __var version = 0;
[16:05:33.718]        // -> [version <= 0x00000000]
[16:05:33.718]      __var partNum = 0;
[16:05:33.718]        // -> [partNum <= 0x00000000]
[16:05:33.718]      __var manuf = 0;
[16:05:33.718]        // -> [manuf <= 0x00000000]
[16:05:33.718]      __var isMSPM0G1X0X_G3X0X = 0;
[16:05:33.718]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:05:33.718]      __var isProduction = 0;
[16:05:33.718]        // -> [isProduction <= 0x00000000]
[16:05:33.718]      __var continueId = 0;
[16:05:33.719]        // -> [continueId <= 0x00000000]
[16:05:33.719]      deviceID =   Read32(0x41C40004);
[16:05:33.719]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:05:33.720]        // -> [deviceID <= 0x2BB8802F]
[16:05:33.720]      version = deviceID >> 28;
[16:05:33.720]        // -> [version <= 0x00000002]
[16:05:33.720]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:05:33.720]        // -> [partNum <= 0x0000BB88]
[16:05:33.720]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:05:33.721]        // -> [manuf <= 0x00000017]
[16:05:33.721]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:05:33.721]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:05:33.721]      isProduction = (version > 0);
[16:05:33.721]        // -> [isProduction <= 0x00000001]
[16:05:33.721]    </block>
[16:05:33.721]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:05:33.721]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:05:33.722]        // =>  FALSE
[16:05:33.722]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:05:33.722]    </control>
[16:05:33.722]    <control if="continueId == 4" while="" timeout="0" info="">
[16:05:33.722]      // if-block "continueId == 4"
[16:05:33.722]        // =>  FALSE
[16:05:33.722]      // skip if-block "continueId == 4"
[16:05:33.722]    </control>
[16:05:33.722]    <control if="!isProduction" while="" timeout="0" info="">
[16:05:33.722]      // if-block "!isProduction"
[16:05:33.722]        // =>  FALSE
[16:05:33.722]      // skip if-block "!isProduction"
[16:05:33.724]    </control>
[16:05:33.724]  </sequence>
[16:05:33.724]  
[16:05:39.065]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:05:39.065]  
[16:05:39.065]  <debugvars>
[16:05:39.066]    // Pre-defined
[16:05:39.066]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:39.066]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:05:39.066]    __dp=0x00000000
[16:05:39.066]    __ap=0x00000000
[16:05:39.066]    __traceout=0x00000000      (Trace Disabled)
[16:05:39.066]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:39.066]    __FlashAddr=0x00000000
[16:05:39.066]    __FlashLen=0x00000000
[16:05:39.066]    __FlashArg=0x00000000
[16:05:39.066]    __FlashOp=0x00000000
[16:05:39.068]    __Result=0x00000000
[16:05:39.068]  </debugvars>
[16:05:39.068]  
[16:05:39.068]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:05:39.068]    <block atomic="false" info="">
[16:05:39.068]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:05:39.068]        // -> [isSWJ <= 0x00000001]
[16:05:39.068]      __var hasDormant = __protocol & 0x00020000;
[16:05:39.068]        // -> [hasDormant <= 0x00000000]
[16:05:39.068]      __var protType   = __protocol & 0x0000FFFF;
[16:05:39.069]        // -> [protType <= 0x00000002]
[16:05:39.069]    </block>
[16:05:39.069]    <control if="protType == 1" while="" timeout="0" info="">
[16:05:39.069]      // if-block "protType == 1"
[16:05:39.069]        // =>  FALSE
[16:05:39.069]      // skip if-block "protType == 1"
[16:05:39.069]    </control>
[16:05:39.069]    <control if="protType == 2" while="" timeout="0" info="">
[16:05:39.069]      // if-block "protType == 2"
[16:05:39.069]        // =>  TRUE
[16:05:39.069]      <control if="isSWJ" while="" timeout="0" info="">
[16:05:39.069]        // if-block "isSWJ"
[16:05:39.069]          // =>  TRUE
[16:05:39.069]        <control if="hasDormant" while="" timeout="0" info="">
[16:05:39.070]          // if-block "hasDormant"
[16:05:39.070]            // =>  FALSE
[16:05:39.070]          // skip if-block "hasDormant"
[16:05:39.070]        </control>
[16:05:39.070]        <control if="!hasDormant" while="" timeout="0" info="">
[16:05:39.071]          // if-block "!hasDormant"
[16:05:39.071]            // =>  TRUE
[16:05:39.071]          <block atomic="false" info="">
[16:05:39.071]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:05:39.071]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:39.071]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:05:39.071]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:05:39.071]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:05:39.072]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:39.072]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:05:39.072]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:05:39.072]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:05:39.072]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:39.073]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:05:39.073]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:05:39.073]          </block>
[16:05:39.073]          // end if-block "!hasDormant"
[16:05:39.073]        </control>
[16:05:39.074]        // end if-block "isSWJ"
[16:05:39.074]      </control>
[16:05:39.074]      <control if="!isSWJ" while="" timeout="0" info="">
[16:05:39.074]        // if-block "!isSWJ"
[16:05:39.074]          // =>  FALSE
[16:05:39.074]        // skip if-block "!isSWJ"
[16:05:39.074]      </control>
[16:05:39.074]      <block atomic="false" info="">
[16:05:39.074]        ReadDP(0x0);
[16:05:39.074]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:05:39.075]      </block>
[16:05:39.075]      // end if-block "protType == 2"
[16:05:39.075]    </control>
[16:05:39.075]  </sequence>
[16:05:39.075]  
[16:05:43.145]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:05:43.145]  
[16:05:43.145]  <debugvars>
[16:05:43.145]    // Pre-defined
[16:05:43.146]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:05:43.146]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[16:05:43.146]    __dp=0x00000000
[16:05:43.146]    __ap=0x00000000
[16:05:43.146]    __traceout=0x00000000      (Trace Disabled)
[16:05:43.146]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:05:43.146]    __FlashAddr=0x00000000
[16:05:43.146]    __FlashLen=0x00000000
[16:05:43.146]    __FlashArg=0x00000000
[16:05:43.146]    __FlashOp=0x00000000
[16:05:43.146]    __Result=0x00000000
[16:05:43.146]  </debugvars>
[16:05:43.146]  
[16:05:43.148]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:05:43.148]    <block atomic="false" info="">
[16:05:43.148]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:05:43.148]        // -> [isSWJ <= 0x00000001]
[16:05:43.148]      __var hasDormant = __protocol & 0x00020000;
[16:05:43.148]        // -> [hasDormant <= 0x00000000]
[16:05:43.148]      __var protType   = __protocol & 0x0000FFFF;
[16:05:43.148]        // -> [protType <= 0x00000002]
[16:05:43.148]    </block>
[16:05:43.148]    <control if="protType == 1" while="" timeout="0" info="">
[16:05:43.148]      // if-block "protType == 1"
[16:05:43.149]        // =>  FALSE
[16:05:43.149]      // skip if-block "protType == 1"
[16:05:43.149]    </control>
[16:05:43.149]    <control if="protType == 2" while="" timeout="0" info="">
[16:05:43.149]      // if-block "protType == 2"
[16:05:43.149]        // =>  TRUE
[16:05:43.149]      <control if="isSWJ" while="" timeout="0" info="">
[16:05:43.149]        // if-block "isSWJ"
[16:05:43.149]          // =>  TRUE
[16:05:43.149]        <control if="hasDormant" while="" timeout="0" info="">
[16:05:43.149]          // if-block "hasDormant"
[16:05:43.149]            // =>  FALSE
[16:05:43.149]          // skip if-block "hasDormant"
[16:05:43.149]        </control>
[16:05:43.149]        <control if="!hasDormant" while="" timeout="0" info="">
[16:05:43.149]          // if-block "!hasDormant"
[16:05:43.150]            // =>  TRUE
[16:05:43.150]          <block atomic="false" info="">
[16:05:43.150]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:05:43.150]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:43.150]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:05:43.151]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:05:43.151]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:05:43.152]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:43.152]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:05:43.152]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:05:43.152]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:05:43.152]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:05:43.153]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:05:43.153]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:05:43.153]          </block>
[16:05:43.153]          // end if-block "!hasDormant"
[16:05:43.153]        </control>
[16:05:43.153]        // end if-block "isSWJ"
[16:05:43.153]      </control>
[16:05:43.154]      <control if="!isSWJ" while="" timeout="0" info="">
[16:05:43.154]        // if-block "!isSWJ"
[16:05:43.154]          // =>  FALSE
[16:05:43.154]        // skip if-block "!isSWJ"
[16:05:43.154]      </control>
[16:05:43.154]      <block atomic="false" info="">
[16:05:43.154]        ReadDP(0x0);
[16:05:43.155]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:05:43.155]      </block>
[16:05:43.155]      // end if-block "protType == 2"
[16:05:43.155]    </control>
[16:05:43.156]  </sequence>
[16:05:43.156]  
[16:06:39.508]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:06:39.508]  
[16:06:39.508]  <debugvars>
[16:06:39.508]    // Pre-defined
[16:06:39.509]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:06:39.509]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:06:39.509]    __dp=0x00000000
[16:06:39.509]    __ap=0x00000000
[16:06:39.509]    __traceout=0x00000000      (Trace Disabled)
[16:06:39.509]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:06:39.509]    __FlashAddr=0x00000000
[16:06:39.509]    __FlashLen=0x00000000
[16:06:39.509]    __FlashArg=0x00000000
[16:06:39.510]    __FlashOp=0x00000000
[16:06:39.510]    __Result=0x00000000
[16:06:39.510]  </debugvars>
[16:06:39.510]  
[16:06:39.510]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:06:39.510]    <block atomic="false" info="">
[16:06:39.510]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:06:39.510]        // -> [isSWJ <= 0x00000001]
[16:06:39.510]      __var hasDormant = __protocol & 0x00020000;
[16:06:39.510]        // -> [hasDormant <= 0x00000000]
[16:06:39.511]      __var protType   = __protocol & 0x0000FFFF;
[16:06:39.511]        // -> [protType <= 0x00000002]
[16:06:39.511]    </block>
[16:06:39.511]    <control if="protType == 1" while="" timeout="0" info="">
[16:06:39.511]      // if-block "protType == 1"
[16:06:39.511]        // =>  FALSE
[16:06:39.511]      // skip if-block "protType == 1"
[16:06:39.511]    </control>
[16:06:39.511]    <control if="protType == 2" while="" timeout="0" info="">
[16:06:39.512]      // if-block "protType == 2"
[16:06:39.512]        // =>  TRUE
[16:06:39.512]      <control if="isSWJ" while="" timeout="0" info="">
[16:06:39.512]        // if-block "isSWJ"
[16:06:39.512]          // =>  TRUE
[16:06:39.512]        <control if="hasDormant" while="" timeout="0" info="">
[16:06:39.512]          // if-block "hasDormant"
[16:06:39.513]            // =>  FALSE
[16:06:39.513]          // skip if-block "hasDormant"
[16:06:39.513]        </control>
[16:06:39.513]        <control if="!hasDormant" while="" timeout="0" info="">
[16:06:39.513]          // if-block "!hasDormant"
[16:06:39.513]            // =>  TRUE
[16:06:39.513]          <block atomic="false" info="">
[16:06:39.513]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:06:39.514]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:06:39.514]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:06:39.514]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:06:39.514]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:06:39.515]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:06:39.515]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:06:39.515]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:06:39.515]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:06:39.516]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:06:39.516]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:06:39.516]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:06:39.516]          </block>
[16:06:39.516]          // end if-block "!hasDormant"
[16:06:39.516]        </control>
[16:06:39.516]        // end if-block "isSWJ"
[16:06:39.516]      </control>
[16:06:39.516]      <control if="!isSWJ" while="" timeout="0" info="">
[16:06:39.516]        // if-block "!isSWJ"
[16:06:39.516]          // =>  FALSE
[16:06:39.516]        // skip if-block "!isSWJ"
[16:06:39.516]      </control>
[16:06:39.518]      <block atomic="false" info="">
[16:06:39.518]        ReadDP(0x0);
[16:06:39.518]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:06:39.518]      </block>
[16:06:39.518]      // end if-block "protType == 2"
[16:06:39.518]    </control>
[16:06:39.518]  </sequence>
[16:06:39.518]  
[16:06:39.519]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:06:39.519]  
[16:06:39.519]  <debugvars>
[16:06:39.519]    // Pre-defined
[16:06:39.519]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:06:39.519]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:06:39.519]    __dp=0x00000000
[16:06:39.519]    __ap=0x00000000
[16:06:39.519]    __traceout=0x00000000      (Trace Disabled)
[16:06:39.519]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:06:39.520]    __FlashAddr=0x00000000
[16:06:39.520]    __FlashLen=0x00000000
[16:06:39.520]    __FlashArg=0x00000000
[16:06:39.520]    __FlashOp=0x00000000
[16:06:39.520]    __Result=0x00000000
[16:06:39.520]  </debugvars>
[16:06:39.520]  
[16:06:39.520]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:06:39.520]    <block atomic="false" info="">
[16:06:39.521]      __var SW_DP_ABORT       = 0x0;
[16:06:39.521]        // -> [SW_DP_ABORT <= 0x00000000]
[16:06:39.521]      __var DP_CTRL_STAT      = 0x4;
[16:06:39.521]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:06:39.521]      __var DP_SELECT         = 0x8;
[16:06:39.521]        // -> [DP_SELECT <= 0x00000008]
[16:06:39.522]      __var powered_down      = 0;
[16:06:39.522]        // -> [powered_down <= 0x00000000]
[16:06:39.522]      WriteDP(DP_SELECT, 0x00000000);
[16:06:39.522]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:06:39.523]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:06:39.523]        // -> [ReadDP(0x00000004) => 0xF0000F40]   (__dp=0x00000000)
[16:06:39.523]        // -> [powered_down <= 0x00000000]
[16:06:39.523]    </block>
[16:06:39.523]    <control if="powered_down" while="" timeout="0" info="">
[16:06:39.523]      // if-block "powered_down"
[16:06:39.523]        // =>  FALSE
[16:06:39.523]      // skip if-block "powered_down"
[16:06:39.525]    </control>
[16:06:39.525]    <block atomic="false" info="">
[16:06:39.525]      __var DEBUG_PORT_VAL    = 0;
[16:06:39.525]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:06:39.525]      __var ACCESS_POINT_VAL  = 0;
[16:06:39.525]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:06:39.525]      __ap = 1; 
[16:06:39.526]        // -> [__ap <= 0x00000001]
[16:06:39.526]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:06:39.527]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:06:39.527]      __ap = 4;
[16:06:39.527]        // -> [__ap <= 0x00000004]
[16:06:39.527]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:06:39.528]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[16:06:39.529]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[16:06:39.529]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:06:39.530]    </block>
[16:06:39.530]    <block atomic="false" info="">
[16:06:39.530]      __var nReset = 0x80;
[16:06:39.531]        // -> [nReset <= 0x00000080]
[16:06:39.531]      __var canReadPins = 0;
[16:06:39.531]        // -> [canReadPins <= 0x00000000]
[16:06:39.531]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:06:39.531]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:06:39.531]        // -> [canReadPins <= 0x00000001]
[16:06:39.532]    </block>
[16:06:39.532]    <control if="" while="1" timeout="200" info="">
[16:06:39.532]      // while "1"  (timeout="200")
[16:06:39.532]      // while-condition  =>  TRUE
[16:06:39.532]      // while "1"  (timeout="200")
[16:06:39.532]      // while-condition  =>  TRUE
[16:06:39.533]      // while "1"  (timeout="200")
[16:06:39.533]      // while-condition  =>  TRUE
[16:06:39.533]      // while "1"  (timeout="200")
[16:06:39.533]      // while-condition  =>  TRUE
[16:06:39.533]      // while "1"  (timeout="200")
[16:06:39.533]      // while-condition  =>  TRUE
[16:06:39.533]      // while "1"  (timeout="200")
[16:06:39.533]      // while-condition  =>  TRUE
[16:06:39.533]      // while "1"  (timeout="200")
[16:06:39.533]      // while-condition  =>  TRUE
[16:06:39.533]      // while "1"  (timeout="200")
[16:06:39.534]      // while-condition  =>  TRUE
[16:06:39.534]      // while "1"  (timeout="200")
[16:06:39.534]      // while  =>  TIMEOUT
[16:06:39.534]      // end while "1"
[16:06:39.534]    </control>
[16:06:39.534]    <control if="canReadPins" while="" timeout="0" info="">
[16:06:39.534]      // if-block "canReadPins"
[16:06:39.534]        // =>  TRUE
[16:06:39.535]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:06:39.535]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:06:39.535]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:06:39.535]        // while-condition  =>  FALSE
[16:06:39.535]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:06:39.535]      </control>
[16:06:39.536]      // end if-block "canReadPins"
[16:06:39.536]    </control>
[16:06:39.536]    <control if="!canReadPins" while="" timeout="0" info="">
[16:06:39.536]      // if-block "!canReadPins"
[16:06:39.536]        // =>  FALSE
[16:06:39.536]      // skip if-block "!canReadPins"
[16:06:39.536]    </control>
[16:06:39.536]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:06:39.536]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:06:39.537]        // =>  FALSE
[16:06:39.537]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:06:39.537]    </control>
[16:06:39.537]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:06:39.537]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:06:39.538]        // =>  TRUE
[16:06:39.538]      <block atomic="false" info="">
[16:06:39.538]        WriteAP(0xF0, 0x01);
[16:06:39.539]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:06:39.539]        WriteAP(0x00, 0xF90008);
[16:06:39.539]          // -> [WriteAP(0x00000000, 0x00F90008)]   (__dp=0x00000000, __ap=0x00000004)
[16:06:39.540]        WriteAP(0xF0, 0x01);
[16:06:39.541]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:06:39.541]      </block>
[16:06:39.541]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:06:39.541]    </control>
[16:06:39.541]    <block atomic="false" info="">
[16:06:39.541]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:06:39.543]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[16:06:39.543]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[16:06:39.543]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:06:39.545]      __ap = 0; //lets make sure we reset the access point selection
[16:06:39.545]        // -> [__ap <= 0x00000000]
[16:06:39.545]    </block>
[16:06:39.545]  </sequence>
[16:06:39.545]  
[16:06:39.551]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:06:39.551]  
[16:06:39.552]  <debugvars>
[16:06:39.552]    // Pre-defined
[16:06:39.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:06:39.552]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:06:39.552]    __dp=0x00000000
[16:06:39.552]    __ap=0x00000000
[16:06:39.552]    __traceout=0x00000000      (Trace Disabled)
[16:06:39.552]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:06:39.553]    __FlashAddr=0x00000000
[16:06:39.553]    __FlashLen=0x00000000
[16:06:39.553]    __FlashArg=0x00000000
[16:06:39.553]    __FlashOp=0x00000000
[16:06:39.553]    __Result=0x00000000
[16:06:39.553]  </debugvars>
[16:06:39.553]  
[16:06:39.553]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:06:39.553]    <block atomic="false" info="">
[16:06:39.553]      __var deviceID = 0;
[16:06:39.553]        // -> [deviceID <= 0x00000000]
[16:06:39.553]      __var version = 0;
[16:06:39.554]        // -> [version <= 0x00000000]
[16:06:39.554]      __var partNum = 0;
[16:06:39.554]        // -> [partNum <= 0x00000000]
[16:06:39.554]      __var manuf = 0;
[16:06:39.554]        // -> [manuf <= 0x00000000]
[16:06:39.554]      __var isMSPM0G1X0X_G3X0X = 0;
[16:06:39.554]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:06:39.554]      __var isProduction = 0;
[16:06:39.555]        // -> [isProduction <= 0x00000000]
[16:06:39.555]      __var continueId = 0;
[16:06:39.555]        // -> [continueId <= 0x00000000]
[16:06:39.555]      deviceID =   Read32(0x41C40004);
[16:06:39.557]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:06:39.557]        // -> [deviceID <= 0x2BB8802F]
[16:06:39.557]      version = deviceID >> 28;
[16:06:39.557]        // -> [version <= 0x00000002]
[16:06:39.557]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:06:39.557]        // -> [partNum <= 0x0000BB88]
[16:06:39.557]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:06:39.557]        // -> [manuf <= 0x00000017]
[16:06:39.558]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:06:39.558]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:06:39.558]      isProduction = (version > 0);
[16:06:39.558]        // -> [isProduction <= 0x00000001]
[16:06:39.558]    </block>
[16:06:39.558]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:06:39.558]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:06:39.559]        // =>  FALSE
[16:06:39.559]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:06:39.559]    </control>
[16:06:39.559]    <control if="continueId == 4" while="" timeout="0" info="">
[16:06:39.559]      // if-block "continueId == 4"
[16:06:39.559]        // =>  FALSE
[16:06:39.559]      // skip if-block "continueId == 4"
[16:06:39.560]    </control>
[16:06:39.560]    <control if="!isProduction" while="" timeout="0" info="">
[16:06:39.560]      // if-block "!isProduction"
[16:06:39.560]        // =>  FALSE
[16:06:39.560]      // skip if-block "!isProduction"
[16:06:39.560]    </control>
[16:06:39.560]  </sequence>
[16:06:39.560]  
[16:06:52.545]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:06:52.545]  
[16:06:52.546]  <debugvars>
[16:06:52.546]    // Pre-defined
[16:06:52.546]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:06:52.546]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:06:52.546]    __dp=0x00000000
[16:06:52.546]    __ap=0x00000000
[16:06:52.546]    __traceout=0x00000000      (Trace Disabled)
[16:06:52.546]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:06:52.546]    __FlashAddr=0x00000000
[16:06:52.546]    __FlashLen=0x00000000
[16:06:52.546]    __FlashArg=0x00000000
[16:06:52.546]    __FlashOp=0x00000000
[16:06:52.546]    __Result=0x00000000
[16:06:52.546]  </debugvars>
[16:06:52.546]  
[16:06:52.548]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:06:52.548]    <block atomic="false" info="">
[16:06:52.548]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:06:52.548]        // -> [isSWJ <= 0x00000001]
[16:06:52.548]      __var hasDormant = __protocol & 0x00020000;
[16:06:52.548]        // -> [hasDormant <= 0x00000000]
[16:06:52.548]      __var protType   = __protocol & 0x0000FFFF;
[16:06:52.548]        // -> [protType <= 0x00000002]
[16:06:52.548]    </block>
[16:06:52.548]    <control if="protType == 1" while="" timeout="0" info="">
[16:06:52.548]      // if-block "protType == 1"
[16:06:52.549]        // =>  FALSE
[16:06:52.549]      // skip if-block "protType == 1"
[16:06:52.549]    </control>
[16:06:52.549]    <control if="protType == 2" while="" timeout="0" info="">
[16:06:52.549]      // if-block "protType == 2"
[16:06:52.549]        // =>  TRUE
[16:06:52.549]      <control if="isSWJ" while="" timeout="0" info="">
[16:06:52.550]        // if-block "isSWJ"
[16:06:52.550]          // =>  TRUE
[16:06:52.550]        <control if="hasDormant" while="" timeout="0" info="">
[16:06:52.550]          // if-block "hasDormant"
[16:06:52.550]            // =>  FALSE
[16:06:52.550]          // skip if-block "hasDormant"
[16:06:52.550]        </control>
[16:06:52.550]        <control if="!hasDormant" while="" timeout="0" info="">
[16:06:52.550]          // if-block "!hasDormant"
[16:06:52.550]            // =>  TRUE
[16:06:52.550]          <block atomic="false" info="">
[16:06:52.550]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:06:52.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:06:52.551]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:06:52.551]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:06:52.551]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:06:52.552]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:06:52.552]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:06:52.552]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:06:52.552]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:06:52.553]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:06:52.553]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:06:52.553]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:06:52.553]          </block>
[16:06:52.553]          // end if-block "!hasDormant"
[16:06:52.553]        </control>
[16:06:52.553]        // end if-block "isSWJ"
[16:06:52.553]      </control>
[16:06:52.554]      <control if="!isSWJ" while="" timeout="0" info="">
[16:06:52.554]        // if-block "!isSWJ"
[16:06:52.554]          // =>  FALSE
[16:06:52.554]        // skip if-block "!isSWJ"
[16:06:52.554]      </control>
[16:06:52.554]      <block atomic="false" info="">
[16:06:52.554]        ReadDP(0x0);
[16:06:52.554]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:06:52.555]      </block>
[16:06:52.555]      // end if-block "protType == 2"
[16:06:52.555]    </control>
[16:06:52.555]  </sequence>
[16:06:52.555]  
[16:06:52.556]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:06:52.556]  
[16:06:52.556]  <debugvars>
[16:06:52.556]    // Pre-defined
[16:06:52.556]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:06:52.556]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:06:52.556]    __dp=0x00000000
[16:06:52.556]    __ap=0x00000000
[16:06:52.556]    __traceout=0x00000000      (Trace Disabled)
[16:06:52.556]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:06:52.556]    __FlashAddr=0x00000000
[16:06:52.556]    __FlashLen=0x00000000
[16:06:52.556]    __FlashArg=0x00000000
[16:06:52.556]    __FlashOp=0x00000000
[16:06:52.556]    __Result=0x00000000
[16:06:52.556]  </debugvars>
[16:06:52.558]  
[16:06:52.558]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:06:52.558]    <block atomic="false" info="">
[16:06:52.558]      __var SW_DP_ABORT       = 0x0;
[16:06:52.558]        // -> [SW_DP_ABORT <= 0x00000000]
[16:06:52.558]      __var DP_CTRL_STAT      = 0x4;
[16:06:52.558]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:06:52.558]      __var DP_SELECT         = 0x8;
[16:06:52.558]        // -> [DP_SELECT <= 0x00000008]
[16:06:52.558]      __var powered_down      = 0;
[16:06:52.558]        // -> [powered_down <= 0x00000000]
[16:06:52.559]      WriteDP(DP_SELECT, 0x00000000);
[16:06:52.559]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:06:52.559]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:06:52.559]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:06:52.559]        // -> [powered_down <= 0x00000001]
[16:06:52.559]    </block>
[16:06:52.560]    <control if="powered_down" while="" timeout="0" info="">
[16:06:52.560]      // if-block "powered_down"
[16:06:52.560]        // =>  TRUE
[16:06:52.560]      <block atomic="false" info="">
[16:06:52.560]        Message(0, "Debug/System power-up request sent");
[16:06:52.562]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:06:52.562]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:06:52.562]      </block>
[16:06:52.563]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:06:52.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:06:52.563]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:06:52.563]        // while-condition  =>  FALSE
[16:06:52.563]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:06:52.563]      </control>
[16:06:52.564]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:06:52.564]        // if-block "(__protocol & 0xFFFF) == 1"
[16:06:52.564]          // =>  FALSE
[16:06:52.565]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:06:52.565]      </control>
[16:06:52.565]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:06:52.565]        // if-block "(__protocol & 0xFFFF) == 2"
[16:06:52.565]          // =>  TRUE
[16:06:52.565]        <block atomic="false" info="">
[16:06:52.565]          Message(0, "executing SWD power up");
[16:06:52.566]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:06:52.568]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:06:52.568]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:06:52.569]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:06:52.569]        </block>
[16:06:52.569]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:06:52.569]      </control>
[16:06:52.569]      // end if-block "powered_down"
[16:06:52.569]    </control>
[16:06:52.569]    <block atomic="false" info="">
[16:06:52.569]      __var DEBUG_PORT_VAL    = 0;
[16:06:52.569]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:06:52.570]      __var ACCESS_POINT_VAL  = 0;
[16:06:52.570]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:06:52.570]      __ap = 1; 
[16:06:52.570]        // -> [__ap <= 0x00000001]
[16:06:52.570]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:06:52.571]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:06:52.571]      __ap = 4;
[16:06:52.571]        // -> [__ap <= 0x00000004]
[16:06:52.571]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:06:52.572]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:06:52.573]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:06:52.573]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:06:52.574]    </block>
[16:06:52.574]    <block atomic="false" info="">
[16:06:52.574]      __var nReset = 0x80;
[16:06:52.574]        // -> [nReset <= 0x00000080]
[16:06:52.575]      __var canReadPins = 0;
[16:06:52.575]        // -> [canReadPins <= 0x00000000]
[16:06:52.575]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:06:52.575]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:06:52.575]        // -> [canReadPins <= 0x00000001]
[16:06:52.575]    </block>
[16:06:52.576]    <control if="" while="1" timeout="200" info="">
[16:06:52.576]      // while "1"  (timeout="200")
[16:06:52.576]      // while-condition  =>  TRUE
[16:06:52.576]      // while "1"  (timeout="200")
[16:06:52.576]      // while-condition  =>  TRUE
[16:06:52.576]      // while "1"  (timeout="200")
[16:06:52.576]      // while-condition  =>  TRUE
[16:06:52.576]      // while "1"  (timeout="200")
[16:06:52.576]      // while-condition  =>  TRUE
[16:06:52.576]      // while "1"  (timeout="200")
[16:06:52.576]      // while-condition  =>  TRUE
[16:06:52.576]      // while "1"  (timeout="200")
[16:06:52.576]      // while-condition  =>  TRUE
[16:06:52.576]      // while "1"  (timeout="200")
[16:06:52.578]      // while-condition  =>  TRUE
[16:06:52.578]      // while "1"  (timeout="200")
[16:06:52.578]      // while-condition  =>  TRUE
[16:06:52.578]      // while "1"  (timeout="200")
[16:06:52.578]      // while-condition  =>  TRUE
[16:06:52.578]      // while "1"  (timeout="200")
[16:06:52.578]      // while-condition  =>  TRUE
[16:06:52.578]      // while "1"  (timeout="200")
[16:06:52.578]      // while-condition  =>  TRUE
[16:06:52.578]      // while "1"  (timeout="200")
[16:06:52.578]      // while-condition  =>  TRUE
[16:06:52.578]      // while "1"  (timeout="200")
[16:06:52.578]      // while-condition  =>  TRUE
[16:06:52.578]      // while "1"  (timeout="200")
[16:06:52.578]      // while-condition  =>  TRUE
[16:06:52.580]      // while "1"  (timeout="200")
[16:06:52.580]      // while-condition  =>  TRUE
[16:06:52.580]      // while "1"  (timeout="200")
[16:06:52.580]      // while-condition  =>  TRUE
[16:06:52.580]      // while "1"  (timeout="200")
[16:06:52.580]      // while-condition  =>  TRUE
[16:06:52.580]      // while "1"  (timeout="200")
[16:06:52.580]      // while-condition  =>  TRUE
[16:06:52.580]      // while "1"  (timeout="200")
[16:06:52.580]      // while  =>  TIMEOUT
[16:06:52.580]      // end while "1"
[16:06:52.580]    </control>
[16:06:52.580]    <control if="canReadPins" while="" timeout="0" info="">
[16:06:52.580]      // if-block "canReadPins"
[16:06:52.580]        // =>  TRUE
[16:06:52.580]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:06:52.580]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:06:52.581]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:06:52.581]        // while-condition  =>  FALSE
[16:06:52.581]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:06:52.581]      </control>
[16:06:52.581]      // end if-block "canReadPins"
[16:06:52.582]    </control>
[16:06:52.582]    <control if="!canReadPins" while="" timeout="0" info="">
[16:06:52.582]      // if-block "!canReadPins"
[16:06:52.582]        // =>  FALSE
[16:06:52.582]      // skip if-block "!canReadPins"
[16:06:52.582]    </control>
[16:06:52.582]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:06:52.582]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:06:52.582]        // =>  TRUE
[16:06:52.582]      <block atomic="false" info="">
[16:06:52.582]        WriteAP(0x00, 0x190008);
[16:06:52.583]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:06:52.583]        WriteAP(0xF0, 0x01);
[16:06:52.584]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:06:52.585]      </block>
[16:06:52.585]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:06:52.585]    </control>
[16:06:52.585]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:06:52.585]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:06:52.585]        // =>  FALSE
[16:06:52.585]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:06:52.585]    </control>
[16:06:52.585]    <block atomic="false" info="">
[16:06:52.586]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:06:52.586]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:06:52.586]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:06:52.588]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:06:52.589]      __ap = 0; //lets make sure we reset the access point selection
[16:06:52.589]        // -> [__ap <= 0x00000000]
[16:06:52.589]    </block>
[16:06:52.589]  </sequence>
[16:06:52.589]  
[16:06:52.596]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:06:52.596]  
[16:06:52.596]  <debugvars>
[16:06:52.596]    // Pre-defined
[16:06:52.596]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:06:52.596]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:06:52.596]    __dp=0x00000000
[16:06:52.597]    __ap=0x00000000
[16:06:52.597]    __traceout=0x00000000      (Trace Disabled)
[16:06:52.597]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:06:52.597]    __FlashAddr=0x00000000
[16:06:52.597]    __FlashLen=0x00000000
[16:06:52.597]    __FlashArg=0x00000000
[16:06:52.597]    __FlashOp=0x00000000
[16:06:52.597]    __Result=0x00000000
[16:06:52.597]  </debugvars>
[16:06:52.597]  
[16:06:52.597]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:06:52.598]    <block atomic="false" info="">
[16:06:52.598]      __var deviceID = 0;
[16:06:52.598]        // -> [deviceID <= 0x00000000]
[16:06:52.598]      __var version = 0;
[16:06:52.598]        // -> [version <= 0x00000000]
[16:06:52.598]      __var partNum = 0;
[16:06:52.598]        // -> [partNum <= 0x00000000]
[16:06:52.598]      __var manuf = 0;
[16:06:52.598]        // -> [manuf <= 0x00000000]
[16:06:52.598]      __var isMSPM0G1X0X_G3X0X = 0;
[16:06:52.598]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:06:52.598]      __var isProduction = 0;
[16:06:52.598]        // -> [isProduction <= 0x00000000]
[16:06:52.598]      __var continueId = 0;
[16:06:52.599]        // -> [continueId <= 0x00000000]
[16:06:52.600]      deviceID =   Read32(0x41C40004);
[16:06:52.600]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:06:52.601]        // -> [deviceID <= 0x2BB8802F]
[16:06:52.601]      version = deviceID >> 28;
[16:06:52.601]        // -> [version <= 0x00000002]
[16:06:52.601]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:06:52.601]        // -> [partNum <= 0x0000BB88]
[16:06:52.601]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:06:52.601]        // -> [manuf <= 0x00000017]
[16:06:52.601]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:06:52.601]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:06:52.601]      isProduction = (version > 0);
[16:06:52.601]        // -> [isProduction <= 0x00000001]
[16:06:52.602]    </block>
[16:06:52.602]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:06:52.602]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:06:52.602]        // =>  FALSE
[16:06:52.602]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:06:52.602]    </control>
[16:06:52.602]    <control if="continueId == 4" while="" timeout="0" info="">
[16:06:52.602]      // if-block "continueId == 4"
[16:06:52.602]        // =>  FALSE
[16:06:52.602]      // skip if-block "continueId == 4"
[16:06:52.602]    </control>
[16:06:52.603]    <control if="!isProduction" while="" timeout="0" info="">
[16:06:52.603]      // if-block "!isProduction"
[16:06:52.603]        // =>  FALSE
[16:06:52.603]      // skip if-block "!isProduction"
[16:06:52.603]    </control>
[16:06:52.603]  </sequence>
[16:06:52.603]  
[16:07:45.186]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:07:45.186]  
[16:07:45.186]  <debugvars>
[16:07:45.186]    // Pre-defined
[16:07:45.188]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:07:45.188]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:07:45.188]    __dp=0x00000000
[16:07:45.188]    __ap=0x00000000
[16:07:45.188]    __traceout=0x00000000      (Trace Disabled)
[16:07:45.188]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:07:45.188]    __FlashAddr=0x00000000
[16:07:45.188]    __FlashLen=0x00000000
[16:07:45.188]    __FlashArg=0x00000000
[16:07:45.188]    __FlashOp=0x00000000
[16:07:45.188]    __Result=0x00000000
[16:07:45.189]  </debugvars>
[16:07:45.189]  
[16:07:45.189]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:07:45.189]    <block atomic="false" info="">
[16:07:45.189]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:07:45.189]        // -> [isSWJ <= 0x00000001]
[16:07:45.189]      __var hasDormant = __protocol & 0x00020000;
[16:07:45.189]        // -> [hasDormant <= 0x00000000]
[16:07:45.189]      __var protType   = __protocol & 0x0000FFFF;
[16:07:45.189]        // -> [protType <= 0x00000002]
[16:07:45.189]    </block>
[16:07:45.189]    <control if="protType == 1" while="" timeout="0" info="">
[16:07:45.189]      // if-block "protType == 1"
[16:07:45.189]        // =>  FALSE
[16:07:45.189]      // skip if-block "protType == 1"
[16:07:45.189]    </control>
[16:07:45.189]    <control if="protType == 2" while="" timeout="0" info="">
[16:07:45.190]      // if-block "protType == 2"
[16:07:45.190]        // =>  TRUE
[16:07:45.190]      <control if="isSWJ" while="" timeout="0" info="">
[16:07:45.190]        // if-block "isSWJ"
[16:07:45.190]          // =>  TRUE
[16:07:45.190]        <control if="hasDormant" while="" timeout="0" info="">
[16:07:45.191]          // if-block "hasDormant"
[16:07:45.191]            // =>  FALSE
[16:07:45.191]          // skip if-block "hasDormant"
[16:07:45.191]        </control>
[16:07:45.191]        <control if="!hasDormant" while="" timeout="0" info="">
[16:07:45.191]          // if-block "!hasDormant"
[16:07:45.191]            // =>  TRUE
[16:07:45.191]          <block atomic="false" info="">
[16:07:45.191]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:07:45.192]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:07:45.192]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:07:45.192]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:07:45.193]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:07:45.193]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:07:45.193]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:07:45.193]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:07:45.194]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:07:45.194]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:07:45.194]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:07:45.194]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:07:45.195]          </block>
[16:07:45.195]          // end if-block "!hasDormant"
[16:07:45.195]        </control>
[16:07:45.195]        // end if-block "isSWJ"
[16:07:45.195]      </control>
[16:07:45.195]      <control if="!isSWJ" while="" timeout="0" info="">
[16:07:45.195]        // if-block "!isSWJ"
[16:07:45.195]          // =>  FALSE
[16:07:45.195]        // skip if-block "!isSWJ"
[16:07:45.195]      </control>
[16:07:45.196]      <block atomic="false" info="">
[16:07:45.196]        ReadDP(0x0);
[16:07:45.196]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:07:45.196]      </block>
[16:07:45.196]      // end if-block "protType == 2"
[16:07:45.196]    </control>
[16:07:45.196]  </sequence>
[16:07:45.196]  
[16:07:45.198]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:07:45.198]  
[16:07:45.198]  <debugvars>
[16:07:45.198]    // Pre-defined
[16:07:45.198]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:07:45.199]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:07:45.199]    __dp=0x00000000
[16:07:45.199]    __ap=0x00000000
[16:07:45.199]    __traceout=0x00000000      (Trace Disabled)
[16:07:45.199]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:07:45.199]    __FlashAddr=0x00000000
[16:07:45.199]    __FlashLen=0x00000000
[16:07:45.199]    __FlashArg=0x00000000
[16:07:45.199]    __FlashOp=0x00000000
[16:07:45.199]    __Result=0x00000000
[16:07:45.199]  </debugvars>
[16:07:45.199]  
[16:07:45.199]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:07:45.199]    <block atomic="false" info="">
[16:07:45.199]      __var SW_DP_ABORT       = 0x0;
[16:07:45.200]        // -> [SW_DP_ABORT <= 0x00000000]
[16:07:45.200]      __var DP_CTRL_STAT      = 0x4;
[16:07:45.200]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:07:45.200]      __var DP_SELECT         = 0x8;
[16:07:45.200]        // -> [DP_SELECT <= 0x00000008]
[16:07:45.200]      __var powered_down      = 0;
[16:07:45.200]        // -> [powered_down <= 0x00000000]
[16:07:45.200]      WriteDP(DP_SELECT, 0x00000000);
[16:07:45.201]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:07:45.201]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:07:45.202]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:07:45.202]        // -> [powered_down <= 0x00000001]
[16:07:45.202]    </block>
[16:07:45.202]    <control if="powered_down" while="" timeout="0" info="">
[16:07:45.202]      // if-block "powered_down"
[16:07:45.202]        // =>  TRUE
[16:07:45.202]      <block atomic="false" info="">
[16:07:45.202]        Message(0, "Debug/System power-up request sent");
[16:07:45.204]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:07:45.205]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:07:45.205]      </block>
[16:07:45.205]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:07:45.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:07:45.206]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:07:45.206]        // while-condition  =>  FALSE
[16:07:45.206]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:07:45.206]      </control>
[16:07:45.206]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:07:45.206]        // if-block "(__protocol & 0xFFFF) == 1"
[16:07:45.206]          // =>  FALSE
[16:07:45.206]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:07:45.206]      </control>
[16:07:45.206]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:07:45.206]        // if-block "(__protocol & 0xFFFF) == 2"
[16:07:45.206]          // =>  TRUE
[16:07:45.206]        <block atomic="false" info="">
[16:07:45.206]          Message(0, "executing SWD power up");
[16:07:45.209]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:07:45.209]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:07:45.209]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:07:45.210]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:07:45.210]        </block>
[16:07:45.210]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:07:45.210]      </control>
[16:07:45.210]      // end if-block "powered_down"
[16:07:45.210]    </control>
[16:07:45.210]    <block atomic="false" info="">
[16:07:45.210]      __var DEBUG_PORT_VAL    = 0;
[16:07:45.210]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:07:45.210]      __var ACCESS_POINT_VAL  = 0;
[16:07:45.210]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:07:45.210]      __ap = 1; 
[16:07:45.210]        // -> [__ap <= 0x00000001]
[16:07:45.211]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:07:45.212]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:07:45.212]      __ap = 4;
[16:07:45.212]        // -> [__ap <= 0x00000004]
[16:07:45.212]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:07:45.213]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:07:45.213]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:07:45.213]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:07:45.215]    </block>
[16:07:45.215]    <block atomic="false" info="">
[16:07:45.215]      __var nReset = 0x80;
[16:07:45.215]        // -> [nReset <= 0x00000080]
[16:07:45.215]      __var canReadPins = 0;
[16:07:45.215]        // -> [canReadPins <= 0x00000000]
[16:07:45.215]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:07:45.216]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:07:45.216]        // -> [canReadPins <= 0x00000001]
[16:07:45.216]    </block>
[16:07:45.216]    <control if="" while="1" timeout="200" info="">
[16:07:45.216]      // while "1"  (timeout="200")
[16:07:45.216]      // while-condition  =>  TRUE
[16:07:45.216]      // while "1"  (timeout="200")
[16:07:45.218]      // while-condition  =>  TRUE
[16:07:45.218]      // while "1"  (timeout="200")
[16:07:45.218]      // while-condition  =>  TRUE
[16:07:45.218]      // while "1"  (timeout="200")
[16:07:45.218]      // while-condition  =>  TRUE
[16:07:45.218]      // while "1"  (timeout="200")
[16:07:45.218]      // while-condition  =>  TRUE
[16:07:45.218]      // while "1"  (timeout="200")
[16:07:45.218]      // while-condition  =>  TRUE
[16:07:45.218]      // while "1"  (timeout="200")
[16:07:45.218]      // while-condition  =>  TRUE
[16:07:45.219]      // while "1"  (timeout="200")
[16:07:45.219]      // while-condition  =>  TRUE
[16:07:45.219]      // while "1"  (timeout="200")
[16:07:45.219]      // while-condition  =>  TRUE
[16:07:45.219]      // while "1"  (timeout="200")
[16:07:45.219]      // while-condition  =>  TRUE
[16:07:45.219]      // while "1"  (timeout="200")
[16:07:45.219]      // while-condition  =>  TRUE
[16:07:45.220]      // while "1"  (timeout="200")
[16:07:45.220]      // while-condition  =>  TRUE
[16:07:45.220]      // while "1"  (timeout="200")
[16:07:45.220]      // while-condition  =>  TRUE
[16:07:45.220]      // while "1"  (timeout="200")
[16:07:45.220]      // while-condition  =>  TRUE
[16:07:45.220]      // while "1"  (timeout="200")
[16:07:45.220]      // while-condition  =>  TRUE
[16:07:45.220]      // while "1"  (timeout="200")
[16:07:45.220]      // while-condition  =>  TRUE
[16:07:45.220]      // while "1"  (timeout="200")
[16:07:45.221]      // while-condition  =>  TRUE
[16:07:45.221]      // while "1"  (timeout="200")
[16:07:45.221]      // while  =>  TIMEOUT
[16:07:45.221]      // end while "1"
[16:07:45.221]    </control>
[16:07:45.221]    <control if="canReadPins" while="" timeout="0" info="">
[16:07:45.221]      // if-block "canReadPins"
[16:07:45.221]        // =>  TRUE
[16:07:45.221]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:07:45.221]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:07:45.222]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:07:45.222]        // while-condition  =>  FALSE
[16:07:45.222]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:07:45.222]      </control>
[16:07:45.222]      // end if-block "canReadPins"
[16:07:45.222]    </control>
[16:07:45.222]    <control if="!canReadPins" while="" timeout="0" info="">
[16:07:45.222]      // if-block "!canReadPins"
[16:07:45.223]        // =>  FALSE
[16:07:45.223]      // skip if-block "!canReadPins"
[16:07:45.223]    </control>
[16:07:45.223]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:07:45.223]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:07:45.223]        // =>  TRUE
[16:07:45.223]      <block atomic="false" info="">
[16:07:45.223]        WriteAP(0x00, 0x190008);
[16:07:45.224]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:07:45.224]        WriteAP(0xF0, 0x01);
[16:07:45.225]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:07:45.225]      </block>
[16:07:45.226]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:07:45.226]    </control>
[16:07:45.226]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:07:45.226]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:07:45.226]        // =>  FALSE
[16:07:45.226]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:07:45.226]    </control>
[16:07:45.226]    <block atomic="false" info="">
[16:07:45.227]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:07:45.228]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:07:45.228]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:07:45.228]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:07:45.230]      __ap = 0; //lets make sure we reset the access point selection
[16:07:45.230]        // -> [__ap <= 0x00000000]
[16:07:45.230]    </block>
[16:07:45.230]  </sequence>
[16:07:45.230]  
[16:07:45.236]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:07:45.236]  
[16:07:45.236]  <debugvars>
[16:07:45.236]    // Pre-defined
[16:07:45.236]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:07:45.236]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:07:45.236]    __dp=0x00000000
[16:07:45.236]    __ap=0x00000000
[16:07:45.236]    __traceout=0x00000000      (Trace Disabled)
[16:07:45.236]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:07:45.236]    __FlashAddr=0x00000000
[16:07:45.236]    __FlashLen=0x00000000
[16:07:45.238]    __FlashArg=0x00000000
[16:07:45.238]    __FlashOp=0x00000000
[16:07:45.238]    __Result=0x00000000
[16:07:45.238]  </debugvars>
[16:07:45.238]  
[16:07:45.238]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:07:45.238]    <block atomic="false" info="">
[16:07:45.238]      __var deviceID = 0;
[16:07:45.238]        // -> [deviceID <= 0x00000000]
[16:07:45.238]      __var version = 0;
[16:07:45.238]        // -> [version <= 0x00000000]
[16:07:45.239]      __var partNum = 0;
[16:07:45.239]        // -> [partNum <= 0x00000000]
[16:07:45.239]      __var manuf = 0;
[16:07:45.239]        // -> [manuf <= 0x00000000]
[16:07:45.239]      __var isMSPM0G1X0X_G3X0X = 0;
[16:07:45.239]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:07:45.239]      __var isProduction = 0;
[16:07:45.239]        // -> [isProduction <= 0x00000000]
[16:07:45.239]      __var continueId = 0;
[16:07:45.239]        // -> [continueId <= 0x00000000]
[16:07:45.239]      deviceID =   Read32(0x41C40004);
[16:07:45.241]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:07:45.242]        // -> [deviceID <= 0x2BB8802F]
[16:07:45.242]      version = deviceID >> 28;
[16:07:45.242]        // -> [version <= 0x00000002]
[16:07:45.242]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:07:45.242]        // -> [partNum <= 0x0000BB88]
[16:07:45.242]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:07:45.242]        // -> [manuf <= 0x00000017]
[16:07:45.243]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:07:45.243]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:07:45.243]      isProduction = (version > 0);
[16:07:45.243]        // -> [isProduction <= 0x00000001]
[16:07:45.243]    </block>
[16:07:45.243]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:07:45.243]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:07:45.243]        // =>  FALSE
[16:07:45.243]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:07:45.243]    </control>
[16:07:45.244]    <control if="continueId == 4" while="" timeout="0" info="">
[16:07:45.244]      // if-block "continueId == 4"
[16:07:45.244]        // =>  FALSE
[16:07:45.244]      // skip if-block "continueId == 4"
[16:07:45.244]    </control>
[16:07:45.244]    <control if="!isProduction" while="" timeout="0" info="">
[16:07:45.244]      // if-block "!isProduction"
[16:07:45.244]        // =>  FALSE
[16:07:45.244]      // skip if-block "!isProduction"
[16:07:45.245]    </control>
[16:07:45.245]  </sequence>
[16:07:45.245]  
[16:07:51.489]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:07:51.489]  
[16:07:51.489]  <debugvars>
[16:07:51.489]    // Pre-defined
[16:07:51.489]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:07:51.489]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:07:51.490]    __dp=0x00000000
[16:07:51.490]    __ap=0x00000000
[16:07:51.490]    __traceout=0x00000000      (Trace Disabled)
[16:07:51.490]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:07:51.490]    __FlashAddr=0x00000000
[16:07:51.490]    __FlashLen=0x00000000
[16:07:51.490]    __FlashArg=0x00000000
[16:07:51.490]    __FlashOp=0x00000000
[16:07:51.491]    __Result=0x00000000
[16:07:51.491]  </debugvars>
[16:07:51.491]  
[16:07:51.491]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:07:51.491]    <block atomic="false" info="">
[16:07:51.491]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:07:51.491]        // -> [isSWJ <= 0x00000001]
[16:07:51.491]      __var hasDormant = __protocol & 0x00020000;
[16:07:51.491]        // -> [hasDormant <= 0x00000000]
[16:07:51.491]      __var protType   = __protocol & 0x0000FFFF;
[16:07:51.491]        // -> [protType <= 0x00000002]
[16:07:51.492]    </block>
[16:07:51.492]    <control if="protType == 1" while="" timeout="0" info="">
[16:07:51.492]      // if-block "protType == 1"
[16:07:51.492]        // =>  FALSE
[16:07:51.492]      // skip if-block "protType == 1"
[16:07:51.492]    </control>
[16:07:51.492]    <control if="protType == 2" while="" timeout="0" info="">
[16:07:51.492]      // if-block "protType == 2"
[16:07:51.492]        // =>  TRUE
[16:07:51.492]      <control if="isSWJ" while="" timeout="0" info="">
[16:07:51.492]        // if-block "isSWJ"
[16:07:51.493]          // =>  TRUE
[16:07:51.493]        <control if="hasDormant" while="" timeout="0" info="">
[16:07:51.493]          // if-block "hasDormant"
[16:07:51.493]            // =>  FALSE
[16:07:51.493]          // skip if-block "hasDormant"
[16:07:51.493]        </control>
[16:07:51.493]        <control if="!hasDormant" while="" timeout="0" info="">
[16:07:51.494]          // if-block "!hasDormant"
[16:07:51.494]            // =>  TRUE
[16:07:51.494]          <block atomic="false" info="">
[16:07:51.494]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:07:51.494]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:07:51.494]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:07:51.495]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:07:51.495]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:07:51.495]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:07:51.495]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:07:51.497]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:07:51.497]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:07:51.497]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:07:51.497]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:07:51.497]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:07:51.497]          </block>
[16:07:51.498]          // end if-block "!hasDormant"
[16:07:51.498]        </control>
[16:07:51.498]        // end if-block "isSWJ"
[16:07:51.498]      </control>
[16:07:51.498]      <control if="!isSWJ" while="" timeout="0" info="">
[16:07:51.498]        // if-block "!isSWJ"
[16:07:51.498]          // =>  FALSE
[16:07:51.498]        // skip if-block "!isSWJ"
[16:07:51.498]      </control>
[16:07:51.498]      <block atomic="false" info="">
[16:07:51.498]        ReadDP(0x0);
[16:07:51.499]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:07:51.499]      </block>
[16:07:51.499]      // end if-block "protType == 2"
[16:07:51.499]    </control>
[16:07:51.499]  </sequence>
[16:07:51.499]  
[16:07:51.500]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:07:51.500]  
[16:07:51.500]  <debugvars>
[16:07:51.500]    // Pre-defined
[16:07:51.500]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:07:51.500]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:07:51.500]    __dp=0x00000000
[16:07:51.501]    __ap=0x00000000
[16:07:51.501]    __traceout=0x00000000      (Trace Disabled)
[16:07:51.501]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:07:51.501]    __FlashAddr=0x00000000
[16:07:51.501]    __FlashLen=0x00000000
[16:07:51.501]    __FlashArg=0x00000000
[16:07:51.501]    __FlashOp=0x00000000
[16:07:51.502]    __Result=0x00000000
[16:07:51.502]  </debugvars>
[16:07:51.502]  
[16:07:51.502]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:07:51.502]    <block atomic="false" info="">
[16:07:51.502]      __var SW_DP_ABORT       = 0x0;
[16:07:51.502]        // -> [SW_DP_ABORT <= 0x00000000]
[16:07:51.502]      __var DP_CTRL_STAT      = 0x4;
[16:07:51.502]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:07:51.502]      __var DP_SELECT         = 0x8;
[16:07:51.502]        // -> [DP_SELECT <= 0x00000008]
[16:07:51.502]      __var powered_down      = 0;
[16:07:51.503]        // -> [powered_down <= 0x00000000]
[16:07:51.503]      WriteDP(DP_SELECT, 0x00000000);
[16:07:51.503]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:07:51.503]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:07:51.505]        // -> [ReadDP(0x00000004) => 0xF0000F40]   (__dp=0x00000000)
[16:07:51.505]        // -> [powered_down <= 0x00000000]
[16:07:51.505]    </block>
[16:07:51.505]    <control if="powered_down" while="" timeout="0" info="">
[16:07:51.505]      // if-block "powered_down"
[16:07:51.505]        // =>  FALSE
[16:07:51.505]      // skip if-block "powered_down"
[16:07:51.505]    </control>
[16:07:51.505]    <block atomic="false" info="">
[16:07:51.505]      __var DEBUG_PORT_VAL    = 0;
[16:07:51.505]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:07:51.506]      __var ACCESS_POINT_VAL  = 0;
[16:07:51.506]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:07:51.506]      __ap = 1; 
[16:07:51.506]        // -> [__ap <= 0x00000001]
[16:07:51.506]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:07:51.507]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:07:51.507]      __ap = 4;
[16:07:51.507]        // -> [__ap <= 0x00000004]
[16:07:51.507]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:07:51.508]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[16:07:51.508]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[16:07:51.508]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:07:51.510]    </block>
[16:07:51.511]    <block atomic="false" info="">
[16:07:51.511]      __var nReset = 0x80;
[16:07:51.511]        // -> [nReset <= 0x00000080]
[16:07:51.511]      __var canReadPins = 0;
[16:07:51.511]        // -> [canReadPins <= 0x00000000]
[16:07:51.511]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:07:51.511]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:07:51.512]        // -> [canReadPins <= 0x00000001]
[16:07:51.512]    </block>
[16:07:51.512]    <control if="" while="1" timeout="200" info="">
[16:07:51.512]      // while "1"  (timeout="200")
[16:07:51.512]      // while-condition  =>  TRUE
[16:07:51.512]      // while "1"  (timeout="200")
[16:07:51.512]      // while-condition  =>  TRUE
[16:07:51.512]      // while "1"  (timeout="200")
[16:07:51.512]      // while-condition  =>  TRUE
[16:07:51.512]      // while "1"  (timeout="200")
[16:07:51.512]      // while-condition  =>  TRUE
[16:07:51.513]      // while "1"  (timeout="200")
[16:07:51.513]      // while-condition  =>  TRUE
[16:07:51.513]      // while "1"  (timeout="200")
[16:07:51.513]      // while-condition  =>  TRUE
[16:07:51.513]      // while "1"  (timeout="200")
[16:07:51.513]      // while-condition  =>  TRUE
[16:07:51.513]      // while "1"  (timeout="200")
[16:07:51.513]      // while-condition  =>  TRUE
[16:07:51.513]      // while "1"  (timeout="200")
[16:07:51.513]      // while-condition  =>  TRUE
[16:07:51.513]      // while "1"  (timeout="200")
[16:07:51.513]      // while-condition  =>  TRUE
[16:07:51.514]      // while "1"  (timeout="200")
[16:07:51.514]      // while-condition  =>  TRUE
[16:07:51.514]      // while "1"  (timeout="200")
[16:07:51.514]      // while-condition  =>  TRUE
[16:07:51.514]      // while "1"  (timeout="200")
[16:07:51.514]      // while-condition  =>  TRUE
[16:07:51.514]      // while "1"  (timeout="200")
[16:07:51.514]      // while-condition  =>  TRUE
[16:07:51.514]      // while "1"  (timeout="200")
[16:07:51.514]      // while-condition  =>  TRUE
[16:07:51.515]      // while "1"  (timeout="200")
[16:07:51.515]      // while-condition  =>  TRUE
[16:07:51.515]      // while "1"  (timeout="200")
[16:07:51.515]      // while-condition  =>  TRUE
[16:07:51.515]      // while "1"  (timeout="200")
[16:07:51.515]      // while-condition  =>  TRUE
[16:07:51.515]      // while "1"  (timeout="200")
[16:07:51.515]      // while-condition  =>  TRUE
[16:07:51.515]      // while "1"  (timeout="200")
[16:07:51.515]      // while-condition  =>  TRUE
[16:07:51.515]      // while "1"  (timeout="200")
[16:07:51.516]      // while-condition  =>  TRUE
[16:07:51.516]      // while "1"  (timeout="200")
[16:07:51.516]      // while-condition  =>  TRUE
[16:07:51.516]      // while "1"  (timeout="200")
[16:07:51.516]      // while-condition  =>  TRUE
[16:07:51.516]      // while "1"  (timeout="200")
[16:07:51.516]      // while-condition  =>  TRUE
[16:07:51.516]      // while "1"  (timeout="200")
[16:07:51.516]      // while-condition  =>  TRUE
[16:07:51.518]      // while "1"  (timeout="200")
[16:07:51.518]      // while  =>  TIMEOUT
[16:07:51.518]      // end while "1"
[16:07:51.518]    </control>
[16:07:51.518]    <control if="canReadPins" while="" timeout="0" info="">
[16:07:51.518]      // if-block "canReadPins"
[16:07:51.518]        // =>  TRUE
[16:07:51.518]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:07:51.518]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:07:51.519]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:07:51.519]        // while-condition  =>  FALSE
[16:07:51.519]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:07:51.519]      </control>
[16:07:51.519]      // end if-block "canReadPins"
[16:07:51.519]    </control>
[16:07:51.519]    <control if="!canReadPins" while="" timeout="0" info="">
[16:07:51.519]      // if-block "!canReadPins"
[16:07:51.519]        // =>  FALSE
[16:07:51.519]      // skip if-block "!canReadPins"
[16:07:51.519]    </control>
[16:07:51.519]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:07:51.519]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:07:51.520]        // =>  FALSE
[16:07:51.520]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:07:51.520]    </control>
[16:07:51.520]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:07:51.520]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:07:51.520]        // =>  TRUE
[16:07:51.520]      <block atomic="false" info="">
[16:07:51.521]        WriteAP(0xF0, 0x01);
[16:07:51.521]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:07:51.522]        WriteAP(0x00, 0xF90008);
[16:07:51.523]          // -> [WriteAP(0x00000000, 0x00F90008)]   (__dp=0x00000000, __ap=0x00000004)
[16:07:51.523]        WriteAP(0xF0, 0x01);
[16:07:51.525]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:07:51.525]      </block>
[16:07:51.525]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:07:51.525]    </control>
[16:07:51.525]    <block atomic="false" info="">
[16:07:51.525]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:07:51.526]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[16:07:51.526]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[16:07:51.526]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:07:51.528]      __ap = 0; //lets make sure we reset the access point selection
[16:07:51.528]        // -> [__ap <= 0x00000000]
[16:07:51.529]    </block>
[16:07:51.529]  </sequence>
[16:07:51.529]  
[16:07:51.535]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:07:51.535]  
[16:07:51.535]  <debugvars>
[16:07:51.535]    // Pre-defined
[16:07:51.536]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:07:51.536]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:07:51.536]    __dp=0x00000000
[16:07:51.536]    __ap=0x00000000
[16:07:51.536]    __traceout=0x00000000      (Trace Disabled)
[16:07:51.536]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:07:51.536]    __FlashAddr=0x00000000
[16:07:51.536]    __FlashLen=0x00000000
[16:07:51.536]    __FlashArg=0x00000000
[16:07:51.536]    __FlashOp=0x00000000
[16:07:51.536]    __Result=0x00000000
[16:07:51.536]  </debugvars>
[16:07:51.536]  
[16:07:51.536]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:07:51.536]    <block atomic="false" info="">
[16:07:51.536]      __var deviceID = 0;
[16:07:51.536]        // -> [deviceID <= 0x00000000]
[16:07:51.537]      __var version = 0;
[16:07:51.537]        // -> [version <= 0x00000000]
[16:07:51.537]      __var partNum = 0;
[16:07:51.537]        // -> [partNum <= 0x00000000]
[16:07:51.537]      __var manuf = 0;
[16:07:51.537]        // -> [manuf <= 0x00000000]
[16:07:51.538]      __var isMSPM0G1X0X_G3X0X = 0;
[16:07:51.538]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:07:51.538]      __var isProduction = 0;
[16:07:51.538]        // -> [isProduction <= 0x00000000]
[16:07:51.538]      __var continueId = 0;
[16:07:51.538]        // -> [continueId <= 0x00000000]
[16:07:51.538]      deviceID =   Read32(0x41C40004);
[16:07:51.540]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:07:51.540]        // -> [deviceID <= 0x2BB8802F]
[16:07:51.540]      version = deviceID >> 28;
[16:07:51.540]        // -> [version <= 0x00000002]
[16:07:51.540]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:07:51.540]        // -> [partNum <= 0x0000BB88]
[16:07:51.540]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:07:51.540]        // -> [manuf <= 0x00000017]
[16:07:51.540]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:07:51.540]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:07:51.540]      isProduction = (version > 0);
[16:07:51.541]        // -> [isProduction <= 0x00000001]
[16:07:51.541]    </block>
[16:07:51.541]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:07:51.541]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:07:51.541]        // =>  FALSE
[16:07:51.541]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:07:51.541]    </control>
[16:07:51.541]    <control if="continueId == 4" while="" timeout="0" info="">
[16:07:51.541]      // if-block "continueId == 4"
[16:07:51.541]        // =>  FALSE
[16:07:51.541]      // skip if-block "continueId == 4"
[16:07:51.541]    </control>
[16:07:51.541]    <control if="!isProduction" while="" timeout="0" info="">
[16:07:51.542]      // if-block "!isProduction"
[16:07:51.542]        // =>  FALSE
[16:07:51.542]      // skip if-block "!isProduction"
[16:07:51.542]    </control>
[16:07:51.542]  </sequence>
[16:07:51.542]  
[16:08:04.289]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:08:04.289]  
[16:08:04.290]  <debugvars>
[16:08:04.290]    // Pre-defined
[16:08:04.290]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:08:04.290]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:08:04.290]    __dp=0x00000000
[16:08:04.290]    __ap=0x00000000
[16:08:04.290]    __traceout=0x00000000      (Trace Disabled)
[16:08:04.290]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:08:04.290]    __FlashAddr=0x00000000
[16:08:04.290]    __FlashLen=0x00000000
[16:08:04.290]    __FlashArg=0x00000000
[16:08:04.291]    __FlashOp=0x00000000
[16:08:04.291]    __Result=0x00000000
[16:08:04.291]  </debugvars>
[16:08:04.291]  
[16:08:04.291]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:08:04.291]    <block atomic="false" info="">
[16:08:04.291]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:08:04.291]        // -> [isSWJ <= 0x00000001]
[16:08:04.291]      __var hasDormant = __protocol & 0x00020000;
[16:08:04.291]        // -> [hasDormant <= 0x00000000]
[16:08:04.291]      __var protType   = __protocol & 0x0000FFFF;
[16:08:04.292]        // -> [protType <= 0x00000002]
[16:08:04.292]    </block>
[16:08:04.292]    <control if="protType == 1" while="" timeout="0" info="">
[16:08:04.292]      // if-block "protType == 1"
[16:08:04.292]        // =>  FALSE
[16:08:04.292]      // skip if-block "protType == 1"
[16:08:04.292]    </control>
[16:08:04.292]    <control if="protType == 2" while="" timeout="0" info="">
[16:08:04.292]      // if-block "protType == 2"
[16:08:04.292]        // =>  TRUE
[16:08:04.292]      <control if="isSWJ" while="" timeout="0" info="">
[16:08:04.292]        // if-block "isSWJ"
[16:08:04.293]          // =>  TRUE
[16:08:04.293]        <control if="hasDormant" while="" timeout="0" info="">
[16:08:04.293]          // if-block "hasDormant"
[16:08:04.293]            // =>  FALSE
[16:08:04.293]          // skip if-block "hasDormant"
[16:08:04.293]        </control>
[16:08:04.293]        <control if="!hasDormant" while="" timeout="0" info="">
[16:08:04.293]          // if-block "!hasDormant"
[16:08:04.293]            // =>  TRUE
[16:08:04.293]          <block atomic="false" info="">
[16:08:04.293]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:08:04.294]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:08:04.294]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:08:04.294]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:08:04.294]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:08:04.295]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:08:04.295]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:08:04.295]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:08:04.295]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:08:04.296]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:08:04.296]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:08:04.296]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:08:04.296]          </block>
[16:08:04.296]          // end if-block "!hasDormant"
[16:08:04.296]        </control>
[16:08:04.296]        // end if-block "isSWJ"
[16:08:04.296]      </control>
[16:08:04.296]      <control if="!isSWJ" while="" timeout="0" info="">
[16:08:04.296]        // if-block "!isSWJ"
[16:08:04.296]          // =>  FALSE
[16:08:04.296]        // skip if-block "!isSWJ"
[16:08:04.296]      </control>
[16:08:04.296]      <block atomic="false" info="">
[16:08:04.298]        ReadDP(0x0);
[16:08:04.298]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:08:04.298]      </block>
[16:08:04.298]      // end if-block "protType == 2"
[16:08:04.298]    </control>
[16:08:04.298]  </sequence>
[16:08:04.299]  
[16:08:04.299]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:08:04.299]  
[16:08:04.299]  <debugvars>
[16:08:04.299]    // Pre-defined
[16:08:04.299]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:08:04.300]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:08:04.300]    __dp=0x00000000
[16:08:04.300]    __ap=0x00000000
[16:08:04.300]    __traceout=0x00000000      (Trace Disabled)
[16:08:04.300]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:08:04.300]    __FlashAddr=0x00000000
[16:08:04.300]    __FlashLen=0x00000000
[16:08:04.300]    __FlashArg=0x00000000
[16:08:04.300]    __FlashOp=0x00000000
[16:08:04.300]    __Result=0x00000000
[16:08:04.300]  </debugvars>
[16:08:04.300]  
[16:08:04.300]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:08:04.300]    <block atomic="false" info="">
[16:08:04.300]      __var SW_DP_ABORT       = 0x0;
[16:08:04.301]        // -> [SW_DP_ABORT <= 0x00000000]
[16:08:04.301]      __var DP_CTRL_STAT      = 0x4;
[16:08:04.301]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:08:04.301]      __var DP_SELECT         = 0x8;
[16:08:04.301]        // -> [DP_SELECT <= 0x00000008]
[16:08:04.301]      __var powered_down      = 0;
[16:08:04.301]        // -> [powered_down <= 0x00000000]
[16:08:04.301]      WriteDP(DP_SELECT, 0x00000000);
[16:08:04.302]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:08:04.302]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:08:04.303]        // -> [ReadDP(0x00000004) => 0xF0000F40]   (__dp=0x00000000)
[16:08:04.303]        // -> [powered_down <= 0x00000000]
[16:08:04.303]    </block>
[16:08:04.303]    <control if="powered_down" while="" timeout="0" info="">
[16:08:04.303]      // if-block "powered_down"
[16:08:04.303]        // =>  FALSE
[16:08:04.303]      // skip if-block "powered_down"
[16:08:04.303]    </control>
[16:08:04.303]    <block atomic="false" info="">
[16:08:04.303]      __var DEBUG_PORT_VAL    = 0;
[16:08:04.304]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:08:04.304]      __var ACCESS_POINT_VAL  = 0;
[16:08:04.304]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:08:04.304]      __ap = 1; 
[16:08:04.304]        // -> [__ap <= 0x00000001]
[16:08:04.304]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:08:04.305]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:08:04.305]      __ap = 4;
[16:08:04.306]        // -> [__ap <= 0x00000004]
[16:08:04.306]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:08:04.307]        // -> [ReadAP(0x00000000) => 0x00000000]   (__dp=0x00000000, __ap=0x00000004)
[16:08:04.307]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:08:04.307]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:08:04.309]    </block>
[16:08:04.309]    <block atomic="false" info="">
[16:08:04.309]      __var nReset = 0x80;
[16:08:04.309]        // -> [nReset <= 0x00000080]
[16:08:04.309]      __var canReadPins = 0;
[16:08:04.309]        // -> [canReadPins <= 0x00000000]
[16:08:04.311]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:08:04.311]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:08:04.311]        // -> [canReadPins <= 0x00000001]
[16:08:04.311]    </block>
[16:08:04.311]    <control if="" while="1" timeout="200" info="">
[16:08:04.311]      // while "1"  (timeout="200")
[16:08:04.311]      // while-condition  =>  TRUE
[16:08:04.312]      // while "1"  (timeout="200")
[16:08:04.312]      // while-condition  =>  TRUE
[16:08:04.312]      // while "1"  (timeout="200")
[16:08:04.312]      // while-condition  =>  TRUE
[16:08:04.312]      // while "1"  (timeout="200")
[16:08:04.312]      // while-condition  =>  TRUE
[16:08:04.312]      // while "1"  (timeout="200")
[16:08:04.312]      // while-condition  =>  TRUE
[16:08:04.312]      // while "1"  (timeout="200")
[16:08:04.312]      // while-condition  =>  TRUE
[16:08:04.312]      // while "1"  (timeout="200")
[16:08:04.313]      // while-condition  =>  TRUE
[16:08:04.313]      // while "1"  (timeout="200")
[16:08:04.313]      // while-condition  =>  TRUE
[16:08:04.313]      // while "1"  (timeout="200")
[16:08:04.313]      // while-condition  =>  TRUE
[16:08:04.313]      // while "1"  (timeout="200")
[16:08:04.313]      // while-condition  =>  TRUE
[16:08:04.313]      // while "1"  (timeout="200")
[16:08:04.313]      // while-condition  =>  TRUE
[16:08:04.313]      // while "1"  (timeout="200")
[16:08:04.313]      // while-condition  =>  TRUE
[16:08:04.313]      // while "1"  (timeout="200")
[16:08:04.314]      // while-condition  =>  TRUE
[16:08:04.314]      // while "1"  (timeout="200")
[16:08:04.314]      // while-condition  =>  TRUE
[16:08:04.314]      // while "1"  (timeout="200")
[16:08:04.314]      // while-condition  =>  TRUE
[16:08:04.314]      // while "1"  (timeout="200")
[16:08:04.314]      // while-condition  =>  TRUE
[16:08:04.314]      // while "1"  (timeout="200")
[16:08:04.314]      // while-condition  =>  TRUE
[16:08:04.314]      // while "1"  (timeout="200")
[16:08:04.314]      // while-condition  =>  TRUE
[16:08:04.315]      // while "1"  (timeout="200")
[16:08:04.315]      // while  =>  TIMEOUT
[16:08:04.315]      // end while "1"
[16:08:04.315]    </control>
[16:08:04.315]    <control if="canReadPins" while="" timeout="0" info="">
[16:08:04.315]      // if-block "canReadPins"
[16:08:04.315]        // =>  TRUE
[16:08:04.315]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:08:04.315]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:08:04.316]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:08:04.316]        // while-condition  =>  FALSE
[16:08:04.316]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:08:04.316]      </control>
[16:08:04.316]      // end if-block "canReadPins"
[16:08:04.316]    </control>
[16:08:04.316]    <control if="!canReadPins" while="" timeout="0" info="">
[16:08:04.316]      // if-block "!canReadPins"
[16:08:04.317]        // =>  FALSE
[16:08:04.317]      // skip if-block "!canReadPins"
[16:08:04.317]    </control>
[16:08:04.317]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:08:04.317]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:08:04.317]        // =>  TRUE
[16:08:04.317]      <block atomic="false" info="">
[16:08:04.317]        WriteAP(0x00, 0x190008);
[16:08:04.318]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:08:04.318]        WriteAP(0xF0, 0x01);
[16:08:04.319]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:08:04.319]      </block>
[16:08:04.319]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:08:04.319]    </control>
[16:08:04.319]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:08:04.319]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:08:04.320]        // =>  FALSE
[16:08:04.320]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:08:04.320]    </control>
[16:08:04.320]    <block atomic="false" info="">
[16:08:04.320]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:08:04.321]        // -> [ReadAP(0x00000000) => 0x00000000]   (__dp=0x00000000, __ap=0x00000004)
[16:08:04.321]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:08:04.321]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:08:04.323]      __ap = 0; //lets make sure we reset the access point selection
[16:08:04.323]        // -> [__ap <= 0x00000000]
[16:08:04.324]    </block>
[16:08:04.324]  </sequence>
[16:08:04.324]  
[16:08:04.333]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:08:04.333]  
[16:08:04.333]  <debugvars>
[16:08:04.333]    // Pre-defined
[16:08:04.333]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:08:04.333]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:08:04.333]    __dp=0x00000000
[16:08:04.333]    __ap=0x00000000
[16:08:04.333]    __traceout=0x00000000      (Trace Disabled)
[16:08:04.334]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:08:04.334]    __FlashAddr=0x00000000
[16:08:04.334]    __FlashLen=0x00000000
[16:08:04.334]    __FlashArg=0x00000000
[16:08:04.334]    __FlashOp=0x00000000
[16:08:04.334]    __Result=0x00000000
[16:08:04.334]  </debugvars>
[16:08:04.334]  
[16:08:04.334]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:08:04.334]    <block atomic="false" info="">
[16:08:04.334]      __var deviceID = 0;
[16:08:04.335]        // -> [deviceID <= 0x00000000]
[16:08:04.335]      __var version = 0;
[16:08:04.335]        // -> [version <= 0x00000000]
[16:08:04.335]      __var partNum = 0;
[16:08:04.335]        // -> [partNum <= 0x00000000]
[16:08:04.335]      __var manuf = 0;
[16:08:04.335]        // -> [manuf <= 0x00000000]
[16:08:04.335]      __var isMSPM0G1X0X_G3X0X = 0;
[16:08:04.335]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:08:04.335]      __var isProduction = 0;
[16:08:04.336]        // -> [isProduction <= 0x00000000]
[16:08:04.336]      __var continueId = 0;
[16:08:04.336]        // -> [continueId <= 0x00000000]
[16:08:04.336]      deviceID =   Read32(0x41C40004);
[16:08:04.341]        // -> [Read32(0x41C40004) => 0x00000000]   (__dp=0x00000000, __ap=0x00000000)
[16:08:04.341]        // -> [deviceID <= 0x00000000]
[16:08:04.341]      version = deviceID >> 28;
[16:08:04.341]        // -> [version <= 0x00000000]
[16:08:04.341]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:08:04.341]        // -> [partNum <= 0x00000000]
[16:08:04.342]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:08:04.342]        // -> [manuf <= 0x00000000]
[16:08:04.342]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:08:04.342]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:08:04.342]      isProduction = (version > 0);
[16:08:04.342]        // -> [isProduction <= 0x00000000]
[16:08:04.342]    </block>
[16:08:04.342]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:08:04.342]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:08:04.342]        // =>  TRUE
[16:08:04.343]      <block atomic="false" info="">
[16:08:04.343]        continueId = Query(1, "Incorrect ID. This support package is for MSPM0G1X0X_G3X0X devices. Continue?", 4);
[16:08:04.343]          // Query(Query_YesNo, "Incorrect ID. This support package is for MSPM0G1X0X_G3X0X devices. Continue?", No)
[16:08:08.735]          // => No
[16:08:08.735]          // -> [continueId <= 0x00000004]
[16:08:08.736]      </block>
[16:08:08.736]      // end if-block "!isMSPM0G1X0X_G3X0X"
[16:08:08.736]    </control>
[16:08:08.736]    <control if="continueId == 4" while="" timeout="0" info="">
[16:08:08.736]      // if-block "continueId == 4"
[16:08:08.736]        // =>  TRUE
[16:08:08.736]      <block atomic="false" info="">
[16:08:08.736]        Message(2, "Invalid ID");
[16:08:08.741]      </block>
[16:08:08.741]      // end if-block "continueId == 4"
[16:08:08.741]    </control>
[16:08:08.741]  </sequence>
[16:08:08.741]  
[16:08:12.496]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:08:12.496]  
[16:08:12.496]  <debugvars>
[16:08:12.496]    // Pre-defined
[16:08:12.496]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:08:12.496]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:08:12.496]    __dp=0x00000000
[16:08:12.496]    __ap=0x00000000
[16:08:12.496]    __traceout=0x00000000      (Trace Disabled)
[16:08:12.497]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:08:12.497]    __FlashAddr=0x00000000
[16:08:12.497]    __FlashLen=0x00000000
[16:08:12.497]    __FlashArg=0x00000000
[16:08:12.498]    __FlashOp=0x00000000
[16:08:12.498]    __Result=0x00000000
[16:08:12.498]  </debugvars>
[16:08:12.498]  
[16:08:12.498]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:08:12.498]    <block atomic="false" info="">
[16:08:12.498]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:08:12.498]        // -> [isSWJ <= 0x00000001]
[16:08:12.498]      __var hasDormant = __protocol & 0x00020000;
[16:08:12.498]        // -> [hasDormant <= 0x00000000]
[16:08:12.499]      __var protType   = __protocol & 0x0000FFFF;
[16:08:12.499]        // -> [protType <= 0x00000002]
[16:08:12.499]    </block>
[16:08:12.499]    <control if="protType == 1" while="" timeout="0" info="">
[16:08:12.499]      // if-block "protType == 1"
[16:08:12.499]        // =>  FALSE
[16:08:12.499]      // skip if-block "protType == 1"
[16:08:12.499]    </control>
[16:08:12.499]    <control if="protType == 2" while="" timeout="0" info="">
[16:08:12.500]      // if-block "protType == 2"
[16:08:12.500]        // =>  TRUE
[16:08:12.500]      <control if="isSWJ" while="" timeout="0" info="">
[16:08:12.500]        // if-block "isSWJ"
[16:08:12.500]          // =>  TRUE
[16:08:12.500]        <control if="hasDormant" while="" timeout="0" info="">
[16:08:12.500]          // if-block "hasDormant"
[16:08:12.500]            // =>  FALSE
[16:08:12.500]          // skip if-block "hasDormant"
[16:08:12.500]        </control>
[16:08:12.501]        <control if="!hasDormant" while="" timeout="0" info="">
[16:08:12.501]          // if-block "!hasDormant"
[16:08:12.501]            // =>  TRUE
[16:08:12.501]          <block atomic="false" info="">
[16:08:12.501]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:08:12.501]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:08:12.502]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:08:12.502]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:08:12.502]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:08:12.503]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:08:12.503]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:08:12.503]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:08:12.504]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:08:12.504]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:08:12.504]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:08:12.505]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:08:12.505]          </block>
[16:08:12.505]          // end if-block "!hasDormant"
[16:08:12.505]        </control>
[16:08:12.505]        // end if-block "isSWJ"
[16:08:12.506]      </control>
[16:08:12.506]      <control if="!isSWJ" while="" timeout="0" info="">
[16:08:12.506]        // if-block "!isSWJ"
[16:08:12.506]          // =>  FALSE
[16:08:12.506]        // skip if-block "!isSWJ"
[16:08:12.506]      </control>
[16:08:12.506]      <block atomic="false" info="">
[16:08:12.506]        ReadDP(0x0);
[16:08:12.507]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:08:12.507]      </block>
[16:08:12.507]      // end if-block "protType == 2"
[16:08:12.508]    </control>
[16:08:12.508]  </sequence>
[16:08:12.508]  
[16:08:12.509]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:08:12.509]  
[16:08:12.509]  <debugvars>
[16:08:12.509]    // Pre-defined
[16:08:12.509]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:08:12.509]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:08:12.509]    __dp=0x00000000
[16:08:12.509]    __ap=0x00000000
[16:08:12.509]    __traceout=0x00000000      (Trace Disabled)
[16:08:12.509]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:08:12.510]    __FlashAddr=0x00000000
[16:08:12.510]    __FlashLen=0x00000000
[16:08:12.510]    __FlashArg=0x00000000
[16:08:12.510]    __FlashOp=0x00000000
[16:08:12.510]    __Result=0x00000000
[16:08:12.510]  </debugvars>
[16:08:12.510]  
[16:08:12.510]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:08:12.510]    <block atomic="false" info="">
[16:08:12.510]      __var SW_DP_ABORT       = 0x0;
[16:08:12.510]        // -> [SW_DP_ABORT <= 0x00000000]
[16:08:12.510]      __var DP_CTRL_STAT      = 0x4;
[16:08:12.510]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:08:12.510]      __var DP_SELECT         = 0x8;
[16:08:12.510]        // -> [DP_SELECT <= 0x00000008]
[16:08:12.511]      __var powered_down      = 0;
[16:08:12.511]        // -> [powered_down <= 0x00000000]
[16:08:12.511]      WriteDP(DP_SELECT, 0x00000000);
[16:08:12.511]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:08:12.511]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:08:12.512]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:08:12.512]        // -> [powered_down <= 0x00000001]
[16:08:12.512]    </block>
[16:08:12.512]    <control if="powered_down" while="" timeout="0" info="">
[16:08:12.512]      // if-block "powered_down"
[16:08:12.512]        // =>  TRUE
[16:08:12.512]      <block atomic="false" info="">
[16:08:12.513]        Message(0, "Debug/System power-up request sent");
[16:08:12.515]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:08:12.515]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:08:12.515]      </block>
[16:08:12.516]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:08:12.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:08:12.516]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:08:12.516]        // while-condition  =>  FALSE
[16:08:12.516]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:08:12.516]      </control>
[16:08:12.516]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:08:12.516]        // if-block "(__protocol & 0xFFFF) == 1"
[16:08:12.516]          // =>  FALSE
[16:08:12.516]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:08:12.516]      </control>
[16:08:12.518]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:08:12.518]        // if-block "(__protocol & 0xFFFF) == 2"
[16:08:12.518]          // =>  TRUE
[16:08:12.518]        <block atomic="false" info="">
[16:08:12.518]          Message(0, "executing SWD power up");
[16:08:12.519]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:08:12.520]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:08:12.520]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:08:12.521]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:08:12.521]        </block>
[16:08:12.521]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:08:12.521]      </control>
[16:08:12.521]      // end if-block "powered_down"
[16:08:12.521]    </control>
[16:08:12.521]    <block atomic="false" info="">
[16:08:12.522]      __var DEBUG_PORT_VAL    = 0;
[16:08:12.522]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:08:12.522]      __var ACCESS_POINT_VAL  = 0;
[16:08:12.522]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:08:12.522]      __ap = 1; 
[16:08:12.522]        // -> [__ap <= 0x00000001]
[16:08:12.522]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:08:12.523]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:08:12.524]      __ap = 4;
[16:08:12.524]        // -> [__ap <= 0x00000004]
[16:08:12.524]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:08:12.525]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:08:12.525]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:08:12.525]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:08:12.528]    </block>
[16:08:12.528]    <block atomic="false" info="">
[16:08:12.528]      __var nReset = 0x80;
[16:08:12.528]        // -> [nReset <= 0x00000080]
[16:08:12.528]      __var canReadPins = 0;
[16:08:12.528]        // -> [canReadPins <= 0x00000000]
[16:08:12.529]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:08:12.529]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:08:12.529]        // -> [canReadPins <= 0x00000001]
[16:08:12.529]    </block>
[16:08:12.529]    <control if="" while="1" timeout="200" info="">
[16:08:12.529]      // while "1"  (timeout="200")
[16:08:12.529]      // while-condition  =>  TRUE
[16:08:12.530]      // while "1"  (timeout="200")
[16:08:12.530]      // while-condition  =>  TRUE
[16:08:12.530]      // while "1"  (timeout="200")
[16:08:12.530]      // while-condition  =>  TRUE
[16:08:12.530]      // while "1"  (timeout="200")
[16:08:12.530]      // while-condition  =>  TRUE
[16:08:12.530]      // while "1"  (timeout="200")
[16:08:12.530]      // while-condition  =>  TRUE
[16:08:12.530]      // while "1"  (timeout="200")
[16:08:12.530]      // while-condition  =>  TRUE
[16:08:12.530]      // while "1"  (timeout="200")
[16:08:12.530]      // while-condition  =>  TRUE
[16:08:12.530]      // while "1"  (timeout="200")
[16:08:12.530]      // while-condition  =>  TRUE
[16:08:12.531]      // while "1"  (timeout="200")
[16:08:12.531]      // while-condition  =>  TRUE
[16:08:12.531]      // while "1"  (timeout="200")
[16:08:12.531]      // while-condition  =>  TRUE
[16:08:12.531]      // while "1"  (timeout="200")
[16:08:12.531]      // while-condition  =>  TRUE
[16:08:12.531]      // while "1"  (timeout="200")
[16:08:12.531]      // while-condition  =>  TRUE
[16:08:12.531]      // while "1"  (timeout="200")
[16:08:12.531]      // while-condition  =>  TRUE
[16:08:12.532]      // while "1"  (timeout="200")
[16:08:12.532]      // while-condition  =>  TRUE
[16:08:12.532]      // while "1"  (timeout="200")
[16:08:12.532]      // while-condition  =>  TRUE
[16:08:12.532]      // while "1"  (timeout="200")
[16:08:12.532]      // while-condition  =>  TRUE
[16:08:12.532]      // while "1"  (timeout="200")
[16:08:12.532]      // while-condition  =>  TRUE
[16:08:12.533]      // while "1"  (timeout="200")
[16:08:12.533]      // while  =>  TIMEOUT
[16:08:12.533]      // end while "1"
[16:08:12.533]    </control>
[16:08:12.533]    <control if="canReadPins" while="" timeout="0" info="">
[16:08:12.533]      // if-block "canReadPins"
[16:08:12.533]        // =>  TRUE
[16:08:12.533]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:08:12.533]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:08:12.533]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:08:12.535]        // while-condition  =>  FALSE
[16:08:12.535]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:08:12.535]      </control>
[16:08:12.535]      // end if-block "canReadPins"
[16:08:12.535]    </control>
[16:08:12.535]    <control if="!canReadPins" while="" timeout="0" info="">
[16:08:12.535]      // if-block "!canReadPins"
[16:08:12.535]        // =>  FALSE
[16:08:12.535]      // skip if-block "!canReadPins"
[16:08:12.535]    </control>
[16:08:12.535]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:08:12.535]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:08:12.535]        // =>  TRUE
[16:08:12.535]      <block atomic="false" info="">
[16:08:12.536]        WriteAP(0x00, 0x190008);
[16:08:12.536]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:08:12.536]        WriteAP(0xF0, 0x01);
[16:08:12.538]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:08:12.538]      </block>
[16:08:12.538]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:08:12.539]    </control>
[16:08:12.539]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:08:12.539]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:08:12.539]        // =>  FALSE
[16:08:12.539]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:08:12.539]    </control>
[16:08:12.540]    <block atomic="false" info="">
[16:08:12.540]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:08:12.541]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:08:12.541]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:08:12.541]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:08:12.543]      __ap = 0; //lets make sure we reset the access point selection
[16:08:12.543]        // -> [__ap <= 0x00000000]
[16:08:12.543]    </block>
[16:08:12.543]  </sequence>
[16:08:12.543]  
[16:08:12.549]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:08:12.549]  
[16:08:12.549]  <debugvars>
[16:08:12.549]    // Pre-defined
[16:08:12.549]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:08:12.549]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:08:12.549]    __dp=0x00000000
[16:08:12.549]    __ap=0x00000000
[16:08:12.549]    __traceout=0x00000000      (Trace Disabled)
[16:08:12.549]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:08:12.551]    __FlashAddr=0x00000000
[16:08:12.551]    __FlashLen=0x00000000
[16:08:12.551]    __FlashArg=0x00000000
[16:08:12.551]    __FlashOp=0x00000000
[16:08:12.551]    __Result=0x00000000
[16:08:12.551]  </debugvars>
[16:08:12.551]  
[16:08:12.551]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:08:12.551]    <block atomic="false" info="">
[16:08:12.551]      __var deviceID = 0;
[16:08:12.551]        // -> [deviceID <= 0x00000000]
[16:08:12.551]      __var version = 0;
[16:08:12.551]        // -> [version <= 0x00000000]
[16:08:12.551]      __var partNum = 0;
[16:08:12.552]        // -> [partNum <= 0x00000000]
[16:08:12.552]      __var manuf = 0;
[16:08:12.552]        // -> [manuf <= 0x00000000]
[16:08:12.552]      __var isMSPM0G1X0X_G3X0X = 0;
[16:08:12.552]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:08:12.553]      __var isProduction = 0;
[16:08:12.553]        // -> [isProduction <= 0x00000000]
[16:08:12.553]      __var continueId = 0;
[16:08:12.553]        // -> [continueId <= 0x00000000]
[16:08:12.553]      deviceID =   Read32(0x41C40004);
[16:08:12.554]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:08:12.554]        // -> [deviceID <= 0x2BB8802F]
[16:08:12.554]      version = deviceID >> 28;
[16:08:12.555]        // -> [version <= 0x00000002]
[16:08:12.555]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:08:12.555]        // -> [partNum <= 0x0000BB88]
[16:08:12.555]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:08:12.555]        // -> [manuf <= 0x00000017]
[16:08:12.555]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:08:12.555]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:08:12.555]      isProduction = (version > 0);
[16:08:12.556]        // -> [isProduction <= 0x00000001]
[16:08:12.556]    </block>
[16:08:12.556]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:08:12.556]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:08:12.556]        // =>  FALSE
[16:08:12.556]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:08:12.556]    </control>
[16:08:12.556]    <control if="continueId == 4" while="" timeout="0" info="">
[16:08:12.556]      // if-block "continueId == 4"
[16:08:12.556]        // =>  FALSE
[16:08:12.556]      // skip if-block "continueId == 4"
[16:08:12.556]    </control>
[16:08:12.556]    <control if="!isProduction" while="" timeout="0" info="">
[16:08:12.556]      // if-block "!isProduction"
[16:08:12.556]        // =>  FALSE
[16:08:12.556]      // skip if-block "!isProduction"
[16:08:12.558]    </control>
[16:08:12.558]  </sequence>
[16:08:12.558]  
[20:49:18.971]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:49:18.971]  
[20:49:18.971]  <debugvars>
[20:49:18.972]    // Pre-defined
[20:49:18.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:18.972]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:49:18.972]    __dp=0x00000000
[20:49:18.972]    __ap=0x00000000
[20:49:18.972]    __traceout=0x00000000      (Trace Disabled)
[20:49:18.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:18.972]    __FlashAddr=0x00000000
[20:49:18.972]    __FlashLen=0x00000000
[20:49:18.973]    __FlashArg=0x00000000
[20:49:18.973]    __FlashOp=0x00000000
[20:49:18.973]    __Result=0x00000000
[20:49:18.973]  </debugvars>
[20:49:18.973]  
[20:49:18.973]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:49:18.973]    <block atomic="false" info="">
[20:49:18.973]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:49:18.973]        // -> [isSWJ <= 0x00000001]
[20:49:18.973]      __var hasDormant = __protocol & 0x00020000;
[20:49:18.974]        // -> [hasDormant <= 0x00000000]
[20:49:18.974]      __var protType   = __protocol & 0x0000FFFF;
[20:49:18.974]        // -> [protType <= 0x00000002]
[20:49:18.974]    </block>
[20:49:18.974]    <control if="protType == 1" while="" timeout="0" info="">
[20:49:18.974]      // if-block "protType == 1"
[20:49:18.974]        // =>  FALSE
[20:49:18.974]      // skip if-block "protType == 1"
[20:49:18.974]    </control>
[20:49:18.974]    <control if="protType == 2" while="" timeout="0" info="">
[20:49:18.974]      // if-block "protType == 2"
[20:49:18.974]        // =>  TRUE
[20:49:18.974]      <control if="isSWJ" while="" timeout="0" info="">
[20:49:18.976]        // if-block "isSWJ"
[20:49:18.976]          // =>  TRUE
[20:49:18.976]        <control if="hasDormant" while="" timeout="0" info="">
[20:49:18.976]          // if-block "hasDormant"
[20:49:18.976]            // =>  FALSE
[20:49:18.976]          // skip if-block "hasDormant"
[20:49:18.976]        </control>
[20:49:18.976]        <control if="!hasDormant" while="" timeout="0" info="">
[20:49:18.977]          // if-block "!hasDormant"
[20:49:18.977]            // =>  TRUE
[20:49:18.977]          <block atomic="false" info="">
[20:49:18.977]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:49:18.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:18.977]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:49:18.978]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:49:18.978]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:49:18.978]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:18.978]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:49:18.979]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:49:18.979]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:49:18.979]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:18.979]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:49:18.979]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:49:18.980]          </block>
[20:49:18.980]          // end if-block "!hasDormant"
[20:49:18.980]        </control>
[20:49:18.980]        // end if-block "isSWJ"
[20:49:18.980]      </control>
[20:49:18.980]      <control if="!isSWJ" while="" timeout="0" info="">
[20:49:18.980]        // if-block "!isSWJ"
[20:49:18.980]          // =>  FALSE
[20:49:18.980]        // skip if-block "!isSWJ"
[20:49:18.980]      </control>
[20:49:18.981]      <block atomic="false" info="">
[20:49:18.981]        ReadDP(0x0);
[20:49:18.981]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:49:18.981]      </block>
[20:49:18.981]      // end if-block "protType == 2"
[20:49:18.981]    </control>
[20:49:18.981]  </sequence>
[20:49:18.981]  
[20:49:21.350]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:49:21.350]  
[20:49:21.351]  <debugvars>
[20:49:21.351]    // Pre-defined
[20:49:21.351]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:21.351]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:21.351]    __dp=0x00000000
[20:49:21.351]    __ap=0x00000000
[20:49:21.351]    __traceout=0x00000000      (Trace Disabled)
[20:49:21.351]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:21.351]    __FlashAddr=0x00000000
[20:49:21.351]    __FlashLen=0x00000000
[20:49:21.351]    __FlashArg=0x00000000
[20:49:21.351]    __FlashOp=0x00000000
[20:49:21.352]    __Result=0x00000000
[20:49:21.352]  </debugvars>
[20:49:21.352]  
[20:49:21.352]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:49:21.352]    <block atomic="false" info="">
[20:49:21.352]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:49:21.352]        // -> [isSWJ <= 0x00000001]
[20:49:21.352]      __var hasDormant = __protocol & 0x00020000;
[20:49:21.352]        // -> [hasDormant <= 0x00000000]
[20:49:21.353]      __var protType   = __protocol & 0x0000FFFF;
[20:49:21.353]        // -> [protType <= 0x00000002]
[20:49:21.353]    </block>
[20:49:21.353]    <control if="protType == 1" while="" timeout="0" info="">
[20:49:21.353]      // if-block "protType == 1"
[20:49:21.353]        // =>  FALSE
[20:49:21.353]      // skip if-block "protType == 1"
[20:49:21.353]    </control>
[20:49:21.353]    <control if="protType == 2" while="" timeout="0" info="">
[20:49:21.354]      // if-block "protType == 2"
[20:49:21.354]        // =>  TRUE
[20:49:21.354]      <control if="isSWJ" while="" timeout="0" info="">
[20:49:21.354]        // if-block "isSWJ"
[20:49:21.354]          // =>  TRUE
[20:49:21.354]        <control if="hasDormant" while="" timeout="0" info="">
[20:49:21.355]          // if-block "hasDormant"
[20:49:21.355]            // =>  FALSE
[20:49:21.355]          // skip if-block "hasDormant"
[20:49:21.355]        </control>
[20:49:21.355]        <control if="!hasDormant" while="" timeout="0" info="">
[20:49:21.355]          // if-block "!hasDormant"
[20:49:21.355]            // =>  TRUE
[20:49:21.356]          <block atomic="false" info="">
[20:49:21.356]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:49:21.356]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:21.356]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:49:21.357]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:49:21.357]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:49:21.357]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:21.357]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:49:21.358]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:49:21.358]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:49:21.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:49:21.358]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:49:21.359]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:49:21.359]          </block>
[20:49:21.359]          // end if-block "!hasDormant"
[20:49:21.359]        </control>
[20:49:21.359]        // end if-block "isSWJ"
[20:49:21.359]      </control>
[20:49:21.359]      <control if="!isSWJ" while="" timeout="0" info="">
[20:49:21.359]        // if-block "!isSWJ"
[20:49:21.359]          // =>  FALSE
[20:49:21.360]        // skip if-block "!isSWJ"
[20:49:21.360]      </control>
[20:49:21.360]      <block atomic="false" info="">
[20:49:21.360]        ReadDP(0x0);
[20:49:21.360]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:49:21.360]      </block>
[20:49:21.361]      // end if-block "protType == 2"
[20:49:21.361]    </control>
[20:49:21.361]  </sequence>
[20:49:21.361]  
[20:49:21.362]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:49:21.362]  
[20:49:21.362]  <debugvars>
[20:49:21.362]    // Pre-defined
[20:49:21.362]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:21.362]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:21.363]    __dp=0x00000000
[20:49:21.363]    __ap=0x00000000
[20:49:21.363]    __traceout=0x00000000      (Trace Disabled)
[20:49:21.363]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:21.363]    __FlashAddr=0x00000000
[20:49:21.363]    __FlashLen=0x00000000
[20:49:21.363]    __FlashArg=0x00000000
[20:49:21.363]    __FlashOp=0x00000000
[20:49:21.363]    __Result=0x00000000
[20:49:21.363]  </debugvars>
[20:49:21.363]  
[20:49:21.364]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:49:21.364]    <block atomic="false" info="">
[20:49:21.364]      __var SW_DP_ABORT       = 0x0;
[20:49:21.364]        // -> [SW_DP_ABORT <= 0x00000000]
[20:49:21.364]      __var DP_CTRL_STAT      = 0x4;
[20:49:21.365]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:49:21.365]      __var DP_SELECT         = 0x8;
[20:49:21.365]        // -> [DP_SELECT <= 0x00000008]
[20:49:21.365]      __var powered_down      = 0;
[20:49:21.365]        // -> [powered_down <= 0x00000000]
[20:49:21.365]      WriteDP(DP_SELECT, 0x00000000);
[20:49:21.367]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:49:21.367]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:49:21.367]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:49:21.367]        // -> [powered_down <= 0x00000001]
[20:49:21.368]    </block>
[20:49:21.368]    <control if="powered_down" while="" timeout="0" info="">
[20:49:21.368]      // if-block "powered_down"
[20:49:21.368]        // =>  TRUE
[20:49:21.368]      <block atomic="false" info="">
[20:49:21.368]        Message(0, "Debug/System power-up request sent");
[20:49:21.370]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:49:21.371]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:49:21.371]      </block>
[20:49:21.371]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:49:21.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:49:21.372]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:49:21.372]        // while-condition  =>  FALSE
[20:49:21.372]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:49:21.372]      </control>
[20:49:21.372]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:49:21.372]        // if-block "(__protocol & 0xFFFF) == 1"
[20:49:21.372]          // =>  FALSE
[20:49:21.372]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:49:21.372]      </control>
[20:49:21.372]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:49:21.372]        // if-block "(__protocol & 0xFFFF) == 2"
[20:49:21.373]          // =>  TRUE
[20:49:21.373]        <block atomic="false" info="">
[20:49:21.373]          Message(0, "executing SWD power up");
[20:49:21.375]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:49:21.375]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:49:21.375]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:49:21.376]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:49:21.376]        </block>
[20:49:21.376]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:49:21.376]      </control>
[20:49:21.376]      // end if-block "powered_down"
[20:49:21.376]    </control>
[20:49:21.376]    <block atomic="false" info="">
[20:49:21.376]      __var DEBUG_PORT_VAL    = 0;
[20:49:21.376]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:49:21.376]      __var ACCESS_POINT_VAL  = 0;
[20:49:21.378]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:49:21.378]      __ap = 1; 
[20:49:21.378]        // -> [__ap <= 0x00000001]
[20:49:21.378]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:49:21.379]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:49:21.379]      __ap = 4;
[20:49:21.379]        // -> [__ap <= 0x00000004]
[20:49:21.379]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:49:21.380]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:49:21.380]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:49:21.381]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:49:21.382]    </block>
[20:49:21.382]    <block atomic="false" info="">
[20:49:21.382]      __var nReset = 0x80;
[20:49:21.383]        // -> [nReset <= 0x00000080]
[20:49:21.383]      __var canReadPins = 0;
[20:49:21.383]        // -> [canReadPins <= 0x00000000]
[20:49:21.383]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:49:21.383]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:49:21.383]        // -> [canReadPins <= 0x00000001]
[20:49:21.383]    </block>
[20:49:21.384]    <control if="" while="1" timeout="200" info="">
[20:49:21.384]      // while "1"  (timeout="200")
[20:49:21.384]      // while-condition  =>  TRUE
[20:49:21.385]      // while "1"  (timeout="200")
[20:49:21.385]      // while-condition  =>  TRUE
[20:49:21.385]      // while "1"  (timeout="200")
[20:49:21.385]      // while-condition  =>  TRUE
[20:49:21.385]      // while "1"  (timeout="200")
[20:49:21.385]      // while-condition  =>  TRUE
[20:49:21.385]      // while "1"  (timeout="200")
[20:49:21.385]      // while-condition  =>  TRUE
[20:49:21.385]      // while "1"  (timeout="200")
[20:49:21.385]      // while-condition  =>  TRUE
[20:49:21.385]      // while "1"  (timeout="200")
[20:49:21.386]      // while-condition  =>  TRUE
[20:49:21.386]      // while "1"  (timeout="200")
[20:49:21.386]      // while-condition  =>  TRUE
[20:49:21.386]      // while "1"  (timeout="200")
[20:49:21.386]      // while-condition  =>  TRUE
[20:49:21.386]      // while "1"  (timeout="200")
[20:49:21.386]      // while-condition  =>  TRUE
[20:49:21.386]      // while "1"  (timeout="200")
[20:49:21.386]      // while-condition  =>  TRUE
[20:49:21.386]      // while "1"  (timeout="200")
[20:49:21.387]      // while-condition  =>  TRUE
[20:49:21.387]      // while "1"  (timeout="200")
[20:49:21.387]      // while-condition  =>  TRUE
[20:49:21.387]      // while "1"  (timeout="200")
[20:49:21.387]      // while-condition  =>  TRUE
[20:49:21.387]      // while "1"  (timeout="200")
[20:49:21.387]      // while-condition  =>  TRUE
[20:49:21.387]      // while "1"  (timeout="200")
[20:49:21.387]      // while-condition  =>  TRUE
[20:49:21.387]      // while "1"  (timeout="200")
[20:49:21.388]      // while-condition  =>  TRUE
[20:49:21.388]      // while "1"  (timeout="200")
[20:49:21.388]      // while-condition  =>  TRUE
[20:49:21.388]      // while "1"  (timeout="200")
[20:49:21.388]      // while-condition  =>  TRUE
[20:49:21.388]      // while "1"  (timeout="200")
[20:49:21.388]      // while-condition  =>  TRUE
[20:49:21.388]      // while "1"  (timeout="200")
[20:49:21.388]      // while-condition  =>  TRUE
[20:49:21.388]      // while "1"  (timeout="200")
[20:49:21.389]      // while-condition  =>  TRUE
[20:49:21.389]      // while "1"  (timeout="200")
[20:49:21.389]      // while-condition  =>  TRUE
[20:49:21.389]      // while "1"  (timeout="200")
[20:49:21.389]      // while-condition  =>  TRUE
[20:49:21.389]      // while "1"  (timeout="200")
[20:49:21.389]      // while-condition  =>  TRUE
[20:49:21.389]      // while "1"  (timeout="200")
[20:49:21.389]      // while-condition  =>  TRUE
[20:49:21.389]      // while "1"  (timeout="200")
[20:49:21.391]      // while-condition  =>  TRUE
[20:49:21.391]      // while "1"  (timeout="200")
[20:49:21.391]      // while-condition  =>  TRUE
[20:49:21.391]      // while "1"  (timeout="200")
[20:49:21.391]      // while-condition  =>  TRUE
[20:49:21.391]      // while "1"  (timeout="200")
[20:49:21.391]      // while-condition  =>  TRUE
[20:49:21.391]      // while "1"  (timeout="200")
[20:49:21.391]      // while-condition  =>  TRUE
[20:49:21.392]      // while "1"  (timeout="200")
[20:49:21.392]      // while-condition  =>  TRUE
[20:49:21.392]      // while "1"  (timeout="200")
[20:49:21.392]      // while-condition  =>  TRUE
[20:49:21.392]      // while "1"  (timeout="200")
[20:49:21.392]      // while-condition  =>  TRUE
[20:49:21.392]      // while "1"  (timeout="200")
[20:49:21.392]      // while-condition  =>  TRUE
[20:49:21.392]      // while "1"  (timeout="200")
[20:49:21.392]      // while-condition  =>  TRUE
[20:49:21.392]      // while "1"  (timeout="200")
[20:49:21.393]      // while-condition  =>  TRUE
[20:49:21.393]      // while "1"  (timeout="200")
[20:49:21.393]      // while  =>  TIMEOUT
[20:49:21.393]      // end while "1"
[20:49:21.393]    </control>
[20:49:21.393]    <control if="canReadPins" while="" timeout="0" info="">
[20:49:21.393]      // if-block "canReadPins"
[20:49:21.393]        // =>  TRUE
[20:49:21.393]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:49:21.393]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:49:21.394]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:49:21.394]        // while-condition  =>  FALSE
[20:49:21.394]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:49:21.394]      </control>
[20:49:21.394]      // end if-block "canReadPins"
[20:49:21.394]    </control>
[20:49:21.394]    <control if="!canReadPins" while="" timeout="0" info="">
[20:49:21.394]      // if-block "!canReadPins"
[20:49:21.394]        // =>  FALSE
[20:49:21.394]      // skip if-block "!canReadPins"
[20:49:21.394]    </control>
[20:49:21.395]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:49:21.395]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:49:21.395]        // =>  TRUE
[20:49:21.395]      <block atomic="false" info="">
[20:49:21.395]        WriteAP(0x00, 0x190008);
[20:49:21.396]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:49:21.396]        WriteAP(0xF0, 0x01);
[20:49:21.397]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:49:21.397]      </block>
[20:49:21.397]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:49:21.397]    </control>
[20:49:21.397]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:49:21.397]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:49:21.397]        // =>  FALSE
[20:49:21.398]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:49:21.398]    </control>
[20:49:21.398]    <block atomic="false" info="">
[20:49:21.398]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:49:21.399]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:49:21.399]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:49:21.399]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:49:21.401]      __ap = 0; //lets make sure we reset the access point selection
[20:49:21.401]        // -> [__ap <= 0x00000000]
[20:49:21.401]    </block>
[20:49:21.401]  </sequence>
[20:49:21.401]  
[20:49:21.408]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:49:21.408]  
[20:49:21.408]  <debugvars>
[20:49:21.408]    // Pre-defined
[20:49:21.408]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:49:21.408]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:49:21.408]    __dp=0x00000000
[20:49:21.408]    __ap=0x00000000
[20:49:21.408]    __traceout=0x00000000      (Trace Disabled)
[20:49:21.408]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:49:21.409]    __FlashAddr=0x00000000
[20:49:21.409]    __FlashLen=0x00000000
[20:49:21.409]    __FlashArg=0x00000000
[20:49:21.409]    __FlashOp=0x00000000
[20:49:21.409]    __Result=0x00000000
[20:49:21.409]  </debugvars>
[20:49:21.409]  
[20:49:21.409]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:49:21.409]    <block atomic="false" info="">
[20:49:21.409]      __var deviceID = 0;
[20:49:21.409]        // -> [deviceID <= 0x00000000]
[20:49:21.410]      __var version = 0;
[20:49:21.410]        // -> [version <= 0x00000000]
[20:49:21.410]      __var partNum = 0;
[20:49:21.410]        // -> [partNum <= 0x00000000]
[20:49:21.410]      __var manuf = 0;
[20:49:21.410]        // -> [manuf <= 0x00000000]
[20:49:21.410]      __var isMSPM0G1X0X_G3X0X = 0;
[20:49:21.410]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:49:21.410]      __var isProduction = 0;
[20:49:21.411]        // -> [isProduction <= 0x00000000]
[20:49:21.411]      __var continueId = 0;
[20:49:21.411]        // -> [continueId <= 0x00000000]
[20:49:21.411]      deviceID =   Read32(0x41C40004);
[20:49:21.413]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:49:21.413]        // -> [deviceID <= 0x2BB8802F]
[20:49:21.413]      version = deviceID >> 28;
[20:49:21.413]        // -> [version <= 0x00000002]
[20:49:21.413]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:49:21.413]        // -> [partNum <= 0x0000BB88]
[20:49:21.413]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:49:21.413]        // -> [manuf <= 0x00000017]
[20:49:21.414]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:49:21.414]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:49:21.414]      isProduction = (version > 0);
[20:49:21.414]        // -> [isProduction <= 0x00000001]
[20:49:21.414]    </block>
[20:49:21.414]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:49:21.414]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:49:21.414]        // =>  FALSE
[20:49:21.414]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:49:21.414]    </control>
[20:49:21.415]    <control if="continueId == 4" while="" timeout="0" info="">
[20:49:21.415]      // if-block "continueId == 4"
[20:49:21.415]        // =>  FALSE
[20:49:21.415]      // skip if-block "continueId == 4"
[20:49:21.415]    </control>
[20:49:21.415]    <control if="!isProduction" while="" timeout="0" info="">
[20:49:21.415]      // if-block "!isProduction"
[20:49:21.415]        // =>  FALSE
[20:49:21.415]      // skip if-block "!isProduction"
[20:49:21.415]    </control>
[20:49:21.415]  </sequence>
[20:49:21.416]  
[20:52:24.829]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:52:24.829]  
[20:52:24.829]  <debugvars>
[20:52:24.829]    // Pre-defined
[20:52:24.829]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:52:24.829]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:52:24.829]    __dp=0x00000000
[20:52:24.829]    __ap=0x00000000
[20:52:24.829]    __traceout=0x00000000      (Trace Disabled)
[20:52:24.829]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:52:24.831]    __FlashAddr=0x00000000
[20:52:24.831]    __FlashLen=0x00000000
[20:52:24.831]    __FlashArg=0x00000000
[20:52:24.831]    __FlashOp=0x00000000
[20:52:24.831]    __Result=0x00000000
[20:52:24.831]  </debugvars>
[20:52:24.831]  
[20:52:24.831]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:52:24.831]    <block atomic="false" info="">
[20:52:24.831]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:52:24.832]        // -> [isSWJ <= 0x00000001]
[20:52:24.832]      __var hasDormant = __protocol & 0x00020000;
[20:52:24.832]        // -> [hasDormant <= 0x00000000]
[20:52:24.832]      __var protType   = __protocol & 0x0000FFFF;
[20:52:24.832]        // -> [protType <= 0x00000002]
[20:52:24.832]    </block>
[20:52:24.832]    <control if="protType == 1" while="" timeout="0" info="">
[20:52:24.832]      // if-block "protType == 1"
[20:52:24.832]        // =>  FALSE
[20:52:24.832]      // skip if-block "protType == 1"
[20:52:24.832]    </control>
[20:52:24.832]    <control if="protType == 2" while="" timeout="0" info="">
[20:52:24.832]      // if-block "protType == 2"
[20:52:24.832]        // =>  TRUE
[20:52:24.832]      <control if="isSWJ" while="" timeout="0" info="">
[20:52:24.833]        // if-block "isSWJ"
[20:52:24.833]          // =>  TRUE
[20:52:24.833]        <control if="hasDormant" while="" timeout="0" info="">
[20:52:24.833]          // if-block "hasDormant"
[20:52:24.833]            // =>  FALSE
[20:52:24.833]          // skip if-block "hasDormant"
[20:52:24.833]        </control>
[20:52:24.833]        <control if="!hasDormant" while="" timeout="0" info="">
[20:52:24.833]          // if-block "!hasDormant"
[20:52:24.833]            // =>  TRUE
[20:52:24.833]          <block atomic="false" info="">
[20:52:24.833]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:52:24.834]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:52:24.834]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:52:24.834]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:52:24.834]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:52:24.835]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:52:24.835]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:52:24.835]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:52:24.835]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:52:24.836]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:52:24.836]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:52:24.836]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:52:24.836]          </block>
[20:52:24.836]          // end if-block "!hasDormant"
[20:52:24.837]        </control>
[20:52:24.837]        // end if-block "isSWJ"
[20:52:24.837]      </control>
[20:52:24.837]      <control if="!isSWJ" while="" timeout="0" info="">
[20:52:24.837]        // if-block "!isSWJ"
[20:52:24.837]          // =>  FALSE
[20:52:24.837]        // skip if-block "!isSWJ"
[20:52:24.838]      </control>
[20:52:24.838]      <block atomic="false" info="">
[20:52:24.838]        ReadDP(0x0);
[20:52:24.838]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:52:24.838]      </block>
[20:52:24.838]      // end if-block "protType == 2"
[20:52:24.838]    </control>
[20:52:24.838]  </sequence>
[20:52:24.840]  
[20:52:24.840]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:52:24.840]  
[20:52:24.840]  <debugvars>
[20:52:24.840]    // Pre-defined
[20:52:24.840]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:52:24.840]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:52:24.841]    __dp=0x00000000
[20:52:24.841]    __ap=0x00000000
[20:52:24.841]    __traceout=0x00000000      (Trace Disabled)
[20:52:24.841]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:52:24.841]    __FlashAddr=0x00000000
[20:52:24.841]    __FlashLen=0x00000000
[20:52:24.841]    __FlashArg=0x00000000
[20:52:24.841]    __FlashOp=0x00000000
[20:52:24.841]    __Result=0x00000000
[20:52:24.841]  </debugvars>
[20:52:24.842]  
[20:52:24.842]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:52:24.842]    <block atomic="false" info="">
[20:52:24.842]      __var SW_DP_ABORT       = 0x0;
[20:52:24.842]        // -> [SW_DP_ABORT <= 0x00000000]
[20:52:24.842]      __var DP_CTRL_STAT      = 0x4;
[20:52:24.842]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:52:24.842]      __var DP_SELECT         = 0x8;
[20:52:24.842]        // -> [DP_SELECT <= 0x00000008]
[20:52:24.842]      __var powered_down      = 0;
[20:52:24.842]        // -> [powered_down <= 0x00000000]
[20:52:24.842]      WriteDP(DP_SELECT, 0x00000000);
[20:52:24.843]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:52:24.843]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:52:24.843]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:52:24.843]        // -> [powered_down <= 0x00000001]
[20:52:24.843]    </block>
[20:52:24.843]    <control if="powered_down" while="" timeout="0" info="">
[20:52:24.843]      // if-block "powered_down"
[20:52:24.844]        // =>  TRUE
[20:52:24.844]      <block atomic="false" info="">
[20:52:24.844]        Message(0, "Debug/System power-up request sent");
[20:52:24.846]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:52:24.847]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:52:24.847]      </block>
[20:52:24.847]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:52:24.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:52:24.848]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:52:24.848]        // while-condition  =>  FALSE
[20:52:24.848]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:52:24.848]      </control>
[20:52:24.848]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:52:24.848]        // if-block "(__protocol & 0xFFFF) == 1"
[20:52:24.848]          // =>  FALSE
[20:52:24.848]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:52:24.848]      </control>
[20:52:24.849]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:52:24.849]        // if-block "(__protocol & 0xFFFF) == 2"
[20:52:24.849]          // =>  TRUE
[20:52:24.849]        <block atomic="false" info="">
[20:52:24.849]          Message(0, "executing SWD power up");
[20:52:24.851]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:52:24.851]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:52:24.852]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:52:24.852]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:52:24.852]        </block>
[20:52:24.853]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:52:24.853]      </control>
[20:52:24.853]      // end if-block "powered_down"
[20:52:24.853]    </control>
[20:52:24.853]    <block atomic="false" info="">
[20:52:24.853]      __var DEBUG_PORT_VAL    = 0;
[20:52:24.853]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:52:24.853]      __var ACCESS_POINT_VAL  = 0;
[20:52:24.853]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:52:24.853]      __ap = 1; 
[20:52:24.853]        // -> [__ap <= 0x00000001]
[20:52:24.854]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:52:24.855]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:52:24.855]      __ap = 4;
[20:52:24.855]        // -> [__ap <= 0x00000004]
[20:52:24.855]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:52:24.856]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:52:24.856]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:52:24.856]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:52:24.858]    </block>
[20:52:24.858]    <block atomic="false" info="">
[20:52:24.858]      __var nReset = 0x80;
[20:52:24.858]        // -> [nReset <= 0x00000080]
[20:52:24.858]      __var canReadPins = 0;
[20:52:24.859]        // -> [canReadPins <= 0x00000000]
[20:52:24.859]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:52:24.859]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:52:24.859]        // -> [canReadPins <= 0x00000001]
[20:52:24.859]    </block>
[20:52:24.859]    <control if="" while="1" timeout="200" info="">
[20:52:24.859]      // while "1"  (timeout="200")
[20:52:24.859]      // while-condition  =>  TRUE
[20:52:24.859]      // while "1"  (timeout="200")
[20:52:24.859]      // while-condition  =>  TRUE
[20:52:24.859]      // while "1"  (timeout="200")
[20:52:24.859]      // while-condition  =>  TRUE
[20:52:24.861]      // while "1"  (timeout="200")
[20:52:24.861]      // while-condition  =>  TRUE
[20:52:24.861]      // while "1"  (timeout="200")
[20:52:24.861]      // while-condition  =>  TRUE
[20:52:24.861]      // while "1"  (timeout="200")
[20:52:24.861]      // while-condition  =>  TRUE
[20:52:24.861]      // while "1"  (timeout="200")
[20:52:24.861]      // while-condition  =>  TRUE
[20:52:24.861]      // while "1"  (timeout="200")
[20:52:24.862]      // while-condition  =>  TRUE
[20:52:24.862]      // while "1"  (timeout="200")
[20:52:24.862]      // while  =>  TIMEOUT
[20:52:24.862]      // end while "1"
[20:52:24.862]    </control>
[20:52:24.862]    <control if="canReadPins" while="" timeout="0" info="">
[20:52:24.862]      // if-block "canReadPins"
[20:52:24.862]        // =>  TRUE
[20:52:24.862]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:52:24.862]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:52:24.863]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:52:24.863]        // while-condition  =>  FALSE
[20:52:24.863]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:52:24.863]      </control>
[20:52:24.863]      // end if-block "canReadPins"
[20:52:24.863]    </control>
[20:52:24.864]    <control if="!canReadPins" while="" timeout="0" info="">
[20:52:24.864]      // if-block "!canReadPins"
[20:52:24.864]        // =>  FALSE
[20:52:24.864]      // skip if-block "!canReadPins"
[20:52:24.864]    </control>
[20:52:24.864]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:52:24.864]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:52:24.864]        // =>  TRUE
[20:52:24.864]      <block atomic="false" info="">
[20:52:24.865]        WriteAP(0x00, 0x190008);
[20:52:24.865]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:52:24.865]        WriteAP(0xF0, 0x01);
[20:52:24.866]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:52:24.867]      </block>
[20:52:24.867]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:52:24.867]    </control>
[20:52:24.867]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:52:24.867]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:52:24.867]        // =>  FALSE
[20:52:24.867]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:52:24.867]    </control>
[20:52:24.867]    <block atomic="false" info="">
[20:52:24.867]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:52:24.868]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:52:24.869]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:52:24.869]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:52:24.870]      __ap = 0; //lets make sure we reset the access point selection
[20:52:24.870]        // -> [__ap <= 0x00000000]
[20:52:24.870]    </block>
[20:52:24.870]  </sequence>
[20:52:24.870]  
[20:52:24.876]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:52:24.876]  
[20:52:24.877]  <debugvars>
[20:52:24.877]    // Pre-defined
[20:52:24.877]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:52:24.877]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:52:24.877]    __dp=0x00000000
[20:52:24.877]    __ap=0x00000000
[20:52:24.877]    __traceout=0x00000000      (Trace Disabled)
[20:52:24.877]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:52:24.877]    __FlashAddr=0x00000000
[20:52:24.877]    __FlashLen=0x00000000
[20:52:24.877]    __FlashArg=0x00000000
[20:52:24.878]    __FlashOp=0x00000000
[20:52:24.878]    __Result=0x00000000
[20:52:24.878]  </debugvars>
[20:52:24.878]  
[20:52:24.878]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:52:24.878]    <block atomic="false" info="">
[20:52:24.878]      __var deviceID = 0;
[20:52:24.878]        // -> [deviceID <= 0x00000000]
[20:52:24.878]      __var version = 0;
[20:52:24.878]        // -> [version <= 0x00000000]
[20:52:24.878]      __var partNum = 0;
[20:52:24.879]        // -> [partNum <= 0x00000000]
[20:52:24.879]      __var manuf = 0;
[20:52:24.879]        // -> [manuf <= 0x00000000]
[20:52:24.879]      __var isMSPM0G1X0X_G3X0X = 0;
[20:52:24.879]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:52:24.879]      __var isProduction = 0;
[20:52:24.879]        // -> [isProduction <= 0x00000000]
[20:52:24.879]      __var continueId = 0;
[20:52:24.880]        // -> [continueId <= 0x00000000]
[20:52:24.880]      deviceID =   Read32(0x41C40004);
[20:52:24.881]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:52:24.881]        // -> [deviceID <= 0x2BB8802F]
[20:52:24.881]      version = deviceID >> 28;
[20:52:24.881]        // -> [version <= 0x00000002]
[20:52:24.881]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:52:24.883]        // -> [partNum <= 0x0000BB88]
[20:52:24.883]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:52:24.883]        // -> [manuf <= 0x00000017]
[20:52:24.883]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:52:24.883]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:52:24.883]      isProduction = (version > 0);
[20:52:24.883]        // -> [isProduction <= 0x00000001]
[20:52:24.883]    </block>
[20:52:24.883]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:52:24.883]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:52:24.883]        // =>  FALSE
[20:52:24.883]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:52:24.883]    </control>
[20:52:24.883]    <control if="continueId == 4" while="" timeout="0" info="">
[20:52:24.883]      // if-block "continueId == 4"
[20:52:24.883]        // =>  FALSE
[20:52:24.885]      // skip if-block "continueId == 4"
[20:52:24.885]    </control>
[20:52:24.885]    <control if="!isProduction" while="" timeout="0" info="">
[20:52:24.885]      // if-block "!isProduction"
[20:52:24.885]        // =>  FALSE
[20:52:24.885]      // skip if-block "!isProduction"
[20:52:24.885]    </control>
[20:52:24.885]  </sequence>
[20:52:24.885]  
[20:52:44.910]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:52:44.910]  
[20:52:44.918]  <debugvars>
[20:52:44.918]    // Pre-defined
[20:52:44.918]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:52:44.918]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:52:44.918]    __dp=0x00000000
[20:52:44.918]    __ap=0x00000000
[20:52:44.919]    __traceout=0x00000000      (Trace Disabled)
[20:52:44.919]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:52:44.919]    __FlashAddr=0x00000000
[20:52:44.919]    __FlashLen=0x00000000
[20:52:44.919]    __FlashArg=0x00000000
[20:52:44.919]    __FlashOp=0x00000000
[20:52:44.919]    __Result=0x00000000
[20:52:44.919]  </debugvars>
[20:52:44.919]  
[20:52:44.919]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:52:44.919]    <block atomic="false" info="">
[20:52:44.919]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:52:44.920]        // -> [isSWJ <= 0x00000001]
[20:52:44.920]      __var hasDormant = __protocol & 0x00020000;
[20:52:44.920]        // -> [hasDormant <= 0x00000000]
[20:52:44.920]      __var protType   = __protocol & 0x0000FFFF;
[20:52:44.920]        // -> [protType <= 0x00000002]
[20:52:44.920]    </block>
[20:52:44.920]    <control if="protType == 1" while="" timeout="0" info="">
[20:52:44.920]      // if-block "protType == 1"
[20:52:44.920]        // =>  FALSE
[20:52:44.920]      // skip if-block "protType == 1"
[20:52:44.921]    </control>
[20:52:44.921]    <control if="protType == 2" while="" timeout="0" info="">
[20:52:44.921]      // if-block "protType == 2"
[20:52:44.921]        // =>  TRUE
[20:52:44.921]      <control if="isSWJ" while="" timeout="0" info="">
[20:52:44.921]        // if-block "isSWJ"
[20:52:44.921]          // =>  TRUE
[20:52:44.921]        <control if="hasDormant" while="" timeout="0" info="">
[20:52:44.921]          // if-block "hasDormant"
[20:52:44.921]            // =>  FALSE
[20:52:44.921]          // skip if-block "hasDormant"
[20:52:44.922]        </control>
[20:52:44.922]        <control if="!hasDormant" while="" timeout="0" info="">
[20:52:44.922]          // if-block "!hasDormant"
[20:52:44.922]            // =>  TRUE
[20:52:44.922]          <block atomic="false" info="">
[20:52:44.922]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:52:44.922]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:52:44.923]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:52:44.923]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:52:44.923]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:52:44.923]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:52:44.923]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:52:44.924]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:52:44.924]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:52:44.924]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:52:44.924]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:52:44.925]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:52:44.925]          </block>
[20:52:44.925]          // end if-block "!hasDormant"
[20:52:44.925]        </control>
[20:52:44.925]        // end if-block "isSWJ"
[20:52:44.925]      </control>
[20:52:44.925]      <control if="!isSWJ" while="" timeout="0" info="">
[20:52:44.925]        // if-block "!isSWJ"
[20:52:44.925]          // =>  FALSE
[20:52:44.926]        // skip if-block "!isSWJ"
[20:52:44.926]      </control>
[20:52:44.926]      <block atomic="false" info="">
[20:52:44.926]        ReadDP(0x0);
[20:52:44.926]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:52:44.926]      </block>
[20:52:44.927]      // end if-block "protType == 2"
[20:52:44.927]    </control>
[20:52:44.927]  </sequence>
[20:52:44.927]  
[20:52:44.928]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:52:44.928]  
[20:52:44.928]  <debugvars>
[20:52:44.928]    // Pre-defined
[20:52:44.928]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:52:44.928]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:52:44.928]    __dp=0x00000000
[20:52:44.928]    __ap=0x00000000
[20:52:44.928]    __traceout=0x00000000      (Trace Disabled)
[20:52:44.928]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:52:44.928]    __FlashAddr=0x00000000
[20:52:44.928]    __FlashLen=0x00000000
[20:52:44.928]    __FlashArg=0x00000000
[20:52:44.928]    __FlashOp=0x00000000
[20:52:44.928]    __Result=0x00000000
[20:52:44.930]  </debugvars>
[20:52:44.930]  
[20:52:44.930]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:52:44.930]    <block atomic="false" info="">
[20:52:44.930]      __var SW_DP_ABORT       = 0x0;
[20:52:44.930]        // -> [SW_DP_ABORT <= 0x00000000]
[20:52:44.930]      __var DP_CTRL_STAT      = 0x4;
[20:52:44.930]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:52:44.931]      __var DP_SELECT         = 0x8;
[20:52:44.931]        // -> [DP_SELECT <= 0x00000008]
[20:52:44.931]      __var powered_down      = 0;
[20:52:44.931]        // -> [powered_down <= 0x00000000]
[20:52:44.931]      WriteDP(DP_SELECT, 0x00000000);
[20:52:44.931]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:52:44.932]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:52:44.932]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:52:44.932]        // -> [powered_down <= 0x00000001]
[20:52:44.932]    </block>
[20:52:44.932]    <control if="powered_down" while="" timeout="0" info="">
[20:52:44.932]      // if-block "powered_down"
[20:52:44.932]        // =>  TRUE
[20:52:44.933]      <block atomic="false" info="">
[20:52:44.933]        Message(0, "Debug/System power-up request sent");
[20:52:44.935]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:52:44.936]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:52:44.936]      </block>
[20:52:44.936]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:52:44.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:52:44.937]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:52:44.937]        // while-condition  =>  FALSE
[20:52:44.937]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:52:44.937]      </control>
[20:52:44.937]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:52:44.937]        // if-block "(__protocol & 0xFFFF) == 1"
[20:52:44.937]          // =>  FALSE
[20:52:44.937]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:52:44.937]      </control>
[20:52:44.937]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:52:44.937]        // if-block "(__protocol & 0xFFFF) == 2"
[20:52:44.937]          // =>  TRUE
[20:52:44.937]        <block atomic="false" info="">
[20:52:44.937]          Message(0, "executing SWD power up");
[20:52:44.939]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:52:44.940]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:52:44.940]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:52:44.940]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:52:44.940]        </block>
[20:52:44.940]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:52:44.941]      </control>
[20:52:44.941]      // end if-block "powered_down"
[20:52:44.941]    </control>
[20:52:44.941]    <block atomic="false" info="">
[20:52:44.941]      __var DEBUG_PORT_VAL    = 0;
[20:52:44.941]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:52:44.941]      __var ACCESS_POINT_VAL  = 0;
[20:52:44.941]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:52:44.941]      __ap = 1; 
[20:52:44.941]        // -> [__ap <= 0x00000001]
[20:52:44.942]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:52:44.944]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:52:44.944]      __ap = 4;
[20:52:44.944]        // -> [__ap <= 0x00000004]
[20:52:44.944]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:52:44.945]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:52:44.945]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:52:44.945]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:52:44.947]    </block>
[20:52:44.947]    <block atomic="false" info="">
[20:52:44.947]      __var nReset = 0x80;
[20:52:44.948]        // -> [nReset <= 0x00000080]
[20:52:44.948]      __var canReadPins = 0;
[20:52:44.948]        // -> [canReadPins <= 0x00000000]
[20:52:44.948]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:52:44.948]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:52:44.948]        // -> [canReadPins <= 0x00000001]
[20:52:44.949]    </block>
[20:52:44.949]    <control if="" while="1" timeout="200" info="">
[20:52:44.949]      // while "1"  (timeout="200")
[20:52:44.949]      // while-condition  =>  TRUE
[20:52:44.949]      // while "1"  (timeout="200")
[20:52:44.949]      // while-condition  =>  TRUE
[20:52:44.949]      // while "1"  (timeout="200")
[20:52:44.949]      // while-condition  =>  TRUE
[20:52:44.949]      // while "1"  (timeout="200")
[20:52:44.949]      // while-condition  =>  TRUE
[20:52:44.949]      // while "1"  (timeout="200")
[20:52:44.949]      // while-condition  =>  TRUE
[20:52:44.949]      // while "1"  (timeout="200")
[20:52:44.949]      // while-condition  =>  TRUE
[20:52:44.949]      // while "1"  (timeout="200")
[20:52:44.950]      // while-condition  =>  TRUE
[20:52:44.950]      // while "1"  (timeout="200")
[20:52:44.950]      // while-condition  =>  TRUE
[20:52:44.950]      // while "1"  (timeout="200")
[20:52:44.950]      // while-condition  =>  TRUE
[20:52:44.950]      // while "1"  (timeout="200")
[20:52:44.950]      // while-condition  =>  TRUE
[20:52:44.950]      // while "1"  (timeout="200")
[20:52:44.950]      // while-condition  =>  TRUE
[20:52:44.950]      // while "1"  (timeout="200")
[20:52:44.951]      // while-condition  =>  TRUE
[20:52:44.951]      // while "1"  (timeout="200")
[20:52:44.951]      // while-condition  =>  TRUE
[20:52:44.951]      // while "1"  (timeout="200")
[20:52:44.951]      // while-condition  =>  TRUE
[20:52:44.951]      // while "1"  (timeout="200")
[20:52:44.951]      // while-condition  =>  TRUE
[20:52:44.951]      // while "1"  (timeout="200")
[20:52:44.951]      // while-condition  =>  TRUE
[20:52:44.951]      // while "1"  (timeout="200")
[20:52:44.951]      // while-condition  =>  TRUE
[20:52:44.952]      // while "1"  (timeout="200")
[20:52:44.952]      // while-condition  =>  TRUE
[20:52:44.952]      // while "1"  (timeout="200")
[20:52:44.952]      // while-condition  =>  TRUE
[20:52:44.952]      // while "1"  (timeout="200")
[20:52:44.952]      // while-condition  =>  TRUE
[20:52:44.952]      // while "1"  (timeout="200")
[20:52:44.952]      // while-condition  =>  TRUE
[20:52:44.952]      // while "1"  (timeout="200")
[20:52:44.952]      // while-condition  =>  TRUE
[20:52:44.953]      // while "1"  (timeout="200")
[20:52:44.953]      // while-condition  =>  TRUE
[20:52:44.953]      // while "1"  (timeout="200")
[20:52:44.953]      // while-condition  =>  TRUE
[20:52:44.953]      // while "1"  (timeout="200")
[20:52:44.953]      // while-condition  =>  TRUE
[20:52:44.953]      // while "1"  (timeout="200")
[20:52:44.953]      // while-condition  =>  TRUE
[20:52:44.954]      // while "1"  (timeout="200")
[20:52:44.954]      // while-condition  =>  TRUE
[20:52:44.954]      // while "1"  (timeout="200")
[20:52:44.954]      // while-condition  =>  TRUE
[20:52:44.954]      // while "1"  (timeout="200")
[20:52:44.954]      // while-condition  =>  TRUE
[20:52:44.954]      // while "1"  (timeout="200")
[20:52:44.954]      // while-condition  =>  TRUE
[20:52:44.954]      // while "1"  (timeout="200")
[20:52:44.954]      // while-condition  =>  TRUE
[20:52:44.955]      // while "1"  (timeout="200")
[20:52:44.955]      // while-condition  =>  TRUE
[20:52:44.955]      // while "1"  (timeout="200")
[20:52:44.955]      // while-condition  =>  TRUE
[20:52:44.955]      // while "1"  (timeout="200")
[20:52:44.955]      // while-condition  =>  TRUE
[20:52:44.955]      // while "1"  (timeout="200")
[20:52:44.956]      // while-condition  =>  TRUE
[20:52:44.956]      // while "1"  (timeout="200")
[20:52:44.956]      // while  =>  TIMEOUT
[20:52:44.956]      // end while "1"
[20:52:44.956]    </control>
[20:52:44.956]    <control if="canReadPins" while="" timeout="0" info="">
[20:52:44.956]      // if-block "canReadPins"
[20:52:44.956]        // =>  TRUE
[20:52:44.956]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:52:44.956]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:52:44.957]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:52:44.957]        // while-condition  =>  FALSE
[20:52:44.957]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:52:44.957]      </control>
[20:52:44.957]      // end if-block "canReadPins"
[20:52:44.958]    </control>
[20:52:44.958]    <control if="!canReadPins" while="" timeout="0" info="">
[20:52:44.958]      // if-block "!canReadPins"
[20:52:44.958]        // =>  FALSE
[20:52:44.958]      // skip if-block "!canReadPins"
[20:52:44.959]    </control>
[20:52:44.959]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:52:44.959]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:52:44.959]        // =>  TRUE
[20:52:44.959]      <block atomic="false" info="">
[20:52:44.959]        WriteAP(0x00, 0x190008);
[20:52:44.959]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:52:44.959]        WriteAP(0xF0, 0x01);
[20:52:44.960]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:52:44.960]      </block>
[20:52:44.960]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:52:44.960]    </control>
[20:52:44.960]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:52:44.961]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:52:44.961]        // =>  FALSE
[20:52:44.961]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:52:44.961]    </control>
[20:52:44.961]    <block atomic="false" info="">
[20:52:44.961]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:52:44.963]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:52:44.963]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:52:44.963]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:52:44.965]      __ap = 0; //lets make sure we reset the access point selection
[20:52:44.965]        // -> [__ap <= 0x00000000]
[20:52:44.965]    </block>
[20:52:44.965]  </sequence>
[20:52:44.965]  
[20:52:44.971]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:52:44.971]  
[20:52:44.971]  <debugvars>
[20:52:44.971]    // Pre-defined
[20:52:44.971]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:52:44.971]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:52:44.971]    __dp=0x00000000
[20:52:44.971]    __ap=0x00000000
[20:52:44.971]    __traceout=0x00000000      (Trace Disabled)
[20:52:44.971]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:52:44.971]    __FlashAddr=0x00000000
[20:52:44.972]    __FlashLen=0x00000000
[20:52:44.972]    __FlashArg=0x00000000
[20:52:44.972]    __FlashOp=0x00000000
[20:52:44.972]    __Result=0x00000000
[20:52:44.972]  </debugvars>
[20:52:44.972]  
[20:52:44.972]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:52:44.972]    <block atomic="false" info="">
[20:52:44.972]      __var deviceID = 0;
[20:52:44.972]        // -> [deviceID <= 0x00000000]
[20:52:44.972]      __var version = 0;
[20:52:44.972]        // -> [version <= 0x00000000]
[20:52:44.973]      __var partNum = 0;
[20:52:44.973]        // -> [partNum <= 0x00000000]
[20:52:44.973]      __var manuf = 0;
[20:52:44.973]        // -> [manuf <= 0x00000000]
[20:52:44.973]      __var isMSPM0G1X0X_G3X0X = 0;
[20:52:44.973]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:52:44.973]      __var isProduction = 0;
[20:52:44.973]        // -> [isProduction <= 0x00000000]
[20:52:44.973]      __var continueId = 0;
[20:52:44.973]        // -> [continueId <= 0x00000000]
[20:52:44.973]      deviceID =   Read32(0x41C40004);
[20:52:44.975]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:52:44.975]        // -> [deviceID <= 0x2BB8802F]
[20:52:44.975]      version = deviceID >> 28;
[20:52:44.975]        // -> [version <= 0x00000002]
[20:52:44.975]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:52:44.975]        // -> [partNum <= 0x0000BB88]
[20:52:44.976]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:52:44.976]        // -> [manuf <= 0x00000017]
[20:52:44.976]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:52:44.976]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:52:44.976]      isProduction = (version > 0);
[20:52:44.976]        // -> [isProduction <= 0x00000001]
[20:52:44.977]    </block>
[20:52:44.977]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:52:44.977]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:52:44.977]        // =>  FALSE
[20:52:44.977]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:52:44.978]    </control>
[20:52:44.978]    <control if="continueId == 4" while="" timeout="0" info="">
[20:52:44.978]      // if-block "continueId == 4"
[20:52:44.978]        // =>  FALSE
[20:52:44.978]      // skip if-block "continueId == 4"
[20:52:44.978]    </control>
[20:52:44.978]    <control if="!isProduction" while="" timeout="0" info="">
[20:52:44.978]      // if-block "!isProduction"
[20:52:44.979]        // =>  FALSE
[20:52:44.979]      // skip if-block "!isProduction"
[20:52:44.979]    </control>
[20:52:44.979]  </sequence>
[20:52:44.979]  
[20:53:07.402]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:53:07.402]  
[20:53:07.411]  <debugvars>
[20:53:07.411]    // Pre-defined
[20:53:07.411]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:53:07.411]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:53:07.411]    __dp=0x00000000
[20:53:07.411]    __ap=0x00000000
[20:53:07.411]    __traceout=0x00000000      (Trace Disabled)
[20:53:07.411]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:53:07.411]    __FlashAddr=0x00000000
[20:53:07.411]    __FlashLen=0x00000000
[20:53:07.412]    __FlashArg=0x00000000
[20:53:07.412]    __FlashOp=0x00000000
[20:53:07.412]    __Result=0x00000000
[20:53:07.412]  </debugvars>
[20:53:07.412]  
[20:53:07.412]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:53:07.412]    <block atomic="false" info="">
[20:53:07.412]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:53:07.412]        // -> [isSWJ <= 0x00000001]
[20:53:07.413]      __var hasDormant = __protocol & 0x00020000;
[20:53:07.413]        // -> [hasDormant <= 0x00000000]
[20:53:07.413]      __var protType   = __protocol & 0x0000FFFF;
[20:53:07.413]        // -> [protType <= 0x00000002]
[20:53:07.413]    </block>
[20:53:07.413]    <control if="protType == 1" while="" timeout="0" info="">
[20:53:07.413]      // if-block "protType == 1"
[20:53:07.413]        // =>  FALSE
[20:53:07.413]      // skip if-block "protType == 1"
[20:53:07.413]    </control>
[20:53:07.413]    <control if="protType == 2" while="" timeout="0" info="">
[20:53:07.414]      // if-block "protType == 2"
[20:53:07.414]        // =>  TRUE
[20:53:07.414]      <control if="isSWJ" while="" timeout="0" info="">
[20:53:07.414]        // if-block "isSWJ"
[20:53:07.414]          // =>  TRUE
[20:53:07.414]        <control if="hasDormant" while="" timeout="0" info="">
[20:53:07.414]          // if-block "hasDormant"
[20:53:07.414]            // =>  FALSE
[20:53:07.414]          // skip if-block "hasDormant"
[20:53:07.414]        </control>
[20:53:07.414]        <control if="!hasDormant" while="" timeout="0" info="">
[20:53:07.415]          // if-block "!hasDormant"
[20:53:07.415]            // =>  TRUE
[20:53:07.415]          <block atomic="false" info="">
[20:53:07.416]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:53:07.416]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:53:07.416]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:53:07.416]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:53:07.416]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:53:07.416]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:53:07.416]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:53:07.417]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:53:07.417]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:53:07.417]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:53:07.417]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:53:07.418]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:53:07.418]          </block>
[20:53:07.418]          // end if-block "!hasDormant"
[20:53:07.418]        </control>
[20:53:07.418]        // end if-block "isSWJ"
[20:53:07.418]      </control>
[20:53:07.418]      <control if="!isSWJ" while="" timeout="0" info="">
[20:53:07.418]        // if-block "!isSWJ"
[20:53:07.418]          // =>  FALSE
[20:53:07.418]        // skip if-block "!isSWJ"
[20:53:07.419]      </control>
[20:53:07.419]      <block atomic="false" info="">
[20:53:07.419]        ReadDP(0x0);
[20:53:07.419]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:53:07.419]      </block>
[20:53:07.419]      // end if-block "protType == 2"
[20:53:07.419]    </control>
[20:53:07.419]  </sequence>
[20:53:07.420]  
[20:53:07.420]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:53:07.420]  
[20:53:07.420]  <debugvars>
[20:53:07.420]    // Pre-defined
[20:53:07.420]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:53:07.421]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:53:07.421]    __dp=0x00000000
[20:53:07.421]    __ap=0x00000000
[20:53:07.421]    __traceout=0x00000000      (Trace Disabled)
[20:53:07.421]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:53:07.421]    __FlashAddr=0x00000000
[20:53:07.421]    __FlashLen=0x00000000
[20:53:07.421]    __FlashArg=0x00000000
[20:53:07.421]    __FlashOp=0x00000000
[20:53:07.421]    __Result=0x00000000
[20:53:07.422]  </debugvars>
[20:53:07.422]  
[20:53:07.422]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:53:07.422]    <block atomic="false" info="">
[20:53:07.422]      __var SW_DP_ABORT       = 0x0;
[20:53:07.422]        // -> [SW_DP_ABORT <= 0x00000000]
[20:53:07.422]      __var DP_CTRL_STAT      = 0x4;
[20:53:07.422]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:53:07.422]      __var DP_SELECT         = 0x8;
[20:53:07.422]        // -> [DP_SELECT <= 0x00000008]
[20:53:07.422]      __var powered_down      = 0;
[20:53:07.423]        // -> [powered_down <= 0x00000000]
[20:53:07.423]      WriteDP(DP_SELECT, 0x00000000);
[20:53:07.423]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:53:07.423]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:53:07.424]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:53:07.424]        // -> [powered_down <= 0x00000001]
[20:53:07.424]    </block>
[20:53:07.424]    <control if="powered_down" while="" timeout="0" info="">
[20:53:07.424]      // if-block "powered_down"
[20:53:07.424]        // =>  TRUE
[20:53:07.424]      <block atomic="false" info="">
[20:53:07.424]        Message(0, "Debug/System power-up request sent");
[20:53:07.428]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:53:07.429]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:53:07.429]      </block>
[20:53:07.430]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:53:07.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:53:07.430]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:53:07.430]        // while-condition  =>  FALSE
[20:53:07.430]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:53:07.431]      </control>
[20:53:07.431]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:53:07.431]        // if-block "(__protocol & 0xFFFF) == 1"
[20:53:07.431]          // =>  FALSE
[20:53:07.431]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:53:07.431]      </control>
[20:53:07.431]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:53:07.431]        // if-block "(__protocol & 0xFFFF) == 2"
[20:53:07.431]          // =>  TRUE
[20:53:07.431]        <block atomic="false" info="">
[20:53:07.432]          Message(0, "executing SWD power up");
[20:53:07.433]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:53:07.434]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:53:07.434]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:53:07.434]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:53:07.434]        </block>
[20:53:07.434]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:53:07.435]      </control>
[20:53:07.435]      // end if-block "powered_down"
[20:53:07.435]    </control>
[20:53:07.435]    <block atomic="false" info="">
[20:53:07.435]      __var DEBUG_PORT_VAL    = 0;
[20:53:07.435]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:53:07.435]      __var ACCESS_POINT_VAL  = 0;
[20:53:07.435]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:53:07.435]      __ap = 1; 
[20:53:07.436]        // -> [__ap <= 0x00000001]
[20:53:07.436]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:53:07.437]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:53:07.437]      __ap = 4;
[20:53:07.437]        // -> [__ap <= 0x00000004]
[20:53:07.437]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:53:07.439]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:53:07.439]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:53:07.439]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:53:07.440]    </block>
[20:53:07.440]    <block atomic="false" info="">
[20:53:07.440]      __var nReset = 0x80;
[20:53:07.441]        // -> [nReset <= 0x00000080]
[20:53:07.441]      __var canReadPins = 0;
[20:53:07.441]        // -> [canReadPins <= 0x00000000]
[20:53:07.441]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:53:07.441]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:53:07.441]        // -> [canReadPins <= 0x00000001]
[20:53:07.441]    </block>
[20:53:07.441]    <control if="" while="1" timeout="200" info="">
[20:53:07.442]      // while "1"  (timeout="200")
[20:53:07.442]      // while-condition  =>  TRUE
[20:53:07.442]      // while "1"  (timeout="200")
[20:53:07.442]      // while-condition  =>  TRUE
[20:53:07.442]      // while "1"  (timeout="200")
[20:53:07.442]      // while-condition  =>  TRUE
[20:53:07.442]      // while "1"  (timeout="200")
[20:53:07.442]      // while-condition  =>  TRUE
[20:53:07.442]      // while "1"  (timeout="200")
[20:53:07.442]      // while-condition  =>  TRUE
[20:53:07.442]      // while "1"  (timeout="200")
[20:53:07.442]      // while-condition  =>  TRUE
[20:53:07.443]      // while "1"  (timeout="200")
[20:53:07.443]      // while-condition  =>  TRUE
[20:53:07.443]      // while "1"  (timeout="200")
[20:53:07.443]      // while-condition  =>  TRUE
[20:53:07.443]      // while "1"  (timeout="200")
[20:53:07.443]      // while-condition  =>  TRUE
[20:53:07.443]      // while "1"  (timeout="200")
[20:53:07.444]      // while-condition  =>  TRUE
[20:53:07.444]      // while "1"  (timeout="200")
[20:53:07.444]      // while-condition  =>  TRUE
[20:53:07.444]      // while "1"  (timeout="200")
[20:53:07.444]      // while-condition  =>  TRUE
[20:53:07.444]      // while "1"  (timeout="200")
[20:53:07.444]      // while-condition  =>  TRUE
[20:53:07.444]      // while "1"  (timeout="200")
[20:53:07.444]      // while-condition  =>  TRUE
[20:53:07.445]      // while "1"  (timeout="200")
[20:53:07.445]      // while-condition  =>  TRUE
[20:53:07.445]      // while "1"  (timeout="200")
[20:53:07.445]      // while-condition  =>  TRUE
[20:53:07.445]      // while "1"  (timeout="200")
[20:53:07.445]      // while-condition  =>  TRUE
[20:53:07.446]      // while "1"  (timeout="200")
[20:53:07.446]      // while-condition  =>  TRUE
[20:53:07.446]      // while "1"  (timeout="200")
[20:53:07.446]      // while-condition  =>  TRUE
[20:53:07.446]      // while "1"  (timeout="200")
[20:53:07.446]      // while-condition  =>  TRUE
[20:53:07.447]      // while "1"  (timeout="200")
[20:53:07.447]      // while-condition  =>  TRUE
[20:53:07.447]      // while "1"  (timeout="200")
[20:53:07.447]      // while-condition  =>  TRUE
[20:53:07.447]      // while "1"  (timeout="200")
[20:53:07.447]      // while-condition  =>  TRUE
[20:53:07.447]      // while "1"  (timeout="200")
[20:53:07.447]      // while-condition  =>  TRUE
[20:53:07.447]      // while "1"  (timeout="200")
[20:53:07.447]      // while-condition  =>  TRUE
[20:53:07.447]      // while "1"  (timeout="200")
[20:53:07.447]      // while-condition  =>  TRUE
[20:53:07.448]      // while "1"  (timeout="200")
[20:53:07.448]      // while-condition  =>  TRUE
[20:53:07.448]      // while "1"  (timeout="200")
[20:53:07.448]      // while-condition  =>  TRUE
[20:53:07.448]      // while "1"  (timeout="200")
[20:53:07.448]      // while-condition  =>  TRUE
[20:53:07.448]      // while "1"  (timeout="200")
[20:53:07.448]      // while-condition  =>  TRUE
[20:53:07.448]      // while "1"  (timeout="200")
[20:53:07.448]      // while-condition  =>  TRUE
[20:53:07.449]      // while "1"  (timeout="200")
[20:53:07.449]      // while-condition  =>  TRUE
[20:53:07.449]      // while "1"  (timeout="200")
[20:53:07.449]      // while-condition  =>  TRUE
[20:53:07.449]      // while "1"  (timeout="200")
[20:53:07.449]      // while-condition  =>  TRUE
[20:53:07.449]      // while "1"  (timeout="200")
[20:53:07.449]      // while-condition  =>  TRUE
[20:53:07.449]      // while "1"  (timeout="200")
[20:53:07.449]      // while-condition  =>  TRUE
[20:53:07.450]      // while "1"  (timeout="200")
[20:53:07.450]      // while-condition  =>  TRUE
[20:53:07.450]      // while "1"  (timeout="200")
[20:53:07.450]      // while-condition  =>  TRUE
[20:53:07.450]      // while "1"  (timeout="200")
[20:53:07.450]      // while-condition  =>  TRUE
[20:53:07.450]      // while "1"  (timeout="200")
[20:53:07.451]      // while-condition  =>  TRUE
[20:53:07.451]      // while "1"  (timeout="200")
[20:53:07.451]      // while-condition  =>  TRUE
[20:53:07.451]      // while "1"  (timeout="200")
[20:53:07.451]      // while-condition  =>  TRUE
[20:53:07.451]      // while "1"  (timeout="200")
[20:53:07.451]      // while-condition  =>  TRUE
[20:53:07.451]      // while "1"  (timeout="200")
[20:53:07.451]      // while-condition  =>  TRUE
[20:53:07.452]      // while "1"  (timeout="200")
[20:53:07.452]      // while-condition  =>  TRUE
[20:53:07.452]      // while "1"  (timeout="200")
[20:53:07.452]      // while-condition  =>  TRUE
[20:53:07.452]      // while "1"  (timeout="200")
[20:53:07.452]      // while-condition  =>  TRUE
[20:53:07.452]      // while "1"  (timeout="200")
[20:53:07.452]      // while-condition  =>  TRUE
[20:53:07.452]      // while "1"  (timeout="200")
[20:53:07.452]      // while-condition  =>  TRUE
[20:53:07.452]      // while "1"  (timeout="200")
[20:53:07.453]      // while-condition  =>  TRUE
[20:53:07.453]      // while "1"  (timeout="200")
[20:53:07.453]      // while-condition  =>  TRUE
[20:53:07.453]      // while "1"  (timeout="200")
[20:53:07.453]      // while-condition  =>  TRUE
[20:53:07.453]      // while "1"  (timeout="200")
[20:53:07.453]      // while-condition  =>  TRUE
[20:53:07.453]      // while "1"  (timeout="200")
[20:53:07.453]      // while-condition  =>  TRUE
[20:53:07.453]      // while "1"  (timeout="200")
[20:53:07.453]      // while-condition  =>  TRUE
[20:53:07.454]      // while "1"  (timeout="200")
[20:53:07.454]      // while-condition  =>  TRUE
[20:53:07.454]      // while "1"  (timeout="200")
[20:53:07.454]      // while-condition  =>  TRUE
[20:53:07.454]      // while "1"  (timeout="200")
[20:53:07.454]      // while-condition  =>  TRUE
[20:53:07.454]      // while "1"  (timeout="200")
[20:53:07.454]      // while-condition  =>  TRUE
[20:53:07.454]      // while "1"  (timeout="200")
[20:53:07.454]      // while-condition  =>  TRUE
[20:53:07.455]      // while "1"  (timeout="200")
[20:53:07.455]      // while  =>  TIMEOUT
[20:53:07.455]      // end while "1"
[20:53:07.455]    </control>
[20:53:07.455]    <control if="canReadPins" while="" timeout="0" info="">
[20:53:07.455]      // if-block "canReadPins"
[20:53:07.455]        // =>  TRUE
[20:53:07.455]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:53:07.456]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:53:07.456]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:53:07.456]        // while-condition  =>  FALSE
[20:53:07.456]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:53:07.456]      </control>
[20:53:07.456]      // end if-block "canReadPins"
[20:53:07.456]    </control>
[20:53:07.457]    <control if="!canReadPins" while="" timeout="0" info="">
[20:53:07.457]      // if-block "!canReadPins"
[20:53:07.457]        // =>  FALSE
[20:53:07.457]      // skip if-block "!canReadPins"
[20:53:07.457]    </control>
[20:53:07.457]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:53:07.457]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:53:07.457]        // =>  TRUE
[20:53:07.457]      <block atomic="false" info="">
[20:53:07.457]        WriteAP(0x00, 0x190008);
[20:53:07.458]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:53:07.458]        WriteAP(0xF0, 0x01);
[20:53:07.459]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:53:07.459]      </block>
[20:53:07.459]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:53:07.460]    </control>
[20:53:07.460]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:53:07.460]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:53:07.460]        // =>  FALSE
[20:53:07.460]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:53:07.460]    </control>
[20:53:07.460]    <block atomic="false" info="">
[20:53:07.460]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:53:07.462]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:53:07.462]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:53:07.462]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:53:07.463]      __ap = 0; //lets make sure we reset the access point selection
[20:53:07.463]        // -> [__ap <= 0x00000000]
[20:53:07.463]    </block>
[20:53:07.465]  </sequence>
[20:53:07.465]  
[20:53:07.471]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:53:07.471]  
[20:53:07.471]  <debugvars>
[20:53:07.471]    // Pre-defined
[20:53:07.472]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:53:07.472]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:53:07.472]    __dp=0x00000000
[20:53:07.472]    __ap=0x00000000
[20:53:07.472]    __traceout=0x00000000      (Trace Disabled)
[20:53:07.473]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:53:07.473]    __FlashAddr=0x00000000
[20:53:07.473]    __FlashLen=0x00000000
[20:53:07.473]    __FlashArg=0x00000000
[20:53:07.473]    __FlashOp=0x00000000
[20:53:07.473]    __Result=0x00000000
[20:53:07.473]  </debugvars>
[20:53:07.473]  
[20:53:07.473]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:53:07.473]    <block atomic="false" info="">
[20:53:07.473]      __var deviceID = 0;
[20:53:07.474]        // -> [deviceID <= 0x00000000]
[20:53:07.474]      __var version = 0;
[20:53:07.474]        // -> [version <= 0x00000000]
[20:53:07.474]      __var partNum = 0;
[20:53:07.474]        // -> [partNum <= 0x00000000]
[20:53:07.474]      __var manuf = 0;
[20:53:07.474]        // -> [manuf <= 0x00000000]
[20:53:07.474]      __var isMSPM0G1X0X_G3X0X = 0;
[20:53:07.474]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:53:07.474]      __var isProduction = 0;
[20:53:07.475]        // -> [isProduction <= 0x00000000]
[20:53:07.475]      __var continueId = 0;
[20:53:07.475]        // -> [continueId <= 0x00000000]
[20:53:07.475]      deviceID =   Read32(0x41C40004);
[20:53:07.476]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:53:07.476]        // -> [deviceID <= 0x2BB8802F]
[20:53:07.476]      version = deviceID >> 28;
[20:53:07.477]        // -> [version <= 0x00000002]
[20:53:07.477]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:53:07.477]        // -> [partNum <= 0x0000BB88]
[20:53:07.477]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:53:07.477]        // -> [manuf <= 0x00000017]
[20:53:07.477]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:53:07.477]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:53:07.477]      isProduction = (version > 0);
[20:53:07.478]        // -> [isProduction <= 0x00000001]
[20:53:07.478]    </block>
[20:53:07.478]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:53:07.478]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:53:07.478]        // =>  FALSE
[20:53:07.478]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:53:07.478]    </control>
[20:53:07.479]    <control if="continueId == 4" while="" timeout="0" info="">
[20:53:07.479]      // if-block "continueId == 4"
[20:53:07.479]        // =>  FALSE
[20:53:07.479]      // skip if-block "continueId == 4"
[20:53:07.479]    </control>
[20:53:07.480]    <control if="!isProduction" while="" timeout="0" info="">
[20:53:07.480]      // if-block "!isProduction"
[20:53:07.480]        // =>  FALSE
[20:53:07.480]      // skip if-block "!isProduction"
[20:53:07.480]    </control>
[20:53:07.480]  </sequence>
[20:53:07.480]  
[20:55:24.127]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:55:24.127]  
[20:55:24.135]  <debugvars>
[20:55:24.135]    // Pre-defined
[20:55:24.135]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:24.136]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:24.136]    __dp=0x00000000
[20:55:24.136]    __ap=0x00000000
[20:55:24.136]    __traceout=0x00000000      (Trace Disabled)
[20:55:24.136]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:24.136]    __FlashAddr=0x00000000
[20:55:24.136]    __FlashLen=0x00000000
[20:55:24.136]    __FlashArg=0x00000000
[20:55:24.136]    __FlashOp=0x00000000
[20:55:24.137]    __Result=0x00000000
[20:55:24.137]  </debugvars>
[20:55:24.137]  
[20:55:24.137]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:55:24.137]    <block atomic="false" info="">
[20:55:24.137]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:55:24.137]        // -> [isSWJ <= 0x00000001]
[20:55:24.137]      __var hasDormant = __protocol & 0x00020000;
[20:55:24.137]        // -> [hasDormant <= 0x00000000]
[20:55:24.137]      __var protType   = __protocol & 0x0000FFFF;
[20:55:24.137]        // -> [protType <= 0x00000002]
[20:55:24.138]    </block>
[20:55:24.138]    <control if="protType == 1" while="" timeout="0" info="">
[20:55:24.138]      // if-block "protType == 1"
[20:55:24.138]        // =>  FALSE
[20:55:24.138]      // skip if-block "protType == 1"
[20:55:24.138]    </control>
[20:55:24.138]    <control if="protType == 2" while="" timeout="0" info="">
[20:55:24.138]      // if-block "protType == 2"
[20:55:24.138]        // =>  TRUE
[20:55:24.138]      <control if="isSWJ" while="" timeout="0" info="">
[20:55:24.138]        // if-block "isSWJ"
[20:55:24.138]          // =>  TRUE
[20:55:24.138]        <control if="hasDormant" while="" timeout="0" info="">
[20:55:24.138]          // if-block "hasDormant"
[20:55:24.138]            // =>  FALSE
[20:55:24.138]          // skip if-block "hasDormant"
[20:55:24.138]        </control>
[20:55:24.138]        <control if="!hasDormant" while="" timeout="0" info="">
[20:55:24.138]          // if-block "!hasDormant"
[20:55:24.140]            // =>  TRUE
[20:55:24.140]          <block atomic="false" info="">
[20:55:24.140]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:55:24.140]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:24.140]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:55:24.141]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:55:24.141]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:55:24.141]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:24.141]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:55:24.141]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:55:24.141]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:55:24.142]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:24.142]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:55:24.142]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:55:24.142]          </block>
[20:55:24.142]          // end if-block "!hasDormant"
[20:55:24.142]        </control>
[20:55:24.143]        // end if-block "isSWJ"
[20:55:24.143]      </control>
[20:55:24.143]      <control if="!isSWJ" while="" timeout="0" info="">
[20:55:24.143]        // if-block "!isSWJ"
[20:55:24.143]          // =>  FALSE
[20:55:24.143]        // skip if-block "!isSWJ"
[20:55:24.143]      </control>
[20:55:24.143]      <block atomic="false" info="">
[20:55:24.143]        ReadDP(0x0);
[20:55:24.144]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:55:24.144]      </block>
[20:55:24.144]      // end if-block "protType == 2"
[20:55:24.144]    </control>
[20:55:24.144]  </sequence>
[20:55:24.144]  
[20:55:24.145]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:55:24.145]  
[20:55:24.145]  <debugvars>
[20:55:24.145]    // Pre-defined
[20:55:24.145]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:24.145]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:24.145]    __dp=0x00000000
[20:55:24.145]    __ap=0x00000000
[20:55:24.145]    __traceout=0x00000000      (Trace Disabled)
[20:55:24.145]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:24.145]    __FlashAddr=0x00000000
[20:55:24.145]    __FlashLen=0x00000000
[20:55:24.145]    __FlashArg=0x00000000
[20:55:24.145]    __FlashOp=0x00000000
[20:55:24.145]    __Result=0x00000000
[20:55:24.145]  </debugvars>
[20:55:24.146]  
[20:55:24.146]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:55:24.146]    <block atomic="false" info="">
[20:55:24.146]      __var SW_DP_ABORT       = 0x0;
[20:55:24.146]        // -> [SW_DP_ABORT <= 0x00000000]
[20:55:24.146]      __var DP_CTRL_STAT      = 0x4;
[20:55:24.146]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:55:24.146]      __var DP_SELECT         = 0x8;
[20:55:24.146]        // -> [DP_SELECT <= 0x00000008]
[20:55:24.146]      __var powered_down      = 0;
[20:55:24.148]        // -> [powered_down <= 0x00000000]
[20:55:24.148]      WriteDP(DP_SELECT, 0x00000000);
[20:55:24.148]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:55:24.148]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:55:24.149]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:55:24.149]        // -> [powered_down <= 0x00000001]
[20:55:24.149]    </block>
[20:55:24.149]    <control if="powered_down" while="" timeout="0" info="">
[20:55:24.149]      // if-block "powered_down"
[20:55:24.149]        // =>  TRUE
[20:55:24.149]      <block atomic="false" info="">
[20:55:24.149]        Message(0, "Debug/System power-up request sent");
[20:55:24.150]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:55:24.151]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:55:24.151]      </block>
[20:55:24.151]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:55:24.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:55:24.151]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:55:24.151]        // while-condition  =>  FALSE
[20:55:24.151]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:55:24.152]      </control>
[20:55:24.152]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:55:24.152]        // if-block "(__protocol & 0xFFFF) == 1"
[20:55:24.152]          // =>  FALSE
[20:55:24.152]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:55:24.152]      </control>
[20:55:24.152]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:55:24.152]        // if-block "(__protocol & 0xFFFF) == 2"
[20:55:24.152]          // =>  TRUE
[20:55:24.152]        <block atomic="false" info="">
[20:55:24.152]          Message(0, "executing SWD power up");
[20:55:24.155]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:55:24.156]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:55:24.156]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:55:24.157]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:55:24.157]        </block>
[20:55:24.157]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:55:24.157]      </control>
[20:55:24.157]      // end if-block "powered_down"
[20:55:24.157]    </control>
[20:55:24.157]    <block atomic="false" info="">
[20:55:24.157]      __var DEBUG_PORT_VAL    = 0;
[20:55:24.157]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:55:24.157]      __var ACCESS_POINT_VAL  = 0;
[20:55:24.157]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:55:24.157]      __ap = 1; 
[20:55:24.158]        // -> [__ap <= 0x00000001]
[20:55:24.158]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:55:24.159]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:55:24.159]      __ap = 4;
[20:55:24.159]        // -> [__ap <= 0x00000004]
[20:55:24.159]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:55:24.160]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:55:24.160]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:55:24.160]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:55:24.162]    </block>
[20:55:24.162]    <block atomic="false" info="">
[20:55:24.162]      __var nReset = 0x80;
[20:55:24.162]        // -> [nReset <= 0x00000080]
[20:55:24.162]      __var canReadPins = 0;
[20:55:24.162]        // -> [canReadPins <= 0x00000000]
[20:55:24.162]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:55:24.164]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:55:24.164]        // -> [canReadPins <= 0x00000001]
[20:55:24.164]    </block>
[20:55:24.164]    <control if="" while="1" timeout="200" info="">
[20:55:24.164]      // while "1"  (timeout="200")
[20:55:24.164]      // while-condition  =>  TRUE
[20:55:24.164]      // while "1"  (timeout="200")
[20:55:24.164]      // while-condition  =>  TRUE
[20:55:24.164]      // while "1"  (timeout="200")
[20:55:24.164]      // while-condition  =>  TRUE
[20:55:24.164]      // while "1"  (timeout="200")
[20:55:24.164]      // while-condition  =>  TRUE
[20:55:24.164]      // while "1"  (timeout="200")
[20:55:24.165]      // while-condition  =>  TRUE
[20:55:24.165]      // while "1"  (timeout="200")
[20:55:24.165]      // while-condition  =>  TRUE
[20:55:24.165]      // while "1"  (timeout="200")
[20:55:24.165]      // while-condition  =>  TRUE
[20:55:24.165]      // while "1"  (timeout="200")
[20:55:24.165]      // while-condition  =>  TRUE
[20:55:24.165]      // while "1"  (timeout="200")
[20:55:24.165]      // while-condition  =>  TRUE
[20:55:24.165]      // while "1"  (timeout="200")
[20:55:24.165]      // while-condition  =>  TRUE
[20:55:24.166]      // while "1"  (timeout="200")
[20:55:24.166]      // while-condition  =>  TRUE
[20:55:24.166]      // while "1"  (timeout="200")
[20:55:24.166]      // while-condition  =>  TRUE
[20:55:24.166]      // while "1"  (timeout="200")
[20:55:24.166]      // while-condition  =>  TRUE
[20:55:24.166]      // while "1"  (timeout="200")
[20:55:24.166]      // while-condition  =>  TRUE
[20:55:24.166]      // while "1"  (timeout="200")
[20:55:24.166]      // while-condition  =>  TRUE
[20:55:24.166]      // while "1"  (timeout="200")
[20:55:24.166]      // while-condition  =>  TRUE
[20:55:24.167]      // while "1"  (timeout="200")
[20:55:24.167]      // while-condition  =>  TRUE
[20:55:24.167]      // while "1"  (timeout="200")
[20:55:24.167]      // while-condition  =>  TRUE
[20:55:24.167]      // while "1"  (timeout="200")
[20:55:24.167]      // while-condition  =>  TRUE
[20:55:24.167]      // while "1"  (timeout="200")
[20:55:24.167]      // while-condition  =>  TRUE
[20:55:24.167]      // while "1"  (timeout="200")
[20:55:24.167]      // while-condition  =>  TRUE
[20:55:24.167]      // while "1"  (timeout="200")
[20:55:24.167]      // while-condition  =>  TRUE
[20:55:24.168]      // while "1"  (timeout="200")
[20:55:24.168]      // while-condition  =>  TRUE
[20:55:24.168]      // while "1"  (timeout="200")
[20:55:24.168]      // while-condition  =>  TRUE
[20:55:24.168]      // while "1"  (timeout="200")
[20:55:24.168]      // while-condition  =>  TRUE
[20:55:24.168]      // while "1"  (timeout="200")
[20:55:24.168]      // while-condition  =>  TRUE
[20:55:24.168]      // while "1"  (timeout="200")
[20:55:24.168]      // while-condition  =>  TRUE
[20:55:24.168]      // while "1"  (timeout="200")
[20:55:24.168]      // while-condition  =>  TRUE
[20:55:24.169]      // while "1"  (timeout="200")
[20:55:24.169]      // while-condition  =>  TRUE
[20:55:24.169]      // while "1"  (timeout="200")
[20:55:24.169]      // while-condition  =>  TRUE
[20:55:24.169]      // while "1"  (timeout="200")
[20:55:24.169]      // while-condition  =>  TRUE
[20:55:24.169]      // while "1"  (timeout="200")
[20:55:24.169]      // while-condition  =>  TRUE
[20:55:24.169]      // while "1"  (timeout="200")
[20:55:24.169]      // while-condition  =>  TRUE
[20:55:24.169]      // while "1"  (timeout="200")
[20:55:24.169]      // while-condition  =>  TRUE
[20:55:24.170]      // while "1"  (timeout="200")
[20:55:24.170]      // while-condition  =>  TRUE
[20:55:24.170]      // while "1"  (timeout="200")
[20:55:24.170]      // while-condition  =>  TRUE
[20:55:24.170]      // while "1"  (timeout="200")
[20:55:24.170]      // while-condition  =>  TRUE
[20:55:24.170]      // while "1"  (timeout="200")
[20:55:24.170]      // while-condition  =>  TRUE
[20:55:24.170]      // while "1"  (timeout="200")
[20:55:24.170]      // while-condition  =>  TRUE
[20:55:24.170]      // while "1"  (timeout="200")
[20:55:24.171]      // while-condition  =>  TRUE
[20:55:24.171]      // while "1"  (timeout="200")
[20:55:24.171]      // while-condition  =>  TRUE
[20:55:24.171]      // while "1"  (timeout="200")
[20:55:24.171]      // while-condition  =>  TRUE
[20:55:24.171]      // while "1"  (timeout="200")
[20:55:24.171]      // while-condition  =>  TRUE
[20:55:24.171]      // while "1"  (timeout="200")
[20:55:24.171]      // while-condition  =>  TRUE
[20:55:24.171]      // while "1"  (timeout="200")
[20:55:24.171]      // while-condition  =>  TRUE
[20:55:24.171]      // while "1"  (timeout="200")
[20:55:24.172]      // while-condition  =>  TRUE
[20:55:24.172]      // while "1"  (timeout="200")
[20:55:24.172]      // while-condition  =>  TRUE
[20:55:24.172]      // while "1"  (timeout="200")
[20:55:24.172]      // while-condition  =>  TRUE
[20:55:24.172]      // while "1"  (timeout="200")
[20:55:24.172]      // while-condition  =>  TRUE
[20:55:24.172]      // while "1"  (timeout="200")
[20:55:24.172]      // while-condition  =>  TRUE
[20:55:24.172]      // while "1"  (timeout="200")
[20:55:24.172]      // while-condition  =>  TRUE
[20:55:24.173]      // while "1"  (timeout="200")
[20:55:24.173]      // while-condition  =>  TRUE
[20:55:24.173]      // while "1"  (timeout="200")
[20:55:24.173]      // while-condition  =>  TRUE
[20:55:24.173]      // while "1"  (timeout="200")
[20:55:24.173]      // while-condition  =>  TRUE
[20:55:24.173]      // while "1"  (timeout="200")
[20:55:24.173]      // while-condition  =>  TRUE
[20:55:24.173]      // while "1"  (timeout="200")
[20:55:24.173]      // while-condition  =>  TRUE
[20:55:24.173]      // while "1"  (timeout="200")
[20:55:24.173]      // while-condition  =>  TRUE
[20:55:24.174]      // while "1"  (timeout="200")
[20:55:24.174]      // while  =>  TIMEOUT
[20:55:24.174]      // end while "1"
[20:55:24.174]    </control>
[20:55:24.175]    <control if="canReadPins" while="" timeout="0" info="">
[20:55:24.175]      // if-block "canReadPins"
[20:55:24.175]        // =>  TRUE
[20:55:24.175]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:55:24.175]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:55:24.175]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:55:24.175]        // while-condition  =>  FALSE
[20:55:24.176]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:55:24.176]      </control>
[20:55:24.176]      // end if-block "canReadPins"
[20:55:24.176]    </control>
[20:55:24.176]    <control if="!canReadPins" while="" timeout="0" info="">
[20:55:24.176]      // if-block "!canReadPins"
[20:55:24.176]        // =>  FALSE
[20:55:24.176]      // skip if-block "!canReadPins"
[20:55:24.177]    </control>
[20:55:24.177]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:55:24.177]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:55:24.177]        // =>  TRUE
[20:55:24.177]      <block atomic="false" info="">
[20:55:24.177]        WriteAP(0x00, 0x190008);
[20:55:24.178]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:55:24.178]        WriteAP(0xF0, 0x01);
[20:55:24.179]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:55:24.180]      </block>
[20:55:24.180]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:55:24.180]    </control>
[20:55:24.180]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:55:24.180]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:55:24.180]        // =>  FALSE
[20:55:24.180]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:55:24.180]    </control>
[20:55:24.180]    <block atomic="false" info="">
[20:55:24.180]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:55:24.181]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:55:24.182]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:55:24.182]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:55:24.183]      __ap = 0; //lets make sure we reset the access point selection
[20:55:24.183]        // -> [__ap <= 0x00000000]
[20:55:24.183]    </block>
[20:55:24.184]  </sequence>
[20:55:24.184]  
[20:55:24.190]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:55:24.190]  
[20:55:24.190]  <debugvars>
[20:55:24.190]    // Pre-defined
[20:55:24.190]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:24.190]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:24.190]    __dp=0x00000000
[20:55:24.191]    __ap=0x00000000
[20:55:24.191]    __traceout=0x00000000      (Trace Disabled)
[20:55:24.191]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:24.191]    __FlashAddr=0x00000000
[20:55:24.191]    __FlashLen=0x00000000
[20:55:24.191]    __FlashArg=0x00000000
[20:55:24.191]    __FlashOp=0x00000000
[20:55:24.191]    __Result=0x00000000
[20:55:24.191]  </debugvars>
[20:55:24.191]  
[20:55:24.191]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:55:24.191]    <block atomic="false" info="">
[20:55:24.191]      __var deviceID = 0;
[20:55:24.191]        // -> [deviceID <= 0x00000000]
[20:55:24.191]      __var version = 0;
[20:55:24.191]        // -> [version <= 0x00000000]
[20:55:24.192]      __var partNum = 0;
[20:55:24.192]        // -> [partNum <= 0x00000000]
[20:55:24.192]      __var manuf = 0;
[20:55:24.192]        // -> [manuf <= 0x00000000]
[20:55:24.192]      __var isMSPM0G1X0X_G3X0X = 0;
[20:55:24.192]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:55:24.192]      __var isProduction = 0;
[20:55:24.192]        // -> [isProduction <= 0x00000000]
[20:55:24.192]      __var continueId = 0;
[20:55:24.192]        // -> [continueId <= 0x00000000]
[20:55:24.192]      deviceID =   Read32(0x41C40004);
[20:55:24.194]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:55:24.194]        // -> [deviceID <= 0x2BB8802F]
[20:55:24.194]      version = deviceID >> 28;
[20:55:24.194]        // -> [version <= 0x00000002]
[20:55:24.194]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:55:24.194]        // -> [partNum <= 0x0000BB88]
[20:55:24.194]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:55:24.194]        // -> [manuf <= 0x00000017]
[20:55:24.194]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:55:24.195]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:55:24.195]      isProduction = (version > 0);
[20:55:24.195]        // -> [isProduction <= 0x00000001]
[20:55:24.195]    </block>
[20:55:24.195]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:55:24.195]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:55:24.195]        // =>  FALSE
[20:55:24.195]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:55:24.195]    </control>
[20:55:24.195]    <control if="continueId == 4" while="" timeout="0" info="">
[20:55:24.195]      // if-block "continueId == 4"
[20:55:24.195]        // =>  FALSE
[20:55:24.196]      // skip if-block "continueId == 4"
[20:55:24.196]    </control>
[20:55:24.196]    <control if="!isProduction" while="" timeout="0" info="">
[20:55:24.196]      // if-block "!isProduction"
[20:55:24.196]        // =>  FALSE
[20:55:24.196]      // skip if-block "!isProduction"
[20:55:24.196]    </control>
[20:55:24.196]  </sequence>
[20:55:24.196]  
[21:04:08.290]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:04:08.290]  
[21:04:08.290]  <debugvars>
[21:04:08.290]    // Pre-defined
[21:04:08.290]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:04:08.290]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:04:08.290]    __dp=0x00000000
[21:04:08.291]    __ap=0x00000000
[21:04:08.291]    __traceout=0x00000000      (Trace Disabled)
[21:04:08.291]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:04:08.291]    __FlashAddr=0x00000000
[21:04:08.291]    __FlashLen=0x00000000
[21:04:08.291]    __FlashArg=0x00000000
[21:04:08.291]    __FlashOp=0x00000000
[21:04:08.291]    __Result=0x00000000
[21:04:08.291]  </debugvars>
[21:04:08.291]  
[21:04:08.291]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:04:08.291]    <block atomic="false" info="">
[21:04:08.292]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:04:08.292]        // -> [isSWJ <= 0x00000001]
[21:04:08.292]      __var hasDormant = __protocol & 0x00020000;
[21:04:08.292]        // -> [hasDormant <= 0x00000000]
[21:04:08.292]      __var protType   = __protocol & 0x0000FFFF;
[21:04:08.292]        // -> [protType <= 0x00000002]
[21:04:08.292]    </block>
[21:04:08.294]    <control if="protType == 1" while="" timeout="0" info="">
[21:04:08.294]      // if-block "protType == 1"
[21:04:08.294]        // =>  FALSE
[21:04:08.294]      // skip if-block "protType == 1"
[21:04:08.294]    </control>
[21:04:08.294]    <control if="protType == 2" while="" timeout="0" info="">
[21:04:08.294]      // if-block "protType == 2"
[21:04:08.294]        // =>  TRUE
[21:04:08.294]      <control if="isSWJ" while="" timeout="0" info="">
[21:04:08.294]        // if-block "isSWJ"
[21:04:08.294]          // =>  TRUE
[21:04:08.294]        <control if="hasDormant" while="" timeout="0" info="">
[21:04:08.294]          // if-block "hasDormant"
[21:04:08.295]            // =>  FALSE
[21:04:08.295]          // skip if-block "hasDormant"
[21:04:08.295]        </control>
[21:04:08.295]        <control if="!hasDormant" while="" timeout="0" info="">
[21:04:08.295]          // if-block "!hasDormant"
[21:04:08.295]            // =>  TRUE
[21:04:08.295]          <block atomic="false" info="">
[21:04:08.295]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:04:08.296]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:04:08.296]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:04:08.296]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:04:08.296]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:04:08.297]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:04:08.297]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:04:08.298]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:04:08.298]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:04:08.298]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:04:08.298]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:04:08.298]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:04:08.299]          </block>
[21:04:08.299]          // end if-block "!hasDormant"
[21:04:08.299]        </control>
[21:04:08.299]        // end if-block "isSWJ"
[21:04:08.299]      </control>
[21:04:08.299]      <control if="!isSWJ" while="" timeout="0" info="">
[21:04:08.300]        // if-block "!isSWJ"
[21:04:08.300]          // =>  FALSE
[21:04:08.300]        // skip if-block "!isSWJ"
[21:04:08.300]      </control>
[21:04:08.300]      <block atomic="false" info="">
[21:04:08.300]        ReadDP(0x0);
[21:04:08.300]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:04:08.300]      </block>
[21:04:08.301]      // end if-block "protType == 2"
[21:04:08.301]    </control>
[21:04:08.301]  </sequence>
[21:04:08.301]  
[21:04:08.301]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:04:08.301]  
[21:04:08.301]  <debugvars>
[21:04:08.301]    // Pre-defined
[21:04:08.301]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:04:08.301]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:04:08.303]    __dp=0x00000000
[21:04:08.303]    __ap=0x00000000
[21:04:08.303]    __traceout=0x00000000      (Trace Disabled)
[21:04:08.303]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:04:08.303]    __FlashAddr=0x00000000
[21:04:08.303]    __FlashLen=0x00000000
[21:04:08.303]    __FlashArg=0x00000000
[21:04:08.303]    __FlashOp=0x00000000
[21:04:08.303]    __Result=0x00000000
[21:04:08.303]  </debugvars>
[21:04:08.304]  
[21:04:08.304]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:04:08.304]    <block atomic="false" info="">
[21:04:08.304]      __var SW_DP_ABORT       = 0x0;
[21:04:08.304]        // -> [SW_DP_ABORT <= 0x00000000]
[21:04:08.304]      __var DP_CTRL_STAT      = 0x4;
[21:04:08.304]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:04:08.304]      __var DP_SELECT         = 0x8;
[21:04:08.304]        // -> [DP_SELECT <= 0x00000008]
[21:04:08.304]      __var powered_down      = 0;
[21:04:08.304]        // -> [powered_down <= 0x00000000]
[21:04:08.305]      WriteDP(DP_SELECT, 0x00000000);
[21:04:08.305]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:04:08.305]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:04:08.306]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:04:08.306]        // -> [powered_down <= 0x00000001]
[21:04:08.306]    </block>
[21:04:08.306]    <control if="powered_down" while="" timeout="0" info="">
[21:04:08.306]      // if-block "powered_down"
[21:04:08.306]        // =>  TRUE
[21:04:08.306]      <block atomic="false" info="">
[21:04:08.306]        Message(0, "Debug/System power-up request sent");
[21:04:08.308]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:04:08.309]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:04:08.309]      </block>
[21:04:08.309]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:04:08.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:04:08.309]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:04:08.309]        // while-condition  =>  FALSE
[21:04:08.309]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:04:08.309]      </control>
[21:04:08.310]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:04:08.310]        // if-block "(__protocol & 0xFFFF) == 1"
[21:04:08.310]          // =>  FALSE
[21:04:08.310]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:04:08.310]      </control>
[21:04:08.310]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:04:08.310]        // if-block "(__protocol & 0xFFFF) == 2"
[21:04:08.310]          // =>  TRUE
[21:04:08.310]        <block atomic="false" info="">
[21:04:08.310]          Message(0, "executing SWD power up");
[21:04:08.311]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:04:08.313]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:04:08.313]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:04:08.313]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:04:08.313]        </block>
[21:04:08.313]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:04:08.314]      </control>
[21:04:08.314]      // end if-block "powered_down"
[21:04:08.314]    </control>
[21:04:08.314]    <block atomic="false" info="">
[21:04:08.314]      __var DEBUG_PORT_VAL    = 0;
[21:04:08.315]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:04:08.315]      __var ACCESS_POINT_VAL  = 0;
[21:04:08.315]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:04:08.315]      __ap = 1; 
[21:04:08.315]        // -> [__ap <= 0x00000001]
[21:04:08.315]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:04:08.316]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:04:08.316]      __ap = 4;
[21:04:08.316]        // -> [__ap <= 0x00000004]
[21:04:08.316]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:04:08.317]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:04:08.317]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:04:08.317]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:04:08.320]    </block>
[21:04:08.320]    <block atomic="false" info="">
[21:04:08.320]      __var nReset = 0x80;
[21:04:08.320]        // -> [nReset <= 0x00000080]
[21:04:08.320]      __var canReadPins = 0;
[21:04:08.320]        // -> [canReadPins <= 0x00000000]
[21:04:08.320]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:04:08.321]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:04:08.321]        // -> [canReadPins <= 0x00000001]
[21:04:08.321]    </block>
[21:04:08.321]    <control if="" while="1" timeout="200" info="">
[21:04:08.321]      // while "1"  (timeout="200")
[21:04:08.321]      // while-condition  =>  TRUE
[21:04:08.321]      // while "1"  (timeout="200")
[21:04:08.321]      // while-condition  =>  TRUE
[21:04:08.321]      // while "1"  (timeout="200")
[21:04:08.321]      // while-condition  =>  TRUE
[21:04:08.321]      // while "1"  (timeout="200")
[21:04:08.321]      // while-condition  =>  TRUE
[21:04:08.321]      // while "1"  (timeout="200")
[21:04:08.322]      // while-condition  =>  TRUE
[21:04:08.322]      // while "1"  (timeout="200")
[21:04:08.322]      // while-condition  =>  TRUE
[21:04:08.322]      // while "1"  (timeout="200")
[21:04:08.322]      // while-condition  =>  TRUE
[21:04:08.322]      // while "1"  (timeout="200")
[21:04:08.322]      // while-condition  =>  TRUE
[21:04:08.322]      // while "1"  (timeout="200")
[21:04:08.324]      // while-condition  =>  TRUE
[21:04:08.324]      // while "1"  (timeout="200")
[21:04:08.324]      // while-condition  =>  TRUE
[21:04:08.324]      // while "1"  (timeout="200")
[21:04:08.324]      // while-condition  =>  TRUE
[21:04:08.324]      // while "1"  (timeout="200")
[21:04:08.324]      // while-condition  =>  TRUE
[21:04:08.324]      // while "1"  (timeout="200")
[21:04:08.324]      // while-condition  =>  TRUE
[21:04:08.324]      // while "1"  (timeout="200")
[21:04:08.324]      // while-condition  =>  TRUE
[21:04:08.324]      // while "1"  (timeout="200")
[21:04:08.325]      // while-condition  =>  TRUE
[21:04:08.325]      // while "1"  (timeout="200")
[21:04:08.325]      // while-condition  =>  TRUE
[21:04:08.325]      // while "1"  (timeout="200")
[21:04:08.325]      // while-condition  =>  TRUE
[21:04:08.325]      // while "1"  (timeout="200")
[21:04:08.325]      // while-condition  =>  TRUE
[21:04:08.325]      // while "1"  (timeout="200")
[21:04:08.325]      // while-condition  =>  TRUE
[21:04:08.325]      // while "1"  (timeout="200")
[21:04:08.325]      // while-condition  =>  TRUE
[21:04:08.326]      // while "1"  (timeout="200")
[21:04:08.326]      // while-condition  =>  TRUE
[21:04:08.326]      // while "1"  (timeout="200")
[21:04:08.326]      // while-condition  =>  TRUE
[21:04:08.326]      // while "1"  (timeout="200")
[21:04:08.326]      // while-condition  =>  TRUE
[21:04:08.326]      // while "1"  (timeout="200")
[21:04:08.326]      // while-condition  =>  TRUE
[21:04:08.326]      // while "1"  (timeout="200")
[21:04:08.326]      // while-condition  =>  TRUE
[21:04:08.326]      // while "1"  (timeout="200")
[21:04:08.326]      // while-condition  =>  TRUE
[21:04:08.326]      // while "1"  (timeout="200")
[21:04:08.327]      // while-condition  =>  TRUE
[21:04:08.327]      // while "1"  (timeout="200")
[21:04:08.327]      // while-condition  =>  TRUE
[21:04:08.327]      // while "1"  (timeout="200")
[21:04:08.327]      // while-condition  =>  TRUE
[21:04:08.327]      // while "1"  (timeout="200")
[21:04:08.327]      // while-condition  =>  TRUE
[21:04:08.327]      // while "1"  (timeout="200")
[21:04:08.327]      // while-condition  =>  TRUE
[21:04:08.327]      // while "1"  (timeout="200")
[21:04:08.327]      // while-condition  =>  TRUE
[21:04:08.328]      // while "1"  (timeout="200")
[21:04:08.328]      // while-condition  =>  TRUE
[21:04:08.328]      // while "1"  (timeout="200")
[21:04:08.328]      // while-condition  =>  TRUE
[21:04:08.328]      // while "1"  (timeout="200")
[21:04:08.328]      // while-condition  =>  TRUE
[21:04:08.328]      // while "1"  (timeout="200")
[21:04:08.328]      // while-condition  =>  TRUE
[21:04:08.328]      // while "1"  (timeout="200")
[21:04:08.328]      // while-condition  =>  TRUE
[21:04:08.328]      // while "1"  (timeout="200")
[21:04:08.328]      // while-condition  =>  TRUE
[21:04:08.328]      // while "1"  (timeout="200")
[21:04:08.329]      // while-condition  =>  TRUE
[21:04:08.329]      // while "1"  (timeout="200")
[21:04:08.329]      // while-condition  =>  TRUE
[21:04:08.329]      // while "1"  (timeout="200")
[21:04:08.329]      // while-condition  =>  TRUE
[21:04:08.329]      // while "1"  (timeout="200")
[21:04:08.329]      // while-condition  =>  TRUE
[21:04:08.329]      // while "1"  (timeout="200")
[21:04:08.329]      // while-condition  =>  TRUE
[21:04:08.329]      // while "1"  (timeout="200")
[21:04:08.330]      // while-condition  =>  TRUE
[21:04:08.330]      // while "1"  (timeout="200")
[21:04:08.330]      // while  =>  TIMEOUT
[21:04:08.330]      // end while "1"
[21:04:08.330]    </control>
[21:04:08.330]    <control if="canReadPins" while="" timeout="0" info="">
[21:04:08.330]      // if-block "canReadPins"
[21:04:08.330]        // =>  TRUE
[21:04:08.330]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:04:08.330]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:04:08.330]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:04:08.332]        // while-condition  =>  FALSE
[21:04:08.332]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:04:08.332]      </control>
[21:04:08.332]      // end if-block "canReadPins"
[21:04:08.332]    </control>
[21:04:08.332]    <control if="!canReadPins" while="" timeout="0" info="">
[21:04:08.332]      // if-block "!canReadPins"
[21:04:08.332]        // =>  FALSE
[21:04:08.332]      // skip if-block "!canReadPins"
[21:04:08.333]    </control>
[21:04:08.333]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:04:08.333]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:04:08.333]        // =>  TRUE
[21:04:08.333]      <block atomic="false" info="">
[21:04:08.333]        WriteAP(0x00, 0x190008);
[21:04:08.333]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:04:08.334]        WriteAP(0xF0, 0x01);
[21:04:08.335]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:04:08.335]      </block>
[21:04:08.335]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:04:08.335]    </control>
[21:04:08.335]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:04:08.335]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:04:08.335]        // =>  FALSE
[21:04:08.335]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:04:08.335]    </control>
[21:04:08.335]    <block atomic="false" info="">
[21:04:08.335]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:04:08.336]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:04:08.336]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:04:08.336]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:04:08.339]      __ap = 0; //lets make sure we reset the access point selection
[21:04:08.339]        // -> [__ap <= 0x00000000]
[21:04:08.339]    </block>
[21:04:08.339]  </sequence>
[21:04:08.340]  
[21:04:08.345]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:04:08.345]  
[21:04:08.345]  <debugvars>
[21:04:08.345]    // Pre-defined
[21:04:08.346]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:04:08.346]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:04:08.346]    __dp=0x00000000
[21:04:08.346]    __ap=0x00000000
[21:04:08.346]    __traceout=0x00000000      (Trace Disabled)
[21:04:08.346]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:04:08.346]    __FlashAddr=0x00000000
[21:04:08.346]    __FlashLen=0x00000000
[21:04:08.346]    __FlashArg=0x00000000
[21:04:08.347]    __FlashOp=0x00000000
[21:04:08.347]    __Result=0x00000000
[21:04:08.347]  </debugvars>
[21:04:08.347]  
[21:04:08.347]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:04:08.347]    <block atomic="false" info="">
[21:04:08.347]      __var deviceID = 0;
[21:04:08.347]        // -> [deviceID <= 0x00000000]
[21:04:08.347]      __var version = 0;
[21:04:08.347]        // -> [version <= 0x00000000]
[21:04:08.347]      __var partNum = 0;
[21:04:08.348]        // -> [partNum <= 0x00000000]
[21:04:08.348]      __var manuf = 0;
[21:04:08.348]        // -> [manuf <= 0x00000000]
[21:04:08.348]      __var isMSPM0G1X0X_G3X0X = 0;
[21:04:08.348]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:04:08.348]      __var isProduction = 0;
[21:04:08.348]        // -> [isProduction <= 0x00000000]
[21:04:08.348]      __var continueId = 0;
[21:04:08.349]        // -> [continueId <= 0x00000000]
[21:04:08.349]      deviceID =   Read32(0x41C40004);
[21:04:08.350]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:04:08.351]        // -> [deviceID <= 0x2BB8802F]
[21:04:08.351]      version = deviceID >> 28;
[21:04:08.351]        // -> [version <= 0x00000002]
[21:04:08.351]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:04:08.351]        // -> [partNum <= 0x0000BB88]
[21:04:08.351]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:04:08.351]        // -> [manuf <= 0x00000017]
[21:04:08.351]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:04:08.351]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:04:08.352]      isProduction = (version > 0);
[21:04:08.352]        // -> [isProduction <= 0x00000001]
[21:04:08.352]    </block>
[21:04:08.352]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:04:08.352]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:04:08.352]        // =>  FALSE
[21:04:08.352]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:04:08.352]    </control>
[21:04:08.352]    <control if="continueId == 4" while="" timeout="0" info="">
[21:04:08.352]      // if-block "continueId == 4"
[21:04:08.352]        // =>  FALSE
[21:04:08.354]      // skip if-block "continueId == 4"
[21:04:08.354]    </control>
[21:04:08.354]    <control if="!isProduction" while="" timeout="0" info="">
[21:04:08.354]      // if-block "!isProduction"
[21:04:08.354]        // =>  FALSE
[21:04:08.354]      // skip if-block "!isProduction"
[21:04:08.354]    </control>
[21:04:08.354]  </sequence>
[21:04:08.354]  
