/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0016.log
 *  Created     : 20:07:18 (25/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[20:07:18.581]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:07:18.581]  
[20:07:18.584]  <debugvars>
[20:07:18.584]    // Pre-defined
[20:07:18.584]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:07:18.584]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:07:18.584]    __dp=0x00000000
[20:07:18.584]    __ap=0x00000000
[20:07:18.584]    __traceout=0x00000000      (Trace Disabled)
[20:07:18.584]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:07:18.584]    __FlashAddr=0x00000000
[20:07:18.584]    __FlashLen=0x00000000
[20:07:18.584]    __FlashArg=0x00000000
[20:07:18.584]    __FlashOp=0x00000000
[20:07:18.584]    __Result=0x00000000
[20:07:18.584]  </debugvars>
[20:07:18.584]  
[20:07:18.584]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:07:18.586]    <block atomic="false" info="">
[20:07:18.586]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:07:18.586]        // -> [isSWJ <= 0x00000001]
[20:07:18.586]      __var hasDormant = __protocol & 0x00020000;
[20:07:18.586]        // -> [hasDormant <= 0x00000000]
[20:07:18.586]      __var protType   = __protocol & 0x0000FFFF;
[20:07:18.586]        // -> [protType <= 0x00000002]
[20:07:18.586]    </block>
[20:07:18.586]    <control if="protType == 1" while="" timeout="0" info="">
[20:07:18.586]      // if-block "protType == 1"
[20:07:18.586]        // =>  FALSE
[20:07:18.586]      // skip if-block "protType == 1"
[20:07:18.586]    </control>
[20:07:18.586]    <control if="protType == 2" while="" timeout="0" info="">
[20:07:18.586]      // if-block "protType == 2"
[20:07:18.586]        // =>  TRUE
[20:07:18.586]      <control if="isSWJ" while="" timeout="0" info="">
[20:07:18.586]        // if-block "isSWJ"
[20:07:18.586]          // =>  TRUE
[20:07:18.586]        <control if="hasDormant" while="" timeout="0" info="">
[20:07:18.586]          // if-block "hasDormant"
[20:07:18.586]            // =>  FALSE
[20:07:18.589]          // skip if-block "hasDormant"
[20:07:18.589]        </control>
[20:07:18.589]        <control if="!hasDormant" while="" timeout="0" info="">
[20:07:18.589]          // if-block "!hasDormant"
[20:07:18.589]            // =>  TRUE
[20:07:18.589]          <block atomic="false" info="">
[20:07:18.589]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:07:18.591]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:07:18.591]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:07:18.593]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:07:18.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:07:18.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:07:18.598]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:07:18.601]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:07:18.601]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:07:18.602]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:07:18.603]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:07:18.604]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:07:18.605]          </block>
[20:07:18.605]          // end if-block "!hasDormant"
[20:07:18.605]        </control>
[20:07:18.606]        // end if-block "isSWJ"
[20:07:18.606]      </control>
[20:07:18.606]      <control if="!isSWJ" while="" timeout="0" info="">
[20:07:18.606]        // if-block "!isSWJ"
[20:07:18.606]          // =>  FALSE
[20:07:18.606]        // skip if-block "!isSWJ"
[20:07:18.606]      </control>
[20:07:18.606]      <block atomic="false" info="">
[20:07:18.606]        ReadDP(0x0);
[20:07:18.608]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:07:18.608]      </block>
[20:07:18.608]      // end if-block "protType == 2"
[20:07:18.608]    </control>
[20:07:18.608]  </sequence>
[20:07:18.608]  
[20:07:18.610]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:07:18.610]  
[20:07:18.610]  <debugvars>
[20:07:18.610]    // Pre-defined
[20:07:18.610]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:07:18.610]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:07:18.610]    __dp=0x00000000
[20:07:18.610]    __ap=0x00000000
[20:07:18.610]    __traceout=0x00000000      (Trace Disabled)
[20:07:18.610]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:07:18.610]    __FlashAddr=0x00000000
[20:07:18.610]    __FlashLen=0x00000000
[20:07:18.610]    __FlashArg=0x00000000
[20:07:18.610]    __FlashOp=0x00000000
[20:07:18.610]    __Result=0x00000000
[20:07:18.610]  </debugvars>
[20:07:18.610]  
[20:07:18.610]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:07:18.610]    <block atomic="false" info="">
[20:07:18.610]      __var SW_DP_ABORT       = 0x0;
[20:07:18.610]        // -> [SW_DP_ABORT <= 0x00000000]
[20:07:18.610]      __var DP_CTRL_STAT      = 0x4;
[20:07:18.614]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:07:18.614]      __var DP_SELECT         = 0x8;
[20:07:18.614]        // -> [DP_SELECT <= 0x00000008]
[20:07:18.614]      __var powered_down      = 0;
[20:07:18.614]        // -> [powered_down <= 0x00000000]
[20:07:18.614]      WriteDP(DP_SELECT, 0x00000000);
[20:07:18.618]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:07:18.618]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:07:18.620]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:07:18.620]        // -> [powered_down <= 0x00000001]
[20:07:18.620]    </block>
[20:07:18.620]    <control if="powered_down" while="" timeout="0" info="">
[20:07:18.620]      // if-block "powered_down"
[20:07:18.620]        // =>  TRUE
[20:07:18.620]      <block atomic="false" info="">
[20:07:18.620]        Message(0, "Debug/System power-up request sent");
[20:07:18.622]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:07:18.623]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:07:18.623]      </block>
[20:07:18.623]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:07:18.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:07:18.626]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:07:18.626]        // while-condition  =>  FALSE
[20:07:18.626]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:07:18.626]      </control>
[20:07:18.626]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:07:18.626]        // if-block "(__protocol & 0xFFFF) == 1"
[20:07:18.626]          // =>  FALSE
[20:07:18.626]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:07:18.626]      </control>
[20:07:18.626]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:07:18.628]        // if-block "(__protocol & 0xFFFF) == 2"
[20:07:18.628]          // =>  TRUE
[20:07:18.628]        <block atomic="false" info="">
[20:07:18.628]          Message(0, "executing SWD power up");
[20:07:18.629]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:07:18.631]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:07:18.631]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:07:18.632]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:07:18.633]        </block>
[20:07:18.633]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:07:18.633]      </control>
[20:07:18.633]      // end if-block "powered_down"
[20:07:18.633]    </control>
[20:07:18.633]    <block atomic="false" info="">
[20:07:18.633]      __var DEBUG_PORT_VAL    = 0;
[20:07:18.633]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:07:18.633]      __var ACCESS_POINT_VAL  = 0;
[20:07:18.634]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:07:18.634]      __ap = 1; 
[20:07:18.634]        // -> [__ap <= 0x00000001]
[20:07:18.634]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:07:18.640]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:07:18.640]      __ap = 4;
[20:07:18.640]        // -> [__ap <= 0x00000004]
[20:07:18.640]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:07:18.643]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:07:18.643]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:07:18.643]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:07:18.646]    </block>
[20:07:18.646]    <block atomic="false" info="">
[20:07:18.646]      __var nReset = 0x80;
[20:07:18.646]        // -> [nReset <= 0x00000080]
[20:07:18.646]      __var canReadPins = 0;
[20:07:18.646]        // -> [canReadPins <= 0x00000000]
[20:07:18.646]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:07:18.646]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:07:18.646]        // -> [canReadPins <= 0x00000001]
[20:07:18.646]    </block>
[20:07:18.646]    <control if="" while="1" timeout="200" info="">
[20:07:18.646]      // while "1"  (timeout="200")
[20:07:18.646]      // while-condition  =>  TRUE
[20:07:18.646]      // while "1"  (timeout="200")
[20:07:18.646]      // while-condition  =>  TRUE
[20:07:18.646]      // while "1"  (timeout="200")
[20:07:18.646]      // while-condition  =>  TRUE
[20:07:18.650]      // while "1"  (timeout="200")
[20:07:18.650]      // while-condition  =>  TRUE
[20:07:18.650]      // while "1"  (timeout="200")
[20:07:18.650]      // while-condition  =>  TRUE
[20:07:18.650]      // while "1"  (timeout="200")
[20:07:18.650]      // while-condition  =>  TRUE
[20:07:18.650]      // while "1"  (timeout="200")
[20:07:18.650]      // while-condition  =>  TRUE
[20:07:18.650]      // while "1"  (timeout="200")
[20:07:18.650]      // while-condition  =>  TRUE
[20:07:18.650]      // while "1"  (timeout="200")
[20:07:18.651]      // while-condition  =>  TRUE
[20:07:18.651]      // while "1"  (timeout="200")
[20:07:18.651]      // while-condition  =>  TRUE
[20:07:18.651]      // while "1"  (timeout="200")
[20:07:18.651]      // while-condition  =>  TRUE
[20:07:18.651]      // while "1"  (timeout="200")
[20:07:18.651]      // while-condition  =>  TRUE
[20:07:18.651]      // while "1"  (timeout="200")
[20:07:18.651]      // while-condition  =>  TRUE
[20:07:18.651]      // while "1"  (timeout="200")
[20:07:18.651]      // while-condition  =>  TRUE
[20:07:18.651]      // while "1"  (timeout="200")
[20:07:18.652]      // while-condition  =>  TRUE
[20:07:18.652]      // while "1"  (timeout="200")
[20:07:18.652]      // while-condition  =>  TRUE
[20:07:18.652]      // while "1"  (timeout="200")
[20:07:18.652]      // while-condition  =>  TRUE
[20:07:18.652]      // while "1"  (timeout="200")
[20:07:18.652]      // while-condition  =>  TRUE
[20:07:18.652]      // while "1"  (timeout="200")
[20:07:18.652]      // while-condition  =>  TRUE
[20:07:18.654]      // while "1"  (timeout="200")
[20:07:18.654]      // while-condition  =>  TRUE
[20:07:18.654]      // while "1"  (timeout="200")
[20:07:18.654]      // while-condition  =>  TRUE
[20:07:18.654]      // while "1"  (timeout="200")
[20:07:18.654]      // while-condition  =>  TRUE
[20:07:18.654]      // while "1"  (timeout="200")
[20:07:18.654]      // while-condition  =>  TRUE
[20:07:18.654]      // while "1"  (timeout="200")
[20:07:18.654]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.655]      // while-condition  =>  TRUE
[20:07:18.655]      // while "1"  (timeout="200")
[20:07:18.659]      // while-condition  =>  TRUE
[20:07:18.659]      // while "1"  (timeout="200")
[20:07:18.659]      // while  =>  TIMEOUT
[20:07:18.659]      // end while "1"
[20:07:18.659]    </control>
[20:07:18.659]    <control if="canReadPins" while="" timeout="0" info="">
[20:07:18.659]      // if-block "canReadPins"
[20:07:18.659]        // =>  TRUE
[20:07:18.659]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:07:18.659]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:07:18.660]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:07:18.660]        // while-condition  =>  FALSE
[20:07:18.660]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:07:18.660]      </control>
[20:07:18.660]      // end if-block "canReadPins"
[20:07:18.660]    </control>
[20:07:18.660]    <control if="!canReadPins" while="" timeout="0" info="">
[20:07:18.660]      // if-block "!canReadPins"
[20:07:18.660]        // =>  FALSE
[20:07:18.660]      // skip if-block "!canReadPins"
[20:07:18.660]    </control>
[20:07:18.660]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:07:18.660]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:07:18.660]        // =>  TRUE
[20:07:18.662]      <block atomic="false" info="">
[20:07:18.662]        WriteAP(0x00, 0x190008);
[20:07:18.663]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:07:18.664]        WriteAP(0xF0, 0x01);
[20:07:18.671]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:07:18.671]      </block>
[20:07:18.671]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:07:18.671]    </control>
[20:07:18.671]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:07:18.671]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:07:18.671]        // =>  FALSE
[20:07:18.671]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:07:18.671]    </control>
[20:07:18.671]    <block atomic="false" info="">
[20:07:18.671]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:07:18.675]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:07:18.675]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:07:18.675]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:07:18.675]      __ap = 0; //lets make sure we reset the access point selection
[20:07:18.675]        // -> [__ap <= 0x00000000]
[20:07:18.675]    </block>
[20:07:18.675]  </sequence>
[20:07:18.675]  
[20:07:18.708]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:07:18.708]  
[20:07:18.708]  <debugvars>
[20:07:18.708]    // Pre-defined
[20:07:18.708]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:07:18.708]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:07:18.708]    __dp=0x00000000
[20:07:18.708]    __ap=0x00000000
[20:07:18.708]    __traceout=0x00000000      (Trace Disabled)
[20:07:18.708]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:07:18.708]    __FlashAddr=0x00000000
[20:07:18.708]    __FlashLen=0x00000000
[20:07:18.708]    __FlashArg=0x00000000
[20:07:18.708]    __FlashOp=0x00000000
[20:07:18.708]    __Result=0x00000000
[20:07:18.708]  </debugvars>
[20:07:18.708]  
[20:07:18.708]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:07:18.708]    <block atomic="false" info="">
[20:07:18.708]      __var deviceID = 0;
[20:07:18.708]        // -> [deviceID <= 0x00000000]
[20:07:18.712]      __var version = 0;
[20:07:18.712]        // -> [version <= 0x00000000]
[20:07:18.712]      __var partNum = 0;
[20:07:18.712]        // -> [partNum <= 0x00000000]
[20:07:18.712]      __var manuf = 0;
[20:07:18.712]        // -> [manuf <= 0x00000000]
[20:07:18.712]      __var isMSPM0G1X0X_G3X0X = 0;
[20:07:18.712]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:07:18.712]      __var isProduction = 0;
[20:07:18.712]        // -> [isProduction <= 0x00000000]
[20:07:18.712]      __var continueId = 0;
[20:07:18.712]        // -> [continueId <= 0x00000000]
[20:07:18.712]      deviceID =   Read32(0x41C40004);
[20:07:18.719]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:07:18.719]        // -> [deviceID <= 0x2BB8802F]
[20:07:18.719]      version = deviceID >> 28;
[20:07:18.719]        // -> [version <= 0x00000002]
[20:07:18.719]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:07:18.719]        // -> [partNum <= 0x0000BB88]
[20:07:18.719]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:07:18.721]        // -> [manuf <= 0x00000017]
[20:07:18.721]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:07:18.721]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:07:18.721]      isProduction = (version > 0);
[20:07:18.721]        // -> [isProduction <= 0x00000001]
[20:07:18.721]    </block>
[20:07:18.721]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:07:18.721]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:07:18.721]        // =>  FALSE
[20:07:18.721]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:07:18.721]    </control>
[20:07:18.721]    <control if="continueId == 4" while="" timeout="0" info="">
[20:07:18.721]      // if-block "continueId == 4"
[20:07:18.721]        // =>  FALSE
[20:07:18.721]      // skip if-block "continueId == 4"
[20:07:18.721]    </control>
[20:07:18.721]    <control if="!isProduction" while="" timeout="0" info="">
[20:07:18.721]      // if-block "!isProduction"
[20:07:18.723]        // =>  FALSE
[20:07:18.723]      // skip if-block "!isProduction"
[20:07:18.723]    </control>
[20:07:18.723]  </sequence>
[20:07:18.723]  
[20:08:27.188]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:08:27.188]  
[20:08:27.188]  <debugvars>
[20:08:27.188]    // Pre-defined
[20:08:27.189]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:08:27.189]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:08:27.189]    __dp=0x00000000
[20:08:27.189]    __ap=0x00000000
[20:08:27.189]    __traceout=0x00000000      (Trace Disabled)
[20:08:27.189]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:08:27.189]    __FlashAddr=0x00000000
[20:08:27.189]    __FlashLen=0x00000000
[20:08:27.189]    __FlashArg=0x00000000
[20:08:27.189]    __FlashOp=0x00000000
[20:08:27.189]    __Result=0x00000000
[20:08:27.189]  </debugvars>
[20:08:27.190]  
[20:08:27.191]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:08:27.191]    <block atomic="false" info="">
[20:08:27.191]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:08:27.191]        // -> [isSWJ <= 0x00000001]
[20:08:27.191]      __var hasDormant = __protocol & 0x00020000;
[20:08:27.191]        // -> [hasDormant <= 0x00000000]
[20:08:27.191]      __var protType   = __protocol & 0x0000FFFF;
[20:08:27.191]        // -> [protType <= 0x00000002]
[20:08:27.191]    </block>
[20:08:27.191]    <control if="protType == 1" while="" timeout="0" info="">
[20:08:27.191]      // if-block "protType == 1"
[20:08:27.191]        // =>  FALSE
[20:08:27.192]      // skip if-block "protType == 1"
[20:08:27.192]    </control>
[20:08:27.192]    <control if="protType == 2" while="" timeout="0" info="">
[20:08:27.192]      // if-block "protType == 2"
[20:08:27.192]        // =>  TRUE
[20:08:27.192]      <control if="isSWJ" while="" timeout="0" info="">
[20:08:27.192]        // if-block "isSWJ"
[20:08:27.192]          // =>  TRUE
[20:08:27.192]        <control if="hasDormant" while="" timeout="0" info="">
[20:08:27.192]          // if-block "hasDormant"
[20:08:27.192]            // =>  FALSE
[20:08:27.192]          // skip if-block "hasDormant"
[20:08:27.193]        </control>
[20:08:27.193]        <control if="!hasDormant" while="" timeout="0" info="">
[20:08:27.193]          // if-block "!hasDormant"
[20:08:27.193]            // =>  TRUE
[20:08:27.193]          <block atomic="false" info="">
[20:08:27.193]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:08:27.194]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:08:27.195]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:08:27.196]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:08:27.196]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:08:27.197]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:08:27.197]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:08:27.199]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:08:27.200]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:08:27.201]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:08:27.201]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:08:27.202]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:08:27.202]          </block>
[20:08:27.202]          // end if-block "!hasDormant"
[20:08:27.202]        </control>
[20:08:27.202]        // end if-block "isSWJ"
[20:08:27.202]      </control>
[20:08:27.204]      <control if="!isSWJ" while="" timeout="0" info="">
[20:08:27.204]        // if-block "!isSWJ"
[20:08:27.204]          // =>  FALSE
[20:08:27.204]        // skip if-block "!isSWJ"
[20:08:27.204]      </control>
[20:08:27.204]      <block atomic="false" info="">
[20:08:27.204]        ReadDP(0x0);
[20:08:27.206]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:08:27.206]      </block>
[20:08:27.206]      // end if-block "protType == 2"
[20:08:27.206]    </control>
[20:08:27.206]  </sequence>
[20:08:27.206]  
[20:08:27.208]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:08:27.208]  
[20:08:27.208]  <debugvars>
[20:08:27.209]    // Pre-defined
[20:08:27.209]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:08:27.209]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:08:27.209]    __dp=0x00000000
[20:08:27.209]    __ap=0x00000000
[20:08:27.209]    __traceout=0x00000000      (Trace Disabled)
[20:08:27.209]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:08:27.209]    __FlashAddr=0x00000000
[20:08:27.209]    __FlashLen=0x00000000
[20:08:27.209]    __FlashArg=0x00000000
[20:08:27.209]    __FlashOp=0x00000000
[20:08:27.210]    __Result=0x00000000
[20:08:27.210]  </debugvars>
[20:08:27.210]  
[20:08:27.210]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:08:27.210]    <block atomic="false" info="">
[20:08:27.210]      __var SW_DP_ABORT       = 0x0;
[20:08:27.211]        // -> [SW_DP_ABORT <= 0x00000000]
[20:08:27.211]      __var DP_CTRL_STAT      = 0x4;
[20:08:27.211]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:08:27.211]      __var DP_SELECT         = 0x8;
[20:08:27.211]        // -> [DP_SELECT <= 0x00000008]
[20:08:27.211]      __var powered_down      = 0;
[20:08:27.211]        // -> [powered_down <= 0x00000000]
[20:08:27.211]      WriteDP(DP_SELECT, 0x00000000);
[20:08:27.213]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:08:27.213]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:08:27.215]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:08:27.215]        // -> [powered_down <= 0x00000001]
[20:08:27.215]    </block>
[20:08:27.215]    <control if="powered_down" while="" timeout="0" info="">
[20:08:27.215]      // if-block "powered_down"
[20:08:27.215]        // =>  TRUE
[20:08:27.215]      <block atomic="false" info="">
[20:08:27.216]        Message(0, "Debug/System power-up request sent");
[20:08:27.218]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:08:27.219]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:08:27.219]      </block>
[20:08:27.219]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:08:27.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:08:27.220]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:08:27.220]        // while-condition  =>  FALSE
[20:08:27.220]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:08:27.220]      </control>
[20:08:27.222]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:08:27.222]        // if-block "(__protocol & 0xFFFF) == 1"
[20:08:27.222]          // =>  FALSE
[20:08:27.222]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:08:27.222]      </control>
[20:08:27.222]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:08:27.222]        // if-block "(__protocol & 0xFFFF) == 2"
[20:08:27.222]          // =>  TRUE
[20:08:27.222]        <block atomic="false" info="">
[20:08:27.223]          Message(0, "executing SWD power up");
[20:08:27.224]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:08:27.226]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:08:27.226]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:08:27.229]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:08:27.229]        </block>
[20:08:27.229]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:08:27.230]      </control>
[20:08:27.230]      // end if-block "powered_down"
[20:08:27.230]    </control>
[20:08:27.230]    <block atomic="false" info="">
[20:08:27.230]      __var DEBUG_PORT_VAL    = 0;
[20:08:27.230]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:08:27.230]      __var ACCESS_POINT_VAL  = 0;
[20:08:27.230]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:08:27.230]      __ap = 1; 
[20:08:27.230]        // -> [__ap <= 0x00000001]
[20:08:27.230]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:08:27.234]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:08:27.234]      __ap = 4;
[20:08:27.234]        // -> [__ap <= 0x00000004]
[20:08:27.234]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:08:27.237]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:08:27.238]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:08:27.238]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:08:27.239]    </block>
[20:08:27.239]    <block atomic="false" info="">
[20:08:27.239]      __var nReset = 0x80;
[20:08:27.239]        // -> [nReset <= 0x00000080]
[20:08:27.240]      __var canReadPins = 0;
[20:08:27.240]        // -> [canReadPins <= 0x00000000]
[20:08:27.240]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:08:27.241]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:08:27.241]        // -> [canReadPins <= 0x00000001]
[20:08:27.241]    </block>
[20:08:27.241]    <control if="" while="1" timeout="200" info="">
[20:08:27.241]      // while "1"  (timeout="200")
[20:08:27.241]      // while-condition  =>  TRUE
[20:08:27.242]      // while "1"  (timeout="200")
[20:08:27.242]      // while-condition  =>  TRUE
[20:08:27.242]      // while "1"  (timeout="200")
[20:08:27.242]      // while-condition  =>  TRUE
[20:08:27.242]      // while "1"  (timeout="200")
[20:08:27.242]      // while-condition  =>  TRUE
[20:08:27.242]      // while "1"  (timeout="200")
[20:08:27.242]      // while-condition  =>  TRUE
[20:08:27.242]      // while "1"  (timeout="200")
[20:08:27.242]      // while-condition  =>  TRUE
[20:08:27.242]      // while "1"  (timeout="200")
[20:08:27.242]      // while-condition  =>  TRUE
[20:08:27.243]      // while "1"  (timeout="200")
[20:08:27.243]      // while-condition  =>  TRUE
[20:08:27.243]      // while "1"  (timeout="200")
[20:08:27.243]      // while-condition  =>  TRUE
[20:08:27.243]      // while "1"  (timeout="200")
[20:08:27.243]      // while-condition  =>  TRUE
[20:08:27.243]      // while "1"  (timeout="200")
[20:08:27.243]      // while-condition  =>  TRUE
[20:08:27.243]      // while "1"  (timeout="200")
[20:08:27.244]      // while-condition  =>  TRUE
[20:08:27.244]      // while "1"  (timeout="200")
[20:08:27.244]      // while-condition  =>  TRUE
[20:08:27.244]      // while "1"  (timeout="200")
[20:08:27.244]      // while-condition  =>  TRUE
[20:08:27.244]      // while "1"  (timeout="200")
[20:08:27.244]      // while-condition  =>  TRUE
[20:08:27.244]      // while "1"  (timeout="200")
[20:08:27.244]      // while-condition  =>  TRUE
[20:08:27.244]      // while "1"  (timeout="200")
[20:08:27.244]      // while-condition  =>  TRUE
[20:08:27.244]      // while "1"  (timeout="200")
[20:08:27.245]      // while-condition  =>  TRUE
[20:08:27.245]      // while "1"  (timeout="200")
[20:08:27.245]      // while-condition  =>  TRUE
[20:08:27.245]      // while "1"  (timeout="200")
[20:08:27.245]      // while-condition  =>  TRUE
[20:08:27.245]      // while "1"  (timeout="200")
[20:08:27.245]      // while-condition  =>  TRUE
[20:08:27.245]      // while "1"  (timeout="200")
[20:08:27.245]      // while-condition  =>  TRUE
[20:08:27.245]      // while "1"  (timeout="200")
[20:08:27.246]      // while-condition  =>  TRUE
[20:08:27.246]      // while "1"  (timeout="200")
[20:08:27.246]      // while-condition  =>  TRUE
[20:08:27.246]      // while "1"  (timeout="200")
[20:08:27.246]      // while-condition  =>  TRUE
[20:08:27.246]      // while "1"  (timeout="200")
[20:08:27.246]      // while-condition  =>  TRUE
[20:08:27.247]      // while "1"  (timeout="200")
[20:08:27.247]      // while-condition  =>  TRUE
[20:08:27.247]      // while "1"  (timeout="200")
[20:08:27.247]      // while-condition  =>  TRUE
[20:08:27.247]      // while "1"  (timeout="200")
[20:08:27.247]      // while-condition  =>  TRUE
[20:08:27.247]      // while "1"  (timeout="200")
[20:08:27.247]      // while-condition  =>  TRUE
[20:08:27.247]      // while "1"  (timeout="200")
[20:08:27.247]      // while-condition  =>  TRUE
[20:08:27.247]      // while "1"  (timeout="200")
[20:08:27.248]      // while-condition  =>  TRUE
[20:08:27.248]      // while "1"  (timeout="200")
[20:08:27.248]      // while-condition  =>  TRUE
[20:08:27.248]      // while "1"  (timeout="200")
[20:08:27.248]      // while-condition  =>  TRUE
[20:08:27.248]      // while "1"  (timeout="200")
[20:08:27.248]      // while-condition  =>  TRUE
[20:08:27.248]      // while "1"  (timeout="200")
[20:08:27.248]      // while-condition  =>  TRUE
[20:08:27.248]      // while "1"  (timeout="200")
[20:08:27.248]      // while-condition  =>  TRUE
[20:08:27.249]      // while "1"  (timeout="200")
[20:08:27.249]      // while-condition  =>  TRUE
[20:08:27.249]      // while "1"  (timeout="200")
[20:08:27.249]      // while-condition  =>  TRUE
[20:08:27.249]      // while "1"  (timeout="200")
[20:08:27.249]      // while-condition  =>  TRUE
[20:08:27.249]      // while "1"  (timeout="200")
[20:08:27.249]      // while-condition  =>  TRUE
[20:08:27.251]      // while "1"  (timeout="200")
[20:08:27.251]      // while-condition  =>  TRUE
[20:08:27.251]      // while "1"  (timeout="200")
[20:08:27.251]      // while-condition  =>  TRUE
[20:08:27.251]      // while "1"  (timeout="200")
[20:08:27.251]      // while-condition  =>  TRUE
[20:08:27.251]      // while "1"  (timeout="200")
[20:08:27.251]      // while-condition  =>  TRUE
[20:08:27.251]      // while "1"  (timeout="200")
[20:08:27.251]      // while-condition  =>  TRUE
[20:08:27.251]      // while "1"  (timeout="200")
[20:08:27.251]      // while-condition  =>  TRUE
[20:08:27.251]      // while "1"  (timeout="200")
[20:08:27.251]      // while-condition  =>  TRUE
[20:08:27.251]      // while "1"  (timeout="200")
[20:08:27.251]      // while-condition  =>  TRUE
[20:08:27.251]      // while "1"  (timeout="200")
[20:08:27.251]      // while-condition  =>  TRUE
[20:08:27.251]      // while "1"  (timeout="200")
[20:08:27.252]      // while-condition  =>  TRUE
[20:08:27.252]      // while "1"  (timeout="200")
[20:08:27.252]      // while  =>  TIMEOUT
[20:08:27.252]      // end while "1"
[20:08:27.252]    </control>
[20:08:27.252]    <control if="canReadPins" while="" timeout="0" info="">
[20:08:27.252]      // if-block "canReadPins"
[20:08:27.252]        // =>  TRUE
[20:08:27.252]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:08:27.252]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:08:27.254]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:08:27.254]        // while-condition  =>  FALSE
[20:08:27.254]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:08:27.254]      </control>
[20:08:27.254]      // end if-block "canReadPins"
[20:08:27.254]    </control>
[20:08:27.254]    <control if="!canReadPins" while="" timeout="0" info="">
[20:08:27.255]      // if-block "!canReadPins"
[20:08:27.255]        // =>  FALSE
[20:08:27.255]      // skip if-block "!canReadPins"
[20:08:27.255]    </control>
[20:08:27.255]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:08:27.255]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:08:27.255]        // =>  TRUE
[20:08:27.255]      <block atomic="false" info="">
[20:08:27.256]        WriteAP(0x00, 0x190008);
[20:08:27.257]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:08:27.257]        WriteAP(0xF0, 0x01);
[20:08:27.262]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:08:27.262]      </block>
[20:08:27.262]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:08:27.263]    </control>
[20:08:27.263]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:08:27.263]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:08:27.263]        // =>  FALSE
[20:08:27.263]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:08:27.263]    </control>
[20:08:27.263]    <block atomic="false" info="">
[20:08:27.263]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:08:27.266]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:08:27.266]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:08:27.266]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:08:27.267]      __ap = 0; //lets make sure we reset the access point selection
[20:08:27.267]        // -> [__ap <= 0x00000000]
[20:08:27.268]    </block>
[20:08:27.268]  </sequence>
[20:08:27.268]  
[20:08:27.292]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:08:27.292]  
[20:08:27.292]  <debugvars>
[20:08:27.292]    // Pre-defined
[20:08:27.292]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:08:27.292]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:08:27.292]    __dp=0x00000000
[20:08:27.292]    __ap=0x00000000
[20:08:27.292]    __traceout=0x00000000      (Trace Disabled)
[20:08:27.293]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:08:27.293]    __FlashAddr=0x00000000
[20:08:27.293]    __FlashLen=0x00000000
[20:08:27.293]    __FlashArg=0x00000000
[20:08:27.293]    __FlashOp=0x00000000
[20:08:27.293]    __Result=0x00000000
[20:08:27.293]  </debugvars>
[20:08:27.293]  
[20:08:27.293]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:08:27.293]    <block atomic="false" info="">
[20:08:27.293]      __var deviceID = 0;
[20:08:27.293]        // -> [deviceID <= 0x00000000]
[20:08:27.294]      __var version = 0;
[20:08:27.294]        // -> [version <= 0x00000000]
[20:08:27.294]      __var partNum = 0;
[20:08:27.294]        // -> [partNum <= 0x00000000]
[20:08:27.295]      __var manuf = 0;
[20:08:27.295]        // -> [manuf <= 0x00000000]
[20:08:27.295]      __var isMSPM0G1X0X_G3X0X = 0;
[20:08:27.295]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:08:27.295]      __var isProduction = 0;
[20:08:27.295]        // -> [isProduction <= 0x00000000]
[20:08:27.295]      __var continueId = 0;
[20:08:27.295]        // -> [continueId <= 0x00000000]
[20:08:27.295]      deviceID =   Read32(0x41C40004);
[20:08:27.299]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:08:27.299]        // -> [deviceID <= 0x2BB8802F]
[20:08:27.300]      version = deviceID >> 28;
[20:08:27.300]        // -> [version <= 0x00000002]
[20:08:27.300]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:08:27.300]        // -> [partNum <= 0x0000BB88]
[20:08:27.300]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:08:27.300]        // -> [manuf <= 0x00000017]
[20:08:27.300]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:08:27.301]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:08:27.301]      isProduction = (version > 0);
[20:08:27.301]        // -> [isProduction <= 0x00000001]
[20:08:27.301]    </block>
[20:08:27.301]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:08:27.301]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:08:27.301]        // =>  FALSE
[20:08:27.301]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:08:27.301]    </control>
[20:08:27.301]    <control if="continueId == 4" while="" timeout="0" info="">
[20:08:27.301]      // if-block "continueId == 4"
[20:08:27.302]        // =>  FALSE
[20:08:27.302]      // skip if-block "continueId == 4"
[20:08:27.302]    </control>
[20:08:27.302]    <control if="!isProduction" while="" timeout="0" info="">
[20:08:27.302]      // if-block "!isProduction"
[20:08:27.302]        // =>  FALSE
[20:08:27.302]      // skip if-block "!isProduction"
[20:08:27.302]    </control>
[20:08:27.302]  </sequence>
[20:08:27.302]  
[20:11:31.644]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:11:31.644]  
[20:11:31.653]  <debugvars>
[20:11:31.653]    // Pre-defined
[20:11:31.653]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:11:31.653]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:11:31.653]    __dp=0x00000000
[20:11:31.653]    __ap=0x00000000
[20:11:31.653]    __traceout=0x00000000      (Trace Disabled)
[20:11:31.653]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:11:31.653]    __FlashAddr=0x00000000
[20:11:31.653]    __FlashLen=0x00000000
[20:11:31.653]    __FlashArg=0x00000000
[20:11:31.653]    __FlashOp=0x00000000
[20:11:31.655]    __Result=0x00000000
[20:11:31.655]  </debugvars>
[20:11:31.655]  
[20:11:31.655]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:11:31.655]    <block atomic="false" info="">
[20:11:31.656]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:11:31.656]        // -> [isSWJ <= 0x00000001]
[20:11:31.656]      __var hasDormant = __protocol & 0x00020000;
[20:11:31.656]        // -> [hasDormant <= 0x00000000]
[20:11:31.656]      __var protType   = __protocol & 0x0000FFFF;
[20:11:31.656]        // -> [protType <= 0x00000002]
[20:11:31.656]    </block>
[20:11:31.656]    <control if="protType == 1" while="" timeout="0" info="">
[20:11:31.656]      // if-block "protType == 1"
[20:11:31.657]        // =>  FALSE
[20:11:31.657]      // skip if-block "protType == 1"
[20:11:31.657]    </control>
[20:11:31.657]    <control if="protType == 2" while="" timeout="0" info="">
[20:11:31.657]      // if-block "protType == 2"
[20:11:31.657]        // =>  TRUE
[20:11:31.657]      <control if="isSWJ" while="" timeout="0" info="">
[20:11:31.657]        // if-block "isSWJ"
[20:11:31.657]          // =>  TRUE
[20:11:31.657]        <control if="hasDormant" while="" timeout="0" info="">
[20:11:31.657]          // if-block "hasDormant"
[20:11:31.657]            // =>  FALSE
[20:11:31.658]          // skip if-block "hasDormant"
[20:11:31.658]        </control>
[20:11:31.658]        <control if="!hasDormant" while="" timeout="0" info="">
[20:11:31.658]          // if-block "!hasDormant"
[20:11:31.658]            // =>  TRUE
[20:11:31.658]          <block atomic="false" info="">
[20:11:31.658]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:11:31.660]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:11:31.660]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:11:31.661]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:11:31.661]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:11:31.662]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:11:31.663]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:11:31.668]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:11:31.668]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:11:31.669]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:11:31.669]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:11:31.671]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:11:31.671]          </block>
[20:11:31.671]          // end if-block "!hasDormant"
[20:11:31.671]        </control>
[20:11:31.671]        // end if-block "isSWJ"
[20:11:31.671]      </control>
[20:11:31.671]      <control if="!isSWJ" while="" timeout="0" info="">
[20:11:31.671]        // if-block "!isSWJ"
[20:11:31.672]          // =>  FALSE
[20:11:31.672]        // skip if-block "!isSWJ"
[20:11:31.672]      </control>
[20:11:31.672]      <block atomic="false" info="">
[20:11:31.672]        ReadDP(0x0);
[20:11:31.674]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:11:31.674]      </block>
[20:11:31.674]      // end if-block "protType == 2"
[20:11:31.674]    </control>
[20:11:31.674]  </sequence>
[20:11:31.674]  
[20:11:31.678]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:11:31.678]  
[20:11:31.678]  <debugvars>
[20:11:31.678]    // Pre-defined
[20:11:31.678]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:11:31.678]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:11:31.678]    __dp=0x00000000
[20:11:31.678]    __ap=0x00000000
[20:11:31.678]    __traceout=0x00000000      (Trace Disabled)
[20:11:31.678]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:11:31.678]    __FlashAddr=0x00000000
[20:11:31.678]    __FlashLen=0x00000000
[20:11:31.678]    __FlashArg=0x00000000
[20:11:31.679]    __FlashOp=0x00000000
[20:11:31.679]    __Result=0x00000000
[20:11:31.679]  </debugvars>
[20:11:31.679]  
[20:11:31.679]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:11:31.679]    <block atomic="false" info="">
[20:11:31.679]      __var SW_DP_ABORT       = 0x0;
[20:11:31.679]        // -> [SW_DP_ABORT <= 0x00000000]
[20:11:31.679]      __var DP_CTRL_STAT      = 0x4;
[20:11:31.679]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:11:31.679]      __var DP_SELECT         = 0x8;
[20:11:31.679]        // -> [DP_SELECT <= 0x00000008]
[20:11:31.679]      __var powered_down      = 0;
[20:11:31.679]        // -> [powered_down <= 0x00000000]
[20:11:31.681]      WriteDP(DP_SELECT, 0x00000000);
[20:11:31.683]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:11:31.683]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:11:31.685]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:11:31.685]        // -> [powered_down <= 0x00000001]
[20:11:31.685]    </block>
[20:11:31.685]    <control if="powered_down" while="" timeout="0" info="">
[20:11:31.685]      // if-block "powered_down"
[20:11:31.686]        // =>  TRUE
[20:11:31.686]      <block atomic="false" info="">
[20:11:31.686]        Message(0, "Debug/System power-up request sent");
[20:11:31.687]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:11:31.691]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:11:31.691]      </block>
[20:11:31.691]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:11:31.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:11:31.693]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:11:31.693]        // while-condition  =>  FALSE
[20:11:31.693]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:11:31.693]      </control>
[20:11:31.694]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:11:31.694]        // if-block "(__protocol & 0xFFFF) == 1"
[20:11:31.694]          // =>  FALSE
[20:11:31.694]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:11:31.694]      </control>
[20:11:31.694]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:11:31.694]        // if-block "(__protocol & 0xFFFF) == 2"
[20:11:31.695]          // =>  TRUE
[20:11:31.695]        <block atomic="false" info="">
[20:11:31.695]          Message(0, "executing SWD power up");
[20:11:31.698]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:11:31.699]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:11:31.699]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:11:31.701]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:11:31.701]        </block>
[20:11:31.702]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:11:31.702]      </control>
[20:11:31.702]      // end if-block "powered_down"
[20:11:31.702]    </control>
[20:11:31.702]    <block atomic="false" info="">
[20:11:31.702]      __var DEBUG_PORT_VAL    = 0;
[20:11:31.702]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:11:31.702]      __var ACCESS_POINT_VAL  = 0;
[20:11:31.702]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:11:31.702]      __ap = 1; 
[20:11:31.702]        // -> [__ap <= 0x00000001]
[20:11:31.702]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:11:31.705]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:11:31.706]      __ap = 4;
[20:11:31.706]        // -> [__ap <= 0x00000004]
[20:11:31.706]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:11:31.710]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:11:31.710]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:11:31.710]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:11:31.712]    </block>
[20:11:31.713]    <block atomic="false" info="">
[20:11:31.713]      __var nReset = 0x80;
[20:11:31.713]        // -> [nReset <= 0x00000080]
[20:11:31.713]      __var canReadPins = 0;
[20:11:31.713]        // -> [canReadPins <= 0x00000000]
[20:11:31.713]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:11:31.715]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:11:31.716]        // -> [canReadPins <= 0x00000001]
[20:11:31.716]    </block>
[20:11:31.716]    <control if="" while="1" timeout="200" info="">
[20:11:31.716]      // while "1"  (timeout="200")
[20:11:31.716]      // while-condition  =>  TRUE
[20:11:31.716]      // while "1"  (timeout="200")
[20:11:31.716]      // while-condition  =>  TRUE
[20:11:31.716]      // while "1"  (timeout="200")
[20:11:31.716]      // while-condition  =>  TRUE
[20:11:31.716]      // while "1"  (timeout="200")
[20:11:31.716]      // while-condition  =>  TRUE
[20:11:31.717]      // while "1"  (timeout="200")
[20:11:31.717]      // while-condition  =>  TRUE
[20:11:31.717]      // while "1"  (timeout="200")
[20:11:31.717]      // while-condition  =>  TRUE
[20:11:31.717]      // while "1"  (timeout="200")
[20:11:31.717]      // while-condition  =>  TRUE
[20:11:31.717]      // while "1"  (timeout="200")
[20:11:31.717]      // while-condition  =>  TRUE
[20:11:31.717]      // while "1"  (timeout="200")
[20:11:31.717]      // while-condition  =>  TRUE
[20:11:31.717]      // while "1"  (timeout="200")
[20:11:31.717]      // while-condition  =>  TRUE
[20:11:31.718]      // while "1"  (timeout="200")
[20:11:31.718]      // while-condition  =>  TRUE
[20:11:31.718]      // while "1"  (timeout="200")
[20:11:31.718]      // while-condition  =>  TRUE
[20:11:31.718]      // while "1"  (timeout="200")
[20:11:31.718]      // while-condition  =>  TRUE
[20:11:31.718]      // while "1"  (timeout="200")
[20:11:31.718]      // while-condition  =>  TRUE
[20:11:31.718]      // while "1"  (timeout="200")
[20:11:31.718]      // while-condition  =>  TRUE
[20:11:31.718]      // while "1"  (timeout="200")
[20:11:31.718]      // while-condition  =>  TRUE
[20:11:31.718]      // while "1"  (timeout="200")
[20:11:31.718]      // while-condition  =>  TRUE
[20:11:31.719]      // while "1"  (timeout="200")
[20:11:31.719]      // while-condition  =>  TRUE
[20:11:31.719]      // while "1"  (timeout="200")
[20:11:31.719]      // while-condition  =>  TRUE
[20:11:31.719]      // while "1"  (timeout="200")
[20:11:31.719]      // while-condition  =>  TRUE
[20:11:31.719]      // while "1"  (timeout="200")
[20:11:31.719]      // while-condition  =>  TRUE
[20:11:31.719]      // while "1"  (timeout="200")
[20:11:31.719]      // while-condition  =>  TRUE
[20:11:31.719]      // while "1"  (timeout="200")
[20:11:31.720]      // while-condition  =>  TRUE
[20:11:31.720]      // while "1"  (timeout="200")
[20:11:31.720]      // while-condition  =>  TRUE
[20:11:31.720]      // while "1"  (timeout="200")
[20:11:31.720]      // while-condition  =>  TRUE
[20:11:31.720]      // while "1"  (timeout="200")
[20:11:31.720]      // while-condition  =>  TRUE
[20:11:31.720]      // while "1"  (timeout="200")
[20:11:31.720]      // while-condition  =>  TRUE
[20:11:31.720]      // while "1"  (timeout="200")
[20:11:31.720]      // while-condition  =>  TRUE
[20:11:31.720]      // while "1"  (timeout="200")
[20:11:31.720]      // while-condition  =>  TRUE
[20:11:31.721]      // while "1"  (timeout="200")
[20:11:31.721]      // while  =>  TIMEOUT
[20:11:31.721]      // end while "1"
[20:11:31.721]    </control>
[20:11:31.721]    <control if="canReadPins" while="" timeout="0" info="">
[20:11:31.721]      // if-block "canReadPins"
[20:11:31.721]        // =>  TRUE
[20:11:31.721]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:11:31.721]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:11:31.722]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:11:31.723]        // while-condition  =>  FALSE
[20:11:31.723]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:11:31.723]      </control>
[20:11:31.723]      // end if-block "canReadPins"
[20:11:31.723]    </control>
[20:11:31.723]    <control if="!canReadPins" while="" timeout="0" info="">
[20:11:31.723]      // if-block "!canReadPins"
[20:11:31.723]        // =>  FALSE
[20:11:31.723]      // skip if-block "!canReadPins"
[20:11:31.723]    </control>
[20:11:31.723]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:11:31.723]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:11:31.723]        // =>  TRUE
[20:11:31.725]      <block atomic="false" info="">
[20:11:31.725]        WriteAP(0x00, 0x190008);
[20:11:31.726]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:11:31.727]        WriteAP(0xF0, 0x01);
[20:11:31.731]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:11:31.731]      </block>
[20:11:31.731]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:11:31.731]    </control>
[20:11:31.731]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:11:31.731]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:11:31.731]        // =>  FALSE
[20:11:31.731]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:11:31.731]    </control>
[20:11:31.731]    <block atomic="false" info="">
[20:11:31.731]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:11:31.734]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:11:31.734]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:11:31.735]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:11:31.736]      __ap = 0; //lets make sure we reset the access point selection
[20:11:31.736]        // -> [__ap <= 0x00000000]
[20:11:31.736]    </block>
[20:11:31.736]  </sequence>
[20:11:31.737]  
[20:11:31.759]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:11:31.759]  
[20:11:31.759]  <debugvars>
[20:11:31.759]    // Pre-defined
[20:11:31.759]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:11:31.759]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:11:31.759]    __dp=0x00000000
[20:11:31.759]    __ap=0x00000000
[20:11:31.759]    __traceout=0x00000000      (Trace Disabled)
[20:11:31.759]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:11:31.759]    __FlashAddr=0x00000000
[20:11:31.759]    __FlashLen=0x00000000
[20:11:31.759]    __FlashArg=0x00000000
[20:11:31.759]    __FlashOp=0x00000000
[20:11:31.759]    __Result=0x00000000
[20:11:31.759]  </debugvars>
[20:11:31.759]  
[20:11:31.760]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:11:31.760]    <block atomic="false" info="">
[20:11:31.760]      __var deviceID = 0;
[20:11:31.760]        // -> [deviceID <= 0x00000000]
[20:11:31.760]      __var version = 0;
[20:11:31.760]        // -> [version <= 0x00000000]
[20:11:31.760]      __var partNum = 0;
[20:11:31.760]        // -> [partNum <= 0x00000000]
[20:11:31.760]      __var manuf = 0;
[20:11:31.760]        // -> [manuf <= 0x00000000]
[20:11:31.761]      __var isMSPM0G1X0X_G3X0X = 0;
[20:11:31.761]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:11:31.761]      __var isProduction = 0;
[20:11:31.761]        // -> [isProduction <= 0x00000000]
[20:11:31.761]      __var continueId = 0;
[20:11:31.761]        // -> [continueId <= 0x00000000]
[20:11:31.761]      deviceID =   Read32(0x41C40004);
[20:11:31.767]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:11:31.767]        // -> [deviceID <= 0x2BB8802F]
[20:11:31.767]      version = deviceID >> 28;
[20:11:31.767]        // -> [version <= 0x00000002]
[20:11:31.767]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:11:31.767]        // -> [partNum <= 0x0000BB88]
[20:11:31.767]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:11:31.767]        // -> [manuf <= 0x00000017]
[20:11:31.767]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:11:31.767]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:11:31.767]      isProduction = (version > 0);
[20:11:31.767]        // -> [isProduction <= 0x00000001]
[20:11:31.768]    </block>
[20:11:31.768]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:11:31.768]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:11:31.768]        // =>  FALSE
[20:11:31.768]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:11:31.768]    </control>
[20:11:31.768]    <control if="continueId == 4" while="" timeout="0" info="">
[20:11:31.768]      // if-block "continueId == 4"
[20:11:31.768]        // =>  FALSE
[20:11:31.768]      // skip if-block "continueId == 4"
[20:11:31.768]    </control>
[20:11:31.768]    <control if="!isProduction" while="" timeout="0" info="">
[20:11:31.770]      // if-block "!isProduction"
[20:11:31.770]        // =>  FALSE
[20:11:31.770]      // skip if-block "!isProduction"
[20:11:31.770]    </control>
[20:11:31.770]  </sequence>
[20:11:31.770]  
[20:11:48.933]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:11:48.933]  
[20:11:48.935]  <debugvars>
[20:11:48.935]    // Pre-defined
[20:11:48.935]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:11:48.935]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:11:48.935]    __dp=0x00000000
[20:11:48.936]    __ap=0x00000000
[20:11:48.937]    __traceout=0x00000000      (Trace Disabled)
[20:11:48.937]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:11:48.937]    __FlashAddr=0x00000000
[20:11:48.937]    __FlashLen=0x00000000
[20:11:48.937]    __FlashArg=0x00000000
[20:11:48.937]    __FlashOp=0x00000000
[20:11:48.937]    __Result=0x00000000
[20:11:48.937]  </debugvars>
[20:11:48.937]  
[20:11:48.937]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:11:48.937]    <block atomic="false" info="">
[20:11:48.937]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:11:48.937]        // -> [isSWJ <= 0x00000001]
[20:11:48.937]      __var hasDormant = __protocol & 0x00020000;
[20:11:48.938]        // -> [hasDormant <= 0x00000000]
[20:11:48.938]      __var protType   = __protocol & 0x0000FFFF;
[20:11:48.938]        // -> [protType <= 0x00000002]
[20:11:48.938]    </block>
[20:11:48.938]    <control if="protType == 1" while="" timeout="0" info="">
[20:11:48.938]      // if-block "protType == 1"
[20:11:48.938]        // =>  FALSE
[20:11:48.938]      // skip if-block "protType == 1"
[20:11:48.938]    </control>
[20:11:48.938]    <control if="protType == 2" while="" timeout="0" info="">
[20:11:48.938]      // if-block "protType == 2"
[20:11:48.938]        // =>  TRUE
[20:11:48.939]      <control if="isSWJ" while="" timeout="0" info="">
[20:11:48.939]        // if-block "isSWJ"
[20:11:48.939]          // =>  TRUE
[20:11:48.939]        <control if="hasDormant" while="" timeout="0" info="">
[20:11:48.939]          // if-block "hasDormant"
[20:11:48.939]            // =>  FALSE
[20:11:48.939]          // skip if-block "hasDormant"
[20:11:48.939]        </control>
[20:11:48.939]        <control if="!hasDormant" while="" timeout="0" info="">
[20:11:48.939]          // if-block "!hasDormant"
[20:11:48.939]            // =>  TRUE
[20:11:48.939]          <block atomic="false" info="">
[20:11:48.939]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:11:48.949]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:11:48.949]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:11:48.950]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:11:48.950]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:11:48.953]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:11:48.954]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:11:48.955]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:11:48.955]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:11:48.957]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:11:48.957]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:11:48.958]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:11:48.958]          </block>
[20:11:48.958]          // end if-block "!hasDormant"
[20:11:48.958]        </control>
[20:11:48.958]        // end if-block "isSWJ"
[20:11:48.958]      </control>
[20:11:48.958]      <control if="!isSWJ" while="" timeout="0" info="">
[20:11:48.958]        // if-block "!isSWJ"
[20:11:48.958]          // =>  FALSE
[20:11:48.958]        // skip if-block "!isSWJ"
[20:11:48.958]      </control>
[20:11:48.959]      <block atomic="false" info="">
[20:11:48.959]        ReadDP(0x0);
[20:11:48.960]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:11:48.960]      </block>
[20:11:48.960]      // end if-block "protType == 2"
[20:11:48.960]    </control>
[20:11:48.960]  </sequence>
[20:11:48.960]  
[20:11:48.970]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:11:48.970]  
[20:11:48.970]  <debugvars>
[20:11:48.970]    // Pre-defined
[20:11:48.971]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:11:48.971]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:11:48.971]    __dp=0x00000000
[20:11:48.971]    __ap=0x00000000
[20:11:48.971]    __traceout=0x00000000      (Trace Disabled)
[20:11:48.971]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:11:48.971]    __FlashAddr=0x00000000
[20:11:48.971]    __FlashLen=0x00000000
[20:11:48.971]    __FlashArg=0x00000000
[20:11:48.971]    __FlashOp=0x00000000
[20:11:48.972]    __Result=0x00000000
[20:11:48.972]  </debugvars>
[20:11:48.972]  
[20:11:48.972]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:11:48.972]    <block atomic="false" info="">
[20:11:48.972]      __var SW_DP_ABORT       = 0x0;
[20:11:48.972]        // -> [SW_DP_ABORT <= 0x00000000]
[20:11:48.972]      __var DP_CTRL_STAT      = 0x4;
[20:11:48.972]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:11:48.972]      __var DP_SELECT         = 0x8;
[20:11:48.972]        // -> [DP_SELECT <= 0x00000008]
[20:11:48.972]      __var powered_down      = 0;
[20:11:48.973]        // -> [powered_down <= 0x00000000]
[20:11:48.973]      WriteDP(DP_SELECT, 0x00000000);
[20:11:48.975]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:11:48.975]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:11:48.976]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:11:48.976]        // -> [powered_down <= 0x00000001]
[20:11:48.976]    </block>
[20:11:48.976]    <control if="powered_down" while="" timeout="0" info="">
[20:11:48.976]      // if-block "powered_down"
[20:11:48.976]        // =>  TRUE
[20:11:48.977]      <block atomic="false" info="">
[20:11:48.977]        Message(0, "Debug/System power-up request sent");
[20:11:48.978]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:11:48.982]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:11:48.982]      </block>
[20:11:48.982]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:11:48.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:11:48.985]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:11:48.985]        // while-condition  =>  FALSE
[20:11:48.985]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:11:48.985]      </control>
[20:11:48.985]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:11:48.985]        // if-block "(__protocol & 0xFFFF) == 1"
[20:11:48.985]          // =>  FALSE
[20:11:48.985]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:11:48.986]      </control>
[20:11:48.986]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:11:48.986]        // if-block "(__protocol & 0xFFFF) == 2"
[20:11:48.986]          // =>  TRUE
[20:11:48.986]        <block atomic="false" info="">
[20:11:48.986]          Message(0, "executing SWD power up");
[20:11:48.988]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:11:48.991]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:11:48.991]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:11:48.993]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:11:48.993]        </block>
[20:11:48.994]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:11:48.994]      </control>
[20:11:48.994]      // end if-block "powered_down"
[20:11:48.994]    </control>
[20:11:48.994]    <block atomic="false" info="">
[20:11:48.994]      __var DEBUG_PORT_VAL    = 0;
[20:11:48.994]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:11:48.995]      __var ACCESS_POINT_VAL  = 0;
[20:11:48.995]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:11:48.995]      __ap = 1; 
[20:11:48.995]        // -> [__ap <= 0x00000001]
[20:11:48.995]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:11:48.998]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:11:48.998]      __ap = 4;
[20:11:48.998]        // -> [__ap <= 0x00000004]
[20:11:48.998]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:11:49.004]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:11:49.005]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:11:49.005]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:11:49.006]    </block>
[20:11:49.006]    <block atomic="false" info="">
[20:11:49.006]      __var nReset = 0x80;
[20:11:49.006]        // -> [nReset <= 0x00000080]
[20:11:49.006]      __var canReadPins = 0;
[20:11:49.007]        // -> [canReadPins <= 0x00000000]
[20:11:49.007]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:11:49.013]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:11:49.013]        // -> [canReadPins <= 0x00000001]
[20:11:49.013]    </block>
[20:11:49.013]    <control if="" while="1" timeout="200" info="">
[20:11:49.013]      // while "1"  (timeout="200")
[20:11:49.013]      // while-condition  =>  TRUE
[20:11:49.013]      // while "1"  (timeout="200")
[20:11:49.013]      // while-condition  =>  TRUE
[20:11:49.014]      // while "1"  (timeout="200")
[20:11:49.014]      // while-condition  =>  TRUE
[20:11:49.014]      // while "1"  (timeout="200")
[20:11:49.014]      // while-condition  =>  TRUE
[20:11:49.014]      // while "1"  (timeout="200")
[20:11:49.014]      // while-condition  =>  TRUE
[20:11:49.014]      // while "1"  (timeout="200")
[20:11:49.014]      // while-condition  =>  TRUE
[20:11:49.014]      // while "1"  (timeout="200")
[20:11:49.014]      // while-condition  =>  TRUE
[20:11:49.014]      // while "1"  (timeout="200")
[20:11:49.015]      // while-condition  =>  TRUE
[20:11:49.015]      // while "1"  (timeout="200")
[20:11:49.015]      // while-condition  =>  TRUE
[20:11:49.015]      // while "1"  (timeout="200")
[20:11:49.015]      // while-condition  =>  TRUE
[20:11:49.015]      // while "1"  (timeout="200")
[20:11:49.015]      // while-condition  =>  TRUE
[20:11:49.015]      // while "1"  (timeout="200")
[20:11:49.015]      // while-condition  =>  TRUE
[20:11:49.015]      // while "1"  (timeout="200")
[20:11:49.015]      // while-condition  =>  TRUE
[20:11:49.015]      // while "1"  (timeout="200")
[20:11:49.016]      // while-condition  =>  TRUE
[20:11:49.016]      // while "1"  (timeout="200")
[20:11:49.016]      // while-condition  =>  TRUE
[20:11:49.016]      // while "1"  (timeout="200")
[20:11:49.016]      // while-condition  =>  TRUE
[20:11:49.016]      // while "1"  (timeout="200")
[20:11:49.016]      // while-condition  =>  TRUE
[20:11:49.016]      // while "1"  (timeout="200")
[20:11:49.016]      // while-condition  =>  TRUE
[20:11:49.017]      // while "1"  (timeout="200")
[20:11:49.017]      // while-condition  =>  TRUE
[20:11:49.017]      // while "1"  (timeout="200")
[20:11:49.017]      // while-condition  =>  TRUE
[20:11:49.017]      // while "1"  (timeout="200")
[20:11:49.017]      // while-condition  =>  TRUE
[20:11:49.017]      // while "1"  (timeout="200")
[20:11:49.017]      // while-condition  =>  TRUE
[20:11:49.017]      // while "1"  (timeout="200")
[20:11:49.017]      // while-condition  =>  TRUE
[20:11:49.017]      // while "1"  (timeout="200")
[20:11:49.017]      // while-condition  =>  TRUE
[20:11:49.018]      // while "1"  (timeout="200")
[20:11:49.018]      // while-condition  =>  TRUE
[20:11:49.018]      // while "1"  (timeout="200")
[20:11:49.018]      // while-condition  =>  TRUE
[20:11:49.018]      // while "1"  (timeout="200")
[20:11:49.018]      // while-condition  =>  TRUE
[20:11:49.018]      // while "1"  (timeout="200")
[20:11:49.018]      // while-condition  =>  TRUE
[20:11:49.018]      // while "1"  (timeout="200")
[20:11:49.018]      // while-condition  =>  TRUE
[20:11:49.018]      // while "1"  (timeout="200")
[20:11:49.018]      // while-condition  =>  TRUE
[20:11:49.019]      // while "1"  (timeout="200")
[20:11:49.019]      // while  =>  TIMEOUT
[20:11:49.019]      // end while "1"
[20:11:49.019]    </control>
[20:11:49.019]    <control if="canReadPins" while="" timeout="0" info="">
[20:11:49.019]      // if-block "canReadPins"
[20:11:49.019]        // =>  TRUE
[20:11:49.019]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:11:49.019]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:11:49.021]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:11:49.021]        // while-condition  =>  FALSE
[20:11:49.021]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:11:49.021]      </control>
[20:11:49.021]      // end if-block "canReadPins"
[20:11:49.022]    </control>
[20:11:49.022]    <control if="!canReadPins" while="" timeout="0" info="">
[20:11:49.022]      // if-block "!canReadPins"
[20:11:49.022]        // =>  FALSE
[20:11:49.022]      // skip if-block "!canReadPins"
[20:11:49.022]    </control>
[20:11:49.022]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:11:49.022]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:11:49.022]        // =>  TRUE
[20:11:49.022]      <block atomic="false" info="">
[20:11:49.023]        WriteAP(0x00, 0x190008);
[20:11:49.026]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:11:49.026]        WriteAP(0xF0, 0x01);
[20:11:49.031]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:11:49.031]      </block>
[20:11:49.031]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:11:49.031]    </control>
[20:11:49.031]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:11:49.032]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:11:49.032]        // =>  FALSE
[20:11:49.032]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:11:49.032]    </control>
[20:11:49.032]    <block atomic="false" info="">
[20:11:49.032]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:11:49.035]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:11:49.035]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:11:49.035]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:11:49.037]      __ap = 0; //lets make sure we reset the access point selection
[20:11:49.038]        // -> [__ap <= 0x00000000]
[20:11:49.038]    </block>
[20:11:49.038]  </sequence>
[20:11:49.038]  
[20:11:49.063]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:11:49.063]  
[20:11:49.064]  <debugvars>
[20:11:49.064]    // Pre-defined
[20:11:49.064]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:11:49.064]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:11:49.064]    __dp=0x00000000
[20:11:49.064]    __ap=0x00000000
[20:11:49.064]    __traceout=0x00000000      (Trace Disabled)
[20:11:49.064]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:11:49.064]    __FlashAddr=0x00000000
[20:11:49.064]    __FlashLen=0x00000000
[20:11:49.064]    __FlashArg=0x00000000
[20:11:49.065]    __FlashOp=0x00000000
[20:11:49.065]    __Result=0x00000000
[20:11:49.065]  </debugvars>
[20:11:49.065]  
[20:11:49.065]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:11:49.065]    <block atomic="false" info="">
[20:11:49.065]      __var deviceID = 0;
[20:11:49.066]        // -> [deviceID <= 0x00000000]
[20:11:49.066]      __var version = 0;
[20:11:49.066]        // -> [version <= 0x00000000]
[20:11:49.066]      __var partNum = 0;
[20:11:49.066]        // -> [partNum <= 0x00000000]
[20:11:49.066]      __var manuf = 0;
[20:11:49.066]        // -> [manuf <= 0x00000000]
[20:11:49.066]      __var isMSPM0G1X0X_G3X0X = 0;
[20:11:49.066]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:11:49.067]      __var isProduction = 0;
[20:11:49.067]        // -> [isProduction <= 0x00000000]
[20:11:49.067]      __var continueId = 0;
[20:11:49.067]        // -> [continueId <= 0x00000000]
[20:11:49.067]      deviceID =   Read32(0x41C40004);
[20:11:49.072]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:11:49.072]        // -> [deviceID <= 0x2BB8802F]
[20:11:49.072]      version = deviceID >> 28;
[20:11:49.072]        // -> [version <= 0x00000002]
[20:11:49.072]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:11:49.073]        // -> [partNum <= 0x0000BB88]
[20:11:49.073]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:11:49.073]        // -> [manuf <= 0x00000017]
[20:11:49.073]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:11:49.073]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:11:49.073]      isProduction = (version > 0);
[20:11:49.073]        // -> [isProduction <= 0x00000001]
[20:11:49.073]    </block>
[20:11:49.073]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:11:49.073]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:11:49.074]        // =>  FALSE
[20:11:49.074]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:11:49.074]    </control>
[20:11:49.074]    <control if="continueId == 4" while="" timeout="0" info="">
[20:11:49.074]      // if-block "continueId == 4"
[20:11:49.074]        // =>  FALSE
[20:11:49.075]      // skip if-block "continueId == 4"
[20:11:49.075]    </control>
[20:11:49.075]    <control if="!isProduction" while="" timeout="0" info="">
[20:11:49.075]      // if-block "!isProduction"
[20:11:49.075]        // =>  FALSE
[20:11:49.075]      // skip if-block "!isProduction"
[20:11:49.075]    </control>
[20:11:49.076]  </sequence>
[20:11:49.076]  
[20:14:09.856]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:14:09.856]  
[20:14:09.864]  <debugvars>
[20:14:09.864]    // Pre-defined
[20:14:09.864]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:14:09.864]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:14:09.864]    __dp=0x00000000
[20:14:09.864]    __ap=0x00000000
[20:14:09.864]    __traceout=0x00000000      (Trace Disabled)
[20:14:09.864]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:14:09.864]    __FlashAddr=0x00000000
[20:14:09.864]    __FlashLen=0x00000000
[20:14:09.864]    __FlashArg=0x00000000
[20:14:09.864]    __FlashOp=0x00000000
[20:14:09.864]    __Result=0x00000000
[20:14:09.864]  </debugvars>
[20:14:09.864]  
[20:14:09.864]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:14:09.866]    <block atomic="false" info="">
[20:14:09.866]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:14:09.866]        // -> [isSWJ <= 0x00000001]
[20:14:09.866]      __var hasDormant = __protocol & 0x00020000;
[20:14:09.866]        // -> [hasDormant <= 0x00000000]
[20:14:09.866]      __var protType   = __protocol & 0x0000FFFF;
[20:14:09.866]        // -> [protType <= 0x00000002]
[20:14:09.866]    </block>
[20:14:09.866]    <control if="protType == 1" while="" timeout="0" info="">
[20:14:09.867]      // if-block "protType == 1"
[20:14:09.867]        // =>  FALSE
[20:14:09.867]      // skip if-block "protType == 1"
[20:14:09.867]    </control>
[20:14:09.867]    <control if="protType == 2" while="" timeout="0" info="">
[20:14:09.867]      // if-block "protType == 2"
[20:14:09.867]        // =>  TRUE
[20:14:09.867]      <control if="isSWJ" while="" timeout="0" info="">
[20:14:09.867]        // if-block "isSWJ"
[20:14:09.868]          // =>  TRUE
[20:14:09.868]        <control if="hasDormant" while="" timeout="0" info="">
[20:14:09.868]          // if-block "hasDormant"
[20:14:09.868]            // =>  FALSE
[20:14:09.868]          // skip if-block "hasDormant"
[20:14:09.868]        </control>
[20:14:09.868]        <control if="!hasDormant" while="" timeout="0" info="">
[20:14:09.868]          // if-block "!hasDormant"
[20:14:09.868]            // =>  TRUE
[20:14:09.868]          <block atomic="false" info="">
[20:14:09.869]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:14:09.870]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:14:09.870]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:14:09.877]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:14:09.877]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:14:09.880]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:14:09.880]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:14:09.881]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:14:09.882]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:14:09.883]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:14:09.883]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:14:09.884]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:14:09.884]          </block>
[20:14:09.884]          // end if-block "!hasDormant"
[20:14:09.884]        </control>
[20:14:09.884]        // end if-block "isSWJ"
[20:14:09.884]      </control>
[20:14:09.884]      <control if="!isSWJ" while="" timeout="0" info="">
[20:14:09.884]        // if-block "!isSWJ"
[20:14:09.884]          // =>  FALSE
[20:14:09.884]        // skip if-block "!isSWJ"
[20:14:09.884]      </control>
[20:14:09.886]      <block atomic="false" info="">
[20:14:09.886]        ReadDP(0x0);
[20:14:09.889]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:14:09.889]      </block>
[20:14:09.889]      // end if-block "protType == 2"
[20:14:09.889]    </control>
[20:14:09.889]  </sequence>
[20:14:09.889]  
[20:14:09.889]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:14:09.889]  
[20:14:09.889]  <debugvars>
[20:14:09.889]    // Pre-defined
[20:14:09.889]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:14:09.889]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:14:09.889]    __dp=0x00000000
[20:14:09.889]    __ap=0x00000000
[20:14:09.889]    __traceout=0x00000000      (Trace Disabled)
[20:14:09.889]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:14:09.889]    __FlashAddr=0x00000000
[20:14:09.889]    __FlashLen=0x00000000
[20:14:09.889]    __FlashArg=0x00000000
[20:14:09.889]    __FlashOp=0x00000000
[20:14:09.889]    __Result=0x00000000
[20:14:09.889]  </debugvars>
[20:14:09.889]  
[20:14:09.889]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:14:09.889]    <block atomic="false" info="">
[20:14:09.889]      __var SW_DP_ABORT       = 0x0;
[20:14:09.889]        // -> [SW_DP_ABORT <= 0x00000000]
[20:14:09.889]      __var DP_CTRL_STAT      = 0x4;
[20:14:09.889]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:14:09.889]      __var DP_SELECT         = 0x8;
[20:14:09.889]        // -> [DP_SELECT <= 0x00000008]
[20:14:09.889]      __var powered_down      = 0;
[20:14:09.889]        // -> [powered_down <= 0x00000000]
[20:14:09.889]      WriteDP(DP_SELECT, 0x00000000);
[20:14:09.896]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:14:09.896]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:14:09.896]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:14:09.896]        // -> [powered_down <= 0x00000001]
[20:14:09.896]    </block>
[20:14:09.896]    <control if="powered_down" while="" timeout="0" info="">
[20:14:09.896]      // if-block "powered_down"
[20:14:09.896]        // =>  TRUE
[20:14:09.896]      <block atomic="false" info="">
[20:14:09.896]        Message(0, "Debug/System power-up request sent");
[20:14:09.906]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:14:09.906]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:14:09.906]      </block>
[20:14:09.906]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:14:09.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:14:09.906]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:14:09.906]        // while-condition  =>  FALSE
[20:14:09.906]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:14:09.906]      </control>
[20:14:09.906]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:14:09.906]        // if-block "(__protocol & 0xFFFF) == 1"
[20:14:09.906]          // =>  FALSE
[20:14:09.906]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:14:09.906]      </control>
[20:14:09.906]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:14:09.906]        // if-block "(__protocol & 0xFFFF) == 2"
[20:14:09.906]          // =>  TRUE
[20:14:09.906]        <block atomic="false" info="">
[20:14:09.906]          Message(0, "executing SWD power up");
[20:14:09.906]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:14:09.916]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:14:09.916]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:14:09.916]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:14:09.916]        </block>
[20:14:09.916]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:14:09.916]      </control>
[20:14:09.916]      // end if-block "powered_down"
[20:14:09.916]    </control>
[20:14:09.916]    <block atomic="false" info="">
[20:14:09.916]      __var DEBUG_PORT_VAL    = 0;
[20:14:09.916]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:14:09.916]      __var ACCESS_POINT_VAL  = 0;
[20:14:09.916]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:14:09.916]      __ap = 1; 
[20:14:09.916]        // -> [__ap <= 0x00000001]
[20:14:09.916]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:14:09.916]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:14:09.916]      __ap = 4;
[20:14:09.916]        // -> [__ap <= 0x00000004]
[20:14:09.916]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:14:09.927]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:14:09.927]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:14:09.927]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:14:09.927]    </block>
[20:14:09.927]    <block atomic="false" info="">
[20:14:09.927]      __var nReset = 0x80;
[20:14:09.927]        // -> [nReset <= 0x00000080]
[20:14:09.927]      __var canReadPins = 0;
[20:14:09.927]        // -> [canReadPins <= 0x00000000]
[20:14:09.927]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:14:09.927]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:14:09.936]        // -> [canReadPins <= 0x00000001]
[20:14:09.936]    </block>
[20:14:09.936]    <control if="" while="1" timeout="200" info="">
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.936]      // while "1"  (timeout="200")
[20:14:09.936]      // while-condition  =>  TRUE
[20:14:09.946]      // while "1"  (timeout="200")
[20:14:09.946]      // while  =>  TIMEOUT
[20:14:09.946]      // end while "1"
[20:14:09.946]    </control>
[20:14:09.946]    <control if="canReadPins" while="" timeout="0" info="">
[20:14:09.946]      // if-block "canReadPins"
[20:14:09.946]        // =>  TRUE
[20:14:09.946]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:14:09.946]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:14:09.956]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:14:09.956]        // while-condition  =>  FALSE
[20:14:09.956]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:14:09.956]      </control>
[20:14:09.956]      // end if-block "canReadPins"
[20:14:09.956]    </control>
[20:14:09.956]    <control if="!canReadPins" while="" timeout="0" info="">
[20:14:09.956]      // if-block "!canReadPins"
[20:14:09.956]        // =>  FALSE
[20:14:09.956]      // skip if-block "!canReadPins"
[20:14:09.956]    </control>
[20:14:09.956]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:14:09.956]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:14:09.956]        // =>  TRUE
[20:14:09.956]      <block atomic="false" info="">
[20:14:09.956]        WriteAP(0x00, 0x190008);
[20:14:09.956]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:14:09.956]        WriteAP(0xF0, 0x01);
[20:14:09.966]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:14:09.966]      </block>
[20:14:09.966]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:14:09.966]    </control>
[20:14:09.966]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:14:09.966]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:14:09.966]        // =>  FALSE
[20:14:09.966]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:14:09.966]    </control>
[20:14:09.966]    <block atomic="false" info="">
[20:14:09.966]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:14:09.987]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:14:09.987]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:14:09.987]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:14:09.987]      __ap = 0; //lets make sure we reset the access point selection
[20:14:09.987]        // -> [__ap <= 0x00000000]
[20:14:09.987]    </block>
[20:14:09.987]  </sequence>
[20:14:09.987]  
[20:14:10.017]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:14:10.017]  
[20:14:10.017]  <debugvars>
[20:14:10.017]    // Pre-defined
[20:14:10.017]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:14:10.017]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:14:10.017]    __dp=0x00000000
[20:14:10.017]    __ap=0x00000000
[20:14:10.017]    __traceout=0x00000000      (Trace Disabled)
[20:14:10.017]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:14:10.017]    __FlashAddr=0x00000000
[20:14:10.017]    __FlashLen=0x00000000
[20:14:10.017]    __FlashArg=0x00000000
[20:14:10.017]    __FlashOp=0x00000000
[20:14:10.017]    __Result=0x00000000
[20:14:10.027]  </debugvars>
[20:14:10.027]  
[20:14:10.027]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:14:10.027]    <block atomic="false" info="">
[20:14:10.027]      __var deviceID = 0;
[20:14:10.027]        // -> [deviceID <= 0x00000000]
[20:14:10.027]      __var version = 0;
[20:14:10.027]        // -> [version <= 0x00000000]
[20:14:10.027]      __var partNum = 0;
[20:14:10.027]        // -> [partNum <= 0x00000000]
[20:14:10.027]      __var manuf = 0;
[20:14:10.027]        // -> [manuf <= 0x00000000]
[20:14:10.027]      __var isMSPM0G1X0X_G3X0X = 0;
[20:14:10.027]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:14:10.027]      __var isProduction = 0;
[20:14:10.027]        // -> [isProduction <= 0x00000000]
[20:14:10.027]      __var continueId = 0;
[20:14:10.027]        // -> [continueId <= 0x00000000]
[20:14:10.027]      deviceID =   Read32(0x41C40004);
[20:14:10.027]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:14:10.027]        // -> [deviceID <= 0x2BB8802F]
[20:14:10.027]      version = deviceID >> 28;
[20:14:10.027]        // -> [version <= 0x00000002]
[20:14:10.027]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:14:10.027]        // -> [partNum <= 0x0000BB88]
[20:14:10.027]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:14:10.027]        // -> [manuf <= 0x00000017]
[20:14:10.027]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:14:10.027]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:14:10.027]      isProduction = (version > 0);
[20:14:10.027]        // -> [isProduction <= 0x00000001]
[20:14:10.027]    </block>
[20:14:10.027]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:14:10.027]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:14:10.027]        // =>  FALSE
[20:14:10.037]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:14:10.037]    </control>
[20:14:10.037]    <control if="continueId == 4" while="" timeout="0" info="">
[20:14:10.037]      // if-block "continueId == 4"
[20:14:10.037]        // =>  FALSE
[20:14:10.037]      // skip if-block "continueId == 4"
[20:14:10.037]    </control>
[20:14:10.037]    <control if="!isProduction" while="" timeout="0" info="">
[20:14:10.037]      // if-block "!isProduction"
[20:14:10.037]        // =>  FALSE
[20:14:10.037]      // skip if-block "!isProduction"
[20:14:10.037]    </control>
[20:14:10.037]  </sequence>
[20:14:10.037]  
[20:16:01.614]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:16:01.614]  
[20:16:01.631]  <debugvars>
[20:16:01.631]    // Pre-defined
[20:16:01.631]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:16:01.631]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:16:01.631]    __dp=0x00000000
[20:16:01.631]    __ap=0x00000000
[20:16:01.631]    __traceout=0x00000000      (Trace Disabled)
[20:16:01.631]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:16:01.631]    __FlashAddr=0x00000000
[20:16:01.631]    __FlashLen=0x00000000
[20:16:01.631]    __FlashArg=0x00000000
[20:16:01.631]    __FlashOp=0x00000000
[20:16:01.631]    __Result=0x00000000
[20:16:01.631]  </debugvars>
[20:16:01.631]  
[20:16:01.631]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:16:01.631]    <block atomic="false" info="">
[20:16:01.631]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:16:01.631]        // -> [isSWJ <= 0x00000001]
[20:16:01.631]      __var hasDormant = __protocol & 0x00020000;
[20:16:01.631]        // -> [hasDormant <= 0x00000000]
[20:16:01.631]      __var protType   = __protocol & 0x0000FFFF;
[20:16:01.631]        // -> [protType <= 0x00000002]
[20:16:01.631]    </block>
[20:16:01.631]    <control if="protType == 1" while="" timeout="0" info="">
[20:16:01.634]      // if-block "protType == 1"
[20:16:01.634]        // =>  FALSE
[20:16:01.634]      // skip if-block "protType == 1"
[20:16:01.634]    </control>
[20:16:01.634]    <control if="protType == 2" while="" timeout="0" info="">
[20:16:01.634]      // if-block "protType == 2"
[20:16:01.634]        // =>  TRUE
[20:16:01.634]      <control if="isSWJ" while="" timeout="0" info="">
[20:16:01.634]        // if-block "isSWJ"
[20:16:01.634]          // =>  TRUE
[20:16:01.634]        <control if="hasDormant" while="" timeout="0" info="">
[20:16:01.634]          // if-block "hasDormant"
[20:16:01.634]            // =>  FALSE
[20:16:01.634]          // skip if-block "hasDormant"
[20:16:01.634]        </control>
[20:16:01.634]        <control if="!hasDormant" while="" timeout="0" info="">
[20:16:01.634]          // if-block "!hasDormant"
[20:16:01.634]            // =>  TRUE
[20:16:01.634]          <block atomic="false" info="">
[20:16:01.634]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:16:01.634]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:16:01.634]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:16:01.634]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:16:01.634]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:16:01.645]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:16:01.645]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:16:01.645]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:16:01.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:16:01.645]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:16:01.645]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:16:01.645]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:16:01.645]          </block>
[20:16:01.645]          // end if-block "!hasDormant"
[20:16:01.645]        </control>
[20:16:01.645]        // end if-block "isSWJ"
[20:16:01.645]      </control>
[20:16:01.645]      <control if="!isSWJ" while="" timeout="0" info="">
[20:16:01.645]        // if-block "!isSWJ"
[20:16:01.645]          // =>  FALSE
[20:16:01.645]        // skip if-block "!isSWJ"
[20:16:01.645]      </control>
[20:16:01.645]      <block atomic="false" info="">
[20:16:01.645]        ReadDP(0x0);
[20:16:01.645]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:16:01.645]      </block>
[20:16:01.645]      // end if-block "protType == 2"
[20:16:01.645]    </control>
[20:16:01.645]  </sequence>
[20:16:01.645]  
[20:16:01.654]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:16:01.654]  
[20:16:01.654]  <debugvars>
[20:16:01.654]    // Pre-defined
[20:16:01.654]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:16:01.654]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:16:01.654]    __dp=0x00000000
[20:16:01.654]    __ap=0x00000000
[20:16:01.654]    __traceout=0x00000000      (Trace Disabled)
[20:16:01.654]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:16:01.654]    __FlashAddr=0x00000000
[20:16:01.654]    __FlashLen=0x00000000
[20:16:01.654]    __FlashArg=0x00000000
[20:16:01.654]    __FlashOp=0x00000000
[20:16:01.654]    __Result=0x00000000
[20:16:01.654]  </debugvars>
[20:16:01.654]  
[20:16:01.654]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:16:01.654]    <block atomic="false" info="">
[20:16:01.654]      __var SW_DP_ABORT       = 0x0;
[20:16:01.654]        // -> [SW_DP_ABORT <= 0x00000000]
[20:16:01.654]      __var DP_CTRL_STAT      = 0x4;
[20:16:01.654]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:16:01.654]      __var DP_SELECT         = 0x8;
[20:16:01.654]        // -> [DP_SELECT <= 0x00000008]
[20:16:01.654]      __var powered_down      = 0;
[20:16:01.654]        // -> [powered_down <= 0x00000000]
[20:16:01.654]      WriteDP(DP_SELECT, 0x00000000);
[20:16:01.664]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:16:01.664]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:16:01.664]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:16:01.664]        // -> [powered_down <= 0x00000001]
[20:16:01.664]    </block>
[20:16:01.664]    <control if="powered_down" while="" timeout="0" info="">
[20:16:01.664]      // if-block "powered_down"
[20:16:01.664]        // =>  TRUE
[20:16:01.664]      <block atomic="false" info="">
[20:16:01.664]        Message(0, "Debug/System power-up request sent");
[20:16:01.664]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:16:01.664]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:16:01.664]      </block>
[20:16:01.664]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:16:01.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:16:01.674]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:16:01.674]        // while-condition  =>  FALSE
[20:16:01.674]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:16:01.674]      </control>
[20:16:01.674]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:16:01.674]        // if-block "(__protocol & 0xFFFF) == 1"
[20:16:01.674]          // =>  FALSE
[20:16:01.674]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:16:01.674]      </control>
[20:16:01.674]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:16:01.674]        // if-block "(__protocol & 0xFFFF) == 2"
[20:16:01.674]          // =>  TRUE
[20:16:01.674]        <block atomic="false" info="">
[20:16:01.674]          Message(0, "executing SWD power up");
[20:16:01.674]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:16:01.674]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:16:01.674]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:16:01.684]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:16:01.684]        </block>
[20:16:01.684]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:16:01.684]      </control>
[20:16:01.684]      // end if-block "powered_down"
[20:16:01.684]    </control>
[20:16:01.684]    <block atomic="false" info="">
[20:16:01.684]      __var DEBUG_PORT_VAL    = 0;
[20:16:01.684]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:16:01.684]      __var ACCESS_POINT_VAL  = 0;
[20:16:01.684]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:16:01.684]      __ap = 1; 
[20:16:01.684]        // -> [__ap <= 0x00000001]
[20:16:01.684]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:16:01.694]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:16:01.694]      __ap = 4;
[20:16:01.694]        // -> [__ap <= 0x00000004]
[20:16:01.694]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:16:01.694]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:16:01.694]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:16:01.694]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:16:01.694]    </block>
[20:16:01.694]    <block atomic="false" info="">
[20:16:01.694]      __var nReset = 0x80;
[20:16:01.694]        // -> [nReset <= 0x00000080]
[20:16:01.694]      __var canReadPins = 0;
[20:16:01.704]        // -> [canReadPins <= 0x00000000]
[20:16:01.704]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:16:01.704]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:16:01.704]        // -> [canReadPins <= 0x00000001]
[20:16:01.704]    </block>
[20:16:01.704]    <control if="" while="1" timeout="200" info="">
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.704]      // while "1"  (timeout="200")
[20:16:01.704]      // while-condition  =>  TRUE
[20:16:01.714]      // while "1"  (timeout="200")
[20:16:01.714]      // while  =>  TIMEOUT
[20:16:01.714]      // end while "1"
[20:16:01.714]    </control>
[20:16:01.714]    <control if="canReadPins" while="" timeout="0" info="">
[20:16:01.714]      // if-block "canReadPins"
[20:16:01.714]        // =>  TRUE
[20:16:01.714]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:16:01.714]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:16:01.714]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:16:01.714]        // while-condition  =>  FALSE
[20:16:01.714]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:16:01.714]      </control>
[20:16:01.714]      // end if-block "canReadPins"
[20:16:01.714]    </control>
[20:16:01.714]    <control if="!canReadPins" while="" timeout="0" info="">
[20:16:01.714]      // if-block "!canReadPins"
[20:16:01.714]        // =>  FALSE
[20:16:01.714]      // skip if-block "!canReadPins"
[20:16:01.714]    </control>
[20:16:01.714]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:16:01.714]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:16:01.714]        // =>  TRUE
[20:16:01.714]      <block atomic="false" info="">
[20:16:01.714]        WriteAP(0x00, 0x190008);
[20:16:01.724]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:16:01.724]        WriteAP(0xF0, 0x01);
[20:16:01.734]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:16:01.734]      </block>
[20:16:01.734]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:16:01.734]    </control>
[20:16:01.734]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:16:01.734]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:16:01.734]        // =>  FALSE
[20:16:01.734]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:16:01.734]    </control>
[20:16:01.734]    <block atomic="false" info="">
[20:16:01.734]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:16:01.734]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:16:01.734]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:16:01.734]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:16:01.744]      __ap = 0; //lets make sure we reset the access point selection
[20:16:01.744]        // -> [__ap <= 0x00000000]
[20:16:01.744]    </block>
[20:16:01.744]  </sequence>
[20:16:01.744]  
[20:16:01.776]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:16:01.776]  
[20:16:01.776]  <debugvars>
[20:16:01.776]    // Pre-defined
[20:16:01.776]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:16:01.776]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:16:01.776]    __dp=0x00000000
[20:16:01.776]    __ap=0x00000000
[20:16:01.776]    __traceout=0x00000000      (Trace Disabled)
[20:16:01.776]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:16:01.776]    __FlashAddr=0x00000000
[20:16:01.776]    __FlashLen=0x00000000
[20:16:01.776]    __FlashArg=0x00000000
[20:16:01.776]    __FlashOp=0x00000000
[20:16:01.776]    __Result=0x00000000
[20:16:01.776]  </debugvars>
[20:16:01.776]  
[20:16:01.776]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:16:01.776]    <block atomic="false" info="">
[20:16:01.776]      __var deviceID = 0;
[20:16:01.776]        // -> [deviceID <= 0x00000000]
[20:16:01.776]      __var version = 0;
[20:16:01.776]        // -> [version <= 0x00000000]
[20:16:01.785]      __var partNum = 0;
[20:16:01.785]        // -> [partNum <= 0x00000000]
[20:16:01.785]      __var manuf = 0;
[20:16:01.785]        // -> [manuf <= 0x00000000]
[20:16:01.785]      __var isMSPM0G1X0X_G3X0X = 0;
[20:16:01.785]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:16:01.785]      __var isProduction = 0;
[20:16:01.785]        // -> [isProduction <= 0x00000000]
[20:16:01.785]      __var continueId = 0;
[20:16:01.785]        // -> [continueId <= 0x00000000]
[20:16:01.785]      deviceID =   Read32(0x41C40004);
[20:16:01.791]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:16:01.792]        // -> [deviceID <= 0x2BB8802F]
[20:16:01.792]      version = deviceID >> 28;
[20:16:01.792]        // -> [version <= 0x00000002]
[20:16:01.792]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:16:01.792]        // -> [partNum <= 0x0000BB88]
[20:16:01.792]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:16:01.792]        // -> [manuf <= 0x00000017]
[20:16:01.792]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:16:01.792]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:16:01.793]      isProduction = (version > 0);
[20:16:01.793]        // -> [isProduction <= 0x00000001]
[20:16:01.793]    </block>
[20:16:01.793]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:16:01.793]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:16:01.793]        // =>  FALSE
[20:16:01.793]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:16:01.794]    </control>
[20:16:01.794]    <control if="continueId == 4" while="" timeout="0" info="">
[20:16:01.794]      // if-block "continueId == 4"
[20:16:01.794]        // =>  FALSE
[20:16:01.794]      // skip if-block "continueId == 4"
[20:16:01.794]    </control>
[20:16:01.794]    <control if="!isProduction" while="" timeout="0" info="">
[20:16:01.794]      // if-block "!isProduction"
[20:16:01.795]        // =>  FALSE
[20:16:01.795]      // skip if-block "!isProduction"
[20:16:01.795]    </control>
[20:16:01.795]  </sequence>
[20:16:01.795]  
[20:21:51.837]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:21:51.837]  
[20:21:51.845]  <debugvars>
[20:21:51.845]    // Pre-defined
[20:21:51.845]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:21:51.845]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:21:51.845]    __dp=0x00000000
[20:21:51.845]    __ap=0x00000000
[20:21:51.845]    __traceout=0x00000000      (Trace Disabled)
[20:21:51.845]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:21:51.845]    __FlashAddr=0x00000000
[20:21:51.845]    __FlashLen=0x00000000
[20:21:51.845]    __FlashArg=0x00000000
[20:21:51.845]    __FlashOp=0x00000000
[20:21:51.845]    __Result=0x00000000
[20:21:51.845]  </debugvars>
[20:21:51.845]  
[20:21:51.845]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:21:51.845]    <block atomic="false" info="">
[20:21:51.845]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:21:51.845]        // -> [isSWJ <= 0x00000001]
[20:21:51.845]      __var hasDormant = __protocol & 0x00020000;
[20:21:51.845]        // -> [hasDormant <= 0x00000000]
[20:21:51.845]      __var protType   = __protocol & 0x0000FFFF;
[20:21:51.845]        // -> [protType <= 0x00000002]
[20:21:51.845]    </block>
[20:21:51.845]    <control if="protType == 1" while="" timeout="0" info="">
[20:21:51.845]      // if-block "protType == 1"
[20:21:51.845]        // =>  FALSE
[20:21:51.845]      // skip if-block "protType == 1"
[20:21:51.845]    </control>
[20:21:51.845]    <control if="protType == 2" while="" timeout="0" info="">
[20:21:51.845]      // if-block "protType == 2"
[20:21:51.845]        // =>  TRUE
[20:21:51.845]      <control if="isSWJ" while="" timeout="0" info="">
[20:21:51.845]        // if-block "isSWJ"
[20:21:51.845]          // =>  TRUE
[20:21:51.845]        <control if="hasDormant" while="" timeout="0" info="">
[20:21:51.845]          // if-block "hasDormant"
[20:21:51.845]            // =>  FALSE
[20:21:51.845]          // skip if-block "hasDormant"
[20:21:51.845]        </control>
[20:21:51.845]        <control if="!hasDormant" while="" timeout="0" info="">
[20:21:51.845]          // if-block "!hasDormant"
[20:21:51.845]            // =>  TRUE
[20:21:51.845]          <block atomic="false" info="">
[20:21:51.845]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:21:51.845]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:21:51.845]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:21:51.854]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:21:51.854]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:21:51.857]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:21:51.857]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:21:51.857]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:21:51.857]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:21:51.857]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:21:51.857]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:21:51.857]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:21:51.857]          </block>
[20:21:51.857]          // end if-block "!hasDormant"
[20:21:51.857]        </control>
[20:21:51.857]        // end if-block "isSWJ"
[20:21:51.857]      </control>
[20:21:51.857]      <control if="!isSWJ" while="" timeout="0" info="">
[20:21:51.857]        // if-block "!isSWJ"
[20:21:51.857]          // =>  FALSE
[20:21:51.857]        // skip if-block "!isSWJ"
[20:21:51.857]      </control>
[20:21:51.857]      <block atomic="false" info="">
[20:21:51.865]        ReadDP(0x0);
[20:21:51.865]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:21:51.865]      </block>
[20:21:51.865]      // end if-block "protType == 2"
[20:21:51.865]    </control>
[20:21:51.865]  </sequence>
[20:21:51.865]  
[20:21:51.865]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:21:51.865]  
[20:21:51.865]  <debugvars>
[20:21:51.865]    // Pre-defined
[20:21:51.865]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:21:51.865]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:21:51.865]    __dp=0x00000000
[20:21:51.865]    __ap=0x00000000
[20:21:51.865]    __traceout=0x00000000      (Trace Disabled)
[20:21:51.865]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:21:51.865]    __FlashAddr=0x00000000
[20:21:51.865]    __FlashLen=0x00000000
[20:21:51.865]    __FlashArg=0x00000000
[20:21:51.865]    __FlashOp=0x00000000
[20:21:51.865]    __Result=0x00000000
[20:21:51.865]  </debugvars>
[20:21:51.865]  
[20:21:51.865]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:21:51.865]    <block atomic="false" info="">
[20:21:51.865]      __var SW_DP_ABORT       = 0x0;
[20:21:51.865]        // -> [SW_DP_ABORT <= 0x00000000]
[20:21:51.865]      __var DP_CTRL_STAT      = 0x4;
[20:21:51.875]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:21:51.875]      __var DP_SELECT         = 0x8;
[20:21:51.875]        // -> [DP_SELECT <= 0x00000008]
[20:21:51.875]      __var powered_down      = 0;
[20:21:51.875]        // -> [powered_down <= 0x00000000]
[20:21:51.875]      WriteDP(DP_SELECT, 0x00000000);
[20:21:51.875]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:21:51.875]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:21:51.885]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:21:51.885]        // -> [powered_down <= 0x00000001]
[20:21:51.885]    </block>
[20:21:51.885]    <control if="powered_down" while="" timeout="0" info="">
[20:21:51.885]      // if-block "powered_down"
[20:21:51.885]        // =>  TRUE
[20:21:51.885]      <block atomic="false" info="">
[20:21:51.885]        Message(0, "Debug/System power-up request sent");
[20:21:51.885]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:21:51.888]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:21:51.888]      </block>
[20:21:51.888]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:21:51.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:21:51.888]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:21:51.888]        // while-condition  =>  FALSE
[20:21:51.888]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:21:51.888]      </control>
[20:21:51.888]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:21:51.888]        // if-block "(__protocol & 0xFFFF) == 1"
[20:21:51.888]          // =>  FALSE
[20:21:51.888]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:21:51.888]      </control>
[20:21:51.888]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:21:51.888]        // if-block "(__protocol & 0xFFFF) == 2"
[20:21:51.888]          // =>  TRUE
[20:21:51.888]        <block atomic="false" info="">
[20:21:51.888]          Message(0, "executing SWD power up");
[20:21:51.888]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:21:51.888]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:21:51.888]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:21:51.895]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:21:51.895]        </block>
[20:21:51.895]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:21:51.895]      </control>
[20:21:51.895]      // end if-block "powered_down"
[20:21:51.895]    </control>
[20:21:51.895]    <block atomic="false" info="">
[20:21:51.895]      __var DEBUG_PORT_VAL    = 0;
[20:21:51.895]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:21:51.895]      __var ACCESS_POINT_VAL  = 0;
[20:21:51.895]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:21:51.895]      __ap = 1; 
[20:21:51.895]        // -> [__ap <= 0x00000001]
[20:21:51.895]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:21:51.895]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:21:51.895]      __ap = 4;
[20:21:51.895]        // -> [__ap <= 0x00000004]
[20:21:51.895]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:21:51.905]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:21:51.905]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:21:51.905]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:21:51.905]    </block>
[20:21:51.905]    <block atomic="false" info="">
[20:21:51.905]      __var nReset = 0x80;
[20:21:51.905]        // -> [nReset <= 0x00000080]
[20:21:51.905]      __var canReadPins = 0;
[20:21:51.905]        // -> [canReadPins <= 0x00000000]
[20:21:51.905]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:21:51.905]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:21:51.905]        // -> [canReadPins <= 0x00000001]
[20:21:51.905]    </block>
[20:21:51.905]    <control if="" while="1" timeout="200" info="">
[20:21:51.905]      // while "1"  (timeout="200")
[20:21:51.905]      // while-condition  =>  TRUE
[20:21:51.905]      // while "1"  (timeout="200")
[20:21:51.905]      // while-condition  =>  TRUE
[20:21:51.905]      // while "1"  (timeout="200")
[20:21:51.915]      // while-condition  =>  TRUE
[20:21:51.915]      // while "1"  (timeout="200")
[20:21:51.915]      // while  =>  TIMEOUT
[20:21:51.915]      // end while "1"
[20:21:51.915]    </control>
[20:21:51.915]    <control if="canReadPins" while="" timeout="0" info="">
[20:21:51.915]      // if-block "canReadPins"
[20:21:51.915]        // =>  TRUE
[20:21:51.915]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:21:51.915]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:21:51.915]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:21:51.915]        // while-condition  =>  FALSE
[20:21:51.915]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:21:51.915]      </control>
[20:21:51.915]      // end if-block "canReadPins"
[20:21:51.915]    </control>
[20:21:51.915]    <control if="!canReadPins" while="" timeout="0" info="">
[20:21:51.915]      // if-block "!canReadPins"
[20:21:51.915]        // =>  FALSE
[20:21:51.915]      // skip if-block "!canReadPins"
[20:21:51.915]    </control>
[20:21:51.915]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:21:51.915]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:21:51.915]        // =>  TRUE
[20:21:51.915]      <block atomic="false" info="">
[20:21:51.915]        WriteAP(0x00, 0x190008);
[20:21:51.915]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:21:51.915]        WriteAP(0xF0, 0x01);
[20:21:51.915]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:21:51.915]      </block>
[20:21:51.915]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:21:51.925]    </control>
[20:21:51.925]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:21:51.925]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:21:51.925]        // =>  FALSE
[20:21:51.925]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:21:51.925]    </control>
[20:21:51.925]    <block atomic="false" info="">
[20:21:51.925]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:21:51.936]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:21:51.936]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:21:51.936]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:21:51.936]      __ap = 0; //lets make sure we reset the access point selection
[20:21:51.936]        // -> [__ap <= 0x00000000]
[20:21:51.936]    </block>
[20:21:51.936]  </sequence>
[20:21:51.936]  
[20:21:51.968]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:21:51.968]  
[20:21:51.968]  <debugvars>
[20:21:51.968]    // Pre-defined
[20:21:51.968]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:21:51.968]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:21:51.968]    __dp=0x00000000
[20:21:51.968]    __ap=0x00000000
[20:21:51.968]    __traceout=0x00000000      (Trace Disabled)
[20:21:51.968]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:21:51.968]    __FlashAddr=0x00000000
[20:21:51.968]    __FlashLen=0x00000000
[20:21:51.968]    __FlashArg=0x00000000
[20:21:51.968]    __FlashOp=0x00000000
[20:21:51.968]    __Result=0x00000000
[20:21:51.968]  </debugvars>
[20:21:51.968]  
[20:21:51.968]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:21:51.968]    <block atomic="false" info="">
[20:21:51.968]      __var deviceID = 0;
[20:21:51.968]        // -> [deviceID <= 0x00000000]
[20:21:51.968]      __var version = 0;
[20:21:51.968]        // -> [version <= 0x00000000]
[20:21:51.968]      __var partNum = 0;
[20:21:51.968]        // -> [partNum <= 0x00000000]
[20:21:51.968]      __var manuf = 0;
[20:21:51.968]        // -> [manuf <= 0x00000000]
[20:21:51.977]      __var isMSPM0G1X0X_G3X0X = 0;
[20:21:51.977]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:21:51.977]      __var isProduction = 0;
[20:21:51.977]        // -> [isProduction <= 0x00000000]
[20:21:51.977]      __var continueId = 0;
[20:21:51.977]        // -> [continueId <= 0x00000000]
[20:21:51.977]      deviceID =   Read32(0x41C40004);
[20:21:51.987]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:21:51.987]        // -> [deviceID <= 0x2BB8802F]
[20:21:51.987]      version = deviceID >> 28;
[20:21:51.987]        // -> [version <= 0x00000002]
[20:21:51.987]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:21:51.987]        // -> [partNum <= 0x0000BB88]
[20:21:51.987]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:21:51.987]        // -> [manuf <= 0x00000017]
[20:21:51.987]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:21:51.987]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:21:51.987]      isProduction = (version > 0);
[20:21:51.987]        // -> [isProduction <= 0x00000001]
[20:21:51.987]    </block>
[20:21:51.987]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:21:51.987]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:21:51.987]        // =>  FALSE
[20:21:51.987]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:21:51.987]    </control>
[20:21:51.987]    <control if="continueId == 4" while="" timeout="0" info="">
[20:21:51.987]      // if-block "continueId == 4"
[20:21:51.987]        // =>  FALSE
[20:21:51.987]      // skip if-block "continueId == 4"
[20:21:51.987]    </control>
[20:21:51.987]    <control if="!isProduction" while="" timeout="0" info="">
[20:21:51.987]      // if-block "!isProduction"
[20:21:51.987]        // =>  FALSE
[20:21:51.987]      // skip if-block "!isProduction"
[20:21:51.987]    </control>
[20:21:51.987]  </sequence>
[20:21:51.987]  
[20:25:36.551]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:25:36.551]  
[20:25:36.551]  <debugvars>
[20:25:36.551]    // Pre-defined
[20:25:36.551]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:25:36.551]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:25:36.551]    __dp=0x00000000
[20:25:36.551]    __ap=0x00000000
[20:25:36.551]    __traceout=0x00000000      (Trace Disabled)
[20:25:36.551]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:25:36.551]    __FlashAddr=0x00000000
[20:25:36.551]    __FlashLen=0x00000000
[20:25:36.551]    __FlashArg=0x00000000
[20:25:36.554]    __FlashOp=0x00000000
[20:25:36.554]    __Result=0x00000000
[20:25:36.554]  </debugvars>
[20:25:36.554]  
[20:25:36.554]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:25:36.554]    <block atomic="false" info="">
[20:25:36.554]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:25:36.554]        // -> [isSWJ <= 0x00000001]
[20:25:36.554]      __var hasDormant = __protocol & 0x00020000;
[20:25:36.554]        // -> [hasDormant <= 0x00000000]
[20:25:36.554]      __var protType   = __protocol & 0x0000FFFF;
[20:25:36.554]        // -> [protType <= 0x00000002]
[20:25:36.554]    </block>
[20:25:36.555]    <control if="protType == 1" while="" timeout="0" info="">
[20:25:36.555]      // if-block "protType == 1"
[20:25:36.555]        // =>  FALSE
[20:25:36.555]      // skip if-block "protType == 1"
[20:25:36.555]    </control>
[20:25:36.555]    <control if="protType == 2" while="" timeout="0" info="">
[20:25:36.555]      // if-block "protType == 2"
[20:25:36.556]        // =>  TRUE
[20:25:36.556]      <control if="isSWJ" while="" timeout="0" info="">
[20:25:36.556]        // if-block "isSWJ"
[20:25:36.556]          // =>  TRUE
[20:25:36.556]        <control if="hasDormant" while="" timeout="0" info="">
[20:25:36.556]          // if-block "hasDormant"
[20:25:36.556]            // =>  FALSE
[20:25:36.556]          // skip if-block "hasDormant"
[20:25:36.556]        </control>
[20:25:36.556]        <control if="!hasDormant" while="" timeout="0" info="">
[20:25:36.556]          // if-block "!hasDormant"
[20:25:36.556]            // =>  TRUE
[20:25:36.557]          <block atomic="false" info="">
[20:25:36.557]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:25:36.558]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:25:36.558]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:25:36.558]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:25:36.558]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:25:36.561]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:25:36.561]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:25:36.561]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:25:36.561]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:25:36.561]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:25:36.561]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:25:36.573]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:25:36.573]          </block>
[20:25:36.573]          // end if-block "!hasDormant"
[20:25:36.573]        </control>
[20:25:36.573]        // end if-block "isSWJ"
[20:25:36.573]      </control>
[20:25:36.573]      <control if="!isSWJ" while="" timeout="0" info="">
[20:25:36.573]        // if-block "!isSWJ"
[20:25:36.573]          // =>  FALSE
[20:25:36.573]        // skip if-block "!isSWJ"
[20:25:36.573]      </control>
[20:25:36.573]      <block atomic="false" info="">
[20:25:36.573]        ReadDP(0x0);
[20:25:36.573]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:25:36.573]      </block>
[20:25:36.573]      // end if-block "protType == 2"
[20:25:36.573]    </control>
[20:25:36.581]  </sequence>
[20:25:36.581]  
[20:25:36.583]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:25:36.583]  
[20:25:36.583]  <debugvars>
[20:25:36.583]    // Pre-defined
[20:25:36.583]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:25:36.583]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:25:36.583]    __dp=0x00000000
[20:25:36.583]    __ap=0x00000000
[20:25:36.583]    __traceout=0x00000000      (Trace Disabled)
[20:25:36.583]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:25:36.583]    __FlashAddr=0x00000000
[20:25:36.583]    __FlashLen=0x00000000
[20:25:36.583]    __FlashArg=0x00000000
[20:25:36.583]    __FlashOp=0x00000000
[20:25:36.583]    __Result=0x00000000
[20:25:36.583]  </debugvars>
[20:25:36.583]  
[20:25:36.583]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:25:36.583]    <block atomic="false" info="">
[20:25:36.583]      __var SW_DP_ABORT       = 0x0;
[20:25:36.583]        // -> [SW_DP_ABORT <= 0x00000000]
[20:25:36.583]      __var DP_CTRL_STAT      = 0x4;
[20:25:36.583]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:25:36.583]      __var DP_SELECT         = 0x8;
[20:25:36.583]        // -> [DP_SELECT <= 0x00000008]
[20:25:36.583]      __var powered_down      = 0;
[20:25:36.583]        // -> [powered_down <= 0x00000000]
[20:25:36.583]      WriteDP(DP_SELECT, 0x00000000);
[20:25:36.583]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:25:36.583]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:25:36.591]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:25:36.591]        // -> [powered_down <= 0x00000001]
[20:25:36.591]    </block>
[20:25:36.591]    <control if="powered_down" while="" timeout="0" info="">
[20:25:36.591]      // if-block "powered_down"
[20:25:36.591]        // =>  TRUE
[20:25:36.591]      <block atomic="false" info="">
[20:25:36.591]        Message(0, "Debug/System power-up request sent");
[20:25:36.591]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:25:36.591]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:25:36.591]      </block>
[20:25:36.591]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:25:36.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:25:36.591]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:25:36.591]        // while-condition  =>  FALSE
[20:25:36.591]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:25:36.591]      </control>
[20:25:36.591]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:25:36.591]        // if-block "(__protocol & 0xFFFF) == 1"
[20:25:36.591]          // =>  FALSE
[20:25:36.591]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:25:36.591]      </control>
[20:25:36.591]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:25:36.591]        // if-block "(__protocol & 0xFFFF) == 2"
[20:25:36.591]          // =>  TRUE
[20:25:36.591]        <block atomic="false" info="">
[20:25:36.591]          Message(0, "executing SWD power up");
[20:25:36.591]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:25:36.603]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:25:36.603]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:25:36.603]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:25:36.603]        </block>
[20:25:36.603]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:25:36.603]      </control>
[20:25:36.603]      // end if-block "powered_down"
[20:25:36.603]    </control>
[20:25:36.603]    <block atomic="false" info="">
[20:25:36.603]      __var DEBUG_PORT_VAL    = 0;
[20:25:36.603]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:25:36.603]      __var ACCESS_POINT_VAL  = 0;
[20:25:36.603]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:25:36.603]      __ap = 1; 
[20:25:36.603]        // -> [__ap <= 0x00000001]
[20:25:36.603]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:25:36.614]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:25:36.614]      __ap = 4;
[20:25:36.614]        // -> [__ap <= 0x00000004]
[20:25:36.614]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:25:36.617]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:25:36.617]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:25:36.617]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:25:36.617]    </block>
[20:25:36.621]    <block atomic="false" info="">
[20:25:36.621]      __var nReset = 0x80;
[20:25:36.621]        // -> [nReset <= 0x00000080]
[20:25:36.621]      __var canReadPins = 0;
[20:25:36.621]        // -> [canReadPins <= 0x00000000]
[20:25:36.621]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:25:36.622]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:25:36.622]        // -> [canReadPins <= 0x00000001]
[20:25:36.622]    </block>
[20:25:36.622]    <control if="" while="1" timeout="200" info="">
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.622]      // while-condition  =>  TRUE
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.622]      // while-condition  =>  TRUE
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.622]      // while-condition  =>  TRUE
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.622]      // while-condition  =>  TRUE
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.622]      // while-condition  =>  TRUE
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.622]      // while-condition  =>  TRUE
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.622]      // while-condition  =>  TRUE
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.622]      // while-condition  =>  TRUE
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.622]      // while-condition  =>  TRUE
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.622]      // while-condition  =>  TRUE
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.622]      // while-condition  =>  TRUE
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.622]      // while-condition  =>  TRUE
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.622]      // while-condition  =>  TRUE
[20:25:36.622]      // while "1"  (timeout="200")
[20:25:36.627]      // while-condition  =>  TRUE
[20:25:36.627]      // while "1"  (timeout="200")
[20:25:36.627]      // while-condition  =>  TRUE
[20:25:36.627]      // while "1"  (timeout="200")
[20:25:36.627]      // while-condition  =>  TRUE
[20:25:36.627]      // while "1"  (timeout="200")
[20:25:36.627]      // while-condition  =>  TRUE
[20:25:36.627]      // while "1"  (timeout="200")
[20:25:36.627]      // while-condition  =>  TRUE
[20:25:36.627]      // while "1"  (timeout="200")
[20:25:36.627]      // while-condition  =>  TRUE
[20:25:36.627]      // while "1"  (timeout="200")
[20:25:36.628]      // while-condition  =>  TRUE
[20:25:36.628]      // while "1"  (timeout="200")
[20:25:36.628]      // while  =>  TIMEOUT
[20:25:36.628]      // end while "1"
[20:25:36.628]    </control>
[20:25:36.628]    <control if="canReadPins" while="" timeout="0" info="">
[20:25:36.628]      // if-block "canReadPins"
[20:25:36.628]        // =>  TRUE
[20:25:36.628]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:25:36.628]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:25:36.630]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:25:36.630]        // while-condition  =>  FALSE
[20:25:36.630]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:25:36.630]      </control>
[20:25:36.630]      // end if-block "canReadPins"
[20:25:36.630]    </control>
[20:25:36.630]    <control if="!canReadPins" while="" timeout="0" info="">
[20:25:36.630]      // if-block "!canReadPins"
[20:25:36.631]        // =>  FALSE
[20:25:36.631]      // skip if-block "!canReadPins"
[20:25:36.631]    </control>
[20:25:36.631]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:25:36.631]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:25:36.631]        // =>  TRUE
[20:25:36.631]      <block atomic="false" info="">
[20:25:36.631]        WriteAP(0x00, 0x190008);
[20:25:36.634]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:25:36.634]        WriteAP(0xF0, 0x01);
[20:25:36.634]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:25:36.634]      </block>
[20:25:36.634]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:25:36.634]    </control>
[20:25:36.634]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:25:36.634]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:25:36.634]        // =>  FALSE
[20:25:36.634]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:25:36.634]    </control>
[20:25:36.634]    <block atomic="false" info="">
[20:25:36.634]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:25:36.634]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:25:36.634]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:25:36.641]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:25:36.642]      __ap = 0; //lets make sure we reset the access point selection
[20:25:36.642]        // -> [__ap <= 0x00000000]
[20:25:36.642]    </block>
[20:25:36.642]  </sequence>
[20:25:36.642]  
[20:25:36.661]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:25:36.661]  
[20:25:36.664]  <debugvars>
[20:25:36.664]    // Pre-defined
[20:25:36.664]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:25:36.664]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:25:36.664]    __dp=0x00000000
[20:25:36.664]    __ap=0x00000000
[20:25:36.664]    __traceout=0x00000000      (Trace Disabled)
[20:25:36.664]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:25:36.664]    __FlashAddr=0x00000000
[20:25:36.664]    __FlashLen=0x00000000
[20:25:36.664]    __FlashArg=0x00000000
[20:25:36.664]    __FlashOp=0x00000000
[20:25:36.664]    __Result=0x00000000
[20:25:36.664]  </debugvars>
[20:25:36.664]  
[20:25:36.664]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:25:36.664]    <block atomic="false" info="">
[20:25:36.664]      __var deviceID = 0;
[20:25:36.664]        // -> [deviceID <= 0x00000000]
[20:25:36.664]      __var version = 0;
[20:25:36.664]        // -> [version <= 0x00000000]
[20:25:36.664]      __var partNum = 0;
[20:25:36.664]        // -> [partNum <= 0x00000000]
[20:25:36.664]      __var manuf = 0;
[20:25:36.664]        // -> [manuf <= 0x00000000]
[20:25:36.664]      __var isMSPM0G1X0X_G3X0X = 0;
[20:25:36.664]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:25:36.664]      __var isProduction = 0;
[20:25:36.664]        // -> [isProduction <= 0x00000000]
[20:25:36.664]      __var continueId = 0;
[20:25:36.664]        // -> [continueId <= 0x00000000]
[20:25:36.664]      deviceID =   Read32(0x41C40004);
[20:25:36.671]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:25:36.671]        // -> [deviceID <= 0x2BB8802F]
[20:25:36.671]      version = deviceID >> 28;
[20:25:36.672]        // -> [version <= 0x00000002]
[20:25:36.672]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:25:36.672]        // -> [partNum <= 0x0000BB88]
[20:25:36.672]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:25:36.672]        // -> [manuf <= 0x00000017]
[20:25:36.672]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:25:36.672]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:25:36.672]      isProduction = (version > 0);
[20:25:36.672]        // -> [isProduction <= 0x00000001]
[20:25:36.672]    </block>
[20:25:36.672]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:25:36.672]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:25:36.672]        // =>  FALSE
[20:25:36.672]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:25:36.672]    </control>
[20:25:36.672]    <control if="continueId == 4" while="" timeout="0" info="">
[20:25:36.672]      // if-block "continueId == 4"
[20:25:36.672]        // =>  FALSE
[20:25:36.672]      // skip if-block "continueId == 4"
[20:25:36.672]    </control>
[20:25:36.672]    <control if="!isProduction" while="" timeout="0" info="">
[20:25:36.672]      // if-block "!isProduction"
[20:25:36.672]        // =>  FALSE
[20:25:36.672]      // skip if-block "!isProduction"
[20:25:36.672]    </control>
[20:25:36.672]  </sequence>
[20:25:36.672]  
[20:26:01.947]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:26:01.947]  
[20:26:01.948]  <debugvars>
[20:26:01.948]    // Pre-defined
[20:26:01.948]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:26:01.948]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:26:01.948]    __dp=0x00000000
[20:26:01.949]    __ap=0x00000000
[20:26:01.949]    __traceout=0x00000000      (Trace Disabled)
[20:26:01.949]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:26:01.949]    __FlashAddr=0x00000000
[20:26:01.949]    __FlashLen=0x00000000
[20:26:01.949]    __FlashArg=0x00000000
[20:26:01.949]    __FlashOp=0x00000000
[20:26:01.950]    __Result=0x00000000
[20:26:01.950]  </debugvars>
[20:26:01.950]  
[20:26:01.950]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:26:01.950]    <block atomic="false" info="">
[20:26:01.950]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:26:01.950]        // -> [isSWJ <= 0x00000001]
[20:26:01.951]      __var hasDormant = __protocol & 0x00020000;
[20:26:01.951]        // -> [hasDormant <= 0x00000000]
[20:26:01.951]      __var protType   = __protocol & 0x0000FFFF;
[20:26:01.951]        // -> [protType <= 0x00000002]
[20:26:01.951]    </block>
[20:26:01.951]    <control if="protType == 1" while="" timeout="0" info="">
[20:26:01.951]      // if-block "protType == 1"
[20:26:01.951]        // =>  FALSE
[20:26:01.952]      // skip if-block "protType == 1"
[20:26:01.952]    </control>
[20:26:01.952]    <control if="protType == 2" while="" timeout="0" info="">
[20:26:01.952]      // if-block "protType == 2"
[20:26:01.952]        // =>  TRUE
[20:26:01.952]      <control if="isSWJ" while="" timeout="0" info="">
[20:26:01.953]        // if-block "isSWJ"
[20:26:01.953]          // =>  TRUE
[20:26:01.953]        <control if="hasDormant" while="" timeout="0" info="">
[20:26:01.953]          // if-block "hasDormant"
[20:26:01.953]            // =>  FALSE
[20:26:01.953]          // skip if-block "hasDormant"
[20:26:01.954]        </control>
[20:26:01.954]        <control if="!hasDormant" while="" timeout="0" info="">
[20:26:01.954]          // if-block "!hasDormant"
[20:26:01.954]            // =>  TRUE
[20:26:01.954]          <block atomic="false" info="">
[20:26:01.954]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:26:01.958]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:26:01.958]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:26:01.959]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:26:01.959]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:26:01.961]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:26:01.961]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:26:01.963]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:26:01.963]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:26:01.964]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:26:01.965]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:26:01.966]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:26:01.966]          </block>
[20:26:01.966]          // end if-block "!hasDormant"
[20:26:01.966]        </control>
[20:26:01.967]        // end if-block "isSWJ"
[20:26:01.967]      </control>
[20:26:01.967]      <control if="!isSWJ" while="" timeout="0" info="">
[20:26:01.967]        // if-block "!isSWJ"
[20:26:01.967]          // =>  FALSE
[20:26:01.967]        // skip if-block "!isSWJ"
[20:26:01.967]      </control>
[20:26:01.967]      <block atomic="false" info="">
[20:26:01.967]        ReadDP(0x0);
[20:26:01.973]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:26:01.973]      </block>
[20:26:01.973]      // end if-block "protType == 2"
[20:26:01.973]    </control>
[20:26:01.973]  </sequence>
[20:26:01.973]  
[20:26:01.974]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:26:01.974]  
[20:26:01.974]  <debugvars>
[20:26:01.974]    // Pre-defined
[20:26:01.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:26:01.974]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:26:01.974]    __dp=0x00000000
[20:26:01.974]    __ap=0x00000000
[20:26:01.974]    __traceout=0x00000000      (Trace Disabled)
[20:26:01.977]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:26:01.977]    __FlashAddr=0x00000000
[20:26:01.977]    __FlashLen=0x00000000
[20:26:01.977]    __FlashArg=0x00000000
[20:26:01.977]    __FlashOp=0x00000000
[20:26:01.977]    __Result=0x00000000
[20:26:01.977]  </debugvars>
[20:26:01.977]  
[20:26:01.977]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:26:01.977]    <block atomic="false" info="">
[20:26:01.977]      __var SW_DP_ABORT       = 0x0;
[20:26:01.977]        // -> [SW_DP_ABORT <= 0x00000000]
[20:26:01.977]      __var DP_CTRL_STAT      = 0x4;
[20:26:01.977]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:26:01.977]      __var DP_SELECT         = 0x8;
[20:26:01.977]        // -> [DP_SELECT <= 0x00000008]
[20:26:01.977]      __var powered_down      = 0;
[20:26:01.977]        // -> [powered_down <= 0x00000000]
[20:26:01.977]      WriteDP(DP_SELECT, 0x00000000);
[20:26:01.977]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:26:01.977]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:26:01.977]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:26:01.977]        // -> [powered_down <= 0x00000001]
[20:26:01.977]    </block>
[20:26:01.977]    <control if="powered_down" while="" timeout="0" info="">
[20:26:01.977]      // if-block "powered_down"
[20:26:01.977]        // =>  TRUE
[20:26:01.977]      <block atomic="false" info="">
[20:26:01.977]        Message(0, "Debug/System power-up request sent");
[20:26:01.977]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:26:01.985]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:26:01.985]      </block>
[20:26:01.985]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:26:01.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:26:01.988]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:26:01.988]        // while-condition  =>  FALSE
[20:26:01.988]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:26:01.988]      </control>
[20:26:01.988]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:26:01.988]        // if-block "(__protocol & 0xFFFF) == 1"
[20:26:01.988]          // =>  FALSE
[20:26:01.988]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:26:01.988]      </control>
[20:26:01.988]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:26:01.988]        // if-block "(__protocol & 0xFFFF) == 2"
[20:26:01.988]          // =>  TRUE
[20:26:01.988]        <block atomic="false" info="">
[20:26:01.988]          Message(0, "executing SWD power up");
[20:26:01.990]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:26:01.990]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:26:01.990]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:26:01.990]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:26:01.990]        </block>
[20:26:01.990]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:26:01.990]      </control>
[20:26:01.990]      // end if-block "powered_down"
[20:26:01.990]    </control>
[20:26:01.990]    <block atomic="false" info="">
[20:26:01.990]      __var DEBUG_PORT_VAL    = 0;
[20:26:01.990]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:26:01.990]      __var ACCESS_POINT_VAL  = 0;
[20:26:01.990]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:26:01.990]      __ap = 1; 
[20:26:01.990]        // -> [__ap <= 0x00000001]
[20:26:01.990]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:26:01.998]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:26:01.998]      __ap = 4;
[20:26:01.998]        // -> [__ap <= 0x00000004]
[20:26:01.998]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:26:01.998]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:26:01.998]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:26:02.008]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:26:02.009]    </block>
[20:26:02.009]    <block atomic="false" info="">
[20:26:02.009]      __var nReset = 0x80;
[20:26:02.009]        // -> [nReset <= 0x00000080]
[20:26:02.009]      __var canReadPins = 0;
[20:26:02.009]        // -> [canReadPins <= 0x00000000]
[20:26:02.009]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:26:02.009]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:26:02.009]        // -> [canReadPins <= 0x00000001]
[20:26:02.009]    </block>
[20:26:02.009]    <control if="" while="1" timeout="200" info="">
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.009]      // while "1"  (timeout="200")
[20:26:02.009]      // while-condition  =>  TRUE
[20:26:02.018]      // while "1"  (timeout="200")
[20:26:02.018]      // while  =>  TIMEOUT
[20:26:02.018]      // end while "1"
[20:26:02.018]    </control>
[20:26:02.018]    <control if="canReadPins" while="" timeout="0" info="">
[20:26:02.018]      // if-block "canReadPins"
[20:26:02.018]        // =>  TRUE
[20:26:02.018]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:26:02.018]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:26:02.018]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:26:02.018]        // while-condition  =>  FALSE
[20:26:02.018]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:26:02.018]      </control>
[20:26:02.018]      // end if-block "canReadPins"
[20:26:02.018]    </control>
[20:26:02.018]    <control if="!canReadPins" while="" timeout="0" info="">
[20:26:02.018]      // if-block "!canReadPins"
[20:26:02.018]        // =>  FALSE
[20:26:02.018]      // skip if-block "!canReadPins"
[20:26:02.018]    </control>
[20:26:02.018]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:26:02.018]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:26:02.018]        // =>  TRUE
[20:26:02.018]      <block atomic="false" info="">
[20:26:02.018]        WriteAP(0x00, 0x190008);
[20:26:02.018]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:26:02.018]        WriteAP(0xF0, 0x01);
[20:26:02.029]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:26:02.029]      </block>
[20:26:02.029]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:26:02.029]    </control>
[20:26:02.029]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:26:02.029]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:26:02.029]        // =>  FALSE
[20:26:02.029]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:26:02.029]    </control>
[20:26:02.029]    <block atomic="false" info="">
[20:26:02.029]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:26:02.029]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:26:02.029]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:26:02.029]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:26:02.038]      __ap = 0; //lets make sure we reset the access point selection
[20:26:02.038]        // -> [__ap <= 0x00000000]
[20:26:02.038]    </block>
[20:26:02.038]  </sequence>
[20:26:02.038]  
[20:26:02.058]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:26:02.058]  
[20:26:02.058]  <debugvars>
[20:26:02.058]    // Pre-defined
[20:26:02.058]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:26:02.058]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:26:02.058]    __dp=0x00000000
[20:26:02.058]    __ap=0x00000000
[20:26:02.058]    __traceout=0x00000000      (Trace Disabled)
[20:26:02.058]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:26:02.058]    __FlashAddr=0x00000000
[20:26:02.058]    __FlashLen=0x00000000
[20:26:02.058]    __FlashArg=0x00000000
[20:26:02.058]    __FlashOp=0x00000000
[20:26:02.058]    __Result=0x00000000
[20:26:02.058]  </debugvars>
[20:26:02.058]  
[20:26:02.058]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:26:02.058]    <block atomic="false" info="">
[20:26:02.058]      __var deviceID = 0;
[20:26:02.062]        // -> [deviceID <= 0x00000000]
[20:26:02.062]      __var version = 0;
[20:26:02.062]        // -> [version <= 0x00000000]
[20:26:02.062]      __var partNum = 0;
[20:26:02.062]        // -> [partNum <= 0x00000000]
[20:26:02.062]      __var manuf = 0;
[20:26:02.062]        // -> [manuf <= 0x00000000]
[20:26:02.062]      __var isMSPM0G1X0X_G3X0X = 0;
[20:26:02.062]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:26:02.062]      __var isProduction = 0;
[20:26:02.062]        // -> [isProduction <= 0x00000000]
[20:26:02.062]      __var continueId = 0;
[20:26:02.062]        // -> [continueId <= 0x00000000]
[20:26:02.062]      deviceID =   Read32(0x41C40004);
[20:26:02.068]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:26:02.068]        // -> [deviceID <= 0x2BB8802F]
[20:26:02.068]      version = deviceID >> 28;
[20:26:02.068]        // -> [version <= 0x00000002]
[20:26:02.068]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:26:02.068]        // -> [partNum <= 0x0000BB88]
[20:26:02.068]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:26:02.068]        // -> [manuf <= 0x00000017]
[20:26:02.068]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:26:02.068]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:26:02.068]      isProduction = (version > 0);
[20:26:02.068]        // -> [isProduction <= 0x00000001]
[20:26:02.068]    </block>
[20:26:02.068]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:26:02.068]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:26:02.068]        // =>  FALSE
[20:26:02.068]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:26:02.068]    </control>
[20:26:02.068]    <control if="continueId == 4" while="" timeout="0" info="">
[20:26:02.073]      // if-block "continueId == 4"
[20:26:02.073]        // =>  FALSE
[20:26:02.073]      // skip if-block "continueId == 4"
[20:26:02.073]    </control>
[20:26:02.073]    <control if="!isProduction" while="" timeout="0" info="">
[20:26:02.073]      // if-block "!isProduction"
[20:26:02.073]        // =>  FALSE
[20:26:02.073]      // skip if-block "!isProduction"
[20:26:02.073]    </control>
[20:26:02.075]  </sequence>
[20:26:02.075]  
[20:28:11.249]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:28:11.249]  
[20:28:11.249]  <debugvars>
[20:28:11.249]    // Pre-defined
[20:28:11.249]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:28:11.249]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:28:11.249]    __dp=0x00000000
[20:28:11.249]    __ap=0x00000000
[20:28:11.249]    __traceout=0x00000000      (Trace Disabled)
[20:28:11.249]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:28:11.249]    __FlashAddr=0x00000000
[20:28:11.249]    __FlashLen=0x00000000
[20:28:11.252]    __FlashArg=0x00000000
[20:28:11.252]    __FlashOp=0x00000000
[20:28:11.252]    __Result=0x00000000
[20:28:11.252]  </debugvars>
[20:28:11.252]  
[20:28:11.252]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:28:11.252]    <block atomic="false" info="">
[20:28:11.252]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:28:11.252]        // -> [isSWJ <= 0x00000001]
[20:28:11.252]      __var hasDormant = __protocol & 0x00020000;
[20:28:11.252]        // -> [hasDormant <= 0x00000000]
[20:28:11.253]      __var protType   = __protocol & 0x0000FFFF;
[20:28:11.253]        // -> [protType <= 0x00000002]
[20:28:11.253]    </block>
[20:28:11.253]    <control if="protType == 1" while="" timeout="0" info="">
[20:28:11.253]      // if-block "protType == 1"
[20:28:11.253]        // =>  FALSE
[20:28:11.253]      // skip if-block "protType == 1"
[20:28:11.253]    </control>
[20:28:11.253]    <control if="protType == 2" while="" timeout="0" info="">
[20:28:11.253]      // if-block "protType == 2"
[20:28:11.253]        // =>  TRUE
[20:28:11.253]      <control if="isSWJ" while="" timeout="0" info="">
[20:28:11.253]        // if-block "isSWJ"
[20:28:11.253]          // =>  TRUE
[20:28:11.253]        <control if="hasDormant" while="" timeout="0" info="">
[20:28:11.253]          // if-block "hasDormant"
[20:28:11.253]            // =>  FALSE
[20:28:11.255]          // skip if-block "hasDormant"
[20:28:11.255]        </control>
[20:28:11.255]        <control if="!hasDormant" while="" timeout="0" info="">
[20:28:11.255]          // if-block "!hasDormant"
[20:28:11.255]            // =>  TRUE
[20:28:11.255]          <block atomic="false" info="">
[20:28:11.255]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:28:11.257]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:28:11.257]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:28:11.258]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:28:11.258]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:28:11.265]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:28:11.265]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:28:11.269]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:28:11.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:28:11.271]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:28:11.271]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:28:11.273]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:28:11.273]          </block>
[20:28:11.273]          // end if-block "!hasDormant"
[20:28:11.273]        </control>
[20:28:11.273]        // end if-block "isSWJ"
[20:28:11.273]      </control>
[20:28:11.273]      <control if="!isSWJ" while="" timeout="0" info="">
[20:28:11.273]        // if-block "!isSWJ"
[20:28:11.273]          // =>  FALSE
[20:28:11.273]        // skip if-block "!isSWJ"
[20:28:11.273]      </control>
[20:28:11.273]      <block atomic="false" info="">
[20:28:11.274]        ReadDP(0x0);
[20:28:11.275]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:28:11.275]      </block>
[20:28:11.275]      // end if-block "protType == 2"
[20:28:11.275]    </control>
[20:28:11.275]  </sequence>
[20:28:11.275]  
[20:28:11.282]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:28:11.282]  
[20:28:11.282]  <debugvars>
[20:28:11.282]    // Pre-defined
[20:28:11.282]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:28:11.282]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:28:11.282]    __dp=0x00000000
[20:28:11.282]    __ap=0x00000000
[20:28:11.282]    __traceout=0x00000000      (Trace Disabled)
[20:28:11.282]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:28:11.282]    __FlashAddr=0x00000000
[20:28:11.282]    __FlashLen=0x00000000
[20:28:11.282]    __FlashArg=0x00000000
[20:28:11.282]    __FlashOp=0x00000000
[20:28:11.282]    __Result=0x00000000
[20:28:11.282]  </debugvars>
[20:28:11.282]  
[20:28:11.282]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:28:11.282]    <block atomic="false" info="">
[20:28:11.282]      __var SW_DP_ABORT       = 0x0;
[20:28:11.282]        // -> [SW_DP_ABORT <= 0x00000000]
[20:28:11.282]      __var DP_CTRL_STAT      = 0x4;
[20:28:11.285]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:28:11.285]      __var DP_SELECT         = 0x8;
[20:28:11.285]        // -> [DP_SELECT <= 0x00000008]
[20:28:11.285]      __var powered_down      = 0;
[20:28:11.285]        // -> [powered_down <= 0x00000000]
[20:28:11.285]      WriteDP(DP_SELECT, 0x00000000);
[20:28:11.286]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:28:11.286]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:28:11.289]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:28:11.289]        // -> [powered_down <= 0x00000001]
[20:28:11.289]    </block>
[20:28:11.289]    <control if="powered_down" while="" timeout="0" info="">
[20:28:11.289]      // if-block "powered_down"
[20:28:11.289]        // =>  TRUE
[20:28:11.289]      <block atomic="false" info="">
[20:28:11.289]        Message(0, "Debug/System power-up request sent");
[20:28:11.297]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:28:11.299]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:28:11.299]      </block>
[20:28:11.299]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:28:11.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:28:11.300]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:28:11.300]        // while-condition  =>  FALSE
[20:28:11.300]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:28:11.300]      </control>
[20:28:11.302]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:28:11.302]        // if-block "(__protocol & 0xFFFF) == 1"
[20:28:11.302]          // =>  FALSE
[20:28:11.302]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:28:11.302]      </control>
[20:28:11.302]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:28:11.302]        // if-block "(__protocol & 0xFFFF) == 2"
[20:28:11.302]          // =>  TRUE
[20:28:11.302]        <block atomic="false" info="">
[20:28:11.302]          Message(0, "executing SWD power up");
[20:28:11.304]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:28:11.307]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:28:11.307]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:28:11.309]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:28:11.309]        </block>
[20:28:11.309]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:28:11.309]      </control>
[20:28:11.310]      // end if-block "powered_down"
[20:28:11.310]    </control>
[20:28:11.310]    <block atomic="false" info="">
[20:28:11.310]      __var DEBUG_PORT_VAL    = 0;
[20:28:11.310]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:28:11.310]      __var ACCESS_POINT_VAL  = 0;
[20:28:11.310]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:28:11.310]      __ap = 1; 
[20:28:11.310]        // -> [__ap <= 0x00000001]
[20:28:11.310]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:28:11.324]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:28:11.324]      __ap = 4;
[20:28:11.324]        // -> [__ap <= 0x00000004]
[20:28:11.324]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:28:11.328]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:28:11.328]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:28:11.328]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:28:11.330]    </block>
[20:28:11.330]    <block atomic="false" info="">
[20:28:11.330]      __var nReset = 0x80;
[20:28:11.330]        // -> [nReset <= 0x00000080]
[20:28:11.330]      __var canReadPins = 0;
[20:28:11.330]        // -> [canReadPins <= 0x00000000]
[20:28:11.330]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:28:11.332]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:28:11.332]        // -> [canReadPins <= 0x00000001]
[20:28:11.332]    </block>
[20:28:11.332]    <control if="" while="1" timeout="200" info="">
[20:28:11.332]      // while "1"  (timeout="200")
[20:28:11.332]      // while-condition  =>  TRUE
[20:28:11.333]      // while "1"  (timeout="200")
[20:28:11.333]      // while-condition  =>  TRUE
[20:28:11.333]      // while "1"  (timeout="200")
[20:28:11.333]      // while-condition  =>  TRUE
[20:28:11.333]      // while "1"  (timeout="200")
[20:28:11.333]      // while-condition  =>  TRUE
[20:28:11.333]      // while "1"  (timeout="200")
[20:28:11.333]      // while-condition  =>  TRUE
[20:28:11.333]      // while "1"  (timeout="200")
[20:28:11.333]      // while-condition  =>  TRUE
[20:28:11.333]      // while "1"  (timeout="200")
[20:28:11.333]      // while-condition  =>  TRUE
[20:28:11.333]      // while "1"  (timeout="200")
[20:28:11.333]      // while-condition  =>  TRUE
[20:28:11.333]      // while "1"  (timeout="200")
[20:28:11.333]      // while-condition  =>  TRUE
[20:28:11.333]      // while "1"  (timeout="200")
[20:28:11.335]      // while-condition  =>  TRUE
[20:28:11.335]      // while "1"  (timeout="200")
[20:28:11.335]      // while-condition  =>  TRUE
[20:28:11.335]      // while "1"  (timeout="200")
[20:28:11.335]      // while-condition  =>  TRUE
[20:28:11.335]      // while "1"  (timeout="200")
[20:28:11.335]      // while-condition  =>  TRUE
[20:28:11.335]      // while "1"  (timeout="200")
[20:28:11.335]      // while-condition  =>  TRUE
[20:28:11.335]      // while "1"  (timeout="200")
[20:28:11.335]      // while-condition  =>  TRUE
[20:28:11.335]      // while "1"  (timeout="200")
[20:28:11.335]      // while-condition  =>  TRUE
[20:28:11.335]      // while "1"  (timeout="200")
[20:28:11.336]      // while-condition  =>  TRUE
[20:28:11.336]      // while "1"  (timeout="200")
[20:28:11.336]      // while-condition  =>  TRUE
[20:28:11.336]      // while "1"  (timeout="200")
[20:28:11.336]      // while-condition  =>  TRUE
[20:28:11.336]      // while "1"  (timeout="200")
[20:28:11.336]      // while-condition  =>  TRUE
[20:28:11.336]      // while "1"  (timeout="200")
[20:28:11.336]      // while-condition  =>  TRUE
[20:28:11.336]      // while "1"  (timeout="200")
[20:28:11.336]      // while-condition  =>  TRUE
[20:28:11.336]      // while "1"  (timeout="200")
[20:28:11.338]      // while-condition  =>  TRUE
[20:28:11.338]      // while "1"  (timeout="200")
[20:28:11.338]      // while-condition  =>  TRUE
[20:28:11.338]      // while "1"  (timeout="200")
[20:28:11.338]      // while-condition  =>  TRUE
[20:28:11.338]      // while "1"  (timeout="200")
[20:28:11.338]      // while-condition  =>  TRUE
[20:28:11.338]      // while "1"  (timeout="200")
[20:28:11.338]      // while-condition  =>  TRUE
[20:28:11.338]      // while "1"  (timeout="200")
[20:28:11.338]      // while-condition  =>  TRUE
[20:28:11.338]      // while "1"  (timeout="200")
[20:28:11.338]      // while-condition  =>  TRUE
[20:28:11.339]      // while "1"  (timeout="200")
[20:28:11.339]      // while-condition  =>  TRUE
[20:28:11.339]      // while "1"  (timeout="200")
[20:28:11.339]      // while-condition  =>  TRUE
[20:28:11.339]      // while "1"  (timeout="200")
[20:28:11.339]      // while-condition  =>  TRUE
[20:28:11.339]      // while "1"  (timeout="200")
[20:28:11.339]      // while-condition  =>  TRUE
[20:28:11.339]      // while "1"  (timeout="200")
[20:28:11.339]      // while-condition  =>  TRUE
[20:28:11.339]      // while "1"  (timeout="200")
[20:28:11.339]      // while-condition  =>  TRUE
[20:28:11.340]      // while "1"  (timeout="200")
[20:28:11.340]      // while-condition  =>  TRUE
[20:28:11.340]      // while "1"  (timeout="200")
[20:28:11.340]      // while-condition  =>  TRUE
[20:28:11.340]      // while "1"  (timeout="200")
[20:28:11.340]      // while-condition  =>  TRUE
[20:28:11.340]      // while "1"  (timeout="200")
[20:28:11.340]      // while-condition  =>  TRUE
[20:28:11.340]      // while "1"  (timeout="200")
[20:28:11.340]      // while-condition  =>  TRUE
[20:28:11.340]      // while "1"  (timeout="200")
[20:28:11.340]      // while-condition  =>  TRUE
[20:28:11.340]      // while "1"  (timeout="200")
[20:28:11.340]      // while-condition  =>  TRUE
[20:28:11.342]      // while "1"  (timeout="200")
[20:28:11.342]      // while-condition  =>  TRUE
[20:28:11.342]      // while "1"  (timeout="200")
[20:28:11.342]      // while-condition  =>  TRUE
[20:28:11.342]      // while "1"  (timeout="200")
[20:28:11.342]      // while-condition  =>  TRUE
[20:28:11.342]      // while "1"  (timeout="200")
[20:28:11.342]      // while-condition  =>  TRUE
[20:28:11.342]      // while "1"  (timeout="200")
[20:28:11.342]      // while-condition  =>  TRUE
[20:28:11.342]      // while "1"  (timeout="200")
[20:28:11.342]      // while-condition  =>  TRUE
[20:28:11.343]      // while "1"  (timeout="200")
[20:28:11.343]      // while-condition  =>  TRUE
[20:28:11.343]      // while "1"  (timeout="200")
[20:28:11.343]      // while-condition  =>  TRUE
[20:28:11.343]      // while "1"  (timeout="200")
[20:28:11.343]      // while-condition  =>  TRUE
[20:28:11.343]      // while "1"  (timeout="200")
[20:28:11.343]      // while-condition  =>  TRUE
[20:28:11.343]      // while "1"  (timeout="200")
[20:28:11.343]      // while-condition  =>  TRUE
[20:28:11.343]      // while "1"  (timeout="200")
[20:28:11.343]      // while-condition  =>  TRUE
[20:28:11.344]      // while "1"  (timeout="200")
[20:28:11.344]      // while-condition  =>  TRUE
[20:28:11.344]      // while "1"  (timeout="200")
[20:28:11.344]      // while-condition  =>  TRUE
[20:28:11.344]      // while "1"  (timeout="200")
[20:28:11.344]      // while-condition  =>  TRUE
[20:28:11.344]      // while "1"  (timeout="200")
[20:28:11.344]      // while-condition  =>  TRUE
[20:28:11.344]      // while "1"  (timeout="200")
[20:28:11.344]      // while-condition  =>  TRUE
[20:28:11.344]      // while "1"  (timeout="200")
[20:28:11.344]      // while-condition  =>  TRUE
[20:28:11.344]      // while "1"  (timeout="200")
[20:28:11.344]      // while-condition  =>  TRUE
[20:28:11.344]      // while "1"  (timeout="200")
[20:28:11.345]      // while-condition  =>  TRUE
[20:28:11.345]      // while "1"  (timeout="200")
[20:28:11.345]      // while-condition  =>  TRUE
[20:28:11.345]      // while "1"  (timeout="200")
[20:28:11.345]      // while-condition  =>  TRUE
[20:28:11.345]      // while "1"  (timeout="200")
[20:28:11.345]      // while-condition  =>  TRUE
[20:28:11.346]      // while "1"  (timeout="200")
[20:28:11.346]      // while  =>  TIMEOUT
[20:28:11.346]      // end while "1"
[20:28:11.346]    </control>
[20:28:11.346]    <control if="canReadPins" while="" timeout="0" info="">
[20:28:11.346]      // if-block "canReadPins"
[20:28:11.346]        // =>  TRUE
[20:28:11.346]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:28:11.346]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:28:11.347]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:28:11.347]        // while-condition  =>  FALSE
[20:28:11.347]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:28:11.347]      </control>
[20:28:11.347]      // end if-block "canReadPins"
[20:28:11.347]    </control>
[20:28:11.347]    <control if="!canReadPins" while="" timeout="0" info="">
[20:28:11.347]      // if-block "!canReadPins"
[20:28:11.347]        // =>  FALSE
[20:28:11.347]      // skip if-block "!canReadPins"
[20:28:11.347]    </control>
[20:28:11.347]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:28:11.350]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:28:11.350]        // =>  TRUE
[20:28:11.350]      <block atomic="false" info="">
[20:28:11.350]        WriteAP(0x00, 0x190008);
[20:28:11.356]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:28:11.356]        WriteAP(0xF0, 0x01);
[20:28:11.359]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:28:11.359]      </block>
[20:28:11.359]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:28:11.359]    </control>
[20:28:11.359]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:28:11.359]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:28:11.359]        // =>  FALSE
[20:28:11.359]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:28:11.359]    </control>
[20:28:11.359]    <block atomic="false" info="">
[20:28:11.359]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:28:11.365]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:28:11.365]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:28:11.365]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:28:11.369]      __ap = 0; //lets make sure we reset the access point selection
[20:28:11.369]        // -> [__ap <= 0x00000000]
[20:28:11.369]    </block>
[20:28:11.369]  </sequence>
[20:28:11.369]  
[20:28:11.406]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:28:11.406]  
[20:28:11.406]  <debugvars>
[20:28:11.406]    // Pre-defined
[20:28:11.406]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:28:11.406]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:28:11.406]    __dp=0x00000000
[20:28:11.406]    __ap=0x00000000
[20:28:11.406]    __traceout=0x00000000      (Trace Disabled)
[20:28:11.416]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:28:11.416]    __FlashAddr=0x00000000
[20:28:11.416]    __FlashLen=0x00000000
[20:28:11.416]    __FlashArg=0x00000000
[20:28:11.416]    __FlashOp=0x00000000
[20:28:11.416]    __Result=0x00000000
[20:28:11.416]  </debugvars>
[20:28:11.416]  
[20:28:11.416]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:28:11.416]    <block atomic="false" info="">
[20:28:11.416]      __var deviceID = 0;
[20:28:11.416]        // -> [deviceID <= 0x00000000]
[20:28:11.416]      __var version = 0;
[20:28:11.416]        // -> [version <= 0x00000000]
[20:28:11.416]      __var partNum = 0;
[20:28:11.416]        // -> [partNum <= 0x00000000]
[20:28:11.416]      __var manuf = 0;
[20:28:11.416]        // -> [manuf <= 0x00000000]
[20:28:11.416]      __var isMSPM0G1X0X_G3X0X = 0;
[20:28:11.416]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:28:11.416]      __var isProduction = 0;
[20:28:11.416]        // -> [isProduction <= 0x00000000]
[20:28:11.416]      __var continueId = 0;
[20:28:11.416]        // -> [continueId <= 0x00000000]
[20:28:11.416]      deviceID =   Read32(0x41C40004);
[20:28:11.426]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:28:11.426]        // -> [deviceID <= 0x2BB8802F]
[20:28:11.426]      version = deviceID >> 28;
[20:28:11.426]        // -> [version <= 0x00000002]
[20:28:11.426]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:28:11.426]        // -> [partNum <= 0x0000BB88]
[20:28:11.426]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:28:11.426]        // -> [manuf <= 0x00000017]
[20:28:11.426]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:28:11.426]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:28:11.426]      isProduction = (version > 0);
[20:28:11.426]        // -> [isProduction <= 0x00000001]
[20:28:11.426]    </block>
[20:28:11.426]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:28:11.426]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:28:11.426]        // =>  FALSE
[20:28:11.426]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:28:11.426]    </control>
[20:28:11.426]    <control if="continueId == 4" while="" timeout="0" info="">
[20:28:11.426]      // if-block "continueId == 4"
[20:28:11.426]        // =>  FALSE
[20:28:11.426]      // skip if-block "continueId == 4"
[20:28:11.426]    </control>
[20:28:11.426]    <control if="!isProduction" while="" timeout="0" info="">
[20:28:11.426]      // if-block "!isProduction"
[20:28:11.426]        // =>  FALSE
[20:28:11.426]      // skip if-block "!isProduction"
[20:28:11.426]    </control>
[20:28:11.426]  </sequence>
[20:28:11.426]  
[20:28:29.578]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:28:29.578]  
[20:28:29.578]  <debugvars>
[20:28:29.578]    // Pre-defined
[20:28:29.578]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:28:29.578]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:28:29.578]    __dp=0x00000000
[20:28:29.578]    __ap=0x00000000
[20:28:29.578]    __traceout=0x00000000      (Trace Disabled)
[20:28:29.578]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:28:29.578]    __FlashAddr=0x00000000
[20:28:29.578]    __FlashLen=0x00000000
[20:28:29.578]    __FlashArg=0x00000000
[20:28:29.578]    __FlashOp=0x00000000
[20:28:29.578]    __Result=0x00000000
[20:28:29.578]  </debugvars>
[20:28:29.578]  
[20:28:29.578]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:28:29.583]    <block atomic="false" info="">
[20:28:29.583]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:28:29.583]        // -> [isSWJ <= 0x00000001]
[20:28:29.583]      __var hasDormant = __protocol & 0x00020000;
[20:28:29.583]        // -> [hasDormant <= 0x00000000]
[20:28:29.583]      __var protType   = __protocol & 0x0000FFFF;
[20:28:29.583]        // -> [protType <= 0x00000002]
[20:28:29.583]    </block>
[20:28:29.583]    <control if="protType == 1" while="" timeout="0" info="">
[20:28:29.583]      // if-block "protType == 1"
[20:28:29.583]        // =>  FALSE
[20:28:29.583]      // skip if-block "protType == 1"
[20:28:29.583]    </control>
[20:28:29.583]    <control if="protType == 2" while="" timeout="0" info="">
[20:28:29.583]      // if-block "protType == 2"
[20:28:29.583]        // =>  TRUE
[20:28:29.583]      <control if="isSWJ" while="" timeout="0" info="">
[20:28:29.583]        // if-block "isSWJ"
[20:28:29.583]          // =>  TRUE
[20:28:29.583]        <control if="hasDormant" while="" timeout="0" info="">
[20:28:29.583]          // if-block "hasDormant"
[20:28:29.583]            // =>  FALSE
[20:28:29.583]          // skip if-block "hasDormant"
[20:28:29.583]        </control>
[20:28:29.583]        <control if="!hasDormant" while="" timeout="0" info="">
[20:28:29.583]          // if-block "!hasDormant"
[20:28:29.583]            // =>  TRUE
[20:28:29.583]          <block atomic="false" info="">
[20:28:29.583]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:28:29.583]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:28:29.583]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:28:29.588]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:28:29.588]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:28:29.588]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:28:29.588]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:28:29.588]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:28:29.588]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:28:29.593]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:28:29.593]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:28:29.593]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:28:29.593]          </block>
[20:28:29.593]          // end if-block "!hasDormant"
[20:28:29.593]        </control>
[20:28:29.593]        // end if-block "isSWJ"
[20:28:29.593]      </control>
[20:28:29.593]      <control if="!isSWJ" while="" timeout="0" info="">
[20:28:29.593]        // if-block "!isSWJ"
[20:28:29.593]          // =>  FALSE
[20:28:29.593]        // skip if-block "!isSWJ"
[20:28:29.593]      </control>
[20:28:29.593]      <block atomic="false" info="">
[20:28:29.593]        ReadDP(0x0);
[20:28:29.593]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:28:29.598]      </block>
[20:28:29.598]      // end if-block "protType == 2"
[20:28:29.598]    </control>
[20:28:29.598]  </sequence>
[20:28:29.598]  
[20:28:29.598]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:28:29.598]  
[20:28:29.598]  <debugvars>
[20:28:29.598]    // Pre-defined
[20:28:29.598]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:28:29.598]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:28:29.598]    __dp=0x00000000
[20:28:29.598]    __ap=0x00000000
[20:28:29.598]    __traceout=0x00000000      (Trace Disabled)
[20:28:29.598]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:28:29.598]    __FlashAddr=0x00000000
[20:28:29.598]    __FlashLen=0x00000000
[20:28:29.598]    __FlashArg=0x00000000
[20:28:29.603]    __FlashOp=0x00000000
[20:28:29.603]    __Result=0x00000000
[20:28:29.603]  </debugvars>
[20:28:29.603]  
[20:28:29.603]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:28:29.603]    <block atomic="false" info="">
[20:28:29.603]      __var SW_DP_ABORT       = 0x0;
[20:28:29.603]        // -> [SW_DP_ABORT <= 0x00000000]
[20:28:29.603]      __var DP_CTRL_STAT      = 0x4;
[20:28:29.603]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:28:29.603]      __var DP_SELECT         = 0x8;
[20:28:29.603]        // -> [DP_SELECT <= 0x00000008]
[20:28:29.603]      __var powered_down      = 0;
[20:28:29.603]        // -> [powered_down <= 0x00000000]
[20:28:29.603]      WriteDP(DP_SELECT, 0x00000000);
[20:28:29.605]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:28:29.608]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:28:29.608]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:28:29.608]        // -> [powered_down <= 0x00000001]
[20:28:29.608]    </block>
[20:28:29.608]    <control if="powered_down" while="" timeout="0" info="">
[20:28:29.608]      // if-block "powered_down"
[20:28:29.608]        // =>  TRUE
[20:28:29.608]      <block atomic="false" info="">
[20:28:29.608]        Message(0, "Debug/System power-up request sent");
[20:28:29.612]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:28:29.614]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:28:29.614]      </block>
[20:28:29.614]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:28:29.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:28:29.615]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:28:29.615]        // while-condition  =>  FALSE
[20:28:29.615]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:28:29.615]      </control>
[20:28:29.615]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:28:29.615]        // if-block "(__protocol & 0xFFFF) == 1"
[20:28:29.615]          // =>  FALSE
[20:28:29.615]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:28:29.615]      </control>
[20:28:29.615]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:28:29.615]        // if-block "(__protocol & 0xFFFF) == 2"
[20:28:29.615]          // =>  TRUE
[20:28:29.615]        <block atomic="false" info="">
[20:28:29.615]          Message(0, "executing SWD power up");
[20:28:29.618]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:28:29.618]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:28:29.618]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:28:29.623]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:28:29.623]        </block>
[20:28:29.623]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:28:29.623]      </control>
[20:28:29.623]      // end if-block "powered_down"
[20:28:29.623]    </control>
[20:28:29.623]    <block atomic="false" info="">
[20:28:29.623]      __var DEBUG_PORT_VAL    = 0;
[20:28:29.623]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:28:29.623]      __var ACCESS_POINT_VAL  = 0;
[20:28:29.623]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:28:29.623]      __ap = 1; 
[20:28:29.623]        // -> [__ap <= 0x00000001]
[20:28:29.623]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:28:29.628]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:28:29.628]      __ap = 4;
[20:28:29.628]        // -> [__ap <= 0x00000004]
[20:28:29.628]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:28:29.638]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:28:29.638]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:28:29.639]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:28:29.639]    </block>
[20:28:29.639]    <block atomic="false" info="">
[20:28:29.639]      __var nReset = 0x80;
[20:28:29.639]        // -> [nReset <= 0x00000080]
[20:28:29.639]      __var canReadPins = 0;
[20:28:29.639]        // -> [canReadPins <= 0x00000000]
[20:28:29.639]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:28:29.639]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:28:29.639]        // -> [canReadPins <= 0x00000001]
[20:28:29.639]    </block>
[20:28:29.644]    <control if="" while="1" timeout="200" info="">
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.644]      // while "1"  (timeout="200")
[20:28:29.644]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.648]      // while-condition  =>  TRUE
[20:28:29.648]      // while "1"  (timeout="200")
[20:28:29.654]      // while-condition  =>  TRUE
[20:28:29.654]      // while "1"  (timeout="200")
[20:28:29.654]      // while-condition  =>  TRUE
[20:28:29.654]      // while "1"  (timeout="200")
[20:28:29.654]      // while-condition  =>  TRUE
[20:28:29.654]      // while "1"  (timeout="200")
[20:28:29.654]      // while-condition  =>  TRUE
[20:28:29.654]      // while "1"  (timeout="200")
[20:28:29.654]      // while-condition  =>  TRUE
[20:28:29.655]      // while "1"  (timeout="200")
[20:28:29.655]      // while-condition  =>  TRUE
[20:28:29.655]      // while "1"  (timeout="200")
[20:28:29.655]      // while-condition  =>  TRUE
[20:28:29.655]      // while "1"  (timeout="200")
[20:28:29.655]      // while-condition  =>  TRUE
[20:28:29.655]      // while "1"  (timeout="200")
[20:28:29.655]      // while-condition  =>  TRUE
[20:28:29.655]      // while "1"  (timeout="200")
[20:28:29.655]      // while-condition  =>  TRUE
[20:28:29.655]      // while "1"  (timeout="200")
[20:28:29.655]      // while-condition  =>  TRUE
[20:28:29.655]      // while "1"  (timeout="200")
[20:28:29.656]      // while-condition  =>  TRUE
[20:28:29.656]      // while "1"  (timeout="200")
[20:28:29.656]      // while-condition  =>  TRUE
[20:28:29.656]      // while "1"  (timeout="200")
[20:28:29.656]      // while-condition  =>  TRUE
[20:28:29.656]      // while "1"  (timeout="200")
[20:28:29.656]      // while-condition  =>  TRUE
[20:28:29.656]      // while "1"  (timeout="200")
[20:28:29.656]      // while-condition  =>  TRUE
[20:28:29.656]      // while "1"  (timeout="200")
[20:28:29.656]      // while-condition  =>  TRUE
[20:28:29.656]      // while "1"  (timeout="200")
[20:28:29.656]      // while-condition  =>  TRUE
[20:28:29.656]      // while "1"  (timeout="200")
[20:28:29.656]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.658]      // while-condition  =>  TRUE
[20:28:29.658]      // while "1"  (timeout="200")
[20:28:29.664]      // while-condition  =>  TRUE
[20:28:29.664]      // while "1"  (timeout="200")
[20:28:29.664]      // while  =>  TIMEOUT
[20:28:29.664]      // end while "1"
[20:28:29.664]    </control>
[20:28:29.664]    <control if="canReadPins" while="" timeout="0" info="">
[20:28:29.664]      // if-block "canReadPins"
[20:28:29.664]        // =>  TRUE
[20:28:29.664]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:28:29.664]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:28:29.664]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:28:29.664]        // while-condition  =>  FALSE
[20:28:29.664]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:28:29.668]      </control>
[20:28:29.668]      // end if-block "canReadPins"
[20:28:29.668]    </control>
[20:28:29.668]    <control if="!canReadPins" while="" timeout="0" info="">
[20:28:29.668]      // if-block "!canReadPins"
[20:28:29.668]        // =>  FALSE
[20:28:29.668]      // skip if-block "!canReadPins"
[20:28:29.668]    </control>
[20:28:29.668]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:28:29.668]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:28:29.668]        // =>  TRUE
[20:28:29.668]      <block atomic="false" info="">
[20:28:29.668]        WriteAP(0x00, 0x190008);
[20:28:29.675]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:28:29.675]        WriteAP(0xF0, 0x01);
[20:28:29.678]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:28:29.678]      </block>
[20:28:29.678]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:28:29.678]    </control>
[20:28:29.678]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:28:29.678]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:28:29.678]        // =>  FALSE
[20:28:29.678]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:28:29.678]    </control>
[20:28:29.678]    <block atomic="false" info="">
[20:28:29.678]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:28:29.678]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:28:29.678]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:28:29.678]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:28:29.686]      __ap = 0; //lets make sure we reset the access point selection
[20:28:29.686]        // -> [__ap <= 0x00000000]
[20:28:29.686]    </block>
[20:28:29.688]  </sequence>
[20:28:29.688]  
[20:28:29.708]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:28:29.708]  
[20:28:29.708]  <debugvars>
[20:28:29.708]    // Pre-defined
[20:28:29.708]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:28:29.708]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:28:29.708]    __dp=0x00000000
[20:28:29.708]    __ap=0x00000000
[20:28:29.708]    __traceout=0x00000000      (Trace Disabled)
[20:28:29.708]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:28:29.708]    __FlashAddr=0x00000000
[20:28:29.708]    __FlashLen=0x00000000
[20:28:29.708]    __FlashArg=0x00000000
[20:28:29.708]    __FlashOp=0x00000000
[20:28:29.708]    __Result=0x00000000
[20:28:29.708]  </debugvars>
[20:28:29.708]  
[20:28:29.708]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:28:29.708]    <block atomic="false" info="">
[20:28:29.708]      __var deviceID = 0;
[20:28:29.708]        // -> [deviceID <= 0x00000000]
[20:28:29.708]      __var version = 0;
[20:28:29.708]        // -> [version <= 0x00000000]
[20:28:29.708]      __var partNum = 0;
[20:28:29.708]        // -> [partNum <= 0x00000000]
[20:28:29.708]      __var manuf = 0;
[20:28:29.708]        // -> [manuf <= 0x00000000]
[20:28:29.708]      __var isMSPM0G1X0X_G3X0X = 0;
[20:28:29.708]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:28:29.708]      __var isProduction = 0;
[20:28:29.708]        // -> [isProduction <= 0x00000000]
[20:28:29.708]      __var continueId = 0;
[20:28:29.715]        // -> [continueId <= 0x00000000]
[20:28:29.715]      deviceID =   Read32(0x41C40004);
[20:28:29.728]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:28:29.728]        // -> [deviceID <= 0x2BB8802F]
[20:28:29.728]      version = deviceID >> 28;
[20:28:29.728]        // -> [version <= 0x00000002]
[20:28:29.728]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:28:29.728]        // -> [partNum <= 0x0000BB88]
[20:28:29.728]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:28:29.728]        // -> [manuf <= 0x00000017]
[20:28:29.728]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:28:29.728]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:28:29.728]      isProduction = (version > 0);
[20:28:29.728]        // -> [isProduction <= 0x00000001]
[20:28:29.728]    </block>
[20:28:29.728]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:28:29.728]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:28:29.728]        // =>  FALSE
[20:28:29.728]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:28:29.728]    </control>
[20:28:29.728]    <control if="continueId == 4" while="" timeout="0" info="">
[20:28:29.728]      // if-block "continueId == 4"
[20:28:29.728]        // =>  FALSE
[20:28:29.728]      // skip if-block "continueId == 4"
[20:28:29.728]    </control>
[20:28:29.728]    <control if="!isProduction" while="" timeout="0" info="">
[20:28:29.728]      // if-block "!isProduction"
[20:28:29.728]        // =>  FALSE
[20:28:29.728]      // skip if-block "!isProduction"
[20:28:29.728]    </control>
[20:28:29.728]  </sequence>
[20:28:29.728]  
[20:29:37.225]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:29:37.225]  
[20:29:37.225]  <debugvars>
[20:29:37.225]    // Pre-defined
[20:29:37.225]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:29:37.225]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:29:37.225]    __dp=0x00000000
[20:29:37.225]    __ap=0x00000000
[20:29:37.225]    __traceout=0x00000000      (Trace Disabled)
[20:29:37.225]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:29:37.225]    __FlashAddr=0x00000000
[20:29:37.225]    __FlashLen=0x00000000
[20:29:37.225]    __FlashArg=0x00000000
[20:29:37.225]    __FlashOp=0x00000000
[20:29:37.225]    __Result=0x00000000
[20:29:37.225]  </debugvars>
[20:29:37.225]  
[20:29:37.225]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:29:37.225]    <block atomic="false" info="">
[20:29:37.225]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:29:37.225]        // -> [isSWJ <= 0x00000001]
[20:29:37.225]      __var hasDormant = __protocol & 0x00020000;
[20:29:37.225]        // -> [hasDormant <= 0x00000000]
[20:29:37.225]      __var protType   = __protocol & 0x0000FFFF;
[20:29:37.225]        // -> [protType <= 0x00000002]
[20:29:37.225]    </block>
[20:29:37.225]    <control if="protType == 1" while="" timeout="0" info="">
[20:29:37.225]      // if-block "protType == 1"
[20:29:37.225]        // =>  FALSE
[20:29:37.225]      // skip if-block "protType == 1"
[20:29:37.225]    </control>
[20:29:37.225]    <control if="protType == 2" while="" timeout="0" info="">
[20:29:37.225]      // if-block "protType == 2"
[20:29:37.225]        // =>  TRUE
[20:29:37.225]      <control if="isSWJ" while="" timeout="0" info="">
[20:29:37.225]        // if-block "isSWJ"
[20:29:37.225]          // =>  TRUE
[20:29:37.225]        <control if="hasDormant" while="" timeout="0" info="">
[20:29:37.225]          // if-block "hasDormant"
[20:29:37.225]            // =>  FALSE
[20:29:37.225]          // skip if-block "hasDormant"
[20:29:37.225]        </control>
[20:29:37.225]        <control if="!hasDormant" while="" timeout="0" info="">
[20:29:37.225]          // if-block "!hasDormant"
[20:29:37.225]            // =>  TRUE
[20:29:37.225]          <block atomic="false" info="">
[20:29:37.225]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:29:37.235]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:29:37.235]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:29:37.235]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:29:37.235]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:29:37.235]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:29:37.235]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:29:37.235]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:29:37.235]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:29:37.235]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:29:37.235]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:29:37.235]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:29:37.235]          </block>
[20:29:37.235]          // end if-block "!hasDormant"
[20:29:37.235]        </control>
[20:29:37.235]        // end if-block "isSWJ"
[20:29:37.235]      </control>
[20:29:37.235]      <control if="!isSWJ" while="" timeout="0" info="">
[20:29:37.235]        // if-block "!isSWJ"
[20:29:37.235]          // =>  FALSE
[20:29:37.235]        // skip if-block "!isSWJ"
[20:29:37.245]      </control>
[20:29:37.245]      <block atomic="false" info="">
[20:29:37.245]        ReadDP(0x0);
[20:29:37.245]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:29:37.245]      </block>
[20:29:37.245]      // end if-block "protType == 2"
[20:29:37.245]    </control>
[20:29:37.245]  </sequence>
[20:29:37.245]  
[20:29:37.245]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:29:37.245]  
[20:29:37.245]  <debugvars>
[20:29:37.245]    // Pre-defined
[20:29:37.245]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:29:37.245]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:29:37.245]    __dp=0x00000000
[20:29:37.245]    __ap=0x00000000
[20:29:37.245]    __traceout=0x00000000      (Trace Disabled)
[20:29:37.245]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:29:37.245]    __FlashAddr=0x00000000
[20:29:37.245]    __FlashLen=0x00000000
[20:29:37.245]    __FlashArg=0x00000000
[20:29:37.245]    __FlashOp=0x00000000
[20:29:37.245]    __Result=0x00000000
[20:29:37.245]  </debugvars>
[20:29:37.245]  
[20:29:37.245]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:29:37.245]    <block atomic="false" info="">
[20:29:37.245]      __var SW_DP_ABORT       = 0x0;
[20:29:37.245]        // -> [SW_DP_ABORT <= 0x00000000]
[20:29:37.245]      __var DP_CTRL_STAT      = 0x4;
[20:29:37.245]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:29:37.245]      __var DP_SELECT         = 0x8;
[20:29:37.245]        // -> [DP_SELECT <= 0x00000008]
[20:29:37.245]      __var powered_down      = 0;
[20:29:37.245]        // -> [powered_down <= 0x00000000]
[20:29:37.245]      WriteDP(DP_SELECT, 0x00000000);
[20:29:37.256]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:29:37.256]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:29:37.256]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:29:37.256]        // -> [powered_down <= 0x00000001]
[20:29:37.256]    </block>
[20:29:37.256]    <control if="powered_down" while="" timeout="0" info="">
[20:29:37.256]      // if-block "powered_down"
[20:29:37.256]        // =>  TRUE
[20:29:37.256]      <block atomic="false" info="">
[20:29:37.256]        Message(0, "Debug/System power-up request sent");
[20:29:37.256]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:29:37.256]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:29:37.256]      </block>
[20:29:37.256]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:29:37.256]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:29:37.266]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:29:37.266]        // while-condition  =>  FALSE
[20:29:37.266]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:29:37.266]      </control>
[20:29:37.266]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:29:37.266]        // if-block "(__protocol & 0xFFFF) == 1"
[20:29:37.266]          // =>  FALSE
[20:29:37.266]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:29:37.266]      </control>
[20:29:37.266]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:29:37.266]        // if-block "(__protocol & 0xFFFF) == 2"
[20:29:37.267]          // =>  TRUE
[20:29:37.267]        <block atomic="false" info="">
[20:29:37.267]          Message(0, "executing SWD power up");
[20:29:37.268]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:29:37.268]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:29:37.268]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:29:37.271]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:29:37.271]        </block>
[20:29:37.271]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:29:37.271]      </control>
[20:29:37.271]      // end if-block "powered_down"
[20:29:37.271]    </control>
[20:29:37.271]    <block atomic="false" info="">
[20:29:37.271]      __var DEBUG_PORT_VAL    = 0;
[20:29:37.271]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:29:37.271]      __var ACCESS_POINT_VAL  = 0;
[20:29:37.271]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:29:37.271]      __ap = 1; 
[20:29:37.271]        // -> [__ap <= 0x00000001]
[20:29:37.271]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:29:37.281]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:29:37.281]      __ap = 4;
[20:29:37.281]        // -> [__ap <= 0x00000004]
[20:29:37.281]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:29:37.283]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:29:37.284]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:29:37.284]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:29:37.285]    </block>
[20:29:37.285]    <block atomic="false" info="">
[20:29:37.285]      __var nReset = 0x80;
[20:29:37.285]        // -> [nReset <= 0x00000080]
[20:29:37.285]      __var canReadPins = 0;
[20:29:37.286]        // -> [canReadPins <= 0x00000000]
[20:29:37.286]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:29:37.288]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:29:37.288]        // -> [canReadPins <= 0x00000001]
[20:29:37.288]    </block>
[20:29:37.288]    <control if="" while="1" timeout="200" info="">
[20:29:37.288]      // while "1"  (timeout="200")
[20:29:37.288]      // while-condition  =>  TRUE
[20:29:37.288]      // while "1"  (timeout="200")
[20:29:37.288]      // while-condition  =>  TRUE
[20:29:37.288]      // while "1"  (timeout="200")
[20:29:37.288]      // while-condition  =>  TRUE
[20:29:37.288]      // while "1"  (timeout="200")
[20:29:37.288]      // while-condition  =>  TRUE
[20:29:37.288]      // while "1"  (timeout="200")
[20:29:37.289]      // while-condition  =>  TRUE
[20:29:37.289]      // while "1"  (timeout="200")
[20:29:37.289]      // while-condition  =>  TRUE
[20:29:37.289]      // while "1"  (timeout="200")
[20:29:37.289]      // while-condition  =>  TRUE
[20:29:37.289]      // while "1"  (timeout="200")
[20:29:37.289]      // while-condition  =>  TRUE
[20:29:37.289]      // while "1"  (timeout="200")
[20:29:37.289]      // while-condition  =>  TRUE
[20:29:37.289]      // while "1"  (timeout="200")
[20:29:37.289]      // while-condition  =>  TRUE
[20:29:37.289]      // while "1"  (timeout="200")
[20:29:37.289]      // while-condition  =>  TRUE
[20:29:37.291]      // while "1"  (timeout="200")
[20:29:37.291]      // while-condition  =>  TRUE
[20:29:37.291]      // while "1"  (timeout="200")
[20:29:37.291]      // while-condition  =>  TRUE
[20:29:37.291]      // while "1"  (timeout="200")
[20:29:37.291]      // while-condition  =>  TRUE
[20:29:37.291]      // while "1"  (timeout="200")
[20:29:37.291]      // while-condition  =>  TRUE
[20:29:37.291]      // while "1"  (timeout="200")
[20:29:37.291]      // while-condition  =>  TRUE
[20:29:37.291]      // while "1"  (timeout="200")
[20:29:37.291]      // while-condition  =>  TRUE
[20:29:37.292]      // while "1"  (timeout="200")
[20:29:37.292]      // while-condition  =>  TRUE
[20:29:37.292]      // while "1"  (timeout="200")
[20:29:37.292]      // while-condition  =>  TRUE
[20:29:37.292]      // while "1"  (timeout="200")
[20:29:37.292]      // while-condition  =>  TRUE
[20:29:37.292]      // while "1"  (timeout="200")
[20:29:37.292]      // while-condition  =>  TRUE
[20:29:37.292]      // while "1"  (timeout="200")
[20:29:37.292]      // while-condition  =>  TRUE
[20:29:37.292]      // while "1"  (timeout="200")
[20:29:37.292]      // while-condition  =>  TRUE
[20:29:37.292]      // while "1"  (timeout="200")
[20:29:37.293]      // while-condition  =>  TRUE
[20:29:37.293]      // while "1"  (timeout="200")
[20:29:37.293]      // while-condition  =>  TRUE
[20:29:37.293]      // while "1"  (timeout="200")
[20:29:37.293]      // while-condition  =>  TRUE
[20:29:37.293]      // while "1"  (timeout="200")
[20:29:37.293]      // while-condition  =>  TRUE
[20:29:37.293]      // while "1"  (timeout="200")
[20:29:37.293]      // while-condition  =>  TRUE
[20:29:37.293]      // while "1"  (timeout="200")
[20:29:37.293]      // while-condition  =>  TRUE
[20:29:37.294]      // while "1"  (timeout="200")
[20:29:37.294]      // while-condition  =>  TRUE
[20:29:37.294]      // while "1"  (timeout="200")
[20:29:37.294]      // while-condition  =>  TRUE
[20:29:37.294]      // while "1"  (timeout="200")
[20:29:37.294]      // while-condition  =>  TRUE
[20:29:37.294]      // while "1"  (timeout="200")
[20:29:37.294]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.296]      // while-condition  =>  TRUE
[20:29:37.296]      // while "1"  (timeout="200")
[20:29:37.299]      // while-condition  =>  TRUE
[20:29:37.299]      // while "1"  (timeout="200")
[20:29:37.299]      // while-condition  =>  TRUE
[20:29:37.299]      // while "1"  (timeout="200")
[20:29:37.299]      // while-condition  =>  TRUE
[20:29:37.299]      // while "1"  (timeout="200")
[20:29:37.299]      // while-condition  =>  TRUE
[20:29:37.299]      // while "1"  (timeout="200")
[20:29:37.299]      // while-condition  =>  TRUE
[20:29:37.299]      // while "1"  (timeout="200")
[20:29:37.299]      // while-condition  =>  TRUE
[20:29:37.299]      // while "1"  (timeout="200")
[20:29:37.300]      // while-condition  =>  TRUE
[20:29:37.300]      // while "1"  (timeout="200")
[20:29:37.300]      // while  =>  TIMEOUT
[20:29:37.300]      // end while "1"
[20:29:37.300]    </control>
[20:29:37.300]    <control if="canReadPins" while="" timeout="0" info="">
[20:29:37.300]      // if-block "canReadPins"
[20:29:37.300]        // =>  TRUE
[20:29:37.300]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:29:37.300]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:29:37.302]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:29:37.302]        // while-condition  =>  FALSE
[20:29:37.302]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:29:37.302]      </control>
[20:29:37.302]      // end if-block "canReadPins"
[20:29:37.302]    </control>
[20:29:37.302]    <control if="!canReadPins" while="" timeout="0" info="">
[20:29:37.304]      // if-block "!canReadPins"
[20:29:37.304]        // =>  FALSE
[20:29:37.304]      // skip if-block "!canReadPins"
[20:29:37.304]    </control>
[20:29:37.304]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:29:37.304]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:29:37.304]        // =>  TRUE
[20:29:37.304]      <block atomic="false" info="">
[20:29:37.304]        WriteAP(0x00, 0x190008);
[20:29:37.306]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:29:37.306]        WriteAP(0xF0, 0x01);
[20:29:37.314]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:29:37.314]      </block>
[20:29:37.314]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:29:37.314]    </control>
[20:29:37.314]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:29:37.314]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:29:37.314]        // =>  FALSE
[20:29:37.314]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:29:37.314]    </control>
[20:29:37.314]    <block atomic="false" info="">
[20:29:37.314]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:29:37.318]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:29:37.318]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:29:37.318]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:29:37.319]      __ap = 0; //lets make sure we reset the access point selection
[20:29:37.319]        // -> [__ap <= 0x00000000]
[20:29:37.319]    </block>
[20:29:37.319]  </sequence>
[20:29:37.319]  
[20:29:37.340]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:29:37.340]  
[20:29:37.340]  <debugvars>
[20:29:37.340]    // Pre-defined
[20:29:37.340]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:29:37.340]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:29:37.340]    __dp=0x00000000
[20:29:37.340]    __ap=0x00000000
[20:29:37.340]    __traceout=0x00000000      (Trace Disabled)
[20:29:37.340]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:29:37.340]    __FlashAddr=0x00000000
[20:29:37.340]    __FlashLen=0x00000000
[20:29:37.341]    __FlashArg=0x00000000
[20:29:37.341]    __FlashOp=0x00000000
[20:29:37.341]    __Result=0x00000000
[20:29:37.341]  </debugvars>
[20:29:37.341]  
[20:29:37.341]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:29:37.341]    <block atomic="false" info="">
[20:29:37.341]      __var deviceID = 0;
[20:29:37.341]        // -> [deviceID <= 0x00000000]
[20:29:37.341]      __var version = 0;
[20:29:37.341]        // -> [version <= 0x00000000]
[20:29:37.343]      __var partNum = 0;
[20:29:37.343]        // -> [partNum <= 0x00000000]
[20:29:37.343]      __var manuf = 0;
[20:29:37.343]        // -> [manuf <= 0x00000000]
[20:29:37.343]      __var isMSPM0G1X0X_G3X0X = 0;
[20:29:37.343]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:29:37.343]      __var isProduction = 0;
[20:29:37.343]        // -> [isProduction <= 0x00000000]
[20:29:37.343]      __var continueId = 0;
[20:29:37.343]        // -> [continueId <= 0x00000000]
[20:29:37.343]      deviceID =   Read32(0x41C40004);
[20:29:37.349]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:29:37.349]        // -> [deviceID <= 0x2BB8802F]
[20:29:37.349]      version = deviceID >> 28;
[20:29:37.349]        // -> [version <= 0x00000002]
[20:29:37.349]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:29:37.349]        // -> [partNum <= 0x0000BB88]
[20:29:37.349]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:29:37.349]        // -> [manuf <= 0x00000017]
[20:29:37.349]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:29:37.349]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:29:37.349]      isProduction = (version > 0);
[20:29:37.349]        // -> [isProduction <= 0x00000001]
[20:29:37.349]    </block>
[20:29:37.349]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:29:37.349]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:29:37.349]        // =>  FALSE
[20:29:37.349]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:29:37.352]    </control>
[20:29:37.352]    <control if="continueId == 4" while="" timeout="0" info="">
[20:29:37.352]      // if-block "continueId == 4"
[20:29:37.352]        // =>  FALSE
[20:29:37.352]      // skip if-block "continueId == 4"
[20:29:37.352]    </control>
[20:29:37.352]    <control if="!isProduction" while="" timeout="0" info="">
[20:29:37.352]      // if-block "!isProduction"
[20:29:37.352]        // =>  FALSE
[20:29:37.352]      // skip if-block "!isProduction"
[20:29:37.352]    </control>
[20:29:37.352]  </sequence>
[20:29:37.352]  
[20:34:28.029]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:34:28.029]  
[20:34:28.029]  <debugvars>
[20:34:28.029]    // Pre-defined
[20:34:28.029]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:28.029]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:34:28.029]    __dp=0x00000000
[20:34:28.029]    __ap=0x00000000
[20:34:28.029]    __traceout=0x00000000      (Trace Disabled)
[20:34:28.029]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:28.029]    __FlashAddr=0x00000000
[20:34:28.029]    __FlashLen=0x00000000
[20:34:28.029]    __FlashArg=0x00000000
[20:34:28.029]    __FlashOp=0x00000000
[20:34:28.029]    __Result=0x00000000
[20:34:28.029]  </debugvars>
[20:34:28.029]  
[20:34:28.029]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:34:28.029]    <block atomic="false" info="">
[20:34:28.029]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:34:28.029]        // -> [isSWJ <= 0x00000001]
[20:34:28.029]      __var hasDormant = __protocol & 0x00020000;
[20:34:28.029]        // -> [hasDormant <= 0x00000000]
[20:34:28.029]      __var protType   = __protocol & 0x0000FFFF;
[20:34:28.029]        // -> [protType <= 0x00000002]
[20:34:28.029]    </block>
[20:34:28.029]    <control if="protType == 1" while="" timeout="0" info="">
[20:34:28.029]      // if-block "protType == 1"
[20:34:28.029]        // =>  FALSE
[20:34:28.029]      // skip if-block "protType == 1"
[20:34:28.029]    </control>
[20:34:28.029]    <control if="protType == 2" while="" timeout="0" info="">
[20:34:28.029]      // if-block "protType == 2"
[20:34:28.029]        // =>  TRUE
[20:34:28.029]      <control if="isSWJ" while="" timeout="0" info="">
[20:34:28.029]        // if-block "isSWJ"
[20:34:28.029]          // =>  TRUE
[20:34:28.029]        <control if="hasDormant" while="" timeout="0" info="">
[20:34:28.029]          // if-block "hasDormant"
[20:34:28.029]            // =>  FALSE
[20:34:28.029]          // skip if-block "hasDormant"
[20:34:28.029]        </control>
[20:34:28.029]        <control if="!hasDormant" while="" timeout="0" info="">
[20:34:28.029]          // if-block "!hasDormant"
[20:34:28.029]            // =>  TRUE
[20:34:28.029]          <block atomic="false" info="">
[20:34:28.029]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:34:28.035]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:34:28.035]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:34:28.037]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:34:28.037]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:34:28.039]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:34:28.039]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:34:28.039]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:34:28.039]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:34:28.041]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:34:28.043]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:34:28.043]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:34:28.043]          </block>
[20:34:28.043]          // end if-block "!hasDormant"
[20:34:28.043]        </control>
[20:34:28.043]        // end if-block "isSWJ"
[20:34:28.043]      </control>
[20:34:28.043]      <control if="!isSWJ" while="" timeout="0" info="">
[20:34:28.043]        // if-block "!isSWJ"
[20:34:28.043]          // =>  FALSE
[20:34:28.043]        // skip if-block "!isSWJ"
[20:34:28.043]      </control>
[20:34:28.043]      <block atomic="false" info="">
[20:34:28.043]        ReadDP(0x0);
[20:34:28.046]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:34:28.046]      </block>
[20:34:28.046]      // end if-block "protType == 2"
[20:34:28.046]    </control>
[20:34:28.046]  </sequence>
[20:34:28.046]  
[20:34:28.053]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:34:28.053]  
[20:34:28.053]  <debugvars>
[20:34:28.053]    // Pre-defined
[20:34:28.056]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:28.056]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:34:28.056]    __dp=0x00000000
[20:34:28.056]    __ap=0x00000000
[20:34:28.056]    __traceout=0x00000000      (Trace Disabled)
[20:34:28.056]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:28.056]    __FlashAddr=0x00000000
[20:34:28.056]    __FlashLen=0x00000000
[20:34:28.056]    __FlashArg=0x00000000
[20:34:28.056]    __FlashOp=0x00000000
[20:34:28.056]    __Result=0x00000000
[20:34:28.056]  </debugvars>
[20:34:28.056]  
[20:34:28.056]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:34:28.056]    <block atomic="false" info="">
[20:34:28.056]      __var SW_DP_ABORT       = 0x0;
[20:34:28.056]        // -> [SW_DP_ABORT <= 0x00000000]
[20:34:28.056]      __var DP_CTRL_STAT      = 0x4;
[20:34:28.056]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:34:28.056]      __var DP_SELECT         = 0x8;
[20:34:28.056]        // -> [DP_SELECT <= 0x00000008]
[20:34:28.056]      __var powered_down      = 0;
[20:34:28.056]        // -> [powered_down <= 0x00000000]
[20:34:28.056]      WriteDP(DP_SELECT, 0x00000000);
[20:34:28.056]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:34:28.056]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:34:28.056]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:34:28.056]        // -> [powered_down <= 0x00000001]
[20:34:28.056]    </block>
[20:34:28.056]    <control if="powered_down" while="" timeout="0" info="">
[20:34:28.056]      // if-block "powered_down"
[20:34:28.056]        // =>  TRUE
[20:34:28.056]      <block atomic="false" info="">
[20:34:28.056]        Message(0, "Debug/System power-up request sent");
[20:34:28.064]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:34:28.064]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:34:28.064]      </block>
[20:34:28.064]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:34:28.064]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:34:28.066]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:34:28.066]        // while-condition  =>  FALSE
[20:34:28.066]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:34:28.066]      </control>
[20:34:28.066]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:34:28.068]        // if-block "(__protocol & 0xFFFF) == 1"
[20:34:28.068]          // =>  FALSE
[20:34:28.068]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:34:28.068]      </control>
[20:34:28.068]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:34:28.068]        // if-block "(__protocol & 0xFFFF) == 2"
[20:34:28.068]          // =>  TRUE
[20:34:28.068]        <block atomic="false" info="">
[20:34:28.068]          Message(0, "executing SWD power up");
[20:34:28.070]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:34:28.072]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:34:28.072]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:34:28.074]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:34:28.074]        </block>
[20:34:28.074]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:34:28.074]      </control>
[20:34:28.074]      // end if-block "powered_down"
[20:34:28.074]    </control>
[20:34:28.074]    <block atomic="false" info="">
[20:34:28.074]      __var DEBUG_PORT_VAL    = 0;
[20:34:28.074]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:34:28.074]      __var ACCESS_POINT_VAL  = 0;
[20:34:28.074]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:34:28.074]      __ap = 1; 
[20:34:28.074]        // -> [__ap <= 0x00000001]
[20:34:28.074]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:34:28.083]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:34:28.083]      __ap = 4;
[20:34:28.083]        // -> [__ap <= 0x00000004]
[20:34:28.083]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:34:28.089]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:34:28.089]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:34:28.089]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:34:28.089]    </block>
[20:34:28.089]    <block atomic="false" info="">
[20:34:28.089]      __var nReset = 0x80;
[20:34:28.089]        // -> [nReset <= 0x00000080]
[20:34:28.089]      __var canReadPins = 0;
[20:34:28.089]        // -> [canReadPins <= 0x00000000]
[20:34:28.089]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:34:28.096]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:34:28.096]        // -> [canReadPins <= 0x00000001]
[20:34:28.096]    </block>
[20:34:28.096]    <control if="" while="1" timeout="200" info="">
[20:34:28.098]      // while "1"  (timeout="200")
[20:34:28.098]      // while-condition  =>  TRUE
[20:34:28.098]      // while "1"  (timeout="200")
[20:34:28.098]      // while-condition  =>  TRUE
[20:34:28.098]      // while "1"  (timeout="200")
[20:34:28.098]      // while-condition  =>  TRUE
[20:34:28.098]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.099]      // while "1"  (timeout="200")
[20:34:28.099]      // while-condition  =>  TRUE
[20:34:28.108]      // while "1"  (timeout="200")
[20:34:28.108]      // while-condition  =>  TRUE
[20:34:28.108]      // while "1"  (timeout="200")
[20:34:28.108]      // while-condition  =>  TRUE
[20:34:28.108]      // while "1"  (timeout="200")
[20:34:28.108]      // while-condition  =>  TRUE
[20:34:28.108]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.109]      // while-condition  =>  TRUE
[20:34:28.109]      // while "1"  (timeout="200")
[20:34:28.112]      // while-condition  =>  TRUE
[20:34:28.112]      // while "1"  (timeout="200")
[20:34:28.112]      // while-condition  =>  TRUE
[20:34:28.112]      // while "1"  (timeout="200")
[20:34:28.112]      // while-condition  =>  TRUE
[20:34:28.112]      // while "1"  (timeout="200")
[20:34:28.112]      // while-condition  =>  TRUE
[20:34:28.112]      // while "1"  (timeout="200")
[20:34:28.112]      // while-condition  =>  TRUE
[20:34:28.112]      // while "1"  (timeout="200")
[20:34:28.112]      // while-condition  =>  TRUE
[20:34:28.112]      // while "1"  (timeout="200")
[20:34:28.112]      // while-condition  =>  TRUE
[20:34:28.112]      // while "1"  (timeout="200")
[20:34:28.112]      // while-condition  =>  TRUE
[20:34:28.112]      // while "1"  (timeout="200")
[20:34:28.112]      // while-condition  =>  TRUE
[20:34:28.113]      // while "1"  (timeout="200")
[20:34:28.113]      // while  =>  TIMEOUT
[20:34:28.113]      // end while "1"
[20:34:28.113]    </control>
[20:34:28.113]    <control if="canReadPins" while="" timeout="0" info="">
[20:34:28.113]      // if-block "canReadPins"
[20:34:28.113]        // =>  TRUE
[20:34:28.113]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:34:28.113]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:34:28.116]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:34:28.116]        // while-condition  =>  FALSE
[20:34:28.116]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:34:28.116]      </control>
[20:34:28.116]      // end if-block "canReadPins"
[20:34:28.116]    </control>
[20:34:28.116]    <control if="!canReadPins" while="" timeout="0" info="">
[20:34:28.116]      // if-block "!canReadPins"
[20:34:28.116]        // =>  FALSE
[20:34:28.116]      // skip if-block "!canReadPins"
[20:34:28.116]    </control>
[20:34:28.116]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:34:28.116]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:34:28.117]        // =>  TRUE
[20:34:28.117]      <block atomic="false" info="">
[20:34:28.117]        WriteAP(0x00, 0x190008);
[20:34:28.118]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:34:28.118]        WriteAP(0xF0, 0x01);
[20:34:28.122]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:34:28.122]      </block>
[20:34:28.122]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:34:28.122]    </control>
[20:34:28.122]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:34:28.122]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:34:28.123]        // =>  FALSE
[20:34:28.123]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:34:28.123]    </control>
[20:34:28.123]    <block atomic="false" info="">
[20:34:28.123]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:34:28.126]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:34:28.126]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:34:28.126]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:34:28.130]      __ap = 0; //lets make sure we reset the access point selection
[20:34:28.130]        // -> [__ap <= 0x00000000]
[20:34:28.130]    </block>
[20:34:28.130]  </sequence>
[20:34:28.131]  
[20:34:28.149]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:34:28.149]  
[20:34:28.149]  <debugvars>
[20:34:28.149]    // Pre-defined
[20:34:28.149]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:28.150]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:34:28.150]    __dp=0x00000000
[20:34:28.150]    __ap=0x00000000
[20:34:28.150]    __traceout=0x00000000      (Trace Disabled)
[20:34:28.150]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:28.150]    __FlashAddr=0x00000000
[20:34:28.150]    __FlashLen=0x00000000
[20:34:28.150]    __FlashArg=0x00000000
[20:34:28.150]    __FlashOp=0x00000000
[20:34:28.150]    __Result=0x00000000
[20:34:28.150]  </debugvars>
[20:34:28.151]  
[20:34:28.151]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:34:28.151]    <block atomic="false" info="">
[20:34:28.151]      __var deviceID = 0;
[20:34:28.151]        // -> [deviceID <= 0x00000000]
[20:34:28.151]      __var version = 0;
[20:34:28.151]        // -> [version <= 0x00000000]
[20:34:28.151]      __var partNum = 0;
[20:34:28.151]        // -> [partNum <= 0x00000000]
[20:34:28.151]      __var manuf = 0;
[20:34:28.151]        // -> [manuf <= 0x00000000]
[20:34:28.151]      __var isMSPM0G1X0X_G3X0X = 0;
[20:34:28.151]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:34:28.151]      __var isProduction = 0;
[20:34:28.151]        // -> [isProduction <= 0x00000000]
[20:34:28.151]      __var continueId = 0;
[20:34:28.151]        // -> [continueId <= 0x00000000]
[20:34:28.151]      deviceID =   Read32(0x41C40004);
[20:34:28.151]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:34:28.151]        // -> [deviceID <= 0x2BB8802F]
[20:34:28.151]      version = deviceID >> 28;
[20:34:28.151]        // -> [version <= 0x00000002]
[20:34:28.159]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:34:28.159]        // -> [partNum <= 0x0000BB88]
[20:34:28.159]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:34:28.159]        // -> [manuf <= 0x00000017]
[20:34:28.159]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:34:28.159]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:34:28.159]      isProduction = (version > 0);
[20:34:28.159]        // -> [isProduction <= 0x00000001]
[20:34:28.159]    </block>
[20:34:28.159]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:34:28.159]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:34:28.159]        // =>  FALSE
[20:34:28.159]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:34:28.159]    </control>
[20:34:28.159]    <control if="continueId == 4" while="" timeout="0" info="">
[20:34:28.159]      // if-block "continueId == 4"
[20:34:28.159]        // =>  FALSE
[20:34:28.159]      // skip if-block "continueId == 4"
[20:34:28.159]    </control>
[20:34:28.159]    <control if="!isProduction" while="" timeout="0" info="">
[20:34:28.159]      // if-block "!isProduction"
[20:34:28.159]        // =>  FALSE
[20:34:28.159]      // skip if-block "!isProduction"
[20:34:28.159]    </control>
[20:34:28.159]  </sequence>
[20:34:28.159]  
[20:37:58.809]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:37:58.809]  
[20:37:58.809]  <debugvars>
[20:37:58.811]    // Pre-defined
[20:37:58.811]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:37:58.811]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:37:58.811]    __dp=0x00000000
[20:37:58.811]    __ap=0x00000000
[20:37:58.811]    __traceout=0x00000000      (Trace Disabled)
[20:37:58.811]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:37:58.811]    __FlashAddr=0x00000000
[20:37:58.811]    __FlashLen=0x00000000
[20:37:58.811]    __FlashArg=0x00000000
[20:37:58.811]    __FlashOp=0x00000000
[20:37:58.811]    __Result=0x00000000
[20:37:58.811]  </debugvars>
[20:37:58.811]  
[20:37:58.811]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:37:58.811]    <block atomic="false" info="">
[20:37:58.811]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:37:58.812]        // -> [isSWJ <= 0x00000001]
[20:37:58.812]      __var hasDormant = __protocol & 0x00020000;
[20:37:58.812]        // -> [hasDormant <= 0x00000000]
[20:37:58.812]      __var protType   = __protocol & 0x0000FFFF;
[20:37:58.812]        // -> [protType <= 0x00000002]
[20:37:58.812]    </block>
[20:37:58.812]    <control if="protType == 1" while="" timeout="0" info="">
[20:37:58.812]      // if-block "protType == 1"
[20:37:58.812]        // =>  FALSE
[20:37:58.812]      // skip if-block "protType == 1"
[20:37:58.812]    </control>
[20:37:58.814]    <control if="protType == 2" while="" timeout="0" info="">
[20:37:58.814]      // if-block "protType == 2"
[20:37:58.814]        // =>  TRUE
[20:37:58.814]      <control if="isSWJ" while="" timeout="0" info="">
[20:37:58.814]        // if-block "isSWJ"
[20:37:58.814]          // =>  TRUE
[20:37:58.814]        <control if="hasDormant" while="" timeout="0" info="">
[20:37:58.814]          // if-block "hasDormant"
[20:37:58.814]            // =>  FALSE
[20:37:58.814]          // skip if-block "hasDormant"
[20:37:58.816]        </control>
[20:37:58.816]        <control if="!hasDormant" while="" timeout="0" info="">
[20:37:58.816]          // if-block "!hasDormant"
[20:37:58.816]            // =>  TRUE
[20:37:58.816]          <block atomic="false" info="">
[20:37:58.816]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:37:58.817]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:37:58.817]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:37:58.819]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:37:58.819]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:37:58.821]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:37:58.821]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:37:58.825]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:37:58.825]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:37:58.826]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:37:58.826]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:37:58.826]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:37:58.826]          </block>
[20:37:58.828]          // end if-block "!hasDormant"
[20:37:58.829]        </control>
[20:37:58.829]        // end if-block "isSWJ"
[20:37:58.829]      </control>
[20:37:58.829]      <control if="!isSWJ" while="" timeout="0" info="">
[20:37:58.829]        // if-block "!isSWJ"
[20:37:58.829]          // =>  FALSE
[20:37:58.829]        // skip if-block "!isSWJ"
[20:37:58.829]      </control>
[20:37:58.829]      <block atomic="false" info="">
[20:37:58.829]        ReadDP(0x0);
[20:37:58.830]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:37:58.830]      </block>
[20:37:58.830]      // end if-block "protType == 2"
[20:37:58.830]    </control>
[20:37:58.830]  </sequence>
[20:37:58.830]  
[20:37:58.836]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:37:58.836]  
[20:37:58.836]  <debugvars>
[20:37:58.836]    // Pre-defined
[20:37:58.836]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:37:58.836]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:37:58.836]    __dp=0x00000000
[20:37:58.836]    __ap=0x00000000
[20:37:58.836]    __traceout=0x00000000      (Trace Disabled)
[20:37:58.836]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:37:58.836]    __FlashAddr=0x00000000
[20:37:58.836]    __FlashLen=0x00000000
[20:37:58.836]    __FlashArg=0x00000000
[20:37:58.836]    __FlashOp=0x00000000
[20:37:58.836]    __Result=0x00000000
[20:37:58.836]  </debugvars>
[20:37:58.836]  
[20:37:58.836]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:37:58.836]    <block atomic="false" info="">
[20:37:58.836]      __var SW_DP_ABORT       = 0x0;
[20:37:58.836]        // -> [SW_DP_ABORT <= 0x00000000]
[20:37:58.836]      __var DP_CTRL_STAT      = 0x4;
[20:37:58.836]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:37:58.839]      __var DP_SELECT         = 0x8;
[20:37:58.839]        // -> [DP_SELECT <= 0x00000008]
[20:37:58.839]      __var powered_down      = 0;
[20:37:58.839]        // -> [powered_down <= 0x00000000]
[20:37:58.839]      WriteDP(DP_SELECT, 0x00000000);
[20:37:58.840]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:37:58.840]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:37:58.842]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:37:58.842]        // -> [powered_down <= 0x00000001]
[20:37:58.842]    </block>
[20:37:58.842]    <control if="powered_down" while="" timeout="0" info="">
[20:37:58.842]      // if-block "powered_down"
[20:37:58.842]        // =>  TRUE
[20:37:58.842]      <block atomic="false" info="">
[20:37:58.842]        Message(0, "Debug/System power-up request sent");
[20:37:58.842]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:37:58.843]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:37:58.843]      </block>
[20:37:58.843]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:37:58.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:37:58.846]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:37:58.846]        // while-condition  =>  FALSE
[20:37:58.846]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:37:58.846]      </control>
[20:37:58.846]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:37:58.846]        // if-block "(__protocol & 0xFFFF) == 1"
[20:37:58.846]          // =>  FALSE
[20:37:58.846]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:37:58.846]      </control>
[20:37:58.848]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:37:58.848]        // if-block "(__protocol & 0xFFFF) == 2"
[20:37:58.848]          // =>  TRUE
[20:37:58.848]        <block atomic="false" info="">
[20:37:58.848]          Message(0, "executing SWD power up");
[20:37:58.848]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:37:58.850]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:37:58.850]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:37:58.852]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:37:58.852]        </block>
[20:37:58.852]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:37:58.852]      </control>
[20:37:58.852]      // end if-block "powered_down"
[20:37:58.852]    </control>
[20:37:58.852]    <block atomic="false" info="">
[20:37:58.855]      __var DEBUG_PORT_VAL    = 0;
[20:37:58.855]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:37:58.855]      __var ACCESS_POINT_VAL  = 0;
[20:37:58.855]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:37:58.855]      __ap = 1; 
[20:37:58.855]        // -> [__ap <= 0x00000001]
[20:37:58.855]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:37:58.857]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:37:58.857]      __ap = 4;
[20:37:58.857]        // -> [__ap <= 0x00000004]
[20:37:58.857]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:37:58.857]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:37:58.857]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:37:58.857]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:37:58.857]    </block>
[20:37:58.857]    <block atomic="false" info="">
[20:37:58.857]      __var nReset = 0x80;
[20:37:58.857]        // -> [nReset <= 0x00000080]
[20:37:58.857]      __var canReadPins = 0;
[20:37:58.857]        // -> [canReadPins <= 0x00000000]
[20:37:58.857]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:37:58.865]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:37:58.865]        // -> [canReadPins <= 0x00000001]
[20:37:58.865]    </block>
[20:37:58.865]    <control if="" while="1" timeout="200" info="">
[20:37:58.866]      // while "1"  (timeout="200")
[20:37:58.866]      // while-condition  =>  TRUE
[20:37:58.866]      // while "1"  (timeout="200")
[20:37:58.866]      // while-condition  =>  TRUE
[20:37:58.866]      // while "1"  (timeout="200")
[20:37:58.866]      // while-condition  =>  TRUE
[20:37:58.866]      // while "1"  (timeout="200")
[20:37:58.866]      // while-condition  =>  TRUE
[20:37:58.866]      // while "1"  (timeout="200")
[20:37:58.866]      // while-condition  =>  TRUE
[20:37:58.866]      // while "1"  (timeout="200")
[20:37:58.866]      // while-condition  =>  TRUE
[20:37:58.866]      // while "1"  (timeout="200")
[20:37:58.868]      // while-condition  =>  TRUE
[20:37:58.868]      // while "1"  (timeout="200")
[20:37:58.868]      // while-condition  =>  TRUE
[20:37:58.868]      // while "1"  (timeout="200")
[20:37:58.868]      // while-condition  =>  TRUE
[20:37:58.868]      // while "1"  (timeout="200")
[20:37:58.868]      // while-condition  =>  TRUE
[20:37:58.868]      // while "1"  (timeout="200")
[20:37:58.868]      // while-condition  =>  TRUE
[20:37:58.868]      // while "1"  (timeout="200")
[20:37:58.868]      // while-condition  =>  TRUE
[20:37:58.868]      // while "1"  (timeout="200")
[20:37:58.868]      // while-condition  =>  TRUE
[20:37:58.868]      // while "1"  (timeout="200")
[20:37:58.868]      // while-condition  =>  TRUE
[20:37:58.868]      // while "1"  (timeout="200")
[20:37:58.869]      // while-condition  =>  TRUE
[20:37:58.869]      // while "1"  (timeout="200")
[20:37:58.869]      // while-condition  =>  TRUE
[20:37:58.869]      // while "1"  (timeout="200")
[20:37:58.869]      // while-condition  =>  TRUE
[20:37:58.869]      // while "1"  (timeout="200")
[20:37:58.869]      // while-condition  =>  TRUE
[20:37:58.869]      // while "1"  (timeout="200")
[20:37:58.869]      // while-condition  =>  TRUE
[20:37:58.869]      // while "1"  (timeout="200")
[20:37:58.869]      // while-condition  =>  TRUE
[20:37:58.871]      // while "1"  (timeout="200")
[20:37:58.871]      // while-condition  =>  TRUE
[20:37:58.871]      // while "1"  (timeout="200")
[20:37:58.871]      // while-condition  =>  TRUE
[20:37:58.871]      // while "1"  (timeout="200")
[20:37:58.871]      // while-condition  =>  TRUE
[20:37:58.871]      // while "1"  (timeout="200")
[20:37:58.871]      // while-condition  =>  TRUE
[20:37:58.871]      // while "1"  (timeout="200")
[20:37:58.871]      // while-condition  =>  TRUE
[20:37:58.871]      // while "1"  (timeout="200")
[20:37:58.871]      // while-condition  =>  TRUE
[20:37:58.871]      // while "1"  (timeout="200")
[20:37:58.871]      // while-condition  =>  TRUE
[20:37:58.871]      // while "1"  (timeout="200")
[20:37:58.871]      // while-condition  =>  TRUE
[20:37:58.871]      // while "1"  (timeout="200")
[20:37:58.871]      // while-condition  =>  TRUE
[20:37:58.871]      // while "1"  (timeout="200")
[20:37:58.873]      // while-condition  =>  TRUE
[20:37:58.873]      // while "1"  (timeout="200")
[20:37:58.873]      // while-condition  =>  TRUE
[20:37:58.873]      // while "1"  (timeout="200")
[20:37:58.873]      // while-condition  =>  TRUE
[20:37:58.873]      // while "1"  (timeout="200")
[20:37:58.873]      // while-condition  =>  TRUE
[20:37:58.873]      // while "1"  (timeout="200")
[20:37:58.873]      // while-condition  =>  TRUE
[20:37:58.873]      // while "1"  (timeout="200")
[20:37:58.873]      // while-condition  =>  TRUE
[20:37:58.873]      // while "1"  (timeout="200")
[20:37:58.873]      // while-condition  =>  TRUE
[20:37:58.873]      // while "1"  (timeout="200")
[20:37:58.873]      // while-condition  =>  TRUE
[20:37:58.873]      // while "1"  (timeout="200")
[20:37:58.873]      // while-condition  =>  TRUE
[20:37:58.875]      // while "1"  (timeout="200")
[20:37:58.875]      // while-condition  =>  TRUE
[20:37:58.875]      // while "1"  (timeout="200")
[20:37:58.875]      // while-condition  =>  TRUE
[20:37:58.875]      // while "1"  (timeout="200")
[20:37:58.875]      // while-condition  =>  TRUE
[20:37:58.875]      // while "1"  (timeout="200")
[20:37:58.876]      // while-condition  =>  TRUE
[20:37:58.876]      // while "1"  (timeout="200")
[20:37:58.876]      // while-condition  =>  TRUE
[20:37:58.876]      // while "1"  (timeout="200")
[20:37:58.876]      // while-condition  =>  TRUE
[20:37:58.876]      // while "1"  (timeout="200")
[20:37:58.876]      // while-condition  =>  TRUE
[20:37:58.876]      // while "1"  (timeout="200")
[20:37:58.876]      // while-condition  =>  TRUE
[20:37:58.876]      // while "1"  (timeout="200")
[20:37:58.876]      // while-condition  =>  TRUE
[20:37:58.876]      // while "1"  (timeout="200")
[20:37:58.876]      // while-condition  =>  TRUE
[20:37:58.876]      // while "1"  (timeout="200")
[20:37:58.876]      // while-condition  =>  TRUE
[20:37:58.876]      // while "1"  (timeout="200")
[20:37:58.876]      // while-condition  =>  TRUE
[20:37:58.876]      // while "1"  (timeout="200")
[20:37:58.876]      // while-condition  =>  TRUE
[20:37:58.876]      // while "1"  (timeout="200")
[20:37:58.876]      // while-condition  =>  TRUE
[20:37:58.876]      // while "1"  (timeout="200")
[20:37:58.876]      // while-condition  =>  TRUE
[20:37:58.876]      // while "1"  (timeout="200")
[20:37:58.876]      // while-condition  =>  TRUE
[20:37:58.878]      // while "1"  (timeout="200")
[20:37:58.878]      // while  =>  TIMEOUT
[20:37:58.878]      // end while "1"
[20:37:58.878]    </control>
[20:37:58.878]    <control if="canReadPins" while="" timeout="0" info="">
[20:37:58.878]      // if-block "canReadPins"
[20:37:58.878]        // =>  TRUE
[20:37:58.878]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:37:58.878]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:37:58.880]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:37:58.880]        // while-condition  =>  FALSE
[20:37:58.880]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:37:58.880]      </control>
[20:37:58.880]      // end if-block "canReadPins"
[20:37:58.880]    </control>
[20:37:58.880]    <control if="!canReadPins" while="" timeout="0" info="">
[20:37:58.880]      // if-block "!canReadPins"
[20:37:58.880]        // =>  FALSE
[20:37:58.880]      // skip if-block "!canReadPins"
[20:37:58.880]    </control>
[20:37:58.880]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:37:58.880]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:37:58.880]        // =>  TRUE
[20:37:58.882]      <block atomic="false" info="">
[20:37:58.882]        WriteAP(0x00, 0x190008);
[20:37:58.882]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:37:58.882]        WriteAP(0xF0, 0x01);
[20:37:58.886]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:37:58.886]      </block>
[20:37:58.886]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:37:58.886]    </control>
[20:37:58.886]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:37:58.886]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:37:58.886]        // =>  FALSE
[20:37:58.886]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:37:58.886]    </control>
[20:37:58.886]    <block atomic="false" info="">
[20:37:58.886]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:37:58.886]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:37:58.886]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:37:58.886]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:37:58.897]      __ap = 0; //lets make sure we reset the access point selection
[20:37:58.898]        // -> [__ap <= 0x00000000]
[20:37:58.898]    </block>
[20:37:58.898]  </sequence>
[20:37:58.899]  
[20:37:58.924]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:37:58.924]  
[20:37:58.924]  <debugvars>
[20:37:58.924]    // Pre-defined
[20:37:58.924]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:37:58.924]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:37:58.924]    __dp=0x00000000
[20:37:58.925]    __ap=0x00000000
[20:37:58.925]    __traceout=0x00000000      (Trace Disabled)
[20:37:58.925]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:37:58.925]    __FlashAddr=0x00000000
[20:37:58.925]    __FlashLen=0x00000000
[20:37:58.925]    __FlashArg=0x00000000
[20:37:58.925]    __FlashOp=0x00000000
[20:37:58.925]    __Result=0x00000000
[20:37:58.926]  </debugvars>
[20:37:58.926]  
[20:37:58.926]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:37:58.926]    <block atomic="false" info="">
[20:37:58.926]      __var deviceID = 0;
[20:37:58.926]        // -> [deviceID <= 0x00000000]
[20:37:58.926]      __var version = 0;
[20:37:58.926]        // -> [version <= 0x00000000]
[20:37:58.926]      __var partNum = 0;
[20:37:58.926]        // -> [partNum <= 0x00000000]
[20:37:58.926]      __var manuf = 0;
[20:37:58.926]        // -> [manuf <= 0x00000000]
[20:37:58.926]      __var isMSPM0G1X0X_G3X0X = 0;
[20:37:58.926]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:37:58.926]      __var isProduction = 0;
[20:37:58.926]        // -> [isProduction <= 0x00000000]
[20:37:58.926]      __var continueId = 0;
[20:37:58.926]        // -> [continueId <= 0x00000000]
[20:37:58.926]      deviceID =   Read32(0x41C40004);
[20:37:58.932]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:37:58.932]        // -> [deviceID <= 0x2BB8802F]
[20:37:58.932]      version = deviceID >> 28;
[20:37:58.932]        // -> [version <= 0x00000002]
[20:37:58.932]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:37:58.934]        // -> [partNum <= 0x0000BB88]
[20:37:58.934]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:37:58.934]        // -> [manuf <= 0x00000017]
[20:37:58.934]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:37:58.934]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:37:58.934]      isProduction = (version > 0);
[20:37:58.934]        // -> [isProduction <= 0x00000001]
[20:37:58.934]    </block>
[20:37:58.934]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:37:58.934]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:37:58.935]        // =>  FALSE
[20:37:58.935]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:37:58.935]    </control>
[20:37:58.935]    <control if="continueId == 4" while="" timeout="0" info="">
[20:37:58.935]      // if-block "continueId == 4"
[20:37:58.935]        // =>  FALSE
[20:37:58.935]      // skip if-block "continueId == 4"
[20:37:58.935]    </control>
[20:37:58.935]    <control if="!isProduction" while="" timeout="0" info="">
[20:37:58.935]      // if-block "!isProduction"
[20:37:58.936]        // =>  FALSE
[20:37:58.936]      // skip if-block "!isProduction"
[20:37:58.936]    </control>
[20:37:58.936]  </sequence>
[20:37:58.936]  
[20:40:20.002]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:40:20.002]  
[20:40:20.012]  <debugvars>
[20:40:20.012]    // Pre-defined
[20:40:20.012]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:40:20.012]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:40:20.012]    __dp=0x00000000
[20:40:20.012]    __ap=0x00000000
[20:40:20.012]    __traceout=0x00000000      (Trace Disabled)
[20:40:20.012]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:40:20.012]    __FlashAddr=0x00000000
[20:40:20.012]    __FlashLen=0x00000000
[20:40:20.012]    __FlashArg=0x00000000
[20:40:20.012]    __FlashOp=0x00000000
[20:40:20.012]    __Result=0x00000000
[20:40:20.012]  </debugvars>
[20:40:20.012]  
[20:40:20.012]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:40:20.012]    <block atomic="false" info="">
[20:40:20.012]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:40:20.012]        // -> [isSWJ <= 0x00000001]
[20:40:20.012]      __var hasDormant = __protocol & 0x00020000;
[20:40:20.012]        // -> [hasDormant <= 0x00000000]
[20:40:20.012]      __var protType   = __protocol & 0x0000FFFF;
[20:40:20.012]        // -> [protType <= 0x00000002]
[20:40:20.012]    </block>
[20:40:20.012]    <control if="protType == 1" while="" timeout="0" info="">
[20:40:20.012]      // if-block "protType == 1"
[20:40:20.012]        // =>  FALSE
[20:40:20.012]      // skip if-block "protType == 1"
[20:40:20.012]    </control>
[20:40:20.012]    <control if="protType == 2" while="" timeout="0" info="">
[20:40:20.012]      // if-block "protType == 2"
[20:40:20.012]        // =>  TRUE
[20:40:20.012]      <control if="isSWJ" while="" timeout="0" info="">
[20:40:20.012]        // if-block "isSWJ"
[20:40:20.012]          // =>  TRUE
[20:40:20.012]        <control if="hasDormant" while="" timeout="0" info="">
[20:40:20.012]          // if-block "hasDormant"
[20:40:20.012]            // =>  FALSE
[20:40:20.012]          // skip if-block "hasDormant"
[20:40:20.012]        </control>
[20:40:20.012]        <control if="!hasDormant" while="" timeout="0" info="">
[20:40:20.012]          // if-block "!hasDormant"
[20:40:20.012]            // =>  TRUE
[20:40:20.012]          <block atomic="false" info="">
[20:40:20.012]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:40:20.021]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:40:20.021]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:40:20.021]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:40:20.021]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:40:20.021]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:40:20.021]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:40:20.021]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:40:20.021]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:40:20.032]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:40:20.032]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:40:20.032]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:40:20.032]          </block>
[20:40:20.032]          // end if-block "!hasDormant"
[20:40:20.032]        </control>
[20:40:20.032]        // end if-block "isSWJ"
[20:40:20.032]      </control>
[20:40:20.032]      <control if="!isSWJ" while="" timeout="0" info="">
[20:40:20.032]        // if-block "!isSWJ"
[20:40:20.032]          // =>  FALSE
[20:40:20.032]        // skip if-block "!isSWJ"
[20:40:20.032]      </control>
[20:40:20.032]      <block atomic="false" info="">
[20:40:20.032]        ReadDP(0x0);
[20:40:20.041]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:40:20.041]      </block>
[20:40:20.041]      // end if-block "protType == 2"
[20:40:20.041]    </control>
[20:40:20.041]  </sequence>
[20:40:20.043]  
[20:40:20.044]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:40:20.044]  
[20:40:20.044]  <debugvars>
[20:40:20.044]    // Pre-defined
[20:40:20.044]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:40:20.044]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:40:20.044]    __dp=0x00000000
[20:40:20.044]    __ap=0x00000000
[20:40:20.044]    __traceout=0x00000000      (Trace Disabled)
[20:40:20.044]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:40:20.044]    __FlashAddr=0x00000000
[20:40:20.044]    __FlashLen=0x00000000
[20:40:20.044]    __FlashArg=0x00000000
[20:40:20.044]    __FlashOp=0x00000000
[20:40:20.044]    __Result=0x00000000
[20:40:20.044]  </debugvars>
[20:40:20.044]  
[20:40:20.044]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:40:20.044]    <block atomic="false" info="">
[20:40:20.044]      __var SW_DP_ABORT       = 0x0;
[20:40:20.044]        // -> [SW_DP_ABORT <= 0x00000000]
[20:40:20.044]      __var DP_CTRL_STAT      = 0x4;
[20:40:20.044]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:40:20.044]      __var DP_SELECT         = 0x8;
[20:40:20.044]        // -> [DP_SELECT <= 0x00000008]
[20:40:20.044]      __var powered_down      = 0;
[20:40:20.044]        // -> [powered_down <= 0x00000000]
[20:40:20.044]      WriteDP(DP_SELECT, 0x00000000);
[20:40:20.044]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:40:20.044]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:40:20.051]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:40:20.051]        // -> [powered_down <= 0x00000001]
[20:40:20.051]    </block>
[20:40:20.051]    <control if="powered_down" while="" timeout="0" info="">
[20:40:20.051]      // if-block "powered_down"
[20:40:20.051]        // =>  TRUE
[20:40:20.051]      <block atomic="false" info="">
[20:40:20.051]        Message(0, "Debug/System power-up request sent");
[20:40:20.051]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:40:20.062]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:40:20.062]      </block>
[20:40:20.062]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:40:20.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:40:20.062]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:40:20.062]        // while-condition  =>  FALSE
[20:40:20.062]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:40:20.062]      </control>
[20:40:20.062]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:40:20.062]        // if-block "(__protocol & 0xFFFF) == 1"
[20:40:20.062]          // =>  FALSE
[20:40:20.062]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:40:20.062]      </control>
[20:40:20.062]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:40:20.062]        // if-block "(__protocol & 0xFFFF) == 2"
[20:40:20.062]          // =>  TRUE
[20:40:20.062]        <block atomic="false" info="">
[20:40:20.062]          Message(0, "executing SWD power up");
[20:40:20.062]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:40:20.072]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:40:20.072]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:40:20.072]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:40:20.072]        </block>
[20:40:20.072]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:40:20.072]      </control>
[20:40:20.072]      // end if-block "powered_down"
[20:40:20.072]    </control>
[20:40:20.072]    <block atomic="false" info="">
[20:40:20.072]      __var DEBUG_PORT_VAL    = 0;
[20:40:20.072]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:40:20.072]      __var ACCESS_POINT_VAL  = 0;
[20:40:20.072]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:40:20.072]      __ap = 1; 
[20:40:20.072]        // -> [__ap <= 0x00000001]
[20:40:20.072]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:40:20.082]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:40:20.082]      __ap = 4;
[20:40:20.082]        // -> [__ap <= 0x00000004]
[20:40:20.082]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:40:20.092]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:40:20.092]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:40:20.092]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:40:20.092]    </block>
[20:40:20.092]    <block atomic="false" info="">
[20:40:20.092]      __var nReset = 0x80;
[20:40:20.092]        // -> [nReset <= 0x00000080]
[20:40:20.092]      __var canReadPins = 0;
[20:40:20.092]        // -> [canReadPins <= 0x00000000]
[20:40:20.092]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:40:20.101]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:40:20.101]        // -> [canReadPins <= 0x00000001]
[20:40:20.101]    </block>
[20:40:20.101]    <control if="" while="1" timeout="200" info="">
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.101]      // while-condition  =>  TRUE
[20:40:20.101]      // while "1"  (timeout="200")
[20:40:20.112]      // while-condition  =>  TRUE
[20:40:20.112]      // while "1"  (timeout="200")
[20:40:20.112]      // while  =>  TIMEOUT
[20:40:20.112]      // end while "1"
[20:40:20.112]    </control>
[20:40:20.112]    <control if="canReadPins" while="" timeout="0" info="">
[20:40:20.112]      // if-block "canReadPins"
[20:40:20.112]        // =>  TRUE
[20:40:20.112]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:40:20.112]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:40:20.112]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:40:20.112]        // while-condition  =>  FALSE
[20:40:20.112]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:40:20.112]      </control>
[20:40:20.112]      // end if-block "canReadPins"
[20:40:20.112]    </control>
[20:40:20.112]    <control if="!canReadPins" while="" timeout="0" info="">
[20:40:20.112]      // if-block "!canReadPins"
[20:40:20.112]        // =>  FALSE
[20:40:20.112]      // skip if-block "!canReadPins"
[20:40:20.112]    </control>
[20:40:20.112]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:40:20.112]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:40:20.112]        // =>  TRUE
[20:40:20.112]      <block atomic="false" info="">
[20:40:20.112]        WriteAP(0x00, 0x190008);
[20:40:20.117]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:40:20.117]        WriteAP(0xF0, 0x01);
[20:40:20.122]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:40:20.122]      </block>
[20:40:20.122]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:40:20.122]    </control>
[20:40:20.122]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:40:20.122]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:40:20.122]        // =>  FALSE
[20:40:20.122]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:40:20.122]    </control>
[20:40:20.122]    <block atomic="false" info="">
[20:40:20.122]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:40:20.122]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:40:20.122]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:40:20.122]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:40:20.122]      __ap = 0; //lets make sure we reset the access point selection
[20:40:20.122]        // -> [__ap <= 0x00000000]
[20:40:20.122]    </block>
[20:40:20.122]  </sequence>
[20:40:20.122]  
[20:40:20.155]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:40:20.155]  
[20:40:20.155]  <debugvars>
[20:40:20.155]    // Pre-defined
[20:40:20.155]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:40:20.155]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:40:20.155]    __dp=0x00000000
[20:40:20.155]    __ap=0x00000000
[20:40:20.155]    __traceout=0x00000000      (Trace Disabled)
[20:40:20.155]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:40:20.155]    __FlashAddr=0x00000000
[20:40:20.155]    __FlashLen=0x00000000
[20:40:20.155]    __FlashArg=0x00000000
[20:40:20.155]    __FlashOp=0x00000000
[20:40:20.155]    __Result=0x00000000
[20:40:20.155]  </debugvars>
[20:40:20.155]  
[20:40:20.155]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:40:20.155]    <block atomic="false" info="">
[20:40:20.155]      __var deviceID = 0;
[20:40:20.155]        // -> [deviceID <= 0x00000000]
[20:40:20.155]      __var version = 0;
[20:40:20.155]        // -> [version <= 0x00000000]
[20:40:20.155]      __var partNum = 0;
[20:40:20.155]        // -> [partNum <= 0x00000000]
[20:40:20.155]      __var manuf = 0;
[20:40:20.155]        // -> [manuf <= 0x00000000]
[20:40:20.155]      __var isMSPM0G1X0X_G3X0X = 0;
[20:40:20.155]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:40:20.155]      __var isProduction = 0;
[20:40:20.155]        // -> [isProduction <= 0x00000000]
[20:40:20.155]      __var continueId = 0;
[20:40:20.155]        // -> [continueId <= 0x00000000]
[20:40:20.155]      deviceID =   Read32(0x41C40004);
[20:40:20.163]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:40:20.163]        // -> [deviceID <= 0x2BB8802F]
[20:40:20.163]      version = deviceID >> 28;
[20:40:20.163]        // -> [version <= 0x00000002]
[20:40:20.163]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:40:20.163]        // -> [partNum <= 0x0000BB88]
[20:40:20.163]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:40:20.163]        // -> [manuf <= 0x00000017]
[20:40:20.163]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:40:20.163]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:40:20.163]      isProduction = (version > 0);
[20:40:20.163]        // -> [isProduction <= 0x00000001]
[20:40:20.163]    </block>
[20:40:20.163]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:40:20.163]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:40:20.163]        // =>  FALSE
[20:40:20.163]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:40:20.163]    </control>
[20:40:20.163]    <control if="continueId == 4" while="" timeout="0" info="">
[20:40:20.163]      // if-block "continueId == 4"
[20:40:20.163]        // =>  FALSE
[20:40:20.163]      // skip if-block "continueId == 4"
[20:40:20.163]    </control>
[20:40:20.163]    <control if="!isProduction" while="" timeout="0" info="">
[20:40:20.163]      // if-block "!isProduction"
[20:40:20.163]        // =>  FALSE
[20:40:20.163]      // skip if-block "!isProduction"
[20:40:20.163]    </control>
[20:40:20.163]  </sequence>
[20:40:20.163]  
[20:41:05.011]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:41:05.011]  
[20:41:05.026]  <debugvars>
[20:41:05.026]    // Pre-defined
[20:41:05.026]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:41:05.026]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:41:05.026]    __dp=0x00000000
[20:41:05.026]    __ap=0x00000000
[20:41:05.026]    __traceout=0x00000000      (Trace Disabled)
[20:41:05.026]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:41:05.026]    __FlashAddr=0x00000000
[20:41:05.026]    __FlashLen=0x00000000
[20:41:05.026]    __FlashArg=0x00000000
[20:41:05.026]    __FlashOp=0x00000000
[20:41:05.026]    __Result=0x00000000
[20:41:05.026]  </debugvars>
[20:41:05.026]  
[20:41:05.026]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:41:05.026]    <block atomic="false" info="">
[20:41:05.026]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:41:05.026]        // -> [isSWJ <= 0x00000001]
[20:41:05.026]      __var hasDormant = __protocol & 0x00020000;
[20:41:05.026]        // -> [hasDormant <= 0x00000000]
[20:41:05.026]      __var protType   = __protocol & 0x0000FFFF;
[20:41:05.026]        // -> [protType <= 0x00000002]
[20:41:05.026]    </block>
[20:41:05.026]    <control if="protType == 1" while="" timeout="0" info="">
[20:41:05.026]      // if-block "protType == 1"
[20:41:05.028]        // =>  FALSE
[20:41:05.028]      // skip if-block "protType == 1"
[20:41:05.028]    </control>
[20:41:05.028]    <control if="protType == 2" while="" timeout="0" info="">
[20:41:05.028]      // if-block "protType == 2"
[20:41:05.028]        // =>  TRUE
[20:41:05.028]      <control if="isSWJ" while="" timeout="0" info="">
[20:41:05.028]        // if-block "isSWJ"
[20:41:05.028]          // =>  TRUE
[20:41:05.028]        <control if="hasDormant" while="" timeout="0" info="">
[20:41:05.028]          // if-block "hasDormant"
[20:41:05.028]            // =>  FALSE
[20:41:05.028]          // skip if-block "hasDormant"
[20:41:05.028]        </control>
[20:41:05.028]        <control if="!hasDormant" while="" timeout="0" info="">
[20:41:05.028]          // if-block "!hasDormant"
[20:41:05.028]            // =>  TRUE
[20:41:05.028]          <block atomic="false" info="">
[20:41:05.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:41:05.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:41:05.028]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:41:05.028]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:41:05.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:41:05.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:41:05.028]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:41:05.028]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:41:05.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:41:05.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:41:05.028]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:41:05.038]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:41:05.038]          </block>
[20:41:05.038]          // end if-block "!hasDormant"
[20:41:05.038]        </control>
[20:41:05.038]        // end if-block "isSWJ"
[20:41:05.038]      </control>
[20:41:05.038]      <control if="!isSWJ" while="" timeout="0" info="">
[20:41:05.038]        // if-block "!isSWJ"
[20:41:05.038]          // =>  FALSE
[20:41:05.038]        // skip if-block "!isSWJ"
[20:41:05.038]      </control>
[20:41:05.038]      <block atomic="false" info="">
[20:41:05.038]        ReadDP(0x0);
[20:41:05.038]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:41:05.038]      </block>
[20:41:05.038]      // end if-block "protType == 2"
[20:41:05.038]    </control>
[20:41:05.038]  </sequence>
[20:41:05.038]  
[20:41:05.038]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:41:05.038]  
[20:41:05.038]  <debugvars>
[20:41:05.038]    // Pre-defined
[20:41:05.038]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:41:05.038]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:41:05.038]    __dp=0x00000000
[20:41:05.038]    __ap=0x00000000
[20:41:05.038]    __traceout=0x00000000      (Trace Disabled)
[20:41:05.038]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:41:05.038]    __FlashAddr=0x00000000
[20:41:05.038]    __FlashLen=0x00000000
[20:41:05.038]    __FlashArg=0x00000000
[20:41:05.038]    __FlashOp=0x00000000
[20:41:05.038]    __Result=0x00000000
[20:41:05.038]  </debugvars>
[20:41:05.038]  
[20:41:05.038]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:41:05.038]    <block atomic="false" info="">
[20:41:05.038]      __var SW_DP_ABORT       = 0x0;
[20:41:05.038]        // -> [SW_DP_ABORT <= 0x00000000]
[20:41:05.038]      __var DP_CTRL_STAT      = 0x4;
[20:41:05.038]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:41:05.038]      __var DP_SELECT         = 0x8;
[20:41:05.038]        // -> [DP_SELECT <= 0x00000008]
[20:41:05.038]      __var powered_down      = 0;
[20:41:05.038]        // -> [powered_down <= 0x00000000]
[20:41:05.038]      WriteDP(DP_SELECT, 0x00000000);
[20:41:05.049]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:41:05.052]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:41:05.053]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:41:05.053]        // -> [powered_down <= 0x00000001]
[20:41:05.053]    </block>
[20:41:05.053]    <control if="powered_down" while="" timeout="0" info="">
[20:41:05.053]      // if-block "powered_down"
[20:41:05.053]        // =>  TRUE
[20:41:05.053]      <block atomic="false" info="">
[20:41:05.053]        Message(0, "Debug/System power-up request sent");
[20:41:05.056]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:41:05.058]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:41:05.058]      </block>
[20:41:05.058]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:41:05.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:41:05.058]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:41:05.058]        // while-condition  =>  FALSE
[20:41:05.058]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:41:05.058]      </control>
[20:41:05.058]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:41:05.058]        // if-block "(__protocol & 0xFFFF) == 1"
[20:41:05.058]          // =>  FALSE
[20:41:05.058]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:41:05.058]      </control>
[20:41:05.061]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:41:05.061]        // if-block "(__protocol & 0xFFFF) == 2"
[20:41:05.061]          // =>  TRUE
[20:41:05.061]        <block atomic="false" info="">
[20:41:05.061]          Message(0, "executing SWD power up");
[20:41:05.063]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:41:05.064]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:41:05.064]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:41:05.068]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:41:05.068]        </block>
[20:41:05.068]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:41:05.068]      </control>
[20:41:05.068]      // end if-block "powered_down"
[20:41:05.068]    </control>
[20:41:05.068]    <block atomic="false" info="">
[20:41:05.070]      __var DEBUG_PORT_VAL    = 0;
[20:41:05.070]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:41:05.071]      __var ACCESS_POINT_VAL  = 0;
[20:41:05.071]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:41:05.071]      __ap = 1; 
[20:41:05.071]        // -> [__ap <= 0x00000001]
[20:41:05.071]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:41:05.074]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:41:05.074]      __ap = 4;
[20:41:05.074]        // -> [__ap <= 0x00000004]
[20:41:05.074]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:41:05.078]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:41:05.078]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:41:05.078]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:41:05.080]    </block>
[20:41:05.080]    <block atomic="false" info="">
[20:41:05.080]      __var nReset = 0x80;
[20:41:05.080]        // -> [nReset <= 0x00000080]
[20:41:05.080]      __var canReadPins = 0;
[20:41:05.080]        // -> [canReadPins <= 0x00000000]
[20:41:05.080]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:41:05.082]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:41:05.082]        // -> [canReadPins <= 0x00000001]
[20:41:05.082]    </block>
[20:41:05.082]    <control if="" while="1" timeout="200" info="">
[20:41:05.082]      // while "1"  (timeout="200")
[20:41:05.082]      // while-condition  =>  TRUE
[20:41:05.082]      // while "1"  (timeout="200")
[20:41:05.082]      // while-condition  =>  TRUE
[20:41:05.082]      // while "1"  (timeout="200")
[20:41:05.082]      // while-condition  =>  TRUE
[20:41:05.082]      // while "1"  (timeout="200")
[20:41:05.083]      // while-condition  =>  TRUE
[20:41:05.083]      // while "1"  (timeout="200")
[20:41:05.083]      // while-condition  =>  TRUE
[20:41:05.083]      // while "1"  (timeout="200")
[20:41:05.083]      // while-condition  =>  TRUE
[20:41:05.083]      // while "1"  (timeout="200")
[20:41:05.083]      // while-condition  =>  TRUE
[20:41:05.083]      // while "1"  (timeout="200")
[20:41:05.083]      // while-condition  =>  TRUE
[20:41:05.083]      // while "1"  (timeout="200")
[20:41:05.083]      // while-condition  =>  TRUE
[20:41:05.083]      // while "1"  (timeout="200")
[20:41:05.083]      // while-condition  =>  TRUE
[20:41:05.084]      // while "1"  (timeout="200")
[20:41:05.084]      // while-condition  =>  TRUE
[20:41:05.084]      // while "1"  (timeout="200")
[20:41:05.084]      // while-condition  =>  TRUE
[20:41:05.084]      // while "1"  (timeout="200")
[20:41:05.084]      // while-condition  =>  TRUE
[20:41:05.084]      // while "1"  (timeout="200")
[20:41:05.084]      // while-condition  =>  TRUE
[20:41:05.084]      // while "1"  (timeout="200")
[20:41:05.084]      // while-condition  =>  TRUE
[20:41:05.084]      // while "1"  (timeout="200")
[20:41:05.084]      // while-condition  =>  TRUE
[20:41:05.084]      // while "1"  (timeout="200")
[20:41:05.084]      // while-condition  =>  TRUE
[20:41:05.084]      // while "1"  (timeout="200")
[20:41:05.084]      // while-condition  =>  TRUE
[20:41:05.084]      // while "1"  (timeout="200")
[20:41:05.086]      // while-condition  =>  TRUE
[20:41:05.086]      // while "1"  (timeout="200")
[20:41:05.086]      // while-condition  =>  TRUE
[20:41:05.086]      // while "1"  (timeout="200")
[20:41:05.086]      // while-condition  =>  TRUE
[20:41:05.086]      // while "1"  (timeout="200")
[20:41:05.086]      // while-condition  =>  TRUE
[20:41:05.086]      // while "1"  (timeout="200")
[20:41:05.086]      // while-condition  =>  TRUE
[20:41:05.086]      // while "1"  (timeout="200")
[20:41:05.086]      // while-condition  =>  TRUE
[20:41:05.086]      // while "1"  (timeout="200")
[20:41:05.087]      // while-condition  =>  TRUE
[20:41:05.087]      // while "1"  (timeout="200")
[20:41:05.087]      // while-condition  =>  TRUE
[20:41:05.087]      // while "1"  (timeout="200")
[20:41:05.087]      // while-condition  =>  TRUE
[20:41:05.087]      // while "1"  (timeout="200")
[20:41:05.087]      // while-condition  =>  TRUE
[20:41:05.087]      // while "1"  (timeout="200")
[20:41:05.087]      // while-condition  =>  TRUE
[20:41:05.087]      // while "1"  (timeout="200")
[20:41:05.087]      // while-condition  =>  TRUE
[20:41:05.087]      // while "1"  (timeout="200")
[20:41:05.087]      // while-condition  =>  TRUE
[20:41:05.087]      // while "1"  (timeout="200")
[20:41:05.087]      // while-condition  =>  TRUE
[20:41:05.089]      // while "1"  (timeout="200")
[20:41:05.089]      // while-condition  =>  TRUE
[20:41:05.089]      // while "1"  (timeout="200")
[20:41:05.089]      // while-condition  =>  TRUE
[20:41:05.089]      // while "1"  (timeout="200")
[20:41:05.089]      // while-condition  =>  TRUE
[20:41:05.089]      // while "1"  (timeout="200")
[20:41:05.089]      // while-condition  =>  TRUE
[20:41:05.089]      // while "1"  (timeout="200")
[20:41:05.089]      // while-condition  =>  TRUE
[20:41:05.090]      // while "1"  (timeout="200")
[20:41:05.090]      // while-condition  =>  TRUE
[20:41:05.090]      // while "1"  (timeout="200")
[20:41:05.090]      // while-condition  =>  TRUE
[20:41:05.090]      // while "1"  (timeout="200")
[20:41:05.090]      // while-condition  =>  TRUE
[20:41:05.090]      // while "1"  (timeout="200")
[20:41:05.090]      // while-condition  =>  TRUE
[20:41:05.090]      // while "1"  (timeout="200")
[20:41:05.090]      // while-condition  =>  TRUE
[20:41:05.090]      // while "1"  (timeout="200")
[20:41:05.090]      // while-condition  =>  TRUE
[20:41:05.091]      // while "1"  (timeout="200")
[20:41:05.091]      // while-condition  =>  TRUE
[20:41:05.091]      // while "1"  (timeout="200")
[20:41:05.091]      // while-condition  =>  TRUE
[20:41:05.091]      // while "1"  (timeout="200")
[20:41:05.091]      // while-condition  =>  TRUE
[20:41:05.091]      // while "1"  (timeout="200")
[20:41:05.091]      // while-condition  =>  TRUE
[20:41:05.091]      // while "1"  (timeout="200")
[20:41:05.091]      // while-condition  =>  TRUE
[20:41:05.091]      // while "1"  (timeout="200")
[20:41:05.092]      // while-condition  =>  TRUE
[20:41:05.092]      // while "1"  (timeout="200")
[20:41:05.092]      // while-condition  =>  TRUE
[20:41:05.092]      // while "1"  (timeout="200")
[20:41:05.092]      // while-condition  =>  TRUE
[20:41:05.092]      // while "1"  (timeout="200")
[20:41:05.092]      // while-condition  =>  TRUE
[20:41:05.092]      // while "1"  (timeout="200")
[20:41:05.092]      // while-condition  =>  TRUE
[20:41:05.092]      // while "1"  (timeout="200")
[20:41:05.092]      // while-condition  =>  TRUE
[20:41:05.092]      // while "1"  (timeout="200")
[20:41:05.093]      // while-condition  =>  TRUE
[20:41:05.093]      // while "1"  (timeout="200")
[20:41:05.093]      // while-condition  =>  TRUE
[20:41:05.093]      // while "1"  (timeout="200")
[20:41:05.093]      // while-condition  =>  TRUE
[20:41:05.093]      // while "1"  (timeout="200")
[20:41:05.093]      // while-condition  =>  TRUE
[20:41:05.093]      // while "1"  (timeout="200")
[20:41:05.093]      // while-condition  =>  TRUE
[20:41:05.093]      // while "1"  (timeout="200")
[20:41:05.093]      // while-condition  =>  TRUE
[20:41:05.094]      // while "1"  (timeout="200")
[20:41:05.094]      // while-condition  =>  TRUE
[20:41:05.094]      // while "1"  (timeout="200")
[20:41:05.094]      // while-condition  =>  TRUE
[20:41:05.094]      // while "1"  (timeout="200")
[20:41:05.094]      // while-condition  =>  TRUE
[20:41:05.094]      // while "1"  (timeout="200")
[20:41:05.095]      // while-condition  =>  TRUE
[20:41:05.095]      // while "1"  (timeout="200")
[20:41:05.095]      // while-condition  =>  TRUE
[20:41:05.095]      // while "1"  (timeout="200")
[20:41:05.095]      // while-condition  =>  TRUE
[20:41:05.095]      // while "1"  (timeout="200")
[20:41:05.095]      // while-condition  =>  TRUE
[20:41:05.095]      // while "1"  (timeout="200")
[20:41:05.095]      // while-condition  =>  TRUE
[20:41:05.095]      // while "1"  (timeout="200")
[20:41:05.095]      // while-condition  =>  TRUE
[20:41:05.095]      // while "1"  (timeout="200")
[20:41:05.095]      // while-condition  =>  TRUE
[20:41:05.096]      // while "1"  (timeout="200")
[20:41:05.096]      // while  =>  TIMEOUT
[20:41:05.096]      // end while "1"
[20:41:05.096]    </control>
[20:41:05.096]    <control if="canReadPins" while="" timeout="0" info="">
[20:41:05.096]      // if-block "canReadPins"
[20:41:05.096]        // =>  TRUE
[20:41:05.096]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:41:05.096]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:41:05.098]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:41:05.098]        // while-condition  =>  FALSE
[20:41:05.099]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:41:05.099]      </control>
[20:41:05.099]      // end if-block "canReadPins"
[20:41:05.099]    </control>
[20:41:05.099]    <control if="!canReadPins" while="" timeout="0" info="">
[20:41:05.099]      // if-block "!canReadPins"
[20:41:05.099]        // =>  FALSE
[20:41:05.099]      // skip if-block "!canReadPins"
[20:41:05.099]    </control>
[20:41:05.099]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:41:05.099]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:41:05.099]        // =>  TRUE
[20:41:05.099]      <block atomic="false" info="">
[20:41:05.099]        WriteAP(0x00, 0x190008);
[20:41:05.100]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:41:05.100]        WriteAP(0xF0, 0x01);
[20:41:05.107]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:41:05.107]      </block>
[20:41:05.107]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:41:05.107]    </control>
[20:41:05.107]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:41:05.107]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:41:05.107]        // =>  FALSE
[20:41:05.108]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:41:05.108]    </control>
[20:41:05.108]    <block atomic="false" info="">
[20:41:05.108]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:41:05.110]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:41:05.110]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:41:05.110]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:41:05.113]      __ap = 0; //lets make sure we reset the access point selection
[20:41:05.113]        // -> [__ap <= 0x00000000]
[20:41:05.113]    </block>
[20:41:05.114]  </sequence>
[20:41:05.114]  
[20:41:05.132]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:41:05.132]  
[20:41:05.132]  <debugvars>
[20:41:05.132]    // Pre-defined
[20:41:05.132]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:41:05.132]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:41:05.132]    __dp=0x00000000
[20:41:05.132]    __ap=0x00000000
[20:41:05.132]    __traceout=0x00000000      (Trace Disabled)
[20:41:05.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:41:05.132]    __FlashAddr=0x00000000
[20:41:05.132]    __FlashLen=0x00000000
[20:41:05.139]    __FlashArg=0x00000000
[20:41:05.139]    __FlashOp=0x00000000
[20:41:05.139]    __Result=0x00000000
[20:41:05.139]  </debugvars>
[20:41:05.139]  
[20:41:05.141]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:41:05.141]    <block atomic="false" info="">
[20:41:05.141]      __var deviceID = 0;
[20:41:05.141]        // -> [deviceID <= 0x00000000]
[20:41:05.141]      __var version = 0;
[20:41:05.141]        // -> [version <= 0x00000000]
[20:41:05.141]      __var partNum = 0;
[20:41:05.141]        // -> [partNum <= 0x00000000]
[20:41:05.141]      __var manuf = 0;
[20:41:05.141]        // -> [manuf <= 0x00000000]
[20:41:05.141]      __var isMSPM0G1X0X_G3X0X = 0;
[20:41:05.141]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:41:05.141]      __var isProduction = 0;
[20:41:05.141]        // -> [isProduction <= 0x00000000]
[20:41:05.141]      __var continueId = 0;
[20:41:05.141]        // -> [continueId <= 0x00000000]
[20:41:05.141]      deviceID =   Read32(0x41C40004);
[20:41:05.150]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:41:05.150]        // -> [deviceID <= 0x2BB8802F]
[20:41:05.150]      version = deviceID >> 28;
[20:41:05.150]        // -> [version <= 0x00000002]
[20:41:05.150]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:41:05.150]        // -> [partNum <= 0x0000BB88]
[20:41:05.150]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:41:05.151]        // -> [manuf <= 0x00000017]
[20:41:05.151]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:41:05.151]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:41:05.151]      isProduction = (version > 0);
[20:41:05.151]        // -> [isProduction <= 0x00000001]
[20:41:05.151]    </block>
[20:41:05.151]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:41:05.151]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:41:05.151]        // =>  FALSE
[20:41:05.151]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:41:05.151]    </control>
[20:41:05.151]    <control if="continueId == 4" while="" timeout="0" info="">
[20:41:05.151]      // if-block "continueId == 4"
[20:41:05.151]        // =>  FALSE
[20:41:05.151]      // skip if-block "continueId == 4"
[20:41:05.151]    </control>
[20:41:05.151]    <control if="!isProduction" while="" timeout="0" info="">
[20:41:05.151]      // if-block "!isProduction"
[20:41:05.151]        // =>  FALSE
[20:41:05.151]      // skip if-block "!isProduction"
[20:41:05.151]    </control>
[20:41:05.151]  </sequence>
[20:41:05.151]  
[20:44:16.107]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:44:16.107]  
[20:44:16.107]  <debugvars>
[20:44:16.107]    // Pre-defined
[20:44:16.107]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:16.107]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:44:16.107]    __dp=0x00000000
[20:44:16.107]    __ap=0x00000000
[20:44:16.107]    __traceout=0x00000000      (Trace Disabled)
[20:44:16.107]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:16.107]    __FlashAddr=0x00000000
[20:44:16.107]    __FlashLen=0x00000000
[20:44:16.107]    __FlashArg=0x00000000
[20:44:16.107]    __FlashOp=0x00000000
[20:44:16.107]    __Result=0x00000000
[20:44:16.107]  </debugvars>
[20:44:16.107]  
[20:44:16.107]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:44:16.107]    <block atomic="false" info="">
[20:44:16.107]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:44:16.107]        // -> [isSWJ <= 0x00000001]
[20:44:16.107]      __var hasDormant = __protocol & 0x00020000;
[20:44:16.107]        // -> [hasDormant <= 0x00000000]
[20:44:16.107]      __var protType   = __protocol & 0x0000FFFF;
[20:44:16.107]        // -> [protType <= 0x00000002]
[20:44:16.107]    </block>
[20:44:16.107]    <control if="protType == 1" while="" timeout="0" info="">
[20:44:16.107]      // if-block "protType == 1"
[20:44:16.107]        // =>  FALSE
[20:44:16.107]      // skip if-block "protType == 1"
[20:44:16.107]    </control>
[20:44:16.107]    <control if="protType == 2" while="" timeout="0" info="">
[20:44:16.107]      // if-block "protType == 2"
[20:44:16.107]        // =>  TRUE
[20:44:16.107]      <control if="isSWJ" while="" timeout="0" info="">
[20:44:16.107]        // if-block "isSWJ"
[20:44:16.107]          // =>  TRUE
[20:44:16.107]        <control if="hasDormant" while="" timeout="0" info="">
[20:44:16.107]          // if-block "hasDormant"
[20:44:16.107]            // =>  FALSE
[20:44:16.107]          // skip if-block "hasDormant"
[20:44:16.107]        </control>
[20:44:16.107]        <control if="!hasDormant" while="" timeout="0" info="">
[20:44:16.107]          // if-block "!hasDormant"
[20:44:16.107]            // =>  TRUE
[20:44:16.107]          <block atomic="false" info="">
[20:44:16.107]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:44:16.115]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:16.115]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:44:16.115]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:44:16.115]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:44:16.115]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:16.115]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:44:16.115]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:44:16.115]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:44:16.115]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:16.115]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:44:16.125]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:44:16.125]          </block>
[20:44:16.125]          // end if-block "!hasDormant"
[20:44:16.125]        </control>
[20:44:16.125]        // end if-block "isSWJ"
[20:44:16.125]      </control>
[20:44:16.125]      <control if="!isSWJ" while="" timeout="0" info="">
[20:44:16.125]        // if-block "!isSWJ"
[20:44:16.125]          // =>  FALSE
[20:44:16.125]        // skip if-block "!isSWJ"
[20:44:16.127]      </control>
[20:44:16.127]      <block atomic="false" info="">
[20:44:16.127]        ReadDP(0x0);
[20:44:16.127]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:44:16.127]      </block>
[20:44:16.127]      // end if-block "protType == 2"
[20:44:16.127]    </control>
[20:44:16.127]  </sequence>
[20:44:16.127]  
[20:44:16.127]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:44:16.127]  
[20:44:16.127]  <debugvars>
[20:44:16.127]    // Pre-defined
[20:44:16.127]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:16.127]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:44:16.127]    __dp=0x00000000
[20:44:16.127]    __ap=0x00000000
[20:44:16.127]    __traceout=0x00000000      (Trace Disabled)
[20:44:16.127]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:16.127]    __FlashAddr=0x00000000
[20:44:16.127]    __FlashLen=0x00000000
[20:44:16.127]    __FlashArg=0x00000000
[20:44:16.127]    __FlashOp=0x00000000
[20:44:16.127]    __Result=0x00000000
[20:44:16.127]  </debugvars>
[20:44:16.127]  
[20:44:16.127]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:44:16.127]    <block atomic="false" info="">
[20:44:16.127]      __var SW_DP_ABORT       = 0x0;
[20:44:16.127]        // -> [SW_DP_ABORT <= 0x00000000]
[20:44:16.127]      __var DP_CTRL_STAT      = 0x4;
[20:44:16.127]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:44:16.127]      __var DP_SELECT         = 0x8;
[20:44:16.127]        // -> [DP_SELECT <= 0x00000008]
[20:44:16.127]      __var powered_down      = 0;
[20:44:16.127]        // -> [powered_down <= 0x00000000]
[20:44:16.127]      WriteDP(DP_SELECT, 0x00000000);
[20:44:16.136]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:44:16.136]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:44:16.137]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:44:16.137]        // -> [powered_down <= 0x00000001]
[20:44:16.137]    </block>
[20:44:16.137]    <control if="powered_down" while="" timeout="0" info="">
[20:44:16.137]      // if-block "powered_down"
[20:44:16.137]        // =>  TRUE
[20:44:16.137]      <block atomic="false" info="">
[20:44:16.137]        Message(0, "Debug/System power-up request sent");
[20:44:16.141]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:44:16.142]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:44:16.142]      </block>
[20:44:16.142]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:44:16.142]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:44:16.145]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:44:16.145]        // while-condition  =>  FALSE
[20:44:16.145]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:44:16.145]      </control>
[20:44:16.145]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:44:16.145]        // if-block "(__protocol & 0xFFFF) == 1"
[20:44:16.145]          // =>  FALSE
[20:44:16.145]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:44:16.145]      </control>
[20:44:16.145]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:44:16.145]        // if-block "(__protocol & 0xFFFF) == 2"
[20:44:16.145]          // =>  TRUE
[20:44:16.145]        <block atomic="false" info="">
[20:44:16.145]          Message(0, "executing SWD power up");
[20:44:16.148]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:44:16.148]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:44:16.148]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:44:16.148]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:44:16.148]        </block>
[20:44:16.148]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:44:16.148]      </control>
[20:44:16.148]      // end if-block "powered_down"
[20:44:16.148]    </control>
[20:44:16.148]    <block atomic="false" info="">
[20:44:16.148]      __var DEBUG_PORT_VAL    = 0;
[20:44:16.148]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:44:16.148]      __var ACCESS_POINT_VAL  = 0;
[20:44:16.148]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:44:16.148]      __ap = 1; 
[20:44:16.148]        // -> [__ap <= 0x00000001]
[20:44:16.148]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:44:16.155]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:44:16.155]      __ap = 4;
[20:44:16.155]        // -> [__ap <= 0x00000004]
[20:44:16.155]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:44:16.155]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:44:16.155]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:44:16.155]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:44:16.155]    </block>
[20:44:16.155]    <block atomic="false" info="">
[20:44:16.155]      __var nReset = 0x80;
[20:44:16.155]        // -> [nReset <= 0x00000080]
[20:44:16.155]      __var canReadPins = 0;
[20:44:16.155]        // -> [canReadPins <= 0x00000000]
[20:44:16.155]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:44:16.165]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:44:16.165]        // -> [canReadPins <= 0x00000001]
[20:44:16.165]    </block>
[20:44:16.165]    <control if="" while="1" timeout="200" info="">
[20:44:16.165]      // while "1"  (timeout="200")
[20:44:16.165]      // while-condition  =>  TRUE
[20:44:16.165]      // while "1"  (timeout="200")
[20:44:16.165]      // while-condition  =>  TRUE
[20:44:16.165]      // while "1"  (timeout="200")
[20:44:16.165]      // while-condition  =>  TRUE
[20:44:16.165]      // while "1"  (timeout="200")
[20:44:16.165]      // while-condition  =>  TRUE
[20:44:16.165]      // while "1"  (timeout="200")
[20:44:16.165]      // while-condition  =>  TRUE
[20:44:16.165]      // while "1"  (timeout="200")
[20:44:16.165]      // while-condition  =>  TRUE
[20:44:16.165]      // while "1"  (timeout="200")
[20:44:16.165]      // while-condition  =>  TRUE
[20:44:16.165]      // while "1"  (timeout="200")
[20:44:16.165]      // while-condition  =>  TRUE
[20:44:16.165]      // while "1"  (timeout="200")
[20:44:16.165]      // while-condition  =>  TRUE
[20:44:16.165]      // while "1"  (timeout="200")
[20:44:16.165]      // while-condition  =>  TRUE
[20:44:16.165]      // while "1"  (timeout="200")
[20:44:16.165]      // while-condition  =>  TRUE
[20:44:16.165]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.168]      // while-condition  =>  TRUE
[20:44:16.168]      // while "1"  (timeout="200")
[20:44:16.175]      // while-condition  =>  TRUE
[20:44:16.175]      // while "1"  (timeout="200")
[20:44:16.175]      // while  =>  TIMEOUT
[20:44:16.175]      // end while "1"
[20:44:16.175]    </control>
[20:44:16.175]    <control if="canReadPins" while="" timeout="0" info="">
[20:44:16.175]      // if-block "canReadPins"
[20:44:16.175]        // =>  TRUE
[20:44:16.175]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:44:16.175]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:44:16.177]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:44:16.177]        // while-condition  =>  FALSE
[20:44:16.177]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:44:16.177]      </control>
[20:44:16.177]      // end if-block "canReadPins"
[20:44:16.177]    </control>
[20:44:16.177]    <control if="!canReadPins" while="" timeout="0" info="">
[20:44:16.177]      // if-block "!canReadPins"
[20:44:16.177]        // =>  FALSE
[20:44:16.177]      // skip if-block "!canReadPins"
[20:44:16.177]    </control>
[20:44:16.177]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:44:16.177]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:44:16.177]        // =>  TRUE
[20:44:16.177]      <block atomic="false" info="">
[20:44:16.177]        WriteAP(0x00, 0x190008);
[20:44:16.177]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:44:16.177]        WriteAP(0xF0, 0x01);
[20:44:16.185]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:44:16.185]      </block>
[20:44:16.185]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:44:16.185]    </control>
[20:44:16.185]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:44:16.185]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:44:16.186]        // =>  FALSE
[20:44:16.186]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:44:16.186]    </control>
[20:44:16.186]    <block atomic="false" info="">
[20:44:16.186]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:44:16.195]  
[20:44:16.195]  !!! E310 : Debug access failed - cannot read AP register 0x00000000 (AP '0x00000004'))
[20:44:16.195]  
[20:44:16.205]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:44:16.205]    </block>
[20:44:16.205]  </sequence>
[20:44:16.205]  
[20:44:24.074]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:44:24.074]  
[20:44:24.074]  <debugvars>
[20:44:24.074]    // Pre-defined
[20:44:24.074]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:24.074]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:44:24.074]    __dp=0x00000000
[20:44:24.074]    __ap=0x00000000
[20:44:24.074]    __traceout=0x00000000      (Trace Disabled)
[20:44:24.074]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:24.074]    __FlashAddr=0x00000000
[20:44:24.074]    __FlashLen=0x00000000
[20:44:24.074]    __FlashArg=0x00000000
[20:44:24.074]    __FlashOp=0x00000000
[20:44:24.074]    __Result=0x00000000
[20:44:24.074]  </debugvars>
[20:44:24.074]  
[20:44:24.074]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:44:24.074]    <block atomic="false" info="">
[20:44:24.074]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:44:24.074]        // -> [isSWJ <= 0x00000001]
[20:44:24.074]      __var hasDormant = __protocol & 0x00020000;
[20:44:24.074]        // -> [hasDormant <= 0x00000000]
[20:44:24.074]      __var protType   = __protocol & 0x0000FFFF;
[20:44:24.074]        // -> [protType <= 0x00000002]
[20:44:24.074]    </block>
[20:44:24.074]    <control if="protType == 1" while="" timeout="0" info="">
[20:44:24.074]      // if-block "protType == 1"
[20:44:24.074]        // =>  FALSE
[20:44:24.074]      // skip if-block "protType == 1"
[20:44:24.074]    </control>
[20:44:24.074]    <control if="protType == 2" while="" timeout="0" info="">
[20:44:24.074]      // if-block "protType == 2"
[20:44:24.074]        // =>  TRUE
[20:44:24.074]      <control if="isSWJ" while="" timeout="0" info="">
[20:44:24.074]        // if-block "isSWJ"
[20:44:24.083]          // =>  TRUE
[20:44:24.083]        <control if="hasDormant" while="" timeout="0" info="">
[20:44:24.083]          // if-block "hasDormant"
[20:44:24.083]            // =>  FALSE
[20:44:24.083]          // skip if-block "hasDormant"
[20:44:24.083]        </control>
[20:44:24.083]        <control if="!hasDormant" while="" timeout="0" info="">
[20:44:24.083]          // if-block "!hasDormant"
[20:44:24.083]            // =>  TRUE
[20:44:24.083]          <block atomic="false" info="">
[20:44:24.083]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:44:24.083]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:24.083]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:44:24.087]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:44:24.087]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:44:24.088]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:24.088]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:44:24.089]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:44:24.089]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:44:24.091]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:24.091]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:44:24.093]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:44:24.093]          </block>
[20:44:24.093]          // end if-block "!hasDormant"
[20:44:24.093]        </control>
[20:44:24.093]        // end if-block "isSWJ"
[20:44:24.094]      </control>
[20:44:24.094]      <control if="!isSWJ" while="" timeout="0" info="">
[20:44:24.094]        // if-block "!isSWJ"
[20:44:24.094]          // =>  FALSE
[20:44:24.094]        // skip if-block "!isSWJ"
[20:44:24.094]      </control>
[20:44:24.094]      <block atomic="false" info="">
[20:44:24.094]        ReadDP(0x0);
[20:44:24.096]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:44:24.097]      </block>
[20:44:24.097]      // end if-block "protType == 2"
[20:44:24.097]    </control>
[20:44:24.097]  </sequence>
[20:44:24.097]  
[20:44:24.099]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:44:24.099]  
[20:44:24.099]  <debugvars>
[20:44:24.099]    // Pre-defined
[20:44:24.099]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:24.099]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:44:24.099]    __dp=0x00000000
[20:44:24.099]    __ap=0x00000000
[20:44:24.099]    __traceout=0x00000000      (Trace Disabled)
[20:44:24.101]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:24.101]    __FlashAddr=0x00000000
[20:44:24.101]    __FlashLen=0x00000000
[20:44:24.101]    __FlashArg=0x00000000
[20:44:24.101]    __FlashOp=0x00000000
[20:44:24.101]    __Result=0x00000000
[20:44:24.101]  </debugvars>
[20:44:24.101]  
[20:44:24.101]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:44:24.101]    <block atomic="false" info="">
[20:44:24.101]      __var SW_DP_ABORT       = 0x0;
[20:44:24.102]        // -> [SW_DP_ABORT <= 0x00000000]
[20:44:24.102]      __var DP_CTRL_STAT      = 0x4;
[20:44:24.102]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:44:24.102]      __var DP_SELECT         = 0x8;
[20:44:24.102]        // -> [DP_SELECT <= 0x00000008]
[20:44:24.102]      __var powered_down      = 0;
[20:44:24.102]        // -> [powered_down <= 0x00000000]
[20:44:24.102]      WriteDP(DP_SELECT, 0x00000000);
[20:44:24.104]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:44:24.104]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:44:24.104]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:44:24.104]        // -> [powered_down <= 0x00000001]
[20:44:24.104]    </block>
[20:44:24.104]    <control if="powered_down" while="" timeout="0" info="">
[20:44:24.104]      // if-block "powered_down"
[20:44:24.104]        // =>  TRUE
[20:44:24.104]      <block atomic="false" info="">
[20:44:24.104]        Message(0, "Debug/System power-up request sent");
[20:44:24.107]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:44:24.109]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:44:24.109]      </block>
[20:44:24.109]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:44:24.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:44:24.114]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:44:24.115]        // while-condition  =>  FALSE
[20:44:24.115]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:44:24.115]      </control>
[20:44:24.115]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:44:24.115]        // if-block "(__protocol & 0xFFFF) == 1"
[20:44:24.115]          // =>  FALSE
[20:44:24.115]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:44:24.115]      </control>
[20:44:24.115]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:44:24.115]        // if-block "(__protocol & 0xFFFF) == 2"
[20:44:24.115]          // =>  TRUE
[20:44:24.115]        <block atomic="false" info="">
[20:44:24.115]          Message(0, "executing SWD power up");
[20:44:24.117]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:44:24.120]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:44:24.120]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:44:24.120]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:44:24.120]        </block>
[20:44:24.120]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:44:24.120]      </control>
[20:44:24.120]      // end if-block "powered_down"
[20:44:24.120]    </control>
[20:44:24.120]    <block atomic="false" info="">
[20:44:24.120]      __var DEBUG_PORT_VAL    = 0;
[20:44:24.120]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:44:24.120]      __var ACCESS_POINT_VAL  = 0;
[20:44:24.120]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:44:24.120]      __ap = 1; 
[20:44:24.120]        // -> [__ap <= 0x00000001]
[20:44:24.120]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:44:24.128]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:44:24.128]      __ap = 4;
[20:44:24.128]        // -> [__ap <= 0x00000004]
[20:44:24.128]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:44:24.128]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:44:24.128]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:44:24.128]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:44:24.128]    </block>
[20:44:24.135]    <block atomic="false" info="">
[20:44:24.135]      __var nReset = 0x80;
[20:44:24.135]        // -> [nReset <= 0x00000080]
[20:44:24.135]      __var canReadPins = 0;
[20:44:24.135]        // -> [canReadPins <= 0x00000000]
[20:44:24.135]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:44:24.137]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:44:24.137]        // -> [canReadPins <= 0x00000001]
[20:44:24.137]    </block>
[20:44:24.137]    <control if="" while="1" timeout="200" info="">
[20:44:24.137]      // while "1"  (timeout="200")
[20:44:24.137]      // while-condition  =>  TRUE
[20:44:24.137]      // while "1"  (timeout="200")
[20:44:24.137]      // while-condition  =>  TRUE
[20:44:24.137]      // while "1"  (timeout="200")
[20:44:24.137]      // while-condition  =>  TRUE
[20:44:24.137]      // while "1"  (timeout="200")
[20:44:24.137]      // while-condition  =>  TRUE
[20:44:24.137]      // while "1"  (timeout="200")
[20:44:24.137]      // while-condition  =>  TRUE
[20:44:24.137]      // while "1"  (timeout="200")
[20:44:24.137]      // while-condition  =>  TRUE
[20:44:24.137]      // while "1"  (timeout="200")
[20:44:24.137]      // while-condition  =>  TRUE
[20:44:24.137]      // while "1"  (timeout="200")
[20:44:24.137]      // while-condition  =>  TRUE
[20:44:24.139]      // while "1"  (timeout="200")
[20:44:24.139]      // while-condition  =>  TRUE
[20:44:24.139]      // while "1"  (timeout="200")
[20:44:24.139]      // while-condition  =>  TRUE
[20:44:24.139]      // while "1"  (timeout="200")
[20:44:24.139]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.140]      // while "1"  (timeout="200")
[20:44:24.140]      // while-condition  =>  TRUE
[20:44:24.145]      // while "1"  (timeout="200")
[20:44:24.145]      // while  =>  TIMEOUT
[20:44:24.145]      // end while "1"
[20:44:24.145]    </control>
[20:44:24.145]    <control if="canReadPins" while="" timeout="0" info="">
[20:44:24.145]      // if-block "canReadPins"
[20:44:24.145]        // =>  TRUE
[20:44:24.145]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:44:24.146]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:44:24.156]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:44:24.156]        // while-condition  =>  FALSE
[20:44:24.156]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:44:24.157]      </control>
[20:44:24.157]      // end if-block "canReadPins"
[20:44:24.157]    </control>
[20:44:24.157]    <control if="!canReadPins" while="" timeout="0" info="">
[20:44:24.157]      // if-block "!canReadPins"
[20:44:24.157]        // =>  FALSE
[20:44:24.157]      // skip if-block "!canReadPins"
[20:44:24.157]    </control>
[20:44:24.157]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:44:24.158]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:44:24.158]        // =>  TRUE
[20:44:24.158]      <block atomic="false" info="">
[20:44:24.158]        WriteAP(0x00, 0x190008);
[20:44:24.162]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:44:24.162]        WriteAP(0xF0, 0x01);
[20:44:24.167]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:44:24.167]      </block>
[20:44:24.167]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:44:24.167]    </control>
[20:44:24.167]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:44:24.167]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:44:24.168]        // =>  FALSE
[20:44:24.168]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:44:24.168]    </control>
[20:44:24.168]    <block atomic="false" info="">
[20:44:24.168]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:44:24.171]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:44:24.171]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:44:24.171]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:44:24.173]      __ap = 0; //lets make sure we reset the access point selection
[20:44:24.173]        // -> [__ap <= 0x00000000]
[20:44:24.173]    </block>
[20:44:24.174]  </sequence>
[20:44:24.174]  
[20:44:24.194]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:44:24.194]  
[20:44:24.194]  <debugvars>
[20:44:24.194]    // Pre-defined
[20:44:24.194]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:24.194]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:44:24.194]    __dp=0x00000000
[20:44:24.194]    __ap=0x00000000
[20:44:24.194]    __traceout=0x00000000      (Trace Disabled)
[20:44:24.194]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:24.194]    __FlashAddr=0x00000000
[20:44:24.194]    __FlashLen=0x00000000
[20:44:24.194]    __FlashArg=0x00000000
[20:44:24.194]    __FlashOp=0x00000000
[20:44:24.194]    __Result=0x00000000
[20:44:24.194]  </debugvars>
[20:44:24.194]  
[20:44:24.194]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:44:24.194]    <block atomic="false" info="">
[20:44:24.194]      __var deviceID = 0;
[20:44:24.194]        // -> [deviceID <= 0x00000000]
[20:44:24.194]      __var version = 0;
[20:44:24.194]        // -> [version <= 0x00000000]
[20:44:24.194]      __var partNum = 0;
[20:44:24.194]        // -> [partNum <= 0x00000000]
[20:44:24.194]      __var manuf = 0;
[20:44:24.194]        // -> [manuf <= 0x00000000]
[20:44:24.194]      __var isMSPM0G1X0X_G3X0X = 0;
[20:44:24.194]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:44:24.194]      __var isProduction = 0;
[20:44:24.194]        // -> [isProduction <= 0x00000000]
[20:44:24.194]      __var continueId = 0;
[20:44:24.194]        // -> [continueId <= 0x00000000]
[20:44:24.194]      deviceID =   Read32(0x41C40004);
[20:44:24.204]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:44:24.204]        // -> [deviceID <= 0x2BB8802F]
[20:44:24.204]      version = deviceID >> 28;
[20:44:24.204]        // -> [version <= 0x00000002]
[20:44:24.204]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:44:24.204]        // -> [partNum <= 0x0000BB88]
[20:44:24.204]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:44:24.204]        // -> [manuf <= 0x00000017]
[20:44:24.204]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:44:24.204]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:44:24.204]      isProduction = (version > 0);
[20:44:24.204]        // -> [isProduction <= 0x00000001]
[20:44:24.204]    </block>
[20:44:24.204]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:44:24.204]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:44:24.204]        // =>  FALSE
[20:44:24.204]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:44:24.204]    </control>
[20:44:24.204]    <control if="continueId == 4" while="" timeout="0" info="">
[20:44:24.204]      // if-block "continueId == 4"
[20:44:24.204]        // =>  FALSE
[20:44:24.204]      // skip if-block "continueId == 4"
[20:44:24.204]    </control>
[20:44:24.204]    <control if="!isProduction" while="" timeout="0" info="">
[20:44:24.204]      // if-block "!isProduction"
[20:44:24.204]        // =>  FALSE
[20:44:24.204]      // skip if-block "!isProduction"
[20:44:24.204]    </control>
[20:44:24.204]  </sequence>
[20:44:24.204]  
[20:44:29.592]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:44:29.592]  
[20:44:29.605]  <debugvars>
[20:44:29.605]    // Pre-defined
[20:44:29.605]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:29.605]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:44:29.605]    __dp=0x00000000
[20:44:29.605]    __ap=0x00000000
[20:44:29.605]    __traceout=0x00000000      (Trace Disabled)
[20:44:29.605]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:29.605]    __FlashAddr=0x00000000
[20:44:29.605]    __FlashLen=0x00000000
[20:44:29.605]    __FlashArg=0x00000000
[20:44:29.606]    __FlashOp=0x00000000
[20:44:29.606]    __Result=0x00000000
[20:44:29.606]  </debugvars>
[20:44:29.606]  
[20:44:29.606]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:44:29.606]    <block atomic="false" info="">
[20:44:29.606]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:44:29.606]        // -> [isSWJ <= 0x00000001]
[20:44:29.606]      __var hasDormant = __protocol & 0x00020000;
[20:44:29.606]        // -> [hasDormant <= 0x00000000]
[20:44:29.606]      __var protType   = __protocol & 0x0000FFFF;
[20:44:29.606]        // -> [protType <= 0x00000002]
[20:44:29.607]    </block>
[20:44:29.607]    <control if="protType == 1" while="" timeout="0" info="">
[20:44:29.607]      // if-block "protType == 1"
[20:44:29.607]        // =>  FALSE
[20:44:29.607]      // skip if-block "protType == 1"
[20:44:29.607]    </control>
[20:44:29.607]    <control if="protType == 2" while="" timeout="0" info="">
[20:44:29.607]      // if-block "protType == 2"
[20:44:29.607]        // =>  TRUE
[20:44:29.607]      <control if="isSWJ" while="" timeout="0" info="">
[20:44:29.608]        // if-block "isSWJ"
[20:44:29.608]          // =>  TRUE
[20:44:29.608]        <control if="hasDormant" while="" timeout="0" info="">
[20:44:29.608]          // if-block "hasDormant"
[20:44:29.608]            // =>  FALSE
[20:44:29.608]          // skip if-block "hasDormant"
[20:44:29.608]        </control>
[20:44:29.608]        <control if="!hasDormant" while="" timeout="0" info="">
[20:44:29.608]          // if-block "!hasDormant"
[20:44:29.608]            // =>  TRUE
[20:44:29.609]          <block atomic="false" info="">
[20:44:29.609]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:44:29.610]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:29.610]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:44:29.612]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:44:29.613]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:44:29.614]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:29.614]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:44:29.614]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:44:29.614]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:44:29.622]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:29.622]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:44:29.624]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:44:29.624]          </block>
[20:44:29.624]          // end if-block "!hasDormant"
[20:44:29.624]        </control>
[20:44:29.624]        // end if-block "isSWJ"
[20:44:29.625]      </control>
[20:44:29.625]      <control if="!isSWJ" while="" timeout="0" info="">
[20:44:29.625]        // if-block "!isSWJ"
[20:44:29.625]          // =>  FALSE
[20:44:29.625]        // skip if-block "!isSWJ"
[20:44:29.625]      </control>
[20:44:29.625]      <block atomic="false" info="">
[20:44:29.625]        ReadDP(0x0);
[20:44:29.625]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:44:29.625]      </block>
[20:44:29.625]      // end if-block "protType == 2"
[20:44:29.625]    </control>
[20:44:29.625]  </sequence>
[20:44:29.625]  
[20:44:29.625]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:44:29.625]  
[20:44:29.625]  <debugvars>
[20:44:29.625]    // Pre-defined
[20:44:29.625]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:29.625]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:44:29.625]    __dp=0x00000000
[20:44:29.625]    __ap=0x00000000
[20:44:29.625]    __traceout=0x00000000      (Trace Disabled)
[20:44:29.625]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:29.625]    __FlashAddr=0x00000000
[20:44:29.625]    __FlashLen=0x00000000
[20:44:29.625]    __FlashArg=0x00000000
[20:44:29.625]    __FlashOp=0x00000000
[20:44:29.625]    __Result=0x00000000
[20:44:29.625]  </debugvars>
[20:44:29.625]  
[20:44:29.625]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:44:29.625]    <block atomic="false" info="">
[20:44:29.632]      __var SW_DP_ABORT       = 0x0;
[20:44:29.632]        // -> [SW_DP_ABORT <= 0x00000000]
[20:44:29.632]      __var DP_CTRL_STAT      = 0x4;
[20:44:29.632]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:44:29.632]      __var DP_SELECT         = 0x8;
[20:44:29.632]        // -> [DP_SELECT <= 0x00000008]
[20:44:29.632]      __var powered_down      = 0;
[20:44:29.632]        // -> [powered_down <= 0x00000000]
[20:44:29.632]      WriteDP(DP_SELECT, 0x00000000);
[20:44:29.632]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:44:29.632]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:44:29.632]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:44:29.632]        // -> [powered_down <= 0x00000001]
[20:44:29.632]    </block>
[20:44:29.632]    <control if="powered_down" while="" timeout="0" info="">
[20:44:29.632]      // if-block "powered_down"
[20:44:29.632]        // =>  TRUE
[20:44:29.632]      <block atomic="false" info="">
[20:44:29.632]        Message(0, "Debug/System power-up request sent");
[20:44:29.632]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:44:29.642]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:44:29.642]      </block>
[20:44:29.642]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:44:29.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:44:29.642]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:44:29.642]        // while-condition  =>  FALSE
[20:44:29.642]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:44:29.642]      </control>
[20:44:29.642]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:44:29.642]        // if-block "(__protocol & 0xFFFF) == 1"
[20:44:29.642]          // =>  FALSE
[20:44:29.642]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:44:29.642]      </control>
[20:44:29.642]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:44:29.642]        // if-block "(__protocol & 0xFFFF) == 2"
[20:44:29.642]          // =>  TRUE
[20:44:29.642]        <block atomic="false" info="">
[20:44:29.642]          Message(0, "executing SWD power up");
[20:44:29.642]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:44:29.642]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:44:29.642]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:44:29.652]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:44:29.652]        </block>
[20:44:29.652]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:44:29.652]      </control>
[20:44:29.652]      // end if-block "powered_down"
[20:44:29.652]    </control>
[20:44:29.652]    <block atomic="false" info="">
[20:44:29.652]      __var DEBUG_PORT_VAL    = 0;
[20:44:29.652]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:44:29.652]      __var ACCESS_POINT_VAL  = 0;
[20:44:29.652]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:44:29.652]      __ap = 1; 
[20:44:29.652]        // -> [__ap <= 0x00000001]
[20:44:29.652]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:44:29.652]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:44:29.652]      __ap = 4;
[20:44:29.652]        // -> [__ap <= 0x00000004]
[20:44:29.652]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:44:29.652]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:44:29.652]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:44:29.652]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:44:29.662]    </block>
[20:44:29.662]    <block atomic="false" info="">
[20:44:29.662]      __var nReset = 0x80;
[20:44:29.662]        // -> [nReset <= 0x00000080]
[20:44:29.662]      __var canReadPins = 0;
[20:44:29.662]        // -> [canReadPins <= 0x00000000]
[20:44:29.662]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:44:29.662]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:44:29.662]        // -> [canReadPins <= 0x00000001]
[20:44:29.662]    </block>
[20:44:29.662]    <control if="" while="1" timeout="200" info="">
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.662]      // while "1"  (timeout="200")
[20:44:29.662]      // while-condition  =>  TRUE
[20:44:29.672]      // while "1"  (timeout="200")
[20:44:29.672]      // while-condition  =>  TRUE
[20:44:29.672]      // while "1"  (timeout="200")
[20:44:29.672]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.673]      // while-condition  =>  TRUE
[20:44:29.673]      // while "1"  (timeout="200")
[20:44:29.682]      // while-condition  =>  TRUE
[20:44:29.682]      // while "1"  (timeout="200")
[20:44:29.682]      // while  =>  TIMEOUT
[20:44:29.682]      // end while "1"
[20:44:29.682]    </control>
[20:44:29.682]    <control if="canReadPins" while="" timeout="0" info="">
[20:44:29.682]      // if-block "canReadPins"
[20:44:29.682]        // =>  TRUE
[20:44:29.682]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:44:29.682]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:44:29.682]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:44:29.682]        // while-condition  =>  FALSE
[20:44:29.682]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:44:29.682]      </control>
[20:44:29.682]      // end if-block "canReadPins"
[20:44:29.682]    </control>
[20:44:29.682]    <control if="!canReadPins" while="" timeout="0" info="">
[20:44:29.682]      // if-block "!canReadPins"
[20:44:29.682]        // =>  FALSE
[20:44:29.682]      // skip if-block "!canReadPins"
[20:44:29.682]    </control>
[20:44:29.682]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:44:29.682]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:44:29.682]        // =>  TRUE
[20:44:29.682]      <block atomic="false" info="">
[20:44:29.682]        WriteAP(0x00, 0x190008);
[20:44:29.682]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:44:29.682]        WriteAP(0xF0, 0x01);
[20:44:29.692]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:44:29.692]      </block>
[20:44:29.692]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:44:29.692]    </control>
[20:44:29.692]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:44:29.692]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:44:29.692]        // =>  FALSE
[20:44:29.692]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:44:29.692]    </control>
[20:44:29.692]    <block atomic="false" info="">
[20:44:29.692]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:44:29.702]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:44:29.702]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:44:29.702]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:44:29.702]      __ap = 0; //lets make sure we reset the access point selection
[20:44:29.702]        // -> [__ap <= 0x00000000]
[20:44:29.702]    </block>
[20:44:29.702]  </sequence>
[20:44:29.702]  
[20:44:29.722]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:44:29.722]  
[20:44:29.722]  <debugvars>
[20:44:29.722]    // Pre-defined
[20:44:29.722]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:29.732]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:44:29.732]    __dp=0x00000000
[20:44:29.732]    __ap=0x00000000
[20:44:29.732]    __traceout=0x00000000      (Trace Disabled)
[20:44:29.732]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:29.732]    __FlashAddr=0x00000000
[20:44:29.732]    __FlashLen=0x00000000
[20:44:29.732]    __FlashArg=0x00000000
[20:44:29.732]    __FlashOp=0x00000000
[20:44:29.732]    __Result=0x00000000
[20:44:29.732]  </debugvars>
[20:44:29.732]  
[20:44:29.732]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:44:29.732]    <block atomic="false" info="">
[20:44:29.732]      __var deviceID = 0;
[20:44:29.732]        // -> [deviceID <= 0x00000000]
[20:44:29.732]      __var version = 0;
[20:44:29.732]        // -> [version <= 0x00000000]
[20:44:29.732]      __var partNum = 0;
[20:44:29.732]        // -> [partNum <= 0x00000000]
[20:44:29.732]      __var manuf = 0;
[20:44:29.732]        // -> [manuf <= 0x00000000]
[20:44:29.732]      __var isMSPM0G1X0X_G3X0X = 0;
[20:44:29.732]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:44:29.732]      __var isProduction = 0;
[20:44:29.732]        // -> [isProduction <= 0x00000000]
[20:44:29.732]      __var continueId = 0;
[20:44:29.732]        // -> [continueId <= 0x00000000]
[20:44:29.732]      deviceID =   Read32(0x41C40004);
[20:44:29.742]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:44:29.742]        // -> [deviceID <= 0x2BB8802F]
[20:44:29.742]      version = deviceID >> 28;
[20:44:29.742]        // -> [version <= 0x00000002]
[20:44:29.742]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:44:29.742]        // -> [partNum <= 0x0000BB88]
[20:44:29.742]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:44:29.742]        // -> [manuf <= 0x00000017]
[20:44:29.742]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:44:29.742]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:44:29.742]      isProduction = (version > 0);
[20:44:29.742]        // -> [isProduction <= 0x00000001]
[20:44:29.742]    </block>
[20:44:29.742]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:44:29.742]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:44:29.742]        // =>  FALSE
[20:44:29.742]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:44:29.742]    </control>
[20:44:29.742]    <control if="continueId == 4" while="" timeout="0" info="">
[20:44:29.742]      // if-block "continueId == 4"
[20:44:29.742]        // =>  FALSE
[20:44:29.742]      // skip if-block "continueId == 4"
[20:44:29.742]    </control>
[20:44:29.742]    <control if="!isProduction" while="" timeout="0" info="">
[20:44:29.742]      // if-block "!isProduction"
[20:44:29.742]        // =>  FALSE
[20:44:29.742]      // skip if-block "!isProduction"
[20:44:29.742]    </control>
[20:44:29.742]  </sequence>
[20:44:29.742]  
[20:44:56.576]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:44:56.576]  
[20:44:56.576]  <debugvars>
[20:44:56.576]    // Pre-defined
[20:44:56.576]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:56.576]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:44:56.576]    __dp=0x00000000
[20:44:56.576]    __ap=0x00000000
[20:44:56.576]    __traceout=0x00000000      (Trace Disabled)
[20:44:56.576]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:56.576]    __FlashAddr=0x00000000
[20:44:56.576]    __FlashLen=0x00000000
[20:44:56.576]    __FlashArg=0x00000000
[20:44:56.576]    __FlashOp=0x00000000
[20:44:56.576]    __Result=0x00000000
[20:44:56.576]  </debugvars>
[20:44:56.576]  
[20:44:56.576]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:44:56.576]    <block atomic="false" info="">
[20:44:56.576]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:44:56.576]        // -> [isSWJ <= 0x00000001]
[20:44:56.576]      __var hasDormant = __protocol & 0x00020000;
[20:44:56.576]        // -> [hasDormant <= 0x00000000]
[20:44:56.576]      __var protType   = __protocol & 0x0000FFFF;
[20:44:56.576]        // -> [protType <= 0x00000002]
[20:44:56.576]    </block>
[20:44:56.576]    <control if="protType == 1" while="" timeout="0" info="">
[20:44:56.576]      // if-block "protType == 1"
[20:44:56.576]        // =>  FALSE
[20:44:56.576]      // skip if-block "protType == 1"
[20:44:56.576]    </control>
[20:44:56.576]    <control if="protType == 2" while="" timeout="0" info="">
[20:44:56.576]      // if-block "protType == 2"
[20:44:56.576]        // =>  TRUE
[20:44:56.576]      <control if="isSWJ" while="" timeout="0" info="">
[20:44:56.576]        // if-block "isSWJ"
[20:44:56.576]          // =>  TRUE
[20:44:56.576]        <control if="hasDormant" while="" timeout="0" info="">
[20:44:56.576]          // if-block "hasDormant"
[20:44:56.576]            // =>  FALSE
[20:44:56.576]          // skip if-block "hasDormant"
[20:44:56.576]        </control>
[20:44:56.576]        <control if="!hasDormant" while="" timeout="0" info="">
[20:44:56.576]          // if-block "!hasDormant"
[20:44:56.576]            // =>  TRUE
[20:44:56.576]          <block atomic="false" info="">
[20:44:56.576]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:44:56.576]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:56.576]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:44:56.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:44:56.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:44:56.586]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:56.586]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:44:56.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:44:56.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:44:56.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:44:56.598]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:44:56.598]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:44:56.598]          </block>
[20:44:56.598]          // end if-block "!hasDormant"
[20:44:56.598]        </control>
[20:44:56.598]        // end if-block "isSWJ"
[20:44:56.598]      </control>
[20:44:56.598]      <control if="!isSWJ" while="" timeout="0" info="">
[20:44:56.598]        // if-block "!isSWJ"
[20:44:56.598]          // =>  FALSE
[20:44:56.598]        // skip if-block "!isSWJ"
[20:44:56.598]      </control>
[20:44:56.598]      <block atomic="false" info="">
[20:44:56.598]        ReadDP(0x0);
[20:44:56.598]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:44:56.598]      </block>
[20:44:56.598]      // end if-block "protType == 2"
[20:44:56.598]    </control>
[20:44:56.598]  </sequence>
[20:44:56.598]  
[20:44:56.606]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:44:56.606]  
[20:44:56.606]  <debugvars>
[20:44:56.606]    // Pre-defined
[20:44:56.606]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:56.606]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:44:56.607]    __dp=0x00000000
[20:44:56.607]    __ap=0x00000000
[20:44:56.607]    __traceout=0x00000000      (Trace Disabled)
[20:44:56.607]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:56.607]    __FlashAddr=0x00000000
[20:44:56.607]    __FlashLen=0x00000000
[20:44:56.607]    __FlashArg=0x00000000
[20:44:56.607]    __FlashOp=0x00000000
[20:44:56.607]    __Result=0x00000000
[20:44:56.607]  </debugvars>
[20:44:56.607]  
[20:44:56.607]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:44:56.607]    <block atomic="false" info="">
[20:44:56.607]      __var SW_DP_ABORT       = 0x0;
[20:44:56.607]        // -> [SW_DP_ABORT <= 0x00000000]
[20:44:56.607]      __var DP_CTRL_STAT      = 0x4;
[20:44:56.607]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:44:56.607]      __var DP_SELECT         = 0x8;
[20:44:56.607]        // -> [DP_SELECT <= 0x00000008]
[20:44:56.607]      __var powered_down      = 0;
[20:44:56.607]        // -> [powered_down <= 0x00000000]
[20:44:56.607]      WriteDP(DP_SELECT, 0x00000000);
[20:44:56.607]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:44:56.607]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:44:56.607]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:44:56.607]        // -> [powered_down <= 0x00000001]
[20:44:56.607]    </block>
[20:44:56.607]    <control if="powered_down" while="" timeout="0" info="">
[20:44:56.607]      // if-block "powered_down"
[20:44:56.607]        // =>  TRUE
[20:44:56.607]      <block atomic="false" info="">
[20:44:56.607]        Message(0, "Debug/System power-up request sent");
[20:44:56.616]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:44:56.616]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:44:56.616]      </block>
[20:44:56.616]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:44:56.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:44:56.616]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:44:56.616]        // while-condition  =>  FALSE
[20:44:56.616]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:44:56.616]      </control>
[20:44:56.616]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:44:56.616]        // if-block "(__protocol & 0xFFFF) == 1"
[20:44:56.616]          // =>  FALSE
[20:44:56.616]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:44:56.616]      </control>
[20:44:56.616]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:44:56.616]        // if-block "(__protocol & 0xFFFF) == 2"
[20:44:56.616]          // =>  TRUE
[20:44:56.616]        <block atomic="false" info="">
[20:44:56.616]          Message(0, "executing SWD power up");
[20:44:56.616]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:44:56.626]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:44:56.626]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:44:56.626]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:44:56.626]        </block>
[20:44:56.626]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:44:56.626]      </control>
[20:44:56.626]      // end if-block "powered_down"
[20:44:56.626]    </control>
[20:44:56.626]    <block atomic="false" info="">
[20:44:56.626]      __var DEBUG_PORT_VAL    = 0;
[20:44:56.626]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:44:56.626]      __var ACCESS_POINT_VAL  = 0;
[20:44:56.626]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:44:56.626]      __ap = 1; 
[20:44:56.626]        // -> [__ap <= 0x00000001]
[20:44:56.626]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:44:56.636]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:44:56.636]      __ap = 4;
[20:44:56.636]        // -> [__ap <= 0x00000004]
[20:44:56.636]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:44:56.639]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:44:56.639]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:44:56.639]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:44:56.642]    </block>
[20:44:56.642]    <block atomic="false" info="">
[20:44:56.642]      __var nReset = 0x80;
[20:44:56.642]        // -> [nReset <= 0x00000080]
[20:44:56.643]      __var canReadPins = 0;
[20:44:56.643]        // -> [canReadPins <= 0x00000000]
[20:44:56.643]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:44:56.645]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:44:56.645]        // -> [canReadPins <= 0x00000001]
[20:44:56.645]    </block>
[20:44:56.645]    <control if="" while="1" timeout="200" info="">
[20:44:56.645]      // while "1"  (timeout="200")
[20:44:56.645]      // while-condition  =>  TRUE
[20:44:56.645]      // while "1"  (timeout="200")
[20:44:56.645]      // while-condition  =>  TRUE
[20:44:56.645]      // while "1"  (timeout="200")
[20:44:56.645]      // while-condition  =>  TRUE
[20:44:56.645]      // while "1"  (timeout="200")
[20:44:56.645]      // while-condition  =>  TRUE
[20:44:56.645]      // while "1"  (timeout="200")
[20:44:56.645]      // while-condition  =>  TRUE
[20:44:56.646]      // while "1"  (timeout="200")
[20:44:56.646]      // while-condition  =>  TRUE
[20:44:56.646]      // while "1"  (timeout="200")
[20:44:56.646]      // while-condition  =>  TRUE
[20:44:56.646]      // while "1"  (timeout="200")
[20:44:56.646]      // while-condition  =>  TRUE
[20:44:56.646]      // while "1"  (timeout="200")
[20:44:56.646]      // while-condition  =>  TRUE
[20:44:56.646]      // while "1"  (timeout="200")
[20:44:56.646]      // while-condition  =>  TRUE
[20:44:56.646]      // while "1"  (timeout="200")
[20:44:56.646]      // while-condition  =>  TRUE
[20:44:56.646]      // while "1"  (timeout="200")
[20:44:56.646]      // while-condition  =>  TRUE
[20:44:56.646]      // while "1"  (timeout="200")
[20:44:56.646]      // while-condition  =>  TRUE
[20:44:56.646]      // while "1"  (timeout="200")
[20:44:56.648]      // while-condition  =>  TRUE
[20:44:56.648]      // while "1"  (timeout="200")
[20:44:56.648]      // while-condition  =>  TRUE
[20:44:56.648]      // while "1"  (timeout="200")
[20:44:56.648]      // while-condition  =>  TRUE
[20:44:56.648]      // while "1"  (timeout="200")
[20:44:56.648]      // while-condition  =>  TRUE
[20:44:56.648]      // while "1"  (timeout="200")
[20:44:56.648]      // while-condition  =>  TRUE
[20:44:56.648]      // while "1"  (timeout="200")
[20:44:56.648]      // while-condition  =>  TRUE
[20:44:56.648]      // while "1"  (timeout="200")
[20:44:56.648]      // while-condition  =>  TRUE
[20:44:56.648]      // while "1"  (timeout="200")
[20:44:56.648]      // while-condition  =>  TRUE
[20:44:56.648]      // while "1"  (timeout="200")
[20:44:56.650]      // while-condition  =>  TRUE
[20:44:56.650]      // while "1"  (timeout="200")
[20:44:56.650]      // while-condition  =>  TRUE
[20:44:56.650]      // while "1"  (timeout="200")
[20:44:56.650]      // while-condition  =>  TRUE
[20:44:56.650]      // while "1"  (timeout="200")
[20:44:56.650]      // while-condition  =>  TRUE
[20:44:56.650]      // while "1"  (timeout="200")
[20:44:56.650]      // while-condition  =>  TRUE
[20:44:56.650]      // while "1"  (timeout="200")
[20:44:56.650]      // while-condition  =>  TRUE
[20:44:56.652]      // while "1"  (timeout="200")
[20:44:56.652]      // while-condition  =>  TRUE
[20:44:56.652]      // while "1"  (timeout="200")
[20:44:56.652]      // while-condition  =>  TRUE
[20:44:56.652]      // while "1"  (timeout="200")
[20:44:56.652]      // while-condition  =>  TRUE
[20:44:56.652]      // while "1"  (timeout="200")
[20:44:56.652]      // while-condition  =>  TRUE
[20:44:56.652]      // while "1"  (timeout="200")
[20:44:56.652]      // while-condition  =>  TRUE
[20:44:56.652]      // while "1"  (timeout="200")
[20:44:56.653]      // while-condition  =>  TRUE
[20:44:56.653]      // while "1"  (timeout="200")
[20:44:56.653]      // while-condition  =>  TRUE
[20:44:56.653]      // while "1"  (timeout="200")
[20:44:56.653]      // while-condition  =>  TRUE
[20:44:56.653]      // while "1"  (timeout="200")
[20:44:56.653]      // while-condition  =>  TRUE
[20:44:56.653]      // while "1"  (timeout="200")
[20:44:56.653]      // while-condition  =>  TRUE
[20:44:56.653]      // while "1"  (timeout="200")
[20:44:56.653]      // while-condition  =>  TRUE
[20:44:56.653]      // while "1"  (timeout="200")
[20:44:56.654]      // while-condition  =>  TRUE
[20:44:56.654]      // while "1"  (timeout="200")
[20:44:56.654]      // while-condition  =>  TRUE
[20:44:56.654]      // while "1"  (timeout="200")
[20:44:56.654]      // while-condition  =>  TRUE
[20:44:56.654]      // while "1"  (timeout="200")
[20:44:56.654]      // while-condition  =>  TRUE
[20:44:56.654]      // while "1"  (timeout="200")
[20:44:56.654]      // while-condition  =>  TRUE
[20:44:56.654]      // while "1"  (timeout="200")
[20:44:56.654]      // while-condition  =>  TRUE
[20:44:56.654]      // while "1"  (timeout="200")
[20:44:56.654]      // while-condition  =>  TRUE
[20:44:56.655]      // while "1"  (timeout="200")
[20:44:56.655]      // while-condition  =>  TRUE
[20:44:56.655]      // while "1"  (timeout="200")
[20:44:56.655]      // while-condition  =>  TRUE
[20:44:56.655]      // while "1"  (timeout="200")
[20:44:56.655]      // while-condition  =>  TRUE
[20:44:56.655]      // while "1"  (timeout="200")
[20:44:56.655]      // while-condition  =>  TRUE
[20:44:56.655]      // while "1"  (timeout="200")
[20:44:56.655]      // while-condition  =>  TRUE
[20:44:56.656]      // while "1"  (timeout="200")
[20:44:56.656]      // while-condition  =>  TRUE
[20:44:56.656]      // while "1"  (timeout="200")
[20:44:56.656]      // while-condition  =>  TRUE
[20:44:56.656]      // while "1"  (timeout="200")
[20:44:56.656]      // while-condition  =>  TRUE
[20:44:56.656]      // while "1"  (timeout="200")
[20:44:56.656]      // while-condition  =>  TRUE
[20:44:56.656]      // while "1"  (timeout="200")
[20:44:56.656]      // while-condition  =>  TRUE
[20:44:56.656]      // while "1"  (timeout="200")
[20:44:56.656]      // while-condition  =>  TRUE
[20:44:56.658]      // while "1"  (timeout="200")
[20:44:56.658]      // while-condition  =>  TRUE
[20:44:56.658]      // while "1"  (timeout="200")
[20:44:56.658]      // while-condition  =>  TRUE
[20:44:56.658]      // while "1"  (timeout="200")
[20:44:56.658]      // while-condition  =>  TRUE
[20:44:56.658]      // while "1"  (timeout="200")
[20:44:56.658]      // while-condition  =>  TRUE
[20:44:56.658]      // while "1"  (timeout="200")
[20:44:56.658]      // while-condition  =>  TRUE
[20:44:56.658]      // while "1"  (timeout="200")
[20:44:56.658]      // while-condition  =>  TRUE
[20:44:56.659]      // while "1"  (timeout="200")
[20:44:56.659]      // while  =>  TIMEOUT
[20:44:56.660]      // end while "1"
[20:44:56.660]    </control>
[20:44:56.660]    <control if="canReadPins" while="" timeout="0" info="">
[20:44:56.660]      // if-block "canReadPins"
[20:44:56.660]        // =>  TRUE
[20:44:56.660]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:44:56.660]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:44:56.661]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:44:56.661]        // while-condition  =>  FALSE
[20:44:56.661]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:44:56.661]      </control>
[20:44:56.661]      // end if-block "canReadPins"
[20:44:56.661]    </control>
[20:44:56.661]    <control if="!canReadPins" while="" timeout="0" info="">
[20:44:56.661]      // if-block "!canReadPins"
[20:44:56.663]        // =>  FALSE
[20:44:56.663]      // skip if-block "!canReadPins"
[20:44:56.663]    </control>
[20:44:56.663]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:44:56.663]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:44:56.663]        // =>  TRUE
[20:44:56.663]      <block atomic="false" info="">
[20:44:56.663]        WriteAP(0x00, 0x190008);
[20:44:56.665]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:44:56.665]        WriteAP(0xF0, 0x01);
[20:44:56.668]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:44:56.668]      </block>
[20:44:56.668]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:44:56.668]    </control>
[20:44:56.668]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:44:56.668]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:44:56.668]        // =>  FALSE
[20:44:56.668]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:44:56.668]    </control>
[20:44:56.668]    <block atomic="false" info="">
[20:44:56.668]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:44:56.676]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:44:56.679]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:44:56.679]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:44:56.680]      __ap = 0; //lets make sure we reset the access point selection
[20:44:56.680]        // -> [__ap <= 0x00000000]
[20:44:56.680]    </block>
[20:44:56.680]  </sequence>
[20:44:56.680]  
[20:44:56.696]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:44:56.696]  
[20:44:56.696]  <debugvars>
[20:44:56.696]    // Pre-defined
[20:44:56.696]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:44:56.696]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:44:56.696]    __dp=0x00000000
[20:44:56.696]    __ap=0x00000000
[20:44:56.696]    __traceout=0x00000000      (Trace Disabled)
[20:44:56.696]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:44:56.696]    __FlashAddr=0x00000000
[20:44:56.696]    __FlashLen=0x00000000
[20:44:56.696]    __FlashArg=0x00000000
[20:44:56.696]    __FlashOp=0x00000000
[20:44:56.696]    __Result=0x00000000
[20:44:56.696]  </debugvars>
[20:44:56.696]  
[20:44:56.696]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:44:56.702]    <block atomic="false" info="">
[20:44:56.702]      __var deviceID = 0;
[20:44:56.702]        // -> [deviceID <= 0x00000000]
[20:44:56.702]      __var version = 0;
[20:44:56.702]        // -> [version <= 0x00000000]
[20:44:56.702]      __var partNum = 0;
[20:44:56.702]        // -> [partNum <= 0x00000000]
[20:44:56.702]      __var manuf = 0;
[20:44:56.702]        // -> [manuf <= 0x00000000]
[20:44:56.702]      __var isMSPM0G1X0X_G3X0X = 0;
[20:44:56.702]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:44:56.702]      __var isProduction = 0;
[20:44:56.702]        // -> [isProduction <= 0x00000000]
[20:44:56.702]      __var continueId = 0;
[20:44:56.702]        // -> [continueId <= 0x00000000]
[20:44:56.702]      deviceID =   Read32(0x41C40004);
[20:44:56.706]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:44:56.706]        // -> [deviceID <= 0x2BB8802F]
[20:44:56.706]      version = deviceID >> 28;
[20:44:56.708]        // -> [version <= 0x00000002]
[20:44:56.708]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:44:56.708]        // -> [partNum <= 0x0000BB88]
[20:44:56.708]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:44:56.708]        // -> [manuf <= 0x00000017]
[20:44:56.709]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:44:56.709]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:44:56.709]      isProduction = (version > 0);
[20:44:56.709]        // -> [isProduction <= 0x00000001]
[20:44:56.709]    </block>
[20:44:56.709]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:44:56.709]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:44:56.709]        // =>  FALSE
[20:44:56.709]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:44:56.709]    </control>
[20:44:56.709]    <control if="continueId == 4" while="" timeout="0" info="">
[20:44:56.709]      // if-block "continueId == 4"
[20:44:56.709]        // =>  FALSE
[20:44:56.709]      // skip if-block "continueId == 4"
[20:44:56.709]    </control>
[20:44:56.709]    <control if="!isProduction" while="" timeout="0" info="">
[20:44:56.709]      // if-block "!isProduction"
[20:44:56.709]        // =>  FALSE
[20:44:56.709]      // skip if-block "!isProduction"
[20:44:56.709]    </control>
[20:44:56.709]  </sequence>
[20:44:56.711]  
[20:45:02.293]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:45:02.293]  
[20:45:02.309]  <debugvars>
[20:45:02.309]    // Pre-defined
[20:45:02.309]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:45:02.309]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:45:02.309]    __dp=0x00000000
[20:45:02.309]    __ap=0x00000000
[20:45:02.309]    __traceout=0x00000000      (Trace Disabled)
[20:45:02.309]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:45:02.309]    __FlashAddr=0x00000000
[20:45:02.309]    __FlashLen=0x00000000
[20:45:02.309]    __FlashArg=0x00000000
[20:45:02.309]    __FlashOp=0x00000000
[20:45:02.309]    __Result=0x00000000
[20:45:02.309]  </debugvars>
[20:45:02.309]  
[20:45:02.309]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:45:02.309]    <block atomic="false" info="">
[20:45:02.309]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:45:02.309]        // -> [isSWJ <= 0x00000001]
[20:45:02.309]      __var hasDormant = __protocol & 0x00020000;
[20:45:02.309]        // -> [hasDormant <= 0x00000000]
[20:45:02.309]      __var protType   = __protocol & 0x0000FFFF;
[20:45:02.309]        // -> [protType <= 0x00000002]
[20:45:02.309]    </block>
[20:45:02.309]    <control if="protType == 1" while="" timeout="0" info="">
[20:45:02.309]      // if-block "protType == 1"
[20:45:02.309]        // =>  FALSE
[20:45:02.309]      // skip if-block "protType == 1"
[20:45:02.309]    </control>
[20:45:02.309]    <control if="protType == 2" while="" timeout="0" info="">
[20:45:02.309]      // if-block "protType == 2"
[20:45:02.309]        // =>  TRUE
[20:45:02.309]      <control if="isSWJ" while="" timeout="0" info="">
[20:45:02.309]        // if-block "isSWJ"
[20:45:02.309]          // =>  TRUE
[20:45:02.309]        <control if="hasDormant" while="" timeout="0" info="">
[20:45:02.309]          // if-block "hasDormant"
[20:45:02.309]            // =>  FALSE
[20:45:02.309]          // skip if-block "hasDormant"
[20:45:02.309]        </control>
[20:45:02.309]        <control if="!hasDormant" while="" timeout="0" info="">
[20:45:02.309]          // if-block "!hasDormant"
[20:45:02.309]            // =>  TRUE
[20:45:02.309]          <block atomic="false" info="">
[20:45:02.309]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:45:02.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:45:02.314]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:45:02.314]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:45:02.314]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:45:02.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:45:02.314]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:45:02.314]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:45:02.314]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:45:02.326]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:45:02.326]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:45:02.326]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:45:02.326]          </block>
[20:45:02.326]          // end if-block "!hasDormant"
[20:45:02.326]        </control>
[20:45:02.326]        // end if-block "isSWJ"
[20:45:02.326]      </control>
[20:45:02.326]      <control if="!isSWJ" while="" timeout="0" info="">
[20:45:02.326]        // if-block "!isSWJ"
[20:45:02.326]          // =>  FALSE
[20:45:02.326]        // skip if-block "!isSWJ"
[20:45:02.326]      </control>
[20:45:02.326]      <block atomic="false" info="">
[20:45:02.334]        ReadDP(0x0);
[20:45:02.334]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:45:02.334]      </block>
[20:45:02.334]      // end if-block "protType == 2"
[20:45:02.334]    </control>
[20:45:02.334]  </sequence>
[20:45:02.334]  
[20:45:02.334]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:45:02.334]  
[20:45:02.334]  <debugvars>
[20:45:02.334]    // Pre-defined
[20:45:02.334]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:45:02.334]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:45:02.334]    __dp=0x00000000
[20:45:02.334]    __ap=0x00000000
[20:45:02.334]    __traceout=0x00000000      (Trace Disabled)
[20:45:02.334]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:45:02.334]    __FlashAddr=0x00000000
[20:45:02.334]    __FlashLen=0x00000000
[20:45:02.334]    __FlashArg=0x00000000
[20:45:02.334]    __FlashOp=0x00000000
[20:45:02.334]    __Result=0x00000000
[20:45:02.334]  </debugvars>
[20:45:02.334]  
[20:45:02.334]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:45:02.334]    <block atomic="false" info="">
[20:45:02.334]      __var SW_DP_ABORT       = 0x0;
[20:45:02.334]        // -> [SW_DP_ABORT <= 0x00000000]
[20:45:02.334]      __var DP_CTRL_STAT      = 0x4;
[20:45:02.334]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:45:02.334]      __var DP_SELECT         = 0x8;
[20:45:02.334]        // -> [DP_SELECT <= 0x00000008]
[20:45:02.334]      __var powered_down      = 0;
[20:45:02.334]        // -> [powered_down <= 0x00000000]
[20:45:02.334]      WriteDP(DP_SELECT, 0x00000000);
[20:45:02.344]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:45:02.344]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:45:02.344]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:45:02.344]        // -> [powered_down <= 0x00000001]
[20:45:02.344]    </block>
[20:45:02.344]    <control if="powered_down" while="" timeout="0" info="">
[20:45:02.344]      // if-block "powered_down"
[20:45:02.344]        // =>  TRUE
[20:45:02.344]      <block atomic="false" info="">
[20:45:02.344]        Message(0, "Debug/System power-up request sent");
[20:45:02.344]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:45:02.354]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:45:02.354]      </block>
[20:45:02.354]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:45:02.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:45:02.364]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:45:02.364]        // while-condition  =>  FALSE
[20:45:02.364]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:45:02.364]      </control>
[20:45:02.364]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:45:02.364]        // if-block "(__protocol & 0xFFFF) == 1"
[20:45:02.364]          // =>  FALSE
[20:45:02.364]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:45:02.364]      </control>
[20:45:02.364]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:45:02.364]        // if-block "(__protocol & 0xFFFF) == 2"
[20:45:02.364]          // =>  TRUE
[20:45:02.364]        <block atomic="false" info="">
[20:45:02.364]          Message(0, "executing SWD power up");
[20:45:02.364]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:45:02.374]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:45:02.374]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:45:02.374]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:45:02.374]        </block>
[20:45:02.374]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:45:02.374]      </control>
[20:45:02.374]      // end if-block "powered_down"
[20:45:02.374]    </control>
[20:45:02.374]    <block atomic="false" info="">
[20:45:02.374]      __var DEBUG_PORT_VAL    = 0;
[20:45:02.374]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:45:02.374]      __var ACCESS_POINT_VAL  = 0;
[20:45:02.374]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:45:02.374]      __ap = 1; 
[20:45:02.374]        // -> [__ap <= 0x00000001]
[20:45:02.374]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:45:02.394]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:45:02.394]      __ap = 4;
[20:45:02.394]        // -> [__ap <= 0x00000004]
[20:45:02.394]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:45:02.394]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:45:02.394]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:45:02.394]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:45:02.404]    </block>
[20:45:02.404]    <block atomic="false" info="">
[20:45:02.404]      __var nReset = 0x80;
[20:45:02.404]        // -> [nReset <= 0x00000080]
[20:45:02.404]      __var canReadPins = 0;
[20:45:02.404]        // -> [canReadPins <= 0x00000000]
[20:45:02.404]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:45:02.404]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:45:02.404]        // -> [canReadPins <= 0x00000001]
[20:45:02.404]    </block>
[20:45:02.404]    <control if="" while="1" timeout="200" info="">
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.404]      // while "1"  (timeout="200")
[20:45:02.404]      // while-condition  =>  TRUE
[20:45:02.414]      // while "1"  (timeout="200")
[20:45:02.414]      // while  =>  TIMEOUT
[20:45:02.414]      // end while "1"
[20:45:02.414]    </control>
[20:45:02.414]    <control if="canReadPins" while="" timeout="0" info="">
[20:45:02.414]      // if-block "canReadPins"
[20:45:02.414]        // =>  TRUE
[20:45:02.414]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:45:02.414]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:45:02.414]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:45:02.414]        // while-condition  =>  FALSE
[20:45:02.414]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:45:02.414]      </control>
[20:45:02.414]      // end if-block "canReadPins"
[20:45:02.414]    </control>
[20:45:02.414]    <control if="!canReadPins" while="" timeout="0" info="">
[20:45:02.414]      // if-block "!canReadPins"
[20:45:02.414]        // =>  FALSE
[20:45:02.414]      // skip if-block "!canReadPins"
[20:45:02.414]    </control>
[20:45:02.414]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:45:02.414]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:45:02.414]        // =>  TRUE
[20:45:02.414]      <block atomic="false" info="">
[20:45:02.414]        WriteAP(0x00, 0x190008);
[20:45:02.424]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:45:02.424]        WriteAP(0xF0, 0x01);
[20:45:02.424]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:45:02.424]      </block>
[20:45:02.424]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:45:02.424]    </control>
[20:45:02.424]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:45:02.424]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:45:02.424]        // =>  FALSE
[20:45:02.424]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:45:02.424]    </control>
[20:45:02.424]    <block atomic="false" info="">
[20:45:02.424]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:45:02.434]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:45:02.434]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:45:02.434]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:45:02.434]      __ap = 0; //lets make sure we reset the access point selection
[20:45:02.434]        // -> [__ap <= 0x00000000]
[20:45:02.434]    </block>
[20:45:02.434]  </sequence>
[20:45:02.434]  
[20:45:02.482]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:45:02.482]  
[20:45:02.482]  <debugvars>
[20:45:02.483]    // Pre-defined
[20:45:02.483]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:45:02.483]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:45:02.483]    __dp=0x00000000
[20:45:02.483]    __ap=0x00000000
[20:45:02.483]    __traceout=0x00000000      (Trace Disabled)
[20:45:02.483]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:45:02.484]    __FlashAddr=0x00000000
[20:45:02.484]    __FlashLen=0x00000000
[20:45:02.484]    __FlashArg=0x00000000
[20:45:02.484]    __FlashOp=0x00000000
[20:45:02.484]    __Result=0x00000000
[20:45:02.484]  </debugvars>
[20:45:02.484]  
[20:45:02.484]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:45:02.484]    <block atomic="false" info="">
[20:45:02.484]      __var deviceID = 0;
[20:45:02.484]        // -> [deviceID <= 0x00000000]
[20:45:02.485]      __var version = 0;
[20:45:02.485]        // -> [version <= 0x00000000]
[20:45:02.485]      __var partNum = 0;
[20:45:02.485]        // -> [partNum <= 0x00000000]
[20:45:02.485]      __var manuf = 0;
[20:45:02.485]        // -> [manuf <= 0x00000000]
[20:45:02.485]      __var isMSPM0G1X0X_G3X0X = 0;
[20:45:02.485]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:45:02.485]      __var isProduction = 0;
[20:45:02.485]        // -> [isProduction <= 0x00000000]
[20:45:02.485]      __var continueId = 0;
[20:45:02.486]        // -> [continueId <= 0x00000000]
[20:45:02.486]      deviceID =   Read32(0x41C40004);
[20:45:02.494]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:45:02.494]        // -> [deviceID <= 0x2BB8802F]
[20:45:02.494]      version = deviceID >> 28;
[20:45:02.494]        // -> [version <= 0x00000002]
[20:45:02.494]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:45:02.494]        // -> [partNum <= 0x0000BB88]
[20:45:02.494]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:45:02.494]        // -> [manuf <= 0x00000017]
[20:45:02.494]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:45:02.494]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:45:02.494]      isProduction = (version > 0);
[20:45:02.494]        // -> [isProduction <= 0x00000001]
[20:45:02.494]    </block>
[20:45:02.494]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:45:02.494]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:45:02.494]        // =>  FALSE
[20:45:02.494]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:45:02.494]    </control>
[20:45:02.494]    <control if="continueId == 4" while="" timeout="0" info="">
[20:45:02.494]      // if-block "continueId == 4"
[20:45:02.494]        // =>  FALSE
[20:45:02.494]      // skip if-block "continueId == 4"
[20:45:02.494]    </control>
[20:45:02.494]    <control if="!isProduction" while="" timeout="0" info="">
[20:45:02.494]      // if-block "!isProduction"
[20:45:02.494]        // =>  FALSE
[20:45:02.494]      // skip if-block "!isProduction"
[20:45:02.494]    </control>
[20:45:02.494]  </sequence>
[20:45:02.494]  
[20:45:55.138]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:45:55.138]  
[20:45:55.138]  <debugvars>
[20:45:55.138]    // Pre-defined
[20:45:55.138]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:45:55.138]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:45:55.138]    __dp=0x00000000
[20:45:55.138]    __ap=0x00000000
[20:45:55.138]    __traceout=0x00000000      (Trace Disabled)
[20:45:55.138]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:45:55.138]    __FlashAddr=0x00000000
[20:45:55.138]    __FlashLen=0x00000000
[20:45:55.138]    __FlashArg=0x00000000
[20:45:55.138]    __FlashOp=0x00000000
[20:45:55.138]    __Result=0x00000000
[20:45:55.138]  </debugvars>
[20:45:55.138]  
[20:45:55.138]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:45:55.138]    <block atomic="false" info="">
[20:45:55.138]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:45:55.138]        // -> [isSWJ <= 0x00000001]
[20:45:55.138]      __var hasDormant = __protocol & 0x00020000;
[20:45:55.138]        // -> [hasDormant <= 0x00000000]
[20:45:55.138]      __var protType   = __protocol & 0x0000FFFF;
[20:45:55.138]        // -> [protType <= 0x00000002]
[20:45:55.138]    </block>
[20:45:55.138]    <control if="protType == 1" while="" timeout="0" info="">
[20:45:55.138]      // if-block "protType == 1"
[20:45:55.138]        // =>  FALSE
[20:45:55.138]      // skip if-block "protType == 1"
[20:45:55.138]    </control>
[20:45:55.138]    <control if="protType == 2" while="" timeout="0" info="">
[20:45:55.138]      // if-block "protType == 2"
[20:45:55.138]        // =>  TRUE
[20:45:55.138]      <control if="isSWJ" while="" timeout="0" info="">
[20:45:55.138]        // if-block "isSWJ"
[20:45:55.138]          // =>  TRUE
[20:45:55.142]        <control if="hasDormant" while="" timeout="0" info="">
[20:45:55.142]          // if-block "hasDormant"
[20:45:55.142]            // =>  FALSE
[20:45:55.142]          // skip if-block "hasDormant"
[20:45:55.142]        </control>
[20:45:55.142]        <control if="!hasDormant" while="" timeout="0" info="">
[20:45:55.142]          // if-block "!hasDormant"
[20:45:55.142]            // =>  TRUE
[20:45:55.142]          <block atomic="false" info="">
[20:45:55.142]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:45:55.142]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:45:55.142]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:45:55.145]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:45:55.145]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:45:55.147]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:45:55.147]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:45:55.147]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:45:55.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:45:55.147]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:45:55.147]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:45:55.152]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:45:55.152]          </block>
[20:45:55.152]          // end if-block "!hasDormant"
[20:45:55.152]        </control>
[20:45:55.152]        // end if-block "isSWJ"
[20:45:55.152]      </control>
[20:45:55.152]      <control if="!isSWJ" while="" timeout="0" info="">
[20:45:55.152]        // if-block "!isSWJ"
[20:45:55.152]          // =>  FALSE
[20:45:55.152]        // skip if-block "!isSWJ"
[20:45:55.152]      </control>
[20:45:55.152]      <block atomic="false" info="">
[20:45:55.152]        ReadDP(0x0);
[20:45:55.155]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:45:55.155]      </block>
[20:45:55.155]      // end if-block "protType == 2"
[20:45:55.155]    </control>
[20:45:55.155]  </sequence>
[20:45:55.155]  
[20:45:55.157]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:45:55.157]  
[20:45:55.157]  <debugvars>
[20:45:55.157]    // Pre-defined
[20:45:55.157]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:45:55.157]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:45:55.157]    __dp=0x00000000
[20:45:55.157]    __ap=0x00000000
[20:45:55.157]    __traceout=0x00000000      (Trace Disabled)
[20:45:55.157]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:45:55.157]    __FlashAddr=0x00000000
[20:45:55.157]    __FlashLen=0x00000000
[20:45:55.157]    __FlashArg=0x00000000
[20:45:55.157]    __FlashOp=0x00000000
[20:45:55.157]    __Result=0x00000000
[20:45:55.157]  </debugvars>
[20:45:55.157]  
[20:45:55.157]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:45:55.157]    <block atomic="false" info="">
[20:45:55.157]      __var SW_DP_ABORT       = 0x0;
[20:45:55.157]        // -> [SW_DP_ABORT <= 0x00000000]
[20:45:55.157]      __var DP_CTRL_STAT      = 0x4;
[20:45:55.157]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:45:55.157]      __var DP_SELECT         = 0x8;
[20:45:55.157]        // -> [DP_SELECT <= 0x00000008]
[20:45:55.157]      __var powered_down      = 0;
[20:45:55.157]        // -> [powered_down <= 0x00000000]
[20:45:55.157]      WriteDP(DP_SELECT, 0x00000000);
[20:45:55.166]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:45:55.166]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:45:55.172]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:45:55.172]        // -> [powered_down <= 0x00000001]
[20:45:55.172]    </block>
[20:45:55.172]    <control if="powered_down" while="" timeout="0" info="">
[20:45:55.172]      // if-block "powered_down"
[20:45:55.172]        // =>  TRUE
[20:45:55.172]      <block atomic="false" info="">
[20:45:55.172]        Message(0, "Debug/System power-up request sent");
[20:45:55.179]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:45:55.179]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:45:55.179]      </block>
[20:45:55.179]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:45:55.179]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:45:55.182]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:45:55.182]        // while-condition  =>  FALSE
[20:45:55.182]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:45:55.182]      </control>
[20:45:55.182]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:45:55.182]        // if-block "(__protocol & 0xFFFF) == 1"
[20:45:55.182]          // =>  FALSE
[20:45:55.182]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:45:55.182]      </control>
[20:45:55.184]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:45:55.184]        // if-block "(__protocol & 0xFFFF) == 2"
[20:45:55.184]          // =>  TRUE
[20:45:55.184]        <block atomic="false" info="">
[20:45:55.184]          Message(0, "executing SWD power up");
[20:45:55.185]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:45:55.188]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:45:55.188]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:45:55.188]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:45:55.188]        </block>
[20:45:55.188]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:45:55.188]      </control>
[20:45:55.188]      // end if-block "powered_down"
[20:45:55.188]    </control>
[20:45:55.188]    <block atomic="false" info="">
[20:45:55.188]      __var DEBUG_PORT_VAL    = 0;
[20:45:55.188]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:45:55.188]      __var ACCESS_POINT_VAL  = 0;
[20:45:55.188]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:45:55.188]      __ap = 1; 
[20:45:55.188]        // -> [__ap <= 0x00000001]
[20:45:55.188]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:45:55.192]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:45:55.192]      __ap = 4;
[20:45:55.192]        // -> [__ap <= 0x00000004]
[20:45:55.192]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:45:55.197]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:45:55.197]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:45:55.197]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:45:55.199]    </block>
[20:45:55.199]    <block atomic="false" info="">
[20:45:55.199]      __var nReset = 0x80;
[20:45:55.199]        // -> [nReset <= 0x00000080]
[20:45:55.201]      __var canReadPins = 0;
[20:45:55.201]        // -> [canReadPins <= 0x00000000]
[20:45:55.201]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:45:55.202]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:45:55.202]        // -> [canReadPins <= 0x00000001]
[20:45:55.202]    </block>
[20:45:55.202]    <control if="" while="1" timeout="200" info="">
[20:45:55.202]      // while "1"  (timeout="200")
[20:45:55.202]      // while-condition  =>  TRUE
[20:45:55.202]      // while "1"  (timeout="200")
[20:45:55.202]      // while-condition  =>  TRUE
[20:45:55.202]      // while "1"  (timeout="200")
[20:45:55.202]      // while-condition  =>  TRUE
[20:45:55.202]      // while "1"  (timeout="200")
[20:45:55.202]      // while-condition  =>  TRUE
[20:45:55.202]      // while "1"  (timeout="200")
[20:45:55.202]      // while-condition  =>  TRUE
[20:45:55.204]      // while "1"  (timeout="200")
[20:45:55.204]      // while-condition  =>  TRUE
[20:45:55.204]      // while "1"  (timeout="200")
[20:45:55.204]      // while-condition  =>  TRUE
[20:45:55.204]      // while "1"  (timeout="200")
[20:45:55.204]      // while-condition  =>  TRUE
[20:45:55.204]      // while "1"  (timeout="200")
[20:45:55.204]      // while-condition  =>  TRUE
[20:45:55.204]      // while "1"  (timeout="200")
[20:45:55.204]      // while-condition  =>  TRUE
[20:45:55.204]      // while "1"  (timeout="200")
[20:45:55.204]      // while-condition  =>  TRUE
[20:45:55.204]      // while "1"  (timeout="200")
[20:45:55.204]      // while-condition  =>  TRUE
[20:45:55.204]      // while "1"  (timeout="200")
[20:45:55.204]      // while-condition  =>  TRUE
[20:45:55.204]      // while "1"  (timeout="200")
[20:45:55.204]      // while-condition  =>  TRUE
[20:45:55.204]      // while "1"  (timeout="200")
[20:45:55.204]      // while-condition  =>  TRUE
[20:45:55.204]      // while "1"  (timeout="200")
[20:45:55.204]      // while-condition  =>  TRUE
[20:45:55.204]      // while "1"  (timeout="200")
[20:45:55.206]      // while-condition  =>  TRUE
[20:45:55.206]      // while "1"  (timeout="200")
[20:45:55.206]      // while  =>  TIMEOUT
[20:45:55.207]      // end while "1"
[20:45:55.207]    </control>
[20:45:55.207]    <control if="canReadPins" while="" timeout="0" info="">
[20:45:55.207]      // if-block "canReadPins"
[20:45:55.207]        // =>  TRUE
[20:45:55.207]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:45:55.207]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:45:55.207]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:45:55.207]        // while-condition  =>  FALSE
[20:45:55.209]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:45:55.209]      </control>
[20:45:55.209]      // end if-block "canReadPins"
[20:45:55.209]    </control>
[20:45:55.209]    <control if="!canReadPins" while="" timeout="0" info="">
[20:45:55.209]      // if-block "!canReadPins"
[20:45:55.209]        // =>  FALSE
[20:45:55.209]      // skip if-block "!canReadPins"
[20:45:55.209]    </control>
[20:45:55.209]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:45:55.209]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:45:55.209]        // =>  TRUE
[20:45:55.209]      <block atomic="false" info="">
[20:45:55.209]        WriteAP(0x00, 0x190008);
[20:45:55.211]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:45:55.211]        WriteAP(0xF0, 0x01);
[20:45:55.215]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:45:55.215]      </block>
[20:45:55.215]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:45:55.215]    </control>
[20:45:55.215]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:45:55.215]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:45:55.215]        // =>  FALSE
[20:45:55.215]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:45:55.215]    </control>
[20:45:55.215]    <block atomic="false" info="">
[20:45:55.215]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:45:55.219]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:45:55.219]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:45:55.219]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:45:55.222]      __ap = 0; //lets make sure we reset the access point selection
[20:45:55.222]        // -> [__ap <= 0x00000000]
[20:45:55.222]    </block>
[20:45:55.222]  </sequence>
[20:45:55.222]  
[20:45:55.244]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:45:55.244]  
[20:45:55.244]  <debugvars>
[20:45:55.244]    // Pre-defined
[20:45:55.244]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:45:55.244]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:45:55.244]    __dp=0x00000000
[20:45:55.244]    __ap=0x00000000
[20:45:55.244]    __traceout=0x00000000      (Trace Disabled)
[20:45:55.244]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:45:55.244]    __FlashAddr=0x00000000
[20:45:55.244]    __FlashLen=0x00000000
[20:45:55.244]    __FlashArg=0x00000000
[20:45:55.244]    __FlashOp=0x00000000
[20:45:55.244]    __Result=0x00000000
[20:45:55.244]  </debugvars>
[20:45:55.244]  
[20:45:55.248]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:45:55.248]    <block atomic="false" info="">
[20:45:55.248]      __var deviceID = 0;
[20:45:55.248]        // -> [deviceID <= 0x00000000]
[20:45:55.248]      __var version = 0;
[20:45:55.248]        // -> [version <= 0x00000000]
[20:45:55.248]      __var partNum = 0;
[20:45:55.248]        // -> [partNum <= 0x00000000]
[20:45:55.248]      __var manuf = 0;
[20:45:55.248]        // -> [manuf <= 0x00000000]
[20:45:55.248]      __var isMSPM0G1X0X_G3X0X = 0;
[20:45:55.248]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:45:55.249]      __var isProduction = 0;
[20:45:55.249]        // -> [isProduction <= 0x00000000]
[20:45:55.249]      __var continueId = 0;
[20:45:55.249]        // -> [continueId <= 0x00000000]
[20:45:55.249]      deviceID =   Read32(0x41C40004);
[20:45:55.252]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:45:55.252]        // -> [deviceID <= 0x2BB8802F]
[20:45:55.252]      version = deviceID >> 28;
[20:45:55.252]        // -> [version <= 0x00000002]
[20:45:55.252]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:45:55.252]        // -> [partNum <= 0x0000BB88]
[20:45:55.252]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:45:55.252]        // -> [manuf <= 0x00000017]
[20:45:55.252]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:45:55.252]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:45:55.252]      isProduction = (version > 0);
[20:45:55.252]        // -> [isProduction <= 0x00000001]
[20:45:55.252]    </block>
[20:45:55.252]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:45:55.252]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:45:55.252]        // =>  FALSE
[20:45:55.252]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:45:55.252]    </control>
[20:45:55.252]    <control if="continueId == 4" while="" timeout="0" info="">
[20:45:55.252]      // if-block "continueId == 4"
[20:45:55.252]        // =>  FALSE
[20:45:55.252]      // skip if-block "continueId == 4"
[20:45:55.252]    </control>
[20:45:55.252]    <control if="!isProduction" while="" timeout="0" info="">
[20:45:55.252]      // if-block "!isProduction"
[20:45:55.258]        // =>  FALSE
[20:45:55.258]      // skip if-block "!isProduction"
[20:45:55.258]    </control>
[20:45:55.258]  </sequence>
[20:45:55.258]  
[20:50:22.377]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:50:22.377]  
[20:50:22.377]  <debugvars>
[20:50:22.377]    // Pre-defined
[20:50:22.377]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:22.377]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:22.377]    __dp=0x00000000
[20:50:22.377]    __ap=0x00000000
[20:50:22.377]    __traceout=0x00000000      (Trace Disabled)
[20:50:22.377]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:22.377]    __FlashAddr=0x00000000
[20:50:22.377]    __FlashLen=0x00000000
[20:50:22.377]    __FlashArg=0x00000000
[20:50:22.377]    __FlashOp=0x00000000
[20:50:22.377]    __Result=0x00000000
[20:50:22.377]  </debugvars>
[20:50:22.377]  
[20:50:22.377]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:50:22.377]    <block atomic="false" info="">
[20:50:22.377]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:50:22.377]        // -> [isSWJ <= 0x00000001]
[20:50:22.377]      __var hasDormant = __protocol & 0x00020000;
[20:50:22.377]        // -> [hasDormant <= 0x00000000]
[20:50:22.377]      __var protType   = __protocol & 0x0000FFFF;
[20:50:22.377]        // -> [protType <= 0x00000002]
[20:50:22.377]    </block>
[20:50:22.377]    <control if="protType == 1" while="" timeout="0" info="">
[20:50:22.377]      // if-block "protType == 1"
[20:50:22.377]        // =>  FALSE
[20:50:22.377]      // skip if-block "protType == 1"
[20:50:22.377]    </control>
[20:50:22.377]    <control if="protType == 2" while="" timeout="0" info="">
[20:50:22.377]      // if-block "protType == 2"
[20:50:22.377]        // =>  TRUE
[20:50:22.377]      <control if="isSWJ" while="" timeout="0" info="">
[20:50:22.377]        // if-block "isSWJ"
[20:50:22.377]          // =>  TRUE
[20:50:22.377]        <control if="hasDormant" while="" timeout="0" info="">
[20:50:22.377]          // if-block "hasDormant"
[20:50:22.377]            // =>  FALSE
[20:50:22.377]          // skip if-block "hasDormant"
[20:50:22.377]        </control>
[20:50:22.377]        <control if="!hasDormant" while="" timeout="0" info="">
[20:50:22.377]          // if-block "!hasDormant"
[20:50:22.387]            // =>  TRUE
[20:50:22.387]          <block atomic="false" info="">
[20:50:22.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:50:22.387]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:22.387]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:50:22.387]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:50:22.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:50:22.387]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:22.387]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:50:22.387]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:50:22.387]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:50:22.397]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:22.397]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:50:22.397]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:50:22.397]          </block>
[20:50:22.397]          // end if-block "!hasDormant"
[20:50:22.397]        </control>
[20:50:22.397]        // end if-block "isSWJ"
[20:50:22.397]      </control>
[20:50:22.397]      <control if="!isSWJ" while="" timeout="0" info="">
[20:50:22.397]        // if-block "!isSWJ"
[20:50:22.397]          // =>  FALSE
[20:50:22.397]        // skip if-block "!isSWJ"
[20:50:22.397]      </control>
[20:50:22.397]      <block atomic="false" info="">
[20:50:22.397]        ReadDP(0x0);
[20:50:22.397]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:50:22.397]      </block>
[20:50:22.397]      // end if-block "protType == 2"
[20:50:22.397]    </control>
[20:50:22.397]  </sequence>
[20:50:22.397]  
[20:50:22.397]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:50:22.397]  
[20:50:22.397]  <debugvars>
[20:50:22.397]    // Pre-defined
[20:50:22.397]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:22.397]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:22.397]    __dp=0x00000000
[20:50:22.397]    __ap=0x00000000
[20:50:22.397]    __traceout=0x00000000      (Trace Disabled)
[20:50:22.397]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:22.397]    __FlashAddr=0x00000000
[20:50:22.397]    __FlashLen=0x00000000
[20:50:22.397]    __FlashArg=0x00000000
[20:50:22.397]    __FlashOp=0x00000000
[20:50:22.397]    __Result=0x00000000
[20:50:22.397]  </debugvars>
[20:50:22.397]  
[20:50:22.397]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:50:22.397]    <block atomic="false" info="">
[20:50:22.397]      __var SW_DP_ABORT       = 0x0;
[20:50:22.397]        // -> [SW_DP_ABORT <= 0x00000000]
[20:50:22.397]      __var DP_CTRL_STAT      = 0x4;
[20:50:22.407]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:50:22.407]      __var DP_SELECT         = 0x8;
[20:50:22.407]        // -> [DP_SELECT <= 0x00000008]
[20:50:22.407]      __var powered_down      = 0;
[20:50:22.407]        // -> [powered_down <= 0x00000000]
[20:50:22.407]      WriteDP(DP_SELECT, 0x00000000);
[20:50:22.407]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:50:22.407]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:50:22.407]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:50:22.407]        // -> [powered_down <= 0x00000001]
[20:50:22.407]    </block>
[20:50:22.407]    <control if="powered_down" while="" timeout="0" info="">
[20:50:22.407]      // if-block "powered_down"
[20:50:22.407]        // =>  TRUE
[20:50:22.407]      <block atomic="false" info="">
[20:50:22.407]        Message(0, "Debug/System power-up request sent");
[20:50:22.407]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:50:22.407]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:50:22.407]      </block>
[20:50:22.407]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:50:22.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:50:22.417]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:50:22.417]        // while-condition  =>  FALSE
[20:50:22.417]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:50:22.417]      </control>
[20:50:22.417]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:50:22.417]        // if-block "(__protocol & 0xFFFF) == 1"
[20:50:22.417]          // =>  FALSE
[20:50:22.417]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:50:22.417]      </control>
[20:50:22.417]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:50:22.417]        // if-block "(__protocol & 0xFFFF) == 2"
[20:50:22.417]          // =>  TRUE
[20:50:22.417]        <block atomic="false" info="">
[20:50:22.417]          Message(0, "executing SWD power up");
[20:50:22.417]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:50:22.417]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:50:22.417]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:50:22.417]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:50:22.417]        </block>
[20:50:22.417]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:50:22.417]      </control>
[20:50:22.417]      // end if-block "powered_down"
[20:50:22.417]    </control>
[20:50:22.417]    <block atomic="false" info="">
[20:50:22.417]      __var DEBUG_PORT_VAL    = 0;
[20:50:22.417]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:50:22.417]      __var ACCESS_POINT_VAL  = 0;
[20:50:22.417]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:50:22.417]      __ap = 1; 
[20:50:22.417]        // -> [__ap <= 0x00000001]
[20:50:22.417]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:50:22.427]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:50:22.427]      __ap = 4;
[20:50:22.427]        // -> [__ap <= 0x00000004]
[20:50:22.427]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:50:22.427]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:50:22.427]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:50:22.427]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:50:22.427]    </block>
[20:50:22.427]    <block atomic="false" info="">
[20:50:22.427]      __var nReset = 0x80;
[20:50:22.427]        // -> [nReset <= 0x00000080]
[20:50:22.427]      __var canReadPins = 0;
[20:50:22.427]        // -> [canReadPins <= 0x00000000]
[20:50:22.427]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:50:22.437]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:50:22.437]        // -> [canReadPins <= 0x00000001]
[20:50:22.437]    </block>
[20:50:22.437]    <control if="" while="1" timeout="200" info="">
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.437]      // while-condition  =>  TRUE
[20:50:22.437]      // while "1"  (timeout="200")
[20:50:22.447]      // while-condition  =>  TRUE
[20:50:22.447]      // while "1"  (timeout="200")
[20:50:22.447]      // while  =>  TIMEOUT
[20:50:22.447]      // end while "1"
[20:50:22.447]    </control>
[20:50:22.447]    <control if="canReadPins" while="" timeout="0" info="">
[20:50:22.447]      // if-block "canReadPins"
[20:50:22.447]        // =>  TRUE
[20:50:22.447]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:50:22.447]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:50:22.450]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:50:22.450]        // while-condition  =>  FALSE
[20:50:22.450]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:50:22.450]      </control>
[20:50:22.450]      // end if-block "canReadPins"
[20:50:22.450]    </control>
[20:50:22.450]    <control if="!canReadPins" while="" timeout="0" info="">
[20:50:22.450]      // if-block "!canReadPins"
[20:50:22.450]        // =>  FALSE
[20:50:22.450]      // skip if-block "!canReadPins"
[20:50:22.450]    </control>
[20:50:22.451]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:50:22.451]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:50:22.451]        // =>  TRUE
[20:50:22.451]      <block atomic="false" info="">
[20:50:22.451]        WriteAP(0x00, 0x190008);
[20:50:22.453]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:50:22.453]        WriteAP(0xF0, 0x01);
[20:50:22.456]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:50:22.457]      </block>
[20:50:22.457]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:50:22.457]    </control>
[20:50:22.457]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:50:22.457]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:50:22.457]        // =>  FALSE
[20:50:22.457]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:50:22.458]    </control>
[20:50:22.458]    <block atomic="false" info="">
[20:50:22.458]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:50:22.461]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:50:22.461]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:50:22.462]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:50:22.464]      __ap = 0; //lets make sure we reset the access point selection
[20:50:22.464]        // -> [__ap <= 0x00000000]
[20:50:22.464]    </block>
[20:50:22.464]  </sequence>
[20:50:22.464]  
[20:50:22.488]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:50:22.488]  
[20:50:22.488]  <debugvars>
[20:50:22.488]    // Pre-defined
[20:50:22.488]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:22.488]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:22.488]    __dp=0x00000000
[20:50:22.488]    __ap=0x00000000
[20:50:22.488]    __traceout=0x00000000      (Trace Disabled)
[20:50:22.488]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:22.488]    __FlashAddr=0x00000000
[20:50:22.488]    __FlashLen=0x00000000
[20:50:22.488]    __FlashArg=0x00000000
[20:50:22.488]    __FlashOp=0x00000000
[20:50:22.488]    __Result=0x00000000
[20:50:22.488]  </debugvars>
[20:50:22.488]  
[20:50:22.488]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:50:22.488]    <block atomic="false" info="">
[20:50:22.488]      __var deviceID = 0;
[20:50:22.488]        // -> [deviceID <= 0x00000000]
[20:50:22.488]      __var version = 0;
[20:50:22.488]        // -> [version <= 0x00000000]
[20:50:22.488]      __var partNum = 0;
[20:50:22.488]        // -> [partNum <= 0x00000000]
[20:50:22.488]      __var manuf = 0;
[20:50:22.488]        // -> [manuf <= 0x00000000]
[20:50:22.488]      __var isMSPM0G1X0X_G3X0X = 0;
[20:50:22.488]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:50:22.495]      __var isProduction = 0;
[20:50:22.495]        // -> [isProduction <= 0x00000000]
[20:50:22.495]      __var continueId = 0;
[20:50:22.495]        // -> [continueId <= 0x00000000]
[20:50:22.495]      deviceID =   Read32(0x41C40004);
[20:50:22.499]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:50:22.499]        // -> [deviceID <= 0x2BB8802F]
[20:50:22.499]      version = deviceID >> 28;
[20:50:22.499]        // -> [version <= 0x00000002]
[20:50:22.499]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:50:22.499]        // -> [partNum <= 0x0000BB88]
[20:50:22.499]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:50:22.499]        // -> [manuf <= 0x00000017]
[20:50:22.499]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:50:22.499]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:50:22.507]      isProduction = (version > 0);
[20:50:22.507]        // -> [isProduction <= 0x00000001]
[20:50:22.507]    </block>
[20:50:22.507]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:50:22.507]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:50:22.507]        // =>  FALSE
[20:50:22.507]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:50:22.507]    </control>
[20:50:22.507]    <control if="continueId == 4" while="" timeout="0" info="">
[20:50:22.507]      // if-block "continueId == 4"
[20:50:22.507]        // =>  FALSE
[20:50:22.507]      // skip if-block "continueId == 4"
[20:50:22.507]    </control>
[20:50:22.507]    <control if="!isProduction" while="" timeout="0" info="">
[20:50:22.507]      // if-block "!isProduction"
[20:50:22.507]        // =>  FALSE
[20:50:22.507]      // skip if-block "!isProduction"
[20:50:22.507]    </control>
[20:50:22.507]  </sequence>
[20:50:22.507]  
[20:50:57.020]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:50:57.020]  
[20:50:57.033]  <debugvars>
[20:50:57.033]    // Pre-defined
[20:50:57.033]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:57.033]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:57.033]    __dp=0x00000000
[20:50:57.033]    __ap=0x00000000
[20:50:57.033]    __traceout=0x00000000      (Trace Disabled)
[20:50:57.033]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:57.033]    __FlashAddr=0x00000000
[20:50:57.033]    __FlashLen=0x00000000
[20:50:57.033]    __FlashArg=0x00000000
[20:50:57.033]    __FlashOp=0x00000000
[20:50:57.033]    __Result=0x00000000
[20:50:57.033]  </debugvars>
[20:50:57.033]  
[20:50:57.033]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:50:57.033]    <block atomic="false" info="">
[20:50:57.033]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:50:57.033]        // -> [isSWJ <= 0x00000001]
[20:50:57.033]      __var hasDormant = __protocol & 0x00020000;
[20:50:57.033]        // -> [hasDormant <= 0x00000000]
[20:50:57.033]      __var protType   = __protocol & 0x0000FFFF;
[20:50:57.033]        // -> [protType <= 0x00000002]
[20:50:57.033]    </block>
[20:50:57.033]    <control if="protType == 1" while="" timeout="0" info="">
[20:50:57.033]      // if-block "protType == 1"
[20:50:57.033]        // =>  FALSE
[20:50:57.033]      // skip if-block "protType == 1"
[20:50:57.033]    </control>
[20:50:57.033]    <control if="protType == 2" while="" timeout="0" info="">
[20:50:57.033]      // if-block "protType == 2"
[20:50:57.033]        // =>  TRUE
[20:50:57.033]      <control if="isSWJ" while="" timeout="0" info="">
[20:50:57.033]        // if-block "isSWJ"
[20:50:57.033]          // =>  TRUE
[20:50:57.033]        <control if="hasDormant" while="" timeout="0" info="">
[20:50:57.033]          // if-block "hasDormant"
[20:50:57.033]            // =>  FALSE
[20:50:57.033]          // skip if-block "hasDormant"
[20:50:57.033]        </control>
[20:50:57.033]        <control if="!hasDormant" while="" timeout="0" info="">
[20:50:57.033]          // if-block "!hasDormant"
[20:50:57.033]            // =>  TRUE
[20:50:57.033]          <block atomic="false" info="">
[20:50:57.033]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:50:57.039]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:57.039]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:50:57.039]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:50:57.039]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:50:57.039]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:57.039]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:50:57.049]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:50:57.049]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:50:57.049]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:57.049]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:50:57.049]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:50:57.049]          </block>
[20:50:57.049]          // end if-block "!hasDormant"
[20:50:57.049]        </control>
[20:50:57.049]        // end if-block "isSWJ"
[20:50:57.049]      </control>
[20:50:57.049]      <control if="!isSWJ" while="" timeout="0" info="">
[20:50:57.049]        // if-block "!isSWJ"
[20:50:57.049]          // =>  FALSE
[20:50:57.049]        // skip if-block "!isSWJ"
[20:50:57.049]      </control>
[20:50:57.049]      <block atomic="false" info="">
[20:50:57.049]        ReadDP(0x0);
[20:50:57.049]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:50:57.049]      </block>
[20:50:57.049]      // end if-block "protType == 2"
[20:50:57.049]    </control>
[20:50:57.049]  </sequence>
[20:50:57.049]  
[20:50:57.059]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:50:57.059]  
[20:50:57.059]  <debugvars>
[20:50:57.059]    // Pre-defined
[20:50:57.059]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:57.059]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:57.059]    __dp=0x00000000
[20:50:57.059]    __ap=0x00000000
[20:50:57.059]    __traceout=0x00000000      (Trace Disabled)
[20:50:57.059]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:57.059]    __FlashAddr=0x00000000
[20:50:57.059]    __FlashLen=0x00000000
[20:50:57.059]    __FlashArg=0x00000000
[20:50:57.059]    __FlashOp=0x00000000
[20:50:57.059]    __Result=0x00000000
[20:50:57.059]  </debugvars>
[20:50:57.059]  
[20:50:57.059]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:50:57.059]    <block atomic="false" info="">
[20:50:57.059]      __var SW_DP_ABORT       = 0x0;
[20:50:57.059]        // -> [SW_DP_ABORT <= 0x00000000]
[20:50:57.059]      __var DP_CTRL_STAT      = 0x4;
[20:50:57.059]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:50:57.059]      __var DP_SELECT         = 0x8;
[20:50:57.059]        // -> [DP_SELECT <= 0x00000008]
[20:50:57.059]      __var powered_down      = 0;
[20:50:57.059]        // -> [powered_down <= 0x00000000]
[20:50:57.059]      WriteDP(DP_SELECT, 0x00000000);
[20:50:57.059]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:50:57.059]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:50:57.069]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:50:57.069]        // -> [powered_down <= 0x00000001]
[20:50:57.069]    </block>
[20:50:57.069]    <control if="powered_down" while="" timeout="0" info="">
[20:50:57.069]      // if-block "powered_down"
[20:50:57.069]        // =>  TRUE
[20:50:57.069]      <block atomic="false" info="">
[20:50:57.069]        Message(0, "Debug/System power-up request sent");
[20:50:57.069]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:50:57.069]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:50:57.069]      </block>
[20:50:57.069]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:50:57.069]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:50:57.069]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:50:57.069]        // while-condition  =>  FALSE
[20:50:57.069]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:50:57.069]      </control>
[20:50:57.069]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:50:57.069]        // if-block "(__protocol & 0xFFFF) == 1"
[20:50:57.069]          // =>  FALSE
[20:50:57.079]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:50:57.079]      </control>
[20:50:57.079]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:50:57.079]        // if-block "(__protocol & 0xFFFF) == 2"
[20:50:57.079]          // =>  TRUE
[20:50:57.079]        <block atomic="false" info="">
[20:50:57.079]          Message(0, "executing SWD power up");
[20:50:57.079]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:50:57.079]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:50:57.079]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:50:57.089]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:50:57.089]        </block>
[20:50:57.089]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:50:57.089]      </control>
[20:50:57.089]      // end if-block "powered_down"
[20:50:57.089]    </control>
[20:50:57.089]    <block atomic="false" info="">
[20:50:57.089]      __var DEBUG_PORT_VAL    = 0;
[20:50:57.089]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:50:57.089]      __var ACCESS_POINT_VAL  = 0;
[20:50:57.089]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:50:57.090]      __ap = 1; 
[20:50:57.090]        // -> [__ap <= 0x00000001]
[20:50:57.090]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:50:57.090]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:50:57.090]      __ap = 4;
[20:50:57.090]        // -> [__ap <= 0x00000004]
[20:50:57.090]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:50:57.100]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:50:57.100]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:50:57.100]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:50:57.100]    </block>
[20:50:57.100]    <block atomic="false" info="">
[20:50:57.100]      __var nReset = 0x80;
[20:50:57.100]        // -> [nReset <= 0x00000080]
[20:50:57.100]      __var canReadPins = 0;
[20:50:57.100]        // -> [canReadPins <= 0x00000000]
[20:50:57.100]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:50:57.100]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:50:57.100]        // -> [canReadPins <= 0x00000001]
[20:50:57.100]    </block>
[20:50:57.100]    <control if="" while="1" timeout="200" info="">
[20:50:57.100]      // while "1"  (timeout="200")
[20:50:57.100]      // while-condition  =>  TRUE
[20:50:57.100]      // while "1"  (timeout="200")
[20:50:57.100]      // while-condition  =>  TRUE
[20:50:57.100]      // while "1"  (timeout="200")
[20:50:57.100]      // while-condition  =>  TRUE
[20:50:57.100]      // while "1"  (timeout="200")
[20:50:57.100]      // while-condition  =>  TRUE
[20:50:57.100]      // while "1"  (timeout="200")
[20:50:57.100]      // while-condition  =>  TRUE
[20:50:57.100]      // while "1"  (timeout="200")
[20:50:57.100]      // while-condition  =>  TRUE
[20:50:57.100]      // while "1"  (timeout="200")
[20:50:57.100]      // while-condition  =>  TRUE
[20:50:57.100]      // while "1"  (timeout="200")
[20:50:57.100]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.109]      // while "1"  (timeout="200")
[20:50:57.109]      // while-condition  =>  TRUE
[20:50:57.119]      // while "1"  (timeout="200")
[20:50:57.119]      // while  =>  TIMEOUT
[20:50:57.119]      // end while "1"
[20:50:57.119]    </control>
[20:50:57.119]    <control if="canReadPins" while="" timeout="0" info="">
[20:50:57.119]      // if-block "canReadPins"
[20:50:57.119]        // =>  TRUE
[20:50:57.119]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:50:57.119]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:50:57.123]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:50:57.123]        // while-condition  =>  FALSE
[20:50:57.123]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:50:57.123]      </control>
[20:50:57.123]      // end if-block "canReadPins"
[20:50:57.123]    </control>
[20:50:57.123]    <control if="!canReadPins" while="" timeout="0" info="">
[20:50:57.123]      // if-block "!canReadPins"
[20:50:57.123]        // =>  FALSE
[20:50:57.123]      // skip if-block "!canReadPins"
[20:50:57.123]    </control>
[20:50:57.123]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:50:57.123]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:50:57.123]        // =>  TRUE
[20:50:57.123]      <block atomic="false" info="">
[20:50:57.123]        WriteAP(0x00, 0x190008);
[20:50:57.123]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:50:57.129]        WriteAP(0xF0, 0x01);
[20:50:57.132]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:50:57.132]      </block>
[20:50:57.132]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:50:57.132]    </control>
[20:50:57.132]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:50:57.132]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:50:57.132]        // =>  FALSE
[20:50:57.132]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:50:57.132]    </control>
[20:50:57.132]    <block atomic="false" info="">
[20:50:57.132]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:50:57.132]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:50:57.132]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:50:57.132]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:50:57.140]      __ap = 0; //lets make sure we reset the access point selection
[20:50:57.140]        // -> [__ap <= 0x00000000]
[20:50:57.140]    </block>
[20:50:57.140]  </sequence>
[20:50:57.140]  
[20:50:57.162]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:50:57.162]  
[20:50:57.162]  <debugvars>
[20:50:57.162]    // Pre-defined
[20:50:57.162]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:57.162]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:57.162]    __dp=0x00000000
[20:50:57.162]    __ap=0x00000000
[20:50:57.162]    __traceout=0x00000000      (Trace Disabled)
[20:50:57.162]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:57.162]    __FlashAddr=0x00000000
[20:50:57.164]    __FlashLen=0x00000000
[20:50:57.164]    __FlashArg=0x00000000
[20:50:57.164]    __FlashOp=0x00000000
[20:50:57.164]    __Result=0x00000000
[20:50:57.164]  </debugvars>
[20:50:57.164]  
[20:50:57.164]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:50:57.164]    <block atomic="false" info="">
[20:50:57.164]      __var deviceID = 0;
[20:50:57.164]        // -> [deviceID <= 0x00000000]
[20:50:57.164]      __var version = 0;
[20:50:57.164]        // -> [version <= 0x00000000]
[20:50:57.164]      __var partNum = 0;
[20:50:57.164]        // -> [partNum <= 0x00000000]
[20:50:57.164]      __var manuf = 0;
[20:50:57.164]        // -> [manuf <= 0x00000000]
[20:50:57.164]      __var isMSPM0G1X0X_G3X0X = 0;
[20:50:57.164]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:50:57.164]      __var isProduction = 0;
[20:50:57.164]        // -> [isProduction <= 0x00000000]
[20:50:57.164]      __var continueId = 0;
[20:50:57.164]        // -> [continueId <= 0x00000000]
[20:50:57.164]      deviceID =   Read32(0x41C40004);
[20:50:57.170]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:50:57.170]        // -> [deviceID <= 0x2BB8802F]
[20:50:57.170]      version = deviceID >> 28;
[20:50:57.170]        // -> [version <= 0x00000002]
[20:50:57.170]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:50:57.170]        // -> [partNum <= 0x0000BB88]
[20:50:57.170]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:50:57.170]        // -> [manuf <= 0x00000017]
[20:50:57.170]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:50:57.170]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:50:57.170]      isProduction = (version > 0);
[20:50:57.170]        // -> [isProduction <= 0x00000001]
[20:50:57.170]    </block>
[20:50:57.170]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:50:57.170]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:50:57.170]        // =>  FALSE
[20:50:57.170]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:50:57.170]    </control>
[20:50:57.170]    <control if="continueId == 4" while="" timeout="0" info="">
[20:50:57.170]      // if-block "continueId == 4"
[20:50:57.170]        // =>  FALSE
[20:50:57.170]      // skip if-block "continueId == 4"
[20:50:57.170]    </control>
[20:50:57.170]    <control if="!isProduction" while="" timeout="0" info="">
[20:50:57.170]      // if-block "!isProduction"
[20:50:57.170]        // =>  FALSE
[20:50:57.170]      // skip if-block "!isProduction"
[20:50:57.170]    </control>
[20:50:57.170]  </sequence>
[20:50:57.170]  
[20:51:55.329]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:51:55.329]  
[20:51:55.340]  <debugvars>
[20:51:55.340]    // Pre-defined
[20:51:55.340]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:51:55.340]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:51:55.340]    __dp=0x00000000
[20:51:55.340]    __ap=0x00000000
[20:51:55.340]    __traceout=0x00000000      (Trace Disabled)
[20:51:55.340]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:51:55.340]    __FlashAddr=0x00000000
[20:51:55.340]    __FlashLen=0x00000000
[20:51:55.340]    __FlashArg=0x00000000
[20:51:55.340]    __FlashOp=0x00000000
[20:51:55.342]    __Result=0x00000000
[20:51:55.342]  </debugvars>
[20:51:55.342]  
[20:51:55.342]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:51:55.342]    <block atomic="false" info="">
[20:51:55.342]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:51:55.342]        // -> [isSWJ <= 0x00000001]
[20:51:55.342]      __var hasDormant = __protocol & 0x00020000;
[20:51:55.342]        // -> [hasDormant <= 0x00000000]
[20:51:55.342]      __var protType   = __protocol & 0x0000FFFF;
[20:51:55.342]        // -> [protType <= 0x00000002]
[20:51:55.342]    </block>
[20:51:55.342]    <control if="protType == 1" while="" timeout="0" info="">
[20:51:55.342]      // if-block "protType == 1"
[20:51:55.342]        // =>  FALSE
[20:51:55.342]      // skip if-block "protType == 1"
[20:51:55.342]    </control>
[20:51:55.342]    <control if="protType == 2" while="" timeout="0" info="">
[20:51:55.342]      // if-block "protType == 2"
[20:51:55.342]        // =>  TRUE
[20:51:55.342]      <control if="isSWJ" while="" timeout="0" info="">
[20:51:55.342]        // if-block "isSWJ"
[20:51:55.342]          // =>  TRUE
[20:51:55.342]        <control if="hasDormant" while="" timeout="0" info="">
[20:51:55.342]          // if-block "hasDormant"
[20:51:55.342]            // =>  FALSE
[20:51:55.342]          // skip if-block "hasDormant"
[20:51:55.342]        </control>
[20:51:55.342]        <control if="!hasDormant" while="" timeout="0" info="">
[20:51:55.342]          // if-block "!hasDormant"
[20:51:55.342]            // =>  TRUE
[20:51:55.342]          <block atomic="false" info="">
[20:51:55.342]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:51:55.342]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:51:55.342]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:51:55.342]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:51:55.342]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:51:55.349]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:51:55.349]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:51:55.349]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:51:55.349]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:51:55.349]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:51:55.349]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:51:55.349]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:51:55.349]          </block>
[20:51:55.349]          // end if-block "!hasDormant"
[20:51:55.349]        </control>
[20:51:55.349]        // end if-block "isSWJ"
[20:51:55.349]      </control>
[20:51:55.349]      <control if="!isSWJ" while="" timeout="0" info="">
[20:51:55.349]        // if-block "!isSWJ"
[20:51:55.349]          // =>  FALSE
[20:51:55.349]        // skip if-block "!isSWJ"
[20:51:55.349]      </control>
[20:51:55.349]      <block atomic="false" info="">
[20:51:55.349]        ReadDP(0x0);
[20:51:55.359]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:51:55.359]      </block>
[20:51:55.360]      // end if-block "protType == 2"
[20:51:55.360]    </control>
[20:51:55.360]  </sequence>
[20:51:55.360]  
[20:51:55.363]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:51:55.363]  
[20:51:55.363]  <debugvars>
[20:51:55.363]    // Pre-defined
[20:51:55.363]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:51:55.363]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:51:55.363]    __dp=0x00000000
[20:51:55.363]    __ap=0x00000000
[20:51:55.363]    __traceout=0x00000000      (Trace Disabled)
[20:51:55.363]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:51:55.369]    __FlashAddr=0x00000000
[20:51:55.369]    __FlashLen=0x00000000
[20:51:55.369]    __FlashArg=0x00000000
[20:51:55.369]    __FlashOp=0x00000000
[20:51:55.369]    __Result=0x00000000
[20:51:55.369]  </debugvars>
[20:51:55.369]  
[20:51:55.369]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:51:55.371]    <block atomic="false" info="">
[20:51:55.371]      __var SW_DP_ABORT       = 0x0;
[20:51:55.371]        // -> [SW_DP_ABORT <= 0x00000000]
[20:51:55.371]      __var DP_CTRL_STAT      = 0x4;
[20:51:55.371]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:51:55.371]      __var DP_SELECT         = 0x8;
[20:51:55.371]        // -> [DP_SELECT <= 0x00000008]
[20:51:55.371]      __var powered_down      = 0;
[20:51:55.371]        // -> [powered_down <= 0x00000000]
[20:51:55.371]      WriteDP(DP_SELECT, 0x00000000);
[20:51:55.373]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:51:55.373]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:51:55.376]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:51:55.376]        // -> [powered_down <= 0x00000001]
[20:51:55.376]    </block>
[20:51:55.376]    <control if="powered_down" while="" timeout="0" info="">
[20:51:55.376]      // if-block "powered_down"
[20:51:55.376]        // =>  TRUE
[20:51:55.376]      <block atomic="false" info="">
[20:51:55.376]        Message(0, "Debug/System power-up request sent");
[20:51:55.377]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:51:55.379]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:51:55.379]      </block>
[20:51:55.379]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:51:55.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:51:55.381]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:51:55.382]        // while-condition  =>  FALSE
[20:51:55.383]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:51:55.383]      </control>
[20:51:55.383]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:51:55.383]        // if-block "(__protocol & 0xFFFF) == 1"
[20:51:55.383]          // =>  FALSE
[20:51:55.383]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:51:55.383]      </control>
[20:51:55.383]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:51:55.383]        // if-block "(__protocol & 0xFFFF) == 2"
[20:51:55.383]          // =>  TRUE
[20:51:55.383]        <block atomic="false" info="">
[20:51:55.383]          Message(0, "executing SWD power up");
[20:51:55.385]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:51:55.390]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:51:55.390]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:51:55.390]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:51:55.390]        </block>
[20:51:55.390]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:51:55.390]      </control>
[20:51:55.390]      // end if-block "powered_down"
[20:51:55.390]    </control>
[20:51:55.390]    <block atomic="false" info="">
[20:51:55.390]      __var DEBUG_PORT_VAL    = 0;
[20:51:55.390]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:51:55.390]      __var ACCESS_POINT_VAL  = 0;
[20:51:55.390]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:51:55.390]      __ap = 1; 
[20:51:55.390]        // -> [__ap <= 0x00000001]
[20:51:55.390]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:51:55.402]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:51:55.402]      __ap = 4;
[20:51:55.402]        // -> [__ap <= 0x00000004]
[20:51:55.402]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:51:55.411]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:51:55.411]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:51:55.411]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:51:55.413]    </block>
[20:51:55.414]    <block atomic="false" info="">
[20:51:55.414]      __var nReset = 0x80;
[20:51:55.414]        // -> [nReset <= 0x00000080]
[20:51:55.414]      __var canReadPins = 0;
[20:51:55.414]        // -> [canReadPins <= 0x00000000]
[20:51:55.414]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:51:55.414]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:51:55.414]        // -> [canReadPins <= 0x00000001]
[20:51:55.414]    </block>
[20:51:55.414]    <control if="" while="1" timeout="200" info="">
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.414]      // while-condition  =>  TRUE
[20:51:55.414]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.420]      // while "1"  (timeout="200")
[20:51:55.420]      // while-condition  =>  TRUE
[20:51:55.425]      // while "1"  (timeout="200")
[20:51:55.425]      // while  =>  TIMEOUT
[20:51:55.425]      // end while "1"
[20:51:55.425]    </control>
[20:51:55.425]    <control if="canReadPins" while="" timeout="0" info="">
[20:51:55.425]      // if-block "canReadPins"
[20:51:55.425]        // =>  TRUE
[20:51:55.425]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:51:55.425]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:51:55.425]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:51:55.425]        // while-condition  =>  FALSE
[20:51:55.425]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:51:55.425]      </control>
[20:51:55.425]      // end if-block "canReadPins"
[20:51:55.425]    </control>
[20:51:55.425]    <control if="!canReadPins" while="" timeout="0" info="">
[20:51:55.425]      // if-block "!canReadPins"
[20:51:55.425]        // =>  FALSE
[20:51:55.425]      // skip if-block "!canReadPins"
[20:51:55.425]    </control>
[20:51:55.425]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:51:55.425]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:51:55.425]        // =>  TRUE
[20:51:55.425]      <block atomic="false" info="">
[20:51:55.425]        WriteAP(0x00, 0x190008);
[20:51:55.431]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:51:55.431]        WriteAP(0xF0, 0x01);
[20:51:55.432]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:51:55.432]      </block>
[20:51:55.432]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:51:55.432]    </control>
[20:51:55.432]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:51:55.432]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:51:55.432]        // =>  FALSE
[20:51:55.432]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:51:55.432]    </control>
[20:51:55.432]    <block atomic="false" info="">
[20:51:55.432]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:51:55.440]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:51:55.440]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:51:55.440]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:51:55.440]      __ap = 0; //lets make sure we reset the access point selection
[20:51:55.440]        // -> [__ap <= 0x00000000]
[20:51:55.440]    </block>
[20:51:55.440]  </sequence>
[20:51:55.440]  
[20:51:55.470]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:51:55.470]  
[20:51:55.470]  <debugvars>
[20:51:55.470]    // Pre-defined
[20:51:55.470]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:51:55.470]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:51:55.470]    __dp=0x00000000
[20:51:55.470]    __ap=0x00000000
[20:51:55.470]    __traceout=0x00000000      (Trace Disabled)
[20:51:55.470]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:51:55.470]    __FlashAddr=0x00000000
[20:51:55.470]    __FlashLen=0x00000000
[20:51:55.470]    __FlashArg=0x00000000
[20:51:55.470]    __FlashOp=0x00000000
[20:51:55.470]    __Result=0x00000000
[20:51:55.470]  </debugvars>
[20:51:55.470]  
[20:51:55.470]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:51:55.470]    <block atomic="false" info="">
[20:51:55.470]      __var deviceID = 0;
[20:51:55.470]        // -> [deviceID <= 0x00000000]
[20:51:55.470]      __var version = 0;
[20:51:55.470]        // -> [version <= 0x00000000]
[20:51:55.470]      __var partNum = 0;
[20:51:55.470]        // -> [partNum <= 0x00000000]
[20:51:55.470]      __var manuf = 0;
[20:51:55.470]        // -> [manuf <= 0x00000000]
[20:51:55.470]      __var isMSPM0G1X0X_G3X0X = 0;
[20:51:55.470]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:51:55.470]      __var isProduction = 0;
[20:51:55.470]        // -> [isProduction <= 0x00000000]
[20:51:55.470]      __var continueId = 0;
[20:51:55.470]        // -> [continueId <= 0x00000000]
[20:51:55.470]      deviceID =   Read32(0x41C40004);
[20:51:55.470]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:51:55.470]        // -> [deviceID <= 0x2BB8802F]
[20:51:55.470]      version = deviceID >> 28;
[20:51:55.470]        // -> [version <= 0x00000002]
[20:51:55.470]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:51:55.470]        // -> [partNum <= 0x0000BB88]
[20:51:55.470]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:51:55.470]        // -> [manuf <= 0x00000017]
[20:51:55.470]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:51:55.470]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:51:55.470]      isProduction = (version > 0);
[20:51:55.470]        // -> [isProduction <= 0x00000001]
[20:51:55.470]    </block>
[20:51:55.470]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:51:55.470]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:51:55.470]        // =>  FALSE
[20:51:55.479]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:51:55.480]    </control>
[20:51:55.480]    <control if="continueId == 4" while="" timeout="0" info="">
[20:51:55.480]      // if-block "continueId == 4"
[20:51:55.480]        // =>  FALSE
[20:51:55.480]      // skip if-block "continueId == 4"
[20:51:55.480]    </control>
[20:51:55.480]    <control if="!isProduction" while="" timeout="0" info="">
[20:51:55.480]      // if-block "!isProduction"
[20:51:55.480]        // =>  FALSE
[20:51:55.480]      // skip if-block "!isProduction"
[20:51:55.480]    </control>
[20:51:55.480]  </sequence>
[20:51:55.480]  
[20:52:46.998]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:52:46.998]  
[20:52:47.009]  <debugvars>
[20:52:47.009]    // Pre-defined
[20:52:47.009]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:52:47.009]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:52:47.009]    __dp=0x00000000
[20:52:47.009]    __ap=0x00000000
[20:52:47.009]    __traceout=0x00000000      (Trace Disabled)
[20:52:47.009]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:52:47.009]    __FlashAddr=0x00000000
[20:52:47.009]    __FlashLen=0x00000000
[20:52:47.009]    __FlashArg=0x00000000
[20:52:47.009]    __FlashOp=0x00000000
[20:52:47.009]    __Result=0x00000000
[20:52:47.009]  </debugvars>
[20:52:47.009]  
[20:52:47.009]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:52:47.009]    <block atomic="false" info="">
[20:52:47.009]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:52:47.009]        // -> [isSWJ <= 0x00000001]
[20:52:47.009]      __var hasDormant = __protocol & 0x00020000;
[20:52:47.009]        // -> [hasDormant <= 0x00000000]
[20:52:47.009]      __var protType   = __protocol & 0x0000FFFF;
[20:52:47.009]        // -> [protType <= 0x00000002]
[20:52:47.009]    </block>
[20:52:47.009]    <control if="protType == 1" while="" timeout="0" info="">
[20:52:47.009]      // if-block "protType == 1"
[20:52:47.009]        // =>  FALSE
[20:52:47.009]      // skip if-block "protType == 1"
[20:52:47.009]    </control>
[20:52:47.009]    <control if="protType == 2" while="" timeout="0" info="">
[20:52:47.009]      // if-block "protType == 2"
[20:52:47.009]        // =>  TRUE
[20:52:47.009]      <control if="isSWJ" while="" timeout="0" info="">
[20:52:47.009]        // if-block "isSWJ"
[20:52:47.009]          // =>  TRUE
[20:52:47.009]        <control if="hasDormant" while="" timeout="0" info="">
[20:52:47.009]          // if-block "hasDormant"
[20:52:47.009]            // =>  FALSE
[20:52:47.009]          // skip if-block "hasDormant"
[20:52:47.009]        </control>
[20:52:47.009]        <control if="!hasDormant" while="" timeout="0" info="">
[20:52:47.009]          // if-block "!hasDormant"
[20:52:47.009]            // =>  TRUE
[20:52:47.009]          <block atomic="false" info="">
[20:52:47.009]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:52:47.017]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:52:47.017]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:52:47.017]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:52:47.017]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:52:47.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:52:47.027]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:52:47.027]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:52:47.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:52:47.027]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:52:47.037]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:52:47.038]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:52:47.038]          </block>
[20:52:47.039]          // end if-block "!hasDormant"
[20:52:47.039]        </control>
[20:52:47.039]        // end if-block "isSWJ"
[20:52:47.039]      </control>
[20:52:47.039]      <control if="!isSWJ" while="" timeout="0" info="">
[20:52:47.039]        // if-block "!isSWJ"
[20:52:47.039]          // =>  FALSE
[20:52:47.039]        // skip if-block "!isSWJ"
[20:52:47.039]      </control>
[20:52:47.039]      <block atomic="false" info="">
[20:52:47.039]        ReadDP(0x0);
[20:52:47.041]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:52:47.041]      </block>
[20:52:47.041]      // end if-block "protType == 2"
[20:52:47.041]    </control>
[20:52:47.041]  </sequence>
[20:52:47.041]  
[20:52:47.050]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:52:47.050]  
[20:52:47.050]  <debugvars>
[20:52:47.050]    // Pre-defined
[20:52:47.050]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:52:47.050]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:52:47.050]    __dp=0x00000000
[20:52:47.050]    __ap=0x00000000
[20:52:47.050]    __traceout=0x00000000      (Trace Disabled)
[20:52:47.050]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:52:47.050]    __FlashAddr=0x00000000
[20:52:47.050]    __FlashLen=0x00000000
[20:52:47.050]    __FlashArg=0x00000000
[20:52:47.050]    __FlashOp=0x00000000
[20:52:47.050]    __Result=0x00000000
[20:52:47.050]  </debugvars>
[20:52:47.050]  
[20:52:47.057]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:52:47.057]    <block atomic="false" info="">
[20:52:47.057]      __var SW_DP_ABORT       = 0x0;
[20:52:47.057]        // -> [SW_DP_ABORT <= 0x00000000]
[20:52:47.057]      __var DP_CTRL_STAT      = 0x4;
[20:52:47.057]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:52:47.057]      __var DP_SELECT         = 0x8;
[20:52:47.057]        // -> [DP_SELECT <= 0x00000008]
[20:52:47.057]      __var powered_down      = 0;
[20:52:47.057]        // -> [powered_down <= 0x00000000]
[20:52:47.057]      WriteDP(DP_SELECT, 0x00000000);
[20:52:47.057]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:52:47.057]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:52:47.057]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:52:47.057]        // -> [powered_down <= 0x00000001]
[20:52:47.057]    </block>
[20:52:47.057]    <control if="powered_down" while="" timeout="0" info="">
[20:52:47.057]      // if-block "powered_down"
[20:52:47.057]        // =>  TRUE
[20:52:47.057]      <block atomic="false" info="">
[20:52:47.057]        Message(0, "Debug/System power-up request sent");
[20:52:47.057]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:52:47.067]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:52:47.067]      </block>
[20:52:47.067]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:52:47.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:52:47.077]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:52:47.077]        // while-condition  =>  FALSE
[20:52:47.077]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:52:47.077]      </control>
[20:52:47.077]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:52:47.077]        // if-block "(__protocol & 0xFFFF) == 1"
[20:52:47.077]          // =>  FALSE
[20:52:47.077]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:52:47.077]      </control>
[20:52:47.077]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:52:47.077]        // if-block "(__protocol & 0xFFFF) == 2"
[20:52:47.077]          // =>  TRUE
[20:52:47.077]        <block atomic="false" info="">
[20:52:47.077]          Message(0, "executing SWD power up");
[20:52:47.077]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:52:47.087]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:52:47.087]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:52:47.087]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:52:47.087]        </block>
[20:52:47.087]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:52:47.087]      </control>
[20:52:47.087]      // end if-block "powered_down"
[20:52:47.087]    </control>
[20:52:47.087]    <block atomic="false" info="">
[20:52:47.087]      __var DEBUG_PORT_VAL    = 0;
[20:52:47.087]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:52:47.087]      __var ACCESS_POINT_VAL  = 0;
[20:52:47.087]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:52:47.087]      __ap = 1; 
[20:52:47.087]        // -> [__ap <= 0x00000001]
[20:52:47.087]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:52:47.108]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:52:47.108]      __ap = 4;
[20:52:47.108]        // -> [__ap <= 0x00000004]
[20:52:47.108]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:52:47.115]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:52:47.115]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:52:47.115]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:52:47.117]    </block>
[20:52:47.117]    <block atomic="false" info="">
[20:52:47.118]      __var nReset = 0x80;
[20:52:47.118]        // -> [nReset <= 0x00000080]
[20:52:47.118]      __var canReadPins = 0;
[20:52:47.118]        // -> [canReadPins <= 0x00000000]
[20:52:47.118]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:52:47.123]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:52:47.123]        // -> [canReadPins <= 0x00000001]
[20:52:47.123]    </block>
[20:52:47.123]    <control if="" while="1" timeout="200" info="">
[20:52:47.123]      // while "1"  (timeout="200")
[20:52:47.123]      // while-condition  =>  TRUE
[20:52:47.123]      // while "1"  (timeout="200")
[20:52:47.124]      // while-condition  =>  TRUE
[20:52:47.124]      // while "1"  (timeout="200")
[20:52:47.124]      // while-condition  =>  TRUE
[20:52:47.124]      // while "1"  (timeout="200")
[20:52:47.124]      // while-condition  =>  TRUE
[20:52:47.124]      // while "1"  (timeout="200")
[20:52:47.124]      // while-condition  =>  TRUE
[20:52:47.124]      // while "1"  (timeout="200")
[20:52:47.124]      // while-condition  =>  TRUE
[20:52:47.125]      // while "1"  (timeout="200")
[20:52:47.125]      // while-condition  =>  TRUE
[20:52:47.125]      // while "1"  (timeout="200")
[20:52:47.125]      // while-condition  =>  TRUE
[20:52:47.125]      // while "1"  (timeout="200")
[20:52:47.125]      // while-condition  =>  TRUE
[20:52:47.125]      // while "1"  (timeout="200")
[20:52:47.125]      // while-condition  =>  TRUE
[20:52:47.126]      // while "1"  (timeout="200")
[20:52:47.126]      // while-condition  =>  TRUE
[20:52:47.126]      // while "1"  (timeout="200")
[20:52:47.126]      // while-condition  =>  TRUE
[20:52:47.126]      // while "1"  (timeout="200")
[20:52:47.127]      // while-condition  =>  TRUE
[20:52:47.127]      // while "1"  (timeout="200")
[20:52:47.127]      // while-condition  =>  TRUE
[20:52:47.127]      // while "1"  (timeout="200")
[20:52:47.127]      // while-condition  =>  TRUE
[20:52:47.127]      // while "1"  (timeout="200")
[20:52:47.127]      // while  =>  TIMEOUT
[20:52:47.128]      // end while "1"
[20:52:47.128]    </control>
[20:52:47.128]    <control if="canReadPins" while="" timeout="0" info="">
[20:52:47.128]      // if-block "canReadPins"
[20:52:47.128]        // =>  TRUE
[20:52:47.128]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:52:47.128]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:52:47.130]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:52:47.130]        // while-condition  =>  FALSE
[20:52:47.131]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:52:47.131]      </control>
[20:52:47.131]      // end if-block "canReadPins"
[20:52:47.131]    </control>
[20:52:47.131]    <control if="!canReadPins" while="" timeout="0" info="">
[20:52:47.131]      // if-block "!canReadPins"
[20:52:47.131]        // =>  FALSE
[20:52:47.132]      // skip if-block "!canReadPins"
[20:52:47.132]    </control>
[20:52:47.132]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:52:47.132]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:52:47.132]        // =>  TRUE
[20:52:47.132]      <block atomic="false" info="">
[20:52:47.132]        WriteAP(0x00, 0x190008);
[20:52:47.135]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:52:47.135]        WriteAP(0xF0, 0x01);
[20:52:47.146]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:52:47.146]      </block>
[20:52:47.146]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:52:47.147]    </control>
[20:52:47.147]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:52:47.147]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:52:47.147]        // =>  FALSE
[20:52:47.147]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:52:47.147]    </control>
[20:52:47.147]    <block atomic="false" info="">
[20:52:47.147]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:52:47.160]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:52:47.160]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:52:47.160]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:52:47.162]      __ap = 0; //lets make sure we reset the access point selection
[20:52:47.162]        // -> [__ap <= 0x00000000]
[20:52:47.162]    </block>
[20:52:47.162]  </sequence>
[20:52:47.162]  
[20:52:47.219]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:52:47.219]  
[20:52:47.219]  <debugvars>
[20:52:47.219]    // Pre-defined
[20:52:47.219]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:52:47.219]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:52:47.219]    __dp=0x00000000
[20:52:47.219]    __ap=0x00000000
[20:52:47.219]    __traceout=0x00000000      (Trace Disabled)
[20:52:47.219]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:52:47.219]    __FlashAddr=0x00000000
[20:52:47.219]    __FlashLen=0x00000000
[20:52:47.219]    __FlashArg=0x00000000
[20:52:47.219]    __FlashOp=0x00000000
[20:52:47.219]    __Result=0x00000000
[20:52:47.219]  </debugvars>
[20:52:47.219]  
[20:52:47.219]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:52:47.219]    <block atomic="false" info="">
[20:52:47.219]      __var deviceID = 0;
[20:52:47.219]        // -> [deviceID <= 0x00000000]
[20:52:47.219]      __var version = 0;
[20:52:47.219]        // -> [version <= 0x00000000]
[20:52:47.219]      __var partNum = 0;
[20:52:47.219]        // -> [partNum <= 0x00000000]
[20:52:47.219]      __var manuf = 0;
[20:52:47.219]        // -> [manuf <= 0x00000000]
[20:52:47.219]      __var isMSPM0G1X0X_G3X0X = 0;
[20:52:47.219]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:52:47.219]      __var isProduction = 0;
[20:52:47.219]        // -> [isProduction <= 0x00000000]
[20:52:47.219]      __var continueId = 0;
[20:52:47.219]        // -> [continueId <= 0x00000000]
[20:52:47.219]      deviceID =   Read32(0x41C40004);
[20:52:47.238]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:52:47.238]        // -> [deviceID <= 0x2BB8802F]
[20:52:47.238]      version = deviceID >> 28;
[20:52:47.238]        // -> [version <= 0x00000002]
[20:52:47.238]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:52:47.238]        // -> [partNum <= 0x0000BB88]
[20:52:47.238]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:52:47.238]        // -> [manuf <= 0x00000017]
[20:52:47.238]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:52:47.238]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:52:47.238]      isProduction = (version > 0);
[20:52:47.238]        // -> [isProduction <= 0x00000001]
[20:52:47.238]    </block>
[20:52:47.238]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:52:47.238]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:52:47.238]        // =>  FALSE
[20:52:47.238]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:52:47.238]    </control>
[20:52:47.238]    <control if="continueId == 4" while="" timeout="0" info="">
[20:52:47.238]      // if-block "continueId == 4"
[20:52:47.238]        // =>  FALSE
[20:52:47.238]      // skip if-block "continueId == 4"
[20:52:47.238]    </control>
[20:52:47.238]    <control if="!isProduction" while="" timeout="0" info="">
[20:52:47.238]      // if-block "!isProduction"
[20:52:47.238]        // =>  FALSE
[20:52:47.238]      // skip if-block "!isProduction"
[20:52:47.238]    </control>
[20:52:47.238]  </sequence>
[20:52:47.248]  
[20:53:44.902]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:53:44.902]  
[20:53:44.910]  <debugvars>
[20:53:44.910]    // Pre-defined
[20:53:44.910]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:53:44.910]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:53:44.910]    __dp=0x00000000
[20:53:44.910]    __ap=0x00000000
[20:53:44.910]    __traceout=0x00000000      (Trace Disabled)
[20:53:44.910]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:53:44.910]    __FlashAddr=0x00000000
[20:53:44.911]    __FlashLen=0x00000000
[20:53:44.911]    __FlashArg=0x00000000
[20:53:44.911]    __FlashOp=0x00000000
[20:53:44.911]    __Result=0x00000000
[20:53:44.911]  </debugvars>
[20:53:44.911]  
[20:53:44.911]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:53:44.913]    <block atomic="false" info="">
[20:53:44.913]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:53:44.913]        // -> [isSWJ <= 0x00000001]
[20:53:44.913]      __var hasDormant = __protocol & 0x00020000;
[20:53:44.913]        // -> [hasDormant <= 0x00000000]
[20:53:44.913]      __var protType   = __protocol & 0x0000FFFF;
[20:53:44.914]        // -> [protType <= 0x00000002]
[20:53:44.914]    </block>
[20:53:44.914]    <control if="protType == 1" while="" timeout="0" info="">
[20:53:44.914]      // if-block "protType == 1"
[20:53:44.914]        // =>  FALSE
[20:53:44.914]      // skip if-block "protType == 1"
[20:53:44.914]    </control>
[20:53:44.914]    <control if="protType == 2" while="" timeout="0" info="">
[20:53:44.914]      // if-block "protType == 2"
[20:53:44.914]        // =>  TRUE
[20:53:44.914]      <control if="isSWJ" while="" timeout="0" info="">
[20:53:44.914]        // if-block "isSWJ"
[20:53:44.914]          // =>  TRUE
[20:53:44.915]        <control if="hasDormant" while="" timeout="0" info="">
[20:53:44.915]          // if-block "hasDormant"
[20:53:44.915]            // =>  FALSE
[20:53:44.915]          // skip if-block "hasDormant"
[20:53:44.915]        </control>
[20:53:44.915]        <control if="!hasDormant" while="" timeout="0" info="">
[20:53:44.915]          // if-block "!hasDormant"
[20:53:44.915]            // =>  TRUE
[20:53:44.915]          <block atomic="false" info="">
[20:53:44.915]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:53:44.917]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:53:44.917]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:53:44.920]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:53:44.920]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:53:44.923]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:53:44.923]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:53:44.923]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:53:44.923]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:53:44.929]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:53:44.929]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:53:44.935]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:53:44.935]          </block>
[20:53:44.935]          // end if-block "!hasDormant"
[20:53:44.935]        </control>
[20:53:44.935]        // end if-block "isSWJ"
[20:53:44.935]      </control>
[20:53:44.935]      <control if="!isSWJ" while="" timeout="0" info="">
[20:53:44.935]        // if-block "!isSWJ"
[20:53:44.938]          // =>  FALSE
[20:53:44.938]        // skip if-block "!isSWJ"
[20:53:44.938]      </control>
[20:53:44.938]      <block atomic="false" info="">
[20:53:44.939]        ReadDP(0x0);
[20:53:44.943]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:53:44.944]      </block>
[20:53:44.944]      // end if-block "protType == 2"
[20:53:44.944]    </control>
[20:53:44.944]  </sequence>
[20:53:44.944]  
[20:53:44.947]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:53:44.947]  
[20:53:44.947]  <debugvars>
[20:53:44.947]    // Pre-defined
[20:53:44.947]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:53:44.947]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:53:44.948]    __dp=0x00000000
[20:53:44.948]    __ap=0x00000000
[20:53:44.948]    __traceout=0x00000000      (Trace Disabled)
[20:53:44.948]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:53:44.948]    __FlashAddr=0x00000000
[20:53:44.948]    __FlashLen=0x00000000
[20:53:44.948]    __FlashArg=0x00000000
[20:53:44.948]    __FlashOp=0x00000000
[20:53:44.949]    __Result=0x00000000
[20:53:44.949]  </debugvars>
[20:53:44.949]  
[20:53:44.949]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:53:44.949]    <block atomic="false" info="">
[20:53:44.949]      __var SW_DP_ABORT       = 0x0;
[20:53:44.949]        // -> [SW_DP_ABORT <= 0x00000000]
[20:53:44.949]      __var DP_CTRL_STAT      = 0x4;
[20:53:44.950]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:53:44.950]      __var DP_SELECT         = 0x8;
[20:53:44.950]        // -> [DP_SELECT <= 0x00000008]
[20:53:44.950]      __var powered_down      = 0;
[20:53:44.950]        // -> [powered_down <= 0x00000000]
[20:53:44.950]      WriteDP(DP_SELECT, 0x00000000);
[20:53:44.953]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:53:44.954]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:53:44.956]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:53:44.956]        // -> [powered_down <= 0x00000001]
[20:53:44.956]    </block>
[20:53:44.957]    <control if="powered_down" while="" timeout="0" info="">
[20:53:44.957]      // if-block "powered_down"
[20:53:44.957]        // =>  TRUE
[20:53:44.957]      <block atomic="false" info="">
[20:53:44.957]        Message(0, "Debug/System power-up request sent");
[20:53:44.958]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:53:44.961]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:53:44.961]      </block>
[20:53:44.961]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:53:44.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:53:44.963]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:53:44.964]        // while-condition  =>  FALSE
[20:53:44.964]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:53:44.964]      </control>
[20:53:44.964]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:53:44.964]        // if-block "(__protocol & 0xFFFF) == 1"
[20:53:44.964]          // =>  FALSE
[20:53:44.964]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:53:44.964]      </control>
[20:53:44.965]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:53:44.965]        // if-block "(__protocol & 0xFFFF) == 2"
[20:53:44.965]          // =>  TRUE
[20:53:44.965]        <block atomic="false" info="">
[20:53:44.965]          Message(0, "executing SWD power up");
[20:53:44.967]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:53:44.968]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:53:44.968]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:53:44.970]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:53:44.970]        </block>
[20:53:44.970]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:53:44.970]      </control>
[20:53:44.970]      // end if-block "powered_down"
[20:53:44.970]    </control>
[20:53:44.970]    <block atomic="false" info="">
[20:53:44.970]      __var DEBUG_PORT_VAL    = 0;
[20:53:44.970]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:53:44.970]      __var ACCESS_POINT_VAL  = 0;
[20:53:44.970]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:53:44.970]      __ap = 1; 
[20:53:44.970]        // -> [__ap <= 0x00000001]
[20:53:44.970]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:53:44.974]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:53:44.974]      __ap = 4;
[20:53:44.974]        // -> [__ap <= 0x00000004]
[20:53:44.974]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:53:44.980]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:53:44.980]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:53:44.980]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:53:44.988]    </block>
[20:53:44.988]    <block atomic="false" info="">
[20:53:44.988]      __var nReset = 0x80;
[20:53:44.988]        // -> [nReset <= 0x00000080]
[20:53:44.988]      __var canReadPins = 0;
[20:53:44.988]        // -> [canReadPins <= 0x00000000]
[20:53:44.988]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:53:44.996]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:53:44.996]        // -> [canReadPins <= 0x00000001]
[20:53:44.996]    </block>
[20:53:44.996]    <control if="" while="1" timeout="200" info="">
[20:53:44.996]      // while "1"  (timeout="200")
[20:53:44.996]      // while-condition  =>  TRUE
[20:53:44.996]      // while "1"  (timeout="200")
[20:53:44.996]      // while-condition  =>  TRUE
[20:53:44.996]      // while "1"  (timeout="200")
[20:53:44.996]      // while-condition  =>  TRUE
[20:53:44.998]      // while "1"  (timeout="200")
[20:53:44.998]      // while-condition  =>  TRUE
[20:53:44.998]      // while "1"  (timeout="200")
[20:53:44.998]      // while-condition  =>  TRUE
[20:53:44.998]      // while "1"  (timeout="200")
[20:53:44.998]      // while-condition  =>  TRUE
[20:53:44.998]      // while "1"  (timeout="200")
[20:53:44.998]      // while-condition  =>  TRUE
[20:53:44.999]      // while "1"  (timeout="200")
[20:53:44.999]      // while-condition  =>  TRUE
[20:53:44.999]      // while "1"  (timeout="200")
[20:53:44.999]      // while-condition  =>  TRUE
[20:53:44.999]      // while "1"  (timeout="200")
[20:53:44.999]      // while-condition  =>  TRUE
[20:53:44.999]      // while "1"  (timeout="200")
[20:53:44.999]      // while-condition  =>  TRUE
[20:53:44.999]      // while "1"  (timeout="200")
[20:53:44.999]      // while-condition  =>  TRUE
[20:53:44.999]      // while "1"  (timeout="200")
[20:53:44.999]      // while-condition  =>  TRUE
[20:53:44.999]      // while "1"  (timeout="200")
[20:53:44.999]      // while-condition  =>  TRUE
[20:53:44.999]      // while "1"  (timeout="200")
[20:53:44.999]      // while-condition  =>  TRUE
[20:53:44.999]      // while "1"  (timeout="200")
[20:53:45.001]      // while-condition  =>  TRUE
[20:53:45.001]      // while "1"  (timeout="200")
[20:53:45.001]      // while-condition  =>  TRUE
[20:53:45.001]      // while "1"  (timeout="200")
[20:53:45.001]      // while-condition  =>  TRUE
[20:53:45.001]      // while "1"  (timeout="200")
[20:53:45.001]      // while-condition  =>  TRUE
[20:53:45.001]      // while "1"  (timeout="200")
[20:53:45.001]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.002]      // while "1"  (timeout="200")
[20:53:45.002]      // while-condition  =>  TRUE
[20:53:45.005]      // while "1"  (timeout="200")
[20:53:45.005]      // while  =>  TIMEOUT
[20:53:45.005]      // end while "1"
[20:53:45.005]    </control>
[20:53:45.005]    <control if="canReadPins" while="" timeout="0" info="">
[20:53:45.005]      // if-block "canReadPins"
[20:53:45.005]        // =>  TRUE
[20:53:45.005]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:53:45.005]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:53:45.009]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:53:45.009]        // while-condition  =>  FALSE
[20:53:45.009]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:53:45.009]      </control>
[20:53:45.009]      // end if-block "canReadPins"
[20:53:45.009]    </control>
[20:53:45.009]    <control if="!canReadPins" while="" timeout="0" info="">
[20:53:45.009]      // if-block "!canReadPins"
[20:53:45.009]        // =>  FALSE
[20:53:45.009]      // skip if-block "!canReadPins"
[20:53:45.011]    </control>
[20:53:45.011]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:53:45.011]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:53:45.011]        // =>  TRUE
[20:53:45.011]      <block atomic="false" info="">
[20:53:45.011]        WriteAP(0x00, 0x190008);
[20:53:45.018]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:53:45.018]        WriteAP(0xF0, 0x01);
[20:53:45.025]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:53:45.025]      </block>
[20:53:45.025]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:53:45.025]    </control>
[20:53:45.025]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:53:45.025]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:53:45.025]        // =>  FALSE
[20:53:45.025]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:53:45.025]    </control>
[20:53:45.025]    <block atomic="false" info="">
[20:53:45.026]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:53:45.031]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:53:45.032]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:53:45.032]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:53:45.033]      __ap = 0; //lets make sure we reset the access point selection
[20:53:45.033]        // -> [__ap <= 0x00000000]
[20:53:45.033]    </block>
[20:53:45.033]  </sequence>
[20:53:45.034]  
[20:53:45.072]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:53:45.072]  
[20:53:45.072]  <debugvars>
[20:53:45.072]    // Pre-defined
[20:53:45.072]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:53:45.072]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:53:45.072]    __dp=0x00000000
[20:53:45.072]    __ap=0x00000000
[20:53:45.072]    __traceout=0x00000000      (Trace Disabled)
[20:53:45.073]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:53:45.073]    __FlashAddr=0x00000000
[20:53:45.073]    __FlashLen=0x00000000
[20:53:45.073]    __FlashArg=0x00000000
[20:53:45.073]    __FlashOp=0x00000000
[20:53:45.073]    __Result=0x00000000
[20:53:45.073]  </debugvars>
[20:53:45.073]  
[20:53:45.073]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:53:45.073]    <block atomic="false" info="">
[20:53:45.073]      __var deviceID = 0;
[20:53:45.073]        // -> [deviceID <= 0x00000000]
[20:53:45.073]      __var version = 0;
[20:53:45.074]        // -> [version <= 0x00000000]
[20:53:45.074]      __var partNum = 0;
[20:53:45.074]        // -> [partNum <= 0x00000000]
[20:53:45.074]      __var manuf = 0;
[20:53:45.074]        // -> [manuf <= 0x00000000]
[20:53:45.074]      __var isMSPM0G1X0X_G3X0X = 0;
[20:53:45.074]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:53:45.074]      __var isProduction = 0;
[20:53:45.074]        // -> [isProduction <= 0x00000000]
[20:53:45.074]      __var continueId = 0;
[20:53:45.074]        // -> [continueId <= 0x00000000]
[20:53:45.074]      deviceID =   Read32(0x41C40004);
[20:53:45.095]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:53:45.095]        // -> [deviceID <= 0x2BB8802F]
[20:53:45.095]      version = deviceID >> 28;
[20:53:45.095]        // -> [version <= 0x00000002]
[20:53:45.095]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:53:45.095]        // -> [partNum <= 0x0000BB88]
[20:53:45.095]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:53:45.095]        // -> [manuf <= 0x00000017]
[20:53:45.095]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:53:45.095]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:53:45.095]      isProduction = (version > 0);
[20:53:45.095]        // -> [isProduction <= 0x00000001]
[20:53:45.095]    </block>
[20:53:45.095]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:53:45.095]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:53:45.095]        // =>  FALSE
[20:53:45.095]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:53:45.095]    </control>
[20:53:45.095]    <control if="continueId == 4" while="" timeout="0" info="">
[20:53:45.099]      // if-block "continueId == 4"
[20:53:45.099]        // =>  FALSE
[20:53:45.099]      // skip if-block "continueId == 4"
[20:53:45.099]    </control>
[20:53:45.099]    <control if="!isProduction" while="" timeout="0" info="">
[20:53:45.099]      // if-block "!isProduction"
[20:53:45.099]        // =>  FALSE
[20:53:45.099]      // skip if-block "!isProduction"
[20:53:45.099]    </control>
[20:53:45.099]  </sequence>
[20:53:45.099]  
[20:55:37.333]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:55:37.333]  
[20:55:37.333]  <debugvars>
[20:55:37.333]    // Pre-defined
[20:55:37.333]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:37.333]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:37.343]    __dp=0x00000000
[20:55:37.343]    __ap=0x00000000
[20:55:37.343]    __traceout=0x00000000      (Trace Disabled)
[20:55:37.343]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:37.343]    __FlashAddr=0x00000000
[20:55:37.343]    __FlashLen=0x00000000
[20:55:37.343]    __FlashArg=0x00000000
[20:55:37.343]    __FlashOp=0x00000000
[20:55:37.343]    __Result=0x00000000
[20:55:37.343]  </debugvars>
[20:55:37.343]  
[20:55:37.343]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:55:37.343]    <block atomic="false" info="">
[20:55:37.343]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:55:37.343]        // -> [isSWJ <= 0x00000001]
[20:55:37.343]      __var hasDormant = __protocol & 0x00020000;
[20:55:37.343]        // -> [hasDormant <= 0x00000000]
[20:55:37.343]      __var protType   = __protocol & 0x0000FFFF;
[20:55:37.343]        // -> [protType <= 0x00000002]
[20:55:37.343]    </block>
[20:55:37.343]    <control if="protType == 1" while="" timeout="0" info="">
[20:55:37.343]      // if-block "protType == 1"
[20:55:37.343]        // =>  FALSE
[20:55:37.343]      // skip if-block "protType == 1"
[20:55:37.343]    </control>
[20:55:37.343]    <control if="protType == 2" while="" timeout="0" info="">
[20:55:37.343]      // if-block "protType == 2"
[20:55:37.343]        // =>  TRUE
[20:55:37.343]      <control if="isSWJ" while="" timeout="0" info="">
[20:55:37.343]        // if-block "isSWJ"
[20:55:37.343]          // =>  TRUE
[20:55:37.343]        <control if="hasDormant" while="" timeout="0" info="">
[20:55:37.343]          // if-block "hasDormant"
[20:55:37.343]            // =>  FALSE
[20:55:37.343]          // skip if-block "hasDormant"
[20:55:37.343]        </control>
[20:55:37.343]        <control if="!hasDormant" while="" timeout="0" info="">
[20:55:37.343]          // if-block "!hasDormant"
[20:55:37.343]            // =>  TRUE
[20:55:37.343]          <block atomic="false" info="">
[20:55:37.343]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:55:37.343]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:37.343]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:55:37.343]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:55:37.343]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:55:37.353]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:37.353]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:55:37.353]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:55:37.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:55:37.353]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:37.353]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:55:37.353]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:55:37.353]          </block>
[20:55:37.353]          // end if-block "!hasDormant"
[20:55:37.353]        </control>
[20:55:37.353]        // end if-block "isSWJ"
[20:55:37.353]      </control>
[20:55:37.353]      <control if="!isSWJ" while="" timeout="0" info="">
[20:55:37.353]        // if-block "!isSWJ"
[20:55:37.353]          // =>  FALSE
[20:55:37.353]        // skip if-block "!isSWJ"
[20:55:37.353]      </control>
[20:55:37.353]      <block atomic="false" info="">
[20:55:37.353]        ReadDP(0x0);
[20:55:37.363]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:55:37.363]      </block>
[20:55:37.363]      // end if-block "protType == 2"
[20:55:37.363]    </control>
[20:55:37.363]  </sequence>
[20:55:37.363]  
[20:55:37.363]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:55:37.363]  
[20:55:37.363]  <debugvars>
[20:55:37.363]    // Pre-defined
[20:55:37.363]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:37.363]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:37.363]    __dp=0x00000000
[20:55:37.363]    __ap=0x00000000
[20:55:37.363]    __traceout=0x00000000      (Trace Disabled)
[20:55:37.363]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:37.363]    __FlashAddr=0x00000000
[20:55:37.363]    __FlashLen=0x00000000
[20:55:37.363]    __FlashArg=0x00000000
[20:55:37.363]    __FlashOp=0x00000000
[20:55:37.363]    __Result=0x00000000
[20:55:37.363]  </debugvars>
[20:55:37.363]  
[20:55:37.363]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:55:37.363]    <block atomic="false" info="">
[20:55:37.363]      __var SW_DP_ABORT       = 0x0;
[20:55:37.363]        // -> [SW_DP_ABORT <= 0x00000000]
[20:55:37.363]      __var DP_CTRL_STAT      = 0x4;
[20:55:37.363]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:55:37.363]      __var DP_SELECT         = 0x8;
[20:55:37.363]        // -> [DP_SELECT <= 0x00000008]
[20:55:37.363]      __var powered_down      = 0;
[20:55:37.363]        // -> [powered_down <= 0x00000000]
[20:55:37.363]      WriteDP(DP_SELECT, 0x00000000);
[20:55:37.363]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:55:37.363]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:55:37.373]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:55:37.373]        // -> [powered_down <= 0x00000001]
[20:55:37.373]    </block>
[20:55:37.373]    <control if="powered_down" while="" timeout="0" info="">
[20:55:37.373]      // if-block "powered_down"
[20:55:37.373]        // =>  TRUE
[20:55:37.373]      <block atomic="false" info="">
[20:55:37.373]        Message(0, "Debug/System power-up request sent");
[20:55:37.373]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:55:37.373]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:55:37.373]      </block>
[20:55:37.373]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:55:37.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:55:37.383]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:55:37.383]        // while-condition  =>  FALSE
[20:55:37.383]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:55:37.383]      </control>
[20:55:37.383]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:55:37.383]        // if-block "(__protocol & 0xFFFF) == 1"
[20:55:37.383]          // =>  FALSE
[20:55:37.383]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:55:37.383]      </control>
[20:55:37.383]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:55:37.383]        // if-block "(__protocol & 0xFFFF) == 2"
[20:55:37.383]          // =>  TRUE
[20:55:37.383]        <block atomic="false" info="">
[20:55:37.383]          Message(0, "executing SWD power up");
[20:55:37.383]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:55:37.383]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:55:37.383]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:55:37.383]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:55:37.383]        </block>
[20:55:37.383]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:55:37.383]      </control>
[20:55:37.383]      // end if-block "powered_down"
[20:55:37.383]    </control>
[20:55:37.383]    <block atomic="false" info="">
[20:55:37.383]      __var DEBUG_PORT_VAL    = 0;
[20:55:37.383]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:55:37.383]      __var ACCESS_POINT_VAL  = 0;
[20:55:37.383]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:55:37.383]      __ap = 1; 
[20:55:37.383]        // -> [__ap <= 0x00000001]
[20:55:37.383]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:55:37.393]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:55:37.393]      __ap = 4;
[20:55:37.393]        // -> [__ap <= 0x00000004]
[20:55:37.393]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:55:37.393]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:55:37.393]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:55:37.393]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:55:37.393]    </block>
[20:55:37.393]    <block atomic="false" info="">
[20:55:37.393]      __var nReset = 0x80;
[20:55:37.393]        // -> [nReset <= 0x00000080]
[20:55:37.393]      __var canReadPins = 0;
[20:55:37.393]        // -> [canReadPins <= 0x00000000]
[20:55:37.393]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:55:37.403]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:55:37.403]        // -> [canReadPins <= 0x00000001]
[20:55:37.403]    </block>
[20:55:37.403]    <control if="" while="1" timeout="200" info="">
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.403]      // while "1"  (timeout="200")
[20:55:37.403]      // while-condition  =>  TRUE
[20:55:37.413]      // while "1"  (timeout="200")
[20:55:37.413]      // while  =>  TIMEOUT
[20:55:37.413]      // end while "1"
[20:55:37.413]    </control>
[20:55:37.413]    <control if="canReadPins" while="" timeout="0" info="">
[20:55:37.413]      // if-block "canReadPins"
[20:55:37.413]        // =>  TRUE
[20:55:37.413]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:55:37.413]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:55:37.413]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:55:37.413]        // while-condition  =>  FALSE
[20:55:37.413]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:55:37.413]      </control>
[20:55:37.413]      // end if-block "canReadPins"
[20:55:37.413]    </control>
[20:55:37.413]    <control if="!canReadPins" while="" timeout="0" info="">
[20:55:37.413]      // if-block "!canReadPins"
[20:55:37.413]        // =>  FALSE
[20:55:37.413]      // skip if-block "!canReadPins"
[20:55:37.413]    </control>
[20:55:37.413]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:55:37.413]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:55:37.413]        // =>  TRUE
[20:55:37.413]      <block atomic="false" info="">
[20:55:37.413]        WriteAP(0x00, 0x190008);
[20:55:37.413]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:55:37.413]        WriteAP(0xF0, 0x01);
[20:55:37.413]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:55:37.413]      </block>
[20:55:37.413]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:55:37.413]    </control>
[20:55:37.413]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:55:37.423]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:55:37.423]        // =>  FALSE
[20:55:37.423]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:55:37.423]    </control>
[20:55:37.423]    <block atomic="false" info="">
[20:55:37.423]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:55:37.423]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:55:37.423]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:55:37.423]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:55:37.423]      __ap = 0; //lets make sure we reset the access point selection
[20:55:37.423]        // -> [__ap <= 0x00000000]
[20:55:37.423]    </block>
[20:55:37.423]  </sequence>
[20:55:37.423]  
[20:55:37.443]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:55:37.443]  
[20:55:37.443]  <debugvars>
[20:55:37.443]    // Pre-defined
[20:55:37.443]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:37.443]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:37.443]    __dp=0x00000000
[20:55:37.443]    __ap=0x00000000
[20:55:37.443]    __traceout=0x00000000      (Trace Disabled)
[20:55:37.443]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:37.443]    __FlashAddr=0x00000000
[20:55:37.443]    __FlashLen=0x00000000
[20:55:37.443]    __FlashArg=0x00000000
[20:55:37.443]    __FlashOp=0x00000000
[20:55:37.443]    __Result=0x00000000
[20:55:37.443]  </debugvars>
[20:55:37.443]  
[20:55:37.443]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:55:37.443]    <block atomic="false" info="">
[20:55:37.443]      __var deviceID = 0;
[20:55:37.443]        // -> [deviceID <= 0x00000000]
[20:55:37.443]      __var version = 0;
[20:55:37.443]        // -> [version <= 0x00000000]
[20:55:37.443]      __var partNum = 0;
[20:55:37.443]        // -> [partNum <= 0x00000000]
[20:55:37.443]      __var manuf = 0;
[20:55:37.453]        // -> [manuf <= 0x00000000]
[20:55:37.453]      __var isMSPM0G1X0X_G3X0X = 0;
[20:55:37.453]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:55:37.453]      __var isProduction = 0;
[20:55:37.453]        // -> [isProduction <= 0x00000000]
[20:55:37.453]      __var continueId = 0;
[20:55:37.453]        // -> [continueId <= 0x00000000]
[20:55:37.453]      deviceID =   Read32(0x41C40004);
[20:55:37.463]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:55:37.463]        // -> [deviceID <= 0x2BB8802F]
[20:55:37.463]      version = deviceID >> 28;
[20:55:37.463]        // -> [version <= 0x00000002]
[20:55:37.463]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:55:37.463]        // -> [partNum <= 0x0000BB88]
[20:55:37.463]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:55:37.463]        // -> [manuf <= 0x00000017]
[20:55:37.463]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:55:37.463]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:55:37.463]      isProduction = (version > 0);
[20:55:37.463]        // -> [isProduction <= 0x00000001]
[20:55:37.463]    </block>
[20:55:37.463]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:55:37.463]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:55:37.463]        // =>  FALSE
[20:55:37.463]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:55:37.463]    </control>
[20:55:37.463]    <control if="continueId == 4" while="" timeout="0" info="">
[20:55:37.463]      // if-block "continueId == 4"
[20:55:37.463]        // =>  FALSE
[20:55:37.463]      // skip if-block "continueId == 4"
[20:55:37.463]    </control>
[20:55:37.463]    <control if="!isProduction" while="" timeout="0" info="">
[20:55:37.463]      // if-block "!isProduction"
[20:55:37.463]        // =>  FALSE
[20:55:37.463]      // skip if-block "!isProduction"
[20:55:37.463]    </control>
[20:55:37.463]  </sequence>
[20:55:37.463]  
[21:00:02.383]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:00:02.383]  
[21:00:02.395]  <debugvars>
[21:00:02.395]    // Pre-defined
[21:00:02.395]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:00:02.395]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:00:02.395]    __dp=0x00000000
[21:00:02.395]    __ap=0x00000000
[21:00:02.395]    __traceout=0x00000000      (Trace Disabled)
[21:00:02.395]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:00:02.395]    __FlashAddr=0x00000000
[21:00:02.395]    __FlashLen=0x00000000
[21:00:02.395]    __FlashArg=0x00000000
[21:00:02.395]    __FlashOp=0x00000000
[21:00:02.395]    __Result=0x00000000
[21:00:02.395]  </debugvars>
[21:00:02.395]  
[21:00:02.395]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:00:02.395]    <block atomic="false" info="">
[21:00:02.395]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:00:02.395]        // -> [isSWJ <= 0x00000001]
[21:00:02.395]      __var hasDormant = __protocol & 0x00020000;
[21:00:02.395]        // -> [hasDormant <= 0x00000000]
[21:00:02.395]      __var protType   = __protocol & 0x0000FFFF;
[21:00:02.395]        // -> [protType <= 0x00000002]
[21:00:02.395]    </block>
[21:00:02.395]    <control if="protType == 1" while="" timeout="0" info="">
[21:00:02.395]      // if-block "protType == 1"
[21:00:02.395]        // =>  FALSE
[21:00:02.395]      // skip if-block "protType == 1"
[21:00:02.395]    </control>
[21:00:02.395]    <control if="protType == 2" while="" timeout="0" info="">
[21:00:02.395]      // if-block "protType == 2"
[21:00:02.395]        // =>  TRUE
[21:00:02.395]      <control if="isSWJ" while="" timeout="0" info="">
[21:00:02.395]        // if-block "isSWJ"
[21:00:02.395]          // =>  TRUE
[21:00:02.395]        <control if="hasDormant" while="" timeout="0" info="">
[21:00:02.395]          // if-block "hasDormant"
[21:00:02.395]            // =>  FALSE
[21:00:02.395]          // skip if-block "hasDormant"
[21:00:02.395]        </control>
[21:00:02.395]        <control if="!hasDormant" while="" timeout="0" info="">
[21:00:02.395]          // if-block "!hasDormant"
[21:00:02.395]            // =>  TRUE
[21:00:02.395]          <block atomic="false" info="">
[21:00:02.395]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:00:02.403]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:00:02.403]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:00:02.403]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:00:02.403]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:00:02.403]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:00:02.403]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:00:02.403]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:00:02.403]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:00:02.403]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:00:02.403]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:00:02.403]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:00:02.403]          </block>
[21:00:02.413]          // end if-block "!hasDormant"
[21:00:02.413]        </control>
[21:00:02.413]        // end if-block "isSWJ"
[21:00:02.413]      </control>
[21:00:02.413]      <control if="!isSWJ" while="" timeout="0" info="">
[21:00:02.413]        // if-block "!isSWJ"
[21:00:02.413]          // =>  FALSE
[21:00:02.413]        // skip if-block "!isSWJ"
[21:00:02.414]      </control>
[21:00:02.414]      <block atomic="false" info="">
[21:00:02.414]        ReadDP(0x0);
[21:00:02.414]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:00:02.414]      </block>
[21:00:02.414]      // end if-block "protType == 2"
[21:00:02.414]    </control>
[21:00:02.414]  </sequence>
[21:00:02.414]  
[21:00:02.414]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:00:02.414]  
[21:00:02.414]  <debugvars>
[21:00:02.414]    // Pre-defined
[21:00:02.414]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:00:02.414]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:00:02.414]    __dp=0x00000000
[21:00:02.414]    __ap=0x00000000
[21:00:02.414]    __traceout=0x00000000      (Trace Disabled)
[21:00:02.414]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:00:02.414]    __FlashAddr=0x00000000
[21:00:02.414]    __FlashLen=0x00000000
[21:00:02.414]    __FlashArg=0x00000000
[21:00:02.414]    __FlashOp=0x00000000
[21:00:02.414]    __Result=0x00000000
[21:00:02.414]  </debugvars>
[21:00:02.414]  
[21:00:02.414]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:00:02.414]    <block atomic="false" info="">
[21:00:02.414]      __var SW_DP_ABORT       = 0x0;
[21:00:02.414]        // -> [SW_DP_ABORT <= 0x00000000]
[21:00:02.414]      __var DP_CTRL_STAT      = 0x4;
[21:00:02.414]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:00:02.414]      __var DP_SELECT         = 0x8;
[21:00:02.414]        // -> [DP_SELECT <= 0x00000008]
[21:00:02.414]      __var powered_down      = 0;
[21:00:02.414]        // -> [powered_down <= 0x00000000]
[21:00:02.414]      WriteDP(DP_SELECT, 0x00000000);
[21:00:02.423]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:00:02.423]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:00:02.423]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:00:02.423]        // -> [powered_down <= 0x00000001]
[21:00:02.423]    </block>
[21:00:02.423]    <control if="powered_down" while="" timeout="0" info="">
[21:00:02.423]      // if-block "powered_down"
[21:00:02.423]        // =>  TRUE
[21:00:02.423]      <block atomic="false" info="">
[21:00:02.423]        Message(0, "Debug/System power-up request sent");
[21:00:02.423]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:00:02.423]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:00:02.423]      </block>
[21:00:02.423]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:00:02.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:00:02.423]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:00:02.423]        // while-condition  =>  FALSE
[21:00:02.423]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:00:02.423]      </control>
[21:00:02.423]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:00:02.423]        // if-block "(__protocol & 0xFFFF) == 1"
[21:00:02.423]          // =>  FALSE
[21:00:02.423]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:00:02.433]      </control>
[21:00:02.433]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:00:02.433]        // if-block "(__protocol & 0xFFFF) == 2"
[21:00:02.433]          // =>  TRUE
[21:00:02.433]        <block atomic="false" info="">
[21:00:02.433]          Message(0, "executing SWD power up");
[21:00:02.433]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:00:02.433]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:00:02.433]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:00:02.433]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:00:02.433]        </block>
[21:00:02.433]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:00:02.433]      </control>
[21:00:02.433]      // end if-block "powered_down"
[21:00:02.433]    </control>
[21:00:02.433]    <block atomic="false" info="">
[21:00:02.433]      __var DEBUG_PORT_VAL    = 0;
[21:00:02.433]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:00:02.433]      __var ACCESS_POINT_VAL  = 0;
[21:00:02.433]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:00:02.433]      __ap = 1; 
[21:00:02.433]        // -> [__ap <= 0x00000001]
[21:00:02.433]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:00:02.443]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:00:02.443]      __ap = 4;
[21:00:02.443]        // -> [__ap <= 0x00000004]
[21:00:02.443]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:00:02.443]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:00:02.443]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:00:02.443]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:00:02.443]    </block>
[21:00:02.443]    <block atomic="false" info="">
[21:00:02.443]      __var nReset = 0x80;
[21:00:02.443]        // -> [nReset <= 0x00000080]
[21:00:02.443]      __var canReadPins = 0;
[21:00:02.443]        // -> [canReadPins <= 0x00000000]
[21:00:02.443]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:00:02.443]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:00:02.443]        // -> [canReadPins <= 0x00000001]
[21:00:02.443]    </block>
[21:00:02.443]    <control if="" while="1" timeout="200" info="">
[21:00:02.443]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.454]      // while "1"  (timeout="200")
[21:00:02.454]      // while-condition  =>  TRUE
[21:00:02.464]      // while "1"  (timeout="200")
[21:00:02.464]      // while  =>  TIMEOUT
[21:00:02.464]      // end while "1"
[21:00:02.464]    </control>
[21:00:02.464]    <control if="canReadPins" while="" timeout="0" info="">
[21:00:02.464]      // if-block "canReadPins"
[21:00:02.464]        // =>  TRUE
[21:00:02.464]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:00:02.464]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:00:02.464]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:00:02.464]        // while-condition  =>  FALSE
[21:00:02.464]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:00:02.464]      </control>
[21:00:02.464]      // end if-block "canReadPins"
[21:00:02.464]    </control>
[21:00:02.464]    <control if="!canReadPins" while="" timeout="0" info="">
[21:00:02.464]      // if-block "!canReadPins"
[21:00:02.464]        // =>  FALSE
[21:00:02.464]      // skip if-block "!canReadPins"
[21:00:02.464]    </control>
[21:00:02.464]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:00:02.464]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:00:02.464]        // =>  TRUE
[21:00:02.464]      <block atomic="false" info="">
[21:00:02.464]        WriteAP(0x00, 0x190008);
[21:00:02.464]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:00:02.464]        WriteAP(0xF0, 0x01);
[21:00:02.474]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:00:02.474]      </block>
[21:00:02.474]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:00:02.474]    </control>
[21:00:02.474]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:00:02.474]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:00:02.474]        // =>  FALSE
[21:00:02.474]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:00:02.474]    </control>
[21:00:02.474]    <block atomic="false" info="">
[21:00:02.474]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:00:02.474]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:00:02.474]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:00:02.474]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:00:02.474]      __ap = 0; //lets make sure we reset the access point selection
[21:00:02.474]        // -> [__ap <= 0x00000000]
[21:00:02.474]    </block>
[21:00:02.474]  </sequence>
[21:00:02.474]  
[21:00:02.496]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:00:02.496]  
[21:00:02.496]  <debugvars>
[21:00:02.496]    // Pre-defined
[21:00:02.496]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:00:02.496]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:00:02.496]    __dp=0x00000000
[21:00:02.496]    __ap=0x00000000
[21:00:02.504]    __traceout=0x00000000      (Trace Disabled)
[21:00:02.504]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:00:02.504]    __FlashAddr=0x00000000
[21:00:02.504]    __FlashLen=0x00000000
[21:00:02.504]    __FlashArg=0x00000000
[21:00:02.504]    __FlashOp=0x00000000
[21:00:02.504]    __Result=0x00000000
[21:00:02.504]  </debugvars>
[21:00:02.504]  
[21:00:02.504]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:00:02.504]    <block atomic="false" info="">
[21:00:02.504]      __var deviceID = 0;
[21:00:02.504]        // -> [deviceID <= 0x00000000]
[21:00:02.504]      __var version = 0;
[21:00:02.504]        // -> [version <= 0x00000000]
[21:00:02.504]      __var partNum = 0;
[21:00:02.504]        // -> [partNum <= 0x00000000]
[21:00:02.504]      __var manuf = 0;
[21:00:02.504]        // -> [manuf <= 0x00000000]
[21:00:02.504]      __var isMSPM0G1X0X_G3X0X = 0;
[21:00:02.504]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:00:02.504]      __var isProduction = 0;
[21:00:02.504]        // -> [isProduction <= 0x00000000]
[21:00:02.504]      __var continueId = 0;
[21:00:02.504]        // -> [continueId <= 0x00000000]
[21:00:02.504]      deviceID =   Read32(0x41C40004);
[21:00:02.504]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:00:02.504]        // -> [deviceID <= 0x2BB8802F]
[21:00:02.504]      version = deviceID >> 28;
[21:00:02.504]        // -> [version <= 0x00000002]
[21:00:02.504]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:00:02.504]        // -> [partNum <= 0x0000BB88]
[21:00:02.504]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:00:02.504]        // -> [manuf <= 0x00000017]
[21:00:02.504]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:00:02.504]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:00:02.504]      isProduction = (version > 0);
[21:00:02.504]        // -> [isProduction <= 0x00000001]
[21:00:02.504]    </block>
[21:00:02.504]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:00:02.504]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:00:02.514]        // =>  FALSE
[21:00:02.514]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:00:02.514]    </control>
[21:00:02.514]    <control if="continueId == 4" while="" timeout="0" info="">
[21:00:02.514]      // if-block "continueId == 4"
[21:00:02.514]        // =>  FALSE
[21:00:02.514]      // skip if-block "continueId == 4"
[21:00:02.514]    </control>
[21:00:02.514]    <control if="!isProduction" while="" timeout="0" info="">
[21:00:02.514]      // if-block "!isProduction"
[21:00:02.514]        // =>  FALSE
[21:00:02.514]      // skip if-block "!isProduction"
[21:00:02.514]    </control>
[21:00:02.514]  </sequence>
[21:00:02.514]  
[21:19:27.447]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:19:27.447]  
[21:19:27.447]  <debugvars>
[21:19:27.448]    // Pre-defined
[21:19:27.448]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:19:27.448]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:19:27.448]    __dp=0x00000000
[21:19:27.448]    __ap=0x00000000
[21:19:27.448]    __traceout=0x00000000      (Trace Disabled)
[21:19:27.448]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:19:27.448]    __FlashAddr=0x00000000
[21:19:27.449]    __FlashLen=0x00000000
[21:19:27.449]    __FlashArg=0x00000000
[21:19:27.449]    __FlashOp=0x00000000
[21:19:27.449]    __Result=0x00000000
[21:19:27.449]  </debugvars>
[21:19:27.449]  
[21:19:27.449]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:19:27.449]    <block atomic="false" info="">
[21:19:27.449]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:19:27.450]        // -> [isSWJ <= 0x00000001]
[21:19:27.450]      __var hasDormant = __protocol & 0x00020000;
[21:19:27.450]        // -> [hasDormant <= 0x00000000]
[21:19:27.450]      __var protType   = __protocol & 0x0000FFFF;
[21:19:27.450]        // -> [protType <= 0x00000002]
[21:19:27.450]    </block>
[21:19:27.450]    <control if="protType == 1" while="" timeout="0" info="">
[21:19:27.450]      // if-block "protType == 1"
[21:19:27.451]        // =>  FALSE
[21:19:27.451]      // skip if-block "protType == 1"
[21:19:27.451]    </control>
[21:19:27.451]    <control if="protType == 2" while="" timeout="0" info="">
[21:19:27.451]      // if-block "protType == 2"
[21:19:27.451]        // =>  TRUE
[21:19:27.451]      <control if="isSWJ" while="" timeout="0" info="">
[21:19:27.452]        // if-block "isSWJ"
[21:19:27.452]          // =>  TRUE
[21:19:27.452]        <control if="hasDormant" while="" timeout="0" info="">
[21:19:27.452]          // if-block "hasDormant"
[21:19:27.452]            // =>  FALSE
[21:19:27.452]          // skip if-block "hasDormant"
[21:19:27.452]        </control>
[21:19:27.452]        <control if="!hasDormant" while="" timeout="0" info="">
[21:19:27.452]          // if-block "!hasDormant"
[21:19:27.453]            // =>  TRUE
[21:19:27.453]          <block atomic="false" info="">
[21:19:27.453]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:19:27.454]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:19:27.455]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:19:27.456]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:19:27.457]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:19:27.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:19:27.458]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:19:27.460]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:19:27.460]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:19:27.462]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:19:27.462]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:19:27.463]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:19:27.464]          </block>
[21:19:27.464]          // end if-block "!hasDormant"
[21:19:27.464]        </control>
[21:19:27.464]        // end if-block "isSWJ"
[21:19:27.464]      </control>
[21:19:27.464]      <control if="!isSWJ" while="" timeout="0" info="">
[21:19:27.464]        // if-block "!isSWJ"
[21:19:27.464]          // =>  FALSE
[21:19:27.465]        // skip if-block "!isSWJ"
[21:19:27.465]      </control>
[21:19:27.465]      <block atomic="false" info="">
[21:19:27.465]        ReadDP(0x0);
[21:19:27.465]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:19:27.465]      </block>
[21:19:27.465]      // end if-block "protType == 2"
[21:19:27.465]    </control>
[21:19:27.465]  </sequence>
[21:19:27.467]  
[21:19:27.470]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:19:27.470]  
[21:19:27.470]  <debugvars>
[21:19:27.470]    // Pre-defined
[21:19:27.470]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:19:27.471]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:19:27.471]    __dp=0x00000000
[21:19:27.471]    __ap=0x00000000
[21:19:27.471]    __traceout=0x00000000      (Trace Disabled)
[21:19:27.471]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:19:27.471]    __FlashAddr=0x00000000
[21:19:27.471]    __FlashLen=0x00000000
[21:19:27.472]    __FlashArg=0x00000000
[21:19:27.472]    __FlashOp=0x00000000
[21:19:27.472]    __Result=0x00000000
[21:19:27.472]  </debugvars>
[21:19:27.472]  
[21:19:27.472]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:19:27.472]    <block atomic="false" info="">
[21:19:27.472]      __var SW_DP_ABORT       = 0x0;
[21:19:27.472]        // -> [SW_DP_ABORT <= 0x00000000]
[21:19:27.472]      __var DP_CTRL_STAT      = 0x4;
[21:19:27.472]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:19:27.472]      __var DP_SELECT         = 0x8;
[21:19:27.472]        // -> [DP_SELECT <= 0x00000008]
[21:19:27.472]      __var powered_down      = 0;
[21:19:27.472]        // -> [powered_down <= 0x00000000]
[21:19:27.472]      WriteDP(DP_SELECT, 0x00000000);
[21:19:27.476]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:19:27.476]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:19:27.476]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:19:27.476]        // -> [powered_down <= 0x00000001]
[21:19:27.476]    </block>
[21:19:27.476]    <control if="powered_down" while="" timeout="0" info="">
[21:19:27.476]      // if-block "powered_down"
[21:19:27.476]        // =>  TRUE
[21:19:27.476]      <block atomic="false" info="">
[21:19:27.476]        Message(0, "Debug/System power-up request sent");
[21:19:27.476]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:19:27.476]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:19:27.476]      </block>
[21:19:27.486]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:19:27.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:19:27.486]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:19:27.486]        // while-condition  =>  FALSE
[21:19:27.486]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:19:27.486]      </control>
[21:19:27.486]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:19:27.486]        // if-block "(__protocol & 0xFFFF) == 1"
[21:19:27.486]          // =>  FALSE
[21:19:27.486]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:19:27.486]      </control>
[21:19:27.486]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:19:27.486]        // if-block "(__protocol & 0xFFFF) == 2"
[21:19:27.486]          // =>  TRUE
[21:19:27.486]        <block atomic="false" info="">
[21:19:27.486]          Message(0, "executing SWD power up");
[21:19:27.491]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:19:27.495]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:19:27.495]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:19:27.497]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:19:27.497]        </block>
[21:19:27.498]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:19:27.498]      </control>
[21:19:27.498]      // end if-block "powered_down"
[21:19:27.498]    </control>
[21:19:27.498]    <block atomic="false" info="">
[21:19:27.498]      __var DEBUG_PORT_VAL    = 0;
[21:19:27.498]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:19:27.498]      __var ACCESS_POINT_VAL  = 0;
[21:19:27.498]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:19:27.498]      __ap = 1; 
[21:19:27.499]        // -> [__ap <= 0x00000001]
[21:19:27.499]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:19:27.506]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:19:27.506]      __ap = 4;
[21:19:27.506]        // -> [__ap <= 0x00000004]
[21:19:27.506]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:19:27.506]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:19:27.510]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:19:27.510]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:19:27.511]    </block>
[21:19:27.511]    <block atomic="false" info="">
[21:19:27.511]      __var nReset = 0x80;
[21:19:27.511]        // -> [nReset <= 0x00000080]
[21:19:27.511]      __var canReadPins = 0;
[21:19:27.511]        // -> [canReadPins <= 0x00000000]
[21:19:27.511]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:19:27.511]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:19:27.511]        // -> [canReadPins <= 0x00000001]
[21:19:27.511]    </block>
[21:19:27.511]    <control if="" while="1" timeout="200" info="">
[21:19:27.511]      // while "1"  (timeout="200")
[21:19:27.511]      // while-condition  =>  TRUE
[21:19:27.511]      // while "1"  (timeout="200")
[21:19:27.511]      // while-condition  =>  TRUE
[21:19:27.515]      // while "1"  (timeout="200")
[21:19:27.515]      // while-condition  =>  TRUE
[21:19:27.515]      // while "1"  (timeout="200")
[21:19:27.515]      // while-condition  =>  TRUE
[21:19:27.515]      // while "1"  (timeout="200")
[21:19:27.515]      // while-condition  =>  TRUE
[21:19:27.515]      // while "1"  (timeout="200")
[21:19:27.515]      // while-condition  =>  TRUE
[21:19:27.516]      // while "1"  (timeout="200")
[21:19:27.516]      // while-condition  =>  TRUE
[21:19:27.516]      // while "1"  (timeout="200")
[21:19:27.516]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.517]      // while "1"  (timeout="200")
[21:19:27.517]      // while-condition  =>  TRUE
[21:19:27.522]      // while "1"  (timeout="200")
[21:19:27.522]      // while  =>  TIMEOUT
[21:19:27.522]      // end while "1"
[21:19:27.522]    </control>
[21:19:27.522]    <control if="canReadPins" while="" timeout="0" info="">
[21:19:27.522]      // if-block "canReadPins"
[21:19:27.522]        // =>  TRUE
[21:19:27.522]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:19:27.522]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:19:27.522]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:19:27.522]        // while-condition  =>  FALSE
[21:19:27.522]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:19:27.522]      </control>
[21:19:27.522]      // end if-block "canReadPins"
[21:19:27.522]    </control>
[21:19:27.522]    <control if="!canReadPins" while="" timeout="0" info="">
[21:19:27.522]      // if-block "!canReadPins"
[21:19:27.522]        // =>  FALSE
[21:19:27.522]      // skip if-block "!canReadPins"
[21:19:27.522]    </control>
[21:19:27.522]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:19:27.522]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:19:27.522]        // =>  TRUE
[21:19:27.522]      <block atomic="false" info="">
[21:19:27.522]        WriteAP(0x00, 0x190008);
[21:19:27.527]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:19:27.527]        WriteAP(0xF0, 0x01);
[21:19:27.527]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:19:27.527]      </block>
[21:19:27.527]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:19:27.527]    </control>
[21:19:27.527]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:19:27.527]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:19:27.527]        // =>  FALSE
[21:19:27.527]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:19:27.527]    </control>
[21:19:27.527]    <block atomic="false" info="">
[21:19:27.527]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:19:27.536]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:19:27.536]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:19:27.536]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:19:27.539]      __ap = 0; //lets make sure we reset the access point selection
[21:19:27.539]        // -> [__ap <= 0x00000000]
[21:19:27.539]    </block>
[21:19:27.539]  </sequence>
[21:19:27.539]  
[21:19:27.560]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:19:27.560]  
[21:19:27.560]  <debugvars>
[21:19:27.560]    // Pre-defined
[21:19:27.560]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:19:27.560]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:19:27.560]    __dp=0x00000000
[21:19:27.560]    __ap=0x00000000
[21:19:27.560]    __traceout=0x00000000      (Trace Disabled)
[21:19:27.560]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:19:27.560]    __FlashAddr=0x00000000
[21:19:27.566]    __FlashLen=0x00000000
[21:19:27.566]    __FlashArg=0x00000000
[21:19:27.566]    __FlashOp=0x00000000
[21:19:27.566]    __Result=0x00000000
[21:19:27.566]  </debugvars>
[21:19:27.566]  
[21:19:27.566]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:19:27.566]    <block atomic="false" info="">
[21:19:27.566]      __var deviceID = 0;
[21:19:27.566]        // -> [deviceID <= 0x00000000]
[21:19:27.566]      __var version = 0;
[21:19:27.566]        // -> [version <= 0x00000000]
[21:19:27.566]      __var partNum = 0;
[21:19:27.566]        // -> [partNum <= 0x00000000]
[21:19:27.566]      __var manuf = 0;
[21:19:27.566]        // -> [manuf <= 0x00000000]
[21:19:27.568]      __var isMSPM0G1X0X_G3X0X = 0;
[21:19:27.568]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:19:27.568]      __var isProduction = 0;
[21:19:27.568]        // -> [isProduction <= 0x00000000]
[21:19:27.568]      __var continueId = 0;
[21:19:27.568]        // -> [continueId <= 0x00000000]
[21:19:27.568]      deviceID =   Read32(0x41C40004);
[21:19:27.571]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:19:27.571]        // -> [deviceID <= 0x2BB8802F]
[21:19:27.571]      version = deviceID >> 28;
[21:19:27.571]        // -> [version <= 0x00000002]
[21:19:27.571]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:19:27.571]        // -> [partNum <= 0x0000BB88]
[21:19:27.571]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:19:27.571]        // -> [manuf <= 0x00000017]
[21:19:27.571]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:19:27.571]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:19:27.571]      isProduction = (version > 0);
[21:19:27.571]        // -> [isProduction <= 0x00000001]
[21:19:27.571]    </block>
[21:19:27.571]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:19:27.571]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:19:27.571]        // =>  FALSE
[21:19:27.571]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:19:27.571]    </control>
[21:19:27.571]    <control if="continueId == 4" while="" timeout="0" info="">
[21:19:27.571]      // if-block "continueId == 4"
[21:19:27.571]        // =>  FALSE
[21:19:27.571]      // skip if-block "continueId == 4"
[21:19:27.576]    </control>
[21:19:27.576]    <control if="!isProduction" while="" timeout="0" info="">
[21:19:27.576]      // if-block "!isProduction"
[21:19:27.576]        // =>  FALSE
[21:19:27.576]      // skip if-block "!isProduction"
[21:19:27.576]    </control>
[21:19:27.576]  </sequence>
[21:19:27.576]  
[21:20:21.477]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:20:21.477]  
[21:20:21.484]  <debugvars>
[21:20:21.484]    // Pre-defined
[21:20:21.484]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:20:21.484]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:20:21.484]    __dp=0x00000000
[21:20:21.484]    __ap=0x00000000
[21:20:21.484]    __traceout=0x00000000      (Trace Disabled)
[21:20:21.484]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:20:21.484]    __FlashAddr=0x00000000
[21:20:21.484]    __FlashLen=0x00000000
[21:20:21.484]    __FlashArg=0x00000000
[21:20:21.484]    __FlashOp=0x00000000
[21:20:21.484]    __Result=0x00000000
[21:20:21.484]  </debugvars>
[21:20:21.484]  
[21:20:21.484]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:20:21.484]    <block atomic="false" info="">
[21:20:21.484]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:20:21.484]        // -> [isSWJ <= 0x00000001]
[21:20:21.486]      __var hasDormant = __protocol & 0x00020000;
[21:20:21.486]        // -> [hasDormant <= 0x00000000]
[21:20:21.486]      __var protType   = __protocol & 0x0000FFFF;
[21:20:21.486]        // -> [protType <= 0x00000002]
[21:20:21.486]    </block>
[21:20:21.486]    <control if="protType == 1" while="" timeout="0" info="">
[21:20:21.486]      // if-block "protType == 1"
[21:20:21.486]        // =>  FALSE
[21:20:21.486]      // skip if-block "protType == 1"
[21:20:21.486]    </control>
[21:20:21.486]    <control if="protType == 2" while="" timeout="0" info="">
[21:20:21.486]      // if-block "protType == 2"
[21:20:21.486]        // =>  TRUE
[21:20:21.486]      <control if="isSWJ" while="" timeout="0" info="">
[21:20:21.486]        // if-block "isSWJ"
[21:20:21.486]          // =>  TRUE
[21:20:21.486]        <control if="hasDormant" while="" timeout="0" info="">
[21:20:21.486]          // if-block "hasDormant"
[21:20:21.486]            // =>  FALSE
[21:20:21.486]          // skip if-block "hasDormant"
[21:20:21.486]        </control>
[21:20:21.486]        <control if="!hasDormant" while="" timeout="0" info="">
[21:20:21.486]          // if-block "!hasDormant"
[21:20:21.486]            // =>  TRUE
[21:20:21.486]          <block atomic="false" info="">
[21:20:21.486]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:20:21.486]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:20:21.486]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:20:21.486]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:20:21.486]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:20:21.486]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:20:21.486]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:20:21.494]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:20:21.494]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:20:21.495]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:20:21.495]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:20:21.495]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:20:21.495]          </block>
[21:20:21.495]          // end if-block "!hasDormant"
[21:20:21.495]        </control>
[21:20:21.495]        // end if-block "isSWJ"
[21:20:21.495]      </control>
[21:20:21.495]      <control if="!isSWJ" while="" timeout="0" info="">
[21:20:21.495]        // if-block "!isSWJ"
[21:20:21.495]          // =>  FALSE
[21:20:21.495]        // skip if-block "!isSWJ"
[21:20:21.495]      </control>
[21:20:21.495]      <block atomic="false" info="">
[21:20:21.495]        ReadDP(0x0);
[21:20:21.495]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:20:21.495]      </block>
[21:20:21.495]      // end if-block "protType == 2"
[21:20:21.495]    </control>
[21:20:21.495]  </sequence>
[21:20:21.495]  
[21:20:21.495]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:20:21.495]  
[21:20:21.495]  <debugvars>
[21:20:21.495]    // Pre-defined
[21:20:21.495]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:20:21.495]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:20:21.495]    __dp=0x00000000
[21:20:21.495]    __ap=0x00000000
[21:20:21.495]    __traceout=0x00000000      (Trace Disabled)
[21:20:21.504]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:20:21.504]    __FlashAddr=0x00000000
[21:20:21.504]    __FlashLen=0x00000000
[21:20:21.504]    __FlashArg=0x00000000
[21:20:21.504]    __FlashOp=0x00000000
[21:20:21.504]    __Result=0x00000000
[21:20:21.505]  </debugvars>
[21:20:21.505]  
[21:20:21.505]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:20:21.505]    <block atomic="false" info="">
[21:20:21.505]      __var SW_DP_ABORT       = 0x0;
[21:20:21.505]        // -> [SW_DP_ABORT <= 0x00000000]
[21:20:21.505]      __var DP_CTRL_STAT      = 0x4;
[21:20:21.505]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:20:21.505]      __var DP_SELECT         = 0x8;
[21:20:21.505]        // -> [DP_SELECT <= 0x00000008]
[21:20:21.506]      __var powered_down      = 0;
[21:20:21.506]        // -> [powered_down <= 0x00000000]
[21:20:21.506]      WriteDP(DP_SELECT, 0x00000000);
[21:20:21.506]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:20:21.506]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:20:21.506]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:20:21.514]        // -> [powered_down <= 0x00000001]
[21:20:21.514]    </block>
[21:20:21.514]    <control if="powered_down" while="" timeout="0" info="">
[21:20:21.514]      // if-block "powered_down"
[21:20:21.514]        // =>  TRUE
[21:20:21.514]      <block atomic="false" info="">
[21:20:21.514]        Message(0, "Debug/System power-up request sent");
[21:20:21.516]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:20:21.516]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:20:21.516]      </block>
[21:20:21.516]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:20:21.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:20:21.516]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:20:21.516]        // while-condition  =>  FALSE
[21:20:21.516]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:20:21.516]      </control>
[21:20:21.516]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:20:21.516]        // if-block "(__protocol & 0xFFFF) == 1"
[21:20:21.516]          // =>  FALSE
[21:20:21.516]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:20:21.516]      </control>
[21:20:21.516]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:20:21.516]        // if-block "(__protocol & 0xFFFF) == 2"
[21:20:21.516]          // =>  TRUE
[21:20:21.516]        <block atomic="false" info="">
[21:20:21.516]          Message(0, "executing SWD power up");
[21:20:21.527]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:20:21.528]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:20:21.528]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:20:21.528]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:20:21.528]        </block>
[21:20:21.528]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:20:21.528]      </control>
[21:20:21.528]      // end if-block "powered_down"
[21:20:21.528]    </control>
[21:20:21.528]    <block atomic="false" info="">
[21:20:21.528]      __var DEBUG_PORT_VAL    = 0;
[21:20:21.528]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:20:21.528]      __var ACCESS_POINT_VAL  = 0;
[21:20:21.528]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:20:21.528]      __ap = 1; 
[21:20:21.528]        // -> [__ap <= 0x00000001]
[21:20:21.528]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:20:21.535]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:20:21.535]      __ap = 4;
[21:20:21.535]        // -> [__ap <= 0x00000004]
[21:20:21.535]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:20:21.539]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:20:21.539]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:20:21.539]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:20:21.539]    </block>
[21:20:21.539]    <block atomic="false" info="">
[21:20:21.539]      __var nReset = 0x80;
[21:20:21.539]        // -> [nReset <= 0x00000080]
[21:20:21.539]      __var canReadPins = 0;
[21:20:21.539]        // -> [canReadPins <= 0x00000000]
[21:20:21.539]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:20:21.539]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:20:21.539]        // -> [canReadPins <= 0x00000001]
[21:20:21.539]    </block>
[21:20:21.544]    <control if="" while="1" timeout="200" info="">
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.544]      // while-condition  =>  TRUE
[21:20:21.544]      // while "1"  (timeout="200")
[21:20:21.552]      // while-condition  =>  TRUE
[21:20:21.552]      // while "1"  (timeout="200")
[21:20:21.552]      // while  =>  TIMEOUT
[21:20:21.552]      // end while "1"
[21:20:21.552]    </control>
[21:20:21.552]    <control if="canReadPins" while="" timeout="0" info="">
[21:20:21.552]      // if-block "canReadPins"
[21:20:21.552]        // =>  TRUE
[21:20:21.552]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:20:21.552]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:20:21.555]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:20:21.555]        // while-condition  =>  FALSE
[21:20:21.555]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:20:21.555]      </control>
[21:20:21.555]      // end if-block "canReadPins"
[21:20:21.555]    </control>
[21:20:21.555]    <control if="!canReadPins" while="" timeout="0" info="">
[21:20:21.555]      // if-block "!canReadPins"
[21:20:21.555]        // =>  FALSE
[21:20:21.555]      // skip if-block "!canReadPins"
[21:20:21.555]    </control>
[21:20:21.555]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:20:21.555]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:20:21.555]        // =>  TRUE
[21:20:21.555]      <block atomic="false" info="">
[21:20:21.555]        WriteAP(0x00, 0x190008);
[21:20:21.555]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:20:21.555]        WriteAP(0xF0, 0x01);
[21:20:21.564]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:20:21.564]      </block>
[21:20:21.564]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:20:21.564]    </control>
[21:20:21.564]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:20:21.564]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:20:21.564]        // =>  FALSE
[21:20:21.564]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:20:21.564]    </control>
[21:20:21.564]    <block atomic="false" info="">
[21:20:21.564]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:20:21.564]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:20:21.564]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:20:21.564]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:20:21.564]      __ap = 0; //lets make sure we reset the access point selection
[21:20:21.564]        // -> [__ap <= 0x00000000]
[21:20:21.564]    </block>
[21:20:21.564]  </sequence>
[21:20:21.564]  
[21:20:21.594]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:20:21.594]  
[21:20:21.594]  <debugvars>
[21:20:21.594]    // Pre-defined
[21:20:21.594]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:20:21.594]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:20:21.594]    __dp=0x00000000
[21:20:21.594]    __ap=0x00000000
[21:20:21.594]    __traceout=0x00000000      (Trace Disabled)
[21:20:21.594]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:20:21.594]    __FlashAddr=0x00000000
[21:20:21.594]    __FlashLen=0x00000000
[21:20:21.594]    __FlashArg=0x00000000
[21:20:21.595]    __FlashOp=0x00000000
[21:20:21.595]    __Result=0x00000000
[21:20:21.595]  </debugvars>
[21:20:21.595]  
[21:20:21.595]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:20:21.595]    <block atomic="false" info="">
[21:20:21.595]      __var deviceID = 0;
[21:20:21.595]        // -> [deviceID <= 0x00000000]
[21:20:21.595]      __var version = 0;
[21:20:21.595]        // -> [version <= 0x00000000]
[21:20:21.595]      __var partNum = 0;
[21:20:21.595]        // -> [partNum <= 0x00000000]
[21:20:21.595]      __var manuf = 0;
[21:20:21.595]        // -> [manuf <= 0x00000000]
[21:20:21.595]      __var isMSPM0G1X0X_G3X0X = 0;
[21:20:21.595]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:20:21.595]      __var isProduction = 0;
[21:20:21.595]        // -> [isProduction <= 0x00000000]
[21:20:21.595]      __var continueId = 0;
[21:20:21.595]        // -> [continueId <= 0x00000000]
[21:20:21.595]      deviceID =   Read32(0x41C40004);
[21:20:21.595]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:20:21.595]        // -> [deviceID <= 0x2BB8802F]
[21:20:21.595]      version = deviceID >> 28;
[21:20:21.595]        // -> [version <= 0x00000002]
[21:20:21.595]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:20:21.595]        // -> [partNum <= 0x0000BB88]
[21:20:21.595]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:20:21.595]        // -> [manuf <= 0x00000017]
[21:20:21.595]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:20:21.595]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:20:21.595]      isProduction = (version > 0);
[21:20:21.595]        // -> [isProduction <= 0x00000001]
[21:20:21.595]    </block>
[21:20:21.595]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:20:21.595]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:20:21.595]        // =>  FALSE
[21:20:21.595]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:20:21.595]    </control>
[21:20:21.595]    <control if="continueId == 4" while="" timeout="0" info="">
[21:20:21.604]      // if-block "continueId == 4"
[21:20:21.604]        // =>  FALSE
[21:20:21.604]      // skip if-block "continueId == 4"
[21:20:21.605]    </control>
[21:20:21.605]    <control if="!isProduction" while="" timeout="0" info="">
[21:20:21.605]      // if-block "!isProduction"
[21:20:21.605]        // =>  FALSE
[21:20:21.605]      // skip if-block "!isProduction"
[21:20:21.605]    </control>
[21:20:21.605]  </sequence>
[21:20:21.605]  
[21:21:17.803]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:21:17.803]  
[21:21:17.803]  <debugvars>
[21:21:17.803]    // Pre-defined
[21:21:17.803]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:21:17.803]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:21:17.803]    __dp=0x00000000
[21:21:17.803]    __ap=0x00000000
[21:21:17.803]    __traceout=0x00000000      (Trace Disabled)
[21:21:17.803]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:21:17.803]    __FlashAddr=0x00000000
[21:21:17.803]    __FlashLen=0x00000000
[21:21:17.803]    __FlashArg=0x00000000
[21:21:17.803]    __FlashOp=0x00000000
[21:21:17.803]    __Result=0x00000000
[21:21:17.803]  </debugvars>
[21:21:17.803]  
[21:21:17.803]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:21:17.803]    <block atomic="false" info="">
[21:21:17.803]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:21:17.803]        // -> [isSWJ <= 0x00000001]
[21:21:17.803]      __var hasDormant = __protocol & 0x00020000;
[21:21:17.803]        // -> [hasDormant <= 0x00000000]
[21:21:17.803]      __var protType   = __protocol & 0x0000FFFF;
[21:21:17.803]        // -> [protType <= 0x00000002]
[21:21:17.803]    </block>
[21:21:17.803]    <control if="protType == 1" while="" timeout="0" info="">
[21:21:17.803]      // if-block "protType == 1"
[21:21:17.803]        // =>  FALSE
[21:21:17.803]      // skip if-block "protType == 1"
[21:21:17.808]    </control>
[21:21:17.808]    <control if="protType == 2" while="" timeout="0" info="">
[21:21:17.808]      // if-block "protType == 2"
[21:21:17.808]        // =>  TRUE
[21:21:17.808]      <control if="isSWJ" while="" timeout="0" info="">
[21:21:17.808]        // if-block "isSWJ"
[21:21:17.808]          // =>  TRUE
[21:21:17.808]        <control if="hasDormant" while="" timeout="0" info="">
[21:21:17.808]          // if-block "hasDormant"
[21:21:17.808]            // =>  FALSE
[21:21:17.808]          // skip if-block "hasDormant"
[21:21:17.808]        </control>
[21:21:17.808]        <control if="!hasDormant" while="" timeout="0" info="">
[21:21:17.808]          // if-block "!hasDormant"
[21:21:17.808]            // =>  TRUE
[21:21:17.808]          <block atomic="false" info="">
[21:21:17.808]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:21:17.812]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:21:17.813]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:21:17.814]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:21:17.814]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:21:17.816]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:21:17.816]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:21:17.818]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:21:17.818]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:21:17.820]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:21:17.820]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:21:17.822]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:21:17.822]          </block>
[21:21:17.822]          // end if-block "!hasDormant"
[21:21:17.822]        </control>
[21:21:17.822]        // end if-block "isSWJ"
[21:21:17.822]      </control>
[21:21:17.822]      <control if="!isSWJ" while="" timeout="0" info="">
[21:21:17.822]        // if-block "!isSWJ"
[21:21:17.822]          // =>  FALSE
[21:21:17.822]        // skip if-block "!isSWJ"
[21:21:17.822]      </control>
[21:21:17.822]      <block atomic="false" info="">
[21:21:17.823]        ReadDP(0x0);
[21:21:17.823]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:21:17.823]      </block>
[21:21:17.823]      // end if-block "protType == 2"
[21:21:17.823]    </control>
[21:21:17.823]  </sequence>
[21:21:17.823]  
[21:21:17.830]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:21:17.830]  
[21:21:17.830]  <debugvars>
[21:21:17.830]    // Pre-defined
[21:21:17.830]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:21:17.830]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:21:17.830]    __dp=0x00000000
[21:21:17.830]    __ap=0x00000000
[21:21:17.830]    __traceout=0x00000000      (Trace Disabled)
[21:21:17.830]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:21:17.830]    __FlashAddr=0x00000000
[21:21:17.830]    __FlashLen=0x00000000
[21:21:17.830]    __FlashArg=0x00000000
[21:21:17.830]    __FlashOp=0x00000000
[21:21:17.831]    __Result=0x00000000
[21:21:17.831]  </debugvars>
[21:21:17.831]  
[21:21:17.831]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:21:17.831]    <block atomic="false" info="">
[21:21:17.831]      __var SW_DP_ABORT       = 0x0;
[21:21:17.831]        // -> [SW_DP_ABORT <= 0x00000000]
[21:21:17.831]      __var DP_CTRL_STAT      = 0x4;
[21:21:17.831]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:21:17.832]      __var DP_SELECT         = 0x8;
[21:21:17.832]        // -> [DP_SELECT <= 0x00000008]
[21:21:17.832]      __var powered_down      = 0;
[21:21:17.832]        // -> [powered_down <= 0x00000000]
[21:21:17.832]      WriteDP(DP_SELECT, 0x00000000);
[21:21:17.834]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:21:17.834]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:21:17.836]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:21:17.836]        // -> [powered_down <= 0x00000001]
[21:21:17.836]    </block>
[21:21:17.836]    <control if="powered_down" while="" timeout="0" info="">
[21:21:17.836]      // if-block "powered_down"
[21:21:17.836]        // =>  TRUE
[21:21:17.836]      <block atomic="false" info="">
[21:21:17.836]        Message(0, "Debug/System power-up request sent");
[21:21:17.837]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:21:17.839]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:21:17.839]      </block>
[21:21:17.839]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:21:17.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:21:17.841]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:21:17.841]        // while-condition  =>  FALSE
[21:21:17.841]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:21:17.841]      </control>
[21:21:17.841]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:21:17.841]        // if-block "(__protocol & 0xFFFF) == 1"
[21:21:17.841]          // =>  FALSE
[21:21:17.841]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:21:17.841]      </control>
[21:21:17.841]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:21:17.841]        // if-block "(__protocol & 0xFFFF) == 2"
[21:21:17.841]          // =>  TRUE
[21:21:17.841]        <block atomic="false" info="">
[21:21:17.841]          Message(0, "executing SWD power up");
[21:21:17.841]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:21:17.844]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:21:17.844]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:21:17.846]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:21:17.846]        </block>
[21:21:17.846]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:21:17.846]      </control>
[21:21:17.846]      // end if-block "powered_down"
[21:21:17.846]    </control>
[21:21:17.846]    <block atomic="false" info="">
[21:21:17.847]      __var DEBUG_PORT_VAL    = 0;
[21:21:17.847]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:21:17.847]      __var ACCESS_POINT_VAL  = 0;
[21:21:17.847]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:21:17.847]      __ap = 1; 
[21:21:17.847]        // -> [__ap <= 0x00000001]
[21:21:17.847]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:21:17.849]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:21:17.849]      __ap = 4;
[21:21:17.849]        // -> [__ap <= 0x00000004]
[21:21:17.849]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:21:17.849]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:21:17.849]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:21:17.849]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:21:17.849]    </block>
[21:21:17.849]    <block atomic="false" info="">
[21:21:17.849]      __var nReset = 0x80;
[21:21:17.849]        // -> [nReset <= 0x00000080]
[21:21:17.849]      __var canReadPins = 0;
[21:21:17.849]        // -> [canReadPins <= 0x00000000]
[21:21:17.849]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:21:17.859]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:21:17.859]        // -> [canReadPins <= 0x00000001]
[21:21:17.859]    </block>
[21:21:17.859]    <control if="" while="1" timeout="200" info="">
[21:21:17.859]      // while "1"  (timeout="200")
[21:21:17.859]      // while-condition  =>  TRUE
[21:21:17.860]      // while "1"  (timeout="200")
[21:21:17.860]      // while-condition  =>  TRUE
[21:21:17.860]      // while "1"  (timeout="200")
[21:21:17.860]      // while-condition  =>  TRUE
[21:21:17.860]      // while "1"  (timeout="200")
[21:21:17.860]      // while-condition  =>  TRUE
[21:21:17.860]      // while "1"  (timeout="200")
[21:21:17.860]      // while-condition  =>  TRUE
[21:21:17.860]      // while "1"  (timeout="200")
[21:21:17.860]      // while-condition  =>  TRUE
[21:21:17.860]      // while "1"  (timeout="200")
[21:21:17.861]      // while-condition  =>  TRUE
[21:21:17.861]      // while "1"  (timeout="200")
[21:21:17.861]      // while-condition  =>  TRUE
[21:21:17.861]      // while "1"  (timeout="200")
[21:21:17.861]      // while-condition  =>  TRUE
[21:21:17.861]      // while "1"  (timeout="200")
[21:21:17.861]      // while-condition  =>  TRUE
[21:21:17.861]      // while "1"  (timeout="200")
[21:21:17.861]      // while-condition  =>  TRUE
[21:21:17.861]      // while "1"  (timeout="200")
[21:21:17.862]      // while-condition  =>  TRUE
[21:21:17.862]      // while "1"  (timeout="200")
[21:21:17.862]      // while  =>  TIMEOUT
[21:21:17.862]      // end while "1"
[21:21:17.862]    </control>
[21:21:17.862]    <control if="canReadPins" while="" timeout="0" info="">
[21:21:17.862]      // if-block "canReadPins"
[21:21:17.862]        // =>  TRUE
[21:21:17.862]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:21:17.862]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:21:17.864]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:21:17.864]        // while-condition  =>  FALSE
[21:21:17.864]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:21:17.864]      </control>
[21:21:17.864]      // end if-block "canReadPins"
[21:21:17.864]    </control>
[21:21:17.864]    <control if="!canReadPins" while="" timeout="0" info="">
[21:21:17.865]      // if-block "!canReadPins"
[21:21:17.865]        // =>  FALSE
[21:21:17.865]      // skip if-block "!canReadPins"
[21:21:17.865]    </control>
[21:21:17.865]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:21:17.865]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:21:17.865]        // =>  TRUE
[21:21:17.865]      <block atomic="false" info="">
[21:21:17.865]        WriteAP(0x00, 0x190008);
[21:21:17.868]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:21:17.868]        WriteAP(0xF0, 0x01);
[21:21:17.873]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:21:17.873]      </block>
[21:21:17.873]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:21:17.873]    </control>
[21:21:17.873]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:21:17.873]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:21:17.873]        // =>  FALSE
[21:21:17.873]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:21:17.873]    </control>
[21:21:17.873]    <block atomic="false" info="">
[21:21:17.873]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:21:17.878]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:21:17.878]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:21:17.878]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:21:17.883]      __ap = 0; //lets make sure we reset the access point selection
[21:21:17.883]        // -> [__ap <= 0x00000000]
[21:21:17.883]    </block>
[21:21:17.883]  </sequence>
[21:21:17.883]  
[21:21:17.908]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:21:17.908]  
[21:21:17.908]  <debugvars>
[21:21:17.908]    // Pre-defined
[21:21:17.908]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:21:17.908]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:21:17.908]    __dp=0x00000000
[21:21:17.908]    __ap=0x00000000
[21:21:17.909]    __traceout=0x00000000      (Trace Disabled)
[21:21:17.909]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:21:17.909]    __FlashAddr=0x00000000
[21:21:17.909]    __FlashLen=0x00000000
[21:21:17.909]    __FlashArg=0x00000000
[21:21:17.909]    __FlashOp=0x00000000
[21:21:17.909]    __Result=0x00000000
[21:21:17.909]  </debugvars>
[21:21:17.909]  
[21:21:17.909]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:21:17.909]    <block atomic="false" info="">
[21:21:17.910]      __var deviceID = 0;
[21:21:17.910]        // -> [deviceID <= 0x00000000]
[21:21:17.910]      __var version = 0;
[21:21:17.910]        // -> [version <= 0x00000000]
[21:21:17.910]      __var partNum = 0;
[21:21:17.910]        // -> [partNum <= 0x00000000]
[21:21:17.910]      __var manuf = 0;
[21:21:17.910]        // -> [manuf <= 0x00000000]
[21:21:17.910]      __var isMSPM0G1X0X_G3X0X = 0;
[21:21:17.910]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:21:17.910]      __var isProduction = 0;
[21:21:17.911]        // -> [isProduction <= 0x00000000]
[21:21:17.911]      __var continueId = 0;
[21:21:17.911]        // -> [continueId <= 0x00000000]
[21:21:17.911]      deviceID =   Read32(0x41C40004);
[21:21:17.916]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:21:17.916]        // -> [deviceID <= 0x2BB8802F]
[21:21:17.916]      version = deviceID >> 28;
[21:21:17.916]        // -> [version <= 0x00000002]
[21:21:17.917]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:21:17.917]        // -> [partNum <= 0x0000BB88]
[21:21:17.917]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:21:17.917]        // -> [manuf <= 0x00000017]
[21:21:17.917]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:21:17.917]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:21:17.917]      isProduction = (version > 0);
[21:21:17.917]        // -> [isProduction <= 0x00000001]
[21:21:17.918]    </block>
[21:21:17.918]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:21:17.918]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:21:17.918]        // =>  FALSE
[21:21:17.918]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:21:17.918]    </control>
[21:21:17.918]    <control if="continueId == 4" while="" timeout="0" info="">
[21:21:17.918]      // if-block "continueId == 4"
[21:21:17.918]        // =>  FALSE
[21:21:17.919]      // skip if-block "continueId == 4"
[21:21:17.919]    </control>
[21:21:17.919]    <control if="!isProduction" while="" timeout="0" info="">
[21:21:17.919]      // if-block "!isProduction"
[21:21:17.919]        // =>  FALSE
[21:21:17.919]      // skip if-block "!isProduction"
[21:21:17.919]    </control>
[21:21:17.919]  </sequence>
[21:21:17.920]  
[21:24:45.535]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:24:45.535]  
[21:24:45.544]  <debugvars>
[21:24:45.544]    // Pre-defined
[21:24:45.545]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:24:45.545]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:24:45.545]    __dp=0x00000000
[21:24:45.545]    __ap=0x00000000
[21:24:45.545]    __traceout=0x00000000      (Trace Disabled)
[21:24:45.545]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:24:45.545]    __FlashAddr=0x00000000
[21:24:45.545]    __FlashLen=0x00000000
[21:24:45.545]    __FlashArg=0x00000000
[21:24:45.546]    __FlashOp=0x00000000
[21:24:45.546]    __Result=0x00000000
[21:24:45.546]  </debugvars>
[21:24:45.546]  
[21:24:45.546]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:24:45.546]    <block atomic="false" info="">
[21:24:45.546]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:24:45.546]        // -> [isSWJ <= 0x00000001]
[21:24:45.546]      __var hasDormant = __protocol & 0x00020000;
[21:24:45.546]        // -> [hasDormant <= 0x00000000]
[21:24:45.546]      __var protType   = __protocol & 0x0000FFFF;
[21:24:45.547]        // -> [protType <= 0x00000002]
[21:24:45.547]    </block>
[21:24:45.547]    <control if="protType == 1" while="" timeout="0" info="">
[21:24:45.547]      // if-block "protType == 1"
[21:24:45.547]        // =>  FALSE
[21:24:45.547]      // skip if-block "protType == 1"
[21:24:45.547]    </control>
[21:24:45.547]    <control if="protType == 2" while="" timeout="0" info="">
[21:24:45.547]      // if-block "protType == 2"
[21:24:45.547]        // =>  TRUE
[21:24:45.547]      <control if="isSWJ" while="" timeout="0" info="">
[21:24:45.547]        // if-block "isSWJ"
[21:24:45.547]          // =>  TRUE
[21:24:45.547]        <control if="hasDormant" while="" timeout="0" info="">
[21:24:45.547]          // if-block "hasDormant"
[21:24:45.549]            // =>  FALSE
[21:24:45.549]          // skip if-block "hasDormant"
[21:24:45.549]        </control>
[21:24:45.549]        <control if="!hasDormant" while="" timeout="0" info="">
[21:24:45.549]          // if-block "!hasDormant"
[21:24:45.549]            // =>  TRUE
[21:24:45.549]          <block atomic="false" info="">
[21:24:45.550]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:24:45.550]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:24:45.550]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:24:45.550]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:24:45.553]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:24:45.553]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:24:45.553]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:24:45.555]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:24:45.555]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:24:45.559]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:24:45.559]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:24:45.560]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:24:45.560]          </block>
[21:24:45.560]          // end if-block "!hasDormant"
[21:24:45.560]        </control>
[21:24:45.561]        // end if-block "isSWJ"
[21:24:45.562]      </control>
[21:24:45.562]      <control if="!isSWJ" while="" timeout="0" info="">
[21:24:45.562]        // if-block "!isSWJ"
[21:24:45.562]          // =>  FALSE
[21:24:45.562]        // skip if-block "!isSWJ"
[21:24:45.562]      </control>
[21:24:45.562]      <block atomic="false" info="">
[21:24:45.562]        ReadDP(0x0);
[21:24:45.563]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:24:45.564]      </block>
[21:24:45.564]      // end if-block "protType == 2"
[21:24:45.564]    </control>
[21:24:45.564]  </sequence>
[21:24:45.564]  
[21:24:45.565]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:24:45.565]  
[21:24:45.565]  <debugvars>
[21:24:45.565]    // Pre-defined
[21:24:45.565]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:24:45.565]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:24:45.565]    __dp=0x00000000
[21:24:45.565]    __ap=0x00000000
[21:24:45.565]    __traceout=0x00000000      (Trace Disabled)
[21:24:45.565]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:24:45.565]    __FlashAddr=0x00000000
[21:24:45.565]    __FlashLen=0x00000000
[21:24:45.565]    __FlashArg=0x00000000
[21:24:45.565]    __FlashOp=0x00000000
[21:24:45.565]    __Result=0x00000000
[21:24:45.565]  </debugvars>
[21:24:45.570]  
[21:24:45.570]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:24:45.570]    <block atomic="false" info="">
[21:24:45.570]      __var SW_DP_ABORT       = 0x0;
[21:24:45.570]        // -> [SW_DP_ABORT <= 0x00000000]
[21:24:45.570]      __var DP_CTRL_STAT      = 0x4;
[21:24:45.570]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:24:45.570]      __var DP_SELECT         = 0x8;
[21:24:45.570]        // -> [DP_SELECT <= 0x00000008]
[21:24:45.570]      __var powered_down      = 0;
[21:24:45.570]        // -> [powered_down <= 0x00000000]
[21:24:45.570]      WriteDP(DP_SELECT, 0x00000000);
[21:24:45.571]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:24:45.571]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:24:45.573]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:24:45.573]        // -> [powered_down <= 0x00000001]
[21:24:45.573]    </block>
[21:24:45.573]    <control if="powered_down" while="" timeout="0" info="">
[21:24:45.573]      // if-block "powered_down"
[21:24:45.573]        // =>  TRUE
[21:24:45.573]      <block atomic="false" info="">
[21:24:45.573]        Message(0, "Debug/System power-up request sent");
[21:24:45.578]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:24:45.580]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:24:45.580]      </block>
[21:24:45.580]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:24:45.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:24:45.581]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:24:45.581]        // while-condition  =>  FALSE
[21:24:45.583]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:24:45.583]      </control>
[21:24:45.583]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:24:45.583]        // if-block "(__protocol & 0xFFFF) == 1"
[21:24:45.583]          // =>  FALSE
[21:24:45.583]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:24:45.583]      </control>
[21:24:45.583]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:24:45.583]        // if-block "(__protocol & 0xFFFF) == 2"
[21:24:45.583]          // =>  TRUE
[21:24:45.583]        <block atomic="false" info="">
[21:24:45.583]          Message(0, "executing SWD power up");
[21:24:45.585]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:24:45.587]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:24:45.587]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:24:45.587]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:24:45.587]        </block>
[21:24:45.587]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:24:45.587]      </control>
[21:24:45.587]      // end if-block "powered_down"
[21:24:45.587]    </control>
[21:24:45.587]    <block atomic="false" info="">
[21:24:45.590]      __var DEBUG_PORT_VAL    = 0;
[21:24:45.590]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:24:45.590]      __var ACCESS_POINT_VAL  = 0;
[21:24:45.590]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:24:45.590]      __ap = 1; 
[21:24:45.590]        // -> [__ap <= 0x00000001]
[21:24:45.590]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:24:45.593]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:24:45.593]      __ap = 4;
[21:24:45.593]        // -> [__ap <= 0x00000004]
[21:24:45.593]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:24:45.597]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:24:45.597]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:24:45.597]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:24:45.598]    </block>
[21:24:45.598]    <block atomic="false" info="">
[21:24:45.598]      __var nReset = 0x80;
[21:24:45.598]        // -> [nReset <= 0x00000080]
[21:24:45.598]      __var canReadPins = 0;
[21:24:45.598]        // -> [canReadPins <= 0x00000000]
[21:24:45.598]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:24:45.600]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:24:45.600]        // -> [canReadPins <= 0x00000001]
[21:24:45.600]    </block>
[21:24:45.600]    <control if="" while="1" timeout="200" info="">
[21:24:45.600]      // while "1"  (timeout="200")
[21:24:45.600]      // while-condition  =>  TRUE
[21:24:45.600]      // while "1"  (timeout="200")
[21:24:45.600]      // while-condition  =>  TRUE
[21:24:45.600]      // while "1"  (timeout="200")
[21:24:45.600]      // while-condition  =>  TRUE
[21:24:45.600]      // while "1"  (timeout="200")
[21:24:45.600]      // while-condition  =>  TRUE
[21:24:45.600]      // while "1"  (timeout="200")
[21:24:45.600]      // while-condition  =>  TRUE
[21:24:45.600]      // while "1"  (timeout="200")
[21:24:45.600]      // while-condition  =>  TRUE
[21:24:45.600]      // while "1"  (timeout="200")
[21:24:45.600]      // while-condition  =>  TRUE
[21:24:45.600]      // while "1"  (timeout="200")
[21:24:45.600]      // while-condition  =>  TRUE
[21:24:45.600]      // while "1"  (timeout="200")
[21:24:45.600]      // while-condition  =>  TRUE
[21:24:45.600]      // while "1"  (timeout="200")
[21:24:45.600]      // while-condition  =>  TRUE
[21:24:45.600]      // while "1"  (timeout="200")
[21:24:45.603]      // while-condition  =>  TRUE
[21:24:45.603]      // while "1"  (timeout="200")
[21:24:45.603]      // while-condition  =>  TRUE
[21:24:45.603]      // while "1"  (timeout="200")
[21:24:45.603]      // while-condition  =>  TRUE
[21:24:45.603]      // while "1"  (timeout="200")
[21:24:45.603]      // while-condition  =>  TRUE
[21:24:45.604]      // while "1"  (timeout="200")
[21:24:45.604]      // while-condition  =>  TRUE
[21:24:45.604]      // while "1"  (timeout="200")
[21:24:45.604]      // while-condition  =>  TRUE
[21:24:45.604]      // while "1"  (timeout="200")
[21:24:45.604]      // while-condition  =>  TRUE
[21:24:45.604]      // while "1"  (timeout="200")
[21:24:45.604]      // while-condition  =>  TRUE
[21:24:45.604]      // while "1"  (timeout="200")
[21:24:45.604]      // while-condition  =>  TRUE
[21:24:45.604]      // while "1"  (timeout="200")
[21:24:45.604]      // while-condition  =>  TRUE
[21:24:45.604]      // while "1"  (timeout="200")
[21:24:45.604]      // while-condition  =>  TRUE
[21:24:45.604]      // while "1"  (timeout="200")
[21:24:45.604]      // while-condition  =>  TRUE
[21:24:45.604]      // while "1"  (timeout="200")
[21:24:45.605]      // while-condition  =>  TRUE
[21:24:45.605]      // while "1"  (timeout="200")
[21:24:45.605]      // while-condition  =>  TRUE
[21:24:45.605]      // while "1"  (timeout="200")
[21:24:45.605]      // while-condition  =>  TRUE
[21:24:45.605]      // while "1"  (timeout="200")
[21:24:45.605]      // while-condition  =>  TRUE
[21:24:45.605]      // while "1"  (timeout="200")
[21:24:45.605]      // while-condition  =>  TRUE
[21:24:45.605]      // while "1"  (timeout="200")
[21:24:45.605]      // while-condition  =>  TRUE
[21:24:45.605]      // while "1"  (timeout="200")
[21:24:45.606]      // while-condition  =>  TRUE
[21:24:45.607]      // while "1"  (timeout="200")
[21:24:45.607]      // while-condition  =>  TRUE
[21:24:45.607]      // while "1"  (timeout="200")
[21:24:45.607]      // while-condition  =>  TRUE
[21:24:45.607]      // while "1"  (timeout="200")
[21:24:45.607]      // while-condition  =>  TRUE
[21:24:45.607]      // while "1"  (timeout="200")
[21:24:45.607]      // while-condition  =>  TRUE
[21:24:45.607]      // while "1"  (timeout="200")
[21:24:45.607]      // while-condition  =>  TRUE
[21:24:45.607]      // while "1"  (timeout="200")
[21:24:45.608]      // while-condition  =>  TRUE
[21:24:45.608]      // while "1"  (timeout="200")
[21:24:45.608]      // while-condition  =>  TRUE
[21:24:45.608]      // while "1"  (timeout="200")
[21:24:45.608]      // while-condition  =>  TRUE
[21:24:45.608]      // while "1"  (timeout="200")
[21:24:45.608]      // while-condition  =>  TRUE
[21:24:45.608]      // while "1"  (timeout="200")
[21:24:45.608]      // while-condition  =>  TRUE
[21:24:45.608]      // while "1"  (timeout="200")
[21:24:45.609]      // while-condition  =>  TRUE
[21:24:45.609]      // while "1"  (timeout="200")
[21:24:45.609]      // while-condition  =>  TRUE
[21:24:45.609]      // while "1"  (timeout="200")
[21:24:45.609]      // while-condition  =>  TRUE
[21:24:45.609]      // while "1"  (timeout="200")
[21:24:45.609]      // while-condition  =>  TRUE
[21:24:45.609]      // while "1"  (timeout="200")
[21:24:45.609]      // while-condition  =>  TRUE
[21:24:45.609]      // while "1"  (timeout="200")
[21:24:45.609]      // while-condition  =>  TRUE
[21:24:45.609]      // while "1"  (timeout="200")
[21:24:45.610]      // while-condition  =>  TRUE
[21:24:45.610]      // while "1"  (timeout="200")
[21:24:45.610]      // while-condition  =>  TRUE
[21:24:45.610]      // while "1"  (timeout="200")
[21:24:45.610]      // while-condition  =>  TRUE
[21:24:45.610]      // while "1"  (timeout="200")
[21:24:45.610]      // while-condition  =>  TRUE
[21:24:45.610]      // while "1"  (timeout="200")
[21:24:45.610]      // while-condition  =>  TRUE
[21:24:45.610]      // while "1"  (timeout="200")
[21:24:45.610]      // while-condition  =>  TRUE
[21:24:45.611]      // while "1"  (timeout="200")
[21:24:45.611]      // while-condition  =>  TRUE
[21:24:45.611]      // while "1"  (timeout="200")
[21:24:45.611]      // while-condition  =>  TRUE
[21:24:45.611]      // while "1"  (timeout="200")
[21:24:45.611]      // while-condition  =>  TRUE
[21:24:45.611]      // while "1"  (timeout="200")
[21:24:45.611]      // while-condition  =>  TRUE
[21:24:45.611]      // while "1"  (timeout="200")
[21:24:45.611]      // while-condition  =>  TRUE
[21:24:45.612]      // while "1"  (timeout="200")
[21:24:45.612]      // while  =>  TIMEOUT
[21:24:45.612]      // end while "1"
[21:24:45.612]    </control>
[21:24:45.612]    <control if="canReadPins" while="" timeout="0" info="">
[21:24:45.612]      // if-block "canReadPins"
[21:24:45.612]        // =>  TRUE
[21:24:45.612]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:24:45.612]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:24:45.614]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:24:45.614]        // while-condition  =>  FALSE
[21:24:45.614]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:24:45.614]      </control>
[21:24:45.614]      // end if-block "canReadPins"
[21:24:45.614]    </control>
[21:24:45.614]    <control if="!canReadPins" while="" timeout="0" info="">
[21:24:45.614]      // if-block "!canReadPins"
[21:24:45.614]        // =>  FALSE
[21:24:45.615]      // skip if-block "!canReadPins"
[21:24:45.615]    </control>
[21:24:45.615]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:24:45.615]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:24:45.615]        // =>  TRUE
[21:24:45.615]      <block atomic="false" info="">
[21:24:45.615]        WriteAP(0x00, 0x190008);
[21:24:45.617]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:24:45.617]        WriteAP(0xF0, 0x01);
[21:24:45.619]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:24:45.619]      </block>
[21:24:45.619]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:24:45.619]    </control>
[21:24:45.619]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:24:45.619]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:24:45.619]        // =>  FALSE
[21:24:45.619]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:24:45.619]    </control>
[21:24:45.619]    <block atomic="false" info="">
[21:24:45.619]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:24:45.624]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:24:45.624]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:24:45.625]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:24:45.626]      __ap = 0; //lets make sure we reset the access point selection
[21:24:45.626]        // -> [__ap <= 0x00000000]
[21:24:45.626]    </block>
[21:24:45.626]  </sequence>
[21:24:45.627]  
[21:24:45.647]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:24:45.647]  
[21:24:45.647]  <debugvars>
[21:24:45.647]    // Pre-defined
[21:24:45.647]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:24:45.647]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:24:45.647]    __dp=0x00000000
[21:24:45.647]    __ap=0x00000000
[21:24:45.647]    __traceout=0x00000000      (Trace Disabled)
[21:24:45.647]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:24:45.647]    __FlashAddr=0x00000000
[21:24:45.647]    __FlashLen=0x00000000
[21:24:45.647]    __FlashArg=0x00000000
[21:24:45.647]    __FlashOp=0x00000000
[21:24:45.647]    __Result=0x00000000
[21:24:45.647]  </debugvars>
[21:24:45.647]  
[21:24:45.647]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:24:45.647]    <block atomic="false" info="">
[21:24:45.647]      __var deviceID = 0;
[21:24:45.647]        // -> [deviceID <= 0x00000000]
[21:24:45.647]      __var version = 0;
[21:24:45.647]        // -> [version <= 0x00000000]
[21:24:45.647]      __var partNum = 0;
[21:24:45.647]        // -> [partNum <= 0x00000000]
[21:24:45.647]      __var manuf = 0;
[21:24:45.647]        // -> [manuf <= 0x00000000]
[21:24:45.647]      __var isMSPM0G1X0X_G3X0X = 0;
[21:24:45.647]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:24:45.647]      __var isProduction = 0;
[21:24:45.647]        // -> [isProduction <= 0x00000000]
[21:24:45.647]      __var continueId = 0;
[21:24:45.650]        // -> [continueId <= 0x00000000]
[21:24:45.650]      deviceID =   Read32(0x41C40004);
[21:24:45.655]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:24:45.655]        // -> [deviceID <= 0x2BB8802F]
[21:24:45.655]      version = deviceID >> 28;
[21:24:45.655]        // -> [version <= 0x00000002]
[21:24:45.655]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:24:45.655]        // -> [partNum <= 0x0000BB88]
[21:24:45.655]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:24:45.655]        // -> [manuf <= 0x00000017]
[21:24:45.655]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:24:45.655]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:24:45.657]      isProduction = (version > 0);
[21:24:45.657]        // -> [isProduction <= 0x00000001]
[21:24:45.657]    </block>
[21:24:45.657]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:24:45.657]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:24:45.657]        // =>  FALSE
[21:24:45.657]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:24:45.657]    </control>
[21:24:45.657]    <control if="continueId == 4" while="" timeout="0" info="">
[21:24:45.657]      // if-block "continueId == 4"
[21:24:45.657]        // =>  FALSE
[21:24:45.657]      // skip if-block "continueId == 4"
[21:24:45.657]    </control>
[21:24:45.657]    <control if="!isProduction" while="" timeout="0" info="">
[21:24:45.657]      // if-block "!isProduction"
[21:24:45.658]        // =>  FALSE
[21:24:45.658]      // skip if-block "!isProduction"
[21:24:45.658]    </control>
[21:24:45.658]  </sequence>
[21:24:45.658]  
[21:28:38.042]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:28:38.042]  
[21:28:38.042]  <debugvars>
[21:28:38.042]    // Pre-defined
[21:28:38.042]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:28:38.042]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:28:38.046]    __dp=0x00000000
[21:28:38.046]    __ap=0x00000000
[21:28:38.046]    __traceout=0x00000000      (Trace Disabled)
[21:28:38.046]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:28:38.046]    __FlashAddr=0x00000000
[21:28:38.046]    __FlashLen=0x00000000
[21:28:38.046]    __FlashArg=0x00000000
[21:28:38.046]    __FlashOp=0x00000000
[21:28:38.046]    __Result=0x00000000
[21:28:38.046]  </debugvars>
[21:28:38.047]  
[21:28:38.047]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:28:38.047]    <block atomic="false" info="">
[21:28:38.047]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:28:38.047]        // -> [isSWJ <= 0x00000001]
[21:28:38.047]      __var hasDormant = __protocol & 0x00020000;
[21:28:38.047]        // -> [hasDormant <= 0x00000000]
[21:28:38.047]      __var protType   = __protocol & 0x0000FFFF;
[21:28:38.047]        // -> [protType <= 0x00000002]
[21:28:38.047]    </block>
[21:28:38.047]    <control if="protType == 1" while="" timeout="0" info="">
[21:28:38.047]      // if-block "protType == 1"
[21:28:38.047]        // =>  FALSE
[21:28:38.049]      // skip if-block "protType == 1"
[21:28:38.049]    </control>
[21:28:38.049]    <control if="protType == 2" while="" timeout="0" info="">
[21:28:38.049]      // if-block "protType == 2"
[21:28:38.049]        // =>  TRUE
[21:28:38.049]      <control if="isSWJ" while="" timeout="0" info="">
[21:28:38.050]        // if-block "isSWJ"
[21:28:38.050]          // =>  TRUE
[21:28:38.050]        <control if="hasDormant" while="" timeout="0" info="">
[21:28:38.050]          // if-block "hasDormant"
[21:28:38.050]            // =>  FALSE
[21:28:38.050]          // skip if-block "hasDormant"
[21:28:38.050]        </control>
[21:28:38.050]        <control if="!hasDormant" while="" timeout="0" info="">
[21:28:38.051]          // if-block "!hasDormant"
[21:28:38.051]            // =>  TRUE
[21:28:38.051]          <block atomic="false" info="">
[21:28:38.051]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:28:38.052]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:38.052]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:28:38.054]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:28:38.054]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:28:38.055]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:38.055]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:28:38.056]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:28:38.056]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:28:38.060]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:38.061]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:28:38.066]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:28:38.066]          </block>
[21:28:38.066]          // end if-block "!hasDormant"
[21:28:38.066]        </control>
[21:28:38.066]        // end if-block "isSWJ"
[21:28:38.066]      </control>
[21:28:38.067]      <control if="!isSWJ" while="" timeout="0" info="">
[21:28:38.067]        // if-block "!isSWJ"
[21:28:38.067]          // =>  FALSE
[21:28:38.067]        // skip if-block "!isSWJ"
[21:28:38.067]      </control>
[21:28:38.067]      <block atomic="false" info="">
[21:28:38.067]        ReadDP(0x0);
[21:28:38.070]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:28:38.070]      </block>
[21:28:38.071]      // end if-block "protType == 2"
[21:28:38.071]    </control>
[21:28:38.071]  </sequence>
[21:28:38.071]  
[21:28:38.074]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:28:38.074]  
[21:28:38.075]  <debugvars>
[21:28:38.075]    // Pre-defined
[21:28:38.075]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:28:38.075]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:28:38.075]    __dp=0x00000000
[21:28:38.075]    __ap=0x00000000
[21:28:38.075]    __traceout=0x00000000      (Trace Disabled)
[21:28:38.076]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:28:38.076]    __FlashAddr=0x00000000
[21:28:38.076]    __FlashLen=0x00000000
[21:28:38.076]    __FlashArg=0x00000000
[21:28:38.076]    __FlashOp=0x00000000
[21:28:38.076]    __Result=0x00000000
[21:28:38.076]  </debugvars>
[21:28:38.076]  
[21:28:38.076]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:28:38.076]    <block atomic="false" info="">
[21:28:38.077]      __var SW_DP_ABORT       = 0x0;
[21:28:38.077]        // -> [SW_DP_ABORT <= 0x00000000]
[21:28:38.077]      __var DP_CTRL_STAT      = 0x4;
[21:28:38.077]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:28:38.077]      __var DP_SELECT         = 0x8;
[21:28:38.077]        // -> [DP_SELECT <= 0x00000008]
[21:28:38.077]      __var powered_down      = 0;
[21:28:38.077]        // -> [powered_down <= 0x00000000]
[21:28:38.077]      WriteDP(DP_SELECT, 0x00000000);
[21:28:38.079]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:28:38.080]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:28:38.081]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:28:38.081]        // -> [powered_down <= 0x00000001]
[21:28:38.081]    </block>
[21:28:38.082]    <control if="powered_down" while="" timeout="0" info="">
[21:28:38.082]      // if-block "powered_down"
[21:28:38.082]        // =>  TRUE
[21:28:38.082]      <block atomic="false" info="">
[21:28:38.082]        Message(0, "Debug/System power-up request sent");
[21:28:38.084]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:28:38.089]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:28:38.089]      </block>
[21:28:38.089]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:28:38.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:28:38.091]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:28:38.091]        // while-condition  =>  FALSE
[21:28:38.091]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:28:38.091]      </control>
[21:28:38.091]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:28:38.091]        // if-block "(__protocol & 0xFFFF) == 1"
[21:28:38.091]          // =>  FALSE
[21:28:38.091]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:28:38.091]      </control>
[21:28:38.091]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:28:38.092]        // if-block "(__protocol & 0xFFFF) == 2"
[21:28:38.092]          // =>  TRUE
[21:28:38.092]        <block atomic="false" info="">
[21:28:38.092]          Message(0, "executing SWD power up");
[21:28:38.093]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:28:38.095]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:28:38.095]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:28:38.096]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:28:38.097]        </block>
[21:28:38.097]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:28:38.097]      </control>
[21:28:38.097]      // end if-block "powered_down"
[21:28:38.097]    </control>
[21:28:38.097]    <block atomic="false" info="">
[21:28:38.097]      __var DEBUG_PORT_VAL    = 0;
[21:28:38.097]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:28:38.097]      __var ACCESS_POINT_VAL  = 0;
[21:28:38.097]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:28:38.098]      __ap = 1; 
[21:28:38.098]        // -> [__ap <= 0x00000001]
[21:28:38.098]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:28:38.103]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:28:38.103]      __ap = 4;
[21:28:38.103]        // -> [__ap <= 0x00000004]
[21:28:38.103]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:28:38.107]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:28:38.107]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:28:38.108]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:28:38.109]    </block>
[21:28:38.109]    <block atomic="false" info="">
[21:28:38.109]      __var nReset = 0x80;
[21:28:38.109]        // -> [nReset <= 0x00000080]
[21:28:38.109]      __var canReadPins = 0;
[21:28:38.109]        // -> [canReadPins <= 0x00000000]
[21:28:38.110]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:28:38.116]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:28:38.116]        // -> [canReadPins <= 0x00000001]
[21:28:38.116]    </block>
[21:28:38.116]    <control if="" while="1" timeout="200" info="">
[21:28:38.116]      // while "1"  (timeout="200")
[21:28:38.116]      // while-condition  =>  TRUE
[21:28:38.116]      // while "1"  (timeout="200")
[21:28:38.116]      // while-condition  =>  TRUE
[21:28:38.116]      // while "1"  (timeout="200")
[21:28:38.116]      // while-condition  =>  TRUE
[21:28:38.116]      // while "1"  (timeout="200")
[21:28:38.116]      // while-condition  =>  TRUE
[21:28:38.116]      // while "1"  (timeout="200")
[21:28:38.116]      // while-condition  =>  TRUE
[21:28:38.116]      // while "1"  (timeout="200")
[21:28:38.116]      // while-condition  =>  TRUE
[21:28:38.116]      // while "1"  (timeout="200")
[21:28:38.116]      // while-condition  =>  TRUE
[21:28:38.116]      // while "1"  (timeout="200")
[21:28:38.118]      // while-condition  =>  TRUE
[21:28:38.118]      // while "1"  (timeout="200")
[21:28:38.118]      // while-condition  =>  TRUE
[21:28:38.118]      // while "1"  (timeout="200")
[21:28:38.118]      // while-condition  =>  TRUE
[21:28:38.118]      // while "1"  (timeout="200")
[21:28:38.118]      // while-condition  =>  TRUE
[21:28:38.118]      // while "1"  (timeout="200")
[21:28:38.118]      // while-condition  =>  TRUE
[21:28:38.118]      // while "1"  (timeout="200")
[21:28:38.118]      // while-condition  =>  TRUE
[21:28:38.118]      // while "1"  (timeout="200")
[21:28:38.119]      // while-condition  =>  TRUE
[21:28:38.119]      // while "1"  (timeout="200")
[21:28:38.119]      // while-condition  =>  TRUE
[21:28:38.119]      // while "1"  (timeout="200")
[21:28:38.119]      // while-condition  =>  TRUE
[21:28:38.119]      // while "1"  (timeout="200")
[21:28:38.119]      // while-condition  =>  TRUE
[21:28:38.119]      // while "1"  (timeout="200")
[21:28:38.119]      // while-condition  =>  TRUE
[21:28:38.119]      // while "1"  (timeout="200")
[21:28:38.119]      // while-condition  =>  TRUE
[21:28:38.119]      // while "1"  (timeout="200")
[21:28:38.119]      // while-condition  =>  TRUE
[21:28:38.121]      // while "1"  (timeout="200")
[21:28:38.121]      // while-condition  =>  TRUE
[21:28:38.121]      // while "1"  (timeout="200")
[21:28:38.121]      // while-condition  =>  TRUE
[21:28:38.121]      // while "1"  (timeout="200")
[21:28:38.121]      // while-condition  =>  TRUE
[21:28:38.121]      // while "1"  (timeout="200")
[21:28:38.121]      // while-condition  =>  TRUE
[21:28:38.121]      // while "1"  (timeout="200")
[21:28:38.121]      // while-condition  =>  TRUE
[21:28:38.121]      // while "1"  (timeout="200")
[21:28:38.121]      // while-condition  =>  TRUE
[21:28:38.122]      // while "1"  (timeout="200")
[21:28:38.122]      // while-condition  =>  TRUE
[21:28:38.122]      // while "1"  (timeout="200")
[21:28:38.122]      // while-condition  =>  TRUE
[21:28:38.122]      // while "1"  (timeout="200")
[21:28:38.122]      // while-condition  =>  TRUE
[21:28:38.122]      // while "1"  (timeout="200")
[21:28:38.122]      // while-condition  =>  TRUE
[21:28:38.122]      // while "1"  (timeout="200")
[21:28:38.122]      // while-condition  =>  TRUE
[21:28:38.122]      // while "1"  (timeout="200")
[21:28:38.123]      // while-condition  =>  TRUE
[21:28:38.123]      // while "1"  (timeout="200")
[21:28:38.123]      // while-condition  =>  TRUE
[21:28:38.123]      // while "1"  (timeout="200")
[21:28:38.123]      // while-condition  =>  TRUE
[21:28:38.123]      // while "1"  (timeout="200")
[21:28:38.123]      // while-condition  =>  TRUE
[21:28:38.124]      // while "1"  (timeout="200")
[21:28:38.124]      // while-condition  =>  TRUE
[21:28:38.124]      // while "1"  (timeout="200")
[21:28:38.124]      // while-condition  =>  TRUE
[21:28:38.124]      // while "1"  (timeout="200")
[21:28:38.124]      // while-condition  =>  TRUE
[21:28:38.124]      // while "1"  (timeout="200")
[21:28:38.124]      // while-condition  =>  TRUE
[21:28:38.124]      // while "1"  (timeout="200")
[21:28:38.124]      // while-condition  =>  TRUE
[21:28:38.124]      // while "1"  (timeout="200")
[21:28:38.124]      // while-condition  =>  TRUE
[21:28:38.124]      // while "1"  (timeout="200")
[21:28:38.124]      // while-condition  =>  TRUE
[21:28:38.124]      // while "1"  (timeout="200")
[21:28:38.124]      // while-condition  =>  TRUE
[21:28:38.124]      // while "1"  (timeout="200")
[21:28:38.126]      // while-condition  =>  TRUE
[21:28:38.126]      // while "1"  (timeout="200")
[21:28:38.126]      // while-condition  =>  TRUE
[21:28:38.126]      // while "1"  (timeout="200")
[21:28:38.126]      // while-condition  =>  TRUE
[21:28:38.126]      // while "1"  (timeout="200")
[21:28:38.126]      // while-condition  =>  TRUE
[21:28:38.126]      // while "1"  (timeout="200")
[21:28:38.126]      // while-condition  =>  TRUE
[21:28:38.127]      // while "1"  (timeout="200")
[21:28:38.127]      // while  =>  TIMEOUT
[21:28:38.127]      // end while "1"
[21:28:38.127]    </control>
[21:28:38.127]    <control if="canReadPins" while="" timeout="0" info="">
[21:28:38.127]      // if-block "canReadPins"
[21:28:38.127]        // =>  TRUE
[21:28:38.127]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:28:38.128]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:28:38.130]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:28:38.130]        // while-condition  =>  FALSE
[21:28:38.130]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:28:38.130]      </control>
[21:28:38.131]      // end if-block "canReadPins"
[21:28:38.131]    </control>
[21:28:38.131]    <control if="!canReadPins" while="" timeout="0" info="">
[21:28:38.131]      // if-block "!canReadPins"
[21:28:38.131]        // =>  FALSE
[21:28:38.131]      // skip if-block "!canReadPins"
[21:28:38.131]    </control>
[21:28:38.131]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:28:38.131]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:28:38.131]        // =>  TRUE
[21:28:38.131]      <block atomic="false" info="">
[21:28:38.132]        WriteAP(0x00, 0x190008);
[21:28:38.133]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:28:38.133]        WriteAP(0xF0, 0x01);
[21:28:38.133]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:28:38.133]      </block>
[21:28:38.142]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:28:38.142]    </control>
[21:28:38.142]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:28:38.142]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:28:38.142]        // =>  FALSE
[21:28:38.142]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:28:38.142]    </control>
[21:28:38.142]    <block atomic="false" info="">
[21:28:38.142]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:28:38.147]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:28:38.147]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:28:38.147]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:28:38.149]      __ap = 0; //lets make sure we reset the access point selection
[21:28:38.149]        // -> [__ap <= 0x00000000]
[21:28:38.149]    </block>
[21:28:38.149]  </sequence>
[21:28:38.149]  
[21:28:38.188]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:28:38.188]  
[21:28:38.188]  <debugvars>
[21:28:38.188]    // Pre-defined
[21:28:38.188]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:28:38.188]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:28:38.188]    __dp=0x00000000
[21:28:38.188]    __ap=0x00000000
[21:28:38.189]    __traceout=0x00000000      (Trace Disabled)
[21:28:38.189]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:28:38.189]    __FlashAddr=0x00000000
[21:28:38.189]    __FlashLen=0x00000000
[21:28:38.189]    __FlashArg=0x00000000
[21:28:38.189]    __FlashOp=0x00000000
[21:28:38.189]    __Result=0x00000000
[21:28:38.189]  </debugvars>
[21:28:38.189]  
[21:28:38.189]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:28:38.189]    <block atomic="false" info="">
[21:28:38.190]      __var deviceID = 0;
[21:28:38.190]        // -> [deviceID <= 0x00000000]
[21:28:38.190]      __var version = 0;
[21:28:38.190]        // -> [version <= 0x00000000]
[21:28:38.190]      __var partNum = 0;
[21:28:38.190]        // -> [partNum <= 0x00000000]
[21:28:38.190]      __var manuf = 0;
[21:28:38.191]        // -> [manuf <= 0x00000000]
[21:28:38.191]      __var isMSPM0G1X0X_G3X0X = 0;
[21:28:38.191]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:28:38.191]      __var isProduction = 0;
[21:28:38.191]        // -> [isProduction <= 0x00000000]
[21:28:38.191]      __var continueId = 0;
[21:28:38.191]        // -> [continueId <= 0x00000000]
[21:28:38.191]      deviceID =   Read32(0x41C40004);
[21:28:38.195]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:28:38.195]        // -> [deviceID <= 0x2BB8802F]
[21:28:38.195]      version = deviceID >> 28;
[21:28:38.195]        // -> [version <= 0x00000002]
[21:28:38.195]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:28:38.195]        // -> [partNum <= 0x0000BB88]
[21:28:38.195]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:28:38.195]        // -> [manuf <= 0x00000017]
[21:28:38.195]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:28:38.195]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:28:38.195]      isProduction = (version > 0);
[21:28:38.195]        // -> [isProduction <= 0x00000001]
[21:28:38.195]    </block>
[21:28:38.195]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:28:38.195]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:28:38.195]        // =>  FALSE
[21:28:38.195]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:28:38.195]    </control>
[21:28:38.195]    <control if="continueId == 4" while="" timeout="0" info="">
[21:28:38.195]      // if-block "continueId == 4"
[21:28:38.195]        // =>  FALSE
[21:28:38.195]      // skip if-block "continueId == 4"
[21:28:38.195]    </control>
[21:28:38.195]    <control if="!isProduction" while="" timeout="0" info="">
[21:28:38.195]      // if-block "!isProduction"
[21:28:38.195]        // =>  FALSE
[21:28:38.195]      // skip if-block "!isProduction"
[21:28:38.195]    </control>
[21:28:38.195]  </sequence>
[21:28:38.195]  
[21:29:11.655]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:29:11.655]  
[21:29:11.668]  <debugvars>
[21:29:11.668]    // Pre-defined
[21:29:11.668]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:29:11.668]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:29:11.668]    __dp=0x00000000
[21:29:11.668]    __ap=0x00000000
[21:29:11.669]    __traceout=0x00000000      (Trace Disabled)
[21:29:11.669]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:29:11.669]    __FlashAddr=0x00000000
[21:29:11.669]    __FlashLen=0x00000000
[21:29:11.669]    __FlashArg=0x00000000
[21:29:11.669]    __FlashOp=0x00000000
[21:29:11.669]    __Result=0x00000000
[21:29:11.669]  </debugvars>
[21:29:11.669]  
[21:29:11.670]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:29:11.670]    <block atomic="false" info="">
[21:29:11.670]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:29:11.670]        // -> [isSWJ <= 0x00000001]
[21:29:11.670]      __var hasDormant = __protocol & 0x00020000;
[21:29:11.670]        // -> [hasDormant <= 0x00000000]
[21:29:11.670]      __var protType   = __protocol & 0x0000FFFF;
[21:29:11.670]        // -> [protType <= 0x00000002]
[21:29:11.670]    </block>
[21:29:11.670]    <control if="protType == 1" while="" timeout="0" info="">
[21:29:11.670]      // if-block "protType == 1"
[21:29:11.670]        // =>  FALSE
[21:29:11.670]      // skip if-block "protType == 1"
[21:29:11.670]    </control>
[21:29:11.670]    <control if="protType == 2" while="" timeout="0" info="">
[21:29:11.670]      // if-block "protType == 2"
[21:29:11.670]        // =>  TRUE
[21:29:11.670]      <control if="isSWJ" while="" timeout="0" info="">
[21:29:11.670]        // if-block "isSWJ"
[21:29:11.670]          // =>  TRUE
[21:29:11.670]        <control if="hasDormant" while="" timeout="0" info="">
[21:29:11.670]          // if-block "hasDormant"
[21:29:11.670]            // =>  FALSE
[21:29:11.670]          // skip if-block "hasDormant"
[21:29:11.670]        </control>
[21:29:11.670]        <control if="!hasDormant" while="" timeout="0" info="">
[21:29:11.670]          // if-block "!hasDormant"
[21:29:11.673]            // =>  TRUE
[21:29:11.673]          <block atomic="false" info="">
[21:29:11.673]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:29:11.675]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:29:11.675]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:29:11.675]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:29:11.675]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:29:11.681]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:29:11.681]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:29:11.682]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:29:11.682]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:29:11.684]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:29:11.684]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:29:11.691]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:29:11.691]          </block>
[21:29:11.691]          // end if-block "!hasDormant"
[21:29:11.697]        </control>
[21:29:11.697]        // end if-block "isSWJ"
[21:29:11.697]      </control>
[21:29:11.697]      <control if="!isSWJ" while="" timeout="0" info="">
[21:29:11.697]        // if-block "!isSWJ"
[21:29:11.697]          // =>  FALSE
[21:29:11.698]        // skip if-block "!isSWJ"
[21:29:11.698]      </control>
[21:29:11.698]      <block atomic="false" info="">
[21:29:11.698]        ReadDP(0x0);
[21:29:11.701]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:29:11.701]      </block>
[21:29:11.701]      // end if-block "protType == 2"
[21:29:11.701]    </control>
[21:29:11.702]  </sequence>
[21:29:11.702]  
[21:29:11.703]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:29:11.703]  
[21:29:11.703]  <debugvars>
[21:29:11.703]    // Pre-defined
[21:29:11.703]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:29:11.703]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:29:11.703]    __dp=0x00000000
[21:29:11.703]    __ap=0x00000000
[21:29:11.703]    __traceout=0x00000000      (Trace Disabled)
[21:29:11.703]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:29:11.703]    __FlashAddr=0x00000000
[21:29:11.703]    __FlashLen=0x00000000
[21:29:11.703]    __FlashArg=0x00000000
[21:29:11.703]    __FlashOp=0x00000000
[21:29:11.703]    __Result=0x00000000
[21:29:11.703]  </debugvars>
[21:29:11.703]  
[21:29:11.703]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:29:11.703]    <block atomic="false" info="">
[21:29:11.703]      __var SW_DP_ABORT       = 0x0;
[21:29:11.703]        // -> [SW_DP_ABORT <= 0x00000000]
[21:29:11.703]      __var DP_CTRL_STAT      = 0x4;
[21:29:11.703]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:29:11.703]      __var DP_SELECT         = 0x8;
[21:29:11.703]        // -> [DP_SELECT <= 0x00000008]
[21:29:11.703]      __var powered_down      = 0;
[21:29:11.703]        // -> [powered_down <= 0x00000000]
[21:29:11.703]      WriteDP(DP_SELECT, 0x00000000);
[21:29:11.703]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:29:11.703]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:29:11.713]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:29:11.713]        // -> [powered_down <= 0x00000001]
[21:29:11.714]    </block>
[21:29:11.714]    <control if="powered_down" while="" timeout="0" info="">
[21:29:11.714]      // if-block "powered_down"
[21:29:11.714]        // =>  TRUE
[21:29:11.714]      <block atomic="false" info="">
[21:29:11.714]        Message(0, "Debug/System power-up request sent");
[21:29:11.717]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:29:11.719]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:29:11.719]      </block>
[21:29:11.719]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:29:11.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:29:11.721]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:29:11.721]        // while-condition  =>  FALSE
[21:29:11.721]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:29:11.721]      </control>
[21:29:11.721]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:29:11.721]        // if-block "(__protocol & 0xFFFF) == 1"
[21:29:11.721]          // =>  FALSE
[21:29:11.721]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:29:11.721]      </control>
[21:29:11.721]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:29:11.723]        // if-block "(__protocol & 0xFFFF) == 2"
[21:29:11.723]          // =>  TRUE
[21:29:11.723]        <block atomic="false" info="">
[21:29:11.723]          Message(0, "executing SWD power up");
[21:29:11.724]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:29:11.729]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:29:11.729]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:29:11.736]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:29:11.736]        </block>
[21:29:11.736]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:29:11.736]      </control>
[21:29:11.736]      // end if-block "powered_down"
[21:29:11.736]    </control>
[21:29:11.736]    <block atomic="false" info="">
[21:29:11.736]      __var DEBUG_PORT_VAL    = 0;
[21:29:11.736]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:29:11.736]      __var ACCESS_POINT_VAL  = 0;
[21:29:11.736]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:29:11.736]      __ap = 1; 
[21:29:11.736]        // -> [__ap <= 0x00000001]
[21:29:11.736]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:29:11.742]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:29:11.742]      __ap = 4;
[21:29:11.742]        // -> [__ap <= 0x00000004]
[21:29:11.742]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:29:11.751]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:29:11.751]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:29:11.751]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:29:11.751]    </block>
[21:29:11.751]    <block atomic="false" info="">
[21:29:11.751]      __var nReset = 0x80;
[21:29:11.751]        // -> [nReset <= 0x00000080]
[21:29:11.751]      __var canReadPins = 0;
[21:29:11.751]        // -> [canReadPins <= 0x00000000]
[21:29:11.751]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:29:11.751]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:29:11.751]        // -> [canReadPins <= 0x00000001]
[21:29:11.751]    </block>
[21:29:11.751]    <control if="" while="1" timeout="200" info="">
[21:29:11.751]      // while "1"  (timeout="200")
[21:29:11.751]      // while-condition  =>  TRUE
[21:29:11.751]      // while "1"  (timeout="200")
[21:29:11.751]      // while-condition  =>  TRUE
[21:29:11.751]      // while "1"  (timeout="200")
[21:29:11.751]      // while-condition  =>  TRUE
[21:29:11.751]      // while "1"  (timeout="200")
[21:29:11.751]      // while-condition  =>  TRUE
[21:29:11.751]      // while "1"  (timeout="200")
[21:29:11.751]      // while-condition  =>  TRUE
[21:29:11.751]      // while "1"  (timeout="200")
[21:29:11.751]      // while-condition  =>  TRUE
[21:29:11.751]      // while "1"  (timeout="200")
[21:29:11.751]      // while-condition  =>  TRUE
[21:29:11.751]      // while "1"  (timeout="200")
[21:29:11.751]      // while-condition  =>  TRUE
[21:29:11.751]      // while "1"  (timeout="200")
[21:29:11.751]      // while-condition  =>  TRUE
[21:29:11.751]      // while "1"  (timeout="200")
[21:29:11.751]      // while-condition  =>  TRUE
[21:29:11.751]      // while "1"  (timeout="200")
[21:29:11.759]      // while-condition  =>  TRUE
[21:29:11.759]      // while "1"  (timeout="200")
[21:29:11.759]      // while  =>  TIMEOUT
[21:29:11.759]      // end while "1"
[21:29:11.759]    </control>
[21:29:11.759]    <control if="canReadPins" while="" timeout="0" info="">
[21:29:11.759]      // if-block "canReadPins"
[21:29:11.759]        // =>  TRUE
[21:29:11.759]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:29:11.759]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:29:11.762]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:29:11.762]        // while-condition  =>  FALSE
[21:29:11.762]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:29:11.763]      </control>
[21:29:11.763]      // end if-block "canReadPins"
[21:29:11.763]    </control>
[21:29:11.763]    <control if="!canReadPins" while="" timeout="0" info="">
[21:29:11.763]      // if-block "!canReadPins"
[21:29:11.763]        // =>  FALSE
[21:29:11.763]      // skip if-block "!canReadPins"
[21:29:11.763]    </control>
[21:29:11.763]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:29:11.763]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:29:11.764]        // =>  TRUE
[21:29:11.764]      <block atomic="false" info="">
[21:29:11.764]        WriteAP(0x00, 0x190008);
[21:29:11.768]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:29:11.768]        WriteAP(0xF0, 0x01);
[21:29:11.768]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:29:11.768]      </block>
[21:29:11.768]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:29:11.768]    </control>
[21:29:11.768]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:29:11.768]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:29:11.768]        // =>  FALSE
[21:29:11.768]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:29:11.768]    </control>
[21:29:11.768]    <block atomic="false" info="">
[21:29:11.768]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:29:11.768]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:29:11.768]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:29:11.768]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:29:11.777]      __ap = 0; //lets make sure we reset the access point selection
[21:29:11.777]        // -> [__ap <= 0x00000000]
[21:29:11.777]    </block>
[21:29:11.777]  </sequence>
[21:29:11.777]  
[21:29:11.819]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:29:11.819]  
[21:29:11.819]  <debugvars>
[21:29:11.819]    // Pre-defined
[21:29:11.819]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:29:11.819]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:29:11.819]    __dp=0x00000000
[21:29:11.819]    __ap=0x00000000
[21:29:11.820]    __traceout=0x00000000      (Trace Disabled)
[21:29:11.820]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:29:11.820]    __FlashAddr=0x00000000
[21:29:11.820]    __FlashLen=0x00000000
[21:29:11.820]    __FlashArg=0x00000000
[21:29:11.820]    __FlashOp=0x00000000
[21:29:11.820]    __Result=0x00000000
[21:29:11.820]  </debugvars>
[21:29:11.820]  
[21:29:11.820]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:29:11.820]    <block atomic="false" info="">
[21:29:11.820]      __var deviceID = 0;
[21:29:11.820]        // -> [deviceID <= 0x00000000]
[21:29:11.820]      __var version = 0;
[21:29:11.820]        // -> [version <= 0x00000000]
[21:29:11.820]      __var partNum = 0;
[21:29:11.822]        // -> [partNum <= 0x00000000]
[21:29:11.822]      __var manuf = 0;
[21:29:11.822]        // -> [manuf <= 0x00000000]
[21:29:11.822]      __var isMSPM0G1X0X_G3X0X = 0;
[21:29:11.822]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:29:11.822]      __var isProduction = 0;
[21:29:11.822]        // -> [isProduction <= 0x00000000]
[21:29:11.822]      __var continueId = 0;
[21:29:11.822]        // -> [continueId <= 0x00000000]
[21:29:11.824]      deviceID =   Read32(0x41C40004);
[21:29:11.829]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:29:11.829]        // -> [deviceID <= 0x2BB8802F]
[21:29:11.829]      version = deviceID >> 28;
[21:29:11.829]        // -> [version <= 0x00000002]
[21:29:11.829]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:29:11.829]        // -> [partNum <= 0x0000BB88]
[21:29:11.829]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:29:11.829]        // -> [manuf <= 0x00000017]
[21:29:11.829]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:29:11.829]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:29:11.829]      isProduction = (version > 0);
[21:29:11.829]        // -> [isProduction <= 0x00000001]
[21:29:11.829]    </block>
[21:29:11.829]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:29:11.829]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:29:11.829]        // =>  FALSE
[21:29:11.829]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:29:11.829]    </control>
[21:29:11.829]    <control if="continueId == 4" while="" timeout="0" info="">
[21:29:11.829]      // if-block "continueId == 4"
[21:29:11.829]        // =>  FALSE
[21:29:11.829]      // skip if-block "continueId == 4"
[21:29:11.829]    </control>
[21:29:11.829]    <control if="!isProduction" while="" timeout="0" info="">
[21:29:11.829]      // if-block "!isProduction"
[21:29:11.829]        // =>  FALSE
[21:29:11.829]      // skip if-block "!isProduction"
[21:29:11.829]    </control>
[21:29:11.829]  </sequence>
[21:29:11.829]  
[21:36:10.927]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:36:10.927]  
[21:36:10.927]  <debugvars>
[21:36:10.927]    // Pre-defined
[21:36:10.927]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:36:10.927]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:36:10.927]    __dp=0x00000000
[21:36:10.928]    __ap=0x00000000
[21:36:10.928]    __traceout=0x00000000      (Trace Disabled)
[21:36:10.928]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:36:10.928]    __FlashAddr=0x00000000
[21:36:10.928]    __FlashLen=0x00000000
[21:36:10.928]    __FlashArg=0x00000000
[21:36:10.928]    __FlashOp=0x00000000
[21:36:10.928]    __Result=0x00000000
[21:36:10.928]  </debugvars>
[21:36:10.928]  
[21:36:10.929]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:36:10.929]    <block atomic="false" info="">
[21:36:10.929]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:36:10.929]        // -> [isSWJ <= 0x00000001]
[21:36:10.929]      __var hasDormant = __protocol & 0x00020000;
[21:36:10.929]        // -> [hasDormant <= 0x00000000]
[21:36:10.929]      __var protType   = __protocol & 0x0000FFFF;
[21:36:10.929]        // -> [protType <= 0x00000002]
[21:36:10.929]    </block>
[21:36:10.929]    <control if="protType == 1" while="" timeout="0" info="">
[21:36:10.931]      // if-block "protType == 1"
[21:36:10.931]        // =>  FALSE
[21:36:10.931]      // skip if-block "protType == 1"
[21:36:10.931]    </control>
[21:36:10.931]    <control if="protType == 2" while="" timeout="0" info="">
[21:36:10.931]      // if-block "protType == 2"
[21:36:10.931]        // =>  TRUE
[21:36:10.931]      <control if="isSWJ" while="" timeout="0" info="">
[21:36:10.931]        // if-block "isSWJ"
[21:36:10.931]          // =>  TRUE
[21:36:10.931]        <control if="hasDormant" while="" timeout="0" info="">
[21:36:10.931]          // if-block "hasDormant"
[21:36:10.932]            // =>  FALSE
[21:36:10.932]          // skip if-block "hasDormant"
[21:36:10.932]        </control>
[21:36:10.932]        <control if="!hasDormant" while="" timeout="0" info="">
[21:36:10.932]          // if-block "!hasDormant"
[21:36:10.932]            // =>  TRUE
[21:36:10.932]          <block atomic="false" info="">
[21:36:10.932]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:36:10.934]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:36:10.934]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:36:10.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:36:10.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:36:10.948]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:36:10.948]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:36:10.951]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:36:10.951]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:36:10.952]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:36:10.952]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:36:10.953]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:36:10.953]          </block>
[21:36:10.953]          // end if-block "!hasDormant"
[21:36:10.953]        </control>
[21:36:10.953]        // end if-block "isSWJ"
[21:36:10.953]      </control>
[21:36:10.954]      <control if="!isSWJ" while="" timeout="0" info="">
[21:36:10.954]        // if-block "!isSWJ"
[21:36:10.954]          // =>  FALSE
[21:36:10.954]        // skip if-block "!isSWJ"
[21:36:10.954]      </control>
[21:36:10.954]      <block atomic="false" info="">
[21:36:10.954]        ReadDP(0x0);
[21:36:10.956]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:36:10.956]      </block>
[21:36:10.956]      // end if-block "protType == 2"
[21:36:10.956]    </control>
[21:36:10.956]  </sequence>
[21:36:10.956]  
[21:36:10.960]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:36:10.960]  
[21:36:10.960]  <debugvars>
[21:36:10.960]    // Pre-defined
[21:36:10.960]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:36:10.962]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:36:10.962]    __dp=0x00000000
[21:36:10.962]    __ap=0x00000000
[21:36:10.962]    __traceout=0x00000000      (Trace Disabled)
[21:36:10.962]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:36:10.962]    __FlashAddr=0x00000000
[21:36:10.962]    __FlashLen=0x00000000
[21:36:10.962]    __FlashArg=0x00000000
[21:36:10.962]    __FlashOp=0x00000000
[21:36:10.962]    __Result=0x00000000
[21:36:10.962]  </debugvars>
[21:36:10.962]  
[21:36:10.962]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:36:10.962]    <block atomic="false" info="">
[21:36:10.962]      __var SW_DP_ABORT       = 0x0;
[21:36:10.962]        // -> [SW_DP_ABORT <= 0x00000000]
[21:36:10.963]      __var DP_CTRL_STAT      = 0x4;
[21:36:10.963]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:36:10.963]      __var DP_SELECT         = 0x8;
[21:36:10.963]        // -> [DP_SELECT <= 0x00000008]
[21:36:10.963]      __var powered_down      = 0;
[21:36:10.963]        // -> [powered_down <= 0x00000000]
[21:36:10.963]      WriteDP(DP_SELECT, 0x00000000);
[21:36:10.965]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:36:10.965]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:36:10.969]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:36:10.970]        // -> [powered_down <= 0x00000001]
[21:36:10.970]    </block>
[21:36:10.970]    <control if="powered_down" while="" timeout="0" info="">
[21:36:10.970]      // if-block "powered_down"
[21:36:10.970]        // =>  TRUE
[21:36:10.970]      <block atomic="false" info="">
[21:36:10.970]        Message(0, "Debug/System power-up request sent");
[21:36:10.974]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:36:10.977]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:36:10.977]      </block>
[21:36:10.977]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:36:10.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:36:10.979]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:36:10.979]        // while-condition  =>  FALSE
[21:36:10.979]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:36:10.979]      </control>
[21:36:10.979]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:36:10.979]        // if-block "(__protocol & 0xFFFF) == 1"
[21:36:10.979]          // =>  FALSE
[21:36:10.979]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:36:10.979]      </control>
[21:36:10.979]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:36:10.979]        // if-block "(__protocol & 0xFFFF) == 2"
[21:36:10.980]          // =>  TRUE
[21:36:10.980]        <block atomic="false" info="">
[21:36:10.980]          Message(0, "executing SWD power up");
[21:36:10.981]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:36:10.985]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:36:10.985]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:36:10.987]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:36:10.987]        </block>
[21:36:10.987]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:36:10.987]      </control>
[21:36:10.987]      // end if-block "powered_down"
[21:36:10.987]    </control>
[21:36:10.988]    <block atomic="false" info="">
[21:36:10.988]      __var DEBUG_PORT_VAL    = 0;
[21:36:10.988]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:36:10.988]      __var ACCESS_POINT_VAL  = 0;
[21:36:10.988]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:36:10.988]      __ap = 1; 
[21:36:10.988]        // -> [__ap <= 0x00000001]
[21:36:10.988]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:36:10.992]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:36:10.992]      __ap = 4;
[21:36:10.992]        // -> [__ap <= 0x00000004]
[21:36:10.992]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:36:11.008]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:36:11.008]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:36:11.008]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:36:11.010]    </block>
[21:36:11.010]    <block atomic="false" info="">
[21:36:11.010]      __var nReset = 0x80;
[21:36:11.010]        // -> [nReset <= 0x00000080]
[21:36:11.010]      __var canReadPins = 0;
[21:36:11.010]        // -> [canReadPins <= 0x00000000]
[21:36:11.010]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:36:11.012]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:36:11.012]        // -> [canReadPins <= 0x00000001]
[21:36:11.012]    </block>
[21:36:11.012]    <control if="" while="1" timeout="200" info="">
[21:36:11.012]      // while "1"  (timeout="200")
[21:36:11.012]      // while-condition  =>  TRUE
[21:36:11.012]      // while "1"  (timeout="200")
[21:36:11.012]      // while-condition  =>  TRUE
[21:36:11.012]      // while "1"  (timeout="200")
[21:36:11.012]      // while-condition  =>  TRUE
[21:36:11.012]      // while "1"  (timeout="200")
[21:36:11.012]      // while-condition  =>  TRUE
[21:36:11.013]      // while "1"  (timeout="200")
[21:36:11.013]      // while-condition  =>  TRUE
[21:36:11.013]      // while "1"  (timeout="200")
[21:36:11.013]      // while-condition  =>  TRUE
[21:36:11.013]      // while "1"  (timeout="200")
[21:36:11.013]      // while-condition  =>  TRUE
[21:36:11.013]      // while "1"  (timeout="200")
[21:36:11.013]      // while-condition  =>  TRUE
[21:36:11.013]      // while "1"  (timeout="200")
[21:36:11.013]      // while-condition  =>  TRUE
[21:36:11.013]      // while "1"  (timeout="200")
[21:36:11.013]      // while-condition  =>  TRUE
[21:36:11.013]      // while "1"  (timeout="200")
[21:36:11.013]      // while-condition  =>  TRUE
[21:36:11.014]      // while "1"  (timeout="200")
[21:36:11.014]      // while-condition  =>  TRUE
[21:36:11.014]      // while "1"  (timeout="200")
[21:36:11.014]      // while-condition  =>  TRUE
[21:36:11.014]      // while "1"  (timeout="200")
[21:36:11.014]      // while-condition  =>  TRUE
[21:36:11.014]      // while "1"  (timeout="200")
[21:36:11.014]      // while-condition  =>  TRUE
[21:36:11.014]      // while "1"  (timeout="200")
[21:36:11.015]      // while-condition  =>  TRUE
[21:36:11.015]      // while "1"  (timeout="200")
[21:36:11.015]      // while-condition  =>  TRUE
[21:36:11.015]      // while "1"  (timeout="200")
[21:36:11.015]      // while-condition  =>  TRUE
[21:36:11.015]      // while "1"  (timeout="200")
[21:36:11.015]      // while-condition  =>  TRUE
[21:36:11.015]      // while "1"  (timeout="200")
[21:36:11.015]      // while-condition  =>  TRUE
[21:36:11.015]      // while "1"  (timeout="200")
[21:36:11.015]      // while-condition  =>  TRUE
[21:36:11.015]      // while "1"  (timeout="200")
[21:36:11.015]      // while-condition  =>  TRUE
[21:36:11.015]      // while "1"  (timeout="200")
[21:36:11.017]      // while-condition  =>  TRUE
[21:36:11.017]      // while "1"  (timeout="200")
[21:36:11.017]      // while-condition  =>  TRUE
[21:36:11.017]      // while "1"  (timeout="200")
[21:36:11.017]      // while-condition  =>  TRUE
[21:36:11.017]      // while "1"  (timeout="200")
[21:36:11.017]      // while-condition  =>  TRUE
[21:36:11.017]      // while "1"  (timeout="200")
[21:36:11.017]      // while-condition  =>  TRUE
[21:36:11.017]      // while "1"  (timeout="200")
[21:36:11.018]      // while-condition  =>  TRUE
[21:36:11.018]      // while "1"  (timeout="200")
[21:36:11.018]      // while-condition  =>  TRUE
[21:36:11.018]      // while "1"  (timeout="200")
[21:36:11.018]      // while-condition  =>  TRUE
[21:36:11.018]      // while "1"  (timeout="200")
[21:36:11.018]      // while-condition  =>  TRUE
[21:36:11.018]      // while "1"  (timeout="200")
[21:36:11.018]      // while-condition  =>  TRUE
[21:36:11.018]      // while "1"  (timeout="200")
[21:36:11.018]      // while-condition  =>  TRUE
[21:36:11.018]      // while "1"  (timeout="200")
[21:36:11.018]      // while-condition  =>  TRUE
[21:36:11.018]      // while "1"  (timeout="200")
[21:36:11.019]      // while-condition  =>  TRUE
[21:36:11.019]      // while "1"  (timeout="200")
[21:36:11.019]      // while  =>  TIMEOUT
[21:36:11.019]      // end while "1"
[21:36:11.019]    </control>
[21:36:11.019]    <control if="canReadPins" while="" timeout="0" info="">
[21:36:11.019]      // if-block "canReadPins"
[21:36:11.019]        // =>  TRUE
[21:36:11.019]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:36:11.019]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:36:11.022]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:36:11.022]        // while-condition  =>  FALSE
[21:36:11.022]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:36:11.023]      </control>
[21:36:11.023]      // end if-block "canReadPins"
[21:36:11.023]    </control>
[21:36:11.023]    <control if="!canReadPins" while="" timeout="0" info="">
[21:36:11.023]      // if-block "!canReadPins"
[21:36:11.023]        // =>  FALSE
[21:36:11.023]      // skip if-block "!canReadPins"
[21:36:11.023]    </control>
[21:36:11.023]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:36:11.023]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:36:11.024]        // =>  TRUE
[21:36:11.024]      <block atomic="false" info="">
[21:36:11.024]        WriteAP(0x00, 0x190008);
[21:36:11.025]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:36:11.025]        WriteAP(0xF0, 0x01);
[21:36:11.029]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:36:11.029]      </block>
[21:36:11.030]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:36:11.030]    </control>
[21:36:11.030]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:36:11.030]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:36:11.030]        // =>  FALSE
[21:36:11.030]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:36:11.030]    </control>
[21:36:11.030]    <block atomic="false" info="">
[21:36:11.030]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:36:11.033]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:36:11.033]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:36:11.033]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:36:11.035]      __ap = 0; //lets make sure we reset the access point selection
[21:36:11.036]        // -> [__ap <= 0x00000000]
[21:36:11.036]    </block>
[21:36:11.036]  </sequence>
[21:36:11.036]  
[21:36:11.058]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:36:11.058]  
[21:36:11.058]  <debugvars>
[21:36:11.058]    // Pre-defined
[21:36:11.058]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:36:11.059]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:36:11.059]    __dp=0x00000000
[21:36:11.059]    __ap=0x00000000
[21:36:11.059]    __traceout=0x00000000      (Trace Disabled)
[21:36:11.059]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:36:11.059]    __FlashAddr=0x00000000
[21:36:11.059]    __FlashLen=0x00000000
[21:36:11.059]    __FlashArg=0x00000000
[21:36:11.059]    __FlashOp=0x00000000
[21:36:11.059]    __Result=0x00000000
[21:36:11.059]  </debugvars>
[21:36:11.060]  
[21:36:11.060]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:36:11.060]    <block atomic="false" info="">
[21:36:11.060]      __var deviceID = 0;
[21:36:11.060]        // -> [deviceID <= 0x00000000]
[21:36:11.060]      __var version = 0;
[21:36:11.060]        // -> [version <= 0x00000000]
[21:36:11.060]      __var partNum = 0;
[21:36:11.060]        // -> [partNum <= 0x00000000]
[21:36:11.060]      __var manuf = 0;
[21:36:11.061]        // -> [manuf <= 0x00000000]
[21:36:11.061]      __var isMSPM0G1X0X_G3X0X = 0;
[21:36:11.061]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:36:11.061]      __var isProduction = 0;
[21:36:11.061]        // -> [isProduction <= 0x00000000]
[21:36:11.061]      __var continueId = 0;
[21:36:11.061]        // -> [continueId <= 0x00000000]
[21:36:11.061]      deviceID =   Read32(0x41C40004);
[21:36:11.067]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:36:11.068]        // -> [deviceID <= 0x2BB8802F]
[21:36:11.068]      version = deviceID >> 28;
[21:36:11.068]        // -> [version <= 0x00000002]
[21:36:11.068]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:36:11.068]        // -> [partNum <= 0x0000BB88]
[21:36:11.068]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:36:11.068]        // -> [manuf <= 0x00000017]
[21:36:11.068]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:36:11.068]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:36:11.068]      isProduction = (version > 0);
[21:36:11.068]        // -> [isProduction <= 0x00000001]
[21:36:11.068]    </block>
[21:36:11.069]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:36:11.069]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:36:11.069]        // =>  FALSE
[21:36:11.069]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:36:11.069]    </control>
[21:36:11.069]    <control if="continueId == 4" while="" timeout="0" info="">
[21:36:11.069]      // if-block "continueId == 4"
[21:36:11.069]        // =>  FALSE
[21:36:11.069]      // skip if-block "continueId == 4"
[21:36:11.069]    </control>
[21:36:11.070]    <control if="!isProduction" while="" timeout="0" info="">
[21:36:11.070]      // if-block "!isProduction"
[21:36:11.070]        // =>  FALSE
[21:36:11.070]      // skip if-block "!isProduction"
[21:36:11.070]    </control>
[21:36:11.070]  </sequence>
[21:36:11.070]  
[21:38:28.266]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:38:28.266]  
[21:38:28.267]  <debugvars>
[21:38:28.267]    // Pre-defined
[21:38:28.267]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:38:28.267]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:38:28.267]    __dp=0x00000000
[21:38:28.267]    __ap=0x00000000
[21:38:28.268]    __traceout=0x00000000      (Trace Disabled)
[21:38:28.268]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:38:28.268]    __FlashAddr=0x00000000
[21:38:28.268]    __FlashLen=0x00000000
[21:38:28.268]    __FlashArg=0x00000000
[21:38:28.268]    __FlashOp=0x00000000
[21:38:28.268]    __Result=0x00000000
[21:38:28.268]  </debugvars>
[21:38:28.268]  
[21:38:28.268]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:38:28.270]    <block atomic="false" info="">
[21:38:28.270]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:38:28.270]        // -> [isSWJ <= 0x00000001]
[21:38:28.270]      __var hasDormant = __protocol & 0x00020000;
[21:38:28.270]        // -> [hasDormant <= 0x00000000]
[21:38:28.270]      __var protType   = __protocol & 0x0000FFFF;
[21:38:28.270]        // -> [protType <= 0x00000002]
[21:38:28.270]    </block>
[21:38:28.270]    <control if="protType == 1" while="" timeout="0" info="">
[21:38:28.270]      // if-block "protType == 1"
[21:38:28.270]        // =>  FALSE
[21:38:28.270]      // skip if-block "protType == 1"
[21:38:28.271]    </control>
[21:38:28.271]    <control if="protType == 2" while="" timeout="0" info="">
[21:38:28.271]      // if-block "protType == 2"
[21:38:28.271]        // =>  TRUE
[21:38:28.271]      <control if="isSWJ" while="" timeout="0" info="">
[21:38:28.271]        // if-block "isSWJ"
[21:38:28.271]          // =>  TRUE
[21:38:28.271]        <control if="hasDormant" while="" timeout="0" info="">
[21:38:28.271]          // if-block "hasDormant"
[21:38:28.271]            // =>  FALSE
[21:38:28.271]          // skip if-block "hasDormant"
[21:38:28.271]        </control>
[21:38:28.271]        <control if="!hasDormant" while="" timeout="0" info="">
[21:38:28.272]          // if-block "!hasDormant"
[21:38:28.272]            // =>  TRUE
[21:38:28.272]          <block atomic="false" info="">
[21:38:28.272]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:38:28.273]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:38:28.274]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:38:28.275]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:38:28.275]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:38:28.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:38:28.277]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:38:28.278]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:38:28.278]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:38:28.280]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:38:28.280]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:38:28.283]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:38:28.283]          </block>
[21:38:28.283]          // end if-block "!hasDormant"
[21:38:28.283]        </control>
[21:38:28.283]        // end if-block "isSWJ"
[21:38:28.283]      </control>
[21:38:28.283]      <control if="!isSWJ" while="" timeout="0" info="">
[21:38:28.284]        // if-block "!isSWJ"
[21:38:28.284]          // =>  FALSE
[21:38:28.284]        // skip if-block "!isSWJ"
[21:38:28.284]      </control>
[21:38:28.284]      <block atomic="false" info="">
[21:38:28.285]        ReadDP(0x0);
[21:38:28.286]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:38:28.286]      </block>
[21:38:28.286]      // end if-block "protType == 2"
[21:38:28.286]    </control>
[21:38:28.286]  </sequence>
[21:38:28.286]  
[21:38:28.289]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:38:28.289]  
[21:38:28.289]  <debugvars>
[21:38:28.289]    // Pre-defined
[21:38:28.289]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:38:28.289]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:38:28.289]    __dp=0x00000000
[21:38:28.289]    __ap=0x00000000
[21:38:28.289]    __traceout=0x00000000      (Trace Disabled)
[21:38:28.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:38:28.289]    __FlashAddr=0x00000000
[21:38:28.290]    __FlashLen=0x00000000
[21:38:28.290]    __FlashArg=0x00000000
[21:38:28.290]    __FlashOp=0x00000000
[21:38:28.290]    __Result=0x00000000
[21:38:28.290]  </debugvars>
[21:38:28.290]  
[21:38:28.290]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:38:28.290]    <block atomic="false" info="">
[21:38:28.290]      __var SW_DP_ABORT       = 0x0;
[21:38:28.291]        // -> [SW_DP_ABORT <= 0x00000000]
[21:38:28.291]      __var DP_CTRL_STAT      = 0x4;
[21:38:28.292]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:38:28.292]      __var DP_SELECT         = 0x8;
[21:38:28.292]        // -> [DP_SELECT <= 0x00000008]
[21:38:28.292]      __var powered_down      = 0;
[21:38:28.292]        // -> [powered_down <= 0x00000000]
[21:38:28.292]      WriteDP(DP_SELECT, 0x00000000);
[21:38:28.294]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:38:28.294]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:38:28.295]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:38:28.295]        // -> [powered_down <= 0x00000001]
[21:38:28.295]    </block>
[21:38:28.295]    <control if="powered_down" while="" timeout="0" info="">
[21:38:28.295]      // if-block "powered_down"
[21:38:28.296]        // =>  TRUE
[21:38:28.296]      <block atomic="false" info="">
[21:38:28.296]        Message(0, "Debug/System power-up request sent");
[21:38:28.297]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:38:28.299]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:38:28.299]      </block>
[21:38:28.299]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:38:28.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:38:28.300]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:38:28.300]        // while-condition  =>  FALSE
[21:38:28.301]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:38:28.301]      </control>
[21:38:28.301]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:38:28.301]        // if-block "(__protocol & 0xFFFF) == 1"
[21:38:28.301]          // =>  FALSE
[21:38:28.302]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:38:28.302]      </control>
[21:38:28.302]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:38:28.302]        // if-block "(__protocol & 0xFFFF) == 2"
[21:38:28.302]          // =>  TRUE
[21:38:28.302]        <block atomic="false" info="">
[21:38:28.302]          Message(0, "executing SWD power up");
[21:38:28.304]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:38:28.305]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:38:28.305]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:38:28.307]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:38:28.307]        </block>
[21:38:28.307]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:38:28.307]      </control>
[21:38:28.307]      // end if-block "powered_down"
[21:38:28.307]    </control>
[21:38:28.307]    <block atomic="false" info="">
[21:38:28.308]      __var DEBUG_PORT_VAL    = 0;
[21:38:28.308]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:38:28.308]      __var ACCESS_POINT_VAL  = 0;
[21:38:28.308]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:38:28.308]      __ap = 1; 
[21:38:28.308]        // -> [__ap <= 0x00000001]
[21:38:28.308]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:38:28.312]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:38:28.312]      __ap = 4;
[21:38:28.312]        // -> [__ap <= 0x00000004]
[21:38:28.312]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:38:28.315]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:38:28.315]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:38:28.315]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:38:28.316]    </block>
[21:38:28.317]    <block atomic="false" info="">
[21:38:28.317]      __var nReset = 0x80;
[21:38:28.317]        // -> [nReset <= 0x00000080]
[21:38:28.317]      __var canReadPins = 0;
[21:38:28.318]        // -> [canReadPins <= 0x00000000]
[21:38:28.318]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:38:28.319]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:38:28.319]        // -> [canReadPins <= 0x00000001]
[21:38:28.319]    </block>
[21:38:28.319]    <control if="" while="1" timeout="200" info="">
[21:38:28.319]      // while "1"  (timeout="200")
[21:38:28.319]      // while-condition  =>  TRUE
[21:38:28.320]      // while "1"  (timeout="200")
[21:38:28.320]      // while-condition  =>  TRUE
[21:38:28.320]      // while "1"  (timeout="200")
[21:38:28.320]      // while-condition  =>  TRUE
[21:38:28.321]      // while "1"  (timeout="200")
[21:38:28.321]      // while-condition  =>  TRUE
[21:38:28.321]      // while "1"  (timeout="200")
[21:38:28.321]      // while-condition  =>  TRUE
[21:38:28.321]      // while "1"  (timeout="200")
[21:38:28.321]      // while-condition  =>  TRUE
[21:38:28.321]      // while "1"  (timeout="200")
[21:38:28.321]      // while-condition  =>  TRUE
[21:38:28.322]      // while "1"  (timeout="200")
[21:38:28.322]      // while-condition  =>  TRUE
[21:38:28.322]      // while "1"  (timeout="200")
[21:38:28.322]      // while-condition  =>  TRUE
[21:38:28.322]      // while "1"  (timeout="200")
[21:38:28.323]      // while-condition  =>  TRUE
[21:38:28.323]      // while "1"  (timeout="200")
[21:38:28.323]      // while-condition  =>  TRUE
[21:38:28.323]      // while "1"  (timeout="200")
[21:38:28.323]      // while-condition  =>  TRUE
[21:38:28.323]      // while "1"  (timeout="200")
[21:38:28.323]      // while-condition  =>  TRUE
[21:38:28.324]      // while "1"  (timeout="200")
[21:38:28.324]      // while-condition  =>  TRUE
[21:38:28.324]      // while "1"  (timeout="200")
[21:38:28.324]      // while-condition  =>  TRUE
[21:38:28.324]      // while "1"  (timeout="200")
[21:38:28.324]      // while-condition  =>  TRUE
[21:38:28.324]      // while "1"  (timeout="200")
[21:38:28.324]      // while-condition  =>  TRUE
[21:38:28.324]      // while "1"  (timeout="200")
[21:38:28.324]      // while-condition  =>  TRUE
[21:38:28.324]      // while "1"  (timeout="200")
[21:38:28.324]      // while-condition  =>  TRUE
[21:38:28.324]      // while "1"  (timeout="200")
[21:38:28.325]      // while-condition  =>  TRUE
[21:38:28.325]      // while "1"  (timeout="200")
[21:38:28.325]      // while-condition  =>  TRUE
[21:38:28.325]      // while "1"  (timeout="200")
[21:38:28.325]      // while-condition  =>  TRUE
[21:38:28.325]      // while "1"  (timeout="200")
[21:38:28.325]      // while-condition  =>  TRUE
[21:38:28.325]      // while "1"  (timeout="200")
[21:38:28.325]      // while-condition  =>  TRUE
[21:38:28.325]      // while "1"  (timeout="200")
[21:38:28.326]      // while-condition  =>  TRUE
[21:38:28.326]      // while "1"  (timeout="200")
[21:38:28.326]      // while-condition  =>  TRUE
[21:38:28.326]      // while "1"  (timeout="200")
[21:38:28.326]      // while-condition  =>  TRUE
[21:38:28.326]      // while "1"  (timeout="200")
[21:38:28.326]      // while-condition  =>  TRUE
[21:38:28.326]      // while "1"  (timeout="200")
[21:38:28.326]      // while-condition  =>  TRUE
[21:38:28.326]      // while "1"  (timeout="200")
[21:38:28.327]      // while-condition  =>  TRUE
[21:38:28.327]      // while "1"  (timeout="200")
[21:38:28.327]      // while-condition  =>  TRUE
[21:38:28.327]      // while "1"  (timeout="200")
[21:38:28.327]      // while-condition  =>  TRUE
[21:38:28.327]      // while "1"  (timeout="200")
[21:38:28.327]      // while-condition  =>  TRUE
[21:38:28.327]      // while "1"  (timeout="200")
[21:38:28.327]      // while-condition  =>  TRUE
[21:38:28.327]      // while "1"  (timeout="200")
[21:38:28.327]      // while-condition  =>  TRUE
[21:38:28.328]      // while "1"  (timeout="200")
[21:38:28.328]      // while-condition  =>  TRUE
[21:38:28.328]      // while "1"  (timeout="200")
[21:38:28.328]      // while-condition  =>  TRUE
[21:38:28.328]      // while "1"  (timeout="200")
[21:38:28.328]      // while-condition  =>  TRUE
[21:38:28.328]      // while "1"  (timeout="200")
[21:38:28.328]      // while-condition  =>  TRUE
[21:38:28.328]      // while "1"  (timeout="200")
[21:38:28.328]      // while-condition  =>  TRUE
[21:38:28.328]      // while "1"  (timeout="200")
[21:38:28.328]      // while-condition  =>  TRUE
[21:38:28.329]      // while "1"  (timeout="200")
[21:38:28.329]      // while-condition  =>  TRUE
[21:38:28.329]      // while "1"  (timeout="200")
[21:38:28.329]      // while-condition  =>  TRUE
[21:38:28.329]      // while "1"  (timeout="200")
[21:38:28.329]      // while-condition  =>  TRUE
[21:38:28.329]      // while "1"  (timeout="200")
[21:38:28.329]      // while-condition  =>  TRUE
[21:38:28.329]      // while "1"  (timeout="200")
[21:38:28.329]      // while-condition  =>  TRUE
[21:38:28.329]      // while "1"  (timeout="200")
[21:38:28.329]      // while-condition  =>  TRUE
[21:38:28.330]      // while "1"  (timeout="200")
[21:38:28.330]      // while-condition  =>  TRUE
[21:38:28.330]      // while "1"  (timeout="200")
[21:38:28.330]      // while-condition  =>  TRUE
[21:38:28.330]      // while "1"  (timeout="200")
[21:38:28.330]      // while-condition  =>  TRUE
[21:38:28.330]      // while "1"  (timeout="200")
[21:38:28.330]      // while  =>  TIMEOUT
[21:38:28.330]      // end while "1"
[21:38:28.330]    </control>
[21:38:28.330]    <control if="canReadPins" while="" timeout="0" info="">
[21:38:28.330]      // if-block "canReadPins"
[21:38:28.331]        // =>  TRUE
[21:38:28.331]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:38:28.331]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:38:28.333]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:38:28.333]        // while-condition  =>  FALSE
[21:38:28.333]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:38:28.333]      </control>
[21:38:28.333]      // end if-block "canReadPins"
[21:38:28.333]    </control>
[21:38:28.333]    <control if="!canReadPins" while="" timeout="0" info="">
[21:38:28.333]      // if-block "!canReadPins"
[21:38:28.333]        // =>  FALSE
[21:38:28.333]      // skip if-block "!canReadPins"
[21:38:28.333]    </control>
[21:38:28.333]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:38:28.333]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:38:28.333]        // =>  TRUE
[21:38:28.334]      <block atomic="false" info="">
[21:38:28.334]        WriteAP(0x00, 0x190008);
[21:38:28.335]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:38:28.335]        WriteAP(0xF0, 0x01);
[21:38:28.339]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:38:28.339]      </block>
[21:38:28.339]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:38:28.340]    </control>
[21:38:28.340]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:38:28.340]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:38:28.340]        // =>  FALSE
[21:38:28.340]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:38:28.340]    </control>
[21:38:28.340]    <block atomic="false" info="">
[21:38:28.341]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:38:28.344]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:38:28.344]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:38:28.344]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:38:28.345]      __ap = 0; //lets make sure we reset the access point selection
[21:38:28.346]        // -> [__ap <= 0x00000000]
[21:38:28.346]    </block>
[21:38:28.346]  </sequence>
[21:38:28.346]  
[21:38:28.366]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:38:28.366]  
[21:38:28.366]  <debugvars>
[21:38:28.367]    // Pre-defined
[21:38:28.367]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:38:28.367]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:38:28.367]    __dp=0x00000000
[21:38:28.367]    __ap=0x00000000
[21:38:28.367]    __traceout=0x00000000      (Trace Disabled)
[21:38:28.367]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:38:28.367]    __FlashAddr=0x00000000
[21:38:28.367]    __FlashLen=0x00000000
[21:38:28.369]    __FlashArg=0x00000000
[21:38:28.369]    __FlashOp=0x00000000
[21:38:28.369]    __Result=0x00000000
[21:38:28.369]  </debugvars>
[21:38:28.369]  
[21:38:28.369]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:38:28.369]    <block atomic="false" info="">
[21:38:28.370]      __var deviceID = 0;
[21:38:28.370]        // -> [deviceID <= 0x00000000]
[21:38:28.370]      __var version = 0;
[21:38:28.370]        // -> [version <= 0x00000000]
[21:38:28.370]      __var partNum = 0;
[21:38:28.370]        // -> [partNum <= 0x00000000]
[21:38:28.370]      __var manuf = 0;
[21:38:28.370]        // -> [manuf <= 0x00000000]
[21:38:28.370]      __var isMSPM0G1X0X_G3X0X = 0;
[21:38:28.370]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:38:28.371]      __var isProduction = 0;
[21:38:28.371]        // -> [isProduction <= 0x00000000]
[21:38:28.371]      __var continueId = 0;
[21:38:28.371]        // -> [continueId <= 0x00000000]
[21:38:28.371]      deviceID =   Read32(0x41C40004);
[21:38:28.378]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:38:28.378]        // -> [deviceID <= 0x2BB8802F]
[21:38:28.378]      version = deviceID >> 28;
[21:38:28.378]        // -> [version <= 0x00000002]
[21:38:28.379]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:38:28.379]        // -> [partNum <= 0x0000BB88]
[21:38:28.379]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:38:28.379]        // -> [manuf <= 0x00000017]
[21:38:28.379]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:38:28.379]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:38:28.379]      isProduction = (version > 0);
[21:38:28.379]        // -> [isProduction <= 0x00000001]
[21:38:28.379]    </block>
[21:38:28.380]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:38:28.380]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:38:28.380]        // =>  FALSE
[21:38:28.380]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:38:28.380]    </control>
[21:38:28.380]    <control if="continueId == 4" while="" timeout="0" info="">
[21:38:28.380]      // if-block "continueId == 4"
[21:38:28.380]        // =>  FALSE
[21:38:28.380]      // skip if-block "continueId == 4"
[21:38:28.380]    </control>
[21:38:28.381]    <control if="!isProduction" while="" timeout="0" info="">
[21:38:28.381]      // if-block "!isProduction"
[21:38:28.382]        // =>  FALSE
[21:38:28.382]      // skip if-block "!isProduction"
[21:38:28.382]    </control>
[21:38:28.382]  </sequence>
[21:38:28.382]  
[21:39:57.101]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:39:57.101]  
[21:39:57.109]  <debugvars>
[21:39:57.110]    // Pre-defined
[21:39:57.110]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:39:57.110]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:39:57.110]    __dp=0x00000000
[21:39:57.110]    __ap=0x00000000
[21:39:57.110]    __traceout=0x00000000      (Trace Disabled)
[21:39:57.110]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:39:57.110]    __FlashAddr=0x00000000
[21:39:57.111]    __FlashLen=0x00000000
[21:39:57.111]    __FlashArg=0x00000000
[21:39:57.111]    __FlashOp=0x00000000
[21:39:57.111]    __Result=0x00000000
[21:39:57.111]  </debugvars>
[21:39:57.111]  
[21:39:57.111]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:39:57.111]    <block atomic="false" info="">
[21:39:57.111]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:39:57.111]        // -> [isSWJ <= 0x00000001]
[21:39:57.111]      __var hasDormant = __protocol & 0x00020000;
[21:39:57.111]        // -> [hasDormant <= 0x00000000]
[21:39:57.112]      __var protType   = __protocol & 0x0000FFFF;
[21:39:57.112]        // -> [protType <= 0x00000002]
[21:39:57.112]    </block>
[21:39:57.112]    <control if="protType == 1" while="" timeout="0" info="">
[21:39:57.112]      // if-block "protType == 1"
[21:39:57.112]        // =>  FALSE
[21:39:57.112]      // skip if-block "protType == 1"
[21:39:57.112]    </control>
[21:39:57.112]    <control if="protType == 2" while="" timeout="0" info="">
[21:39:57.112]      // if-block "protType == 2"
[21:39:57.112]        // =>  TRUE
[21:39:57.113]      <control if="isSWJ" while="" timeout="0" info="">
[21:39:57.113]        // if-block "isSWJ"
[21:39:57.113]          // =>  TRUE
[21:39:57.113]        <control if="hasDormant" while="" timeout="0" info="">
[21:39:57.113]          // if-block "hasDormant"
[21:39:57.113]            // =>  FALSE
[21:39:57.114]          // skip if-block "hasDormant"
[21:39:57.114]        </control>
[21:39:57.114]        <control if="!hasDormant" while="" timeout="0" info="">
[21:39:57.114]          // if-block "!hasDormant"
[21:39:57.114]            // =>  TRUE
[21:39:57.114]          <block atomic="false" info="">
[21:39:57.114]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:39:57.116]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:39:57.116]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:39:57.117]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:39:57.117]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:39:57.119]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:39:57.119]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:39:57.120]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:39:57.120]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:39:57.121]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:39:57.121]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:39:57.123]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:39:57.123]          </block>
[21:39:57.123]          // end if-block "!hasDormant"
[21:39:57.123]        </control>
[21:39:57.123]        // end if-block "isSWJ"
[21:39:57.123]      </control>
[21:39:57.123]      <control if="!isSWJ" while="" timeout="0" info="">
[21:39:57.123]        // if-block "!isSWJ"
[21:39:57.123]          // =>  FALSE
[21:39:57.123]        // skip if-block "!isSWJ"
[21:39:57.123]      </control>
[21:39:57.123]      <block atomic="false" info="">
[21:39:57.123]        ReadDP(0x0);
[21:39:57.126]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:39:57.126]      </block>
[21:39:57.126]      // end if-block "protType == 2"
[21:39:57.126]    </control>
[21:39:57.126]  </sequence>
[21:39:57.126]  
[21:39:57.129]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:39:57.129]  
[21:39:57.129]  <debugvars>
[21:39:57.129]    // Pre-defined
[21:39:57.129]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:39:57.129]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:39:57.129]    __dp=0x00000000
[21:39:57.129]    __ap=0x00000000
[21:39:57.129]    __traceout=0x00000000      (Trace Disabled)
[21:39:57.129]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:39:57.129]    __FlashAddr=0x00000000
[21:39:57.129]    __FlashLen=0x00000000
[21:39:57.129]    __FlashArg=0x00000000
[21:39:57.130]    __FlashOp=0x00000000
[21:39:57.130]    __Result=0x00000000
[21:39:57.131]  </debugvars>
[21:39:57.131]  
[21:39:57.131]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:39:57.131]    <block atomic="false" info="">
[21:39:57.131]      __var SW_DP_ABORT       = 0x0;
[21:39:57.131]        // -> [SW_DP_ABORT <= 0x00000000]
[21:39:57.131]      __var DP_CTRL_STAT      = 0x4;
[21:39:57.131]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:39:57.131]      __var DP_SELECT         = 0x8;
[21:39:57.131]        // -> [DP_SELECT <= 0x00000008]
[21:39:57.132]      __var powered_down      = 0;
[21:39:57.132]        // -> [powered_down <= 0x00000000]
[21:39:57.132]      WriteDP(DP_SELECT, 0x00000000);
[21:39:57.134]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:39:57.134]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:39:57.135]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:39:57.135]        // -> [powered_down <= 0x00000001]
[21:39:57.135]    </block>
[21:39:57.135]    <control if="powered_down" while="" timeout="0" info="">
[21:39:57.135]      // if-block "powered_down"
[21:39:57.137]        // =>  TRUE
[21:39:57.137]      <block atomic="false" info="">
[21:39:57.137]        Message(0, "Debug/System power-up request sent");
[21:39:57.141]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:39:57.144]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:39:57.144]      </block>
[21:39:57.144]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:39:57.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.146]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.146]        // while-condition  =>  TRUE
[21:39:57.146]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.147]        // while-condition  =>  TRUE
[21:39:57.147]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.149]        // while-condition  =>  TRUE
[21:39:57.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.152]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.152]        // while-condition  =>  TRUE
[21:39:57.152]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.154]        // while-condition  =>  TRUE
[21:39:57.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.155]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.155]        // while-condition  =>  TRUE
[21:39:57.155]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.157]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.157]        // while-condition  =>  TRUE
[21:39:57.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.159]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.159]        // while-condition  =>  TRUE
[21:39:57.159]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.160]        // while-condition  =>  TRUE
[21:39:57.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.163]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.163]        // while-condition  =>  TRUE
[21:39:57.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.168]        // while-condition  =>  TRUE
[21:39:57.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.169]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.169]        // while-condition  =>  TRUE
[21:39:57.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.171]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.171]        // while-condition  =>  TRUE
[21:39:57.171]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.173]        // while-condition  =>  TRUE
[21:39:57.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.174]        // while-condition  =>  TRUE
[21:39:57.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.176]        // while-condition  =>  TRUE
[21:39:57.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.178]        // while-condition  =>  TRUE
[21:39:57.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.179]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.179]        // while-condition  =>  TRUE
[21:39:57.180]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.181]        // while-condition  =>  TRUE
[21:39:57.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.183]        // while-condition  =>  TRUE
[21:39:57.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.184]        // while-condition  =>  TRUE
[21:39:57.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.186]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.186]        // while-condition  =>  TRUE
[21:39:57.186]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.187]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.188]        // while-condition  =>  TRUE
[21:39:57.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.189]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.189]        // while-condition  =>  TRUE
[21:39:57.189]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.190]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.191]        // while-condition  =>  TRUE
[21:39:57.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.193]        // while-condition  =>  TRUE
[21:39:57.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.195]        // while-condition  =>  TRUE
[21:39:57.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.196]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.197]        // while-condition  =>  TRUE
[21:39:57.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.198]        // while-condition  =>  TRUE
[21:39:57.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.200]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.200]        // while-condition  =>  TRUE
[21:39:57.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.202]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.202]        // while-condition  =>  TRUE
[21:39:57.202]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.207]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.207]        // while-condition  =>  TRUE
[21:39:57.207]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.208]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.209]        // while-condition  =>  TRUE
[21:39:57.209]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.210]        // while-condition  =>  TRUE
[21:39:57.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.211]        // while-condition  =>  TRUE
[21:39:57.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.215]        // while-condition  =>  TRUE
[21:39:57.216]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.220]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.220]        // while-condition  =>  TRUE
[21:39:57.220]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.221]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.221]        // while-condition  =>  TRUE
[21:39:57.221]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.223]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.223]        // while-condition  =>  TRUE
[21:39:57.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.225]        // while-condition  =>  TRUE
[21:39:57.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.226]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.226]        // while-condition  =>  TRUE
[21:39:57.226]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.228]        // while-condition  =>  TRUE
[21:39:57.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.229]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.230]        // while-condition  =>  TRUE
[21:39:57.230]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.231]        // while-condition  =>  TRUE
[21:39:57.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.232]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.232]        // while-condition  =>  TRUE
[21:39:57.232]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.235]        // while-condition  =>  TRUE
[21:39:57.235]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.237]        // while-condition  =>  TRUE
[21:39:57.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.238]        // while-condition  =>  TRUE
[21:39:57.239]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.241]        // while-condition  =>  TRUE
[21:39:57.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.243]        // while-condition  =>  TRUE
[21:39:57.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.244]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.245]        // while-condition  =>  TRUE
[21:39:57.245]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.246]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.246]        // while-condition  =>  TRUE
[21:39:57.246]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.248]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.248]        // while-condition  =>  TRUE
[21:39:57.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.250]        // while-condition  =>  TRUE
[21:39:57.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.253]        // while-condition  =>  TRUE
[21:39:57.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.255]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.255]        // while-condition  =>  TRUE
[21:39:57.255]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.256]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.257]        // while-condition  =>  TRUE
[21:39:57.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.259]        // while-condition  =>  TRUE
[21:39:57.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.261]        // while-condition  =>  TRUE
[21:39:57.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.262]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.262]        // while-condition  =>  TRUE
[21:39:57.262]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.263]        // while-condition  =>  TRUE
[21:39:57.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.266]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.266]        // while-condition  =>  TRUE
[21:39:57.266]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.267]        // while-condition  =>  TRUE
[21:39:57.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.270]        // while-condition  =>  TRUE
[21:39:57.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.272]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.272]        // while-condition  =>  TRUE
[21:39:57.272]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.274]        // while-condition  =>  TRUE
[21:39:57.274]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.275]        // while-condition  =>  TRUE
[21:39:57.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.277]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.277]        // while-condition  =>  TRUE
[21:39:57.277]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.279]        // while-condition  =>  TRUE
[21:39:57.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.282]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.283]        // while-condition  =>  TRUE
[21:39:57.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.284]        // while-condition  =>  TRUE
[21:39:57.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.286]        // while-condition  =>  TRUE
[21:39:57.286]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.287]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.287]        // while-condition  =>  TRUE
[21:39:57.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.294]        // while-condition  =>  TRUE
[21:39:57.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.295]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.295]        // while-condition  =>  TRUE
[21:39:57.295]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.297]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.297]        // while-condition  =>  TRUE
[21:39:57.297]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.298]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.298]        // while-condition  =>  TRUE
[21:39:57.298]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.301]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.301]        // while-condition  =>  TRUE
[21:39:57.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.302]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.302]        // while-condition  =>  TRUE
[21:39:57.302]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.304]        // while-condition  =>  TRUE
[21:39:57.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.305]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.305]        // while-condition  =>  TRUE
[21:39:57.305]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.308]        // while-condition  =>  TRUE
[21:39:57.308]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.309]        // while-condition  =>  TRUE
[21:39:57.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.311]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.311]        // while-condition  =>  TRUE
[21:39:57.311]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.314]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.314]        // while-condition  =>  TRUE
[21:39:57.314]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.316]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.316]        // while-condition  =>  TRUE
[21:39:57.316]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.318]        // while-condition  =>  TRUE
[21:39:57.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.320]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.320]        // while-condition  =>  TRUE
[21:39:57.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.322]        // while-condition  =>  TRUE
[21:39:57.322]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.324]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.324]        // while-condition  =>  TRUE
[21:39:57.324]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.325]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.326]        // while-condition  =>  TRUE
[21:39:57.326]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.327]        // while-condition  =>  TRUE
[21:39:57.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.329]        // while-condition  =>  TRUE
[21:39:57.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.330]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.330]        // while-condition  =>  TRUE
[21:39:57.330]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.332]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.332]        // while-condition  =>  TRUE
[21:39:57.332]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.333]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.334]        // while-condition  =>  TRUE
[21:39:57.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.336]        // while-condition  =>  TRUE
[21:39:57.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.337]        // while-condition  =>  TRUE
[21:39:57.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.338]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.338]        // while-condition  =>  TRUE
[21:39:57.338]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.340]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.340]        // while-condition  =>  TRUE
[21:39:57.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.343]        // while-condition  =>  TRUE
[21:39:57.344]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.345]        // while-condition  =>  TRUE
[21:39:57.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.347]        // while-condition  =>  TRUE
[21:39:57.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.349]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.349]        // while-condition  =>  TRUE
[21:39:57.349]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.350]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.350]        // while-condition  =>  TRUE
[21:39:57.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.352]        // while-condition  =>  TRUE
[21:39:57.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.354]        // while-condition  =>  TRUE
[21:39:57.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.356]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.356]        // while-condition  =>  TRUE
[21:39:57.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.358]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.358]        // while-condition  =>  TRUE
[21:39:57.358]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.360]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.360]        // while-condition  =>  TRUE
[21:39:57.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.361]        // while-condition  =>  TRUE
[21:39:57.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.362]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.362]        // while-condition  =>  TRUE
[21:39:57.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.364]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.364]        // while-condition  =>  TRUE
[21:39:57.364]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.365]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.365]        // while-condition  =>  TRUE
[21:39:57.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.368]        // while-condition  =>  TRUE
[21:39:57.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.369]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.370]        // while-condition  =>  TRUE
[21:39:57.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.371]        // while-condition  =>  TRUE
[21:39:57.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.377]        // while-condition  =>  TRUE
[21:39:57.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.378]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.379]        // while-condition  =>  TRUE
[21:39:57.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.386]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.386]        // while-condition  =>  TRUE
[21:39:57.386]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.388]        // while-condition  =>  TRUE
[21:39:57.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.390]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.390]        // while-condition  =>  TRUE
[21:39:57.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.392]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.392]        // while-condition  =>  TRUE
[21:39:57.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.393]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.393]        // while-condition  =>  TRUE
[21:39:57.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.395]        // while-condition  =>  TRUE
[21:39:57.395]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.396]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.396]        // while-condition  =>  TRUE
[21:39:57.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.398]        // while-condition  =>  TRUE
[21:39:57.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.400]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.400]        // while-condition  =>  TRUE
[21:39:57.400]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.401]        // while-condition  =>  TRUE
[21:39:57.401]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.405]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.405]        // while-condition  =>  TRUE
[21:39:57.406]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.407]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.407]        // while-condition  =>  TRUE
[21:39:57.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.408]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.410]        // while-condition  =>  TRUE
[21:39:57.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.411]        // while-condition  =>  TRUE
[21:39:57.411]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.413]        // while-condition  =>  TRUE
[21:39:57.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.414]        // while-condition  =>  TRUE
[21:39:57.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.415]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.416]        // while-condition  =>  TRUE
[21:39:57.416]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.418]        // while-condition  =>  TRUE
[21:39:57.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.419]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.419]        // while-condition  =>  TRUE
[21:39:57.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.420]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.420]        // while-condition  =>  TRUE
[21:39:57.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.423]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.423]        // while-condition  =>  TRUE
[21:39:57.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.425]        // while-condition  =>  TRUE
[21:39:57.425]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.426]        // while-condition  =>  TRUE
[21:39:57.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.428]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.428]        // while-condition  =>  TRUE
[21:39:57.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.429]        // while-condition  =>  TRUE
[21:39:57.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.431]        // while-condition  =>  TRUE
[21:39:57.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.432]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.433]        // while-condition  =>  TRUE
[21:39:57.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.435]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.436]        // while-condition  =>  TRUE
[21:39:57.436]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.437]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.438]        // while-condition  =>  TRUE
[21:39:57.438]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.439]        // while-condition  =>  TRUE
[21:39:57.439]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.441]        // while-condition  =>  TRUE
[21:39:57.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.442]        // while-condition  =>  TRUE
[21:39:57.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.444]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.444]        // while-condition  =>  TRUE
[21:39:57.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.446]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.446]        // while-condition  =>  TRUE
[21:39:57.446]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.447]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.447]        // while-condition  =>  TRUE
[21:39:57.448]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.449]        // while-condition  =>  TRUE
[21:39:57.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.451]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.451]        // while-condition  =>  TRUE
[21:39:57.451]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.452]        // while-condition  =>  TRUE
[21:39:57.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.454]        // while-condition  =>  TRUE
[21:39:57.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.456]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.456]        // while-condition  =>  TRUE
[21:39:57.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.458]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.458]        // while-condition  =>  TRUE
[21:39:57.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.461]        // while-condition  =>  TRUE
[21:39:57.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.463]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.463]        // while-condition  =>  TRUE
[21:39:57.463]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.465]        // while-condition  =>  TRUE
[21:39:57.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.468]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.468]        // while-condition  =>  TRUE
[21:39:57.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.471]        // while-condition  =>  TRUE
[21:39:57.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.472]        // while-condition  =>  TRUE
[21:39:57.473]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.475]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.475]        // while-condition  =>  TRUE
[21:39:57.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.477]        // while-condition  =>  TRUE
[21:39:57.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.478]        // while-condition  =>  TRUE
[21:39:57.478]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.480]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.480]        // while-condition  =>  TRUE
[21:39:57.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.482]        // while-condition  =>  TRUE
[21:39:57.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.483]        // while-condition  =>  TRUE
[21:39:57.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.485]        // while-condition  =>  TRUE
[21:39:57.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.487]        // while-condition  =>  TRUE
[21:39:57.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.488]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.488]        // while-condition  =>  TRUE
[21:39:57.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.490]        // while-condition  =>  TRUE
[21:39:57.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.492]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.492]        // while-condition  =>  TRUE
[21:39:57.492]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.493]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.494]        // while-condition  =>  TRUE
[21:39:57.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.495]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.495]        // while-condition  =>  TRUE
[21:39:57.495]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.500]        // while-condition  =>  TRUE
[21:39:57.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.502]        // while-condition  =>  TRUE
[21:39:57.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.504]        // while-condition  =>  TRUE
[21:39:57.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.506]        // while-condition  =>  TRUE
[21:39:57.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.507]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.507]        // while-condition  =>  TRUE
[21:39:57.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.508]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.509]        // while-condition  =>  TRUE
[21:39:57.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.510]        // while-condition  =>  TRUE
[21:39:57.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.511]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.512]        // while-condition  =>  TRUE
[21:39:57.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.516]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.516]        // while-condition  =>  TRUE
[21:39:57.516]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.518]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.518]        // while-condition  =>  TRUE
[21:39:57.518]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.520]        // while-condition  =>  TRUE
[21:39:57.520]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.521]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.521]        // while-condition  =>  TRUE
[21:39:57.521]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.523]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.523]        // while-condition  =>  TRUE
[21:39:57.523]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.524]        // while-condition  =>  TRUE
[21:39:57.525]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.526]        // while-condition  =>  TRUE
[21:39:57.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.528]        // while-condition  =>  TRUE
[21:39:57.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.530]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.530]        // while-condition  =>  TRUE
[21:39:57.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.531]        // while-condition  =>  TRUE
[21:39:57.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.533]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.533]        // while-condition  =>  TRUE
[21:39:57.533]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.534]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.535]        // while-condition  =>  TRUE
[21:39:57.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.536]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.536]        // while-condition  =>  TRUE
[21:39:57.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.538]        // while-condition  =>  TRUE
[21:39:57.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.540]        // while-condition  =>  TRUE
[21:39:57.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.542]        // while-condition  =>  TRUE
[21:39:57.542]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.543]        // while-condition  =>  TRUE
[21:39:57.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.545]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.545]        // while-condition  =>  TRUE
[21:39:57.545]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.547]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.548]        // while-condition  =>  TRUE
[21:39:57.548]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.549]        // while-condition  =>  TRUE
[21:39:57.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.552]        // while-condition  =>  TRUE
[21:39:57.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.553]        // while-condition  =>  TRUE
[21:39:57.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.554]        // while-condition  =>  TRUE
[21:39:57.554]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.556]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.556]        // while-condition  =>  TRUE
[21:39:57.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.558]        // while-condition  =>  TRUE
[21:39:57.558]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.561]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.561]        // while-condition  =>  TRUE
[21:39:57.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.563]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.563]        // while-condition  =>  TRUE
[21:39:57.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.565]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.565]        // while-condition  =>  TRUE
[21:39:57.565]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.566]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.566]        // while-condition  =>  TRUE
[21:39:57.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.568]        // while-condition  =>  TRUE
[21:39:57.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.570]        // while-condition  =>  TRUE
[21:39:57.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.571]        // while-condition  =>  TRUE
[21:39:57.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.573]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.573]        // while-condition  =>  TRUE
[21:39:57.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.575]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.576]        // while-condition  =>  TRUE
[21:39:57.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.582]        // while-condition  =>  TRUE
[21:39:57.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.584]        // while-condition  =>  TRUE
[21:39:57.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.585]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.585]        // while-condition  =>  TRUE
[21:39:57.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.587]        // while-condition  =>  TRUE
[21:39:57.588]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.589]        // while-condition  =>  TRUE
[21:39:57.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.592]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.592]        // while-condition  =>  TRUE
[21:39:57.592]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.594]        // while-condition  =>  TRUE
[21:39:57.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.595]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.596]        // while-condition  =>  TRUE
[21:39:57.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.597]        // while-condition  =>  TRUE
[21:39:57.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.599]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.599]        // while-condition  =>  TRUE
[21:39:57.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.600]        // while-condition  =>  TRUE
[21:39:57.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.602]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.602]        // while-condition  =>  TRUE
[21:39:57.603]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.604]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.604]        // while-condition  =>  TRUE
[21:39:57.604]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.606]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.606]        // while-condition  =>  TRUE
[21:39:57.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.607]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.608]        // while-condition  =>  TRUE
[21:39:57.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.609]        // while-condition  =>  TRUE
[21:39:57.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.611]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.611]        // while-condition  =>  TRUE
[21:39:57.611]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.612]        // while-condition  =>  TRUE
[21:39:57.612]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.614]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.614]        // while-condition  =>  TRUE
[21:39:57.614]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.615]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.616]        // while-condition  =>  TRUE
[21:39:57.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.617]        // while-condition  =>  TRUE
[21:39:57.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.619]        // while-condition  =>  TRUE
[21:39:57.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.621]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.621]        // while-condition  =>  TRUE
[21:39:57.621]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.623]        // while-condition  =>  TRUE
[21:39:57.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.624]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.625]        // while-condition  =>  TRUE
[21:39:57.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.626]        // while-condition  =>  TRUE
[21:39:57.626]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.628]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.628]        // while-condition  =>  TRUE
[21:39:57.628]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.630]        // while-condition  =>  TRUE
[21:39:57.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.632]        // while-condition  =>  TRUE
[21:39:57.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.633]        // while-condition  =>  TRUE
[21:39:57.633]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.635]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.635]        // while-condition  =>  TRUE
[21:39:57.635]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.637]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.637]        // while-condition  =>  TRUE
[21:39:57.637]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.639]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.639]        // while-condition  =>  TRUE
[21:39:57.639]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.640]        // while-condition  =>  TRUE
[21:39:57.640]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.642]        // while-condition  =>  TRUE
[21:39:57.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.643]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.643]        // while-condition  =>  TRUE
[21:39:57.643]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.644]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.646]        // while-condition  =>  TRUE
[21:39:57.646]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.647]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.647]        // while-condition  =>  TRUE
[21:39:57.647]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.649]        // while-condition  =>  TRUE
[21:39:57.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.652]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.653]        // while-condition  =>  TRUE
[21:39:57.653]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.654]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.654]        // while-condition  =>  TRUE
[21:39:57.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.656]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.656]        // while-condition  =>  TRUE
[21:39:57.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.658]        // while-condition  =>  TRUE
[21:39:57.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.661]        // while-condition  =>  TRUE
[21:39:57.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.663]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.663]        // while-condition  =>  TRUE
[21:39:57.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.665]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.665]        // while-condition  =>  TRUE
[21:39:57.665]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.667]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.667]        // while-condition  =>  TRUE
[21:39:57.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.673]        // while-condition  =>  TRUE
[21:39:57.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.675]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.675]        // while-condition  =>  TRUE
[21:39:57.675]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.677]        // while-condition  =>  TRUE
[21:39:57.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.680]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.680]        // while-condition  =>  TRUE
[21:39:57.680]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.682]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.682]        // while-condition  =>  TRUE
[21:39:57.682]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.683]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.684]        // while-condition  =>  TRUE
[21:39:57.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.685]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.686]        // while-condition  =>  TRUE
[21:39:57.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.687]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.687]        // while-condition  =>  TRUE
[21:39:57.687]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.689]        // while-condition  =>  TRUE
[21:39:57.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.691]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.691]        // while-condition  =>  TRUE
[21:39:57.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.693]        // while-condition  =>  TRUE
[21:39:57.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.694]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.694]        // while-condition  =>  TRUE
[21:39:57.694]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.697]        // while-condition  =>  TRUE
[21:39:57.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.698]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.698]        // while-condition  =>  TRUE
[21:39:57.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.701]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.701]        // while-condition  =>  TRUE
[21:39:57.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.703]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.703]        // while-condition  =>  TRUE
[21:39:57.703]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.705]        // while-condition  =>  TRUE
[21:39:57.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.706]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.706]        // while-condition  =>  TRUE
[21:39:57.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.709]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.709]        // while-condition  =>  TRUE
[21:39:57.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.712]        // while-condition  =>  TRUE
[21:39:57.712]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.714]        // while-condition  =>  TRUE
[21:39:57.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.715]        // while-condition  =>  TRUE
[21:39:57.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.721]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.722]        // while-condition  =>  TRUE
[21:39:57.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.723]        // while-condition  =>  TRUE
[21:39:57.723]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.725]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.725]        // while-condition  =>  TRUE
[21:39:57.725]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.726]        // while-condition  =>  TRUE
[21:39:57.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.727]        // while-condition  =>  TRUE
[21:39:57.728]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.729]        // while-condition  =>  TRUE
[21:39:57.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.731]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.731]        // while-condition  =>  TRUE
[21:39:57.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.733]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.733]        // while-condition  =>  TRUE
[21:39:57.733]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.735]        // while-condition  =>  TRUE
[21:39:57.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.736]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.737]        // while-condition  =>  TRUE
[21:39:57.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.738]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.738]        // while-condition  =>  TRUE
[21:39:57.738]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.740]        // while-condition  =>  TRUE
[21:39:57.740]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.741]        // while-condition  =>  TRUE
[21:39:57.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.743]        // while-condition  =>  TRUE
[21:39:57.743]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.744]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.745]        // while-condition  =>  TRUE
[21:39:57.745]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.747]        // while-condition  =>  TRUE
[21:39:57.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.748]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.748]        // while-condition  =>  TRUE
[21:39:57.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.750]        // while-condition  =>  TRUE
[21:39:57.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.753]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.753]        // while-condition  =>  TRUE
[21:39:57.753]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.757]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.758]        // while-condition  =>  TRUE
[21:39:57.758]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.760]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.760]        // while-condition  =>  TRUE
[21:39:57.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.762]        // while-condition  =>  TRUE
[21:39:57.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.764]        // while-condition  =>  TRUE
[21:39:57.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.767]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.767]        // while-condition  =>  TRUE
[21:39:57.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.768]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.768]        // while-condition  =>  TRUE
[21:39:57.768]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.770]        // while-condition  =>  TRUE
[21:39:57.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.771]        // while-condition  =>  TRUE
[21:39:57.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.773]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.773]        // while-condition  =>  TRUE
[21:39:57.773]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.775]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.775]        // while-condition  =>  TRUE
[21:39:57.775]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.776]        // while-condition  =>  TRUE
[21:39:57.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.778]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.778]        // while-condition  =>  TRUE
[21:39:57.778]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.780]        // while-condition  =>  TRUE
[21:39:57.780]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.783]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.783]        // while-condition  =>  TRUE
[21:39:57.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.784]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.784]        // while-condition  =>  TRUE
[21:39:57.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.786]        // while-condition  =>  TRUE
[21:39:57.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.788]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.788]        // while-condition  =>  TRUE
[21:39:57.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.789]        // while-condition  =>  TRUE
[21:39:57.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.791]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.791]        // while-condition  =>  TRUE
[21:39:57.791]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.792]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.792]        // while-condition  =>  TRUE
[21:39:57.792]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.794]        // while-condition  =>  TRUE
[21:39:57.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.796]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.796]        // while-condition  =>  TRUE
[21:39:57.796]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.798]        // while-condition  =>  TRUE
[21:39:57.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.799]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.799]        // while-condition  =>  TRUE
[21:39:57.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.801]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.801]        // while-condition  =>  TRUE
[21:39:57.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.803]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.803]        // while-condition  =>  TRUE
[21:39:57.803]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.805]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.805]        // while-condition  =>  TRUE
[21:39:57.805]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.806]        // while-condition  =>  TRUE
[21:39:57.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.809]        // while-condition  =>  TRUE
[21:39:57.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.810]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.810]        // while-condition  =>  TRUE
[21:39:57.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.812]        // while-condition  =>  TRUE
[21:39:57.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.814]        // while-condition  =>  TRUE
[21:39:57.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.816]        // while-condition  =>  TRUE
[21:39:57.816]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.817]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.817]        // while-condition  =>  TRUE
[21:39:57.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.819]        // while-condition  =>  TRUE
[21:39:57.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.821]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.821]        // while-condition  =>  TRUE
[21:39:57.821]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.823]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.823]        // while-condition  =>  TRUE
[21:39:57.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.824]        // while-condition  =>  TRUE
[21:39:57.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.826]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.826]        // while-condition  =>  TRUE
[21:39:57.826]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.828]        // while-condition  =>  TRUE
[21:39:57.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.829]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.829]        // while-condition  =>  TRUE
[21:39:57.829]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.831]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.831]        // while-condition  =>  TRUE
[21:39:57.831]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.833]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.833]        // while-condition  =>  TRUE
[21:39:57.833]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.835]        // while-condition  =>  TRUE
[21:39:57.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.837]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.837]        // while-condition  =>  TRUE
[21:39:57.837]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.838]        // while-condition  =>  TRUE
[21:39:57.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.840]        // while-condition  =>  TRUE
[21:39:57.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.842]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.842]        // while-condition  =>  TRUE
[21:39:57.842]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.844]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.844]        // while-condition  =>  TRUE
[21:39:57.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.845]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.845]        // while-condition  =>  TRUE
[21:39:57.845]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.847]        // while-condition  =>  TRUE
[21:39:57.847]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.849]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.849]        // while-condition  =>  TRUE
[21:39:57.849]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.850]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.850]        // while-condition  =>  TRUE
[21:39:57.850]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.852]        // while-condition  =>  TRUE
[21:39:57.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.859]        // while-condition  =>  TRUE
[21:39:57.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.861]        // while-condition  =>  TRUE
[21:39:57.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.862]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.863]        // while-condition  =>  TRUE
[21:39:57.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.864]        // while-condition  =>  TRUE
[21:39:57.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.865]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.866]        // while-condition  =>  TRUE
[21:39:57.866]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.869]        // while-condition  =>  TRUE
[21:39:57.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.870]        // while-condition  =>  TRUE
[21:39:57.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.872]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.872]        // while-condition  =>  TRUE
[21:39:57.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.873]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.873]        // while-condition  =>  TRUE
[21:39:57.873]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.875]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.875]        // while-condition  =>  TRUE
[21:39:57.875]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.877]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.877]        // while-condition  =>  TRUE
[21:39:57.877]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.878]        // while-condition  =>  TRUE
[21:39:57.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.880]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.880]        // while-condition  =>  TRUE
[21:39:57.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.882]        // while-condition  =>  TRUE
[21:39:57.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.885]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.885]        // while-condition  =>  TRUE
[21:39:57.885]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.887]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.887]        // while-condition  =>  TRUE
[21:39:57.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.889]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.889]        // while-condition  =>  TRUE
[21:39:57.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.890]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.890]        // while-condition  =>  TRUE
[21:39:57.890]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.892]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.892]        // while-condition  =>  TRUE
[21:39:57.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.894]        // while-condition  =>  TRUE
[21:39:57.895]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.896]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.896]        // while-condition  =>  TRUE
[21:39:57.896]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.898]        // while-condition  =>  TRUE
[21:39:57.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.900]        // while-condition  =>  TRUE
[21:39:57.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.901]        // while-condition  =>  TRUE
[21:39:57.901]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.903]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.903]        // while-condition  =>  TRUE
[21:39:57.903]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.905]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.905]        // while-condition  =>  TRUE
[21:39:57.905]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.906]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.906]        // while-condition  =>  TRUE
[21:39:57.907]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.909]        // while-condition  =>  TRUE
[21:39:57.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.910]        // while-condition  =>  TRUE
[21:39:57.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.912]        // while-condition  =>  TRUE
[21:39:57.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.914]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.914]        // while-condition  =>  TRUE
[21:39:57.914]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.915]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.915]        // while-condition  =>  TRUE
[21:39:57.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.917]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.917]        // while-condition  =>  TRUE
[21:39:57.917]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.919]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.919]        // while-condition  =>  TRUE
[21:39:57.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.921]        // while-condition  =>  TRUE
[21:39:57.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.922]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.922]        // while-condition  =>  TRUE
[21:39:57.922]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.924]        // while-condition  =>  TRUE
[21:39:57.924]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.925]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.925]        // while-condition  =>  TRUE
[21:39:57.925]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.928]        // while-condition  =>  TRUE
[21:39:57.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.930]        // while-condition  =>  TRUE
[21:39:57.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.931]        // while-condition  =>  TRUE
[21:39:57.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.933]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.933]        // while-condition  =>  TRUE
[21:39:57.933]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.940]        // while-condition  =>  TRUE
[21:39:57.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.942]        // while-condition  =>  TRUE
[21:39:57.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.944]        // while-condition  =>  TRUE
[21:39:57.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.945]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.945]        // while-condition  =>  TRUE
[21:39:57.945]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.947]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.947]        // while-condition  =>  TRUE
[21:39:57.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.948]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.949]        // while-condition  =>  TRUE
[21:39:57.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.950]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.950]        // while-condition  =>  TRUE
[21:39:57.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.952]        // while-condition  =>  TRUE
[21:39:57.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.953]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.954]        // while-condition  =>  TRUE
[21:39:57.954]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.955]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.955]        // while-condition  =>  TRUE
[21:39:57.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.958]        // while-condition  =>  TRUE
[21:39:57.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.959]        // while-condition  =>  TRUE
[21:39:57.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.961]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.961]        // while-condition  =>  TRUE
[21:39:57.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.963]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.963]        // while-condition  =>  TRUE
[21:39:57.963]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.964]        // while-condition  =>  TRUE
[21:39:57.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.967]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.967]        // while-condition  =>  TRUE
[21:39:57.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.969]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.969]        // while-condition  =>  TRUE
[21:39:57.969]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.971]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.971]        // while-condition  =>  TRUE
[21:39:57.971]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.972]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.972]        // while-condition  =>  TRUE
[21:39:57.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.975]        // while-condition  =>  TRUE
[21:39:57.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.976]        // while-condition  =>  TRUE
[21:39:57.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.977]        // while-condition  =>  TRUE
[21:39:57.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.979]        // while-condition  =>  TRUE
[21:39:57.979]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.980]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.980]        // while-condition  =>  TRUE
[21:39:57.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.982]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.982]        // while-condition  =>  TRUE
[21:39:57.982]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.984]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.984]        // while-condition  =>  TRUE
[21:39:57.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.987]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.988]        // while-condition  =>  TRUE
[21:39:57.988]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.989]        // while-condition  =>  TRUE
[21:39:57.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.992]        // while-condition  =>  TRUE
[21:39:57.992]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.993]        // while-condition  =>  TRUE
[21:39:57.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.995]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.995]        // while-condition  =>  TRUE
[21:39:57.995]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.996]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.996]        // while-condition  =>  TRUE
[21:39:57.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.998]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.998]        // while-condition  =>  TRUE
[21:39:57.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:57.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:57.999]        // while-condition  =>  TRUE
[21:39:57.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.001]        // while-condition  =>  TRUE
[21:39:58.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.003]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.003]        // while-condition  =>  TRUE
[21:39:58.003]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.004]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.004]        // while-condition  =>  TRUE
[21:39:58.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.006]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.006]        // while-condition  =>  TRUE
[21:39:58.006]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.008]        // while-condition  =>  TRUE
[21:39:58.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.009]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.009]        // while-condition  =>  TRUE
[21:39:58.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.011]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.011]        // while-condition  =>  TRUE
[21:39:58.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.013]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.013]        // while-condition  =>  TRUE
[21:39:58.013]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.014]        // while-condition  =>  TRUE
[21:39:58.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.015]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.016]        // while-condition  =>  TRUE
[21:39:58.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.018]        // while-condition  =>  TRUE
[21:39:58.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.020]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.020]        // while-condition  =>  TRUE
[21:39:58.020]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.021]        // while-condition  =>  TRUE
[21:39:58.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.023]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.023]        // while-condition  =>  TRUE
[21:39:58.023]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.025]        // while-condition  =>  TRUE
[21:39:58.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.027]        // while-condition  =>  TRUE
[21:39:58.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.028]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.028]        // while-condition  =>  TRUE
[21:39:58.028]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.029]        // while-condition  =>  TRUE
[21:39:58.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.031]        // while-condition  =>  TRUE
[21:39:58.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.033]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.033]        // while-condition  =>  TRUE
[21:39:58.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.034]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.034]        // while-condition  =>  TRUE
[21:39:58.034]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.037]        // while-condition  =>  TRUE
[21:39:58.037]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.038]        // while-condition  =>  TRUE
[21:39:58.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.039]        // while-condition  =>  TRUE
[21:39:58.040]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.042]        // while-condition  =>  TRUE
[21:39:58.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.043]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.043]        // while-condition  =>  TRUE
[21:39:58.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.044]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.045]        // while-condition  =>  TRUE
[21:39:58.045]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.046]        // while-condition  =>  TRUE
[21:39:58.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.049]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.049]        // while-condition  =>  TRUE
[21:39:58.049]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.049]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.049]        // while-condition  =>  TRUE
[21:39:58.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.052]        // while-condition  =>  TRUE
[21:39:58.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.053]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.053]        // while-condition  =>  TRUE
[21:39:58.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.055]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.055]        // while-condition  =>  TRUE
[21:39:58.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.056]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.057]        // while-condition  =>  TRUE
[21:39:58.057]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.060]        // while-condition  =>  TRUE
[21:39:58.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.064]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.064]        // while-condition  =>  TRUE
[21:39:58.064]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.066]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.066]        // while-condition  =>  TRUE
[21:39:58.066]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.068]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.068]        // while-condition  =>  TRUE
[21:39:58.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.070]        // while-condition  =>  TRUE
[21:39:58.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.073]        // while-condition  =>  TRUE
[21:39:58.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.075]        // while-condition  =>  TRUE
[21:39:58.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.077]        // while-condition  =>  TRUE
[21:39:58.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.078]        // while-condition  =>  TRUE
[21:39:58.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.080]        // while-condition  =>  TRUE
[21:39:58.080]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.082]        // while-condition  =>  TRUE
[21:39:58.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.086]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.086]        // while-condition  =>  TRUE
[21:39:58.086]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.094]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.094]        // while-condition  =>  TRUE
[21:39:58.094]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.096]        // while-condition  =>  TRUE
[21:39:58.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.098]        // while-condition  =>  TRUE
[21:39:58.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.100]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.100]        // while-condition  =>  TRUE
[21:39:58.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.101]        // while-condition  =>  TRUE
[21:39:58.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.103]        // while-condition  =>  TRUE
[21:39:58.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.104]        // while-condition  =>  TRUE
[21:39:58.104]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.108]        // while-condition  =>  TRUE
[21:39:58.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.109]        // while-condition  =>  TRUE
[21:39:58.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.111]        // while-condition  =>  TRUE
[21:39:58.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.112]        // while-condition  =>  TRUE
[21:39:58.113]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.114]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.114]        // while-condition  =>  TRUE
[21:39:58.114]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.116]        // while-condition  =>  TRUE
[21:39:58.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.117]        // while-condition  =>  TRUE
[21:39:58.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.119]        // while-condition  =>  TRUE
[21:39:58.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.122]        // while-condition  =>  TRUE
[21:39:58.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.123]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.123]        // while-condition  =>  TRUE
[21:39:58.123]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.125]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.125]        // while-condition  =>  TRUE
[21:39:58.125]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.126]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.126]        // while-condition  =>  TRUE
[21:39:58.126]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.128]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.129]        // while-condition  =>  TRUE
[21:39:58.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.131]        // while-condition  =>  TRUE
[21:39:58.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.132]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.133]        // while-condition  =>  TRUE
[21:39:58.133]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.134]        // while-condition  =>  TRUE
[21:39:58.135]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.136]        // while-condition  =>  TRUE
[21:39:58.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.138]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.138]        // while-condition  =>  TRUE
[21:39:58.138]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.139]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.139]        // while-condition  =>  TRUE
[21:39:58.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.141]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.141]        // while-condition  =>  TRUE
[21:39:58.141]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:39:58.148]        // while-condition  =>  TRUE
[21:39:58.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:39:58.149]        // while  =>  TIMEOUT
[21:39:58.149]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:39:58.149]      </control>
[21:39:58.149]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:39:58.149]        // if-block "(__protocol & 0xFFFF) == 1"
[21:39:58.149]          // =>  FALSE
[21:39:58.149]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:39:58.149]      </control>
[21:39:58.150]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:39:58.150]        // if-block "(__protocol & 0xFFFF) == 2"
[21:39:58.150]          // =>  TRUE
[21:39:58.150]        <block atomic="false" info="">
[21:39:58.150]          Message(0, "executing SWD power up");
[21:39:58.152]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:39:58.154]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:39:58.154]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:39:58.156]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:39:58.156]        </block>
[21:39:58.156]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:39:58.156]      </control>
[21:39:58.156]      // end if-block "powered_down"
[21:39:58.157]    </control>
[21:39:58.157]    <block atomic="false" info="">
[21:39:58.157]      __var DEBUG_PORT_VAL    = 0;
[21:39:58.157]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:39:58.157]      __var ACCESS_POINT_VAL  = 0;
[21:39:58.157]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:39:58.158]      __ap = 1; 
[21:39:58.158]        // -> [__ap <= 0x00000001]
[21:39:58.158]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:39:58.176]  
[21:39:58.176]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[21:39:58.176]  
[21:39:58.177]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:39:58.177]    </block>
[21:39:58.178]  </sequence>
[21:39:58.178]  
[21:40:02.255]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:40:02.255]  
[21:40:02.264]  <debugvars>
[21:40:02.264]    // Pre-defined
[21:40:02.264]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:40:02.264]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:40:02.264]    __dp=0x00000000
[21:40:02.264]    __ap=0x00000000
[21:40:02.264]    __traceout=0x00000000      (Trace Disabled)
[21:40:02.264]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:40:02.264]    __FlashAddr=0x00000000
[21:40:02.264]    __FlashLen=0x00000000
[21:40:02.264]    __FlashArg=0x00000000
[21:40:02.264]    __FlashOp=0x00000000
[21:40:02.264]    __Result=0x00000000
[21:40:02.265]  </debugvars>
[21:40:02.265]  
[21:40:02.265]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:40:02.265]    <block atomic="false" info="">
[21:40:02.265]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:40:02.265]        // -> [isSWJ <= 0x00000001]
[21:40:02.265]      __var hasDormant = __protocol & 0x00020000;
[21:40:02.265]        // -> [hasDormant <= 0x00000000]
[21:40:02.265]      __var protType   = __protocol & 0x0000FFFF;
[21:40:02.265]        // -> [protType <= 0x00000002]
[21:40:02.265]    </block>
[21:40:02.266]    <control if="protType == 1" while="" timeout="0" info="">
[21:40:02.266]      // if-block "protType == 1"
[21:40:02.266]        // =>  FALSE
[21:40:02.266]      // skip if-block "protType == 1"
[21:40:02.266]    </control>
[21:40:02.266]    <control if="protType == 2" while="" timeout="0" info="">
[21:40:02.266]      // if-block "protType == 2"
[21:40:02.266]        // =>  TRUE
[21:40:02.267]      <control if="isSWJ" while="" timeout="0" info="">
[21:40:02.267]        // if-block "isSWJ"
[21:40:02.267]          // =>  TRUE
[21:40:02.267]        <control if="hasDormant" while="" timeout="0" info="">
[21:40:02.267]          // if-block "hasDormant"
[21:40:02.267]            // =>  FALSE
[21:40:02.268]          // skip if-block "hasDormant"
[21:40:02.268]        </control>
[21:40:02.268]        <control if="!hasDormant" while="" timeout="0" info="">
[21:40:02.268]          // if-block "!hasDormant"
[21:40:02.268]            // =>  TRUE
[21:40:02.268]          <block atomic="false" info="">
[21:40:02.268]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:40:02.273]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:40:02.273]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:40:02.274]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:40:02.274]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:40:02.275]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:40:02.275]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:40:02.276]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:40:02.276]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:40:02.278]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:40:02.278]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:40:02.279]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:40:02.280]          </block>
[21:40:02.280]          // end if-block "!hasDormant"
[21:40:02.280]        </control>
[21:40:02.280]        // end if-block "isSWJ"
[21:40:02.280]      </control>
[21:40:02.280]      <control if="!isSWJ" while="" timeout="0" info="">
[21:40:02.280]        // if-block "!isSWJ"
[21:40:02.280]          // =>  FALSE
[21:40:02.281]        // skip if-block "!isSWJ"
[21:40:02.281]      </control>
[21:40:02.281]      <block atomic="false" info="">
[21:40:02.281]        ReadDP(0x0);
[21:40:02.282]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:40:02.282]      </block>
[21:40:02.282]      // end if-block "protType == 2"
[21:40:02.282]    </control>
[21:40:02.282]  </sequence>
[21:40:02.282]  
[21:40:02.286]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:40:02.286]  
[21:40:02.286]  <debugvars>
[21:40:02.286]    // Pre-defined
[21:40:02.286]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:40:02.286]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:40:02.286]    __dp=0x00000000
[21:40:02.286]    __ap=0x00000000
[21:40:02.287]    __traceout=0x00000000      (Trace Disabled)
[21:40:02.287]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:40:02.287]    __FlashAddr=0x00000000
[21:40:02.287]    __FlashLen=0x00000000
[21:40:02.287]    __FlashArg=0x00000000
[21:40:02.287]    __FlashOp=0x00000000
[21:40:02.287]    __Result=0x00000000
[21:40:02.287]  </debugvars>
[21:40:02.287]  
[21:40:02.287]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:40:02.288]    <block atomic="false" info="">
[21:40:02.288]      __var SW_DP_ABORT       = 0x0;
[21:40:02.288]        // -> [SW_DP_ABORT <= 0x00000000]
[21:40:02.288]      __var DP_CTRL_STAT      = 0x4;
[21:40:02.288]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:40:02.288]      __var DP_SELECT         = 0x8;
[21:40:02.288]        // -> [DP_SELECT <= 0x00000008]
[21:40:02.288]      __var powered_down      = 0;
[21:40:02.288]        // -> [powered_down <= 0x00000000]
[21:40:02.288]      WriteDP(DP_SELECT, 0x00000000);
[21:40:02.290]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:40:02.290]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:40:02.292]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:40:02.292]        // -> [powered_down <= 0x00000001]
[21:40:02.292]    </block>
[21:40:02.292]    <control if="powered_down" while="" timeout="0" info="">
[21:40:02.292]      // if-block "powered_down"
[21:40:02.292]        // =>  TRUE
[21:40:02.292]      <block atomic="false" info="">
[21:40:02.292]        Message(0, "Debug/System power-up request sent");
[21:40:02.294]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:40:02.296]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:40:02.296]      </block>
[21:40:02.296]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:40:02.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.297]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.297]        // while-condition  =>  TRUE
[21:40:02.297]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.299]        // while-condition  =>  TRUE
[21:40:02.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.301]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.301]        // while-condition  =>  TRUE
[21:40:02.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.304]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.304]        // while-condition  =>  TRUE
[21:40:02.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.305]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.306]        // while-condition  =>  TRUE
[21:40:02.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.313]        // while-condition  =>  TRUE
[21:40:02.313]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.315]        // while-condition  =>  TRUE
[21:40:02.315]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.318]        // while-condition  =>  TRUE
[21:40:02.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.319]        // while-condition  =>  TRUE
[21:40:02.319]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.321]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.321]        // while-condition  =>  TRUE
[21:40:02.321]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.323]        // while-condition  =>  TRUE
[21:40:02.323]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.324]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.324]        // while-condition  =>  TRUE
[21:40:02.324]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.326]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.326]        // while-condition  =>  TRUE
[21:40:02.326]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.327]        // while-condition  =>  TRUE
[21:40:02.328]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.329]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.329]        // while-condition  =>  TRUE
[21:40:02.329]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.331]        // while-condition  =>  TRUE
[21:40:02.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.333]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.333]        // while-condition  =>  TRUE
[21:40:02.333]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.334]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.334]        // while-condition  =>  TRUE
[21:40:02.334]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.336]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.336]        // while-condition  =>  TRUE
[21:40:02.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.337]        // while-condition  =>  TRUE
[21:40:02.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.339]        // while-condition  =>  TRUE
[21:40:02.340]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.341]        // while-condition  =>  TRUE
[21:40:02.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.342]        // while-condition  =>  TRUE
[21:40:02.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.344]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.344]        // while-condition  =>  TRUE
[21:40:02.344]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.345]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.345]        // while-condition  =>  TRUE
[21:40:02.345]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.347]        // while-condition  =>  TRUE
[21:40:02.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.348]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.348]        // while-condition  =>  TRUE
[21:40:02.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.350]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.350]        // while-condition  =>  TRUE
[21:40:02.350]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.351]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.351]        // while-condition  =>  TRUE
[21:40:02.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.354]        // while-condition  =>  TRUE
[21:40:02.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.355]        // while-condition  =>  TRUE
[21:40:02.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.357]        // while-condition  =>  TRUE
[21:40:02.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.359]        // while-condition  =>  TRUE
[21:40:02.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.361]        // while-condition  =>  TRUE
[21:40:02.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.367]        // while-condition  =>  TRUE
[21:40:02.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.368]        // while-condition  =>  TRUE
[21:40:02.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.370]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.371]        // while-condition  =>  TRUE
[21:40:02.371]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.372]        // while-condition  =>  TRUE
[21:40:02.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.375]        // while-condition  =>  TRUE
[21:40:02.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.377]        // while-condition  =>  TRUE
[21:40:02.377]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.379]        // while-condition  =>  TRUE
[21:40:02.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.380]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.380]        // while-condition  =>  TRUE
[21:40:02.380]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.382]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.382]        // while-condition  =>  TRUE
[21:40:02.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.383]        // while-condition  =>  TRUE
[21:40:02.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.386]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.386]        // while-condition  =>  TRUE
[21:40:02.386]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.387]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.387]        // while-condition  =>  TRUE
[21:40:02.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.389]        // while-condition  =>  TRUE
[21:40:02.389]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.391]        // while-condition  =>  TRUE
[21:40:02.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.392]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.392]        // while-condition  =>  TRUE
[21:40:02.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.394]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.394]        // while-condition  =>  TRUE
[21:40:02.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.395]        // while-condition  =>  TRUE
[21:40:02.395]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.397]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.398]        // while-condition  =>  TRUE
[21:40:02.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.405]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.405]        // while-condition  =>  TRUE
[21:40:02.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.407]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.407]        // while-condition  =>  TRUE
[21:40:02.407]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.408]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.408]        // while-condition  =>  TRUE
[21:40:02.408]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.410]        // while-condition  =>  TRUE
[21:40:02.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.418]        // while-condition  =>  TRUE
[21:40:02.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.425]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.425]        // while-condition  =>  TRUE
[21:40:02.425]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.426]        // while-condition  =>  TRUE
[21:40:02.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.428]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.428]        // while-condition  =>  TRUE
[21:40:02.428]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.430]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.430]        // while-condition  =>  TRUE
[21:40:02.430]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.431]        // while-condition  =>  TRUE
[21:40:02.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.433]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.433]        // while-condition  =>  TRUE
[21:40:02.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.434]        // while-condition  =>  TRUE
[21:40:02.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.437]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.437]        // while-condition  =>  TRUE
[21:40:02.437]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.439]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.439]        // while-condition  =>  TRUE
[21:40:02.440]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.442]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.442]        // while-condition  =>  TRUE
[21:40:02.443]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.444]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.444]        // while-condition  =>  TRUE
[21:40:02.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.445]        // while-condition  =>  TRUE
[21:40:02.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.447]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.447]        // while-condition  =>  TRUE
[21:40:02.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.449]        // while-condition  =>  TRUE
[21:40:02.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.450]        // while-condition  =>  TRUE
[21:40:02.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.452]        // while-condition  =>  TRUE
[21:40:02.452]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.454]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.454]        // while-condition  =>  TRUE
[21:40:02.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.455]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.455]        // while-condition  =>  TRUE
[21:40:02.455]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.457]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.457]        // while-condition  =>  TRUE
[21:40:02.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.459]        // while-condition  =>  TRUE
[21:40:02.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.461]        // while-condition  =>  TRUE
[21:40:02.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.463]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.464]        // while-condition  =>  TRUE
[21:40:02.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.465]        // while-condition  =>  TRUE
[21:40:02.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.467]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.467]        // while-condition  =>  TRUE
[21:40:02.467]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.469]        // while-condition  =>  TRUE
[21:40:02.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.470]        // while-condition  =>  TRUE
[21:40:02.470]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.472]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.472]        // while-condition  =>  TRUE
[21:40:02.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.473]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.473]        // while-condition  =>  TRUE
[21:40:02.473]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.476]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.477]        // while-condition  =>  TRUE
[21:40:02.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.478]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.478]        // while-condition  =>  TRUE
[21:40:02.478]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.480]        // while-condition  =>  TRUE
[21:40:02.480]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.482]        // while-condition  =>  TRUE
[21:40:02.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.483]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.484]        // while-condition  =>  TRUE
[21:40:02.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.485]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.485]        // while-condition  =>  TRUE
[21:40:02.485]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.488]        // while-condition  =>  TRUE
[21:40:02.488]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.489]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.489]        // while-condition  =>  TRUE
[21:40:02.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.490]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.490]        // while-condition  =>  TRUE
[21:40:02.490]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.496]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.496]        // while-condition  =>  TRUE
[21:40:02.496]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.501]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.501]        // while-condition  =>  TRUE
[21:40:02.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.502]        // while-condition  =>  TRUE
[21:40:02.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.503]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.504]        // while-condition  =>  TRUE
[21:40:02.504]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.505]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.505]        // while-condition  =>  TRUE
[21:40:02.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.507]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.507]        // while-condition  =>  TRUE
[21:40:02.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.509]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.509]        // while-condition  =>  TRUE
[21:40:02.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.511]        // while-condition  =>  TRUE
[21:40:02.511]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.512]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.512]        // while-condition  =>  TRUE
[21:40:02.513]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.515]        // while-condition  =>  TRUE
[21:40:02.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.517]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.517]        // while-condition  =>  TRUE
[21:40:02.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.519]        // while-condition  =>  TRUE
[21:40:02.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.520]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.520]        // while-condition  =>  TRUE
[21:40:02.521]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.522]        // while-condition  =>  TRUE
[21:40:02.522]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.525]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.525]        // while-condition  =>  TRUE
[21:40:02.525]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.526]        // while-condition  =>  TRUE
[21:40:02.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.528]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.528]        // while-condition  =>  TRUE
[21:40:02.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.529]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.529]        // while-condition  =>  TRUE
[21:40:02.529]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.531]        // while-condition  =>  TRUE
[21:40:02.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.537]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.537]        // while-condition  =>  TRUE
[21:40:02.537]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.540]        // while-condition  =>  TRUE
[21:40:02.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.541]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.541]        // while-condition  =>  TRUE
[21:40:02.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.542]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.542]        // while-condition  =>  TRUE
[21:40:02.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.545]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.545]        // while-condition  =>  TRUE
[21:40:02.545]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.547]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.547]        // while-condition  =>  TRUE
[21:40:02.547]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.548]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.548]        // while-condition  =>  TRUE
[21:40:02.548]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.550]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.550]        // while-condition  =>  TRUE
[21:40:02.550]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.551]        // while-condition  =>  TRUE
[21:40:02.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.553]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.553]        // while-condition  =>  TRUE
[21:40:02.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.554]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.555]        // while-condition  =>  TRUE
[21:40:02.555]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.557]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.557]        // while-condition  =>  TRUE
[21:40:02.557]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.558]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.558]        // while-condition  =>  TRUE
[21:40:02.559]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.560]        // while-condition  =>  TRUE
[21:40:02.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.561]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.562]        // while-condition  =>  TRUE
[21:40:02.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.564]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.564]        // while-condition  =>  TRUE
[21:40:02.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.567]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.567]        // while-condition  =>  TRUE
[21:40:02.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.569]        // while-condition  =>  TRUE
[21:40:02.569]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.570]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.570]        // while-condition  =>  TRUE
[21:40:02.570]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.572]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.572]        // while-condition  =>  TRUE
[21:40:02.572]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.573]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.574]        // while-condition  =>  TRUE
[21:40:02.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.575]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.575]        // while-condition  =>  TRUE
[21:40:02.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.579]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.579]        // while-condition  =>  TRUE
[21:40:02.579]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.581]        // while-condition  =>  TRUE
[21:40:02.581]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.582]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.582]        // while-condition  =>  TRUE
[21:40:02.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.585]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.586]        // while-condition  =>  TRUE
[21:40:02.586]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.587]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.587]        // while-condition  =>  TRUE
[21:40:02.587]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.589]        // while-condition  =>  TRUE
[21:40:02.589]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.591]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.591]        // while-condition  =>  TRUE
[21:40:02.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.593]        // while-condition  =>  TRUE
[21:40:02.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.595]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.596]        // while-condition  =>  TRUE
[21:40:02.596]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.597]        // while-condition  =>  TRUE
[21:40:02.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.599]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.599]        // while-condition  =>  TRUE
[21:40:02.599]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.601]        // while-condition  =>  TRUE
[21:40:02.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.602]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.602]        // while-condition  =>  TRUE
[21:40:02.602]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.604]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.604]        // while-condition  =>  TRUE
[21:40:02.604]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.606]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.606]        // while-condition  =>  TRUE
[21:40:02.606]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.608]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.608]        // while-condition  =>  TRUE
[21:40:02.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.610]        // while-condition  =>  TRUE
[21:40:02.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.613]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.613]        // while-condition  =>  TRUE
[21:40:02.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.615]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.615]        // while-condition  =>  TRUE
[21:40:02.615]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.616]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.616]        // while-condition  =>  TRUE
[21:40:02.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.619]        // while-condition  =>  TRUE
[21:40:02.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.623]        // while-condition  =>  TRUE
[21:40:02.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.625]        // while-condition  =>  TRUE
[21:40:02.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.626]        // while-condition  =>  TRUE
[21:40:02.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.628]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.628]        // while-condition  =>  TRUE
[21:40:02.628]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.630]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.630]        // while-condition  =>  TRUE
[21:40:02.630]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.631]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.631]        // while-condition  =>  TRUE
[21:40:02.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.633]        // while-condition  =>  TRUE
[21:40:02.633]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.634]        // while-condition  =>  TRUE
[21:40:02.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.641]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.641]        // while-condition  =>  TRUE
[21:40:02.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.643]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.643]        // while-condition  =>  TRUE
[21:40:02.643]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.647]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.647]        // while-condition  =>  TRUE
[21:40:02.647]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.652]        // while-condition  =>  TRUE
[21:40:02.652]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.658]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.658]        // while-condition  =>  TRUE
[21:40:02.658]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.659]        // while-condition  =>  TRUE
[21:40:02.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.661]        // while-condition  =>  TRUE
[21:40:02.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.663]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.663]        // while-condition  =>  TRUE
[21:40:02.663]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.664]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.664]        // while-condition  =>  TRUE
[21:40:02.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.666]        // while-condition  =>  TRUE
[21:40:02.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.668]        // while-condition  =>  TRUE
[21:40:02.669]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.670]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.670]        // while-condition  =>  TRUE
[21:40:02.670]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.672]        // while-condition  =>  TRUE
[21:40:02.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.674]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.674]        // while-condition  =>  TRUE
[21:40:02.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.675]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.675]        // while-condition  =>  TRUE
[21:40:02.676]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.677]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.677]        // while-condition  =>  TRUE
[21:40:02.677]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.679]        // while-condition  =>  TRUE
[21:40:02.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.684]        // while-condition  =>  TRUE
[21:40:02.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.686]        // while-condition  =>  TRUE
[21:40:02.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.692]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.692]        // while-condition  =>  TRUE
[21:40:02.692]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.693]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.694]        // while-condition  =>  TRUE
[21:40:02.694]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.701]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.701]        // while-condition  =>  TRUE
[21:40:02.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.702]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.703]        // while-condition  =>  TRUE
[21:40:02.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.705]        // while-condition  =>  TRUE
[21:40:02.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.707]        // while-condition  =>  TRUE
[21:40:02.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.708]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.709]        // while-condition  =>  TRUE
[21:40:02.709]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.710]        // while-condition  =>  TRUE
[21:40:02.710]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.711]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.711]        // while-condition  =>  TRUE
[21:40:02.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.714]        // while-condition  =>  TRUE
[21:40:02.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.715]        // while-condition  =>  TRUE
[21:40:02.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.717]        // while-condition  =>  TRUE
[21:40:02.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.719]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.719]        // while-condition  =>  TRUE
[21:40:02.720]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.721]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.721]        // while-condition  =>  TRUE
[21:40:02.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.722]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.723]        // while-condition  =>  TRUE
[21:40:02.723]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.724]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.724]        // while-condition  =>  TRUE
[21:40:02.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.726]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.726]        // while-condition  =>  TRUE
[21:40:02.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.730]        // while-condition  =>  TRUE
[21:40:02.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.732]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.732]        // while-condition  =>  TRUE
[21:40:02.732]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.733]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.733]        // while-condition  =>  TRUE
[21:40:02.733]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.735]        // while-condition  =>  TRUE
[21:40:02.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.736]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.736]        // while-condition  =>  TRUE
[21:40:02.736]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.738]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.738]        // while-condition  =>  TRUE
[21:40:02.738]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.739]        // while-condition  =>  TRUE
[21:40:02.739]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.741]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.741]        // while-condition  =>  TRUE
[21:40:02.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.743]        // while-condition  =>  TRUE
[21:40:02.743]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.745]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.745]        // while-condition  =>  TRUE
[21:40:02.745]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.747]        // while-condition  =>  TRUE
[21:40:02.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.748]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.748]        // while-condition  =>  TRUE
[21:40:02.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.750]        // while-condition  =>  TRUE
[21:40:02.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.751]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.751]        // while-condition  =>  TRUE
[21:40:02.751]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.752]        // while-condition  =>  TRUE
[21:40:02.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.755]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.755]        // while-condition  =>  TRUE
[21:40:02.755]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.756]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.756]        // while-condition  =>  TRUE
[21:40:02.757]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.762]        // while-condition  =>  TRUE
[21:40:02.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.764]        // while-condition  =>  TRUE
[21:40:02.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.767]        // while-condition  =>  TRUE
[21:40:02.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.768]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.768]        // while-condition  =>  TRUE
[21:40:02.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.771]        // while-condition  =>  TRUE
[21:40:02.771]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.772]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.772]        // while-condition  =>  TRUE
[21:40:02.773]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.774]        // while-condition  =>  TRUE
[21:40:02.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.776]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.776]        // while-condition  =>  TRUE
[21:40:02.776]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.777]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.777]        // while-condition  =>  TRUE
[21:40:02.777]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.779]        // while-condition  =>  TRUE
[21:40:02.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.780]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.781]        // while-condition  =>  TRUE
[21:40:02.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.784]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.784]        // while-condition  =>  TRUE
[21:40:02.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.786]        // while-condition  =>  TRUE
[21:40:02.786]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.787]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.787]        // while-condition  =>  TRUE
[21:40:02.787]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.789]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.789]        // while-condition  =>  TRUE
[21:40:02.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.790]        // while-condition  =>  TRUE
[21:40:02.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.793]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.793]        // while-condition  =>  TRUE
[21:40:02.793]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.794]        // while-condition  =>  TRUE
[21:40:02.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.796]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.796]        // while-condition  =>  TRUE
[21:40:02.796]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.798]        // while-condition  =>  TRUE
[21:40:02.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.809]        // while-condition  =>  TRUE
[21:40:02.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.810]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.811]        // while-condition  =>  TRUE
[21:40:02.811]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.812]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.813]        // while-condition  =>  TRUE
[21:40:02.813]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.814]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.814]        // while-condition  =>  TRUE
[21:40:02.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.816]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.816]        // while-condition  =>  TRUE
[21:40:02.816]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.817]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.817]        // while-condition  =>  TRUE
[21:40:02.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.820]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.820]        // while-condition  =>  TRUE
[21:40:02.820]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.821]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.821]        // while-condition  =>  TRUE
[21:40:02.821]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.823]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.823]        // while-condition  =>  TRUE
[21:40:02.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.825]        // while-condition  =>  TRUE
[21:40:02.825]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.826]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.826]        // while-condition  =>  TRUE
[21:40:02.826]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.828]        // while-condition  =>  TRUE
[21:40:02.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.834]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.834]        // while-condition  =>  TRUE
[21:40:02.834]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.835]        // while-condition  =>  TRUE
[21:40:02.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.838]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.838]        // while-condition  =>  TRUE
[21:40:02.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.839]        // while-condition  =>  TRUE
[21:40:02.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.841]        // while-condition  =>  TRUE
[21:40:02.841]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.842]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.842]        // while-condition  =>  TRUE
[21:40:02.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.844]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.844]        // while-condition  =>  TRUE
[21:40:02.844]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.852]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.852]        // while-condition  =>  TRUE
[21:40:02.852]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.856]        // while-condition  =>  TRUE
[21:40:02.856]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.857]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.857]        // while-condition  =>  TRUE
[21:40:02.857]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.859]        // while-condition  =>  TRUE
[21:40:02.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.862]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.862]        // while-condition  =>  TRUE
[21:40:02.862]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.864]        // while-condition  =>  TRUE
[21:40:02.864]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.865]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.865]        // while-condition  =>  TRUE
[21:40:02.866]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.867]        // while-condition  =>  TRUE
[21:40:02.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.869]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.870]        // while-condition  =>  TRUE
[21:40:02.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.879]        // while-condition  =>  TRUE
[21:40:02.879]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.881]        // while-condition  =>  TRUE
[21:40:02.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.882]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.882]        // while-condition  =>  TRUE
[21:40:02.882]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.884]        // while-condition  =>  TRUE
[21:40:02.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.887]        // while-condition  =>  TRUE
[21:40:02.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.888]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.888]        // while-condition  =>  TRUE
[21:40:02.889]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.890]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.890]        // while-condition  =>  TRUE
[21:40:02.890]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.891]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.892]        // while-condition  =>  TRUE
[21:40:02.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.893]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.893]        // while-condition  =>  TRUE
[21:40:02.893]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.895]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.895]        // while-condition  =>  TRUE
[21:40:02.895]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.896]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.897]        // while-condition  =>  TRUE
[21:40:02.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.899]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.899]        // while-condition  =>  TRUE
[21:40:02.899]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.900]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.900]        // while-condition  =>  TRUE
[21:40:02.900]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.902]        // while-condition  =>  TRUE
[21:40:02.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.904]        // while-condition  =>  TRUE
[21:40:02.905]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.906]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.906]        // while-condition  =>  TRUE
[21:40:02.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.908]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.908]        // while-condition  =>  TRUE
[21:40:02.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.910]        // while-condition  =>  TRUE
[21:40:02.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.912]        // while-condition  =>  TRUE
[21:40:02.912]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.913]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.913]        // while-condition  =>  TRUE
[21:40:02.913]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.916]        // while-condition  =>  TRUE
[21:40:02.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.921]        // while-condition  =>  TRUE
[21:40:02.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.923]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.923]        // while-condition  =>  TRUE
[21:40:02.923]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.924]        // while-condition  =>  TRUE
[21:40:02.924]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.926]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.926]        // while-condition  =>  TRUE
[21:40:02.926]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.928]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.928]        // while-condition  =>  TRUE
[21:40:02.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.929]        // while-condition  =>  TRUE
[21:40:02.929]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.931]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.931]        // while-condition  =>  TRUE
[21:40:02.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.932]        // while-condition  =>  TRUE
[21:40:02.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.934]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.934]        // while-condition  =>  TRUE
[21:40:02.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.936]        // while-condition  =>  TRUE
[21:40:02.936]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.937]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.937]        // while-condition  =>  TRUE
[21:40:02.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.940]        // while-condition  =>  TRUE
[21:40:02.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.941]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.941]        // while-condition  =>  TRUE
[21:40:02.941]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.943]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.943]        // while-condition  =>  TRUE
[21:40:02.943]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.944]        // while-condition  =>  TRUE
[21:40:02.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.946]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.946]        // while-condition  =>  TRUE
[21:40:02.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.947]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.948]        // while-condition  =>  TRUE
[21:40:02.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.952]        // while-condition  =>  TRUE
[21:40:02.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.954]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.954]        // while-condition  =>  TRUE
[21:40:02.954]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.956]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.956]        // while-condition  =>  TRUE
[21:40:02.956]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.957]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.957]        // while-condition  =>  TRUE
[21:40:02.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.959]        // while-condition  =>  TRUE
[21:40:02.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.961]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.961]        // while-condition  =>  TRUE
[21:40:02.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.963]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.963]        // while-condition  =>  TRUE
[21:40:02.963]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.964]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.964]        // while-condition  =>  TRUE
[21:40:02.964]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.966]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.966]        // while-condition  =>  TRUE
[21:40:02.966]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.968]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.968]        // while-condition  =>  TRUE
[21:40:02.968]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.970]        // while-condition  =>  TRUE
[21:40:02.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.971]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.972]        // while-condition  =>  TRUE
[21:40:02.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.973]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.973]        // while-condition  =>  TRUE
[21:40:02.973]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.976]        // while-condition  =>  TRUE
[21:40:02.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.978]        // while-condition  =>  TRUE
[21:40:02.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.980]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.980]        // while-condition  =>  TRUE
[21:40:02.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.981]        // while-condition  =>  TRUE
[21:40:02.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.985]        // while-condition  =>  TRUE
[21:40:02.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.986]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.987]        // while-condition  =>  TRUE
[21:40:02.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.988]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.988]        // while-condition  =>  TRUE
[21:40:02.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.990]        // while-condition  =>  TRUE
[21:40:02.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.993]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.993]        // while-condition  =>  TRUE
[21:40:02.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.994]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.994]        // while-condition  =>  TRUE
[21:40:02.994]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.996]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.996]        // while-condition  =>  TRUE
[21:40:02.996]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.997]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.997]        // while-condition  =>  TRUE
[21:40:02.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:02.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:02.999]        // while-condition  =>  TRUE
[21:40:02.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.001]        // while-condition  =>  TRUE
[21:40:03.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.002]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.002]        // while-condition  =>  TRUE
[21:40:03.003]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.005]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.007]        // while-condition  =>  TRUE
[21:40:03.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.008]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.008]        // while-condition  =>  TRUE
[21:40:03.008]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.009]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.009]        // while-condition  =>  TRUE
[21:40:03.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.016]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.016]        // while-condition  =>  TRUE
[21:40:03.016]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.018]        // while-condition  =>  TRUE
[21:40:03.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.019]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.019]        // while-condition  =>  TRUE
[21:40:03.019]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.022]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.023]        // while-condition  =>  TRUE
[21:40:03.023]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.024]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.024]        // while-condition  =>  TRUE
[21:40:03.024]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.027]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.027]        // while-condition  =>  TRUE
[21:40:03.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.029]        // while-condition  =>  TRUE
[21:40:03.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.031]        // while-condition  =>  TRUE
[21:40:03.031]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.032]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.032]        // while-condition  =>  TRUE
[21:40:03.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.034]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.034]        // while-condition  =>  TRUE
[21:40:03.034]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.035]        // while-condition  =>  TRUE
[21:40:03.035]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.036]        // while-condition  =>  TRUE
[21:40:03.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.039]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.039]        // while-condition  =>  TRUE
[21:40:03.039]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.040]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.040]        // while-condition  =>  TRUE
[21:40:03.040]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.042]        // while-condition  =>  TRUE
[21:40:03.042]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.044]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.044]        // while-condition  =>  TRUE
[21:40:03.044]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.046]        // while-condition  =>  TRUE
[21:40:03.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.047]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.047]        // while-condition  =>  TRUE
[21:40:03.048]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.049]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.049]        // while-condition  =>  TRUE
[21:40:03.049]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.050]        // while-condition  =>  TRUE
[21:40:03.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.052]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.052]        // while-condition  =>  TRUE
[21:40:03.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.054]        // while-condition  =>  TRUE
[21:40:03.054]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.055]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.055]        // while-condition  =>  TRUE
[21:40:03.056]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.057]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.057]        // while-condition  =>  TRUE
[21:40:03.057]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.059]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.059]        // while-condition  =>  TRUE
[21:40:03.059]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.061]        // while-condition  =>  TRUE
[21:40:03.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.063]        // while-condition  =>  TRUE
[21:40:03.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.064]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.065]        // while-condition  =>  TRUE
[21:40:03.065]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.067]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.067]        // while-condition  =>  TRUE
[21:40:03.067]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.067]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.068]        // while-condition  =>  TRUE
[21:40:03.068]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.069]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.069]        // while-condition  =>  TRUE
[21:40:03.069]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.072]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.072]        // while-condition  =>  TRUE
[21:40:03.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.073]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.073]        // while-condition  =>  TRUE
[21:40:03.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.075]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.075]        // while-condition  =>  TRUE
[21:40:03.075]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.077]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.078]        // while-condition  =>  TRUE
[21:40:03.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.079]        // while-condition  =>  TRUE
[21:40:03.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.081]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.081]        // while-condition  =>  TRUE
[21:40:03.081]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.082]        // while-condition  =>  TRUE
[21:40:03.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.083]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.083]        // while-condition  =>  TRUE
[21:40:03.085]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.088]        // while-condition  =>  TRUE
[21:40:03.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.091]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.091]        // while-condition  =>  TRUE
[21:40:03.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.093]        // while-condition  =>  TRUE
[21:40:03.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.094]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.094]        // while-condition  =>  TRUE
[21:40:03.094]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.096]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.096]        // while-condition  =>  TRUE
[21:40:03.096]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.097]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.097]        // while-condition  =>  TRUE
[21:40:03.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.100]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.100]        // while-condition  =>  TRUE
[21:40:03.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.101]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.101]        // while-condition  =>  TRUE
[21:40:03.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.103]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.103]        // while-condition  =>  TRUE
[21:40:03.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.104]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.104]        // while-condition  =>  TRUE
[21:40:03.104]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.107]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.108]        // while-condition  =>  TRUE
[21:40:03.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.109]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.109]        // while-condition  =>  TRUE
[21:40:03.109]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.111]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.111]        // while-condition  =>  TRUE
[21:40:03.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.112]        // while-condition  =>  TRUE
[21:40:03.112]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.115]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.115]        // while-condition  =>  TRUE
[21:40:03.115]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.117]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.117]        // while-condition  =>  TRUE
[21:40:03.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.119]        // while-condition  =>  TRUE
[21:40:03.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.121]        // while-condition  =>  TRUE
[21:40:03.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.122]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.122]        // while-condition  =>  TRUE
[21:40:03.122]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.124]        // while-condition  =>  TRUE
[21:40:03.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.126]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.126]        // while-condition  =>  TRUE
[21:40:03.126]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.129]        // while-condition  =>  TRUE
[21:40:03.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.131]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.131]        // while-condition  =>  TRUE
[21:40:03.131]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.133]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.133]        // while-condition  =>  TRUE
[21:40:03.133]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.134]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.134]        // while-condition  =>  TRUE
[21:40:03.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.136]        // while-condition  =>  TRUE
[21:40:03.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.139]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.139]        // while-condition  =>  TRUE
[21:40:03.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.141]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.141]        // while-condition  =>  TRUE
[21:40:03.141]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.144]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.144]        // while-condition  =>  TRUE
[21:40:03.144]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.145]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.145]        // while-condition  =>  TRUE
[21:40:03.145]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.148]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.148]        // while-condition  =>  TRUE
[21:40:03.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.150]        // while-condition  =>  TRUE
[21:40:03.150]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.151]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.151]        // while-condition  =>  TRUE
[21:40:03.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.153]        // while-condition  =>  TRUE
[21:40:03.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.154]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.154]        // while-condition  =>  TRUE
[21:40:03.155]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.156]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.156]        // while-condition  =>  TRUE
[21:40:03.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.157]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.157]        // while-condition  =>  TRUE
[21:40:03.158]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.159]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.159]        // while-condition  =>  TRUE
[21:40:03.159]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.161]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.161]        // while-condition  =>  TRUE
[21:40:03.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.163]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.163]        // while-condition  =>  TRUE
[21:40:03.163]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.164]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.164]        // while-condition  =>  TRUE
[21:40:03.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.167]        // while-condition  =>  TRUE
[21:40:03.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.168]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.168]        // while-condition  =>  TRUE
[21:40:03.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.170]        // while-condition  =>  TRUE
[21:40:03.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.172]        // while-condition  =>  TRUE
[21:40:03.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.175]        // while-condition  =>  TRUE
[21:40:03.175]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.176]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.176]        // while-condition  =>  TRUE
[21:40:03.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.178]        // while-condition  =>  TRUE
[21:40:03.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.181]        // while-condition  =>  TRUE
[21:40:03.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.182]        // while-condition  =>  TRUE
[21:40:03.182]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.184]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.184]        // while-condition  =>  TRUE
[21:40:03.184]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.185]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.185]        // while-condition  =>  TRUE
[21:40:03.186]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.187]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.188]        // while-condition  =>  TRUE
[21:40:03.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.188]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.188]        // while-condition  =>  TRUE
[21:40:03.188]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.191]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.191]        // while-condition  =>  TRUE
[21:40:03.191]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.194]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.194]        // while-condition  =>  TRUE
[21:40:03.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.195]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.195]        // while-condition  =>  TRUE
[21:40:03.195]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.197]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.197]        // while-condition  =>  TRUE
[21:40:03.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.199]        // while-condition  =>  TRUE
[21:40:03.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.201]        // while-condition  =>  TRUE
[21:40:03.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.204]        // while-condition  =>  TRUE
[21:40:03.204]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.205]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.205]        // while-condition  =>  TRUE
[21:40:03.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.211]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.211]        // while-condition  =>  TRUE
[21:40:03.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.214]        // while-condition  =>  TRUE
[21:40:03.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.216]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.216]        // while-condition  =>  TRUE
[21:40:03.216]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.218]        // while-condition  =>  TRUE
[21:40:03.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.219]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.219]        // while-condition  =>  TRUE
[21:40:03.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.221]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.221]        // while-condition  =>  TRUE
[21:40:03.221]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.222]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.222]        // while-condition  =>  TRUE
[21:40:03.222]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.224]        // while-condition  =>  TRUE
[21:40:03.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.227]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.228]        // while-condition  =>  TRUE
[21:40:03.228]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.228]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.229]        // while-condition  =>  TRUE
[21:40:03.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.231]        // while-condition  =>  TRUE
[21:40:03.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.233]        // while-condition  =>  TRUE
[21:40:03.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.234]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.234]        // while-condition  =>  TRUE
[21:40:03.234]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.236]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.236]        // while-condition  =>  TRUE
[21:40:03.236]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.237]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.237]        // while-condition  =>  TRUE
[21:40:03.237]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.239]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.239]        // while-condition  =>  TRUE
[21:40:03.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.241]        // while-condition  =>  TRUE
[21:40:03.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.243]        // while-condition  =>  TRUE
[21:40:03.243]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.244]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.244]        // while-condition  =>  TRUE
[21:40:03.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.246]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.246]        // while-condition  =>  TRUE
[21:40:03.246]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.249]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.249]        // while-condition  =>  TRUE
[21:40:03.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.251]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.251]        // while-condition  =>  TRUE
[21:40:03.251]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.253]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.254]        // while-condition  =>  TRUE
[21:40:03.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.255]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.255]        // while-condition  =>  TRUE
[21:40:03.255]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.258]        // while-condition  =>  TRUE
[21:40:03.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.260]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.260]        // while-condition  =>  TRUE
[21:40:03.260]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.261]        // while-condition  =>  TRUE
[21:40:03.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.263]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.263]        // while-condition  =>  TRUE
[21:40:03.263]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.265]        // while-condition  =>  TRUE
[21:40:03.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.267]        // while-condition  =>  TRUE
[21:40:03.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.272]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.272]        // while-condition  =>  TRUE
[21:40:03.272]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.273]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.273]        // while-condition  =>  TRUE
[21:40:03.273]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.275]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.275]        // while-condition  =>  TRUE
[21:40:03.275]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.276]        // while-condition  =>  TRUE
[21:40:03.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.277]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.278]        // while-condition  =>  TRUE
[21:40:03.278]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.280]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.280]        // while-condition  =>  TRUE
[21:40:03.280]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.282]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.282]        // while-condition  =>  TRUE
[21:40:03.282]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.284]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[21:40:03.284]        // while-condition  =>  TRUE
[21:40:03.284]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:40:03.284]        // while  =>  TIMEOUT
[21:40:03.284]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:40:03.286]      </control>
[21:40:03.286]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:40:03.286]        // if-block "(__protocol & 0xFFFF) == 1"
[21:40:03.286]          // =>  FALSE
[21:40:03.286]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:40:03.286]      </control>
[21:40:03.286]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:40:03.286]        // if-block "(__protocol & 0xFFFF) == 2"
[21:40:03.286]          // =>  TRUE
[21:40:03.286]        <block atomic="false" info="">
[21:40:03.287]          Message(0, "executing SWD power up");
[21:40:03.288]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:40:03.290]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:40:03.290]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:40:03.291]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:40:03.291]        </block>
[21:40:03.292]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:40:03.292]      </control>
[21:40:03.292]      // end if-block "powered_down"
[21:40:03.292]    </control>
[21:40:03.292]    <block atomic="false" info="">
[21:40:03.292]      __var DEBUG_PORT_VAL    = 0;
[21:40:03.292]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:40:03.292]      __var ACCESS_POINT_VAL  = 0;
[21:40:03.293]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:40:03.293]      __ap = 1; 
[21:40:03.293]        // -> [__ap <= 0x00000001]
[21:40:03.293]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:40:03.308]  
[21:40:03.308]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[21:40:03.308]  
[21:40:03.310]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:40:03.310]    </block>
[21:40:03.310]  </sequence>
[21:40:03.310]  
[21:45:06.528]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:45:06.528]  
[21:45:06.528]  <debugvars>
[21:45:06.528]    // Pre-defined
[21:45:06.528]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:45:06.528]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:45:06.528]    __dp=0x00000000
[21:45:06.528]    __ap=0x00000000
[21:45:06.529]    __traceout=0x00000000      (Trace Disabled)
[21:45:06.529]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:45:06.529]    __FlashAddr=0x00000000
[21:45:06.529]    __FlashLen=0x00000000
[21:45:06.529]    __FlashArg=0x00000000
[21:45:06.529]    __FlashOp=0x00000000
[21:45:06.529]    __Result=0x00000000
[21:45:06.529]  </debugvars>
[21:45:06.529]  
[21:45:06.530]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:45:06.530]    <block atomic="false" info="">
[21:45:06.530]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:45:06.530]        // -> [isSWJ <= 0x00000001]
[21:45:06.530]      __var hasDormant = __protocol & 0x00020000;
[21:45:06.530]        // -> [hasDormant <= 0x00000000]
[21:45:06.530]      __var protType   = __protocol & 0x0000FFFF;
[21:45:06.530]        // -> [protType <= 0x00000002]
[21:45:06.530]    </block>
[21:45:06.530]    <control if="protType == 1" while="" timeout="0" info="">
[21:45:06.531]      // if-block "protType == 1"
[21:45:06.531]        // =>  FALSE
[21:45:06.531]      // skip if-block "protType == 1"
[21:45:06.531]    </control>
[21:45:06.531]    <control if="protType == 2" while="" timeout="0" info="">
[21:45:06.531]      // if-block "protType == 2"
[21:45:06.531]        // =>  TRUE
[21:45:06.531]      <control if="isSWJ" while="" timeout="0" info="">
[21:45:06.531]        // if-block "isSWJ"
[21:45:06.532]          // =>  TRUE
[21:45:06.532]        <control if="hasDormant" while="" timeout="0" info="">
[21:45:06.532]          // if-block "hasDormant"
[21:45:06.532]            // =>  FALSE
[21:45:06.532]          // skip if-block "hasDormant"
[21:45:06.532]        </control>
[21:45:06.532]        <control if="!hasDormant" while="" timeout="0" info="">
[21:45:06.532]          // if-block "!hasDormant"
[21:45:06.532]            // =>  TRUE
[21:45:06.533]          <block atomic="false" info="">
[21:45:06.533]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:45:06.539]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:45:06.539]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:45:06.540]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:45:06.540]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:45:06.542]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:45:06.542]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:45:06.544]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:45:06.544]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:45:06.545]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:45:06.545]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:45:06.547]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:45:06.547]          </block>
[21:45:06.547]          // end if-block "!hasDormant"
[21:45:06.547]        </control>
[21:45:06.547]        // end if-block "isSWJ"
[21:45:06.547]      </control>
[21:45:06.547]      <control if="!isSWJ" while="" timeout="0" info="">
[21:45:06.548]        // if-block "!isSWJ"
[21:45:06.548]          // =>  FALSE
[21:45:06.548]        // skip if-block "!isSWJ"
[21:45:06.548]      </control>
[21:45:06.548]      <block atomic="false" info="">
[21:45:06.548]        ReadDP(0x0);
[21:45:06.552]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:45:06.552]      </block>
[21:45:06.552]      // end if-block "protType == 2"
[21:45:06.552]    </control>
[21:45:06.552]  </sequence>
[21:45:06.553]  
[21:45:06.555]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:45:06.555]  
[21:45:06.555]  <debugvars>
[21:45:06.555]    // Pre-defined
[21:45:06.555]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:45:06.556]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:45:06.556]    __dp=0x00000000
[21:45:06.556]    __ap=0x00000000
[21:45:06.556]    __traceout=0x00000000      (Trace Disabled)
[21:45:06.556]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:45:06.556]    __FlashAddr=0x00000000
[21:45:06.557]    __FlashLen=0x00000000
[21:45:06.557]    __FlashArg=0x00000000
[21:45:06.557]    __FlashOp=0x00000000
[21:45:06.557]    __Result=0x00000000
[21:45:06.557]  </debugvars>
[21:45:06.557]  
[21:45:06.557]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:45:06.557]    <block atomic="false" info="">
[21:45:06.558]      __var SW_DP_ABORT       = 0x0;
[21:45:06.558]        // -> [SW_DP_ABORT <= 0x00000000]
[21:45:06.558]      __var DP_CTRL_STAT      = 0x4;
[21:45:06.558]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:45:06.558]      __var DP_SELECT         = 0x8;
[21:45:06.558]        // -> [DP_SELECT <= 0x00000008]
[21:45:06.558]      __var powered_down      = 0;
[21:45:06.558]        // -> [powered_down <= 0x00000000]
[21:45:06.559]      WriteDP(DP_SELECT, 0x00000000);
[21:45:06.560]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:45:06.560]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:45:06.562]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:45:06.562]        // -> [powered_down <= 0x00000001]
[21:45:06.562]    </block>
[21:45:06.563]    <control if="powered_down" while="" timeout="0" info="">
[21:45:06.563]      // if-block "powered_down"
[21:45:06.563]        // =>  TRUE
[21:45:06.563]      <block atomic="false" info="">
[21:45:06.563]        Message(0, "Debug/System power-up request sent");
[21:45:06.564]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:45:06.566]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:45:06.566]      </block>
[21:45:06.566]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:45:06.566]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:45:06.568]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:45:06.569]        // while-condition  =>  FALSE
[21:45:06.569]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:45:06.569]      </control>
[21:45:06.569]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:45:06.569]        // if-block "(__protocol & 0xFFFF) == 1"
[21:45:06.569]          // =>  FALSE
[21:45:06.570]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:45:06.570]      </control>
[21:45:06.570]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:45:06.570]        // if-block "(__protocol & 0xFFFF) == 2"
[21:45:06.570]          // =>  TRUE
[21:45:06.570]        <block atomic="false" info="">
[21:45:06.570]          Message(0, "executing SWD power up");
[21:45:06.572]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:45:06.574]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:45:06.574]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:45:06.576]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:45:06.576]        </block>
[21:45:06.576]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:45:06.576]      </control>
[21:45:06.576]      // end if-block "powered_down"
[21:45:06.576]    </control>
[21:45:06.577]    <block atomic="false" info="">
[21:45:06.577]      __var DEBUG_PORT_VAL    = 0;
[21:45:06.577]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:45:06.577]      __var ACCESS_POINT_VAL  = 0;
[21:45:06.577]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:45:06.577]      __ap = 1; 
[21:45:06.577]        // -> [__ap <= 0x00000001]
[21:45:06.577]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:45:06.581]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:45:06.582]      __ap = 4;
[21:45:06.582]        // -> [__ap <= 0x00000004]
[21:45:06.582]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:45:06.584]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:45:06.585]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:45:06.585]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:45:06.587]    </block>
[21:45:06.587]    <block atomic="false" info="">
[21:45:06.587]      __var nReset = 0x80;
[21:45:06.588]        // -> [nReset <= 0x00000080]
[21:45:06.588]      __var canReadPins = 0;
[21:45:06.588]        // -> [canReadPins <= 0x00000000]
[21:45:06.588]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:45:06.589]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:45:06.590]        // -> [canReadPins <= 0x00000001]
[21:45:06.590]    </block>
[21:45:06.590]    <control if="" while="1" timeout="200" info="">
[21:45:06.590]      // while "1"  (timeout="200")
[21:45:06.590]      // while-condition  =>  TRUE
[21:45:06.590]      // while "1"  (timeout="200")
[21:45:06.590]      // while-condition  =>  TRUE
[21:45:06.590]      // while "1"  (timeout="200")
[21:45:06.591]      // while-condition  =>  TRUE
[21:45:06.591]      // while "1"  (timeout="200")
[21:45:06.591]      // while-condition  =>  TRUE
[21:45:06.591]      // while "1"  (timeout="200")
[21:45:06.591]      // while-condition  =>  TRUE
[21:45:06.591]      // while "1"  (timeout="200")
[21:45:06.592]      // while-condition  =>  TRUE
[21:45:06.592]      // while "1"  (timeout="200")
[21:45:06.592]      // while-condition  =>  TRUE
[21:45:06.592]      // while "1"  (timeout="200")
[21:45:06.592]      // while-condition  =>  TRUE
[21:45:06.592]      // while "1"  (timeout="200")
[21:45:06.592]      // while-condition  =>  TRUE
[21:45:06.592]      // while "1"  (timeout="200")
[21:45:06.592]      // while-condition  =>  TRUE
[21:45:06.593]      // while "1"  (timeout="200")
[21:45:06.593]      // while-condition  =>  TRUE
[21:45:06.593]      // while "1"  (timeout="200")
[21:45:06.593]      // while-condition  =>  TRUE
[21:45:06.593]      // while "1"  (timeout="200")
[21:45:06.593]      // while-condition  =>  TRUE
[21:45:06.593]      // while "1"  (timeout="200")
[21:45:06.593]      // while-condition  =>  TRUE
[21:45:06.594]      // while "1"  (timeout="200")
[21:45:06.594]      // while-condition  =>  TRUE
[21:45:06.594]      // while "1"  (timeout="200")
[21:45:06.594]      // while-condition  =>  TRUE
[21:45:06.594]      // while "1"  (timeout="200")
[21:45:06.594]      // while-condition  =>  TRUE
[21:45:06.594]      // while "1"  (timeout="200")
[21:45:06.594]      // while-condition  =>  TRUE
[21:45:06.594]      // while "1"  (timeout="200")
[21:45:06.594]      // while-condition  =>  TRUE
[21:45:06.595]      // while "1"  (timeout="200")
[21:45:06.595]      // while-condition  =>  TRUE
[21:45:06.595]      // while "1"  (timeout="200")
[21:45:06.595]      // while-condition  =>  TRUE
[21:45:06.595]      // while "1"  (timeout="200")
[21:45:06.595]      // while-condition  =>  TRUE
[21:45:06.595]      // while "1"  (timeout="200")
[21:45:06.595]      // while-condition  =>  TRUE
[21:45:06.595]      // while "1"  (timeout="200")
[21:45:06.595]      // while-condition  =>  TRUE
[21:45:06.596]      // while "1"  (timeout="200")
[21:45:06.596]      // while  =>  TIMEOUT
[21:45:06.596]      // end while "1"
[21:45:06.596]    </control>
[21:45:06.596]    <control if="canReadPins" while="" timeout="0" info="">
[21:45:06.596]      // if-block "canReadPins"
[21:45:06.596]        // =>  TRUE
[21:45:06.596]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:45:06.596]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:45:06.605]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:45:06.605]        // while-condition  =>  FALSE
[21:45:06.605]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:45:06.605]      </control>
[21:45:06.605]      // end if-block "canReadPins"
[21:45:06.605]    </control>
[21:45:06.605]    <control if="!canReadPins" while="" timeout="0" info="">
[21:45:06.605]      // if-block "!canReadPins"
[21:45:06.606]        // =>  FALSE
[21:45:06.606]      // skip if-block "!canReadPins"
[21:45:06.606]    </control>
[21:45:06.606]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:45:06.606]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:45:06.606]        // =>  TRUE
[21:45:06.606]      <block atomic="false" info="">
[21:45:06.606]        WriteAP(0x00, 0x190008);
[21:45:06.607]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:45:06.608]        WriteAP(0xF0, 0x01);
[21:45:06.613]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:45:06.613]      </block>
[21:45:06.614]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:45:06.614]    </control>
[21:45:06.614]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:45:06.614]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:45:06.614]        // =>  FALSE
[21:45:06.614]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:45:06.614]    </control>
[21:45:06.614]    <block atomic="false" info="">
[21:45:06.615]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:45:06.618]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:45:06.618]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:45:06.618]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:45:06.620]      __ap = 0; //lets make sure we reset the access point selection
[21:45:06.620]        // -> [__ap <= 0x00000000]
[21:45:06.620]    </block>
[21:45:06.621]  </sequence>
[21:45:06.621]  
[21:45:06.640]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:45:06.640]  
[21:45:06.640]  <debugvars>
[21:45:06.642]    // Pre-defined
[21:45:06.642]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:45:06.642]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:45:06.642]    __dp=0x00000000
[21:45:06.642]    __ap=0x00000000
[21:45:06.642]    __traceout=0x00000000      (Trace Disabled)
[21:45:06.642]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:45:06.642]    __FlashAddr=0x00000000
[21:45:06.642]    __FlashLen=0x00000000
[21:45:06.643]    __FlashArg=0x00000000
[21:45:06.643]    __FlashOp=0x00000000
[21:45:06.643]    __Result=0x00000000
[21:45:06.643]  </debugvars>
[21:45:06.643]  
[21:45:06.643]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:45:06.643]    <block atomic="false" info="">
[21:45:06.643]      __var deviceID = 0;
[21:45:06.644]        // -> [deviceID <= 0x00000000]
[21:45:06.644]      __var version = 0;
[21:45:06.644]        // -> [version <= 0x00000000]
[21:45:06.644]      __var partNum = 0;
[21:45:06.644]        // -> [partNum <= 0x00000000]
[21:45:06.644]      __var manuf = 0;
[21:45:06.644]        // -> [manuf <= 0x00000000]
[21:45:06.644]      __var isMSPM0G1X0X_G3X0X = 0;
[21:45:06.644]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:45:06.645]      __var isProduction = 0;
[21:45:06.645]        // -> [isProduction <= 0x00000000]
[21:45:06.645]      __var continueId = 0;
[21:45:06.645]        // -> [continueId <= 0x00000000]
[21:45:06.645]      deviceID =   Read32(0x41C40004);
[21:45:06.650]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:45:06.650]        // -> [deviceID <= 0x2BB8802F]
[21:45:06.650]      version = deviceID >> 28;
[21:45:06.650]        // -> [version <= 0x00000002]
[21:45:06.650]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:45:06.651]        // -> [partNum <= 0x0000BB88]
[21:45:06.651]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:45:06.651]        // -> [manuf <= 0x00000017]
[21:45:06.651]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:45:06.651]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:45:06.651]      isProduction = (version > 0);
[21:45:06.651]        // -> [isProduction <= 0x00000001]
[21:45:06.651]    </block>
[21:45:06.651]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:45:06.652]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:45:06.652]        // =>  FALSE
[21:45:06.652]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:45:06.652]    </control>
[21:45:06.652]    <control if="continueId == 4" while="" timeout="0" info="">
[21:45:06.652]      // if-block "continueId == 4"
[21:45:06.653]        // =>  FALSE
[21:45:06.653]      // skip if-block "continueId == 4"
[21:45:06.653]    </control>
[21:45:06.653]    <control if="!isProduction" while="" timeout="0" info="">
[21:45:06.653]      // if-block "!isProduction"
[21:45:06.653]        // =>  FALSE
[21:45:06.653]      // skip if-block "!isProduction"
[21:45:06.653]    </control>
[21:45:06.653]  </sequence>
[21:45:06.653]  
[21:46:25.640]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:46:25.640]  
[21:46:25.640]  <debugvars>
[21:46:25.640]    // Pre-defined
[21:46:25.641]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:46:25.641]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:46:25.641]    __dp=0x00000000
[21:46:25.641]    __ap=0x00000000
[21:46:25.641]    __traceout=0x00000000      (Trace Disabled)
[21:46:25.641]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:46:25.641]    __FlashAddr=0x00000000
[21:46:25.641]    __FlashLen=0x00000000
[21:46:25.641]    __FlashArg=0x00000000
[21:46:25.641]    __FlashOp=0x00000000
[21:46:25.641]    __Result=0x00000000
[21:46:25.641]  </debugvars>
[21:46:25.641]  
[21:46:25.643]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:46:25.643]    <block atomic="false" info="">
[21:46:25.643]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:46:25.643]        // -> [isSWJ <= 0x00000001]
[21:46:25.643]      __var hasDormant = __protocol & 0x00020000;
[21:46:25.643]        // -> [hasDormant <= 0x00000000]
[21:46:25.643]      __var protType   = __protocol & 0x0000FFFF;
[21:46:25.643]        // -> [protType <= 0x00000002]
[21:46:25.643]    </block>
[21:46:25.643]    <control if="protType == 1" while="" timeout="0" info="">
[21:46:25.643]      // if-block "protType == 1"
[21:46:25.643]        // =>  FALSE
[21:46:25.644]      // skip if-block "protType == 1"
[21:46:25.644]    </control>
[21:46:25.644]    <control if="protType == 2" while="" timeout="0" info="">
[21:46:25.644]      // if-block "protType == 2"
[21:46:25.644]        // =>  TRUE
[21:46:25.644]      <control if="isSWJ" while="" timeout="0" info="">
[21:46:25.644]        // if-block "isSWJ"
[21:46:25.644]          // =>  TRUE
[21:46:25.644]        <control if="hasDormant" while="" timeout="0" info="">
[21:46:25.645]          // if-block "hasDormant"
[21:46:25.645]            // =>  FALSE
[21:46:25.645]          // skip if-block "hasDormant"
[21:46:25.645]        </control>
[21:46:25.645]        <control if="!hasDormant" while="" timeout="0" info="">
[21:46:25.645]          // if-block "!hasDormant"
[21:46:25.645]            // =>  TRUE
[21:46:25.645]          <block atomic="false" info="">
[21:46:25.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:46:25.648]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:46:25.648]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:46:25.649]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:46:25.650]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:46:25.651]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:46:25.651]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:46:25.653]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:46:25.653]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:46:25.654]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:46:25.654]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:46:25.656]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:46:25.656]          </block>
[21:46:25.656]          // end if-block "!hasDormant"
[21:46:25.656]        </control>
[21:46:25.656]        // end if-block "isSWJ"
[21:46:25.656]      </control>
[21:46:25.656]      <control if="!isSWJ" while="" timeout="0" info="">
[21:46:25.656]        // if-block "!isSWJ"
[21:46:25.656]          // =>  FALSE
[21:46:25.656]        // skip if-block "!isSWJ"
[21:46:25.656]      </control>
[21:46:25.656]      <block atomic="false" info="">
[21:46:25.657]        ReadDP(0x0);
[21:46:25.658]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:46:25.658]      </block>
[21:46:25.658]      // end if-block "protType == 2"
[21:46:25.658]    </control>
[21:46:25.658]  </sequence>
[21:46:25.658]  
[21:46:25.662]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:46:25.662]  
[21:46:25.662]  <debugvars>
[21:46:25.662]    // Pre-defined
[21:46:25.663]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:46:25.663]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:46:25.663]    __dp=0x00000000
[21:46:25.663]    __ap=0x00000000
[21:46:25.663]    __traceout=0x00000000      (Trace Disabled)
[21:46:25.663]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:46:25.663]    __FlashAddr=0x00000000
[21:46:25.663]    __FlashLen=0x00000000
[21:46:25.663]    __FlashArg=0x00000000
[21:46:25.663]    __FlashOp=0x00000000
[21:46:25.663]    __Result=0x00000000
[21:46:25.663]  </debugvars>
[21:46:25.663]  
[21:46:25.663]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:46:25.663]    <block atomic="false" info="">
[21:46:25.663]      __var SW_DP_ABORT       = 0x0;
[21:46:25.663]        // -> [SW_DP_ABORT <= 0x00000000]
[21:46:25.664]      __var DP_CTRL_STAT      = 0x4;
[21:46:25.664]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:46:25.664]      __var DP_SELECT         = 0x8;
[21:46:25.664]        // -> [DP_SELECT <= 0x00000008]
[21:46:25.664]      __var powered_down      = 0;
[21:46:25.664]        // -> [powered_down <= 0x00000000]
[21:46:25.664]      WriteDP(DP_SELECT, 0x00000000);
[21:46:25.666]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:46:25.666]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:46:25.668]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:46:25.669]        // -> [powered_down <= 0x00000001]
[21:46:25.669]    </block>
[21:46:25.669]    <control if="powered_down" while="" timeout="0" info="">
[21:46:25.669]      // if-block "powered_down"
[21:46:25.669]        // =>  TRUE
[21:46:25.669]      <block atomic="false" info="">
[21:46:25.669]        Message(0, "Debug/System power-up request sent");
[21:46:25.671]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:46:25.680]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:46:25.680]      </block>
[21:46:25.680]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:46:25.681]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:46:25.683]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:46:25.683]        // while-condition  =>  FALSE
[21:46:25.683]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:46:25.683]      </control>
[21:46:25.683]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:46:25.683]        // if-block "(__protocol & 0xFFFF) == 1"
[21:46:25.685]          // =>  FALSE
[21:46:25.685]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:46:25.685]      </control>
[21:46:25.685]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:46:25.685]        // if-block "(__protocol & 0xFFFF) == 2"
[21:46:25.685]          // =>  TRUE
[21:46:25.685]        <block atomic="false" info="">
[21:46:25.685]          Message(0, "executing SWD power up");
[21:46:25.687]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:46:25.691]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:46:25.691]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:46:25.693]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:46:25.693]        </block>
[21:46:25.693]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:46:25.694]      </control>
[21:46:25.694]      // end if-block "powered_down"
[21:46:25.694]    </control>
[21:46:25.694]    <block atomic="false" info="">
[21:46:25.694]      __var DEBUG_PORT_VAL    = 0;
[21:46:25.695]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:46:25.695]      __var ACCESS_POINT_VAL  = 0;
[21:46:25.695]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:46:25.695]      __ap = 1; 
[21:46:25.695]        // -> [__ap <= 0x00000001]
[21:46:25.695]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:46:25.698]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:46:25.698]      __ap = 4;
[21:46:25.698]        // -> [__ap <= 0x00000004]
[21:46:25.698]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:46:25.702]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:46:25.702]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:46:25.702]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:46:25.704]    </block>
[21:46:25.704]    <block atomic="false" info="">
[21:46:25.704]      __var nReset = 0x80;
[21:46:25.704]        // -> [nReset <= 0x00000080]
[21:46:25.704]      __var canReadPins = 0;
[21:46:25.704]        // -> [canReadPins <= 0x00000000]
[21:46:25.704]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:46:25.707]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:46:25.707]        // -> [canReadPins <= 0x00000001]
[21:46:25.707]    </block>
[21:46:25.707]    <control if="" while="1" timeout="200" info="">
[21:46:25.707]      // while "1"  (timeout="200")
[21:46:25.707]      // while-condition  =>  TRUE
[21:46:25.707]      // while "1"  (timeout="200")
[21:46:25.707]      // while-condition  =>  TRUE
[21:46:25.707]      // while "1"  (timeout="200")
[21:46:25.707]      // while-condition  =>  TRUE
[21:46:25.707]      // while "1"  (timeout="200")
[21:46:25.707]      // while-condition  =>  TRUE
[21:46:25.707]      // while "1"  (timeout="200")
[21:46:25.707]      // while-condition  =>  TRUE
[21:46:25.708]      // while "1"  (timeout="200")
[21:46:25.708]      // while-condition  =>  TRUE
[21:46:25.708]      // while "1"  (timeout="200")
[21:46:25.708]      // while-condition  =>  TRUE
[21:46:25.708]      // while "1"  (timeout="200")
[21:46:25.708]      // while-condition  =>  TRUE
[21:46:25.708]      // while "1"  (timeout="200")
[21:46:25.708]      // while-condition  =>  TRUE
[21:46:25.708]      // while "1"  (timeout="200")
[21:46:25.708]      // while-condition  =>  TRUE
[21:46:25.708]      // while "1"  (timeout="200")
[21:46:25.708]      // while-condition  =>  TRUE
[21:46:25.709]      // while "1"  (timeout="200")
[21:46:25.709]      // while-condition  =>  TRUE
[21:46:25.709]      // while "1"  (timeout="200")
[21:46:25.709]      // while-condition  =>  TRUE
[21:46:25.709]      // while "1"  (timeout="200")
[21:46:25.709]      // while-condition  =>  TRUE
[21:46:25.709]      // while "1"  (timeout="200")
[21:46:25.709]      // while-condition  =>  TRUE
[21:46:25.709]      // while "1"  (timeout="200")
[21:46:25.709]      // while-condition  =>  TRUE
[21:46:25.709]      // while "1"  (timeout="200")
[21:46:25.709]      // while-condition  =>  TRUE
[21:46:25.710]      // while "1"  (timeout="200")
[21:46:25.710]      // while-condition  =>  TRUE
[21:46:25.710]      // while "1"  (timeout="200")
[21:46:25.710]      // while-condition  =>  TRUE
[21:46:25.710]      // while "1"  (timeout="200")
[21:46:25.710]      // while-condition  =>  TRUE
[21:46:25.710]      // while "1"  (timeout="200")
[21:46:25.710]      // while-condition  =>  TRUE
[21:46:25.710]      // while "1"  (timeout="200")
[21:46:25.710]      // while-condition  =>  TRUE
[21:46:25.710]      // while "1"  (timeout="200")
[21:46:25.711]      // while-condition  =>  TRUE
[21:46:25.711]      // while "1"  (timeout="200")
[21:46:25.711]      // while-condition  =>  TRUE
[21:46:25.711]      // while "1"  (timeout="200")
[21:46:25.711]      // while-condition  =>  TRUE
[21:46:25.711]      // while "1"  (timeout="200")
[21:46:25.711]      // while-condition  =>  TRUE
[21:46:25.712]      // while "1"  (timeout="200")
[21:46:25.712]      // while-condition  =>  TRUE
[21:46:25.712]      // while "1"  (timeout="200")
[21:46:25.712]      // while-condition  =>  TRUE
[21:46:25.712]      // while "1"  (timeout="200")
[21:46:25.712]      // while-condition  =>  TRUE
[21:46:25.712]      // while "1"  (timeout="200")
[21:46:25.712]      // while-condition  =>  TRUE
[21:46:25.713]      // while "1"  (timeout="200")
[21:46:25.713]      // while-condition  =>  TRUE
[21:46:25.713]      // while "1"  (timeout="200")
[21:46:25.713]      // while-condition  =>  TRUE
[21:46:25.713]      // while "1"  (timeout="200")
[21:46:25.713]      // while-condition  =>  TRUE
[21:46:25.713]      // while "1"  (timeout="200")
[21:46:25.713]      // while-condition  =>  TRUE
[21:46:25.713]      // while "1"  (timeout="200")
[21:46:25.713]      // while-condition  =>  TRUE
[21:46:25.713]      // while "1"  (timeout="200")
[21:46:25.713]      // while-condition  =>  TRUE
[21:46:25.714]      // while "1"  (timeout="200")
[21:46:25.714]      // while-condition  =>  TRUE
[21:46:25.714]      // while "1"  (timeout="200")
[21:46:25.714]      // while-condition  =>  TRUE
[21:46:25.714]      // while "1"  (timeout="200")
[21:46:25.714]      // while-condition  =>  TRUE
[21:46:25.714]      // while "1"  (timeout="200")
[21:46:25.714]      // while-condition  =>  TRUE
[21:46:25.714]      // while "1"  (timeout="200")
[21:46:25.714]      // while-condition  =>  TRUE
[21:46:25.715]      // while "1"  (timeout="200")
[21:46:25.715]      // while-condition  =>  TRUE
[21:46:25.715]      // while "1"  (timeout="200")
[21:46:25.715]      // while-condition  =>  TRUE
[21:46:25.715]      // while "1"  (timeout="200")
[21:46:25.715]      // while-condition  =>  TRUE
[21:46:25.715]      // while "1"  (timeout="200")
[21:46:25.715]      // while-condition  =>  TRUE
[21:46:25.715]      // while "1"  (timeout="200")
[21:46:25.715]      // while-condition  =>  TRUE
[21:46:25.715]      // while "1"  (timeout="200")
[21:46:25.716]      // while-condition  =>  TRUE
[21:46:25.716]      // while "1"  (timeout="200")
[21:46:25.716]      // while-condition  =>  TRUE
[21:46:25.716]      // while "1"  (timeout="200")
[21:46:25.716]      // while-condition  =>  TRUE
[21:46:25.716]      // while "1"  (timeout="200")
[21:46:25.716]      // while-condition  =>  TRUE
[21:46:25.716]      // while "1"  (timeout="200")
[21:46:25.716]      // while-condition  =>  TRUE
[21:46:25.716]      // while "1"  (timeout="200")
[21:46:25.716]      // while-condition  =>  TRUE
[21:46:25.717]      // while "1"  (timeout="200")
[21:46:25.717]      // while-condition  =>  TRUE
[21:46:25.717]      // while "1"  (timeout="200")
[21:46:25.717]      // while-condition  =>  TRUE
[21:46:25.717]      // while "1"  (timeout="200")
[21:46:25.717]      // while-condition  =>  TRUE
[21:46:25.717]      // while "1"  (timeout="200")
[21:46:25.717]      // while-condition  =>  TRUE
[21:46:25.717]      // while "1"  (timeout="200")
[21:46:25.717]      // while-condition  =>  TRUE
[21:46:25.718]      // while "1"  (timeout="200")
[21:46:25.718]      // while-condition  =>  TRUE
[21:46:25.718]      // while "1"  (timeout="200")
[21:46:25.718]      // while-condition  =>  TRUE
[21:46:25.718]      // while "1"  (timeout="200")
[21:46:25.718]      // while-condition  =>  TRUE
[21:46:25.718]      // while "1"  (timeout="200")
[21:46:25.718]      // while-condition  =>  TRUE
[21:46:25.718]      // while "1"  (timeout="200")
[21:46:25.718]      // while-condition  =>  TRUE
[21:46:25.718]      // while "1"  (timeout="200")
[21:46:25.718]      // while-condition  =>  TRUE
[21:46:25.719]      // while "1"  (timeout="200")
[21:46:25.719]      // while-condition  =>  TRUE
[21:46:25.719]      // while "1"  (timeout="200")
[21:46:25.719]      // while-condition  =>  TRUE
[21:46:25.719]      // while "1"  (timeout="200")
[21:46:25.719]      // while-condition  =>  TRUE
[21:46:25.719]      // while "1"  (timeout="200")
[21:46:25.719]      // while-condition  =>  TRUE
[21:46:25.719]      // while "1"  (timeout="200")
[21:46:25.719]      // while-condition  =>  TRUE
[21:46:25.719]      // while "1"  (timeout="200")
[21:46:25.719]      // while-condition  =>  TRUE
[21:46:25.720]      // while "1"  (timeout="200")
[21:46:25.720]      // while-condition  =>  TRUE
[21:46:25.720]      // while "1"  (timeout="200")
[21:46:25.720]      // while-condition  =>  TRUE
[21:46:25.720]      // while "1"  (timeout="200")
[21:46:25.720]      // while-condition  =>  TRUE
[21:46:25.722]      // while "1"  (timeout="200")
[21:46:25.722]      // while  =>  TIMEOUT
[21:46:25.722]      // end while "1"
[21:46:25.722]    </control>
[21:46:25.722]    <control if="canReadPins" while="" timeout="0" info="">
[21:46:25.722]      // if-block "canReadPins"
[21:46:25.722]        // =>  TRUE
[21:46:25.722]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:46:25.722]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:46:25.726]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:46:25.727]        // while-condition  =>  FALSE
[21:46:25.727]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:46:25.727]      </control>
[21:46:25.727]      // end if-block "canReadPins"
[21:46:25.727]    </control>
[21:46:25.727]    <control if="!canReadPins" while="" timeout="0" info="">
[21:46:25.727]      // if-block "!canReadPins"
[21:46:25.727]        // =>  FALSE
[21:46:25.727]      // skip if-block "!canReadPins"
[21:46:25.727]    </control>
[21:46:25.727]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:46:25.727]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:46:25.728]        // =>  TRUE
[21:46:25.728]      <block atomic="false" info="">
[21:46:25.728]        WriteAP(0x00, 0x190008);
[21:46:25.729]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:46:25.730]        WriteAP(0xF0, 0x01);
[21:46:25.733]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:46:25.733]      </block>
[21:46:25.733]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:46:25.733]    </control>
[21:46:25.733]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:46:25.733]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:46:25.733]        // =>  FALSE
[21:46:25.733]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:46:25.733]    </control>
[21:46:25.733]    <block atomic="false" info="">
[21:46:25.733]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:46:25.737]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:46:25.737]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:46:25.737]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:46:25.739]      __ap = 0; //lets make sure we reset the access point selection
[21:46:25.739]        // -> [__ap <= 0x00000000]
[21:46:25.739]    </block>
[21:46:25.739]  </sequence>
[21:46:25.739]  
[21:46:25.761]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:46:25.761]  
[21:46:25.761]  <debugvars>
[21:46:25.761]    // Pre-defined
[21:46:25.761]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:46:25.761]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:46:25.761]    __dp=0x00000000
[21:46:25.762]    __ap=0x00000000
[21:46:25.762]    __traceout=0x00000000      (Trace Disabled)
[21:46:25.762]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:46:25.762]    __FlashAddr=0x00000000
[21:46:25.762]    __FlashLen=0x00000000
[21:46:25.762]    __FlashArg=0x00000000
[21:46:25.762]    __FlashOp=0x00000000
[21:46:25.762]    __Result=0x00000000
[21:46:25.762]  </debugvars>
[21:46:25.763]  
[21:46:25.763]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:46:25.763]    <block atomic="false" info="">
[21:46:25.763]      __var deviceID = 0;
[21:46:25.763]        // -> [deviceID <= 0x00000000]
[21:46:25.763]      __var version = 0;
[21:46:25.763]        // -> [version <= 0x00000000]
[21:46:25.764]      __var partNum = 0;
[21:46:25.764]        // -> [partNum <= 0x00000000]
[21:46:25.764]      __var manuf = 0;
[21:46:25.764]        // -> [manuf <= 0x00000000]
[21:46:25.764]      __var isMSPM0G1X0X_G3X0X = 0;
[21:46:25.764]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:46:25.764]      __var isProduction = 0;
[21:46:25.764]        // -> [isProduction <= 0x00000000]
[21:46:25.764]      __var continueId = 0;
[21:46:25.765]        // -> [continueId <= 0x00000000]
[21:46:25.765]      deviceID =   Read32(0x41C40004);
[21:46:25.771]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:46:25.772]        // -> [deviceID <= 0x2BB8802F]
[21:46:25.772]      version = deviceID >> 28;
[21:46:25.772]        // -> [version <= 0x00000002]
[21:46:25.772]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:46:25.772]        // -> [partNum <= 0x0000BB88]
[21:46:25.772]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:46:25.772]        // -> [manuf <= 0x00000017]
[21:46:25.772]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:46:25.772]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:46:25.772]      isProduction = (version > 0);
[21:46:25.773]        // -> [isProduction <= 0x00000001]
[21:46:25.773]    </block>
[21:46:25.773]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:46:25.773]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:46:25.773]        // =>  FALSE
[21:46:25.773]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:46:25.773]    </control>
[21:46:25.773]    <control if="continueId == 4" while="" timeout="0" info="">
[21:46:25.773]      // if-block "continueId == 4"
[21:46:25.773]        // =>  FALSE
[21:46:25.774]      // skip if-block "continueId == 4"
[21:46:25.774]    </control>
[21:46:25.774]    <control if="!isProduction" while="" timeout="0" info="">
[21:46:25.774]      // if-block "!isProduction"
[21:46:25.774]        // =>  FALSE
[21:46:25.774]      // skip if-block "!isProduction"
[21:46:25.774]    </control>
[21:46:25.774]  </sequence>
[21:46:25.774]  
[21:48:24.264]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:48:24.264]  
[21:48:24.272]  <debugvars>
[21:48:24.272]    // Pre-defined
[21:48:24.272]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:48:24.272]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:48:24.272]    __dp=0x00000000
[21:48:24.272]    __ap=0x00000000
[21:48:24.272]    __traceout=0x00000000      (Trace Disabled)
[21:48:24.272]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:48:24.272]    __FlashAddr=0x00000000
[21:48:24.272]    __FlashLen=0x00000000
[21:48:24.272]    __FlashArg=0x00000000
[21:48:24.272]    __FlashOp=0x00000000
[21:48:24.272]    __Result=0x00000000
[21:48:24.272]  </debugvars>
[21:48:24.272]  
[21:48:24.272]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:48:24.272]    <block atomic="false" info="">
[21:48:24.272]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:48:24.272]        // -> [isSWJ <= 0x00000001]
[21:48:24.272]      __var hasDormant = __protocol & 0x00020000;
[21:48:24.272]        // -> [hasDormant <= 0x00000000]
[21:48:24.272]      __var protType   = __protocol & 0x0000FFFF;
[21:48:24.272]        // -> [protType <= 0x00000002]
[21:48:24.272]    </block>
[21:48:24.272]    <control if="protType == 1" while="" timeout="0" info="">
[21:48:24.272]      // if-block "protType == 1"
[21:48:24.272]        // =>  FALSE
[21:48:24.272]      // skip if-block "protType == 1"
[21:48:24.272]    </control>
[21:48:24.276]    <control if="protType == 2" while="" timeout="0" info="">
[21:48:24.276]      // if-block "protType == 2"
[21:48:24.276]        // =>  TRUE
[21:48:24.276]      <control if="isSWJ" while="" timeout="0" info="">
[21:48:24.276]        // if-block "isSWJ"
[21:48:24.276]          // =>  TRUE
[21:48:24.276]        <control if="hasDormant" while="" timeout="0" info="">
[21:48:24.276]          // if-block "hasDormant"
[21:48:24.276]            // =>  FALSE
[21:48:24.276]          // skip if-block "hasDormant"
[21:48:24.276]        </control>
[21:48:24.276]        <control if="!hasDormant" while="" timeout="0" info="">
[21:48:24.276]          // if-block "!hasDormant"
[21:48:24.276]            // =>  TRUE
[21:48:24.276]          <block atomic="false" info="">
[21:48:24.276]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:48:24.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:48:24.279]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:48:24.280]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:48:24.280]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:48:24.285]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:48:24.285]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:48:24.285]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:48:24.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:48:24.288]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:48:24.288]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:48:24.289]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:48:24.289]          </block>
[21:48:24.289]          // end if-block "!hasDormant"
[21:48:24.289]        </control>
[21:48:24.289]        // end if-block "isSWJ"
[21:48:24.290]      </control>
[21:48:24.290]      <control if="!isSWJ" while="" timeout="0" info="">
[21:48:24.290]        // if-block "!isSWJ"
[21:48:24.290]          // =>  FALSE
[21:48:24.290]        // skip if-block "!isSWJ"
[21:48:24.290]      </control>
[21:48:24.290]      <block atomic="false" info="">
[21:48:24.290]        ReadDP(0x0);
[21:48:24.290]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:48:24.290]      </block>
[21:48:24.290]      // end if-block "protType == 2"
[21:48:24.290]    </control>
[21:48:24.290]  </sequence>
[21:48:24.290]  
[21:48:24.293]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:48:24.293]  
[21:48:24.293]  <debugvars>
[21:48:24.297]    // Pre-defined
[21:48:24.297]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:48:24.297]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:48:24.297]    __dp=0x00000000
[21:48:24.297]    __ap=0x00000000
[21:48:24.297]    __traceout=0x00000000      (Trace Disabled)
[21:48:24.297]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:48:24.297]    __FlashAddr=0x00000000
[21:48:24.297]    __FlashLen=0x00000000
[21:48:24.297]    __FlashArg=0x00000000
[21:48:24.297]    __FlashOp=0x00000000
[21:48:24.297]    __Result=0x00000000
[21:48:24.297]  </debugvars>
[21:48:24.297]  
[21:48:24.297]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:48:24.297]    <block atomic="false" info="">
[21:48:24.297]      __var SW_DP_ABORT       = 0x0;
[21:48:24.297]        // -> [SW_DP_ABORT <= 0x00000000]
[21:48:24.297]      __var DP_CTRL_STAT      = 0x4;
[21:48:24.297]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:48:24.297]      __var DP_SELECT         = 0x8;
[21:48:24.297]        // -> [DP_SELECT <= 0x00000008]
[21:48:24.297]      __var powered_down      = 0;
[21:48:24.297]        // -> [powered_down <= 0x00000000]
[21:48:24.297]      WriteDP(DP_SELECT, 0x00000000);
[21:48:24.301]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:48:24.301]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:48:24.301]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:48:24.301]        // -> [powered_down <= 0x00000001]
[21:48:24.301]    </block>
[21:48:24.301]    <control if="powered_down" while="" timeout="0" info="">
[21:48:24.301]      // if-block "powered_down"
[21:48:24.301]        // =>  TRUE
[21:48:24.301]      <block atomic="false" info="">
[21:48:24.301]        Message(0, "Debug/System power-up request sent");
[21:48:24.305]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:48:24.305]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:48:24.305]      </block>
[21:48:24.305]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:48:24.305]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:48:24.309]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:48:24.309]        // while-condition  =>  FALSE
[21:48:24.309]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:48:24.309]      </control>
[21:48:24.309]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:48:24.309]        // if-block "(__protocol & 0xFFFF) == 1"
[21:48:24.309]          // =>  FALSE
[21:48:24.309]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:48:24.309]      </control>
[21:48:24.309]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:48:24.309]        // if-block "(__protocol & 0xFFFF) == 2"
[21:48:24.309]          // =>  TRUE
[21:48:24.309]        <block atomic="false" info="">
[21:48:24.309]          Message(0, "executing SWD power up");
[21:48:24.313]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:48:24.315]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:48:24.315]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:48:24.317]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:48:24.317]        </block>
[21:48:24.317]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:48:24.317]      </control>
[21:48:24.317]      // end if-block "powered_down"
[21:48:24.317]    </control>
[21:48:24.317]    <block atomic="false" info="">
[21:48:24.317]      __var DEBUG_PORT_VAL    = 0;
[21:48:24.317]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:48:24.317]      __var ACCESS_POINT_VAL  = 0;
[21:48:24.317]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:48:24.317]      __ap = 1; 
[21:48:24.317]        // -> [__ap <= 0x00000001]
[21:48:24.317]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:48:24.325]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:48:24.325]      __ap = 4;
[21:48:24.325]        // -> [__ap <= 0x00000004]
[21:48:24.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:48:24.325]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:48:24.325]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:48:24.329]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:48:24.331]    </block>
[21:48:24.331]    <block atomic="false" info="">
[21:48:24.331]      __var nReset = 0x80;
[21:48:24.331]        // -> [nReset <= 0x00000080]
[21:48:24.331]      __var canReadPins = 0;
[21:48:24.331]        // -> [canReadPins <= 0x00000000]
[21:48:24.334]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:48:24.335]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:48:24.335]        // -> [canReadPins <= 0x00000001]
[21:48:24.335]    </block>
[21:48:24.335]    <control if="" while="1" timeout="200" info="">
[21:48:24.335]      // while "1"  (timeout="200")
[21:48:24.335]      // while-condition  =>  TRUE
[21:48:24.335]      // while "1"  (timeout="200")
[21:48:24.335]      // while-condition  =>  TRUE
[21:48:24.335]      // while "1"  (timeout="200")
[21:48:24.335]      // while-condition  =>  TRUE
[21:48:24.335]      // while "1"  (timeout="200")
[21:48:24.335]      // while-condition  =>  TRUE
[21:48:24.335]      // while "1"  (timeout="200")
[21:48:24.335]      // while-condition  =>  TRUE
[21:48:24.335]      // while "1"  (timeout="200")
[21:48:24.335]      // while-condition  =>  TRUE
[21:48:24.335]      // while "1"  (timeout="200")
[21:48:24.335]      // while-condition  =>  TRUE
[21:48:24.335]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.338]      // while "1"  (timeout="200")
[21:48:24.338]      // while-condition  =>  TRUE
[21:48:24.342]      // while "1"  (timeout="200")
[21:48:24.342]      // while-condition  =>  TRUE
[21:48:24.342]      // while "1"  (timeout="200")
[21:48:24.342]      // while-condition  =>  TRUE
[21:48:24.342]      // while "1"  (timeout="200")
[21:48:24.342]      // while-condition  =>  TRUE
[21:48:24.342]      // while "1"  (timeout="200")
[21:48:24.342]      // while-condition  =>  TRUE
[21:48:24.342]      // while "1"  (timeout="200")
[21:48:24.342]      // while-condition  =>  TRUE
[21:48:24.342]      // while "1"  (timeout="200")
[21:48:24.342]      // while-condition  =>  TRUE
[21:48:24.342]      // while "1"  (timeout="200")
[21:48:24.342]      // while-condition  =>  TRUE
[21:48:24.342]      // while "1"  (timeout="200")
[21:48:24.342]      // while-condition  =>  TRUE
[21:48:24.342]      // while "1"  (timeout="200")
[21:48:24.342]      // while-condition  =>  TRUE
[21:48:24.342]      // while "1"  (timeout="200")
[21:48:24.342]      // while-condition  =>  TRUE
[21:48:24.342]      // while "1"  (timeout="200")
[21:48:24.342]      // while-condition  =>  TRUE
[21:48:24.342]      // while "1"  (timeout="200")
[21:48:24.342]      // while-condition  =>  TRUE
[21:48:24.345]      // while "1"  (timeout="200")
[21:48:24.345]      // while-condition  =>  TRUE
[21:48:24.345]      // while "1"  (timeout="200")
[21:48:24.345]      // while-condition  =>  TRUE
[21:48:24.345]      // while "1"  (timeout="200")
[21:48:24.345]      // while-condition  =>  TRUE
[21:48:24.345]      // while "1"  (timeout="200")
[21:48:24.345]      // while-condition  =>  TRUE
[21:48:24.345]      // while "1"  (timeout="200")
[21:48:24.345]      // while-condition  =>  TRUE
[21:48:24.346]      // while "1"  (timeout="200")
[21:48:24.346]      // while  =>  TIMEOUT
[21:48:24.346]      // end while "1"
[21:48:24.346]    </control>
[21:48:24.346]    <control if="canReadPins" while="" timeout="0" info="">
[21:48:24.346]      // if-block "canReadPins"
[21:48:24.346]        // =>  TRUE
[21:48:24.346]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:48:24.346]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:48:24.346]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:48:24.346]        // while-condition  =>  FALSE
[21:48:24.346]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:48:24.346]      </control>
[21:48:24.346]      // end if-block "canReadPins"
[21:48:24.346]    </control>
[21:48:24.346]    <control if="!canReadPins" while="" timeout="0" info="">
[21:48:24.346]      // if-block "!canReadPins"
[21:48:24.346]        // =>  FALSE
[21:48:24.346]      // skip if-block "!canReadPins"
[21:48:24.346]    </control>
[21:48:24.346]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:48:24.346]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:48:24.346]        // =>  TRUE
[21:48:24.350]      <block atomic="false" info="">
[21:48:24.350]        WriteAP(0x00, 0x190008);
[21:48:24.350]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:48:24.350]        WriteAP(0xF0, 0x01);
[21:48:24.354]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:48:24.354]      </block>
[21:48:24.354]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:48:24.354]    </control>
[21:48:24.354]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:48:24.354]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:48:24.354]        // =>  FALSE
[21:48:24.354]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:48:24.354]    </control>
[21:48:24.354]    <block atomic="false" info="">
[21:48:24.354]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:48:24.359]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:48:24.359]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:48:24.359]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:48:24.363]      __ap = 0; //lets make sure we reset the access point selection
[21:48:24.363]        // -> [__ap <= 0x00000000]
[21:48:24.363]    </block>
[21:48:24.363]  </sequence>
[21:48:24.363]  
[21:48:24.387]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:48:24.387]  
[21:48:24.387]  <debugvars>
[21:48:24.387]    // Pre-defined
[21:48:24.387]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:48:24.387]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:48:24.387]    __dp=0x00000000
[21:48:24.387]    __ap=0x00000000
[21:48:24.387]    __traceout=0x00000000      (Trace Disabled)
[21:48:24.387]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:48:24.387]    __FlashAddr=0x00000000
[21:48:24.387]    __FlashLen=0x00000000
[21:48:24.387]    __FlashArg=0x00000000
[21:48:24.387]    __FlashOp=0x00000000
[21:48:24.387]    __Result=0x00000000
[21:48:24.387]  </debugvars>
[21:48:24.387]  
[21:48:24.387]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:48:24.387]    <block atomic="false" info="">
[21:48:24.387]      __var deviceID = 0;
[21:48:24.387]        // -> [deviceID <= 0x00000000]
[21:48:24.391]      __var version = 0;
[21:48:24.391]        // -> [version <= 0x00000000]
[21:48:24.391]      __var partNum = 0;
[21:48:24.391]        // -> [partNum <= 0x00000000]
[21:48:24.391]      __var manuf = 0;
[21:48:24.391]        // -> [manuf <= 0x00000000]
[21:48:24.392]      __var isMSPM0G1X0X_G3X0X = 0;
[21:48:24.392]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:48:24.392]      __var isProduction = 0;
[21:48:24.392]        // -> [isProduction <= 0x00000000]
[21:48:24.392]      __var continueId = 0;
[21:48:24.392]        // -> [continueId <= 0x00000000]
[21:48:24.392]      deviceID =   Read32(0x41C40004);
[21:48:24.395]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:48:24.395]        // -> [deviceID <= 0x2BB8802F]
[21:48:24.395]      version = deviceID >> 28;
[21:48:24.395]        // -> [version <= 0x00000002]
[21:48:24.395]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:48:24.395]        // -> [partNum <= 0x0000BB88]
[21:48:24.397]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:48:24.397]        // -> [manuf <= 0x00000017]
[21:48:24.397]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:48:24.397]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:48:24.397]      isProduction = (version > 0);
[21:48:24.397]        // -> [isProduction <= 0x00000001]
[21:48:24.397]    </block>
[21:48:24.397]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:48:24.397]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:48:24.397]        // =>  FALSE
[21:48:24.397]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:48:24.397]    </control>
[21:48:24.397]    <control if="continueId == 4" while="" timeout="0" info="">
[21:48:24.399]      // if-block "continueId == 4"
[21:48:24.399]        // =>  FALSE
[21:48:24.399]      // skip if-block "continueId == 4"
[21:48:24.399]    </control>
[21:48:24.399]    <control if="!isProduction" while="" timeout="0" info="">
[21:48:24.399]      // if-block "!isProduction"
[21:48:24.399]        // =>  FALSE
[21:48:24.399]      // skip if-block "!isProduction"
[21:48:24.399]    </control>
[21:48:24.400]  </sequence>
[21:48:24.400]  
[21:49:28.341]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:49:28.341]  
[21:49:28.351]  <debugvars>
[21:49:28.351]    // Pre-defined
[21:49:28.351]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:49:28.351]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:49:28.351]    __dp=0x00000000
[21:49:28.352]    __ap=0x00000000
[21:49:28.352]    __traceout=0x00000000      (Trace Disabled)
[21:49:28.352]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:49:28.352]    __FlashAddr=0x00000000
[21:49:28.352]    __FlashLen=0x00000000
[21:49:28.352]    __FlashArg=0x00000000
[21:49:28.352]    __FlashOp=0x00000000
[21:49:28.352]    __Result=0x00000000
[21:49:28.352]  </debugvars>
[21:49:28.352]  
[21:49:28.352]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:49:28.352]    <block atomic="false" info="">
[21:49:28.352]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:49:28.352]        // -> [isSWJ <= 0x00000001]
[21:49:28.352]      __var hasDormant = __protocol & 0x00020000;
[21:49:28.352]        // -> [hasDormant <= 0x00000000]
[21:49:28.352]      __var protType   = __protocol & 0x0000FFFF;
[21:49:28.353]        // -> [protType <= 0x00000002]
[21:49:28.353]    </block>
[21:49:28.353]    <control if="protType == 1" while="" timeout="0" info="">
[21:49:28.353]      // if-block "protType == 1"
[21:49:28.353]        // =>  FALSE
[21:49:28.353]      // skip if-block "protType == 1"
[21:49:28.353]    </control>
[21:49:28.353]    <control if="protType == 2" while="" timeout="0" info="">
[21:49:28.353]      // if-block "protType == 2"
[21:49:28.353]        // =>  TRUE
[21:49:28.353]      <control if="isSWJ" while="" timeout="0" info="">
[21:49:28.353]        // if-block "isSWJ"
[21:49:28.353]          // =>  TRUE
[21:49:28.353]        <control if="hasDormant" while="" timeout="0" info="">
[21:49:28.353]          // if-block "hasDormant"
[21:49:28.353]            // =>  FALSE
[21:49:28.353]          // skip if-block "hasDormant"
[21:49:28.353]        </control>
[21:49:28.353]        <control if="!hasDormant" while="" timeout="0" info="">
[21:49:28.353]          // if-block "!hasDormant"
[21:49:28.353]            // =>  TRUE
[21:49:28.353]          <block atomic="false" info="">
[21:49:28.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:49:28.357]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:49:28.357]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:49:28.357]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:49:28.357]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:49:28.357]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:49:28.357]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:49:28.361]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:49:28.361]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:49:28.364]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:49:28.364]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:49:28.365]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:49:28.365]          </block>
[21:49:28.366]          // end if-block "!hasDormant"
[21:49:28.366]        </control>
[21:49:28.366]        // end if-block "isSWJ"
[21:49:28.366]      </control>
[21:49:28.366]      <control if="!isSWJ" while="" timeout="0" info="">
[21:49:28.366]        // if-block "!isSWJ"
[21:49:28.366]          // =>  FALSE
[21:49:28.366]        // skip if-block "!isSWJ"
[21:49:28.366]      </control>
[21:49:28.366]      <block atomic="false" info="">
[21:49:28.366]        ReadDP(0x0);
[21:49:28.366]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:49:28.366]      </block>
[21:49:28.366]      // end if-block "protType == 2"
[21:49:28.366]    </control>
[21:49:28.366]  </sequence>
[21:49:28.366]  
[21:49:28.371]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:49:28.371]  
[21:49:28.371]  <debugvars>
[21:49:28.371]    // Pre-defined
[21:49:28.371]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:49:28.371]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:49:28.371]    __dp=0x00000000
[21:49:28.371]    __ap=0x00000000
[21:49:28.371]    __traceout=0x00000000      (Trace Disabled)
[21:49:28.371]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:49:28.371]    __FlashAddr=0x00000000
[21:49:28.373]    __FlashLen=0x00000000
[21:49:28.373]    __FlashArg=0x00000000
[21:49:28.373]    __FlashOp=0x00000000
[21:49:28.373]    __Result=0x00000000
[21:49:28.373]  </debugvars>
[21:49:28.373]  
[21:49:28.373]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:49:28.373]    <block atomic="false" info="">
[21:49:28.375]      __var SW_DP_ABORT       = 0x0;
[21:49:28.375]        // -> [SW_DP_ABORT <= 0x00000000]
[21:49:28.375]      __var DP_CTRL_STAT      = 0x4;
[21:49:28.375]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:49:28.375]      __var DP_SELECT         = 0x8;
[21:49:28.375]        // -> [DP_SELECT <= 0x00000008]
[21:49:28.375]      __var powered_down      = 0;
[21:49:28.375]        // -> [powered_down <= 0x00000000]
[21:49:28.375]      WriteDP(DP_SELECT, 0x00000000);
[21:49:28.377]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:49:28.377]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:49:28.378]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:49:28.378]        // -> [powered_down <= 0x00000001]
[21:49:28.378]    </block>
[21:49:28.378]    <control if="powered_down" while="" timeout="0" info="">
[21:49:28.378]      // if-block "powered_down"
[21:49:28.378]        // =>  TRUE
[21:49:28.378]      <block atomic="false" info="">
[21:49:28.378]        Message(0, "Debug/System power-up request sent");
[21:49:28.380]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:49:28.382]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:49:28.382]      </block>
[21:49:28.382]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:49:28.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:49:28.382]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:49:28.382]        // while-condition  =>  FALSE
[21:49:28.382]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:49:28.382]      </control>
[21:49:28.382]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:49:28.382]        // if-block "(__protocol & 0xFFFF) == 1"
[21:49:28.382]          // =>  FALSE
[21:49:28.382]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:49:28.382]      </control>
[21:49:28.382]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:49:28.382]        // if-block "(__protocol & 0xFFFF) == 2"
[21:49:28.382]          // =>  TRUE
[21:49:28.382]        <block atomic="false" info="">
[21:49:28.382]          Message(0, "executing SWD power up");
[21:49:28.387]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:49:28.390]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:49:28.390]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:49:28.391]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:49:28.391]        </block>
[21:49:28.391]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:49:28.391]      </control>
[21:49:28.391]      // end if-block "powered_down"
[21:49:28.391]    </control>
[21:49:28.391]    <block atomic="false" info="">
[21:49:28.391]      __var DEBUG_PORT_VAL    = 0;
[21:49:28.391]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:49:28.391]      __var ACCESS_POINT_VAL  = 0;
[21:49:28.391]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:49:28.391]      __ap = 1; 
[21:49:28.391]        // -> [__ap <= 0x00000001]
[21:49:28.391]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:49:28.396]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:49:28.396]      __ap = 4;
[21:49:28.396]        // -> [__ap <= 0x00000004]
[21:49:28.396]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:49:28.403]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:49:28.403]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:49:28.403]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:49:28.403]    </block>
[21:49:28.403]    <block atomic="false" info="">
[21:49:28.403]      __var nReset = 0x80;
[21:49:28.403]        // -> [nReset <= 0x00000080]
[21:49:28.403]      __var canReadPins = 0;
[21:49:28.403]        // -> [canReadPins <= 0x00000000]
[21:49:28.403]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:49:28.407]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:49:28.407]        // -> [canReadPins <= 0x00000001]
[21:49:28.407]    </block>
[21:49:28.407]    <control if="" while="1" timeout="200" info="">
[21:49:28.407]      // while "1"  (timeout="200")
[21:49:28.407]      // while-condition  =>  TRUE
[21:49:28.407]      // while "1"  (timeout="200")
[21:49:28.407]      // while-condition  =>  TRUE
[21:49:28.407]      // while "1"  (timeout="200")
[21:49:28.407]      // while-condition  =>  TRUE
[21:49:28.407]      // while "1"  (timeout="200")
[21:49:28.407]      // while-condition  =>  TRUE
[21:49:28.407]      // while "1"  (timeout="200")
[21:49:28.407]      // while-condition  =>  TRUE
[21:49:28.407]      // while "1"  (timeout="200")
[21:49:28.407]      // while-condition  =>  TRUE
[21:49:28.407]      // while "1"  (timeout="200")
[21:49:28.407]      // while-condition  =>  TRUE
[21:49:28.407]      // while "1"  (timeout="200")
[21:49:28.407]      // while-condition  =>  TRUE
[21:49:28.407]      // while "1"  (timeout="200")
[21:49:28.407]      // while-condition  =>  TRUE
[21:49:28.407]      // while "1"  (timeout="200")
[21:49:28.411]      // while-condition  =>  TRUE
[21:49:28.411]      // while "1"  (timeout="200")
[21:49:28.411]      // while  =>  TIMEOUT
[21:49:28.411]      // end while "1"
[21:49:28.411]    </control>
[21:49:28.411]    <control if="canReadPins" while="" timeout="0" info="">
[21:49:28.411]      // if-block "canReadPins"
[21:49:28.411]        // =>  TRUE
[21:49:28.411]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:49:28.411]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:49:28.411]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:49:28.411]        // while-condition  =>  FALSE
[21:49:28.411]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:49:28.411]      </control>
[21:49:28.411]      // end if-block "canReadPins"
[21:49:28.411]    </control>
[21:49:28.411]    <control if="!canReadPins" while="" timeout="0" info="">
[21:49:28.411]      // if-block "!canReadPins"
[21:49:28.411]        // =>  FALSE
[21:49:28.411]      // skip if-block "!canReadPins"
[21:49:28.411]    </control>
[21:49:28.411]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:49:28.411]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:49:28.411]        // =>  TRUE
[21:49:28.411]      <block atomic="false" info="">
[21:49:28.415]        WriteAP(0x00, 0x190008);
[21:49:28.419]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:49:28.419]        WriteAP(0xF0, 0x01);
[21:49:28.422]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:49:28.422]      </block>
[21:49:28.423]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:49:28.423]    </control>
[21:49:28.423]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:49:28.423]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:49:28.423]        // =>  FALSE
[21:49:28.423]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:49:28.423]    </control>
[21:49:28.423]    <block atomic="false" info="">
[21:49:28.423]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:49:28.423]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:49:28.427]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:49:28.427]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:49:28.427]      __ap = 0; //lets make sure we reset the access point selection
[21:49:28.427]        // -> [__ap <= 0x00000000]
[21:49:28.427]    </block>
[21:49:28.427]  </sequence>
[21:49:28.427]  
[21:49:28.451]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:49:28.451]  
[21:49:28.451]  <debugvars>
[21:49:28.451]    // Pre-defined
[21:49:28.451]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:49:28.451]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:49:28.451]    __dp=0x00000000
[21:49:28.451]    __ap=0x00000000
[21:49:28.451]    __traceout=0x00000000      (Trace Disabled)
[21:49:28.451]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:49:28.451]    __FlashAddr=0x00000000
[21:49:28.451]    __FlashLen=0x00000000
[21:49:28.455]    __FlashArg=0x00000000
[21:49:28.455]    __FlashOp=0x00000000
[21:49:28.455]    __Result=0x00000000
[21:49:28.455]  </debugvars>
[21:49:28.455]  
[21:49:28.455]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:49:28.455]    <block atomic="false" info="">
[21:49:28.455]      __var deviceID = 0;
[21:49:28.455]        // -> [deviceID <= 0x00000000]
[21:49:28.455]      __var version = 0;
[21:49:28.455]        // -> [version <= 0x00000000]
[21:49:28.455]      __var partNum = 0;
[21:49:28.455]        // -> [partNum <= 0x00000000]
[21:49:28.455]      __var manuf = 0;
[21:49:28.455]        // -> [manuf <= 0x00000000]
[21:49:28.455]      __var isMSPM0G1X0X_G3X0X = 0;
[21:49:28.455]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:49:28.455]      __var isProduction = 0;
[21:49:28.455]        // -> [isProduction <= 0x00000000]
[21:49:28.455]      __var continueId = 0;
[21:49:28.455]        // -> [continueId <= 0x00000000]
[21:49:28.455]      deviceID =   Read32(0x41C40004);
[21:49:28.463]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:49:28.463]        // -> [deviceID <= 0x2BB8802F]
[21:49:28.463]      version = deviceID >> 28;
[21:49:28.463]        // -> [version <= 0x00000002]
[21:49:28.463]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:49:28.463]        // -> [partNum <= 0x0000BB88]
[21:49:28.463]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:49:28.463]        // -> [manuf <= 0x00000017]
[21:49:28.463]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:49:28.463]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:49:28.463]      isProduction = (version > 0);
[21:49:28.463]        // -> [isProduction <= 0x00000001]
[21:49:28.463]    </block>
[21:49:28.463]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:49:28.463]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:49:28.463]        // =>  FALSE
[21:49:28.463]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:49:28.463]    </control>
[21:49:28.463]    <control if="continueId == 4" while="" timeout="0" info="">
[21:49:28.463]      // if-block "continueId == 4"
[21:49:28.463]        // =>  FALSE
[21:49:28.463]      // skip if-block "continueId == 4"
[21:49:28.463]    </control>
[21:49:28.463]    <control if="!isProduction" while="" timeout="0" info="">
[21:49:28.463]      // if-block "!isProduction"
[21:49:28.463]        // =>  FALSE
[21:49:28.463]      // skip if-block "!isProduction"
[21:49:28.463]    </control>
[21:49:28.463]  </sequence>
[21:49:28.467]  
[21:50:38.891]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:50:38.891]  
[21:50:38.899]  <debugvars>
[21:50:38.899]    // Pre-defined
[21:50:38.899]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:50:38.899]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:50:38.900]    __dp=0x00000000
[21:50:38.900]    __ap=0x00000000
[21:50:38.900]    __traceout=0x00000000      (Trace Disabled)
[21:50:38.900]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:50:38.900]    __FlashAddr=0x00000000
[21:50:38.900]    __FlashLen=0x00000000
[21:50:38.900]    __FlashArg=0x00000000
[21:50:38.900]    __FlashOp=0x00000000
[21:50:38.900]    __Result=0x00000000
[21:50:38.900]  </debugvars>
[21:50:38.901]  
[21:50:38.901]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:50:38.901]    <block atomic="false" info="">
[21:50:38.901]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:50:38.901]        // -> [isSWJ <= 0x00000001]
[21:50:38.901]      __var hasDormant = __protocol & 0x00020000;
[21:50:38.901]        // -> [hasDormant <= 0x00000000]
[21:50:38.901]      __var protType   = __protocol & 0x0000FFFF;
[21:50:38.901]        // -> [protType <= 0x00000002]
[21:50:38.901]    </block>
[21:50:38.902]    <control if="protType == 1" while="" timeout="0" info="">
[21:50:38.902]      // if-block "protType == 1"
[21:50:38.902]        // =>  FALSE
[21:50:38.902]      // skip if-block "protType == 1"
[21:50:38.902]    </control>
[21:50:38.902]    <control if="protType == 2" while="" timeout="0" info="">
[21:50:38.902]      // if-block "protType == 2"
[21:50:38.902]        // =>  TRUE
[21:50:38.902]      <control if="isSWJ" while="" timeout="0" info="">
[21:50:38.902]        // if-block "isSWJ"
[21:50:38.903]          // =>  TRUE
[21:50:38.903]        <control if="hasDormant" while="" timeout="0" info="">
[21:50:38.903]          // if-block "hasDormant"
[21:50:38.903]            // =>  FALSE
[21:50:38.903]          // skip if-block "hasDormant"
[21:50:38.903]        </control>
[21:50:38.903]        <control if="!hasDormant" while="" timeout="0" info="">
[21:50:38.903]          // if-block "!hasDormant"
[21:50:38.903]            // =>  TRUE
[21:50:38.903]          <block atomic="false" info="">
[21:50:38.903]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:50:38.908]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:50:38.908]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:50:38.911]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:50:38.911]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:50:38.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:50:38.915]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:50:38.917]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:50:38.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:50:38.920]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:50:38.920]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:50:38.922]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:50:38.922]          </block>
[21:50:38.922]          // end if-block "!hasDormant"
[21:50:38.922]        </control>
[21:50:38.922]        // end if-block "isSWJ"
[21:50:38.922]      </control>
[21:50:38.922]      <control if="!isSWJ" while="" timeout="0" info="">
[21:50:38.922]        // if-block "!isSWJ"
[21:50:38.922]          // =>  FALSE
[21:50:38.922]        // skip if-block "!isSWJ"
[21:50:38.922]      </control>
[21:50:38.922]      <block atomic="false" info="">
[21:50:38.922]        ReadDP(0x0);
[21:50:38.924]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:50:38.924]      </block>
[21:50:38.924]      // end if-block "protType == 2"
[21:50:38.924]    </control>
[21:50:38.924]  </sequence>
[21:50:38.924]  
[21:50:38.928]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:50:38.928]  
[21:50:38.928]  <debugvars>
[21:50:38.928]    // Pre-defined
[21:50:38.928]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:50:38.928]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:50:38.928]    __dp=0x00000000
[21:50:38.928]    __ap=0x00000000
[21:50:38.928]    __traceout=0x00000000      (Trace Disabled)
[21:50:38.928]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:50:38.928]    __FlashAddr=0x00000000
[21:50:38.931]    __FlashLen=0x00000000
[21:50:38.931]    __FlashArg=0x00000000
[21:50:38.931]    __FlashOp=0x00000000
[21:50:38.931]    __Result=0x00000000
[21:50:38.931]  </debugvars>
[21:50:38.931]  
[21:50:38.931]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:50:38.931]    <block atomic="false" info="">
[21:50:38.931]      __var SW_DP_ABORT       = 0x0;
[21:50:38.931]        // -> [SW_DP_ABORT <= 0x00000000]
[21:50:38.931]      __var DP_CTRL_STAT      = 0x4;
[21:50:38.932]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:50:38.932]      __var DP_SELECT         = 0x8;
[21:50:38.932]        // -> [DP_SELECT <= 0x00000008]
[21:50:38.932]      __var powered_down      = 0;
[21:50:38.932]        // -> [powered_down <= 0x00000000]
[21:50:38.932]      WriteDP(DP_SELECT, 0x00000000);
[21:50:38.934]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:50:38.934]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:50:38.937]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:50:38.937]        // -> [powered_down <= 0x00000001]
[21:50:38.937]    </block>
[21:50:38.937]    <control if="powered_down" while="" timeout="0" info="">
[21:50:38.937]      // if-block "powered_down"
[21:50:38.940]        // =>  TRUE
[21:50:38.940]      <block atomic="false" info="">
[21:50:38.940]        Message(0, "Debug/System power-up request sent");
[21:50:38.942]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:50:38.942]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:50:38.942]      </block>
[21:50:38.942]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:50:38.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:50:38.945]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:50:38.945]        // while-condition  =>  FALSE
[21:50:38.945]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:50:38.945]      </control>
[21:50:38.945]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:50:38.945]        // if-block "(__protocol & 0xFFFF) == 1"
[21:50:38.945]          // =>  FALSE
[21:50:38.945]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:50:38.945]      </control>
[21:50:38.945]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:50:38.945]        // if-block "(__protocol & 0xFFFF) == 2"
[21:50:38.945]          // =>  TRUE
[21:50:38.945]        <block atomic="false" info="">
[21:50:38.945]          Message(0, "executing SWD power up");
[21:50:38.950]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:50:38.951]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:50:38.951]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:50:38.953]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:50:38.953]        </block>
[21:50:38.953]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:50:38.953]      </control>
[21:50:38.953]      // end if-block "powered_down"
[21:50:38.953]    </control>
[21:50:38.953]    <block atomic="false" info="">
[21:50:38.955]      __var DEBUG_PORT_VAL    = 0;
[21:50:38.955]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:50:38.955]      __var ACCESS_POINT_VAL  = 0;
[21:50:38.955]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:50:38.955]      __ap = 1; 
[21:50:38.955]        // -> [__ap <= 0x00000001]
[21:50:38.955]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:50:38.962]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:50:38.962]      __ap = 4;
[21:50:38.962]        // -> [__ap <= 0x00000004]
[21:50:38.962]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:50:38.968]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:50:38.968]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:50:38.968]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:50:38.970]    </block>
[21:50:38.971]    <block atomic="false" info="">
[21:50:38.971]      __var nReset = 0x80;
[21:50:38.971]        // -> [nReset <= 0x00000080]
[21:50:38.971]      __var canReadPins = 0;
[21:50:38.971]        // -> [canReadPins <= 0x00000000]
[21:50:38.971]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:50:38.972]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:50:38.972]        // -> [canReadPins <= 0x00000001]
[21:50:38.974]    </block>
[21:50:38.974]    <control if="" while="1" timeout="200" info="">
[21:50:38.974]      // while "1"  (timeout="200")
[21:50:38.974]      // while-condition  =>  TRUE
[21:50:38.974]      // while "1"  (timeout="200")
[21:50:38.974]      // while-condition  =>  TRUE
[21:50:38.974]      // while "1"  (timeout="200")
[21:50:38.974]      // while-condition  =>  TRUE
[21:50:38.974]      // while "1"  (timeout="200")
[21:50:38.974]      // while-condition  =>  TRUE
[21:50:38.974]      // while "1"  (timeout="200")
[21:50:38.974]      // while-condition  =>  TRUE
[21:50:38.974]      // while "1"  (timeout="200")
[21:50:38.974]      // while-condition  =>  TRUE
[21:50:38.974]      // while "1"  (timeout="200")
[21:50:38.974]      // while-condition  =>  TRUE
[21:50:38.974]      // while "1"  (timeout="200")
[21:50:38.974]      // while-condition  =>  TRUE
[21:50:38.974]      // while "1"  (timeout="200")
[21:50:38.974]      // while-condition  =>  TRUE
[21:50:38.974]      // while "1"  (timeout="200")
[21:50:38.974]      // while-condition  =>  TRUE
[21:50:38.974]      // while "1"  (timeout="200")
[21:50:38.974]      // while-condition  =>  TRUE
[21:50:38.974]      // while "1"  (timeout="200")
[21:50:38.977]      // while-condition  =>  TRUE
[21:50:38.977]      // while "1"  (timeout="200")
[21:50:38.977]      // while-condition  =>  TRUE
[21:50:38.977]      // while "1"  (timeout="200")
[21:50:38.977]      // while-condition  =>  TRUE
[21:50:38.977]      // while "1"  (timeout="200")
[21:50:38.977]      // while-condition  =>  TRUE
[21:50:38.977]      // while "1"  (timeout="200")
[21:50:38.977]      // while-condition  =>  TRUE
[21:50:38.977]      // while "1"  (timeout="200")
[21:50:38.977]      // while-condition  =>  TRUE
[21:50:38.977]      // while "1"  (timeout="200")
[21:50:38.977]      // while-condition  =>  TRUE
[21:50:38.979]      // while "1"  (timeout="200")
[21:50:38.979]      // while-condition  =>  TRUE
[21:50:38.979]      // while "1"  (timeout="200")
[21:50:38.979]      // while-condition  =>  TRUE
[21:50:38.979]      // while "1"  (timeout="200")
[21:50:38.979]      // while-condition  =>  TRUE
[21:50:38.979]      // while "1"  (timeout="200")
[21:50:38.979]      // while-condition  =>  TRUE
[21:50:38.979]      // while "1"  (timeout="200")
[21:50:38.979]      // while-condition  =>  TRUE
[21:50:38.979]      // while "1"  (timeout="200")
[21:50:38.979]      // while-condition  =>  TRUE
[21:50:38.979]      // while "1"  (timeout="200")
[21:50:38.979]      // while-condition  =>  TRUE
[21:50:38.979]      // while "1"  (timeout="200")
[21:50:38.979]      // while-condition  =>  TRUE
[21:50:38.979]      // while "1"  (timeout="200")
[21:50:38.980]      // while-condition  =>  TRUE
[21:50:38.980]      // while "1"  (timeout="200")
[21:50:38.980]      // while-condition  =>  TRUE
[21:50:38.980]      // while "1"  (timeout="200")
[21:50:38.980]      // while-condition  =>  TRUE
[21:50:38.980]      // while "1"  (timeout="200")
[21:50:38.980]      // while-condition  =>  TRUE
[21:50:38.980]      // while "1"  (timeout="200")
[21:50:38.980]      // while-condition  =>  TRUE
[21:50:38.982]      // while "1"  (timeout="200")
[21:50:38.982]      // while-condition  =>  TRUE
[21:50:38.982]      // while "1"  (timeout="200")
[21:50:38.982]      // while-condition  =>  TRUE
[21:50:38.982]      // while "1"  (timeout="200")
[21:50:38.982]      // while-condition  =>  TRUE
[21:50:38.982]      // while "1"  (timeout="200")
[21:50:38.982]      // while-condition  =>  TRUE
[21:50:38.982]      // while "1"  (timeout="200")
[21:50:38.982]      // while-condition  =>  TRUE
[21:50:38.983]      // while "1"  (timeout="200")
[21:50:38.983]      // while-condition  =>  TRUE
[21:50:38.983]      // while "1"  (timeout="200")
[21:50:38.983]      // while-condition  =>  TRUE
[21:50:38.983]      // while "1"  (timeout="200")
[21:50:38.983]      // while-condition  =>  TRUE
[21:50:38.983]      // while "1"  (timeout="200")
[21:50:38.983]      // while-condition  =>  TRUE
[21:50:38.983]      // while "1"  (timeout="200")
[21:50:38.983]      // while-condition  =>  TRUE
[21:50:38.983]      // while "1"  (timeout="200")
[21:50:38.983]      // while-condition  =>  TRUE
[21:50:38.983]      // while "1"  (timeout="200")
[21:50:38.983]      // while-condition  =>  TRUE
[21:50:38.983]      // while "1"  (timeout="200")
[21:50:38.983]      // while-condition  =>  TRUE
[21:50:38.983]      // while "1"  (timeout="200")
[21:50:38.983]      // while-condition  =>  TRUE
[21:50:38.985]      // while "1"  (timeout="200")
[21:50:38.985]      // while-condition  =>  TRUE
[21:50:38.985]      // while "1"  (timeout="200")
[21:50:38.985]      // while-condition  =>  TRUE
[21:50:38.985]      // while "1"  (timeout="200")
[21:50:38.985]      // while-condition  =>  TRUE
[21:50:38.985]      // while "1"  (timeout="200")
[21:50:38.985]      // while-condition  =>  TRUE
[21:50:38.985]      // while "1"  (timeout="200")
[21:50:38.985]      // while-condition  =>  TRUE
[21:50:38.985]      // while "1"  (timeout="200")
[21:50:38.985]      // while-condition  =>  TRUE
[21:50:38.985]      // while "1"  (timeout="200")
[21:50:38.987]      // while-condition  =>  TRUE
[21:50:38.987]      // while "1"  (timeout="200")
[21:50:38.987]      // while-condition  =>  TRUE
[21:50:38.987]      // while "1"  (timeout="200")
[21:50:38.987]      // while-condition  =>  TRUE
[21:50:38.987]      // while "1"  (timeout="200")
[21:50:38.987]      // while-condition  =>  TRUE
[21:50:38.987]      // while "1"  (timeout="200")
[21:50:38.987]      // while-condition  =>  TRUE
[21:50:38.987]      // while "1"  (timeout="200")
[21:50:38.988]      // while-condition  =>  TRUE
[21:50:38.988]      // while "1"  (timeout="200")
[21:50:38.988]      // while  =>  TIMEOUT
[21:50:38.988]      // end while "1"
[21:50:38.988]    </control>
[21:50:38.988]    <control if="canReadPins" while="" timeout="0" info="">
[21:50:38.988]      // if-block "canReadPins"
[21:50:38.988]        // =>  TRUE
[21:50:38.988]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:50:38.988]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:50:38.989]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:50:38.989]        // while-condition  =>  FALSE
[21:50:38.989]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:50:38.989]      </control>
[21:50:38.989]      // end if-block "canReadPins"
[21:50:38.992]    </control>
[21:50:38.992]    <control if="!canReadPins" while="" timeout="0" info="">
[21:50:38.992]      // if-block "!canReadPins"
[21:50:38.992]        // =>  FALSE
[21:50:38.992]      // skip if-block "!canReadPins"
[21:50:38.992]    </control>
[21:50:38.992]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:50:38.992]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:50:38.992]        // =>  TRUE
[21:50:38.993]      <block atomic="false" info="">
[21:50:38.993]        WriteAP(0x00, 0x190008);
[21:50:38.994]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:50:38.994]        WriteAP(0xF0, 0x01);
[21:50:38.998]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:50:38.998]      </block>
[21:50:39.000]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:50:39.000]    </control>
[21:50:39.000]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:50:39.000]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:50:39.000]        // =>  FALSE
[21:50:39.000]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:50:39.000]    </control>
[21:50:39.000]    <block atomic="false" info="">
[21:50:39.000]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:50:39.010]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:50:39.010]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:50:39.010]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:50:39.011]      __ap = 0; //lets make sure we reset the access point selection
[21:50:39.011]        // -> [__ap <= 0x00000000]
[21:50:39.011]    </block>
[21:50:39.011]  </sequence>
[21:50:39.011]  
[21:50:39.039]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:50:39.039]  
[21:50:39.039]  <debugvars>
[21:50:39.039]    // Pre-defined
[21:50:39.039]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:50:39.039]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:50:39.039]    __dp=0x00000000
[21:50:39.039]    __ap=0x00000000
[21:50:39.039]    __traceout=0x00000000      (Trace Disabled)
[21:50:39.039]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:50:39.039]    __FlashAddr=0x00000000
[21:50:39.039]    __FlashLen=0x00000000
[21:50:39.039]    __FlashArg=0x00000000
[21:50:39.039]    __FlashOp=0x00000000
[21:50:39.041]    __Result=0x00000000
[21:50:39.041]  </debugvars>
[21:50:39.041]  
[21:50:39.041]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:50:39.041]    <block atomic="false" info="">
[21:50:39.041]      __var deviceID = 0;
[21:50:39.041]        // -> [deviceID <= 0x00000000]
[21:50:39.041]      __var version = 0;
[21:50:39.042]        // -> [version <= 0x00000000]
[21:50:39.042]      __var partNum = 0;
[21:50:39.042]        // -> [partNum <= 0x00000000]
[21:50:39.042]      __var manuf = 0;
[21:50:39.042]        // -> [manuf <= 0x00000000]
[21:50:39.042]      __var isMSPM0G1X0X_G3X0X = 0;
[21:50:39.042]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:50:39.042]      __var isProduction = 0;
[21:50:39.042]        // -> [isProduction <= 0x00000000]
[21:50:39.042]      __var continueId = 0;
[21:50:39.043]        // -> [continueId <= 0x00000000]
[21:50:39.043]      deviceID =   Read32(0x41C40004);
[21:50:39.052]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:50:39.052]        // -> [deviceID <= 0x2BB8802F]
[21:50:39.052]      version = deviceID >> 28;
[21:50:39.052]        // -> [version <= 0x00000002]
[21:50:39.052]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:50:39.052]        // -> [partNum <= 0x0000BB88]
[21:50:39.052]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:50:39.052]        // -> [manuf <= 0x00000017]
[21:50:39.052]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:50:39.052]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:50:39.052]      isProduction = (version > 0);
[21:50:39.052]        // -> [isProduction <= 0x00000001]
[21:50:39.052]    </block>
[21:50:39.052]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:50:39.052]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:50:39.052]        // =>  FALSE
[21:50:39.052]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:50:39.052]    </control>
[21:50:39.052]    <control if="continueId == 4" while="" timeout="0" info="">
[21:50:39.052]      // if-block "continueId == 4"
[21:50:39.055]        // =>  FALSE
[21:50:39.055]      // skip if-block "continueId == 4"
[21:50:39.055]    </control>
[21:50:39.055]    <control if="!isProduction" while="" timeout="0" info="">
[21:50:39.055]      // if-block "!isProduction"
[21:50:39.055]        // =>  FALSE
[21:50:39.055]      // skip if-block "!isProduction"
[21:50:39.055]    </control>
[21:50:39.055]  </sequence>
[21:50:39.056]  
[21:53:55.287]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:53:55.287]  
[21:53:55.298]  <debugvars>
[21:53:55.298]    // Pre-defined
[21:53:55.298]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:53:55.298]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:53:55.298]    __dp=0x00000000
[21:53:55.298]    __ap=0x00000000
[21:53:55.298]    __traceout=0x00000000      (Trace Disabled)
[21:53:55.298]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:53:55.298]    __FlashAddr=0x00000000
[21:53:55.298]    __FlashLen=0x00000000
[21:53:55.298]    __FlashArg=0x00000000
[21:53:55.298]    __FlashOp=0x00000000
[21:53:55.299]    __Result=0x00000000
[21:53:55.299]  </debugvars>
[21:53:55.299]  
[21:53:55.299]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:53:55.299]    <block atomic="false" info="">
[21:53:55.299]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:53:55.299]        // -> [isSWJ <= 0x00000001]
[21:53:55.299]      __var hasDormant = __protocol & 0x00020000;
[21:53:55.299]        // -> [hasDormant <= 0x00000000]
[21:53:55.299]      __var protType   = __protocol & 0x0000FFFF;
[21:53:55.299]        // -> [protType <= 0x00000002]
[21:53:55.300]    </block>
[21:53:55.300]    <control if="protType == 1" while="" timeout="0" info="">
[21:53:55.300]      // if-block "protType == 1"
[21:53:55.300]        // =>  FALSE
[21:53:55.300]      // skip if-block "protType == 1"
[21:53:55.300]    </control>
[21:53:55.300]    <control if="protType == 2" while="" timeout="0" info="">
[21:53:55.300]      // if-block "protType == 2"
[21:53:55.300]        // =>  TRUE
[21:53:55.300]      <control if="isSWJ" while="" timeout="0" info="">
[21:53:55.300]        // if-block "isSWJ"
[21:53:55.300]          // =>  TRUE
[21:53:55.300]        <control if="hasDormant" while="" timeout="0" info="">
[21:53:55.301]          // if-block "hasDormant"
[21:53:55.301]            // =>  FALSE
[21:53:55.301]          // skip if-block "hasDormant"
[21:53:55.301]        </control>
[21:53:55.301]        <control if="!hasDormant" while="" timeout="0" info="">
[21:53:55.301]          // if-block "!hasDormant"
[21:53:55.301]            // =>  TRUE
[21:53:55.301]          <block atomic="false" info="">
[21:53:55.301]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:53:55.305]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:53:55.305]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:53:55.306]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:53:55.306]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:53:55.308]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:53:55.308]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:53:55.309]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:53:55.309]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:53:55.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:53:55.311]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:53:55.311]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:53:55.311]          </block>
[21:53:55.311]          // end if-block "!hasDormant"
[21:53:55.311]        </control>
[21:53:55.311]        // end if-block "isSWJ"
[21:53:55.311]      </control>
[21:53:55.313]      <control if="!isSWJ" while="" timeout="0" info="">
[21:53:55.313]        // if-block "!isSWJ"
[21:53:55.313]          // =>  FALSE
[21:53:55.313]        // skip if-block "!isSWJ"
[21:53:55.313]      </control>
[21:53:55.313]      <block atomic="false" info="">
[21:53:55.313]        ReadDP(0x0);
[21:53:55.315]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:53:55.315]      </block>
[21:53:55.315]      // end if-block "protType == 2"
[21:53:55.315]    </control>
[21:53:55.315]  </sequence>
[21:53:55.315]  
[21:53:55.318]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:53:55.318]  
[21:53:55.318]  <debugvars>
[21:53:55.318]    // Pre-defined
[21:53:55.318]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:53:55.319]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:53:55.319]    __dp=0x00000000
[21:53:55.319]    __ap=0x00000000
[21:53:55.319]    __traceout=0x00000000      (Trace Disabled)
[21:53:55.319]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:53:55.319]    __FlashAddr=0x00000000
[21:53:55.319]    __FlashLen=0x00000000
[21:53:55.319]    __FlashArg=0x00000000
[21:53:55.319]    __FlashOp=0x00000000
[21:53:55.319]    __Result=0x00000000
[21:53:55.319]  </debugvars>
[21:53:55.319]  
[21:53:55.319]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:53:55.319]    <block atomic="false" info="">
[21:53:55.319]      __var SW_DP_ABORT       = 0x0;
[21:53:55.319]        // -> [SW_DP_ABORT <= 0x00000000]
[21:53:55.321]      __var DP_CTRL_STAT      = 0x4;
[21:53:55.321]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:53:55.321]      __var DP_SELECT         = 0x8;
[21:53:55.321]        // -> [DP_SELECT <= 0x00000008]
[21:53:55.321]      __var powered_down      = 0;
[21:53:55.321]        // -> [powered_down <= 0x00000000]
[21:53:55.321]      WriteDP(DP_SELECT, 0x00000000);
[21:53:55.323]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:53:55.323]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:53:55.325]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:53:55.325]        // -> [powered_down <= 0x00000001]
[21:53:55.325]    </block>
[21:53:55.325]    <control if="powered_down" while="" timeout="0" info="">
[21:53:55.325]      // if-block "powered_down"
[21:53:55.325]        // =>  TRUE
[21:53:55.325]      <block atomic="false" info="">
[21:53:55.325]        Message(0, "Debug/System power-up request sent");
[21:53:55.328]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:53:55.328]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:53:55.328]      </block>
[21:53:55.328]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:53:55.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:53:55.331]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:53:55.331]        // while-condition  =>  FALSE
[21:53:55.331]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:53:55.331]      </control>
[21:53:55.331]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:53:55.331]        // if-block "(__protocol & 0xFFFF) == 1"
[21:53:55.331]          // =>  FALSE
[21:53:55.331]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:53:55.331]      </control>
[21:53:55.335]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:53:55.335]        // if-block "(__protocol & 0xFFFF) == 2"
[21:53:55.335]          // =>  TRUE
[21:53:55.335]        <block atomic="false" info="">
[21:53:55.335]          Message(0, "executing SWD power up");
[21:53:55.337]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:53:55.339]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:53:55.339]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:53:55.341]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:53:55.341]        </block>
[21:53:55.341]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:53:55.341]      </control>
[21:53:55.341]      // end if-block "powered_down"
[21:53:55.341]    </control>
[21:53:55.341]    <block atomic="false" info="">
[21:53:55.341]      __var DEBUG_PORT_VAL    = 0;
[21:53:55.341]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:53:55.341]      __var ACCESS_POINT_VAL  = 0;
[21:53:55.343]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:53:55.343]      __ap = 1; 
[21:53:55.343]        // -> [__ap <= 0x00000001]
[21:53:55.343]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:53:55.345]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:53:55.345]      __ap = 4;
[21:53:55.345]        // -> [__ap <= 0x00000004]
[21:53:55.345]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:53:55.352]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:53:55.352]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:53:55.352]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:53:55.354]    </block>
[21:53:55.354]    <block atomic="false" info="">
[21:53:55.354]      __var nReset = 0x80;
[21:53:55.354]        // -> [nReset <= 0x00000080]
[21:53:55.354]      __var canReadPins = 0;
[21:53:55.354]        // -> [canReadPins <= 0x00000000]
[21:53:55.354]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:53:55.356]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:53:55.356]        // -> [canReadPins <= 0x00000001]
[21:53:55.358]    </block>
[21:53:55.358]    <control if="" while="1" timeout="200" info="">
[21:53:55.358]      // while "1"  (timeout="200")
[21:53:55.358]      // while-condition  =>  TRUE
[21:53:55.358]      // while "1"  (timeout="200")
[21:53:55.358]      // while-condition  =>  TRUE
[21:53:55.358]      // while "1"  (timeout="200")
[21:53:55.358]      // while-condition  =>  TRUE
[21:53:55.358]      // while "1"  (timeout="200")
[21:53:55.358]      // while-condition  =>  TRUE
[21:53:55.358]      // while "1"  (timeout="200")
[21:53:55.358]      // while-condition  =>  TRUE
[21:53:55.359]      // while "1"  (timeout="200")
[21:53:55.359]      // while-condition  =>  TRUE
[21:53:55.359]      // while "1"  (timeout="200")
[21:53:55.359]      // while-condition  =>  TRUE
[21:53:55.359]      // while "1"  (timeout="200")
[21:53:55.359]      // while-condition  =>  TRUE
[21:53:55.359]      // while "1"  (timeout="200")
[21:53:55.359]      // while-condition  =>  TRUE
[21:53:55.359]      // while "1"  (timeout="200")
[21:53:55.359]      // while-condition  =>  TRUE
[21:53:55.359]      // while "1"  (timeout="200")
[21:53:55.359]      // while-condition  =>  TRUE
[21:53:55.361]      // while "1"  (timeout="200")
[21:53:55.361]      // while-condition  =>  TRUE
[21:53:55.361]      // while "1"  (timeout="200")
[21:53:55.361]      // while-condition  =>  TRUE
[21:53:55.361]      // while "1"  (timeout="200")
[21:53:55.361]      // while-condition  =>  TRUE
[21:53:55.361]      // while "1"  (timeout="200")
[21:53:55.361]      // while-condition  =>  TRUE
[21:53:55.361]      // while "1"  (timeout="200")
[21:53:55.361]      // while-condition  =>  TRUE
[21:53:55.361]      // while "1"  (timeout="200")
[21:53:55.361]      // while-condition  =>  TRUE
[21:53:55.361]      // while "1"  (timeout="200")
[21:53:55.361]      // while-condition  =>  TRUE
[21:53:55.361]      // while "1"  (timeout="200")
[21:53:55.361]      // while-condition  =>  TRUE
[21:53:55.361]      // while "1"  (timeout="200")
[21:53:55.361]      // while-condition  =>  TRUE
[21:53:55.361]      // while "1"  (timeout="200")
[21:53:55.361]      // while-condition  =>  TRUE
[21:53:55.361]      // while "1"  (timeout="200")
[21:53:55.361]      // while-condition  =>  TRUE
[21:53:55.363]      // while "1"  (timeout="200")
[21:53:55.363]      // while  =>  TIMEOUT
[21:53:55.363]      // end while "1"
[21:53:55.363]    </control>
[21:53:55.363]    <control if="canReadPins" while="" timeout="0" info="">
[21:53:55.363]      // if-block "canReadPins"
[21:53:55.363]        // =>  TRUE
[21:53:55.363]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:53:55.363]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:53:55.364]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:53:55.364]        // while-condition  =>  FALSE
[21:53:55.364]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:53:55.364]      </control>
[21:53:55.364]      // end if-block "canReadPins"
[21:53:55.364]    </control>
[21:53:55.364]    <control if="!canReadPins" while="" timeout="0" info="">
[21:53:55.364]      // if-block "!canReadPins"
[21:53:55.364]        // =>  FALSE
[21:53:55.364]      // skip if-block "!canReadPins"
[21:53:55.364]    </control>
[21:53:55.364]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:53:55.364]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:53:55.364]        // =>  TRUE
[21:53:55.364]      <block atomic="false" info="">
[21:53:55.364]        WriteAP(0x00, 0x190008);
[21:53:55.369]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:53:55.369]        WriteAP(0xF0, 0x01);
[21:53:55.372]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:53:55.372]      </block>
[21:53:55.372]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:53:55.372]    </control>
[21:53:55.372]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:53:55.372]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:53:55.372]        // =>  FALSE
[21:53:55.372]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:53:55.372]    </control>
[21:53:55.372]    <block atomic="false" info="">
[21:53:55.372]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:53:55.378]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:53:55.378]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:53:55.378]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:53:55.381]      __ap = 0; //lets make sure we reset the access point selection
[21:53:55.381]        // -> [__ap <= 0x00000000]
[21:53:55.381]    </block>
[21:53:55.381]  </sequence>
[21:53:55.381]  
[21:53:55.402]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:53:55.402]  
[21:53:55.402]  <debugvars>
[21:53:55.402]    // Pre-defined
[21:53:55.402]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:53:55.402]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:53:55.402]    __dp=0x00000000
[21:53:55.402]    __ap=0x00000000
[21:53:55.402]    __traceout=0x00000000      (Trace Disabled)
[21:53:55.402]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:53:55.402]    __FlashAddr=0x00000000
[21:53:55.402]    __FlashLen=0x00000000
[21:53:55.405]    __FlashArg=0x00000000
[21:53:55.405]    __FlashOp=0x00000000
[21:53:55.405]    __Result=0x00000000
[21:53:55.405]  </debugvars>
[21:53:55.405]  
[21:53:55.405]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:53:55.405]    <block atomic="false" info="">
[21:53:55.405]      __var deviceID = 0;
[21:53:55.405]        // -> [deviceID <= 0x00000000]
[21:53:55.405]      __var version = 0;
[21:53:55.405]        // -> [version <= 0x00000000]
[21:53:55.405]      __var partNum = 0;
[21:53:55.405]        // -> [partNum <= 0x00000000]
[21:53:55.405]      __var manuf = 0;
[21:53:55.405]        // -> [manuf <= 0x00000000]
[21:53:55.405]      __var isMSPM0G1X0X_G3X0X = 0;
[21:53:55.405]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:53:55.405]      __var isProduction = 0;
[21:53:55.405]        // -> [isProduction <= 0x00000000]
[21:53:55.405]      __var continueId = 0;
[21:53:55.405]        // -> [continueId <= 0x00000000]
[21:53:55.405]      deviceID =   Read32(0x41C40004);
[21:53:55.414]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:53:55.414]        // -> [deviceID <= 0x2BB8802F]
[21:53:55.414]      version = deviceID >> 28;
[21:53:55.416]        // -> [version <= 0x00000002]
[21:53:55.416]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:53:55.416]        // -> [partNum <= 0x0000BB88]
[21:53:55.416]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:53:55.416]        // -> [manuf <= 0x00000017]
[21:53:55.416]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:53:55.416]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:53:55.416]      isProduction = (version > 0);
[21:53:55.416]        // -> [isProduction <= 0x00000001]
[21:53:55.416]    </block>
[21:53:55.416]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:53:55.416]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:53:55.416]        // =>  FALSE
[21:53:55.416]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:53:55.416]    </control>
[21:53:55.416]    <control if="continueId == 4" while="" timeout="0" info="">
[21:53:55.416]      // if-block "continueId == 4"
[21:53:55.416]        // =>  FALSE
[21:53:55.416]      // skip if-block "continueId == 4"
[21:53:55.416]    </control>
[21:53:55.416]    <control if="!isProduction" while="" timeout="0" info="">
[21:53:55.416]      // if-block "!isProduction"
[21:53:55.416]        // =>  FALSE
[21:53:55.418]      // skip if-block "!isProduction"
[21:53:55.418]    </control>
[21:53:55.418]  </sequence>
[21:53:55.418]  
[21:55:42.379]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:55:42.379]  
[21:55:42.390]  <debugvars>
[21:55:42.390]    // Pre-defined
[21:55:42.390]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:55:42.390]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:55:42.390]    __dp=0x00000000
[21:55:42.390]    __ap=0x00000000
[21:55:42.390]    __traceout=0x00000000      (Trace Disabled)
[21:55:42.390]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:55:42.390]    __FlashAddr=0x00000000
[21:55:42.390]    __FlashLen=0x00000000
[21:55:42.390]    __FlashArg=0x00000000
[21:55:42.390]    __FlashOp=0x00000000
[21:55:42.390]    __Result=0x00000000
[21:55:42.390]  </debugvars>
[21:55:42.390]  
[21:55:42.390]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:55:42.390]    <block atomic="false" info="">
[21:55:42.390]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:55:42.392]        // -> [isSWJ <= 0x00000001]
[21:55:42.392]      __var hasDormant = __protocol & 0x00020000;
[21:55:42.392]        // -> [hasDormant <= 0x00000000]
[21:55:42.392]      __var protType   = __protocol & 0x0000FFFF;
[21:55:42.392]        // -> [protType <= 0x00000002]
[21:55:42.392]    </block>
[21:55:42.392]    <control if="protType == 1" while="" timeout="0" info="">
[21:55:42.392]      // if-block "protType == 1"
[21:55:42.392]        // =>  FALSE
[21:55:42.392]      // skip if-block "protType == 1"
[21:55:42.392]    </control>
[21:55:42.392]    <control if="protType == 2" while="" timeout="0" info="">
[21:55:42.392]      // if-block "protType == 2"
[21:55:42.392]        // =>  TRUE
[21:55:42.392]      <control if="isSWJ" while="" timeout="0" info="">
[21:55:42.392]        // if-block "isSWJ"
[21:55:42.392]          // =>  TRUE
[21:55:42.392]        <control if="hasDormant" while="" timeout="0" info="">
[21:55:42.392]          // if-block "hasDormant"
[21:55:42.392]            // =>  FALSE
[21:55:42.392]          // skip if-block "hasDormant"
[21:55:42.392]        </control>
[21:55:42.392]        <control if="!hasDormant" while="" timeout="0" info="">
[21:55:42.392]          // if-block "!hasDormant"
[21:55:42.392]            // =>  TRUE
[21:55:42.392]          <block atomic="false" info="">
[21:55:42.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:55:42.396]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:55:42.396]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:55:42.397]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:55:42.397]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:55:42.397]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:55:42.400]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:55:42.401]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:55:42.401]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:55:42.409]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:55:42.409]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:55:42.410]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:55:42.410]          </block>
[21:55:42.410]          // end if-block "!hasDormant"
[21:55:42.410]        </control>
[21:55:42.410]        // end if-block "isSWJ"
[21:55:42.410]      </control>
[21:55:42.410]      <control if="!isSWJ" while="" timeout="0" info="">
[21:55:42.410]        // if-block "!isSWJ"
[21:55:42.410]          // =>  FALSE
[21:55:42.410]        // skip if-block "!isSWJ"
[21:55:42.410]      </control>
[21:55:42.410]      <block atomic="false" info="">
[21:55:42.410]        ReadDP(0x0);
[21:55:42.413]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:55:42.413]      </block>
[21:55:42.413]      // end if-block "protType == 2"
[21:55:42.413]    </control>
[21:55:42.413]  </sequence>
[21:55:42.413]  
[21:55:42.417]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:55:42.417]  
[21:55:42.417]  <debugvars>
[21:55:42.417]    // Pre-defined
[21:55:42.417]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:55:42.417]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:55:42.417]    __dp=0x00000000
[21:55:42.417]    __ap=0x00000000
[21:55:42.417]    __traceout=0x00000000      (Trace Disabled)
[21:55:42.417]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:55:42.417]    __FlashAddr=0x00000000
[21:55:42.417]    __FlashLen=0x00000000
[21:55:42.417]    __FlashArg=0x00000000
[21:55:42.417]    __FlashOp=0x00000000
[21:55:42.417]    __Result=0x00000000
[21:55:42.417]  </debugvars>
[21:55:42.417]  
[21:55:42.417]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:55:42.417]    <block atomic="false" info="">
[21:55:42.417]      __var SW_DP_ABORT       = 0x0;
[21:55:42.417]        // -> [SW_DP_ABORT <= 0x00000000]
[21:55:42.417]      __var DP_CTRL_STAT      = 0x4;
[21:55:42.417]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:55:42.417]      __var DP_SELECT         = 0x8;
[21:55:42.417]        // -> [DP_SELECT <= 0x00000008]
[21:55:42.417]      __var powered_down      = 0;
[21:55:42.417]        // -> [powered_down <= 0x00000000]
[21:55:42.417]      WriteDP(DP_SELECT, 0x00000000);
[21:55:42.422]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:55:42.422]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:55:42.425]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:55:42.425]        // -> [powered_down <= 0x00000001]
[21:55:42.425]    </block>
[21:55:42.425]    <control if="powered_down" while="" timeout="0" info="">
[21:55:42.425]      // if-block "powered_down"
[21:55:42.425]        // =>  TRUE
[21:55:42.425]      <block atomic="false" info="">
[21:55:42.425]        Message(0, "Debug/System power-up request sent");
[21:55:42.429]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:55:42.433]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:55:42.433]      </block>
[21:55:42.433]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:55:42.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:55:42.438]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:55:42.438]        // while-condition  =>  FALSE
[21:55:42.438]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:55:42.438]      </control>
[21:55:42.438]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:55:42.438]        // if-block "(__protocol & 0xFFFF) == 1"
[21:55:42.438]          // =>  FALSE
[21:55:42.438]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:55:42.438]      </control>
[21:55:42.438]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:55:42.438]        // if-block "(__protocol & 0xFFFF) == 2"
[21:55:42.438]          // =>  TRUE
[21:55:42.438]        <block atomic="false" info="">
[21:55:42.438]          Message(0, "executing SWD power up");
[21:55:42.441]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:55:42.445]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:55:42.445]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:55:42.453]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:55:42.453]        </block>
[21:55:42.453]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:55:42.453]      </control>
[21:55:42.453]      // end if-block "powered_down"
[21:55:42.453]    </control>
[21:55:42.453]    <block atomic="false" info="">
[21:55:42.453]      __var DEBUG_PORT_VAL    = 0;
[21:55:42.453]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:55:42.453]      __var ACCESS_POINT_VAL  = 0;
[21:55:42.453]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:55:42.453]      __ap = 1; 
[21:55:42.453]        // -> [__ap <= 0x00000001]
[21:55:42.453]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:55:42.458]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:55:42.458]      __ap = 4;
[21:55:42.458]        // -> [__ap <= 0x00000004]
[21:55:42.458]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:55:42.465]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:55:42.465]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:55:42.465]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:55:42.465]    </block>
[21:55:42.465]    <block atomic="false" info="">
[21:55:42.469]      __var nReset = 0x80;
[21:55:42.469]        // -> [nReset <= 0x00000080]
[21:55:42.469]      __var canReadPins = 0;
[21:55:42.469]        // -> [canReadPins <= 0x00000000]
[21:55:42.469]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:55:42.473]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:55:42.473]        // -> [canReadPins <= 0x00000001]
[21:55:42.473]    </block>
[21:55:42.473]    <control if="" while="1" timeout="200" info="">
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.473]      // while "1"  (timeout="200")
[21:55:42.473]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.477]      // while-condition  =>  TRUE
[21:55:42.477]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.481]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.481]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.481]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.481]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.481]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.481]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.481]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.481]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.481]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.481]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.481]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.481]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.481]      // while "1"  (timeout="200")
[21:55:42.481]      // while-condition  =>  TRUE
[21:55:42.484]      // while "1"  (timeout="200")
[21:55:42.484]      // while-condition  =>  TRUE
[21:55:42.484]      // while "1"  (timeout="200")
[21:55:42.484]      // while-condition  =>  TRUE
[21:55:42.484]      // while "1"  (timeout="200")
[21:55:42.484]      // while-condition  =>  TRUE
[21:55:42.484]      // while "1"  (timeout="200")
[21:55:42.484]      // while-condition  =>  TRUE
[21:55:42.484]      // while "1"  (timeout="200")
[21:55:42.484]      // while-condition  =>  TRUE
[21:55:42.484]      // while "1"  (timeout="200")
[21:55:42.484]      // while-condition  =>  TRUE
[21:55:42.484]      // while "1"  (timeout="200")
[21:55:42.484]      // while-condition  =>  TRUE
[21:55:42.484]      // while "1"  (timeout="200")
[21:55:42.486]      // while-condition  =>  TRUE
[21:55:42.486]      // while "1"  (timeout="200")
[21:55:42.486]      // while-condition  =>  TRUE
[21:55:42.486]      // while "1"  (timeout="200")
[21:55:42.486]      // while-condition  =>  TRUE
[21:55:42.486]      // while "1"  (timeout="200")
[21:55:42.486]      // while-condition  =>  TRUE
[21:55:42.486]      // while "1"  (timeout="200")
[21:55:42.486]      // while-condition  =>  TRUE
[21:55:42.486]      // while "1"  (timeout="200")
[21:55:42.486]      // while-condition  =>  TRUE
[21:55:42.486]      // while "1"  (timeout="200")
[21:55:42.486]      // while-condition  =>  TRUE
[21:55:42.486]      // while "1"  (timeout="200")
[21:55:42.486]      // while-condition  =>  TRUE
[21:55:42.486]      // while "1"  (timeout="200")
[21:55:42.486]      // while-condition  =>  TRUE
[21:55:42.486]      // while "1"  (timeout="200")
[21:55:42.486]      // while-condition  =>  TRUE
[21:55:42.486]      // while "1"  (timeout="200")
[21:55:42.488]      // while-condition  =>  TRUE
[21:55:42.488]      // while "1"  (timeout="200")
[21:55:42.488]      // while  =>  TIMEOUT
[21:55:42.488]      // end while "1"
[21:55:42.488]    </control>
[21:55:42.488]    <control if="canReadPins" while="" timeout="0" info="">
[21:55:42.488]      // if-block "canReadPins"
[21:55:42.488]        // =>  TRUE
[21:55:42.488]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:55:42.488]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:55:42.489]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:55:42.493]        // while-condition  =>  FALSE
[21:55:42.493]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:55:42.493]      </control>
[21:55:42.493]      // end if-block "canReadPins"
[21:55:42.493]    </control>
[21:55:42.493]    <control if="!canReadPins" while="" timeout="0" info="">
[21:55:42.493]      // if-block "!canReadPins"
[21:55:42.493]        // =>  FALSE
[21:55:42.493]      // skip if-block "!canReadPins"
[21:55:42.493]    </control>
[21:55:42.493]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:55:42.493]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:55:42.493]        // =>  TRUE
[21:55:42.493]      <block atomic="false" info="">
[21:55:42.493]        WriteAP(0x00, 0x190008);
[21:55:42.515]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:55:42.515]        WriteAP(0xF0, 0x01);
[21:55:42.523]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:55:42.523]      </block>
[21:55:42.523]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:55:42.523]    </control>
[21:55:42.523]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:55:42.523]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:55:42.523]        // =>  FALSE
[21:55:42.523]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:55:42.527]    </control>
[21:55:42.527]    <block atomic="false" info="">
[21:55:42.527]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:55:42.531]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:55:42.531]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:55:42.531]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:55:42.531]      __ap = 0; //lets make sure we reset the access point selection
[21:55:42.531]        // -> [__ap <= 0x00000000]
[21:55:42.531]    </block>
[21:55:42.531]  </sequence>
[21:55:42.531]  
[21:55:42.587]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:55:42.587]  
[21:55:42.589]  <debugvars>
[21:55:42.589]    // Pre-defined
[21:55:42.589]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:55:42.589]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:55:42.589]    __dp=0x00000000
[21:55:42.589]    __ap=0x00000000
[21:55:42.589]    __traceout=0x00000000      (Trace Disabled)
[21:55:42.589]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:55:42.589]    __FlashAddr=0x00000000
[21:55:42.589]    __FlashLen=0x00000000
[21:55:42.589]    __FlashArg=0x00000000
[21:55:42.589]    __FlashOp=0x00000000
[21:55:42.589]    __Result=0x00000000
[21:55:42.589]  </debugvars>
[21:55:42.589]  
[21:55:42.589]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:55:42.589]    <block atomic="false" info="">
[21:55:42.589]      __var deviceID = 0;
[21:55:42.589]        // -> [deviceID <= 0x00000000]
[21:55:42.589]      __var version = 0;
[21:55:42.589]        // -> [version <= 0x00000000]
[21:55:42.589]      __var partNum = 0;
[21:55:42.589]        // -> [partNum <= 0x00000000]
[21:55:42.589]      __var manuf = 0;
[21:55:42.589]        // -> [manuf <= 0x00000000]
[21:55:42.589]      __var isMSPM0G1X0X_G3X0X = 0;
[21:55:42.589]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:55:42.589]      __var isProduction = 0;
[21:55:42.589]        // -> [isProduction <= 0x00000000]
[21:55:42.589]      __var continueId = 0;
[21:55:42.589]        // -> [continueId <= 0x00000000]
[21:55:42.589]      deviceID =   Read32(0x41C40004);
[21:55:42.598]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:55:42.598]        // -> [deviceID <= 0x2BB8802F]
[21:55:42.598]      version = deviceID >> 28;
[21:55:42.598]        // -> [version <= 0x00000002]
[21:55:42.598]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:55:42.598]        // -> [partNum <= 0x0000BB88]
[21:55:42.598]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:55:42.601]        // -> [manuf <= 0x00000017]
[21:55:42.601]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:55:42.601]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:55:42.601]      isProduction = (version > 0);
[21:55:42.601]        // -> [isProduction <= 0x00000001]
[21:55:42.601]    </block>
[21:55:42.601]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:55:42.601]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:55:42.601]        // =>  FALSE
[21:55:42.601]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:55:42.601]    </control>
[21:55:42.601]    <control if="continueId == 4" while="" timeout="0" info="">
[21:55:42.601]      // if-block "continueId == 4"
[21:55:42.602]        // =>  FALSE
[21:55:42.602]      // skip if-block "continueId == 4"
[21:55:42.602]    </control>
[21:55:42.602]    <control if="!isProduction" while="" timeout="0" info="">
[21:55:42.602]      // if-block "!isProduction"
[21:55:42.602]        // =>  FALSE
[21:55:42.603]      // skip if-block "!isProduction"
[21:55:42.603]    </control>
[21:55:42.603]  </sequence>
[21:55:42.603]  
[22:02:06.628]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:02:06.628]  
[22:02:06.628]  <debugvars>
[22:02:06.628]    // Pre-defined
[22:02:06.628]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:02:06.628]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:02:06.628]    __dp=0x00000000
[22:02:06.628]    __ap=0x00000000
[22:02:06.628]    __traceout=0x00000000      (Trace Disabled)
[22:02:06.628]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:02:06.628]    __FlashAddr=0x00000000
[22:02:06.628]    __FlashLen=0x00000000
[22:02:06.628]    __FlashArg=0x00000000
[22:02:06.628]    __FlashOp=0x00000000
[22:02:06.628]    __Result=0x00000000
[22:02:06.628]  </debugvars>
[22:02:06.628]  
[22:02:06.628]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:02:06.628]    <block atomic="false" info="">
[22:02:06.628]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:02:06.628]        // -> [isSWJ <= 0x00000001]
[22:02:06.628]      __var hasDormant = __protocol & 0x00020000;
[22:02:06.628]        // -> [hasDormant <= 0x00000000]
[22:02:06.628]      __var protType   = __protocol & 0x0000FFFF;
[22:02:06.628]        // -> [protType <= 0x00000002]
[22:02:06.628]    </block>
[22:02:06.628]    <control if="protType == 1" while="" timeout="0" info="">
[22:02:06.632]      // if-block "protType == 1"
[22:02:06.632]        // =>  FALSE
[22:02:06.632]      // skip if-block "protType == 1"
[22:02:06.632]    </control>
[22:02:06.632]    <control if="protType == 2" while="" timeout="0" info="">
[22:02:06.632]      // if-block "protType == 2"
[22:02:06.632]        // =>  TRUE
[22:02:06.632]      <control if="isSWJ" while="" timeout="0" info="">
[22:02:06.632]        // if-block "isSWJ"
[22:02:06.632]          // =>  TRUE
[22:02:06.632]        <control if="hasDormant" while="" timeout="0" info="">
[22:02:06.632]          // if-block "hasDormant"
[22:02:06.632]            // =>  FALSE
[22:02:06.632]          // skip if-block "hasDormant"
[22:02:06.632]        </control>
[22:02:06.632]        <control if="!hasDormant" while="" timeout="0" info="">
[22:02:06.632]          // if-block "!hasDormant"
[22:02:06.632]            // =>  TRUE
[22:02:06.632]          <block atomic="false" info="">
[22:02:06.632]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:02:06.632]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:02:06.632]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:02:06.637]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:02:06.638]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:02:06.640]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:02:06.640]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:02:06.640]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:02:06.640]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:02:06.644]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:02:06.644]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:02:06.644]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:02:06.644]          </block>
[22:02:06.644]          // end if-block "!hasDormant"
[22:02:06.644]        </control>
[22:02:06.644]        // end if-block "isSWJ"
[22:02:06.644]      </control>
[22:02:06.644]      <control if="!isSWJ" while="" timeout="0" info="">
[22:02:06.644]        // if-block "!isSWJ"
[22:02:06.644]          // =>  FALSE
[22:02:06.644]        // skip if-block "!isSWJ"
[22:02:06.644]      </control>
[22:02:06.644]      <block atomic="false" info="">
[22:02:06.644]        ReadDP(0x0);
[22:02:06.648]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:02:06.648]      </block>
[22:02:06.648]      // end if-block "protType == 2"
[22:02:06.648]    </control>
[22:02:06.648]  </sequence>
[22:02:06.648]  
[22:02:06.651]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:02:06.651]  
[22:02:06.651]  <debugvars>
[22:02:06.651]    // Pre-defined
[22:02:06.651]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:02:06.651]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:02:06.651]    __dp=0x00000000
[22:02:06.653]    __ap=0x00000000
[22:02:06.653]    __traceout=0x00000000      (Trace Disabled)
[22:02:06.653]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:02:06.653]    __FlashAddr=0x00000000
[22:02:06.653]    __FlashLen=0x00000000
[22:02:06.653]    __FlashArg=0x00000000
[22:02:06.653]    __FlashOp=0x00000000
[22:02:06.653]    __Result=0x00000000
[22:02:06.653]  </debugvars>
[22:02:06.653]  
[22:02:06.653]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:02:06.653]    <block atomic="false" info="">
[22:02:06.653]      __var SW_DP_ABORT       = 0x0;
[22:02:06.653]        // -> [SW_DP_ABORT <= 0x00000000]
[22:02:06.653]      __var DP_CTRL_STAT      = 0x4;
[22:02:06.653]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:02:06.653]      __var DP_SELECT         = 0x8;
[22:02:06.653]        // -> [DP_SELECT <= 0x00000008]
[22:02:06.653]      __var powered_down      = 0;
[22:02:06.653]        // -> [powered_down <= 0x00000000]
[22:02:06.653]      WriteDP(DP_SELECT, 0x00000000);
[22:02:06.653]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:02:06.653]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:02:06.657]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:02:06.657]        // -> [powered_down <= 0x00000001]
[22:02:06.657]    </block>
[22:02:06.657]    <control if="powered_down" while="" timeout="0" info="">
[22:02:06.657]      // if-block "powered_down"
[22:02:06.657]        // =>  TRUE
[22:02:06.657]      <block atomic="false" info="">
[22:02:06.657]        Message(0, "Debug/System power-up request sent");
[22:02:06.661]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:02:06.663]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:02:06.663]      </block>
[22:02:06.663]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:02:06.663]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:02:06.665]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:02:06.665]        // while-condition  =>  FALSE
[22:02:06.665]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:02:06.665]      </control>
[22:02:06.665]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:02:06.665]        // if-block "(__protocol & 0xFFFF) == 1"
[22:02:06.665]          // =>  FALSE
[22:02:06.665]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:02:06.665]      </control>
[22:02:06.665]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:02:06.665]        // if-block "(__protocol & 0xFFFF) == 2"
[22:02:06.665]          // =>  TRUE
[22:02:06.665]        <block atomic="false" info="">
[22:02:06.665]          Message(0, "executing SWD power up");
[22:02:06.669]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:02:06.673]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:02:06.674]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:02:06.675]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:02:06.675]        </block>
[22:02:06.675]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:02:06.675]      </control>
[22:02:06.675]      // end if-block "powered_down"
[22:02:06.675]    </control>
[22:02:06.675]    <block atomic="false" info="">
[22:02:06.675]      __var DEBUG_PORT_VAL    = 0;
[22:02:06.675]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:02:06.675]      __var ACCESS_POINT_VAL  = 0;
[22:02:06.675]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:02:06.675]      __ap = 1; 
[22:02:06.675]        // -> [__ap <= 0x00000001]
[22:02:06.675]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:02:06.677]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:02:06.677]      __ap = 4;
[22:02:06.681]        // -> [__ap <= 0x00000004]
[22:02:06.681]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:02:06.681]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:02:06.681]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:02:06.685]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:02:06.685]    </block>
[22:02:06.685]    <block atomic="false" info="">
[22:02:06.685]      __var nReset = 0x80;
[22:02:06.685]        // -> [nReset <= 0x00000080]
[22:02:06.685]      __var canReadPins = 0;
[22:02:06.685]        // -> [canReadPins <= 0x00000000]
[22:02:06.685]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:02:06.691]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:02:06.691]        // -> [canReadPins <= 0x00000001]
[22:02:06.691]    </block>
[22:02:06.691]    <control if="" while="1" timeout="200" info="">
[22:02:06.691]      // while "1"  (timeout="200")
[22:02:06.691]      // while-condition  =>  TRUE
[22:02:06.691]      // while "1"  (timeout="200")
[22:02:06.691]      // while-condition  =>  TRUE
[22:02:06.691]      // while "1"  (timeout="200")
[22:02:06.691]      // while-condition  =>  TRUE
[22:02:06.691]      // while "1"  (timeout="200")
[22:02:06.691]      // while-condition  =>  TRUE
[22:02:06.691]      // while "1"  (timeout="200")
[22:02:06.691]      // while-condition  =>  TRUE
[22:02:06.691]      // while "1"  (timeout="200")
[22:02:06.691]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.693]      // while "1"  (timeout="200")
[22:02:06.693]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.697]      // while-condition  =>  TRUE
[22:02:06.697]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.701]      // while "1"  (timeout="200")
[22:02:06.701]      // while-condition  =>  TRUE
[22:02:06.705]      // while "1"  (timeout="200")
[22:02:06.705]      // while-condition  =>  TRUE
[22:02:06.705]      // while "1"  (timeout="200")
[22:02:06.705]      // while-condition  =>  TRUE
[22:02:06.705]      // while "1"  (timeout="200")
[22:02:06.706]      // while-condition  =>  TRUE
[22:02:06.706]      // while "1"  (timeout="200")
[22:02:06.706]      // while  =>  TIMEOUT
[22:02:06.706]      // end while "1"
[22:02:06.706]    </control>
[22:02:06.706]    <control if="canReadPins" while="" timeout="0" info="">
[22:02:06.706]      // if-block "canReadPins"
[22:02:06.706]        // =>  TRUE
[22:02:06.706]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:02:06.706]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:02:06.706]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:02:06.706]        // while-condition  =>  FALSE
[22:02:06.706]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:02:06.709]      </control>
[22:02:06.709]      // end if-block "canReadPins"
[22:02:06.709]    </control>
[22:02:06.709]    <control if="!canReadPins" while="" timeout="0" info="">
[22:02:06.709]      // if-block "!canReadPins"
[22:02:06.709]        // =>  FALSE
[22:02:06.709]      // skip if-block "!canReadPins"
[22:02:06.709]    </control>
[22:02:06.709]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:02:06.709]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:02:06.709]        // =>  TRUE
[22:02:06.709]      <block atomic="false" info="">
[22:02:06.709]        WriteAP(0x00, 0x190008);
[22:02:06.713]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:02:06.713]        WriteAP(0xF0, 0x01);
[22:02:06.718]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:02:06.722]      </block>
[22:02:06.722]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:02:06.722]    </control>
[22:02:06.722]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:02:06.722]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:02:06.722]        // =>  FALSE
[22:02:06.722]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:02:06.722]    </control>
[22:02:06.722]    <block atomic="false" info="">
[22:02:06.722]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:02:06.726]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:02:06.726]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:02:06.726]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:02:06.728]      __ap = 0; //lets make sure we reset the access point selection
[22:02:06.728]        // -> [__ap <= 0x00000000]
[22:02:06.728]    </block>
[22:02:06.728]  </sequence>
[22:02:06.728]  
[22:02:06.751]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:02:06.751]  
[22:02:06.751]  <debugvars>
[22:02:06.751]    // Pre-defined
[22:02:06.751]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:02:06.751]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:02:06.751]    __dp=0x00000000
[22:02:06.751]    __ap=0x00000000
[22:02:06.755]    __traceout=0x00000000      (Trace Disabled)
[22:02:06.755]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:02:06.755]    __FlashAddr=0x00000000
[22:02:06.755]    __FlashLen=0x00000000
[22:02:06.755]    __FlashArg=0x00000000
[22:02:06.755]    __FlashOp=0x00000000
[22:02:06.755]    __Result=0x00000000
[22:02:06.755]  </debugvars>
[22:02:06.755]  
[22:02:06.755]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:02:06.755]    <block atomic="false" info="">
[22:02:06.755]      __var deviceID = 0;
[22:02:06.755]        // -> [deviceID <= 0x00000000]
[22:02:06.755]      __var version = 0;
[22:02:06.755]        // -> [version <= 0x00000000]
[22:02:06.755]      __var partNum = 0;
[22:02:06.755]        // -> [partNum <= 0x00000000]
[22:02:06.755]      __var manuf = 0;
[22:02:06.755]        // -> [manuf <= 0x00000000]
[22:02:06.755]      __var isMSPM0G1X0X_G3X0X = 0;
[22:02:06.755]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:02:06.755]      __var isProduction = 0;
[22:02:06.755]        // -> [isProduction <= 0x00000000]
[22:02:06.755]      __var continueId = 0;
[22:02:06.755]        // -> [continueId <= 0x00000000]
[22:02:06.755]      deviceID =   Read32(0x41C40004);
[22:02:06.761]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:02:06.761]        // -> [deviceID <= 0x2BB8802F]
[22:02:06.761]      version = deviceID >> 28;
[22:02:06.761]        // -> [version <= 0x00000002]
[22:02:06.761]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:02:06.763]        // -> [partNum <= 0x0000BB88]
[22:02:06.763]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:02:06.763]        // -> [manuf <= 0x00000017]
[22:02:06.763]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:02:06.763]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:02:06.763]      isProduction = (version > 0);
[22:02:06.763]        // -> [isProduction <= 0x00000001]
[22:02:06.763]    </block>
[22:02:06.763]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:02:06.763]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:02:06.763]        // =>  FALSE
[22:02:06.763]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:02:06.763]    </control>
[22:02:06.763]    <control if="continueId == 4" while="" timeout="0" info="">
[22:02:06.763]      // if-block "continueId == 4"
[22:02:06.763]        // =>  FALSE
[22:02:06.763]      // skip if-block "continueId == 4"
[22:02:06.763]    </control>
[22:02:06.763]    <control if="!isProduction" while="" timeout="0" info="">
[22:02:06.763]      // if-block "!isProduction"
[22:02:06.763]        // =>  FALSE
[22:02:06.763]      // skip if-block "!isProduction"
[22:02:06.763]    </control>
[22:02:06.763]  </sequence>
[22:02:06.763]  
[22:03:48.863]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:03:48.863]  
[22:03:48.873]  <debugvars>
[22:03:48.873]    // Pre-defined
[22:03:48.873]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:03:48.873]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:03:48.873]    __dp=0x00000000
[22:03:48.873]    __ap=0x00000000
[22:03:48.873]    __traceout=0x00000000      (Trace Disabled)
[22:03:48.873]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:03:48.873]    __FlashAddr=0x00000000
[22:03:48.873]    __FlashLen=0x00000000
[22:03:48.873]    __FlashArg=0x00000000
[22:03:48.873]    __FlashOp=0x00000000
[22:03:48.873]    __Result=0x00000000
[22:03:48.873]  </debugvars>
[22:03:48.873]  
[22:03:48.873]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:03:48.875]    <block atomic="false" info="">
[22:03:48.875]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:03:48.875]        // -> [isSWJ <= 0x00000001]
[22:03:48.875]      __var hasDormant = __protocol & 0x00020000;
[22:03:48.875]        // -> [hasDormant <= 0x00000000]
[22:03:48.875]      __var protType   = __protocol & 0x0000FFFF;
[22:03:48.875]        // -> [protType <= 0x00000002]
[22:03:48.875]    </block>
[22:03:48.875]    <control if="protType == 1" while="" timeout="0" info="">
[22:03:48.875]      // if-block "protType == 1"
[22:03:48.875]        // =>  FALSE
[22:03:48.875]      // skip if-block "protType == 1"
[22:03:48.875]    </control>
[22:03:48.875]    <control if="protType == 2" while="" timeout="0" info="">
[22:03:48.875]      // if-block "protType == 2"
[22:03:48.875]        // =>  TRUE
[22:03:48.875]      <control if="isSWJ" while="" timeout="0" info="">
[22:03:48.875]        // if-block "isSWJ"
[22:03:48.875]          // =>  TRUE
[22:03:48.875]        <control if="hasDormant" while="" timeout="0" info="">
[22:03:48.875]          // if-block "hasDormant"
[22:03:48.875]            // =>  FALSE
[22:03:48.875]          // skip if-block "hasDormant"
[22:03:48.875]        </control>
[22:03:48.875]        <control if="!hasDormant" while="" timeout="0" info="">
[22:03:48.875]          // if-block "!hasDormant"
[22:03:48.875]            // =>  TRUE
[22:03:48.875]          <block atomic="false" info="">
[22:03:48.875]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:03:48.879]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:03:48.879]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:03:48.879]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:03:48.879]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:03:48.883]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:03:48.883]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:03:48.883]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:03:48.883]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:03:48.886]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:03:48.886]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:03:48.888]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:03:48.888]          </block>
[22:03:48.888]          // end if-block "!hasDormant"
[22:03:48.888]        </control>
[22:03:48.888]        // end if-block "isSWJ"
[22:03:48.888]      </control>
[22:03:48.888]      <control if="!isSWJ" while="" timeout="0" info="">
[22:03:48.888]        // if-block "!isSWJ"
[22:03:48.888]          // =>  FALSE
[22:03:48.888]        // skip if-block "!isSWJ"
[22:03:48.888]      </control>
[22:03:48.888]      <block atomic="false" info="">
[22:03:48.888]        ReadDP(0x0);
[22:03:48.888]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:03:48.888]      </block>
[22:03:48.888]      // end if-block "protType == 2"
[22:03:48.892]    </control>
[22:03:48.892]  </sequence>
[22:03:48.892]  
[22:03:48.892]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:03:48.892]  
[22:03:48.892]  <debugvars>
[22:03:48.892]    // Pre-defined
[22:03:48.892]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:03:48.892]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:03:48.892]    __dp=0x00000000
[22:03:48.892]    __ap=0x00000000
[22:03:48.892]    __traceout=0x00000000      (Trace Disabled)
[22:03:48.892]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:03:48.892]    __FlashAddr=0x00000000
[22:03:48.892]    __FlashLen=0x00000000
[22:03:48.892]    __FlashArg=0x00000000
[22:03:48.892]    __FlashOp=0x00000000
[22:03:48.892]    __Result=0x00000000
[22:03:48.892]  </debugvars>
[22:03:48.892]  
[22:03:48.896]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:03:48.896]    <block atomic="false" info="">
[22:03:48.896]      __var SW_DP_ABORT       = 0x0;
[22:03:48.896]        // -> [SW_DP_ABORT <= 0x00000000]
[22:03:48.896]      __var DP_CTRL_STAT      = 0x4;
[22:03:48.896]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:03:48.896]      __var DP_SELECT         = 0x8;
[22:03:48.896]        // -> [DP_SELECT <= 0x00000008]
[22:03:48.896]      __var powered_down      = 0;
[22:03:48.896]        // -> [powered_down <= 0x00000000]
[22:03:48.896]      WriteDP(DP_SELECT, 0x00000000);
[22:03:48.900]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:03:48.900]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:03:48.900]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:03:48.900]        // -> [powered_down <= 0x00000001]
[22:03:48.900]    </block>
[22:03:48.900]    <control if="powered_down" while="" timeout="0" info="">
[22:03:48.900]      // if-block "powered_down"
[22:03:48.900]        // =>  TRUE
[22:03:48.900]      <block atomic="false" info="">
[22:03:48.900]        Message(0, "Debug/System power-up request sent");
[22:03:48.904]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:03:48.904]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:03:48.904]      </block>
[22:03:48.904]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:03:48.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:03:48.909]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:03:48.909]        // while-condition  =>  FALSE
[22:03:48.909]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:03:48.909]      </control>
[22:03:48.910]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:03:48.910]        // if-block "(__protocol & 0xFFFF) == 1"
[22:03:48.910]          // =>  FALSE
[22:03:48.910]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:03:48.910]      </control>
[22:03:48.910]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:03:48.910]        // if-block "(__protocol & 0xFFFF) == 2"
[22:03:48.910]          // =>  TRUE
[22:03:48.910]        <block atomic="false" info="">
[22:03:48.910]          Message(0, "executing SWD power up");
[22:03:48.912]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:03:48.916]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:03:48.916]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:03:48.916]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:03:48.916]        </block>
[22:03:48.916]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:03:48.916]      </control>
[22:03:48.920]      // end if-block "powered_down"
[22:03:48.920]    </control>
[22:03:48.920]    <block atomic="false" info="">
[22:03:48.920]      __var DEBUG_PORT_VAL    = 0;
[22:03:48.920]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:03:48.920]      __var ACCESS_POINT_VAL  = 0;
[22:03:48.920]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:03:48.920]      __ap = 1; 
[22:03:48.920]        // -> [__ap <= 0x00000001]
[22:03:48.920]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:03:48.924]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:03:48.924]      __ap = 4;
[22:03:48.924]        // -> [__ap <= 0x00000004]
[22:03:48.924]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:03:48.928]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:03:48.928]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:03:48.928]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:03:48.934]    </block>
[22:03:48.934]    <block atomic="false" info="">
[22:03:48.934]      __var nReset = 0x80;
[22:03:48.934]        // -> [nReset <= 0x00000080]
[22:03:48.934]      __var canReadPins = 0;
[22:03:48.934]        // -> [canReadPins <= 0x00000000]
[22:03:48.934]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:03:48.938]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:03:48.938]        // -> [canReadPins <= 0x00000001]
[22:03:48.938]    </block>
[22:03:48.938]    <control if="" while="1" timeout="200" info="">
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.938]      // while "1"  (timeout="200")
[22:03:48.938]      // while-condition  =>  TRUE
[22:03:48.941]      // while "1"  (timeout="200")
[22:03:48.941]      // while  =>  TIMEOUT
[22:03:48.941]      // end while "1"
[22:03:48.941]    </control>
[22:03:48.941]    <control if="canReadPins" while="" timeout="0" info="">
[22:03:48.941]      // if-block "canReadPins"
[22:03:48.941]        // =>  TRUE
[22:03:48.941]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:03:48.941]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:03:48.943]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:03:48.943]        // while-condition  =>  FALSE
[22:03:48.943]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:03:48.943]      </control>
[22:03:48.943]      // end if-block "canReadPins"
[22:03:48.943]    </control>
[22:03:48.943]    <control if="!canReadPins" while="" timeout="0" info="">
[22:03:48.943]      // if-block "!canReadPins"
[22:03:48.943]        // =>  FALSE
[22:03:48.943]      // skip if-block "!canReadPins"
[22:03:48.943]    </control>
[22:03:48.943]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:03:48.945]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:03:48.945]        // =>  TRUE
[22:03:48.945]      <block atomic="false" info="">
[22:03:48.945]        WriteAP(0x00, 0x190008);
[22:03:48.945]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:03:48.945]        WriteAP(0xF0, 0x01);
[22:03:48.949]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:03:48.949]      </block>
[22:03:48.949]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:03:48.949]    </control>
[22:03:48.949]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:03:48.949]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:03:48.949]        // =>  FALSE
[22:03:48.949]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:03:48.949]    </control>
[22:03:48.949]    <block atomic="false" info="">
[22:03:48.949]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:03:48.953]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:03:48.953]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:03:48.953]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:03:48.958]      __ap = 0; //lets make sure we reset the access point selection
[22:03:48.958]        // -> [__ap <= 0x00000000]
[22:03:48.958]    </block>
[22:03:48.958]  </sequence>
[22:03:48.958]  
[22:03:48.981]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:03:48.981]  
[22:03:48.981]  <debugvars>
[22:03:48.981]    // Pre-defined
[22:03:48.981]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:03:48.981]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:03:48.981]    __dp=0x00000000
[22:03:48.981]    __ap=0x00000000
[22:03:48.981]    __traceout=0x00000000      (Trace Disabled)
[22:03:48.981]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:03:48.981]    __FlashAddr=0x00000000
[22:03:48.981]    __FlashLen=0x00000000
[22:03:48.981]    __FlashArg=0x00000000
[22:03:48.981]    __FlashOp=0x00000000
[22:03:48.981]    __Result=0x00000000
[22:03:48.981]  </debugvars>
[22:03:48.981]  
[22:03:48.981]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:03:48.985]    <block atomic="false" info="">
[22:03:48.985]      __var deviceID = 0;
[22:03:48.985]        // -> [deviceID <= 0x00000000]
[22:03:48.985]      __var version = 0;
[22:03:48.985]        // -> [version <= 0x00000000]
[22:03:48.985]      __var partNum = 0;
[22:03:48.985]        // -> [partNum <= 0x00000000]
[22:03:48.985]      __var manuf = 0;
[22:03:48.985]        // -> [manuf <= 0x00000000]
[22:03:48.985]      __var isMSPM0G1X0X_G3X0X = 0;
[22:03:48.985]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:03:48.985]      __var isProduction = 0;
[22:03:48.985]        // -> [isProduction <= 0x00000000]
[22:03:48.985]      __var continueId = 0;
[22:03:48.985]        // -> [continueId <= 0x00000000]
[22:03:48.985]      deviceID =   Read32(0x41C40004);
[22:03:48.989]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:03:48.989]        // -> [deviceID <= 0x2BB8802F]
[22:03:48.989]      version = deviceID >> 28;
[22:03:48.989]        // -> [version <= 0x00000002]
[22:03:48.989]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:03:48.989]        // -> [partNum <= 0x0000BB88]
[22:03:48.989]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:03:48.989]        // -> [manuf <= 0x00000017]
[22:03:48.989]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:03:48.989]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:03:48.989]      isProduction = (version > 0);
[22:03:48.989]        // -> [isProduction <= 0x00000001]
[22:03:48.989]    </block>
[22:03:48.989]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:03:48.989]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:03:48.989]        // =>  FALSE
[22:03:48.989]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:03:48.989]    </control>
[22:03:48.989]    <control if="continueId == 4" while="" timeout="0" info="">
[22:03:48.993]      // if-block "continueId == 4"
[22:03:48.993]        // =>  FALSE
[22:03:48.993]      // skip if-block "continueId == 4"
[22:03:48.993]    </control>
[22:03:48.993]    <control if="!isProduction" while="" timeout="0" info="">
[22:03:48.993]      // if-block "!isProduction"
[22:03:48.993]        // =>  FALSE
[22:03:48.993]      // skip if-block "!isProduction"
[22:03:48.993]    </control>
[22:03:48.993]  </sequence>
[22:03:48.993]  
[22:12:22.293]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:12:22.293]  
[22:12:22.301]  <debugvars>
[22:12:22.301]    // Pre-defined
[22:12:22.301]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:12:22.301]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:12:22.301]    __dp=0x00000000
[22:12:22.301]    __ap=0x00000000
[22:12:22.301]    __traceout=0x00000000      (Trace Disabled)
[22:12:22.301]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:12:22.301]    __FlashAddr=0x00000000
[22:12:22.301]    __FlashLen=0x00000000
[22:12:22.301]    __FlashArg=0x00000000
[22:12:22.301]    __FlashOp=0x00000000
[22:12:22.302]    __Result=0x00000000
[22:12:22.302]  </debugvars>
[22:12:22.302]  
[22:12:22.302]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:12:22.302]    <block atomic="false" info="">
[22:12:22.302]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:12:22.302]        // -> [isSWJ <= 0x00000001]
[22:12:22.302]      __var hasDormant = __protocol & 0x00020000;
[22:12:22.302]        // -> [hasDormant <= 0x00000000]
[22:12:22.303]      __var protType   = __protocol & 0x0000FFFF;
[22:12:22.303]        // -> [protType <= 0x00000002]
[22:12:22.303]    </block>
[22:12:22.303]    <control if="protType == 1" while="" timeout="0" info="">
[22:12:22.303]      // if-block "protType == 1"
[22:12:22.303]        // =>  FALSE
[22:12:22.304]      // skip if-block "protType == 1"
[22:12:22.304]    </control>
[22:12:22.304]    <control if="protType == 2" while="" timeout="0" info="">
[22:12:22.304]      // if-block "protType == 2"
[22:12:22.304]        // =>  TRUE
[22:12:22.304]      <control if="isSWJ" while="" timeout="0" info="">
[22:12:22.304]        // if-block "isSWJ"
[22:12:22.304]          // =>  TRUE
[22:12:22.304]        <control if="hasDormant" while="" timeout="0" info="">
[22:12:22.304]          // if-block "hasDormant"
[22:12:22.304]            // =>  FALSE
[22:12:22.304]          // skip if-block "hasDormant"
[22:12:22.304]        </control>
[22:12:22.304]        <control if="!hasDormant" while="" timeout="0" info="">
[22:12:22.304]          // if-block "!hasDormant"
[22:12:22.304]            // =>  TRUE
[22:12:22.304]          <block atomic="false" info="">
[22:12:22.306]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:12:22.307]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:12:22.308]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:12:22.309]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:12:22.309]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:12:22.311]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:12:22.311]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:12:22.312]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:12:22.312]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:12:22.314]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:12:22.314]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:12:22.316]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:12:22.316]          </block>
[22:12:22.316]          // end if-block "!hasDormant"
[22:12:22.316]        </control>
[22:12:22.316]        // end if-block "isSWJ"
[22:12:22.316]      </control>
[22:12:22.317]      <control if="!isSWJ" while="" timeout="0" info="">
[22:12:22.317]        // if-block "!isSWJ"
[22:12:22.317]          // =>  FALSE
[22:12:22.317]        // skip if-block "!isSWJ"
[22:12:22.317]      </control>
[22:12:22.317]      <block atomic="false" info="">
[22:12:22.317]        ReadDP(0x0);
[22:12:22.318]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:12:22.318]      </block>
[22:12:22.318]      // end if-block "protType == 2"
[22:12:22.318]    </control>
[22:12:22.318]  </sequence>
[22:12:22.318]  
[22:12:22.321]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:12:22.321]  
[22:12:22.321]  <debugvars>
[22:12:22.321]    // Pre-defined
[22:12:22.321]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:12:22.321]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:12:22.321]    __dp=0x00000000
[22:12:22.321]    __ap=0x00000000
[22:12:22.321]    __traceout=0x00000000      (Trace Disabled)
[22:12:22.321]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:12:22.321]    __FlashAddr=0x00000000
[22:12:22.321]    __FlashLen=0x00000000
[22:12:22.321]    __FlashArg=0x00000000
[22:12:22.321]    __FlashOp=0x00000000
[22:12:22.321]    __Result=0x00000000
[22:12:22.321]  </debugvars>
[22:12:22.321]  
[22:12:22.321]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:12:22.321]    <block atomic="false" info="">
[22:12:22.321]      __var SW_DP_ABORT       = 0x0;
[22:12:22.321]        // -> [SW_DP_ABORT <= 0x00000000]
[22:12:22.321]      __var DP_CTRL_STAT      = 0x4;
[22:12:22.321]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:12:22.321]      __var DP_SELECT         = 0x8;
[22:12:22.321]        // -> [DP_SELECT <= 0x00000008]
[22:12:22.321]      __var powered_down      = 0;
[22:12:22.321]        // -> [powered_down <= 0x00000000]
[22:12:22.325]      WriteDP(DP_SELECT, 0x00000000);
[22:12:22.326]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:12:22.326]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:12:22.327]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:12:22.327]        // -> [powered_down <= 0x00000001]
[22:12:22.327]    </block>
[22:12:22.327]    <control if="powered_down" while="" timeout="0" info="">
[22:12:22.327]      // if-block "powered_down"
[22:12:22.327]        // =>  TRUE
[22:12:22.327]      <block atomic="false" info="">
[22:12:22.327]        Message(0, "Debug/System power-up request sent");
[22:12:22.331]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:12:22.332]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:12:22.332]      </block>
[22:12:22.332]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:12:22.333]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:12:22.334]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:12:22.334]        // while-condition  =>  FALSE
[22:12:22.334]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:12:22.334]      </control>
[22:12:22.334]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:12:22.334]        // if-block "(__protocol & 0xFFFF) == 1"
[22:12:22.334]          // =>  FALSE
[22:12:22.334]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:12:22.334]      </control>
[22:12:22.334]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:12:22.334]        // if-block "(__protocol & 0xFFFF) == 2"
[22:12:22.334]          // =>  TRUE
[22:12:22.334]        <block atomic="false" info="">
[22:12:22.334]          Message(0, "executing SWD power up");
[22:12:22.337]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:12:22.338]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:12:22.338]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:12:22.340]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:12:22.341]        </block>
[22:12:22.341]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:12:22.341]      </control>
[22:12:22.341]      // end if-block "powered_down"
[22:12:22.341]    </control>
[22:12:22.341]    <block atomic="false" info="">
[22:12:22.341]      __var DEBUG_PORT_VAL    = 0;
[22:12:22.341]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:12:22.341]      __var ACCESS_POINT_VAL  = 0;
[22:12:22.341]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:12:22.341]      __ap = 1; 
[22:12:22.341]        // -> [__ap <= 0x00000001]
[22:12:22.341]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:12:22.345]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:12:22.345]      __ap = 4;
[22:12:22.345]        // -> [__ap <= 0x00000004]
[22:12:22.345]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:12:22.350]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:12:22.350]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:12:22.350]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:12:22.352]    </block>
[22:12:22.352]    <block atomic="false" info="">
[22:12:22.352]      __var nReset = 0x80;
[22:12:22.352]        // -> [nReset <= 0x00000080]
[22:12:22.352]      __var canReadPins = 0;
[22:12:22.352]        // -> [canReadPins <= 0x00000000]
[22:12:22.352]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:12:22.354]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:12:22.354]        // -> [canReadPins <= 0x00000001]
[22:12:22.354]    </block>
[22:12:22.354]    <control if="" while="1" timeout="200" info="">
[22:12:22.354]      // while "1"  (timeout="200")
[22:12:22.354]      // while-condition  =>  TRUE
[22:12:22.354]      // while "1"  (timeout="200")
[22:12:22.354]      // while-condition  =>  TRUE
[22:12:22.354]      // while "1"  (timeout="200")
[22:12:22.354]      // while-condition  =>  TRUE
[22:12:22.354]      // while "1"  (timeout="200")
[22:12:22.354]      // while-condition  =>  TRUE
[22:12:22.356]      // while "1"  (timeout="200")
[22:12:22.356]      // while-condition  =>  TRUE
[22:12:22.356]      // while "1"  (timeout="200")
[22:12:22.356]      // while-condition  =>  TRUE
[22:12:22.356]      // while "1"  (timeout="200")
[22:12:22.356]      // while-condition  =>  TRUE
[22:12:22.356]      // while "1"  (timeout="200")
[22:12:22.356]      // while-condition  =>  TRUE
[22:12:22.356]      // while "1"  (timeout="200")
[22:12:22.356]      // while-condition  =>  TRUE
[22:12:22.356]      // while "1"  (timeout="200")
[22:12:22.356]      // while-condition  =>  TRUE
[22:12:22.356]      // while "1"  (timeout="200")
[22:12:22.356]      // while-condition  =>  TRUE
[22:12:22.356]      // while "1"  (timeout="200")
[22:12:22.356]      // while-condition  =>  TRUE
[22:12:22.358]      // while "1"  (timeout="200")
[22:12:22.358]      // while-condition  =>  TRUE
[22:12:22.358]      // while "1"  (timeout="200")
[22:12:22.358]      // while-condition  =>  TRUE
[22:12:22.358]      // while "1"  (timeout="200")
[22:12:22.358]      // while-condition  =>  TRUE
[22:12:22.358]      // while "1"  (timeout="200")
[22:12:22.358]      // while-condition  =>  TRUE
[22:12:22.358]      // while "1"  (timeout="200")
[22:12:22.358]      // while-condition  =>  TRUE
[22:12:22.358]      // while "1"  (timeout="200")
[22:12:22.358]      // while-condition  =>  TRUE
[22:12:22.358]      // while "1"  (timeout="200")
[22:12:22.358]      // while-condition  =>  TRUE
[22:12:22.358]      // while "1"  (timeout="200")
[22:12:22.360]      // while-condition  =>  TRUE
[22:12:22.360]      // while "1"  (timeout="200")
[22:12:22.360]      // while-condition  =>  TRUE
[22:12:22.360]      // while "1"  (timeout="200")
[22:12:22.360]      // while-condition  =>  TRUE
[22:12:22.360]      // while "1"  (timeout="200")
[22:12:22.360]      // while-condition  =>  TRUE
[22:12:22.360]      // while "1"  (timeout="200")
[22:12:22.360]      // while-condition  =>  TRUE
[22:12:22.360]      // while "1"  (timeout="200")
[22:12:22.360]      // while-condition  =>  TRUE
[22:12:22.360]      // while "1"  (timeout="200")
[22:12:22.360]      // while-condition  =>  TRUE
[22:12:22.360]      // while "1"  (timeout="200")
[22:12:22.360]      // while-condition  =>  TRUE
[22:12:22.360]      // while "1"  (timeout="200")
[22:12:22.360]      // while-condition  =>  TRUE
[22:12:22.360]      // while "1"  (timeout="200")
[22:12:22.362]      // while-condition  =>  TRUE
[22:12:22.362]      // while "1"  (timeout="200")
[22:12:22.362]      // while  =>  TIMEOUT
[22:12:22.362]      // end while "1"
[22:12:22.362]    </control>
[22:12:22.362]    <control if="canReadPins" while="" timeout="0" info="">
[22:12:22.362]      // if-block "canReadPins"
[22:12:22.362]        // =>  TRUE
[22:12:22.362]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:12:22.362]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:12:22.365]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:12:22.366]        // while-condition  =>  FALSE
[22:12:22.366]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:12:22.366]      </control>
[22:12:22.366]      // end if-block "canReadPins"
[22:12:22.366]    </control>
[22:12:22.366]    <control if="!canReadPins" while="" timeout="0" info="">
[22:12:22.366]      // if-block "!canReadPins"
[22:12:22.367]        // =>  FALSE
[22:12:22.367]      // skip if-block "!canReadPins"
[22:12:22.367]    </control>
[22:12:22.367]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:12:22.367]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:12:22.367]        // =>  TRUE
[22:12:22.367]      <block atomic="false" info="">
[22:12:22.367]        WriteAP(0x00, 0x190008);
[22:12:22.370]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:12:22.370]        WriteAP(0xF0, 0x01);
[22:12:22.373]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:12:22.373]      </block>
[22:12:22.373]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:12:22.373]    </control>
[22:12:22.373]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:12:22.374]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:12:22.374]        // =>  FALSE
[22:12:22.374]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:12:22.374]    </control>
[22:12:22.374]    <block atomic="false" info="">
[22:12:22.374]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:12:22.381]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:12:22.381]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:12:22.381]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:12:22.383]      __ap = 0; //lets make sure we reset the access point selection
[22:12:22.383]        // -> [__ap <= 0x00000000]
[22:12:22.383]    </block>
[22:12:22.383]  </sequence>
[22:12:22.383]  
[22:12:22.403]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:12:22.403]  
[22:12:22.403]  <debugvars>
[22:12:22.403]    // Pre-defined
[22:12:22.403]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:12:22.403]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:12:22.403]    __dp=0x00000000
[22:12:22.403]    __ap=0x00000000
[22:12:22.403]    __traceout=0x00000000      (Trace Disabled)
[22:12:22.403]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:12:22.403]    __FlashAddr=0x00000000
[22:12:22.403]    __FlashLen=0x00000000
[22:12:22.405]    __FlashArg=0x00000000
[22:12:22.405]    __FlashOp=0x00000000
[22:12:22.405]    __Result=0x00000000
[22:12:22.405]  </debugvars>
[22:12:22.405]  
[22:12:22.405]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:12:22.405]    <block atomic="false" info="">
[22:12:22.405]      __var deviceID = 0;
[22:12:22.405]        // -> [deviceID <= 0x00000000]
[22:12:22.405]      __var version = 0;
[22:12:22.405]        // -> [version <= 0x00000000]
[22:12:22.405]      __var partNum = 0;
[22:12:22.405]        // -> [partNum <= 0x00000000]
[22:12:22.405]      __var manuf = 0;
[22:12:22.405]        // -> [manuf <= 0x00000000]
[22:12:22.405]      __var isMSPM0G1X0X_G3X0X = 0;
[22:12:22.405]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:12:22.405]      __var isProduction = 0;
[22:12:22.405]        // -> [isProduction <= 0x00000000]
[22:12:22.405]      __var continueId = 0;
[22:12:22.407]        // -> [continueId <= 0x00000000]
[22:12:22.407]      deviceID =   Read32(0x41C40004);
[22:12:22.411]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:12:22.411]        // -> [deviceID <= 0x2BB8802F]
[22:12:22.411]      version = deviceID >> 28;
[22:12:22.411]        // -> [version <= 0x00000002]
[22:12:22.411]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:12:22.411]        // -> [partNum <= 0x0000BB88]
[22:12:22.411]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:12:22.411]        // -> [manuf <= 0x00000017]
[22:12:22.411]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:12:22.411]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:12:22.411]      isProduction = (version > 0);
[22:12:22.411]        // -> [isProduction <= 0x00000001]
[22:12:22.411]    </block>
[22:12:22.411]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:12:22.411]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:12:22.411]        // =>  FALSE
[22:12:22.411]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:12:22.411]    </control>
[22:12:22.414]    <control if="continueId == 4" while="" timeout="0" info="">
[22:12:22.414]      // if-block "continueId == 4"
[22:12:22.414]        // =>  FALSE
[22:12:22.414]      // skip if-block "continueId == 4"
[22:12:22.414]    </control>
[22:12:22.414]    <control if="!isProduction" while="" timeout="0" info="">
[22:12:22.414]      // if-block "!isProduction"
[22:12:22.414]        // =>  FALSE
[22:12:22.414]      // skip if-block "!isProduction"
[22:12:22.414]    </control>
[22:12:22.414]  </sequence>
[22:12:22.414]  
[22:35:24.511]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:35:24.511]  
[22:35:24.521]  <debugvars>
[22:35:24.521]    // Pre-defined
[22:35:24.521]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:35:24.521]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:35:24.521]    __dp=0x00000000
[22:35:24.521]    __ap=0x00000000
[22:35:24.521]    __traceout=0x00000000      (Trace Disabled)
[22:35:24.521]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:35:24.521]    __FlashAddr=0x00000000
[22:35:24.521]    __FlashLen=0x00000000
[22:35:24.521]    __FlashArg=0x00000000
[22:35:24.523]    __FlashOp=0x00000000
[22:35:24.523]    __Result=0x00000000
[22:35:24.523]  </debugvars>
[22:35:24.523]  
[22:35:24.523]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:35:24.523]    <block atomic="false" info="">
[22:35:24.523]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:35:24.523]        // -> [isSWJ <= 0x00000001]
[22:35:24.523]      __var hasDormant = __protocol & 0x00020000;
[22:35:24.523]        // -> [hasDormant <= 0x00000000]
[22:35:24.523]      __var protType   = __protocol & 0x0000FFFF;
[22:35:24.523]        // -> [protType <= 0x00000002]
[22:35:24.523]    </block>
[22:35:24.523]    <control if="protType == 1" while="" timeout="0" info="">
[22:35:24.523]      // if-block "protType == 1"
[22:35:24.523]        // =>  FALSE
[22:35:24.523]      // skip if-block "protType == 1"
[22:35:24.523]    </control>
[22:35:24.523]    <control if="protType == 2" while="" timeout="0" info="">
[22:35:24.523]      // if-block "protType == 2"
[22:35:24.523]        // =>  TRUE
[22:35:24.523]      <control if="isSWJ" while="" timeout="0" info="">
[22:35:24.523]        // if-block "isSWJ"
[22:35:24.523]          // =>  TRUE
[22:35:24.523]        <control if="hasDormant" while="" timeout="0" info="">
[22:35:24.523]          // if-block "hasDormant"
[22:35:24.523]            // =>  FALSE
[22:35:24.523]          // skip if-block "hasDormant"
[22:35:24.523]        </control>
[22:35:24.523]        <control if="!hasDormant" while="" timeout="0" info="">
[22:35:24.523]          // if-block "!hasDormant"
[22:35:24.523]            // =>  TRUE
[22:35:24.523]          <block atomic="false" info="">
[22:35:24.523]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:35:24.527]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:35:24.527]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:35:24.527]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:35:24.527]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:35:24.531]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:35:24.531]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:35:24.531]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:35:24.531]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:35:24.531]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:35:24.531]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:35:24.535]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:35:24.535]          </block>
[22:35:24.535]          // end if-block "!hasDormant"
[22:35:24.535]        </control>
[22:35:24.535]        // end if-block "isSWJ"
[22:35:24.535]      </control>
[22:35:24.537]      <control if="!isSWJ" while="" timeout="0" info="">
[22:35:24.537]        // if-block "!isSWJ"
[22:35:24.537]          // =>  FALSE
[22:35:24.537]        // skip if-block "!isSWJ"
[22:35:24.537]      </control>
[22:35:24.537]      <block atomic="false" info="">
[22:35:24.537]        ReadDP(0x0);
[22:35:24.539]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:35:24.539]      </block>
[22:35:24.539]      // end if-block "protType == 2"
[22:35:24.539]    </control>
[22:35:24.539]  </sequence>
[22:35:24.539]  
[22:35:24.539]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:35:24.539]  
[22:35:24.539]  <debugvars>
[22:35:24.539]    // Pre-defined
[22:35:24.539]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:35:24.543]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:35:24.543]    __dp=0x00000000
[22:35:24.543]    __ap=0x00000000
[22:35:24.543]    __traceout=0x00000000      (Trace Disabled)
[22:35:24.543]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:35:24.543]    __FlashAddr=0x00000000
[22:35:24.543]    __FlashLen=0x00000000
[22:35:24.543]    __FlashArg=0x00000000
[22:35:24.543]    __FlashOp=0x00000000
[22:35:24.543]    __Result=0x00000000
[22:35:24.543]  </debugvars>
[22:35:24.543]  
[22:35:24.543]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:35:24.543]    <block atomic="false" info="">
[22:35:24.543]      __var SW_DP_ABORT       = 0x0;
[22:35:24.543]        // -> [SW_DP_ABORT <= 0x00000000]
[22:35:24.543]      __var DP_CTRL_STAT      = 0x4;
[22:35:24.543]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:35:24.543]      __var DP_SELECT         = 0x8;
[22:35:24.543]        // -> [DP_SELECT <= 0x00000008]
[22:35:24.543]      __var powered_down      = 0;
[22:35:24.543]        // -> [powered_down <= 0x00000000]
[22:35:24.543]      WriteDP(DP_SELECT, 0x00000000);
[22:35:24.546]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:35:24.546]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:35:24.548]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:35:24.548]        // -> [powered_down <= 0x00000001]
[22:35:24.548]    </block>
[22:35:24.548]    <control if="powered_down" while="" timeout="0" info="">
[22:35:24.548]      // if-block "powered_down"
[22:35:24.548]        // =>  TRUE
[22:35:24.548]      <block atomic="false" info="">
[22:35:24.548]        Message(0, "Debug/System power-up request sent");
[22:35:24.548]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:35:24.552]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:35:24.553]      </block>
[22:35:24.553]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:35:24.553]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:35:24.555]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:35:24.555]        // while-condition  =>  FALSE
[22:35:24.555]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:35:24.555]      </control>
[22:35:24.556]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:35:24.556]        // if-block "(__protocol & 0xFFFF) == 1"
[22:35:24.556]          // =>  FALSE
[22:35:24.556]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:35:24.556]      </control>
[22:35:24.556]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:35:24.556]        // if-block "(__protocol & 0xFFFF) == 2"
[22:35:24.556]          // =>  TRUE
[22:35:24.556]        <block atomic="false" info="">
[22:35:24.557]          Message(0, "executing SWD power up");
[22:35:24.558]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:35:24.560]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:35:24.560]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:35:24.562]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:35:24.562]        </block>
[22:35:24.562]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:35:24.562]      </control>
[22:35:24.562]      // end if-block "powered_down"
[22:35:24.563]    </control>
[22:35:24.563]    <block atomic="false" info="">
[22:35:24.563]      __var DEBUG_PORT_VAL    = 0;
[22:35:24.563]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:35:24.563]      __var ACCESS_POINT_VAL  = 0;
[22:35:24.563]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:35:24.563]      __ap = 1; 
[22:35:24.563]        // -> [__ap <= 0x00000001]
[22:35:24.563]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:35:24.567]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:35:24.567]      __ap = 4;
[22:35:24.567]        // -> [__ap <= 0x00000004]
[22:35:24.567]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:35:24.570]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:35:24.570]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:35:24.570]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:35:24.572]    </block>
[22:35:24.572]    <block atomic="false" info="">
[22:35:24.572]      __var nReset = 0x80;
[22:35:24.573]        // -> [nReset <= 0x00000080]
[22:35:24.573]      __var canReadPins = 0;
[22:35:24.573]        // -> [canReadPins <= 0x00000000]
[22:35:24.573]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:35:24.574]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:35:24.574]        // -> [canReadPins <= 0x00000001]
[22:35:24.574]    </block>
[22:35:24.575]    <control if="" while="1" timeout="200" info="">
[22:35:24.575]      // while "1"  (timeout="200")
[22:35:24.575]      // while-condition  =>  TRUE
[22:35:24.576]      // while "1"  (timeout="200")
[22:35:24.576]      // while-condition  =>  TRUE
[22:35:24.576]      // while "1"  (timeout="200")
[22:35:24.576]      // while-condition  =>  TRUE
[22:35:24.576]      // while "1"  (timeout="200")
[22:35:24.576]      // while-condition  =>  TRUE
[22:35:24.577]      // while "1"  (timeout="200")
[22:35:24.577]      // while-condition  =>  TRUE
[22:35:24.577]      // while "1"  (timeout="200")
[22:35:24.577]      // while-condition  =>  TRUE
[22:35:24.577]      // while "1"  (timeout="200")
[22:35:24.577]      // while-condition  =>  TRUE
[22:35:24.577]      // while "1"  (timeout="200")
[22:35:24.577]      // while-condition  =>  TRUE
[22:35:24.577]      // while "1"  (timeout="200")
[22:35:24.577]      // while-condition  =>  TRUE
[22:35:24.577]      // while "1"  (timeout="200")
[22:35:24.578]      // while-condition  =>  TRUE
[22:35:24.578]      // while "1"  (timeout="200")
[22:35:24.578]      // while-condition  =>  TRUE
[22:35:24.578]      // while "1"  (timeout="200")
[22:35:24.578]      // while-condition  =>  TRUE
[22:35:24.578]      // while "1"  (timeout="200")
[22:35:24.578]      // while-condition  =>  TRUE
[22:35:24.578]      // while "1"  (timeout="200")
[22:35:24.578]      // while-condition  =>  TRUE
[22:35:24.578]      // while "1"  (timeout="200")
[22:35:24.578]      // while-condition  =>  TRUE
[22:35:24.578]      // while "1"  (timeout="200")
[22:35:24.579]      // while-condition  =>  TRUE
[22:35:24.579]      // while "1"  (timeout="200")
[22:35:24.579]      // while-condition  =>  TRUE
[22:35:24.579]      // while "1"  (timeout="200")
[22:35:24.579]      // while-condition  =>  TRUE
[22:35:24.579]      // while "1"  (timeout="200")
[22:35:24.579]      // while-condition  =>  TRUE
[22:35:24.579]      // while "1"  (timeout="200")
[22:35:24.579]      // while-condition  =>  TRUE
[22:35:24.579]      // while "1"  (timeout="200")
[22:35:24.580]      // while-condition  =>  TRUE
[22:35:24.580]      // while "1"  (timeout="200")
[22:35:24.580]      // while-condition  =>  TRUE
[22:35:24.580]      // while "1"  (timeout="200")
[22:35:24.580]      // while-condition  =>  TRUE
[22:35:24.580]      // while "1"  (timeout="200")
[22:35:24.580]      // while-condition  =>  TRUE
[22:35:24.580]      // while "1"  (timeout="200")
[22:35:24.580]      // while-condition  =>  TRUE
[22:35:24.580]      // while "1"  (timeout="200")
[22:35:24.580]      // while-condition  =>  TRUE
[22:35:24.580]      // while "1"  (timeout="200")
[22:35:24.580]      // while-condition  =>  TRUE
[22:35:24.581]      // while "1"  (timeout="200")
[22:35:24.581]      // while  =>  TIMEOUT
[22:35:24.581]      // end while "1"
[22:35:24.581]    </control>
[22:35:24.581]    <control if="canReadPins" while="" timeout="0" info="">
[22:35:24.581]      // if-block "canReadPins"
[22:35:24.581]        // =>  TRUE
[22:35:24.581]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:35:24.581]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:35:24.583]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:35:24.584]        // while-condition  =>  FALSE
[22:35:24.584]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:35:24.584]      </control>
[22:35:24.584]      // end if-block "canReadPins"
[22:35:24.584]    </control>
[22:35:24.584]    <control if="!canReadPins" while="" timeout="0" info="">
[22:35:24.584]      // if-block "!canReadPins"
[22:35:24.584]        // =>  FALSE
[22:35:24.584]      // skip if-block "!canReadPins"
[22:35:24.584]    </control>
[22:35:24.585]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:35:24.585]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:35:24.585]        // =>  TRUE
[22:35:24.585]      <block atomic="false" info="">
[22:35:24.585]        WriteAP(0x00, 0x190008);
[22:35:24.585]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:35:24.585]        WriteAP(0xF0, 0x01);
[22:35:24.590]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:35:24.591]      </block>
[22:35:24.591]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:35:24.591]    </control>
[22:35:24.591]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:35:24.591]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:35:24.591]        // =>  FALSE
[22:35:24.591]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:35:24.591]    </control>
[22:35:24.591]    <block atomic="false" info="">
[22:35:24.591]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:35:24.595]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:35:24.595]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:35:24.595]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:35:24.597]      __ap = 0; //lets make sure we reset the access point selection
[22:35:24.597]        // -> [__ap <= 0x00000000]
[22:35:24.597]    </block>
[22:35:24.597]  </sequence>
[22:35:24.597]  
[22:35:24.617]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:35:24.617]  
[22:35:24.617]  <debugvars>
[22:35:24.617]    // Pre-defined
[22:35:24.617]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:35:24.617]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:35:24.617]    __dp=0x00000000
[22:35:24.617]    __ap=0x00000000
[22:35:24.617]    __traceout=0x00000000      (Trace Disabled)
[22:35:24.617]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:35:24.617]    __FlashAddr=0x00000000
[22:35:24.617]    __FlashLen=0x00000000
[22:35:24.617]    __FlashArg=0x00000000
[22:35:24.617]    __FlashOp=0x00000000
[22:35:24.617]    __Result=0x00000000
[22:35:24.617]  </debugvars>
[22:35:24.617]  
[22:35:24.617]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:35:24.617]    <block atomic="false" info="">
[22:35:24.620]      __var deviceID = 0;
[22:35:24.620]        // -> [deviceID <= 0x00000000]
[22:35:24.620]      __var version = 0;
[22:35:24.620]        // -> [version <= 0x00000000]
[22:35:24.620]      __var partNum = 0;
[22:35:24.620]        // -> [partNum <= 0x00000000]
[22:35:24.620]      __var manuf = 0;
[22:35:24.620]        // -> [manuf <= 0x00000000]
[22:35:24.620]      __var isMSPM0G1X0X_G3X0X = 0;
[22:35:24.620]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:35:24.620]      __var isProduction = 0;
[22:35:24.620]        // -> [isProduction <= 0x00000000]
[22:35:24.621]      __var continueId = 0;
[22:35:24.621]        // -> [continueId <= 0x00000000]
[22:35:24.621]      deviceID =   Read32(0x41C40004);
[22:35:24.629]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:35:24.629]        // -> [deviceID <= 0x2BB8802F]
[22:35:24.629]      version = deviceID >> 28;
[22:35:24.629]        // -> [version <= 0x00000002]
[22:35:24.632]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:35:24.632]        // -> [partNum <= 0x0000BB88]
[22:35:24.632]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:35:24.632]        // -> [manuf <= 0x00000017]
[22:35:24.632]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:35:24.632]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:35:24.632]      isProduction = (version > 0);
[22:35:24.632]        // -> [isProduction <= 0x00000001]
[22:35:24.632]    </block>
[22:35:24.632]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:35:24.632]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:35:24.632]        // =>  FALSE
[22:35:24.632]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:35:24.632]    </control>
[22:35:24.632]    <control if="continueId == 4" while="" timeout="0" info="">
[22:35:24.632]      // if-block "continueId == 4"
[22:35:24.632]        // =>  FALSE
[22:35:24.632]      // skip if-block "continueId == 4"
[22:35:24.632]    </control>
[22:35:24.632]    <control if="!isProduction" while="" timeout="0" info="">
[22:35:24.632]      // if-block "!isProduction"
[22:35:24.632]        // =>  FALSE
[22:35:24.634]      // skip if-block "!isProduction"
[22:35:24.634]    </control>
[22:35:24.634]  </sequence>
[22:35:24.634]  
[22:36:34.647]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:36:34.647]  
[22:36:34.656]  <debugvars>
[22:36:34.656]    // Pre-defined
[22:36:34.656]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:36:34.656]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:36:34.656]    __dp=0x00000000
[22:36:34.656]    __ap=0x00000000
[22:36:34.656]    __traceout=0x00000000      (Trace Disabled)
[22:36:34.656]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:36:34.656]    __FlashAddr=0x00000000
[22:36:34.656]    __FlashLen=0x00000000
[22:36:34.656]    __FlashArg=0x00000000
[22:36:34.656]    __FlashOp=0x00000000
[22:36:34.656]    __Result=0x00000000
[22:36:34.656]  </debugvars>
[22:36:34.656]  
[22:36:34.656]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:36:34.656]    <block atomic="false" info="">
[22:36:34.656]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:36:34.656]        // -> [isSWJ <= 0x00000001]
[22:36:34.656]      __var hasDormant = __protocol & 0x00020000;
[22:36:34.656]        // -> [hasDormant <= 0x00000000]
[22:36:34.656]      __var protType   = __protocol & 0x0000FFFF;
[22:36:34.656]        // -> [protType <= 0x00000002]
[22:36:34.656]    </block>
[22:36:34.656]    <control if="protType == 1" while="" timeout="0" info="">
[22:36:34.659]      // if-block "protType == 1"
[22:36:34.659]        // =>  FALSE
[22:36:34.659]      // skip if-block "protType == 1"
[22:36:34.659]    </control>
[22:36:34.659]    <control if="protType == 2" while="" timeout="0" info="">
[22:36:34.659]      // if-block "protType == 2"
[22:36:34.659]        // =>  TRUE
[22:36:34.659]      <control if="isSWJ" while="" timeout="0" info="">
[22:36:34.659]        // if-block "isSWJ"
[22:36:34.659]          // =>  TRUE
[22:36:34.659]        <control if="hasDormant" while="" timeout="0" info="">
[22:36:34.659]          // if-block "hasDormant"
[22:36:34.659]            // =>  FALSE
[22:36:34.659]          // skip if-block "hasDormant"
[22:36:34.659]        </control>
[22:36:34.659]        <control if="!hasDormant" while="" timeout="0" info="">
[22:36:34.659]          // if-block "!hasDormant"
[22:36:34.659]            // =>  TRUE
[22:36:34.659]          <block atomic="false" info="">
[22:36:34.659]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:36:34.659]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:36:34.659]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:36:34.663]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:36:34.663]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:36:34.663]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:36:34.663]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:36:34.667]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:36:34.667]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:36:34.667]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:36:34.667]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:36:34.667]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:36:34.667]          </block>
[22:36:34.667]          // end if-block "!hasDormant"
[22:36:34.671]        </control>
[22:36:34.671]        // end if-block "isSWJ"
[22:36:34.671]      </control>
[22:36:34.672]      <control if="!isSWJ" while="" timeout="0" info="">
[22:36:34.672]        // if-block "!isSWJ"
[22:36:34.672]          // =>  FALSE
[22:36:34.672]        // skip if-block "!isSWJ"
[22:36:34.672]      </control>
[22:36:34.672]      <block atomic="false" info="">
[22:36:34.672]        ReadDP(0x0);
[22:36:34.673]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:36:34.673]      </block>
[22:36:34.673]      // end if-block "protType == 2"
[22:36:34.673]    </control>
[22:36:34.673]  </sequence>
[22:36:34.673]  
[22:36:34.679]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:36:34.679]  
[22:36:34.679]  <debugvars>
[22:36:34.679]    // Pre-defined
[22:36:34.679]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:36:34.679]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:36:34.679]    __dp=0x00000000
[22:36:34.679]    __ap=0x00000000
[22:36:34.679]    __traceout=0x00000000      (Trace Disabled)
[22:36:34.679]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:36:34.679]    __FlashAddr=0x00000000
[22:36:34.679]    __FlashLen=0x00000000
[22:36:34.679]    __FlashArg=0x00000000
[22:36:34.679]    __FlashOp=0x00000000
[22:36:34.679]    __Result=0x00000000
[22:36:34.679]  </debugvars>
[22:36:34.679]  
[22:36:34.679]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:36:34.679]    <block atomic="false" info="">
[22:36:34.679]      __var SW_DP_ABORT       = 0x0;
[22:36:34.679]        // -> [SW_DP_ABORT <= 0x00000000]
[22:36:34.679]      __var DP_CTRL_STAT      = 0x4;
[22:36:34.679]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:36:34.679]      __var DP_SELECT         = 0x8;
[22:36:34.679]        // -> [DP_SELECT <= 0x00000008]
[22:36:34.683]      __var powered_down      = 0;
[22:36:34.683]        // -> [powered_down <= 0x00000000]
[22:36:34.683]      WriteDP(DP_SELECT, 0x00000000);
[22:36:34.683]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:36:34.683]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:36:34.687]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:36:34.687]        // -> [powered_down <= 0x00000001]
[22:36:34.687]    </block>
[22:36:34.687]    <control if="powered_down" while="" timeout="0" info="">
[22:36:34.687]      // if-block "powered_down"
[22:36:34.687]        // =>  TRUE
[22:36:34.687]      <block atomic="false" info="">
[22:36:34.687]        Message(0, "Debug/System power-up request sent");
[22:36:34.691]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:36:34.691]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:36:34.691]      </block>
[22:36:34.691]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:36:34.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:36:34.695]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:36:34.695]        // while-condition  =>  FALSE
[22:36:34.695]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:36:34.695]      </control>
[22:36:34.695]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:36:34.695]        // if-block "(__protocol & 0xFFFF) == 1"
[22:36:34.695]          // =>  FALSE
[22:36:34.695]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:36:34.695]      </control>
[22:36:34.695]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:36:34.695]        // if-block "(__protocol & 0xFFFF) == 2"
[22:36:34.695]          // =>  TRUE
[22:36:34.695]        <block atomic="false" info="">
[22:36:34.695]          Message(0, "executing SWD power up");
[22:36:34.697]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:36:34.699]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:36:34.699]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:36:34.699]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:36:34.699]        </block>
[22:36:34.699]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:36:34.699]      </control>
[22:36:34.699]      // end if-block "powered_down"
[22:36:34.699]    </control>
[22:36:34.699]    <block atomic="false" info="">
[22:36:34.699]      __var DEBUG_PORT_VAL    = 0;
[22:36:34.699]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:36:34.699]      __var ACCESS_POINT_VAL  = 0;
[22:36:34.699]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:36:34.699]      __ap = 1; 
[22:36:34.703]        // -> [__ap <= 0x00000001]
[22:36:34.703]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:36:34.705]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:36:34.705]      __ap = 4;
[22:36:34.705]        // -> [__ap <= 0x00000004]
[22:36:34.705]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:36:34.708]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:36:34.708]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:36:34.708]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:36:34.712]    </block>
[22:36:34.712]    <block atomic="false" info="">
[22:36:34.712]      __var nReset = 0x80;
[22:36:34.712]        // -> [nReset <= 0x00000080]
[22:36:34.713]      __var canReadPins = 0;
[22:36:34.713]        // -> [canReadPins <= 0x00000000]
[22:36:34.713]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:36:34.713]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:36:34.713]        // -> [canReadPins <= 0x00000001]
[22:36:34.713]    </block>
[22:36:34.713]    <control if="" while="1" timeout="200" info="">
[22:36:34.713]      // while "1"  (timeout="200")
[22:36:34.713]      // while-condition  =>  TRUE
[22:36:34.713]      // while "1"  (timeout="200")
[22:36:34.716]      // while-condition  =>  TRUE
[22:36:34.716]      // while "1"  (timeout="200")
[22:36:34.716]      // while-condition  =>  TRUE
[22:36:34.716]      // while "1"  (timeout="200")
[22:36:34.716]      // while-condition  =>  TRUE
[22:36:34.716]      // while "1"  (timeout="200")
[22:36:34.716]      // while-condition  =>  TRUE
[22:36:34.716]      // while "1"  (timeout="200")
[22:36:34.716]      // while-condition  =>  TRUE
[22:36:34.716]      // while "1"  (timeout="200")
[22:36:34.716]      // while-condition  =>  TRUE
[22:36:34.716]      // while "1"  (timeout="200")
[22:36:34.716]      // while-condition  =>  TRUE
[22:36:34.716]      // while "1"  (timeout="200")
[22:36:34.716]      // while-condition  =>  TRUE
[22:36:34.716]      // while "1"  (timeout="200")
[22:36:34.716]      // while-condition  =>  TRUE
[22:36:34.716]      // while "1"  (timeout="200")
[22:36:34.716]      // while-condition  =>  TRUE
[22:36:34.716]      // while "1"  (timeout="200")
[22:36:34.716]      // while-condition  =>  TRUE
[22:36:34.716]      // while "1"  (timeout="200")
[22:36:34.716]      // while-condition  =>  TRUE
[22:36:34.718]      // while "1"  (timeout="200")
[22:36:34.718]      // while-condition  =>  TRUE
[22:36:34.718]      // while "1"  (timeout="200")
[22:36:34.718]      // while-condition  =>  TRUE
[22:36:34.718]      // while "1"  (timeout="200")
[22:36:34.718]      // while-condition  =>  TRUE
[22:36:34.718]      // while "1"  (timeout="200")
[22:36:34.718]      // while-condition  =>  TRUE
[22:36:34.718]      // while "1"  (timeout="200")
[22:36:34.718]      // while-condition  =>  TRUE
[22:36:34.718]      // while "1"  (timeout="200")
[22:36:34.720]      // while-condition  =>  TRUE
[22:36:34.720]      // while "1"  (timeout="200")
[22:36:34.720]      // while-condition  =>  TRUE
[22:36:34.720]      // while "1"  (timeout="200")
[22:36:34.720]      // while-condition  =>  TRUE
[22:36:34.720]      // while "1"  (timeout="200")
[22:36:34.720]      // while-condition  =>  TRUE
[22:36:34.720]      // while "1"  (timeout="200")
[22:36:34.720]      // while-condition  =>  TRUE
[22:36:34.720]      // while "1"  (timeout="200")
[22:36:34.720]      // while-condition  =>  TRUE
[22:36:34.720]      // while "1"  (timeout="200")
[22:36:34.720]      // while-condition  =>  TRUE
[22:36:34.720]      // while "1"  (timeout="200")
[22:36:34.720]      // while-condition  =>  TRUE
[22:36:34.720]      // while "1"  (timeout="200")
[22:36:34.720]      // while-condition  =>  TRUE
[22:36:34.720]      // while "1"  (timeout="200")
[22:36:34.720]      // while-condition  =>  TRUE
[22:36:34.720]      // while "1"  (timeout="200")
[22:36:34.720]      // while-condition  =>  TRUE
[22:36:34.720]      // while "1"  (timeout="200")
[22:36:34.720]      // while-condition  =>  TRUE
[22:36:34.720]      // while "1"  (timeout="200")
[22:36:34.723]      // while-condition  =>  TRUE
[22:36:34.723]      // while "1"  (timeout="200")
[22:36:34.723]      // while  =>  TIMEOUT
[22:36:34.723]      // end while "1"
[22:36:34.723]    </control>
[22:36:34.723]    <control if="canReadPins" while="" timeout="0" info="">
[22:36:34.723]      // if-block "canReadPins"
[22:36:34.723]        // =>  TRUE
[22:36:34.723]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:36:34.723]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:36:34.724]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:36:34.724]        // while-condition  =>  FALSE
[22:36:34.724]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:36:34.724]      </control>
[22:36:34.724]      // end if-block "canReadPins"
[22:36:34.724]    </control>
[22:36:34.724]    <control if="!canReadPins" while="" timeout="0" info="">
[22:36:34.724]      // if-block "!canReadPins"
[22:36:34.724]        // =>  FALSE
[22:36:34.724]      // skip if-block "!canReadPins"
[22:36:34.724]    </control>
[22:36:34.724]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:36:34.724]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:36:34.724]        // =>  TRUE
[22:36:34.724]      <block atomic="false" info="">
[22:36:34.724]        WriteAP(0x00, 0x190008);
[22:36:34.729]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:36:34.729]        WriteAP(0xF0, 0x01);
[22:36:34.732]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:36:34.732]      </block>
[22:36:34.732]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:36:34.732]    </control>
[22:36:34.732]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:36:34.732]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:36:34.732]        // =>  FALSE
[22:36:34.732]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:36:34.732]    </control>
[22:36:34.732]    <block atomic="false" info="">
[22:36:34.732]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:36:34.739]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:36:34.739]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:36:34.739]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:36:34.741]      __ap = 0; //lets make sure we reset the access point selection
[22:36:34.741]        // -> [__ap <= 0x00000000]
[22:36:34.741]    </block>
[22:36:34.741]  </sequence>
[22:36:34.741]  
[22:36:34.762]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:36:34.762]  
[22:36:34.765]  <debugvars>
[22:36:34.765]    // Pre-defined
[22:36:34.765]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:36:34.765]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:36:34.765]    __dp=0x00000000
[22:36:34.765]    __ap=0x00000000
[22:36:34.765]    __traceout=0x00000000      (Trace Disabled)
[22:36:34.765]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:36:34.765]    __FlashAddr=0x00000000
[22:36:34.765]    __FlashLen=0x00000000
[22:36:34.765]    __FlashArg=0x00000000
[22:36:34.765]    __FlashOp=0x00000000
[22:36:34.765]    __Result=0x00000000
[22:36:34.765]  </debugvars>
[22:36:34.765]  
[22:36:34.765]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:36:34.765]    <block atomic="false" info="">
[22:36:34.765]      __var deviceID = 0;
[22:36:34.765]        // -> [deviceID <= 0x00000000]
[22:36:34.765]      __var version = 0;
[22:36:34.765]        // -> [version <= 0x00000000]
[22:36:34.765]      __var partNum = 0;
[22:36:34.765]        // -> [partNum <= 0x00000000]
[22:36:34.765]      __var manuf = 0;
[22:36:34.765]        // -> [manuf <= 0x00000000]
[22:36:34.765]      __var isMSPM0G1X0X_G3X0X = 0;
[22:36:34.765]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:36:34.765]      __var isProduction = 0;
[22:36:34.765]        // -> [isProduction <= 0x00000000]
[22:36:34.765]      __var continueId = 0;
[22:36:34.765]        // -> [continueId <= 0x00000000]
[22:36:34.769]      deviceID =   Read32(0x41C40004);
[22:36:34.773]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:36:34.773]        // -> [deviceID <= 0x2BB8802F]
[22:36:34.773]      version = deviceID >> 28;
[22:36:34.773]        // -> [version <= 0x00000002]
[22:36:34.773]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:36:34.773]        // -> [partNum <= 0x0000BB88]
[22:36:34.773]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:36:34.773]        // -> [manuf <= 0x00000017]
[22:36:34.773]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:36:34.773]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:36:34.773]      isProduction = (version > 0);
[22:36:34.773]        // -> [isProduction <= 0x00000001]
[22:36:34.773]    </block>
[22:36:34.773]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:36:34.773]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:36:34.773]        // =>  FALSE
[22:36:34.773]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:36:34.773]    </control>
[22:36:34.773]    <control if="continueId == 4" while="" timeout="0" info="">
[22:36:34.773]      // if-block "continueId == 4"
[22:36:34.773]        // =>  FALSE
[22:36:34.773]      // skip if-block "continueId == 4"
[22:36:34.773]    </control>
[22:36:34.773]    <control if="!isProduction" while="" timeout="0" info="">
[22:36:34.773]      // if-block "!isProduction"
[22:36:34.773]        // =>  FALSE
[22:36:34.773]      // skip if-block "!isProduction"
[22:36:34.773]    </control>
[22:36:34.773]  </sequence>
[22:36:34.773]  
[22:37:10.400]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:37:10.400]  
[22:37:10.400]  <debugvars>
[22:37:10.400]    // Pre-defined
[22:37:10.400]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:37:10.400]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:37:10.400]    __dp=0x00000000
[22:37:10.400]    __ap=0x00000000
[22:37:10.400]    __traceout=0x00000000      (Trace Disabled)
[22:37:10.400]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:37:10.400]    __FlashAddr=0x00000000
[22:37:10.400]    __FlashLen=0x00000000
[22:37:10.400]    __FlashArg=0x00000000
[22:37:10.400]    __FlashOp=0x00000000
[22:37:10.400]    __Result=0x00000000
[22:37:10.401]  </debugvars>
[22:37:10.401]  
[22:37:10.401]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:37:10.401]    <block atomic="false" info="">
[22:37:10.401]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:37:10.401]        // -> [isSWJ <= 0x00000001]
[22:37:10.401]      __var hasDormant = __protocol & 0x00020000;
[22:37:10.401]        // -> [hasDormant <= 0x00000000]
[22:37:10.401]      __var protType   = __protocol & 0x0000FFFF;
[22:37:10.401]        // -> [protType <= 0x00000002]
[22:37:10.401]    </block>
[22:37:10.401]    <control if="protType == 1" while="" timeout="0" info="">
[22:37:10.403]      // if-block "protType == 1"
[22:37:10.403]        // =>  FALSE
[22:37:10.403]      // skip if-block "protType == 1"
[22:37:10.403]    </control>
[22:37:10.403]    <control if="protType == 2" while="" timeout="0" info="">
[22:37:10.403]      // if-block "protType == 2"
[22:37:10.403]        // =>  TRUE
[22:37:10.403]      <control if="isSWJ" while="" timeout="0" info="">
[22:37:10.403]        // if-block "isSWJ"
[22:37:10.403]          // =>  TRUE
[22:37:10.403]        <control if="hasDormant" while="" timeout="0" info="">
[22:37:10.403]          // if-block "hasDormant"
[22:37:10.405]            // =>  FALSE
[22:37:10.405]          // skip if-block "hasDormant"
[22:37:10.405]        </control>
[22:37:10.405]        <control if="!hasDormant" while="" timeout="0" info="">
[22:37:10.405]          // if-block "!hasDormant"
[22:37:10.405]            // =>  TRUE
[22:37:10.405]          <block atomic="false" info="">
[22:37:10.405]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:37:10.405]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:37:10.405]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:37:10.408]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:37:10.408]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:37:10.409]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:37:10.409]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:37:10.409]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:37:10.411]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:37:10.411]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:37:10.411]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:37:10.415]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:37:10.415]          </block>
[22:37:10.415]          // end if-block "!hasDormant"
[22:37:10.415]        </control>
[22:37:10.415]        // end if-block "isSWJ"
[22:37:10.415]      </control>
[22:37:10.415]      <control if="!isSWJ" while="" timeout="0" info="">
[22:37:10.415]        // if-block "!isSWJ"
[22:37:10.415]          // =>  FALSE
[22:37:10.415]        // skip if-block "!isSWJ"
[22:37:10.415]      </control>
[22:37:10.415]      <block atomic="false" info="">
[22:37:10.415]        ReadDP(0x0);
[22:37:10.419]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:37:10.419]      </block>
[22:37:10.419]      // end if-block "protType == 2"
[22:37:10.419]    </control>
[22:37:10.419]  </sequence>
[22:37:10.419]  
[22:37:10.423]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:37:10.423]  
[22:37:10.423]  <debugvars>
[22:37:10.423]    // Pre-defined
[22:37:10.423]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:37:10.423]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:37:10.423]    __dp=0x00000000
[22:37:10.423]    __ap=0x00000000
[22:37:10.423]    __traceout=0x00000000      (Trace Disabled)
[22:37:10.423]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:37:10.423]    __FlashAddr=0x00000000
[22:37:10.423]    __FlashLen=0x00000000
[22:37:10.423]    __FlashArg=0x00000000
[22:37:10.423]    __FlashOp=0x00000000
[22:37:10.423]    __Result=0x00000000
[22:37:10.423]  </debugvars>
[22:37:10.423]  
[22:37:10.423]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:37:10.423]    <block atomic="false" info="">
[22:37:10.423]      __var SW_DP_ABORT       = 0x0;
[22:37:10.423]        // -> [SW_DP_ABORT <= 0x00000000]
[22:37:10.423]      __var DP_CTRL_STAT      = 0x4;
[22:37:10.423]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:37:10.423]      __var DP_SELECT         = 0x8;
[22:37:10.423]        // -> [DP_SELECT <= 0x00000008]
[22:37:10.423]      __var powered_down      = 0;
[22:37:10.423]        // -> [powered_down <= 0x00000000]
[22:37:10.427]      WriteDP(DP_SELECT, 0x00000000);
[22:37:10.427]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:37:10.427]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:37:10.427]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:37:10.427]        // -> [powered_down <= 0x00000001]
[22:37:10.427]    </block>
[22:37:10.427]    <control if="powered_down" while="" timeout="0" info="">
[22:37:10.427]      // if-block "powered_down"
[22:37:10.427]        // =>  TRUE
[22:37:10.427]      <block atomic="false" info="">
[22:37:10.427]        Message(0, "Debug/System power-up request sent");
[22:37:10.431]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:37:10.431]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:37:10.435]      </block>
[22:37:10.435]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:37:10.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:37:10.435]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:37:10.435]        // while-condition  =>  FALSE
[22:37:10.435]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:37:10.435]      </control>
[22:37:10.435]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:37:10.435]        // if-block "(__protocol & 0xFFFF) == 1"
[22:37:10.435]          // =>  FALSE
[22:37:10.435]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:37:10.435]      </control>
[22:37:10.435]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:37:10.435]        // if-block "(__protocol & 0xFFFF) == 2"
[22:37:10.435]          // =>  TRUE
[22:37:10.435]        <block atomic="false" info="">
[22:37:10.435]          Message(0, "executing SWD power up");
[22:37:10.439]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:37:10.441]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:37:10.441]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:37:10.441]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:37:10.441]        </block>
[22:37:10.441]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:37:10.443]      </control>
[22:37:10.443]      // end if-block "powered_down"
[22:37:10.443]    </control>
[22:37:10.443]    <block atomic="false" info="">
[22:37:10.443]      __var DEBUG_PORT_VAL    = 0;
[22:37:10.443]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:37:10.443]      __var ACCESS_POINT_VAL  = 0;
[22:37:10.443]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:37:10.443]      __ap = 1; 
[22:37:10.443]        // -> [__ap <= 0x00000001]
[22:37:10.443]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:37:10.447]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:37:10.447]      __ap = 4;
[22:37:10.447]        // -> [__ap <= 0x00000004]
[22:37:10.447]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:37:10.447]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:37:10.447]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:37:10.447]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:37:10.454]    </block>
[22:37:10.454]    <block atomic="false" info="">
[22:37:10.454]      __var nReset = 0x80;
[22:37:10.454]        // -> [nReset <= 0x00000080]
[22:37:10.454]      __var canReadPins = 0;
[22:37:10.454]        // -> [canReadPins <= 0x00000000]
[22:37:10.454]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:37:10.456]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:37:10.456]        // -> [canReadPins <= 0x00000001]
[22:37:10.456]    </block>
[22:37:10.457]    <control if="" while="1" timeout="200" info="">
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.457]      // while "1"  (timeout="200")
[22:37:10.457]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.460]      // while-condition  =>  TRUE
[22:37:10.460]      // while "1"  (timeout="200")
[22:37:10.464]      // while-condition  =>  TRUE
[22:37:10.464]      // while "1"  (timeout="200")
[22:37:10.464]      // while-condition  =>  TRUE
[22:37:10.464]      // while "1"  (timeout="200")
[22:37:10.464]      // while-condition  =>  TRUE
[22:37:10.464]      // while "1"  (timeout="200")
[22:37:10.464]      // while-condition  =>  TRUE
[22:37:10.464]      // while "1"  (timeout="200")
[22:37:10.464]      // while-condition  =>  TRUE
[22:37:10.464]      // while "1"  (timeout="200")
[22:37:10.464]      // while-condition  =>  TRUE
[22:37:10.464]      // while "1"  (timeout="200")
[22:37:10.464]      // while-condition  =>  TRUE
[22:37:10.464]      // while "1"  (timeout="200")
[22:37:10.464]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.466]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.466]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.466]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.466]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.466]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.466]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.466]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.466]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.466]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.466]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.466]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.466]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.466]      // while-condition  =>  TRUE
[22:37:10.466]      // while "1"  (timeout="200")
[22:37:10.468]      // while-condition  =>  TRUE
[22:37:10.468]      // while "1"  (timeout="200")
[22:37:10.468]      // while-condition  =>  TRUE
[22:37:10.468]      // while "1"  (timeout="200")
[22:37:10.468]      // while-condition  =>  TRUE
[22:37:10.468]      // while "1"  (timeout="200")
[22:37:10.468]      // while-condition  =>  TRUE
[22:37:10.468]      // while "1"  (timeout="200")
[22:37:10.468]      // while-condition  =>  TRUE
[22:37:10.468]      // while "1"  (timeout="200")
[22:37:10.468]      // while-condition  =>  TRUE
[22:37:10.468]      // while "1"  (timeout="200")
[22:37:10.468]      // while-condition  =>  TRUE
[22:37:10.468]      // while "1"  (timeout="200")
[22:37:10.468]      // while-condition  =>  TRUE
[22:37:10.468]      // while "1"  (timeout="200")
[22:37:10.468]      // while-condition  =>  TRUE
[22:37:10.468]      // while "1"  (timeout="200")
[22:37:10.468]      // while-condition  =>  TRUE
[22:37:10.468]      // while "1"  (timeout="200")
[22:37:10.468]      // while-condition  =>  TRUE
[22:37:10.468]      // while "1"  (timeout="200")
[22:37:10.468]      // while-condition  =>  TRUE
[22:37:10.468]      // while "1"  (timeout="200")
[22:37:10.468]      // while-condition  =>  TRUE
[22:37:10.468]      // while "1"  (timeout="200")
[22:37:10.470]      // while-condition  =>  TRUE
[22:37:10.470]      // while "1"  (timeout="200")
[22:37:10.470]      // while-condition  =>  TRUE
[22:37:10.470]      // while "1"  (timeout="200")
[22:37:10.470]      // while-condition  =>  TRUE
[22:37:10.470]      // while "1"  (timeout="200")
[22:37:10.470]      // while-condition  =>  TRUE
[22:37:10.470]      // while "1"  (timeout="200")
[22:37:10.470]      // while-condition  =>  TRUE
[22:37:10.470]      // while "1"  (timeout="200")
[22:37:10.470]      // while-condition  =>  TRUE
[22:37:10.470]      // while "1"  (timeout="200")
[22:37:10.470]      // while-condition  =>  TRUE
[22:37:10.470]      // while "1"  (timeout="200")
[22:37:10.470]      // while-condition  =>  TRUE
[22:37:10.470]      // while "1"  (timeout="200")
[22:37:10.470]      // while-condition  =>  TRUE
[22:37:10.470]      // while "1"  (timeout="200")
[22:37:10.470]      // while-condition  =>  TRUE
[22:37:10.470]      // while "1"  (timeout="200")
[22:37:10.472]      // while-condition  =>  TRUE
[22:37:10.472]      // while "1"  (timeout="200")
[22:37:10.472]      // while  =>  TIMEOUT
[22:37:10.472]      // end while "1"
[22:37:10.472]    </control>
[22:37:10.472]    <control if="canReadPins" while="" timeout="0" info="">
[22:37:10.472]      // if-block "canReadPins"
[22:37:10.472]        // =>  TRUE
[22:37:10.473]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:37:10.473]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:37:10.473]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:37:10.473]        // while-condition  =>  FALSE
[22:37:10.473]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:37:10.473]      </control>
[22:37:10.473]      // end if-block "canReadPins"
[22:37:10.473]    </control>
[22:37:10.473]    <control if="!canReadPins" while="" timeout="0" info="">
[22:37:10.473]      // if-block "!canReadPins"
[22:37:10.473]        // =>  FALSE
[22:37:10.473]      // skip if-block "!canReadPins"
[22:37:10.473]    </control>
[22:37:10.473]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:37:10.473]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:37:10.473]        // =>  TRUE
[22:37:10.476]      <block atomic="false" info="">
[22:37:10.476]        WriteAP(0x00, 0x190008);
[22:37:10.478]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:37:10.478]        WriteAP(0xF0, 0x01);
[22:37:10.482]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:37:10.482]      </block>
[22:37:10.482]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:37:10.482]    </control>
[22:37:10.482]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:37:10.482]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:37:10.482]        // =>  FALSE
[22:37:10.482]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:37:10.482]    </control>
[22:37:10.482]    <block atomic="false" info="">
[22:37:10.482]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:37:10.484]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:37:10.484]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:37:10.484]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:37:10.488]      __ap = 0; //lets make sure we reset the access point selection
[22:37:10.488]        // -> [__ap <= 0x00000000]
[22:37:10.488]    </block>
[22:37:10.488]  </sequence>
[22:37:10.488]  
[22:37:10.508]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:37:10.508]  
[22:37:10.508]  <debugvars>
[22:37:10.508]    // Pre-defined
[22:37:10.508]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:37:10.508]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[22:37:10.508]    __dp=0x00000000
[22:37:10.508]    __ap=0x00000000
[22:37:10.508]    __traceout=0x00000000      (Trace Disabled)
[22:37:10.508]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:37:10.508]    __FlashAddr=0x00000000
[22:37:10.508]    __FlashLen=0x00000000
[22:37:10.508]    __FlashArg=0x00000000
[22:37:10.508]    __FlashOp=0x00000000
[22:37:10.508]    __Result=0x00000000
[22:37:10.508]  </debugvars>
[22:37:10.508]  
[22:37:10.508]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:37:10.508]    <block atomic="false" info="">
[22:37:10.508]      __var deviceID = 0;
[22:37:10.508]        // -> [deviceID <= 0x00000000]
[22:37:10.512]      __var version = 0;
[22:37:10.512]        // -> [version <= 0x00000000]
[22:37:10.512]      __var partNum = 0;
[22:37:10.512]        // -> [partNum <= 0x00000000]
[22:37:10.512]      __var manuf = 0;
[22:37:10.512]        // -> [manuf <= 0x00000000]
[22:37:10.512]      __var isMSPM0G1X0X_G3X0X = 0;
[22:37:10.512]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:37:10.512]      __var isProduction = 0;
[22:37:10.512]        // -> [isProduction <= 0x00000000]
[22:37:10.512]      __var continueId = 0;
[22:37:10.512]        // -> [continueId <= 0x00000000]
[22:37:10.512]      deviceID =   Read32(0x41C40004);
[22:37:10.516]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:37:10.516]        // -> [deviceID <= 0x2BB8802F]
[22:37:10.516]      version = deviceID >> 28;
[22:37:10.516]        // -> [version <= 0x00000002]
[22:37:10.516]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:37:10.516]        // -> [partNum <= 0x0000BB88]
[22:37:10.516]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:37:10.516]        // -> [manuf <= 0x00000017]
[22:37:10.516]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:37:10.516]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:37:10.516]      isProduction = (version > 0);
[22:37:10.516]        // -> [isProduction <= 0x00000001]
[22:37:10.516]    </block>
[22:37:10.516]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:37:10.516]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:37:10.516]        // =>  FALSE
[22:37:10.516]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:37:10.516]    </control>
[22:37:10.516]    <control if="continueId == 4" while="" timeout="0" info="">
[22:37:10.516]      // if-block "continueId == 4"
[22:37:10.516]        // =>  FALSE
[22:37:10.516]      // skip if-block "continueId == 4"
[22:37:10.519]    </control>
[22:37:10.519]    <control if="!isProduction" while="" timeout="0" info="">
[22:37:10.519]      // if-block "!isProduction"
[22:37:10.519]        // =>  FALSE
[22:37:10.519]      // skip if-block "!isProduction"
[22:37:10.519]    </control>
[22:37:10.519]  </sequence>
[22:37:10.519]  
[22:37:38.718]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:37:38.718]  
[22:37:38.727]  <debugvars>
[22:37:38.727]    // Pre-defined
[22:37:38.727]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:37:38.727]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:37:38.727]    __dp=0x00000000
[22:37:38.727]    __ap=0x00000000
[22:37:38.727]    __traceout=0x00000000      (Trace Disabled)
[22:37:38.727]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:37:38.727]    __FlashAddr=0x00000000
[22:37:38.727]    __FlashLen=0x00000000
[22:37:38.727]    __FlashArg=0x00000000
[22:37:38.727]    __FlashOp=0x00000000
[22:37:38.727]    __Result=0x00000000
[22:37:38.727]  </debugvars>
[22:37:38.727]  
[22:37:38.727]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:37:38.727]    <block atomic="false" info="">
[22:37:38.727]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:37:38.727]        // -> [isSWJ <= 0x00000001]
[22:37:38.727]      __var hasDormant = __protocol & 0x00020000;
[22:37:38.727]        // -> [hasDormant <= 0x00000000]
[22:37:38.727]      __var protType   = __protocol & 0x0000FFFF;
[22:37:38.727]        // -> [protType <= 0x00000002]
[22:37:38.727]    </block>
[22:37:38.727]    <control if="protType == 1" while="" timeout="0" info="">
[22:37:38.727]      // if-block "protType == 1"
[22:37:38.730]        // =>  FALSE
[22:37:38.730]      // skip if-block "protType == 1"
[22:37:38.730]    </control>
[22:37:38.730]    <control if="protType == 2" while="" timeout="0" info="">
[22:37:38.730]      // if-block "protType == 2"
[22:37:38.730]        // =>  TRUE
[22:37:38.730]      <control if="isSWJ" while="" timeout="0" info="">
[22:37:38.730]        // if-block "isSWJ"
[22:37:38.730]          // =>  TRUE
[22:37:38.730]        <control if="hasDormant" while="" timeout="0" info="">
[22:37:38.730]          // if-block "hasDormant"
[22:37:38.730]            // =>  FALSE
[22:37:38.730]          // skip if-block "hasDormant"
[22:37:38.730]        </control>
[22:37:38.730]        <control if="!hasDormant" while="" timeout="0" info="">
[22:37:38.730]          // if-block "!hasDormant"
[22:37:38.730]            // =>  TRUE
[22:37:38.730]          <block atomic="false" info="">
[22:37:38.730]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:37:38.733]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:37:38.733]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:37:38.734]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:37:38.734]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:37:38.736]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:37:38.736]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:37:38.736]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:37:38.736]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:37:38.738]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:37:38.738]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:37:38.738]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:37:38.738]          </block>
[22:37:38.738]          // end if-block "!hasDormant"
[22:37:38.738]        </control>
[22:37:38.738]        // end if-block "isSWJ"
[22:37:38.738]      </control>
[22:37:38.738]      <control if="!isSWJ" while="" timeout="0" info="">
[22:37:38.738]        // if-block "!isSWJ"
[22:37:38.738]          // =>  FALSE
[22:37:38.738]        // skip if-block "!isSWJ"
[22:37:38.738]      </control>
[22:37:38.738]      <block atomic="false" info="">
[22:37:38.738]        ReadDP(0x0);
[22:37:38.742]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:37:38.742]      </block>
[22:37:38.742]      // end if-block "protType == 2"
[22:37:38.742]    </control>
[22:37:38.742]  </sequence>
[22:37:38.742]  
[22:37:38.746]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:37:38.746]  
[22:37:38.746]  <debugvars>
[22:37:38.747]    // Pre-defined
[22:37:38.747]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:37:38.747]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:37:38.747]    __dp=0x00000000
[22:37:38.747]    __ap=0x00000000
[22:37:38.747]    __traceout=0x00000000      (Trace Disabled)
[22:37:38.747]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:37:38.747]    __FlashAddr=0x00000000
[22:37:38.748]    __FlashLen=0x00000000
[22:37:38.748]    __FlashArg=0x00000000
[22:37:38.748]    __FlashOp=0x00000000
[22:37:38.748]    __Result=0x00000000
[22:37:38.748]  </debugvars>
[22:37:38.748]  
[22:37:38.748]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:37:38.748]    <block atomic="false" info="">
[22:37:38.749]      __var SW_DP_ABORT       = 0x0;
[22:37:38.749]        // -> [SW_DP_ABORT <= 0x00000000]
[22:37:38.749]      __var DP_CTRL_STAT      = 0x4;
[22:37:38.749]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:37:38.749]      __var DP_SELECT         = 0x8;
[22:37:38.749]        // -> [DP_SELECT <= 0x00000008]
[22:37:38.749]      __var powered_down      = 0;
[22:37:38.749]        // -> [powered_down <= 0x00000000]
[22:37:38.749]      WriteDP(DP_SELECT, 0x00000000);
[22:37:38.751]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:37:38.751]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:37:38.752]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:37:38.752]        // -> [powered_down <= 0x00000001]
[22:37:38.752]    </block>
[22:37:38.752]    <control if="powered_down" while="" timeout="0" info="">
[22:37:38.752]      // if-block "powered_down"
[22:37:38.753]        // =>  TRUE
[22:37:38.753]      <block atomic="false" info="">
[22:37:38.753]        Message(0, "Debug/System power-up request sent");
[22:37:38.757]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:37:38.760]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:37:38.760]      </block>
[22:37:38.760]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:37:38.760]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:37:38.762]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:37:38.762]        // while-condition  =>  FALSE
[22:37:38.762]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:37:38.762]      </control>
[22:37:38.762]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:37:38.762]        // if-block "(__protocol & 0xFFFF) == 1"
[22:37:38.763]          // =>  FALSE
[22:37:38.763]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:37:38.763]      </control>
[22:37:38.763]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:37:38.763]        // if-block "(__protocol & 0xFFFF) == 2"
[22:37:38.763]          // =>  TRUE
[22:37:38.763]        <block atomic="false" info="">
[22:37:38.763]          Message(0, "executing SWD power up");
[22:37:38.766]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:37:38.767]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:37:38.768]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:37:38.769]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:37:38.769]        </block>
[22:37:38.769]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:37:38.769]      </control>
[22:37:38.769]      // end if-block "powered_down"
[22:37:38.769]    </control>
[22:37:38.770]    <block atomic="false" info="">
[22:37:38.770]      __var DEBUG_PORT_VAL    = 0;
[22:37:38.770]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:37:38.770]      __var ACCESS_POINT_VAL  = 0;
[22:37:38.770]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:37:38.770]      __ap = 1; 
[22:37:38.770]        // -> [__ap <= 0x00000001]
[22:37:38.770]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:37:38.774]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:37:38.774]      __ap = 4;
[22:37:38.774]        // -> [__ap <= 0x00000004]
[22:37:38.774]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:37:38.778]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:37:38.778]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:37:38.779]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:37:38.780]    </block>
[22:37:38.780]    <block atomic="false" info="">
[22:37:38.780]      __var nReset = 0x80;
[22:37:38.780]        // -> [nReset <= 0x00000080]
[22:37:38.780]      __var canReadPins = 0;
[22:37:38.780]        // -> [canReadPins <= 0x00000000]
[22:37:38.780]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:37:38.782]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:37:38.782]        // -> [canReadPins <= 0x00000001]
[22:37:38.782]    </block>
[22:37:38.782]    <control if="" while="1" timeout="200" info="">
[22:37:38.782]      // while "1"  (timeout="200")
[22:37:38.782]      // while-condition  =>  TRUE
[22:37:38.782]      // while "1"  (timeout="200")
[22:37:38.782]      // while-condition  =>  TRUE
[22:37:38.782]      // while "1"  (timeout="200")
[22:37:38.783]      // while-condition  =>  TRUE
[22:37:38.783]      // while "1"  (timeout="200")
[22:37:38.784]      // while-condition  =>  TRUE
[22:37:38.784]      // while "1"  (timeout="200")
[22:37:38.784]      // while  =>  TIMEOUT
[22:37:38.784]      // end while "1"
[22:37:38.784]    </control>
[22:37:38.784]    <control if="canReadPins" while="" timeout="0" info="">
[22:37:38.784]      // if-block "canReadPins"
[22:37:38.784]        // =>  TRUE
[22:37:38.784]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:37:38.784]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:37:38.785]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:37:38.785]        // while-condition  =>  FALSE
[22:37:38.785]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:37:38.785]      </control>
[22:37:38.785]      // end if-block "canReadPins"
[22:37:38.785]    </control>
[22:37:38.785]    <control if="!canReadPins" while="" timeout="0" info="">
[22:37:38.785]      // if-block "!canReadPins"
[22:37:38.787]        // =>  FALSE
[22:37:38.787]      // skip if-block "!canReadPins"
[22:37:38.787]    </control>
[22:37:38.787]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:37:38.787]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:37:38.787]        // =>  TRUE
[22:37:38.787]      <block atomic="false" info="">
[22:37:38.787]        WriteAP(0x00, 0x190008);
[22:37:38.789]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:37:38.789]        WriteAP(0xF0, 0x01);
[22:37:38.793]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:37:38.793]      </block>
[22:37:38.793]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:37:38.793]    </control>
[22:37:38.793]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:37:38.793]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:37:38.793]        // =>  FALSE
[22:37:38.793]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:37:38.793]    </control>
[22:37:38.793]    <block atomic="false" info="">
[22:37:38.795]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:37:38.796]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:37:38.796]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:37:38.796]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:37:38.800]      __ap = 0; //lets make sure we reset the access point selection
[22:37:38.800]        // -> [__ap <= 0x00000000]
[22:37:38.800]    </block>
[22:37:38.801]  </sequence>
[22:37:38.801]  
[22:37:38.820]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:37:38.820]  
[22:37:38.820]  <debugvars>
[22:37:38.820]    // Pre-defined
[22:37:38.820]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:37:38.820]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:37:38.822]    __dp=0x00000000
[22:37:38.822]    __ap=0x00000000
[22:37:38.822]    __traceout=0x00000000      (Trace Disabled)
[22:37:38.822]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:37:38.822]    __FlashAddr=0x00000000
[22:37:38.822]    __FlashLen=0x00000000
[22:37:38.822]    __FlashArg=0x00000000
[22:37:38.822]    __FlashOp=0x00000000
[22:37:38.822]    __Result=0x00000000
[22:37:38.822]  </debugvars>
[22:37:38.822]  
[22:37:38.822]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:37:38.824]    <block atomic="false" info="">
[22:37:38.824]      __var deviceID = 0;
[22:37:38.824]        // -> [deviceID <= 0x00000000]
[22:37:38.824]      __var version = 0;
[22:37:38.824]        // -> [version <= 0x00000000]
[22:37:38.824]      __var partNum = 0;
[22:37:38.824]        // -> [partNum <= 0x00000000]
[22:37:38.824]      __var manuf = 0;
[22:37:38.824]        // -> [manuf <= 0x00000000]
[22:37:38.824]      __var isMSPM0G1X0X_G3X0X = 0;
[22:37:38.825]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:37:38.825]      __var isProduction = 0;
[22:37:38.825]        // -> [isProduction <= 0x00000000]
[22:37:38.825]      __var continueId = 0;
[22:37:38.825]        // -> [continueId <= 0x00000000]
[22:37:38.825]      deviceID =   Read32(0x41C40004);
[22:37:38.829]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:37:38.829]        // -> [deviceID <= 0x2BB8802F]
[22:37:38.829]      version = deviceID >> 28;
[22:37:38.829]        // -> [version <= 0x00000002]
[22:37:38.829]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:37:38.829]        // -> [partNum <= 0x0000BB88]
[22:37:38.829]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:37:38.829]        // -> [manuf <= 0x00000017]
[22:37:38.829]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:37:38.829]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:37:38.829]      isProduction = (version > 0);
[22:37:38.829]        // -> [isProduction <= 0x00000001]
[22:37:38.829]    </block>
[22:37:38.829]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:37:38.829]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:37:38.829]        // =>  FALSE
[22:37:38.829]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:37:38.829]    </control>
[22:37:38.829]    <control if="continueId == 4" while="" timeout="0" info="">
[22:37:38.829]      // if-block "continueId == 4"
[22:37:38.829]        // =>  FALSE
[22:37:38.829]      // skip if-block "continueId == 4"
[22:37:38.829]    </control>
[22:37:38.829]    <control if="!isProduction" while="" timeout="0" info="">
[22:37:38.829]      // if-block "!isProduction"
[22:37:38.829]        // =>  FALSE
[22:37:38.829]      // skip if-block "!isProduction"
[22:37:38.829]    </control>
[22:37:38.833]  </sequence>
[22:37:38.833]  
[22:38:21.175]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:38:21.175]  
[22:38:21.176]  <debugvars>
[22:38:21.176]    // Pre-defined
[22:38:21.176]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:38:21.176]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:38:21.176]    __dp=0x00000000
[22:38:21.176]    __ap=0x00000000
[22:38:21.176]    __traceout=0x00000000      (Trace Disabled)
[22:38:21.176]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:38:21.176]    __FlashAddr=0x00000000
[22:38:21.177]    __FlashLen=0x00000000
[22:38:21.177]    __FlashArg=0x00000000
[22:38:21.177]    __FlashOp=0x00000000
[22:38:21.177]    __Result=0x00000000
[22:38:21.177]  </debugvars>
[22:38:21.177]  
[22:38:21.177]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:38:21.178]    <block atomic="false" info="">
[22:38:21.178]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:38:21.178]        // -> [isSWJ <= 0x00000001]
[22:38:21.178]      __var hasDormant = __protocol & 0x00020000;
[22:38:21.178]        // -> [hasDormant <= 0x00000000]
[22:38:21.178]      __var protType   = __protocol & 0x0000FFFF;
[22:38:21.178]        // -> [protType <= 0x00000002]
[22:38:21.179]    </block>
[22:38:21.179]    <control if="protType == 1" while="" timeout="0" info="">
[22:38:21.179]      // if-block "protType == 1"
[22:38:21.179]        // =>  FALSE
[22:38:21.179]      // skip if-block "protType == 1"
[22:38:21.179]    </control>
[22:38:21.179]    <control if="protType == 2" while="" timeout="0" info="">
[22:38:21.179]      // if-block "protType == 2"
[22:38:21.179]        // =>  TRUE
[22:38:21.179]      <control if="isSWJ" while="" timeout="0" info="">
[22:38:21.179]        // if-block "isSWJ"
[22:38:21.179]          // =>  TRUE
[22:38:21.180]        <control if="hasDormant" while="" timeout="0" info="">
[22:38:21.180]          // if-block "hasDormant"
[22:38:21.180]            // =>  FALSE
[22:38:21.180]          // skip if-block "hasDormant"
[22:38:21.180]        </control>
[22:38:21.180]        <control if="!hasDormant" while="" timeout="0" info="">
[22:38:21.180]          // if-block "!hasDormant"
[22:38:21.180]            // =>  TRUE
[22:38:21.180]          <block atomic="false" info="">
[22:38:21.180]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:38:21.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:38:21.182]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:38:21.188]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:38:21.188]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:38:21.189]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:38:21.190]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:38:21.191]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:38:21.191]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:38:21.193]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:38:21.193]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:38:21.194]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:38:21.194]          </block>
[22:38:21.194]          // end if-block "!hasDormant"
[22:38:21.194]        </control>
[22:38:21.195]        // end if-block "isSWJ"
[22:38:21.195]      </control>
[22:38:21.195]      <control if="!isSWJ" while="" timeout="0" info="">
[22:38:21.195]        // if-block "!isSWJ"
[22:38:21.195]          // =>  FALSE
[22:38:21.195]        // skip if-block "!isSWJ"
[22:38:21.195]      </control>
[22:38:21.195]      <block atomic="false" info="">
[22:38:21.195]        ReadDP(0x0);
[22:38:21.195]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:38:21.195]      </block>
[22:38:21.195]      // end if-block "protType == 2"
[22:38:21.195]    </control>
[22:38:21.199]  </sequence>
[22:38:21.199]  
[22:38:21.199]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:38:21.199]  
[22:38:21.199]  <debugvars>
[22:38:21.199]    // Pre-defined
[22:38:21.199]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:38:21.199]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:38:21.199]    __dp=0x00000000
[22:38:21.199]    __ap=0x00000000
[22:38:21.199]    __traceout=0x00000000      (Trace Disabled)
[22:38:21.199]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:38:21.199]    __FlashAddr=0x00000000
[22:38:21.199]    __FlashLen=0x00000000
[22:38:21.199]    __FlashArg=0x00000000
[22:38:21.199]    __FlashOp=0x00000000
[22:38:21.199]    __Result=0x00000000
[22:38:21.203]  </debugvars>
[22:38:21.203]  
[22:38:21.203]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:38:21.203]    <block atomic="false" info="">
[22:38:21.203]      __var SW_DP_ABORT       = 0x0;
[22:38:21.203]        // -> [SW_DP_ABORT <= 0x00000000]
[22:38:21.203]      __var DP_CTRL_STAT      = 0x4;
[22:38:21.203]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:38:21.203]      __var DP_SELECT         = 0x8;
[22:38:21.203]        // -> [DP_SELECT <= 0x00000008]
[22:38:21.203]      __var powered_down      = 0;
[22:38:21.203]        // -> [powered_down <= 0x00000000]
[22:38:21.203]      WriteDP(DP_SELECT, 0x00000000);
[22:38:21.203]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:38:21.203]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:38:21.207]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:38:21.207]        // -> [powered_down <= 0x00000001]
[22:38:21.207]    </block>
[22:38:21.207]    <control if="powered_down" while="" timeout="0" info="">
[22:38:21.207]      // if-block "powered_down"
[22:38:21.208]        // =>  TRUE
[22:38:21.208]      <block atomic="false" info="">
[22:38:21.208]        Message(0, "Debug/System power-up request sent");
[22:38:21.208]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:38:21.211]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:38:21.211]      </block>
[22:38:21.213]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:38:21.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:38:21.214]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:38:21.214]        // while-condition  =>  FALSE
[22:38:21.214]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:38:21.214]      </control>
[22:38:21.214]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:38:21.214]        // if-block "(__protocol & 0xFFFF) == 1"
[22:38:21.214]          // =>  FALSE
[22:38:21.214]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:38:21.214]      </control>
[22:38:21.214]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:38:21.214]        // if-block "(__protocol & 0xFFFF) == 2"
[22:38:21.215]          // =>  TRUE
[22:38:21.215]        <block atomic="false" info="">
[22:38:21.215]          Message(0, "executing SWD power up");
[22:38:21.215]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:38:21.215]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:38:21.215]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:38:21.221]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:38:21.221]        </block>
[22:38:21.221]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:38:21.221]      </control>
[22:38:21.221]      // end if-block "powered_down"
[22:38:21.221]    </control>
[22:38:21.221]    <block atomic="false" info="">
[22:38:21.221]      __var DEBUG_PORT_VAL    = 0;
[22:38:21.221]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:38:21.221]      __var ACCESS_POINT_VAL  = 0;
[22:38:21.221]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:38:21.221]      __ap = 1; 
[22:38:21.221]        // -> [__ap <= 0x00000001]
[22:38:21.221]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:38:21.224]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:38:21.224]      __ap = 4;
[22:38:21.224]        // -> [__ap <= 0x00000004]
[22:38:21.224]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:38:21.228]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:38:21.228]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:38:21.228]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:38:21.228]    </block>
[22:38:21.228]    <block atomic="false" info="">
[22:38:21.232]      __var nReset = 0x80;
[22:38:21.232]        // -> [nReset <= 0x00000080]
[22:38:21.232]      __var canReadPins = 0;
[22:38:21.232]        // -> [canReadPins <= 0x00000000]
[22:38:21.232]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:38:21.233]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:38:21.233]        // -> [canReadPins <= 0x00000001]
[22:38:21.233]    </block>
[22:38:21.233]    <control if="" while="1" timeout="200" info="">
[22:38:21.233]      // while "1"  (timeout="200")
[22:38:21.233]      // while-condition  =>  TRUE
[22:38:21.233]      // while "1"  (timeout="200")
[22:38:21.233]      // while-condition  =>  TRUE
[22:38:21.233]      // while "1"  (timeout="200")
[22:38:21.233]      // while-condition  =>  TRUE
[22:38:21.233]      // while "1"  (timeout="200")
[22:38:21.233]      // while-condition  =>  TRUE
[22:38:21.233]      // while "1"  (timeout="200")
[22:38:21.233]      // while-condition  =>  TRUE
[22:38:21.233]      // while "1"  (timeout="200")
[22:38:21.233]      // while-condition  =>  TRUE
[22:38:21.233]      // while "1"  (timeout="200")
[22:38:21.233]      // while-condition  =>  TRUE
[22:38:21.233]      // while "1"  (timeout="200")
[22:38:21.233]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.236]      // while-condition  =>  TRUE
[22:38:21.236]      // while "1"  (timeout="200")
[22:38:21.240]      // while-condition  =>  TRUE
[22:38:21.240]      // while "1"  (timeout="200")
[22:38:21.240]      // while  =>  TIMEOUT
[22:38:21.240]      // end while "1"
[22:38:21.240]    </control>
[22:38:21.240]    <control if="canReadPins" while="" timeout="0" info="">
[22:38:21.240]      // if-block "canReadPins"
[22:38:21.240]        // =>  TRUE
[22:38:21.240]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:38:21.240]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:38:21.240]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:38:21.240]        // while-condition  =>  FALSE
[22:38:21.240]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:38:21.240]      </control>
[22:38:21.240]      // end if-block "canReadPins"
[22:38:21.240]    </control>
[22:38:21.240]    <control if="!canReadPins" while="" timeout="0" info="">
[22:38:21.240]      // if-block "!canReadPins"
[22:38:21.240]        // =>  FALSE
[22:38:21.240]      // skip if-block "!canReadPins"
[22:38:21.240]    </control>
[22:38:21.240]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:38:21.240]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:38:21.240]        // =>  TRUE
[22:38:21.240]      <block atomic="false" info="">
[22:38:21.240]        WriteAP(0x00, 0x190008);
[22:38:21.244]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:38:21.245]        WriteAP(0xF0, 0x01);
[22:38:21.248]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:38:21.248]      </block>
[22:38:21.248]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:38:21.248]    </control>
[22:38:21.248]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:38:21.248]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:38:21.248]        // =>  FALSE
[22:38:21.248]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:38:21.248]    </control>
[22:38:21.248]    <block atomic="false" info="">
[22:38:21.248]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:38:21.252]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:38:21.252]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:38:21.252]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:38:21.252]      __ap = 0; //lets make sure we reset the access point selection
[22:38:21.256]        // -> [__ap <= 0x00000000]
[22:38:21.256]    </block>
[22:38:21.256]  </sequence>
[22:38:21.256]  
[22:38:21.276]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:38:21.276]  
[22:38:21.276]  <debugvars>
[22:38:21.276]    // Pre-defined
[22:38:21.276]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:38:21.276]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:38:21.276]    __dp=0x00000000
[22:38:21.276]    __ap=0x00000000
[22:38:21.276]    __traceout=0x00000000      (Trace Disabled)
[22:38:21.276]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:38:21.276]    __FlashAddr=0x00000000
[22:38:21.276]    __FlashLen=0x00000000
[22:38:21.276]    __FlashArg=0x00000000
[22:38:21.276]    __FlashOp=0x00000000
[22:38:21.276]    __Result=0x00000000
[22:38:21.276]  </debugvars>
[22:38:21.276]  
[22:38:21.276]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:38:21.276]    <block atomic="false" info="">
[22:38:21.276]      __var deviceID = 0;
[22:38:21.276]        // -> [deviceID <= 0x00000000]
[22:38:21.276]      __var version = 0;
[22:38:21.276]        // -> [version <= 0x00000000]
[22:38:21.276]      __var partNum = 0;
[22:38:21.276]        // -> [partNum <= 0x00000000]
[22:38:21.276]      __var manuf = 0;
[22:38:21.276]        // -> [manuf <= 0x00000000]
[22:38:21.276]      __var isMSPM0G1X0X_G3X0X = 0;
[22:38:21.280]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:38:21.280]      __var isProduction = 0;
[22:38:21.280]        // -> [isProduction <= 0x00000000]
[22:38:21.280]      __var continueId = 0;
[22:38:21.280]        // -> [continueId <= 0x00000000]
[22:38:21.280]      deviceID =   Read32(0x41C40004);
[22:38:21.284]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:38:21.284]        // -> [deviceID <= 0x2BB8802F]
[22:38:21.284]      version = deviceID >> 28;
[22:38:21.284]        // -> [version <= 0x00000002]
[22:38:21.284]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:38:21.284]        // -> [partNum <= 0x0000BB88]
[22:38:21.284]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:38:21.284]        // -> [manuf <= 0x00000017]
[22:38:21.284]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:38:21.284]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:38:21.284]      isProduction = (version > 0);
[22:38:21.284]        // -> [isProduction <= 0x00000001]
[22:38:21.288]    </block>
[22:38:21.288]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:38:21.288]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:38:21.288]        // =>  FALSE
[22:38:21.288]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:38:21.288]    </control>
[22:38:21.288]    <control if="continueId == 4" while="" timeout="0" info="">
[22:38:21.288]      // if-block "continueId == 4"
[22:38:21.288]        // =>  FALSE
[22:38:21.288]      // skip if-block "continueId == 4"
[22:38:21.288]    </control>
[22:38:21.288]    <control if="!isProduction" while="" timeout="0" info="">
[22:38:21.288]      // if-block "!isProduction"
[22:38:21.288]        // =>  FALSE
[22:38:21.288]      // skip if-block "!isProduction"
[22:38:21.288]    </control>
[22:38:21.288]  </sequence>
[22:38:21.288]  
[22:38:51.101]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:38:51.101]  
[22:38:51.110]  <debugvars>
[22:38:51.110]    // Pre-defined
[22:38:51.110]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:38:51.110]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:38:51.110]    __dp=0x00000000
[22:38:51.110]    __ap=0x00000000
[22:38:51.110]    __traceout=0x00000000      (Trace Disabled)
[22:38:51.110]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:38:51.110]    __FlashAddr=0x00000000
[22:38:51.110]    __FlashLen=0x00000000
[22:38:51.110]    __FlashArg=0x00000000
[22:38:51.110]    __FlashOp=0x00000000
[22:38:51.110]    __Result=0x00000000
[22:38:51.110]  </debugvars>
[22:38:51.110]  
[22:38:51.110]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:38:51.110]    <block atomic="false" info="">
[22:38:51.110]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:38:51.110]        // -> [isSWJ <= 0x00000001]
[22:38:51.110]      __var hasDormant = __protocol & 0x00020000;
[22:38:51.110]        // -> [hasDormant <= 0x00000000]
[22:38:51.110]      __var protType   = __protocol & 0x0000FFFF;
[22:38:51.110]        // -> [protType <= 0x00000002]
[22:38:51.110]    </block>
[22:38:51.110]    <control if="protType == 1" while="" timeout="0" info="">
[22:38:51.110]      // if-block "protType == 1"
[22:38:51.113]        // =>  FALSE
[22:38:51.113]      // skip if-block "protType == 1"
[22:38:51.113]    </control>
[22:38:51.113]    <control if="protType == 2" while="" timeout="0" info="">
[22:38:51.113]      // if-block "protType == 2"
[22:38:51.113]        // =>  TRUE
[22:38:51.113]      <control if="isSWJ" while="" timeout="0" info="">
[22:38:51.113]        // if-block "isSWJ"
[22:38:51.113]          // =>  TRUE
[22:38:51.113]        <control if="hasDormant" while="" timeout="0" info="">
[22:38:51.113]          // if-block "hasDormant"
[22:38:51.113]            // =>  FALSE
[22:38:51.113]          // skip if-block "hasDormant"
[22:38:51.113]        </control>
[22:38:51.113]        <control if="!hasDormant" while="" timeout="0" info="">
[22:38:51.113]          // if-block "!hasDormant"
[22:38:51.113]            // =>  TRUE
[22:38:51.113]          <block atomic="false" info="">
[22:38:51.113]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:38:51.113]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:38:51.113]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:38:51.117]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:38:51.117]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:38:51.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:38:51.120]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:38:51.122]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:38:51.122]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:38:51.122]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:38:51.122]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:38:51.122]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:38:51.122]          </block>
[22:38:51.122]          // end if-block "!hasDormant"
[22:38:51.122]        </control>
[22:38:51.122]        // end if-block "isSWJ"
[22:38:51.122]      </control>
[22:38:51.122]      <control if="!isSWJ" while="" timeout="0" info="">
[22:38:51.122]        // if-block "!isSWJ"
[22:38:51.122]          // =>  FALSE
[22:38:51.126]        // skip if-block "!isSWJ"
[22:38:51.126]      </control>
[22:38:51.126]      <block atomic="false" info="">
[22:38:51.126]        ReadDP(0x0);
[22:38:51.126]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:38:51.126]      </block>
[22:38:51.126]      // end if-block "protType == 2"
[22:38:51.126]    </control>
[22:38:51.126]  </sequence>
[22:38:51.126]  
[22:38:51.131]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:38:51.131]  
[22:38:51.131]  <debugvars>
[22:38:51.131]    // Pre-defined
[22:38:51.131]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:38:51.131]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:38:51.131]    __dp=0x00000000
[22:38:51.131]    __ap=0x00000000
[22:38:51.131]    __traceout=0x00000000      (Trace Disabled)
[22:38:51.131]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:38:51.131]    __FlashAddr=0x00000000
[22:38:51.131]    __FlashLen=0x00000000
[22:38:51.131]    __FlashArg=0x00000000
[22:38:51.131]    __FlashOp=0x00000000
[22:38:51.131]    __Result=0x00000000
[22:38:51.131]  </debugvars>
[22:38:51.131]  
[22:38:51.131]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:38:51.131]    <block atomic="false" info="">
[22:38:51.131]      __var SW_DP_ABORT       = 0x0;
[22:38:51.131]        // -> [SW_DP_ABORT <= 0x00000000]
[22:38:51.131]      __var DP_CTRL_STAT      = 0x4;
[22:38:51.131]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:38:51.131]      __var DP_SELECT         = 0x8;
[22:38:51.131]        // -> [DP_SELECT <= 0x00000008]
[22:38:51.134]      __var powered_down      = 0;
[22:38:51.134]        // -> [powered_down <= 0x00000000]
[22:38:51.134]      WriteDP(DP_SELECT, 0x00000000);
[22:38:51.134]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:38:51.134]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:38:51.134]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:38:51.134]        // -> [powered_down <= 0x00000001]
[22:38:51.134]    </block>
[22:38:51.134]    <control if="powered_down" while="" timeout="0" info="">
[22:38:51.134]      // if-block "powered_down"
[22:38:51.134]        // =>  TRUE
[22:38:51.134]      <block atomic="false" info="">
[22:38:51.134]        Message(0, "Debug/System power-up request sent");
[22:38:51.138]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:38:51.138]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:38:51.138]      </block>
[22:38:51.138]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:38:51.138]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:38:51.146]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:38:51.146]        // while-condition  =>  FALSE
[22:38:51.146]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:38:51.146]      </control>
[22:38:51.146]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:38:51.146]        // if-block "(__protocol & 0xFFFF) == 1"
[22:38:51.146]          // =>  FALSE
[22:38:51.146]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:38:51.146]      </control>
[22:38:51.146]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:38:51.146]        // if-block "(__protocol & 0xFFFF) == 2"
[22:38:51.146]          // =>  TRUE
[22:38:51.146]        <block atomic="false" info="">
[22:38:51.146]          Message(0, "executing SWD power up");
[22:38:51.150]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:38:51.152]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:38:51.152]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:38:51.158]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:38:51.158]        </block>
[22:38:51.158]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:38:51.158]      </control>
[22:38:51.158]      // end if-block "powered_down"
[22:38:51.158]    </control>
[22:38:51.158]    <block atomic="false" info="">
[22:38:51.158]      __var DEBUG_PORT_VAL    = 0;
[22:38:51.158]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:38:51.158]      __var ACCESS_POINT_VAL  = 0;
[22:38:51.158]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:38:51.158]      __ap = 1; 
[22:38:51.158]        // -> [__ap <= 0x00000001]
[22:38:51.158]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:38:51.166]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:38:51.166]      __ap = 4;
[22:38:51.166]        // -> [__ap <= 0x00000004]
[22:38:51.166]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:38:51.171]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:38:51.171]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:38:51.171]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:38:51.171]    </block>
[22:38:51.171]    <block atomic="false" info="">
[22:38:51.171]      __var nReset = 0x80;
[22:38:51.171]        // -> [nReset <= 0x00000080]
[22:38:51.171]      __var canReadPins = 0;
[22:38:51.171]        // -> [canReadPins <= 0x00000000]
[22:38:51.171]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:38:51.175]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:38:51.175]        // -> [canReadPins <= 0x00000001]
[22:38:51.175]    </block>
[22:38:51.175]    <control if="" while="1" timeout="200" info="">
[22:38:51.175]      // while "1"  (timeout="200")
[22:38:51.175]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.176]      // while "1"  (timeout="200")
[22:38:51.176]      // while-condition  =>  TRUE
[22:38:51.179]      // while "1"  (timeout="200")
[22:38:51.179]      // while-condition  =>  TRUE
[22:38:51.179]      // while "1"  (timeout="200")
[22:38:51.179]      // while-condition  =>  TRUE
[22:38:51.179]      // while "1"  (timeout="200")
[22:38:51.179]      // while-condition  =>  TRUE
[22:38:51.179]      // while "1"  (timeout="200")
[22:38:51.179]      // while-condition  =>  TRUE
[22:38:51.179]      // while "1"  (timeout="200")
[22:38:51.179]      // while-condition  =>  TRUE
[22:38:51.179]      // while "1"  (timeout="200")
[22:38:51.180]      // while-condition  =>  TRUE
[22:38:51.180]      // while "1"  (timeout="200")
[22:38:51.180]      // while-condition  =>  TRUE
[22:38:51.180]      // while "1"  (timeout="200")
[22:38:51.180]      // while-condition  =>  TRUE
[22:38:51.180]      // while "1"  (timeout="200")
[22:38:51.180]      // while-condition  =>  TRUE
[22:38:51.180]      // while "1"  (timeout="200")
[22:38:51.180]      // while-condition  =>  TRUE
[22:38:51.180]      // while "1"  (timeout="200")
[22:38:51.181]      // while-condition  =>  TRUE
[22:38:51.181]      // while "1"  (timeout="200")
[22:38:51.181]      // while-condition  =>  TRUE
[22:38:51.181]      // while "1"  (timeout="200")
[22:38:51.181]      // while-condition  =>  TRUE
[22:38:51.181]      // while "1"  (timeout="200")
[22:38:51.181]      // while-condition  =>  TRUE
[22:38:51.181]      // while "1"  (timeout="200")
[22:38:51.181]      // while-condition  =>  TRUE
[22:38:51.181]      // while "1"  (timeout="200")
[22:38:51.181]      // while-condition  =>  TRUE
[22:38:51.182]      // while "1"  (timeout="200")
[22:38:51.182]      // while-condition  =>  TRUE
[22:38:51.182]      // while "1"  (timeout="200")
[22:38:51.182]      // while-condition  =>  TRUE
[22:38:51.182]      // while "1"  (timeout="200")
[22:38:51.182]      // while-condition  =>  TRUE
[22:38:51.182]      // while "1"  (timeout="200")
[22:38:51.182]      // while-condition  =>  TRUE
[22:38:51.182]      // while "1"  (timeout="200")
[22:38:51.182]      // while-condition  =>  TRUE
[22:38:51.182]      // while "1"  (timeout="200")
[22:38:51.183]      // while-condition  =>  TRUE
[22:38:51.183]      // while "1"  (timeout="200")
[22:38:51.183]      // while-condition  =>  TRUE
[22:38:51.183]      // while "1"  (timeout="200")
[22:38:51.183]      // while-condition  =>  TRUE
[22:38:51.183]      // while "1"  (timeout="200")
[22:38:51.183]      // while-condition  =>  TRUE
[22:38:51.183]      // while "1"  (timeout="200")
[22:38:51.183]      // while-condition  =>  TRUE
[22:38:51.183]      // while "1"  (timeout="200")
[22:38:51.183]      // while-condition  =>  TRUE
[22:38:51.183]      // while "1"  (timeout="200")
[22:38:51.183]      // while-condition  =>  TRUE
[22:38:51.183]      // while "1"  (timeout="200")
[22:38:51.183]      // while-condition  =>  TRUE
[22:38:51.183]      // while "1"  (timeout="200")
[22:38:51.183]      // while-condition  =>  TRUE
[22:38:51.183]      // while "1"  (timeout="200")
[22:38:51.186]      // while-condition  =>  TRUE
[22:38:51.186]      // while "1"  (timeout="200")
[22:38:51.186]      // while-condition  =>  TRUE
[22:38:51.186]      // while "1"  (timeout="200")
[22:38:51.186]      // while-condition  =>  TRUE
[22:38:51.186]      // while "1"  (timeout="200")
[22:38:51.186]      // while-condition  =>  TRUE
[22:38:51.186]      // while "1"  (timeout="200")
[22:38:51.186]      // while-condition  =>  TRUE
[22:38:51.186]      // while "1"  (timeout="200")
[22:38:51.186]      // while-condition  =>  TRUE
[22:38:51.186]      // while "1"  (timeout="200")
[22:38:51.186]      // while-condition  =>  TRUE
[22:38:51.187]      // while "1"  (timeout="200")
[22:38:51.187]      // while-condition  =>  TRUE
[22:38:51.187]      // while "1"  (timeout="200")
[22:38:51.187]      // while-condition  =>  TRUE
[22:38:51.187]      // while "1"  (timeout="200")
[22:38:51.187]      // while-condition  =>  TRUE
[22:38:51.187]      // while "1"  (timeout="200")
[22:38:51.187]      // while-condition  =>  TRUE
[22:38:51.187]      // while "1"  (timeout="200")
[22:38:51.187]      // while-condition  =>  TRUE
[22:38:51.187]      // while "1"  (timeout="200")
[22:38:51.187]      // while-condition  =>  TRUE
[22:38:51.187]      // while "1"  (timeout="200")
[22:38:51.187]      // while-condition  =>  TRUE
[22:38:51.188]      // while "1"  (timeout="200")
[22:38:51.188]      // while-condition  =>  TRUE
[22:38:51.188]      // while "1"  (timeout="200")
[22:38:51.188]      // while-condition  =>  TRUE
[22:38:51.188]      // while "1"  (timeout="200")
[22:38:51.188]      // while-condition  =>  TRUE
[22:38:51.188]      // while "1"  (timeout="200")
[22:38:51.188]      // while-condition  =>  TRUE
[22:38:51.188]      // while "1"  (timeout="200")
[22:38:51.188]      // while-condition  =>  TRUE
[22:38:51.188]      // while "1"  (timeout="200")
[22:38:51.188]      // while-condition  =>  TRUE
[22:38:51.188]      // while "1"  (timeout="200")
[22:38:51.188]      // while-condition  =>  TRUE
[22:38:51.188]      // while "1"  (timeout="200")
[22:38:51.188]      // while-condition  =>  TRUE
[22:38:51.188]      // while "1"  (timeout="200")
[22:38:51.188]      // while-condition  =>  TRUE
[22:38:51.190]      // while "1"  (timeout="200")
[22:38:51.190]      // while  =>  TIMEOUT
[22:38:51.190]      // end while "1"
[22:38:51.190]    </control>
[22:38:51.190]    <control if="canReadPins" while="" timeout="0" info="">
[22:38:51.190]      // if-block "canReadPins"
[22:38:51.190]        // =>  TRUE
[22:38:51.190]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:38:51.190]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:38:51.191]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:38:51.191]        // while-condition  =>  FALSE
[22:38:51.191]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:38:51.191]      </control>
[22:38:51.191]      // end if-block "canReadPins"
[22:38:51.191]    </control>
[22:38:51.191]    <control if="!canReadPins" while="" timeout="0" info="">
[22:38:51.191]      // if-block "!canReadPins"
[22:38:51.191]        // =>  FALSE
[22:38:51.191]      // skip if-block "!canReadPins"
[22:38:51.191]    </control>
[22:38:51.191]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:38:51.191]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:38:51.191]        // =>  TRUE
[22:38:51.191]      <block atomic="false" info="">
[22:38:51.191]        WriteAP(0x00, 0x190008);
[22:38:51.195]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:38:51.195]        WriteAP(0xF0, 0x01);
[22:38:51.197]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:38:51.197]      </block>
[22:38:51.199]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:38:51.199]    </control>
[22:38:51.199]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:38:51.200]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:38:51.200]        // =>  FALSE
[22:38:51.200]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:38:51.200]    </control>
[22:38:51.200]    <block atomic="false" info="">
[22:38:51.200]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:38:51.204]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:38:51.204]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:38:51.204]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:38:51.206]      __ap = 0; //lets make sure we reset the access point selection
[22:38:51.206]        // -> [__ap <= 0x00000000]
[22:38:51.206]    </block>
[22:38:51.206]  </sequence>
[22:38:51.206]  
[22:38:51.224]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:38:51.224]  
[22:38:51.224]  <debugvars>
[22:38:51.224]    // Pre-defined
[22:38:51.224]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:38:51.224]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:38:51.224]    __dp=0x00000000
[22:38:51.224]    __ap=0x00000000
[22:38:51.224]    __traceout=0x00000000      (Trace Disabled)
[22:38:51.224]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:38:51.224]    __FlashAddr=0x00000000
[22:38:51.224]    __FlashLen=0x00000000
[22:38:51.224]    __FlashArg=0x00000000
[22:38:51.224]    __FlashOp=0x00000000
[22:38:51.224]    __Result=0x00000000
[22:38:51.224]  </debugvars>
[22:38:51.224]  
[22:38:51.224]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:38:51.224]    <block atomic="false" info="">
[22:38:51.224]      __var deviceID = 0;
[22:38:51.224]        // -> [deviceID <= 0x00000000]
[22:38:51.224]      __var version = 0;
[22:38:51.224]        // -> [version <= 0x00000000]
[22:38:51.224]      __var partNum = 0;
[22:38:51.224]        // -> [partNum <= 0x00000000]
[22:38:51.224]      __var manuf = 0;
[22:38:51.224]        // -> [manuf <= 0x00000000]
[22:38:51.228]      __var isMSPM0G1X0X_G3X0X = 0;
[22:38:51.228]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:38:51.228]      __var isProduction = 0;
[22:38:51.228]        // -> [isProduction <= 0x00000000]
[22:38:51.228]      __var continueId = 0;
[22:38:51.228]        // -> [continueId <= 0x00000000]
[22:38:51.228]      deviceID =   Read32(0x41C40004);
[22:38:51.232]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:38:51.232]        // -> [deviceID <= 0x2BB8802F]
[22:38:51.232]      version = deviceID >> 28;
[22:38:51.232]        // -> [version <= 0x00000002]
[22:38:51.232]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:38:51.232]        // -> [partNum <= 0x0000BB88]
[22:38:51.232]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:38:51.232]        // -> [manuf <= 0x00000017]
[22:38:51.232]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:38:51.232]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:38:51.232]      isProduction = (version > 0);
[22:38:51.232]        // -> [isProduction <= 0x00000001]
[22:38:51.232]    </block>
[22:38:51.232]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:38:51.232]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:38:51.232]        // =>  FALSE
[22:38:51.232]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:38:51.232]    </control>
[22:38:51.236]    <control if="continueId == 4" while="" timeout="0" info="">
[22:38:51.236]      // if-block "continueId == 4"
[22:38:51.236]        // =>  FALSE
[22:38:51.236]      // skip if-block "continueId == 4"
[22:38:51.236]    </control>
[22:38:51.236]    <control if="!isProduction" while="" timeout="0" info="">
[22:38:51.236]      // if-block "!isProduction"
[22:38:51.236]        // =>  FALSE
[22:38:51.236]      // skip if-block "!isProduction"
[22:38:51.236]    </control>
[22:38:51.236]  </sequence>
[22:38:51.236]  
[22:39:07.647]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:39:07.647]  
[22:39:07.648]  <debugvars>
[22:39:07.648]    // Pre-defined
[22:39:07.648]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:39:07.648]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:39:07.648]    __dp=0x00000000
[22:39:07.648]    __ap=0x00000000
[22:39:07.648]    __traceout=0x00000000      (Trace Disabled)
[22:39:07.648]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:39:07.648]    __FlashAddr=0x00000000
[22:39:07.648]    __FlashLen=0x00000000
[22:39:07.648]    __FlashArg=0x00000000
[22:39:07.648]    __FlashOp=0x00000000
[22:39:07.648]    __Result=0x00000000
[22:39:07.648]  </debugvars>
[22:39:07.648]  
[22:39:07.648]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:39:07.648]    <block atomic="false" info="">
[22:39:07.648]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:39:07.648]        // -> [isSWJ <= 0x00000001]
[22:39:07.648]      __var hasDormant = __protocol & 0x00020000;
[22:39:07.648]        // -> [hasDormant <= 0x00000000]
[22:39:07.648]      __var protType   = __protocol & 0x0000FFFF;
[22:39:07.648]        // -> [protType <= 0x00000002]
[22:39:07.648]    </block>
[22:39:07.648]    <control if="protType == 1" while="" timeout="0" info="">
[22:39:07.648]      // if-block "protType == 1"
[22:39:07.648]        // =>  FALSE
[22:39:07.648]      // skip if-block "protType == 1"
[22:39:07.648]    </control>
[22:39:07.651]    <control if="protType == 2" while="" timeout="0" info="">
[22:39:07.651]      // if-block "protType == 2"
[22:39:07.651]        // =>  TRUE
[22:39:07.651]      <control if="isSWJ" while="" timeout="0" info="">
[22:39:07.651]        // if-block "isSWJ"
[22:39:07.651]          // =>  TRUE
[22:39:07.651]        <control if="hasDormant" while="" timeout="0" info="">
[22:39:07.651]          // if-block "hasDormant"
[22:39:07.651]            // =>  FALSE
[22:39:07.651]          // skip if-block "hasDormant"
[22:39:07.651]        </control>
[22:39:07.651]        <control if="!hasDormant" while="" timeout="0" info="">
[22:39:07.651]          // if-block "!hasDormant"
[22:39:07.651]            // =>  TRUE
[22:39:07.651]          <block atomic="false" info="">
[22:39:07.651]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:39:07.651]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:39:07.651]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:39:07.655]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:39:07.655]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:39:07.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:39:07.655]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:39:07.658]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:39:07.659]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:39:07.659]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:39:07.659]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:39:07.659]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:39:07.659]          </block>
[22:39:07.659]          // end if-block "!hasDormant"
[22:39:07.659]        </control>
[22:39:07.659]        // end if-block "isSWJ"
[22:39:07.659]      </control>
[22:39:07.659]      <control if="!isSWJ" while="" timeout="0" info="">
[22:39:07.659]        // if-block "!isSWJ"
[22:39:07.663]          // =>  FALSE
[22:39:07.663]        // skip if-block "!isSWJ"
[22:39:07.663]      </control>
[22:39:07.663]      <block atomic="false" info="">
[22:39:07.663]        ReadDP(0x0);
[22:39:07.668]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:39:07.668]      </block>
[22:39:07.668]      // end if-block "protType == 2"
[22:39:07.668]    </control>
[22:39:07.668]  </sequence>
[22:39:07.668]  
[22:39:07.671]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:39:07.671]  
[22:39:07.671]  <debugvars>
[22:39:07.671]    // Pre-defined
[22:39:07.671]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:39:07.671]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:39:07.671]    __dp=0x00000000
[22:39:07.671]    __ap=0x00000000
[22:39:07.671]    __traceout=0x00000000      (Trace Disabled)
[22:39:07.671]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:39:07.671]    __FlashAddr=0x00000000
[22:39:07.671]    __FlashLen=0x00000000
[22:39:07.671]    __FlashArg=0x00000000
[22:39:07.671]    __FlashOp=0x00000000
[22:39:07.671]    __Result=0x00000000
[22:39:07.671]  </debugvars>
[22:39:07.671]  
[22:39:07.671]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:39:07.671]    <block atomic="false" info="">
[22:39:07.671]      __var SW_DP_ABORT       = 0x0;
[22:39:07.671]        // -> [SW_DP_ABORT <= 0x00000000]
[22:39:07.671]      __var DP_CTRL_STAT      = 0x4;
[22:39:07.671]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:39:07.671]      __var DP_SELECT         = 0x8;
[22:39:07.671]        // -> [DP_SELECT <= 0x00000008]
[22:39:07.671]      __var powered_down      = 0;
[22:39:07.671]        // -> [powered_down <= 0x00000000]
[22:39:07.671]      WriteDP(DP_SELECT, 0x00000000);
[22:39:07.675]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:39:07.675]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:39:07.678]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:39:07.678]        // -> [powered_down <= 0x00000001]
[22:39:07.678]    </block>
[22:39:07.678]    <control if="powered_down" while="" timeout="0" info="">
[22:39:07.678]      // if-block "powered_down"
[22:39:07.678]        // =>  TRUE
[22:39:07.678]      <block atomic="false" info="">
[22:39:07.678]        Message(0, "Debug/System power-up request sent");
[22:39:07.679]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:39:07.684]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:39:07.684]      </block>
[22:39:07.684]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:39:07.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:39:07.684]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:39:07.684]        // while-condition  =>  FALSE
[22:39:07.684]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:39:07.684]      </control>
[22:39:07.684]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:39:07.684]        // if-block "(__protocol & 0xFFFF) == 1"
[22:39:07.684]          // =>  FALSE
[22:39:07.687]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:39:07.687]      </control>
[22:39:07.687]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:39:07.688]        // if-block "(__protocol & 0xFFFF) == 2"
[22:39:07.688]          // =>  TRUE
[22:39:07.688]        <block atomic="false" info="">
[22:39:07.688]          Message(0, "executing SWD power up");
[22:39:07.688]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:39:07.688]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:39:07.688]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:39:07.691]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:39:07.691]        </block>
[22:39:07.691]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:39:07.691]      </control>
[22:39:07.691]      // end if-block "powered_down"
[22:39:07.691]    </control>
[22:39:07.691]    <block atomic="false" info="">
[22:39:07.691]      __var DEBUG_PORT_VAL    = 0;
[22:39:07.691]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:39:07.691]      __var ACCESS_POINT_VAL  = 0;
[22:39:07.691]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:39:07.691]      __ap = 1; 
[22:39:07.691]        // -> [__ap <= 0x00000001]
[22:39:07.691]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:39:07.698]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:39:07.698]      __ap = 4;
[22:39:07.698]        // -> [__ap <= 0x00000004]
[22:39:07.698]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:39:07.701]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:39:07.701]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:39:07.701]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:39:07.703]    </block>
[22:39:07.703]    <block atomic="false" info="">
[22:39:07.703]      __var nReset = 0x80;
[22:39:07.704]        // -> [nReset <= 0x00000080]
[22:39:07.704]      __var canReadPins = 0;
[22:39:07.704]        // -> [canReadPins <= 0x00000000]
[22:39:07.704]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:39:07.704]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:39:07.704]        // -> [canReadPins <= 0x00000001]
[22:39:07.704]    </block>
[22:39:07.704]    <control if="" while="1" timeout="200" info="">
[22:39:07.704]      // while "1"  (timeout="200")
[22:39:07.704]      // while-condition  =>  TRUE
[22:39:07.704]      // while "1"  (timeout="200")
[22:39:07.704]      // while-condition  =>  TRUE
[22:39:07.704]      // while "1"  (timeout="200")
[22:39:07.704]      // while-condition  =>  TRUE
[22:39:07.704]      // while "1"  (timeout="200")
[22:39:07.704]      // while-condition  =>  TRUE
[22:39:07.704]      // while "1"  (timeout="200")
[22:39:07.707]      // while-condition  =>  TRUE
[22:39:07.707]      // while "1"  (timeout="200")
[22:39:07.707]      // while  =>  TIMEOUT
[22:39:07.707]      // end while "1"
[22:39:07.707]    </control>
[22:39:07.707]    <control if="canReadPins" while="" timeout="0" info="">
[22:39:07.707]      // if-block "canReadPins"
[22:39:07.707]        // =>  TRUE
[22:39:07.708]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:39:07.708]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:39:07.709]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:39:07.709]        // while-condition  =>  FALSE
[22:39:07.709]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:39:07.709]      </control>
[22:39:07.709]      // end if-block "canReadPins"
[22:39:07.709]    </control>
[22:39:07.709]    <control if="!canReadPins" while="" timeout="0" info="">
[22:39:07.709]      // if-block "!canReadPins"
[22:39:07.709]        // =>  FALSE
[22:39:07.709]      // skip if-block "!canReadPins"
[22:39:07.709]    </control>
[22:39:07.709]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:39:07.709]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:39:07.709]        // =>  TRUE
[22:39:07.709]      <block atomic="false" info="">
[22:39:07.709]        WriteAP(0x00, 0x190008);
[22:39:07.712]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:39:07.712]        WriteAP(0xF0, 0x01);
[22:39:07.716]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:39:07.716]      </block>
[22:39:07.716]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:39:07.716]    </control>
[22:39:07.716]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:39:07.716]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:39:07.716]        // =>  FALSE
[22:39:07.716]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:39:07.716]    </control>
[22:39:07.716]    <block atomic="false" info="">
[22:39:07.716]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:39:07.721]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:39:07.721]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:39:07.721]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:39:07.722]      __ap = 0; //lets make sure we reset the access point selection
[22:39:07.722]        // -> [__ap <= 0x00000000]
[22:39:07.722]    </block>
[22:39:07.722]  </sequence>
[22:39:07.722]  
[22:39:07.741]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:39:07.741]  
[22:39:07.741]  <debugvars>
[22:39:07.741]    // Pre-defined
[22:39:07.741]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:39:07.741]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:39:07.741]    __dp=0x00000000
[22:39:07.741]    __ap=0x00000000
[22:39:07.741]    __traceout=0x00000000      (Trace Disabled)
[22:39:07.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:39:07.741]    __FlashAddr=0x00000000
[22:39:07.741]    __FlashLen=0x00000000
[22:39:07.741]    __FlashArg=0x00000000
[22:39:07.741]    __FlashOp=0x00000000
[22:39:07.741]    __Result=0x00000000
[22:39:07.741]  </debugvars>
[22:39:07.741]  
[22:39:07.743]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:39:07.743]    <block atomic="false" info="">
[22:39:07.743]      __var deviceID = 0;
[22:39:07.743]        // -> [deviceID <= 0x00000000]
[22:39:07.743]      __var version = 0;
[22:39:07.743]        // -> [version <= 0x00000000]
[22:39:07.743]      __var partNum = 0;
[22:39:07.743]        // -> [partNum <= 0x00000000]
[22:39:07.743]      __var manuf = 0;
[22:39:07.743]        // -> [manuf <= 0x00000000]
[22:39:07.743]      __var isMSPM0G1X0X_G3X0X = 0;
[22:39:07.743]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:39:07.743]      __var isProduction = 0;
[22:39:07.743]        // -> [isProduction <= 0x00000000]
[22:39:07.743]      __var continueId = 0;
[22:39:07.743]        // -> [continueId <= 0x00000000]
[22:39:07.745]      deviceID =   Read32(0x41C40004);
[22:39:07.749]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:39:07.749]        // -> [deviceID <= 0x2BB8802F]
[22:39:07.749]      version = deviceID >> 28;
[22:39:07.749]        // -> [version <= 0x00000002]
[22:39:07.749]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:39:07.749]        // -> [partNum <= 0x0000BB88]
[22:39:07.749]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:39:07.749]        // -> [manuf <= 0x00000017]
[22:39:07.749]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:39:07.749]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:39:07.749]      isProduction = (version > 0);
[22:39:07.749]        // -> [isProduction <= 0x00000001]
[22:39:07.749]    </block>
[22:39:07.749]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:39:07.749]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:39:07.749]        // =>  FALSE
[22:39:07.749]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:39:07.749]    </control>
[22:39:07.749]    <control if="continueId == 4" while="" timeout="0" info="">
[22:39:07.749]      // if-block "continueId == 4"
[22:39:07.749]        // =>  FALSE
[22:39:07.749]      // skip if-block "continueId == 4"
[22:39:07.749]    </control>
[22:39:07.749]    <control if="!isProduction" while="" timeout="0" info="">
[22:39:07.749]      // if-block "!isProduction"
[22:39:07.749]        // =>  FALSE
[22:39:07.749]      // skip if-block "!isProduction"
[22:39:07.749]    </control>
[22:39:07.749]  </sequence>
[22:39:07.749]  
[22:44:48.803]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:44:48.803]  
[22:44:48.811]  <debugvars>
[22:44:48.811]    // Pre-defined
[22:44:48.811]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:44:48.811]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:44:48.811]    __dp=0x00000000
[22:44:48.811]    __ap=0x00000000
[22:44:48.811]    __traceout=0x00000000      (Trace Disabled)
[22:44:48.811]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:44:48.811]    __FlashAddr=0x00000000
[22:44:48.812]    __FlashLen=0x00000000
[22:44:48.812]    __FlashArg=0x00000000
[22:44:48.812]    __FlashOp=0x00000000
[22:44:48.812]    __Result=0x00000000
[22:44:48.813]  </debugvars>
[22:44:48.813]  
[22:44:48.813]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:44:48.813]    <block atomic="false" info="">
[22:44:48.813]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:44:48.813]        // -> [isSWJ <= 0x00000001]
[22:44:48.813]      __var hasDormant = __protocol & 0x00020000;
[22:44:48.813]        // -> [hasDormant <= 0x00000000]
[22:44:48.813]      __var protType   = __protocol & 0x0000FFFF;
[22:44:48.814]        // -> [protType <= 0x00000002]
[22:44:48.814]    </block>
[22:44:48.814]    <control if="protType == 1" while="" timeout="0" info="">
[22:44:48.814]      // if-block "protType == 1"
[22:44:48.814]        // =>  FALSE
[22:44:48.814]      // skip if-block "protType == 1"
[22:44:48.814]    </control>
[22:44:48.814]    <control if="protType == 2" while="" timeout="0" info="">
[22:44:48.815]      // if-block "protType == 2"
[22:44:48.815]        // =>  TRUE
[22:44:48.815]      <control if="isSWJ" while="" timeout="0" info="">
[22:44:48.815]        // if-block "isSWJ"
[22:44:48.815]          // =>  TRUE
[22:44:48.815]        <control if="hasDormant" while="" timeout="0" info="">
[22:44:48.815]          // if-block "hasDormant"
[22:44:48.815]            // =>  FALSE
[22:44:48.815]          // skip if-block "hasDormant"
[22:44:48.815]        </control>
[22:44:48.816]        <control if="!hasDormant" while="" timeout="0" info="">
[22:44:48.816]          // if-block "!hasDormant"
[22:44:48.816]            // =>  TRUE
[22:44:48.816]          <block atomic="false" info="">
[22:44:48.816]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:44:48.817]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:44:48.818]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:44:48.819]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:44:48.819]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:44:48.820]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:44:48.820]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:44:48.822]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:44:48.822]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:44:48.824]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:44:48.824]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:44:48.825]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:44:48.825]          </block>
[22:44:48.825]          // end if-block "!hasDormant"
[22:44:48.825]        </control>
[22:44:48.825]        // end if-block "isSWJ"
[22:44:48.826]      </control>
[22:44:48.826]      <control if="!isSWJ" while="" timeout="0" info="">
[22:44:48.826]        // if-block "!isSWJ"
[22:44:48.826]          // =>  FALSE
[22:44:48.826]        // skip if-block "!isSWJ"
[22:44:48.826]      </control>
[22:44:48.826]      <block atomic="false" info="">
[22:44:48.826]        ReadDP(0x0);
[22:44:48.827]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:44:48.828]      </block>
[22:44:48.828]      // end if-block "protType == 2"
[22:44:48.828]    </control>
[22:44:48.828]  </sequence>
[22:44:48.828]  
[22:44:48.831]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:44:48.831]  
[22:44:48.831]  <debugvars>
[22:44:48.831]    // Pre-defined
[22:44:48.832]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:44:48.832]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:44:48.832]    __dp=0x00000000
[22:44:48.832]    __ap=0x00000000
[22:44:48.832]    __traceout=0x00000000      (Trace Disabled)
[22:44:48.832]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:44:48.832]    __FlashAddr=0x00000000
[22:44:48.832]    __FlashLen=0x00000000
[22:44:48.832]    __FlashArg=0x00000000
[22:44:48.832]    __FlashOp=0x00000000
[22:44:48.832]    __Result=0x00000000
[22:44:48.833]  </debugvars>
[22:44:48.833]  
[22:44:48.833]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:44:48.833]    <block atomic="false" info="">
[22:44:48.833]      __var SW_DP_ABORT       = 0x0;
[22:44:48.833]        // -> [SW_DP_ABORT <= 0x00000000]
[22:44:48.833]      __var DP_CTRL_STAT      = 0x4;
[22:44:48.833]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:44:48.833]      __var DP_SELECT         = 0x8;
[22:44:48.833]        // -> [DP_SELECT <= 0x00000008]
[22:44:48.834]      __var powered_down      = 0;
[22:44:48.834]        // -> [powered_down <= 0x00000000]
[22:44:48.834]      WriteDP(DP_SELECT, 0x00000000);
[22:44:48.835]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:44:48.835]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:44:48.837]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:44:48.837]        // -> [powered_down <= 0x00000001]
[22:44:48.837]    </block>
[22:44:48.837]    <control if="powered_down" while="" timeout="0" info="">
[22:44:48.837]      // if-block "powered_down"
[22:44:48.837]        // =>  TRUE
[22:44:48.837]      <block atomic="false" info="">
[22:44:48.837]        Message(0, "Debug/System power-up request sent");
[22:44:48.839]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:44:48.841]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:44:48.841]      </block>
[22:44:48.841]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:44:48.841]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:44:48.843]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:44:48.843]        // while-condition  =>  FALSE
[22:44:48.843]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:44:48.843]      </control>
[22:44:48.843]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:44:48.843]        // if-block "(__protocol & 0xFFFF) == 1"
[22:44:48.843]          // =>  FALSE
[22:44:48.843]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:44:48.844]      </control>
[22:44:48.844]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:44:48.844]        // if-block "(__protocol & 0xFFFF) == 2"
[22:44:48.844]          // =>  TRUE
[22:44:48.844]        <block atomic="false" info="">
[22:44:48.844]          Message(0, "executing SWD power up");
[22:44:48.847]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:44:48.852]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:44:48.852]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:44:48.854]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:44:48.854]        </block>
[22:44:48.854]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:44:48.854]      </control>
[22:44:48.854]      // end if-block "powered_down"
[22:44:48.854]    </control>
[22:44:48.854]    <block atomic="false" info="">
[22:44:48.855]      __var DEBUG_PORT_VAL    = 0;
[22:44:48.855]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:44:48.855]      __var ACCESS_POINT_VAL  = 0;
[22:44:48.855]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:44:48.855]      __ap = 1; 
[22:44:48.855]        // -> [__ap <= 0x00000001]
[22:44:48.855]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:44:48.863]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:44:48.863]      __ap = 4;
[22:44:48.863]        // -> [__ap <= 0x00000004]
[22:44:48.863]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:44:48.866]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:44:48.866]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:44:48.866]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:44:48.866]    </block>
[22:44:48.866]    <block atomic="false" info="">
[22:44:48.866]      __var nReset = 0x80;
[22:44:48.866]        // -> [nReset <= 0x00000080]
[22:44:48.866]      __var canReadPins = 0;
[22:44:48.866]        // -> [canReadPins <= 0x00000000]
[22:44:48.866]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:44:48.870]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:44:48.870]        // -> [canReadPins <= 0x00000001]
[22:44:48.870]    </block>
[22:44:48.870]    <control if="" while="1" timeout="200" info="">
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.870]      // while-condition  =>  TRUE
[22:44:48.870]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.874]      // while-condition  =>  TRUE
[22:44:48.874]      // while "1"  (timeout="200")
[22:44:48.878]      // while-condition  =>  TRUE
[22:44:48.878]      // while "1"  (timeout="200")
[22:44:48.878]      // while  =>  TIMEOUT
[22:44:48.878]      // end while "1"
[22:44:48.878]    </control>
[22:44:48.878]    <control if="canReadPins" while="" timeout="0" info="">
[22:44:48.878]      // if-block "canReadPins"
[22:44:48.878]        // =>  TRUE
[22:44:48.878]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:44:48.878]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:44:48.884]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:44:48.884]        // while-condition  =>  FALSE
[22:44:48.884]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:44:48.884]      </control>
[22:44:48.884]      // end if-block "canReadPins"
[22:44:48.884]    </control>
[22:44:48.884]    <control if="!canReadPins" while="" timeout="0" info="">
[22:44:48.884]      // if-block "!canReadPins"
[22:44:48.884]        // =>  FALSE
[22:44:48.884]      // skip if-block "!canReadPins"
[22:44:48.884]    </control>
[22:44:48.884]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:44:48.884]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:44:48.884]        // =>  TRUE
[22:44:48.884]      <block atomic="false" info="">
[22:44:48.884]        WriteAP(0x00, 0x190008);
[22:44:48.888]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:44:48.888]        WriteAP(0xF0, 0x01);
[22:44:48.891]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:44:48.891]      </block>
[22:44:48.891]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:44:48.891]    </control>
[22:44:48.891]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:44:48.891]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:44:48.891]        // =>  FALSE
[22:44:48.891]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:44:48.891]    </control>
[22:44:48.892]    <block atomic="false" info="">
[22:44:48.892]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:44:48.907]  
[22:44:48.907]  !!! E310 : Debug access failed - cannot read AP register 0x00000000 (AP '0x00000004'))
[22:44:48.907]  
[22:44:48.911]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:44:48.911]    </block>
[22:44:48.911]  </sequence>
[22:44:48.911]  
[22:44:57.448]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:44:57.448]  
[22:44:57.460]  <debugvars>
[22:44:57.460]    // Pre-defined
[22:44:57.460]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:44:57.460]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:44:57.460]    __dp=0x00000000
[22:44:57.460]    __ap=0x00000000
[22:44:57.460]    __traceout=0x00000000      (Trace Disabled)
[22:44:57.460]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:44:57.460]    __FlashAddr=0x00000000
[22:44:57.460]    __FlashLen=0x00000000
[22:44:57.460]    __FlashArg=0x00000000
[22:44:57.460]    __FlashOp=0x00000000
[22:44:57.460]    __Result=0x00000000
[22:44:57.460]  </debugvars>
[22:44:57.460]  
[22:44:57.460]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:44:57.460]    <block atomic="false" info="">
[22:44:57.460]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:44:57.460]        // -> [isSWJ <= 0x00000001]
[22:44:57.460]      __var hasDormant = __protocol & 0x00020000;
[22:44:57.460]        // -> [hasDormant <= 0x00000000]
[22:44:57.460]      __var protType   = __protocol & 0x0000FFFF;
[22:44:57.460]        // -> [protType <= 0x00000002]
[22:44:57.460]    </block>
[22:44:57.460]    <control if="protType == 1" while="" timeout="0" info="">
[22:44:57.460]      // if-block "protType == 1"
[22:44:57.460]        // =>  FALSE
[22:44:57.460]      // skip if-block "protType == 1"
[22:44:57.460]    </control>
[22:44:57.460]    <control if="protType == 2" while="" timeout="0" info="">
[22:44:57.460]      // if-block "protType == 2"
[22:44:57.460]        // =>  TRUE
[22:44:57.460]      <control if="isSWJ" while="" timeout="0" info="">
[22:44:57.460]        // if-block "isSWJ"
[22:44:57.464]          // =>  TRUE
[22:44:57.464]        <control if="hasDormant" while="" timeout="0" info="">
[22:44:57.464]          // if-block "hasDormant"
[22:44:57.464]            // =>  FALSE
[22:44:57.464]          // skip if-block "hasDormant"
[22:44:57.464]        </control>
[22:44:57.464]        <control if="!hasDormant" while="" timeout="0" info="">
[22:44:57.464]          // if-block "!hasDormant"
[22:44:57.464]            // =>  TRUE
[22:44:57.464]          <block atomic="false" info="">
[22:44:57.464]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:44:57.467]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:44:57.467]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:44:57.470]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:44:57.470]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:44:57.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:44:57.472]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:44:57.474]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:44:57.474]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:44:57.475]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:44:57.475]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:44:57.477]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:44:57.477]          </block>
[22:44:57.477]          // end if-block "!hasDormant"
[22:44:57.477]        </control>
[22:44:57.477]        // end if-block "isSWJ"
[22:44:57.477]      </control>
[22:44:57.477]      <control if="!isSWJ" while="" timeout="0" info="">
[22:44:57.477]        // if-block "!isSWJ"
[22:44:57.477]          // =>  FALSE
[22:44:57.477]        // skip if-block "!isSWJ"
[22:44:57.477]      </control>
[22:44:57.477]      <block atomic="false" info="">
[22:44:57.477]        ReadDP(0x0);
[22:44:57.477]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:44:57.477]      </block>
[22:44:57.477]      // end if-block "protType == 2"
[22:44:57.477]    </control>
[22:44:57.481]  </sequence>
[22:44:57.481]  
[22:44:57.485]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:44:57.485]  
[22:44:57.485]  <debugvars>
[22:44:57.485]    // Pre-defined
[22:44:57.485]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:44:57.485]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:44:57.485]    __dp=0x00000000
[22:44:57.485]    __ap=0x00000000
[22:44:57.485]    __traceout=0x00000000      (Trace Disabled)
[22:44:57.485]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:44:57.485]    __FlashAddr=0x00000000
[22:44:57.485]    __FlashLen=0x00000000
[22:44:57.486]    __FlashArg=0x00000000
[22:44:57.486]    __FlashOp=0x00000000
[22:44:57.486]    __Result=0x00000000
[22:44:57.486]  </debugvars>
[22:44:57.486]  
[22:44:57.486]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:44:57.486]    <block atomic="false" info="">
[22:44:57.486]      __var SW_DP_ABORT       = 0x0;
[22:44:57.488]        // -> [SW_DP_ABORT <= 0x00000000]
[22:44:57.488]      __var DP_CTRL_STAT      = 0x4;
[22:44:57.488]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:44:57.488]      __var DP_SELECT         = 0x8;
[22:44:57.488]        // -> [DP_SELECT <= 0x00000008]
[22:44:57.488]      __var powered_down      = 0;
[22:44:57.488]        // -> [powered_down <= 0x00000000]
[22:44:57.488]      WriteDP(DP_SELECT, 0x00000000);
[22:44:57.489]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:44:57.489]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:44:57.491]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:44:57.491]        // -> [powered_down <= 0x00000001]
[22:44:57.491]    </block>
[22:44:57.491]    <control if="powered_down" while="" timeout="0" info="">
[22:44:57.491]      // if-block "powered_down"
[22:44:57.492]        // =>  TRUE
[22:44:57.492]      <block atomic="false" info="">
[22:44:57.492]        Message(0, "Debug/System power-up request sent");
[22:44:57.494]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:44:57.494]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:44:57.494]      </block>
[22:44:57.494]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:44:57.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:44:57.497]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:44:57.497]        // while-condition  =>  FALSE
[22:44:57.497]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:44:57.497]      </control>
[22:44:57.497]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:44:57.497]        // if-block "(__protocol & 0xFFFF) == 1"
[22:44:57.497]          // =>  FALSE
[22:44:57.498]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:44:57.498]      </control>
[22:44:57.498]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:44:57.498]        // if-block "(__protocol & 0xFFFF) == 2"
[22:44:57.498]          // =>  TRUE
[22:44:57.498]        <block atomic="false" info="">
[22:44:57.498]          Message(0, "executing SWD power up");
[22:44:57.498]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:44:57.501]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:44:57.501]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:44:57.501]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:44:57.501]        </block>
[22:44:57.501]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:44:57.501]      </control>
[22:44:57.506]      // end if-block "powered_down"
[22:44:57.506]    </control>
[22:44:57.506]    <block atomic="false" info="">
[22:44:57.506]      __var DEBUG_PORT_VAL    = 0;
[22:44:57.506]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:44:57.506]      __var ACCESS_POINT_VAL  = 0;
[22:44:57.506]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:44:57.506]      __ap = 1; 
[22:44:57.506]        // -> [__ap <= 0x00000001]
[22:44:57.506]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:44:57.510]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:44:57.510]      __ap = 4;
[22:44:57.510]        // -> [__ap <= 0x00000004]
[22:44:57.511]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:44:57.514]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:44:57.514]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:44:57.514]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:44:57.516]    </block>
[22:44:57.516]    <block atomic="false" info="">
[22:44:57.516]      __var nReset = 0x80;
[22:44:57.516]        // -> [nReset <= 0x00000080]
[22:44:57.516]      __var canReadPins = 0;
[22:44:57.516]        // -> [canReadPins <= 0x00000000]
[22:44:57.517]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:44:57.517]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:44:57.517]        // -> [canReadPins <= 0x00000001]
[22:44:57.517]    </block>
[22:44:57.517]    <control if="" while="1" timeout="200" info="">
[22:44:57.517]      // while "1"  (timeout="200")
[22:44:57.517]      // while-condition  =>  TRUE
[22:44:57.517]      // while "1"  (timeout="200")
[22:44:57.517]      // while-condition  =>  TRUE
[22:44:57.517]      // while "1"  (timeout="200")
[22:44:57.517]      // while-condition  =>  TRUE
[22:44:57.517]      // while "1"  (timeout="200")
[22:44:57.517]      // while-condition  =>  TRUE
[22:44:57.517]      // while "1"  (timeout="200")
[22:44:57.517]      // while-condition  =>  TRUE
[22:44:57.517]      // while "1"  (timeout="200")
[22:44:57.517]      // while-condition  =>  TRUE
[22:44:57.517]      // while "1"  (timeout="200")
[22:44:57.517]      // while-condition  =>  TRUE
[22:44:57.521]      // while "1"  (timeout="200")
[22:44:57.521]      // while  =>  TIMEOUT
[22:44:57.521]      // end while "1"
[22:44:57.521]    </control>
[22:44:57.521]    <control if="canReadPins" while="" timeout="0" info="">
[22:44:57.521]      // if-block "canReadPins"
[22:44:57.521]        // =>  TRUE
[22:44:57.521]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:44:57.521]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:44:57.521]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:44:57.521]        // while-condition  =>  FALSE
[22:44:57.521]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:44:57.521]      </control>
[22:44:57.521]      // end if-block "canReadPins"
[22:44:57.521]    </control>
[22:44:57.521]    <control if="!canReadPins" while="" timeout="0" info="">
[22:44:57.521]      // if-block "!canReadPins"
[22:44:57.525]        // =>  FALSE
[22:44:57.525]      // skip if-block "!canReadPins"
[22:44:57.525]    </control>
[22:44:57.525]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:44:57.525]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:44:57.525]        // =>  TRUE
[22:44:57.525]      <block atomic="false" info="">
[22:44:57.525]        WriteAP(0x00, 0x190008);
[22:44:57.525]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:44:57.525]        WriteAP(0xF0, 0x01);
[22:44:57.531]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:44:57.531]      </block>
[22:44:57.531]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:44:57.531]    </control>
[22:44:57.531]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:44:57.531]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:44:57.531]        // =>  FALSE
[22:44:57.531]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:44:57.531]    </control>
[22:44:57.531]    <block atomic="false" info="">
[22:44:57.531]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:44:57.535]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:44:57.535]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:44:57.535]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:44:57.536]      __ap = 0; //lets make sure we reset the access point selection
[22:44:57.536]        // -> [__ap <= 0x00000000]
[22:44:57.536]    </block>
[22:44:57.536]  </sequence>
[22:44:57.536]  
[22:44:57.560]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:44:57.560]  
[22:44:57.560]  <debugvars>
[22:44:57.560]    // Pre-defined
[22:44:57.560]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:44:57.560]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:44:57.560]    __dp=0x00000000
[22:44:57.560]    __ap=0x00000000
[22:44:57.560]    __traceout=0x00000000      (Trace Disabled)
[22:44:57.560]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:44:57.560]    __FlashAddr=0x00000000
[22:44:57.560]    __FlashLen=0x00000000
[22:44:57.560]    __FlashArg=0x00000000
[22:44:57.560]    __FlashOp=0x00000000
[22:44:57.560]    __Result=0x00000000
[22:44:57.560]  </debugvars>
[22:44:57.560]  
[22:44:57.560]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:44:57.560]    <block atomic="false" info="">
[22:44:57.560]      __var deviceID = 0;
[22:44:57.560]        // -> [deviceID <= 0x00000000]
[22:44:57.560]      __var version = 0;
[22:44:57.562]        // -> [version <= 0x00000000]
[22:44:57.562]      __var partNum = 0;
[22:44:57.562]        // -> [partNum <= 0x00000000]
[22:44:57.562]      __var manuf = 0;
[22:44:57.562]        // -> [manuf <= 0x00000000]
[22:44:57.562]      __var isMSPM0G1X0X_G3X0X = 0;
[22:44:57.562]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:44:57.562]      __var isProduction = 0;
[22:44:57.562]        // -> [isProduction <= 0x00000000]
[22:44:57.562]      __var continueId = 0;
[22:44:57.562]        // -> [continueId <= 0x00000000]
[22:44:57.562]      deviceID =   Read32(0x41C40004);
[22:44:57.568]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:44:57.568]        // -> [deviceID <= 0x2BB8802F]
[22:44:57.568]      version = deviceID >> 28;
[22:44:57.568]        // -> [version <= 0x00000002]
[22:44:57.568]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:44:57.568]        // -> [partNum <= 0x0000BB88]
[22:44:57.568]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:44:57.568]        // -> [manuf <= 0x00000017]
[22:44:57.568]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:44:57.568]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:44:57.568]      isProduction = (version > 0);
[22:44:57.568]        // -> [isProduction <= 0x00000001]
[22:44:57.568]    </block>
[22:44:57.568]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:44:57.568]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:44:57.568]        // =>  FALSE
[22:44:57.568]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:44:57.568]    </control>
[22:44:57.568]    <control if="continueId == 4" while="" timeout="0" info="">
[22:44:57.568]      // if-block "continueId == 4"
[22:44:57.568]        // =>  FALSE
[22:44:57.571]      // skip if-block "continueId == 4"
[22:44:57.571]    </control>
[22:44:57.571]    <control if="!isProduction" while="" timeout="0" info="">
[22:44:57.571]      // if-block "!isProduction"
[22:44:57.571]        // =>  FALSE
[22:44:57.571]      // skip if-block "!isProduction"
[22:44:57.571]    </control>
[22:44:57.571]  </sequence>
[22:44:57.571]  
[22:46:10.437]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[22:46:10.437]  
[22:46:10.445]  <debugvars>
[22:46:10.445]    // Pre-defined
[22:46:10.445]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:46:10.445]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:46:10.445]    __dp=0x00000000
[22:46:10.445]    __ap=0x00000000
[22:46:10.446]    __traceout=0x00000000      (Trace Disabled)
[22:46:10.446]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:46:10.446]    __FlashAddr=0x00000000
[22:46:10.446]    __FlashLen=0x00000000
[22:46:10.446]    __FlashArg=0x00000000
[22:46:10.446]    __FlashOp=0x00000000
[22:46:10.446]    __Result=0x00000000
[22:46:10.446]  </debugvars>
[22:46:10.446]  
[22:46:10.446]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[22:46:10.446]    <block atomic="false" info="">
[22:46:10.446]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[22:46:10.447]        // -> [isSWJ <= 0x00000001]
[22:46:10.447]      __var hasDormant = __protocol & 0x00020000;
[22:46:10.447]        // -> [hasDormant <= 0x00000000]
[22:46:10.447]      __var protType   = __protocol & 0x0000FFFF;
[22:46:10.447]        // -> [protType <= 0x00000002]
[22:46:10.447]    </block>
[22:46:10.448]    <control if="protType == 1" while="" timeout="0" info="">
[22:46:10.448]      // if-block "protType == 1"
[22:46:10.448]        // =>  FALSE
[22:46:10.448]      // skip if-block "protType == 1"
[22:46:10.448]    </control>
[22:46:10.448]    <control if="protType == 2" while="" timeout="0" info="">
[22:46:10.448]      // if-block "protType == 2"
[22:46:10.448]        // =>  TRUE
[22:46:10.448]      <control if="isSWJ" while="" timeout="0" info="">
[22:46:10.448]        // if-block "isSWJ"
[22:46:10.448]          // =>  TRUE
[22:46:10.449]        <control if="hasDormant" while="" timeout="0" info="">
[22:46:10.449]          // if-block "hasDormant"
[22:46:10.449]            // =>  FALSE
[22:46:10.449]          // skip if-block "hasDormant"
[22:46:10.449]        </control>
[22:46:10.449]        <control if="!hasDormant" while="" timeout="0" info="">
[22:46:10.449]          // if-block "!hasDormant"
[22:46:10.449]            // =>  TRUE
[22:46:10.449]          <block atomic="false" info="">
[22:46:10.449]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[22:46:10.450]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:46:10.450]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[22:46:10.452]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[22:46:10.452]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[22:46:10.455]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:46:10.455]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[22:46:10.455]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[22:46:10.455]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[22:46:10.459]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[22:46:10.459]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[22:46:10.460]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[22:46:10.460]          </block>
[22:46:10.460]          // end if-block "!hasDormant"
[22:46:10.460]        </control>
[22:46:10.460]        // end if-block "isSWJ"
[22:46:10.460]      </control>
[22:46:10.460]      <control if="!isSWJ" while="" timeout="0" info="">
[22:46:10.460]        // if-block "!isSWJ"
[22:46:10.460]          // =>  FALSE
[22:46:10.460]        // skip if-block "!isSWJ"
[22:46:10.460]      </control>
[22:46:10.460]      <block atomic="false" info="">
[22:46:10.460]        ReadDP(0x0);
[22:46:10.463]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[22:46:10.463]      </block>
[22:46:10.463]      // end if-block "protType == 2"
[22:46:10.463]    </control>
[22:46:10.463]  </sequence>
[22:46:10.463]  
[22:46:10.467]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[22:46:10.467]  
[22:46:10.467]  <debugvars>
[22:46:10.467]    // Pre-defined
[22:46:10.467]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:46:10.467]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:46:10.467]    __dp=0x00000000
[22:46:10.467]    __ap=0x00000000
[22:46:10.467]    __traceout=0x00000000      (Trace Disabled)
[22:46:10.467]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:46:10.467]    __FlashAddr=0x00000000
[22:46:10.467]    __FlashLen=0x00000000
[22:46:10.467]    __FlashArg=0x00000000
[22:46:10.467]    __FlashOp=0x00000000
[22:46:10.467]    __Result=0x00000000
[22:46:10.467]  </debugvars>
[22:46:10.467]  
[22:46:10.467]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[22:46:10.467]    <block atomic="false" info="">
[22:46:10.467]      __var SW_DP_ABORT       = 0x0;
[22:46:10.467]        // -> [SW_DP_ABORT <= 0x00000000]
[22:46:10.470]      __var DP_CTRL_STAT      = 0x4;
[22:46:10.470]        // -> [DP_CTRL_STAT <= 0x00000004]
[22:46:10.470]      __var DP_SELECT         = 0x8;
[22:46:10.470]        // -> [DP_SELECT <= 0x00000008]
[22:46:10.470]      __var powered_down      = 0;
[22:46:10.470]        // -> [powered_down <= 0x00000000]
[22:46:10.470]      WriteDP(DP_SELECT, 0x00000000);
[22:46:10.471]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[22:46:10.471]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[22:46:10.471]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[22:46:10.471]        // -> [powered_down <= 0x00000001]
[22:46:10.471]    </block>
[22:46:10.471]    <control if="powered_down" while="" timeout="0" info="">
[22:46:10.471]      // if-block "powered_down"
[22:46:10.471]        // =>  TRUE
[22:46:10.471]      <block atomic="false" info="">
[22:46:10.471]        Message(0, "Debug/System power-up request sent");
[22:46:10.471]        WriteDP(DP_CTRL_STAT, 0x50000000);
[22:46:10.475]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[22:46:10.475]      </block>
[22:46:10.475]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[22:46:10.475]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[22:46:10.478]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[22:46:10.478]        // while-condition  =>  FALSE
[22:46:10.478]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[22:46:10.478]      </control>
[22:46:10.478]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[22:46:10.478]        // if-block "(__protocol & 0xFFFF) == 1"
[22:46:10.478]          // =>  FALSE
[22:46:10.478]        // skip if-block "(__protocol & 0xFFFF) == 1"
[22:46:10.478]      </control>
[22:46:10.478]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[22:46:10.478]        // if-block "(__protocol & 0xFFFF) == 2"
[22:46:10.478]          // =>  TRUE
[22:46:10.478]        <block atomic="false" info="">
[22:46:10.478]          Message(0, "executing SWD power up");
[22:46:10.478]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[22:46:10.481]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[22:46:10.481]          WriteDP(SW_DP_ABORT, 0x0000001E);
[22:46:10.483]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[22:46:10.483]        </block>
[22:46:10.483]        // end if-block "(__protocol & 0xFFFF) == 2"
[22:46:10.483]      </control>
[22:46:10.483]      // end if-block "powered_down"
[22:46:10.483]    </control>
[22:46:10.483]    <block atomic="false" info="">
[22:46:10.483]      __var DEBUG_PORT_VAL    = 0;
[22:46:10.483]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[22:46:10.483]      __var ACCESS_POINT_VAL  = 0;
[22:46:10.483]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[22:46:10.483]      __ap = 1; 
[22:46:10.483]        // -> [__ap <= 0x00000001]
[22:46:10.483]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[22:46:10.487]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[22:46:10.487]      __ap = 4;
[22:46:10.487]        // -> [__ap <= 0x00000004]
[22:46:10.487]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:46:10.491]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[22:46:10.491]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[22:46:10.491]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:46:10.491]    </block>
[22:46:10.491]    <block atomic="false" info="">
[22:46:10.491]      __var nReset = 0x80;
[22:46:10.491]        // -> [nReset <= 0x00000080]
[22:46:10.491]      __var canReadPins = 0;
[22:46:10.491]        // -> [canReadPins <= 0x00000000]
[22:46:10.491]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[22:46:10.497]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[22:46:10.497]        // -> [canReadPins <= 0x00000001]
[22:46:10.497]    </block>
[22:46:10.497]    <control if="" while="1" timeout="200" info="">
[22:46:10.497]      // while "1"  (timeout="200")
[22:46:10.497]      // while-condition  =>  TRUE
[22:46:10.497]      // while "1"  (timeout="200")
[22:46:10.497]      // while-condition  =>  TRUE
[22:46:10.497]      // while "1"  (timeout="200")
[22:46:10.497]      // while-condition  =>  TRUE
[22:46:10.497]      // while "1"  (timeout="200")
[22:46:10.497]      // while-condition  =>  TRUE
[22:46:10.497]      // while "1"  (timeout="200")
[22:46:10.497]      // while-condition  =>  TRUE
[22:46:10.497]      // while "1"  (timeout="200")
[22:46:10.497]      // while-condition  =>  TRUE
[22:46:10.497]      // while "1"  (timeout="200")
[22:46:10.497]      // while-condition  =>  TRUE
[22:46:10.497]      // while "1"  (timeout="200")
[22:46:10.497]      // while-condition  =>  TRUE
[22:46:10.497]      // while "1"  (timeout="200")
[22:46:10.497]      // while-condition  =>  TRUE
[22:46:10.497]      // while "1"  (timeout="200")
[22:46:10.497]      // while-condition  =>  TRUE
[22:46:10.497]      // while "1"  (timeout="200")
[22:46:10.497]      // while-condition  =>  TRUE
[22:46:10.497]      // while "1"  (timeout="200")
[22:46:10.497]      // while-condition  =>  TRUE
[22:46:10.497]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.500]      // while "1"  (timeout="200")
[22:46:10.500]      // while-condition  =>  TRUE
[22:46:10.504]      // while "1"  (timeout="200")
[22:46:10.504]      // while  =>  TIMEOUT
[22:46:10.504]      // end while "1"
[22:46:10.504]    </control>
[22:46:10.504]    <control if="canReadPins" while="" timeout="0" info="">
[22:46:10.504]      // if-block "canReadPins"
[22:46:10.504]        // =>  TRUE
[22:46:10.504]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[22:46:10.504]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[22:46:10.504]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[22:46:10.504]        // while-condition  =>  FALSE
[22:46:10.504]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[22:46:10.504]      </control>
[22:46:10.504]      // end if-block "canReadPins"
[22:46:10.504]    </control>
[22:46:10.504]    <control if="!canReadPins" while="" timeout="0" info="">
[22:46:10.504]      // if-block "!canReadPins"
[22:46:10.504]        // =>  FALSE
[22:46:10.504]      // skip if-block "!canReadPins"
[22:46:10.504]    </control>
[22:46:10.504]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[22:46:10.504]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:46:10.504]        // =>  TRUE
[22:46:10.508]      <block atomic="false" info="">
[22:46:10.508]        WriteAP(0x00, 0x190008);
[22:46:10.508]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[22:46:10.510]        WriteAP(0xF0, 0x01);
[22:46:10.513]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[22:46:10.513]      </block>
[22:46:10.513]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[22:46:10.513]    </control>
[22:46:10.513]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[22:46:10.513]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:46:10.513]        // =>  FALSE
[22:46:10.513]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[22:46:10.513]    </control>
[22:46:10.514]    <block atomic="false" info="">
[22:46:10.514]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[22:46:10.516]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[22:46:10.516]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[22:46:10.516]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[22:46:10.520]      __ap = 0; //lets make sure we reset the access point selection
[22:46:10.520]        // -> [__ap <= 0x00000000]
[22:46:10.520]    </block>
[22:46:10.520]  </sequence>
[22:46:10.520]  
[22:46:10.545]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[22:46:10.545]  
[22:46:10.545]  <debugvars>
[22:46:10.545]    // Pre-defined
[22:46:10.545]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[22:46:10.545]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[22:46:10.545]    __dp=0x00000000
[22:46:10.545]    __ap=0x00000000
[22:46:10.545]    __traceout=0x00000000      (Trace Disabled)
[22:46:10.545]    __errorcontrol=0x00000000  (Skip Errors="False")
[22:46:10.545]    __FlashAddr=0x00000000
[22:46:10.545]    __FlashLen=0x00000000
[22:46:10.545]    __FlashArg=0x00000000
[22:46:10.548]    __FlashOp=0x00000000
[22:46:10.548]    __Result=0x00000000
[22:46:10.548]  </debugvars>
[22:46:10.548]  
[22:46:10.548]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[22:46:10.548]    <block atomic="false" info="">
[22:46:10.548]      __var deviceID = 0;
[22:46:10.548]        // -> [deviceID <= 0x00000000]
[22:46:10.548]      __var version = 0;
[22:46:10.548]        // -> [version <= 0x00000000]
[22:46:10.548]      __var partNum = 0;
[22:46:10.548]        // -> [partNum <= 0x00000000]
[22:46:10.548]      __var manuf = 0;
[22:46:10.548]        // -> [manuf <= 0x00000000]
[22:46:10.548]      __var isMSPM0G1X0X_G3X0X = 0;
[22:46:10.548]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[22:46:10.548]      __var isProduction = 0;
[22:46:10.549]        // -> [isProduction <= 0x00000000]
[22:46:10.549]      __var continueId = 0;
[22:46:10.549]        // -> [continueId <= 0x00000000]
[22:46:10.549]      deviceID =   Read32(0x41C40004);
[22:46:10.553]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[22:46:10.554]        // -> [deviceID <= 0x2BB8802F]
[22:46:10.554]      version = deviceID >> 28;
[22:46:10.554]        // -> [version <= 0x00000002]
[22:46:10.554]      partNum = (deviceID & 0x0FFFF000) >> 12;
[22:46:10.554]        // -> [partNum <= 0x0000BB88]
[22:46:10.554]      manuf = (deviceID & 0x00000FFE) >> 1;
[22:46:10.554]        // -> [manuf <= 0x00000017]
[22:46:10.554]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[22:46:10.554]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[22:46:10.554]      isProduction = (version > 0);
[22:46:10.554]        // -> [isProduction <= 0x00000001]
[22:46:10.554]    </block>
[22:46:10.554]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[22:46:10.554]      // if-block "!isMSPM0G1X0X_G3X0X"
[22:46:10.556]        // =>  FALSE
[22:46:10.556]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[22:46:10.556]    </control>
[22:46:10.556]    <control if="continueId == 4" while="" timeout="0" info="">
[22:46:10.556]      // if-block "continueId == 4"
[22:46:10.556]        // =>  FALSE
[22:46:10.556]      // skip if-block "continueId == 4"
[22:46:10.556]    </control>
[22:46:10.556]    <control if="!isProduction" while="" timeout="0" info="">
[22:46:10.556]      // if-block "!isProduction"
[22:46:10.556]        // =>  FALSE
[22:46:10.558]      // skip if-block "!isProduction"
[22:46:10.558]    </control>
[22:46:10.558]  </sequence>
[22:46:10.558]  
[23:00:29.497]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:00:29.497]  
[23:00:29.497]  <debugvars>
[23:00:29.497]    // Pre-defined
[23:00:29.497]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:29.497]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:00:29.497]    __dp=0x00000000
[23:00:29.497]    __ap=0x00000000
[23:00:29.497]    __traceout=0x00000000      (Trace Disabled)
[23:00:29.497]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:29.497]    __FlashAddr=0x00000000
[23:00:29.497]    __FlashLen=0x00000000
[23:00:29.497]    __FlashArg=0x00000000
[23:00:29.497]    __FlashOp=0x00000000
[23:00:29.497]    __Result=0x00000000
[23:00:29.497]  </debugvars>
[23:00:29.497]  
[23:00:29.501]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:00:29.501]    <block atomic="false" info="">
[23:00:29.501]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:00:29.501]        // -> [isSWJ <= 0x00000001]
[23:00:29.501]      __var hasDormant = __protocol & 0x00020000;
[23:00:29.501]        // -> [hasDormant <= 0x00000000]
[23:00:29.501]      __var protType   = __protocol & 0x0000FFFF;
[23:00:29.501]        // -> [protType <= 0x00000002]
[23:00:29.501]    </block>
[23:00:29.501]    <control if="protType == 1" while="" timeout="0" info="">
[23:00:29.501]      // if-block "protType == 1"
[23:00:29.501]        // =>  FALSE
[23:00:29.501]      // skip if-block "protType == 1"
[23:00:29.501]    </control>
[23:00:29.501]    <control if="protType == 2" while="" timeout="0" info="">
[23:00:29.501]      // if-block "protType == 2"
[23:00:29.501]        // =>  TRUE
[23:00:29.501]      <control if="isSWJ" while="" timeout="0" info="">
[23:00:29.501]        // if-block "isSWJ"
[23:00:29.501]          // =>  TRUE
[23:00:29.501]        <control if="hasDormant" while="" timeout="0" info="">
[23:00:29.501]          // if-block "hasDormant"
[23:00:29.501]            // =>  FALSE
[23:00:29.501]          // skip if-block "hasDormant"
[23:00:29.501]        </control>
[23:00:29.501]        <control if="!hasDormant" while="" timeout="0" info="">
[23:00:29.501]          // if-block "!hasDormant"
[23:00:29.501]            // =>  TRUE
[23:00:29.501]          <block atomic="false" info="">
[23:00:29.501]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:00:29.505]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:29.505]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:00:29.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:00:29.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:00:29.507]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:29.507]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:00:29.509]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:00:29.509]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:00:29.509]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:00:29.509]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:00:29.513]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:00:29.513]          </block>
[23:00:29.513]          // end if-block "!hasDormant"
[23:00:29.513]        </control>
[23:00:29.513]        // end if-block "isSWJ"
[23:00:29.513]      </control>
[23:00:29.513]      <control if="!isSWJ" while="" timeout="0" info="">
[23:00:29.513]        // if-block "!isSWJ"
[23:00:29.513]          // =>  FALSE
[23:00:29.513]        // skip if-block "!isSWJ"
[23:00:29.513]      </control>
[23:00:29.513]      <block atomic="false" info="">
[23:00:29.513]        ReadDP(0x0);
[23:00:29.513]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:00:29.517]      </block>
[23:00:29.517]      // end if-block "protType == 2"
[23:00:29.517]    </control>
[23:00:29.517]  </sequence>
[23:00:29.517]  
[23:00:29.521]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:00:29.521]  
[23:00:29.521]  <debugvars>
[23:00:29.521]    // Pre-defined
[23:00:29.521]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:29.521]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:00:29.521]    __dp=0x00000000
[23:00:29.521]    __ap=0x00000000
[23:00:29.521]    __traceout=0x00000000      (Trace Disabled)
[23:00:29.521]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:29.521]    __FlashAddr=0x00000000
[23:00:29.521]    __FlashLen=0x00000000
[23:00:29.521]    __FlashArg=0x00000000
[23:00:29.521]    __FlashOp=0x00000000
[23:00:29.521]    __Result=0x00000000
[23:00:29.521]  </debugvars>
[23:00:29.521]  
[23:00:29.521]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:00:29.521]    <block atomic="false" info="">
[23:00:29.521]      __var SW_DP_ABORT       = 0x0;
[23:00:29.521]        // -> [SW_DP_ABORT <= 0x00000000]
[23:00:29.521]      __var DP_CTRL_STAT      = 0x4;
[23:00:29.521]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:00:29.521]      __var DP_SELECT         = 0x8;
[23:00:29.521]        // -> [DP_SELECT <= 0x00000008]
[23:00:29.521]      __var powered_down      = 0;
[23:00:29.521]        // -> [powered_down <= 0x00000000]
[23:00:29.521]      WriteDP(DP_SELECT, 0x00000000);
[23:00:29.525]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:00:29.525]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:00:29.529]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:00:29.529]        // -> [powered_down <= 0x00000001]
[23:00:29.529]    </block>
[23:00:29.529]    <control if="powered_down" while="" timeout="0" info="">
[23:00:29.529]      // if-block "powered_down"
[23:00:29.529]        // =>  TRUE
[23:00:29.529]      <block atomic="false" info="">
[23:00:29.529]        Message(0, "Debug/System power-up request sent");
[23:00:29.533]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:00:29.533]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:00:29.533]      </block>
[23:00:29.533]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:00:29.533]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:00:29.537]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:00:29.537]        // while-condition  =>  FALSE
[23:00:29.537]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:00:29.537]      </control>
[23:00:29.537]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:00:29.537]        // if-block "(__protocol & 0xFFFF) == 1"
[23:00:29.537]          // =>  FALSE
[23:00:29.537]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:00:29.537]      </control>
[23:00:29.537]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:00:29.537]        // if-block "(__protocol & 0xFFFF) == 2"
[23:00:29.537]          // =>  TRUE
[23:00:29.537]        <block atomic="false" info="">
[23:00:29.537]          Message(0, "executing SWD power up");
[23:00:29.537]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:00:29.541]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:00:29.541]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:00:29.542]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:00:29.542]        </block>
[23:00:29.542]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:00:29.542]      </control>
[23:00:29.542]      // end if-block "powered_down"
[23:00:29.542]    </control>
[23:00:29.542]    <block atomic="false" info="">
[23:00:29.542]      __var DEBUG_PORT_VAL    = 0;
[23:00:29.542]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:00:29.542]      __var ACCESS_POINT_VAL  = 0;
[23:00:29.542]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:00:29.542]      __ap = 1; 
[23:00:29.542]        // -> [__ap <= 0x00000001]
[23:00:29.542]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:00:29.544]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:00:29.544]      __ap = 4;
[23:00:29.549]        // -> [__ap <= 0x00000004]
[23:00:29.549]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:00:29.553]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:00:29.553]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:00:29.553]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:00:29.553]    </block>
[23:00:29.553]    <block atomic="false" info="">
[23:00:29.553]      __var nReset = 0x80;
[23:00:29.553]        // -> [nReset <= 0x00000080]
[23:00:29.553]      __var canReadPins = 0;
[23:00:29.553]        // -> [canReadPins <= 0x00000000]
[23:00:29.553]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:00:29.557]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:00:29.557]        // -> [canReadPins <= 0x00000001]
[23:00:29.557]    </block>
[23:00:29.557]    <control if="" while="1" timeout="200" info="">
[23:00:29.557]      // while "1"  (timeout="200")
[23:00:29.557]      // while-condition  =>  TRUE
[23:00:29.557]      // while "1"  (timeout="200")
[23:00:29.557]      // while-condition  =>  TRUE
[23:00:29.557]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.561]      // while "1"  (timeout="200")
[23:00:29.561]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.565]      // while "1"  (timeout="200")
[23:00:29.565]      // while-condition  =>  TRUE
[23:00:29.569]      // while "1"  (timeout="200")
[23:00:29.569]      // while  =>  TIMEOUT
[23:00:29.569]      // end while "1"
[23:00:29.569]    </control>
[23:00:29.569]    <control if="canReadPins" while="" timeout="0" info="">
[23:00:29.569]      // if-block "canReadPins"
[23:00:29.569]        // =>  TRUE
[23:00:29.569]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:00:29.569]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:00:29.577]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:00:29.577]        // while-condition  =>  FALSE
[23:00:29.577]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:00:29.577]      </control>
[23:00:29.577]      // end if-block "canReadPins"
[23:00:29.577]    </control>
[23:00:29.577]    <control if="!canReadPins" while="" timeout="0" info="">
[23:00:29.577]      // if-block "!canReadPins"
[23:00:29.577]        // =>  FALSE
[23:00:29.577]      // skip if-block "!canReadPins"
[23:00:29.577]    </control>
[23:00:29.577]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:00:29.577]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:00:29.577]        // =>  TRUE
[23:00:29.577]      <block atomic="false" info="">
[23:00:29.577]        WriteAP(0x00, 0x190008);
[23:00:29.581]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:00:29.581]        WriteAP(0xF0, 0x01);
[23:00:29.585]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:00:29.585]      </block>
[23:00:29.585]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:00:29.585]    </control>
[23:00:29.585]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:00:29.585]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:00:29.585]        // =>  FALSE
[23:00:29.585]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:00:29.585]    </control>
[23:00:29.585]    <block atomic="false" info="">
[23:00:29.585]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:00:29.593]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:00:29.593]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:00:29.593]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:00:29.597]      __ap = 0; //lets make sure we reset the access point selection
[23:00:29.597]        // -> [__ap <= 0x00000000]
[23:00:29.597]    </block>
[23:00:29.597]  </sequence>
[23:00:29.597]  
[23:00:29.620]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:00:29.620]  
[23:00:29.620]  <debugvars>
[23:00:29.620]    // Pre-defined
[23:00:29.620]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:00:29.620]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:00:29.623]    __dp=0x00000000
[23:00:29.623]    __ap=0x00000000
[23:00:29.623]    __traceout=0x00000000      (Trace Disabled)
[23:00:29.623]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:00:29.623]    __FlashAddr=0x00000000
[23:00:29.623]    __FlashLen=0x00000000
[23:00:29.623]    __FlashArg=0x00000000
[23:00:29.623]    __FlashOp=0x00000000
[23:00:29.623]    __Result=0x00000000
[23:00:29.623]  </debugvars>
[23:00:29.623]  
[23:00:29.623]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:00:29.623]    <block atomic="false" info="">
[23:00:29.623]      __var deviceID = 0;
[23:00:29.623]        // -> [deviceID <= 0x00000000]
[23:00:29.623]      __var version = 0;
[23:00:29.624]        // -> [version <= 0x00000000]
[23:00:29.624]      __var partNum = 0;
[23:00:29.624]        // -> [partNum <= 0x00000000]
[23:00:29.624]      __var manuf = 0;
[23:00:29.624]        // -> [manuf <= 0x00000000]
[23:00:29.625]      __var isMSPM0G1X0X_G3X0X = 0;
[23:00:29.625]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:00:29.625]      __var isProduction = 0;
[23:00:29.625]        // -> [isProduction <= 0x00000000]
[23:00:29.625]      __var continueId = 0;
[23:00:29.625]        // -> [continueId <= 0x00000000]
[23:00:29.625]      deviceID =   Read32(0x41C40004);
[23:00:29.628]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:00:29.628]        // -> [deviceID <= 0x2BB8802F]
[23:00:29.628]      version = deviceID >> 28;
[23:00:29.628]        // -> [version <= 0x00000002]
[23:00:29.628]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:00:29.628]        // -> [partNum <= 0x0000BB88]
[23:00:29.628]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:00:29.628]        // -> [manuf <= 0x00000017]
[23:00:29.628]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:00:29.628]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:00:29.628]      isProduction = (version > 0);
[23:00:29.628]        // -> [isProduction <= 0x00000001]
[23:00:29.628]    </block>
[23:00:29.628]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:00:29.628]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:00:29.628]        // =>  FALSE
[23:00:29.628]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:00:29.628]    </control>
[23:00:29.628]    <control if="continueId == 4" while="" timeout="0" info="">
[23:00:29.628]      // if-block "continueId == 4"
[23:00:29.632]        // =>  FALSE
[23:00:29.632]      // skip if-block "continueId == 4"
[23:00:29.632]    </control>
[23:00:29.632]    <control if="!isProduction" while="" timeout="0" info="">
[23:00:29.632]      // if-block "!isProduction"
[23:00:29.632]        // =>  FALSE
[23:00:29.632]      // skip if-block "!isProduction"
[23:00:29.632]    </control>
[23:00:29.632]  </sequence>
[23:00:29.632]  
[23:10:29.852]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:10:29.852]  
[23:10:29.861]  <debugvars>
[23:10:29.861]    // Pre-defined
[23:10:29.861]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:29.861]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:10:29.861]    __dp=0x00000000
[23:10:29.861]    __ap=0x00000000
[23:10:29.861]    __traceout=0x00000000      (Trace Disabled)
[23:10:29.861]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:29.861]    __FlashAddr=0x00000000
[23:10:29.861]    __FlashLen=0x00000000
[23:10:29.861]    __FlashArg=0x00000000
[23:10:29.861]    __FlashOp=0x00000000
[23:10:29.861]    __Result=0x00000000
[23:10:29.861]  </debugvars>
[23:10:29.861]  
[23:10:29.861]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:10:29.861]    <block atomic="false" info="">
[23:10:29.861]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:10:29.861]        // -> [isSWJ <= 0x00000001]
[23:10:29.861]      __var hasDormant = __protocol & 0x00020000;
[23:10:29.861]        // -> [hasDormant <= 0x00000000]
[23:10:29.861]      __var protType   = __protocol & 0x0000FFFF;
[23:10:29.861]        // -> [protType <= 0x00000002]
[23:10:29.864]    </block>
[23:10:29.864]    <control if="protType == 1" while="" timeout="0" info="">
[23:10:29.864]      // if-block "protType == 1"
[23:10:29.864]        // =>  FALSE
[23:10:29.864]      // skip if-block "protType == 1"
[23:10:29.864]    </control>
[23:10:29.864]    <control if="protType == 2" while="" timeout="0" info="">
[23:10:29.864]      // if-block "protType == 2"
[23:10:29.864]        // =>  TRUE
[23:10:29.864]      <control if="isSWJ" while="" timeout="0" info="">
[23:10:29.864]        // if-block "isSWJ"
[23:10:29.864]          // =>  TRUE
[23:10:29.864]        <control if="hasDormant" while="" timeout="0" info="">
[23:10:29.864]          // if-block "hasDormant"
[23:10:29.864]            // =>  FALSE
[23:10:29.864]          // skip if-block "hasDormant"
[23:10:29.864]        </control>
[23:10:29.864]        <control if="!hasDormant" while="" timeout="0" info="">
[23:10:29.864]          // if-block "!hasDormant"
[23:10:29.864]            // =>  TRUE
[23:10:29.864]          <block atomic="false" info="">
[23:10:29.864]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:10:29.864]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:29.868]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:10:29.868]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:10:29.870]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:10:29.870]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:29.870]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:10:29.872]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:10:29.872]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:10:29.874]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:10:29.874]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:10:29.874]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:10:29.874]          </block>
[23:10:29.874]          // end if-block "!hasDormant"
[23:10:29.874]        </control>
[23:10:29.874]        // end if-block "isSWJ"
[23:10:29.874]      </control>
[23:10:29.874]      <control if="!isSWJ" while="" timeout="0" info="">
[23:10:29.874]        // if-block "!isSWJ"
[23:10:29.876]          // =>  FALSE
[23:10:29.876]        // skip if-block "!isSWJ"
[23:10:29.876]      </control>
[23:10:29.876]      <block atomic="false" info="">
[23:10:29.876]        ReadDP(0x0);
[23:10:29.876]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:10:29.876]      </block>
[23:10:29.876]      // end if-block "protType == 2"
[23:10:29.876]    </control>
[23:10:29.876]  </sequence>
[23:10:29.876]  
[23:10:29.881]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:10:29.881]  
[23:10:29.881]  <debugvars>
[23:10:29.881]    // Pre-defined
[23:10:29.881]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:29.881]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:10:29.881]    __dp=0x00000000
[23:10:29.881]    __ap=0x00000000
[23:10:29.881]    __traceout=0x00000000      (Trace Disabled)
[23:10:29.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:29.881]    __FlashAddr=0x00000000
[23:10:29.881]    __FlashLen=0x00000000
[23:10:29.881]    __FlashArg=0x00000000
[23:10:29.881]    __FlashOp=0x00000000
[23:10:29.881]    __Result=0x00000000
[23:10:29.881]  </debugvars>
[23:10:29.884]  
[23:10:29.884]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:10:29.884]    <block atomic="false" info="">
[23:10:29.884]      __var SW_DP_ABORT       = 0x0;
[23:10:29.884]        // -> [SW_DP_ABORT <= 0x00000000]
[23:10:29.884]      __var DP_CTRL_STAT      = 0x4;
[23:10:29.884]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:10:29.884]      __var DP_SELECT         = 0x8;
[23:10:29.884]        // -> [DP_SELECT <= 0x00000008]
[23:10:29.884]      __var powered_down      = 0;
[23:10:29.884]        // -> [powered_down <= 0x00000000]
[23:10:29.884]      WriteDP(DP_SELECT, 0x00000000);
[23:10:29.884]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:10:29.884]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:10:29.888]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:10:29.888]        // -> [powered_down <= 0x00000001]
[23:10:29.888]    </block>
[23:10:29.888]    <control if="powered_down" while="" timeout="0" info="">
[23:10:29.888]      // if-block "powered_down"
[23:10:29.888]        // =>  TRUE
[23:10:29.890]      <block atomic="false" info="">
[23:10:29.890]        Message(0, "Debug/System power-up request sent");
[23:10:29.892]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:10:29.892]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:10:29.892]      </block>
[23:10:29.892]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:10:29.892]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:10:29.896]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:10:29.896]        // while-condition  =>  FALSE
[23:10:29.896]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:10:29.896]      </control>
[23:10:29.896]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:10:29.896]        // if-block "(__protocol & 0xFFFF) == 1"
[23:10:29.896]          // =>  FALSE
[23:10:29.896]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:10:29.896]      </control>
[23:10:29.896]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:10:29.896]        // if-block "(__protocol & 0xFFFF) == 2"
[23:10:29.896]          // =>  TRUE
[23:10:29.896]        <block atomic="false" info="">
[23:10:29.896]          Message(0, "executing SWD power up");
[23:10:29.896]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:10:29.900]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:10:29.900]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:10:29.902]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:10:29.902]        </block>
[23:10:29.902]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:10:29.902]      </control>
[23:10:29.902]      // end if-block "powered_down"
[23:10:29.902]    </control>
[23:10:29.904]    <block atomic="false" info="">
[23:10:29.904]      __var DEBUG_PORT_VAL    = 0;
[23:10:29.904]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:10:29.904]      __var ACCESS_POINT_VAL  = 0;
[23:10:29.904]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:10:29.904]      __ap = 1; 
[23:10:29.904]        // -> [__ap <= 0x00000001]
[23:10:29.904]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:10:29.908]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:10:29.908]      __ap = 4;
[23:10:29.908]        // -> [__ap <= 0x00000004]
[23:10:29.908]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:10:29.910]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:10:29.910]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:10:29.910]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:10:29.915]    </block>
[23:10:29.915]    <block atomic="false" info="">
[23:10:29.915]      __var nReset = 0x80;
[23:10:29.915]        // -> [nReset <= 0x00000080]
[23:10:29.915]      __var canReadPins = 0;
[23:10:29.915]        // -> [canReadPins <= 0x00000000]
[23:10:29.915]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:10:29.917]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:10:29.917]        // -> [canReadPins <= 0x00000001]
[23:10:29.917]    </block>
[23:10:29.917]    <control if="" while="1" timeout="200" info="">
[23:10:29.917]      // while "1"  (timeout="200")
[23:10:29.917]      // while-condition  =>  TRUE
[23:10:29.917]      // while "1"  (timeout="200")
[23:10:29.917]      // while-condition  =>  TRUE
[23:10:29.917]      // while "1"  (timeout="200")
[23:10:29.918]      // while-condition  =>  TRUE
[23:10:29.918]      // while "1"  (timeout="200")
[23:10:29.918]      // while-condition  =>  TRUE
[23:10:29.918]      // while "1"  (timeout="200")
[23:10:29.918]      // while-condition  =>  TRUE
[23:10:29.918]      // while "1"  (timeout="200")
[23:10:29.918]      // while-condition  =>  TRUE
[23:10:29.918]      // while "1"  (timeout="200")
[23:10:29.918]      // while-condition  =>  TRUE
[23:10:29.918]      // while "1"  (timeout="200")
[23:10:29.918]      // while-condition  =>  TRUE
[23:10:29.919]      // while "1"  (timeout="200")
[23:10:29.919]      // while-condition  =>  TRUE
[23:10:29.919]      // while "1"  (timeout="200")
[23:10:29.919]      // while-condition  =>  TRUE
[23:10:29.919]      // while "1"  (timeout="200")
[23:10:29.919]      // while-condition  =>  TRUE
[23:10:29.919]      // while "1"  (timeout="200")
[23:10:29.919]      // while-condition  =>  TRUE
[23:10:29.919]      // while "1"  (timeout="200")
[23:10:29.919]      // while-condition  =>  TRUE
[23:10:29.919]      // while "1"  (timeout="200")
[23:10:29.920]      // while-condition  =>  TRUE
[23:10:29.920]      // while "1"  (timeout="200")
[23:10:29.920]      // while-condition  =>  TRUE
[23:10:29.920]      // while "1"  (timeout="200")
[23:10:29.920]      // while-condition  =>  TRUE
[23:10:29.920]      // while "1"  (timeout="200")
[23:10:29.920]      // while-condition  =>  TRUE
[23:10:29.921]      // while "1"  (timeout="200")
[23:10:29.921]      // while-condition  =>  TRUE
[23:10:29.921]      // while "1"  (timeout="200")
[23:10:29.921]      // while-condition  =>  TRUE
[23:10:29.922]      // while "1"  (timeout="200")
[23:10:29.922]      // while-condition  =>  TRUE
[23:10:29.922]      // while "1"  (timeout="200")
[23:10:29.922]      // while-condition  =>  TRUE
[23:10:29.922]      // while "1"  (timeout="200")
[23:10:29.922]      // while-condition  =>  TRUE
[23:10:29.922]      // while "1"  (timeout="200")
[23:10:29.922]      // while-condition  =>  TRUE
[23:10:29.922]      // while "1"  (timeout="200")
[23:10:29.922]      // while-condition  =>  TRUE
[23:10:29.923]      // while "1"  (timeout="200")
[23:10:29.923]      // while-condition  =>  TRUE
[23:10:29.923]      // while "1"  (timeout="200")
[23:10:29.923]      // while-condition  =>  TRUE
[23:10:29.923]      // while "1"  (timeout="200")
[23:10:29.923]      // while-condition  =>  TRUE
[23:10:29.923]      // while "1"  (timeout="200")
[23:10:29.923]      // while-condition  =>  TRUE
[23:10:29.923]      // while "1"  (timeout="200")
[23:10:29.923]      // while-condition  =>  TRUE
[23:10:29.923]      // while "1"  (timeout="200")
[23:10:29.924]      // while-condition  =>  TRUE
[23:10:29.924]      // while "1"  (timeout="200")
[23:10:29.924]      // while-condition  =>  TRUE
[23:10:29.924]      // while "1"  (timeout="200")
[23:10:29.924]      // while-condition  =>  TRUE
[23:10:29.924]      // while "1"  (timeout="200")
[23:10:29.924]      // while-condition  =>  TRUE
[23:10:29.924]      // while "1"  (timeout="200")
[23:10:29.924]      // while  =>  TIMEOUT
[23:10:29.924]      // end while "1"
[23:10:29.924]    </control>
[23:10:29.925]    <control if="canReadPins" while="" timeout="0" info="">
[23:10:29.925]      // if-block "canReadPins"
[23:10:29.925]        // =>  TRUE
[23:10:29.925]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:10:29.925]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:10:29.926]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:10:29.926]        // while-condition  =>  FALSE
[23:10:29.926]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:10:29.927]      </control>
[23:10:29.927]      // end if-block "canReadPins"
[23:10:29.927]    </control>
[23:10:29.927]    <control if="!canReadPins" while="" timeout="0" info="">
[23:10:29.927]      // if-block "!canReadPins"
[23:10:29.928]        // =>  FALSE
[23:10:29.928]      // skip if-block "!canReadPins"
[23:10:29.928]    </control>
[23:10:29.928]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:10:29.928]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:10:29.928]        // =>  TRUE
[23:10:29.928]      <block atomic="false" info="">
[23:10:29.928]        WriteAP(0x00, 0x190008);
[23:10:29.933]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:10:29.933]        WriteAP(0xF0, 0x01);
[23:10:29.936]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:10:29.936]      </block>
[23:10:29.936]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:10:29.936]    </control>
[23:10:29.937]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:10:29.937]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:10:29.937]        // =>  FALSE
[23:10:29.937]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:10:29.938]    </control>
[23:10:29.938]    <block atomic="false" info="">
[23:10:29.938]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:10:29.942]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:10:29.942]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:10:29.942]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:10:29.944]      __ap = 0; //lets make sure we reset the access point selection
[23:10:29.944]        // -> [__ap <= 0x00000000]
[23:10:29.944]    </block>
[23:10:29.945]  </sequence>
[23:10:29.945]  
[23:10:29.964]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:10:29.964]  
[23:10:29.964]  <debugvars>
[23:10:29.964]    // Pre-defined
[23:10:29.964]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:10:29.964]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:10:29.964]    __dp=0x00000000
[23:10:29.964]    __ap=0x00000000
[23:10:29.966]    __traceout=0x00000000      (Trace Disabled)
[23:10:29.966]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:10:29.966]    __FlashAddr=0x00000000
[23:10:29.966]    __FlashLen=0x00000000
[23:10:29.966]    __FlashArg=0x00000000
[23:10:29.966]    __FlashOp=0x00000000
[23:10:29.966]    __Result=0x00000000
[23:10:29.966]  </debugvars>
[23:10:29.966]  
[23:10:29.966]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:10:29.966]    <block atomic="false" info="">
[23:10:29.966]      __var deviceID = 0;
[23:10:29.966]        // -> [deviceID <= 0x00000000]
[23:10:29.966]      __var version = 0;
[23:10:29.966]        // -> [version <= 0x00000000]
[23:10:29.966]      __var partNum = 0;
[23:10:29.966]        // -> [partNum <= 0x00000000]
[23:10:29.966]      __var manuf = 0;
[23:10:29.966]        // -> [manuf <= 0x00000000]
[23:10:29.966]      __var isMSPM0G1X0X_G3X0X = 0;
[23:10:29.966]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:10:29.966]      __var isProduction = 0;
[23:10:29.966]        // -> [isProduction <= 0x00000000]
[23:10:29.966]      __var continueId = 0;
[23:10:29.966]        // -> [continueId <= 0x00000000]
[23:10:29.966]      deviceID =   Read32(0x41C40004);
[23:10:29.970]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:10:29.970]        // -> [deviceID <= 0x2BB8802F]
[23:10:29.970]      version = deviceID >> 28;
[23:10:29.974]        // -> [version <= 0x00000002]
[23:10:29.974]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:10:29.974]        // -> [partNum <= 0x0000BB88]
[23:10:29.974]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:10:29.974]        // -> [manuf <= 0x00000017]
[23:10:29.974]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:10:29.974]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:10:29.974]      isProduction = (version > 0);
[23:10:29.974]        // -> [isProduction <= 0x00000001]
[23:10:29.974]    </block>
[23:10:29.974]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:10:29.974]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:10:29.974]        // =>  FALSE
[23:10:29.974]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:10:29.974]    </control>
[23:10:29.974]    <control if="continueId == 4" while="" timeout="0" info="">
[23:10:29.974]      // if-block "continueId == 4"
[23:10:29.974]        // =>  FALSE
[23:10:29.974]      // skip if-block "continueId == 4"
[23:10:29.974]    </control>
[23:10:29.974]    <control if="!isProduction" while="" timeout="0" info="">
[23:10:29.974]      // if-block "!isProduction"
[23:10:29.974]        // =>  FALSE
[23:10:29.974]      // skip if-block "!isProduction"
[23:10:29.974]    </control>
[23:10:29.974]  </sequence>
[23:10:29.974]  
[23:12:06.604]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:12:06.604]  
[23:12:06.604]  <debugvars>
[23:12:06.604]    // Pre-defined
[23:12:06.604]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:12:06.604]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:12:06.604]    __dp=0x00000000
[23:12:06.604]    __ap=0x00000000
[23:12:06.606]    __traceout=0x00000000      (Trace Disabled)
[23:12:06.606]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:12:06.606]    __FlashAddr=0x00000000
[23:12:06.606]    __FlashLen=0x00000000
[23:12:06.606]    __FlashArg=0x00000000
[23:12:06.606]    __FlashOp=0x00000000
[23:12:06.606]    __Result=0x00000000
[23:12:06.606]  </debugvars>
[23:12:06.606]  
[23:12:06.606]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:12:06.606]    <block atomic="false" info="">
[23:12:06.606]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:12:06.606]        // -> [isSWJ <= 0x00000001]
[23:12:06.606]      __var hasDormant = __protocol & 0x00020000;
[23:12:06.606]        // -> [hasDormant <= 0x00000000]
[23:12:06.606]      __var protType   = __protocol & 0x0000FFFF;
[23:12:06.606]        // -> [protType <= 0x00000002]
[23:12:06.606]    </block>
[23:12:06.606]    <control if="protType == 1" while="" timeout="0" info="">
[23:12:06.608]      // if-block "protType == 1"
[23:12:06.608]        // =>  FALSE
[23:12:06.608]      // skip if-block "protType == 1"
[23:12:06.608]    </control>
[23:12:06.608]    <control if="protType == 2" while="" timeout="0" info="">
[23:12:06.608]      // if-block "protType == 2"
[23:12:06.608]        // =>  TRUE
[23:12:06.608]      <control if="isSWJ" while="" timeout="0" info="">
[23:12:06.608]        // if-block "isSWJ"
[23:12:06.608]          // =>  TRUE
[23:12:06.608]        <control if="hasDormant" while="" timeout="0" info="">
[23:12:06.608]          // if-block "hasDormant"
[23:12:06.608]            // =>  FALSE
[23:12:06.608]          // skip if-block "hasDormant"
[23:12:06.608]        </control>
[23:12:06.610]        <control if="!hasDormant" while="" timeout="0" info="">
[23:12:06.610]          // if-block "!hasDormant"
[23:12:06.610]            // =>  TRUE
[23:12:06.610]          <block atomic="false" info="">
[23:12:06.610]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:12:06.611]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:12:06.611]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:12:06.615]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:12:06.615]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:12:06.615]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:12:06.615]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:12:06.615]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:12:06.615]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:12:06.619]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:12:06.619]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:12:06.619]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:12:06.619]          </block>
[23:12:06.619]          // end if-block "!hasDormant"
[23:12:06.619]        </control>
[23:12:06.619]        // end if-block "isSWJ"
[23:12:06.619]      </control>
[23:12:06.619]      <control if="!isSWJ" while="" timeout="0" info="">
[23:12:06.619]        // if-block "!isSWJ"
[23:12:06.619]          // =>  FALSE
[23:12:06.619]        // skip if-block "!isSWJ"
[23:12:06.619]      </control>
[23:12:06.619]      <block atomic="false" info="">
[23:12:06.619]        ReadDP(0x0);
[23:12:06.623]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:12:06.623]      </block>
[23:12:06.623]      // end if-block "protType == 2"
[23:12:06.624]    </control>
[23:12:06.624]  </sequence>
[23:12:06.624]  
[23:12:06.634]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:12:06.634]  
[23:12:06.634]  <debugvars>
[23:12:06.634]    // Pre-defined
[23:12:06.634]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:12:06.634]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:12:06.634]    __dp=0x00000000
[23:12:06.634]    __ap=0x00000000
[23:12:06.634]    __traceout=0x00000000      (Trace Disabled)
[23:12:06.634]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:12:06.637]    __FlashAddr=0x00000000
[23:12:06.637]    __FlashLen=0x00000000
[23:12:06.637]    __FlashArg=0x00000000
[23:12:06.637]    __FlashOp=0x00000000
[23:12:06.637]    __Result=0x00000000
[23:12:06.637]  </debugvars>
[23:12:06.637]  
[23:12:06.637]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:12:06.637]    <block atomic="false" info="">
[23:12:06.638]      __var SW_DP_ABORT       = 0x0;
[23:12:06.638]        // -> [SW_DP_ABORT <= 0x00000000]
[23:12:06.638]      __var DP_CTRL_STAT      = 0x4;
[23:12:06.638]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:12:06.638]      __var DP_SELECT         = 0x8;
[23:12:06.638]        // -> [DP_SELECT <= 0x00000008]
[23:12:06.638]      __var powered_down      = 0;
[23:12:06.639]        // -> [powered_down <= 0x00000000]
[23:12:06.639]      WriteDP(DP_SELECT, 0x00000000);
[23:12:06.639]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:12:06.639]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:12:06.642]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:12:06.642]        // -> [powered_down <= 0x00000001]
[23:12:06.642]    </block>
[23:12:06.642]    <control if="powered_down" while="" timeout="0" info="">
[23:12:06.642]      // if-block "powered_down"
[23:12:06.642]        // =>  TRUE
[23:12:06.642]      <block atomic="false" info="">
[23:12:06.642]        Message(0, "Debug/System power-up request sent");
[23:12:06.643]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:12:06.645]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:12:06.645]      </block>
[23:12:06.645]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:12:06.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:12:06.645]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:12:06.645]        // while-condition  =>  FALSE
[23:12:06.645]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:12:06.645]      </control>
[23:12:06.645]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:12:06.645]        // if-block "(__protocol & 0xFFFF) == 1"
[23:12:06.645]          // =>  FALSE
[23:12:06.645]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:12:06.645]      </control>
[23:12:06.645]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:12:06.645]        // if-block "(__protocol & 0xFFFF) == 2"
[23:12:06.645]          // =>  TRUE
[23:12:06.645]        <block atomic="false" info="">
[23:12:06.645]          Message(0, "executing SWD power up");
[23:12:06.652]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:12:06.654]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:12:06.654]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:12:06.656]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:12:06.656]        </block>
[23:12:06.656]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:12:06.656]      </control>
[23:12:06.656]      // end if-block "powered_down"
[23:12:06.656]    </control>
[23:12:06.656]    <block atomic="false" info="">
[23:12:06.656]      __var DEBUG_PORT_VAL    = 0;
[23:12:06.656]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:12:06.656]      __var ACCESS_POINT_VAL  = 0;
[23:12:06.657]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:12:06.657]      __ap = 1; 
[23:12:06.657]        // -> [__ap <= 0x00000001]
[23:12:06.657]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:12:06.658]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:12:06.658]      __ap = 4;
[23:12:06.658]        // -> [__ap <= 0x00000004]
[23:12:06.658]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:12:06.664]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:12:06.664]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:12:06.664]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:12:06.664]    </block>
[23:12:06.664]    <block atomic="false" info="">
[23:12:06.667]      __var nReset = 0x80;
[23:12:06.667]        // -> [nReset <= 0x00000080]
[23:12:06.667]      __var canReadPins = 0;
[23:12:06.667]        // -> [canReadPins <= 0x00000000]
[23:12:06.667]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:12:06.668]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:12:06.668]        // -> [canReadPins <= 0x00000001]
[23:12:06.668]    </block>
[23:12:06.668]    <control if="" while="1" timeout="200" info="">
[23:12:06.668]      // while "1"  (timeout="200")
[23:12:06.668]      // while-condition  =>  TRUE
[23:12:06.668]      // while "1"  (timeout="200")
[23:12:06.668]      // while-condition  =>  TRUE
[23:12:06.668]      // while "1"  (timeout="200")
[23:12:06.668]      // while-condition  =>  TRUE
[23:12:06.668]      // while "1"  (timeout="200")
[23:12:06.668]      // while-condition  =>  TRUE
[23:12:06.668]      // while "1"  (timeout="200")
[23:12:06.668]      // while-condition  =>  TRUE
[23:12:06.668]      // while "1"  (timeout="200")
[23:12:06.668]      // while-condition  =>  TRUE
[23:12:06.670]      // while "1"  (timeout="200")
[23:12:06.670]      // while-condition  =>  TRUE
[23:12:06.670]      // while "1"  (timeout="200")
[23:12:06.670]      // while-condition  =>  TRUE
[23:12:06.670]      // while "1"  (timeout="200")
[23:12:06.670]      // while-condition  =>  TRUE
[23:12:06.670]      // while "1"  (timeout="200")
[23:12:06.671]      // while-condition  =>  TRUE
[23:12:06.671]      // while "1"  (timeout="200")
[23:12:06.671]      // while-condition  =>  TRUE
[23:12:06.671]      // while "1"  (timeout="200")
[23:12:06.671]      // while-condition  =>  TRUE
[23:12:06.671]      // while "1"  (timeout="200")
[23:12:06.671]      // while-condition  =>  TRUE
[23:12:06.671]      // while "1"  (timeout="200")
[23:12:06.671]      // while-condition  =>  TRUE
[23:12:06.671]      // while "1"  (timeout="200")
[23:12:06.671]      // while-condition  =>  TRUE
[23:12:06.671]      // while "1"  (timeout="200")
[23:12:06.671]      // while-condition  =>  TRUE
[23:12:06.671]      // while "1"  (timeout="200")
[23:12:06.671]      // while-condition  =>  TRUE
[23:12:06.671]      // while "1"  (timeout="200")
[23:12:06.671]      // while-condition  =>  TRUE
[23:12:06.671]      // while "1"  (timeout="200")
[23:12:06.674]      // while-condition  =>  TRUE
[23:12:06.674]      // while "1"  (timeout="200")
[23:12:06.674]      // while-condition  =>  TRUE
[23:12:06.674]      // while "1"  (timeout="200")
[23:12:06.674]      // while-condition  =>  TRUE
[23:12:06.674]      // while "1"  (timeout="200")
[23:12:06.674]      // while-condition  =>  TRUE
[23:12:06.674]      // while "1"  (timeout="200")
[23:12:06.674]      // while-condition  =>  TRUE
[23:12:06.674]      // while "1"  (timeout="200")
[23:12:06.674]      // while-condition  =>  TRUE
[23:12:06.675]      // while "1"  (timeout="200")
[23:12:06.675]      // while  =>  TIMEOUT
[23:12:06.675]      // end while "1"
[23:12:06.676]    </control>
[23:12:06.676]    <control if="canReadPins" while="" timeout="0" info="">
[23:12:06.676]      // if-block "canReadPins"
[23:12:06.676]        // =>  TRUE
[23:12:06.676]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:12:06.676]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:12:06.677]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:12:06.677]        // while-condition  =>  FALSE
[23:12:06.677]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:12:06.677]      </control>
[23:12:06.677]      // end if-block "canReadPins"
[23:12:06.677]    </control>
[23:12:06.677]    <control if="!canReadPins" while="" timeout="0" info="">
[23:12:06.677]      // if-block "!canReadPins"
[23:12:06.677]        // =>  FALSE
[23:12:06.677]      // skip if-block "!canReadPins"
[23:12:06.677]    </control>
[23:12:06.677]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:12:06.677]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:12:06.677]        // =>  TRUE
[23:12:06.677]      <block atomic="false" info="">
[23:12:06.677]        WriteAP(0x00, 0x190008);
[23:12:06.680]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:12:06.680]        WriteAP(0xF0, 0x01);
[23:12:06.683]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:12:06.683]      </block>
[23:12:06.684]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:12:06.684]    </control>
[23:12:06.684]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:12:06.684]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:12:06.684]        // =>  FALSE
[23:12:06.684]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:12:06.684]    </control>
[23:12:06.684]    <block atomic="false" info="">
[23:12:06.684]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:12:06.688]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:12:06.688]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:12:06.688]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:12:06.690]      __ap = 0; //lets make sure we reset the access point selection
[23:12:06.690]        // -> [__ap <= 0x00000000]
[23:12:06.690]    </block>
[23:12:06.690]  </sequence>
[23:12:06.690]  
[23:12:06.716]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:12:06.716]  
[23:12:06.716]  <debugvars>
[23:12:06.716]    // Pre-defined
[23:12:06.716]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:12:06.716]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:12:06.716]    __dp=0x00000000
[23:12:06.716]    __ap=0x00000000
[23:12:06.716]    __traceout=0x00000000      (Trace Disabled)
[23:12:06.716]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:12:06.716]    __FlashAddr=0x00000000
[23:12:06.716]    __FlashLen=0x00000000
[23:12:06.716]    __FlashArg=0x00000000
[23:12:06.716]    __FlashOp=0x00000000
[23:12:06.716]    __Result=0x00000000
[23:12:06.716]  </debugvars>
[23:12:06.716]  
[23:12:06.716]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:12:06.716]    <block atomic="false" info="">
[23:12:06.716]      __var deviceID = 0;
[23:12:06.716]        // -> [deviceID <= 0x00000000]
[23:12:06.716]      __var version = 0;
[23:12:06.716]        // -> [version <= 0x00000000]
[23:12:06.720]      __var partNum = 0;
[23:12:06.720]        // -> [partNum <= 0x00000000]
[23:12:06.720]      __var manuf = 0;
[23:12:06.720]        // -> [manuf <= 0x00000000]
[23:12:06.720]      __var isMSPM0G1X0X_G3X0X = 0;
[23:12:06.720]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:12:06.720]      __var isProduction = 0;
[23:12:06.721]        // -> [isProduction <= 0x00000000]
[23:12:06.721]      __var continueId = 0;
[23:12:06.721]        // -> [continueId <= 0x00000000]
[23:12:06.721]      deviceID =   Read32(0x41C40004);
[23:12:06.726]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:12:06.726]        // -> [deviceID <= 0x2BB8802F]
[23:12:06.726]      version = deviceID >> 28;
[23:12:06.726]        // -> [version <= 0x00000002]
[23:12:06.726]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:12:06.728]        // -> [partNum <= 0x0000BB88]
[23:12:06.728]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:12:06.728]        // -> [manuf <= 0x00000017]
[23:12:06.728]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:12:06.728]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:12:06.728]      isProduction = (version > 0);
[23:12:06.728]        // -> [isProduction <= 0x00000001]
[23:12:06.728]    </block>
[23:12:06.728]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:12:06.728]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:12:06.728]        // =>  FALSE
[23:12:06.728]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:12:06.728]    </control>
[23:12:06.728]    <control if="continueId == 4" while="" timeout="0" info="">
[23:12:06.728]      // if-block "continueId == 4"
[23:12:06.728]        // =>  FALSE
[23:12:06.728]      // skip if-block "continueId == 4"
[23:12:06.730]    </control>
[23:12:06.730]    <control if="!isProduction" while="" timeout="0" info="">
[23:12:06.730]      // if-block "!isProduction"
[23:12:06.730]        // =>  FALSE
[23:12:06.730]      // skip if-block "!isProduction"
[23:12:06.730]    </control>
[23:12:06.730]  </sequence>
[23:12:06.730]  
[23:13:19.229]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:13:19.233]  
[23:13:19.233]  <debugvars>
[23:13:19.233]    // Pre-defined
[23:13:19.233]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:13:19.233]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:13:19.233]    __dp=0x00000000
[23:13:19.233]    __ap=0x00000000
[23:13:19.233]    __traceout=0x00000000      (Trace Disabled)
[23:13:19.233]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:13:19.233]    __FlashAddr=0x00000000
[23:13:19.233]    __FlashLen=0x00000000
[23:13:19.233]    __FlashArg=0x00000000
[23:13:19.233]    __FlashOp=0x00000000
[23:13:19.233]    __Result=0x00000000
[23:13:19.233]  </debugvars>
[23:13:19.233]  
[23:13:19.233]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:13:19.233]    <block atomic="false" info="">
[23:13:19.233]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:13:19.233]        // -> [isSWJ <= 0x00000001]
[23:13:19.233]      __var hasDormant = __protocol & 0x00020000;
[23:13:19.233]        // -> [hasDormant <= 0x00000000]
[23:13:19.233]      __var protType   = __protocol & 0x0000FFFF;
[23:13:19.233]        // -> [protType <= 0x00000002]
[23:13:19.236]    </block>
[23:13:19.236]    <control if="protType == 1" while="" timeout="0" info="">
[23:13:19.236]      // if-block "protType == 1"
[23:13:19.236]        // =>  FALSE
[23:13:19.236]      // skip if-block "protType == 1"
[23:13:19.236]    </control>
[23:13:19.236]    <control if="protType == 2" while="" timeout="0" info="">
[23:13:19.237]      // if-block "protType == 2"
[23:13:19.237]        // =>  TRUE
[23:13:19.237]      <control if="isSWJ" while="" timeout="0" info="">
[23:13:19.237]        // if-block "isSWJ"
[23:13:19.237]          // =>  TRUE
[23:13:19.237]        <control if="hasDormant" while="" timeout="0" info="">
[23:13:19.237]          // if-block "hasDormant"
[23:13:19.237]            // =>  FALSE
[23:13:19.237]          // skip if-block "hasDormant"
[23:13:19.237]        </control>
[23:13:19.237]        <control if="!hasDormant" while="" timeout="0" info="">
[23:13:19.237]          // if-block "!hasDormant"
[23:13:19.237]            // =>  TRUE
[23:13:19.237]          <block atomic="false" info="">
[23:13:19.237]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:13:19.237]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:13:19.237]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:13:19.241]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:13:19.241]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:13:19.241]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:13:19.241]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:13:19.253]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:13:19.253]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:13:19.254]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:13:19.254]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:13:19.258]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:13:19.258]          </block>
[23:13:19.258]          // end if-block "!hasDormant"
[23:13:19.258]        </control>
[23:13:19.258]        // end if-block "isSWJ"
[23:13:19.258]      </control>
[23:13:19.258]      <control if="!isSWJ" while="" timeout="0" info="">
[23:13:19.258]        // if-block "!isSWJ"
[23:13:19.258]          // =>  FALSE
[23:13:19.258]        // skip if-block "!isSWJ"
[23:13:19.258]      </control>
[23:13:19.258]      <block atomic="false" info="">
[23:13:19.258]        ReadDP(0x0);
[23:13:19.266]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:13:19.266]      </block>
[23:13:19.266]      // end if-block "protType == 2"
[23:13:19.266]    </control>
[23:13:19.266]  </sequence>
[23:13:19.266]  
[23:13:19.274]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:13:19.274]  
[23:13:19.274]  <debugvars>
[23:13:19.274]    // Pre-defined
[23:13:19.274]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:13:19.274]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:13:19.274]    __dp=0x00000000
[23:13:19.274]    __ap=0x00000000
[23:13:19.274]    __traceout=0x00000000      (Trace Disabled)
[23:13:19.274]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:13:19.274]    __FlashAddr=0x00000000
[23:13:19.274]    __FlashLen=0x00000000
[23:13:19.274]    __FlashArg=0x00000000
[23:13:19.274]    __FlashOp=0x00000000
[23:13:19.276]    __Result=0x00000000
[23:13:19.276]  </debugvars>
[23:13:19.276]  
[23:13:19.276]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:13:19.276]    <block atomic="false" info="">
[23:13:19.276]      __var SW_DP_ABORT       = 0x0;
[23:13:19.276]        // -> [SW_DP_ABORT <= 0x00000000]
[23:13:19.276]      __var DP_CTRL_STAT      = 0x4;
[23:13:19.276]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:13:19.277]      __var DP_SELECT         = 0x8;
[23:13:19.277]        // -> [DP_SELECT <= 0x00000008]
[23:13:19.277]      __var powered_down      = 0;
[23:13:19.277]        // -> [powered_down <= 0x00000000]
[23:13:19.277]      WriteDP(DP_SELECT, 0x00000000);
[23:13:19.279]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:13:19.279]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:13:19.279]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:13:19.279]        // -> [powered_down <= 0x00000001]
[23:13:19.279]    </block>
[23:13:19.279]    <control if="powered_down" while="" timeout="0" info="">
[23:13:19.279]      // if-block "powered_down"
[23:13:19.279]        // =>  TRUE
[23:13:19.279]      <block atomic="false" info="">
[23:13:19.282]        Message(0, "Debug/System power-up request sent");
[23:13:19.282]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:13:19.286]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:13:19.287]      </block>
[23:13:19.287]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:13:19.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:13:19.289]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:13:19.289]        // while-condition  =>  FALSE
[23:13:19.289]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:13:19.289]      </control>
[23:13:19.289]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:13:19.289]        // if-block "(__protocol & 0xFFFF) == 1"
[23:13:19.289]          // =>  FALSE
[23:13:19.289]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:13:19.290]      </control>
[23:13:19.290]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:13:19.290]        // if-block "(__protocol & 0xFFFF) == 2"
[23:13:19.290]          // =>  TRUE
[23:13:19.290]        <block atomic="false" info="">
[23:13:19.290]          Message(0, "executing SWD power up");
[23:13:19.291]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:13:19.293]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:13:19.293]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:13:19.296]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:13:19.297]        </block>
[23:13:19.297]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:13:19.297]      </control>
[23:13:19.297]      // end if-block "powered_down"
[23:13:19.297]    </control>
[23:13:19.297]    <block atomic="false" info="">
[23:13:19.298]      __var DEBUG_PORT_VAL    = 0;
[23:13:19.298]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:13:19.298]      __var ACCESS_POINT_VAL  = 0;
[23:13:19.298]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:13:19.298]      __ap = 1; 
[23:13:19.298]        // -> [__ap <= 0x00000001]
[23:13:19.298]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:13:19.303]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:13:19.303]      __ap = 4;
[23:13:19.303]        // -> [__ap <= 0x00000004]
[23:13:19.303]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:13:19.307]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:13:19.308]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:13:19.308]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:13:19.310]    </block>
[23:13:19.310]    <block atomic="false" info="">
[23:13:19.310]      __var nReset = 0x80;
[23:13:19.310]        // -> [nReset <= 0x00000080]
[23:13:19.310]      __var canReadPins = 0;
[23:13:19.311]        // -> [canReadPins <= 0x00000000]
[23:13:19.311]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:13:19.313]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:13:19.313]        // -> [canReadPins <= 0x00000001]
[23:13:19.313]    </block>
[23:13:19.313]    <control if="" while="1" timeout="200" info="">
[23:13:19.313]      // while "1"  (timeout="200")
[23:13:19.314]      // while-condition  =>  TRUE
[23:13:19.314]      // while "1"  (timeout="200")
[23:13:19.314]      // while-condition  =>  TRUE
[23:13:19.314]      // while "1"  (timeout="200")
[23:13:19.314]      // while-condition  =>  TRUE
[23:13:19.314]      // while "1"  (timeout="200")
[23:13:19.314]      // while-condition  =>  TRUE
[23:13:19.314]      // while "1"  (timeout="200")
[23:13:19.315]      // while-condition  =>  TRUE
[23:13:19.315]      // while "1"  (timeout="200")
[23:13:19.315]      // while  =>  TIMEOUT
[23:13:19.315]      // end while "1"
[23:13:19.315]    </control>
[23:13:19.315]    <control if="canReadPins" while="" timeout="0" info="">
[23:13:19.315]      // if-block "canReadPins"
[23:13:19.315]        // =>  TRUE
[23:13:19.315]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:13:19.315]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:13:19.318]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:13:19.318]        // while-condition  =>  FALSE
[23:13:19.318]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:13:19.318]      </control>
[23:13:19.318]      // end if-block "canReadPins"
[23:13:19.318]    </control>
[23:13:19.318]    <control if="!canReadPins" while="" timeout="0" info="">
[23:13:19.319]      // if-block "!canReadPins"
[23:13:19.319]        // =>  FALSE
[23:13:19.319]      // skip if-block "!canReadPins"
[23:13:19.319]    </control>
[23:13:19.319]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:13:19.319]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:13:19.319]        // =>  TRUE
[23:13:19.319]      <block atomic="false" info="">
[23:13:19.319]        WriteAP(0x00, 0x190008);
[23:13:19.320]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:13:19.320]        WriteAP(0xF0, 0x01);
[23:13:19.327]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:13:19.327]      </block>
[23:13:19.327]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:13:19.327]    </control>
[23:13:19.327]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:13:19.327]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:13:19.327]        // =>  FALSE
[23:13:19.327]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:13:19.327]    </control>
[23:13:19.327]    <block atomic="false" info="">
[23:13:19.327]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:13:19.335]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:13:19.335]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:13:19.335]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:13:19.336]      __ap = 0; //lets make sure we reset the access point selection
[23:13:19.336]        // -> [__ap <= 0x00000000]
[23:13:19.336]    </block>
[23:13:19.336]  </sequence>
[23:13:19.336]  
[23:13:19.360]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:13:19.360]  
[23:13:19.360]  <debugvars>
[23:13:19.360]    // Pre-defined
[23:13:19.360]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:13:19.360]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:13:19.360]    __dp=0x00000000
[23:13:19.360]    __ap=0x00000000
[23:13:19.360]    __traceout=0x00000000      (Trace Disabled)
[23:13:19.360]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:13:19.360]    __FlashAddr=0x00000000
[23:13:19.360]    __FlashLen=0x00000000
[23:13:19.360]    __FlashArg=0x00000000
[23:13:19.362]    __FlashOp=0x00000000
[23:13:19.362]    __Result=0x00000000
[23:13:19.362]  </debugvars>
[23:13:19.362]  
[23:13:19.362]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:13:19.362]    <block atomic="false" info="">
[23:13:19.362]      __var deviceID = 0;
[23:13:19.362]        // -> [deviceID <= 0x00000000]
[23:13:19.362]      __var version = 0;
[23:13:19.362]        // -> [version <= 0x00000000]
[23:13:19.363]      __var partNum = 0;
[23:13:19.363]        // -> [partNum <= 0x00000000]
[23:13:19.363]      __var manuf = 0;
[23:13:19.363]        // -> [manuf <= 0x00000000]
[23:13:19.363]      __var isMSPM0G1X0X_G3X0X = 0;
[23:13:19.363]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:13:19.363]      __var isProduction = 0;
[23:13:19.363]        // -> [isProduction <= 0x00000000]
[23:13:19.363]      __var continueId = 0;
[23:13:19.363]        // -> [continueId <= 0x00000000]
[23:13:19.363]      deviceID =   Read32(0x41C40004);
[23:13:19.369]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:13:19.369]        // -> [deviceID <= 0x2BB8802F]
[23:13:19.369]      version = deviceID >> 28;
[23:13:19.369]        // -> [version <= 0x00000002]
[23:13:19.369]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:13:19.369]        // -> [partNum <= 0x0000BB88]
[23:13:19.369]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:13:19.369]        // -> [manuf <= 0x00000017]
[23:13:19.369]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:13:19.369]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:13:19.369]      isProduction = (version > 0);
[23:13:19.369]        // -> [isProduction <= 0x00000001]
[23:13:19.369]    </block>
[23:13:19.369]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:13:19.369]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:13:19.369]        // =>  FALSE
[23:13:19.369]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:13:19.369]    </control>
[23:13:19.369]    <control if="continueId == 4" while="" timeout="0" info="">
[23:13:19.369]      // if-block "continueId == 4"
[23:13:19.369]        // =>  FALSE
[23:13:19.369]      // skip if-block "continueId == 4"
[23:13:19.369]    </control>
[23:13:19.369]    <control if="!isProduction" while="" timeout="0" info="">
[23:13:19.369]      // if-block "!isProduction"
[23:13:19.369]        // =>  FALSE
[23:13:19.369]      // skip if-block "!isProduction"
[23:13:19.369]    </control>
[23:13:19.369]  </sequence>
[23:13:19.369]  
[23:15:12.060]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:15:12.060]  
[23:15:12.072]  <debugvars>
[23:15:12.072]    // Pre-defined
[23:15:12.072]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:15:12.072]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:15:12.072]    __dp=0x00000000
[23:15:12.072]    __ap=0x00000000
[23:15:12.073]    __traceout=0x00000000      (Trace Disabled)
[23:15:12.073]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:15:12.073]    __FlashAddr=0x00000000
[23:15:12.073]    __FlashLen=0x00000000
[23:15:12.073]    __FlashArg=0x00000000
[23:15:12.073]    __FlashOp=0x00000000
[23:15:12.073]    __Result=0x00000000
[23:15:12.073]  </debugvars>
[23:15:12.073]  
[23:15:12.074]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:15:12.074]    <block atomic="false" info="">
[23:15:12.074]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:15:12.074]        // -> [isSWJ <= 0x00000001]
[23:15:12.074]      __var hasDormant = __protocol & 0x00020000;
[23:15:12.074]        // -> [hasDormant <= 0x00000000]
[23:15:12.074]      __var protType   = __protocol & 0x0000FFFF;
[23:15:12.074]        // -> [protType <= 0x00000002]
[23:15:12.074]    </block>
[23:15:12.074]    <control if="protType == 1" while="" timeout="0" info="">
[23:15:12.074]      // if-block "protType == 1"
[23:15:12.074]        // =>  FALSE
[23:15:12.074]      // skip if-block "protType == 1"
[23:15:12.074]    </control>
[23:15:12.074]    <control if="protType == 2" while="" timeout="0" info="">
[23:15:12.074]      // if-block "protType == 2"
[23:15:12.074]        // =>  TRUE
[23:15:12.076]      <control if="isSWJ" while="" timeout="0" info="">
[23:15:12.076]        // if-block "isSWJ"
[23:15:12.076]          // =>  TRUE
[23:15:12.076]        <control if="hasDormant" while="" timeout="0" info="">
[23:15:12.076]          // if-block "hasDormant"
[23:15:12.076]            // =>  FALSE
[23:15:12.076]          // skip if-block "hasDormant"
[23:15:12.076]        </control>
[23:15:12.076]        <control if="!hasDormant" while="" timeout="0" info="">
[23:15:12.076]          // if-block "!hasDormant"
[23:15:12.076]            // =>  TRUE
[23:15:12.076]          <block atomic="false" info="">
[23:15:12.076]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:15:12.078]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:15:12.078]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:15:12.080]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:15:12.080]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:15:12.081]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:15:12.081]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:15:12.083]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:15:12.083]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:15:12.085]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:15:12.085]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:15:12.086]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:15:12.086]          </block>
[23:15:12.086]          // end if-block "!hasDormant"
[23:15:12.086]        </control>
[23:15:12.086]        // end if-block "isSWJ"
[23:15:12.086]      </control>
[23:15:12.086]      <control if="!isSWJ" while="" timeout="0" info="">
[23:15:12.086]        // if-block "!isSWJ"
[23:15:12.086]          // =>  FALSE
[23:15:12.086]        // skip if-block "!isSWJ"
[23:15:12.086]      </control>
[23:15:12.086]      <block atomic="false" info="">
[23:15:12.086]        ReadDP(0x0);
[23:15:12.088]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:15:12.089]      </block>
[23:15:12.089]      // end if-block "protType == 2"
[23:15:12.089]    </control>
[23:15:12.089]  </sequence>
[23:15:12.089]  
[23:15:12.092]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:15:12.092]  
[23:15:12.092]  <debugvars>
[23:15:12.092]    // Pre-defined
[23:15:12.092]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:15:12.092]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:15:12.093]    __dp=0x00000000
[23:15:12.093]    __ap=0x00000000
[23:15:12.093]    __traceout=0x00000000      (Trace Disabled)
[23:15:12.093]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:15:12.093]    __FlashAddr=0x00000000
[23:15:12.093]    __FlashLen=0x00000000
[23:15:12.093]    __FlashArg=0x00000000
[23:15:12.093]    __FlashOp=0x00000000
[23:15:12.093]    __Result=0x00000000
[23:15:12.093]  </debugvars>
[23:15:12.093]  
[23:15:12.093]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:15:12.094]    <block atomic="false" info="">
[23:15:12.094]      __var SW_DP_ABORT       = 0x0;
[23:15:12.094]        // -> [SW_DP_ABORT <= 0x00000000]
[23:15:12.094]      __var DP_CTRL_STAT      = 0x4;
[23:15:12.094]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:15:12.094]      __var DP_SELECT         = 0x8;
[23:15:12.094]        // -> [DP_SELECT <= 0x00000008]
[23:15:12.094]      __var powered_down      = 0;
[23:15:12.094]        // -> [powered_down <= 0x00000000]
[23:15:12.094]      WriteDP(DP_SELECT, 0x00000000);
[23:15:12.099]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:15:12.099]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:15:12.100]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:15:12.100]        // -> [powered_down <= 0x00000001]
[23:15:12.100]    </block>
[23:15:12.100]    <control if="powered_down" while="" timeout="0" info="">
[23:15:12.100]      // if-block "powered_down"
[23:15:12.100]        // =>  TRUE
[23:15:12.100]      <block atomic="false" info="">
[23:15:12.100]        Message(0, "Debug/System power-up request sent");
[23:15:12.104]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:15:12.106]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:15:12.106]      </block>
[23:15:12.106]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:15:12.106]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:15:12.109]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:15:12.109]        // while-condition  =>  FALSE
[23:15:12.109]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:15:12.109]      </control>
[23:15:12.109]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:15:12.109]        // if-block "(__protocol & 0xFFFF) == 1"
[23:15:12.109]          // =>  FALSE
[23:15:12.109]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:15:12.109]      </control>
[23:15:12.109]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:15:12.109]        // if-block "(__protocol & 0xFFFF) == 2"
[23:15:12.109]          // =>  TRUE
[23:15:12.109]        <block atomic="false" info="">
[23:15:12.109]          Message(0, "executing SWD power up");
[23:15:12.112]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:15:12.113]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:15:12.113]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:15:12.116]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:15:12.116]        </block>
[23:15:12.116]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:15:12.116]      </control>
[23:15:12.116]      // end if-block "powered_down"
[23:15:12.116]    </control>
[23:15:12.116]    <block atomic="false" info="">
[23:15:12.116]      __var DEBUG_PORT_VAL    = 0;
[23:15:12.116]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:15:12.116]      __var ACCESS_POINT_VAL  = 0;
[23:15:12.116]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:15:12.116]      __ap = 1; 
[23:15:12.116]        // -> [__ap <= 0x00000001]
[23:15:12.116]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:15:12.120]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:15:12.120]      __ap = 4;
[23:15:12.120]        // -> [__ap <= 0x00000004]
[23:15:12.120]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:15:12.127]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:15:12.127]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:15:12.127]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:15:12.128]    </block>
[23:15:12.128]    <block atomic="false" info="">
[23:15:12.128]      __var nReset = 0x80;
[23:15:12.128]        // -> [nReset <= 0x00000080]
[23:15:12.128]      __var canReadPins = 0;
[23:15:12.128]        // -> [canReadPins <= 0x00000000]
[23:15:12.128]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:15:12.131]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:15:12.131]        // -> [canReadPins <= 0x00000001]
[23:15:12.131]    </block>
[23:15:12.131]    <control if="" while="1" timeout="200" info="">
[23:15:12.131]      // while "1"  (timeout="200")
[23:15:12.131]      // while-condition  =>  TRUE
[23:15:12.132]      // while "1"  (timeout="200")
[23:15:12.132]      // while-condition  =>  TRUE
[23:15:12.132]      // while "1"  (timeout="200")
[23:15:12.132]      // while-condition  =>  TRUE
[23:15:12.132]      // while "1"  (timeout="200")
[23:15:12.132]      // while-condition  =>  TRUE
[23:15:12.132]      // while "1"  (timeout="200")
[23:15:12.133]      // while-condition  =>  TRUE
[23:15:12.133]      // while "1"  (timeout="200")
[23:15:12.133]      // while-condition  =>  TRUE
[23:15:12.133]      // while "1"  (timeout="200")
[23:15:12.133]      // while-condition  =>  TRUE
[23:15:12.133]      // while "1"  (timeout="200")
[23:15:12.133]      // while-condition  =>  TRUE
[23:15:12.133]      // while "1"  (timeout="200")
[23:15:12.133]      // while-condition  =>  TRUE
[23:15:12.133]      // while "1"  (timeout="200")
[23:15:12.133]      // while-condition  =>  TRUE
[23:15:12.133]      // while "1"  (timeout="200")
[23:15:12.133]      // while-condition  =>  TRUE
[23:15:12.135]      // while "1"  (timeout="200")
[23:15:12.135]      // while-condition  =>  TRUE
[23:15:12.135]      // while "1"  (timeout="200")
[23:15:12.135]      // while-condition  =>  TRUE
[23:15:12.135]      // while "1"  (timeout="200")
[23:15:12.135]      // while-condition  =>  TRUE
[23:15:12.135]      // while "1"  (timeout="200")
[23:15:12.135]      // while-condition  =>  TRUE
[23:15:12.135]      // while "1"  (timeout="200")
[23:15:12.135]      // while-condition  =>  TRUE
[23:15:12.135]      // while "1"  (timeout="200")
[23:15:12.135]      // while-condition  =>  TRUE
[23:15:12.135]      // while "1"  (timeout="200")
[23:15:12.135]      // while-condition  =>  TRUE
[23:15:12.135]      // while "1"  (timeout="200")
[23:15:12.135]      // while-condition  =>  TRUE
[23:15:12.135]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.136]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.136]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.136]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.136]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.136]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.136]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.136]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.136]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.136]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.136]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.136]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.136]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.136]      // while "1"  (timeout="200")
[23:15:12.136]      // while-condition  =>  TRUE
[23:15:12.139]      // while "1"  (timeout="200")
[23:15:12.139]      // while-condition  =>  TRUE
[23:15:12.139]      // while "1"  (timeout="200")
[23:15:12.139]      // while-condition  =>  TRUE
[23:15:12.139]      // while "1"  (timeout="200")
[23:15:12.139]      // while-condition  =>  TRUE
[23:15:12.139]      // while "1"  (timeout="200")
[23:15:12.139]      // while-condition  =>  TRUE
[23:15:12.139]      // while "1"  (timeout="200")
[23:15:12.139]      // while-condition  =>  TRUE
[23:15:12.139]      // while "1"  (timeout="200")
[23:15:12.139]      // while-condition  =>  TRUE
[23:15:12.140]      // while "1"  (timeout="200")
[23:15:12.140]      // while-condition  =>  TRUE
[23:15:12.140]      // while "1"  (timeout="200")
[23:15:12.140]      // while-condition  =>  TRUE
[23:15:12.140]      // while "1"  (timeout="200")
[23:15:12.140]      // while-condition  =>  TRUE
[23:15:12.141]      // while "1"  (timeout="200")
[23:15:12.141]      // while-condition  =>  TRUE
[23:15:12.141]      // while "1"  (timeout="200")
[23:15:12.141]      // while-condition  =>  TRUE
[23:15:12.141]      // while "1"  (timeout="200")
[23:15:12.141]      // while-condition  =>  TRUE
[23:15:12.141]      // while "1"  (timeout="200")
[23:15:12.141]      // while-condition  =>  TRUE
[23:15:12.141]      // while "1"  (timeout="200")
[23:15:12.141]      // while-condition  =>  TRUE
[23:15:12.141]      // while "1"  (timeout="200")
[23:15:12.143]      // while-condition  =>  TRUE
[23:15:12.143]      // while "1"  (timeout="200")
[23:15:12.143]      // while-condition  =>  TRUE
[23:15:12.143]      // while "1"  (timeout="200")
[23:15:12.143]      // while-condition  =>  TRUE
[23:15:12.143]      // while "1"  (timeout="200")
[23:15:12.143]      // while-condition  =>  TRUE
[23:15:12.143]      // while "1"  (timeout="200")
[23:15:12.143]      // while-condition  =>  TRUE
[23:15:12.143]      // while "1"  (timeout="200")
[23:15:12.143]      // while-condition  =>  TRUE
[23:15:12.143]      // while "1"  (timeout="200")
[23:15:12.143]      // while-condition  =>  TRUE
[23:15:12.144]      // while "1"  (timeout="200")
[23:15:12.144]      // while  =>  TIMEOUT
[23:15:12.144]      // end while "1"
[23:15:12.144]    </control>
[23:15:12.144]    <control if="canReadPins" while="" timeout="0" info="">
[23:15:12.144]      // if-block "canReadPins"
[23:15:12.144]        // =>  TRUE
[23:15:12.144]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:15:12.144]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:15:12.146]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:15:12.146]        // while-condition  =>  FALSE
[23:15:12.146]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:15:12.146]      </control>
[23:15:12.146]      // end if-block "canReadPins"
[23:15:12.147]    </control>
[23:15:12.147]    <control if="!canReadPins" while="" timeout="0" info="">
[23:15:12.147]      // if-block "!canReadPins"
[23:15:12.147]        // =>  FALSE
[23:15:12.147]      // skip if-block "!canReadPins"
[23:15:12.147]    </control>
[23:15:12.147]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:15:12.147]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:15:12.147]        // =>  TRUE
[23:15:12.147]      <block atomic="false" info="">
[23:15:12.147]        WriteAP(0x00, 0x190008);
[23:15:12.150]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:15:12.150]        WriteAP(0xF0, 0x01);
[23:15:12.153]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:15:12.153]      </block>
[23:15:12.153]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:15:12.153]    </control>
[23:15:12.153]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:15:12.153]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:15:12.153]        // =>  FALSE
[23:15:12.154]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:15:12.154]    </control>
[23:15:12.154]    <block atomic="false" info="">
[23:15:12.154]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:15:12.157]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:15:12.157]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:15:12.157]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:15:12.159]      __ap = 0; //lets make sure we reset the access point selection
[23:15:12.159]        // -> [__ap <= 0x00000000]
[23:15:12.159]    </block>
[23:15:12.159]  </sequence>
[23:15:12.159]  
[23:15:12.186]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:15:12.186]  
[23:15:12.186]  <debugvars>
[23:15:12.186]    // Pre-defined
[23:15:12.186]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:15:12.186]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:15:12.186]    __dp=0x00000000
[23:15:12.186]    __ap=0x00000000
[23:15:12.186]    __traceout=0x00000000      (Trace Disabled)
[23:15:12.186]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:15:12.186]    __FlashAddr=0x00000000
[23:15:12.186]    __FlashLen=0x00000000
[23:15:12.186]    __FlashArg=0x00000000
[23:15:12.186]    __FlashOp=0x00000000
[23:15:12.186]    __Result=0x00000000
[23:15:12.186]  </debugvars>
[23:15:12.186]  
[23:15:12.186]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:15:12.186]    <block atomic="false" info="">
[23:15:12.186]      __var deviceID = 0;
[23:15:12.186]        // -> [deviceID <= 0x00000000]
[23:15:12.186]      __var version = 0;
[23:15:12.186]        // -> [version <= 0x00000000]
[23:15:12.186]      __var partNum = 0;
[23:15:12.186]        // -> [partNum <= 0x00000000]
[23:15:12.186]      __var manuf = 0;
[23:15:12.186]        // -> [manuf <= 0x00000000]
[23:15:12.190]      __var isMSPM0G1X0X_G3X0X = 0;
[23:15:12.190]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:15:12.190]      __var isProduction = 0;
[23:15:12.190]        // -> [isProduction <= 0x00000000]
[23:15:12.191]      __var continueId = 0;
[23:15:12.191]        // -> [continueId <= 0x00000000]
[23:15:12.191]      deviceID =   Read32(0x41C40004);
[23:15:12.196]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:15:12.196]        // -> [deviceID <= 0x2BB8802F]
[23:15:12.196]      version = deviceID >> 28;
[23:15:12.196]        // -> [version <= 0x00000002]
[23:15:12.196]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:15:12.196]        // -> [partNum <= 0x0000BB88]
[23:15:12.198]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:15:12.198]        // -> [manuf <= 0x00000017]
[23:15:12.198]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:15:12.198]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:15:12.198]      isProduction = (version > 0);
[23:15:12.198]        // -> [isProduction <= 0x00000001]
[23:15:12.198]    </block>
[23:15:12.198]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:15:12.198]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:15:12.198]        // =>  FALSE
[23:15:12.198]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:15:12.198]    </control>
[23:15:12.198]    <control if="continueId == 4" while="" timeout="0" info="">
[23:15:12.199]      // if-block "continueId == 4"
[23:15:12.199]        // =>  FALSE
[23:15:12.199]      // skip if-block "continueId == 4"
[23:15:12.199]    </control>
[23:15:12.199]    <control if="!isProduction" while="" timeout="0" info="">
[23:15:12.199]      // if-block "!isProduction"
[23:15:12.199]        // =>  FALSE
[23:15:12.199]      // skip if-block "!isProduction"
[23:15:12.199]    </control>
[23:15:12.199]  </sequence>
[23:15:12.199]  
[23:15:35.108]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:15:35.108]  
[23:15:35.116]  <debugvars>
[23:15:35.116]    // Pre-defined
[23:15:35.116]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:15:35.116]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:15:35.116]    __dp=0x00000000
[23:15:35.116]    __ap=0x00000000
[23:15:35.117]    __traceout=0x00000000      (Trace Disabled)
[23:15:35.117]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:15:35.117]    __FlashAddr=0x00000000
[23:15:35.117]    __FlashLen=0x00000000
[23:15:35.117]    __FlashArg=0x00000000
[23:15:35.117]    __FlashOp=0x00000000
[23:15:35.118]    __Result=0x00000000
[23:15:35.118]  </debugvars>
[23:15:35.118]  
[23:15:35.118]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:15:35.118]    <block atomic="false" info="">
[23:15:35.118]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:15:35.118]        // -> [isSWJ <= 0x00000001]
[23:15:35.118]      __var hasDormant = __protocol & 0x00020000;
[23:15:35.118]        // -> [hasDormant <= 0x00000000]
[23:15:35.118]      __var protType   = __protocol & 0x0000FFFF;
[23:15:35.118]        // -> [protType <= 0x00000002]
[23:15:35.119]    </block>
[23:15:35.119]    <control if="protType == 1" while="" timeout="0" info="">
[23:15:35.119]      // if-block "protType == 1"
[23:15:35.119]        // =>  FALSE
[23:15:35.119]      // skip if-block "protType == 1"
[23:15:35.119]    </control>
[23:15:35.119]    <control if="protType == 2" while="" timeout="0" info="">
[23:15:35.119]      // if-block "protType == 2"
[23:15:35.119]        // =>  TRUE
[23:15:35.119]      <control if="isSWJ" while="" timeout="0" info="">
[23:15:35.120]        // if-block "isSWJ"
[23:15:35.120]          // =>  TRUE
[23:15:35.120]        <control if="hasDormant" while="" timeout="0" info="">
[23:15:35.120]          // if-block "hasDormant"
[23:15:35.120]            // =>  FALSE
[23:15:35.120]          // skip if-block "hasDormant"
[23:15:35.120]        </control>
[23:15:35.120]        <control if="!hasDormant" while="" timeout="0" info="">
[23:15:35.120]          // if-block "!hasDormant"
[23:15:35.121]            // =>  TRUE
[23:15:35.121]          <block atomic="false" info="">
[23:15:35.121]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:15:35.123]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:15:35.123]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:15:35.124]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:15:35.124]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:15:35.124]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:15:35.124]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:15:35.128]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:15:35.129]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:15:35.130]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:15:35.130]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:15:35.131]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:15:35.131]          </block>
[23:15:35.131]          // end if-block "!hasDormant"
[23:15:35.131]        </control>
[23:15:35.131]        // end if-block "isSWJ"
[23:15:35.131]      </control>
[23:15:35.131]      <control if="!isSWJ" while="" timeout="0" info="">
[23:15:35.131]        // if-block "!isSWJ"
[23:15:35.131]          // =>  FALSE
[23:15:35.131]        // skip if-block "!isSWJ"
[23:15:35.131]      </control>
[23:15:35.131]      <block atomic="false" info="">
[23:15:35.131]        ReadDP(0x0);
[23:15:35.135]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:15:35.135]      </block>
[23:15:35.135]      // end if-block "protType == 2"
[23:15:35.135]    </control>
[23:15:35.135]  </sequence>
[23:15:35.135]  
[23:15:35.139]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:15:35.139]  
[23:15:35.141]  <debugvars>
[23:15:35.141]    // Pre-defined
[23:15:35.141]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:15:35.141]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:15:35.141]    __dp=0x00000000
[23:15:35.141]    __ap=0x00000000
[23:15:35.141]    __traceout=0x00000000      (Trace Disabled)
[23:15:35.141]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:15:35.141]    __FlashAddr=0x00000000
[23:15:35.141]    __FlashLen=0x00000000
[23:15:35.141]    __FlashArg=0x00000000
[23:15:35.141]    __FlashOp=0x00000000
[23:15:35.141]    __Result=0x00000000
[23:15:35.141]  </debugvars>
[23:15:35.141]  
[23:15:35.142]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:15:35.142]    <block atomic="false" info="">
[23:15:35.142]      __var SW_DP_ABORT       = 0x0;
[23:15:35.142]        // -> [SW_DP_ABORT <= 0x00000000]
[23:15:35.142]      __var DP_CTRL_STAT      = 0x4;
[23:15:35.142]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:15:35.142]      __var DP_SELECT         = 0x8;
[23:15:35.142]        // -> [DP_SELECT <= 0x00000008]
[23:15:35.142]      __var powered_down      = 0;
[23:15:35.142]        // -> [powered_down <= 0x00000000]
[23:15:35.142]      WriteDP(DP_SELECT, 0x00000000);
[23:15:35.144]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:15:35.144]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:15:35.149]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:15:35.149]        // -> [powered_down <= 0x00000001]
[23:15:35.149]    </block>
[23:15:35.149]    <control if="powered_down" while="" timeout="0" info="">
[23:15:35.149]      // if-block "powered_down"
[23:15:35.149]        // =>  TRUE
[23:15:35.149]      <block atomic="false" info="">
[23:15:35.149]        Message(0, "Debug/System power-up request sent");
[23:15:35.154]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:15:35.156]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:15:35.156]      </block>
[23:15:35.156]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:15:35.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:15:35.158]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:15:35.158]        // while-condition  =>  FALSE
[23:15:35.158]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:15:35.158]      </control>
[23:15:35.158]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:15:35.158]        // if-block "(__protocol & 0xFFFF) == 1"
[23:15:35.158]          // =>  FALSE
[23:15:35.158]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:15:35.158]      </control>
[23:15:35.159]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:15:35.159]        // if-block "(__protocol & 0xFFFF) == 2"
[23:15:35.159]          // =>  TRUE
[23:15:35.159]        <block atomic="false" info="">
[23:15:35.159]          Message(0, "executing SWD power up");
[23:15:35.161]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:15:35.163]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:15:35.163]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:15:35.164]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:15:35.164]        </block>
[23:15:35.164]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:15:35.164]      </control>
[23:15:35.164]      // end if-block "powered_down"
[23:15:35.164]    </control>
[23:15:35.164]    <block atomic="false" info="">
[23:15:35.164]      __var DEBUG_PORT_VAL    = 0;
[23:15:35.164]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:15:35.164]      __var ACCESS_POINT_VAL  = 0;
[23:15:35.166]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:15:35.166]      __ap = 1; 
[23:15:35.166]        // -> [__ap <= 0x00000001]
[23:15:35.166]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:15:35.170]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:15:35.170]      __ap = 4;
[23:15:35.170]        // -> [__ap <= 0x00000004]
[23:15:35.170]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:15:35.173]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:15:35.173]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:15:35.174]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:15:35.175]    </block>
[23:15:35.175]    <block atomic="false" info="">
[23:15:35.175]      __var nReset = 0x80;
[23:15:35.175]        // -> [nReset <= 0x00000080]
[23:15:35.175]      __var canReadPins = 0;
[23:15:35.175]        // -> [canReadPins <= 0x00000000]
[23:15:35.175]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:15:35.175]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:15:35.175]        // -> [canReadPins <= 0x00000001]
[23:15:35.175]    </block>
[23:15:35.175]    <control if="" while="1" timeout="200" info="">
[23:15:35.175]      // while "1"  (timeout="200")
[23:15:35.175]      // while-condition  =>  TRUE
[23:15:35.180]      // while "1"  (timeout="200")
[23:15:35.180]      // while-condition  =>  TRUE
[23:15:35.180]      // while "1"  (timeout="200")
[23:15:35.180]      // while-condition  =>  TRUE
[23:15:35.180]      // while "1"  (timeout="200")
[23:15:35.180]      // while-condition  =>  TRUE
[23:15:35.180]      // while "1"  (timeout="200")
[23:15:35.180]      // while-condition  =>  TRUE
[23:15:35.180]      // while "1"  (timeout="200")
[23:15:35.180]      // while-condition  =>  TRUE
[23:15:35.180]      // while "1"  (timeout="200")
[23:15:35.180]      // while-condition  =>  TRUE
[23:15:35.180]      // while "1"  (timeout="200")
[23:15:35.180]      // while-condition  =>  TRUE
[23:15:35.182]      // while "1"  (timeout="200")
[23:15:35.182]      // while-condition  =>  TRUE
[23:15:35.182]      // while "1"  (timeout="200")
[23:15:35.182]      // while-condition  =>  TRUE
[23:15:35.182]      // while "1"  (timeout="200")
[23:15:35.182]      // while-condition  =>  TRUE
[23:15:35.182]      // while "1"  (timeout="200")
[23:15:35.182]      // while-condition  =>  TRUE
[23:15:35.182]      // while "1"  (timeout="200")
[23:15:35.182]      // while-condition  =>  TRUE
[23:15:35.182]      // while "1"  (timeout="200")
[23:15:35.182]      // while-condition  =>  TRUE
[23:15:35.182]      // while "1"  (timeout="200")
[23:15:35.182]      // while-condition  =>  TRUE
[23:15:35.182]      // while "1"  (timeout="200")
[23:15:35.182]      // while-condition  =>  TRUE
[23:15:35.182]      // while "1"  (timeout="200")
[23:15:35.182]      // while-condition  =>  TRUE
[23:15:35.182]      // while "1"  (timeout="200")
[23:15:35.182]      // while-condition  =>  TRUE
[23:15:35.184]      // while "1"  (timeout="200")
[23:15:35.184]      // while-condition  =>  TRUE
[23:15:35.184]      // while "1"  (timeout="200")
[23:15:35.184]      // while-condition  =>  TRUE
[23:15:35.184]      // while "1"  (timeout="200")
[23:15:35.184]      // while-condition  =>  TRUE
[23:15:35.184]      // while "1"  (timeout="200")
[23:15:35.184]      // while-condition  =>  TRUE
[23:15:35.184]      // while "1"  (timeout="200")
[23:15:35.184]      // while-condition  =>  TRUE
[23:15:35.184]      // while "1"  (timeout="200")
[23:15:35.184]      // while-condition  =>  TRUE
[23:15:35.184]      // while "1"  (timeout="200")
[23:15:35.184]      // while-condition  =>  TRUE
[23:15:35.186]      // while "1"  (timeout="200")
[23:15:35.186]      // while-condition  =>  TRUE
[23:15:35.186]      // while "1"  (timeout="200")
[23:15:35.186]      // while-condition  =>  TRUE
[23:15:35.186]      // while "1"  (timeout="200")
[23:15:35.186]      // while-condition  =>  TRUE
[23:15:35.186]      // while "1"  (timeout="200")
[23:15:35.186]      // while-condition  =>  TRUE
[23:15:35.186]      // while "1"  (timeout="200")
[23:15:35.186]      // while-condition  =>  TRUE
[23:15:35.186]      // while "1"  (timeout="200")
[23:15:35.186]      // while-condition  =>  TRUE
[23:15:35.187]      // while "1"  (timeout="200")
[23:15:35.187]      // while-condition  =>  TRUE
[23:15:35.187]      // while "1"  (timeout="200")
[23:15:35.187]      // while-condition  =>  TRUE
[23:15:35.187]      // while "1"  (timeout="200")
[23:15:35.187]      // while-condition  =>  TRUE
[23:15:35.187]      // while "1"  (timeout="200")
[23:15:35.187]      // while-condition  =>  TRUE
[23:15:35.187]      // while "1"  (timeout="200")
[23:15:35.187]      // while-condition  =>  TRUE
[23:15:35.187]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.189]      // while-condition  =>  TRUE
[23:15:35.189]      // while "1"  (timeout="200")
[23:15:35.193]      // while-condition  =>  TRUE
[23:15:35.193]      // while "1"  (timeout="200")
[23:15:35.193]      // while  =>  TIMEOUT
[23:15:35.193]      // end while "1"
[23:15:35.193]    </control>
[23:15:35.193]    <control if="canReadPins" while="" timeout="0" info="">
[23:15:35.193]      // if-block "canReadPins"
[23:15:35.193]        // =>  TRUE
[23:15:35.193]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:15:35.193]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:15:35.195]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:15:35.195]        // while-condition  =>  FALSE
[23:15:35.195]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:15:35.195]      </control>
[23:15:35.195]      // end if-block "canReadPins"
[23:15:35.195]    </control>
[23:15:35.195]    <control if="!canReadPins" while="" timeout="0" info="">
[23:15:35.195]      // if-block "!canReadPins"
[23:15:35.195]        // =>  FALSE
[23:15:35.197]      // skip if-block "!canReadPins"
[23:15:35.197]    </control>
[23:15:35.197]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:15:35.197]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:15:35.197]        // =>  TRUE
[23:15:35.197]      <block atomic="false" info="">
[23:15:35.197]        WriteAP(0x00, 0x190008);
[23:15:35.198]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:15:35.198]        WriteAP(0xF0, 0x01);
[23:15:35.203]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:15:35.203]      </block>
[23:15:35.203]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:15:35.205]    </control>
[23:15:35.205]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:15:35.205]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:15:35.205]        // =>  FALSE
[23:15:35.205]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:15:35.205]    </control>
[23:15:35.205]    <block atomic="false" info="">
[23:15:35.205]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:15:35.213]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:15:35.213]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:15:35.213]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:15:35.218]      __ap = 0; //lets make sure we reset the access point selection
[23:15:35.219]        // -> [__ap <= 0x00000000]
[23:15:35.219]    </block>
[23:15:35.219]  </sequence>
[23:15:35.219]  
[23:15:35.238]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:15:35.238]  
[23:15:35.238]  <debugvars>
[23:15:35.238]    // Pre-defined
[23:15:35.238]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:15:35.238]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:15:35.239]    __dp=0x00000000
[23:15:35.239]    __ap=0x00000000
[23:15:35.239]    __traceout=0x00000000      (Trace Disabled)
[23:15:35.239]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:15:35.239]    __FlashAddr=0x00000000
[23:15:35.239]    __FlashLen=0x00000000
[23:15:35.239]    __FlashArg=0x00000000
[23:15:35.239]    __FlashOp=0x00000000
[23:15:35.239]    __Result=0x00000000
[23:15:35.240]  </debugvars>
[23:15:35.240]  
[23:15:35.240]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:15:35.240]    <block atomic="false" info="">
[23:15:35.240]      __var deviceID = 0;
[23:15:35.240]        // -> [deviceID <= 0x00000000]
[23:15:35.240]      __var version = 0;
[23:15:35.240]        // -> [version <= 0x00000000]
[23:15:35.240]      __var partNum = 0;
[23:15:35.241]        // -> [partNum <= 0x00000000]
[23:15:35.241]      __var manuf = 0;
[23:15:35.241]        // -> [manuf <= 0x00000000]
[23:15:35.241]      __var isMSPM0G1X0X_G3X0X = 0;
[23:15:35.241]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:15:35.242]      __var isProduction = 0;
[23:15:35.242]        // -> [isProduction <= 0x00000000]
[23:15:35.242]      __var continueId = 0;
[23:15:35.243]        // -> [continueId <= 0x00000000]
[23:15:35.243]      deviceID =   Read32(0x41C40004);
[23:15:35.247]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:15:35.247]        // -> [deviceID <= 0x2BB8802F]
[23:15:35.247]      version = deviceID >> 28;
[23:15:35.247]        // -> [version <= 0x00000002]
[23:15:35.247]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:15:35.248]        // -> [partNum <= 0x0000BB88]
[23:15:35.248]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:15:35.248]        // -> [manuf <= 0x00000017]
[23:15:35.248]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:15:35.248]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:15:35.248]      isProduction = (version > 0);
[23:15:35.248]        // -> [isProduction <= 0x00000001]
[23:15:35.248]    </block>
[23:15:35.248]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:15:35.248]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:15:35.249]        // =>  FALSE
[23:15:35.249]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:15:35.249]    </control>
[23:15:35.249]    <control if="continueId == 4" while="" timeout="0" info="">
[23:15:35.249]      // if-block "continueId == 4"
[23:15:35.249]        // =>  FALSE
[23:15:35.249]      // skip if-block "continueId == 4"
[23:15:35.249]    </control>
[23:15:35.249]    <control if="!isProduction" while="" timeout="0" info="">
[23:15:35.250]      // if-block "!isProduction"
[23:15:35.250]        // =>  FALSE
[23:15:35.250]      // skip if-block "!isProduction"
[23:15:35.250]    </control>
[23:15:35.250]  </sequence>
[23:15:35.250]  
[23:16:45.435]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:16:45.435]  
[23:16:45.444]  <debugvars>
[23:16:45.444]    // Pre-defined
[23:16:45.444]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:16:45.444]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:16:45.444]    __dp=0x00000000
[23:16:45.444]    __ap=0x00000000
[23:16:45.444]    __traceout=0x00000000      (Trace Disabled)
[23:16:45.444]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:16:45.444]    __FlashAddr=0x00000000
[23:16:45.445]    __FlashLen=0x00000000
[23:16:45.445]    __FlashArg=0x00000000
[23:16:45.445]    __FlashOp=0x00000000
[23:16:45.445]    __Result=0x00000000
[23:16:45.445]  </debugvars>
[23:16:45.445]  
[23:16:45.445]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:16:45.445]    <block atomic="false" info="">
[23:16:45.445]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:16:45.445]        // -> [isSWJ <= 0x00000001]
[23:16:45.445]      __var hasDormant = __protocol & 0x00020000;
[23:16:45.445]        // -> [hasDormant <= 0x00000000]
[23:16:45.445]      __var protType   = __protocol & 0x0000FFFF;
[23:16:45.445]        // -> [protType <= 0x00000002]
[23:16:45.445]    </block>
[23:16:45.445]    <control if="protType == 1" while="" timeout="0" info="">
[23:16:45.445]      // if-block "protType == 1"
[23:16:45.445]        // =>  FALSE
[23:16:45.445]      // skip if-block "protType == 1"
[23:16:45.445]    </control>
[23:16:45.445]    <control if="protType == 2" while="" timeout="0" info="">
[23:16:45.445]      // if-block "protType == 2"
[23:16:45.445]        // =>  TRUE
[23:16:45.445]      <control if="isSWJ" while="" timeout="0" info="">
[23:16:45.447]        // if-block "isSWJ"
[23:16:45.447]          // =>  TRUE
[23:16:45.447]        <control if="hasDormant" while="" timeout="0" info="">
[23:16:45.447]          // if-block "hasDormant"
[23:16:45.447]            // =>  FALSE
[23:16:45.447]          // skip if-block "hasDormant"
[23:16:45.448]        </control>
[23:16:45.448]        <control if="!hasDormant" while="" timeout="0" info="">
[23:16:45.449]          // if-block "!hasDormant"
[23:16:45.449]            // =>  TRUE
[23:16:45.449]          <block atomic="false" info="">
[23:16:45.449]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:16:45.451]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:16:45.451]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:16:45.452]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:16:45.452]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:16:45.455]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:16:45.455]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:16:45.456]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:16:45.456]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:16:45.457]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:16:45.457]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:16:45.457]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:16:45.457]          </block>
[23:16:45.457]          // end if-block "!hasDormant"
[23:16:45.459]        </control>
[23:16:45.459]        // end if-block "isSWJ"
[23:16:45.459]      </control>
[23:16:45.459]      <control if="!isSWJ" while="" timeout="0" info="">
[23:16:45.459]        // if-block "!isSWJ"
[23:16:45.459]          // =>  FALSE
[23:16:45.459]        // skip if-block "!isSWJ"
[23:16:45.459]      </control>
[23:16:45.459]      <block atomic="false" info="">
[23:16:45.459]        ReadDP(0x0);
[23:16:45.461]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:16:45.461]      </block>
[23:16:45.461]      // end if-block "protType == 2"
[23:16:45.461]    </control>
[23:16:45.461]  </sequence>
[23:16:45.461]  
[23:16:45.465]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:16:45.465]  
[23:16:45.465]  <debugvars>
[23:16:45.465]    // Pre-defined
[23:16:45.465]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:16:45.465]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:16:45.465]    __dp=0x00000000
[23:16:45.465]    __ap=0x00000000
[23:16:45.465]    __traceout=0x00000000      (Trace Disabled)
[23:16:45.465]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:16:45.465]    __FlashAddr=0x00000000
[23:16:45.465]    __FlashLen=0x00000000
[23:16:45.465]    __FlashArg=0x00000000
[23:16:45.465]    __FlashOp=0x00000000
[23:16:45.466]    __Result=0x00000000
[23:16:45.466]  </debugvars>
[23:16:45.466]  
[23:16:45.466]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:16:45.466]    <block atomic="false" info="">
[23:16:45.466]      __var SW_DP_ABORT       = 0x0;
[23:16:45.466]        // -> [SW_DP_ABORT <= 0x00000000]
[23:16:45.466]      __var DP_CTRL_STAT      = 0x4;
[23:16:45.466]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:16:45.466]      __var DP_SELECT         = 0x8;
[23:16:45.466]        // -> [DP_SELECT <= 0x00000008]
[23:16:45.466]      __var powered_down      = 0;
[23:16:45.466]        // -> [powered_down <= 0x00000000]
[23:16:45.466]      WriteDP(DP_SELECT, 0x00000000);
[23:16:45.470]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:16:45.470]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:16:45.471]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:16:45.471]        // -> [powered_down <= 0x00000001]
[23:16:45.471]    </block>
[23:16:45.471]    <control if="powered_down" while="" timeout="0" info="">
[23:16:45.471]      // if-block "powered_down"
[23:16:45.471]        // =>  TRUE
[23:16:45.471]      <block atomic="false" info="">
[23:16:45.471]        Message(0, "Debug/System power-up request sent");
[23:16:45.476]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:16:45.477]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:16:45.477]      </block>
[23:16:45.477]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:16:45.477]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:16:45.481]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:16:45.481]        // while-condition  =>  FALSE
[23:16:45.481]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:16:45.481]      </control>
[23:16:45.481]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:16:45.481]        // if-block "(__protocol & 0xFFFF) == 1"
[23:16:45.481]          // =>  FALSE
[23:16:45.481]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:16:45.481]      </control>
[23:16:45.481]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:16:45.481]        // if-block "(__protocol & 0xFFFF) == 2"
[23:16:45.481]          // =>  TRUE
[23:16:45.481]        <block atomic="false" info="">
[23:16:45.481]          Message(0, "executing SWD power up");
[23:16:45.484]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:16:45.485]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:16:45.485]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:16:45.485]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:16:45.485]        </block>
[23:16:45.485]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:16:45.485]      </control>
[23:16:45.485]      // end if-block "powered_down"
[23:16:45.485]    </control>
[23:16:45.485]    <block atomic="false" info="">
[23:16:45.485]      __var DEBUG_PORT_VAL    = 0;
[23:16:45.485]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:16:45.485]      __var ACCESS_POINT_VAL  = 0;
[23:16:45.485]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:16:45.490]      __ap = 1; 
[23:16:45.490]        // -> [__ap <= 0x00000001]
[23:16:45.490]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:16:45.493]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:16:45.493]      __ap = 4;
[23:16:45.493]        // -> [__ap <= 0x00000004]
[23:16:45.494]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:16:45.498]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:16:45.498]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:16:45.498]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:16:45.499]    </block>
[23:16:45.499]    <block atomic="false" info="">
[23:16:45.499]      __var nReset = 0x80;
[23:16:45.499]        // -> [nReset <= 0x00000080]
[23:16:45.499]      __var canReadPins = 0;
[23:16:45.499]        // -> [canReadPins <= 0x00000000]
[23:16:45.499]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:16:45.502]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:16:45.502]        // -> [canReadPins <= 0x00000001]
[23:16:45.502]    </block>
[23:16:45.503]    <control if="" while="1" timeout="200" info="">
[23:16:45.503]      // while "1"  (timeout="200")
[23:16:45.503]      // while-condition  =>  TRUE
[23:16:45.503]      // while "1"  (timeout="200")
[23:16:45.503]      // while-condition  =>  TRUE
[23:16:45.503]      // while "1"  (timeout="200")
[23:16:45.503]      // while-condition  =>  TRUE
[23:16:45.503]      // while "1"  (timeout="200")
[23:16:45.503]      // while-condition  =>  TRUE
[23:16:45.503]      // while "1"  (timeout="200")
[23:16:45.503]      // while-condition  =>  TRUE
[23:16:45.504]      // while "1"  (timeout="200")
[23:16:45.504]      // while-condition  =>  TRUE
[23:16:45.504]      // while "1"  (timeout="200")
[23:16:45.504]      // while-condition  =>  TRUE
[23:16:45.504]      // while "1"  (timeout="200")
[23:16:45.504]      // while-condition  =>  TRUE
[23:16:45.504]      // while "1"  (timeout="200")
[23:16:45.504]      // while-condition  =>  TRUE
[23:16:45.504]      // while "1"  (timeout="200")
[23:16:45.504]      // while-condition  =>  TRUE
[23:16:45.504]      // while "1"  (timeout="200")
[23:16:45.504]      // while-condition  =>  TRUE
[23:16:45.504]      // while "1"  (timeout="200")
[23:16:45.504]      // while-condition  =>  TRUE
[23:16:45.504]      // while "1"  (timeout="200")
[23:16:45.504]      // while-condition  =>  TRUE
[23:16:45.504]      // while "1"  (timeout="200")
[23:16:45.504]      // while-condition  =>  TRUE
[23:16:45.504]      // while "1"  (timeout="200")
[23:16:45.504]      // while-condition  =>  TRUE
[23:16:45.504]      // while "1"  (timeout="200")
[23:16:45.504]      // while-condition  =>  TRUE
[23:16:45.504]      // while "1"  (timeout="200")
[23:16:45.504]      // while-condition  =>  TRUE
[23:16:45.506]      // while "1"  (timeout="200")
[23:16:45.506]      // while-condition  =>  TRUE
[23:16:45.506]      // while "1"  (timeout="200")
[23:16:45.506]      // while-condition  =>  TRUE
[23:16:45.506]      // while "1"  (timeout="200")
[23:16:45.506]      // while-condition  =>  TRUE
[23:16:45.506]      // while "1"  (timeout="200")
[23:16:45.506]      // while-condition  =>  TRUE
[23:16:45.506]      // while "1"  (timeout="200")
[23:16:45.506]      // while-condition  =>  TRUE
[23:16:45.506]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.507]      // while-condition  =>  TRUE
[23:16:45.507]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.510]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.510]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.510]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.510]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.510]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.510]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.510]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.510]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.510]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.510]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.510]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.510]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.510]      // while "1"  (timeout="200")
[23:16:45.510]      // while-condition  =>  TRUE
[23:16:45.513]      // while "1"  (timeout="200")
[23:16:45.513]      // while-condition  =>  TRUE
[23:16:45.513]      // while "1"  (timeout="200")
[23:16:45.513]      // while-condition  =>  TRUE
[23:16:45.513]      // while "1"  (timeout="200")
[23:16:45.513]      // while-condition  =>  TRUE
[23:16:45.513]      // while "1"  (timeout="200")
[23:16:45.513]      // while-condition  =>  TRUE
[23:16:45.513]      // while "1"  (timeout="200")
[23:16:45.513]      // while-condition  =>  TRUE
[23:16:45.513]      // while "1"  (timeout="200")
[23:16:45.514]      // while-condition  =>  TRUE
[23:16:45.514]      // while "1"  (timeout="200")
[23:16:45.514]      // while-condition  =>  TRUE
[23:16:45.514]      // while "1"  (timeout="200")
[23:16:45.514]      // while-condition  =>  TRUE
[23:16:45.514]      // while "1"  (timeout="200")
[23:16:45.514]      // while-condition  =>  TRUE
[23:16:45.514]      // while "1"  (timeout="200")
[23:16:45.514]      // while-condition  =>  TRUE
[23:16:45.514]      // while "1"  (timeout="200")
[23:16:45.515]      // while-condition  =>  TRUE
[23:16:45.515]      // while "1"  (timeout="200")
[23:16:45.515]      // while-condition  =>  TRUE
[23:16:45.515]      // while "1"  (timeout="200")
[23:16:45.515]      // while-condition  =>  TRUE
[23:16:45.515]      // while "1"  (timeout="200")
[23:16:45.515]      // while-condition  =>  TRUE
[23:16:45.515]      // while "1"  (timeout="200")
[23:16:45.515]      // while-condition  =>  TRUE
[23:16:45.515]      // while "1"  (timeout="200")
[23:16:45.515]      // while-condition  =>  TRUE
[23:16:45.516]      // while "1"  (timeout="200")
[23:16:45.516]      // while-condition  =>  TRUE
[23:16:45.516]      // while "1"  (timeout="200")
[23:16:45.516]      // while-condition  =>  TRUE
[23:16:45.516]      // while "1"  (timeout="200")
[23:16:45.516]      // while-condition  =>  TRUE
[23:16:45.516]      // while "1"  (timeout="200")
[23:16:45.516]      // while-condition  =>  TRUE
[23:16:45.516]      // while "1"  (timeout="200")
[23:16:45.516]      // while-condition  =>  TRUE
[23:16:45.516]      // while "1"  (timeout="200")
[23:16:45.516]      // while-condition  =>  TRUE
[23:16:45.518]      // while "1"  (timeout="200")
[23:16:45.518]      // while-condition  =>  TRUE
[23:16:45.518]      // while "1"  (timeout="200")
[23:16:45.518]      // while-condition  =>  TRUE
[23:16:45.518]      // while "1"  (timeout="200")
[23:16:45.518]      // while-condition  =>  TRUE
[23:16:45.518]      // while "1"  (timeout="200")
[23:16:45.518]      // while-condition  =>  TRUE
[23:16:45.518]      // while "1"  (timeout="200")
[23:16:45.519]      // while-condition  =>  TRUE
[23:16:45.519]      // while "1"  (timeout="200")
[23:16:45.519]      // while  =>  TIMEOUT
[23:16:45.519]      // end while "1"
[23:16:45.519]    </control>
[23:16:45.519]    <control if="canReadPins" while="" timeout="0" info="">
[23:16:45.519]      // if-block "canReadPins"
[23:16:45.519]        // =>  TRUE
[23:16:45.519]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:16:45.519]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:16:45.523]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:16:45.523]        // while-condition  =>  FALSE
[23:16:45.523]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:16:45.523]      </control>
[23:16:45.523]      // end if-block "canReadPins"
[23:16:45.523]    </control>
[23:16:45.523]    <control if="!canReadPins" while="" timeout="0" info="">
[23:16:45.523]      // if-block "!canReadPins"
[23:16:45.523]        // =>  FALSE
[23:16:45.523]      // skip if-block "!canReadPins"
[23:16:45.523]    </control>
[23:16:45.523]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:16:45.523]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:16:45.523]        // =>  TRUE
[23:16:45.523]      <block atomic="false" info="">
[23:16:45.523]        WriteAP(0x00, 0x190008);
[23:16:45.526]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:16:45.526]        WriteAP(0xF0, 0x01);
[23:16:45.530]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:16:45.530]      </block>
[23:16:45.531]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:16:45.531]    </control>
[23:16:45.531]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:16:45.531]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:16:45.531]        // =>  FALSE
[23:16:45.531]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:16:45.531]    </control>
[23:16:45.531]    <block atomic="false" info="">
[23:16:45.531]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:16:45.534]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:16:45.534]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:16:45.534]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:16:45.536]      __ap = 0; //lets make sure we reset the access point selection
[23:16:45.536]        // -> [__ap <= 0x00000000]
[23:16:45.536]    </block>
[23:16:45.536]  </sequence>
[23:16:45.536]  
[23:16:45.556]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:16:45.556]  
[23:16:45.556]  <debugvars>
[23:16:45.556]    // Pre-defined
[23:16:45.556]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:16:45.556]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:16:45.556]    __dp=0x00000000
[23:16:45.556]    __ap=0x00000000
[23:16:45.556]    __traceout=0x00000000      (Trace Disabled)
[23:16:45.556]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:16:45.556]    __FlashAddr=0x00000000
[23:16:45.556]    __FlashLen=0x00000000
[23:16:45.556]    __FlashArg=0x00000000
[23:16:45.556]    __FlashOp=0x00000000
[23:16:45.556]    __Result=0x00000000
[23:16:45.556]  </debugvars>
[23:16:45.556]  
[23:16:45.556]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:16:45.556]    <block atomic="false" info="">
[23:16:45.556]      __var deviceID = 0;
[23:16:45.556]        // -> [deviceID <= 0x00000000]
[23:16:45.556]      __var version = 0;
[23:16:45.560]        // -> [version <= 0x00000000]
[23:16:45.560]      __var partNum = 0;
[23:16:45.560]        // -> [partNum <= 0x00000000]
[23:16:45.560]      __var manuf = 0;
[23:16:45.560]        // -> [manuf <= 0x00000000]
[23:16:45.560]      __var isMSPM0G1X0X_G3X0X = 0;
[23:16:45.560]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:16:45.560]      __var isProduction = 0;
[23:16:45.561]        // -> [isProduction <= 0x00000000]
[23:16:45.561]      __var continueId = 0;
[23:16:45.561]        // -> [continueId <= 0x00000000]
[23:16:45.561]      deviceID =   Read32(0x41C40004);
[23:16:45.565]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:16:45.565]        // -> [deviceID <= 0x2BB8802F]
[23:16:45.565]      version = deviceID >> 28;
[23:16:45.565]        // -> [version <= 0x00000002]
[23:16:45.565]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:16:45.565]        // -> [partNum <= 0x0000BB88]
[23:16:45.565]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:16:45.565]        // -> [manuf <= 0x00000017]
[23:16:45.565]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:16:45.565]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:16:45.565]      isProduction = (version > 0);
[23:16:45.565]        // -> [isProduction <= 0x00000001]
[23:16:45.565]    </block>
[23:16:45.565]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:16:45.565]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:16:45.565]        // =>  FALSE
[23:16:45.565]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:16:45.565]    </control>
[23:16:45.565]    <control if="continueId == 4" while="" timeout="0" info="">
[23:16:45.569]      // if-block "continueId == 4"
[23:16:45.569]        // =>  FALSE
[23:16:45.569]      // skip if-block "continueId == 4"
[23:16:45.569]    </control>
[23:16:45.569]    <control if="!isProduction" while="" timeout="0" info="">
[23:16:45.569]      // if-block "!isProduction"
[23:16:45.569]        // =>  FALSE
[23:16:45.569]      // skip if-block "!isProduction"
[23:16:45.569]    </control>
[23:16:45.569]  </sequence>
[23:16:45.569]  
[23:17:15.440]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:17:15.440]  
[23:17:15.448]  <debugvars>
[23:17:15.448]    // Pre-defined
[23:17:15.448]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:17:15.448]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:17:15.448]    __dp=0x00000000
[23:17:15.448]    __ap=0x00000000
[23:17:15.448]    __traceout=0x00000000      (Trace Disabled)
[23:17:15.448]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:17:15.449]    __FlashAddr=0x00000000
[23:17:15.449]    __FlashLen=0x00000000
[23:17:15.449]    __FlashArg=0x00000000
[23:17:15.449]    __FlashOp=0x00000000
[23:17:15.449]    __Result=0x00000000
[23:17:15.449]  </debugvars>
[23:17:15.449]  
[23:17:15.449]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:17:15.449]    <block atomic="false" info="">
[23:17:15.450]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:17:15.450]        // -> [isSWJ <= 0x00000001]
[23:17:15.450]      __var hasDormant = __protocol & 0x00020000;
[23:17:15.450]        // -> [hasDormant <= 0x00000000]
[23:17:15.450]      __var protType   = __protocol & 0x0000FFFF;
[23:17:15.450]        // -> [protType <= 0x00000002]
[23:17:15.450]    </block>
[23:17:15.451]    <control if="protType == 1" while="" timeout="0" info="">
[23:17:15.451]      // if-block "protType == 1"
[23:17:15.451]        // =>  FALSE
[23:17:15.451]      // skip if-block "protType == 1"
[23:17:15.451]    </control>
[23:17:15.451]    <control if="protType == 2" while="" timeout="0" info="">
[23:17:15.452]      // if-block "protType == 2"
[23:17:15.452]        // =>  TRUE
[23:17:15.453]      <control if="isSWJ" while="" timeout="0" info="">
[23:17:15.453]        // if-block "isSWJ"
[23:17:15.453]          // =>  TRUE
[23:17:15.453]        <control if="hasDormant" while="" timeout="0" info="">
[23:17:15.453]          // if-block "hasDormant"
[23:17:15.453]            // =>  FALSE
[23:17:15.453]          // skip if-block "hasDormant"
[23:17:15.453]        </control>
[23:17:15.453]        <control if="!hasDormant" while="" timeout="0" info="">
[23:17:15.453]          // if-block "!hasDormant"
[23:17:15.453]            // =>  TRUE
[23:17:15.455]          <block atomic="false" info="">
[23:17:15.455]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:17:15.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:17:15.458]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:17:15.460]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:17:15.460]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:17:15.463]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:17:15.463]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:17:15.464]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:17:15.464]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:17:15.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:17:15.472]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:17:15.475]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:17:15.475]          </block>
[23:17:15.475]          // end if-block "!hasDormant"
[23:17:15.475]        </control>
[23:17:15.475]        // end if-block "isSWJ"
[23:17:15.475]      </control>
[23:17:15.475]      <control if="!isSWJ" while="" timeout="0" info="">
[23:17:15.475]        // if-block "!isSWJ"
[23:17:15.475]          // =>  FALSE
[23:17:15.475]        // skip if-block "!isSWJ"
[23:17:15.475]      </control>
[23:17:15.475]      <block atomic="false" info="">
[23:17:15.475]        ReadDP(0x0);
[23:17:15.478]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:17:15.478]      </block>
[23:17:15.478]      // end if-block "protType == 2"
[23:17:15.478]    </control>
[23:17:15.478]  </sequence>
[23:17:15.478]  
[23:17:15.488]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:17:15.488]  
[23:17:15.488]  <debugvars>
[23:17:15.488]    // Pre-defined
[23:17:15.488]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:17:15.488]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:17:15.488]    __dp=0x00000000
[23:17:15.488]    __ap=0x00000000
[23:17:15.488]    __traceout=0x00000000      (Trace Disabled)
[23:17:15.489]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:17:15.489]    __FlashAddr=0x00000000
[23:17:15.489]    __FlashLen=0x00000000
[23:17:15.489]    __FlashArg=0x00000000
[23:17:15.489]    __FlashOp=0x00000000
[23:17:15.489]    __Result=0x00000000
[23:17:15.489]  </debugvars>
[23:17:15.489]  
[23:17:15.489]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:17:15.489]    <block atomic="false" info="">
[23:17:15.489]      __var SW_DP_ABORT       = 0x0;
[23:17:15.489]        // -> [SW_DP_ABORT <= 0x00000000]
[23:17:15.491]      __var DP_CTRL_STAT      = 0x4;
[23:17:15.491]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:17:15.491]      __var DP_SELECT         = 0x8;
[23:17:15.491]        // -> [DP_SELECT <= 0x00000008]
[23:17:15.491]      __var powered_down      = 0;
[23:17:15.491]        // -> [powered_down <= 0x00000000]
[23:17:15.491]      WriteDP(DP_SELECT, 0x00000000);
[23:17:15.495]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:17:15.495]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:17:15.498]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:17:15.498]        // -> [powered_down <= 0x00000001]
[23:17:15.498]    </block>
[23:17:15.498]    <control if="powered_down" while="" timeout="0" info="">
[23:17:15.498]      // if-block "powered_down"
[23:17:15.498]        // =>  TRUE
[23:17:15.498]      <block atomic="false" info="">
[23:17:15.498]        Message(0, "Debug/System power-up request sent");
[23:17:15.504]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:17:15.507]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:17:15.507]      </block>
[23:17:15.507]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:17:15.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:17:15.511]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:17:15.511]        // while-condition  =>  FALSE
[23:17:15.511]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:17:15.511]      </control>
[23:17:15.511]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:17:15.511]        // if-block "(__protocol & 0xFFFF) == 1"
[23:17:15.511]          // =>  FALSE
[23:17:15.511]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:17:15.511]      </control>
[23:17:15.511]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:17:15.511]        // if-block "(__protocol & 0xFFFF) == 2"
[23:17:15.511]          // =>  TRUE
[23:17:15.511]        <block atomic="false" info="">
[23:17:15.511]          Message(0, "executing SWD power up");
[23:17:15.515]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:17:15.516]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:17:15.516]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:17:15.519]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:17:15.519]        </block>
[23:17:15.519]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:17:15.519]      </control>
[23:17:15.519]      // end if-block "powered_down"
[23:17:15.519]    </control>
[23:17:15.519]    <block atomic="false" info="">
[23:17:15.519]      __var DEBUG_PORT_VAL    = 0;
[23:17:15.519]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:17:15.519]      __var ACCESS_POINT_VAL  = 0;
[23:17:15.519]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:17:15.519]      __ap = 1; 
[23:17:15.519]        // -> [__ap <= 0x00000001]
[23:17:15.519]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:17:15.526]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:17:15.526]      __ap = 4;
[23:17:15.530]        // -> [__ap <= 0x00000004]
[23:17:15.530]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:17:15.537]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:17:15.537]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:17:15.537]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:17:15.539]    </block>
[23:17:15.540]    <block atomic="false" info="">
[23:17:15.540]      __var nReset = 0x80;
[23:17:15.540]        // -> [nReset <= 0x00000080]
[23:17:15.540]      __var canReadPins = 0;
[23:17:15.540]        // -> [canReadPins <= 0x00000000]
[23:17:15.540]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:17:15.545]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:17:15.545]        // -> [canReadPins <= 0x00000001]
[23:17:15.545]    </block>
[23:17:15.545]    <control if="" while="1" timeout="200" info="">
[23:17:15.545]      // while "1"  (timeout="200")
[23:17:15.545]      // while-condition  =>  TRUE
[23:17:15.545]      // while "1"  (timeout="200")
[23:17:15.545]      // while-condition  =>  TRUE
[23:17:15.546]      // while "1"  (timeout="200")
[23:17:15.546]      // while-condition  =>  TRUE
[23:17:15.546]      // while "1"  (timeout="200")
[23:17:15.546]      // while-condition  =>  TRUE
[23:17:15.547]      // while "1"  (timeout="200")
[23:17:15.547]      // while-condition  =>  TRUE
[23:17:15.547]      // while "1"  (timeout="200")
[23:17:15.547]      // while-condition  =>  TRUE
[23:17:15.547]      // while "1"  (timeout="200")
[23:17:15.547]      // while-condition  =>  TRUE
[23:17:15.547]      // while "1"  (timeout="200")
[23:17:15.548]      // while-condition  =>  TRUE
[23:17:15.548]      // while "1"  (timeout="200")
[23:17:15.548]      // while-condition  =>  TRUE
[23:17:15.548]      // while "1"  (timeout="200")
[23:17:15.548]      // while-condition  =>  TRUE
[23:17:15.548]      // while "1"  (timeout="200")
[23:17:15.548]      // while-condition  =>  TRUE
[23:17:15.548]      // while "1"  (timeout="200")
[23:17:15.549]      // while-condition  =>  TRUE
[23:17:15.549]      // while "1"  (timeout="200")
[23:17:15.549]      // while-condition  =>  TRUE
[23:17:15.549]      // while "1"  (timeout="200")
[23:17:15.549]      // while-condition  =>  TRUE
[23:17:15.549]      // while "1"  (timeout="200")
[23:17:15.549]      // while  =>  TIMEOUT
[23:17:15.549]      // end while "1"
[23:17:15.549]    </control>
[23:17:15.550]    <control if="canReadPins" while="" timeout="0" info="">
[23:17:15.550]      // if-block "canReadPins"
[23:17:15.550]        // =>  TRUE
[23:17:15.550]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:17:15.550]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:17:15.553]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:17:15.553]        // while-condition  =>  FALSE
[23:17:15.553]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:17:15.553]      </control>
[23:17:15.553]      // end if-block "canReadPins"
[23:17:15.553]    </control>
[23:17:15.553]    <control if="!canReadPins" while="" timeout="0" info="">
[23:17:15.553]      // if-block "!canReadPins"
[23:17:15.554]        // =>  FALSE
[23:17:15.554]      // skip if-block "!canReadPins"
[23:17:15.554]    </control>
[23:17:15.554]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:17:15.554]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:17:15.554]        // =>  TRUE
[23:17:15.554]      <block atomic="false" info="">
[23:17:15.554]        WriteAP(0x00, 0x190008);
[23:17:15.558]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:17:15.558]        WriteAP(0xF0, 0x01);
[23:17:15.564]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:17:15.564]      </block>
[23:17:15.564]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:17:15.564]    </control>
[23:17:15.564]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:17:15.564]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:17:15.564]        // =>  FALSE
[23:17:15.564]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:17:15.564]    </control>
[23:17:15.565]    <block atomic="false" info="">
[23:17:15.565]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:17:15.571]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:17:15.571]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:17:15.571]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:17:15.575]      __ap = 0; //lets make sure we reset the access point selection
[23:17:15.575]        // -> [__ap <= 0x00000000]
[23:17:15.575]    </block>
[23:17:15.575]  </sequence>
[23:17:15.575]  
[23:17:15.616]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:17:15.616]  
[23:17:15.620]  <debugvars>
[23:17:15.620]    // Pre-defined
[23:17:15.620]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:17:15.620]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:17:15.620]    __dp=0x00000000
[23:17:15.620]    __ap=0x00000000
[23:17:15.620]    __traceout=0x00000000      (Trace Disabled)
[23:17:15.620]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:17:15.620]    __FlashAddr=0x00000000
[23:17:15.620]    __FlashLen=0x00000000
[23:17:15.620]    __FlashArg=0x00000000
[23:17:15.620]    __FlashOp=0x00000000
[23:17:15.620]    __Result=0x00000000
[23:17:15.620]  </debugvars>
[23:17:15.620]  
[23:17:15.620]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:17:15.620]    <block atomic="false" info="">
[23:17:15.620]      __var deviceID = 0;
[23:17:15.620]        // -> [deviceID <= 0x00000000]
[23:17:15.620]      __var version = 0;
[23:17:15.620]        // -> [version <= 0x00000000]
[23:17:15.620]      __var partNum = 0;
[23:17:15.620]        // -> [partNum <= 0x00000000]
[23:17:15.620]      __var manuf = 0;
[23:17:15.620]        // -> [manuf <= 0x00000000]
[23:17:15.620]      __var isMSPM0G1X0X_G3X0X = 0;
[23:17:15.620]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:17:15.620]      __var isProduction = 0;
[23:17:15.620]        // -> [isProduction <= 0x00000000]
[23:17:15.620]      __var continueId = 0;
[23:17:15.620]        // -> [continueId <= 0x00000000]
[23:17:15.620]      deviceID =   Read32(0x41C40004);
[23:17:15.628]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:17:15.628]        // -> [deviceID <= 0x2BB8802F]
[23:17:15.632]      version = deviceID >> 28;
[23:17:15.632]        // -> [version <= 0x00000002]
[23:17:15.632]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:17:15.632]        // -> [partNum <= 0x0000BB88]
[23:17:15.632]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:17:15.632]        // -> [manuf <= 0x00000017]
[23:17:15.632]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:17:15.632]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:17:15.632]      isProduction = (version > 0);
[23:17:15.632]        // -> [isProduction <= 0x00000001]
[23:17:15.632]    </block>
[23:17:15.632]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:17:15.632]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:17:15.632]        // =>  FALSE
[23:17:15.632]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:17:15.632]    </control>
[23:17:15.632]    <control if="continueId == 4" while="" timeout="0" info="">
[23:17:15.632]      // if-block "continueId == 4"
[23:17:15.632]        // =>  FALSE
[23:17:15.632]      // skip if-block "continueId == 4"
[23:17:15.632]    </control>
[23:17:15.632]    <control if="!isProduction" while="" timeout="0" info="">
[23:17:15.632]      // if-block "!isProduction"
[23:17:15.632]        // =>  FALSE
[23:17:15.632]      // skip if-block "!isProduction"
[23:17:15.632]    </control>
[23:17:15.632]  </sequence>
[23:17:15.632]  
[23:22:53.840]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:22:53.840]  
[23:22:53.849]  <debugvars>
[23:22:53.849]    // Pre-defined
[23:22:53.849]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:22:53.849]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:22:53.849]    __dp=0x00000000
[23:22:53.849]    __ap=0x00000000
[23:22:53.849]    __traceout=0x00000000      (Trace Disabled)
[23:22:53.849]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:22:53.849]    __FlashAddr=0x00000000
[23:22:53.849]    __FlashLen=0x00000000
[23:22:53.849]    __FlashArg=0x00000000
[23:22:53.849]    __FlashOp=0x00000000
[23:22:53.849]    __Result=0x00000000
[23:22:53.849]  </debugvars>
[23:22:53.849]  
[23:22:53.849]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:22:53.849]    <block atomic="false" info="">
[23:22:53.849]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:22:53.849]        // -> [isSWJ <= 0x00000001]
[23:22:53.849]      __var hasDormant = __protocol & 0x00020000;
[23:22:53.849]        // -> [hasDormant <= 0x00000000]
[23:22:53.851]      __var protType   = __protocol & 0x0000FFFF;
[23:22:53.851]        // -> [protType <= 0x00000002]
[23:22:53.851]    </block>
[23:22:53.851]    <control if="protType == 1" while="" timeout="0" info="">
[23:22:53.851]      // if-block "protType == 1"
[23:22:53.851]        // =>  FALSE
[23:22:53.851]      // skip if-block "protType == 1"
[23:22:53.851]    </control>
[23:22:53.851]    <control if="protType == 2" while="" timeout="0" info="">
[23:22:53.851]      // if-block "protType == 2"
[23:22:53.851]        // =>  TRUE
[23:22:53.852]      <control if="isSWJ" while="" timeout="0" info="">
[23:22:53.852]        // if-block "isSWJ"
[23:22:53.852]          // =>  TRUE
[23:22:53.852]        <control if="hasDormant" while="" timeout="0" info="">
[23:22:53.852]          // if-block "hasDormant"
[23:22:53.852]            // =>  FALSE
[23:22:53.852]          // skip if-block "hasDormant"
[23:22:53.852]        </control>
[23:22:53.852]        <control if="!hasDormant" while="" timeout="0" info="">
[23:22:53.852]          // if-block "!hasDormant"
[23:22:53.852]            // =>  TRUE
[23:22:53.852]          <block atomic="false" info="">
[23:22:53.852]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:22:53.857]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:22:53.857]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:22:53.860]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:22:53.860]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:22:53.862]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:22:53.862]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:22:53.865]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:22:53.865]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:22:53.869]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:22:53.870]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:22:53.872]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:22:53.872]          </block>
[23:22:53.873]          // end if-block "!hasDormant"
[23:22:53.873]        </control>
[23:22:53.873]        // end if-block "isSWJ"
[23:22:53.873]      </control>
[23:22:53.873]      <control if="!isSWJ" while="" timeout="0" info="">
[23:22:53.873]        // if-block "!isSWJ"
[23:22:53.873]          // =>  FALSE
[23:22:53.873]        // skip if-block "!isSWJ"
[23:22:53.873]      </control>
[23:22:53.873]      <block atomic="false" info="">
[23:22:53.873]        ReadDP(0x0);
[23:22:53.877]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:22:53.877]      </block>
[23:22:53.878]      // end if-block "protType == 2"
[23:22:53.878]    </control>
[23:22:53.879]  </sequence>
[23:22:53.879]  
[23:22:53.885]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:22:53.885]  
[23:22:53.885]  <debugvars>
[23:22:53.885]    // Pre-defined
[23:22:53.885]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:22:53.885]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:22:53.885]    __dp=0x00000000
[23:22:53.885]    __ap=0x00000000
[23:22:53.885]    __traceout=0x00000000      (Trace Disabled)
[23:22:53.885]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:22:53.885]    __FlashAddr=0x00000000
[23:22:53.885]    __FlashLen=0x00000000
[23:22:53.885]    __FlashArg=0x00000000
[23:22:53.885]    __FlashOp=0x00000000
[23:22:53.885]    __Result=0x00000000
[23:22:53.885]  </debugvars>
[23:22:53.885]  
[23:22:53.885]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:22:53.885]    <block atomic="false" info="">
[23:22:53.885]      __var SW_DP_ABORT       = 0x0;
[23:22:53.885]        // -> [SW_DP_ABORT <= 0x00000000]
[23:22:53.887]      __var DP_CTRL_STAT      = 0x4;
[23:22:53.887]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:22:53.887]      __var DP_SELECT         = 0x8;
[23:22:53.887]        // -> [DP_SELECT <= 0x00000008]
[23:22:53.887]      __var powered_down      = 0;
[23:22:53.887]        // -> [powered_down <= 0x00000000]
[23:22:53.887]      WriteDP(DP_SELECT, 0x00000000);
[23:22:53.889]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:22:53.889]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:22:53.896]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:22:53.896]        // -> [powered_down <= 0x00000001]
[23:22:53.896]    </block>
[23:22:53.896]    <control if="powered_down" while="" timeout="0" info="">
[23:22:53.896]      // if-block "powered_down"
[23:22:53.897]        // =>  TRUE
[23:22:53.897]      <block atomic="false" info="">
[23:22:53.897]        Message(0, "Debug/System power-up request sent");
[23:22:53.899]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:22:53.902]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:22:53.902]      </block>
[23:22:53.902]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:22:53.903]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:22:53.910]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:22:53.910]        // while-condition  =>  FALSE
[23:22:53.910]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:22:53.910]      </control>
[23:22:53.910]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:22:53.910]        // if-block "(__protocol & 0xFFFF) == 1"
[23:22:53.910]          // =>  FALSE
[23:22:53.910]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:22:53.910]      </control>
[23:22:53.912]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:22:53.912]        // if-block "(__protocol & 0xFFFF) == 2"
[23:22:53.912]          // =>  TRUE
[23:22:53.912]        <block atomic="false" info="">
[23:22:53.912]          Message(0, "executing SWD power up");
[23:22:53.915]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:22:53.915]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:22:53.919]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:22:53.921]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:22:53.921]        </block>
[23:22:53.922]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:22:53.922]      </control>
[23:22:53.922]      // end if-block "powered_down"
[23:22:53.922]    </control>
[23:22:53.922]    <block atomic="false" info="">
[23:22:53.922]      __var DEBUG_PORT_VAL    = 0;
[23:22:53.922]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:22:53.922]      __var ACCESS_POINT_VAL  = 0;
[23:22:53.923]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:22:53.923]      __ap = 1; 
[23:22:53.923]        // -> [__ap <= 0x00000001]
[23:22:53.923]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:22:53.929]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:22:53.930]      __ap = 4;
[23:22:53.930]        // -> [__ap <= 0x00000004]
[23:22:53.930]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:22:53.937]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:22:53.937]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:22:53.937]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:22:53.938]    </block>
[23:22:53.938]    <block atomic="false" info="">
[23:22:53.940]      __var nReset = 0x80;
[23:22:53.940]        // -> [nReset <= 0x00000080]
[23:22:53.940]      __var canReadPins = 0;
[23:22:53.940]        // -> [canReadPins <= 0x00000000]
[23:22:53.940]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:22:53.941]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:22:53.941]        // -> [canReadPins <= 0x00000001]
[23:22:53.941]    </block>
[23:22:53.941]    <control if="" while="1" timeout="200" info="">
[23:22:53.941]      // while "1"  (timeout="200")
[23:22:53.941]      // while-condition  =>  TRUE
[23:22:53.941]      // while "1"  (timeout="200")
[23:22:53.941]      // while-condition  =>  TRUE
[23:22:53.941]      // while "1"  (timeout="200")
[23:22:53.941]      // while-condition  =>  TRUE
[23:22:53.941]      // while "1"  (timeout="200")
[23:22:53.944]      // while-condition  =>  TRUE
[23:22:53.944]      // while "1"  (timeout="200")
[23:22:53.944]      // while-condition  =>  TRUE
[23:22:53.944]      // while "1"  (timeout="200")
[23:22:53.944]      // while-condition  =>  TRUE
[23:22:53.944]      // while "1"  (timeout="200")
[23:22:53.944]      // while-condition  =>  TRUE
[23:22:53.944]      // while "1"  (timeout="200")
[23:22:53.945]      // while-condition  =>  TRUE
[23:22:53.945]      // while "1"  (timeout="200")
[23:22:53.945]      // while-condition  =>  TRUE
[23:22:53.945]      // while "1"  (timeout="200")
[23:22:53.945]      // while-condition  =>  TRUE
[23:22:53.945]      // while "1"  (timeout="200")
[23:22:53.945]      // while-condition  =>  TRUE
[23:22:53.945]      // while "1"  (timeout="200")
[23:22:53.945]      // while-condition  =>  TRUE
[23:22:53.945]      // while "1"  (timeout="200")
[23:22:53.945]      // while-condition  =>  TRUE
[23:22:53.945]      // while "1"  (timeout="200")
[23:22:53.947]      // while-condition  =>  TRUE
[23:22:53.947]      // while "1"  (timeout="200")
[23:22:53.947]      // while-condition  =>  TRUE
[23:22:53.947]      // while "1"  (timeout="200")
[23:22:53.947]      // while-condition  =>  TRUE
[23:22:53.947]      // while "1"  (timeout="200")
[23:22:53.947]      // while-condition  =>  TRUE
[23:22:53.947]      // while "1"  (timeout="200")
[23:22:53.947]      // while-condition  =>  TRUE
[23:22:53.947]      // while "1"  (timeout="200")
[23:22:53.947]      // while-condition  =>  TRUE
[23:22:53.947]      // while "1"  (timeout="200")
[23:22:53.947]      // while-condition  =>  TRUE
[23:22:53.947]      // while "1"  (timeout="200")
[23:22:53.947]      // while-condition  =>  TRUE
[23:22:53.948]      // while "1"  (timeout="200")
[23:22:53.948]      // while-condition  =>  TRUE
[23:22:53.948]      // while "1"  (timeout="200")
[23:22:53.948]      // while-condition  =>  TRUE
[23:22:53.948]      // while "1"  (timeout="200")
[23:22:53.948]      // while-condition  =>  TRUE
[23:22:53.948]      // while "1"  (timeout="200")
[23:22:53.948]      // while-condition  =>  TRUE
[23:22:53.948]      // while "1"  (timeout="200")
[23:22:53.948]      // while-condition  =>  TRUE
[23:22:53.948]      // while "1"  (timeout="200")
[23:22:53.948]      // while-condition  =>  TRUE
[23:22:53.948]      // while "1"  (timeout="200")
[23:22:53.948]      // while-condition  =>  TRUE
[23:22:53.948]      // while "1"  (timeout="200")
[23:22:53.948]      // while-condition  =>  TRUE
[23:22:53.948]      // while "1"  (timeout="200")
[23:22:53.948]      // while-condition  =>  TRUE
[23:22:53.950]      // while "1"  (timeout="200")
[23:22:53.950]      // while-condition  =>  TRUE
[23:22:53.950]      // while "1"  (timeout="200")
[23:22:53.950]      // while-condition  =>  TRUE
[23:22:53.950]      // while "1"  (timeout="200")
[23:22:53.950]      // while-condition  =>  TRUE
[23:22:53.950]      // while "1"  (timeout="200")
[23:22:53.950]      // while-condition  =>  TRUE
[23:22:53.950]      // while "1"  (timeout="200")
[23:22:53.951]      // while-condition  =>  TRUE
[23:22:53.951]      // while "1"  (timeout="200")
[23:22:53.951]      // while-condition  =>  TRUE
[23:22:53.951]      // while "1"  (timeout="200")
[23:22:53.951]      // while-condition  =>  TRUE
[23:22:53.951]      // while "1"  (timeout="200")
[23:22:53.951]      // while-condition  =>  TRUE
[23:22:53.951]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.953]      // while-condition  =>  TRUE
[23:22:53.953]      // while "1"  (timeout="200")
[23:22:53.957]      // while-condition  =>  TRUE
[23:22:53.957]      // while "1"  (timeout="200")
[23:22:53.957]      // while  =>  TIMEOUT
[23:22:53.957]      // end while "1"
[23:22:53.957]    </control>
[23:22:53.957]    <control if="canReadPins" while="" timeout="0" info="">
[23:22:53.957]      // if-block "canReadPins"
[23:22:53.957]        // =>  TRUE
[23:22:53.958]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:22:53.958]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:22:53.961]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:22:53.961]        // while-condition  =>  FALSE
[23:22:53.961]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:22:53.961]      </control>
[23:22:53.961]      // end if-block "canReadPins"
[23:22:53.961]    </control>
[23:22:53.961]    <control if="!canReadPins" while="" timeout="0" info="">
[23:22:53.961]      // if-block "!canReadPins"
[23:22:53.961]        // =>  FALSE
[23:22:53.961]      // skip if-block "!canReadPins"
[23:22:53.961]    </control>
[23:22:53.961]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:22:53.961]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:22:53.961]        // =>  TRUE
[23:22:53.961]      <block atomic="false" info="">
[23:22:53.961]        WriteAP(0x00, 0x190008);
[23:22:53.965]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:22:53.965]        WriteAP(0xF0, 0x01);
[23:22:53.969]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:22:53.969]      </block>
[23:22:53.969]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:22:53.972]    </control>
[23:22:53.973]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:22:53.973]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:22:53.973]        // =>  FALSE
[23:22:53.973]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:22:53.973]    </control>
[23:22:53.973]    <block atomic="false" info="">
[23:22:53.974]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:22:53.980]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:22:53.980]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:22:53.980]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:22:53.984]      __ap = 0; //lets make sure we reset the access point selection
[23:22:53.984]        // -> [__ap <= 0x00000000]
[23:22:53.985]    </block>
[23:22:53.985]  </sequence>
[23:22:53.985]  
[23:22:54.023]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:22:54.023]  
[23:22:54.023]  <debugvars>
[23:22:54.023]    // Pre-defined
[23:22:54.023]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:22:54.023]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:22:54.023]    __dp=0x00000000
[23:22:54.023]    __ap=0x00000000
[23:22:54.023]    __traceout=0x00000000      (Trace Disabled)
[23:22:54.023]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:22:54.023]    __FlashAddr=0x00000000
[23:22:54.023]    __FlashLen=0x00000000
[23:22:54.023]    __FlashArg=0x00000000
[23:22:54.025]    __FlashOp=0x00000000
[23:22:54.025]    __Result=0x00000000
[23:22:54.025]  </debugvars>
[23:22:54.025]  
[23:22:54.025]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:22:54.025]    <block atomic="false" info="">
[23:22:54.026]      __var deviceID = 0;
[23:22:54.026]        // -> [deviceID <= 0x00000000]
[23:22:54.026]      __var version = 0;
[23:22:54.026]        // -> [version <= 0x00000000]
[23:22:54.026]      __var partNum = 0;
[23:22:54.026]        // -> [partNum <= 0x00000000]
[23:22:54.026]      __var manuf = 0;
[23:22:54.026]        // -> [manuf <= 0x00000000]
[23:22:54.026]      __var isMSPM0G1X0X_G3X0X = 0;
[23:22:54.026]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:22:54.026]      __var isProduction = 0;
[23:22:54.026]        // -> [isProduction <= 0x00000000]
[23:22:54.026]      __var continueId = 0;
[23:22:54.026]        // -> [continueId <= 0x00000000]
[23:22:54.026]      deviceID =   Read32(0x41C40004);
[23:22:54.034]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:22:54.034]        // -> [deviceID <= 0x2BB8802F]
[23:22:54.034]      version = deviceID >> 28;
[23:22:54.034]        // -> [version <= 0x00000002]
[23:22:54.034]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:22:54.034]        // -> [partNum <= 0x0000BB88]
[23:22:54.034]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:22:54.034]        // -> [manuf <= 0x00000017]
[23:22:54.038]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:22:54.038]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:22:54.038]      isProduction = (version > 0);
[23:22:54.038]        // -> [isProduction <= 0x00000001]
[23:22:54.038]    </block>
[23:22:54.038]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:22:54.038]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:22:54.038]        // =>  FALSE
[23:22:54.039]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:22:54.039]    </control>
[23:22:54.039]    <control if="continueId == 4" while="" timeout="0" info="">
[23:22:54.039]      // if-block "continueId == 4"
[23:22:54.040]        // =>  FALSE
[23:22:54.040]      // skip if-block "continueId == 4"
[23:22:54.040]    </control>
[23:22:54.040]    <control if="!isProduction" while="" timeout="0" info="">
[23:22:54.040]      // if-block "!isProduction"
[23:22:54.040]        // =>  FALSE
[23:22:54.040]      // skip if-block "!isProduction"
[23:22:54.040]    </control>
[23:22:54.040]  </sequence>
[23:22:54.040]  
[23:24:42.087]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:24:42.087]  
[23:24:42.091]  <debugvars>
[23:24:42.092]    // Pre-defined
[23:24:42.092]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:24:42.092]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:24:42.092]    __dp=0x00000000
[23:24:42.092]    __ap=0x00000000
[23:24:42.092]    __traceout=0x00000000      (Trace Disabled)
[23:24:42.092]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:24:42.092]    __FlashAddr=0x00000000
[23:24:42.092]    __FlashLen=0x00000000
[23:24:42.092]    __FlashArg=0x00000000
[23:24:42.092]    __FlashOp=0x00000000
[23:24:42.092]    __Result=0x00000000
[23:24:42.092]  </debugvars>
[23:24:42.092]  
[23:24:42.092]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:24:42.092]    <block atomic="false" info="">
[23:24:42.092]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:24:42.092]        // -> [isSWJ <= 0x00000001]
[23:24:42.092]      __var hasDormant = __protocol & 0x00020000;
[23:24:42.092]        // -> [hasDormant <= 0x00000000]
[23:24:42.092]      __var protType   = __protocol & 0x0000FFFF;
[23:24:42.092]        // -> [protType <= 0x00000002]
[23:24:42.092]    </block>
[23:24:42.092]    <control if="protType == 1" while="" timeout="0" info="">
[23:24:42.092]      // if-block "protType == 1"
[23:24:42.092]        // =>  FALSE
[23:24:42.092]      // skip if-block "protType == 1"
[23:24:42.092]    </control>
[23:24:42.092]    <control if="protType == 2" while="" timeout="0" info="">
[23:24:42.092]      // if-block "protType == 2"
[23:24:42.092]        // =>  TRUE
[23:24:42.092]      <control if="isSWJ" while="" timeout="0" info="">
[23:24:42.092]        // if-block "isSWJ"
[23:24:42.095]          // =>  TRUE
[23:24:42.095]        <control if="hasDormant" while="" timeout="0" info="">
[23:24:42.095]          // if-block "hasDormant"
[23:24:42.095]            // =>  FALSE
[23:24:42.095]          // skip if-block "hasDormant"
[23:24:42.095]        </control>
[23:24:42.095]        <control if="!hasDormant" while="" timeout="0" info="">
[23:24:42.095]          // if-block "!hasDormant"
[23:24:42.095]            // =>  TRUE
[23:24:42.095]          <block atomic="false" info="">
[23:24:42.095]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:24:42.095]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:24:42.099]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:24:42.099]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:24:42.099]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:24:42.105]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:24:42.105]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:24:42.108]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:24:42.109]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:24:42.109]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:24:42.109]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:24:42.112]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:24:42.112]          </block>
[23:24:42.112]          // end if-block "!hasDormant"
[23:24:42.112]        </control>
[23:24:42.112]        // end if-block "isSWJ"
[23:24:42.112]      </control>
[23:24:42.112]      <control if="!isSWJ" while="" timeout="0" info="">
[23:24:42.112]        // if-block "!isSWJ"
[23:24:42.112]          // =>  FALSE
[23:24:42.112]        // skip if-block "!isSWJ"
[23:24:42.112]      </control>
[23:24:42.112]      <block atomic="false" info="">
[23:24:42.112]        ReadDP(0x0);
[23:24:42.117]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:24:42.117]      </block>
[23:24:42.117]      // end if-block "protType == 2"
[23:24:42.117]    </control>
[23:24:42.117]  </sequence>
[23:24:42.117]  
[23:24:42.124]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:24:42.124]  
[23:24:42.124]  <debugvars>
[23:24:42.124]    // Pre-defined
[23:24:42.124]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:24:42.124]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:24:42.124]    __dp=0x00000000
[23:24:42.124]    __ap=0x00000000
[23:24:42.124]    __traceout=0x00000000      (Trace Disabled)
[23:24:42.124]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:24:42.124]    __FlashAddr=0x00000000
[23:24:42.124]    __FlashLen=0x00000000
[23:24:42.124]    __FlashArg=0x00000000
[23:24:42.124]    __FlashOp=0x00000000
[23:24:42.124]    __Result=0x00000000
[23:24:42.124]  </debugvars>
[23:24:42.124]  
[23:24:42.124]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:24:42.124]    <block atomic="false" info="">
[23:24:42.124]      __var SW_DP_ABORT       = 0x0;
[23:24:42.124]        // -> [SW_DP_ABORT <= 0x00000000]
[23:24:42.124]      __var DP_CTRL_STAT      = 0x4;
[23:24:42.124]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:24:42.124]      __var DP_SELECT         = 0x8;
[23:24:42.124]        // -> [DP_SELECT <= 0x00000008]
[23:24:42.124]      __var powered_down      = 0;
[23:24:42.124]        // -> [powered_down <= 0x00000000]
[23:24:42.128]      WriteDP(DP_SELECT, 0x00000000);
[23:24:42.131]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:24:42.131]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:24:42.132]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:24:42.132]        // -> [powered_down <= 0x00000001]
[23:24:42.132]    </block>
[23:24:42.132]    <control if="powered_down" while="" timeout="0" info="">
[23:24:42.132]      // if-block "powered_down"
[23:24:42.132]        // =>  TRUE
[23:24:42.132]      <block atomic="false" info="">
[23:24:42.132]        Message(0, "Debug/System power-up request sent");
[23:24:42.137]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:24:42.140]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:24:42.140]      </block>
[23:24:42.140]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:24:42.140]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:24:42.144]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:24:42.144]        // while-condition  =>  FALSE
[23:24:42.144]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:24:42.144]      </control>
[23:24:42.144]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:24:42.144]        // if-block "(__protocol & 0xFFFF) == 1"
[23:24:42.144]          // =>  FALSE
[23:24:42.144]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:24:42.144]      </control>
[23:24:42.144]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:24:42.144]        // if-block "(__protocol & 0xFFFF) == 2"
[23:24:42.144]          // =>  TRUE
[23:24:42.144]        <block atomic="false" info="">
[23:24:42.144]          Message(0, "executing SWD power up");
[23:24:42.148]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:24:42.148]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:24:42.152]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:24:42.152]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:24:42.152]        </block>
[23:24:42.152]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:24:42.152]      </control>
[23:24:42.152]      // end if-block "powered_down"
[23:24:42.152]    </control>
[23:24:42.152]    <block atomic="false" info="">
[23:24:42.152]      __var DEBUG_PORT_VAL    = 0;
[23:24:42.152]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:24:42.152]      __var ACCESS_POINT_VAL  = 0;
[23:24:42.152]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:24:42.152]      __ap = 1; 
[23:24:42.156]        // -> [__ap <= 0x00000001]
[23:24:42.156]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:24:42.161]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:24:42.161]      __ap = 4;
[23:24:42.161]        // -> [__ap <= 0x00000004]
[23:24:42.161]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:24:42.169]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:24:42.169]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:24:42.169]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:24:42.169]    </block>
[23:24:42.169]    <block atomic="false" info="">
[23:24:42.169]      __var nReset = 0x80;
[23:24:42.169]        // -> [nReset <= 0x00000080]
[23:24:42.169]      __var canReadPins = 0;
[23:24:42.172]        // -> [canReadPins <= 0x00000000]
[23:24:42.172]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:24:42.174]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:24:42.174]        // -> [canReadPins <= 0x00000001]
[23:24:42.174]    </block>
[23:24:42.174]    <control if="" while="1" timeout="200" info="">
[23:24:42.174]      // while "1"  (timeout="200")
[23:24:42.174]      // while-condition  =>  TRUE
[23:24:42.174]      // while "1"  (timeout="200")
[23:24:42.174]      // while-condition  =>  TRUE
[23:24:42.174]      // while "1"  (timeout="200")
[23:24:42.174]      // while-condition  =>  TRUE
[23:24:42.174]      // while "1"  (timeout="200")
[23:24:42.174]      // while-condition  =>  TRUE
[23:24:42.174]      // while "1"  (timeout="200")
[23:24:42.174]      // while-condition  =>  TRUE
[23:24:42.174]      // while "1"  (timeout="200")
[23:24:42.174]      // while-condition  =>  TRUE
[23:24:42.174]      // while "1"  (timeout="200")
[23:24:42.174]      // while-condition  =>  TRUE
[23:24:42.174]      // while "1"  (timeout="200")
[23:24:42.174]      // while-condition  =>  TRUE
[23:24:42.174]      // while "1"  (timeout="200")
[23:24:42.174]      // while-condition  =>  TRUE
[23:24:42.174]      // while "1"  (timeout="200")
[23:24:42.174]      // while-condition  =>  TRUE
[23:24:42.178]      // while "1"  (timeout="200")
[23:24:42.178]      // while-condition  =>  TRUE
[23:24:42.178]      // while "1"  (timeout="200")
[23:24:42.178]      // while-condition  =>  TRUE
[23:24:42.178]      // while "1"  (timeout="200")
[23:24:42.178]      // while-condition  =>  TRUE
[23:24:42.178]      // while "1"  (timeout="200")
[23:24:42.178]      // while-condition  =>  TRUE
[23:24:42.178]      // while "1"  (timeout="200")
[23:24:42.179]      // while-condition  =>  TRUE
[23:24:42.179]      // while "1"  (timeout="200")
[23:24:42.179]      // while-condition  =>  TRUE
[23:24:42.179]      // while "1"  (timeout="200")
[23:24:42.179]      // while-condition  =>  TRUE
[23:24:42.179]      // while "1"  (timeout="200")
[23:24:42.179]      // while-condition  =>  TRUE
[23:24:42.179]      // while "1"  (timeout="200")
[23:24:42.179]      // while-condition  =>  TRUE
[23:24:42.179]      // while "1"  (timeout="200")
[23:24:42.179]      // while-condition  =>  TRUE
[23:24:42.179]      // while "1"  (timeout="200")
[23:24:42.180]      // while-condition  =>  TRUE
[23:24:42.180]      // while "1"  (timeout="200")
[23:24:42.180]      // while-condition  =>  TRUE
[23:24:42.180]      // while "1"  (timeout="200")
[23:24:42.180]      // while-condition  =>  TRUE
[23:24:42.180]      // while "1"  (timeout="200")
[23:24:42.180]      // while-condition  =>  TRUE
[23:24:42.180]      // while "1"  (timeout="200")
[23:24:42.180]      // while-condition  =>  TRUE
[23:24:42.180]      // while "1"  (timeout="200")
[23:24:42.180]      // while-condition  =>  TRUE
[23:24:42.180]      // while "1"  (timeout="200")
[23:24:42.180]      // while-condition  =>  TRUE
[23:24:42.180]      // while "1"  (timeout="200")
[23:24:42.180]      // while-condition  =>  TRUE
[23:24:42.180]      // while "1"  (timeout="200")
[23:24:42.180]      // while-condition  =>  TRUE
[23:24:42.180]      // while "1"  (timeout="200")
[23:24:42.180]      // while-condition  =>  TRUE
[23:24:42.182]      // while "1"  (timeout="200")
[23:24:42.182]      // while-condition  =>  TRUE
[23:24:42.182]      // while "1"  (timeout="200")
[23:24:42.182]      // while-condition  =>  TRUE
[23:24:42.182]      // while "1"  (timeout="200")
[23:24:42.182]      // while-condition  =>  TRUE
[23:24:42.182]      // while "1"  (timeout="200")
[23:24:42.182]      // while-condition  =>  TRUE
[23:24:42.182]      // while "1"  (timeout="200")
[23:24:42.182]      // while-condition  =>  TRUE
[23:24:42.182]      // while "1"  (timeout="200")
[23:24:42.182]      // while-condition  =>  TRUE
[23:24:42.182]      // while "1"  (timeout="200")
[23:24:42.182]      // while-condition  =>  TRUE
[23:24:42.182]      // while "1"  (timeout="200")
[23:24:42.182]      // while-condition  =>  TRUE
[23:24:42.182]      // while "1"  (timeout="200")
[23:24:42.182]      // while-condition  =>  TRUE
[23:24:42.182]      // while "1"  (timeout="200")
[23:24:42.182]      // while-condition  =>  TRUE
[23:24:42.182]      // while "1"  (timeout="200")
[23:24:42.182]      // while-condition  =>  TRUE
[23:24:42.182]      // while "1"  (timeout="200")
[23:24:42.184]      // while-condition  =>  TRUE
[23:24:42.184]      // while "1"  (timeout="200")
[23:24:42.184]      // while-condition  =>  TRUE
[23:24:42.184]      // while "1"  (timeout="200")
[23:24:42.184]      // while-condition  =>  TRUE
[23:24:42.184]      // while "1"  (timeout="200")
[23:24:42.184]      // while-condition  =>  TRUE
[23:24:42.184]      // while "1"  (timeout="200")
[23:24:42.184]      // while-condition  =>  TRUE
[23:24:42.184]      // while "1"  (timeout="200")
[23:24:42.184]      // while-condition  =>  TRUE
[23:24:42.184]      // while "1"  (timeout="200")
[23:24:42.184]      // while-condition  =>  TRUE
[23:24:42.186]      // while "1"  (timeout="200")
[23:24:42.186]      // while-condition  =>  TRUE
[23:24:42.186]      // while "1"  (timeout="200")
[23:24:42.186]      // while-condition  =>  TRUE
[23:24:42.186]      // while "1"  (timeout="200")
[23:24:42.186]      // while-condition  =>  TRUE
[23:24:42.186]      // while "1"  (timeout="200")
[23:24:42.186]      // while-condition  =>  TRUE
[23:24:42.186]      // while "1"  (timeout="200")
[23:24:42.186]      // while-condition  =>  TRUE
[23:24:42.186]      // while "1"  (timeout="200")
[23:24:42.187]      // while-condition  =>  TRUE
[23:24:42.187]      // while "1"  (timeout="200")
[23:24:42.187]      // while-condition  =>  TRUE
[23:24:42.187]      // while "1"  (timeout="200")
[23:24:42.187]      // while-condition  =>  TRUE
[23:24:42.187]      // while "1"  (timeout="200")
[23:24:42.187]      // while-condition  =>  TRUE
[23:24:42.187]      // while "1"  (timeout="200")
[23:24:42.187]      // while-condition  =>  TRUE
[23:24:42.187]      // while "1"  (timeout="200")
[23:24:42.187]      // while-condition  =>  TRUE
[23:24:42.187]      // while "1"  (timeout="200")
[23:24:42.188]      // while-condition  =>  TRUE
[23:24:42.188]      // while "1"  (timeout="200")
[23:24:42.188]      // while-condition  =>  TRUE
[23:24:42.188]      // while "1"  (timeout="200")
[23:24:42.188]      // while-condition  =>  TRUE
[23:24:42.188]      // while "1"  (timeout="200")
[23:24:42.188]      // while-condition  =>  TRUE
[23:24:42.188]      // while "1"  (timeout="200")
[23:24:42.188]      // while-condition  =>  TRUE
[23:24:42.188]      // while "1"  (timeout="200")
[23:24:42.188]      // while-condition  =>  TRUE
[23:24:42.188]      // while "1"  (timeout="200")
[23:24:42.189]      // while-condition  =>  TRUE
[23:24:42.189]      // while "1"  (timeout="200")
[23:24:42.189]      // while-condition  =>  TRUE
[23:24:42.189]      // while "1"  (timeout="200")
[23:24:42.189]      // while-condition  =>  TRUE
[23:24:42.190]      // while "1"  (timeout="200")
[23:24:42.190]      // while  =>  TIMEOUT
[23:24:42.190]      // end while "1"
[23:24:42.190]    </control>
[23:24:42.190]    <control if="canReadPins" while="" timeout="0" info="">
[23:24:42.190]      // if-block "canReadPins"
[23:24:42.190]        // =>  TRUE
[23:24:42.190]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:24:42.190]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:24:42.198]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:24:42.198]        // while-condition  =>  FALSE
[23:24:42.198]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:24:42.202]      </control>
[23:24:42.202]      // end if-block "canReadPins"
[23:24:42.202]    </control>
[23:24:42.202]    <control if="!canReadPins" while="" timeout="0" info="">
[23:24:42.202]      // if-block "!canReadPins"
[23:24:42.202]        // =>  FALSE
[23:24:42.202]      // skip if-block "!canReadPins"
[23:24:42.202]    </control>
[23:24:42.202]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:24:42.202]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:24:42.202]        // =>  TRUE
[23:24:42.202]      <block atomic="false" info="">
[23:24:42.202]        WriteAP(0x00, 0x190008);
[23:24:42.206]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:24:42.207]        WriteAP(0xF0, 0x01);
[23:24:42.210]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:24:42.210]      </block>
[23:24:42.210]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:24:42.210]    </control>
[23:24:42.210]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:24:42.210]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:24:42.210]        // =>  FALSE
[23:24:42.210]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:24:42.210]    </control>
[23:24:42.210]    <block atomic="false" info="">
[23:24:42.210]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:24:42.219]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:24:42.219]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:24:42.219]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:24:42.222]      __ap = 0; //lets make sure we reset the access point selection
[23:24:42.222]        // -> [__ap <= 0x00000000]
[23:24:42.222]    </block>
[23:24:42.222]  </sequence>
[23:24:42.222]  
[23:24:42.256]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:24:42.256]  
[23:24:42.256]  <debugvars>
[23:24:42.256]    // Pre-defined
[23:24:42.256]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:24:42.256]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:24:42.260]    __dp=0x00000000
[23:24:42.260]    __ap=0x00000000
[23:24:42.260]    __traceout=0x00000000      (Trace Disabled)
[23:24:42.260]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:24:42.260]    __FlashAddr=0x00000000
[23:24:42.260]    __FlashLen=0x00000000
[23:24:42.260]    __FlashArg=0x00000000
[23:24:42.260]    __FlashOp=0x00000000
[23:24:42.260]    __Result=0x00000000
[23:24:42.260]  </debugvars>
[23:24:42.260]  
[23:24:42.260]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:24:42.260]    <block atomic="false" info="">
[23:24:42.260]      __var deviceID = 0;
[23:24:42.260]        // -> [deviceID <= 0x00000000]
[23:24:42.260]      __var version = 0;
[23:24:42.260]        // -> [version <= 0x00000000]
[23:24:42.260]      __var partNum = 0;
[23:24:42.260]        // -> [partNum <= 0x00000000]
[23:24:42.260]      __var manuf = 0;
[23:24:42.260]        // -> [manuf <= 0x00000000]
[23:24:42.260]      __var isMSPM0G1X0X_G3X0X = 0;
[23:24:42.260]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:24:42.260]      __var isProduction = 0;
[23:24:42.260]        // -> [isProduction <= 0x00000000]
[23:24:42.260]      __var continueId = 0;
[23:24:42.260]        // -> [continueId <= 0x00000000]
[23:24:42.260]      deviceID =   Read32(0x41C40004);
[23:24:42.272]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:24:42.272]        // -> [deviceID <= 0x2BB8802F]
[23:24:42.272]      version = deviceID >> 28;
[23:24:42.272]        // -> [version <= 0x00000002]
[23:24:42.272]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:24:42.272]        // -> [partNum <= 0x0000BB88]
[23:24:42.272]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:24:42.272]        // -> [manuf <= 0x00000017]
[23:24:42.272]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:24:42.272]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:24:42.272]      isProduction = (version > 0);
[23:24:42.272]        // -> [isProduction <= 0x00000001]
[23:24:42.272]    </block>
[23:24:42.272]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:24:42.272]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:24:42.272]        // =>  FALSE
[23:24:42.272]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:24:42.272]    </control>
[23:24:42.272]    <control if="continueId == 4" while="" timeout="0" info="">
[23:24:42.272]      // if-block "continueId == 4"
[23:24:42.272]        // =>  FALSE
[23:24:42.272]      // skip if-block "continueId == 4"
[23:24:42.272]    </control>
[23:24:42.272]    <control if="!isProduction" while="" timeout="0" info="">
[23:24:42.272]      // if-block "!isProduction"
[23:24:42.272]        // =>  FALSE
[23:24:42.272]      // skip if-block "!isProduction"
[23:24:42.272]    </control>
[23:24:42.272]  </sequence>
[23:24:42.272]  
[23:27:42.343]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:27:42.343]  
[23:27:42.343]  <debugvars>
[23:27:42.343]    // Pre-defined
[23:27:42.343]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:27:42.343]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:27:42.347]    __dp=0x00000000
[23:27:42.347]    __ap=0x00000000
[23:27:42.347]    __traceout=0x00000000      (Trace Disabled)
[23:27:42.348]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:27:42.348]    __FlashAddr=0x00000000
[23:27:42.348]    __FlashLen=0x00000000
[23:27:42.348]    __FlashArg=0x00000000
[23:27:42.348]    __FlashOp=0x00000000
[23:27:42.348]    __Result=0x00000000
[23:27:42.348]  </debugvars>
[23:27:42.348]  
[23:27:42.348]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:27:42.348]    <block atomic="false" info="">
[23:27:42.348]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:27:42.348]        // -> [isSWJ <= 0x00000001]
[23:27:42.348]      __var hasDormant = __protocol & 0x00020000;
[23:27:42.348]        // -> [hasDormant <= 0x00000000]
[23:27:42.348]      __var protType   = __protocol & 0x0000FFFF;
[23:27:42.348]        // -> [protType <= 0x00000002]
[23:27:42.348]    </block>
[23:27:42.348]    <control if="protType == 1" while="" timeout="0" info="">
[23:27:42.348]      // if-block "protType == 1"
[23:27:42.348]        // =>  FALSE
[23:27:42.350]      // skip if-block "protType == 1"
[23:27:42.350]    </control>
[23:27:42.350]    <control if="protType == 2" while="" timeout="0" info="">
[23:27:42.350]      // if-block "protType == 2"
[23:27:42.350]        // =>  TRUE
[23:27:42.350]      <control if="isSWJ" while="" timeout="0" info="">
[23:27:42.350]        // if-block "isSWJ"
[23:27:42.350]          // =>  TRUE
[23:27:42.350]        <control if="hasDormant" while="" timeout="0" info="">
[23:27:42.350]          // if-block "hasDormant"
[23:27:42.350]            // =>  FALSE
[23:27:42.350]          // skip if-block "hasDormant"
[23:27:42.351]        </control>
[23:27:42.351]        <control if="!hasDormant" while="" timeout="0" info="">
[23:27:42.351]          // if-block "!hasDormant"
[23:27:42.351]            // =>  TRUE
[23:27:42.351]          <block atomic="false" info="">
[23:27:42.351]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:27:42.352]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:27:42.352]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:27:42.356]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:27:42.356]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:27:42.359]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:27:42.359]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:27:42.363]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:27:42.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:27:42.366]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:27:42.367]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:27:42.370]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:27:42.370]          </block>
[23:27:42.370]          // end if-block "!hasDormant"
[23:27:42.370]        </control>
[23:27:42.370]        // end if-block "isSWJ"
[23:27:42.370]      </control>
[23:27:42.370]      <control if="!isSWJ" while="" timeout="0" info="">
[23:27:42.370]        // if-block "!isSWJ"
[23:27:42.370]          // =>  FALSE
[23:27:42.370]        // skip if-block "!isSWJ"
[23:27:42.370]      </control>
[23:27:42.370]      <block atomic="false" info="">
[23:27:42.370]        ReadDP(0x0);
[23:27:42.373]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:27:42.373]      </block>
[23:27:42.373]      // end if-block "protType == 2"
[23:27:42.373]    </control>
[23:27:42.373]  </sequence>
[23:27:42.373]  
[23:27:42.381]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:27:42.381]  
[23:27:42.381]  <debugvars>
[23:27:42.381]    // Pre-defined
[23:27:42.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:27:42.381]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:27:42.381]    __dp=0x00000000
[23:27:42.381]    __ap=0x00000000
[23:27:42.381]    __traceout=0x00000000      (Trace Disabled)
[23:27:42.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:27:42.381]    __FlashAddr=0x00000000
[23:27:42.381]    __FlashLen=0x00000000
[23:27:42.381]    __FlashArg=0x00000000
[23:27:42.381]    __FlashOp=0x00000000
[23:27:42.381]    __Result=0x00000000
[23:27:42.381]  </debugvars>
[23:27:42.381]  
[23:27:42.381]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:27:42.381]    <block atomic="false" info="">
[23:27:42.381]      __var SW_DP_ABORT       = 0x0;
[23:27:42.381]        // -> [SW_DP_ABORT <= 0x00000000]
[23:27:42.381]      __var DP_CTRL_STAT      = 0x4;
[23:27:42.384]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:27:42.384]      __var DP_SELECT         = 0x8;
[23:27:42.384]        // -> [DP_SELECT <= 0x00000008]
[23:27:42.384]      __var powered_down      = 0;
[23:27:42.384]        // -> [powered_down <= 0x00000000]
[23:27:42.384]      WriteDP(DP_SELECT, 0x00000000);
[23:27:42.384]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:27:42.384]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:27:42.391]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:27:42.391]        // -> [powered_down <= 0x00000001]
[23:27:42.391]    </block>
[23:27:42.391]    <control if="powered_down" while="" timeout="0" info="">
[23:27:42.391]      // if-block "powered_down"
[23:27:42.391]        // =>  TRUE
[23:27:42.391]      <block atomic="false" info="">
[23:27:42.391]        Message(0, "Debug/System power-up request sent");
[23:27:42.393]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:27:42.397]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:27:42.397]      </block>
[23:27:42.397]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:27:42.397]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:27:42.401]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:27:42.401]        // while-condition  =>  FALSE
[23:27:42.401]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:27:42.401]      </control>
[23:27:42.401]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:27:42.401]        // if-block "(__protocol & 0xFFFF) == 1"
[23:27:42.401]          // =>  FALSE
[23:27:42.401]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:27:42.401]      </control>
[23:27:42.401]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:27:42.401]        // if-block "(__protocol & 0xFFFF) == 2"
[23:27:42.401]          // =>  TRUE
[23:27:42.401]        <block atomic="false" info="">
[23:27:42.401]          Message(0, "executing SWD power up");
[23:27:42.405]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:27:42.409]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:27:42.409]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:27:42.411]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:27:42.411]        </block>
[23:27:42.411]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:27:42.411]      </control>
[23:27:42.411]      // end if-block "powered_down"
[23:27:42.411]    </control>
[23:27:42.413]    <block atomic="false" info="">
[23:27:42.413]      __var DEBUG_PORT_VAL    = 0;
[23:27:42.413]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:27:42.413]      __var ACCESS_POINT_VAL  = 0;
[23:27:42.413]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:27:42.413]      __ap = 1; 
[23:27:42.413]        // -> [__ap <= 0x00000001]
[23:27:42.413]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:27:42.417]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:27:42.417]      __ap = 4;
[23:27:42.417]        // -> [__ap <= 0x00000004]
[23:27:42.417]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:27:42.426]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:27:42.426]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:27:42.426]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:27:42.430]    </block>
[23:27:42.430]    <block atomic="false" info="">
[23:27:42.430]      __var nReset = 0x80;
[23:27:42.430]        // -> [nReset <= 0x00000080]
[23:27:42.430]      __var canReadPins = 0;
[23:27:42.430]        // -> [canReadPins <= 0x00000000]
[23:27:42.430]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:27:42.435]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:27:42.435]        // -> [canReadPins <= 0x00000001]
[23:27:42.435]    </block>
[23:27:42.435]    <control if="" while="1" timeout="200" info="">
[23:27:42.435]      // while "1"  (timeout="200")
[23:27:42.435]      // while-condition  =>  TRUE
[23:27:42.435]      // while "1"  (timeout="200")
[23:27:42.435]      // while-condition  =>  TRUE
[23:27:42.435]      // while "1"  (timeout="200")
[23:27:42.435]      // while-condition  =>  TRUE
[23:27:42.435]      // while "1"  (timeout="200")
[23:27:42.435]      // while-condition  =>  TRUE
[23:27:42.435]      // while "1"  (timeout="200")
[23:27:42.435]      // while-condition  =>  TRUE
[23:27:42.435]      // while "1"  (timeout="200")
[23:27:42.435]      // while-condition  =>  TRUE
[23:27:42.437]      // while "1"  (timeout="200")
[23:27:42.437]      // while-condition  =>  TRUE
[23:27:42.437]      // while "1"  (timeout="200")
[23:27:42.437]      // while-condition  =>  TRUE
[23:27:42.437]      // while "1"  (timeout="200")
[23:27:42.437]      // while-condition  =>  TRUE
[23:27:42.437]      // while "1"  (timeout="200")
[23:27:42.437]      // while-condition  =>  TRUE
[23:27:42.437]      // while "1"  (timeout="200")
[23:27:42.437]      // while-condition  =>  TRUE
[23:27:42.438]      // while "1"  (timeout="200")
[23:27:42.438]      // while-condition  =>  TRUE
[23:27:42.438]      // while "1"  (timeout="200")
[23:27:42.438]      // while-condition  =>  TRUE
[23:27:42.438]      // while "1"  (timeout="200")
[23:27:42.438]      // while-condition  =>  TRUE
[23:27:42.438]      // while "1"  (timeout="200")
[23:27:42.438]      // while-condition  =>  TRUE
[23:27:42.438]      // while "1"  (timeout="200")
[23:27:42.438]      // while-condition  =>  TRUE
[23:27:42.438]      // while "1"  (timeout="200")
[23:27:42.438]      // while-condition  =>  TRUE
[23:27:42.438]      // while "1"  (timeout="200")
[23:27:42.438]      // while-condition  =>  TRUE
[23:27:42.438]      // while "1"  (timeout="200")
[23:27:42.438]      // while-condition  =>  TRUE
[23:27:42.438]      // while "1"  (timeout="200")
[23:27:42.438]      // while-condition  =>  TRUE
[23:27:42.438]      // while "1"  (timeout="200")
[23:27:42.438]      // while-condition  =>  TRUE
[23:27:42.440]      // while "1"  (timeout="200")
[23:27:42.440]      // while  =>  TIMEOUT
[23:27:42.440]      // end while "1"
[23:27:42.440]    </control>
[23:27:42.440]    <control if="canReadPins" while="" timeout="0" info="">
[23:27:42.440]      // if-block "canReadPins"
[23:27:42.440]        // =>  TRUE
[23:27:42.440]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:27:42.440]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:27:42.444]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:27:42.444]        // while-condition  =>  FALSE
[23:27:42.444]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:27:42.444]      </control>
[23:27:42.444]      // end if-block "canReadPins"
[23:27:42.444]    </control>
[23:27:42.444]    <control if="!canReadPins" while="" timeout="0" info="">
[23:27:42.444]      // if-block "!canReadPins"
[23:27:42.444]        // =>  FALSE
[23:27:42.444]      // skip if-block "!canReadPins"
[23:27:42.444]    </control>
[23:27:42.446]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:27:42.446]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:27:42.446]        // =>  TRUE
[23:27:42.446]      <block atomic="false" info="">
[23:27:42.446]        WriteAP(0x00, 0x190008);
[23:27:42.450]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:27:42.450]        WriteAP(0xF0, 0x01);
[23:27:42.455]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:27:42.455]      </block>
[23:27:42.455]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:27:42.455]    </control>
[23:27:42.455]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:27:42.455]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:27:42.455]        // =>  FALSE
[23:27:42.455]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:27:42.455]    </control>
[23:27:42.457]    <block atomic="false" info="">
[23:27:42.457]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:27:42.463]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:27:42.463]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:27:42.463]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:27:42.465]      __ap = 0; //lets make sure we reset the access point selection
[23:27:42.465]        // -> [__ap <= 0x00000000]
[23:27:42.465]    </block>
[23:27:42.465]  </sequence>
[23:27:42.466]  
[23:27:42.500]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:27:42.500]  
[23:27:42.500]  <debugvars>
[23:27:42.500]    // Pre-defined
[23:27:42.500]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:27:42.500]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:27:42.500]    __dp=0x00000000
[23:27:42.500]    __ap=0x00000000
[23:27:42.500]    __traceout=0x00000000      (Trace Disabled)
[23:27:42.500]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:27:42.500]    __FlashAddr=0x00000000
[23:27:42.500]    __FlashLen=0x00000000
[23:27:42.500]    __FlashArg=0x00000000
[23:27:42.500]    __FlashOp=0x00000000
[23:27:42.500]    __Result=0x00000000
[23:27:42.500]  </debugvars>
[23:27:42.500]  
[23:27:42.500]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:27:42.500]    <block atomic="false" info="">
[23:27:42.500]      __var deviceID = 0;
[23:27:42.500]        // -> [deviceID <= 0x00000000]
[23:27:42.504]      __var version = 0;
[23:27:42.504]        // -> [version <= 0x00000000]
[23:27:42.504]      __var partNum = 0;
[23:27:42.504]        // -> [partNum <= 0x00000000]
[23:27:42.504]      __var manuf = 0;
[23:27:42.504]        // -> [manuf <= 0x00000000]
[23:27:42.504]      __var isMSPM0G1X0X_G3X0X = 0;
[23:27:42.504]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:27:42.504]      __var isProduction = 0;
[23:27:42.504]        // -> [isProduction <= 0x00000000]
[23:27:42.504]      __var continueId = 0;
[23:27:42.504]        // -> [continueId <= 0x00000000]
[23:27:42.504]      deviceID =   Read32(0x41C40004);
[23:27:42.513]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:27:42.513]        // -> [deviceID <= 0x2BB8802F]
[23:27:42.513]      version = deviceID >> 28;
[23:27:42.515]        // -> [version <= 0x00000002]
[23:27:42.515]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:27:42.515]        // -> [partNum <= 0x0000BB88]
[23:27:42.515]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:27:42.515]        // -> [manuf <= 0x00000017]
[23:27:42.515]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:27:42.515]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:27:42.515]      isProduction = (version > 0);
[23:27:42.515]        // -> [isProduction <= 0x00000001]
[23:27:42.515]    </block>
[23:27:42.516]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:27:42.516]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:27:42.516]        // =>  FALSE
[23:27:42.516]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:27:42.516]    </control>
[23:27:42.516]    <control if="continueId == 4" while="" timeout="0" info="">
[23:27:42.516]      // if-block "continueId == 4"
[23:27:42.516]        // =>  FALSE
[23:27:42.516]      // skip if-block "continueId == 4"
[23:27:42.518]    </control>
[23:27:42.518]    <control if="!isProduction" while="" timeout="0" info="">
[23:27:42.518]      // if-block "!isProduction"
[23:27:42.518]        // =>  FALSE
[23:27:42.518]      // skip if-block "!isProduction"
[23:27:42.518]    </control>
[23:27:42.518]  </sequence>
[23:27:42.518]  
[23:28:58.720]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:28:58.720]  
[23:28:58.731]  <debugvars>
[23:28:58.731]    // Pre-defined
[23:28:58.731]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:28:58.731]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:28:58.731]    __dp=0x00000000
[23:28:58.731]    __ap=0x00000000
[23:28:58.731]    __traceout=0x00000000      (Trace Disabled)
[23:28:58.731]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:28:58.731]    __FlashAddr=0x00000000
[23:28:58.731]    __FlashLen=0x00000000
[23:28:58.731]    __FlashArg=0x00000000
[23:28:58.731]    __FlashOp=0x00000000
[23:28:58.731]    __Result=0x00000000
[23:28:58.731]  </debugvars>
[23:28:58.731]  
[23:28:58.731]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:28:58.731]    <block atomic="false" info="">
[23:28:58.731]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:28:58.731]        // -> [isSWJ <= 0x00000001]
[23:28:58.731]      __var hasDormant = __protocol & 0x00020000;
[23:28:58.731]        // -> [hasDormant <= 0x00000000]
[23:28:58.731]      __var protType   = __protocol & 0x0000FFFF;
[23:28:58.731]        // -> [protType <= 0x00000002]
[23:28:58.731]    </block>
[23:28:58.731]    <control if="protType == 1" while="" timeout="0" info="">
[23:28:58.731]      // if-block "protType == 1"
[23:28:58.731]        // =>  FALSE
[23:28:58.731]      // skip if-block "protType == 1"
[23:28:58.731]    </control>
[23:28:58.731]    <control if="protType == 2" while="" timeout="0" info="">
[23:28:58.731]      // if-block "protType == 2"
[23:28:58.731]        // =>  TRUE
[23:28:58.731]      <control if="isSWJ" while="" timeout="0" info="">
[23:28:58.731]        // if-block "isSWJ"
[23:28:58.731]          // =>  TRUE
[23:28:58.731]        <control if="hasDormant" while="" timeout="0" info="">
[23:28:58.731]          // if-block "hasDormant"
[23:28:58.731]            // =>  FALSE
[23:28:58.731]          // skip if-block "hasDormant"
[23:28:58.731]        </control>
[23:28:58.731]        <control if="!hasDormant" while="" timeout="0" info="">
[23:28:58.731]          // if-block "!hasDormant"
[23:28:58.731]            // =>  TRUE
[23:28:58.735]          <block atomic="false" info="">
[23:28:58.735]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:28:58.736]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:28:58.736]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:28:58.739]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:28:58.739]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:28:58.743]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:28:58.743]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:28:58.747]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:28:58.747]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:28:58.747]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:28:58.751]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:28:58.751]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:28:58.751]          </block>
[23:28:58.751]          // end if-block "!hasDormant"
[23:28:58.751]        </control>
[23:28:58.751]        // end if-block "isSWJ"
[23:28:58.751]      </control>
[23:28:58.751]      <control if="!isSWJ" while="" timeout="0" info="">
[23:28:58.751]        // if-block "!isSWJ"
[23:28:58.755]          // =>  FALSE
[23:28:58.755]        // skip if-block "!isSWJ"
[23:28:58.755]      </control>
[23:28:58.755]      <block atomic="false" info="">
[23:28:58.755]        ReadDP(0x0);
[23:28:58.755]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:28:58.759]      </block>
[23:28:58.759]      // end if-block "protType == 2"
[23:28:58.759]    </control>
[23:28:58.759]  </sequence>
[23:28:58.759]  
[23:28:58.767]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:28:58.767]  
[23:28:58.767]  <debugvars>
[23:28:58.767]    // Pre-defined
[23:28:58.767]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:28:58.767]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:28:58.767]    __dp=0x00000000
[23:28:58.767]    __ap=0x00000000
[23:28:58.767]    __traceout=0x00000000      (Trace Disabled)
[23:28:58.767]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:28:58.767]    __FlashAddr=0x00000000
[23:28:58.767]    __FlashLen=0x00000000
[23:28:58.767]    __FlashArg=0x00000000
[23:28:58.767]    __FlashOp=0x00000000
[23:28:58.767]    __Result=0x00000000
[23:28:58.767]  </debugvars>
[23:28:58.767]  
[23:28:58.767]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:28:58.767]    <block atomic="false" info="">
[23:28:58.767]      __var SW_DP_ABORT       = 0x0;
[23:28:58.767]        // -> [SW_DP_ABORT <= 0x00000000]
[23:28:58.767]      __var DP_CTRL_STAT      = 0x4;
[23:28:58.767]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:28:58.767]      __var DP_SELECT         = 0x8;
[23:28:58.767]        // -> [DP_SELECT <= 0x00000008]
[23:28:58.771]      __var powered_down      = 0;
[23:28:58.771]        // -> [powered_down <= 0x00000000]
[23:28:58.771]      WriteDP(DP_SELECT, 0x00000000);
[23:28:58.774]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:28:58.774]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:28:58.776]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:28:58.776]        // -> [powered_down <= 0x00000001]
[23:28:58.776]    </block>
[23:28:58.776]    <control if="powered_down" while="" timeout="0" info="">
[23:28:58.776]      // if-block "powered_down"
[23:28:58.776]        // =>  TRUE
[23:28:58.776]      <block atomic="false" info="">
[23:28:58.776]        Message(0, "Debug/System power-up request sent");
[23:28:58.780]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:28:58.784]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:28:58.784]      </block>
[23:28:58.784]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:28:58.784]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:28:58.788]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:28:58.788]        // while-condition  =>  FALSE
[23:28:58.788]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:28:58.788]      </control>
[23:28:58.788]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:28:58.788]        // if-block "(__protocol & 0xFFFF) == 1"
[23:28:58.788]          // =>  FALSE
[23:28:58.788]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:28:58.788]      </control>
[23:28:58.788]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:28:58.788]        // if-block "(__protocol & 0xFFFF) == 2"
[23:28:58.788]          // =>  TRUE
[23:28:58.788]        <block atomic="false" info="">
[23:28:58.788]          Message(0, "executing SWD power up");
[23:28:58.788]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:28:58.792]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:28:58.792]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:28:58.796]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:28:58.796]        </block>
[23:28:58.796]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:28:58.796]      </control>
[23:28:58.796]      // end if-block "powered_down"
[23:28:58.796]    </control>
[23:28:58.796]    <block atomic="false" info="">
[23:28:58.796]      __var DEBUG_PORT_VAL    = 0;
[23:28:58.796]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:28:58.796]      __var ACCESS_POINT_VAL  = 0;
[23:28:58.796]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:28:58.796]      __ap = 1; 
[23:28:58.796]        // -> [__ap <= 0x00000001]
[23:28:58.796]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:28:58.804]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:28:58.804]      __ap = 4;
[23:28:58.804]        // -> [__ap <= 0x00000004]
[23:28:58.804]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:28:58.812]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:28:58.812]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:28:58.812]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:28:58.812]    </block>
[23:28:58.812]    <block atomic="false" info="">
[23:28:58.812]      __var nReset = 0x80;
[23:28:58.812]        // -> [nReset <= 0x00000080]
[23:28:58.812]      __var canReadPins = 0;
[23:28:58.812]        // -> [canReadPins <= 0x00000000]
[23:28:58.816]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:28:58.816]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:28:58.816]        // -> [canReadPins <= 0x00000001]
[23:28:58.816]    </block>
[23:28:58.816]    <control if="" while="1" timeout="200" info="">
[23:28:58.816]      // while "1"  (timeout="200")
[23:28:58.816]      // while-condition  =>  TRUE
[23:28:58.816]      // while "1"  (timeout="200")
[23:28:58.816]      // while-condition  =>  TRUE
[23:28:58.816]      // while "1"  (timeout="200")
[23:28:58.816]      // while-condition  =>  TRUE
[23:28:58.816]      // while "1"  (timeout="200")
[23:28:58.820]      // while-condition  =>  TRUE
[23:28:58.820]      // while "1"  (timeout="200")
[23:28:58.820]      // while-condition  =>  TRUE
[23:28:58.820]      // while "1"  (timeout="200")
[23:28:58.820]      // while-condition  =>  TRUE
[23:28:58.820]      // while "1"  (timeout="200")
[23:28:58.820]      // while-condition  =>  TRUE
[23:28:58.820]      // while "1"  (timeout="200")
[23:28:58.820]      // while-condition  =>  TRUE
[23:28:58.820]      // while "1"  (timeout="200")
[23:28:58.820]      // while-condition  =>  TRUE
[23:28:58.820]      // while "1"  (timeout="200")
[23:28:58.820]      // while-condition  =>  TRUE
[23:28:58.820]      // while "1"  (timeout="200")
[23:28:58.821]      // while-condition  =>  TRUE
[23:28:58.821]      // while "1"  (timeout="200")
[23:28:58.821]      // while-condition  =>  TRUE
[23:28:58.821]      // while "1"  (timeout="200")
[23:28:58.821]      // while-condition  =>  TRUE
[23:28:58.821]      // while "1"  (timeout="200")
[23:28:58.821]      // while-condition  =>  TRUE
[23:28:58.822]      // while "1"  (timeout="200")
[23:28:58.822]      // while-condition  =>  TRUE
[23:28:58.822]      // while "1"  (timeout="200")
[23:28:58.822]      // while-condition  =>  TRUE
[23:28:58.822]      // while "1"  (timeout="200")
[23:28:58.822]      // while-condition  =>  TRUE
[23:28:58.822]      // while "1"  (timeout="200")
[23:28:58.822]      // while-condition  =>  TRUE
[23:28:58.822]      // while "1"  (timeout="200")
[23:28:58.822]      // while-condition  =>  TRUE
[23:28:58.822]      // while "1"  (timeout="200")
[23:28:58.823]      // while-condition  =>  TRUE
[23:28:58.823]      // while "1"  (timeout="200")
[23:28:58.823]      // while-condition  =>  TRUE
[23:28:58.823]      // while "1"  (timeout="200")
[23:28:58.823]      // while-condition  =>  TRUE
[23:28:58.823]      // while "1"  (timeout="200")
[23:28:58.823]      // while-condition  =>  TRUE
[23:28:58.823]      // while "1"  (timeout="200")
[23:28:58.824]      // while-condition  =>  TRUE
[23:28:58.824]      // while "1"  (timeout="200")
[23:28:58.824]      // while-condition  =>  TRUE
[23:28:58.824]      // while "1"  (timeout="200")
[23:28:58.824]      // while-condition  =>  TRUE
[23:28:58.824]      // while "1"  (timeout="200")
[23:28:58.824]      // while-condition  =>  TRUE
[23:28:58.824]      // while "1"  (timeout="200")
[23:28:58.824]      // while-condition  =>  TRUE
[23:28:58.824]      // while "1"  (timeout="200")
[23:28:58.824]      // while-condition  =>  TRUE
[23:28:58.824]      // while "1"  (timeout="200")
[23:28:58.824]      // while-condition  =>  TRUE
[23:28:58.824]      // while "1"  (timeout="200")
[23:28:58.824]      // while-condition  =>  TRUE
[23:28:58.824]      // while "1"  (timeout="200")
[23:28:58.824]      // while-condition  =>  TRUE
[23:28:58.824]      // while "1"  (timeout="200")
[23:28:58.824]      // while-condition  =>  TRUE
[23:28:58.824]      // while "1"  (timeout="200")
[23:28:58.826]      // while-condition  =>  TRUE
[23:28:58.826]      // while "1"  (timeout="200")
[23:28:58.826]      // while-condition  =>  TRUE
[23:28:58.826]      // while "1"  (timeout="200")
[23:28:58.826]      // while-condition  =>  TRUE
[23:28:58.826]      // while "1"  (timeout="200")
[23:28:58.826]      // while-condition  =>  TRUE
[23:28:58.826]      // while "1"  (timeout="200")
[23:28:58.826]      // while-condition  =>  TRUE
[23:28:58.826]      // while "1"  (timeout="200")
[23:28:58.826]      // while-condition  =>  TRUE
[23:28:58.826]      // while "1"  (timeout="200")
[23:28:58.826]      // while-condition  =>  TRUE
[23:28:58.826]      // while "1"  (timeout="200")
[23:28:58.826]      // while-condition  =>  TRUE
[23:28:58.826]      // while "1"  (timeout="200")
[23:28:58.826]      // while-condition  =>  TRUE
[23:28:58.826]      // while "1"  (timeout="200")
[23:28:58.826]      // while-condition  =>  TRUE
[23:28:58.826]      // while "1"  (timeout="200")
[23:28:58.826]      // while-condition  =>  TRUE
[23:28:58.828]      // while "1"  (timeout="200")
[23:28:58.828]      // while-condition  =>  TRUE
[23:28:58.828]      // while "1"  (timeout="200")
[23:28:58.828]      // while-condition  =>  TRUE
[23:28:58.828]      // while "1"  (timeout="200")
[23:28:58.828]      // while-condition  =>  TRUE
[23:28:58.829]      // while "1"  (timeout="200")
[23:28:58.829]      // while-condition  =>  TRUE
[23:28:58.829]      // while "1"  (timeout="200")
[23:28:58.829]      // while-condition  =>  TRUE
[23:28:58.829]      // while "1"  (timeout="200")
[23:28:58.829]      // while-condition  =>  TRUE
[23:28:58.829]      // while "1"  (timeout="200")
[23:28:58.830]      // while-condition  =>  TRUE
[23:28:58.830]      // while "1"  (timeout="200")
[23:28:58.830]      // while-condition  =>  TRUE
[23:28:58.830]      // while "1"  (timeout="200")
[23:28:58.830]      // while-condition  =>  TRUE
[23:28:58.830]      // while "1"  (timeout="200")
[23:28:58.830]      // while-condition  =>  TRUE
[23:28:58.830]      // while "1"  (timeout="200")
[23:28:58.830]      // while-condition  =>  TRUE
[23:28:58.830]      // while "1"  (timeout="200")
[23:28:58.830]      // while-condition  =>  TRUE
[23:28:58.830]      // while "1"  (timeout="200")
[23:28:58.830]      // while-condition  =>  TRUE
[23:28:58.830]      // while "1"  (timeout="200")
[23:28:58.830]      // while-condition  =>  TRUE
[23:28:58.830]      // while "1"  (timeout="200")
[23:28:58.830]      // while-condition  =>  TRUE
[23:28:58.830]      // while "1"  (timeout="200")
[23:28:58.830]      // while-condition  =>  TRUE
[23:28:58.830]      // while "1"  (timeout="200")
[23:28:58.830]      // while-condition  =>  TRUE
[23:28:58.830]      // while "1"  (timeout="200")
[23:28:58.832]      // while-condition  =>  TRUE
[23:28:58.832]      // while "1"  (timeout="200")
[23:28:58.832]      // while  =>  TIMEOUT
[23:28:58.832]      // end while "1"
[23:28:58.832]    </control>
[23:28:58.832]    <control if="canReadPins" while="" timeout="0" info="">
[23:28:58.832]      // if-block "canReadPins"
[23:28:58.832]        // =>  TRUE
[23:28:58.832]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:28:58.832]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:28:58.836]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:28:58.836]        // while-condition  =>  FALSE
[23:28:58.836]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:28:58.836]      </control>
[23:28:58.836]      // end if-block "canReadPins"
[23:28:58.836]    </control>
[23:28:58.836]    <control if="!canReadPins" while="" timeout="0" info="">
[23:28:58.836]      // if-block "!canReadPins"
[23:28:58.836]        // =>  FALSE
[23:28:58.836]      // skip if-block "!canReadPins"
[23:28:58.836]    </control>
[23:28:58.836]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:28:58.836]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:28:58.836]        // =>  TRUE
[23:28:58.836]      <block atomic="false" info="">
[23:28:58.836]        WriteAP(0x00, 0x190008);
[23:28:58.840]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:28:58.840]        WriteAP(0xF0, 0x01);
[23:28:58.847]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:28:58.847]      </block>
[23:28:58.847]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:28:58.847]    </control>
[23:28:58.847]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:28:58.847]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:28:58.847]        // =>  FALSE
[23:28:58.847]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:28:58.847]    </control>
[23:28:58.847]    <block atomic="false" info="">
[23:28:58.847]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:28:58.852]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:28:58.852]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:28:58.852]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:28:58.852]      __ap = 0; //lets make sure we reset the access point selection
[23:28:58.852]        // -> [__ap <= 0x00000000]
[23:28:58.852]    </block>
[23:28:58.852]  </sequence>
[23:28:58.852]  
[23:28:58.890]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:28:58.890]  
[23:28:58.890]  <debugvars>
[23:28:58.890]    // Pre-defined
[23:28:58.890]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:28:58.890]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:28:58.890]    __dp=0x00000000
[23:28:58.890]    __ap=0x00000000
[23:28:58.890]    __traceout=0x00000000      (Trace Disabled)
[23:28:58.890]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:28:58.890]    __FlashAddr=0x00000000
[23:28:58.890]    __FlashLen=0x00000000
[23:28:58.890]    __FlashArg=0x00000000
[23:28:58.894]    __FlashOp=0x00000000
[23:28:58.894]    __Result=0x00000000
[23:28:58.894]  </debugvars>
[23:28:58.894]  
[23:28:58.894]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:28:58.894]    <block atomic="false" info="">
[23:28:58.894]      __var deviceID = 0;
[23:28:58.894]        // -> [deviceID <= 0x00000000]
[23:28:58.894]      __var version = 0;
[23:28:58.894]        // -> [version <= 0x00000000]
[23:28:58.894]      __var partNum = 0;
[23:28:58.894]        // -> [partNum <= 0x00000000]
[23:28:58.894]      __var manuf = 0;
[23:28:58.894]        // -> [manuf <= 0x00000000]
[23:28:58.894]      __var isMSPM0G1X0X_G3X0X = 0;
[23:28:58.894]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:28:58.894]      __var isProduction = 0;
[23:28:58.894]        // -> [isProduction <= 0x00000000]
[23:28:58.894]      __var continueId = 0;
[23:28:58.894]        // -> [continueId <= 0x00000000]
[23:28:58.894]      deviceID =   Read32(0x41C40004);
[23:28:58.902]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:28:58.902]        // -> [deviceID <= 0x2BB8802F]
[23:28:58.906]      version = deviceID >> 28;
[23:28:58.906]        // -> [version <= 0x00000002]
[23:28:58.906]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:28:58.906]        // -> [partNum <= 0x0000BB88]
[23:28:58.906]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:28:58.906]        // -> [manuf <= 0x00000017]
[23:28:58.906]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:28:58.906]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:28:58.906]      isProduction = (version > 0);
[23:28:58.906]        // -> [isProduction <= 0x00000001]
[23:28:58.906]    </block>
[23:28:58.906]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:28:58.906]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:28:58.906]        // =>  FALSE
[23:28:58.906]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:28:58.906]    </control>
[23:28:58.906]    <control if="continueId == 4" while="" timeout="0" info="">
[23:28:58.906]      // if-block "continueId == 4"
[23:28:58.906]        // =>  FALSE
[23:28:58.906]      // skip if-block "continueId == 4"
[23:28:58.906]    </control>
[23:28:58.906]    <control if="!isProduction" while="" timeout="0" info="">
[23:28:58.906]      // if-block "!isProduction"
[23:28:58.906]        // =>  FALSE
[23:28:58.906]      // skip if-block "!isProduction"
[23:28:58.906]    </control>
[23:28:58.906]  </sequence>
[23:28:58.909]  
[23:29:33.606]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:29:33.606]  
[23:29:33.617]  <debugvars>
[23:29:33.618]    // Pre-defined
[23:29:33.618]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:33.618]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:29:33.618]    __dp=0x00000000
[23:29:33.618]    __ap=0x00000000
[23:29:33.618]    __traceout=0x00000000      (Trace Disabled)
[23:29:33.618]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:33.618]    __FlashAddr=0x00000000
[23:29:33.618]    __FlashLen=0x00000000
[23:29:33.618]    __FlashArg=0x00000000
[23:29:33.618]    __FlashOp=0x00000000
[23:29:33.618]    __Result=0x00000000
[23:29:33.618]  </debugvars>
[23:29:33.618]  
[23:29:33.618]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:29:33.618]    <block atomic="false" info="">
[23:29:33.618]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:29:33.618]        // -> [isSWJ <= 0x00000001]
[23:29:33.618]      __var hasDormant = __protocol & 0x00020000;
[23:29:33.618]        // -> [hasDormant <= 0x00000000]
[23:29:33.618]      __var protType   = __protocol & 0x0000FFFF;
[23:29:33.618]        // -> [protType <= 0x00000002]
[23:29:33.619]    </block>
[23:29:33.619]    <control if="protType == 1" while="" timeout="0" info="">
[23:29:33.619]      // if-block "protType == 1"
[23:29:33.619]        // =>  FALSE
[23:29:33.619]      // skip if-block "protType == 1"
[23:29:33.619]    </control>
[23:29:33.619]    <control if="protType == 2" while="" timeout="0" info="">
[23:29:33.619]      // if-block "protType == 2"
[23:29:33.619]        // =>  TRUE
[23:29:33.619]      <control if="isSWJ" while="" timeout="0" info="">
[23:29:33.619]        // if-block "isSWJ"
[23:29:33.619]          // =>  TRUE
[23:29:33.619]        <control if="hasDormant" while="" timeout="0" info="">
[23:29:33.619]          // if-block "hasDormant"
[23:29:33.619]            // =>  FALSE
[23:29:33.621]          // skip if-block "hasDormant"
[23:29:33.621]        </control>
[23:29:33.621]        <control if="!hasDormant" while="" timeout="0" info="">
[23:29:33.621]          // if-block "!hasDormant"
[23:29:33.621]            // =>  TRUE
[23:29:33.621]          <block atomic="false" info="">
[23:29:33.622]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:29:33.625]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:33.625]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:29:33.626]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:29:33.626]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:29:33.632]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:33.632]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:29:33.634]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:29:33.634]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:29:33.637]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:33.637]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:29:33.640]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:29:33.641]          </block>
[23:29:33.641]          // end if-block "!hasDormant"
[23:29:33.641]        </control>
[23:29:33.641]        // end if-block "isSWJ"
[23:29:33.641]      </control>
[23:29:33.641]      <control if="!isSWJ" while="" timeout="0" info="">
[23:29:33.641]        // if-block "!isSWJ"
[23:29:33.641]          // =>  FALSE
[23:29:33.641]        // skip if-block "!isSWJ"
[23:29:33.641]      </control>
[23:29:33.641]      <block atomic="false" info="">
[23:29:33.641]        ReadDP(0x0);
[23:29:33.645]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:29:33.645]      </block>
[23:29:33.645]      // end if-block "protType == 2"
[23:29:33.646]    </control>
[23:29:33.646]  </sequence>
[23:29:33.646]  
[23:29:33.651]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:29:33.651]  
[23:29:33.651]  <debugvars>
[23:29:33.651]    // Pre-defined
[23:29:33.651]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:33.651]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:29:33.651]    __dp=0x00000000
[23:29:33.651]    __ap=0x00000000
[23:29:33.651]    __traceout=0x00000000      (Trace Disabled)
[23:29:33.651]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:33.651]    __FlashAddr=0x00000000
[23:29:33.651]    __FlashLen=0x00000000
[23:29:33.651]    __FlashArg=0x00000000
[23:29:33.651]    __FlashOp=0x00000000
[23:29:33.651]    __Result=0x00000000
[23:29:33.651]  </debugvars>
[23:29:33.651]  
[23:29:33.651]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:29:33.651]    <block atomic="false" info="">
[23:29:33.651]      __var SW_DP_ABORT       = 0x0;
[23:29:33.651]        // -> [SW_DP_ABORT <= 0x00000000]
[23:29:33.651]      __var DP_CTRL_STAT      = 0x4;
[23:29:33.651]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:29:33.655]      __var DP_SELECT         = 0x8;
[23:29:33.655]        // -> [DP_SELECT <= 0x00000008]
[23:29:33.655]      __var powered_down      = 0;
[23:29:33.655]        // -> [powered_down <= 0x00000000]
[23:29:33.655]      WriteDP(DP_SELECT, 0x00000000);
[23:29:33.656]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:29:33.656]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:29:33.661]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:29:33.661]        // -> [powered_down <= 0x00000001]
[23:29:33.661]    </block>
[23:29:33.661]    <control if="powered_down" while="" timeout="0" info="">
[23:29:33.661]      // if-block "powered_down"
[23:29:33.661]        // =>  TRUE
[23:29:33.661]      <block atomic="false" info="">
[23:29:33.661]        Message(0, "Debug/System power-up request sent");
[23:29:33.663]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:29:33.666]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:29:33.666]      </block>
[23:29:33.666]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:29:33.666]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.668]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.668]        // while-condition  =>  TRUE
[23:29:33.668]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.673]        // while-condition  =>  TRUE
[23:29:33.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.676]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.676]        // while-condition  =>  TRUE
[23:29:33.676]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.676]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.676]        // while-condition  =>  TRUE
[23:29:33.676]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.683]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.683]        // while-condition  =>  TRUE
[23:29:33.683]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.685]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.685]        // while-condition  =>  TRUE
[23:29:33.685]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.688]        // while-condition  =>  TRUE
[23:29:33.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.694]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.694]        // while-condition  =>  TRUE
[23:29:33.694]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.697]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.697]        // while-condition  =>  TRUE
[23:29:33.698]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.700]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.700]        // while-condition  =>  TRUE
[23:29:33.701]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.703]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.703]        // while-condition  =>  TRUE
[23:29:33.703]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.707]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.707]        // while-condition  =>  TRUE
[23:29:33.707]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.710]        // while-condition  =>  TRUE
[23:29:33.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.714]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.714]        // while-condition  =>  TRUE
[23:29:33.714]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.717]        // while-condition  =>  TRUE
[23:29:33.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.721]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.721]        // while-condition  =>  TRUE
[23:29:33.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.725]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.726]        // while-condition  =>  TRUE
[23:29:33.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.727]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.727]        // while-condition  =>  TRUE
[23:29:33.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.730]        // while-condition  =>  TRUE
[23:29:33.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.735]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.735]        // while-condition  =>  TRUE
[23:29:33.735]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.742]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.742]        // while-condition  =>  TRUE
[23:29:33.742]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.747]        // while-condition  =>  TRUE
[23:29:33.747]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.750]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.750]        // while-condition  =>  TRUE
[23:29:33.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.754]        // while-condition  =>  TRUE
[23:29:33.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.754]        // while-condition  =>  TRUE
[23:29:33.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.761]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.761]        // while-condition  =>  TRUE
[23:29:33.761]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.762]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.762]        // while-condition  =>  TRUE
[23:29:33.762]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.766]        // while-condition  =>  TRUE
[23:29:33.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.770]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.770]        // while-condition  =>  TRUE
[23:29:33.770]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.774]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.774]        // while-condition  =>  TRUE
[23:29:33.774]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.778]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.778]        // while-condition  =>  TRUE
[23:29:33.778]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.783]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.783]        // while-condition  =>  TRUE
[23:29:33.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.786]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.786]        // while-condition  =>  TRUE
[23:29:33.786]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.790]        // while-condition  =>  TRUE
[23:29:33.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.790]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.790]        // while-condition  =>  TRUE
[23:29:33.790]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.794]        // while-condition  =>  TRUE
[23:29:33.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.798]        // while-condition  =>  TRUE
[23:29:33.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.802]        // while-condition  =>  TRUE
[23:29:33.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.802]        // while-condition  =>  TRUE
[23:29:33.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.806]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.806]        // while-condition  =>  TRUE
[23:29:33.806]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.811]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.811]        // while-condition  =>  TRUE
[23:29:33.811]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.811]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.811]        // while-condition  =>  TRUE
[23:29:33.811]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.815]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.815]        // while-condition  =>  TRUE
[23:29:33.815]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.819]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.819]        // while-condition  =>  TRUE
[23:29:33.819]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.823]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.823]        // while-condition  =>  TRUE
[23:29:33.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.827]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.827]        // while-condition  =>  TRUE
[23:29:33.827]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.830]        // while-condition  =>  TRUE
[23:29:33.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.832]        // while-condition  =>  TRUE
[23:29:33.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.835]        // while-condition  =>  TRUE
[23:29:33.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.839]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.839]        // while-condition  =>  TRUE
[23:29:33.839]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.843]        // while-condition  =>  TRUE
[23:29:33.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.847]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.848]        // while-condition  =>  TRUE
[23:29:33.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.848]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.848]        // while-condition  =>  TRUE
[23:29:33.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.853]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.853]        // while-condition  =>  TRUE
[23:29:33.853]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.856]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.856]        // while-condition  =>  TRUE
[23:29:33.857]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.859]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.859]        // while-condition  =>  TRUE
[23:29:33.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.862]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.862]        // while-condition  =>  TRUE
[23:29:33.863]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.866]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.866]        // while-condition  =>  TRUE
[23:29:33.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.869]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.869]        // while-condition  =>  TRUE
[23:29:33.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.872]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.872]        // while-condition  =>  TRUE
[23:29:33.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.875]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.875]        // while-condition  =>  TRUE
[23:29:33.875]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.878]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.878]        // while-condition  =>  TRUE
[23:29:33.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.881]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.881]        // while-condition  =>  TRUE
[23:29:33.881]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.884]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.884]        // while-condition  =>  TRUE
[23:29:33.884]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.886]        // while-condition  =>  TRUE
[23:29:33.886]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.890]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.890]        // while-condition  =>  TRUE
[23:29:33.890]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.894]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.894]        // while-condition  =>  TRUE
[23:29:33.894]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.898]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.898]        // while-condition  =>  TRUE
[23:29:33.898]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.902]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.902]        // while-condition  =>  TRUE
[23:29:33.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.904]        // while-condition  =>  TRUE
[23:29:33.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.910]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.910]        // while-condition  =>  TRUE
[23:29:33.910]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.916]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.916]        // while-condition  =>  TRUE
[23:29:33.916]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.920]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.921]        // while-condition  =>  TRUE
[23:29:33.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.923]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.923]        // while-condition  =>  TRUE
[23:29:33.923]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.926]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.928]        // while-condition  =>  TRUE
[23:29:33.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.929]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.931]        // while-condition  =>  TRUE
[23:29:33.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.932]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.932]        // while-condition  =>  TRUE
[23:29:33.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.935]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.935]        // while-condition  =>  TRUE
[23:29:33.935]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.940]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.940]        // while-condition  =>  TRUE
[23:29:33.940]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.941]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.943]        // while-condition  =>  TRUE
[23:29:33.943]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.946]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.946]        // while-condition  =>  TRUE
[23:29:33.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.949]        // while-condition  =>  TRUE
[23:29:33.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.952]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.952]        // while-condition  =>  TRUE
[23:29:33.952]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.956]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.957]        // while-condition  =>  TRUE
[23:29:33.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.959]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.959]        // while-condition  =>  TRUE
[23:29:33.959]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.961]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.961]        // while-condition  =>  TRUE
[23:29:33.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.965]        // while-condition  =>  TRUE
[23:29:33.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.967]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.967]        // while-condition  =>  TRUE
[23:29:33.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.970]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.970]        // while-condition  =>  TRUE
[23:29:33.970]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.975]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.975]        // while-condition  =>  TRUE
[23:29:33.975]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.978]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.978]        // while-condition  =>  TRUE
[23:29:33.978]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.981]        // while-condition  =>  TRUE
[23:29:33.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.981]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.984]        // while-condition  =>  TRUE
[23:29:33.984]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.991]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.991]        // while-condition  =>  TRUE
[23:29:33.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.994]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.994]        // while-condition  =>  TRUE
[23:29:33.994]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.997]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.997]        // while-condition  =>  TRUE
[23:29:33.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:33.997]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:33.997]        // while-condition  =>  TRUE
[23:29:34.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.001]        // while-condition  =>  TRUE
[23:29:34.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.005]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.005]        // while-condition  =>  TRUE
[23:29:34.005]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.009]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.009]        // while-condition  =>  TRUE
[23:29:34.009]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.013]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.013]        // while-condition  =>  TRUE
[23:29:34.013]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.017]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.017]        // while-condition  =>  TRUE
[23:29:34.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.021]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.021]        // while-condition  =>  TRUE
[23:29:34.021]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.025]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.025]        // while-condition  =>  TRUE
[23:29:34.025]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.029]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.029]        // while-condition  =>  TRUE
[23:29:34.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.032]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.033]        // while-condition  =>  TRUE
[23:29:34.033]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.035]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.037]        // while-condition  =>  TRUE
[23:29:34.037]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.038]        // while-condition  =>  TRUE
[23:29:34.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.043]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.043]        // while-condition  =>  TRUE
[23:29:34.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.046]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.046]        // while-condition  =>  TRUE
[23:29:34.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.050]        // while-condition  =>  TRUE
[23:29:34.050]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.054]        // while-condition  =>  TRUE
[23:29:34.054]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.058]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.058]        // while-condition  =>  TRUE
[23:29:34.058]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.061]        // while-condition  =>  TRUE
[23:29:34.061]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.064]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.064]        // while-condition  =>  TRUE
[23:29:34.064]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.069]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.069]        // while-condition  =>  TRUE
[23:29:34.069]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.070]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.070]        // while-condition  =>  TRUE
[23:29:34.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.074]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.074]        // while-condition  =>  TRUE
[23:29:34.074]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.078]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.078]        // while-condition  =>  TRUE
[23:29:34.078]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.079]        // while-condition  =>  TRUE
[23:29:34.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.085]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.085]        // while-condition  =>  TRUE
[23:29:34.086]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.088]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.088]        // while-condition  =>  TRUE
[23:29:34.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.092]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.092]        // while-condition  =>  TRUE
[23:29:34.092]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.095]        // while-condition  =>  TRUE
[23:29:34.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.098]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.098]        // while-condition  =>  TRUE
[23:29:34.098]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.102]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.102]        // while-condition  =>  TRUE
[23:29:34.103]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.105]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.105]        // while-condition  =>  TRUE
[23:29:34.105]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.108]        // while-condition  =>  TRUE
[23:29:34.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.112]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.113]        // while-condition  =>  TRUE
[23:29:34.113]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.116]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.116]        // while-condition  =>  TRUE
[23:29:34.116]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.119]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.119]        // while-condition  =>  TRUE
[23:29:34.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.120]        // while-condition  =>  TRUE
[23:29:34.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.124]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.124]        // while-condition  =>  TRUE
[23:29:34.124]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.129]        // while-condition  =>  TRUE
[23:29:34.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.132]        // while-condition  =>  TRUE
[23:29:34.132]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.136]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.136]        // while-condition  =>  TRUE
[23:29:34.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.140]        // while-condition  =>  TRUE
[23:29:34.141]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.145]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.145]        // while-condition  =>  TRUE
[23:29:34.145]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.149]        // while-condition  =>  TRUE
[23:29:34.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.153]        // while-condition  =>  TRUE
[23:29:34.153]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.156]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.156]        // while-condition  =>  TRUE
[23:29:34.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.160]        // while-condition  =>  TRUE
[23:29:34.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.164]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.164]        // while-condition  =>  TRUE
[23:29:34.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.169]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.169]        // while-condition  =>  TRUE
[23:29:34.169]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.169]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.169]        // while-condition  =>  TRUE
[23:29:34.173]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.173]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.173]        // while-condition  =>  TRUE
[23:29:34.177]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.179]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.179]        // while-condition  =>  TRUE
[23:29:34.179]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.181]        // while-condition  =>  TRUE
[23:29:34.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.185]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.185]        // while-condition  =>  TRUE
[23:29:34.185]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.189]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.189]        // while-condition  =>  TRUE
[23:29:34.189]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.193]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.193]        // while-condition  =>  TRUE
[23:29:34.193]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.197]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.197]        // while-condition  =>  TRUE
[23:29:34.197]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.201]        // while-condition  =>  TRUE
[23:29:34.201]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.205]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.205]        // while-condition  =>  TRUE
[23:29:34.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.209]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.209]        // while-condition  =>  TRUE
[23:29:34.209]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.214]        // while-condition  =>  TRUE
[23:29:34.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.217]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.217]        // while-condition  =>  TRUE
[23:29:34.217]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.221]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.221]        // while-condition  =>  TRUE
[23:29:34.221]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.225]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.225]        // while-condition  =>  TRUE
[23:29:34.225]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.229]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.229]        // while-condition  =>  TRUE
[23:29:34.229]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.233]        // while-condition  =>  TRUE
[23:29:34.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.238]        // while-condition  =>  TRUE
[23:29:34.238]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.241]        // while-condition  =>  TRUE
[23:29:34.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.241]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.241]        // while-condition  =>  TRUE
[23:29:34.241]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.246]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.246]        // while-condition  =>  TRUE
[23:29:34.246]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.252]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.252]        // while-condition  =>  TRUE
[23:29:34.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.254]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.254]        // while-condition  =>  TRUE
[23:29:34.254]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.258]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.258]        // while-condition  =>  TRUE
[23:29:34.258]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.262]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.262]        // while-condition  =>  TRUE
[23:29:34.262]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.266]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.266]        // while-condition  =>  TRUE
[23:29:34.266]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.270]        // while-condition  =>  TRUE
[23:29:34.270]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.274]        // while-condition  =>  TRUE
[23:29:34.274]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.278]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.278]        // while-condition  =>  TRUE
[23:29:34.278]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.282]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.282]        // while-condition  =>  TRUE
[23:29:34.282]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.290]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.290]        // while-condition  =>  TRUE
[23:29:34.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.294]        // while-condition  =>  TRUE
[23:29:34.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.294]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.294]        // while-condition  =>  TRUE
[23:29:34.294]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.300]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.300]        // while-condition  =>  TRUE
[23:29:34.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.302]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.302]        // while-condition  =>  TRUE
[23:29:34.302]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.306]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.306]        // while-condition  =>  TRUE
[23:29:34.306]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.310]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.310]        // while-condition  =>  TRUE
[23:29:34.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.314]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.314]        // while-condition  =>  TRUE
[23:29:34.314]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.318]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.318]        // while-condition  =>  TRUE
[23:29:34.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.322]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.324]        // while-condition  =>  TRUE
[23:29:34.324]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.324]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.327]        // while-condition  =>  TRUE
[23:29:34.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.327]        // while-condition  =>  TRUE
[23:29:34.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.331]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.331]        // while-condition  =>  TRUE
[23:29:34.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.335]        // while-condition  =>  TRUE
[23:29:34.335]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.339]        // while-condition  =>  TRUE
[23:29:34.339]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.339]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.343]        // while-condition  =>  TRUE
[23:29:34.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.343]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.343]        // while-condition  =>  TRUE
[23:29:34.347]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.347]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.351]        // while-condition  =>  TRUE
[23:29:34.351]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.355]        // while-condition  =>  TRUE
[23:29:34.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.359]        // while-condition  =>  TRUE
[23:29:34.359]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.363]        // while-condition  =>  TRUE
[23:29:34.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.367]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.367]        // while-condition  =>  TRUE
[23:29:34.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.371]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.371]        // while-condition  =>  TRUE
[23:29:34.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.375]        // while-condition  =>  TRUE
[23:29:34.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.375]        // while-condition  =>  TRUE
[23:29:34.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.379]        // while-condition  =>  TRUE
[23:29:34.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.383]        // while-condition  =>  TRUE
[23:29:34.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.387]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.387]        // while-condition  =>  TRUE
[23:29:34.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.387]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.387]        // while-condition  =>  TRUE
[23:29:34.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.391]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.391]        // while-condition  =>  TRUE
[23:29:34.391]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.395]        // while-condition  =>  TRUE
[23:29:34.395]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.400]        // while-condition  =>  TRUE
[23:29:34.400]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.400]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.404]        // while-condition  =>  TRUE
[23:29:34.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.404]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.404]        // while-condition  =>  TRUE
[23:29:34.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.409]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.410]        // while-condition  =>  TRUE
[23:29:34.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.412]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.412]        // while-condition  =>  TRUE
[23:29:34.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.414]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.414]        // while-condition  =>  TRUE
[23:29:34.414]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.418]        // while-condition  =>  TRUE
[23:29:34.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.421]        // while-condition  =>  TRUE
[23:29:34.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.424]        // while-condition  =>  TRUE
[23:29:34.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.426]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.426]        // while-condition  =>  TRUE
[23:29:34.426]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.429]        // while-condition  =>  TRUE
[23:29:34.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.433]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.433]        // while-condition  =>  TRUE
[23:29:34.433]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.433]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.437]        // while-condition  =>  TRUE
[23:29:34.437]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.437]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.441]        // while-condition  =>  TRUE
[23:29:34.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.441]        // while-condition  =>  TRUE
[23:29:34.441]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.445]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.445]        // while-condition  =>  TRUE
[23:29:34.445]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.449]        // while-condition  =>  TRUE
[23:29:34.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.453]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.453]        // while-condition  =>  TRUE
[23:29:34.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.457]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.457]        // while-condition  =>  TRUE
[23:29:34.457]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.461]        // while-condition  =>  TRUE
[23:29:34.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.461]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.461]        // while-condition  =>  TRUE
[23:29:34.461]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.465]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.465]        // while-condition  =>  TRUE
[23:29:34.465]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.469]        // while-condition  =>  TRUE
[23:29:34.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.473]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.473]        // while-condition  =>  TRUE
[23:29:34.473]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.477]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.477]        // while-condition  =>  TRUE
[23:29:34.478]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.479]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.479]        // while-condition  =>  TRUE
[23:29:34.479]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.482]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.482]        // while-condition  =>  TRUE
[23:29:34.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.486]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.486]        // while-condition  =>  TRUE
[23:29:34.486]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.489]        // while-condition  =>  TRUE
[23:29:34.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.491]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.491]        // while-condition  =>  TRUE
[23:29:34.491]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.494]        // while-condition  =>  TRUE
[23:29:34.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.498]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.498]        // while-condition  =>  TRUE
[23:29:34.498]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.501]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.501]        // while-condition  =>  TRUE
[23:29:34.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.502]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.502]        // while-condition  =>  TRUE
[23:29:34.502]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.507]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.507]        // while-condition  =>  TRUE
[23:29:34.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.507]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.507]        // while-condition  =>  TRUE
[23:29:34.507]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.513]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.513]        // while-condition  =>  TRUE
[23:29:34.513]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.515]        // while-condition  =>  TRUE
[23:29:34.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.519]        // while-condition  =>  TRUE
[23:29:34.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.519]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.519]        // while-condition  =>  TRUE
[23:29:34.519]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.523]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.523]        // while-condition  =>  TRUE
[23:29:34.523]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.527]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.527]        // while-condition  =>  TRUE
[23:29:34.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.531]        // while-condition  =>  TRUE
[23:29:34.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.531]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.531]        // while-condition  =>  TRUE
[23:29:34.531]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.535]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.535]        // while-condition  =>  TRUE
[23:29:34.538]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.540]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.541]        // while-condition  =>  TRUE
[23:29:34.541]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.543]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.543]        // while-condition  =>  TRUE
[23:29:34.543]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.547]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.547]        // while-condition  =>  TRUE
[23:29:34.547]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.551]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.551]        // while-condition  =>  TRUE
[23:29:34.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.555]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.555]        // while-condition  =>  TRUE
[23:29:34.555]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.561]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.564]        // while-condition  =>  TRUE
[23:29:34.564]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.568]        // while-condition  =>  TRUE
[23:29:34.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.568]        // while-condition  =>  TRUE
[23:29:34.572]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.572]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.572]        // while-condition  =>  TRUE
[23:29:34.572]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.576]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.576]        // while-condition  =>  TRUE
[23:29:34.576]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.580]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.580]        // while-condition  =>  TRUE
[23:29:34.580]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.584]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.584]        // while-condition  =>  TRUE
[23:29:34.584]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.589]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.590]        // while-condition  =>  TRUE
[23:29:34.590]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.593]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.593]        // while-condition  =>  TRUE
[23:29:34.593]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.598]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.598]        // while-condition  =>  TRUE
[23:29:34.598]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.601]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.601]        // while-condition  =>  TRUE
[23:29:34.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.605]        // while-condition  =>  TRUE
[23:29:34.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.609]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.609]        // while-condition  =>  TRUE
[23:29:34.609]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.613]        // while-condition  =>  TRUE
[23:29:34.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.616]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.616]        // while-condition  =>  TRUE
[23:29:34.616]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.620]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.620]        // while-condition  =>  TRUE
[23:29:34.620]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.625]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.625]        // while-condition  =>  TRUE
[23:29:34.625]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.629]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.629]        // while-condition  =>  TRUE
[23:29:34.629]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.633]        // while-condition  =>  TRUE
[23:29:34.633]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.633]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.633]        // while-condition  =>  TRUE
[23:29:34.637]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.637]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.641]        // while-condition  =>  TRUE
[23:29:34.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.641]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.641]        // while-condition  =>  TRUE
[23:29:34.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.648]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.648]        // while-condition  =>  TRUE
[23:29:34.648]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.649]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.649]        // while-condition  =>  TRUE
[23:29:34.649]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.657]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.657]        // while-condition  =>  TRUE
[23:29:34.657]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.661]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[23:29:34.661]        // while-condition  =>  TRUE
[23:29:34.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:29:34.661]        // while  =>  TIMEOUT
[23:29:34.661]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:29:34.661]      </control>
[23:29:34.661]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:29:34.661]        // if-block "(__protocol & 0xFFFF) == 1"
[23:29:34.661]          // =>  FALSE
[23:29:34.661]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:29:34.661]      </control>
[23:29:34.661]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:29:34.661]        // if-block "(__protocol & 0xFFFF) == 2"
[23:29:34.661]          // =>  TRUE
[23:29:34.661]        <block atomic="false" info="">
[23:29:34.661]          Message(0, "executing SWD power up");
[23:29:34.665]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:29:34.667]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:29:34.667]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:29:34.670]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:29:34.670]        </block>
[23:29:34.670]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:29:34.670]      </control>
[23:29:34.670]      // end if-block "powered_down"
[23:29:34.670]    </control>
[23:29:34.670]    <block atomic="false" info="">
[23:29:34.670]      __var DEBUG_PORT_VAL    = 0;
[23:29:34.670]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:29:34.670]      __var ACCESS_POINT_VAL  = 0;
[23:29:34.670]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:29:34.670]      __ap = 1; 
[23:29:34.670]        // -> [__ap <= 0x00000001]
[23:29:34.670]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:29:34.690]  
[23:29:34.690]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[23:29:34.690]  
[23:29:34.697]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:29:34.697]    </block>
[23:29:34.697]  </sequence>
[23:29:34.697]  
[23:29:52.738]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:29:52.738]  
[23:29:52.738]  <debugvars>
[23:29:52.738]    // Pre-defined
[23:29:52.738]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:29:52.738]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:29:52.738]    __dp=0x00000000
[23:29:52.738]    __ap=0x00000000
[23:29:52.738]    __traceout=0x00000000      (Trace Disabled)
[23:29:52.738]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:29:52.738]    __FlashAddr=0x00000000
[23:29:52.738]    __FlashLen=0x00000000
[23:29:52.738]    __FlashArg=0x00000000
[23:29:52.738]    __FlashOp=0x00000000
[23:29:52.738]    __Result=0x00000000
[23:29:52.738]  </debugvars>
[23:29:52.738]  
[23:29:52.738]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:29:52.738]    <block atomic="false" info="">
[23:29:52.742]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:29:52.742]        // -> [isSWJ <= 0x00000001]
[23:29:52.742]      __var hasDormant = __protocol & 0x00020000;
[23:29:52.742]        // -> [hasDormant <= 0x00000000]
[23:29:52.742]      __var protType   = __protocol & 0x0000FFFF;
[23:29:52.742]        // -> [protType <= 0x00000002]
[23:29:52.742]    </block>
[23:29:52.742]    <control if="protType == 1" while="" timeout="0" info="">
[23:29:52.742]      // if-block "protType == 1"
[23:29:52.742]        // =>  FALSE
[23:29:52.742]      // skip if-block "protType == 1"
[23:29:52.742]    </control>
[23:29:52.742]    <control if="protType == 2" while="" timeout="0" info="">
[23:29:52.742]      // if-block "protType == 2"
[23:29:52.742]        // =>  TRUE
[23:29:52.742]      <control if="isSWJ" while="" timeout="0" info="">
[23:29:52.742]        // if-block "isSWJ"
[23:29:52.742]          // =>  TRUE
[23:29:52.742]        <control if="hasDormant" while="" timeout="0" info="">
[23:29:52.742]          // if-block "hasDormant"
[23:29:52.742]            // =>  FALSE
[23:29:52.742]          // skip if-block "hasDormant"
[23:29:52.742]        </control>
[23:29:52.742]        <control if="!hasDormant" while="" timeout="0" info="">
[23:29:52.742]          // if-block "!hasDormant"
[23:29:52.742]            // =>  TRUE
[23:29:52.742]          <block atomic="false" info="">
[23:29:52.745]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:29:52.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:52.748]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:29:52.751]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:29:52.751]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:29:52.752]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:52.752]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:29:52.755]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:29:52.755]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:29:52.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:29:52.759]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:29:52.762]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:29:52.762]          </block>
[23:29:52.762]          // end if-block "!hasDormant"
[23:29:52.762]        </control>
[23:29:52.763]        // end if-block "isSWJ"
[23:29:52.763]      </control>
[23:29:52.763]      <control if="!isSWJ" while="" timeout="0" info="">
[23:29:52.763]        // if-block "!isSWJ"
[23:29:52.763]          // =>  FALSE
[23:29:52.763]        // skip if-block "!isSWJ"
[23:29:52.763]      </control>
[23:29:52.763]      <block atomic="false" info="">
[23:29:52.763]        ReadDP(0x0);
[23:29:52.767]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:29:52.767]      </block>
[23:29:52.768]      // end if-block "protType == 2"
[23:29:52.768]    </control>
[23:29:52.768]  </sequence>
[23:29:52.768]  
[23:30:08.354]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:30:08.354]  
[23:30:08.354]  <debugvars>
[23:30:08.354]    // Pre-defined
[23:30:08.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:30:08.354]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:30:08.354]    __dp=0x00000000
[23:30:08.354]    __ap=0x00000000
[23:30:08.354]    __traceout=0x00000000      (Trace Disabled)
[23:30:08.354]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:30:08.354]    __FlashAddr=0x00000000
[23:30:08.354]    __FlashLen=0x00000000
[23:30:08.354]    __FlashArg=0x00000000
[23:30:08.354]    __FlashOp=0x00000000
[23:30:08.354]    __Result=0x00000000
[23:30:08.354]  </debugvars>
[23:30:08.354]  
[23:30:08.354]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:30:08.354]    <block atomic="false" info="">
[23:30:08.354]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:30:08.354]        // -> [isSWJ <= 0x00000001]
[23:30:08.354]      __var hasDormant = __protocol & 0x00020000;
[23:30:08.354]        // -> [hasDormant <= 0x00000000]
[23:30:08.354]      __var protType   = __protocol & 0x0000FFFF;
[23:30:08.354]        // -> [protType <= 0x00000002]
[23:30:08.354]    </block>
[23:30:08.354]    <control if="protType == 1" while="" timeout="0" info="">
[23:30:08.354]      // if-block "protType == 1"
[23:30:08.354]        // =>  FALSE
[23:30:08.354]      // skip if-block "protType == 1"
[23:30:08.354]    </control>
[23:30:08.354]    <control if="protType == 2" while="" timeout="0" info="">
[23:30:08.354]      // if-block "protType == 2"
[23:30:08.354]        // =>  TRUE
[23:30:08.354]      <control if="isSWJ" while="" timeout="0" info="">
[23:30:08.358]        // if-block "isSWJ"
[23:30:08.358]          // =>  TRUE
[23:30:08.358]        <control if="hasDormant" while="" timeout="0" info="">
[23:30:08.358]          // if-block "hasDormant"
[23:30:08.358]            // =>  FALSE
[23:30:08.358]          // skip if-block "hasDormant"
[23:30:08.358]        </control>
[23:30:08.358]        <control if="!hasDormant" while="" timeout="0" info="">
[23:30:08.358]          // if-block "!hasDormant"
[23:30:08.358]            // =>  TRUE
[23:30:08.358]          <block atomic="false" info="">
[23:30:08.358]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:30:08.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:30:08.358]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:30:08.362]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:30:08.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:30:08.362]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:30:08.362]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:30:08.362]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:30:08.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:30:08.366]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:30:08.366]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:30:08.366]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:30:08.366]          </block>
[23:30:08.366]          // end if-block "!hasDormant"
[23:30:08.366]        </control>
[23:30:08.366]        // end if-block "isSWJ"
[23:30:08.366]      </control>
[23:30:08.366]      <control if="!isSWJ" while="" timeout="0" info="">
[23:30:08.366]        // if-block "!isSWJ"
[23:30:08.366]          // =>  FALSE
[23:30:08.366]        // skip if-block "!isSWJ"
[23:30:08.366]      </control>
[23:30:08.366]      <block atomic="false" info="">
[23:30:08.370]        ReadDP(0x0);
[23:30:08.370]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:30:08.370]      </block>
[23:30:08.370]      // end if-block "protType == 2"
[23:30:08.370]    </control>
[23:30:08.370]  </sequence>
[23:30:08.370]  
[23:30:08.374]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:30:08.374]  
[23:30:08.374]  <debugvars>
[23:30:08.374]    // Pre-defined
[23:30:08.374]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:30:08.374]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:30:08.374]    __dp=0x00000000
[23:30:08.374]    __ap=0x00000000
[23:30:08.374]    __traceout=0x00000000      (Trace Disabled)
[23:30:08.374]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:30:08.374]    __FlashAddr=0x00000000
[23:30:08.374]    __FlashLen=0x00000000
[23:30:08.374]    __FlashArg=0x00000000
[23:30:08.374]    __FlashOp=0x00000000
[23:30:08.374]    __Result=0x00000000
[23:30:08.374]  </debugvars>
[23:30:08.374]  
[23:30:08.374]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:30:08.374]    <block atomic="false" info="">
[23:30:08.374]      __var SW_DP_ABORT       = 0x0;
[23:30:08.374]        // -> [SW_DP_ABORT <= 0x00000000]
[23:30:08.374]      __var DP_CTRL_STAT      = 0x4;
[23:30:08.374]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:30:08.374]      __var DP_SELECT         = 0x8;
[23:30:08.374]        // -> [DP_SELECT <= 0x00000008]
[23:30:08.374]      __var powered_down      = 0;
[23:30:08.374]        // -> [powered_down <= 0x00000000]
[23:30:08.374]      WriteDP(DP_SELECT, 0x00000000);
[23:30:08.379]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:30:08.379]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:30:08.379]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:30:08.379]        // -> [powered_down <= 0x00000001]
[23:30:08.379]    </block>
[23:30:08.379]    <control if="powered_down" while="" timeout="0" info="">
[23:30:08.379]      // if-block "powered_down"
[23:30:08.379]        // =>  TRUE
[23:30:08.379]      <block atomic="false" info="">
[23:30:08.379]        Message(0, "Debug/System power-up request sent");
[23:30:08.382]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:30:08.382]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:30:08.382]      </block>
[23:30:08.382]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:30:08.382]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:30:08.382]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:30:08.382]        // while-condition  =>  FALSE
[23:30:08.382]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:30:08.386]      </control>
[23:30:08.386]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:30:08.386]        // if-block "(__protocol & 0xFFFF) == 1"
[23:30:08.386]          // =>  FALSE
[23:30:08.386]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:30:08.386]      </control>
[23:30:08.386]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:30:08.386]        // if-block "(__protocol & 0xFFFF) == 2"
[23:30:08.386]          // =>  TRUE
[23:30:08.386]        <block atomic="false" info="">
[23:30:08.386]          Message(0, "executing SWD power up");
[23:30:08.386]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:30:08.386]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:30:08.390]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:30:08.390]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:30:08.390]        </block>
[23:30:08.390]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:30:08.390]      </control>
[23:30:08.390]      // end if-block "powered_down"
[23:30:08.390]    </control>
[23:30:08.390]    <block atomic="false" info="">
[23:30:08.390]      __var DEBUG_PORT_VAL    = 0;
[23:30:08.390]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:30:08.390]      __var ACCESS_POINT_VAL  = 0;
[23:30:08.390]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:30:08.390]      __ap = 1; 
[23:30:08.390]        // -> [__ap <= 0x00000001]
[23:30:08.390]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:30:08.394]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:30:08.394]      __ap = 4;
[23:30:08.394]        // -> [__ap <= 0x00000004]
[23:30:08.394]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:30:08.398]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:30:08.398]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:30:08.398]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:30:08.402]    </block>
[23:30:08.402]    <block atomic="false" info="">
[23:30:08.402]      __var nReset = 0x80;
[23:30:08.402]        // -> [nReset <= 0x00000080]
[23:30:08.402]      __var canReadPins = 0;
[23:30:08.402]        // -> [canReadPins <= 0x00000000]
[23:30:08.402]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:30:08.402]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:30:08.402]        // -> [canReadPins <= 0x00000001]
[23:30:08.402]    </block>
[23:30:08.402]    <control if="" while="1" timeout="200" info="">
[23:30:08.402]      // while "1"  (timeout="200")
[23:30:08.402]      // while-condition  =>  TRUE
[23:30:08.402]      // while "1"  (timeout="200")
[23:30:08.402]      // while-condition  =>  TRUE
[23:30:08.402]      // while "1"  (timeout="200")
[23:30:08.402]      // while-condition  =>  TRUE
[23:30:08.402]      // while "1"  (timeout="200")
[23:30:08.402]      // while-condition  =>  TRUE
[23:30:08.402]      // while "1"  (timeout="200")
[23:30:08.402]      // while-condition  =>  TRUE
[23:30:08.402]      // while "1"  (timeout="200")
[23:30:08.402]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.406]      // while "1"  (timeout="200")
[23:30:08.406]      // while-condition  =>  TRUE
[23:30:08.410]      // while "1"  (timeout="200")
[23:30:08.410]      // while  =>  TIMEOUT
[23:30:08.410]      // end while "1"
[23:30:08.410]    </control>
[23:30:08.410]    <control if="canReadPins" while="" timeout="0" info="">
[23:30:08.410]      // if-block "canReadPins"
[23:30:08.410]        // =>  TRUE
[23:30:08.410]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:30:08.410]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:30:08.410]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:30:08.410]        // while-condition  =>  FALSE
[23:30:08.410]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:30:08.410]      </control>
[23:30:08.410]      // end if-block "canReadPins"
[23:30:08.410]    </control>
[23:30:08.410]    <control if="!canReadPins" while="" timeout="0" info="">
[23:30:08.410]      // if-block "!canReadPins"
[23:30:08.410]        // =>  FALSE
[23:30:08.410]      // skip if-block "!canReadPins"
[23:30:08.410]    </control>
[23:30:08.410]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:30:08.410]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:30:08.410]        // =>  TRUE
[23:30:08.414]      <block atomic="false" info="">
[23:30:08.414]        WriteAP(0x00, 0x190008);
[23:30:08.414]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:30:08.414]        WriteAP(0xF0, 0x01);
[23:30:08.419]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:30:08.419]      </block>
[23:30:08.419]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:30:08.419]    </control>
[23:30:08.419]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:30:08.419]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:30:08.419]        // =>  FALSE
[23:30:08.419]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:30:08.419]    </control>
[23:30:08.419]    <block atomic="false" info="">
[23:30:08.419]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:30:08.422]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:30:08.422]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:30:08.422]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:30:08.422]      __ap = 0; //lets make sure we reset the access point selection
[23:30:08.422]        // -> [__ap <= 0x00000000]
[23:30:08.422]    </block>
[23:30:08.426]  </sequence>
[23:30:08.426]  
[23:30:08.447]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:30:08.447]  
[23:30:08.447]  <debugvars>
[23:30:08.447]    // Pre-defined
[23:30:08.447]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:30:08.447]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:30:08.447]    __dp=0x00000000
[23:30:08.447]    __ap=0x00000000
[23:30:08.447]    __traceout=0x00000000      (Trace Disabled)
[23:30:08.447]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:30:08.447]    __FlashAddr=0x00000000
[23:30:08.447]    __FlashLen=0x00000000
[23:30:08.447]    __FlashArg=0x00000000
[23:30:08.447]    __FlashOp=0x00000000
[23:30:08.447]    __Result=0x00000000
[23:30:08.447]  </debugvars>
[23:30:08.451]  
[23:30:08.451]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:30:08.451]    <block atomic="false" info="">
[23:30:08.451]      __var deviceID = 0;
[23:30:08.451]        // -> [deviceID <= 0x00000000]
[23:30:08.451]      __var version = 0;
[23:30:08.451]        // -> [version <= 0x00000000]
[23:30:08.451]      __var partNum = 0;
[23:30:08.451]        // -> [partNum <= 0x00000000]
[23:30:08.451]      __var manuf = 0;
[23:30:08.451]        // -> [manuf <= 0x00000000]
[23:30:08.451]      __var isMSPM0G1X0X_G3X0X = 0;
[23:30:08.451]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:30:08.451]      __var isProduction = 0;
[23:30:08.451]        // -> [isProduction <= 0x00000000]
[23:30:08.451]      __var continueId = 0;
[23:30:08.451]        // -> [continueId <= 0x00000000]
[23:30:08.451]      deviceID =   Read32(0x41C40004);
[23:30:08.459]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:30:08.459]        // -> [deviceID <= 0x2BB8802F]
[23:30:08.459]      version = deviceID >> 28;
[23:30:08.459]        // -> [version <= 0x00000002]
[23:30:08.459]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:30:08.459]        // -> [partNum <= 0x0000BB88]
[23:30:08.459]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:30:08.459]        // -> [manuf <= 0x00000017]
[23:30:08.459]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:30:08.459]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:30:08.459]      isProduction = (version > 0);
[23:30:08.459]        // -> [isProduction <= 0x00000001]
[23:30:08.459]    </block>
[23:30:08.459]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:30:08.459]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:30:08.459]        // =>  FALSE
[23:30:08.459]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:30:08.459]    </control>
[23:30:08.459]    <control if="continueId == 4" while="" timeout="0" info="">
[23:30:08.459]      // if-block "continueId == 4"
[23:30:08.459]        // =>  FALSE
[23:30:08.459]      // skip if-block "continueId == 4"
[23:30:08.459]    </control>
[23:30:08.459]    <control if="!isProduction" while="" timeout="0" info="">
[23:30:08.459]      // if-block "!isProduction"
[23:30:08.459]        // =>  FALSE
[23:30:08.459]      // skip if-block "!isProduction"
[23:30:08.459]    </control>
[23:30:08.459]  </sequence>
[23:30:08.459]  
[23:31:22.622]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:31:22.622]  
[23:31:22.630]  <debugvars>
[23:31:22.630]    // Pre-defined
[23:31:22.630]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:31:22.630]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:31:22.630]    __dp=0x00000000
[23:31:22.630]    __ap=0x00000000
[23:31:22.630]    __traceout=0x00000000      (Trace Disabled)
[23:31:22.630]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:31:22.630]    __FlashAddr=0x00000000
[23:31:22.630]    __FlashLen=0x00000000
[23:31:22.630]    __FlashArg=0x00000000
[23:31:22.630]    __FlashOp=0x00000000
[23:31:22.630]    __Result=0x00000000
[23:31:22.630]  </debugvars>
[23:31:22.630]  
[23:31:22.630]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:31:22.630]    <block atomic="false" info="">
[23:31:22.630]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:31:22.632]        // -> [isSWJ <= 0x00000001]
[23:31:22.632]      __var hasDormant = __protocol & 0x00020000;
[23:31:22.632]        // -> [hasDormant <= 0x00000000]
[23:31:22.632]      __var protType   = __protocol & 0x0000FFFF;
[23:31:22.632]        // -> [protType <= 0x00000002]
[23:31:22.632]    </block>
[23:31:22.632]    <control if="protType == 1" while="" timeout="0" info="">
[23:31:22.632]      // if-block "protType == 1"
[23:31:22.632]        // =>  FALSE
[23:31:22.632]      // skip if-block "protType == 1"
[23:31:22.633]    </control>
[23:31:22.633]    <control if="protType == 2" while="" timeout="0" info="">
[23:31:22.633]      // if-block "protType == 2"
[23:31:22.633]        // =>  TRUE
[23:31:22.633]      <control if="isSWJ" while="" timeout="0" info="">
[23:31:22.633]        // if-block "isSWJ"
[23:31:22.633]          // =>  TRUE
[23:31:22.633]        <control if="hasDormant" while="" timeout="0" info="">
[23:31:22.633]          // if-block "hasDormant"
[23:31:22.633]            // =>  FALSE
[23:31:22.633]          // skip if-block "hasDormant"
[23:31:22.634]        </control>
[23:31:22.634]        <control if="!hasDormant" while="" timeout="0" info="">
[23:31:22.634]          // if-block "!hasDormant"
[23:31:22.634]            // =>  TRUE
[23:31:22.634]          <block atomic="false" info="">
[23:31:22.634]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:31:22.636]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:31:22.636]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:31:22.638]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:31:22.638]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:31:22.639]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:31:22.639]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:31:22.640]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:31:22.640]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:31:22.642]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:31:22.642]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:31:22.643]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:31:22.643]          </block>
[23:31:22.643]          // end if-block "!hasDormant"
[23:31:22.643]        </control>
[23:31:22.643]        // end if-block "isSWJ"
[23:31:22.643]      </control>
[23:31:22.643]      <control if="!isSWJ" while="" timeout="0" info="">
[23:31:22.643]        // if-block "!isSWJ"
[23:31:22.643]          // =>  FALSE
[23:31:22.643]        // skip if-block "!isSWJ"
[23:31:22.643]      </control>
[23:31:22.645]      <block atomic="false" info="">
[23:31:22.645]        ReadDP(0x0);
[23:31:22.646]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:31:22.646]      </block>
[23:31:22.646]      // end if-block "protType == 2"
[23:31:22.646]    </control>
[23:31:22.646]  </sequence>
[23:31:22.646]  
[23:31:22.650]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:31:22.650]  
[23:31:22.650]  <debugvars>
[23:31:22.650]    // Pre-defined
[23:31:22.650]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:31:22.650]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:31:22.650]    __dp=0x00000000
[23:31:22.650]    __ap=0x00000000
[23:31:22.650]    __traceout=0x00000000      (Trace Disabled)
[23:31:22.651]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:31:22.651]    __FlashAddr=0x00000000
[23:31:22.651]    __FlashLen=0x00000000
[23:31:22.651]    __FlashArg=0x00000000
[23:31:22.651]    __FlashOp=0x00000000
[23:31:22.651]    __Result=0x00000000
[23:31:22.651]  </debugvars>
[23:31:22.651]  
[23:31:22.651]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:31:22.651]    <block atomic="false" info="">
[23:31:22.651]      __var SW_DP_ABORT       = 0x0;
[23:31:22.651]        // -> [SW_DP_ABORT <= 0x00000000]
[23:31:22.652]      __var DP_CTRL_STAT      = 0x4;
[23:31:22.652]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:31:22.652]      __var DP_SELECT         = 0x8;
[23:31:22.652]        // -> [DP_SELECT <= 0x00000008]
[23:31:22.652]      __var powered_down      = 0;
[23:31:22.652]        // -> [powered_down <= 0x00000000]
[23:31:22.652]      WriteDP(DP_SELECT, 0x00000000);
[23:31:22.654]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:31:22.654]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:31:22.656]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:31:22.656]        // -> [powered_down <= 0x00000001]
[23:31:22.656]    </block>
[23:31:22.656]    <control if="powered_down" while="" timeout="0" info="">
[23:31:22.656]      // if-block "powered_down"
[23:31:22.656]        // =>  TRUE
[23:31:22.656]      <block atomic="false" info="">
[23:31:22.656]        Message(0, "Debug/System power-up request sent");
[23:31:22.659]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:31:22.661]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:31:22.661]      </block>
[23:31:22.661]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:31:22.661]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:31:22.667]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:31:22.667]        // while-condition  =>  FALSE
[23:31:22.668]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:31:22.668]      </control>
[23:31:22.668]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:31:22.668]        // if-block "(__protocol & 0xFFFF) == 1"
[23:31:22.668]          // =>  FALSE
[23:31:22.668]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:31:22.668]      </control>
[23:31:22.668]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:31:22.668]        // if-block "(__protocol & 0xFFFF) == 2"
[23:31:22.668]          // =>  TRUE
[23:31:22.668]        <block atomic="false" info="">
[23:31:22.668]          Message(0, "executing SWD power up");
[23:31:22.670]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:31:22.670]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:31:22.670]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:31:22.674]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:31:22.674]        </block>
[23:31:22.674]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:31:22.674]      </control>
[23:31:22.674]      // end if-block "powered_down"
[23:31:22.674]    </control>
[23:31:22.674]    <block atomic="false" info="">
[23:31:22.674]      __var DEBUG_PORT_VAL    = 0;
[23:31:22.675]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:31:22.675]      __var ACCESS_POINT_VAL  = 0;
[23:31:22.675]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:31:22.675]      __ap = 1; 
[23:31:22.675]        // -> [__ap <= 0x00000001]
[23:31:22.675]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:31:22.681]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:31:22.683]      __ap = 4;
[23:31:22.683]        // -> [__ap <= 0x00000004]
[23:31:22.683]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:31:22.684]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:31:22.684]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:31:22.684]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:31:22.687]    </block>
[23:31:22.687]    <block atomic="false" info="">
[23:31:22.687]      __var nReset = 0x80;
[23:31:22.687]        // -> [nReset <= 0x00000080]
[23:31:22.687]      __var canReadPins = 0;
[23:31:22.687]        // -> [canReadPins <= 0x00000000]
[23:31:22.687]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:31:22.692]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:31:22.692]        // -> [canReadPins <= 0x00000001]
[23:31:22.692]    </block>
[23:31:22.692]    <control if="" while="1" timeout="200" info="">
[23:31:22.692]      // while "1"  (timeout="200")
[23:31:22.692]      // while-condition  =>  TRUE
[23:31:22.692]      // while "1"  (timeout="200")
[23:31:22.692]      // while-condition  =>  TRUE
[23:31:22.692]      // while "1"  (timeout="200")
[23:31:22.692]      // while-condition  =>  TRUE
[23:31:22.692]      // while "1"  (timeout="200")
[23:31:22.692]      // while-condition  =>  TRUE
[23:31:22.692]      // while "1"  (timeout="200")
[23:31:22.692]      // while-condition  =>  TRUE
[23:31:22.692]      // while "1"  (timeout="200")
[23:31:22.692]      // while-condition  =>  TRUE
[23:31:22.692]      // while "1"  (timeout="200")
[23:31:22.692]      // while-condition  =>  TRUE
[23:31:22.694]      // while "1"  (timeout="200")
[23:31:22.694]      // while-condition  =>  TRUE
[23:31:22.694]      // while "1"  (timeout="200")
[23:31:22.694]      // while-condition  =>  TRUE
[23:31:22.694]      // while "1"  (timeout="200")
[23:31:22.694]      // while-condition  =>  TRUE
[23:31:22.694]      // while "1"  (timeout="200")
[23:31:22.694]      // while-condition  =>  TRUE
[23:31:22.694]      // while "1"  (timeout="200")
[23:31:22.694]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.695]      // while "1"  (timeout="200")
[23:31:22.695]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.699]      // while-condition  =>  TRUE
[23:31:22.699]      // while "1"  (timeout="200")
[23:31:22.703]      // while-condition  =>  TRUE
[23:31:22.703]      // while "1"  (timeout="200")
[23:31:22.703]      // while-condition  =>  TRUE
[23:31:22.703]      // while "1"  (timeout="200")
[23:31:22.703]      // while-condition  =>  TRUE
[23:31:22.703]      // while "1"  (timeout="200")
[23:31:22.703]      // while-condition  =>  TRUE
[23:31:22.703]      // while "1"  (timeout="200")
[23:31:22.703]      // while-condition  =>  TRUE
[23:31:22.703]      // while "1"  (timeout="200")
[23:31:22.703]      // while-condition  =>  TRUE
[23:31:22.704]      // while "1"  (timeout="200")
[23:31:22.704]      // while-condition  =>  TRUE
[23:31:22.704]      // while "1"  (timeout="200")
[23:31:22.704]      // while-condition  =>  TRUE
[23:31:22.704]      // while "1"  (timeout="200")
[23:31:22.704]      // while-condition  =>  TRUE
[23:31:22.704]      // while "1"  (timeout="200")
[23:31:22.704]      // while-condition  =>  TRUE
[23:31:22.704]      // while "1"  (timeout="200")
[23:31:22.704]      // while-condition  =>  TRUE
[23:31:22.704]      // while "1"  (timeout="200")
[23:31:22.704]      // while-condition  =>  TRUE
[23:31:22.704]      // while "1"  (timeout="200")
[23:31:22.704]      // while-condition  =>  TRUE
[23:31:22.704]      // while "1"  (timeout="200")
[23:31:22.704]      // while-condition  =>  TRUE
[23:31:22.706]      // while "1"  (timeout="200")
[23:31:22.706]      // while  =>  TIMEOUT
[23:31:22.706]      // end while "1"
[23:31:22.706]    </control>
[23:31:22.706]    <control if="canReadPins" while="" timeout="0" info="">
[23:31:22.706]      // if-block "canReadPins"
[23:31:22.706]        // =>  TRUE
[23:31:22.706]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:31:22.706]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:31:22.708]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:31:22.708]        // while-condition  =>  FALSE
[23:31:22.708]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:31:22.708]      </control>
[23:31:22.708]      // end if-block "canReadPins"
[23:31:22.708]    </control>
[23:31:22.708]    <control if="!canReadPins" while="" timeout="0" info="">
[23:31:22.708]      // if-block "!canReadPins"
[23:31:22.708]        // =>  FALSE
[23:31:22.708]      // skip if-block "!canReadPins"
[23:31:22.708]    </control>
[23:31:22.708]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:31:22.708]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:31:22.708]        // =>  TRUE
[23:31:22.708]      <block atomic="false" info="">
[23:31:22.708]        WriteAP(0x00, 0x190008);
[23:31:22.711]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:31:22.711]        WriteAP(0xF0, 0x01);
[23:31:22.714]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:31:22.714]      </block>
[23:31:22.714]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:31:22.715]    </control>
[23:31:22.715]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:31:22.715]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:31:22.715]        // =>  FALSE
[23:31:22.715]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:31:22.715]    </control>
[23:31:22.715]    <block atomic="false" info="">
[23:31:22.715]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:31:22.716]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:31:22.716]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:31:22.719]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:31:22.720]      __ap = 0; //lets make sure we reset the access point selection
[23:31:22.720]        // -> [__ap <= 0x00000000]
[23:31:22.720]    </block>
[23:31:22.720]  </sequence>
[23:31:22.720]  
[23:31:22.739]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:31:22.739]  
[23:31:22.739]  <debugvars>
[23:31:22.739]    // Pre-defined
[23:31:22.739]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:31:22.739]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:31:22.739]    __dp=0x00000000
[23:31:22.739]    __ap=0x00000000
[23:31:22.739]    __traceout=0x00000000      (Trace Disabled)
[23:31:22.739]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:31:22.739]    __FlashAddr=0x00000000
[23:31:22.739]    __FlashLen=0x00000000
[23:31:22.739]    __FlashArg=0x00000000
[23:31:22.739]    __FlashOp=0x00000000
[23:31:22.739]    __Result=0x00000000
[23:31:22.739]  </debugvars>
[23:31:22.739]  
[23:31:22.739]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:31:22.744]    <block atomic="false" info="">
[23:31:22.744]      __var deviceID = 0;
[23:31:22.744]        // -> [deviceID <= 0x00000000]
[23:31:22.744]      __var version = 0;
[23:31:22.744]        // -> [version <= 0x00000000]
[23:31:22.744]      __var partNum = 0;
[23:31:22.744]        // -> [partNum <= 0x00000000]
[23:31:22.744]      __var manuf = 0;
[23:31:22.744]        // -> [manuf <= 0x00000000]
[23:31:22.744]      __var isMSPM0G1X0X_G3X0X = 0;
[23:31:22.744]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:31:22.744]      __var isProduction = 0;
[23:31:22.744]        // -> [isProduction <= 0x00000000]
[23:31:22.744]      __var continueId = 0;
[23:31:22.744]        // -> [continueId <= 0x00000000]
[23:31:22.744]      deviceID =   Read32(0x41C40004);
[23:31:22.750]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:31:22.750]        // -> [deviceID <= 0x2BB8802F]
[23:31:22.750]      version = deviceID >> 28;
[23:31:22.750]        // -> [version <= 0x00000002]
[23:31:22.750]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:31:22.750]        // -> [partNum <= 0x0000BB88]
[23:31:22.750]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:31:22.750]        // -> [manuf <= 0x00000017]
[23:31:22.750]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:31:22.750]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:31:22.752]      isProduction = (version > 0);
[23:31:22.752]        // -> [isProduction <= 0x00000001]
[23:31:22.752]    </block>
[23:31:22.752]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:31:22.752]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:31:22.752]        // =>  FALSE
[23:31:22.752]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:31:22.752]    </control>
[23:31:22.752]    <control if="continueId == 4" while="" timeout="0" info="">
[23:31:22.753]      // if-block "continueId == 4"
[23:31:22.753]        // =>  FALSE
[23:31:22.753]      // skip if-block "continueId == 4"
[23:31:22.753]    </control>
[23:31:22.753]    <control if="!isProduction" while="" timeout="0" info="">
[23:31:22.753]      // if-block "!isProduction"
[23:31:22.753]        // =>  FALSE
[23:31:22.753]      // skip if-block "!isProduction"
[23:31:22.753]    </control>
[23:31:22.753]  </sequence>
[23:31:22.753]  
[23:31:28.080]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:31:28.080]  
[23:31:28.089]  <debugvars>
[23:31:28.089]    // Pre-defined
[23:31:28.089]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:31:28.089]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:31:28.089]    __dp=0x00000000
[23:31:28.089]    __ap=0x00000000
[23:31:28.089]    __traceout=0x00000000      (Trace Disabled)
[23:31:28.089]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:31:28.089]    __FlashAddr=0x00000000
[23:31:28.089]    __FlashLen=0x00000000
[23:31:28.089]    __FlashArg=0x00000000
[23:31:28.089]    __FlashOp=0x00000000
[23:31:28.090]    __Result=0x00000000
[23:31:28.090]  </debugvars>
[23:31:28.090]  
[23:31:28.090]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:31:28.090]    <block atomic="false" info="">
[23:31:28.090]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:31:28.090]        // -> [isSWJ <= 0x00000001]
[23:31:28.090]      __var hasDormant = __protocol & 0x00020000;
[23:31:28.090]        // -> [hasDormant <= 0x00000000]
[23:31:28.090]      __var protType   = __protocol & 0x0000FFFF;
[23:31:28.090]        // -> [protType <= 0x00000002]
[23:31:28.090]    </block>
[23:31:28.090]    <control if="protType == 1" while="" timeout="0" info="">
[23:31:28.090]      // if-block "protType == 1"
[23:31:28.090]        // =>  FALSE
[23:31:28.090]      // skip if-block "protType == 1"
[23:31:28.090]    </control>
[23:31:28.090]    <control if="protType == 2" while="" timeout="0" info="">
[23:31:28.090]      // if-block "protType == 2"
[23:31:28.090]        // =>  TRUE
[23:31:28.090]      <control if="isSWJ" while="" timeout="0" info="">
[23:31:28.090]        // if-block "isSWJ"
[23:31:28.090]          // =>  TRUE
[23:31:28.090]        <control if="hasDormant" while="" timeout="0" info="">
[23:31:28.090]          // if-block "hasDormant"
[23:31:28.092]            // =>  FALSE
[23:31:28.092]          // skip if-block "hasDormant"
[23:31:28.092]        </control>
[23:31:28.092]        <control if="!hasDormant" while="" timeout="0" info="">
[23:31:28.092]          // if-block "!hasDormant"
[23:31:28.092]            // =>  TRUE
[23:31:28.092]          <block atomic="false" info="">
[23:31:28.092]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:31:28.094]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:31:28.094]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:31:28.094]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:31:28.094]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:31:28.098]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:31:28.098]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:31:28.098]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:31:28.098]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:31:28.098]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:31:28.098]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:31:28.102]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:31:28.102]          </block>
[23:31:28.102]          // end if-block "!hasDormant"
[23:31:28.102]        </control>
[23:31:28.102]        // end if-block "isSWJ"
[23:31:28.102]      </control>
[23:31:28.103]      <control if="!isSWJ" while="" timeout="0" info="">
[23:31:28.103]        // if-block "!isSWJ"
[23:31:28.103]          // =>  FALSE
[23:31:28.104]        // skip if-block "!isSWJ"
[23:31:28.104]      </control>
[23:31:28.104]      <block atomic="false" info="">
[23:31:28.104]        ReadDP(0x0);
[23:31:28.105]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:31:28.105]      </block>
[23:31:28.105]      // end if-block "protType == 2"
[23:31:28.105]    </control>
[23:31:28.105]  </sequence>
[23:31:28.105]  
[23:31:28.108]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:31:28.108]  
[23:31:28.108]  <debugvars>
[23:31:28.108]    // Pre-defined
[23:31:28.108]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:31:28.108]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:31:28.108]    __dp=0x00000000
[23:31:28.108]    __ap=0x00000000
[23:31:28.108]    __traceout=0x00000000      (Trace Disabled)
[23:31:28.108]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:31:28.108]    __FlashAddr=0x00000000
[23:31:28.108]    __FlashLen=0x00000000
[23:31:28.108]    __FlashArg=0x00000000
[23:31:28.108]    __FlashOp=0x00000000
[23:31:28.108]    __Result=0x00000000
[23:31:28.108]  </debugvars>
[23:31:28.108]  
[23:31:28.108]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:31:28.108]    <block atomic="false" info="">
[23:31:28.108]      __var SW_DP_ABORT       = 0x0;
[23:31:28.108]        // -> [SW_DP_ABORT <= 0x00000000]
[23:31:28.108]      __var DP_CTRL_STAT      = 0x4;
[23:31:28.108]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:31:28.108]      __var DP_SELECT         = 0x8;
[23:31:28.108]        // -> [DP_SELECT <= 0x00000008]
[23:31:28.110]      __var powered_down      = 0;
[23:31:28.110]        // -> [powered_down <= 0x00000000]
[23:31:28.110]      WriteDP(DP_SELECT, 0x00000000);
[23:31:28.112]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:31:28.112]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:31:28.114]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:31:28.114]        // -> [powered_down <= 0x00000001]
[23:31:28.114]    </block>
[23:31:28.114]    <control if="powered_down" while="" timeout="0" info="">
[23:31:28.114]      // if-block "powered_down"
[23:31:28.114]        // =>  TRUE
[23:31:28.114]      <block atomic="false" info="">
[23:31:28.114]        Message(0, "Debug/System power-up request sent");
[23:31:28.117]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:31:28.118]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:31:28.118]      </block>
[23:31:28.118]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:31:28.118]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:31:28.118]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:31:28.118]        // while-condition  =>  FALSE
[23:31:28.118]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:31:28.118]      </control>
[23:31:28.118]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:31:28.118]        // if-block "(__protocol & 0xFFFF) == 1"
[23:31:28.118]          // =>  FALSE
[23:31:28.118]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:31:28.118]      </control>
[23:31:28.122]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:31:28.122]        // if-block "(__protocol & 0xFFFF) == 2"
[23:31:28.122]          // =>  TRUE
[23:31:28.122]        <block atomic="false" info="">
[23:31:28.122]          Message(0, "executing SWD power up");
[23:31:28.123]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:31:28.126]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:31:28.126]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:31:28.128]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:31:28.128]        </block>
[23:31:28.128]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:31:28.128]      </control>
[23:31:28.128]      // end if-block "powered_down"
[23:31:28.128]    </control>
[23:31:28.128]    <block atomic="false" info="">
[23:31:28.128]      __var DEBUG_PORT_VAL    = 0;
[23:31:28.128]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:31:28.129]      __var ACCESS_POINT_VAL  = 0;
[23:31:28.129]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:31:28.129]      __ap = 1; 
[23:31:28.129]        // -> [__ap <= 0x00000001]
[23:31:28.129]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:31:28.132]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:31:28.132]      __ap = 4;
[23:31:28.132]        // -> [__ap <= 0x00000004]
[23:31:28.132]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:31:28.136]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:31:28.136]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:31:28.136]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:31:28.137]    </block>
[23:31:28.137]    <block atomic="false" info="">
[23:31:28.137]      __var nReset = 0x80;
[23:31:28.137]        // -> [nReset <= 0x00000080]
[23:31:28.137]      __var canReadPins = 0;
[23:31:28.137]        // -> [canReadPins <= 0x00000000]
[23:31:28.137]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:31:28.139]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:31:28.139]        // -> [canReadPins <= 0x00000001]
[23:31:28.139]    </block>
[23:31:28.139]    <control if="" while="1" timeout="200" info="">
[23:31:28.139]      // while "1"  (timeout="200")
[23:31:28.139]      // while-condition  =>  TRUE
[23:31:28.139]      // while "1"  (timeout="200")
[23:31:28.139]      // while-condition  =>  TRUE
[23:31:28.139]      // while "1"  (timeout="200")
[23:31:28.139]      // while-condition  =>  TRUE
[23:31:28.139]      // while "1"  (timeout="200")
[23:31:28.139]      // while-condition  =>  TRUE
[23:31:28.139]      // while "1"  (timeout="200")
[23:31:28.139]      // while-condition  =>  TRUE
[23:31:28.139]      // while "1"  (timeout="200")
[23:31:28.139]      // while-condition  =>  TRUE
[23:31:28.139]      // while "1"  (timeout="200")
[23:31:28.139]      // while-condition  =>  TRUE
[23:31:28.139]      // while "1"  (timeout="200")
[23:31:28.139]      // while-condition  =>  TRUE
[23:31:28.139]      // while "1"  (timeout="200")
[23:31:28.142]      // while-condition  =>  TRUE
[23:31:28.142]      // while "1"  (timeout="200")
[23:31:28.142]      // while-condition  =>  TRUE
[23:31:28.142]      // while "1"  (timeout="200")
[23:31:28.142]      // while-condition  =>  TRUE
[23:31:28.142]      // while "1"  (timeout="200")
[23:31:28.142]      // while-condition  =>  TRUE
[23:31:28.142]      // while "1"  (timeout="200")
[23:31:28.142]      // while-condition  =>  TRUE
[23:31:28.142]      // while "1"  (timeout="200")
[23:31:28.142]      // while-condition  =>  TRUE
[23:31:28.142]      // while "1"  (timeout="200")
[23:31:28.142]      // while-condition  =>  TRUE
[23:31:28.143]      // while "1"  (timeout="200")
[23:31:28.143]      // while  =>  TIMEOUT
[23:31:28.143]      // end while "1"
[23:31:28.143]    </control>
[23:31:28.143]    <control if="canReadPins" while="" timeout="0" info="">
[23:31:28.143]      // if-block "canReadPins"
[23:31:28.143]        // =>  TRUE
[23:31:28.143]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:31:28.143]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:31:28.144]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:31:28.145]        // while-condition  =>  FALSE
[23:31:28.145]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:31:28.145]      </control>
[23:31:28.145]      // end if-block "canReadPins"
[23:31:28.145]    </control>
[23:31:28.145]    <control if="!canReadPins" while="" timeout="0" info="">
[23:31:28.145]      // if-block "!canReadPins"
[23:31:28.145]        // =>  FALSE
[23:31:28.145]      // skip if-block "!canReadPins"
[23:31:28.145]    </control>
[23:31:28.145]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:31:28.145]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:31:28.145]        // =>  TRUE
[23:31:28.145]      <block atomic="false" info="">
[23:31:28.145]        WriteAP(0x00, 0x190008);
[23:31:28.147]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:31:28.149]        WriteAP(0xF0, 0x01);
[23:31:28.151]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:31:28.151]      </block>
[23:31:28.151]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:31:28.151]    </control>
[23:31:28.151]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:31:28.151]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:31:28.151]        // =>  FALSE
[23:31:28.151]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:31:28.151]    </control>
[23:31:28.151]    <block atomic="false" info="">
[23:31:28.151]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:31:28.155]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:31:28.155]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:31:28.155]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:31:28.157]      __ap = 0; //lets make sure we reset the access point selection
[23:31:28.157]        // -> [__ap <= 0x00000000]
[23:31:28.157]    </block>
[23:31:28.157]  </sequence>
[23:31:28.157]  
[23:31:28.178]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:31:28.178]  
[23:31:28.178]  <debugvars>
[23:31:28.178]    // Pre-defined
[23:31:28.178]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:31:28.178]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:31:28.178]    __dp=0x00000000
[23:31:28.178]    __ap=0x00000000
[23:31:28.178]    __traceout=0x00000000      (Trace Disabled)
[23:31:28.178]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:31:28.180]    __FlashAddr=0x00000000
[23:31:28.180]    __FlashLen=0x00000000
[23:31:28.180]    __FlashArg=0x00000000
[23:31:28.180]    __FlashOp=0x00000000
[23:31:28.180]    __Result=0x00000000
[23:31:28.180]  </debugvars>
[23:31:28.180]  
[23:31:28.180]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:31:28.180]    <block atomic="false" info="">
[23:31:28.180]      __var deviceID = 0;
[23:31:28.180]        // -> [deviceID <= 0x00000000]
[23:31:28.180]      __var version = 0;
[23:31:28.180]        // -> [version <= 0x00000000]
[23:31:28.180]      __var partNum = 0;
[23:31:28.180]        // -> [partNum <= 0x00000000]
[23:31:28.180]      __var manuf = 0;
[23:31:28.180]        // -> [manuf <= 0x00000000]
[23:31:28.180]      __var isMSPM0G1X0X_G3X0X = 0;
[23:31:28.180]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:31:28.180]      __var isProduction = 0;
[23:31:28.180]        // -> [isProduction <= 0x00000000]
[23:31:28.180]      __var continueId = 0;
[23:31:28.182]        // -> [continueId <= 0x00000000]
[23:31:28.182]      deviceID =   Read32(0x41C40004);
[23:31:28.186]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:31:28.186]        // -> [deviceID <= 0x2BB8802F]
[23:31:28.186]      version = deviceID >> 28;
[23:31:28.186]        // -> [version <= 0x00000002]
[23:31:28.186]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:31:28.186]        // -> [partNum <= 0x0000BB88]
[23:31:28.187]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:31:28.187]        // -> [manuf <= 0x00000017]
[23:31:28.187]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:31:28.188]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:31:28.188]      isProduction = (version > 0);
[23:31:28.188]        // -> [isProduction <= 0x00000001]
[23:31:28.188]    </block>
[23:31:28.188]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:31:28.188]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:31:28.188]        // =>  FALSE
[23:31:28.188]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:31:28.188]    </control>
[23:31:28.189]    <control if="continueId == 4" while="" timeout="0" info="">
[23:31:28.189]      // if-block "continueId == 4"
[23:31:28.189]        // =>  FALSE
[23:31:28.189]      // skip if-block "continueId == 4"
[23:31:28.189]    </control>
[23:31:28.189]    <control if="!isProduction" while="" timeout="0" info="">
[23:31:28.189]      // if-block "!isProduction"
[23:31:28.189]        // =>  FALSE
[23:31:28.189]      // skip if-block "!isProduction"
[23:31:28.189]    </control>
[23:31:28.189]  </sequence>
[23:31:28.189]  
[23:35:01.346]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:35:01.346]  
[23:35:01.355]  <debugvars>
[23:35:01.355]    // Pre-defined
[23:35:01.355]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:35:01.355]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:35:01.355]    __dp=0x00000000
[23:35:01.355]    __ap=0x00000000
[23:35:01.355]    __traceout=0x00000000      (Trace Disabled)
[23:35:01.355]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:35:01.355]    __FlashAddr=0x00000000
[23:35:01.355]    __FlashLen=0x00000000
[23:35:01.355]    __FlashArg=0x00000000
[23:35:01.355]    __FlashOp=0x00000000
[23:35:01.356]    __Result=0x00000000
[23:35:01.356]  </debugvars>
[23:35:01.356]  
[23:35:01.356]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:35:01.356]    <block atomic="false" info="">
[23:35:01.356]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:35:01.356]        // -> [isSWJ <= 0x00000001]
[23:35:01.356]      __var hasDormant = __protocol & 0x00020000;
[23:35:01.356]        // -> [hasDormant <= 0x00000000]
[23:35:01.356]      __var protType   = __protocol & 0x0000FFFF;
[23:35:01.356]        // -> [protType <= 0x00000002]
[23:35:01.356]    </block>
[23:35:01.357]    <control if="protType == 1" while="" timeout="0" info="">
[23:35:01.357]      // if-block "protType == 1"
[23:35:01.357]        // =>  FALSE
[23:35:01.357]      // skip if-block "protType == 1"
[23:35:01.357]    </control>
[23:35:01.357]    <control if="protType == 2" while="" timeout="0" info="">
[23:35:01.357]      // if-block "protType == 2"
[23:35:01.357]        // =>  TRUE
[23:35:01.357]      <control if="isSWJ" while="" timeout="0" info="">
[23:35:01.357]        // if-block "isSWJ"
[23:35:01.358]          // =>  TRUE
[23:35:01.358]        <control if="hasDormant" while="" timeout="0" info="">
[23:35:01.358]          // if-block "hasDormant"
[23:35:01.358]            // =>  FALSE
[23:35:01.358]          // skip if-block "hasDormant"
[23:35:01.358]        </control>
[23:35:01.358]        <control if="!hasDormant" while="" timeout="0" info="">
[23:35:01.358]          // if-block "!hasDormant"
[23:35:01.358]            // =>  TRUE
[23:35:01.358]          <block atomic="false" info="">
[23:35:01.358]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:35:01.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:35:01.361]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:35:01.363]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:35:01.363]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:35:01.366]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:35:01.366]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:35:01.367]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:35:01.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:35:01.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:35:01.369]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:35:01.370]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:35:01.370]          </block>
[23:35:01.370]          // end if-block "!hasDormant"
[23:35:01.370]        </control>
[23:35:01.370]        // end if-block "isSWJ"
[23:35:01.370]      </control>
[23:35:01.370]      <control if="!isSWJ" while="" timeout="0" info="">
[23:35:01.371]        // if-block "!isSWJ"
[23:35:01.371]          // =>  FALSE
[23:35:01.371]        // skip if-block "!isSWJ"
[23:35:01.371]      </control>
[23:35:01.371]      <block atomic="false" info="">
[23:35:01.371]        ReadDP(0x0);
[23:35:01.372]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:35:01.372]      </block>
[23:35:01.372]      // end if-block "protType == 2"
[23:35:01.372]    </control>
[23:35:01.372]  </sequence>
[23:35:01.372]  
[23:35:01.375]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:35:01.375]  
[23:35:01.375]  <debugvars>
[23:35:01.375]    // Pre-defined
[23:35:01.375]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:35:01.375]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:35:01.375]    __dp=0x00000000
[23:35:01.375]    __ap=0x00000000
[23:35:01.375]    __traceout=0x00000000      (Trace Disabled)
[23:35:01.375]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:35:01.375]    __FlashAddr=0x00000000
[23:35:01.375]    __FlashLen=0x00000000
[23:35:01.375]    __FlashArg=0x00000000
[23:35:01.375]    __FlashOp=0x00000000
[23:35:01.375]    __Result=0x00000000
[23:35:01.375]  </debugvars>
[23:35:01.375]  
[23:35:01.375]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:35:01.375]    <block atomic="false" info="">
[23:35:01.375]      __var SW_DP_ABORT       = 0x0;
[23:35:01.375]        // -> [SW_DP_ABORT <= 0x00000000]
[23:35:01.375]      __var DP_CTRL_STAT      = 0x4;
[23:35:01.375]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:35:01.375]      __var DP_SELECT         = 0x8;
[23:35:01.375]        // -> [DP_SELECT <= 0x00000008]
[23:35:01.375]      __var powered_down      = 0;
[23:35:01.379]        // -> [powered_down <= 0x00000000]
[23:35:01.379]      WriteDP(DP_SELECT, 0x00000000);
[23:35:01.380]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:35:01.380]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:35:01.381]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:35:01.381]        // -> [powered_down <= 0x00000001]
[23:35:01.381]    </block>
[23:35:01.381]    <control if="powered_down" while="" timeout="0" info="">
[23:35:01.381]      // if-block "powered_down"
[23:35:01.381]        // =>  TRUE
[23:35:01.381]      <block atomic="false" info="">
[23:35:01.381]        Message(0, "Debug/System power-up request sent");
[23:35:01.381]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:35:01.384]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:35:01.384]      </block>
[23:35:01.384]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:35:01.384]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:35:01.384]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:35:01.384]        // while-condition  =>  FALSE
[23:35:01.384]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:35:01.384]      </control>
[23:35:01.384]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:35:01.384]        // if-block "(__protocol & 0xFFFF) == 1"
[23:35:01.384]          // =>  FALSE
[23:35:01.384]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:35:01.388]      </control>
[23:35:01.388]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:35:01.388]        // if-block "(__protocol & 0xFFFF) == 2"
[23:35:01.388]          // =>  TRUE
[23:35:01.388]        <block atomic="false" info="">
[23:35:01.388]          Message(0, "executing SWD power up");
[23:35:01.389]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:35:01.391]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:35:01.391]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:35:01.394]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:35:01.394]        </block>
[23:35:01.394]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:35:01.394]      </control>
[23:35:01.394]      // end if-block "powered_down"
[23:35:01.394]    </control>
[23:35:01.394]    <block atomic="false" info="">
[23:35:01.394]      __var DEBUG_PORT_VAL    = 0;
[23:35:01.394]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:35:01.394]      __var ACCESS_POINT_VAL  = 0;
[23:35:01.394]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:35:01.394]      __ap = 1; 
[23:35:01.395]        // -> [__ap <= 0x00000001]
[23:35:01.395]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:35:01.401]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:35:01.401]      __ap = 4;
[23:35:01.401]        // -> [__ap <= 0x00000004]
[23:35:01.401]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:35:01.406]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:35:01.406]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:35:01.406]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:35:01.409]    </block>
[23:35:01.409]    <block atomic="false" info="">
[23:35:01.409]      __var nReset = 0x80;
[23:35:01.409]        // -> [nReset <= 0x00000080]
[23:35:01.409]      __var canReadPins = 0;
[23:35:01.409]        // -> [canReadPins <= 0x00000000]
[23:35:01.409]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:35:01.410]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:35:01.410]        // -> [canReadPins <= 0x00000001]
[23:35:01.410]    </block>
[23:35:01.410]    <control if="" while="1" timeout="200" info="">
[23:35:01.410]      // while "1"  (timeout="200")
[23:35:01.410]      // while-condition  =>  TRUE
[23:35:01.410]      // while "1"  (timeout="200")
[23:35:01.410]      // while-condition  =>  TRUE
[23:35:01.410]      // while "1"  (timeout="200")
[23:35:01.410]      // while-condition  =>  TRUE
[23:35:01.410]      // while "1"  (timeout="200")
[23:35:01.410]      // while-condition  =>  TRUE
[23:35:01.410]      // while "1"  (timeout="200")
[23:35:01.410]      // while-condition  =>  TRUE
[23:35:01.413]      // while "1"  (timeout="200")
[23:35:01.413]      // while-condition  =>  TRUE
[23:35:01.413]      // while "1"  (timeout="200")
[23:35:01.413]      // while-condition  =>  TRUE
[23:35:01.413]      // while "1"  (timeout="200")
[23:35:01.413]      // while-condition  =>  TRUE
[23:35:01.413]      // while "1"  (timeout="200")
[23:35:01.413]      // while-condition  =>  TRUE
[23:35:01.413]      // while "1"  (timeout="200")
[23:35:01.413]      // while-condition  =>  TRUE
[23:35:01.413]      // while "1"  (timeout="200")
[23:35:01.413]      // while-condition  =>  TRUE
[23:35:01.413]      // while "1"  (timeout="200")
[23:35:01.413]      // while-condition  =>  TRUE
[23:35:01.413]      // while "1"  (timeout="200")
[23:35:01.413]      // while-condition  =>  TRUE
[23:35:01.414]      // while "1"  (timeout="200")
[23:35:01.414]      // while-condition  =>  TRUE
[23:35:01.414]      // while "1"  (timeout="200")
[23:35:01.414]      // while-condition  =>  TRUE
[23:35:01.414]      // while "1"  (timeout="200")
[23:35:01.414]      // while-condition  =>  TRUE
[23:35:01.414]      // while "1"  (timeout="200")
[23:35:01.414]      // while-condition  =>  TRUE
[23:35:01.414]      // while "1"  (timeout="200")
[23:35:01.414]      // while-condition  =>  TRUE
[23:35:01.414]      // while "1"  (timeout="200")
[23:35:01.414]      // while-condition  =>  TRUE
[23:35:01.415]      // while "1"  (timeout="200")
[23:35:01.415]      // while-condition  =>  TRUE
[23:35:01.415]      // while "1"  (timeout="200")
[23:35:01.415]      // while-condition  =>  TRUE
[23:35:01.415]      // while "1"  (timeout="200")
[23:35:01.415]      // while-condition  =>  TRUE
[23:35:01.415]      // while "1"  (timeout="200")
[23:35:01.415]      // while-condition  =>  TRUE
[23:35:01.415]      // while "1"  (timeout="200")
[23:35:01.415]      // while-condition  =>  TRUE
[23:35:01.415]      // while "1"  (timeout="200")
[23:35:01.415]      // while-condition  =>  TRUE
[23:35:01.415]      // while "1"  (timeout="200")
[23:35:01.415]      // while-condition  =>  TRUE
[23:35:01.415]      // while "1"  (timeout="200")
[23:35:01.415]      // while-condition  =>  TRUE
[23:35:01.417]      // while "1"  (timeout="200")
[23:35:01.417]      // while-condition  =>  TRUE
[23:35:01.417]      // while "1"  (timeout="200")
[23:35:01.417]      // while-condition  =>  TRUE
[23:35:01.417]      // while "1"  (timeout="200")
[23:35:01.417]      // while-condition  =>  TRUE
[23:35:01.417]      // while "1"  (timeout="200")
[23:35:01.417]      // while-condition  =>  TRUE
[23:35:01.417]      // while "1"  (timeout="200")
[23:35:01.417]      // while-condition  =>  TRUE
[23:35:01.417]      // while "1"  (timeout="200")
[23:35:01.417]      // while-condition  =>  TRUE
[23:35:01.417]      // while "1"  (timeout="200")
[23:35:01.417]      // while-condition  =>  TRUE
[23:35:01.419]      // while "1"  (timeout="200")
[23:35:01.419]      // while-condition  =>  TRUE
[23:35:01.419]      // while "1"  (timeout="200")
[23:35:01.419]      // while-condition  =>  TRUE
[23:35:01.419]      // while "1"  (timeout="200")
[23:35:01.419]      // while-condition  =>  TRUE
[23:35:01.419]      // while "1"  (timeout="200")
[23:35:01.419]      // while-condition  =>  TRUE
[23:35:01.419]      // while "1"  (timeout="200")
[23:35:01.419]      // while-condition  =>  TRUE
[23:35:01.419]      // while "1"  (timeout="200")
[23:35:01.419]      // while-condition  =>  TRUE
[23:35:01.419]      // while "1"  (timeout="200")
[23:35:01.419]      // while-condition  =>  TRUE
[23:35:01.419]      // while "1"  (timeout="200")
[23:35:01.419]      // while-condition  =>  TRUE
[23:35:01.420]      // while "1"  (timeout="200")
[23:35:01.420]      // while-condition  =>  TRUE
[23:35:01.420]      // while "1"  (timeout="200")
[23:35:01.420]      // while-condition  =>  TRUE
[23:35:01.420]      // while "1"  (timeout="200")
[23:35:01.420]      // while-condition  =>  TRUE
[23:35:01.420]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.421]      // while "1"  (timeout="200")
[23:35:01.421]      // while-condition  =>  TRUE
[23:35:01.425]      // while "1"  (timeout="200")
[23:35:01.425]      // while  =>  TIMEOUT
[23:35:01.425]      // end while "1"
[23:35:01.425]    </control>
[23:35:01.425]    <control if="canReadPins" while="" timeout="0" info="">
[23:35:01.425]      // if-block "canReadPins"
[23:35:01.425]        // =>  TRUE
[23:35:01.425]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:35:01.425]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:35:01.426]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:35:01.426]        // while-condition  =>  FALSE
[23:35:01.426]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:35:01.426]      </control>
[23:35:01.426]      // end if-block "canReadPins"
[23:35:01.426]    </control>
[23:35:01.426]    <control if="!canReadPins" while="" timeout="0" info="">
[23:35:01.426]      // if-block "!canReadPins"
[23:35:01.426]        // =>  FALSE
[23:35:01.426]      // skip if-block "!canReadPins"
[23:35:01.426]    </control>
[23:35:01.426]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:35:01.426]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:35:01.426]        // =>  TRUE
[23:35:01.426]      <block atomic="false" info="">
[23:35:01.426]        WriteAP(0x00, 0x190008);
[23:35:01.431]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:35:01.431]        WriteAP(0xF0, 0x01);
[23:35:01.433]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:35:01.433]      </block>
[23:35:01.433]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:35:01.433]    </control>
[23:35:01.433]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:35:01.433]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:35:01.433]        // =>  FALSE
[23:35:01.433]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:35:01.433]    </control>
[23:35:01.433]    <block atomic="false" info="">
[23:35:01.433]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:35:01.437]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:35:01.437]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:35:01.437]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:35:01.441]      __ap = 0; //lets make sure we reset the access point selection
[23:35:01.441]        // -> [__ap <= 0x00000000]
[23:35:01.441]    </block>
[23:35:01.441]  </sequence>
[23:35:01.441]  
[23:35:01.465]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:35:01.465]  
[23:35:01.465]  <debugvars>
[23:35:01.465]    // Pre-defined
[23:35:01.465]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:35:01.465]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:35:01.465]    __dp=0x00000000
[23:35:01.465]    __ap=0x00000000
[23:35:01.465]    __traceout=0x00000000      (Trace Disabled)
[23:35:01.465]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:35:01.465]    __FlashAddr=0x00000000
[23:35:01.465]    __FlashLen=0x00000000
[23:35:01.465]    __FlashArg=0x00000000
[23:35:01.465]    __FlashOp=0x00000000
[23:35:01.465]    __Result=0x00000000
[23:35:01.465]  </debugvars>
[23:35:01.465]  
[23:35:01.465]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:35:01.465]    <block atomic="false" info="">
[23:35:01.465]      __var deviceID = 0;
[23:35:01.465]        // -> [deviceID <= 0x00000000]
[23:35:01.465]      __var version = 0;
[23:35:01.465]        // -> [version <= 0x00000000]
[23:35:01.465]      __var partNum = 0;
[23:35:01.465]        // -> [partNum <= 0x00000000]
[23:35:01.465]      __var manuf = 0;
[23:35:01.465]        // -> [manuf <= 0x00000000]
[23:35:01.465]      __var isMSPM0G1X0X_G3X0X = 0;
[23:35:01.465]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:35:01.465]      __var isProduction = 0;
[23:35:01.469]        // -> [isProduction <= 0x00000000]
[23:35:01.469]      __var continueId = 0;
[23:35:01.469]        // -> [continueId <= 0x00000000]
[23:35:01.469]      deviceID =   Read32(0x41C40004);
[23:35:01.473]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:35:01.473]        // -> [deviceID <= 0x2BB8802F]
[23:35:01.473]      version = deviceID >> 28;
[23:35:01.473]        // -> [version <= 0x00000002]
[23:35:01.473]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:35:01.473]        // -> [partNum <= 0x0000BB88]
[23:35:01.473]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:35:01.473]        // -> [manuf <= 0x00000017]
[23:35:01.473]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:35:01.473]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:35:01.473]      isProduction = (version > 0);
[23:35:01.473]        // -> [isProduction <= 0x00000001]
[23:35:01.473]    </block>
[23:35:01.473]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:35:01.473]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:35:01.473]        // =>  FALSE
[23:35:01.473]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:35:01.473]    </control>
[23:35:01.473]    <control if="continueId == 4" while="" timeout="0" info="">
[23:35:01.473]      // if-block "continueId == 4"
[23:35:01.473]        // =>  FALSE
[23:35:01.473]      // skip if-block "continueId == 4"
[23:35:01.473]    </control>
[23:35:01.473]    <control if="!isProduction" while="" timeout="0" info="">
[23:35:01.473]      // if-block "!isProduction"
[23:35:01.473]        // =>  FALSE
[23:35:01.473]      // skip if-block "!isProduction"
[23:35:01.473]    </control>
[23:35:01.473]  </sequence>
[23:35:01.473]  
[23:36:55.611]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:36:55.611]  
[23:36:55.611]  <debugvars>
[23:36:55.611]    // Pre-defined
[23:36:55.611]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:36:55.611]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:36:55.611]    __dp=0x00000000
[23:36:55.611]    __ap=0x00000000
[23:36:55.611]    __traceout=0x00000000      (Trace Disabled)
[23:36:55.611]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:36:55.611]    __FlashAddr=0x00000000
[23:36:55.611]    __FlashLen=0x00000000
[23:36:55.611]    __FlashArg=0x00000000
[23:36:55.611]    __FlashOp=0x00000000
[23:36:55.611]    __Result=0x00000000
[23:36:55.611]  </debugvars>
[23:36:55.611]  
[23:36:55.613]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:36:55.613]    <block atomic="false" info="">
[23:36:55.613]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:36:55.613]        // -> [isSWJ <= 0x00000001]
[23:36:55.613]      __var hasDormant = __protocol & 0x00020000;
[23:36:55.613]        // -> [hasDormant <= 0x00000000]
[23:36:55.613]      __var protType   = __protocol & 0x0000FFFF;
[23:36:55.613]        // -> [protType <= 0x00000002]
[23:36:55.613]    </block>
[23:36:55.613]    <control if="protType == 1" while="" timeout="0" info="">
[23:36:55.613]      // if-block "protType == 1"
[23:36:55.613]        // =>  FALSE
[23:36:55.613]      // skip if-block "protType == 1"
[23:36:55.613]    </control>
[23:36:55.613]    <control if="protType == 2" while="" timeout="0" info="">
[23:36:55.613]      // if-block "protType == 2"
[23:36:55.613]        // =>  TRUE
[23:36:55.613]      <control if="isSWJ" while="" timeout="0" info="">
[23:36:55.613]        // if-block "isSWJ"
[23:36:55.613]          // =>  TRUE
[23:36:55.613]        <control if="hasDormant" while="" timeout="0" info="">
[23:36:55.613]          // if-block "hasDormant"
[23:36:55.613]            // =>  FALSE
[23:36:55.613]          // skip if-block "hasDormant"
[23:36:55.613]        </control>
[23:36:55.613]        <control if="!hasDormant" while="" timeout="0" info="">
[23:36:55.613]          // if-block "!hasDormant"
[23:36:55.613]            // =>  TRUE
[23:36:55.613]          <block atomic="false" info="">
[23:36:55.613]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:36:55.617]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:36:55.617]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:36:55.617]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:36:55.617]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:36:55.621]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:36:55.621]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:36:55.621]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:36:55.621]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:36:55.625]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:36:55.625]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:36:55.625]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:36:55.625]          </block>
[23:36:55.625]          // end if-block "!hasDormant"
[23:36:55.625]        </control>
[23:36:55.625]        // end if-block "isSWJ"
[23:36:55.625]      </control>
[23:36:55.625]      <control if="!isSWJ" while="" timeout="0" info="">
[23:36:55.625]        // if-block "!isSWJ"
[23:36:55.625]          // =>  FALSE
[23:36:55.625]        // skip if-block "!isSWJ"
[23:36:55.625]      </control>
[23:36:55.625]      <block atomic="false" info="">
[23:36:55.625]        ReadDP(0x0);
[23:36:55.629]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:36:55.629]      </block>
[23:36:55.629]      // end if-block "protType == 2"
[23:36:55.629]    </control>
[23:36:55.629]  </sequence>
[23:36:55.629]  
[23:36:55.629]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:36:55.629]  
[23:36:55.629]  <debugvars>
[23:36:55.633]    // Pre-defined
[23:36:55.633]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:36:55.633]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:36:55.633]    __dp=0x00000000
[23:36:55.633]    __ap=0x00000000
[23:36:55.633]    __traceout=0x00000000      (Trace Disabled)
[23:36:55.633]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:36:55.633]    __FlashAddr=0x00000000
[23:36:55.633]    __FlashLen=0x00000000
[23:36:55.633]    __FlashArg=0x00000000
[23:36:55.633]    __FlashOp=0x00000000
[23:36:55.633]    __Result=0x00000000
[23:36:55.633]  </debugvars>
[23:36:55.633]  
[23:36:55.633]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:36:55.633]    <block atomic="false" info="">
[23:36:55.633]      __var SW_DP_ABORT       = 0x0;
[23:36:55.633]        // -> [SW_DP_ABORT <= 0x00000000]
[23:36:55.633]      __var DP_CTRL_STAT      = 0x4;
[23:36:55.633]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:36:55.633]      __var DP_SELECT         = 0x8;
[23:36:55.633]        // -> [DP_SELECT <= 0x00000008]
[23:36:55.633]      __var powered_down      = 0;
[23:36:55.633]        // -> [powered_down <= 0x00000000]
[23:36:55.633]      WriteDP(DP_SELECT, 0x00000000);
[23:36:55.638]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:36:55.638]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:36:55.639]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:36:55.639]        // -> [powered_down <= 0x00000001]
[23:36:55.639]    </block>
[23:36:55.639]    <control if="powered_down" while="" timeout="0" info="">
[23:36:55.639]      // if-block "powered_down"
[23:36:55.639]        // =>  TRUE
[23:36:55.639]      <block atomic="false" info="">
[23:36:55.641]        Message(0, "Debug/System power-up request sent");
[23:36:55.642]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:36:55.645]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:36:55.645]      </block>
[23:36:55.645]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:36:55.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:36:55.645]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:36:55.647]        // while-condition  =>  FALSE
[23:36:55.647]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:36:55.647]      </control>
[23:36:55.647]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:36:55.647]        // if-block "(__protocol & 0xFFFF) == 1"
[23:36:55.647]          // =>  FALSE
[23:36:55.647]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:36:55.647]      </control>
[23:36:55.647]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:36:55.647]        // if-block "(__protocol & 0xFFFF) == 2"
[23:36:55.647]          // =>  TRUE
[23:36:55.647]        <block atomic="false" info="">
[23:36:55.648]          Message(0, "executing SWD power up");
[23:36:55.651]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:36:55.653]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:36:55.653]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:36:55.655]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:36:55.655]        </block>
[23:36:55.655]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:36:55.655]      </control>
[23:36:55.655]      // end if-block "powered_down"
[23:36:55.655]    </control>
[23:36:55.655]    <block atomic="false" info="">
[23:36:55.655]      __var DEBUG_PORT_VAL    = 0;
[23:36:55.655]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:36:55.655]      __var ACCESS_POINT_VAL  = 0;
[23:36:55.655]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:36:55.655]      __ap = 1; 
[23:36:55.655]        // -> [__ap <= 0x00000001]
[23:36:55.655]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:36:55.658]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:36:55.658]      __ap = 4;
[23:36:55.658]        // -> [__ap <= 0x00000004]
[23:36:55.658]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:36:55.666]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:36:55.666]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:36:55.666]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:36:55.668]    </block>
[23:36:55.668]    <block atomic="false" info="">
[23:36:55.668]      __var nReset = 0x80;
[23:36:55.668]        // -> [nReset <= 0x00000080]
[23:36:55.668]      __var canReadPins = 0;
[23:36:55.668]        // -> [canReadPins <= 0x00000000]
[23:36:55.668]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:36:55.670]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:36:55.670]        // -> [canReadPins <= 0x00000001]
[23:36:55.671]    </block>
[23:36:55.671]    <control if="" while="1" timeout="200" info="">
[23:36:55.671]      // while "1"  (timeout="200")
[23:36:55.671]      // while-condition  =>  TRUE
[23:36:55.671]      // while "1"  (timeout="200")
[23:36:55.671]      // while-condition  =>  TRUE
[23:36:55.671]      // while "1"  (timeout="200")
[23:36:55.671]      // while-condition  =>  TRUE
[23:36:55.671]      // while "1"  (timeout="200")
[23:36:55.671]      // while-condition  =>  TRUE
[23:36:55.671]      // while "1"  (timeout="200")
[23:36:55.671]      // while-condition  =>  TRUE
[23:36:55.671]      // while "1"  (timeout="200")
[23:36:55.671]      // while-condition  =>  TRUE
[23:36:55.671]      // while "1"  (timeout="200")
[23:36:55.671]      // while-condition  =>  TRUE
[23:36:55.671]      // while "1"  (timeout="200")
[23:36:55.671]      // while-condition  =>  TRUE
[23:36:55.671]      // while "1"  (timeout="200")
[23:36:55.671]      // while-condition  =>  TRUE
[23:36:55.671]      // while "1"  (timeout="200")
[23:36:55.671]      // while-condition  =>  TRUE
[23:36:55.671]      // while "1"  (timeout="200")
[23:36:55.671]      // while-condition  =>  TRUE
[23:36:55.671]      // while "1"  (timeout="200")
[23:36:55.673]      // while-condition  =>  TRUE
[23:36:55.673]      // while "1"  (timeout="200")
[23:36:55.673]      // while-condition  =>  TRUE
[23:36:55.673]      // while "1"  (timeout="200")
[23:36:55.673]      // while-condition  =>  TRUE
[23:36:55.673]      // while "1"  (timeout="200")
[23:36:55.673]      // while-condition  =>  TRUE
[23:36:55.673]      // while "1"  (timeout="200")
[23:36:55.674]      // while-condition  =>  TRUE
[23:36:55.674]      // while "1"  (timeout="200")
[23:36:55.674]      // while  =>  TIMEOUT
[23:36:55.674]      // end while "1"
[23:36:55.674]    </control>
[23:36:55.674]    <control if="canReadPins" while="" timeout="0" info="">
[23:36:55.674]      // if-block "canReadPins"
[23:36:55.674]        // =>  TRUE
[23:36:55.674]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:36:55.674]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:36:55.677]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:36:55.677]        // while-condition  =>  FALSE
[23:36:55.677]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:36:55.677]      </control>
[23:36:55.677]      // end if-block "canReadPins"
[23:36:55.677]    </control>
[23:36:55.677]    <control if="!canReadPins" while="" timeout="0" info="">
[23:36:55.677]      // if-block "!canReadPins"
[23:36:55.677]        // =>  FALSE
[23:36:55.677]      // skip if-block "!canReadPins"
[23:36:55.677]    </control>
[23:36:55.677]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:36:55.677]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:36:55.677]        // =>  TRUE
[23:36:55.677]      <block atomic="false" info="">
[23:36:55.679]        WriteAP(0x00, 0x190008);
[23:36:55.680]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:36:55.680]        WriteAP(0xF0, 0x01);
[23:36:55.683]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:36:55.683]      </block>
[23:36:55.683]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:36:55.683]    </control>
[23:36:55.683]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:36:55.683]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:36:55.683]        // =>  FALSE
[23:36:55.683]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:36:55.683]    </control>
[23:36:55.683]    <block atomic="false" info="">
[23:36:55.683]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:36:55.688]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:36:55.688]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:36:55.688]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:36:55.689]      __ap = 0; //lets make sure we reset the access point selection
[23:36:55.689]        // -> [__ap <= 0x00000000]
[23:36:55.689]    </block>
[23:36:55.689]  </sequence>
[23:36:55.689]  
[23:36:55.710]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:36:55.710]  
[23:36:55.711]  <debugvars>
[23:36:55.711]    // Pre-defined
[23:36:55.711]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:36:55.711]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:36:55.711]    __dp=0x00000000
[23:36:55.711]    __ap=0x00000000
[23:36:55.711]    __traceout=0x00000000      (Trace Disabled)
[23:36:55.711]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:36:55.711]    __FlashAddr=0x00000000
[23:36:55.711]    __FlashLen=0x00000000
[23:36:55.711]    __FlashArg=0x00000000
[23:36:55.711]    __FlashOp=0x00000000
[23:36:55.711]    __Result=0x00000000
[23:36:55.712]  </debugvars>
[23:36:55.712]  
[23:36:55.712]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:36:55.712]    <block atomic="false" info="">
[23:36:55.712]      __var deviceID = 0;
[23:36:55.712]        // -> [deviceID <= 0x00000000]
[23:36:55.712]      __var version = 0;
[23:36:55.712]        // -> [version <= 0x00000000]
[23:36:55.712]      __var partNum = 0;
[23:36:55.712]        // -> [partNum <= 0x00000000]
[23:36:55.712]      __var manuf = 0;
[23:36:55.712]        // -> [manuf <= 0x00000000]
[23:36:55.712]      __var isMSPM0G1X0X_G3X0X = 0;
[23:36:55.712]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:36:55.712]      __var isProduction = 0;
[23:36:55.712]        // -> [isProduction <= 0x00000000]
[23:36:55.712]      __var continueId = 0;
[23:36:55.712]        // -> [continueId <= 0x00000000]
[23:36:55.712]      deviceID =   Read32(0x41C40004);
[23:36:55.716]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:36:55.716]        // -> [deviceID <= 0x2BB8802F]
[23:36:55.716]      version = deviceID >> 28;
[23:36:55.716]        // -> [version <= 0x00000002]
[23:36:55.716]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:36:55.716]        // -> [partNum <= 0x0000BB88]
[23:36:55.716]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:36:55.716]        // -> [manuf <= 0x00000017]
[23:36:55.716]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:36:55.716]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:36:55.716]      isProduction = (version > 0);
[23:36:55.716]        // -> [isProduction <= 0x00000001]
[23:36:55.716]    </block>
[23:36:55.716]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:36:55.716]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:36:55.716]        // =>  FALSE
[23:36:55.716]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:36:55.720]    </control>
[23:36:55.720]    <control if="continueId == 4" while="" timeout="0" info="">
[23:36:55.720]      // if-block "continueId == 4"
[23:36:55.720]        // =>  FALSE
[23:36:55.720]      // skip if-block "continueId == 4"
[23:36:55.720]    </control>
[23:36:55.720]    <control if="!isProduction" while="" timeout="0" info="">
[23:36:55.720]      // if-block "!isProduction"
[23:36:55.720]        // =>  FALSE
[23:36:55.720]      // skip if-block "!isProduction"
[23:36:55.720]    </control>
[23:36:55.720]  </sequence>
[23:36:55.722]  
[23:43:21.002]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:43:21.002]  
[23:43:21.013]  <debugvars>
[23:43:21.013]    // Pre-defined
[23:43:21.013]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:43:21.013]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:43:21.013]    __dp=0x00000000
[23:43:21.013]    __ap=0x00000000
[23:43:21.013]    __traceout=0x00000000      (Trace Disabled)
[23:43:21.013]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:43:21.013]    __FlashAddr=0x00000000
[23:43:21.013]    __FlashLen=0x00000000
[23:43:21.013]    __FlashArg=0x00000000
[23:43:21.014]    __FlashOp=0x00000000
[23:43:21.014]    __Result=0x00000000
[23:43:21.014]  </debugvars>
[23:43:21.014]  
[23:43:21.014]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:43:21.014]    <block atomic="false" info="">
[23:43:21.014]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:43:21.014]        // -> [isSWJ <= 0x00000001]
[23:43:21.014]      __var hasDormant = __protocol & 0x00020000;
[23:43:21.014]        // -> [hasDormant <= 0x00000000]
[23:43:21.014]      __var protType   = __protocol & 0x0000FFFF;
[23:43:21.014]        // -> [protType <= 0x00000002]
[23:43:21.014]    </block>
[23:43:21.014]    <control if="protType == 1" while="" timeout="0" info="">
[23:43:21.014]      // if-block "protType == 1"
[23:43:21.014]        // =>  FALSE
[23:43:21.016]      // skip if-block "protType == 1"
[23:43:21.016]    </control>
[23:43:21.016]    <control if="protType == 2" while="" timeout="0" info="">
[23:43:21.016]      // if-block "protType == 2"
[23:43:21.016]        // =>  TRUE
[23:43:21.016]      <control if="isSWJ" while="" timeout="0" info="">
[23:43:21.016]        // if-block "isSWJ"
[23:43:21.016]          // =>  TRUE
[23:43:21.016]        <control if="hasDormant" while="" timeout="0" info="">
[23:43:21.016]          // if-block "hasDormant"
[23:43:21.016]            // =>  FALSE
[23:43:21.016]          // skip if-block "hasDormant"
[23:43:21.016]        </control>
[23:43:21.016]        <control if="!hasDormant" while="" timeout="0" info="">
[23:43:21.016]          // if-block "!hasDormant"
[23:43:21.016]            // =>  TRUE
[23:43:21.016]          <block atomic="false" info="">
[23:43:21.016]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:43:21.018]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:43:21.018]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:43:21.018]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:43:21.018]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:43:21.022]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:43:21.022]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:43:21.022]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:43:21.022]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:43:21.026]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:43:21.026]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:43:21.028]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:43:21.028]          </block>
[23:43:21.028]          // end if-block "!hasDormant"
[23:43:21.028]        </control>
[23:43:21.028]        // end if-block "isSWJ"
[23:43:21.028]      </control>
[23:43:21.028]      <control if="!isSWJ" while="" timeout="0" info="">
[23:43:21.028]        // if-block "!isSWJ"
[23:43:21.028]          // =>  FALSE
[23:43:21.028]        // skip if-block "!isSWJ"
[23:43:21.028]      </control>
[23:43:21.028]      <block atomic="false" info="">
[23:43:21.028]        ReadDP(0x0);
[23:43:21.030]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:43:21.031]      </block>
[23:43:21.031]      // end if-block "protType == 2"
[23:43:21.031]    </control>
[23:43:21.031]  </sequence>
[23:43:21.031]  
[23:43:21.034]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:43:21.034]  
[23:43:21.034]  <debugvars>
[23:43:21.034]    // Pre-defined
[23:43:21.034]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:43:21.034]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:43:21.034]    __dp=0x00000000
[23:43:21.035]    __ap=0x00000000
[23:43:21.035]    __traceout=0x00000000      (Trace Disabled)
[23:43:21.035]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:43:21.035]    __FlashAddr=0x00000000
[23:43:21.035]    __FlashLen=0x00000000
[23:43:21.035]    __FlashArg=0x00000000
[23:43:21.035]    __FlashOp=0x00000000
[23:43:21.035]    __Result=0x00000000
[23:43:21.035]  </debugvars>
[23:43:21.035]  
[23:43:21.035]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:43:21.035]    <block atomic="false" info="">
[23:43:21.035]      __var SW_DP_ABORT       = 0x0;
[23:43:21.035]        // -> [SW_DP_ABORT <= 0x00000000]
[23:43:21.035]      __var DP_CTRL_STAT      = 0x4;
[23:43:21.035]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:43:21.035]      __var DP_SELECT         = 0x8;
[23:43:21.035]        // -> [DP_SELECT <= 0x00000008]
[23:43:21.035]      __var powered_down      = 0;
[23:43:21.035]        // -> [powered_down <= 0x00000000]
[23:43:21.035]      WriteDP(DP_SELECT, 0x00000000);
[23:43:21.038]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:43:21.038]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:43:21.039]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:43:21.039]        // -> [powered_down <= 0x00000001]
[23:43:21.039]    </block>
[23:43:21.039]    <control if="powered_down" while="" timeout="0" info="">
[23:43:21.039]      // if-block "powered_down"
[23:43:21.039]        // =>  TRUE
[23:43:21.039]      <block atomic="false" info="">
[23:43:21.039]        Message(0, "Debug/System power-up request sent");
[23:43:21.041]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:43:21.043]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:43:21.043]      </block>
[23:43:21.043]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:43:21.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:43:21.043]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:43:21.043]        // while-condition  =>  FALSE
[23:43:21.043]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:43:21.043]      </control>
[23:43:21.043]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:43:21.043]        // if-block "(__protocol & 0xFFFF) == 1"
[23:43:21.043]          // =>  FALSE
[23:43:21.043]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:43:21.043]      </control>
[23:43:21.043]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:43:21.043]        // if-block "(__protocol & 0xFFFF) == 2"
[23:43:21.043]          // =>  TRUE
[23:43:21.043]        <block atomic="false" info="">
[23:43:21.043]          Message(0, "executing SWD power up");
[23:43:21.049]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:43:21.049]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:43:21.049]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:43:21.051]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:43:21.051]        </block>
[23:43:21.051]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:43:21.051]      </control>
[23:43:21.051]      // end if-block "powered_down"
[23:43:21.051]    </control>
[23:43:21.051]    <block atomic="false" info="">
[23:43:21.051]      __var DEBUG_PORT_VAL    = 0;
[23:43:21.051]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:43:21.053]      __var ACCESS_POINT_VAL  = 0;
[23:43:21.053]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:43:21.053]      __ap = 1; 
[23:43:21.053]        // -> [__ap <= 0x00000001]
[23:43:21.054]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:43:21.055]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:43:21.055]      __ap = 4;
[23:43:21.055]        // -> [__ap <= 0x00000004]
[23:43:21.055]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:43:21.060]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:43:21.060]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:43:21.060]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:43:21.061]    </block>
[23:43:21.061]    <block atomic="false" info="">
[23:43:21.061]      __var nReset = 0x80;
[23:43:21.061]        // -> [nReset <= 0x00000080]
[23:43:21.061]      __var canReadPins = 0;
[23:43:21.061]        // -> [canReadPins <= 0x00000000]
[23:43:21.061]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:43:21.063]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:43:21.063]        // -> [canReadPins <= 0x00000001]
[23:43:21.063]    </block>
[23:43:21.063]    <control if="" while="1" timeout="200" info="">
[23:43:21.063]      // while "1"  (timeout="200")
[23:43:21.063]      // while-condition  =>  TRUE
[23:43:21.063]      // while "1"  (timeout="200")
[23:43:21.063]      // while-condition  =>  TRUE
[23:43:21.063]      // while "1"  (timeout="200")
[23:43:21.063]      // while-condition  =>  TRUE
[23:43:21.063]      // while "1"  (timeout="200")
[23:43:21.063]      // while-condition  =>  TRUE
[23:43:21.063]      // while "1"  (timeout="200")
[23:43:21.063]      // while-condition  =>  TRUE
[23:43:21.063]      // while "1"  (timeout="200")
[23:43:21.063]      // while-condition  =>  TRUE
[23:43:21.063]      // while "1"  (timeout="200")
[23:43:21.063]      // while-condition  =>  TRUE
[23:43:21.063]      // while "1"  (timeout="200")
[23:43:21.063]      // while-condition  =>  TRUE
[23:43:21.063]      // while "1"  (timeout="200")
[23:43:21.063]      // while-condition  =>  TRUE
[23:43:21.063]      // while "1"  (timeout="200")
[23:43:21.063]      // while-condition  =>  TRUE
[23:43:21.063]      // while "1"  (timeout="200")
[23:43:21.063]      // while-condition  =>  TRUE
[23:43:21.063]      // while "1"  (timeout="200")
[23:43:21.063]      // while-condition  =>  TRUE
[23:43:21.067]      // while "1"  (timeout="200")
[23:43:21.067]      // while  =>  TIMEOUT
[23:43:21.067]      // end while "1"
[23:43:21.067]    </control>
[23:43:21.067]    <control if="canReadPins" while="" timeout="0" info="">
[23:43:21.067]      // if-block "canReadPins"
[23:43:21.067]        // =>  TRUE
[23:43:21.067]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:43:21.067]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:43:21.068]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:43:21.068]        // while-condition  =>  FALSE
[23:43:21.068]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:43:21.068]      </control>
[23:43:21.069]      // end if-block "canReadPins"
[23:43:21.069]    </control>
[23:43:21.069]    <control if="!canReadPins" while="" timeout="0" info="">
[23:43:21.069]      // if-block "!canReadPins"
[23:43:21.069]        // =>  FALSE
[23:43:21.069]      // skip if-block "!canReadPins"
[23:43:21.069]    </control>
[23:43:21.069]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:43:21.069]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:43:21.069]        // =>  TRUE
[23:43:21.069]      <block atomic="false" info="">
[23:43:21.071]        WriteAP(0x00, 0x190008);
[23:43:21.072]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:43:21.072]        WriteAP(0xF0, 0x01);
[23:43:21.073]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:43:21.073]      </block>
[23:43:21.073]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:43:21.073]    </control>
[23:43:21.073]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:43:21.073]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:43:21.073]        // =>  FALSE
[23:43:21.076]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:43:21.076]    </control>
[23:43:21.076]    <block atomic="false" info="">
[23:43:21.076]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:43:21.079]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:43:21.079]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:43:21.079]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:43:21.082]      __ap = 0; //lets make sure we reset the access point selection
[23:43:21.082]        // -> [__ap <= 0x00000000]
[23:43:21.082]    </block>
[23:43:21.082]  </sequence>
[23:43:21.082]  
[23:43:21.103]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:43:21.103]  
[23:43:21.103]  <debugvars>
[23:43:21.103]    // Pre-defined
[23:43:21.103]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:43:21.103]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:43:21.103]    __dp=0x00000000
[23:43:21.103]    __ap=0x00000000
[23:43:21.103]    __traceout=0x00000000      (Trace Disabled)
[23:43:21.103]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:43:21.103]    __FlashAddr=0x00000000
[23:43:21.103]    __FlashLen=0x00000000
[23:43:21.103]    __FlashArg=0x00000000
[23:43:21.105]    __FlashOp=0x00000000
[23:43:21.105]    __Result=0x00000000
[23:43:21.105]  </debugvars>
[23:43:21.105]  
[23:43:21.105]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:43:21.105]    <block atomic="false" info="">
[23:43:21.105]      __var deviceID = 0;
[23:43:21.105]        // -> [deviceID <= 0x00000000]
[23:43:21.105]      __var version = 0;
[23:43:21.105]        // -> [version <= 0x00000000]
[23:43:21.105]      __var partNum = 0;
[23:43:21.105]        // -> [partNum <= 0x00000000]
[23:43:21.105]      __var manuf = 0;
[23:43:21.106]        // -> [manuf <= 0x00000000]
[23:43:21.106]      __var isMSPM0G1X0X_G3X0X = 0;
[23:43:21.106]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:43:21.106]      __var isProduction = 0;
[23:43:21.106]        // -> [isProduction <= 0x00000000]
[23:43:21.106]      __var continueId = 0;
[23:43:21.106]        // -> [continueId <= 0x00000000]
[23:43:21.106]      deviceID =   Read32(0x41C40004);
[23:43:21.113]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:43:21.113]        // -> [deviceID <= 0x2BB8802F]
[23:43:21.113]      version = deviceID >> 28;
[23:43:21.113]        // -> [version <= 0x00000002]
[23:43:21.113]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:43:21.113]        // -> [partNum <= 0x0000BB88]
[23:43:21.113]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:43:21.113]        // -> [manuf <= 0x00000017]
[23:43:21.113]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:43:21.113]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:43:21.113]      isProduction = (version > 0);
[23:43:21.113]        // -> [isProduction <= 0x00000001]
[23:43:21.113]    </block>
[23:43:21.113]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:43:21.113]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:43:21.113]        // =>  FALSE
[23:43:21.113]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:43:21.113]    </control>
[23:43:21.113]    <control if="continueId == 4" while="" timeout="0" info="">
[23:43:21.113]      // if-block "continueId == 4"
[23:43:21.113]        // =>  FALSE
[23:43:21.113]      // skip if-block "continueId == 4"
[23:43:21.113]    </control>
[23:43:21.113]    <control if="!isProduction" while="" timeout="0" info="">
[23:43:21.113]      // if-block "!isProduction"
[23:43:21.113]        // =>  FALSE
[23:43:21.113]      // skip if-block "!isProduction"
[23:43:21.113]    </control>
[23:43:21.116]  </sequence>
[23:43:21.116]  
[23:45:05.056]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:45:05.056]  
[23:45:05.065]  <debugvars>
[23:45:05.065]    // Pre-defined
[23:45:05.065]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:45:05.065]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:45:05.065]    __dp=0x00000000
[23:45:05.065]    __ap=0x00000000
[23:45:05.065]    __traceout=0x00000000      (Trace Disabled)
[23:45:05.065]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:45:05.065]    __FlashAddr=0x00000000
[23:45:05.065]    __FlashLen=0x00000000
[23:45:05.065]    __FlashArg=0x00000000
[23:45:05.065]    __FlashOp=0x00000000
[23:45:05.065]    __Result=0x00000000
[23:45:05.065]  </debugvars>
[23:45:05.065]  
[23:45:05.065]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:45:05.065]    <block atomic="false" info="">
[23:45:05.067]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:45:05.067]        // -> [isSWJ <= 0x00000001]
[23:45:05.067]      __var hasDormant = __protocol & 0x00020000;
[23:45:05.067]        // -> [hasDormant <= 0x00000000]
[23:45:05.067]      __var protType   = __protocol & 0x0000FFFF;
[23:45:05.067]        // -> [protType <= 0x00000002]
[23:45:05.067]    </block>
[23:45:05.067]    <control if="protType == 1" while="" timeout="0" info="">
[23:45:05.067]      // if-block "protType == 1"
[23:45:05.067]        // =>  FALSE
[23:45:05.067]      // skip if-block "protType == 1"
[23:45:05.067]    </control>
[23:45:05.067]    <control if="protType == 2" while="" timeout="0" info="">
[23:45:05.067]      // if-block "protType == 2"
[23:45:05.067]        // =>  TRUE
[23:45:05.067]      <control if="isSWJ" while="" timeout="0" info="">
[23:45:05.067]        // if-block "isSWJ"
[23:45:05.067]          // =>  TRUE
[23:45:05.067]        <control if="hasDormant" while="" timeout="0" info="">
[23:45:05.067]          // if-block "hasDormant"
[23:45:05.067]            // =>  FALSE
[23:45:05.067]          // skip if-block "hasDormant"
[23:45:05.067]        </control>
[23:45:05.067]        <control if="!hasDormant" while="" timeout="0" info="">
[23:45:05.067]          // if-block "!hasDormant"
[23:45:05.067]            // =>  TRUE
[23:45:05.067]          <block atomic="false" info="">
[23:45:05.067]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:45:05.071]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:45:05.071]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:45:05.071]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:45:05.074]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:45:05.075]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:45:05.075]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:45:05.075]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:45:05.075]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:45:05.075]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:45:05.075]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:45:05.079]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:45:05.079]          </block>
[23:45:05.079]          // end if-block "!hasDormant"
[23:45:05.079]        </control>
[23:45:05.079]        // end if-block "isSWJ"
[23:45:05.079]      </control>
[23:45:05.079]      <control if="!isSWJ" while="" timeout="0" info="">
[23:45:05.079]        // if-block "!isSWJ"
[23:45:05.079]          // =>  FALSE
[23:45:05.079]        // skip if-block "!isSWJ"
[23:45:05.079]      </control>
[23:45:05.079]      <block atomic="false" info="">
[23:45:05.079]        ReadDP(0x0);
[23:45:05.083]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:45:05.083]      </block>
[23:45:05.083]      // end if-block "protType == 2"
[23:45:05.083]    </control>
[23:45:05.083]  </sequence>
[23:45:05.083]  
[23:45:05.087]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:45:05.087]  
[23:45:05.087]  <debugvars>
[23:45:05.087]    // Pre-defined
[23:45:05.087]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:45:05.088]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:45:05.088]    __dp=0x00000000
[23:45:05.088]    __ap=0x00000000
[23:45:05.088]    __traceout=0x00000000      (Trace Disabled)
[23:45:05.088]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:45:05.088]    __FlashAddr=0x00000000
[23:45:05.088]    __FlashLen=0x00000000
[23:45:05.088]    __FlashArg=0x00000000
[23:45:05.088]    __FlashOp=0x00000000
[23:45:05.089]    __Result=0x00000000
[23:45:05.089]  </debugvars>
[23:45:05.089]  
[23:45:05.089]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:45:05.089]    <block atomic="false" info="">
[23:45:05.089]      __var SW_DP_ABORT       = 0x0;
[23:45:05.089]        // -> [SW_DP_ABORT <= 0x00000000]
[23:45:05.089]      __var DP_CTRL_STAT      = 0x4;
[23:45:05.089]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:45:05.089]      __var DP_SELECT         = 0x8;
[23:45:05.090]        // -> [DP_SELECT <= 0x00000008]
[23:45:05.090]      __var powered_down      = 0;
[23:45:05.090]        // -> [powered_down <= 0x00000000]
[23:45:05.090]      WriteDP(DP_SELECT, 0x00000000);
[23:45:05.091]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:45:05.092]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:45:05.094]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:45:05.095]        // -> [powered_down <= 0x00000001]
[23:45:05.095]    </block>
[23:45:05.095]    <control if="powered_down" while="" timeout="0" info="">
[23:45:05.095]      // if-block "powered_down"
[23:45:05.095]        // =>  TRUE
[23:45:05.095]      <block atomic="false" info="">
[23:45:05.095]        Message(0, "Debug/System power-up request sent");
[23:45:05.098]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:45:05.100]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:45:05.100]      </block>
[23:45:05.100]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:45:05.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:45:05.102]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:45:05.102]        // while-condition  =>  FALSE
[23:45:05.102]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:45:05.102]      </control>
[23:45:05.102]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:45:05.102]        // if-block "(__protocol & 0xFFFF) == 1"
[23:45:05.102]          // =>  FALSE
[23:45:05.103]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:45:05.103]      </control>
[23:45:05.103]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:45:05.103]        // if-block "(__protocol & 0xFFFF) == 2"
[23:45:05.103]          // =>  TRUE
[23:45:05.103]        <block atomic="false" info="">
[23:45:05.103]          Message(0, "executing SWD power up");
[23:45:05.106]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:45:05.107]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:45:05.108]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:45:05.109]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:45:05.109]        </block>
[23:45:05.110]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:45:05.110]      </control>
[23:45:05.110]      // end if-block "powered_down"
[23:45:05.110]    </control>
[23:45:05.110]    <block atomic="false" info="">
[23:45:05.110]      __var DEBUG_PORT_VAL    = 0;
[23:45:05.110]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:45:05.111]      __var ACCESS_POINT_VAL  = 0;
[23:45:05.111]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:45:05.111]      __ap = 1; 
[23:45:05.111]        // -> [__ap <= 0x00000001]
[23:45:05.111]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:45:05.115]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:45:05.115]      __ap = 4;
[23:45:05.115]        // -> [__ap <= 0x00000004]
[23:45:05.116]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:45:05.121]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:45:05.121]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:45:05.121]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:45:05.124]    </block>
[23:45:05.124]    <block atomic="false" info="">
[23:45:05.125]      __var nReset = 0x80;
[23:45:05.125]        // -> [nReset <= 0x00000080]
[23:45:05.125]      __var canReadPins = 0;
[23:45:05.125]        // -> [canReadPins <= 0x00000000]
[23:45:05.125]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:45:05.128]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:45:05.128]        // -> [canReadPins <= 0x00000001]
[23:45:05.128]    </block>
[23:45:05.128]    <control if="" while="1" timeout="200" info="">
[23:45:05.129]      // while "1"  (timeout="200")
[23:45:05.129]      // while-condition  =>  TRUE
[23:45:05.129]      // while "1"  (timeout="200")
[23:45:05.129]      // while-condition  =>  TRUE
[23:45:05.129]      // while "1"  (timeout="200")
[23:45:05.129]      // while-condition  =>  TRUE
[23:45:05.129]      // while "1"  (timeout="200")
[23:45:05.130]      // while-condition  =>  TRUE
[23:45:05.130]      // while "1"  (timeout="200")
[23:45:05.130]      // while-condition  =>  TRUE
[23:45:05.130]      // while "1"  (timeout="200")
[23:45:05.130]      // while-condition  =>  TRUE
[23:45:05.130]      // while "1"  (timeout="200")
[23:45:05.131]      // while-condition  =>  TRUE
[23:45:05.131]      // while "1"  (timeout="200")
[23:45:05.131]      // while-condition  =>  TRUE
[23:45:05.131]      // while "1"  (timeout="200")
[23:45:05.131]      // while-condition  =>  TRUE
[23:45:05.131]      // while "1"  (timeout="200")
[23:45:05.131]      // while-condition  =>  TRUE
[23:45:05.131]      // while "1"  (timeout="200")
[23:45:05.131]      // while-condition  =>  TRUE
[23:45:05.131]      // while "1"  (timeout="200")
[23:45:05.131]      // while-condition  =>  TRUE
[23:45:05.132]      // while "1"  (timeout="200")
[23:45:05.132]      // while-condition  =>  TRUE
[23:45:05.132]      // while "1"  (timeout="200")
[23:45:05.132]      // while-condition  =>  TRUE
[23:45:05.132]      // while "1"  (timeout="200")
[23:45:05.132]      // while-condition  =>  TRUE
[23:45:05.132]      // while "1"  (timeout="200")
[23:45:05.132]      // while-condition  =>  TRUE
[23:45:05.132]      // while "1"  (timeout="200")
[23:45:05.132]      // while-condition  =>  TRUE
[23:45:05.132]      // while "1"  (timeout="200")
[23:45:05.132]      // while-condition  =>  TRUE
[23:45:05.132]      // while "1"  (timeout="200")
[23:45:05.132]      // while-condition  =>  TRUE
[23:45:05.132]      // while "1"  (timeout="200")
[23:45:05.132]      // while-condition  =>  TRUE
[23:45:05.132]      // while "1"  (timeout="200")
[23:45:05.132]      // while-condition  =>  TRUE
[23:45:05.132]      // while "1"  (timeout="200")
[23:45:05.132]      // while-condition  =>  TRUE
[23:45:05.132]      // while "1"  (timeout="200")
[23:45:05.135]      // while-condition  =>  TRUE
[23:45:05.135]      // while "1"  (timeout="200")
[23:45:05.135]      // while-condition  =>  TRUE
[23:45:05.135]      // while "1"  (timeout="200")
[23:45:05.136]      // while-condition  =>  TRUE
[23:45:05.136]      // while "1"  (timeout="200")
[23:45:05.136]      // while-condition  =>  TRUE
[23:45:05.136]      // while "1"  (timeout="200")
[23:45:05.136]      // while-condition  =>  TRUE
[23:45:05.136]      // while "1"  (timeout="200")
[23:45:05.136]      // while-condition  =>  TRUE
[23:45:05.137]      // while "1"  (timeout="200")
[23:45:05.137]      // while-condition  =>  TRUE
[23:45:05.137]      // while "1"  (timeout="200")
[23:45:05.137]      // while-condition  =>  TRUE
[23:45:05.137]      // while "1"  (timeout="200")
[23:45:05.137]      // while-condition  =>  TRUE
[23:45:05.137]      // while "1"  (timeout="200")
[23:45:05.137]      // while-condition  =>  TRUE
[23:45:05.137]      // while "1"  (timeout="200")
[23:45:05.138]      // while-condition  =>  TRUE
[23:45:05.138]      // while "1"  (timeout="200")
[23:45:05.138]      // while-condition  =>  TRUE
[23:45:05.138]      // while "1"  (timeout="200")
[23:45:05.138]      // while-condition  =>  TRUE
[23:45:05.138]      // while "1"  (timeout="200")
[23:45:05.138]      // while-condition  =>  TRUE
[23:45:05.139]      // while "1"  (timeout="200")
[23:45:05.139]      // while-condition  =>  TRUE
[23:45:05.139]      // while "1"  (timeout="200")
[23:45:05.139]      // while-condition  =>  TRUE
[23:45:05.140]      // while "1"  (timeout="200")
[23:45:05.140]      // while-condition  =>  TRUE
[23:45:05.140]      // while "1"  (timeout="200")
[23:45:05.140]      // while-condition  =>  TRUE
[23:45:05.140]      // while "1"  (timeout="200")
[23:45:05.140]      // while-condition  =>  TRUE
[23:45:05.140]      // while "1"  (timeout="200")
[23:45:05.140]      // while-condition  =>  TRUE
[23:45:05.140]      // while "1"  (timeout="200")
[23:45:05.140]      // while-condition  =>  TRUE
[23:45:05.140]      // while "1"  (timeout="200")
[23:45:05.140]      // while-condition  =>  TRUE
[23:45:05.140]      // while "1"  (timeout="200")
[23:45:05.140]      // while-condition  =>  TRUE
[23:45:05.140]      // while "1"  (timeout="200")
[23:45:05.140]      // while-condition  =>  TRUE
[23:45:05.140]      // while "1"  (timeout="200")
[23:45:05.140]      // while-condition  =>  TRUE
[23:45:05.140]      // while "1"  (timeout="200")
[23:45:05.142]      // while-condition  =>  TRUE
[23:45:05.142]      // while "1"  (timeout="200")
[23:45:05.142]      // while-condition  =>  TRUE
[23:45:05.142]      // while "1"  (timeout="200")
[23:45:05.142]      // while-condition  =>  TRUE
[23:45:05.142]      // while "1"  (timeout="200")
[23:45:05.142]      // while-condition  =>  TRUE
[23:45:05.142]      // while "1"  (timeout="200")
[23:45:05.142]      // while-condition  =>  TRUE
[23:45:05.142]      // while "1"  (timeout="200")
[23:45:05.142]      // while-condition  =>  TRUE
[23:45:05.144]      // while "1"  (timeout="200")
[23:45:05.144]      // while  =>  TIMEOUT
[23:45:05.144]      // end while "1"
[23:45:05.144]    </control>
[23:45:05.144]    <control if="canReadPins" while="" timeout="0" info="">
[23:45:05.144]      // if-block "canReadPins"
[23:45:05.144]        // =>  TRUE
[23:45:05.144]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:45:05.145]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:45:05.145]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:45:05.145]        // while-condition  =>  FALSE
[23:45:05.145]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:45:05.145]      </control>
[23:45:05.145]      // end if-block "canReadPins"
[23:45:05.145]    </control>
[23:45:05.145]    <control if="!canReadPins" while="" timeout="0" info="">
[23:45:05.145]      // if-block "!canReadPins"
[23:45:05.145]        // =>  FALSE
[23:45:05.148]      // skip if-block "!canReadPins"
[23:45:05.148]    </control>
[23:45:05.148]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:45:05.148]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:45:05.148]        // =>  TRUE
[23:45:05.148]      <block atomic="false" info="">
[23:45:05.148]        WriteAP(0x00, 0x190008);
[23:45:05.152]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:45:05.152]        WriteAP(0xF0, 0x01);
[23:45:05.152]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:45:05.152]      </block>
[23:45:05.152]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:45:05.152]    </control>
[23:45:05.156]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:45:05.156]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:45:05.156]        // =>  FALSE
[23:45:05.156]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:45:05.156]    </control>
[23:45:05.156]    <block atomic="false" info="">
[23:45:05.156]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:45:05.156]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:45:05.156]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:45:05.156]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:45:05.160]      __ap = 0; //lets make sure we reset the access point selection
[23:45:05.160]        // -> [__ap <= 0x00000000]
[23:45:05.160]    </block>
[23:45:05.160]  </sequence>
[23:45:05.160]  
[23:45:05.181]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:45:05.181]  
[23:45:05.181]  <debugvars>
[23:45:05.181]    // Pre-defined
[23:45:05.181]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:45:05.181]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:45:05.181]    __dp=0x00000000
[23:45:05.181]    __ap=0x00000000
[23:45:05.181]    __traceout=0x00000000      (Trace Disabled)
[23:45:05.181]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:45:05.181]    __FlashAddr=0x00000000
[23:45:05.181]    __FlashLen=0x00000000
[23:45:05.181]    __FlashArg=0x00000000
[23:45:05.181]    __FlashOp=0x00000000
[23:45:05.181]    __Result=0x00000000
[23:45:05.181]  </debugvars>
[23:45:05.181]  
[23:45:05.181]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:45:05.181]    <block atomic="false" info="">
[23:45:05.181]      __var deviceID = 0;
[23:45:05.181]        // -> [deviceID <= 0x00000000]
[23:45:05.181]      __var version = 0;
[23:45:05.185]        // -> [version <= 0x00000000]
[23:45:05.185]      __var partNum = 0;
[23:45:05.185]        // -> [partNum <= 0x00000000]
[23:45:05.185]      __var manuf = 0;
[23:45:05.185]        // -> [manuf <= 0x00000000]
[23:45:05.185]      __var isMSPM0G1X0X_G3X0X = 0;
[23:45:05.185]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:45:05.185]      __var isProduction = 0;
[23:45:05.186]        // -> [isProduction <= 0x00000000]
[23:45:05.186]      __var continueId = 0;
[23:45:05.186]        // -> [continueId <= 0x00000000]
[23:45:05.186]      deviceID =   Read32(0x41C40004);
[23:45:05.189]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:45:05.189]        // -> [deviceID <= 0x2BB8802F]
[23:45:05.189]      version = deviceID >> 28;
[23:45:05.189]        // -> [version <= 0x00000002]
[23:45:05.189]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:45:05.189]        // -> [partNum <= 0x0000BB88]
[23:45:05.189]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:45:05.189]        // -> [manuf <= 0x00000017]
[23:45:05.189]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:45:05.189]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:45:05.189]      isProduction = (version > 0);
[23:45:05.189]        // -> [isProduction <= 0x00000001]
[23:45:05.189]    </block>
[23:45:05.189]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:45:05.189]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:45:05.189]        // =>  FALSE
[23:45:05.189]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:45:05.189]    </control>
[23:45:05.189]    <control if="continueId == 4" while="" timeout="0" info="">
[23:45:05.189]      // if-block "continueId == 4"
[23:45:05.189]        // =>  FALSE
[23:45:05.193]      // skip if-block "continueId == 4"
[23:45:05.193]    </control>
[23:45:05.193]    <control if="!isProduction" while="" timeout="0" info="">
[23:45:05.193]      // if-block "!isProduction"
[23:45:05.193]        // =>  FALSE
[23:45:05.193]      // skip if-block "!isProduction"
[23:45:05.194]    </control>
[23:45:05.194]  </sequence>
[23:45:05.194]  
[23:48:20.444]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:48:20.444]  
[23:48:20.445]  <debugvars>
[23:48:20.445]    // Pre-defined
[23:48:20.445]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:48:20.445]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:48:20.445]    __dp=0x00000000
[23:48:20.445]    __ap=0x00000000
[23:48:20.445]    __traceout=0x00000000      (Trace Disabled)
[23:48:20.445]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:48:20.445]    __FlashAddr=0x00000000
[23:48:20.445]    __FlashLen=0x00000000
[23:48:20.445]    __FlashArg=0x00000000
[23:48:20.447]    __FlashOp=0x00000000
[23:48:20.447]    __Result=0x00000000
[23:48:20.447]  </debugvars>
[23:48:20.447]  
[23:48:20.447]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:48:20.447]    <block atomic="false" info="">
[23:48:20.447]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:48:20.447]        // -> [isSWJ <= 0x00000001]
[23:48:20.447]      __var hasDormant = __protocol & 0x00020000;
[23:48:20.447]        // -> [hasDormant <= 0x00000000]
[23:48:20.447]      __var protType   = __protocol & 0x0000FFFF;
[23:48:20.448]        // -> [protType <= 0x00000002]
[23:48:20.448]    </block>
[23:48:20.448]    <control if="protType == 1" while="" timeout="0" info="">
[23:48:20.448]      // if-block "protType == 1"
[23:48:20.448]        // =>  FALSE
[23:48:20.448]      // skip if-block "protType == 1"
[23:48:20.448]    </control>
[23:48:20.448]    <control if="protType == 2" while="" timeout="0" info="">
[23:48:20.448]      // if-block "protType == 2"
[23:48:20.448]        // =>  TRUE
[23:48:20.448]      <control if="isSWJ" while="" timeout="0" info="">
[23:48:20.448]        // if-block "isSWJ"
[23:48:20.448]          // =>  TRUE
[23:48:20.448]        <control if="hasDormant" while="" timeout="0" info="">
[23:48:20.448]          // if-block "hasDormant"
[23:48:20.448]            // =>  FALSE
[23:48:20.448]          // skip if-block "hasDormant"
[23:48:20.448]        </control>
[23:48:20.448]        <control if="!hasDormant" while="" timeout="0" info="">
[23:48:20.448]          // if-block "!hasDormant"
[23:48:20.448]            // =>  TRUE
[23:48:20.448]          <block atomic="false" info="">
[23:48:20.448]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:48:20.448]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:48:20.452]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:48:20.452]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:48:20.452]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:48:20.454]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:48:20.454]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:48:20.456]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:48:20.456]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:48:20.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:48:20.458]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:48:20.458]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:48:20.458]          </block>
[23:48:20.458]          // end if-block "!hasDormant"
[23:48:20.460]        </control>
[23:48:20.460]        // end if-block "isSWJ"
[23:48:20.460]      </control>
[23:48:20.460]      <control if="!isSWJ" while="" timeout="0" info="">
[23:48:20.460]        // if-block "!isSWJ"
[23:48:20.460]          // =>  FALSE
[23:48:20.460]        // skip if-block "!isSWJ"
[23:48:20.460]      </control>
[23:48:20.460]      <block atomic="false" info="">
[23:48:20.460]        ReadDP(0x0);
[23:48:20.460]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:48:20.460]      </block>
[23:48:20.460]      // end if-block "protType == 2"
[23:48:20.460]    </control>
[23:48:20.460]  </sequence>
[23:48:20.460]  
[23:48:20.465]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:48:20.465]  
[23:48:20.465]  <debugvars>
[23:48:20.465]    // Pre-defined
[23:48:20.465]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:48:20.465]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:48:20.465]    __dp=0x00000000
[23:48:20.466]    __ap=0x00000000
[23:48:20.466]    __traceout=0x00000000      (Trace Disabled)
[23:48:20.466]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:48:20.466]    __FlashAddr=0x00000000
[23:48:20.466]    __FlashLen=0x00000000
[23:48:20.466]    __FlashArg=0x00000000
[23:48:20.466]    __FlashOp=0x00000000
[23:48:20.466]    __Result=0x00000000
[23:48:20.466]  </debugvars>
[23:48:20.466]  
[23:48:20.466]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:48:20.466]    <block atomic="false" info="">
[23:48:20.466]      __var SW_DP_ABORT       = 0x0;
[23:48:20.466]        // -> [SW_DP_ABORT <= 0x00000000]
[23:48:20.466]      __var DP_CTRL_STAT      = 0x4;
[23:48:20.466]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:48:20.466]      __var DP_SELECT         = 0x8;
[23:48:20.466]        // -> [DP_SELECT <= 0x00000008]
[23:48:20.466]      __var powered_down      = 0;
[23:48:20.466]        // -> [powered_down <= 0x00000000]
[23:48:20.466]      WriteDP(DP_SELECT, 0x00000000);
[23:48:20.468]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:48:20.468]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:48:20.468]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:48:20.468]        // -> [powered_down <= 0x00000001]
[23:48:20.468]    </block>
[23:48:20.468]    <control if="powered_down" while="" timeout="0" info="">
[23:48:20.468]      // if-block "powered_down"
[23:48:20.468]        // =>  TRUE
[23:48:20.468]      <block atomic="false" info="">
[23:48:20.468]        Message(0, "Debug/System power-up request sent");
[23:48:20.468]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:48:20.472]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:48:20.472]      </block>
[23:48:20.472]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:48:20.472]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:48:20.474]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:48:20.474]        // while-condition  =>  FALSE
[23:48:20.474]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:48:20.474]      </control>
[23:48:20.474]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:48:20.474]        // if-block "(__protocol & 0xFFFF) == 1"
[23:48:20.474]          // =>  FALSE
[23:48:20.474]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:48:20.474]      </control>
[23:48:20.474]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:48:20.474]        // if-block "(__protocol & 0xFFFF) == 2"
[23:48:20.474]          // =>  TRUE
[23:48:20.474]        <block atomic="false" info="">
[23:48:20.474]          Message(0, "executing SWD power up");
[23:48:20.476]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:48:20.480]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:48:20.480]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:48:20.480]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:48:20.480]        </block>
[23:48:20.480]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:48:20.480]      </control>
[23:48:20.480]      // end if-block "powered_down"
[23:48:20.480]    </control>
[23:48:20.484]    <block atomic="false" info="">
[23:48:20.484]      __var DEBUG_PORT_VAL    = 0;
[23:48:20.484]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:48:20.484]      __var ACCESS_POINT_VAL  = 0;
[23:48:20.484]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:48:20.484]      __ap = 1; 
[23:48:20.484]        // -> [__ap <= 0x00000001]
[23:48:20.484]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:48:20.484]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:48:20.484]      __ap = 4;
[23:48:20.488]        // -> [__ap <= 0x00000004]
[23:48:20.488]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:48:20.488]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:48:20.488]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:48:20.488]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:48:20.492]    </block>
[23:48:20.492]    <block atomic="false" info="">
[23:48:20.492]      __var nReset = 0x80;
[23:48:20.492]        // -> [nReset <= 0x00000080]
[23:48:20.492]      __var canReadPins = 0;
[23:48:20.492]        // -> [canReadPins <= 0x00000000]
[23:48:20.492]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:48:20.494]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:48:20.494]        // -> [canReadPins <= 0x00000001]
[23:48:20.494]    </block>
[23:48:20.494]    <control if="" while="1" timeout="200" info="">
[23:48:20.494]      // while "1"  (timeout="200")
[23:48:20.494]      // while-condition  =>  TRUE
[23:48:20.496]      // while "1"  (timeout="200")
[23:48:20.496]      // while-condition  =>  TRUE
[23:48:20.496]      // while "1"  (timeout="200")
[23:48:20.496]      // while-condition  =>  TRUE
[23:48:20.496]      // while "1"  (timeout="200")
[23:48:20.496]      // while-condition  =>  TRUE
[23:48:20.496]      // while "1"  (timeout="200")
[23:48:20.496]      // while-condition  =>  TRUE
[23:48:20.496]      // while "1"  (timeout="200")
[23:48:20.496]      // while-condition  =>  TRUE
[23:48:20.496]      // while "1"  (timeout="200")
[23:48:20.496]      // while-condition  =>  TRUE
[23:48:20.496]      // while "1"  (timeout="200")
[23:48:20.496]      // while-condition  =>  TRUE
[23:48:20.496]      // while "1"  (timeout="200")
[23:48:20.498]      // while-condition  =>  TRUE
[23:48:20.498]      // while "1"  (timeout="200")
[23:48:20.498]      // while-condition  =>  TRUE
[23:48:20.498]      // while "1"  (timeout="200")
[23:48:20.498]      // while-condition  =>  TRUE
[23:48:20.498]      // while "1"  (timeout="200")
[23:48:20.498]      // while-condition  =>  TRUE
[23:48:20.498]      // while "1"  (timeout="200")
[23:48:20.498]      // while-condition  =>  TRUE
[23:48:20.499]      // while "1"  (timeout="200")
[23:48:20.499]      // while-condition  =>  TRUE
[23:48:20.499]      // while "1"  (timeout="200")
[23:48:20.499]      // while-condition  =>  TRUE
[23:48:20.499]      // while "1"  (timeout="200")
[23:48:20.499]      // while-condition  =>  TRUE
[23:48:20.499]      // while "1"  (timeout="200")
[23:48:20.499]      // while-condition  =>  TRUE
[23:48:20.499]      // while "1"  (timeout="200")
[23:48:20.499]      // while-condition  =>  TRUE
[23:48:20.499]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.500]      // while-condition  =>  TRUE
[23:48:20.500]      // while "1"  (timeout="200")
[23:48:20.504]      // while-condition  =>  TRUE
[23:48:20.504]      // while "1"  (timeout="200")
[23:48:20.504]      // while  =>  TIMEOUT
[23:48:20.504]      // end while "1"
[23:48:20.504]    </control>
[23:48:20.504]    <control if="canReadPins" while="" timeout="0" info="">
[23:48:20.504]      // if-block "canReadPins"
[23:48:20.504]        // =>  TRUE
[23:48:20.504]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:48:20.504]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:48:20.504]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:48:20.504]        // while-condition  =>  FALSE
[23:48:20.504]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:48:20.504]      </control>
[23:48:20.504]      // end if-block "canReadPins"
[23:48:20.504]    </control>
[23:48:20.504]    <control if="!canReadPins" while="" timeout="0" info="">
[23:48:20.504]      // if-block "!canReadPins"
[23:48:20.504]        // =>  FALSE
[23:48:20.504]      // skip if-block "!canReadPins"
[23:48:20.504]    </control>
[23:48:20.504]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:48:20.508]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:48:20.508]        // =>  TRUE
[23:48:20.508]      <block atomic="false" info="">
[23:48:20.508]        WriteAP(0x00, 0x190008);
[23:48:20.508]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:48:20.508]        WriteAP(0xF0, 0x01);
[23:48:20.513]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:48:20.513]      </block>
[23:48:20.513]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:48:20.513]    </control>
[23:48:20.513]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:48:20.513]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:48:20.513]        // =>  FALSE
[23:48:20.513]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:48:20.513]    </control>
[23:48:20.513]    <block atomic="false" info="">
[23:48:20.513]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:48:20.517]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:48:20.517]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:48:20.517]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:48:20.520]      __ap = 0; //lets make sure we reset the access point selection
[23:48:20.520]        // -> [__ap <= 0x00000000]
[23:48:20.520]    </block>
[23:48:20.520]  </sequence>
[23:48:20.520]  
[23:48:20.541]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:48:20.541]  
[23:48:20.541]  <debugvars>
[23:48:20.541]    // Pre-defined
[23:48:20.541]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:48:20.541]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:48:20.541]    __dp=0x00000000
[23:48:20.541]    __ap=0x00000000
[23:48:20.544]    __traceout=0x00000000      (Trace Disabled)
[23:48:20.544]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:48:20.544]    __FlashAddr=0x00000000
[23:48:20.544]    __FlashLen=0x00000000
[23:48:20.544]    __FlashArg=0x00000000
[23:48:20.544]    __FlashOp=0x00000000
[23:48:20.544]    __Result=0x00000000
[23:48:20.544]  </debugvars>
[23:48:20.544]  
[23:48:20.544]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:48:20.544]    <block atomic="false" info="">
[23:48:20.544]      __var deviceID = 0;
[23:48:20.544]        // -> [deviceID <= 0x00000000]
[23:48:20.544]      __var version = 0;
[23:48:20.544]        // -> [version <= 0x00000000]
[23:48:20.544]      __var partNum = 0;
[23:48:20.544]        // -> [partNum <= 0x00000000]
[23:48:20.544]      __var manuf = 0;
[23:48:20.544]        // -> [manuf <= 0x00000000]
[23:48:20.544]      __var isMSPM0G1X0X_G3X0X = 0;
[23:48:20.544]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:48:20.544]      __var isProduction = 0;
[23:48:20.544]        // -> [isProduction <= 0x00000000]
[23:48:20.544]      __var continueId = 0;
[23:48:20.544]        // -> [continueId <= 0x00000000]
[23:48:20.544]      deviceID =   Read32(0x41C40004);
[23:48:20.548]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:48:20.548]        // -> [deviceID <= 0x2BB8802F]
[23:48:20.548]      version = deviceID >> 28;
[23:48:20.548]        // -> [version <= 0x00000002]
[23:48:20.548]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:48:20.548]        // -> [partNum <= 0x0000BB88]
[23:48:20.548]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:48:20.548]        // -> [manuf <= 0x00000017]
[23:48:20.548]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:48:20.548]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:48:20.548]      isProduction = (version > 0);
[23:48:20.548]        // -> [isProduction <= 0x00000001]
[23:48:20.548]    </block>
[23:48:20.548]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:48:20.548]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:48:20.552]        // =>  FALSE
[23:48:20.552]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:48:20.552]    </control>
[23:48:20.552]    <control if="continueId == 4" while="" timeout="0" info="">
[23:48:20.552]      // if-block "continueId == 4"
[23:48:20.552]        // =>  FALSE
[23:48:20.552]      // skip if-block "continueId == 4"
[23:48:20.552]    </control>
[23:48:20.552]    <control if="!isProduction" while="" timeout="0" info="">
[23:48:20.553]      // if-block "!isProduction"
[23:48:20.553]        // =>  FALSE
[23:48:20.553]      // skip if-block "!isProduction"
[23:48:20.553]    </control>
[23:48:20.553]  </sequence>
[23:48:20.553]  
[23:48:53.762]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:48:53.762]  
[23:48:53.762]  <debugvars>
[23:48:53.762]    // Pre-defined
[23:48:53.762]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:48:53.762]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:48:53.763]    __dp=0x00000000
[23:48:53.763]    __ap=0x00000000
[23:48:53.763]    __traceout=0x00000000      (Trace Disabled)
[23:48:53.763]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:48:53.763]    __FlashAddr=0x00000000
[23:48:53.763]    __FlashLen=0x00000000
[23:48:53.763]    __FlashArg=0x00000000
[23:48:53.763]    __FlashOp=0x00000000
[23:48:53.763]    __Result=0x00000000
[23:48:53.763]  </debugvars>
[23:48:53.763]  
[23:48:53.763]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:48:53.763]    <block atomic="false" info="">
[23:48:53.763]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:48:53.763]        // -> [isSWJ <= 0x00000001]
[23:48:53.763]      __var hasDormant = __protocol & 0x00020000;
[23:48:53.763]        // -> [hasDormant <= 0x00000000]
[23:48:53.763]      __var protType   = __protocol & 0x0000FFFF;
[23:48:53.763]        // -> [protType <= 0x00000002]
[23:48:53.763]    </block>
[23:48:53.763]    <control if="protType == 1" while="" timeout="0" info="">
[23:48:53.763]      // if-block "protType == 1"
[23:48:53.763]        // =>  FALSE
[23:48:53.763]      // skip if-block "protType == 1"
[23:48:53.763]    </control>
[23:48:53.763]    <control if="protType == 2" while="" timeout="0" info="">
[23:48:53.763]      // if-block "protType == 2"
[23:48:53.763]        // =>  TRUE
[23:48:53.763]      <control if="isSWJ" while="" timeout="0" info="">
[23:48:53.763]        // if-block "isSWJ"
[23:48:53.763]          // =>  TRUE
[23:48:53.766]        <control if="hasDormant" while="" timeout="0" info="">
[23:48:53.766]          // if-block "hasDormant"
[23:48:53.766]            // =>  FALSE
[23:48:53.766]          // skip if-block "hasDormant"
[23:48:53.766]        </control>
[23:48:53.766]        <control if="!hasDormant" while="" timeout="0" info="">
[23:48:53.766]          // if-block "!hasDormant"
[23:48:53.766]            // =>  TRUE
[23:48:53.766]          <block atomic="false" info="">
[23:48:53.766]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:48:53.768]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:48:53.768]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:48:53.768]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:48:53.768]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:48:53.771]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:48:53.771]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:48:53.773]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:48:53.773]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:48:53.774]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:48:53.774]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:48:53.776]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:48:53.776]          </block>
[23:48:53.776]          // end if-block "!hasDormant"
[23:48:53.776]        </control>
[23:48:53.776]        // end if-block "isSWJ"
[23:48:53.776]      </control>
[23:48:53.776]      <control if="!isSWJ" while="" timeout="0" info="">
[23:48:53.776]        // if-block "!isSWJ"
[23:48:53.776]          // =>  FALSE
[23:48:53.776]        // skip if-block "!isSWJ"
[23:48:53.777]      </control>
[23:48:53.777]      <block atomic="false" info="">
[23:48:53.777]        ReadDP(0x0);
[23:48:53.779]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:48:53.779]      </block>
[23:48:53.779]      // end if-block "protType == 2"
[23:48:53.779]    </control>
[23:48:53.779]  </sequence>
[23:48:53.779]  
[23:48:53.786]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:48:53.786]  
[23:48:53.786]  <debugvars>
[23:48:53.787]    // Pre-defined
[23:48:53.787]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:48:53.787]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:48:53.787]    __dp=0x00000000
[23:48:53.787]    __ap=0x00000000
[23:48:53.787]    __traceout=0x00000000      (Trace Disabled)
[23:48:53.787]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:48:53.787]    __FlashAddr=0x00000000
[23:48:53.787]    __FlashLen=0x00000000
[23:48:53.787]    __FlashArg=0x00000000
[23:48:53.787]    __FlashOp=0x00000000
[23:48:53.788]    __Result=0x00000000
[23:48:53.788]  </debugvars>
[23:48:53.788]  
[23:48:53.788]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:48:53.788]    <block atomic="false" info="">
[23:48:53.788]      __var SW_DP_ABORT       = 0x0;
[23:48:53.788]        // -> [SW_DP_ABORT <= 0x00000000]
[23:48:53.788]      __var DP_CTRL_STAT      = 0x4;
[23:48:53.788]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:48:53.788]      __var DP_SELECT         = 0x8;
[23:48:53.788]        // -> [DP_SELECT <= 0x00000008]
[23:48:53.789]      __var powered_down      = 0;
[23:48:53.789]        // -> [powered_down <= 0x00000000]
[23:48:53.789]      WriteDP(DP_SELECT, 0x00000000);
[23:48:53.791]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:48:53.791]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:48:53.793]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:48:53.793]        // -> [powered_down <= 0x00000001]
[23:48:53.793]    </block>
[23:48:53.793]    <control if="powered_down" while="" timeout="0" info="">
[23:48:53.793]      // if-block "powered_down"
[23:48:53.793]        // =>  TRUE
[23:48:53.794]      <block atomic="false" info="">
[23:48:53.794]        Message(0, "Debug/System power-up request sent");
[23:48:53.796]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:48:53.798]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:48:53.798]      </block>
[23:48:53.798]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:48:53.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:48:53.800]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:48:53.800]        // while-condition  =>  FALSE
[23:48:53.800]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:48:53.800]      </control>
[23:48:53.800]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:48:53.800]        // if-block "(__protocol & 0xFFFF) == 1"
[23:48:53.800]          // =>  FALSE
[23:48:53.800]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:48:53.801]      </control>
[23:48:53.801]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:48:53.801]        // if-block "(__protocol & 0xFFFF) == 2"
[23:48:53.801]          // =>  TRUE
[23:48:53.801]        <block atomic="false" info="">
[23:48:53.801]          Message(0, "executing SWD power up");
[23:48:53.802]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:48:53.805]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:48:53.805]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:48:53.807]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:48:53.807]        </block>
[23:48:53.807]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:48:53.807]      </control>
[23:48:53.807]      // end if-block "powered_down"
[23:48:53.807]    </control>
[23:48:53.807]    <block atomic="false" info="">
[23:48:53.807]      __var DEBUG_PORT_VAL    = 0;
[23:48:53.807]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:48:53.807]      __var ACCESS_POINT_VAL  = 0;
[23:48:53.807]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:48:53.808]      __ap = 1; 
[23:48:53.808]        // -> [__ap <= 0x00000001]
[23:48:53.808]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:48:53.811]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:48:53.811]      __ap = 4;
[23:48:53.811]        // -> [__ap <= 0x00000004]
[23:48:53.812]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:48:53.813]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:48:53.813]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:48:53.813]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:48:53.816]    </block>
[23:48:53.816]    <block atomic="false" info="">
[23:48:53.816]      __var nReset = 0x80;
[23:48:53.816]        // -> [nReset <= 0x00000080]
[23:48:53.816]      __var canReadPins = 0;
[23:48:53.816]        // -> [canReadPins <= 0x00000000]
[23:48:53.816]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:48:53.817]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:48:53.817]        // -> [canReadPins <= 0x00000001]
[23:48:53.817]    </block>
[23:48:53.817]    <control if="" while="1" timeout="200" info="">
[23:48:53.817]      // while "1"  (timeout="200")
[23:48:53.817]      // while-condition  =>  TRUE
[23:48:53.817]      // while "1"  (timeout="200")
[23:48:53.817]      // while-condition  =>  TRUE
[23:48:53.817]      // while "1"  (timeout="200")
[23:48:53.817]      // while-condition  =>  TRUE
[23:48:53.817]      // while "1"  (timeout="200")
[23:48:53.817]      // while-condition  =>  TRUE
[23:48:53.817]      // while "1"  (timeout="200")
[23:48:53.817]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.820]      // while "1"  (timeout="200")
[23:48:53.820]      // while-condition  =>  TRUE
[23:48:53.824]      // while "1"  (timeout="200")
[23:48:53.824]      // while-condition  =>  TRUE
[23:48:53.824]      // while "1"  (timeout="200")
[23:48:53.824]      // while-condition  =>  TRUE
[23:48:53.824]      // while "1"  (timeout="200")
[23:48:53.824]      // while-condition  =>  TRUE
[23:48:53.824]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.825]      // while "1"  (timeout="200")
[23:48:53.825]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.828]      // while "1"  (timeout="200")
[23:48:53.828]      // while-condition  =>  TRUE
[23:48:53.832]      // while "1"  (timeout="200")
[23:48:53.832]      // while  =>  TIMEOUT
[23:48:53.832]      // end while "1"
[23:48:53.832]    </control>
[23:48:53.832]    <control if="canReadPins" while="" timeout="0" info="">
[23:48:53.832]      // if-block "canReadPins"
[23:48:53.832]        // =>  TRUE
[23:48:53.832]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:48:53.832]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:48:53.838]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:48:53.838]        // while-condition  =>  FALSE
[23:48:53.838]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:48:53.838]      </control>
[23:48:53.838]      // end if-block "canReadPins"
[23:48:53.838]    </control>
[23:48:53.838]    <control if="!canReadPins" while="" timeout="0" info="">
[23:48:53.838]      // if-block "!canReadPins"
[23:48:53.838]        // =>  FALSE
[23:48:53.838]      // skip if-block "!canReadPins"
[23:48:53.838]    </control>
[23:48:53.838]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:48:53.838]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:48:53.841]        // =>  TRUE
[23:48:53.841]      <block atomic="false" info="">
[23:48:53.841]        WriteAP(0x00, 0x190008);
[23:48:53.843]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:48:53.843]        WriteAP(0xF0, 0x01);
[23:48:53.845]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:48:53.845]      </block>
[23:48:53.845]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:48:53.845]    </control>
[23:48:53.845]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:48:53.845]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:48:53.848]        // =>  FALSE
[23:48:53.848]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:48:53.848]    </control>
[23:48:53.848]    <block atomic="false" info="">
[23:48:53.848]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:48:53.852]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:48:53.852]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:48:53.852]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:48:53.854]      __ap = 0; //lets make sure we reset the access point selection
[23:48:53.854]        // -> [__ap <= 0x00000000]
[23:48:53.854]    </block>
[23:48:53.854]  </sequence>
[23:48:53.854]  
[23:48:53.875]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:48:53.875]  
[23:48:53.875]  <debugvars>
[23:48:53.875]    // Pre-defined
[23:48:53.875]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:48:53.875]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:48:53.875]    __dp=0x00000000
[23:48:53.875]    __ap=0x00000000
[23:48:53.876]    __traceout=0x00000000      (Trace Disabled)
[23:48:53.876]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:48:53.876]    __FlashAddr=0x00000000
[23:48:53.876]    __FlashLen=0x00000000
[23:48:53.876]    __FlashArg=0x00000000
[23:48:53.876]    __FlashOp=0x00000000
[23:48:53.876]    __Result=0x00000000
[23:48:53.876]  </debugvars>
[23:48:53.876]  
[23:48:53.876]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:48:53.876]    <block atomic="false" info="">
[23:48:53.876]      __var deviceID = 0;
[23:48:53.876]        // -> [deviceID <= 0x00000000]
[23:48:53.876]      __var version = 0;
[23:48:53.876]        // -> [version <= 0x00000000]
[23:48:53.876]      __var partNum = 0;
[23:48:53.876]        // -> [partNum <= 0x00000000]
[23:48:53.876]      __var manuf = 0;
[23:48:53.876]        // -> [manuf <= 0x00000000]
[23:48:53.876]      __var isMSPM0G1X0X_G3X0X = 0;
[23:48:53.876]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:48:53.876]      __var isProduction = 0;
[23:48:53.878]        // -> [isProduction <= 0x00000000]
[23:48:53.878]      __var continueId = 0;
[23:48:53.878]        // -> [continueId <= 0x00000000]
[23:48:53.878]      deviceID =   Read32(0x41C40004);
[23:48:53.882]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:48:53.882]        // -> [deviceID <= 0x2BB8802F]
[23:48:53.882]      version = deviceID >> 28;
[23:48:53.882]        // -> [version <= 0x00000002]
[23:48:53.882]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:48:53.882]        // -> [partNum <= 0x0000BB88]
[23:48:53.882]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:48:53.882]        // -> [manuf <= 0x00000017]
[23:48:53.882]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:48:53.882]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:48:53.882]      isProduction = (version > 0);
[23:48:53.882]        // -> [isProduction <= 0x00000001]
[23:48:53.882]    </block>
[23:48:53.882]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:48:53.882]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:48:53.882]        // =>  FALSE
[23:48:53.882]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:48:53.882]    </control>
[23:48:53.882]    <control if="continueId == 4" while="" timeout="0" info="">
[23:48:53.882]      // if-block "continueId == 4"
[23:48:53.882]        // =>  FALSE
[23:48:53.882]      // skip if-block "continueId == 4"
[23:48:53.882]    </control>
[23:48:53.882]    <control if="!isProduction" while="" timeout="0" info="">
[23:48:53.882]      // if-block "!isProduction"
[23:48:53.882]        // =>  FALSE
[23:48:53.887]      // skip if-block "!isProduction"
[23:48:53.887]    </control>
[23:48:53.887]  </sequence>
[23:48:53.887]  
[23:54:59.147]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:54:59.147]  
[23:54:59.147]  <debugvars>
[23:54:59.147]    // Pre-defined
[23:54:59.147]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:54:59.147]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:54:59.147]    __dp=0x00000000
[23:54:59.147]    __ap=0x00000000
[23:54:59.147]    __traceout=0x00000000      (Trace Disabled)
[23:54:59.147]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:54:59.147]    __FlashAddr=0x00000000
[23:54:59.147]    __FlashLen=0x00000000
[23:54:59.147]    __FlashArg=0x00000000
[23:54:59.147]    __FlashOp=0x00000000
[23:54:59.147]    __Result=0x00000000
[23:54:59.147]  </debugvars>
[23:54:59.147]  
[23:54:59.147]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:54:59.147]    <block atomic="false" info="">
[23:54:59.147]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:54:59.147]        // -> [isSWJ <= 0x00000001]
[23:54:59.147]      __var hasDormant = __protocol & 0x00020000;
[23:54:59.147]        // -> [hasDormant <= 0x00000000]
[23:54:59.147]      __var protType   = __protocol & 0x0000FFFF;
[23:54:59.147]        // -> [protType <= 0x00000002]
[23:54:59.147]    </block>
[23:54:59.147]    <control if="protType == 1" while="" timeout="0" info="">
[23:54:59.147]      // if-block "protType == 1"
[23:54:59.147]        // =>  FALSE
[23:54:59.147]      // skip if-block "protType == 1"
[23:54:59.147]    </control>
[23:54:59.147]    <control if="protType == 2" while="" timeout="0" info="">
[23:54:59.147]      // if-block "protType == 2"
[23:54:59.147]        // =>  TRUE
[23:54:59.147]      <control if="isSWJ" while="" timeout="0" info="">
[23:54:59.147]        // if-block "isSWJ"
[23:54:59.147]          // =>  TRUE
[23:54:59.147]        <control if="hasDormant" while="" timeout="0" info="">
[23:54:59.147]          // if-block "hasDormant"
[23:54:59.147]            // =>  FALSE
[23:54:59.147]          // skip if-block "hasDormant"
[23:54:59.155]        </control>
[23:54:59.155]        <control if="!hasDormant" while="" timeout="0" info="">
[23:54:59.155]          // if-block "!hasDormant"
[23:54:59.155]            // =>  TRUE
[23:54:59.155]          <block atomic="false" info="">
[23:54:59.155]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:54:59.156]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:54:59.156]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:54:59.156]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:54:59.156]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:54:59.156]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:54:59.156]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:54:59.156]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:54:59.156]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:54:59.156]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:54:59.156]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:54:59.165]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:54:59.165]          </block>
[23:54:59.165]          // end if-block "!hasDormant"
[23:54:59.165]        </control>
[23:54:59.165]        // end if-block "isSWJ"
[23:54:59.165]      </control>
[23:54:59.165]      <control if="!isSWJ" while="" timeout="0" info="">
[23:54:59.165]        // if-block "!isSWJ"
[23:54:59.165]          // =>  FALSE
[23:54:59.165]        // skip if-block "!isSWJ"
[23:54:59.165]      </control>
[23:54:59.165]      <block atomic="false" info="">
[23:54:59.165]        ReadDP(0x0);
[23:54:59.168]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:54:59.168]      </block>
[23:54:59.168]      // end if-block "protType == 2"
[23:54:59.168]    </control>
[23:54:59.168]  </sequence>
[23:54:59.168]  
[23:54:59.168]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:54:59.168]  
[23:54:59.168]  <debugvars>
[23:54:59.168]    // Pre-defined
[23:54:59.168]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:54:59.168]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:54:59.168]    __dp=0x00000000
[23:54:59.168]    __ap=0x00000000
[23:54:59.168]    __traceout=0x00000000      (Trace Disabled)
[23:54:59.168]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:54:59.168]    __FlashAddr=0x00000000
[23:54:59.168]    __FlashLen=0x00000000
[23:54:59.168]    __FlashArg=0x00000000
[23:54:59.168]    __FlashOp=0x00000000
[23:54:59.168]    __Result=0x00000000
[23:54:59.168]  </debugvars>
[23:54:59.168]  
[23:54:59.168]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:54:59.168]    <block atomic="false" info="">
[23:54:59.168]      __var SW_DP_ABORT       = 0x0;
[23:54:59.168]        // -> [SW_DP_ABORT <= 0x00000000]
[23:54:59.168]      __var DP_CTRL_STAT      = 0x4;
[23:54:59.168]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:54:59.168]      __var DP_SELECT         = 0x8;
[23:54:59.168]        // -> [DP_SELECT <= 0x00000008]
[23:54:59.168]      __var powered_down      = 0;
[23:54:59.168]        // -> [powered_down <= 0x00000000]
[23:54:59.168]      WriteDP(DP_SELECT, 0x00000000);
[23:54:59.175]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:54:59.175]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:54:59.178]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:54:59.178]        // -> [powered_down <= 0x00000001]
[23:54:59.178]    </block>
[23:54:59.178]    <control if="powered_down" while="" timeout="0" info="">
[23:54:59.178]      // if-block "powered_down"
[23:54:59.178]        // =>  TRUE
[23:54:59.178]      <block atomic="false" info="">
[23:54:59.178]        Message(0, "Debug/System power-up request sent");
[23:54:59.178]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:54:59.178]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:54:59.178]      </block>
[23:54:59.178]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:54:59.178]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:54:59.178]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:54:59.178]        // while-condition  =>  FALSE
[23:54:59.178]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:54:59.178]      </control>
[23:54:59.178]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:54:59.178]        // if-block "(__protocol & 0xFFFF) == 1"
[23:54:59.178]          // =>  FALSE
[23:54:59.178]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:54:59.185]      </control>
[23:54:59.185]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:54:59.185]        // if-block "(__protocol & 0xFFFF) == 2"
[23:54:59.185]          // =>  TRUE
[23:54:59.185]        <block atomic="false" info="">
[23:54:59.185]          Message(0, "executing SWD power up");
[23:54:59.186]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:54:59.187]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:54:59.187]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:54:59.187]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:54:59.187]        </block>
[23:54:59.187]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:54:59.187]      </control>
[23:54:59.187]      // end if-block "powered_down"
[23:54:59.187]    </control>
[23:54:59.187]    <block atomic="false" info="">
[23:54:59.187]      __var DEBUG_PORT_VAL    = 0;
[23:54:59.187]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:54:59.187]      __var ACCESS_POINT_VAL  = 0;
[23:54:59.187]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:54:59.187]      __ap = 1; 
[23:54:59.187]        // -> [__ap <= 0x00000001]
[23:54:59.187]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:54:59.187]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:54:59.187]      __ap = 4;
[23:54:59.187]        // -> [__ap <= 0x00000004]
[23:54:59.187]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:54:59.199]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:54:59.199]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:54:59.199]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:54:59.199]    </block>
[23:54:59.199]    <block atomic="false" info="">
[23:54:59.199]      __var nReset = 0x80;
[23:54:59.199]        // -> [nReset <= 0x00000080]
[23:54:59.199]      __var canReadPins = 0;
[23:54:59.199]        // -> [canReadPins <= 0x00000000]
[23:54:59.199]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:54:59.199]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:54:59.199]        // -> [canReadPins <= 0x00000001]
[23:54:59.199]    </block>
[23:54:59.199]    <control if="" while="1" timeout="200" info="">
[23:54:59.199]      // while "1"  (timeout="200")
[23:54:59.199]      // while-condition  =>  TRUE
[23:54:59.199]      // while "1"  (timeout="200")
[23:54:59.199]      // while-condition  =>  TRUE
[23:54:59.199]      // while "1"  (timeout="200")
[23:54:59.199]      // while-condition  =>  TRUE
[23:54:59.199]      // while "1"  (timeout="200")
[23:54:59.199]      // while-condition  =>  TRUE
[23:54:59.199]      // while "1"  (timeout="200")
[23:54:59.199]      // while-condition  =>  TRUE
[23:54:59.199]      // while "1"  (timeout="200")
[23:54:59.199]      // while-condition  =>  TRUE
[23:54:59.199]      // while "1"  (timeout="200")
[23:54:59.199]      // while-condition  =>  TRUE
[23:54:59.199]      // while "1"  (timeout="200")
[23:54:59.199]      // while-condition  =>  TRUE
[23:54:59.199]      // while "1"  (timeout="200")
[23:54:59.199]      // while-condition  =>  TRUE
[23:54:59.199]      // while "1"  (timeout="200")
[23:54:59.199]      // while-condition  =>  TRUE
[23:54:59.199]      // while "1"  (timeout="200")
[23:54:59.199]      // while-condition  =>  TRUE
[23:54:59.206]      // while "1"  (timeout="200")
[23:54:59.206]      // while  =>  TIMEOUT
[23:54:59.206]      // end while "1"
[23:54:59.206]    </control>
[23:54:59.206]    <control if="canReadPins" while="" timeout="0" info="">
[23:54:59.206]      // if-block "canReadPins"
[23:54:59.206]        // =>  TRUE
[23:54:59.206]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:54:59.206]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:54:59.209]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:54:59.209]        // while-condition  =>  FALSE
[23:54:59.209]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:54:59.209]      </control>
[23:54:59.209]      // end if-block "canReadPins"
[23:54:59.209]    </control>
[23:54:59.209]    <control if="!canReadPins" while="" timeout="0" info="">
[23:54:59.209]      // if-block "!canReadPins"
[23:54:59.209]        // =>  FALSE
[23:54:59.209]      // skip if-block "!canReadPins"
[23:54:59.209]    </control>
[23:54:59.209]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:54:59.209]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:54:59.209]        // =>  TRUE
[23:54:59.209]      <block atomic="false" info="">
[23:54:59.209]        WriteAP(0x00, 0x190008);
[23:54:59.211]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:54:59.211]        WriteAP(0xF0, 0x01);
[23:54:59.216]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:54:59.216]      </block>
[23:54:59.216]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:54:59.216]    </control>
[23:54:59.216]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:54:59.216]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:54:59.217]        // =>  FALSE
[23:54:59.217]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:54:59.217]    </control>
[23:54:59.217]    <block atomic="false" info="">
[23:54:59.217]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:54:59.221]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:54:59.221]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:54:59.221]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:54:59.223]      __ap = 0; //lets make sure we reset the access point selection
[23:54:59.223]        // -> [__ap <= 0x00000000]
[23:54:59.223]    </block>
[23:54:59.223]  </sequence>
[23:54:59.223]  
[23:54:59.244]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:54:59.244]  
[23:54:59.244]  <debugvars>
[23:54:59.244]    // Pre-defined
[23:54:59.244]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:54:59.244]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:54:59.244]    __dp=0x00000000
[23:54:59.244]    __ap=0x00000000
[23:54:59.244]    __traceout=0x00000000      (Trace Disabled)
[23:54:59.244]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:54:59.244]    __FlashAddr=0x00000000
[23:54:59.244]    __FlashLen=0x00000000
[23:54:59.245]    __FlashArg=0x00000000
[23:54:59.245]    __FlashOp=0x00000000
[23:54:59.245]    __Result=0x00000000
[23:54:59.245]  </debugvars>
[23:54:59.245]  
[23:54:59.245]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:54:59.245]    <block atomic="false" info="">
[23:54:59.246]      __var deviceID = 0;
[23:54:59.246]        // -> [deviceID <= 0x00000000]
[23:54:59.246]      __var version = 0;
[23:54:59.246]        // -> [version <= 0x00000000]
[23:54:59.246]      __var partNum = 0;
[23:54:59.246]        // -> [partNum <= 0x00000000]
[23:54:59.246]      __var manuf = 0;
[23:54:59.246]        // -> [manuf <= 0x00000000]
[23:54:59.246]      __var isMSPM0G1X0X_G3X0X = 0;
[23:54:59.246]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:54:59.246]      __var isProduction = 0;
[23:54:59.246]        // -> [isProduction <= 0x00000000]
[23:54:59.246]      __var continueId = 0;
[23:54:59.246]        // -> [continueId <= 0x00000000]
[23:54:59.246]      deviceID =   Read32(0x41C40004);
[23:54:59.252]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:54:59.252]        // -> [deviceID <= 0x2BB8802F]
[23:54:59.252]      version = deviceID >> 28;
[23:54:59.252]        // -> [version <= 0x00000002]
[23:54:59.252]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:54:59.252]        // -> [partNum <= 0x0000BB88]
[23:54:59.252]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:54:59.254]        // -> [manuf <= 0x00000017]
[23:54:59.254]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:54:59.254]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:54:59.254]      isProduction = (version > 0);
[23:54:59.254]        // -> [isProduction <= 0x00000001]
[23:54:59.254]    </block>
[23:54:59.254]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:54:59.254]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:54:59.254]        // =>  FALSE
[23:54:59.255]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:54:59.255]    </control>
[23:54:59.255]    <control if="continueId == 4" while="" timeout="0" info="">
[23:54:59.255]      // if-block "continueId == 4"
[23:54:59.255]        // =>  FALSE
[23:54:59.255]      // skip if-block "continueId == 4"
[23:54:59.255]    </control>
[23:54:59.255]    <control if="!isProduction" while="" timeout="0" info="">
[23:54:59.255]      // if-block "!isProduction"
[23:54:59.256]        // =>  FALSE
[23:54:59.256]      // skip if-block "!isProduction"
[23:54:59.256]    </control>
[23:54:59.256]  </sequence>
[23:54:59.256]  
[23:55:22.266]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:55:22.266]  
[23:55:22.266]  <debugvars>
[23:55:22.266]    // Pre-defined
[23:55:22.266]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:55:22.266]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:55:22.266]    __dp=0x00000000
[23:55:22.266]    __ap=0x00000000
[23:55:22.266]    __traceout=0x00000000      (Trace Disabled)
[23:55:22.266]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:55:22.266]    __FlashAddr=0x00000000
[23:55:22.266]    __FlashLen=0x00000000
[23:55:22.266]    __FlashArg=0x00000000
[23:55:22.266]    __FlashOp=0x00000000
[23:55:22.266]    __Result=0x00000000
[23:55:22.266]  </debugvars>
[23:55:22.266]  
[23:55:22.266]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:55:22.266]    <block atomic="false" info="">
[23:55:22.266]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:55:22.266]        // -> [isSWJ <= 0x00000001]
[23:55:22.266]      __var hasDormant = __protocol & 0x00020000;
[23:55:22.266]        // -> [hasDormant <= 0x00000000]
[23:55:22.271]      __var protType   = __protocol & 0x0000FFFF;
[23:55:22.271]        // -> [protType <= 0x00000002]
[23:55:22.271]    </block>
[23:55:22.272]    <control if="protType == 1" while="" timeout="0" info="">
[23:55:22.272]      // if-block "protType == 1"
[23:55:22.272]        // =>  FALSE
[23:55:22.272]      // skip if-block "protType == 1"
[23:55:22.272]    </control>
[23:55:22.272]    <control if="protType == 2" while="" timeout="0" info="">
[23:55:22.272]      // if-block "protType == 2"
[23:55:22.272]        // =>  TRUE
[23:55:22.272]      <control if="isSWJ" while="" timeout="0" info="">
[23:55:22.272]        // if-block "isSWJ"
[23:55:22.272]          // =>  TRUE
[23:55:22.272]        <control if="hasDormant" while="" timeout="0" info="">
[23:55:22.272]          // if-block "hasDormant"
[23:55:22.272]            // =>  FALSE
[23:55:22.272]          // skip if-block "hasDormant"
[23:55:22.272]        </control>
[23:55:22.272]        <control if="!hasDormant" while="" timeout="0" info="">
[23:55:22.272]          // if-block "!hasDormant"
[23:55:22.272]            // =>  TRUE
[23:55:22.272]          <block atomic="false" info="">
[23:55:22.272]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:55:22.276]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:55:22.276]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:55:22.276]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:55:22.276]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:55:22.276]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:55:22.276]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:55:22.276]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:55:22.276]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:55:22.282]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:55:22.282]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:55:22.282]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:55:22.282]          </block>
[23:55:22.282]          // end if-block "!hasDormant"
[23:55:22.282]        </control>
[23:55:22.282]        // end if-block "isSWJ"
[23:55:22.282]      </control>
[23:55:22.282]      <control if="!isSWJ" while="" timeout="0" info="">
[23:55:22.282]        // if-block "!isSWJ"
[23:55:22.282]          // =>  FALSE
[23:55:22.282]        // skip if-block "!isSWJ"
[23:55:22.282]      </control>
[23:55:22.282]      <block atomic="false" info="">
[23:55:22.282]        ReadDP(0x0);
[23:55:22.285]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:55:22.285]      </block>
[23:55:22.285]      // end if-block "protType == 2"
[23:55:22.285]    </control>
[23:55:22.285]  </sequence>
[23:55:22.285]  
[23:55:22.285]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:55:22.285]  
[23:55:22.285]  <debugvars>
[23:55:22.285]    // Pre-defined
[23:55:22.285]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:55:22.285]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:55:22.285]    __dp=0x00000000
[23:55:22.285]    __ap=0x00000000
[23:55:22.285]    __traceout=0x00000000      (Trace Disabled)
[23:55:22.285]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:55:22.285]    __FlashAddr=0x00000000
[23:55:22.285]    __FlashLen=0x00000000
[23:55:22.285]    __FlashArg=0x00000000
[23:55:22.285]    __FlashOp=0x00000000
[23:55:22.285]    __Result=0x00000000
[23:55:22.285]  </debugvars>
[23:55:22.285]  
[23:55:22.285]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:55:22.285]    <block atomic="false" info="">
[23:55:22.285]      __var SW_DP_ABORT       = 0x0;
[23:55:22.285]        // -> [SW_DP_ABORT <= 0x00000000]
[23:55:22.285]      __var DP_CTRL_STAT      = 0x4;
[23:55:22.285]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:55:22.285]      __var DP_SELECT         = 0x8;
[23:55:22.285]        // -> [DP_SELECT <= 0x00000008]
[23:55:22.285]      __var powered_down      = 0;
[23:55:22.285]        // -> [powered_down <= 0x00000000]
[23:55:22.292]      WriteDP(DP_SELECT, 0x00000000);
[23:55:22.292]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:55:22.292]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:55:22.292]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:55:22.292]        // -> [powered_down <= 0x00000001]
[23:55:22.292]    </block>
[23:55:22.292]    <control if="powered_down" while="" timeout="0" info="">
[23:55:22.292]      // if-block "powered_down"
[23:55:22.292]        // =>  TRUE
[23:55:22.292]      <block atomic="false" info="">
[23:55:22.292]        Message(0, "Debug/System power-up request sent");
[23:55:22.296]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:55:22.296]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:55:22.296]      </block>
[23:55:22.296]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:55:22.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:55:22.302]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:55:22.302]        // while-condition  =>  FALSE
[23:55:22.302]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:55:22.302]      </control>
[23:55:22.302]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:55:22.302]        // if-block "(__protocol & 0xFFFF) == 1"
[23:55:22.302]          // =>  FALSE
[23:55:22.302]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:55:22.302]      </control>
[23:55:22.302]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:55:22.302]        // if-block "(__protocol & 0xFFFF) == 2"
[23:55:22.302]          // =>  TRUE
[23:55:22.302]        <block atomic="false" info="">
[23:55:22.302]          Message(0, "executing SWD power up");
[23:55:22.302]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:55:22.306]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:55:22.306]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:55:22.306]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:55:22.306]        </block>
[23:55:22.306]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:55:22.306]      </control>
[23:55:22.306]      // end if-block "powered_down"
[23:55:22.306]    </control>
[23:55:22.306]    <block atomic="false" info="">
[23:55:22.306]      __var DEBUG_PORT_VAL    = 0;
[23:55:22.306]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:55:22.306]      __var ACCESS_POINT_VAL  = 0;
[23:55:22.306]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:55:22.306]      __ap = 1; 
[23:55:22.306]        // -> [__ap <= 0x00000001]
[23:55:22.306]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:55:22.312]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:55:22.312]      __ap = 4;
[23:55:22.312]        // -> [__ap <= 0x00000004]
[23:55:22.312]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:55:22.316]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:55:22.316]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:55:22.316]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:55:22.316]    </block>
[23:55:22.316]    <block atomic="false" info="">
[23:55:22.316]      __var nReset = 0x80;
[23:55:22.316]        // -> [nReset <= 0x00000080]
[23:55:22.316]      __var canReadPins = 0;
[23:55:22.316]        // -> [canReadPins <= 0x00000000]
[23:55:22.316]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:55:22.316]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:55:22.316]        // -> [canReadPins <= 0x00000001]
[23:55:22.316]    </block>
[23:55:22.316]    <control if="" while="1" timeout="200" info="">
[23:55:22.316]      // while "1"  (timeout="200")
[23:55:22.316]      // while-condition  =>  TRUE
[23:55:22.316]      // while "1"  (timeout="200")
[23:55:22.316]      // while-condition  =>  TRUE
[23:55:22.316]      // while "1"  (timeout="200")
[23:55:22.316]      // while-condition  =>  TRUE
[23:55:22.316]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.323]      // while "1"  (timeout="200")
[23:55:22.323]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.326]      // while-condition  =>  TRUE
[23:55:22.326]      // while "1"  (timeout="200")
[23:55:22.333]      // while-condition  =>  TRUE
[23:55:22.333]      // while "1"  (timeout="200")
[23:55:22.333]      // while  =>  TIMEOUT
[23:55:22.333]      // end while "1"
[23:55:22.334]    </control>
[23:55:22.334]    <control if="canReadPins" while="" timeout="0" info="">
[23:55:22.334]      // if-block "canReadPins"
[23:55:22.334]        // =>  TRUE
[23:55:22.334]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:55:22.334]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:55:22.335]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:55:22.336]        // while-condition  =>  FALSE
[23:55:22.336]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:55:22.336]      </control>
[23:55:22.336]      // end if-block "canReadPins"
[23:55:22.336]    </control>
[23:55:22.336]    <control if="!canReadPins" while="" timeout="0" info="">
[23:55:22.336]      // if-block "!canReadPins"
[23:55:22.336]        // =>  FALSE
[23:55:22.336]      // skip if-block "!canReadPins"
[23:55:22.336]    </control>
[23:55:22.336]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:55:22.336]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:55:22.336]        // =>  TRUE
[23:55:22.336]      <block atomic="false" info="">
[23:55:22.336]        WriteAP(0x00, 0x190008);
[23:55:22.336]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:55:22.336]        WriteAP(0xF0, 0x01);
[23:55:22.336]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:55:22.336]      </block>
[23:55:22.336]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:55:22.336]    </control>
[23:55:22.336]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:55:22.343]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:55:22.343]        // =>  FALSE
[23:55:22.343]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:55:22.343]    </control>
[23:55:22.343]    <block atomic="false" info="">
[23:55:22.343]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:55:22.346]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:55:22.346]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:55:22.346]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:55:22.346]      __ap = 0; //lets make sure we reset the access point selection
[23:55:22.346]        // -> [__ap <= 0x00000000]
[23:55:22.346]    </block>
[23:55:22.346]  </sequence>
[23:55:22.346]  
[23:55:22.366]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:55:22.366]  
[23:55:22.366]  <debugvars>
[23:55:22.366]    // Pre-defined
[23:55:22.366]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:55:22.366]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:55:22.366]    __dp=0x00000000
[23:55:22.366]    __ap=0x00000000
[23:55:22.366]    __traceout=0x00000000      (Trace Disabled)
[23:55:22.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:55:22.366]    __FlashAddr=0x00000000
[23:55:22.366]    __FlashLen=0x00000000
[23:55:22.366]    __FlashArg=0x00000000
[23:55:22.366]    __FlashOp=0x00000000
[23:55:22.366]    __Result=0x00000000
[23:55:22.366]  </debugvars>
[23:55:22.366]  
[23:55:22.366]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:55:22.366]    <block atomic="false" info="">
[23:55:22.366]      __var deviceID = 0;
[23:55:22.366]        // -> [deviceID <= 0x00000000]
[23:55:22.366]      __var version = 0;
[23:55:22.366]        // -> [version <= 0x00000000]
[23:55:22.366]      __var partNum = 0;
[23:55:22.366]        // -> [partNum <= 0x00000000]
[23:55:22.366]      __var manuf = 0;
[23:55:22.366]        // -> [manuf <= 0x00000000]
[23:55:22.366]      __var isMSPM0G1X0X_G3X0X = 0;
[23:55:22.366]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:55:22.374]      __var isProduction = 0;
[23:55:22.374]        // -> [isProduction <= 0x00000000]
[23:55:22.374]      __var continueId = 0;
[23:55:22.374]        // -> [continueId <= 0x00000000]
[23:55:22.374]      deviceID =   Read32(0x41C40004);
[23:55:22.376]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:55:22.376]        // -> [deviceID <= 0x2BB8802F]
[23:55:22.376]      version = deviceID >> 28;
[23:55:22.376]        // -> [version <= 0x00000002]
[23:55:22.376]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:55:22.376]        // -> [partNum <= 0x0000BB88]
[23:55:22.376]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:55:22.376]        // -> [manuf <= 0x00000017]
[23:55:22.376]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:55:22.376]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:55:22.376]      isProduction = (version > 0);
[23:55:22.376]        // -> [isProduction <= 0x00000001]
[23:55:22.376]    </block>
[23:55:22.376]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:55:22.376]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:55:22.376]        // =>  FALSE
[23:55:22.376]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:55:22.376]    </control>
[23:55:22.376]    <control if="continueId == 4" while="" timeout="0" info="">
[23:55:22.376]      // if-block "continueId == 4"
[23:55:22.376]        // =>  FALSE
[23:55:22.376]      // skip if-block "continueId == 4"
[23:55:22.376]    </control>
[23:55:22.376]    <control if="!isProduction" while="" timeout="0" info="">
[23:55:22.376]      // if-block "!isProduction"
[23:55:22.376]        // =>  FALSE
[23:55:22.376]      // skip if-block "!isProduction"
[23:55:22.376]    </control>
[23:55:22.376]  </sequence>
[23:55:22.376]  
[23:57:02.397]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:57:02.404]  
[23:57:02.412]  <debugvars>
[23:57:02.412]    // Pre-defined
[23:57:02.412]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:57:02.412]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:57:02.412]    __dp=0x00000000
[23:57:02.412]    __ap=0x00000000
[23:57:02.412]    __traceout=0x00000000      (Trace Disabled)
[23:57:02.413]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:57:02.413]    __FlashAddr=0x00000000
[23:57:02.413]    __FlashLen=0x00000000
[23:57:02.413]    __FlashArg=0x00000000
[23:57:02.413]    __FlashOp=0x00000000
[23:57:02.413]    __Result=0x00000000
[23:57:02.413]  </debugvars>
[23:57:02.413]  
[23:57:02.413]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:57:02.413]    <block atomic="false" info="">
[23:57:02.413]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:57:02.414]        // -> [isSWJ <= 0x00000001]
[23:57:02.415]      __var hasDormant = __protocol & 0x00020000;
[23:57:02.415]        // -> [hasDormant <= 0x00000000]
[23:57:02.415]      __var protType   = __protocol & 0x0000FFFF;
[23:57:02.415]        // -> [protType <= 0x00000002]
[23:57:02.415]    </block>
[23:57:02.415]    <control if="protType == 1" while="" timeout="0" info="">
[23:57:02.415]      // if-block "protType == 1"
[23:57:02.416]        // =>  FALSE
[23:57:02.416]      // skip if-block "protType == 1"
[23:57:02.416]    </control>
[23:57:02.416]    <control if="protType == 2" while="" timeout="0" info="">
[23:57:02.416]      // if-block "protType == 2"
[23:57:02.416]        // =>  TRUE
[23:57:02.416]      <control if="isSWJ" while="" timeout="0" info="">
[23:57:02.416]        // if-block "isSWJ"
[23:57:02.417]          // =>  TRUE
[23:57:02.417]        <control if="hasDormant" while="" timeout="0" info="">
[23:57:02.417]          // if-block "hasDormant"
[23:57:02.417]            // =>  FALSE
[23:57:02.417]          // skip if-block "hasDormant"
[23:57:02.417]        </control>
[23:57:02.418]        <control if="!hasDormant" while="" timeout="0" info="">
[23:57:02.418]          // if-block "!hasDormant"
[23:57:02.418]            // =>  TRUE
[23:57:02.418]          <block atomic="false" info="">
[23:57:02.418]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:57:02.419]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:57:02.420]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:57:02.425]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:57:02.425]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:57:02.427]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:57:02.427]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:57:02.428]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:57:02.428]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:57:02.430]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:57:02.431]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:57:02.432]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:57:02.432]          </block>
[23:57:02.432]          // end if-block "!hasDormant"
[23:57:02.432]        </control>
[23:57:02.432]        // end if-block "isSWJ"
[23:57:02.432]      </control>
[23:57:02.433]      <control if="!isSWJ" while="" timeout="0" info="">
[23:57:02.433]        // if-block "!isSWJ"
[23:57:02.433]          // =>  FALSE
[23:57:02.433]        // skip if-block "!isSWJ"
[23:57:02.433]      </control>
[23:57:02.433]      <block atomic="false" info="">
[23:57:02.433]        ReadDP(0x0);
[23:57:02.435]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:57:02.435]      </block>
[23:57:02.435]      // end if-block "protType == 2"
[23:57:02.435]    </control>
[23:57:02.435]  </sequence>
[23:57:02.436]  
[23:57:02.440]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:57:02.440]  
[23:57:02.440]  <debugvars>
[23:57:02.440]    // Pre-defined
[23:57:02.441]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:57:02.441]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:57:02.441]    __dp=0x00000000
[23:57:02.441]    __ap=0x00000000
[23:57:02.441]    __traceout=0x00000000      (Trace Disabled)
[23:57:02.441]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:57:02.441]    __FlashAddr=0x00000000
[23:57:02.442]    __FlashLen=0x00000000
[23:57:02.442]    __FlashArg=0x00000000
[23:57:02.442]    __FlashOp=0x00000000
[23:57:02.442]    __Result=0x00000000
[23:57:02.442]  </debugvars>
[23:57:02.442]  
[23:57:02.443]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:57:02.443]    <block atomic="false" info="">
[23:57:02.443]      __var SW_DP_ABORT       = 0x0;
[23:57:02.443]        // -> [SW_DP_ABORT <= 0x00000000]
[23:57:02.443]      __var DP_CTRL_STAT      = 0x4;
[23:57:02.443]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:57:02.443]      __var DP_SELECT         = 0x8;
[23:57:02.443]        // -> [DP_SELECT <= 0x00000008]
[23:57:02.443]      __var powered_down      = 0;
[23:57:02.444]        // -> [powered_down <= 0x00000000]
[23:57:02.444]      WriteDP(DP_SELECT, 0x00000000);
[23:57:02.444]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:57:02.444]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:57:02.444]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:57:02.444]        // -> [powered_down <= 0x00000001]
[23:57:02.444]    </block>
[23:57:02.444]    <control if="powered_down" while="" timeout="0" info="">
[23:57:02.444]      // if-block "powered_down"
[23:57:02.444]        // =>  TRUE
[23:57:02.444]      <block atomic="false" info="">
[23:57:02.444]        Message(0, "Debug/System power-up request sent");
[23:57:02.453]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:57:02.453]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:57:02.453]      </block>
[23:57:02.453]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:57:02.453]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:57:02.453]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:57:02.453]        // while-condition  =>  FALSE
[23:57:02.453]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:57:02.453]      </control>
[23:57:02.453]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:57:02.453]        // if-block "(__protocol & 0xFFFF) == 1"
[23:57:02.453]          // =>  FALSE
[23:57:02.453]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:57:02.453]      </control>
[23:57:02.453]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:57:02.453]        // if-block "(__protocol & 0xFFFF) == 2"
[23:57:02.453]          // =>  TRUE
[23:57:02.453]        <block atomic="false" info="">
[23:57:02.453]          Message(0, "executing SWD power up");
[23:57:02.453]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:57:02.463]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:57:02.463]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:57:02.463]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:57:02.463]        </block>
[23:57:02.463]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:57:02.463]      </control>
[23:57:02.463]      // end if-block "powered_down"
[23:57:02.463]    </control>
[23:57:02.463]    <block atomic="false" info="">
[23:57:02.463]      __var DEBUG_PORT_VAL    = 0;
[23:57:02.463]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:57:02.463]      __var ACCESS_POINT_VAL  = 0;
[23:57:02.463]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:57:02.463]      __ap = 1; 
[23:57:02.463]        // -> [__ap <= 0x00000001]
[23:57:02.463]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:57:02.463]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:57:02.463]      __ap = 4;
[23:57:02.463]        // -> [__ap <= 0x00000004]
[23:57:02.463]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:57:02.474]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:57:02.474]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:57:02.474]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:57:02.474]    </block>
[23:57:02.474]    <block atomic="false" info="">
[23:57:02.474]      __var nReset = 0x80;
[23:57:02.474]        // -> [nReset <= 0x00000080]
[23:57:02.474]      __var canReadPins = 0;
[23:57:02.474]        // -> [canReadPins <= 0x00000000]
[23:57:02.474]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:57:02.474]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:57:02.474]        // -> [canReadPins <= 0x00000001]
[23:57:02.474]    </block>
[23:57:02.474]    <control if="" while="1" timeout="200" info="">
[23:57:02.474]      // while "1"  (timeout="200")
[23:57:02.474]      // while-condition  =>  TRUE
[23:57:02.474]      // while "1"  (timeout="200")
[23:57:02.474]      // while-condition  =>  TRUE
[23:57:02.474]      // while "1"  (timeout="200")
[23:57:02.474]      // while-condition  =>  TRUE
[23:57:02.474]      // while "1"  (timeout="200")
[23:57:02.474]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.483]      // while-condition  =>  TRUE
[23:57:02.483]      // while "1"  (timeout="200")
[23:57:02.490]      // while-condition  =>  TRUE
[23:57:02.490]      // while "1"  (timeout="200")
[23:57:02.490]      // while  =>  TIMEOUT
[23:57:02.490]      // end while "1"
[23:57:02.490]    </control>
[23:57:02.490]    <control if="canReadPins" while="" timeout="0" info="">
[23:57:02.490]      // if-block "canReadPins"
[23:57:02.490]        // =>  TRUE
[23:57:02.490]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:57:02.490]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:57:02.492]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:57:02.492]        // while-condition  =>  FALSE
[23:57:02.492]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:57:02.492]      </control>
[23:57:02.492]      // end if-block "canReadPins"
[23:57:02.492]    </control>
[23:57:02.492]    <control if="!canReadPins" while="" timeout="0" info="">
[23:57:02.492]      // if-block "!canReadPins"
[23:57:02.492]        // =>  FALSE
[23:57:02.492]      // skip if-block "!canReadPins"
[23:57:02.492]    </control>
[23:57:02.493]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:57:02.493]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:57:02.493]        // =>  TRUE
[23:57:02.493]      <block atomic="false" info="">
[23:57:02.493]        WriteAP(0x00, 0x190008);
[23:57:02.494]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:57:02.494]        WriteAP(0xF0, 0x01);
[23:57:02.498]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:57:02.498]      </block>
[23:57:02.498]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:57:02.498]    </control>
[23:57:02.498]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:57:02.498]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:57:02.499]        // =>  FALSE
[23:57:02.499]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:57:02.499]    </control>
[23:57:02.499]    <block atomic="false" info="">
[23:57:02.499]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:57:02.502]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:57:02.502]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:57:02.502]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:57:02.506]      __ap = 0; //lets make sure we reset the access point selection
[23:57:02.506]        // -> [__ap <= 0x00000000]
[23:57:02.506]    </block>
[23:57:02.506]  </sequence>
[23:57:02.506]  
[23:57:02.522]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:57:02.522]  
[23:57:02.522]  <debugvars>
[23:57:02.522]    // Pre-defined
[23:57:02.522]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:57:02.522]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:57:02.522]    __dp=0x00000000
[23:57:02.522]    __ap=0x00000000
[23:57:02.522]    __traceout=0x00000000      (Trace Disabled)
[23:57:02.522]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:57:02.522]    __FlashAddr=0x00000000
[23:57:02.522]    __FlashLen=0x00000000
[23:57:02.522]    __FlashArg=0x00000000
[23:57:02.522]    __FlashOp=0x00000000
[23:57:02.522]    __Result=0x00000000
[23:57:02.532]  </debugvars>
[23:57:02.532]  
[23:57:02.532]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:57:02.532]    <block atomic="false" info="">
[23:57:02.532]      __var deviceID = 0;
[23:57:02.532]        // -> [deviceID <= 0x00000000]
[23:57:02.532]      __var version = 0;
[23:57:02.532]        // -> [version <= 0x00000000]
[23:57:02.532]      __var partNum = 0;
[23:57:02.532]        // -> [partNum <= 0x00000000]
[23:57:02.532]      __var manuf = 0;
[23:57:02.532]        // -> [manuf <= 0x00000000]
[23:57:02.532]      __var isMSPM0G1X0X_G3X0X = 0;
[23:57:02.532]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:57:02.532]      __var isProduction = 0;
[23:57:02.532]        // -> [isProduction <= 0x00000000]
[23:57:02.532]      __var continueId = 0;
[23:57:02.532]        // -> [continueId <= 0x00000000]
[23:57:02.532]      deviceID =   Read32(0x41C40004);
[23:57:02.542]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:57:02.542]        // -> [deviceID <= 0x2BB8802F]
[23:57:02.542]      version = deviceID >> 28;
[23:57:02.543]        // -> [version <= 0x00000002]
[23:57:02.543]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:57:02.543]        // -> [partNum <= 0x0000BB88]
[23:57:02.543]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:57:02.543]        // -> [manuf <= 0x00000017]
[23:57:02.543]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:57:02.543]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:57:02.543]      isProduction = (version > 0);
[23:57:02.543]        // -> [isProduction <= 0x00000001]
[23:57:02.543]    </block>
[23:57:02.543]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:57:02.543]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:57:02.543]        // =>  FALSE
[23:57:02.543]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:57:02.543]    </control>
[23:57:02.543]    <control if="continueId == 4" while="" timeout="0" info="">
[23:57:02.543]      // if-block "continueId == 4"
[23:57:02.543]        // =>  FALSE
[23:57:02.543]      // skip if-block "continueId == 4"
[23:57:02.543]    </control>
[23:57:02.543]    <control if="!isProduction" while="" timeout="0" info="">
[23:57:02.543]      // if-block "!isProduction"
[23:57:02.543]        // =>  FALSE
[23:57:02.543]      // skip if-block "!isProduction"
[23:57:02.543]    </control>
[23:57:02.543]  </sequence>
[23:57:02.543]  
[23:58:17.188]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:58:17.188]  
[23:58:17.200]  <debugvars>
[23:58:17.200]    // Pre-defined
[23:58:17.200]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:58:17.200]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:58:17.200]    __dp=0x00000000
[23:58:17.200]    __ap=0x00000000
[23:58:17.200]    __traceout=0x00000000      (Trace Disabled)
[23:58:17.200]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:58:17.200]    __FlashAddr=0x00000000
[23:58:17.200]    __FlashLen=0x00000000
[23:58:17.200]    __FlashArg=0x00000000
[23:58:17.200]    __FlashOp=0x00000000
[23:58:17.200]    __Result=0x00000000
[23:58:17.200]  </debugvars>
[23:58:17.200]  
[23:58:17.200]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:58:17.200]    <block atomic="false" info="">
[23:58:17.200]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:58:17.200]        // -> [isSWJ <= 0x00000001]
[23:58:17.200]      __var hasDormant = __protocol & 0x00020000;
[23:58:17.200]        // -> [hasDormant <= 0x00000000]
[23:58:17.200]      __var protType   = __protocol & 0x0000FFFF;
[23:58:17.200]        // -> [protType <= 0x00000002]
[23:58:17.200]    </block>
[23:58:17.200]    <control if="protType == 1" while="" timeout="0" info="">
[23:58:17.200]      // if-block "protType == 1"
[23:58:17.200]        // =>  FALSE
[23:58:17.200]      // skip if-block "protType == 1"
[23:58:17.200]    </control>
[23:58:17.200]    <control if="protType == 2" while="" timeout="0" info="">
[23:58:17.200]      // if-block "protType == 2"
[23:58:17.200]        // =>  TRUE
[23:58:17.200]      <control if="isSWJ" while="" timeout="0" info="">
[23:58:17.200]        // if-block "isSWJ"
[23:58:17.200]          // =>  TRUE
[23:58:17.200]        <control if="hasDormant" while="" timeout="0" info="">
[23:58:17.200]          // if-block "hasDormant"
[23:58:17.200]            // =>  FALSE
[23:58:17.200]          // skip if-block "hasDormant"
[23:58:17.200]        </control>
[23:58:17.200]        <control if="!hasDormant" while="" timeout="0" info="">
[23:58:17.200]          // if-block "!hasDormant"
[23:58:17.200]            // =>  TRUE
[23:58:17.200]          <block atomic="false" info="">
[23:58:17.200]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:58:17.207]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:58:17.207]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:58:17.209]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:58:17.209]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:58:17.209]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:58:17.209]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:58:17.212]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:58:17.212]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:58:17.214]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:58:17.214]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:58:17.216]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:58:17.216]          </block>
[23:58:17.216]          // end if-block "!hasDormant"
[23:58:17.216]        </control>
[23:58:17.216]        // end if-block "isSWJ"
[23:58:17.216]      </control>
[23:58:17.216]      <control if="!isSWJ" while="" timeout="0" info="">
[23:58:17.216]        // if-block "!isSWJ"
[23:58:17.216]          // =>  FALSE
[23:58:17.216]        // skip if-block "!isSWJ"
[23:58:17.216]      </control>
[23:58:17.218]      <block atomic="false" info="">
[23:58:17.218]        ReadDP(0x0);
[23:58:17.219]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:58:17.219]      </block>
[23:58:17.219]      // end if-block "protType == 2"
[23:58:17.219]    </control>
[23:58:17.219]  </sequence>
[23:58:17.219]  
[23:58:17.222]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:58:17.222]  
[23:58:17.222]  <debugvars>
[23:58:17.222]    // Pre-defined
[23:58:17.222]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:58:17.222]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:58:17.222]    __dp=0x00000000
[23:58:17.222]    __ap=0x00000000
[23:58:17.222]    __traceout=0x00000000      (Trace Disabled)
[23:58:17.222]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:58:17.222]    __FlashAddr=0x00000000
[23:58:17.222]    __FlashLen=0x00000000
[23:58:17.223]    __FlashArg=0x00000000
[23:58:17.223]    __FlashOp=0x00000000
[23:58:17.223]    __Result=0x00000000
[23:58:17.223]  </debugvars>
[23:58:17.223]  
[23:58:17.223]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:58:17.223]    <block atomic="false" info="">
[23:58:17.223]      __var SW_DP_ABORT       = 0x0;
[23:58:17.223]        // -> [SW_DP_ABORT <= 0x00000000]
[23:58:17.223]      __var DP_CTRL_STAT      = 0x4;
[23:58:17.223]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:58:17.224]      __var DP_SELECT         = 0x8;
[23:58:17.224]        // -> [DP_SELECT <= 0x00000008]
[23:58:17.224]      __var powered_down      = 0;
[23:58:17.224]        // -> [powered_down <= 0x00000000]
[23:58:17.224]      WriteDP(DP_SELECT, 0x00000000);
[23:58:17.226]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:58:17.226]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:58:17.226]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:58:17.228]        // -> [powered_down <= 0x00000001]
[23:58:17.228]    </block>
[23:58:17.228]    <control if="powered_down" while="" timeout="0" info="">
[23:58:17.228]      // if-block "powered_down"
[23:58:17.229]        // =>  TRUE
[23:58:17.229]      <block atomic="false" info="">
[23:58:17.229]        Message(0, "Debug/System power-up request sent");
[23:58:17.231]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:58:17.231]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:58:17.231]      </block>
[23:58:17.231]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:58:17.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:58:17.231]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:58:17.231]        // while-condition  =>  FALSE
[23:58:17.231]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:58:17.231]      </control>
[23:58:17.231]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:58:17.231]        // if-block "(__protocol & 0xFFFF) == 1"
[23:58:17.231]          // =>  FALSE
[23:58:17.231]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:58:17.231]      </control>
[23:58:17.231]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:58:17.231]        // if-block "(__protocol & 0xFFFF) == 2"
[23:58:17.231]          // =>  TRUE
[23:58:17.231]        <block atomic="false" info="">
[23:58:17.231]          Message(0, "executing SWD power up");
[23:58:17.238]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:58:17.238]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:58:17.238]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:58:17.238]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:58:17.238]        </block>
[23:58:17.238]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:58:17.238]      </control>
[23:58:17.238]      // end if-block "powered_down"
[23:58:17.238]    </control>
[23:58:17.238]    <block atomic="false" info="">
[23:58:17.238]      __var DEBUG_PORT_VAL    = 0;
[23:58:17.238]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:58:17.238]      __var ACCESS_POINT_VAL  = 0;
[23:58:17.238]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:58:17.238]      __ap = 1; 
[23:58:17.238]        // -> [__ap <= 0x00000001]
[23:58:17.238]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:58:17.250]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:58:17.250]      __ap = 4;
[23:58:17.250]        // -> [__ap <= 0x00000004]
[23:58:17.250]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:58:17.252]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:58:17.252]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:58:17.252]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:58:17.252]    </block>
[23:58:17.252]    <block atomic="false" info="">
[23:58:17.252]      __var nReset = 0x80;
[23:58:17.252]        // -> [nReset <= 0x00000080]
[23:58:17.252]      __var canReadPins = 0;
[23:58:17.252]        // -> [canReadPins <= 0x00000000]
[23:58:17.252]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:58:17.252]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:58:17.258]        // -> [canReadPins <= 0x00000001]
[23:58:17.258]    </block>
[23:58:17.258]    <control if="" while="1" timeout="200" info="">
[23:58:17.258]      // while "1"  (timeout="200")
[23:58:17.258]      // while-condition  =>  TRUE
[23:58:17.258]      // while "1"  (timeout="200")
[23:58:17.258]      // while-condition  =>  TRUE
[23:58:17.258]      // while "1"  (timeout="200")
[23:58:17.258]      // while-condition  =>  TRUE
[23:58:17.258]      // while "1"  (timeout="200")
[23:58:17.258]      // while-condition  =>  TRUE
[23:58:17.258]      // while "1"  (timeout="200")
[23:58:17.258]      // while-condition  =>  TRUE
[23:58:17.258]      // while "1"  (timeout="200")
[23:58:17.258]      // while-condition  =>  TRUE
[23:58:17.258]      // while "1"  (timeout="200")
[23:58:17.258]      // while-condition  =>  TRUE
[23:58:17.258]      // while "1"  (timeout="200")
[23:58:17.258]      // while-condition  =>  TRUE
[23:58:17.258]      // while "1"  (timeout="200")
[23:58:17.258]      // while-condition  =>  TRUE
[23:58:17.258]      // while "1"  (timeout="200")
[23:58:17.261]      // while-condition  =>  TRUE
[23:58:17.261]      // while "1"  (timeout="200")
[23:58:17.261]      // while-condition  =>  TRUE
[23:58:17.261]      // while "1"  (timeout="200")
[23:58:17.261]      // while-condition  =>  TRUE
[23:58:17.261]      // while "1"  (timeout="200")
[23:58:17.261]      // while-condition  =>  TRUE
[23:58:17.261]      // while "1"  (timeout="200")
[23:58:17.261]      // while-condition  =>  TRUE
[23:58:17.261]      // while "1"  (timeout="200")
[23:58:17.261]      // while-condition  =>  TRUE
[23:58:17.261]      // while "1"  (timeout="200")
[23:58:17.261]      // while-condition  =>  TRUE
[23:58:17.261]      // while "1"  (timeout="200")
[23:58:17.262]      // while-condition  =>  TRUE
[23:58:17.262]      // while "1"  (timeout="200")
[23:58:17.262]      // while-condition  =>  TRUE
[23:58:17.262]      // while "1"  (timeout="200")
[23:58:17.262]      // while-condition  =>  TRUE
[23:58:17.262]      // while "1"  (timeout="200")
[23:58:17.262]      // while-condition  =>  TRUE
[23:58:17.262]      // while "1"  (timeout="200")
[23:58:17.262]      // while-condition  =>  TRUE
[23:58:17.262]      // while "1"  (timeout="200")
[23:58:17.262]      // while-condition  =>  TRUE
[23:58:17.262]      // while "1"  (timeout="200")
[23:58:17.262]      // while-condition  =>  TRUE
[23:58:17.264]      // while "1"  (timeout="200")
[23:58:17.264]      // while-condition  =>  TRUE
[23:58:17.264]      // while "1"  (timeout="200")
[23:58:17.264]      // while-condition  =>  TRUE
[23:58:17.264]      // while "1"  (timeout="200")
[23:58:17.264]      // while-condition  =>  TRUE
[23:58:17.264]      // while "1"  (timeout="200")
[23:58:17.264]      // while-condition  =>  TRUE
[23:58:17.264]      // while "1"  (timeout="200")
[23:58:17.264]      // while-condition  =>  TRUE
[23:58:17.264]      // while "1"  (timeout="200")
[23:58:17.265]      // while-condition  =>  TRUE
[23:58:17.265]      // while "1"  (timeout="200")
[23:58:17.265]      // while-condition  =>  TRUE
[23:58:17.265]      // while "1"  (timeout="200")
[23:58:17.265]      // while-condition  =>  TRUE
[23:58:17.265]      // while "1"  (timeout="200")
[23:58:17.265]      // while-condition  =>  TRUE
[23:58:17.265]      // while "1"  (timeout="200")
[23:58:17.265]      // while-condition  =>  TRUE
[23:58:17.265]      // while "1"  (timeout="200")
[23:58:17.265]      // while-condition  =>  TRUE
[23:58:17.265]      // while "1"  (timeout="200")
[23:58:17.265]      // while-condition  =>  TRUE
[23:58:17.265]      // while "1"  (timeout="200")
[23:58:17.267]      // while-condition  =>  TRUE
[23:58:17.267]      // while "1"  (timeout="200")
[23:58:17.267]      // while-condition  =>  TRUE
[23:58:17.267]      // while "1"  (timeout="200")
[23:58:17.267]      // while-condition  =>  TRUE
[23:58:17.267]      // while "1"  (timeout="200")
[23:58:17.267]      // while-condition  =>  TRUE
[23:58:17.267]      // while "1"  (timeout="200")
[23:58:17.267]      // while-condition  =>  TRUE
[23:58:17.267]      // while "1"  (timeout="200")
[23:58:17.267]      // while-condition  =>  TRUE
[23:58:17.267]      // while "1"  (timeout="200")
[23:58:17.267]      // while-condition  =>  TRUE
[23:58:17.269]      // while "1"  (timeout="200")
[23:58:17.269]      // while  =>  TIMEOUT
[23:58:17.269]      // end while "1"
[23:58:17.269]    </control>
[23:58:17.269]    <control if="canReadPins" while="" timeout="0" info="">
[23:58:17.269]      // if-block "canReadPins"
[23:58:17.269]        // =>  TRUE
[23:58:17.269]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:58:17.269]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:58:17.271]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:58:17.271]        // while-condition  =>  FALSE
[23:58:17.271]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:58:17.271]      </control>
[23:58:17.271]      // end if-block "canReadPins"
[23:58:17.271]    </control>
[23:58:17.271]    <control if="!canReadPins" while="" timeout="0" info="">
[23:58:17.271]      // if-block "!canReadPins"
[23:58:17.271]        // =>  FALSE
[23:58:17.271]      // skip if-block "!canReadPins"
[23:58:17.271]    </control>
[23:58:17.271]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:58:17.271]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:58:17.271]        // =>  TRUE
[23:58:17.271]      <block atomic="false" info="">
[23:58:17.273]        WriteAP(0x00, 0x190008);
[23:58:17.273]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:58:17.273]        WriteAP(0xF0, 0x01);
[23:58:17.273]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:58:17.273]      </block>
[23:58:17.279]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:58:17.279]    </control>
[23:58:17.279]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:58:17.279]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:58:17.279]        // =>  FALSE
[23:58:17.279]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:58:17.279]    </control>
[23:58:17.279]    <block atomic="false" info="">
[23:58:17.279]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:58:17.279]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:58:17.279]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:58:17.279]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:58:17.279]      __ap = 0; //lets make sure we reset the access point selection
[23:58:17.279]        // -> [__ap <= 0x00000000]
[23:58:17.279]    </block>
[23:58:17.279]  </sequence>
[23:58:17.279]  
[23:58:17.310]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:58:17.310]  
[23:58:17.310]  <debugvars>
[23:58:17.310]    // Pre-defined
[23:58:17.310]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:58:17.310]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:58:17.310]    __dp=0x00000000
[23:58:17.310]    __ap=0x00000000
[23:58:17.310]    __traceout=0x00000000      (Trace Disabled)
[23:58:17.311]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:58:17.311]    __FlashAddr=0x00000000
[23:58:17.311]    __FlashLen=0x00000000
[23:58:17.311]    __FlashArg=0x00000000
[23:58:17.311]    __FlashOp=0x00000000
[23:58:17.312]    __Result=0x00000000
[23:58:17.312]  </debugvars>
[23:58:17.312]  
[23:58:17.312]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:58:17.312]    <block atomic="false" info="">
[23:58:17.312]      __var deviceID = 0;
[23:58:17.312]        // -> [deviceID <= 0x00000000]
[23:58:17.312]      __var version = 0;
[23:58:17.312]        // -> [version <= 0x00000000]
[23:58:17.312]      __var partNum = 0;
[23:58:17.312]        // -> [partNum <= 0x00000000]
[23:58:17.312]      __var manuf = 0;
[23:58:17.312]        // -> [manuf <= 0x00000000]
[23:58:17.312]      __var isMSPM0G1X0X_G3X0X = 0;
[23:58:17.312]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:58:17.312]      __var isProduction = 0;
[23:58:17.312]        // -> [isProduction <= 0x00000000]
[23:58:17.312]      __var continueId = 0;
[23:58:17.312]        // -> [continueId <= 0x00000000]
[23:58:17.312]      deviceID =   Read32(0x41C40004);
[23:58:17.323]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:58:17.323]        // -> [deviceID <= 0x2BB8802F]
[23:58:17.323]      version = deviceID >> 28;
[23:58:17.323]        // -> [version <= 0x00000002]
[23:58:17.323]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:58:17.323]        // -> [partNum <= 0x0000BB88]
[23:58:17.323]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:58:17.323]        // -> [manuf <= 0x00000017]
[23:58:17.323]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:58:17.323]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:58:17.323]      isProduction = (version > 0);
[23:58:17.323]        // -> [isProduction <= 0x00000001]
[23:58:17.323]    </block>
[23:58:17.325]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:58:17.325]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:58:17.325]        // =>  FALSE
[23:58:17.325]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:58:17.325]    </control>
[23:58:17.325]    <control if="continueId == 4" while="" timeout="0" info="">
[23:58:17.325]      // if-block "continueId == 4"
[23:58:17.325]        // =>  FALSE
[23:58:17.325]      // skip if-block "continueId == 4"
[23:58:17.326]    </control>
[23:58:17.326]    <control if="!isProduction" while="" timeout="0" info="">
[23:58:17.326]      // if-block "!isProduction"
[23:58:17.326]        // =>  FALSE
[23:58:17.326]      // skip if-block "!isProduction"
[23:58:17.326]    </control>
[23:58:17.326]  </sequence>
[23:58:17.326]  
[00:00:33.304]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:00:33.304]  
[00:00:33.320]  <debugvars>
[00:00:33.320]    // Pre-defined
[00:00:33.320]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:00:33.320]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:00:33.320]    __dp=0x00000000
[00:00:33.320]    __ap=0x00000000
[00:00:33.320]    __traceout=0x00000000      (Trace Disabled)
[00:00:33.320]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:00:33.320]    __FlashAddr=0x00000000
[00:00:33.320]    __FlashLen=0x00000000
[00:00:33.320]    __FlashArg=0x00000000
[00:00:33.320]    __FlashOp=0x00000000
[00:00:33.320]    __Result=0x00000000
[00:00:33.320]  </debugvars>
[00:00:33.320]  
[00:00:33.320]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:00:33.320]    <block atomic="false" info="">
[00:00:33.320]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:00:33.320]        // -> [isSWJ <= 0x00000001]
[00:00:33.320]      __var hasDormant = __protocol & 0x00020000;
[00:00:33.320]        // -> [hasDormant <= 0x00000000]
[00:00:33.320]      __var protType   = __protocol & 0x0000FFFF;
[00:00:33.320]        // -> [protType <= 0x00000002]
[00:00:33.320]    </block>
[00:00:33.320]    <control if="protType == 1" while="" timeout="0" info="">
[00:00:33.320]      // if-block "protType == 1"
[00:00:33.320]        // =>  FALSE
[00:00:33.320]      // skip if-block "protType == 1"
[00:00:33.320]    </control>
[00:00:33.320]    <control if="protType == 2" while="" timeout="0" info="">
[00:00:33.320]      // if-block "protType == 2"
[00:00:33.320]        // =>  TRUE
[00:00:33.320]      <control if="isSWJ" while="" timeout="0" info="">
[00:00:33.324]        // if-block "isSWJ"
[00:00:33.324]          // =>  TRUE
[00:00:33.324]        <control if="hasDormant" while="" timeout="0" info="">
[00:00:33.324]          // if-block "hasDormant"
[00:00:33.324]            // =>  FALSE
[00:00:33.324]          // skip if-block "hasDormant"
[00:00:33.324]        </control>
[00:00:33.324]        <control if="!hasDormant" while="" timeout="0" info="">
[00:00:33.324]          // if-block "!hasDormant"
[00:00:33.324]            // =>  TRUE
[00:00:33.324]          <block atomic="false" info="">
[00:00:33.324]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:00:33.324]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:00:33.324]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:00:33.324]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:00:33.324]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:00:33.324]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:00:33.324]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:00:33.324]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:00:33.324]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:00:33.324]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:00:33.324]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:00:33.334]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:00:33.334]          </block>
[00:00:33.334]          // end if-block "!hasDormant"
[00:00:33.334]        </control>
[00:00:33.334]        // end if-block "isSWJ"
[00:00:33.334]      </control>
[00:00:33.334]      <control if="!isSWJ" while="" timeout="0" info="">
[00:00:33.334]        // if-block "!isSWJ"
[00:00:33.334]          // =>  FALSE
[00:00:33.334]        // skip if-block "!isSWJ"
[00:00:33.334]      </control>
[00:00:33.334]      <block atomic="false" info="">
[00:00:33.334]        ReadDP(0x0);
[00:00:33.334]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:00:33.334]      </block>
[00:00:33.334]      // end if-block "protType == 2"
[00:00:33.334]    </control>
[00:00:33.334]  </sequence>
[00:00:33.334]  
[00:00:33.334]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:00:33.334]  
[00:00:33.334]  <debugvars>
[00:00:33.334]    // Pre-defined
[00:00:33.334]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:00:33.334]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:00:33.334]    __dp=0x00000000
[00:00:33.334]    __ap=0x00000000
[00:00:33.334]    __traceout=0x00000000      (Trace Disabled)
[00:00:33.334]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:00:33.334]    __FlashAddr=0x00000000
[00:00:33.334]    __FlashLen=0x00000000
[00:00:33.334]    __FlashArg=0x00000000
[00:00:33.334]    __FlashOp=0x00000000
[00:00:33.334]    __Result=0x00000000
[00:00:33.334]  </debugvars>
[00:00:33.334]  
[00:00:33.334]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:00:33.334]    <block atomic="false" info="">
[00:00:33.344]      __var SW_DP_ABORT       = 0x0;
[00:00:33.344]        // -> [SW_DP_ABORT <= 0x00000000]
[00:00:33.344]      __var DP_CTRL_STAT      = 0x4;
[00:00:33.344]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:00:33.344]      __var DP_SELECT         = 0x8;
[00:00:33.344]        // -> [DP_SELECT <= 0x00000008]
[00:00:33.344]      __var powered_down      = 0;
[00:00:33.344]        // -> [powered_down <= 0x00000000]
[00:00:33.344]      WriteDP(DP_SELECT, 0x00000000);
[00:00:33.344]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:00:33.344]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:00:33.344]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:00:33.344]        // -> [powered_down <= 0x00000001]
[00:00:33.344]    </block>
[00:00:33.344]    <control if="powered_down" while="" timeout="0" info="">
[00:00:33.344]      // if-block "powered_down"
[00:00:33.344]        // =>  TRUE
[00:00:33.344]      <block atomic="false" info="">
[00:00:33.344]        Message(0, "Debug/System power-up request sent");
[00:00:33.351]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:00:33.354]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:00:33.354]      </block>
[00:00:33.354]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:00:33.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:00:33.358]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:00:33.358]        // while-condition  =>  FALSE
[00:00:33.358]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:00:33.358]      </control>
[00:00:33.358]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:00:33.358]        // if-block "(__protocol & 0xFFFF) == 1"
[00:00:33.358]          // =>  FALSE
[00:00:33.358]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:00:33.364]      </control>
[00:00:33.364]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:00:33.364]        // if-block "(__protocol & 0xFFFF) == 2"
[00:00:33.364]          // =>  TRUE
[00:00:33.364]        <block atomic="false" info="">
[00:00:33.364]          Message(0, "executing SWD power up");
[00:00:33.367]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:00:33.368]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:00:33.368]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:00:33.368]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:00:33.368]        </block>
[00:00:33.368]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:00:33.368]      </control>
[00:00:33.368]      // end if-block "powered_down"
[00:00:33.368]    </control>
[00:00:33.368]    <block atomic="false" info="">
[00:00:33.368]      __var DEBUG_PORT_VAL    = 0;
[00:00:33.368]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:00:33.368]      __var ACCESS_POINT_VAL  = 0;
[00:00:33.368]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:00:33.368]      __ap = 1; 
[00:00:33.368]        // -> [__ap <= 0x00000001]
[00:00:33.368]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:00:33.374]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:00:33.374]      __ap = 4;
[00:00:33.374]        // -> [__ap <= 0x00000004]
[00:00:33.374]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:00:33.374]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:00:33.374]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:00:33.374]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:00:33.374]    </block>
[00:00:33.374]    <block atomic="false" info="">
[00:00:33.374]      __var nReset = 0x80;
[00:00:33.374]        // -> [nReset <= 0x00000080]
[00:00:33.374]      __var canReadPins = 0;
[00:00:33.374]        // -> [canReadPins <= 0x00000000]
[00:00:33.374]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:00:33.384]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:00:33.384]        // -> [canReadPins <= 0x00000001]
[00:00:33.384]    </block>
[00:00:33.384]    <control if="" while="1" timeout="200" info="">
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.384]      // while-condition  =>  TRUE
[00:00:33.384]      // while "1"  (timeout="200")
[00:00:33.394]      // while-condition  =>  TRUE
[00:00:33.394]      // while "1"  (timeout="200")
[00:00:33.394]      // while  =>  TIMEOUT
[00:00:33.394]      // end while "1"
[00:00:33.394]    </control>
[00:00:33.394]    <control if="canReadPins" while="" timeout="0" info="">
[00:00:33.394]      // if-block "canReadPins"
[00:00:33.394]        // =>  TRUE
[00:00:33.394]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:00:33.394]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:00:33.394]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:00:33.394]        // while-condition  =>  FALSE
[00:00:33.394]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:00:33.394]      </control>
[00:00:33.394]      // end if-block "canReadPins"
[00:00:33.394]    </control>
[00:00:33.394]    <control if="!canReadPins" while="" timeout="0" info="">
[00:00:33.394]      // if-block "!canReadPins"
[00:00:33.394]        // =>  FALSE
[00:00:33.394]      // skip if-block "!canReadPins"
[00:00:33.394]    </control>
[00:00:33.394]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:00:33.394]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:00:33.394]        // =>  TRUE
[00:00:33.394]      <block atomic="false" info="">
[00:00:33.394]        WriteAP(0x00, 0x190008);
[00:00:33.404]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:00:33.404]        WriteAP(0xF0, 0x01);
[00:00:33.404]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:00:33.404]      </block>
[00:00:33.404]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:00:33.404]    </control>
[00:00:33.404]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:00:33.404]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:00:33.404]        // =>  FALSE
[00:00:33.404]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:00:33.404]    </control>
[00:00:33.404]    <block atomic="false" info="">
[00:00:33.404]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:00:33.414]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:00:33.414]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:00:33.414]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:00:33.414]      __ap = 0; //lets make sure we reset the access point selection
[00:00:33.414]        // -> [__ap <= 0x00000000]
[00:00:33.414]    </block>
[00:00:33.414]  </sequence>
[00:00:33.414]  
[00:00:33.439]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:00:33.439]  
[00:00:33.439]  <debugvars>
[00:00:33.439]    // Pre-defined
[00:00:33.439]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:00:33.439]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:00:33.439]    __dp=0x00000000
[00:00:33.439]    __ap=0x00000000
[00:00:33.439]    __traceout=0x00000000      (Trace Disabled)
[00:00:33.439]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:00:33.439]    __FlashAddr=0x00000000
[00:00:33.439]    __FlashLen=0x00000000
[00:00:33.439]    __FlashArg=0x00000000
[00:00:33.439]    __FlashOp=0x00000000
[00:00:33.439]    __Result=0x00000000
[00:00:33.439]  </debugvars>
[00:00:33.439]  
[00:00:33.439]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:00:33.439]    <block atomic="false" info="">
[00:00:33.439]      __var deviceID = 0;
[00:00:33.439]        // -> [deviceID <= 0x00000000]
[00:00:33.439]      __var version = 0;
[00:00:33.439]        // -> [version <= 0x00000000]
[00:00:33.439]      __var partNum = 0;
[00:00:33.439]        // -> [partNum <= 0x00000000]
[00:00:33.439]      __var manuf = 0;
[00:00:33.439]        // -> [manuf <= 0x00000000]
[00:00:33.439]      __var isMSPM0G1X0X_G3X0X = 0;
[00:00:33.439]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:00:33.439]      __var isProduction = 0;
[00:00:33.439]        // -> [isProduction <= 0x00000000]
[00:00:33.439]      __var continueId = 0;
[00:00:33.443]        // -> [continueId <= 0x00000000]
[00:00:33.443]      deviceID =   Read32(0x41C40004);
[00:00:33.446]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:00:33.447]        // -> [deviceID <= 0x2BB8802F]
[00:00:33.447]      version = deviceID >> 28;
[00:00:33.447]        // -> [version <= 0x00000002]
[00:00:33.447]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:00:33.447]        // -> [partNum <= 0x0000BB88]
[00:00:33.448]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:00:33.448]        // -> [manuf <= 0x00000017]
[00:00:33.448]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:00:33.448]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:00:33.448]      isProduction = (version > 0);
[00:00:33.448]        // -> [isProduction <= 0x00000001]
[00:00:33.448]    </block>
[00:00:33.448]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:00:33.448]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:00:33.448]        // =>  FALSE
[00:00:33.448]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:00:33.448]    </control>
[00:00:33.448]    <control if="continueId == 4" while="" timeout="0" info="">
[00:00:33.448]      // if-block "continueId == 4"
[00:00:33.448]        // =>  FALSE
[00:00:33.448]      // skip if-block "continueId == 4"
[00:00:33.448]    </control>
[00:00:33.448]    <control if="!isProduction" while="" timeout="0" info="">
[00:00:33.448]      // if-block "!isProduction"
[00:00:33.448]        // =>  FALSE
[00:00:33.448]      // skip if-block "!isProduction"
[00:00:33.448]    </control>
[00:00:33.448]  </sequence>
[00:00:33.448]  
[00:02:42.992]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:02:42.992]  
[00:02:43.002]  <debugvars>
[00:02:43.002]    // Pre-defined
[00:02:43.002]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:02:43.002]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:02:43.002]    __dp=0x00000000
[00:02:43.002]    __ap=0x00000000
[00:02:43.002]    __traceout=0x00000000      (Trace Disabled)
[00:02:43.002]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:02:43.002]    __FlashAddr=0x00000000
[00:02:43.002]    __FlashLen=0x00000000
[00:02:43.002]    __FlashArg=0x00000000
[00:02:43.002]    __FlashOp=0x00000000
[00:02:43.002]    __Result=0x00000000
[00:02:43.002]  </debugvars>
[00:02:43.002]  
[00:02:43.002]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:02:43.002]    <block atomic="false" info="">
[00:02:43.002]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:02:43.002]        // -> [isSWJ <= 0x00000001]
[00:02:43.002]      __var hasDormant = __protocol & 0x00020000;
[00:02:43.002]        // -> [hasDormant <= 0x00000000]
[00:02:43.002]      __var protType   = __protocol & 0x0000FFFF;
[00:02:43.002]        // -> [protType <= 0x00000002]
[00:02:43.002]    </block>
[00:02:43.002]    <control if="protType == 1" while="" timeout="0" info="">
[00:02:43.002]      // if-block "protType == 1"
[00:02:43.002]        // =>  FALSE
[00:02:43.002]      // skip if-block "protType == 1"
[00:02:43.002]    </control>
[00:02:43.002]    <control if="protType == 2" while="" timeout="0" info="">
[00:02:43.002]      // if-block "protType == 2"
[00:02:43.002]        // =>  TRUE
[00:02:43.002]      <control if="isSWJ" while="" timeout="0" info="">
[00:02:43.002]        // if-block "isSWJ"
[00:02:43.002]          // =>  TRUE
[00:02:43.002]        <control if="hasDormant" while="" timeout="0" info="">
[00:02:43.002]          // if-block "hasDormant"
[00:02:43.002]            // =>  FALSE
[00:02:43.002]          // skip if-block "hasDormant"
[00:02:43.002]        </control>
[00:02:43.002]        <control if="!hasDormant" while="" timeout="0" info="">
[00:02:43.002]          // if-block "!hasDormant"
[00:02:43.002]            // =>  TRUE
[00:02:43.002]          <block atomic="false" info="">
[00:02:43.002]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:02:43.002]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:02:43.002]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:02:43.010]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:02:43.010]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:02:43.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:02:43.010]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:02:43.010]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:02:43.010]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:02:43.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:02:43.010]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:02:43.010]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:02:43.010]          </block>
[00:02:43.010]          // end if-block "!hasDormant"
[00:02:43.010]        </control>
[00:02:43.010]        // end if-block "isSWJ"
[00:02:43.010]      </control>
[00:02:43.010]      <control if="!isSWJ" while="" timeout="0" info="">
[00:02:43.010]        // if-block "!isSWJ"
[00:02:43.010]          // =>  FALSE
[00:02:43.010]        // skip if-block "!isSWJ"
[00:02:43.010]      </control>
[00:02:43.010]      <block atomic="false" info="">
[00:02:43.010]        ReadDP(0x0);
[00:02:43.010]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:02:43.021]      </block>
[00:02:43.021]      // end if-block "protType == 2"
[00:02:43.021]    </control>
[00:02:43.021]  </sequence>
[00:02:43.021]  
[00:02:43.021]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:02:43.021]  
[00:02:43.021]  <debugvars>
[00:02:43.021]    // Pre-defined
[00:02:43.021]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:02:43.021]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:02:43.021]    __dp=0x00000000
[00:02:43.021]    __ap=0x00000000
[00:02:43.021]    __traceout=0x00000000      (Trace Disabled)
[00:02:43.021]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:02:43.021]    __FlashAddr=0x00000000
[00:02:43.021]    __FlashLen=0x00000000
[00:02:43.021]    __FlashArg=0x00000000
[00:02:43.021]    __FlashOp=0x00000000
[00:02:43.021]    __Result=0x00000000
[00:02:43.021]  </debugvars>
[00:02:43.021]  
[00:02:43.021]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:02:43.021]    <block atomic="false" info="">
[00:02:43.021]      __var SW_DP_ABORT       = 0x0;
[00:02:43.021]        // -> [SW_DP_ABORT <= 0x00000000]
[00:02:43.021]      __var DP_CTRL_STAT      = 0x4;
[00:02:43.021]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:02:43.021]      __var DP_SELECT         = 0x8;
[00:02:43.021]        // -> [DP_SELECT <= 0x00000008]
[00:02:43.021]      __var powered_down      = 0;
[00:02:43.021]        // -> [powered_down <= 0x00000000]
[00:02:43.021]      WriteDP(DP_SELECT, 0x00000000);
[00:02:43.021]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:02:43.021]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:02:43.032]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:02:43.032]        // -> [powered_down <= 0x00000001]
[00:02:43.032]    </block>
[00:02:43.032]    <control if="powered_down" while="" timeout="0" info="">
[00:02:43.032]      // if-block "powered_down"
[00:02:43.032]        // =>  TRUE
[00:02:43.032]      <block atomic="false" info="">
[00:02:43.032]        Message(0, "Debug/System power-up request sent");
[00:02:43.032]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:02:43.032]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:02:43.032]      </block>
[00:02:43.032]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:02:43.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:02:43.032]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:02:43.032]        // while-condition  =>  FALSE
[00:02:43.032]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:02:43.032]      </control>
[00:02:43.032]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:02:43.032]        // if-block "(__protocol & 0xFFFF) == 1"
[00:02:43.032]          // =>  FALSE
[00:02:43.032]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:02:43.032]      </control>
[00:02:43.032]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:02:43.032]        // if-block "(__protocol & 0xFFFF) == 2"
[00:02:43.032]          // =>  TRUE
[00:02:43.041]        <block atomic="false" info="">
[00:02:43.041]          Message(0, "executing SWD power up");
[00:02:43.043]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:02:43.045]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:02:43.045]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:02:43.045]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:02:43.045]        </block>
[00:02:43.045]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:02:43.045]      </control>
[00:02:43.045]      // end if-block "powered_down"
[00:02:43.045]    </control>
[00:02:43.045]    <block atomic="false" info="">
[00:02:43.045]      __var DEBUG_PORT_VAL    = 0;
[00:02:43.045]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:02:43.045]      __var ACCESS_POINT_VAL  = 0;
[00:02:43.045]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:02:43.045]      __ap = 1; 
[00:02:43.045]        // -> [__ap <= 0x00000001]
[00:02:43.045]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:02:43.052]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:02:43.052]      __ap = 4;
[00:02:43.052]        // -> [__ap <= 0x00000004]
[00:02:43.052]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:02:43.054]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:02:43.054]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:02:43.054]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:02:43.061]    </block>
[00:02:43.061]    <block atomic="false" info="">
[00:02:43.061]      __var nReset = 0x80;
[00:02:43.061]        // -> [nReset <= 0x00000080]
[00:02:43.061]      __var canReadPins = 0;
[00:02:43.061]        // -> [canReadPins <= 0x00000000]
[00:02:43.061]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:02:43.061]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:02:43.061]        // -> [canReadPins <= 0x00000001]
[00:02:43.061]    </block>
[00:02:43.061]    <control if="" while="1" timeout="200" info="">
[00:02:43.061]      // while "1"  (timeout="200")
[00:02:43.061]      // while-condition  =>  TRUE
[00:02:43.061]      // while "1"  (timeout="200")
[00:02:43.061]      // while-condition  =>  TRUE
[00:02:43.061]      // while "1"  (timeout="200")
[00:02:43.061]      // while-condition  =>  TRUE
[00:02:43.061]      // while "1"  (timeout="200")
[00:02:43.061]      // while-condition  =>  TRUE
[00:02:43.061]      // while "1"  (timeout="200")
[00:02:43.061]      // while-condition  =>  TRUE
[00:02:43.061]      // while "1"  (timeout="200")
[00:02:43.061]      // while-condition  =>  TRUE
[00:02:43.061]      // while "1"  (timeout="200")
[00:02:43.061]      // while-condition  =>  TRUE
[00:02:43.061]      // while "1"  (timeout="200")
[00:02:43.061]      // while-condition  =>  TRUE
[00:02:43.061]      // while "1"  (timeout="200")
[00:02:43.061]      // while-condition  =>  TRUE
[00:02:43.061]      // while "1"  (timeout="200")
[00:02:43.061]      // while-condition  =>  TRUE
[00:02:43.068]      // while "1"  (timeout="200")
[00:02:43.068]      // while  =>  TIMEOUT
[00:02:43.068]      // end while "1"
[00:02:43.068]    </control>
[00:02:43.068]    <control if="canReadPins" while="" timeout="0" info="">
[00:02:43.068]      // if-block "canReadPins"
[00:02:43.068]        // =>  TRUE
[00:02:43.068]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:02:43.068]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:02:43.068]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:02:43.068]        // while-condition  =>  FALSE
[00:02:43.068]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:02:43.068]      </control>
[00:02:43.068]      // end if-block "canReadPins"
[00:02:43.068]    </control>
[00:02:43.068]    <control if="!canReadPins" while="" timeout="0" info="">
[00:02:43.068]      // if-block "!canReadPins"
[00:02:43.071]        // =>  FALSE
[00:02:43.071]      // skip if-block "!canReadPins"
[00:02:43.071]    </control>
[00:02:43.071]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:02:43.071]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:02:43.071]        // =>  TRUE
[00:02:43.071]      <block atomic="false" info="">
[00:02:43.071]        WriteAP(0x00, 0x190008);
[00:02:43.074]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:02:43.074]        WriteAP(0xF0, 0x01);
[00:02:43.074]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:02:43.074]      </block>
[00:02:43.074]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:02:43.074]    </control>
[00:02:43.074]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:02:43.074]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:02:43.074]        // =>  FALSE
[00:02:43.074]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:02:43.074]    </control>
[00:02:43.074]    <block atomic="false" info="">
[00:02:43.074]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:02:43.082]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:02:43.082]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:02:43.082]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:02:43.085]      __ap = 0; //lets make sure we reset the access point selection
[00:02:43.085]        // -> [__ap <= 0x00000000]
[00:02:43.085]    </block>
[00:02:43.085]  </sequence>
[00:02:43.085]  
[00:02:43.105]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:02:43.105]  
[00:02:43.105]  <debugvars>
[00:02:43.105]    // Pre-defined
[00:02:43.105]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:02:43.105]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:02:43.105]    __dp=0x00000000
[00:02:43.105]    __ap=0x00000000
[00:02:43.105]    __traceout=0x00000000      (Trace Disabled)
[00:02:43.105]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:02:43.105]    __FlashAddr=0x00000000
[00:02:43.105]    __FlashLen=0x00000000
[00:02:43.105]    __FlashArg=0x00000000
[00:02:43.105]    __FlashOp=0x00000000
[00:02:43.105]    __Result=0x00000000
[00:02:43.105]  </debugvars>
[00:02:43.105]  
[00:02:43.105]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:02:43.105]    <block atomic="false" info="">
[00:02:43.105]      __var deviceID = 0;
[00:02:43.105]        // -> [deviceID <= 0x00000000]
[00:02:43.105]      __var version = 0;
[00:02:43.105]        // -> [version <= 0x00000000]
[00:02:43.105]      __var partNum = 0;
[00:02:43.105]        // -> [partNum <= 0x00000000]
[00:02:43.105]      __var manuf = 0;
[00:02:43.105]        // -> [manuf <= 0x00000000]
[00:02:43.105]      __var isMSPM0G1X0X_G3X0X = 0;
[00:02:43.105]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:02:43.105]      __var isProduction = 0;
[00:02:43.105]        // -> [isProduction <= 0x00000000]
[00:02:43.105]      __var continueId = 0;
[00:02:43.105]        // -> [continueId <= 0x00000000]
[00:02:43.105]      deviceID =   Read32(0x41C40004);
[00:02:43.115]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:02:43.115]        // -> [deviceID <= 0x2BB8802F]
[00:02:43.115]      version = deviceID >> 28;
[00:02:43.115]        // -> [version <= 0x00000002]
[00:02:43.115]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:02:43.115]        // -> [partNum <= 0x0000BB88]
[00:02:43.115]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:02:43.115]        // -> [manuf <= 0x00000017]
[00:02:43.115]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:02:43.115]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:02:43.115]      isProduction = (version > 0);
[00:02:43.115]        // -> [isProduction <= 0x00000001]
[00:02:43.115]    </block>
[00:02:43.115]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:02:43.115]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:02:43.115]        // =>  FALSE
[00:02:43.115]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:02:43.115]    </control>
[00:02:43.115]    <control if="continueId == 4" while="" timeout="0" info="">
[00:02:43.115]      // if-block "continueId == 4"
[00:02:43.115]        // =>  FALSE
[00:02:43.115]      // skip if-block "continueId == 4"
[00:02:43.115]    </control>
[00:02:43.115]    <control if="!isProduction" while="" timeout="0" info="">
[00:02:43.115]      // if-block "!isProduction"
[00:02:43.115]        // =>  FALSE
[00:02:43.115]      // skip if-block "!isProduction"
[00:02:43.115]    </control>
[00:02:43.115]  </sequence>
[00:02:43.115]  
[00:03:37.340]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:03:37.340]  
[00:03:37.348]  <debugvars>
[00:03:37.348]    // Pre-defined
[00:03:37.348]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:03:37.348]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:03:37.348]    __dp=0x00000000
[00:03:37.348]    __ap=0x00000000
[00:03:37.348]    __traceout=0x00000000      (Trace Disabled)
[00:03:37.348]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:03:37.348]    __FlashAddr=0x00000000
[00:03:37.348]    __FlashLen=0x00000000
[00:03:37.348]    __FlashArg=0x00000000
[00:03:37.348]    __FlashOp=0x00000000
[00:03:37.348]    __Result=0x00000000
[00:03:37.348]  </debugvars>
[00:03:37.348]  
[00:03:37.348]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:03:37.348]    <block atomic="false" info="">
[00:03:37.348]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:03:37.348]        // -> [isSWJ <= 0x00000001]
[00:03:37.348]      __var hasDormant = __protocol & 0x00020000;
[00:03:37.348]        // -> [hasDormant <= 0x00000000]
[00:03:37.350]      __var protType   = __protocol & 0x0000FFFF;
[00:03:37.350]        // -> [protType <= 0x00000002]
[00:03:37.350]    </block>
[00:03:37.350]    <control if="protType == 1" while="" timeout="0" info="">
[00:03:37.350]      // if-block "protType == 1"
[00:03:37.350]        // =>  FALSE
[00:03:37.350]      // skip if-block "protType == 1"
[00:03:37.350]    </control>
[00:03:37.350]    <control if="protType == 2" while="" timeout="0" info="">
[00:03:37.350]      // if-block "protType == 2"
[00:03:37.350]        // =>  TRUE
[00:03:37.350]      <control if="isSWJ" while="" timeout="0" info="">
[00:03:37.350]        // if-block "isSWJ"
[00:03:37.350]          // =>  TRUE
[00:03:37.350]        <control if="hasDormant" while="" timeout="0" info="">
[00:03:37.350]          // if-block "hasDormant"
[00:03:37.350]            // =>  FALSE
[00:03:37.350]          // skip if-block "hasDormant"
[00:03:37.350]        </control>
[00:03:37.350]        <control if="!hasDormant" while="" timeout="0" info="">
[00:03:37.350]          // if-block "!hasDormant"
[00:03:37.350]            // =>  TRUE
[00:03:37.350]          <block atomic="false" info="">
[00:03:37.350]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:03:37.350]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:03:37.350]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:03:37.355]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:03:37.355]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:03:37.355]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:03:37.355]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:03:37.355]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:03:37.355]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:03:37.360]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:03:37.360]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:03:37.360]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:03:37.360]          </block>
[00:03:37.360]          // end if-block "!hasDormant"
[00:03:37.360]        </control>
[00:03:37.360]        // end if-block "isSWJ"
[00:03:37.360]      </control>
[00:03:37.360]      <control if="!isSWJ" while="" timeout="0" info="">
[00:03:37.360]        // if-block "!isSWJ"
[00:03:37.360]          // =>  FALSE
[00:03:37.360]        // skip if-block "!isSWJ"
[00:03:37.360]      </control>
[00:03:37.360]      <block atomic="false" info="">
[00:03:37.360]        ReadDP(0x0);
[00:03:37.360]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:03:37.360]      </block>
[00:03:37.360]      // end if-block "protType == 2"
[00:03:37.360]    </control>
[00:03:37.360]  </sequence>
[00:03:37.360]  
[00:03:37.367]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:03:37.367]  
[00:03:37.367]  <debugvars>
[00:03:37.367]    // Pre-defined
[00:03:37.367]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:03:37.367]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:03:37.367]    __dp=0x00000000
[00:03:37.367]    __ap=0x00000000
[00:03:37.367]    __traceout=0x00000000      (Trace Disabled)
[00:03:37.367]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:03:37.367]    __FlashAddr=0x00000000
[00:03:37.367]    __FlashLen=0x00000000
[00:03:37.367]    __FlashArg=0x00000000
[00:03:37.367]    __FlashOp=0x00000000
[00:03:37.367]    __Result=0x00000000
[00:03:37.367]  </debugvars>
[00:03:37.367]  
[00:03:37.367]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:03:37.367]    <block atomic="false" info="">
[00:03:37.367]      __var SW_DP_ABORT       = 0x0;
[00:03:37.367]        // -> [SW_DP_ABORT <= 0x00000000]
[00:03:37.367]      __var DP_CTRL_STAT      = 0x4;
[00:03:37.367]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:03:37.367]      __var DP_SELECT         = 0x8;
[00:03:37.367]        // -> [DP_SELECT <= 0x00000008]
[00:03:37.367]      __var powered_down      = 0;
[00:03:37.367]        // -> [powered_down <= 0x00000000]
[00:03:37.367]      WriteDP(DP_SELECT, 0x00000000);
[00:03:37.370]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:03:37.370]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:03:37.370]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:03:37.370]        // -> [powered_down <= 0x00000001]
[00:03:37.370]    </block>
[00:03:37.370]    <control if="powered_down" while="" timeout="0" info="">
[00:03:37.370]      // if-block "powered_down"
[00:03:37.370]        // =>  TRUE
[00:03:37.370]      <block atomic="false" info="">
[00:03:37.370]        Message(0, "Debug/System power-up request sent");
[00:03:37.375]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:03:37.375]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:03:37.375]      </block>
[00:03:37.375]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:03:37.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:03:37.375]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:03:37.375]        // while-condition  =>  FALSE
[00:03:37.375]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:03:37.375]      </control>
[00:03:37.380]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:03:37.380]        // if-block "(__protocol & 0xFFFF) == 1"
[00:03:37.380]          // =>  FALSE
[00:03:37.380]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:03:37.380]      </control>
[00:03:37.380]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:03:37.380]        // if-block "(__protocol & 0xFFFF) == 2"
[00:03:37.381]          // =>  TRUE
[00:03:37.381]        <block atomic="false" info="">
[00:03:37.381]          Message(0, "executing SWD power up");
[00:03:37.381]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:03:37.384]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:03:37.385]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:03:37.386]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:03:37.386]        </block>
[00:03:37.386]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:03:37.386]      </control>
[00:03:37.386]      // end if-block "powered_down"
[00:03:37.388]    </control>
[00:03:37.388]    <block atomic="false" info="">
[00:03:37.388]      __var DEBUG_PORT_VAL    = 0;
[00:03:37.388]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:03:37.388]      __var ACCESS_POINT_VAL  = 0;
[00:03:37.388]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:03:37.388]      __ap = 1; 
[00:03:37.388]        // -> [__ap <= 0x00000001]
[00:03:37.388]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:03:37.390]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:03:37.390]      __ap = 4;
[00:03:37.390]        // -> [__ap <= 0x00000004]
[00:03:37.390]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:03:37.396]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:03:37.396]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:03:37.396]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:03:37.396]    </block>
[00:03:37.396]    <block atomic="false" info="">
[00:03:37.396]      __var nReset = 0x80;
[00:03:37.396]        // -> [nReset <= 0x00000080]
[00:03:37.396]      __var canReadPins = 0;
[00:03:37.396]        // -> [canReadPins <= 0x00000000]
[00:03:37.396]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:03:37.400]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:03:37.400]        // -> [canReadPins <= 0x00000001]
[00:03:37.400]    </block>
[00:03:37.400]    <control if="" while="1" timeout="200" info="">
[00:03:37.400]      // while "1"  (timeout="200")
[00:03:37.400]      // while-condition  =>  TRUE
[00:03:37.400]      // while "1"  (timeout="200")
[00:03:37.400]      // while-condition  =>  TRUE
[00:03:37.400]      // while "1"  (timeout="200")
[00:03:37.400]      // while-condition  =>  TRUE
[00:03:37.400]      // while "1"  (timeout="200")
[00:03:37.400]      // while-condition  =>  TRUE
[00:03:37.400]      // while "1"  (timeout="200")
[00:03:37.400]      // while-condition  =>  TRUE
[00:03:37.400]      // while "1"  (timeout="200")
[00:03:37.400]      // while-condition  =>  TRUE
[00:03:37.400]      // while "1"  (timeout="200")
[00:03:37.400]      // while-condition  =>  TRUE
[00:03:37.400]      // while "1"  (timeout="200")
[00:03:37.400]      // while-condition  =>  TRUE
[00:03:37.400]      // while "1"  (timeout="200")
[00:03:37.400]      // while-condition  =>  TRUE
[00:03:37.403]      // while "1"  (timeout="200")
[00:03:37.403]      // while-condition  =>  TRUE
[00:03:37.403]      // while "1"  (timeout="200")
[00:03:37.403]      // while-condition  =>  TRUE
[00:03:37.403]      // while "1"  (timeout="200")
[00:03:37.403]      // while-condition  =>  TRUE
[00:03:37.403]      // while "1"  (timeout="200")
[00:03:37.403]      // while-condition  =>  TRUE
[00:03:37.403]      // while "1"  (timeout="200")
[00:03:37.404]      // while-condition  =>  TRUE
[00:03:37.404]      // while "1"  (timeout="200")
[00:03:37.404]      // while-condition  =>  TRUE
[00:03:37.404]      // while "1"  (timeout="200")
[00:03:37.404]      // while-condition  =>  TRUE
[00:03:37.404]      // while "1"  (timeout="200")
[00:03:37.404]      // while-condition  =>  TRUE
[00:03:37.404]      // while "1"  (timeout="200")
[00:03:37.404]      // while-condition  =>  TRUE
[00:03:37.404]      // while "1"  (timeout="200")
[00:03:37.406]      // while-condition  =>  TRUE
[00:03:37.406]      // while "1"  (timeout="200")
[00:03:37.406]      // while-condition  =>  TRUE
[00:03:37.406]      // while "1"  (timeout="200")
[00:03:37.406]      // while-condition  =>  TRUE
[00:03:37.406]      // while "1"  (timeout="200")
[00:03:37.406]      // while-condition  =>  TRUE
[00:03:37.406]      // while "1"  (timeout="200")
[00:03:37.406]      // while-condition  =>  TRUE
[00:03:37.406]      // while "1"  (timeout="200")
[00:03:37.406]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.407]      // while-condition  =>  TRUE
[00:03:37.407]      // while "1"  (timeout="200")
[00:03:37.410]      // while-condition  =>  TRUE
[00:03:37.410]      // while "1"  (timeout="200")
[00:03:37.410]      // while  =>  TIMEOUT
[00:03:37.410]      // end while "1"
[00:03:37.410]    </control>
[00:03:37.410]    <control if="canReadPins" while="" timeout="0" info="">
[00:03:37.410]      // if-block "canReadPins"
[00:03:37.410]        // =>  TRUE
[00:03:37.410]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:03:37.410]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:03:37.411]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:03:37.411]        // while-condition  =>  FALSE
[00:03:37.411]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:03:37.411]      </control>
[00:03:37.411]      // end if-block "canReadPins"
[00:03:37.411]    </control>
[00:03:37.411]    <control if="!canReadPins" while="" timeout="0" info="">
[00:03:37.411]      // if-block "!canReadPins"
[00:03:37.411]        // =>  FALSE
[00:03:37.411]      // skip if-block "!canReadPins"
[00:03:37.411]    </control>
[00:03:37.411]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:03:37.411]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:03:37.411]        // =>  TRUE
[00:03:37.411]      <block atomic="false" info="">
[00:03:37.411]        WriteAP(0x00, 0x190008);
[00:03:37.411]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:03:37.411]        WriteAP(0xF0, 0x01);
[00:03:37.420]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:03:37.420]      </block>
[00:03:37.420]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:03:37.420]    </control>
[00:03:37.420]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:03:37.420]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:03:37.420]        // =>  FALSE
[00:03:37.420]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:03:37.420]    </control>
[00:03:37.420]    <block atomic="false" info="">
[00:03:37.420]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:03:37.426]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:03:37.426]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:03:37.426]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:03:37.431]      __ap = 0; //lets make sure we reset the access point selection
[00:03:37.431]        // -> [__ap <= 0x00000000]
[00:03:37.431]    </block>
[00:03:37.431]  </sequence>
[00:03:37.431]  
[00:03:37.450]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:03:37.450]  
[00:03:37.450]  <debugvars>
[00:03:37.450]    // Pre-defined
[00:03:37.450]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:03:37.450]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:03:37.450]    __dp=0x00000000
[00:03:37.450]    __ap=0x00000000
[00:03:37.451]    __traceout=0x00000000      (Trace Disabled)
[00:03:37.451]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:03:37.451]    __FlashAddr=0x00000000
[00:03:37.451]    __FlashLen=0x00000000
[00:03:37.451]    __FlashArg=0x00000000
[00:03:37.451]    __FlashOp=0x00000000
[00:03:37.451]    __Result=0x00000000
[00:03:37.451]  </debugvars>
[00:03:37.451]  
[00:03:37.451]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:03:37.451]    <block atomic="false" info="">
[00:03:37.451]      __var deviceID = 0;
[00:03:37.452]        // -> [deviceID <= 0x00000000]
[00:03:37.452]      __var version = 0;
[00:03:37.452]        // -> [version <= 0x00000000]
[00:03:37.452]      __var partNum = 0;
[00:03:37.452]        // -> [partNum <= 0x00000000]
[00:03:37.452]      __var manuf = 0;
[00:03:37.452]        // -> [manuf <= 0x00000000]
[00:03:37.452]      __var isMSPM0G1X0X_G3X0X = 0;
[00:03:37.452]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:03:37.453]      __var isProduction = 0;
[00:03:37.453]        // -> [isProduction <= 0x00000000]
[00:03:37.453]      __var continueId = 0;
[00:03:37.453]        // -> [continueId <= 0x00000000]
[00:03:37.453]      deviceID =   Read32(0x41C40004);
[00:03:37.458]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:03:37.458]        // -> [deviceID <= 0x2BB8802F]
[00:03:37.458]      version = deviceID >> 28;
[00:03:37.458]        // -> [version <= 0x00000002]
[00:03:37.458]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:03:37.458]        // -> [partNum <= 0x0000BB88]
[00:03:37.459]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:03:37.459]        // -> [manuf <= 0x00000017]
[00:03:37.459]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:03:37.459]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:03:37.459]      isProduction = (version > 0);
[00:03:37.459]        // -> [isProduction <= 0x00000001]
[00:03:37.459]    </block>
[00:03:37.459]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:03:37.460]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:03:37.460]        // =>  FALSE
[00:03:37.460]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:03:37.460]    </control>
[00:03:37.460]    <control if="continueId == 4" while="" timeout="0" info="">
[00:03:37.460]      // if-block "continueId == 4"
[00:03:37.460]        // =>  FALSE
[00:03:37.460]      // skip if-block "continueId == 4"
[00:03:37.460]    </control>
[00:03:37.461]    <control if="!isProduction" while="" timeout="0" info="">
[00:03:37.461]      // if-block "!isProduction"
[00:03:37.461]        // =>  FALSE
[00:03:37.461]      // skip if-block "!isProduction"
[00:03:37.461]    </control>
[00:03:37.461]  </sequence>
[00:03:37.461]  
[00:06:12.646]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:06:12.646]  
[00:06:12.647]  <debugvars>
[00:06:12.647]    // Pre-defined
[00:06:12.647]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:06:12.647]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:06:12.647]    __dp=0x00000000
[00:06:12.647]    __ap=0x00000000
[00:06:12.647]    __traceout=0x00000000      (Trace Disabled)
[00:06:12.648]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:06:12.648]    __FlashAddr=0x00000000
[00:06:12.648]    __FlashLen=0x00000000
[00:06:12.648]    __FlashArg=0x00000000
[00:06:12.648]    __FlashOp=0x00000000
[00:06:12.648]    __Result=0x00000000
[00:06:12.649]  </debugvars>
[00:06:12.649]  
[00:06:12.649]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:06:12.649]    <block atomic="false" info="">
[00:06:12.650]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:06:12.650]        // -> [isSWJ <= 0x00000001]
[00:06:12.650]      __var hasDormant = __protocol & 0x00020000;
[00:06:12.650]        // -> [hasDormant <= 0x00000000]
[00:06:12.650]      __var protType   = __protocol & 0x0000FFFF;
[00:06:12.650]        // -> [protType <= 0x00000002]
[00:06:12.650]    </block>
[00:06:12.650]    <control if="protType == 1" while="" timeout="0" info="">
[00:06:12.650]      // if-block "protType == 1"
[00:06:12.650]        // =>  FALSE
[00:06:12.651]      // skip if-block "protType == 1"
[00:06:12.651]    </control>
[00:06:12.651]    <control if="protType == 2" while="" timeout="0" info="">
[00:06:12.651]      // if-block "protType == 2"
[00:06:12.651]        // =>  TRUE
[00:06:12.651]      <control if="isSWJ" while="" timeout="0" info="">
[00:06:12.651]        // if-block "isSWJ"
[00:06:12.651]          // =>  TRUE
[00:06:12.651]        <control if="hasDormant" while="" timeout="0" info="">
[00:06:12.652]          // if-block "hasDormant"
[00:06:12.652]            // =>  FALSE
[00:06:12.652]          // skip if-block "hasDormant"
[00:06:12.652]        </control>
[00:06:12.652]        <control if="!hasDormant" while="" timeout="0" info="">
[00:06:12.652]          // if-block "!hasDormant"
[00:06:12.652]            // =>  TRUE
[00:06:12.652]          <block atomic="false" info="">
[00:06:12.652]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:06:12.654]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:06:12.654]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:06:12.655]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:06:12.655]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:06:12.657]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:06:12.657]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:06:12.658]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:06:12.658]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:06:12.660]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:06:12.660]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:06:12.664]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:06:12.666]          </block>
[00:06:12.666]          // end if-block "!hasDormant"
[00:06:12.666]        </control>
[00:06:12.666]        // end if-block "isSWJ"
[00:06:12.666]      </control>
[00:06:12.666]      <control if="!isSWJ" while="" timeout="0" info="">
[00:06:12.666]        // if-block "!isSWJ"
[00:06:12.666]          // =>  FALSE
[00:06:12.666]        // skip if-block "!isSWJ"
[00:06:12.666]      </control>
[00:06:12.666]      <block atomic="false" info="">
[00:06:12.666]        ReadDP(0x0);
[00:06:12.668]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:06:12.668]      </block>
[00:06:12.668]      // end if-block "protType == 2"
[00:06:12.668]    </control>
[00:06:12.668]  </sequence>
[00:06:12.668]  
[00:06:12.672]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:06:12.672]  
[00:06:12.672]  <debugvars>
[00:06:12.672]    // Pre-defined
[00:06:12.672]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:06:12.672]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:06:12.672]    __dp=0x00000000
[00:06:12.672]    __ap=0x00000000
[00:06:12.672]    __traceout=0x00000000      (Trace Disabled)
[00:06:12.673]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:06:12.673]    __FlashAddr=0x00000000
[00:06:12.673]    __FlashLen=0x00000000
[00:06:12.673]    __FlashArg=0x00000000
[00:06:12.673]    __FlashOp=0x00000000
[00:06:12.673]    __Result=0x00000000
[00:06:12.673]  </debugvars>
[00:06:12.673]  
[00:06:12.673]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:06:12.673]    <block atomic="false" info="">
[00:06:12.673]      __var SW_DP_ABORT       = 0x0;
[00:06:12.673]        // -> [SW_DP_ABORT <= 0x00000000]
[00:06:12.674]      __var DP_CTRL_STAT      = 0x4;
[00:06:12.674]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:06:12.674]      __var DP_SELECT         = 0x8;
[00:06:12.674]        // -> [DP_SELECT <= 0x00000008]
[00:06:12.674]      __var powered_down      = 0;
[00:06:12.674]        // -> [powered_down <= 0x00000000]
[00:06:12.674]      WriteDP(DP_SELECT, 0x00000000);
[00:06:12.676]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:06:12.676]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:06:12.677]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:06:12.677]        // -> [powered_down <= 0x00000001]
[00:06:12.678]    </block>
[00:06:12.678]    <control if="powered_down" while="" timeout="0" info="">
[00:06:12.678]      // if-block "powered_down"
[00:06:12.678]        // =>  TRUE
[00:06:12.678]      <block atomic="false" info="">
[00:06:12.678]        Message(0, "Debug/System power-up request sent");
[00:06:12.681]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:06:12.683]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:06:12.683]      </block>
[00:06:12.683]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:06:12.683]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:06:12.684]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:06:12.684]        // while-condition  =>  FALSE
[00:06:12.685]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:06:12.685]      </control>
[00:06:12.685]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:06:12.685]        // if-block "(__protocol & 0xFFFF) == 1"
[00:06:12.685]          // =>  FALSE
[00:06:12.685]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:06:12.685]      </control>
[00:06:12.685]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:06:12.685]        // if-block "(__protocol & 0xFFFF) == 2"
[00:06:12.685]          // =>  TRUE
[00:06:12.685]        <block atomic="false" info="">
[00:06:12.685]          Message(0, "executing SWD power up");
[00:06:12.687]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:06:12.688]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:06:12.689]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:06:12.691]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:06:12.691]        </block>
[00:06:12.691]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:06:12.692]      </control>
[00:06:12.692]      // end if-block "powered_down"
[00:06:12.692]    </control>
[00:06:12.692]    <block atomic="false" info="">
[00:06:12.692]      __var DEBUG_PORT_VAL    = 0;
[00:06:12.692]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:06:12.692]      __var ACCESS_POINT_VAL  = 0;
[00:06:12.693]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:06:12.693]      __ap = 1; 
[00:06:12.693]        // -> [__ap <= 0x00000001]
[00:06:12.693]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:06:12.696]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:06:12.696]      __ap = 4;
[00:06:12.696]        // -> [__ap <= 0x00000004]
[00:06:12.696]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:06:12.699]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:06:12.699]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:06:12.699]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:06:12.702]    </block>
[00:06:12.702]    <block atomic="false" info="">
[00:06:12.702]      __var nReset = 0x80;
[00:06:12.702]        // -> [nReset <= 0x00000080]
[00:06:12.702]      __var canReadPins = 0;
[00:06:12.702]        // -> [canReadPins <= 0x00000000]
[00:06:12.702]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:06:12.704]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:06:12.704]        // -> [canReadPins <= 0x00000001]
[00:06:12.704]    </block>
[00:06:12.704]    <control if="" while="1" timeout="200" info="">
[00:06:12.705]      // while "1"  (timeout="200")
[00:06:12.705]      // while-condition  =>  TRUE
[00:06:12.705]      // while "1"  (timeout="200")
[00:06:12.705]      // while-condition  =>  TRUE
[00:06:12.705]      // while "1"  (timeout="200")
[00:06:12.706]      // while-condition  =>  TRUE
[00:06:12.706]      // while "1"  (timeout="200")
[00:06:12.706]      // while  =>  TIMEOUT
[00:06:12.706]      // end while "1"
[00:06:12.706]    </control>
[00:06:12.706]    <control if="canReadPins" while="" timeout="0" info="">
[00:06:12.706]      // if-block "canReadPins"
[00:06:12.706]        // =>  TRUE
[00:06:12.706]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:06:12.706]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:06:12.707]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:06:12.708]        // while-condition  =>  FALSE
[00:06:12.708]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:06:12.708]      </control>
[00:06:12.708]      // end if-block "canReadPins"
[00:06:12.708]    </control>
[00:06:12.708]    <control if="!canReadPins" while="" timeout="0" info="">
[00:06:12.708]      // if-block "!canReadPins"
[00:06:12.708]        // =>  FALSE
[00:06:12.708]      // skip if-block "!canReadPins"
[00:06:12.708]    </control>
[00:06:12.708]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:06:12.708]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:06:12.710]        // =>  TRUE
[00:06:12.710]      <block atomic="false" info="">
[00:06:12.710]        WriteAP(0x00, 0x190008);
[00:06:12.711]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:06:12.711]        WriteAP(0xF0, 0x01);
[00:06:12.715]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:06:12.715]      </block>
[00:06:12.715]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:06:12.715]    </control>
[00:06:12.715]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:06:12.715]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:06:12.715]        // =>  FALSE
[00:06:12.715]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:06:12.715]    </control>
[00:06:12.715]    <block atomic="false" info="">
[00:06:12.715]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:06:12.718]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:06:12.718]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:06:12.718]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:06:12.720]      __ap = 0; //lets make sure we reset the access point selection
[00:06:12.720]        // -> [__ap <= 0x00000000]
[00:06:12.720]    </block>
[00:06:12.720]  </sequence>
[00:06:12.721]  
[00:06:12.740]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:06:12.740]  
[00:06:12.740]  <debugvars>
[00:06:12.740]    // Pre-defined
[00:06:12.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:06:12.740]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:06:12.740]    __dp=0x00000000
[00:06:12.741]    __ap=0x00000000
[00:06:12.741]    __traceout=0x00000000      (Trace Disabled)
[00:06:12.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:06:12.741]    __FlashAddr=0x00000000
[00:06:12.741]    __FlashLen=0x00000000
[00:06:12.741]    __FlashArg=0x00000000
[00:06:12.741]    __FlashOp=0x00000000
[00:06:12.741]    __Result=0x00000000
[00:06:12.741]  </debugvars>
[00:06:12.741]  
[00:06:12.741]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:06:12.742]    <block atomic="false" info="">
[00:06:12.742]      __var deviceID = 0;
[00:06:12.742]        // -> [deviceID <= 0x00000000]
[00:06:12.742]      __var version = 0;
[00:06:12.742]        // -> [version <= 0x00000000]
[00:06:12.742]      __var partNum = 0;
[00:06:12.742]        // -> [partNum <= 0x00000000]
[00:06:12.742]      __var manuf = 0;
[00:06:12.742]        // -> [manuf <= 0x00000000]
[00:06:12.742]      __var isMSPM0G1X0X_G3X0X = 0;
[00:06:12.742]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:06:12.742]      __var isProduction = 0;
[00:06:12.743]        // -> [isProduction <= 0x00000000]
[00:06:12.743]      __var continueId = 0;
[00:06:12.743]        // -> [continueId <= 0x00000000]
[00:06:12.743]      deviceID =   Read32(0x41C40004);
[00:06:12.748]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:06:12.748]        // -> [deviceID <= 0x2BB8802F]
[00:06:12.748]      version = deviceID >> 28;
[00:06:12.748]        // -> [version <= 0x00000002]
[00:06:12.748]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:06:12.749]        // -> [partNum <= 0x0000BB88]
[00:06:12.750]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:06:12.750]        // -> [manuf <= 0x00000017]
[00:06:12.750]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:06:12.750]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:06:12.750]      isProduction = (version > 0);
[00:06:12.750]        // -> [isProduction <= 0x00000001]
[00:06:12.750]    </block>
[00:06:12.750]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:06:12.750]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:06:12.751]        // =>  FALSE
[00:06:12.751]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:06:12.751]    </control>
[00:06:12.751]    <control if="continueId == 4" while="" timeout="0" info="">
[00:06:12.751]      // if-block "continueId == 4"
[00:06:12.751]        // =>  FALSE
[00:06:12.751]      // skip if-block "continueId == 4"
[00:06:12.751]    </control>
[00:06:12.752]    <control if="!isProduction" while="" timeout="0" info="">
[00:06:12.752]      // if-block "!isProduction"
[00:06:12.752]        // =>  FALSE
[00:06:12.752]      // skip if-block "!isProduction"
[00:06:12.752]    </control>
[00:06:12.752]  </sequence>
[00:06:12.752]  
[00:09:36.151]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:09:36.151]  
[00:09:36.169]  <debugvars>
[00:09:36.169]    // Pre-defined
[00:09:36.169]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:09:36.169]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:09:36.169]    __dp=0x00000000
[00:09:36.169]    __ap=0x00000000
[00:09:36.169]    __traceout=0x00000000      (Trace Disabled)
[00:09:36.169]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:09:36.169]    __FlashAddr=0x00000000
[00:09:36.169]    __FlashLen=0x00000000
[00:09:36.169]    __FlashArg=0x00000000
[00:09:36.169]    __FlashOp=0x00000000
[00:09:36.169]    __Result=0x00000000
[00:09:36.169]  </debugvars>
[00:09:36.169]  
[00:09:36.169]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:09:36.169]    <block atomic="false" info="">
[00:09:36.169]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:09:36.169]        // -> [isSWJ <= 0x00000001]
[00:09:36.169]      __var hasDormant = __protocol & 0x00020000;
[00:09:36.169]        // -> [hasDormant <= 0x00000000]
[00:09:36.169]      __var protType   = __protocol & 0x0000FFFF;
[00:09:36.171]        // -> [protType <= 0x00000002]
[00:09:36.171]    </block>
[00:09:36.171]    <control if="protType == 1" while="" timeout="0" info="">
[00:09:36.171]      // if-block "protType == 1"
[00:09:36.171]        // =>  FALSE
[00:09:36.171]      // skip if-block "protType == 1"
[00:09:36.171]    </control>
[00:09:36.171]    <control if="protType == 2" while="" timeout="0" info="">
[00:09:36.171]      // if-block "protType == 2"
[00:09:36.171]        // =>  TRUE
[00:09:36.171]      <control if="isSWJ" while="" timeout="0" info="">
[00:09:36.171]        // if-block "isSWJ"
[00:09:36.171]          // =>  TRUE
[00:09:36.171]        <control if="hasDormant" while="" timeout="0" info="">
[00:09:36.171]          // if-block "hasDormant"
[00:09:36.171]            // =>  FALSE
[00:09:36.171]          // skip if-block "hasDormant"
[00:09:36.171]        </control>
[00:09:36.171]        <control if="!hasDormant" while="" timeout="0" info="">
[00:09:36.171]          // if-block "!hasDormant"
[00:09:36.171]            // =>  TRUE
[00:09:36.171]          <block atomic="false" info="">
[00:09:36.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:09:36.171]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:09:36.171]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:09:36.171]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:09:36.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:09:36.171]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:09:36.171]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:09:36.171]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:09:36.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:09:36.171]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:09:36.171]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:09:36.181]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:09:36.181]          </block>
[00:09:36.181]          // end if-block "!hasDormant"
[00:09:36.181]        </control>
[00:09:36.181]        // end if-block "isSWJ"
[00:09:36.181]      </control>
[00:09:36.181]      <control if="!isSWJ" while="" timeout="0" info="">
[00:09:36.181]        // if-block "!isSWJ"
[00:09:36.181]          // =>  FALSE
[00:09:36.181]        // skip if-block "!isSWJ"
[00:09:36.181]      </control>
[00:09:36.181]      <block atomic="false" info="">
[00:09:36.181]        ReadDP(0x0);
[00:09:36.181]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:09:36.181]      </block>
[00:09:36.181]      // end if-block "protType == 2"
[00:09:36.181]    </control>
[00:09:36.181]  </sequence>
[00:09:36.181]  
[00:09:36.181]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:09:36.181]  
[00:09:36.181]  <debugvars>
[00:09:36.181]    // Pre-defined
[00:09:36.181]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:09:36.181]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:09:36.181]    __dp=0x00000000
[00:09:36.181]    __ap=0x00000000
[00:09:36.181]    __traceout=0x00000000      (Trace Disabled)
[00:09:36.181]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:09:36.181]    __FlashAddr=0x00000000
[00:09:36.181]    __FlashLen=0x00000000
[00:09:36.181]    __FlashArg=0x00000000
[00:09:36.181]    __FlashOp=0x00000000
[00:09:36.181]    __Result=0x00000000
[00:09:36.181]  </debugvars>
[00:09:36.181]  
[00:09:36.181]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:09:36.181]    <block atomic="false" info="">
[00:09:36.181]      __var SW_DP_ABORT       = 0x0;
[00:09:36.181]        // -> [SW_DP_ABORT <= 0x00000000]
[00:09:36.181]      __var DP_CTRL_STAT      = 0x4;
[00:09:36.181]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:09:36.181]      __var DP_SELECT         = 0x8;
[00:09:36.181]        // -> [DP_SELECT <= 0x00000008]
[00:09:36.181]      __var powered_down      = 0;
[00:09:36.181]        // -> [powered_down <= 0x00000000]
[00:09:36.181]      WriteDP(DP_SELECT, 0x00000000);
[00:09:36.192]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:09:36.192]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:09:36.194]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:09:36.194]        // -> [powered_down <= 0x00000001]
[00:09:36.194]    </block>
[00:09:36.194]    <control if="powered_down" while="" timeout="0" info="">
[00:09:36.194]      // if-block "powered_down"
[00:09:36.194]        // =>  TRUE
[00:09:36.194]      <block atomic="false" info="">
[00:09:36.194]        Message(0, "Debug/System power-up request sent");
[00:09:36.194]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:09:36.194]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:09:36.194]      </block>
[00:09:36.194]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:09:36.194]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:09:36.194]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:09:36.194]        // while-condition  =>  FALSE
[00:09:36.194]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:09:36.194]      </control>
[00:09:36.194]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:09:36.194]        // if-block "(__protocol & 0xFFFF) == 1"
[00:09:36.194]          // =>  FALSE
[00:09:36.194]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:09:36.194]      </control>
[00:09:36.194]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:09:36.194]        // if-block "(__protocol & 0xFFFF) == 2"
[00:09:36.194]          // =>  TRUE
[00:09:36.194]        <block atomic="false" info="">
[00:09:36.194]          Message(0, "executing SWD power up");
[00:09:36.194]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:09:36.202]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:09:36.202]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:09:36.202]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:09:36.202]        </block>
[00:09:36.204]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:09:36.204]      </control>
[00:09:36.204]      // end if-block "powered_down"
[00:09:36.204]    </control>
[00:09:36.204]    <block atomic="false" info="">
[00:09:36.204]      __var DEBUG_PORT_VAL    = 0;
[00:09:36.204]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:09:36.204]      __var ACCESS_POINT_VAL  = 0;
[00:09:36.204]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:09:36.204]      __ap = 1; 
[00:09:36.204]        // -> [__ap <= 0x00000001]
[00:09:36.204]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:09:36.210]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:09:36.210]      __ap = 4;
[00:09:36.210]        // -> [__ap <= 0x00000004]
[00:09:36.210]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:09:36.214]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:09:36.214]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:09:36.214]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:09:36.214]    </block>
[00:09:36.214]    <block atomic="false" info="">
[00:09:36.214]      __var nReset = 0x80;
[00:09:36.214]        // -> [nReset <= 0x00000080]
[00:09:36.214]      __var canReadPins = 0;
[00:09:36.214]        // -> [canReadPins <= 0x00000000]
[00:09:36.214]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:09:36.217]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:09:36.217]        // -> [canReadPins <= 0x00000001]
[00:09:36.217]    </block>
[00:09:36.217]    <control if="" while="1" timeout="200" info="">
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.217]      // while "1"  (timeout="200")
[00:09:36.217]      // while-condition  =>  TRUE
[00:09:36.222]      // while "1"  (timeout="200")
[00:09:36.222]      // while  =>  TIMEOUT
[00:09:36.222]      // end while "1"
[00:09:36.222]    </control>
[00:09:36.222]    <control if="canReadPins" while="" timeout="0" info="">
[00:09:36.222]      // if-block "canReadPins"
[00:09:36.222]        // =>  TRUE
[00:09:36.222]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:09:36.222]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:09:36.223]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:09:36.223]        // while-condition  =>  FALSE
[00:09:36.223]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:09:36.223]      </control>
[00:09:36.223]      // end if-block "canReadPins"
[00:09:36.223]    </control>
[00:09:36.223]    <control if="!canReadPins" while="" timeout="0" info="">
[00:09:36.223]      // if-block "!canReadPins"
[00:09:36.223]        // =>  FALSE
[00:09:36.223]      // skip if-block "!canReadPins"
[00:09:36.223]    </control>
[00:09:36.223]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:09:36.223]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:09:36.223]        // =>  TRUE
[00:09:36.223]      <block atomic="false" info="">
[00:09:36.223]        WriteAP(0x00, 0x190008);
[00:09:36.223]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:09:36.223]        WriteAP(0xF0, 0x01);
[00:09:36.223]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:09:36.223]      </block>
[00:09:36.223]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:09:36.223]    </control>
[00:09:36.223]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:09:36.223]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:09:36.223]        // =>  FALSE
[00:09:36.223]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:09:36.223]    </control>
[00:09:36.223]    <block atomic="false" info="">
[00:09:36.232]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:09:36.236]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:09:36.236]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:09:36.236]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:09:36.237]      __ap = 0; //lets make sure we reset the access point selection
[00:09:36.237]        // -> [__ap <= 0x00000000]
[00:09:36.237]    </block>
[00:09:36.237]  </sequence>
[00:09:36.237]  
[00:09:36.263]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:09:36.263]  
[00:09:36.263]  <debugvars>
[00:09:36.263]    // Pre-defined
[00:09:36.263]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:09:36.263]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:09:36.263]    __dp=0x00000000
[00:09:36.263]    __ap=0x00000000
[00:09:36.263]    __traceout=0x00000000      (Trace Disabled)
[00:09:36.263]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:09:36.263]    __FlashAddr=0x00000000
[00:09:36.264]    __FlashLen=0x00000000
[00:09:36.264]    __FlashArg=0x00000000
[00:09:36.264]    __FlashOp=0x00000000
[00:09:36.264]    __Result=0x00000000
[00:09:36.264]  </debugvars>
[00:09:36.264]  
[00:09:36.264]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:09:36.264]    <block atomic="false" info="">
[00:09:36.264]      __var deviceID = 0;
[00:09:36.264]        // -> [deviceID <= 0x00000000]
[00:09:36.264]      __var version = 0;
[00:09:36.264]        // -> [version <= 0x00000000]
[00:09:36.264]      __var partNum = 0;
[00:09:36.266]        // -> [partNum <= 0x00000000]
[00:09:36.266]      __var manuf = 0;
[00:09:36.266]        // -> [manuf <= 0x00000000]
[00:09:36.266]      __var isMSPM0G1X0X_G3X0X = 0;
[00:09:36.266]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:09:36.266]      __var isProduction = 0;
[00:09:36.266]        // -> [isProduction <= 0x00000000]
[00:09:36.266]      __var continueId = 0;
[00:09:36.266]        // -> [continueId <= 0x00000000]
[00:09:36.266]      deviceID =   Read32(0x41C40004);
[00:09:36.266]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:09:36.273]        // -> [deviceID <= 0x2BB8802F]
[00:09:36.273]      version = deviceID >> 28;
[00:09:36.273]        // -> [version <= 0x00000002]
[00:09:36.273]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:09:36.273]        // -> [partNum <= 0x0000BB88]
[00:09:36.273]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:09:36.273]        // -> [manuf <= 0x00000017]
[00:09:36.273]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:09:36.273]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:09:36.273]      isProduction = (version > 0);
[00:09:36.273]        // -> [isProduction <= 0x00000001]
[00:09:36.273]    </block>
[00:09:36.273]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:09:36.273]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:09:36.273]        // =>  FALSE
[00:09:36.273]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:09:36.273]    </control>
[00:09:36.273]    <control if="continueId == 4" while="" timeout="0" info="">
[00:09:36.273]      // if-block "continueId == 4"
[00:09:36.273]        // =>  FALSE
[00:09:36.273]      // skip if-block "continueId == 4"
[00:09:36.273]    </control>
[00:09:36.273]    <control if="!isProduction" while="" timeout="0" info="">
[00:09:36.273]      // if-block "!isProduction"
[00:09:36.273]        // =>  FALSE
[00:09:36.273]      // skip if-block "!isProduction"
[00:09:36.273]    </control>
[00:09:36.273]  </sequence>
[00:09:36.273]  
[00:09:57.572]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:09:57.572]  
[00:09:57.572]  <debugvars>
[00:09:57.572]    // Pre-defined
[00:09:57.572]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:09:57.572]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:09:57.572]    __dp=0x00000000
[00:09:57.572]    __ap=0x00000000
[00:09:57.572]    __traceout=0x00000000      (Trace Disabled)
[00:09:57.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:09:57.572]    __FlashAddr=0x00000000
[00:09:57.572]    __FlashLen=0x00000000
[00:09:57.572]    __FlashArg=0x00000000
[00:09:57.572]    __FlashOp=0x00000000
[00:09:57.572]    __Result=0x00000000
[00:09:57.572]  </debugvars>
[00:09:57.572]  
[00:09:57.572]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:09:57.572]    <block atomic="false" info="">
[00:09:57.577]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:09:57.577]        // -> [isSWJ <= 0x00000001]
[00:09:57.577]      __var hasDormant = __protocol & 0x00020000;
[00:09:57.578]        // -> [hasDormant <= 0x00000000]
[00:09:57.578]      __var protType   = __protocol & 0x0000FFFF;
[00:09:57.578]        // -> [protType <= 0x00000002]
[00:09:57.578]    </block>
[00:09:57.578]    <control if="protType == 1" while="" timeout="0" info="">
[00:09:57.578]      // if-block "protType == 1"
[00:09:57.578]        // =>  FALSE
[00:09:57.578]      // skip if-block "protType == 1"
[00:09:57.578]    </control>
[00:09:57.578]    <control if="protType == 2" while="" timeout="0" info="">
[00:09:57.578]      // if-block "protType == 2"
[00:09:57.578]        // =>  TRUE
[00:09:57.578]      <control if="isSWJ" while="" timeout="0" info="">
[00:09:57.578]        // if-block "isSWJ"
[00:09:57.578]          // =>  TRUE
[00:09:57.578]        <control if="hasDormant" while="" timeout="0" info="">
[00:09:57.578]          // if-block "hasDormant"
[00:09:57.578]            // =>  FALSE
[00:09:57.578]          // skip if-block "hasDormant"
[00:09:57.578]        </control>
[00:09:57.580]        <control if="!hasDormant" while="" timeout="0" info="">
[00:09:57.580]          // if-block "!hasDormant"
[00:09:57.580]            // =>  TRUE
[00:09:57.580]          <block atomic="false" info="">
[00:09:57.580]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:09:57.582]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:09:57.582]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:09:57.583]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:09:57.583]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:09:57.585]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:09:57.585]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:09:57.586]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:09:57.586]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:09:57.588]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:09:57.588]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:09:57.589]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:09:57.589]          </block>
[00:09:57.590]          // end if-block "!hasDormant"
[00:09:57.590]        </control>
[00:09:57.590]        // end if-block "isSWJ"
[00:09:57.590]      </control>
[00:09:57.590]      <control if="!isSWJ" while="" timeout="0" info="">
[00:09:57.590]        // if-block "!isSWJ"
[00:09:57.590]          // =>  FALSE
[00:09:57.590]        // skip if-block "!isSWJ"
[00:09:57.590]      </control>
[00:09:57.590]      <block atomic="false" info="">
[00:09:57.590]        ReadDP(0x0);
[00:09:57.592]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:09:57.592]      </block>
[00:09:57.592]      // end if-block "protType == 2"
[00:09:57.592]    </control>
[00:09:57.592]  </sequence>
[00:09:57.592]  
[00:09:57.593]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:09:57.593]  
[00:09:57.593]  <debugvars>
[00:09:57.593]    // Pre-defined
[00:09:57.593]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:09:57.593]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:09:57.593]    __dp=0x00000000
[00:09:57.593]    __ap=0x00000000
[00:09:57.593]    __traceout=0x00000000      (Trace Disabled)
[00:09:57.596]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:09:57.596]    __FlashAddr=0x00000000
[00:09:57.596]    __FlashLen=0x00000000
[00:09:57.596]    __FlashArg=0x00000000
[00:09:57.596]    __FlashOp=0x00000000
[00:09:57.596]    __Result=0x00000000
[00:09:57.596]  </debugvars>
[00:09:57.596]  
[00:09:57.596]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:09:57.596]    <block atomic="false" info="">
[00:09:57.596]      __var SW_DP_ABORT       = 0x0;
[00:09:57.596]        // -> [SW_DP_ABORT <= 0x00000000]
[00:09:57.596]      __var DP_CTRL_STAT      = 0x4;
[00:09:57.596]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:09:57.596]      __var DP_SELECT         = 0x8;
[00:09:57.596]        // -> [DP_SELECT <= 0x00000008]
[00:09:57.596]      __var powered_down      = 0;
[00:09:57.598]        // -> [powered_down <= 0x00000000]
[00:09:57.598]      WriteDP(DP_SELECT, 0x00000000);
[00:09:57.599]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:09:57.600]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:09:57.600]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:09:57.600]        // -> [powered_down <= 0x00000001]
[00:09:57.602]    </block>
[00:09:57.602]    <control if="powered_down" while="" timeout="0" info="">
[00:09:57.602]      // if-block "powered_down"
[00:09:57.602]        // =>  TRUE
[00:09:57.602]      <block atomic="false" info="">
[00:09:57.602]        Message(0, "Debug/System power-up request sent");
[00:09:57.603]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:09:57.605]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:09:57.605]      </block>
[00:09:57.605]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:09:57.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:09:57.607]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:09:57.607]        // while-condition  =>  FALSE
[00:09:57.607]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:09:57.607]      </control>
[00:09:57.607]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:09:57.608]        // if-block "(__protocol & 0xFFFF) == 1"
[00:09:57.608]          // =>  FALSE
[00:09:57.608]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:09:57.608]      </control>
[00:09:57.608]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:09:57.609]        // if-block "(__protocol & 0xFFFF) == 2"
[00:09:57.609]          // =>  TRUE
[00:09:57.609]        <block atomic="false" info="">
[00:09:57.609]          Message(0, "executing SWD power up");
[00:09:57.610]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:09:57.613]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:09:57.613]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:09:57.615]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:09:57.615]        </block>
[00:09:57.615]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:09:57.615]      </control>
[00:09:57.615]      // end if-block "powered_down"
[00:09:57.615]    </control>
[00:09:57.615]    <block atomic="false" info="">
[00:09:57.615]      __var DEBUG_PORT_VAL    = 0;
[00:09:57.615]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:09:57.615]      __var ACCESS_POINT_VAL  = 0;
[00:09:57.615]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:09:57.615]      __ap = 1; 
[00:09:57.615]        // -> [__ap <= 0x00000001]
[00:09:57.615]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:09:57.619]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:09:57.619]      __ap = 4;
[00:09:57.619]        // -> [__ap <= 0x00000004]
[00:09:57.619]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:09:57.622]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:09:57.622]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:09:57.622]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:09:57.624]    </block>
[00:09:57.624]    <block atomic="false" info="">
[00:09:57.624]      __var nReset = 0x80;
[00:09:57.624]        // -> [nReset <= 0x00000080]
[00:09:57.624]      __var canReadPins = 0;
[00:09:57.624]        // -> [canReadPins <= 0x00000000]
[00:09:57.624]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:09:57.626]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:09:57.626]        // -> [canReadPins <= 0x00000001]
[00:09:57.626]    </block>
[00:09:57.626]    <control if="" while="1" timeout="200" info="">
[00:09:57.626]      // while "1"  (timeout="200")
[00:09:57.626]      // while-condition  =>  TRUE
[00:09:57.626]      // while "1"  (timeout="200")
[00:09:57.626]      // while-condition  =>  TRUE
[00:09:57.626]      // while "1"  (timeout="200")
[00:09:57.626]      // while-condition  =>  TRUE
[00:09:57.626]      // while "1"  (timeout="200")
[00:09:57.627]      // while-condition  =>  TRUE
[00:09:57.627]      // while "1"  (timeout="200")
[00:09:57.627]      // while  =>  TIMEOUT
[00:09:57.627]      // end while "1"
[00:09:57.627]    </control>
[00:09:57.627]    <control if="canReadPins" while="" timeout="0" info="">
[00:09:57.627]      // if-block "canReadPins"
[00:09:57.627]        // =>  TRUE
[00:09:57.627]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:09:57.627]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:09:57.628]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:09:57.630]        // while-condition  =>  FALSE
[00:09:57.630]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:09:57.630]      </control>
[00:09:57.630]      // end if-block "canReadPins"
[00:09:57.630]    </control>
[00:09:57.630]    <control if="!canReadPins" while="" timeout="0" info="">
[00:09:57.630]      // if-block "!canReadPins"
[00:09:57.630]        // =>  FALSE
[00:09:57.630]      // skip if-block "!canReadPins"
[00:09:57.630]    </control>
[00:09:57.630]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:09:57.630]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:09:57.630]        // =>  TRUE
[00:09:57.630]      <block atomic="false" info="">
[00:09:57.630]        WriteAP(0x00, 0x190008);
[00:09:57.632]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:09:57.632]        WriteAP(0xF0, 0x01);
[00:09:57.637]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:09:57.637]      </block>
[00:09:57.637]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:09:57.638]    </control>
[00:09:57.638]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:09:57.638]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:09:57.638]        // =>  FALSE
[00:09:57.638]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:09:57.638]    </control>
[00:09:57.638]    <block atomic="false" info="">
[00:09:57.638]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:09:57.641]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:09:57.641]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:09:57.641]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:09:57.642]      __ap = 0; //lets make sure we reset the access point selection
[00:09:57.642]        // -> [__ap <= 0x00000000]
[00:09:57.642]    </block>
[00:09:57.642]  </sequence>
[00:09:57.642]  
[00:09:57.662]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:09:57.662]  
[00:09:57.662]  <debugvars>
[00:09:57.662]    // Pre-defined
[00:09:57.662]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:09:57.662]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:09:57.662]    __dp=0x00000000
[00:09:57.662]    __ap=0x00000000
[00:09:57.662]    __traceout=0x00000000      (Trace Disabled)
[00:09:57.662]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:09:57.662]    __FlashAddr=0x00000000
[00:09:57.662]    __FlashLen=0x00000000
[00:09:57.662]    __FlashArg=0x00000000
[00:09:57.662]    __FlashOp=0x00000000
[00:09:57.665]    __Result=0x00000000
[00:09:57.665]  </debugvars>
[00:09:57.665]  
[00:09:57.665]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:09:57.665]    <block atomic="false" info="">
[00:09:57.665]      __var deviceID = 0;
[00:09:57.665]        // -> [deviceID <= 0x00000000]
[00:09:57.665]      __var version = 0;
[00:09:57.665]        // -> [version <= 0x00000000]
[00:09:57.665]      __var partNum = 0;
[00:09:57.665]        // -> [partNum <= 0x00000000]
[00:09:57.665]      __var manuf = 0;
[00:09:57.665]        // -> [manuf <= 0x00000000]
[00:09:57.665]      __var isMSPM0G1X0X_G3X0X = 0;
[00:09:57.665]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:09:57.665]      __var isProduction = 0;
[00:09:57.665]        // -> [isProduction <= 0x00000000]
[00:09:57.665]      __var continueId = 0;
[00:09:57.665]        // -> [continueId <= 0x00000000]
[00:09:57.665]      deviceID =   Read32(0x41C40004);
[00:09:57.669]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:09:57.669]        // -> [deviceID <= 0x2BB8802F]
[00:09:57.669]      version = deviceID >> 28;
[00:09:57.669]        // -> [version <= 0x00000002]
[00:09:57.669]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:09:57.669]        // -> [partNum <= 0x0000BB88]
[00:09:57.669]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:09:57.669]        // -> [manuf <= 0x00000017]
[00:09:57.672]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:09:57.672]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:09:57.672]      isProduction = (version > 0);
[00:09:57.672]        // -> [isProduction <= 0x00000001]
[00:09:57.672]    </block>
[00:09:57.672]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:09:57.672]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:09:57.672]        // =>  FALSE
[00:09:57.672]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:09:57.672]    </control>
[00:09:57.672]    <control if="continueId == 4" while="" timeout="0" info="">
[00:09:57.672]      // if-block "continueId == 4"
[00:09:57.672]        // =>  FALSE
[00:09:57.672]      // skip if-block "continueId == 4"
[00:09:57.672]    </control>
[00:09:57.672]    <control if="!isProduction" while="" timeout="0" info="">
[00:09:57.672]      // if-block "!isProduction"
[00:09:57.672]        // =>  FALSE
[00:09:57.672]      // skip if-block "!isProduction"
[00:09:57.672]    </control>
[00:09:57.672]  </sequence>
[00:09:57.672]  
[00:12:16.086]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:12:16.086]  
[00:12:16.086]  <debugvars>
[00:12:16.086]    // Pre-defined
[00:12:16.086]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:12:16.087]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:12:16.087]    __dp=0x00000000
[00:12:16.087]    __ap=0x00000000
[00:12:16.087]    __traceout=0x00000000      (Trace Disabled)
[00:12:16.087]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:12:16.087]    __FlashAddr=0x00000000
[00:12:16.087]    __FlashLen=0x00000000
[00:12:16.088]    __FlashArg=0x00000000
[00:12:16.088]    __FlashOp=0x00000000
[00:12:16.088]    __Result=0x00000000
[00:12:16.088]  </debugvars>
[00:12:16.088]  
[00:12:16.088]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:12:16.088]    <block atomic="false" info="">
[00:12:16.088]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:12:16.088]        // -> [isSWJ <= 0x00000001]
[00:12:16.088]      __var hasDormant = __protocol & 0x00020000;
[00:12:16.088]        // -> [hasDormant <= 0x00000000]
[00:12:16.088]      __var protType   = __protocol & 0x0000FFFF;
[00:12:16.088]        // -> [protType <= 0x00000002]
[00:12:16.089]    </block>
[00:12:16.089]    <control if="protType == 1" while="" timeout="0" info="">
[00:12:16.089]      // if-block "protType == 1"
[00:12:16.089]        // =>  FALSE
[00:12:16.089]      // skip if-block "protType == 1"
[00:12:16.089]    </control>
[00:12:16.089]    <control if="protType == 2" while="" timeout="0" info="">
[00:12:16.089]      // if-block "protType == 2"
[00:12:16.089]        // =>  TRUE
[00:12:16.090]      <control if="isSWJ" while="" timeout="0" info="">
[00:12:16.090]        // if-block "isSWJ"
[00:12:16.090]          // =>  TRUE
[00:12:16.090]        <control if="hasDormant" while="" timeout="0" info="">
[00:12:16.090]          // if-block "hasDormant"
[00:12:16.090]            // =>  FALSE
[00:12:16.090]          // skip if-block "hasDormant"
[00:12:16.090]        </control>
[00:12:16.090]        <control if="!hasDormant" while="" timeout="0" info="">
[00:12:16.092]          // if-block "!hasDormant"
[00:12:16.092]            // =>  TRUE
[00:12:16.092]          <block atomic="false" info="">
[00:12:16.092]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:12:16.093]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:12:16.093]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:12:16.095]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:12:16.095]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:12:16.097]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:12:16.097]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:12:16.099]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:12:16.099]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:12:16.101]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:12:16.101]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:12:16.102]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:12:16.103]          </block>
[00:12:16.103]          // end if-block "!hasDormant"
[00:12:16.103]        </control>
[00:12:16.103]        // end if-block "isSWJ"
[00:12:16.103]      </control>
[00:12:16.103]      <control if="!isSWJ" while="" timeout="0" info="">
[00:12:16.104]        // if-block "!isSWJ"
[00:12:16.104]          // =>  FALSE
[00:12:16.104]        // skip if-block "!isSWJ"
[00:12:16.104]      </control>
[00:12:16.104]      <block atomic="false" info="">
[00:12:16.104]        ReadDP(0x0);
[00:12:16.105]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:12:16.105]      </block>
[00:12:16.105]      // end if-block "protType == 2"
[00:12:16.105]    </control>
[00:12:16.106]  </sequence>
[00:12:16.106]  
[00:12:16.107]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:12:16.107]  
[00:12:16.107]  <debugvars>
[00:12:16.107]    // Pre-defined
[00:12:16.107]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:12:16.107]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:12:16.107]    __dp=0x00000000
[00:12:16.107]    __ap=0x00000000
[00:12:16.109]    __traceout=0x00000000      (Trace Disabled)
[00:12:16.109]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:12:16.109]    __FlashAddr=0x00000000
[00:12:16.109]    __FlashLen=0x00000000
[00:12:16.109]    __FlashArg=0x00000000
[00:12:16.109]    __FlashOp=0x00000000
[00:12:16.109]    __Result=0x00000000
[00:12:16.109]  </debugvars>
[00:12:16.109]  
[00:12:16.109]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:12:16.109]    <block atomic="false" info="">
[00:12:16.110]      __var SW_DP_ABORT       = 0x0;
[00:12:16.110]        // -> [SW_DP_ABORT <= 0x00000000]
[00:12:16.110]      __var DP_CTRL_STAT      = 0x4;
[00:12:16.110]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:12:16.110]      __var DP_SELECT         = 0x8;
[00:12:16.110]        // -> [DP_SELECT <= 0x00000008]
[00:12:16.110]      __var powered_down      = 0;
[00:12:16.110]        // -> [powered_down <= 0x00000000]
[00:12:16.110]      WriteDP(DP_SELECT, 0x00000000);
[00:12:16.112]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:12:16.112]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:12:16.114]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:12:16.114]        // -> [powered_down <= 0x00000001]
[00:12:16.114]    </block>
[00:12:16.114]    <control if="powered_down" while="" timeout="0" info="">
[00:12:16.114]      // if-block "powered_down"
[00:12:16.114]        // =>  TRUE
[00:12:16.114]      <block atomic="false" info="">
[00:12:16.114]        Message(0, "Debug/System power-up request sent");
[00:12:16.117]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:12:16.119]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:12:16.119]      </block>
[00:12:16.119]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:12:16.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:12:16.120]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:12:16.120]        // while-condition  =>  FALSE
[00:12:16.120]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:12:16.120]      </control>
[00:12:16.120]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:12:16.120]        // if-block "(__protocol & 0xFFFF) == 1"
[00:12:16.121]          // =>  FALSE
[00:12:16.121]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:12:16.121]      </control>
[00:12:16.121]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:12:16.121]        // if-block "(__protocol & 0xFFFF) == 2"
[00:12:16.121]          // =>  TRUE
[00:12:16.121]        <block atomic="false" info="">
[00:12:16.121]          Message(0, "executing SWD power up");
[00:12:16.123]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:12:16.124]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:12:16.124]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:12:16.127]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:12:16.127]        </block>
[00:12:16.127]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:12:16.127]      </control>
[00:12:16.127]      // end if-block "powered_down"
[00:12:16.127]    </control>
[00:12:16.127]    <block atomic="false" info="">
[00:12:16.127]      __var DEBUG_PORT_VAL    = 0;
[00:12:16.128]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:12:16.128]      __var ACCESS_POINT_VAL  = 0;
[00:12:16.128]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:12:16.128]      __ap = 1; 
[00:12:16.128]        // -> [__ap <= 0x00000001]
[00:12:16.128]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:12:16.131]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:12:16.131]      __ap = 4;
[00:12:16.131]        // -> [__ap <= 0x00000004]
[00:12:16.131]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:12:16.135]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:12:16.135]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:12:16.135]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:12:16.137]    </block>
[00:12:16.137]    <block atomic="false" info="">
[00:12:16.137]      __var nReset = 0x80;
[00:12:16.137]        // -> [nReset <= 0x00000080]
[00:12:16.137]      __var canReadPins = 0;
[00:12:16.137]        // -> [canReadPins <= 0x00000000]
[00:12:16.137]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:12:16.139]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:12:16.139]        // -> [canReadPins <= 0x00000001]
[00:12:16.139]    </block>
[00:12:16.139]    <control if="" while="1" timeout="200" info="">
[00:12:16.139]      // while "1"  (timeout="200")
[00:12:16.139]      // while-condition  =>  TRUE
[00:12:16.140]      // while "1"  (timeout="200")
[00:12:16.140]      // while-condition  =>  TRUE
[00:12:16.140]      // while "1"  (timeout="200")
[00:12:16.140]      // while-condition  =>  TRUE
[00:12:16.140]      // while "1"  (timeout="200")
[00:12:16.140]      // while-condition  =>  TRUE
[00:12:16.140]      // while "1"  (timeout="200")
[00:12:16.140]      // while-condition  =>  TRUE
[00:12:16.141]      // while "1"  (timeout="200")
[00:12:16.141]      // while-condition  =>  TRUE
[00:12:16.141]      // while "1"  (timeout="200")
[00:12:16.141]      // while-condition  =>  TRUE
[00:12:16.141]      // while "1"  (timeout="200")
[00:12:16.141]      // while-condition  =>  TRUE
[00:12:16.141]      // while "1"  (timeout="200")
[00:12:16.141]      // while-condition  =>  TRUE
[00:12:16.141]      // while "1"  (timeout="200")
[00:12:16.141]      // while-condition  =>  TRUE
[00:12:16.141]      // while "1"  (timeout="200")
[00:12:16.141]      // while-condition  =>  TRUE
[00:12:16.141]      // while "1"  (timeout="200")
[00:12:16.141]      // while-condition  =>  TRUE
[00:12:16.141]      // while "1"  (timeout="200")
[00:12:16.141]      // while-condition  =>  TRUE
[00:12:16.142]      // while "1"  (timeout="200")
[00:12:16.142]      // while-condition  =>  TRUE
[00:12:16.142]      // while "1"  (timeout="200")
[00:12:16.142]      // while-condition  =>  TRUE
[00:12:16.142]      // while "1"  (timeout="200")
[00:12:16.142]      // while-condition  =>  TRUE
[00:12:16.142]      // while "1"  (timeout="200")
[00:12:16.142]      // while-condition  =>  TRUE
[00:12:16.142]      // while "1"  (timeout="200")
[00:12:16.142]      // while-condition  =>  TRUE
[00:12:16.143]      // while "1"  (timeout="200")
[00:12:16.143]      // while  =>  TIMEOUT
[00:12:16.143]      // end while "1"
[00:12:16.143]    </control>
[00:12:16.143]    <control if="canReadPins" while="" timeout="0" info="">
[00:12:16.143]      // if-block "canReadPins"
[00:12:16.143]        // =>  TRUE
[00:12:16.143]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:12:16.143]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:12:16.145]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:12:16.145]        // while-condition  =>  FALSE
[00:12:16.145]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:12:16.145]      </control>
[00:12:16.145]      // end if-block "canReadPins"
[00:12:16.145]    </control>
[00:12:16.145]    <control if="!canReadPins" while="" timeout="0" info="">
[00:12:16.145]      // if-block "!canReadPins"
[00:12:16.145]        // =>  FALSE
[00:12:16.146]      // skip if-block "!canReadPins"
[00:12:16.146]    </control>
[00:12:16.146]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:12:16.146]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:12:16.147]        // =>  TRUE
[00:12:16.147]      <block atomic="false" info="">
[00:12:16.147]        WriteAP(0x00, 0x190008);
[00:12:16.152]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:12:16.153]        WriteAP(0xF0, 0x01);
[00:12:16.156]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:12:16.156]      </block>
[00:12:16.156]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:12:16.156]    </control>
[00:12:16.157]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:12:16.157]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:12:16.157]        // =>  FALSE
[00:12:16.157]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:12:16.157]    </control>
[00:12:16.157]    <block atomic="false" info="">
[00:12:16.157]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:12:16.160]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:12:16.160]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:12:16.160]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:12:16.163]      __ap = 0; //lets make sure we reset the access point selection
[00:12:16.163]        // -> [__ap <= 0x00000000]
[00:12:16.163]    </block>
[00:12:16.164]  </sequence>
[00:12:16.164]  
[00:12:16.183]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:12:16.183]  
[00:12:16.183]  <debugvars>
[00:12:16.183]    // Pre-defined
[00:12:16.183]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:12:16.183]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:12:16.183]    __dp=0x00000000
[00:12:16.184]    __ap=0x00000000
[00:12:16.184]    __traceout=0x00000000      (Trace Disabled)
[00:12:16.184]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:12:16.184]    __FlashAddr=0x00000000
[00:12:16.184]    __FlashLen=0x00000000
[00:12:16.184]    __FlashArg=0x00000000
[00:12:16.184]    __FlashOp=0x00000000
[00:12:16.184]    __Result=0x00000000
[00:12:16.184]  </debugvars>
[00:12:16.184]  
[00:12:16.184]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:12:16.185]    <block atomic="false" info="">
[00:12:16.185]      __var deviceID = 0;
[00:12:16.185]        // -> [deviceID <= 0x00000000]
[00:12:16.185]      __var version = 0;
[00:12:16.185]        // -> [version <= 0x00000000]
[00:12:16.185]      __var partNum = 0;
[00:12:16.185]        // -> [partNum <= 0x00000000]
[00:12:16.185]      __var manuf = 0;
[00:12:16.185]        // -> [manuf <= 0x00000000]
[00:12:16.186]      __var isMSPM0G1X0X_G3X0X = 0;
[00:12:16.186]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:12:16.186]      __var isProduction = 0;
[00:12:16.186]        // -> [isProduction <= 0x00000000]
[00:12:16.186]      __var continueId = 0;
[00:12:16.186]        // -> [continueId <= 0x00000000]
[00:12:16.186]      deviceID =   Read32(0x41C40004);
[00:12:16.191]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:12:16.191]        // -> [deviceID <= 0x2BB8802F]
[00:12:16.191]      version = deviceID >> 28;
[00:12:16.191]        // -> [version <= 0x00000002]
[00:12:16.191]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:12:16.191]        // -> [partNum <= 0x0000BB88]
[00:12:16.191]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:12:16.192]        // -> [manuf <= 0x00000017]
[00:12:16.192]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:12:16.192]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:12:16.192]      isProduction = (version > 0);
[00:12:16.192]        // -> [isProduction <= 0x00000001]
[00:12:16.192]    </block>
[00:12:16.192]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:12:16.192]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:12:16.192]        // =>  FALSE
[00:12:16.193]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:12:16.193]    </control>
[00:12:16.193]    <control if="continueId == 4" while="" timeout="0" info="">
[00:12:16.193]      // if-block "continueId == 4"
[00:12:16.193]        // =>  FALSE
[00:12:16.193]      // skip if-block "continueId == 4"
[00:12:16.193]    </control>
[00:12:16.193]    <control if="!isProduction" while="" timeout="0" info="">
[00:12:16.193]      // if-block "!isProduction"
[00:12:16.193]        // =>  FALSE
[00:12:16.194]      // skip if-block "!isProduction"
[00:12:16.194]    </control>
[00:12:16.194]  </sequence>
[00:12:16.194]  
[00:14:16.539]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:14:16.539]  
[00:14:16.539]  <debugvars>
[00:14:16.540]    // Pre-defined
[00:14:16.540]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:16.540]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:16.540]    __dp=0x00000000
[00:14:16.540]    __ap=0x00000000
[00:14:16.540]    __traceout=0x00000000      (Trace Disabled)
[00:14:16.540]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:16.540]    __FlashAddr=0x00000000
[00:14:16.540]    __FlashLen=0x00000000
[00:14:16.540]    __FlashArg=0x00000000
[00:14:16.540]    __FlashOp=0x00000000
[00:14:16.541]    __Result=0x00000000
[00:14:16.541]  </debugvars>
[00:14:16.541]  
[00:14:16.541]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:14:16.541]    <block atomic="false" info="">
[00:14:16.541]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:14:16.541]        // -> [isSWJ <= 0x00000001]
[00:14:16.541]      __var hasDormant = __protocol & 0x00020000;
[00:14:16.541]        // -> [hasDormant <= 0x00000000]
[00:14:16.541]      __var protType   = __protocol & 0x0000FFFF;
[00:14:16.541]        // -> [protType <= 0x00000002]
[00:14:16.542]    </block>
[00:14:16.542]    <control if="protType == 1" while="" timeout="0" info="">
[00:14:16.542]      // if-block "protType == 1"
[00:14:16.542]        // =>  FALSE
[00:14:16.542]      // skip if-block "protType == 1"
[00:14:16.542]    </control>
[00:14:16.542]    <control if="protType == 2" while="" timeout="0" info="">
[00:14:16.542]      // if-block "protType == 2"
[00:14:16.542]        // =>  TRUE
[00:14:16.542]      <control if="isSWJ" while="" timeout="0" info="">
[00:14:16.542]        // if-block "isSWJ"
[00:14:16.542]          // =>  TRUE
[00:14:16.544]        <control if="hasDormant" while="" timeout="0" info="">
[00:14:16.544]          // if-block "hasDormant"
[00:14:16.544]            // =>  FALSE
[00:14:16.544]          // skip if-block "hasDormant"
[00:14:16.544]        </control>
[00:14:16.544]        <control if="!hasDormant" while="" timeout="0" info="">
[00:14:16.544]          // if-block "!hasDormant"
[00:14:16.544]            // =>  TRUE
[00:14:16.545]          <block atomic="false" info="">
[00:14:16.545]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:14:16.546]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:16.546]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:14:16.548]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:14:16.548]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:14:16.549]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:16.550]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:14:16.551]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:14:16.551]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:14:16.552]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:16.552]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:14:16.553]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:14:16.554]          </block>
[00:14:16.554]          // end if-block "!hasDormant"
[00:14:16.554]        </control>
[00:14:16.554]        // end if-block "isSWJ"
[00:14:16.554]      </control>
[00:14:16.554]      <control if="!isSWJ" while="" timeout="0" info="">
[00:14:16.554]        // if-block "!isSWJ"
[00:14:16.554]          // =>  FALSE
[00:14:16.554]        // skip if-block "!isSWJ"
[00:14:16.554]      </control>
[00:14:16.555]      <block atomic="false" info="">
[00:14:16.555]        ReadDP(0x0);
[00:14:16.556]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:14:16.556]      </block>
[00:14:16.556]      // end if-block "protType == 2"
[00:14:16.556]    </control>
[00:14:16.556]  </sequence>
[00:14:16.557]  
[00:14:16.560]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:14:16.560]  
[00:14:16.560]  <debugvars>
[00:14:16.560]    // Pre-defined
[00:14:16.560]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:16.560]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:16.560]    __dp=0x00000000
[00:14:16.560]    __ap=0x00000000
[00:14:16.560]    __traceout=0x00000000      (Trace Disabled)
[00:14:16.560]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:16.560]    __FlashAddr=0x00000000
[00:14:16.560]    __FlashLen=0x00000000
[00:14:16.561]    __FlashArg=0x00000000
[00:14:16.561]    __FlashOp=0x00000000
[00:14:16.561]    __Result=0x00000000
[00:14:16.561]  </debugvars>
[00:14:16.561]  
[00:14:16.561]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:14:16.561]    <block atomic="false" info="">
[00:14:16.561]      __var SW_DP_ABORT       = 0x0;
[00:14:16.561]        // -> [SW_DP_ABORT <= 0x00000000]
[00:14:16.561]      __var DP_CTRL_STAT      = 0x4;
[00:14:16.562]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:14:16.562]      __var DP_SELECT         = 0x8;
[00:14:16.562]        // -> [DP_SELECT <= 0x00000008]
[00:14:16.562]      __var powered_down      = 0;
[00:14:16.562]        // -> [powered_down <= 0x00000000]
[00:14:16.562]      WriteDP(DP_SELECT, 0x00000000);
[00:14:16.564]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:14:16.564]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:14:16.566]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:14:16.566]        // -> [powered_down <= 0x00000001]
[00:14:16.566]    </block>
[00:14:16.566]    <control if="powered_down" while="" timeout="0" info="">
[00:14:16.566]      // if-block "powered_down"
[00:14:16.566]        // =>  TRUE
[00:14:16.566]      <block atomic="false" info="">
[00:14:16.566]        Message(0, "Debug/System power-up request sent");
[00:14:16.572]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:14:16.574]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:14:16.574]      </block>
[00:14:16.574]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:14:16.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:14:16.575]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:14:16.575]        // while-condition  =>  FALSE
[00:14:16.576]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:14:16.576]      </control>
[00:14:16.576]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:14:16.576]        // if-block "(__protocol & 0xFFFF) == 1"
[00:14:16.576]          // =>  FALSE
[00:14:16.576]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:14:16.576]      </control>
[00:14:16.577]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:14:16.577]        // if-block "(__protocol & 0xFFFF) == 2"
[00:14:16.577]          // =>  TRUE
[00:14:16.577]        <block atomic="false" info="">
[00:14:16.577]          Message(0, "executing SWD power up");
[00:14:16.580]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:14:16.581]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:14:16.581]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:14:16.583]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:14:16.583]        </block>
[00:14:16.583]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:14:16.583]      </control>
[00:14:16.583]      // end if-block "powered_down"
[00:14:16.583]    </control>
[00:14:16.583]    <block atomic="false" info="">
[00:14:16.583]      __var DEBUG_PORT_VAL    = 0;
[00:14:16.583]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:14:16.583]      __var ACCESS_POINT_VAL  = 0;
[00:14:16.584]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:14:16.584]      __ap = 1; 
[00:14:16.584]        // -> [__ap <= 0x00000001]
[00:14:16.584]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:14:16.587]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:14:16.587]      __ap = 4;
[00:14:16.587]        // -> [__ap <= 0x00000004]
[00:14:16.587]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:14:16.591]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:14:16.591]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:14:16.591]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:14:16.594]    </block>
[00:14:16.595]    <block atomic="false" info="">
[00:14:16.595]      __var nReset = 0x80;
[00:14:16.595]        // -> [nReset <= 0x00000080]
[00:14:16.595]      __var canReadPins = 0;
[00:14:16.595]        // -> [canReadPins <= 0x00000000]
[00:14:16.595]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:14:16.597]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:14:16.597]        // -> [canReadPins <= 0x00000001]
[00:14:16.597]    </block>
[00:14:16.597]    <control if="" while="1" timeout="200" info="">
[00:14:16.597]      // while "1"  (timeout="200")
[00:14:16.597]      // while-condition  =>  TRUE
[00:14:16.597]      // while "1"  (timeout="200")
[00:14:16.597]      // while-condition  =>  TRUE
[00:14:16.598]      // while "1"  (timeout="200")
[00:14:16.598]      // while-condition  =>  TRUE
[00:14:16.598]      // while "1"  (timeout="200")
[00:14:16.598]      // while-condition  =>  TRUE
[00:14:16.598]      // while "1"  (timeout="200")
[00:14:16.598]      // while-condition  =>  TRUE
[00:14:16.598]      // while "1"  (timeout="200")
[00:14:16.598]      // while-condition  =>  TRUE
[00:14:16.598]      // while "1"  (timeout="200")
[00:14:16.598]      // while-condition  =>  TRUE
[00:14:16.598]      // while "1"  (timeout="200")
[00:14:16.599]      // while-condition  =>  TRUE
[00:14:16.599]      // while "1"  (timeout="200")
[00:14:16.599]      // while-condition  =>  TRUE
[00:14:16.599]      // while "1"  (timeout="200")
[00:14:16.599]      // while-condition  =>  TRUE
[00:14:16.599]      // while "1"  (timeout="200")
[00:14:16.599]      // while-condition  =>  TRUE
[00:14:16.599]      // while "1"  (timeout="200")
[00:14:16.599]      // while-condition  =>  TRUE
[00:14:16.599]      // while "1"  (timeout="200")
[00:14:16.600]      // while-condition  =>  TRUE
[00:14:16.600]      // while "1"  (timeout="200")
[00:14:16.600]      // while-condition  =>  TRUE
[00:14:16.600]      // while "1"  (timeout="200")
[00:14:16.600]      // while-condition  =>  TRUE
[00:14:16.600]      // while "1"  (timeout="200")
[00:14:16.600]      // while-condition  =>  TRUE
[00:14:16.600]      // while "1"  (timeout="200")
[00:14:16.600]      // while-condition  =>  TRUE
[00:14:16.601]      // while "1"  (timeout="200")
[00:14:16.601]      // while-condition  =>  TRUE
[00:14:16.601]      // while "1"  (timeout="200")
[00:14:16.601]      // while-condition  =>  TRUE
[00:14:16.601]      // while "1"  (timeout="200")
[00:14:16.601]      // while-condition  =>  TRUE
[00:14:16.601]      // while "1"  (timeout="200")
[00:14:16.601]      // while-condition  =>  TRUE
[00:14:16.601]      // while "1"  (timeout="200")
[00:14:16.601]      // while-condition  =>  TRUE
[00:14:16.601]      // while "1"  (timeout="200")
[00:14:16.602]      // while-condition  =>  TRUE
[00:14:16.602]      // while "1"  (timeout="200")
[00:14:16.602]      // while-condition  =>  TRUE
[00:14:16.602]      // while "1"  (timeout="200")
[00:14:16.602]      // while-condition  =>  TRUE
[00:14:16.602]      // while "1"  (timeout="200")
[00:14:16.602]      // while-condition  =>  TRUE
[00:14:16.602]      // while "1"  (timeout="200")
[00:14:16.602]      // while-condition  =>  TRUE
[00:14:16.603]      // while "1"  (timeout="200")
[00:14:16.603]      // while-condition  =>  TRUE
[00:14:16.603]      // while "1"  (timeout="200")
[00:14:16.603]      // while-condition  =>  TRUE
[00:14:16.603]      // while "1"  (timeout="200")
[00:14:16.603]      // while-condition  =>  TRUE
[00:14:16.603]      // while "1"  (timeout="200")
[00:14:16.603]      // while-condition  =>  TRUE
[00:14:16.603]      // while "1"  (timeout="200")
[00:14:16.604]      // while-condition  =>  TRUE
[00:14:16.604]      // while "1"  (timeout="200")
[00:14:16.604]      // while-condition  =>  TRUE
[00:14:16.604]      // while "1"  (timeout="200")
[00:14:16.604]      // while-condition  =>  TRUE
[00:14:16.604]      // while "1"  (timeout="200")
[00:14:16.604]      // while-condition  =>  TRUE
[00:14:16.604]      // while "1"  (timeout="200")
[00:14:16.604]      // while-condition  =>  TRUE
[00:14:16.604]      // while "1"  (timeout="200")
[00:14:16.605]      // while-condition  =>  TRUE
[00:14:16.605]      // while "1"  (timeout="200")
[00:14:16.605]      // while-condition  =>  TRUE
[00:14:16.605]      // while "1"  (timeout="200")
[00:14:16.605]      // while-condition  =>  TRUE
[00:14:16.605]      // while "1"  (timeout="200")
[00:14:16.605]      // while-condition  =>  TRUE
[00:14:16.605]      // while "1"  (timeout="200")
[00:14:16.606]      // while-condition  =>  TRUE
[00:14:16.606]      // while "1"  (timeout="200")
[00:14:16.606]      // while-condition  =>  TRUE
[00:14:16.606]      // while "1"  (timeout="200")
[00:14:16.606]      // while-condition  =>  TRUE
[00:14:16.606]      // while "1"  (timeout="200")
[00:14:16.606]      // while-condition  =>  TRUE
[00:14:16.606]      // while "1"  (timeout="200")
[00:14:16.606]      // while-condition  =>  TRUE
[00:14:16.607]      // while "1"  (timeout="200")
[00:14:16.607]      // while-condition  =>  TRUE
[00:14:16.607]      // while "1"  (timeout="200")
[00:14:16.607]      // while-condition  =>  TRUE
[00:14:16.607]      // while "1"  (timeout="200")
[00:14:16.607]      // while-condition  =>  TRUE
[00:14:16.607]      // while "1"  (timeout="200")
[00:14:16.607]      // while-condition  =>  TRUE
[00:14:16.607]      // while "1"  (timeout="200")
[00:14:16.607]      // while-condition  =>  TRUE
[00:14:16.607]      // while "1"  (timeout="200")
[00:14:16.608]      // while-condition  =>  TRUE
[00:14:16.608]      // while "1"  (timeout="200")
[00:14:16.608]      // while-condition  =>  TRUE
[00:14:16.608]      // while "1"  (timeout="200")
[00:14:16.608]      // while-condition  =>  TRUE
[00:14:16.608]      // while "1"  (timeout="200")
[00:14:16.608]      // while-condition  =>  TRUE
[00:14:16.608]      // while "1"  (timeout="200")
[00:14:16.608]      // while-condition  =>  TRUE
[00:14:16.608]      // while "1"  (timeout="200")
[00:14:16.608]      // while-condition  =>  TRUE
[00:14:16.609]      // while "1"  (timeout="200")
[00:14:16.609]      // while-condition  =>  TRUE
[00:14:16.609]      // while "1"  (timeout="200")
[00:14:16.609]      // while-condition  =>  TRUE
[00:14:16.609]      // while "1"  (timeout="200")
[00:14:16.609]      // while-condition  =>  TRUE
[00:14:16.609]      // while "1"  (timeout="200")
[00:14:16.609]      // while-condition  =>  TRUE
[00:14:16.609]      // while "1"  (timeout="200")
[00:14:16.609]      // while-condition  =>  TRUE
[00:14:16.609]      // while "1"  (timeout="200")
[00:14:16.609]      // while-condition  =>  TRUE
[00:14:16.611]      // while "1"  (timeout="200")
[00:14:16.611]      // while-condition  =>  TRUE
[00:14:16.611]      // while "1"  (timeout="200")
[00:14:16.611]      // while-condition  =>  TRUE
[00:14:16.611]      // while "1"  (timeout="200")
[00:14:16.611]      // while-condition  =>  TRUE
[00:14:16.611]      // while "1"  (timeout="200")
[00:14:16.611]      // while-condition  =>  TRUE
[00:14:16.612]      // while "1"  (timeout="200")
[00:14:16.612]      // while  =>  TIMEOUT
[00:14:16.612]      // end while "1"
[00:14:16.612]    </control>
[00:14:16.612]    <control if="canReadPins" while="" timeout="0" info="">
[00:14:16.612]      // if-block "canReadPins"
[00:14:16.612]        // =>  TRUE
[00:14:16.612]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:14:16.612]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:14:16.614]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:14:16.614]        // while-condition  =>  FALSE
[00:14:16.614]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:14:16.614]      </control>
[00:14:16.614]      // end if-block "canReadPins"
[00:14:16.614]    </control>
[00:14:16.614]    <control if="!canReadPins" while="" timeout="0" info="">
[00:14:16.614]      // if-block "!canReadPins"
[00:14:16.614]        // =>  FALSE
[00:14:16.614]      // skip if-block "!canReadPins"
[00:14:16.614]    </control>
[00:14:16.615]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:14:16.615]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:14:16.615]        // =>  TRUE
[00:14:16.616]      <block atomic="false" info="">
[00:14:16.616]        WriteAP(0x00, 0x190008);
[00:14:16.617]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:14:16.617]        WriteAP(0xF0, 0x01);
[00:14:16.620]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:14:16.620]      </block>
[00:14:16.620]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:14:16.621]    </control>
[00:14:16.622]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:14:16.622]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:14:16.622]        // =>  FALSE
[00:14:16.622]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:14:16.622]    </control>
[00:14:16.622]    <block atomic="false" info="">
[00:14:16.622]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:14:16.626]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:14:16.626]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:14:16.626]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:14:16.628]      __ap = 0; //lets make sure we reset the access point selection
[00:14:16.628]        // -> [__ap <= 0x00000000]
[00:14:16.628]    </block>
[00:14:16.628]  </sequence>
[00:14:16.628]  
[00:14:16.647]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:14:16.647]  
[00:14:16.647]  <debugvars>
[00:14:16.647]    // Pre-defined
[00:14:16.647]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:16.647]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:16.649]    __dp=0x00000000
[00:14:16.649]    __ap=0x00000000
[00:14:16.649]    __traceout=0x00000000      (Trace Disabled)
[00:14:16.649]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:16.649]    __FlashAddr=0x00000000
[00:14:16.649]    __FlashLen=0x00000000
[00:14:16.649]    __FlashArg=0x00000000
[00:14:16.649]    __FlashOp=0x00000000
[00:14:16.649]    __Result=0x00000000
[00:14:16.650]  </debugvars>
[00:14:16.650]  
[00:14:16.650]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:14:16.650]    <block atomic="false" info="">
[00:14:16.650]      __var deviceID = 0;
[00:14:16.650]        // -> [deviceID <= 0x00000000]
[00:14:16.650]      __var version = 0;
[00:14:16.650]        // -> [version <= 0x00000000]
[00:14:16.650]      __var partNum = 0;
[00:14:16.650]        // -> [partNum <= 0x00000000]
[00:14:16.650]      __var manuf = 0;
[00:14:16.651]        // -> [manuf <= 0x00000000]
[00:14:16.651]      __var isMSPM0G1X0X_G3X0X = 0;
[00:14:16.651]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:14:16.651]      __var isProduction = 0;
[00:14:16.651]        // -> [isProduction <= 0x00000000]
[00:14:16.651]      __var continueId = 0;
[00:14:16.651]        // -> [continueId <= 0x00000000]
[00:14:16.651]      deviceID =   Read32(0x41C40004);
[00:14:16.656]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:14:16.656]        // -> [deviceID <= 0x2BB8802F]
[00:14:16.656]      version = deviceID >> 28;
[00:14:16.656]        // -> [version <= 0x00000002]
[00:14:16.656]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:14:16.656]        // -> [partNum <= 0x0000BB88]
[00:14:16.656]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:14:16.657]        // -> [manuf <= 0x00000017]
[00:14:16.657]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:14:16.657]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:14:16.657]      isProduction = (version > 0);
[00:14:16.657]        // -> [isProduction <= 0x00000001]
[00:14:16.657]    </block>
[00:14:16.657]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:14:16.658]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:14:16.658]        // =>  FALSE
[00:14:16.658]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:14:16.658]    </control>
[00:14:16.658]    <control if="continueId == 4" while="" timeout="0" info="">
[00:14:16.658]      // if-block "continueId == 4"
[00:14:16.658]        // =>  FALSE
[00:14:16.658]      // skip if-block "continueId == 4"
[00:14:16.658]    </control>
[00:14:16.658]    <control if="!isProduction" while="" timeout="0" info="">
[00:14:16.659]      // if-block "!isProduction"
[00:14:16.659]        // =>  FALSE
[00:14:16.659]      // skip if-block "!isProduction"
[00:14:16.659]    </control>
[00:14:16.659]  </sequence>
[00:14:16.659]  
[00:14:56.344]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:14:56.344]  
[00:14:56.359]  <debugvars>
[00:14:56.359]    // Pre-defined
[00:14:56.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:56.359]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:56.359]    __dp=0x00000000
[00:14:56.359]    __ap=0x00000000
[00:14:56.359]    __traceout=0x00000000      (Trace Disabled)
[00:14:56.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:56.359]    __FlashAddr=0x00000000
[00:14:56.359]    __FlashLen=0x00000000
[00:14:56.359]    __FlashArg=0x00000000
[00:14:56.359]    __FlashOp=0x00000000
[00:14:56.359]    __Result=0x00000000
[00:14:56.359]  </debugvars>
[00:14:56.359]  
[00:14:56.359]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:14:56.359]    <block atomic="false" info="">
[00:14:56.359]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:14:56.359]        // -> [isSWJ <= 0x00000001]
[00:14:56.359]      __var hasDormant = __protocol & 0x00020000;
[00:14:56.359]        // -> [hasDormant <= 0x00000000]
[00:14:56.359]      __var protType   = __protocol & 0x0000FFFF;
[00:14:56.359]        // -> [protType <= 0x00000002]
[00:14:56.359]    </block>
[00:14:56.359]    <control if="protType == 1" while="" timeout="0" info="">
[00:14:56.359]      // if-block "protType == 1"
[00:14:56.359]        // =>  FALSE
[00:14:56.359]      // skip if-block "protType == 1"
[00:14:56.359]    </control>
[00:14:56.359]    <control if="protType == 2" while="" timeout="0" info="">
[00:14:56.359]      // if-block "protType == 2"
[00:14:56.359]        // =>  TRUE
[00:14:56.359]      <control if="isSWJ" while="" timeout="0" info="">
[00:14:56.359]        // if-block "isSWJ"
[00:14:56.359]          // =>  TRUE
[00:14:56.359]        <control if="hasDormant" while="" timeout="0" info="">
[00:14:56.359]          // if-block "hasDormant"
[00:14:56.359]            // =>  FALSE
[00:14:56.359]          // skip if-block "hasDormant"
[00:14:56.359]        </control>
[00:14:56.359]        <control if="!hasDormant" while="" timeout="0" info="">
[00:14:56.359]          // if-block "!hasDormant"
[00:14:56.359]            // =>  TRUE
[00:14:56.359]          <block atomic="false" info="">
[00:14:56.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:14:56.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:56.365]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:14:56.367]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:14:56.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:14:56.367]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:56.367]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:14:56.367]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:14:56.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:14:56.367]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:56.367]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:14:56.367]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:14:56.367]          </block>
[00:14:56.367]          // end if-block "!hasDormant"
[00:14:56.367]        </control>
[00:14:56.367]        // end if-block "isSWJ"
[00:14:56.367]      </control>
[00:14:56.374]      <control if="!isSWJ" while="" timeout="0" info="">
[00:14:56.374]        // if-block "!isSWJ"
[00:14:56.374]          // =>  FALSE
[00:14:56.374]        // skip if-block "!isSWJ"
[00:14:56.374]      </control>
[00:14:56.374]      <block atomic="false" info="">
[00:14:56.374]        ReadDP(0x0);
[00:14:56.374]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:14:56.374]      </block>
[00:14:56.374]      // end if-block "protType == 2"
[00:14:56.374]    </control>
[00:14:56.374]  </sequence>
[00:14:56.374]  
[00:14:56.374]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:14:56.374]  
[00:14:56.374]  <debugvars>
[00:14:56.384]    // Pre-defined
[00:14:56.384]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:56.384]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:56.384]    __dp=0x00000000
[00:14:56.384]    __ap=0x00000000
[00:14:56.384]    __traceout=0x00000000      (Trace Disabled)
[00:14:56.384]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:56.384]    __FlashAddr=0x00000000
[00:14:56.384]    __FlashLen=0x00000000
[00:14:56.384]    __FlashArg=0x00000000
[00:14:56.384]    __FlashOp=0x00000000
[00:14:56.384]    __Result=0x00000000
[00:14:56.384]  </debugvars>
[00:14:56.384]  
[00:14:56.384]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:14:56.384]    <block atomic="false" info="">
[00:14:56.384]      __var SW_DP_ABORT       = 0x0;
[00:14:56.384]        // -> [SW_DP_ABORT <= 0x00000000]
[00:14:56.384]      __var DP_CTRL_STAT      = 0x4;
[00:14:56.384]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:14:56.384]      __var DP_SELECT         = 0x8;
[00:14:56.384]        // -> [DP_SELECT <= 0x00000008]
[00:14:56.384]      __var powered_down      = 0;
[00:14:56.384]        // -> [powered_down <= 0x00000000]
[00:14:56.384]      WriteDP(DP_SELECT, 0x00000000);
[00:14:56.384]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:14:56.384]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:14:56.384]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:14:56.384]        // -> [powered_down <= 0x00000001]
[00:14:56.384]    </block>
[00:14:56.384]    <control if="powered_down" while="" timeout="0" info="">
[00:14:56.384]      // if-block "powered_down"
[00:14:56.384]        // =>  TRUE
[00:14:56.384]      <block atomic="false" info="">
[00:14:56.384]        Message(0, "Debug/System power-up request sent");
[00:14:56.394]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:14:56.394]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:14:56.394]      </block>
[00:14:56.394]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:14:56.394]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:14:56.394]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:14:56.394]        // while-condition  =>  FALSE
[00:14:56.394]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:14:56.394]      </control>
[00:14:56.394]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:14:56.394]        // if-block "(__protocol & 0xFFFF) == 1"
[00:14:56.394]          // =>  FALSE
[00:14:56.394]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:14:56.394]      </control>
[00:14:56.394]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:14:56.394]        // if-block "(__protocol & 0xFFFF) == 2"
[00:14:56.394]          // =>  TRUE
[00:14:56.394]        <block atomic="false" info="">
[00:14:56.394]          Message(0, "executing SWD power up");
[00:14:56.394]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:14:56.394]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:14:56.394]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:14:56.405]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:14:56.405]        </block>
[00:14:56.405]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:14:56.405]      </control>
[00:14:56.405]      // end if-block "powered_down"
[00:14:56.405]    </control>
[00:14:56.405]    <block atomic="false" info="">
[00:14:56.405]      __var DEBUG_PORT_VAL    = 0;
[00:14:56.405]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:14:56.405]      __var ACCESS_POINT_VAL  = 0;
[00:14:56.405]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:14:56.405]      __ap = 1; 
[00:14:56.405]        // -> [__ap <= 0x00000001]
[00:14:56.405]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:14:56.408]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:14:56.408]      __ap = 4;
[00:14:56.408]        // -> [__ap <= 0x00000004]
[00:14:56.408]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:14:56.408]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:14:56.408]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:14:56.408]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:14:56.415]    </block>
[00:14:56.415]    <block atomic="false" info="">
[00:14:56.415]      __var nReset = 0x80;
[00:14:56.415]        // -> [nReset <= 0x00000080]
[00:14:56.415]      __var canReadPins = 0;
[00:14:56.415]        // -> [canReadPins <= 0x00000000]
[00:14:56.415]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:14:56.415]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:14:56.415]        // -> [canReadPins <= 0x00000001]
[00:14:56.415]    </block>
[00:14:56.415]    <control if="" while="1" timeout="200" info="">
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.415]      // while-condition  =>  TRUE
[00:14:56.415]      // while "1"  (timeout="200")
[00:14:56.425]      // while-condition  =>  TRUE
[00:14:56.425]      // while "1"  (timeout="200")
[00:14:56.425]      // while  =>  TIMEOUT
[00:14:56.425]      // end while "1"
[00:14:56.425]    </control>
[00:14:56.425]    <control if="canReadPins" while="" timeout="0" info="">
[00:14:56.425]      // if-block "canReadPins"
[00:14:56.425]        // =>  TRUE
[00:14:56.425]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:14:56.425]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:14:56.428]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:14:56.428]        // while-condition  =>  FALSE
[00:14:56.428]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:14:56.428]      </control>
[00:14:56.428]      // end if-block "canReadPins"
[00:14:56.428]    </control>
[00:14:56.428]    <control if="!canReadPins" while="" timeout="0" info="">
[00:14:56.428]      // if-block "!canReadPins"
[00:14:56.428]        // =>  FALSE
[00:14:56.428]      // skip if-block "!canReadPins"
[00:14:56.428]    </control>
[00:14:56.428]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:14:56.428]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:14:56.428]        // =>  TRUE
[00:14:56.428]      <block atomic="false" info="">
[00:14:56.428]        WriteAP(0x00, 0x190008);
[00:14:56.435]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:14:56.435]        WriteAP(0xF0, 0x01);
[00:14:56.438]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:14:56.438]      </block>
[00:14:56.438]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:14:56.438]    </control>
[00:14:56.438]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:14:56.438]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:14:56.438]        // =>  FALSE
[00:14:56.438]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:14:56.438]    </control>
[00:14:56.438]    <block atomic="false" info="">
[00:14:56.438]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:14:56.445]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:14:56.445]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:14:56.447]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:14:56.447]      __ap = 0; //lets make sure we reset the access point selection
[00:14:56.447]        // -> [__ap <= 0x00000000]
[00:14:56.447]    </block>
[00:14:56.447]  </sequence>
[00:14:56.447]  
[00:14:56.467]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:14:56.467]  
[00:14:56.467]  <debugvars>
[00:14:56.467]    // Pre-defined
[00:14:56.467]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:56.467]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:56.467]    __dp=0x00000000
[00:14:56.467]    __ap=0x00000000
[00:14:56.467]    __traceout=0x00000000      (Trace Disabled)
[00:14:56.467]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:56.467]    __FlashAddr=0x00000000
[00:14:56.467]    __FlashLen=0x00000000
[00:14:56.467]    __FlashArg=0x00000000
[00:14:56.467]    __FlashOp=0x00000000
[00:14:56.467]    __Result=0x00000000
[00:14:56.467]  </debugvars>
[00:14:56.476]  
[00:14:56.476]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:14:56.476]    <block atomic="false" info="">
[00:14:56.476]      __var deviceID = 0;
[00:14:56.476]        // -> [deviceID <= 0x00000000]
[00:14:56.476]      __var version = 0;
[00:14:56.476]        // -> [version <= 0x00000000]
[00:14:56.476]      __var partNum = 0;
[00:14:56.476]        // -> [partNum <= 0x00000000]
[00:14:56.476]      __var manuf = 0;
[00:14:56.476]        // -> [manuf <= 0x00000000]
[00:14:56.476]      __var isMSPM0G1X0X_G3X0X = 0;
[00:14:56.476]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:14:56.476]      __var isProduction = 0;
[00:14:56.476]        // -> [isProduction <= 0x00000000]
[00:14:56.476]      __var continueId = 0;
[00:14:56.476]        // -> [continueId <= 0x00000000]
[00:14:56.476]      deviceID =   Read32(0x41C40004);
[00:14:56.476]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:14:56.476]        // -> [deviceID <= 0x2BB8802F]
[00:14:56.476]      version = deviceID >> 28;
[00:14:56.476]        // -> [version <= 0x00000002]
[00:14:56.476]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:14:56.476]        // -> [partNum <= 0x0000BB88]
[00:14:56.476]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:14:56.476]        // -> [manuf <= 0x00000017]
[00:14:56.476]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:14:56.476]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:14:56.476]      isProduction = (version > 0);
[00:14:56.476]        // -> [isProduction <= 0x00000001]
[00:14:56.476]    </block>
[00:14:56.476]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:14:56.476]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:14:56.476]        // =>  FALSE
[00:14:56.476]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:14:56.476]    </control>
[00:14:56.476]    <control if="continueId == 4" while="" timeout="0" info="">
[00:14:56.476]      // if-block "continueId == 4"
[00:14:56.476]        // =>  FALSE
[00:14:56.476]      // skip if-block "continueId == 4"
[00:14:56.476]    </control>
[00:14:56.476]    <control if="!isProduction" while="" timeout="0" info="">
[00:14:56.476]      // if-block "!isProduction"
[00:14:56.476]        // =>  FALSE
[00:14:56.476]      // skip if-block "!isProduction"
[00:14:56.476]    </control>
[00:14:56.486]  </sequence>
[00:14:56.486]  
[00:16:11.714]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:16:11.715]  
[00:16:11.723]  <debugvars>
[00:16:11.723]    // Pre-defined
[00:16:11.723]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:11.723]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:11.723]    __dp=0x00000000
[00:16:11.723]    __ap=0x00000000
[00:16:11.723]    __traceout=0x00000000      (Trace Disabled)
[00:16:11.723]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:11.723]    __FlashAddr=0x00000000
[00:16:11.723]    __FlashLen=0x00000000
[00:16:11.723]    __FlashArg=0x00000000
[00:16:11.723]    __FlashOp=0x00000000
[00:16:11.723]    __Result=0x00000000
[00:16:11.723]  </debugvars>
[00:16:11.723]  
[00:16:11.723]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:11.723]    <block atomic="false" info="">
[00:16:11.723]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:11.723]        // -> [isSWJ <= 0x00000001]
[00:16:11.723]      __var hasDormant = __protocol & 0x00020000;
[00:16:11.723]        // -> [hasDormant <= 0x00000000]
[00:16:11.723]      __var protType   = __protocol & 0x0000FFFF;
[00:16:11.723]        // -> [protType <= 0x00000002]
[00:16:11.723]    </block>
[00:16:11.726]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:11.726]      // if-block "protType == 1"
[00:16:11.726]        // =>  FALSE
[00:16:11.726]      // skip if-block "protType == 1"
[00:16:11.727]    </control>
[00:16:11.727]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:11.727]      // if-block "protType == 2"
[00:16:11.727]        // =>  TRUE
[00:16:11.727]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:11.727]        // if-block "isSWJ"
[00:16:11.728]          // =>  TRUE
[00:16:11.728]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:11.728]          // if-block "hasDormant"
[00:16:11.728]            // =>  FALSE
[00:16:11.728]          // skip if-block "hasDormant"
[00:16:11.728]        </control>
[00:16:11.728]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:11.728]          // if-block "!hasDormant"
[00:16:11.728]            // =>  TRUE
[00:16:11.728]          <block atomic="false" info="">
[00:16:11.728]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:11.728]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:16:11.728]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:16:11.728]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:16:11.728]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:16:11.733]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:16:11.733]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:16:11.733]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:16:11.733]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:16:11.733]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:16:11.733]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:16:11.733]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:16:11.733]          </block>
[00:16:11.733]          // end if-block "!hasDormant"
[00:16:11.733]        </control>
[00:16:11.733]        // end if-block "isSWJ"
[00:16:11.733]      </control>
[00:16:11.733]      <control if="!isSWJ" while="" timeout="0" info="">
[00:16:11.733]        // if-block "!isSWJ"
[00:16:11.733]          // =>  FALSE
[00:16:11.733]        // skip if-block "!isSWJ"
[00:16:11.733]      </control>
[00:16:11.733]      <block atomic="false" info="">
[00:16:11.733]        ReadDP(0x0);
[00:16:11.733]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:16:11.733]      </block>
[00:16:11.733]      // end if-block "protType == 2"
[00:16:11.733]    </control>
[00:16:11.733]  </sequence>
[00:16:11.733]  
[00:16:11.743]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:16:11.743]  
[00:16:11.743]  <debugvars>
[00:16:11.743]    // Pre-defined
[00:16:11.743]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:11.745]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:11.745]    __dp=0x00000000
[00:16:11.745]    __ap=0x00000000
[00:16:11.745]    __traceout=0x00000000      (Trace Disabled)
[00:16:11.745]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:11.745]    __FlashAddr=0x00000000
[00:16:11.745]    __FlashLen=0x00000000
[00:16:11.745]    __FlashArg=0x00000000
[00:16:11.745]    __FlashOp=0x00000000
[00:16:11.745]    __Result=0x00000000
[00:16:11.745]  </debugvars>
[00:16:11.745]  
[00:16:11.745]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:16:11.745]    <block atomic="false" info="">
[00:16:11.745]      __var SW_DP_ABORT       = 0x0;
[00:16:11.745]        // -> [SW_DP_ABORT <= 0x00000000]
[00:16:11.745]      __var DP_CTRL_STAT      = 0x4;
[00:16:11.745]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:16:11.745]      __var DP_SELECT         = 0x8;
[00:16:11.745]        // -> [DP_SELECT <= 0x00000008]
[00:16:11.745]      __var powered_down      = 0;
[00:16:11.745]        // -> [powered_down <= 0x00000000]
[00:16:11.745]      WriteDP(DP_SELECT, 0x00000000);
[00:16:11.749]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:16:11.749]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:16:11.749]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:16:11.749]        // -> [powered_down <= 0x00000001]
[00:16:11.749]    </block>
[00:16:11.749]    <control if="powered_down" while="" timeout="0" info="">
[00:16:11.749]      // if-block "powered_down"
[00:16:11.749]        // =>  TRUE
[00:16:11.749]      <block atomic="false" info="">
[00:16:11.753]        Message(0, "Debug/System power-up request sent");
[00:16:11.757]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:16:11.758]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:16:11.758]      </block>
[00:16:11.758]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:16:11.758]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:16:11.758]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:16:11.758]        // while-condition  =>  FALSE
[00:16:11.758]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:16:11.758]      </control>
[00:16:11.758]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:16:11.758]        // if-block "(__protocol & 0xFFFF) == 1"
[00:16:11.758]          // =>  FALSE
[00:16:11.758]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:16:11.758]      </control>
[00:16:11.758]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:16:11.762]        // if-block "(__protocol & 0xFFFF) == 2"
[00:16:11.762]          // =>  TRUE
[00:16:11.762]        <block atomic="false" info="">
[00:16:11.762]          Message(0, "executing SWD power up");
[00:16:11.764]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:16:11.766]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:16:11.766]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:16:11.768]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:16:11.768]        </block>
[00:16:11.768]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:16:11.768]      </control>
[00:16:11.768]      // end if-block "powered_down"
[00:16:11.769]    </control>
[00:16:11.769]    <block atomic="false" info="">
[00:16:11.769]      __var DEBUG_PORT_VAL    = 0;
[00:16:11.769]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:16:11.769]      __var ACCESS_POINT_VAL  = 0;
[00:16:11.769]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:16:11.769]      __ap = 1; 
[00:16:11.769]        // -> [__ap <= 0x00000001]
[00:16:11.769]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:16:11.773]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:16:11.773]      __ap = 4;
[00:16:11.773]        // -> [__ap <= 0x00000004]
[00:16:11.773]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:16:11.778]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:16:11.778]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:16:11.778]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:16:11.780]    </block>
[00:16:11.780]    <block atomic="false" info="">
[00:16:11.780]      __var nReset = 0x80;
[00:16:11.780]        // -> [nReset <= 0x00000080]
[00:16:11.780]      __var canReadPins = 0;
[00:16:11.780]        // -> [canReadPins <= 0x00000000]
[00:16:11.780]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:16:11.782]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:16:11.783]        // -> [canReadPins <= 0x00000001]
[00:16:11.783]    </block>
[00:16:11.783]    <control if="" while="1" timeout="200" info="">
[00:16:11.783]      // while "1"  (timeout="200")
[00:16:11.783]      // while-condition  =>  TRUE
[00:16:11.783]      // while "1"  (timeout="200")
[00:16:11.783]      // while-condition  =>  TRUE
[00:16:11.783]      // while "1"  (timeout="200")
[00:16:11.784]      // while-condition  =>  TRUE
[00:16:11.784]      // while "1"  (timeout="200")
[00:16:11.784]      // while  =>  TIMEOUT
[00:16:11.784]      // end while "1"
[00:16:11.784]    </control>
[00:16:11.784]    <control if="canReadPins" while="" timeout="0" info="">
[00:16:11.784]      // if-block "canReadPins"
[00:16:11.784]        // =>  TRUE
[00:16:11.784]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:16:11.785]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:16:11.786]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:16:11.786]        // while-condition  =>  FALSE
[00:16:11.786]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:16:11.786]      </control>
[00:16:11.787]      // end if-block "canReadPins"
[00:16:11.787]    </control>
[00:16:11.787]    <control if="!canReadPins" while="" timeout="0" info="">
[00:16:11.788]      // if-block "!canReadPins"
[00:16:11.788]        // =>  FALSE
[00:16:11.788]      // skip if-block "!canReadPins"
[00:16:11.788]    </control>
[00:16:11.788]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:16:11.788]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:16:11.788]        // =>  TRUE
[00:16:11.788]      <block atomic="false" info="">
[00:16:11.789]        WriteAP(0x00, 0x190008);
[00:16:11.792]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:16:11.792]        WriteAP(0xF0, 0x01);
[00:16:11.796]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:16:11.796]      </block>
[00:16:11.796]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:16:11.796]    </control>
[00:16:11.796]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:16:11.796]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:16:11.797]        // =>  FALSE
[00:16:11.797]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:16:11.797]    </control>
[00:16:11.797]    <block atomic="false" info="">
[00:16:11.797]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:16:11.800]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:16:11.800]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:16:11.800]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:16:11.802]      __ap = 0; //lets make sure we reset the access point selection
[00:16:11.802]        // -> [__ap <= 0x00000000]
[00:16:11.802]    </block>
[00:16:11.802]  </sequence>
[00:16:11.802]  
[00:16:11.821]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:16:11.821]  
[00:16:11.822]  <debugvars>
[00:16:11.822]    // Pre-defined
[00:16:11.822]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:11.822]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:11.822]    __dp=0x00000000
[00:16:11.822]    __ap=0x00000000
[00:16:11.823]    __traceout=0x00000000      (Trace Disabled)
[00:16:11.823]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:11.823]    __FlashAddr=0x00000000
[00:16:11.823]    __FlashLen=0x00000000
[00:16:11.823]    __FlashArg=0x00000000
[00:16:11.823]    __FlashOp=0x00000000
[00:16:11.823]    __Result=0x00000000
[00:16:11.823]  </debugvars>
[00:16:11.823]  
[00:16:11.823]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:16:11.823]    <block atomic="false" info="">
[00:16:11.823]      __var deviceID = 0;
[00:16:11.823]        // -> [deviceID <= 0x00000000]
[00:16:11.823]      __var version = 0;
[00:16:11.823]        // -> [version <= 0x00000000]
[00:16:11.824]      __var partNum = 0;
[00:16:11.824]        // -> [partNum <= 0x00000000]
[00:16:11.824]      __var manuf = 0;
[00:16:11.824]        // -> [manuf <= 0x00000000]
[00:16:11.824]      __var isMSPM0G1X0X_G3X0X = 0;
[00:16:11.824]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:16:11.824]      __var isProduction = 0;
[00:16:11.824]        // -> [isProduction <= 0x00000000]
[00:16:11.824]      __var continueId = 0;
[00:16:11.824]        // -> [continueId <= 0x00000000]
[00:16:11.824]      deviceID =   Read32(0x41C40004);
[00:16:11.831]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:16:11.831]        // -> [deviceID <= 0x2BB8802F]
[00:16:11.831]      version = deviceID >> 28;
[00:16:11.831]        // -> [version <= 0x00000002]
[00:16:11.831]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:16:11.832]        // -> [partNum <= 0x0000BB88]
[00:16:11.832]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:16:11.832]        // -> [manuf <= 0x00000017]
[00:16:11.832]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:16:11.832]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:16:11.832]      isProduction = (version > 0);
[00:16:11.832]        // -> [isProduction <= 0x00000001]
[00:16:11.832]    </block>
[00:16:11.832]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:16:11.832]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:16:11.832]        // =>  FALSE
[00:16:11.832]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:16:11.832]    </control>
[00:16:11.833]    <control if="continueId == 4" while="" timeout="0" info="">
[00:16:11.833]      // if-block "continueId == 4"
[00:16:11.833]        // =>  FALSE
[00:16:11.833]      // skip if-block "continueId == 4"
[00:16:11.833]    </control>
[00:16:11.833]    <control if="!isProduction" while="" timeout="0" info="">
[00:16:11.833]      // if-block "!isProduction"
[00:16:11.833]        // =>  FALSE
[00:16:11.833]      // skip if-block "!isProduction"
[00:16:11.833]    </control>
[00:16:11.833]  </sequence>
[00:16:11.834]  
[00:16:22.951]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:22.951]  
[00:16:22.951]  <debugvars>
[00:16:22.951]    // Pre-defined
[00:16:22.951]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:22.951]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:22.952]    __dp=0x00000000
[00:16:22.952]    __ap=0x00000000
[00:16:22.952]    __traceout=0x00000000      (Trace Disabled)
[00:16:22.952]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:22.952]    __FlashAddr=0x00000000
[00:16:22.952]    __FlashLen=0x00000000
[00:16:22.952]    __FlashArg=0x00000000
[00:16:22.952]    __FlashOp=0x00000000
[00:16:22.952]    __Result=0x00000000
[00:16:22.952]  </debugvars>
[00:16:22.953]  
[00:16:22.953]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:22.953]    <block atomic="false" info="">
[00:16:22.953]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:22.953]        // -> [isSWJ <= 0x00000001]
[00:16:22.953]      __var hasDormant = __protocol & 0x00020000;
[00:16:22.953]        // -> [hasDormant <= 0x00000000]
[00:16:22.953]      __var protType   = __protocol & 0x0000FFFF;
[00:16:22.953]        // -> [protType <= 0x00000002]
[00:16:22.953]    </block>
[00:16:22.954]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:22.954]      // if-block "protType == 1"
[00:16:22.954]        // =>  FALSE
[00:16:22.954]      // skip if-block "protType == 1"
[00:16:22.954]    </control>
[00:16:22.954]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:22.954]      // if-block "protType == 2"
[00:16:22.954]        // =>  TRUE
[00:16:22.954]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:22.954]        // if-block "isSWJ"
[00:16:22.955]          // =>  TRUE
[00:16:22.955]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:22.955]          // if-block "hasDormant"
[00:16:22.955]            // =>  FALSE
[00:16:22.955]          // skip if-block "hasDormant"
[00:16:22.955]        </control>
[00:16:22.955]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:22.955]          // if-block "!hasDormant"
[00:16:22.955]            // =>  TRUE
[00:16:22.956]          <block atomic="false" info="">
[00:16:22.956]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:23.974]  
[00:16:23.974]  !!! E320 : DAP access error
[00:16:23.974]  
[00:16:23.988]          </block>
[00:16:23.988]          // end if-block "!hasDormant"
[00:16:23.988]        </control>
[00:16:23.988]        // end if-block "isSWJ"
[00:16:23.988]      </control>
[00:16:23.988]      // end if-block "protType == 2"
[00:16:23.988]    </control>
[00:16:23.988]  </sequence>
[00:16:23.988]  
[00:16:24.247]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:24.247]  
[00:16:24.255]  <debugvars>
[00:16:24.255]    // Pre-defined
[00:16:24.255]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:24.255]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:24.255]    __dp=0x00000000
[00:16:24.255]    __ap=0x00000000
[00:16:24.255]    __traceout=0x00000000      (Trace Disabled)
[00:16:24.255]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:24.255]    __FlashAddr=0x00000000
[00:16:24.255]    __FlashLen=0x00000000
[00:16:24.255]    __FlashArg=0x00000000
[00:16:24.255]    __FlashOp=0x00000000
[00:16:24.257]    __Result=0x00000000
[00:16:24.257]  </debugvars>
[00:16:24.257]  
[00:16:24.257]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:24.257]    <block atomic="false" info="">
[00:16:24.257]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:24.257]        // -> [isSWJ <= 0x00000001]
[00:16:24.257]      __var hasDormant = __protocol & 0x00020000;
[00:16:24.257]        // -> [hasDormant <= 0x00000000]
[00:16:24.257]      __var protType   = __protocol & 0x0000FFFF;
[00:16:24.257]        // -> [protType <= 0x00000002]
[00:16:24.257]    </block>
[00:16:24.257]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:24.257]      // if-block "protType == 1"
[00:16:24.257]        // =>  FALSE
[00:16:24.257]      // skip if-block "protType == 1"
[00:16:24.257]    </control>
[00:16:24.257]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:24.257]      // if-block "protType == 2"
[00:16:24.257]        // =>  TRUE
[00:16:24.257]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:24.257]        // if-block "isSWJ"
[00:16:24.257]          // =>  TRUE
[00:16:24.257]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:24.257]          // if-block "hasDormant"
[00:16:24.257]            // =>  FALSE
[00:16:24.257]          // skip if-block "hasDormant"
[00:16:24.257]        </control>
[00:16:24.257]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:24.257]          // if-block "!hasDormant"
[00:16:24.257]            // =>  TRUE
[00:16:24.257]          <block atomic="false" info="">
[00:16:24.257]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:25.273]  
[00:16:25.273]  !!! E320 : DAP access error
[00:16:25.273]  
[00:16:25.285]          </block>
[00:16:25.285]          // end if-block "!hasDormant"
[00:16:25.285]        </control>
[00:16:25.285]        // end if-block "isSWJ"
[00:16:25.285]      </control>
[00:16:25.285]      // end if-block "protType == 2"
[00:16:25.285]    </control>
[00:16:25.285]  </sequence>
[00:16:25.285]  
[00:16:25.546]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:25.546]  
[00:16:25.554]  <debugvars>
[00:16:25.554]    // Pre-defined
[00:16:25.554]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:25.554]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:25.554]    __dp=0x00000000
[00:16:25.554]    __ap=0x00000000
[00:16:25.554]    __traceout=0x00000000      (Trace Disabled)
[00:16:25.554]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:25.554]    __FlashAddr=0x00000000
[00:16:25.554]    __FlashLen=0x00000000
[00:16:25.554]    __FlashArg=0x00000000
[00:16:25.554]    __FlashOp=0x00000000
[00:16:25.554]    __Result=0x00000000
[00:16:25.554]  </debugvars>
[00:16:25.554]  
[00:16:25.554]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:25.554]    <block atomic="false" info="">
[00:16:25.554]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:25.554]        // -> [isSWJ <= 0x00000001]
[00:16:25.554]      __var hasDormant = __protocol & 0x00020000;
[00:16:25.556]        // -> [hasDormant <= 0x00000000]
[00:16:25.556]      __var protType   = __protocol & 0x0000FFFF;
[00:16:25.556]        // -> [protType <= 0x00000002]
[00:16:25.556]    </block>
[00:16:25.556]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:25.556]      // if-block "protType == 1"
[00:16:25.556]        // =>  FALSE
[00:16:25.556]      // skip if-block "protType == 1"
[00:16:25.556]    </control>
[00:16:25.556]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:25.556]      // if-block "protType == 2"
[00:16:25.557]        // =>  TRUE
[00:16:25.557]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:25.557]        // if-block "isSWJ"
[00:16:25.557]          // =>  TRUE
[00:16:25.557]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:25.557]          // if-block "hasDormant"
[00:16:25.558]            // =>  FALSE
[00:16:25.558]          // skip if-block "hasDormant"
[00:16:25.558]        </control>
[00:16:25.558]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:25.558]          // if-block "!hasDormant"
[00:16:25.558]            // =>  TRUE
[00:16:25.558]          <block atomic="false" info="">
[00:16:25.558]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:26.575]  
[00:16:26.575]  !!! E320 : DAP access error
[00:16:26.575]  
[00:16:26.583]          </block>
[00:16:26.583]          // end if-block "!hasDormant"
[00:16:26.583]        </control>
[00:16:26.583]        // end if-block "isSWJ"
[00:16:26.583]      </control>
[00:16:26.583]      // end if-block "protType == 2"
[00:16:26.583]    </control>
[00:16:26.583]  </sequence>
[00:16:26.583]  
[00:16:26.842]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:26.842]  
[00:16:26.850]  <debugvars>
[00:16:26.850]    // Pre-defined
[00:16:26.850]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:26.850]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:26.850]    __dp=0x00000000
[00:16:26.850]    __ap=0x00000000
[00:16:26.850]    __traceout=0x00000000      (Trace Disabled)
[00:16:26.850]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:26.850]    __FlashAddr=0x00000000
[00:16:26.850]    __FlashLen=0x00000000
[00:16:26.850]    __FlashArg=0x00000000
[00:16:26.850]    __FlashOp=0x00000000
[00:16:26.850]    __Result=0x00000000
[00:16:26.850]  </debugvars>
[00:16:26.850]  
[00:16:26.850]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:26.850]    <block atomic="false" info="">
[00:16:26.850]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:26.850]        // -> [isSWJ <= 0x00000001]
[00:16:26.850]      __var hasDormant = __protocol & 0x00020000;
[00:16:26.850]        // -> [hasDormant <= 0x00000000]
[00:16:26.853]      __var protType   = __protocol & 0x0000FFFF;
[00:16:26.853]        // -> [protType <= 0x00000002]
[00:16:26.853]    </block>
[00:16:26.853]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:26.853]      // if-block "protType == 1"
[00:16:26.853]        // =>  FALSE
[00:16:26.853]      // skip if-block "protType == 1"
[00:16:26.853]    </control>
[00:16:26.853]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:26.853]      // if-block "protType == 2"
[00:16:26.853]        // =>  TRUE
[00:16:26.853]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:26.853]        // if-block "isSWJ"
[00:16:26.853]          // =>  TRUE
[00:16:26.853]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:26.853]          // if-block "hasDormant"
[00:16:26.853]            // =>  FALSE
[00:16:26.853]          // skip if-block "hasDormant"
[00:16:26.853]        </control>
[00:16:26.853]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:26.853]          // if-block "!hasDormant"
[00:16:26.853]            // =>  TRUE
[00:16:26.853]          <block atomic="false" info="">
[00:16:26.853]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:27.873]  
[00:16:27.873]  !!! E320 : DAP access error
[00:16:27.873]  
[00:16:27.873]          </block>
[00:16:27.873]          // end if-block "!hasDormant"
[00:16:27.873]        </control>
[00:16:27.873]        // end if-block "isSWJ"
[00:16:27.873]      </control>
[00:16:27.873]      // end if-block "protType == 2"
[00:16:27.873]    </control>
[00:16:27.873]  </sequence>
[00:16:27.873]  
[00:16:28.125]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:28.125]  
[00:16:28.134]  <debugvars>
[00:16:28.134]    // Pre-defined
[00:16:28.134]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:28.134]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:28.134]    __dp=0x00000000
[00:16:28.134]    __ap=0x00000000
[00:16:28.134]    __traceout=0x00000000      (Trace Disabled)
[00:16:28.134]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:28.135]    __FlashAddr=0x00000000
[00:16:28.135]    __FlashLen=0x00000000
[00:16:28.135]    __FlashArg=0x00000000
[00:16:28.135]    __FlashOp=0x00000000
[00:16:28.135]    __Result=0x00000000
[00:16:28.135]  </debugvars>
[00:16:28.135]  
[00:16:28.135]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:28.135]    <block atomic="false" info="">
[00:16:28.135]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:28.135]        // -> [isSWJ <= 0x00000001]
[00:16:28.135]      __var hasDormant = __protocol & 0x00020000;
[00:16:28.135]        // -> [hasDormant <= 0x00000000]
[00:16:28.135]      __var protType   = __protocol & 0x0000FFFF;
[00:16:28.135]        // -> [protType <= 0x00000002]
[00:16:28.135]    </block>
[00:16:28.135]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:28.135]      // if-block "protType == 1"
[00:16:28.135]        // =>  FALSE
[00:16:28.138]      // skip if-block "protType == 1"
[00:16:28.138]    </control>
[00:16:28.138]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:28.138]      // if-block "protType == 2"
[00:16:28.138]        // =>  TRUE
[00:16:28.138]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:28.138]        // if-block "isSWJ"
[00:16:28.138]          // =>  TRUE
[00:16:28.138]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:28.138]          // if-block "hasDormant"
[00:16:28.138]            // =>  FALSE
[00:16:28.138]          // skip if-block "hasDormant"
[00:16:28.138]        </control>
[00:16:28.138]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:28.138]          // if-block "!hasDormant"
[00:16:28.138]            // =>  TRUE
[00:16:28.138]          <block atomic="false" info="">
[00:16:28.138]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:29.158]  
[00:16:29.158]  !!! E320 : DAP access error
[00:16:29.158]  
[00:16:29.170]          </block>
[00:16:29.170]          // end if-block "!hasDormant"
[00:16:29.170]        </control>
[00:16:29.170]        // end if-block "isSWJ"
[00:16:29.170]      </control>
[00:16:29.170]      // end if-block "protType == 2"
[00:16:29.170]    </control>
[00:16:29.170]  </sequence>
[00:16:29.170]  
[00:16:29.421]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:29.421]  
[00:16:29.429]  <debugvars>
[00:16:29.429]    // Pre-defined
[00:16:29.429]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:29.429]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:29.429]    __dp=0x00000000
[00:16:29.429]    __ap=0x00000000
[00:16:29.429]    __traceout=0x00000000      (Trace Disabled)
[00:16:29.429]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:29.429]    __FlashAddr=0x00000000
[00:16:29.429]    __FlashLen=0x00000000
[00:16:29.429]    __FlashArg=0x00000000
[00:16:29.429]    __FlashOp=0x00000000
[00:16:29.429]    __Result=0x00000000
[00:16:29.429]  </debugvars>
[00:16:29.429]  
[00:16:29.429]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:29.429]    <block atomic="false" info="">
[00:16:29.429]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:29.431]        // -> [isSWJ <= 0x00000001]
[00:16:29.431]      __var hasDormant = __protocol & 0x00020000;
[00:16:29.431]        // -> [hasDormant <= 0x00000000]
[00:16:29.431]      __var protType   = __protocol & 0x0000FFFF;
[00:16:29.431]        // -> [protType <= 0x00000002]
[00:16:29.431]    </block>
[00:16:29.431]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:29.431]      // if-block "protType == 1"
[00:16:29.431]        // =>  FALSE
[00:16:29.431]      // skip if-block "protType == 1"
[00:16:29.431]    </control>
[00:16:29.431]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:29.431]      // if-block "protType == 2"
[00:16:29.432]        // =>  TRUE
[00:16:29.432]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:29.433]        // if-block "isSWJ"
[00:16:29.433]          // =>  TRUE
[00:16:29.433]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:29.433]          // if-block "hasDormant"
[00:16:29.433]            // =>  FALSE
[00:16:29.433]          // skip if-block "hasDormant"
[00:16:29.433]        </control>
[00:16:29.433]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:29.433]          // if-block "!hasDormant"
[00:16:29.433]            // =>  TRUE
[00:16:29.433]          <block atomic="false" info="">
[00:16:29.434]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:30.458]  
[00:16:30.458]  !!! E320 : DAP access error
[00:16:30.458]  
[00:16:30.467]          </block>
[00:16:30.467]          // end if-block "!hasDormant"
[00:16:30.467]        </control>
[00:16:30.467]        // end if-block "isSWJ"
[00:16:30.467]      </control>
[00:16:30.467]      // end if-block "protType == 2"
[00:16:30.467]    </control>
[00:16:30.467]  </sequence>
[00:16:30.467]  
[00:16:30.718]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:30.718]  
[00:16:30.727]  <debugvars>
[00:16:30.727]    // Pre-defined
[00:16:30.727]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:30.727]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:30.727]    __dp=0x00000000
[00:16:30.727]    __ap=0x00000000
[00:16:30.727]    __traceout=0x00000000      (Trace Disabled)
[00:16:30.728]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:30.728]    __FlashAddr=0x00000000
[00:16:30.728]    __FlashLen=0x00000000
[00:16:30.728]    __FlashArg=0x00000000
[00:16:30.728]    __FlashOp=0x00000000
[00:16:30.728]    __Result=0x00000000
[00:16:30.728]  </debugvars>
[00:16:30.728]  
[00:16:30.728]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:30.728]    <block atomic="false" info="">
[00:16:30.728]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:30.728]        // -> [isSWJ <= 0x00000001]
[00:16:30.728]      __var hasDormant = __protocol & 0x00020000;
[00:16:30.728]        // -> [hasDormant <= 0x00000000]
[00:16:30.728]      __var protType   = __protocol & 0x0000FFFF;
[00:16:30.728]        // -> [protType <= 0x00000002]
[00:16:30.728]    </block>
[00:16:30.728]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:30.728]      // if-block "protType == 1"
[00:16:30.728]        // =>  FALSE
[00:16:30.728]      // skip if-block "protType == 1"
[00:16:30.728]    </control>
[00:16:30.728]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:30.728]      // if-block "protType == 2"
[00:16:30.728]        // =>  TRUE
[00:16:30.728]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:30.728]        // if-block "isSWJ"
[00:16:30.728]          // =>  TRUE
[00:16:30.728]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:30.728]          // if-block "hasDormant"
[00:16:30.728]            // =>  FALSE
[00:16:30.728]          // skip if-block "hasDormant"
[00:16:30.728]        </control>
[00:16:30.728]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:30.728]          // if-block "!hasDormant"
[00:16:30.728]            // =>  TRUE
[00:16:30.728]          <block atomic="false" info="">
[00:16:30.728]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:31.745]  
[00:16:31.745]  !!! E320 : DAP access error
[00:16:31.745]  
[00:16:31.749]          </block>
[00:16:31.749]          // end if-block "!hasDormant"
[00:16:31.749]        </control>
[00:16:31.749]        // end if-block "isSWJ"
[00:16:31.749]      </control>
[00:16:31.749]      // end if-block "protType == 2"
[00:16:31.749]    </control>
[00:16:31.749]  </sequence>
[00:16:31.749]  
[00:16:32.000]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:32.000]  
[00:16:32.009]  <debugvars>
[00:16:32.009]    // Pre-defined
[00:16:32.009]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:32.009]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:32.009]    __dp=0x00000000
[00:16:32.009]    __ap=0x00000000
[00:16:32.009]    __traceout=0x00000000      (Trace Disabled)
[00:16:32.009]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:32.009]    __FlashAddr=0x00000000
[00:16:32.009]    __FlashLen=0x00000000
[00:16:32.009]    __FlashArg=0x00000000
[00:16:32.009]    __FlashOp=0x00000000
[00:16:32.009]    __Result=0x00000000
[00:16:32.009]  </debugvars>
[00:16:32.009]  
[00:16:32.009]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:32.009]    <block atomic="false" info="">
[00:16:32.009]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:32.009]        // -> [isSWJ <= 0x00000001]
[00:16:32.011]      __var hasDormant = __protocol & 0x00020000;
[00:16:32.011]        // -> [hasDormant <= 0x00000000]
[00:16:32.011]      __var protType   = __protocol & 0x0000FFFF;
[00:16:32.011]        // -> [protType <= 0x00000002]
[00:16:32.011]    </block>
[00:16:32.011]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:32.011]      // if-block "protType == 1"
[00:16:32.011]        // =>  FALSE
[00:16:32.011]      // skip if-block "protType == 1"
[00:16:32.011]    </control>
[00:16:32.011]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:32.011]      // if-block "protType == 2"
[00:16:32.011]        // =>  TRUE
[00:16:32.011]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:32.011]        // if-block "isSWJ"
[00:16:32.011]          // =>  TRUE
[00:16:32.011]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:32.011]          // if-block "hasDormant"
[00:16:32.011]            // =>  FALSE
[00:16:32.011]          // skip if-block "hasDormant"
[00:16:32.011]        </control>
[00:16:32.011]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:32.011]          // if-block "!hasDormant"
[00:16:32.011]            // =>  TRUE
[00:16:32.011]          <block atomic="false" info="">
[00:16:32.011]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:33.023]  
[00:16:33.023]  !!! E320 : DAP access error
[00:16:33.023]  
[00:16:33.023]          </block>
[00:16:33.023]          // end if-block "!hasDormant"
[00:16:33.023]        </control>
[00:16:33.023]        // end if-block "isSWJ"
[00:16:33.023]      </control>
[00:16:33.023]      // end if-block "protType == 2"
[00:16:33.023]    </control>
[00:16:33.023]  </sequence>
[00:16:33.023]  
[00:16:33.274]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:33.274]  
[00:16:33.283]  <debugvars>
[00:16:33.283]    // Pre-defined
[00:16:33.283]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:33.283]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:33.283]    __dp=0x00000000
[00:16:33.283]    __ap=0x00000000
[00:16:33.283]    __traceout=0x00000000      (Trace Disabled)
[00:16:33.283]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:33.283]    __FlashAddr=0x00000000
[00:16:33.284]    __FlashLen=0x00000000
[00:16:33.284]    __FlashArg=0x00000000
[00:16:33.284]    __FlashOp=0x00000000
[00:16:33.284]    __Result=0x00000000
[00:16:33.284]  </debugvars>
[00:16:33.284]  
[00:16:33.284]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:33.284]    <block atomic="false" info="">
[00:16:33.284]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:33.284]        // -> [isSWJ <= 0x00000001]
[00:16:33.284]      __var hasDormant = __protocol & 0x00020000;
[00:16:33.285]        // -> [hasDormant <= 0x00000000]
[00:16:33.285]      __var protType   = __protocol & 0x0000FFFF;
[00:16:33.285]        // -> [protType <= 0x00000002]
[00:16:33.285]    </block>
[00:16:33.285]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:33.285]      // if-block "protType == 1"
[00:16:33.285]        // =>  FALSE
[00:16:33.285]      // skip if-block "protType == 1"
[00:16:33.285]    </control>
[00:16:33.285]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:33.285]      // if-block "protType == 2"
[00:16:33.285]        // =>  TRUE
[00:16:33.285]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:33.285]        // if-block "isSWJ"
[00:16:33.285]          // =>  TRUE
[00:16:33.285]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:33.285]          // if-block "hasDormant"
[00:16:33.285]            // =>  FALSE
[00:16:33.285]          // skip if-block "hasDormant"
[00:16:33.285]        </control>
[00:16:33.285]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:33.285]          // if-block "!hasDormant"
[00:16:33.285]            // =>  TRUE
[00:16:33.285]          <block atomic="false" info="">
[00:16:33.285]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:34.298]  
[00:16:34.298]  !!! E320 : DAP access error
[00:16:34.298]  
[00:16:34.310]          </block>
[00:16:34.310]          // end if-block "!hasDormant"
[00:16:34.310]        </control>
[00:16:34.310]        // end if-block "isSWJ"
[00:16:34.310]      </control>
[00:16:34.310]      // end if-block "protType == 2"
[00:16:34.310]    </control>
[00:16:34.310]  </sequence>
[00:16:34.310]  
[00:16:34.561]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:34.561]  
[00:16:34.569]  <debugvars>
[00:16:34.569]    // Pre-defined
[00:16:34.569]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:34.569]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:34.569]    __dp=0x00000000
[00:16:34.569]    __ap=0x00000000
[00:16:34.569]    __traceout=0x00000000      (Trace Disabled)
[00:16:34.569]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:34.569]    __FlashAddr=0x00000000
[00:16:34.569]    __FlashLen=0x00000000
[00:16:34.569]    __FlashArg=0x00000000
[00:16:34.569]    __FlashOp=0x00000000
[00:16:34.569]    __Result=0x00000000
[00:16:34.569]  </debugvars>
[00:16:34.569]  
[00:16:34.569]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:34.569]    <block atomic="false" info="">
[00:16:34.569]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:34.569]        // -> [isSWJ <= 0x00000001]
[00:16:34.569]      __var hasDormant = __protocol & 0x00020000;
[00:16:34.569]        // -> [hasDormant <= 0x00000000]
[00:16:34.569]      __var protType   = __protocol & 0x0000FFFF;
[00:16:34.569]        // -> [protType <= 0x00000002]
[00:16:34.571]    </block>
[00:16:34.571]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:34.571]      // if-block "protType == 1"
[00:16:34.571]        // =>  FALSE
[00:16:34.571]      // skip if-block "protType == 1"
[00:16:34.571]    </control>
[00:16:34.571]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:34.571]      // if-block "protType == 2"
[00:16:34.571]        // =>  TRUE
[00:16:34.571]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:34.571]        // if-block "isSWJ"
[00:16:34.571]          // =>  TRUE
[00:16:34.571]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:34.571]          // if-block "hasDormant"
[00:16:34.573]            // =>  FALSE
[00:16:34.573]          // skip if-block "hasDormant"
[00:16:34.573]        </control>
[00:16:34.573]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:34.573]          // if-block "!hasDormant"
[00:16:34.573]            // =>  TRUE
[00:16:34.574]          <block atomic="false" info="">
[00:16:34.574]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:35.589]  
[00:16:35.589]  !!! E320 : DAP access error
[00:16:35.589]  
[00:16:35.589]          </block>
[00:16:35.597]          // end if-block "!hasDormant"
[00:16:35.597]        </control>
[00:16:35.597]        // end if-block "isSWJ"
[00:16:35.597]      </control>
[00:16:35.597]      // end if-block "protType == 2"
[00:16:35.597]    </control>
[00:16:35.597]  </sequence>
[00:16:35.597]  
[00:16:35.853]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:35.853]  
[00:16:35.862]  <debugvars>
[00:16:35.862]    // Pre-defined
[00:16:35.862]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:35.862]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:35.862]    __dp=0x00000000
[00:16:35.862]    __ap=0x00000000
[00:16:35.862]    __traceout=0x00000000      (Trace Disabled)
[00:16:35.862]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:35.862]    __FlashAddr=0x00000000
[00:16:35.862]    __FlashLen=0x00000000
[00:16:35.863]    __FlashArg=0x00000000
[00:16:35.863]    __FlashOp=0x00000000
[00:16:35.863]    __Result=0x00000000
[00:16:35.863]  </debugvars>
[00:16:35.863]  
[00:16:35.863]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:35.863]    <block atomic="false" info="">
[00:16:35.863]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:35.864]        // -> [isSWJ <= 0x00000001]
[00:16:35.864]      __var hasDormant = __protocol & 0x00020000;
[00:16:35.864]        // -> [hasDormant <= 0x00000000]
[00:16:35.864]      __var protType   = __protocol & 0x0000FFFF;
[00:16:35.865]        // -> [protType <= 0x00000002]
[00:16:35.865]    </block>
[00:16:35.865]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:35.865]      // if-block "protType == 1"
[00:16:35.865]        // =>  FALSE
[00:16:35.865]      // skip if-block "protType == 1"
[00:16:35.865]    </control>
[00:16:35.865]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:35.865]      // if-block "protType == 2"
[00:16:35.865]        // =>  TRUE
[00:16:35.865]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:35.865]        // if-block "isSWJ"
[00:16:35.865]          // =>  TRUE
[00:16:35.865]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:35.865]          // if-block "hasDormant"
[00:16:35.865]            // =>  FALSE
[00:16:35.865]          // skip if-block "hasDormant"
[00:16:35.865]        </control>
[00:16:35.865]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:35.865]          // if-block "!hasDormant"
[00:16:35.865]            // =>  TRUE
[00:16:35.865]          <block atomic="false" info="">
[00:16:35.865]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:36.881]  
[00:16:36.881]  !!! E320 : DAP access error
[00:16:36.881]  
[00:16:36.881]          </block>
[00:16:36.881]          // end if-block "!hasDormant"
[00:16:36.881]        </control>
[00:16:36.881]        // end if-block "isSWJ"
[00:16:36.881]      </control>
[00:16:36.881]      // end if-block "protType == 2"
[00:16:36.881]    </control>
[00:16:36.881]  </sequence>
[00:16:36.881]  
[00:16:37.140]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:37.140]  
[00:16:37.148]  <debugvars>
[00:16:37.148]    // Pre-defined
[00:16:37.148]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:37.148]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:37.148]    __dp=0x00000000
[00:16:37.148]    __ap=0x00000000
[00:16:37.148]    __traceout=0x00000000      (Trace Disabled)
[00:16:37.148]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:37.148]    __FlashAddr=0x00000000
[00:16:37.148]    __FlashLen=0x00000000
[00:16:37.148]    __FlashArg=0x00000000
[00:16:37.148]    __FlashOp=0x00000000
[00:16:37.148]    __Result=0x00000000
[00:16:37.148]  </debugvars>
[00:16:37.148]  
[00:16:37.150]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:37.150]    <block atomic="false" info="">
[00:16:37.150]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:37.150]        // -> [isSWJ <= 0x00000001]
[00:16:37.150]      __var hasDormant = __protocol & 0x00020000;
[00:16:37.150]        // -> [hasDormant <= 0x00000000]
[00:16:37.150]      __var protType   = __protocol & 0x0000FFFF;
[00:16:37.150]        // -> [protType <= 0x00000002]
[00:16:37.150]    </block>
[00:16:37.150]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:37.150]      // if-block "protType == 1"
[00:16:37.150]        // =>  FALSE
[00:16:37.150]      // skip if-block "protType == 1"
[00:16:37.150]    </control>
[00:16:37.150]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:37.150]      // if-block "protType == 2"
[00:16:37.150]        // =>  TRUE
[00:16:37.150]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:37.150]        // if-block "isSWJ"
[00:16:37.150]          // =>  TRUE
[00:16:37.150]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:37.150]          // if-block "hasDormant"
[00:16:37.150]            // =>  FALSE
[00:16:37.150]          // skip if-block "hasDormant"
[00:16:37.150]        </control>
[00:16:37.150]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:37.150]          // if-block "!hasDormant"
[00:16:37.150]            // =>  TRUE
[00:16:37.150]          <block atomic="false" info="">
[00:16:37.150]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:38.165]  
[00:16:38.165]  !!! E320 : DAP access error
[00:16:38.165]  
[00:16:38.165]          </block>
[00:16:38.165]          // end if-block "!hasDormant"
[00:16:38.165]        </control>
[00:16:38.165]        // end if-block "isSWJ"
[00:16:38.165]      </control>
[00:16:38.165]      // end if-block "protType == 2"
[00:16:38.165]    </control>
[00:16:38.172]  </sequence>
[00:16:38.172]  
[00:16:38.423]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:38.423]  
[00:16:38.431]  <debugvars>
[00:16:38.431]    // Pre-defined
[00:16:38.431]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:38.431]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:38.431]    __dp=0x00000000
[00:16:38.431]    __ap=0x00000000
[00:16:38.431]    __traceout=0x00000000      (Trace Disabled)
[00:16:38.431]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:38.431]    __FlashAddr=0x00000000
[00:16:38.431]    __FlashLen=0x00000000
[00:16:38.431]    __FlashArg=0x00000000
[00:16:38.431]    __FlashOp=0x00000000
[00:16:38.431]    __Result=0x00000000
[00:16:38.433]  </debugvars>
[00:16:38.433]  
[00:16:38.433]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:38.433]    <block atomic="false" info="">
[00:16:38.433]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:38.433]        // -> [isSWJ <= 0x00000001]
[00:16:38.433]      __var hasDormant = __protocol & 0x00020000;
[00:16:38.433]        // -> [hasDormant <= 0x00000000]
[00:16:38.433]      __var protType   = __protocol & 0x0000FFFF;
[00:16:38.435]        // -> [protType <= 0x00000002]
[00:16:38.435]    </block>
[00:16:38.435]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:38.435]      // if-block "protType == 1"
[00:16:38.435]        // =>  FALSE
[00:16:38.435]      // skip if-block "protType == 1"
[00:16:38.435]    </control>
[00:16:38.435]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:38.436]      // if-block "protType == 2"
[00:16:38.436]        // =>  TRUE
[00:16:38.436]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:38.436]        // if-block "isSWJ"
[00:16:38.436]          // =>  TRUE
[00:16:38.436]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:38.436]          // if-block "hasDormant"
[00:16:38.436]            // =>  FALSE
[00:16:38.436]          // skip if-block "hasDormant"
[00:16:38.436]        </control>
[00:16:38.436]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:38.436]          // if-block "!hasDormant"
[00:16:38.436]            // =>  TRUE
[00:16:38.436]          <block atomic="false" info="">
[00:16:38.436]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:39.450]  
[00:16:39.450]  !!! E320 : DAP access error
[00:16:39.450]  
[00:16:39.461]          </block>
[00:16:39.461]          // end if-block "!hasDormant"
[00:16:39.463]        </control>
[00:16:39.463]        // end if-block "isSWJ"
[00:16:39.463]      </control>
[00:16:39.463]      // end if-block "protType == 2"
[00:16:39.463]    </control>
[00:16:39.463]  </sequence>
[00:16:39.463]  
[00:16:39.719]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:39.719]  
[00:16:39.728]  <debugvars>
[00:16:39.728]    // Pre-defined
[00:16:39.728]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:39.728]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:39.728]    __dp=0x00000000
[00:16:39.728]    __ap=0x00000000
[00:16:39.728]    __traceout=0x00000000      (Trace Disabled)
[00:16:39.728]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:39.729]    __FlashAddr=0x00000000
[00:16:39.729]    __FlashLen=0x00000000
[00:16:39.729]    __FlashArg=0x00000000
[00:16:39.729]    __FlashOp=0x00000000
[00:16:39.729]    __Result=0x00000000
[00:16:39.729]  </debugvars>
[00:16:39.729]  
[00:16:39.729]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:39.729]    <block atomic="false" info="">
[00:16:39.729]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:39.729]        // -> [isSWJ <= 0x00000001]
[00:16:39.729]      __var hasDormant = __protocol & 0x00020000;
[00:16:39.729]        // -> [hasDormant <= 0x00000000]
[00:16:39.729]      __var protType   = __protocol & 0x0000FFFF;
[00:16:39.729]        // -> [protType <= 0x00000002]
[00:16:39.729]    </block>
[00:16:39.731]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:39.731]      // if-block "protType == 1"
[00:16:39.731]        // =>  FALSE
[00:16:39.731]      // skip if-block "protType == 1"
[00:16:39.731]    </control>
[00:16:39.731]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:39.731]      // if-block "protType == 2"
[00:16:39.731]        // =>  TRUE
[00:16:39.731]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:39.731]        // if-block "isSWJ"
[00:16:39.731]          // =>  TRUE
[00:16:39.731]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:39.731]          // if-block "hasDormant"
[00:16:39.731]            // =>  FALSE
[00:16:39.731]          // skip if-block "hasDormant"
[00:16:39.731]        </control>
[00:16:39.731]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:39.731]          // if-block "!hasDormant"
[00:16:39.731]            // =>  TRUE
[00:16:39.731]          <block atomic="false" info="">
[00:16:39.731]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:40.755]  
[00:16:40.755]  !!! E320 : DAP access error
[00:16:40.755]  
[00:16:40.765]          </block>
[00:16:40.765]          // end if-block "!hasDormant"
[00:16:40.766]        </control>
[00:16:40.766]        // end if-block "isSWJ"
[00:16:40.766]      </control>
[00:16:40.766]      // end if-block "protType == 2"
[00:16:40.766]    </control>
[00:16:40.766]  </sequence>
[00:16:40.767]  
[00:16:41.019]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:41.019]  
[00:16:41.019]  <debugvars>
[00:16:41.019]    // Pre-defined
[00:16:41.019]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:41.020]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:41.020]    __dp=0x00000000
[00:16:41.020]    __ap=0x00000000
[00:16:41.020]    __traceout=0x00000000      (Trace Disabled)
[00:16:41.020]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:41.020]    __FlashAddr=0x00000000
[00:16:41.020]    __FlashLen=0x00000000
[00:16:41.020]    __FlashArg=0x00000000
[00:16:41.020]    __FlashOp=0x00000000
[00:16:41.020]    __Result=0x00000000
[00:16:41.020]  </debugvars>
[00:16:41.020]  
[00:16:41.020]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:41.020]    <block atomic="false" info="">
[00:16:41.020]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:41.020]        // -> [isSWJ <= 0x00000001]
[00:16:41.020]      __var hasDormant = __protocol & 0x00020000;
[00:16:41.020]        // -> [hasDormant <= 0x00000000]
[00:16:41.020]      __var protType   = __protocol & 0x0000FFFF;
[00:16:41.020]        // -> [protType <= 0x00000002]
[00:16:41.020]    </block>
[00:16:41.022]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:41.022]      // if-block "protType == 1"
[00:16:41.022]        // =>  FALSE
[00:16:41.022]      // skip if-block "protType == 1"
[00:16:41.022]    </control>
[00:16:41.022]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:41.022]      // if-block "protType == 2"
[00:16:41.022]        // =>  TRUE
[00:16:41.022]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:41.022]        // if-block "isSWJ"
[00:16:41.022]          // =>  TRUE
[00:16:41.022]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:41.023]          // if-block "hasDormant"
[00:16:41.023]            // =>  FALSE
[00:16:41.023]          // skip if-block "hasDormant"
[00:16:41.023]        </control>
[00:16:41.023]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:41.023]          // if-block "!hasDormant"
[00:16:41.023]            // =>  TRUE
[00:16:41.023]          <block atomic="false" info="">
[00:16:41.023]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:42.047]  
[00:16:42.047]  !!! E320 : DAP access error
[00:16:42.047]  
[00:16:42.057]          </block>
[00:16:42.057]          // end if-block "!hasDormant"
[00:16:42.057]        </control>
[00:16:42.057]        // end if-block "isSWJ"
[00:16:42.057]      </control>
[00:16:42.057]      // end if-block "protType == 2"
[00:16:42.057]    </control>
[00:16:42.057]  </sequence>
[00:16:42.057]  
[00:16:42.315]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:42.315]  
[00:16:42.315]  <debugvars>
[00:16:42.315]    // Pre-defined
[00:16:42.315]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:42.315]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:42.315]    __dp=0x00000000
[00:16:42.315]    __ap=0x00000000
[00:16:42.315]    __traceout=0x00000000      (Trace Disabled)
[00:16:42.315]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:42.315]    __FlashAddr=0x00000000
[00:16:42.317]    __FlashLen=0x00000000
[00:16:42.317]    __FlashArg=0x00000000
[00:16:42.317]    __FlashOp=0x00000000
[00:16:42.317]    __Result=0x00000000
[00:16:42.317]  </debugvars>
[00:16:42.317]  
[00:16:42.317]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:42.317]    <block atomic="false" info="">
[00:16:42.317]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:42.317]        // -> [isSWJ <= 0x00000001]
[00:16:42.317]      __var hasDormant = __protocol & 0x00020000;
[00:16:42.317]        // -> [hasDormant <= 0x00000000]
[00:16:42.317]      __var protType   = __protocol & 0x0000FFFF;
[00:16:42.317]        // -> [protType <= 0x00000002]
[00:16:42.317]    </block>
[00:16:42.317]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:42.317]      // if-block "protType == 1"
[00:16:42.317]        // =>  FALSE
[00:16:42.317]      // skip if-block "protType == 1"
[00:16:42.317]    </control>
[00:16:42.317]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:42.317]      // if-block "protType == 2"
[00:16:42.317]        // =>  TRUE
[00:16:42.317]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:42.317]        // if-block "isSWJ"
[00:16:42.317]          // =>  TRUE
[00:16:42.317]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:42.317]          // if-block "hasDormant"
[00:16:42.317]            // =>  FALSE
[00:16:42.317]          // skip if-block "hasDormant"
[00:16:42.317]        </control>
[00:16:42.317]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:42.317]          // if-block "!hasDormant"
[00:16:42.317]            // =>  TRUE
[00:16:42.317]          <block atomic="false" info="">
[00:16:42.317]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:43.333]  
[00:16:43.333]  !!! E320 : DAP access error
[00:16:43.333]  
[00:16:43.344]          </block>
[00:16:43.344]          // end if-block "!hasDormant"
[00:16:43.344]        </control>
[00:16:43.344]        // end if-block "isSWJ"
[00:16:43.344]      </control>
[00:16:43.344]      // end if-block "protType == 2"
[00:16:43.344]    </control>
[00:16:43.344]  </sequence>
[00:16:43.344]  
[00:16:43.602]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:43.602]  
[00:16:43.602]  <debugvars>
[00:16:43.602]    // Pre-defined
[00:16:43.602]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:43.602]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:43.602]    __dp=0x00000000
[00:16:43.602]    __ap=0x00000000
[00:16:43.602]    __traceout=0x00000000      (Trace Disabled)
[00:16:43.602]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:43.602]    __FlashAddr=0x00000000
[00:16:43.602]    __FlashLen=0x00000000
[00:16:43.602]    __FlashArg=0x00000000
[00:16:43.602]    __FlashOp=0x00000000
[00:16:43.602]    __Result=0x00000000
[00:16:43.602]  </debugvars>
[00:16:43.602]  
[00:16:43.602]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:43.605]    <block atomic="false" info="">
[00:16:43.605]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:43.605]        // -> [isSWJ <= 0x00000001]
[00:16:43.605]      __var hasDormant = __protocol & 0x00020000;
[00:16:43.605]        // -> [hasDormant <= 0x00000000]
[00:16:43.605]      __var protType   = __protocol & 0x0000FFFF;
[00:16:43.605]        // -> [protType <= 0x00000002]
[00:16:43.605]    </block>
[00:16:43.605]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:43.605]      // if-block "protType == 1"
[00:16:43.605]        // =>  FALSE
[00:16:43.605]      // skip if-block "protType == 1"
[00:16:43.605]    </control>
[00:16:43.605]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:43.605]      // if-block "protType == 2"
[00:16:43.605]        // =>  TRUE
[00:16:43.605]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:43.605]        // if-block "isSWJ"
[00:16:43.605]          // =>  TRUE
[00:16:43.605]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:43.605]          // if-block "hasDormant"
[00:16:43.605]            // =>  FALSE
[00:16:43.605]          // skip if-block "hasDormant"
[00:16:43.605]        </control>
[00:16:43.605]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:43.605]          // if-block "!hasDormant"
[00:16:43.605]            // =>  TRUE
[00:16:43.605]          <block atomic="false" info="">
[00:16:43.605]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:44.621]  
[00:16:44.621]  !!! E320 : DAP access error
[00:16:44.621]  
[00:16:44.633]          </block>
[00:16:44.633]          // end if-block "!hasDormant"
[00:16:44.633]        </control>
[00:16:44.633]        // end if-block "isSWJ"
[00:16:44.633]      </control>
[00:16:44.633]      // end if-block "protType == 2"
[00:16:44.633]    </control>
[00:16:44.633]  </sequence>
[00:16:44.633]  
[00:16:44.891]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:44.891]  
[00:16:44.900]  <debugvars>
[00:16:44.900]    // Pre-defined
[00:16:44.900]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:44.900]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:44.900]    __dp=0x00000000
[00:16:44.901]    __ap=0x00000000
[00:16:44.901]    __traceout=0x00000000      (Trace Disabled)
[00:16:44.901]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:44.901]    __FlashAddr=0x00000000
[00:16:44.901]    __FlashLen=0x00000000
[00:16:44.901]    __FlashArg=0x00000000
[00:16:44.901]    __FlashOp=0x00000000
[00:16:44.901]    __Result=0x00000000
[00:16:44.901]  </debugvars>
[00:16:44.901]  
[00:16:44.901]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:44.901]    <block atomic="false" info="">
[00:16:44.901]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:44.901]        // -> [isSWJ <= 0x00000001]
[00:16:44.901]      __var hasDormant = __protocol & 0x00020000;
[00:16:44.901]        // -> [hasDormant <= 0x00000000]
[00:16:44.901]      __var protType   = __protocol & 0x0000FFFF;
[00:16:44.901]        // -> [protType <= 0x00000002]
[00:16:44.901]    </block>
[00:16:44.901]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:44.901]      // if-block "protType == 1"
[00:16:44.901]        // =>  FALSE
[00:16:44.901]      // skip if-block "protType == 1"
[00:16:44.901]    </control>
[00:16:44.901]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:44.901]      // if-block "protType == 2"
[00:16:44.901]        // =>  TRUE
[00:16:44.901]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:44.901]        // if-block "isSWJ"
[00:16:44.901]          // =>  TRUE
[00:16:44.901]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:44.901]          // if-block "hasDormant"
[00:16:44.901]            // =>  FALSE
[00:16:44.901]          // skip if-block "hasDormant"
[00:16:44.901]        </control>
[00:16:44.901]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:44.901]          // if-block "!hasDormant"
[00:16:44.901]            // =>  TRUE
[00:16:44.901]          <block atomic="false" info="">
[00:16:44.901]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:45.916]  
[00:16:45.916]  !!! E320 : DAP access error
[00:16:45.916]  
[00:16:45.929]          </block>
[00:16:45.929]          // end if-block "!hasDormant"
[00:16:45.929]        </control>
[00:16:45.929]        // end if-block "isSWJ"
[00:16:45.929]      </control>
[00:16:45.929]      // end if-block "protType == 2"
[00:16:45.929]    </control>
[00:16:45.929]  </sequence>
[00:16:45.929]  
[00:16:46.187]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:46.187]  
[00:16:46.197]  <debugvars>
[00:16:46.197]    // Pre-defined
[00:16:46.197]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:46.197]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:46.197]    __dp=0x00000000
[00:16:46.197]    __ap=0x00000000
[00:16:46.198]    __traceout=0x00000000      (Trace Disabled)
[00:16:46.198]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:46.198]    __FlashAddr=0x00000000
[00:16:46.198]    __FlashLen=0x00000000
[00:16:46.198]    __FlashArg=0x00000000
[00:16:46.198]    __FlashOp=0x00000000
[00:16:46.198]    __Result=0x00000000
[00:16:46.198]  </debugvars>
[00:16:46.198]  
[00:16:46.198]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:46.198]    <block atomic="false" info="">
[00:16:46.198]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:46.198]        // -> [isSWJ <= 0x00000001]
[00:16:46.198]      __var hasDormant = __protocol & 0x00020000;
[00:16:46.198]        // -> [hasDormant <= 0x00000000]
[00:16:46.198]      __var protType   = __protocol & 0x0000FFFF;
[00:16:46.198]        // -> [protType <= 0x00000002]
[00:16:46.198]    </block>
[00:16:46.198]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:46.198]      // if-block "protType == 1"
[00:16:46.198]        // =>  FALSE
[00:16:46.198]      // skip if-block "protType == 1"
[00:16:46.200]    </control>
[00:16:46.200]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:46.200]      // if-block "protType == 2"
[00:16:46.200]        // =>  TRUE
[00:16:46.200]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:46.201]        // if-block "isSWJ"
[00:16:46.201]          // =>  TRUE
[00:16:46.201]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:46.201]          // if-block "hasDormant"
[00:16:46.201]            // =>  FALSE
[00:16:46.201]          // skip if-block "hasDormant"
[00:16:46.201]        </control>
[00:16:46.201]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:46.201]          // if-block "!hasDormant"
[00:16:46.201]            // =>  TRUE
[00:16:46.201]          <block atomic="false" info="">
[00:16:46.201]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:47.214]  
[00:16:47.214]  !!! E320 : DAP access error
[00:16:47.214]  
[00:16:47.230]          </block>
[00:16:47.230]          // end if-block "!hasDormant"
[00:16:47.230]        </control>
[00:16:47.230]        // end if-block "isSWJ"
[00:16:47.230]      </control>
[00:16:47.230]      // end if-block "protType == 2"
[00:16:47.230]    </control>
[00:16:47.230]  </sequence>
[00:16:47.230]  
[00:16:47.483]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:47.483]  
[00:16:47.491]  <debugvars>
[00:16:47.491]    // Pre-defined
[00:16:47.492]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:47.492]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:47.492]    __dp=0x00000000
[00:16:47.492]    __ap=0x00000000
[00:16:47.492]    __traceout=0x00000000      (Trace Disabled)
[00:16:47.492]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:47.492]    __FlashAddr=0x00000000
[00:16:47.492]    __FlashLen=0x00000000
[00:16:47.492]    __FlashArg=0x00000000
[00:16:47.493]    __FlashOp=0x00000000
[00:16:47.493]    __Result=0x00000000
[00:16:47.493]  </debugvars>
[00:16:47.493]  
[00:16:47.493]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:47.493]    <block atomic="false" info="">
[00:16:47.493]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:47.493]        // -> [isSWJ <= 0x00000001]
[00:16:47.493]      __var hasDormant = __protocol & 0x00020000;
[00:16:47.493]        // -> [hasDormant <= 0x00000000]
[00:16:47.493]      __var protType   = __protocol & 0x0000FFFF;
[00:16:47.493]        // -> [protType <= 0x00000002]
[00:16:47.493]    </block>
[00:16:47.493]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:47.493]      // if-block "protType == 1"
[00:16:47.493]        // =>  FALSE
[00:16:47.493]      // skip if-block "protType == 1"
[00:16:47.496]    </control>
[00:16:47.496]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:47.496]      // if-block "protType == 2"
[00:16:47.496]        // =>  TRUE
[00:16:47.496]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:47.496]        // if-block "isSWJ"
[00:16:47.496]          // =>  TRUE
[00:16:47.496]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:47.496]          // if-block "hasDormant"
[00:16:47.496]            // =>  FALSE
[00:16:47.496]          // skip if-block "hasDormant"
[00:16:47.496]        </control>
[00:16:47.496]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:47.496]          // if-block "!hasDormant"
[00:16:47.496]            // =>  TRUE
[00:16:47.496]          <block atomic="false" info="">
[00:16:47.496]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:48.509]  
[00:16:48.509]  !!! E320 : DAP access error
[00:16:48.509]  
[00:16:48.521]          </block>
[00:16:48.521]          // end if-block "!hasDormant"
[00:16:48.521]        </control>
[00:16:48.521]        // end if-block "isSWJ"
[00:16:48.521]      </control>
[00:16:48.521]      // end if-block "protType == 2"
[00:16:48.521]    </control>
[00:16:48.521]  </sequence>
[00:16:48.521]  
[00:16:48.774]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:48.774]  
[00:16:48.783]  <debugvars>
[00:16:48.783]    // Pre-defined
[00:16:48.783]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:48.783]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:48.783]    __dp=0x00000000
[00:16:48.784]    __ap=0x00000000
[00:16:48.784]    __traceout=0x00000000      (Trace Disabled)
[00:16:48.784]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:48.784]    __FlashAddr=0x00000000
[00:16:48.784]    __FlashLen=0x00000000
[00:16:48.784]    __FlashArg=0x00000000
[00:16:48.784]    __FlashOp=0x00000000
[00:16:48.784]    __Result=0x00000000
[00:16:48.784]  </debugvars>
[00:16:48.784]  
[00:16:48.784]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:48.784]    <block atomic="false" info="">
[00:16:48.784]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:48.784]        // -> [isSWJ <= 0x00000001]
[00:16:48.784]      __var hasDormant = __protocol & 0x00020000;
[00:16:48.784]        // -> [hasDormant <= 0x00000000]
[00:16:48.784]      __var protType   = __protocol & 0x0000FFFF;
[00:16:48.784]        // -> [protType <= 0x00000002]
[00:16:48.784]    </block>
[00:16:48.784]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:48.784]      // if-block "protType == 1"
[00:16:48.784]        // =>  FALSE
[00:16:48.784]      // skip if-block "protType == 1"
[00:16:48.784]    </control>
[00:16:48.784]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:48.784]      // if-block "protType == 2"
[00:16:48.784]        // =>  TRUE
[00:16:48.784]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:48.784]        // if-block "isSWJ"
[00:16:48.784]          // =>  TRUE
[00:16:48.784]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:48.784]          // if-block "hasDormant"
[00:16:48.784]            // =>  FALSE
[00:16:48.784]          // skip if-block "hasDormant"
[00:16:48.784]        </control>
[00:16:48.784]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:48.784]          // if-block "!hasDormant"
[00:16:48.784]            // =>  TRUE
[00:16:48.784]          <block atomic="false" info="">
[00:16:48.784]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:49.807]  
[00:16:49.807]  !!! E320 : DAP access error
[00:16:49.807]  
[00:16:49.817]          </block>
[00:16:49.817]          // end if-block "!hasDormant"
[00:16:49.817]        </control>
[00:16:49.817]        // end if-block "isSWJ"
[00:16:49.817]      </control>
[00:16:49.817]      // end if-block "protType == 2"
[00:16:49.817]    </control>
[00:16:49.818]  </sequence>
[00:16:49.818]  
[00:16:50.075]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:50.075]  
[00:16:50.083]  <debugvars>
[00:16:50.083]    // Pre-defined
[00:16:50.083]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:50.083]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:50.083]    __dp=0x00000000
[00:16:50.083]    __ap=0x00000000
[00:16:50.083]    __traceout=0x00000000      (Trace Disabled)
[00:16:50.083]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:50.083]    __FlashAddr=0x00000000
[00:16:50.083]    __FlashLen=0x00000000
[00:16:50.083]    __FlashArg=0x00000000
[00:16:50.083]    __FlashOp=0x00000000
[00:16:50.083]    __Result=0x00000000
[00:16:50.083]  </debugvars>
[00:16:50.085]  
[00:16:50.085]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:50.085]    <block atomic="false" info="">
[00:16:50.085]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:50.085]        // -> [isSWJ <= 0x00000001]
[00:16:50.085]      __var hasDormant = __protocol & 0x00020000;
[00:16:50.085]        // -> [hasDormant <= 0x00000000]
[00:16:50.085]      __var protType   = __protocol & 0x0000FFFF;
[00:16:50.085]        // -> [protType <= 0x00000002]
[00:16:50.085]    </block>
[00:16:50.085]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:50.085]      // if-block "protType == 1"
[00:16:50.085]        // =>  FALSE
[00:16:50.085]      // skip if-block "protType == 1"
[00:16:50.085]    </control>
[00:16:50.085]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:50.085]      // if-block "protType == 2"
[00:16:50.085]        // =>  TRUE
[00:16:50.085]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:50.085]        // if-block "isSWJ"
[00:16:50.085]          // =>  TRUE
[00:16:50.085]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:50.085]          // if-block "hasDormant"
[00:16:50.085]            // =>  FALSE
[00:16:50.085]          // skip if-block "hasDormant"
[00:16:50.085]        </control>
[00:16:50.085]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:50.085]          // if-block "!hasDormant"
[00:16:50.085]            // =>  TRUE
[00:16:50.085]          <block atomic="false" info="">
[00:16:50.085]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:51.104]  
[00:16:51.104]  !!! E320 : DAP access error
[00:16:51.104]  
[00:16:51.114]          </block>
[00:16:51.114]          // end if-block "!hasDormant"
[00:16:51.114]        </control>
[00:16:51.114]        // end if-block "isSWJ"
[00:16:51.114]      </control>
[00:16:51.115]      // end if-block "protType == 2"
[00:16:51.115]    </control>
[00:16:51.115]  </sequence>
[00:16:51.115]  
[00:16:51.371]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:51.371]  
[00:16:51.379]  <debugvars>
[00:16:51.379]    // Pre-defined
[00:16:51.379]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:51.379]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:51.379]    __dp=0x00000000
[00:16:51.379]    __ap=0x00000000
[00:16:51.379]    __traceout=0x00000000      (Trace Disabled)
[00:16:51.379]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:51.379]    __FlashAddr=0x00000000
[00:16:51.379]    __FlashLen=0x00000000
[00:16:51.379]    __FlashArg=0x00000000
[00:16:51.379]    __FlashOp=0x00000000
[00:16:51.379]    __Result=0x00000000
[00:16:51.379]  </debugvars>
[00:16:51.379]  
[00:16:51.379]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:51.381]    <block atomic="false" info="">
[00:16:51.381]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:51.381]        // -> [isSWJ <= 0x00000001]
[00:16:51.381]      __var hasDormant = __protocol & 0x00020000;
[00:16:51.381]        // -> [hasDormant <= 0x00000000]
[00:16:51.381]      __var protType   = __protocol & 0x0000FFFF;
[00:16:51.381]        // -> [protType <= 0x00000002]
[00:16:51.381]    </block>
[00:16:51.381]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:51.381]      // if-block "protType == 1"
[00:16:51.381]        // =>  FALSE
[00:16:51.381]      // skip if-block "protType == 1"
[00:16:51.381]    </control>
[00:16:51.381]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:51.381]      // if-block "protType == 2"
[00:16:51.381]        // =>  TRUE
[00:16:51.381]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:51.381]        // if-block "isSWJ"
[00:16:51.381]          // =>  TRUE
[00:16:51.381]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:51.381]          // if-block "hasDormant"
[00:16:51.381]            // =>  FALSE
[00:16:51.381]          // skip if-block "hasDormant"
[00:16:51.381]        </control>
[00:16:51.381]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:51.381]          // if-block "!hasDormant"
[00:16:51.381]            // =>  TRUE
[00:16:51.381]          <block atomic="false" info="">
[00:16:51.381]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:52.399]  
[00:16:52.399]  !!! E320 : DAP access error
[00:16:52.399]  
[00:16:52.408]          </block>
[00:16:52.408]          // end if-block "!hasDormant"
[00:16:52.408]        </control>
[00:16:52.409]        // end if-block "isSWJ"
[00:16:52.409]      </control>
[00:16:52.409]      // end if-block "protType == 2"
[00:16:52.409]    </control>
[00:16:52.409]  </sequence>
[00:16:52.409]  
[00:16:52.667]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:52.667]  
[00:16:52.677]  <debugvars>
[00:16:52.677]    // Pre-defined
[00:16:52.677]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:52.677]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:52.677]    __dp=0x00000000
[00:16:52.677]    __ap=0x00000000
[00:16:52.677]    __traceout=0x00000000      (Trace Disabled)
[00:16:52.677]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:52.677]    __FlashAddr=0x00000000
[00:16:52.677]    __FlashLen=0x00000000
[00:16:52.677]    __FlashArg=0x00000000
[00:16:52.679]    __FlashOp=0x00000000
[00:16:52.679]    __Result=0x00000000
[00:16:52.679]  </debugvars>
[00:16:52.679]  
[00:16:52.679]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:52.679]    <block atomic="false" info="">
[00:16:52.679]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:52.679]        // -> [isSWJ <= 0x00000001]
[00:16:52.679]      __var hasDormant = __protocol & 0x00020000;
[00:16:52.679]        // -> [hasDormant <= 0x00000000]
[00:16:52.679]      __var protType   = __protocol & 0x0000FFFF;
[00:16:52.679]        // -> [protType <= 0x00000002]
[00:16:52.679]    </block>
[00:16:52.679]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:52.679]      // if-block "protType == 1"
[00:16:52.679]        // =>  FALSE
[00:16:52.681]      // skip if-block "protType == 1"
[00:16:52.681]    </control>
[00:16:52.681]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:52.681]      // if-block "protType == 2"
[00:16:52.681]        // =>  TRUE
[00:16:52.681]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:52.681]        // if-block "isSWJ"
[00:16:52.681]          // =>  TRUE
[00:16:52.681]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:52.681]          // if-block "hasDormant"
[00:16:52.681]            // =>  FALSE
[00:16:52.681]          // skip if-block "hasDormant"
[00:16:52.682]        </control>
[00:16:52.682]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:52.682]          // if-block "!hasDormant"
[00:16:52.682]            // =>  TRUE
[00:16:52.682]          <block atomic="false" info="">
[00:16:52.682]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:53.703]  
[00:16:53.703]  !!! E320 : DAP access error
[00:16:53.703]  
[00:16:53.715]          </block>
[00:16:53.715]          // end if-block "!hasDormant"
[00:16:53.715]        </control>
[00:16:53.715]        // end if-block "isSWJ"
[00:16:53.715]      </control>
[00:16:53.715]      // end if-block "protType == 2"
[00:16:53.717]    </control>
[00:16:53.717]  </sequence>
[00:16:53.717]  
[00:16:53.968]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:53.968]  
[00:16:53.977]  <debugvars>
[00:16:53.977]    // Pre-defined
[00:16:53.977]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:53.977]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:53.977]    __dp=0x00000000
[00:16:53.977]    __ap=0x00000000
[00:16:53.977]    __traceout=0x00000000      (Trace Disabled)
[00:16:53.977]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:53.977]    __FlashAddr=0x00000000
[00:16:53.978]    __FlashLen=0x00000000
[00:16:53.978]    __FlashArg=0x00000000
[00:16:53.978]    __FlashOp=0x00000000
[00:16:53.978]    __Result=0x00000000
[00:16:53.978]  </debugvars>
[00:16:53.978]  
[00:16:53.978]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:53.978]    <block atomic="false" info="">
[00:16:53.978]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:53.978]        // -> [isSWJ <= 0x00000001]
[00:16:53.978]      __var hasDormant = __protocol & 0x00020000;
[00:16:53.978]        // -> [hasDormant <= 0x00000000]
[00:16:53.978]      __var protType   = __protocol & 0x0000FFFF;
[00:16:53.979]        // -> [protType <= 0x00000002]
[00:16:53.979]    </block>
[00:16:53.979]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:53.979]      // if-block "protType == 1"
[00:16:53.979]        // =>  FALSE
[00:16:53.979]      // skip if-block "protType == 1"
[00:16:53.979]    </control>
[00:16:53.979]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:53.979]      // if-block "protType == 2"
[00:16:53.979]        // =>  TRUE
[00:16:53.979]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:53.979]        // if-block "isSWJ"
[00:16:53.979]          // =>  TRUE
[00:16:53.979]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:53.979]          // if-block "hasDormant"
[00:16:53.979]            // =>  FALSE
[00:16:53.979]          // skip if-block "hasDormant"
[00:16:53.979]        </control>
[00:16:53.979]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:53.979]          // if-block "!hasDormant"
[00:16:53.979]            // =>  TRUE
[00:16:53.979]          <block atomic="false" info="">
[00:16:53.979]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:54.999]  
[00:16:54.999]  !!! E320 : DAP access error
[00:16:54.999]  
[00:16:55.008]          </block>
[00:16:55.008]          // end if-block "!hasDormant"
[00:16:55.008]        </control>
[00:16:55.008]        // end if-block "isSWJ"
[00:16:55.008]      </control>
[00:16:55.008]      // end if-block "protType == 2"
[00:16:55.008]    </control>
[00:16:55.008]  </sequence>
[00:16:55.008]  
[00:16:55.260]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:55.260]  
[00:16:55.269]  <debugvars>
[00:16:55.269]    // Pre-defined
[00:16:55.269]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:55.269]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:55.269]    __dp=0x00000000
[00:16:55.269]    __ap=0x00000000
[00:16:55.269]    __traceout=0x00000000      (Trace Disabled)
[00:16:55.269]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:55.269]    __FlashAddr=0x00000000
[00:16:55.271]    __FlashLen=0x00000000
[00:16:55.271]    __FlashArg=0x00000000
[00:16:55.271]    __FlashOp=0x00000000
[00:16:55.271]    __Result=0x00000000
[00:16:55.271]  </debugvars>
[00:16:55.271]  
[00:16:55.271]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:55.271]    <block atomic="false" info="">
[00:16:55.271]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:55.271]        // -> [isSWJ <= 0x00000001]
[00:16:55.271]      __var hasDormant = __protocol & 0x00020000;
[00:16:55.271]        // -> [hasDormant <= 0x00000000]
[00:16:55.271]      __var protType   = __protocol & 0x0000FFFF;
[00:16:55.271]        // -> [protType <= 0x00000002]
[00:16:55.271]    </block>
[00:16:55.271]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:55.271]      // if-block "protType == 1"
[00:16:55.271]        // =>  FALSE
[00:16:55.271]      // skip if-block "protType == 1"
[00:16:55.271]    </control>
[00:16:55.271]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:55.271]      // if-block "protType == 2"
[00:16:55.271]        // =>  TRUE
[00:16:55.271]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:55.271]        // if-block "isSWJ"
[00:16:55.271]          // =>  TRUE
[00:16:55.271]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:55.271]          // if-block "hasDormant"
[00:16:55.271]            // =>  FALSE
[00:16:55.271]          // skip if-block "hasDormant"
[00:16:55.271]        </control>
[00:16:55.271]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:55.271]          // if-block "!hasDormant"
[00:16:55.271]            // =>  TRUE
[00:16:55.271]          <block atomic="false" info="">
[00:16:55.271]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:56.289]  
[00:16:56.289]  !!! E320 : DAP access error
[00:16:56.289]  
[00:16:56.302]          </block>
[00:16:56.302]          // end if-block "!hasDormant"
[00:16:56.302]        </control>
[00:16:56.302]        // end if-block "isSWJ"
[00:16:56.302]      </control>
[00:16:56.302]      // end if-block "protType == 2"
[00:16:56.302]    </control>
[00:16:56.302]  </sequence>
[00:16:56.302]  
[00:16:56.555]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:56.555]  
[00:16:56.563]  <debugvars>
[00:16:56.563]    // Pre-defined
[00:16:56.563]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:56.563]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:56.563]    __dp=0x00000000
[00:16:56.563]    __ap=0x00000000
[00:16:56.564]    __traceout=0x00000000      (Trace Disabled)
[00:16:56.564]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:56.564]    __FlashAddr=0x00000000
[00:16:56.564]    __FlashLen=0x00000000
[00:16:56.564]    __FlashArg=0x00000000
[00:16:56.564]    __FlashOp=0x00000000
[00:16:56.564]    __Result=0x00000000
[00:16:56.564]  </debugvars>
[00:16:56.564]  
[00:16:56.564]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:56.564]    <block atomic="false" info="">
[00:16:56.564]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:56.564]        // -> [isSWJ <= 0x00000001]
[00:16:56.564]      __var hasDormant = __protocol & 0x00020000;
[00:16:56.564]        // -> [hasDormant <= 0x00000000]
[00:16:56.564]      __var protType   = __protocol & 0x0000FFFF;
[00:16:56.564]        // -> [protType <= 0x00000002]
[00:16:56.564]    </block>
[00:16:56.564]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:56.564]      // if-block "protType == 1"
[00:16:56.564]        // =>  FALSE
[00:16:56.564]      // skip if-block "protType == 1"
[00:16:56.564]    </control>
[00:16:56.564]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:56.564]      // if-block "protType == 2"
[00:16:56.564]        // =>  TRUE
[00:16:56.564]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:56.564]        // if-block "isSWJ"
[00:16:56.564]          // =>  TRUE
[00:16:56.564]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:56.564]          // if-block "hasDormant"
[00:16:56.564]            // =>  FALSE
[00:16:56.564]          // skip if-block "hasDormant"
[00:16:56.564]        </control>
[00:16:56.564]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:56.564]          // if-block "!hasDormant"
[00:16:56.564]            // =>  TRUE
[00:16:56.564]          <block atomic="false" info="">
[00:16:56.564]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:57.580]  
[00:16:57.580]  !!! E320 : DAP access error
[00:16:57.580]  
[00:16:57.591]          </block>
[00:16:57.591]          // end if-block "!hasDormant"
[00:16:57.591]        </control>
[00:16:57.591]        // end if-block "isSWJ"
[00:16:57.591]      </control>
[00:16:57.591]      // end if-block "protType == 2"
[00:16:57.591]    </control>
[00:16:57.591]  </sequence>
[00:16:57.592]  
[00:16:57.850]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:57.850]  
[00:16:57.859]  <debugvars>
[00:16:57.859]    // Pre-defined
[00:16:57.859]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:57.859]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:57.859]    __dp=0x00000000
[00:16:57.859]    __ap=0x00000000
[00:16:57.859]    __traceout=0x00000000      (Trace Disabled)
[00:16:57.859]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:57.859]    __FlashAddr=0x00000000
[00:16:57.859]    __FlashLen=0x00000000
[00:16:57.859]    __FlashArg=0x00000000
[00:16:57.859]    __FlashOp=0x00000000
[00:16:57.859]    __Result=0x00000000
[00:16:57.859]  </debugvars>
[00:16:57.859]  
[00:16:57.861]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:57.861]    <block atomic="false" info="">
[00:16:57.861]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:57.861]        // -> [isSWJ <= 0x00000001]
[00:16:57.861]      __var hasDormant = __protocol & 0x00020000;
[00:16:57.861]        // -> [hasDormant <= 0x00000000]
[00:16:57.861]      __var protType   = __protocol & 0x0000FFFF;
[00:16:57.861]        // -> [protType <= 0x00000002]
[00:16:57.861]    </block>
[00:16:57.861]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:57.861]      // if-block "protType == 1"
[00:16:57.861]        // =>  FALSE
[00:16:57.861]      // skip if-block "protType == 1"
[00:16:57.861]    </control>
[00:16:57.861]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:57.861]      // if-block "protType == 2"
[00:16:57.861]        // =>  TRUE
[00:16:57.861]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:57.861]        // if-block "isSWJ"
[00:16:57.861]          // =>  TRUE
[00:16:57.861]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:57.861]          // if-block "hasDormant"
[00:16:57.861]            // =>  FALSE
[00:16:57.861]          // skip if-block "hasDormant"
[00:16:57.861]        </control>
[00:16:57.861]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:57.861]          // if-block "!hasDormant"
[00:16:57.861]            // =>  TRUE
[00:16:57.861]          <block atomic="false" info="">
[00:16:57.861]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:58.874]  
[00:16:58.874]  !!! E320 : DAP access error
[00:16:58.874]  
[00:16:58.889]          </block>
[00:16:58.889]          // end if-block "!hasDormant"
[00:16:58.889]        </control>
[00:16:58.889]        // end if-block "isSWJ"
[00:16:58.889]      </control>
[00:16:58.891]      // end if-block "protType == 2"
[00:16:58.891]    </control>
[00:16:58.891]  </sequence>
[00:16:58.891]  
[00:16:59.148]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:16:59.148]  
[00:16:59.156]  <debugvars>
[00:16:59.156]    // Pre-defined
[00:16:59.156]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:59.156]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:59.156]    __dp=0x00000000
[00:16:59.156]    __ap=0x00000000
[00:16:59.156]    __traceout=0x00000000      (Trace Disabled)
[00:16:59.156]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:59.156]    __FlashAddr=0x00000000
[00:16:59.156]    __FlashLen=0x00000000
[00:16:59.156]    __FlashArg=0x00000000
[00:16:59.156]    __FlashOp=0x00000000
[00:16:59.156]    __Result=0x00000000
[00:16:59.156]  </debugvars>
[00:16:59.156]  
[00:16:59.156]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:59.156]    <block atomic="false" info="">
[00:16:59.156]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:59.156]        // -> [isSWJ <= 0x00000001]
[00:16:59.156]      __var hasDormant = __protocol & 0x00020000;
[00:16:59.156]        // -> [hasDormant <= 0x00000000]
[00:16:59.156]      __var protType   = __protocol & 0x0000FFFF;
[00:16:59.156]        // -> [protType <= 0x00000002]
[00:16:59.156]    </block>
[00:16:59.158]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:59.158]      // if-block "protType == 1"
[00:16:59.158]        // =>  FALSE
[00:16:59.158]      // skip if-block "protType == 1"
[00:16:59.158]    </control>
[00:16:59.158]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:59.158]      // if-block "protType == 2"
[00:16:59.158]        // =>  TRUE
[00:16:59.158]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:59.158]        // if-block "isSWJ"
[00:16:59.158]          // =>  TRUE
[00:16:59.158]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:59.158]          // if-block "hasDormant"
[00:16:59.158]            // =>  FALSE
[00:16:59.158]          // skip if-block "hasDormant"
[00:16:59.158]        </control>
[00:16:59.158]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:59.158]          // if-block "!hasDormant"
[00:16:59.158]            // =>  TRUE
[00:16:59.158]          <block atomic="false" info="">
[00:16:59.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:17:00.172]  
[00:17:00.172]  !!! E320 : DAP access error
[00:17:00.172]  
[00:17:00.188]          </block>
[00:17:00.188]          // end if-block "!hasDormant"
[00:17:00.188]        </control>
[00:17:00.188]        // end if-block "isSWJ"
[00:17:00.188]      </control>
[00:17:00.188]      // end if-block "protType == 2"
[00:17:00.188]    </control>
[00:17:00.188]  </sequence>
[00:17:00.188]  
[00:17:00.447]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[00:17:00.447]  
[00:17:00.456]  <debugvars>
[00:17:00.456]    // Pre-defined
[00:17:00.456]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:17:00.456]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:17:00.456]    __dp=0x00000000
[00:17:00.456]    __ap=0x00000000
[00:17:00.456]    __traceout=0x00000000      (Trace Disabled)
[00:17:00.456]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:17:00.457]    __FlashAddr=0x00000000
[00:17:00.457]    __FlashLen=0x00000000
[00:17:00.457]    __FlashArg=0x00000000
[00:17:00.457]    __FlashOp=0x00000000
[00:17:00.457]    __Result=0x00000000
[00:17:00.457]  </debugvars>
[00:17:00.457]  
[00:17:00.457]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:17:00.457]    <block atomic="false" info="">
[00:17:00.457]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:17:00.457]        // -> [isSWJ <= 0x00000001]
[00:17:00.457]      __var hasDormant = __protocol & 0x00020000;
[00:17:00.457]        // -> [hasDormant <= 0x00000000]
[00:17:00.459]      __var protType   = __protocol & 0x0000FFFF;
[00:17:00.459]        // -> [protType <= 0x00000002]
[00:17:00.459]    </block>
[00:17:00.459]    <control if="protType == 1" while="" timeout="0" info="">
[00:17:00.459]      // if-block "protType == 1"
[00:17:00.459]        // =>  FALSE
[00:17:00.459]      // skip if-block "protType == 1"
[00:17:00.460]    </control>
[00:17:00.460]    <control if="protType == 2" while="" timeout="0" info="">
[00:17:00.460]      // if-block "protType == 2"
[00:17:00.460]        // =>  TRUE
[00:17:00.460]      <control if="isSWJ" while="" timeout="0" info="">
[00:17:00.460]        // if-block "isSWJ"
[00:17:00.460]          // =>  TRUE
[00:17:00.460]        <control if="hasDormant" while="" timeout="0" info="">
[00:17:00.460]          // if-block "hasDormant"
[00:17:00.460]            // =>  FALSE
[00:17:00.460]          // skip if-block "hasDormant"
[00:17:00.460]        </control>
[00:17:00.460]        <control if="!hasDormant" while="" timeout="0" info="">
[00:17:00.460]          // if-block "!hasDormant"
[00:17:00.460]            // =>  TRUE
[00:17:00.460]          <block atomic="false" info="">
[00:17:00.460]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:17:01.481]  
[00:17:01.481]  !!! E320 : DAP access error
[00:17:01.481]  
[00:17:01.481]          </block>
[00:17:01.481]          // end if-block "!hasDormant"
[00:17:01.481]        </control>
[00:17:01.481]        // end if-block "isSWJ"
[00:17:01.481]      </control>
[00:17:01.481]      // end if-block "protType == 2"
[00:17:01.481]    </control>
[00:17:01.481]  </sequence>
[00:17:01.481]  
