/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025-EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0015.log
 *  Created     : 01:51:39 (01/08/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[01:51:39.726]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:51:39.726]  
[01:51:39.726]  <debugvars>
[01:51:39.726]    // Pre-defined
[01:51:39.726]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:51:39.726]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:51:39.726]    __dp=0x00000000
[01:51:39.726]    __ap=0x00000000
[01:51:39.726]    __traceout=0x00000000      (Trace Disabled)
[01:51:39.726]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:51:39.726]    __FlashAddr=0x00000000
[01:51:39.726]    __FlashLen=0x00000000
[01:51:39.726]    __FlashArg=0x00000000
[01:51:39.726]    __FlashOp=0x00000000
[01:51:39.726]    __Result=0x00000000
[01:51:39.726]  </debugvars>
[01:51:39.726]  
[01:51:39.726]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:51:39.726]    <block atomic="false" info="">
[01:51:39.726]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:51:39.726]        // -> [isSWJ <= 0x00000001]
[01:51:39.726]      __var hasDormant = __protocol & 0x00020000;
[01:51:39.726]        // -> [hasDormant <= 0x00000000]
[01:51:39.726]      __var protType   = __protocol & 0x0000FFFF;
[01:51:39.726]        // -> [protType <= 0x00000002]
[01:51:39.726]    </block>
[01:51:39.726]    <control if="protType == 1" while="" timeout="0" info="">
[01:51:39.726]      // if-block "protType == 1"
[01:51:39.726]        // =>  FALSE
[01:51:39.726]      // skip if-block "protType == 1"
[01:51:39.726]    </control>
[01:51:39.726]    <control if="protType == 2" while="" timeout="0" info="">
[01:51:39.726]      // if-block "protType == 2"
[01:51:39.726]        // =>  TRUE
[01:51:39.726]      <control if="isSWJ" while="" timeout="0" info="">
[01:51:39.726]        // if-block "isSWJ"
[01:51:39.726]          // =>  TRUE
[01:51:39.726]        <control if="hasDormant" while="" timeout="0" info="">
[01:51:39.726]          // if-block "hasDormant"
[01:51:39.726]            // =>  FALSE
[01:51:39.726]          // skip if-block "hasDormant"
[01:51:39.726]        </control>
[01:51:39.726]        <control if="!hasDormant" while="" timeout="0" info="">
[01:51:39.726]          // if-block "!hasDormant"
[01:51:39.726]            // =>  TRUE
[01:51:39.726]          <block atomic="false" info="">
[01:51:39.726]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:51:39.732]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:51:39.732]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:51:39.732]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:51:39.732]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:51:39.736]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:51:39.736]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:51:39.736]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:51:39.736]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:51:39.743]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:51:39.743]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:51:39.743]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:51:39.743]          </block>
[01:51:39.743]          // end if-block "!hasDormant"
[01:51:39.743]        </control>
[01:51:39.743]        // end if-block "isSWJ"
[01:51:39.743]      </control>
[01:51:39.743]      <control if="!isSWJ" while="" timeout="0" info="">
[01:51:39.743]        // if-block "!isSWJ"
[01:51:39.743]          // =>  FALSE
[01:51:39.743]        // skip if-block "!isSWJ"
[01:51:39.743]      </control>
[01:51:39.746]      <block atomic="false" info="">
[01:51:39.746]        ReadDP(0x0);
[01:51:39.753]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:51:39.753]      </block>
[01:51:39.753]      // end if-block "protType == 2"
[01:51:39.753]    </control>
[01:51:39.753]  </sequence>
[01:51:39.753]  
[01:51:39.756]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:51:39.756]  
[01:51:39.756]  <debugvars>
[01:51:39.756]    // Pre-defined
[01:51:39.756]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:51:39.756]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:51:39.756]    __dp=0x00000000
[01:51:39.756]    __ap=0x00000000
[01:51:39.756]    __traceout=0x00000000      (Trace Disabled)
[01:51:39.756]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:51:39.756]    __FlashAddr=0x00000000
[01:51:39.756]    __FlashLen=0x00000000
[01:51:39.756]    __FlashArg=0x00000000
[01:51:39.756]    __FlashOp=0x00000000
[01:51:39.756]    __Result=0x00000000
[01:51:39.756]  </debugvars>
[01:51:39.756]  
[01:51:39.756]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:51:39.756]    <block atomic="false" info="">
[01:51:39.756]      __var SW_DP_ABORT       = 0x0;
[01:51:39.756]        // -> [SW_DP_ABORT <= 0x00000000]
[01:51:39.756]      __var DP_CTRL_STAT      = 0x4;
[01:51:39.756]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:51:39.756]      __var DP_SELECT         = 0x8;
[01:51:39.756]        // -> [DP_SELECT <= 0x00000008]
[01:51:39.756]      __var powered_down      = 0;
[01:51:39.756]        // -> [powered_down <= 0x00000000]
[01:51:39.756]      WriteDP(DP_SELECT, 0x00000000);
[01:51:39.763]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:51:39.763]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:51:39.763]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:51:39.763]        // -> [powered_down <= 0x00000001]
[01:51:39.766]    </block>
[01:51:39.766]    <control if="powered_down" while="" timeout="0" info="">
[01:51:39.766]      // if-block "powered_down"
[01:51:39.766]        // =>  TRUE
[01:51:39.766]      <block atomic="false" info="">
[01:51:39.766]        Message(0, "Debug/System power-up request sent");
[01:51:39.766]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:51:39.766]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:51:39.766]      </block>
[01:51:39.766]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:51:39.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:51:39.766]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:51:39.766]        // while-condition  =>  FALSE
[01:51:39.766]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:51:39.766]      </control>
[01:51:39.766]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:51:39.766]        // if-block "(__protocol & 0xFFFF) == 1"
[01:51:39.766]          // =>  FALSE
[01:51:39.766]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:51:39.766]      </control>
[01:51:39.766]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:51:39.773]        // if-block "(__protocol & 0xFFFF) == 2"
[01:51:39.773]          // =>  TRUE
[01:51:39.773]        <block atomic="false" info="">
[01:51:39.773]          Message(0, "executing SWD power up");
[01:51:39.773]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:51:39.776]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:51:39.776]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:51:39.776]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:51:39.776]        </block>
[01:51:39.776]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:51:39.776]      </control>
[01:51:39.776]      // end if-block "powered_down"
[01:51:39.776]    </control>
[01:51:39.776]    <block atomic="false" info="">
[01:51:39.776]      __var DEBUG_PORT_VAL    = 0;
[01:51:39.776]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:51:39.776]      __var ACCESS_POINT_VAL  = 0;
[01:51:39.776]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:51:39.776]      __ap = 1; 
[01:51:39.776]        // -> [__ap <= 0x00000001]
[01:51:39.776]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:51:39.786]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:51:39.787]      __ap = 4;
[01:51:39.787]        // -> [__ap <= 0x00000004]
[01:51:39.787]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:51:39.787]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:51:39.787]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:51:39.787]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:51:39.787]    </block>
[01:51:39.787]    <block atomic="false" info="">
[01:51:39.793]      __var nReset = 0x80;
[01:51:39.793]        // -> [nReset <= 0x00000080]
[01:51:39.793]      __var canReadPins = 0;
[01:51:39.793]        // -> [canReadPins <= 0x00000000]
[01:51:39.793]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:51:39.793]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:51:39.793]        // -> [canReadPins <= 0x00000001]
[01:51:39.793]    </block>
[01:51:39.793]    <control if="" while="1" timeout="200" info="">
[01:51:39.793]      // while "1"  (timeout="200")
[01:51:39.793]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.796]      // while-condition  =>  TRUE
[01:51:39.796]      // while "1"  (timeout="200")
[01:51:39.803]      // while-condition  =>  TRUE
[01:51:39.803]      // while "1"  (timeout="200")
[01:51:39.803]      // while  =>  TIMEOUT
[01:51:39.803]      // end while "1"
[01:51:39.803]    </control>
[01:51:39.803]    <control if="canReadPins" while="" timeout="0" info="">
[01:51:39.803]      // if-block "canReadPins"
[01:51:39.803]        // =>  TRUE
[01:51:39.803]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:51:39.803]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:51:39.806]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:51:39.806]        // while-condition  =>  FALSE
[01:51:39.806]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:51:39.806]      </control>
[01:51:39.806]      // end if-block "canReadPins"
[01:51:39.806]    </control>
[01:51:39.806]    <control if="!canReadPins" while="" timeout="0" info="">
[01:51:39.806]      // if-block "!canReadPins"
[01:51:39.806]        // =>  FALSE
[01:51:39.806]      // skip if-block "!canReadPins"
[01:51:39.806]    </control>
[01:51:39.806]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:51:39.806]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:51:39.806]        // =>  TRUE
[01:51:39.806]      <block atomic="false" info="">
[01:51:39.806]        WriteAP(0x00, 0x190008);
[01:51:39.806]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:51:39.806]        WriteAP(0xF0, 0x01);
[01:51:39.813]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:51:39.813]      </block>
[01:51:39.813]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:51:39.813]    </control>
[01:51:39.813]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:51:39.813]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:51:39.813]        // =>  FALSE
[01:51:39.816]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:51:39.816]    </control>
[01:51:39.816]    <block atomic="false" info="">
[01:51:39.816]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:51:39.823]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:51:39.823]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:51:39.823]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:51:39.826]      __ap = 0; //lets make sure we reset the access point selection
[01:51:39.826]        // -> [__ap <= 0x00000000]
[01:51:39.826]    </block>
[01:51:39.826]  </sequence>
[01:51:39.826]  
[01:51:39.847]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:51:39.847]  
[01:51:39.847]  <debugvars>
[01:51:39.847]    // Pre-defined
[01:51:39.847]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:51:39.847]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:51:39.847]    __dp=0x00000000
[01:51:39.847]    __ap=0x00000000
[01:51:39.847]    __traceout=0x00000000      (Trace Disabled)
[01:51:39.847]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:51:39.847]    __FlashAddr=0x00000000
[01:51:39.847]    __FlashLen=0x00000000
[01:51:39.847]    __FlashArg=0x00000000
[01:51:39.847]    __FlashOp=0x00000000
[01:51:39.847]    __Result=0x00000000
[01:51:39.847]  </debugvars>
[01:51:39.847]  
[01:51:39.847]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:51:39.847]    <block atomic="false" info="">
[01:51:39.847]      __var deviceID = 0;
[01:51:39.847]        // -> [deviceID <= 0x00000000]
[01:51:39.853]      __var version = 0;
[01:51:39.853]        // -> [version <= 0x00000000]
[01:51:39.853]      __var partNum = 0;
[01:51:39.853]        // -> [partNum <= 0x00000000]
[01:51:39.853]      __var manuf = 0;
[01:51:39.853]        // -> [manuf <= 0x00000000]
[01:51:39.853]      __var isMSPM0G1X0X_G3X0X = 0;
[01:51:39.853]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:51:39.853]      __var isProduction = 0;
[01:51:39.853]        // -> [isProduction <= 0x00000000]
[01:51:39.853]      __var continueId = 0;
[01:51:39.853]        // -> [continueId <= 0x00000000]
[01:51:39.853]      deviceID =   Read32(0x41C40004);
[01:51:39.863]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:51:39.863]        // -> [deviceID <= 0x2BB8802F]
[01:51:39.863]      version = deviceID >> 28;
[01:51:39.863]        // -> [version <= 0x00000002]
[01:51:39.863]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:51:39.863]        // -> [partNum <= 0x0000BB88]
[01:51:39.863]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:51:39.863]        // -> [manuf <= 0x00000017]
[01:51:39.863]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:51:39.863]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:51:39.863]      isProduction = (version > 0);
[01:51:39.863]        // -> [isProduction <= 0x00000001]
[01:51:39.867]    </block>
[01:51:39.867]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:51:39.867]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:51:39.867]        // =>  FALSE
[01:51:39.867]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:51:39.867]    </control>
[01:51:39.867]    <control if="continueId == 4" while="" timeout="0" info="">
[01:51:39.867]      // if-block "continueId == 4"
[01:51:39.867]        // =>  FALSE
[01:51:39.867]      // skip if-block "continueId == 4"
[01:51:39.867]    </control>
[01:51:39.867]    <control if="!isProduction" while="" timeout="0" info="">
[01:51:39.867]      // if-block "!isProduction"
[01:51:39.867]        // =>  FALSE
[01:51:39.867]      // skip if-block "!isProduction"
[01:51:39.867]    </control>
[01:51:39.867]  </sequence>
[01:51:39.867]  
[01:52:41.736]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:52:41.736]  
[01:52:41.745]  <debugvars>
[01:52:41.745]    // Pre-defined
[01:52:41.745]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:52:41.745]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:52:41.745]    __dp=0x00000000
[01:52:41.746]    __ap=0x00000000
[01:52:41.746]    __traceout=0x00000000      (Trace Disabled)
[01:52:41.746]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:52:41.746]    __FlashAddr=0x00000000
[01:52:41.746]    __FlashLen=0x00000000
[01:52:41.746]    __FlashArg=0x00000000
[01:52:41.746]    __FlashOp=0x00000000
[01:52:41.746]    __Result=0x00000000
[01:52:41.746]  </debugvars>
[01:52:41.746]  
[01:52:41.746]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:52:41.746]    <block atomic="false" info="">
[01:52:41.747]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:52:41.747]        // -> [isSWJ <= 0x00000001]
[01:52:41.747]      __var hasDormant = __protocol & 0x00020000;
[01:52:41.747]        // -> [hasDormant <= 0x00000000]
[01:52:41.747]      __var protType   = __protocol & 0x0000FFFF;
[01:52:41.747]        // -> [protType <= 0x00000002]
[01:52:41.747]    </block>
[01:52:41.747]    <control if="protType == 1" while="" timeout="0" info="">
[01:52:41.747]      // if-block "protType == 1"
[01:52:41.747]        // =>  FALSE
[01:52:41.747]      // skip if-block "protType == 1"
[01:52:41.749]    </control>
[01:52:41.749]    <control if="protType == 2" while="" timeout="0" info="">
[01:52:41.749]      // if-block "protType == 2"
[01:52:41.749]        // =>  TRUE
[01:52:41.749]      <control if="isSWJ" while="" timeout="0" info="">
[01:52:41.749]        // if-block "isSWJ"
[01:52:41.749]          // =>  TRUE
[01:52:41.749]        <control if="hasDormant" while="" timeout="0" info="">
[01:52:41.750]          // if-block "hasDormant"
[01:52:41.750]            // =>  FALSE
[01:52:41.750]          // skip if-block "hasDormant"
[01:52:41.750]        </control>
[01:52:41.750]        <control if="!hasDormant" while="" timeout="0" info="">
[01:52:41.750]          // if-block "!hasDormant"
[01:52:41.750]            // =>  TRUE
[01:52:41.750]          <block atomic="false" info="">
[01:52:41.750]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:52:41.752]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:52:41.756]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:52:41.760]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:52:41.760]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:52:41.762]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:52:41.762]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:52:41.767]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:52:41.767]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:52:41.772]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:52:41.772]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:52:41.776]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:52:41.776]          </block>
[01:52:41.776]          // end if-block "!hasDormant"
[01:52:41.776]        </control>
[01:52:41.776]        // end if-block "isSWJ"
[01:52:41.777]      </control>
[01:52:41.777]      <control if="!isSWJ" while="" timeout="0" info="">
[01:52:41.777]        // if-block "!isSWJ"
[01:52:41.777]          // =>  FALSE
[01:52:41.777]        // skip if-block "!isSWJ"
[01:52:41.777]      </control>
[01:52:41.777]      <block atomic="false" info="">
[01:52:41.777]        ReadDP(0x0);
[01:52:41.780]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:52:41.780]      </block>
[01:52:41.780]      // end if-block "protType == 2"
[01:52:41.780]    </control>
[01:52:41.780]  </sequence>
[01:52:41.780]  
[01:52:41.785]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:52:41.785]  
[01:52:41.785]  <debugvars>
[01:52:41.785]    // Pre-defined
[01:52:41.785]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:52:41.786]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:52:41.786]    __dp=0x00000000
[01:52:41.786]    __ap=0x00000000
[01:52:41.786]    __traceout=0x00000000      (Trace Disabled)
[01:52:41.786]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:52:41.786]    __FlashAddr=0x00000000
[01:52:41.786]    __FlashLen=0x00000000
[01:52:41.786]    __FlashArg=0x00000000
[01:52:41.786]    __FlashOp=0x00000000
[01:52:41.786]    __Result=0x00000000
[01:52:41.786]  </debugvars>
[01:52:41.786]  
[01:52:41.786]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:52:41.788]    <block atomic="false" info="">
[01:52:41.788]      __var SW_DP_ABORT       = 0x0;
[01:52:41.788]        // -> [SW_DP_ABORT <= 0x00000000]
[01:52:41.788]      __var DP_CTRL_STAT      = 0x4;
[01:52:41.788]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:52:41.788]      __var DP_SELECT         = 0x8;
[01:52:41.788]        // -> [DP_SELECT <= 0x00000008]
[01:52:41.788]      __var powered_down      = 0;
[01:52:41.788]        // -> [powered_down <= 0x00000000]
[01:52:41.788]      WriteDP(DP_SELECT, 0x00000000);
[01:52:41.793]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:52:41.793]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:52:41.794]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:52:41.794]        // -> [powered_down <= 0x00000001]
[01:52:41.794]    </block>
[01:52:41.794]    <control if="powered_down" while="" timeout="0" info="">
[01:52:41.794]      // if-block "powered_down"
[01:52:41.794]        // =>  TRUE
[01:52:41.794]      <block atomic="false" info="">
[01:52:41.794]        Message(0, "Debug/System power-up request sent");
[01:52:41.796]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:52:41.803]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:52:41.803]      </block>
[01:52:41.803]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:52:41.803]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:52:41.807]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:52:41.808]        // while-condition  =>  FALSE
[01:52:41.808]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:52:41.808]      </control>
[01:52:41.808]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:52:41.808]        // if-block "(__protocol & 0xFFFF) == 1"
[01:52:41.808]          // =>  FALSE
[01:52:41.808]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:52:41.808]      </control>
[01:52:41.808]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:52:41.808]        // if-block "(__protocol & 0xFFFF) == 2"
[01:52:41.808]          // =>  TRUE
[01:52:41.808]        <block atomic="false" info="">
[01:52:41.808]          Message(0, "executing SWD power up");
[01:52:41.810]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:52:41.813]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:52:41.813]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:52:41.816]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:52:41.816]        </block>
[01:52:41.816]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:52:41.816]      </control>
[01:52:41.816]      // end if-block "powered_down"
[01:52:41.816]    </control>
[01:52:41.816]    <block atomic="false" info="">
[01:52:41.816]      __var DEBUG_PORT_VAL    = 0;
[01:52:41.816]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:52:41.816]      __var ACCESS_POINT_VAL  = 0;
[01:52:41.816]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:52:41.816]      __ap = 1; 
[01:52:41.816]        // -> [__ap <= 0x00000001]
[01:52:41.816]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:52:41.833]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:52:41.833]      __ap = 4;
[01:52:41.833]        // -> [__ap <= 0x00000004]
[01:52:41.833]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:52:41.837]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:52:41.837]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:52:41.837]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:52:41.838]    </block>
[01:52:41.838]    <block atomic="false" info="">
[01:52:41.838]      __var nReset = 0x80;
[01:52:41.838]        // -> [nReset <= 0x00000080]
[01:52:41.838]      __var canReadPins = 0;
[01:52:41.838]        // -> [canReadPins <= 0x00000000]
[01:52:41.838]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:52:41.843]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:52:41.843]        // -> [canReadPins <= 0x00000001]
[01:52:41.843]    </block>
[01:52:41.843]    <control if="" while="1" timeout="200" info="">
[01:52:41.844]      // while "1"  (timeout="200")
[01:52:41.844]      // while-condition  =>  TRUE
[01:52:41.844]      // while "1"  (timeout="200")
[01:52:41.844]      // while-condition  =>  TRUE
[01:52:41.844]      // while "1"  (timeout="200")
[01:52:41.844]      // while-condition  =>  TRUE
[01:52:41.844]      // while "1"  (timeout="200")
[01:52:41.844]      // while-condition  =>  TRUE
[01:52:41.844]      // while "1"  (timeout="200")
[01:52:41.844]      // while-condition  =>  TRUE
[01:52:41.845]      // while "1"  (timeout="200")
[01:52:41.845]      // while-condition  =>  TRUE
[01:52:41.845]      // while "1"  (timeout="200")
[01:52:41.845]      // while-condition  =>  TRUE
[01:52:41.845]      // while "1"  (timeout="200")
[01:52:41.845]      // while-condition  =>  TRUE
[01:52:41.845]      // while "1"  (timeout="200")
[01:52:41.845]      // while-condition  =>  TRUE
[01:52:41.845]      // while "1"  (timeout="200")
[01:52:41.846]      // while-condition  =>  TRUE
[01:52:41.846]      // while "1"  (timeout="200")
[01:52:41.846]      // while-condition  =>  TRUE
[01:52:41.846]      // while "1"  (timeout="200")
[01:52:41.846]      // while-condition  =>  TRUE
[01:52:41.846]      // while "1"  (timeout="200")
[01:52:41.846]      // while-condition  =>  TRUE
[01:52:41.846]      // while "1"  (timeout="200")
[01:52:41.846]      // while-condition  =>  TRUE
[01:52:41.846]      // while "1"  (timeout="200")
[01:52:41.846]      // while-condition  =>  TRUE
[01:52:41.846]      // while "1"  (timeout="200")
[01:52:41.846]      // while-condition  =>  TRUE
[01:52:41.846]      // while "1"  (timeout="200")
[01:52:41.846]      // while-condition  =>  TRUE
[01:52:41.846]      // while "1"  (timeout="200")
[01:52:41.848]      // while-condition  =>  TRUE
[01:52:41.848]      // while "1"  (timeout="200")
[01:52:41.848]      // while  =>  TIMEOUT
[01:52:41.848]      // end while "1"
[01:52:41.848]    </control>
[01:52:41.848]    <control if="canReadPins" while="" timeout="0" info="">
[01:52:41.848]      // if-block "canReadPins"
[01:52:41.849]        // =>  TRUE
[01:52:41.849]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:52:41.849]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:52:41.856]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:52:41.856]        // while-condition  =>  FALSE
[01:52:41.856]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:52:41.856]      </control>
[01:52:41.859]      // end if-block "canReadPins"
[01:52:41.859]    </control>
[01:52:41.859]    <control if="!canReadPins" while="" timeout="0" info="">
[01:52:41.859]      // if-block "!canReadPins"
[01:52:41.859]        // =>  FALSE
[01:52:41.859]      // skip if-block "!canReadPins"
[01:52:41.859]    </control>
[01:52:41.859]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:52:41.859]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:52:41.859]        // =>  TRUE
[01:52:41.859]      <block atomic="false" info="">
[01:52:41.859]        WriteAP(0x00, 0x190008);
[01:52:41.863]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:52:41.863]        WriteAP(0xF0, 0x01);
[01:52:41.867]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:52:41.867]      </block>
[01:52:41.867]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:52:41.867]    </control>
[01:52:41.867]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:52:41.867]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:52:41.867]        // =>  FALSE
[01:52:41.867]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:52:41.867]    </control>
[01:52:41.867]    <block atomic="false" info="">
[01:52:41.867]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:52:41.872]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:52:41.872]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:52:41.872]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:52:41.874]      __ap = 0; //lets make sure we reset the access point selection
[01:52:41.874]        // -> [__ap <= 0x00000000]
[01:52:41.874]    </block>
[01:52:41.874]  </sequence>
[01:52:41.874]  
[01:52:41.896]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:52:41.896]  
[01:52:41.896]  <debugvars>
[01:52:41.896]    // Pre-defined
[01:52:41.896]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:52:41.896]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:52:41.896]    __dp=0x00000000
[01:52:41.896]    __ap=0x00000000
[01:52:41.896]    __traceout=0x00000000      (Trace Disabled)
[01:52:41.896]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:52:41.896]    __FlashAddr=0x00000000
[01:52:41.896]    __FlashLen=0x00000000
[01:52:41.896]    __FlashArg=0x00000000
[01:52:41.896]    __FlashOp=0x00000000
[01:52:41.896]    __Result=0x00000000
[01:52:41.896]  </debugvars>
[01:52:41.896]  
[01:52:41.896]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:52:41.896]    <block atomic="false" info="">
[01:52:41.896]      __var deviceID = 0;
[01:52:41.896]        // -> [deviceID <= 0x00000000]
[01:52:41.896]      __var version = 0;
[01:52:41.896]        // -> [version <= 0x00000000]
[01:52:41.896]      __var partNum = 0;
[01:52:41.896]        // -> [partNum <= 0x00000000]
[01:52:41.896]      __var manuf = 0;
[01:52:41.896]        // -> [manuf <= 0x00000000]
[01:52:41.896]      __var isMSPM0G1X0X_G3X0X = 0;
[01:52:41.896]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:52:41.896]      __var isProduction = 0;
[01:52:41.896]        // -> [isProduction <= 0x00000000]
[01:52:41.896]      __var continueId = 0;
[01:52:41.896]        // -> [continueId <= 0x00000000]
[01:52:41.896]      deviceID =   Read32(0x41C40004);
[01:52:41.907]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:52:41.907]        // -> [deviceID <= 0x2BB8802F]
[01:52:41.907]      version = deviceID >> 28;
[01:52:41.907]        // -> [version <= 0x00000002]
[01:52:41.907]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:52:41.907]        // -> [partNum <= 0x0000BB88]
[01:52:41.907]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:52:41.907]        // -> [manuf <= 0x00000017]
[01:52:41.907]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:52:41.907]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:52:41.907]      isProduction = (version > 0);
[01:52:41.907]        // -> [isProduction <= 0x00000001]
[01:52:41.907]    </block>
[01:52:41.907]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:52:41.907]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:52:41.907]        // =>  FALSE
[01:52:41.907]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:52:41.907]    </control>
[01:52:41.907]    <control if="continueId == 4" while="" timeout="0" info="">
[01:52:41.907]      // if-block "continueId == 4"
[01:52:41.907]        // =>  FALSE
[01:52:41.907]      // skip if-block "continueId == 4"
[01:52:41.907]    </control>
[01:52:41.907]    <control if="!isProduction" while="" timeout="0" info="">
[01:52:41.907]      // if-block "!isProduction"
[01:52:41.907]        // =>  FALSE
[01:52:41.907]      // skip if-block "!isProduction"
[01:52:41.907]    </control>
[01:52:41.907]  </sequence>
[01:52:41.911]  
[01:54:59.091]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:54:59.091]  
[01:54:59.091]  <debugvars>
[01:54:59.091]    // Pre-defined
[01:54:59.091]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:59.091]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:54:59.091]    __dp=0x00000000
[01:54:59.091]    __ap=0x00000000
[01:54:59.091]    __traceout=0x00000000      (Trace Disabled)
[01:54:59.091]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:59.091]    __FlashAddr=0x00000000
[01:54:59.091]    __FlashLen=0x00000000
[01:54:59.091]    __FlashArg=0x00000000
[01:54:59.091]    __FlashOp=0x00000000
[01:54:59.091]    __Result=0x00000000
[01:54:59.091]  </debugvars>
[01:54:59.091]  
[01:54:59.091]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:54:59.091]    <block atomic="false" info="">
[01:54:59.091]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:54:59.091]        // -> [isSWJ <= 0x00000001]
[01:54:59.091]      __var hasDormant = __protocol & 0x00020000;
[01:54:59.091]        // -> [hasDormant <= 0x00000000]
[01:54:59.091]      __var protType   = __protocol & 0x0000FFFF;
[01:54:59.098]        // -> [protType <= 0x00000002]
[01:54:59.098]    </block>
[01:54:59.098]    <control if="protType == 1" while="" timeout="0" info="">
[01:54:59.098]      // if-block "protType == 1"
[01:54:59.098]        // =>  FALSE
[01:54:59.098]      // skip if-block "protType == 1"
[01:54:59.098]    </control>
[01:54:59.098]    <control if="protType == 2" while="" timeout="0" info="">
[01:54:59.098]      // if-block "protType == 2"
[01:54:59.098]        // =>  TRUE
[01:54:59.098]      <control if="isSWJ" while="" timeout="0" info="">
[01:54:59.098]        // if-block "isSWJ"
[01:54:59.098]          // =>  TRUE
[01:54:59.098]        <control if="hasDormant" while="" timeout="0" info="">
[01:54:59.098]          // if-block "hasDormant"
[01:54:59.098]            // =>  FALSE
[01:54:59.098]          // skip if-block "hasDormant"
[01:54:59.098]        </control>
[01:54:59.098]        <control if="!hasDormant" while="" timeout="0" info="">
[01:54:59.098]          // if-block "!hasDormant"
[01:54:59.098]            // =>  TRUE
[01:54:59.098]          <block atomic="false" info="">
[01:54:59.100]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:54:59.100]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:59.100]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:54:59.100]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:54:59.100]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:54:59.100]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:59.100]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:54:59.109]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:54:59.109]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:54:59.118]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:59.118]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:54:59.121]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:54:59.121]          </block>
[01:54:59.121]          // end if-block "!hasDormant"
[01:54:59.121]        </control>
[01:54:59.121]        // end if-block "isSWJ"
[01:54:59.121]      </control>
[01:54:59.121]      <control if="!isSWJ" while="" timeout="0" info="">
[01:54:59.121]        // if-block "!isSWJ"
[01:54:59.121]          // =>  FALSE
[01:54:59.121]        // skip if-block "!isSWJ"
[01:54:59.121]      </control>
[01:54:59.122]      <block atomic="false" info="">
[01:54:59.122]        ReadDP(0x0);
[01:54:59.122]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:54:59.122]      </block>
[01:54:59.122]      // end if-block "protType == 2"
[01:54:59.122]    </control>
[01:54:59.122]  </sequence>
[01:54:59.122]  
[01:54:59.139]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:54:59.139]  
[01:54:59.139]  <debugvars>
[01:54:59.139]    // Pre-defined
[01:54:59.139]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:59.139]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:54:59.139]    __dp=0x00000000
[01:54:59.139]    __ap=0x00000000
[01:54:59.139]    __traceout=0x00000000      (Trace Disabled)
[01:54:59.139]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:59.139]    __FlashAddr=0x00000000
[01:54:59.139]    __FlashLen=0x00000000
[01:54:59.139]    __FlashArg=0x00000000
[01:54:59.139]    __FlashOp=0x00000000
[01:54:59.139]    __Result=0x00000000
[01:54:59.139]  </debugvars>
[01:54:59.139]  
[01:54:59.139]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:54:59.139]    <block atomic="false" info="">
[01:54:59.139]      __var SW_DP_ABORT       = 0x0;
[01:54:59.139]        // -> [SW_DP_ABORT <= 0x00000000]
[01:54:59.139]      __var DP_CTRL_STAT      = 0x4;
[01:54:59.139]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:54:59.139]      __var DP_SELECT         = 0x8;
[01:54:59.139]        // -> [DP_SELECT <= 0x00000008]
[01:54:59.139]      __var powered_down      = 0;
[01:54:59.139]        // -> [powered_down <= 0x00000000]
[01:54:59.139]      WriteDP(DP_SELECT, 0x00000000);
[01:54:59.139]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:54:59.139]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:54:59.151]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:54:59.151]        // -> [powered_down <= 0x00000001]
[01:54:59.151]    </block>
[01:54:59.151]    <control if="powered_down" while="" timeout="0" info="">
[01:54:59.151]      // if-block "powered_down"
[01:54:59.151]        // =>  TRUE
[01:54:59.151]      <block atomic="false" info="">
[01:54:59.151]        Message(0, "Debug/System power-up request sent");
[01:54:59.151]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:54:59.159]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:54:59.159]      </block>
[01:54:59.159]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:54:59.159]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:54:59.159]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:54:59.159]        // while-condition  =>  FALSE
[01:54:59.159]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:54:59.159]      </control>
[01:54:59.159]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:54:59.159]        // if-block "(__protocol & 0xFFFF) == 1"
[01:54:59.159]          // =>  FALSE
[01:54:59.159]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:54:59.159]      </control>
[01:54:59.159]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:54:59.159]        // if-block "(__protocol & 0xFFFF) == 2"
[01:54:59.159]          // =>  TRUE
[01:54:59.159]        <block atomic="false" info="">
[01:54:59.159]          Message(0, "executing SWD power up");
[01:54:59.169]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:54:59.169]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:54:59.169]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:54:59.181]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:54:59.181]        </block>
[01:54:59.181]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:54:59.181]      </control>
[01:54:59.181]      // end if-block "powered_down"
[01:54:59.181]    </control>
[01:54:59.181]    <block atomic="false" info="">
[01:54:59.181]      __var DEBUG_PORT_VAL    = 0;
[01:54:59.181]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:54:59.181]      __var ACCESS_POINT_VAL  = 0;
[01:54:59.181]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:54:59.181]      __ap = 1; 
[01:54:59.181]        // -> [__ap <= 0x00000001]
[01:54:59.181]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:54:59.181]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:54:59.181]      __ap = 4;
[01:54:59.181]        // -> [__ap <= 0x00000004]
[01:54:59.181]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:54:59.189]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:54:59.189]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:54:59.189]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:54:59.194]    </block>
[01:54:59.194]    <block atomic="false" info="">
[01:54:59.194]      __var nReset = 0x80;
[01:54:59.194]        // -> [nReset <= 0x00000080]
[01:54:59.194]      __var canReadPins = 0;
[01:54:59.194]        // -> [canReadPins <= 0x00000000]
[01:54:59.194]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:54:59.195]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:54:59.195]        // -> [canReadPins <= 0x00000001]
[01:54:59.197]    </block>
[01:54:59.197]    <control if="" while="1" timeout="200" info="">
[01:54:59.197]      // while "1"  (timeout="200")
[01:54:59.197]      // while-condition  =>  TRUE
[01:54:59.197]      // while "1"  (timeout="200")
[01:54:59.197]      // while-condition  =>  TRUE
[01:54:59.197]      // while "1"  (timeout="200")
[01:54:59.197]      // while-condition  =>  TRUE
[01:54:59.197]      // while "1"  (timeout="200")
[01:54:59.197]      // while-condition  =>  TRUE
[01:54:59.197]      // while "1"  (timeout="200")
[01:54:59.197]      // while-condition  =>  TRUE
[01:54:59.197]      // while "1"  (timeout="200")
[01:54:59.198]      // while-condition  =>  TRUE
[01:54:59.198]      // while "1"  (timeout="200")
[01:54:59.198]      // while-condition  =>  TRUE
[01:54:59.198]      // while "1"  (timeout="200")
[01:54:59.198]      // while-condition  =>  TRUE
[01:54:59.198]      // while "1"  (timeout="200")
[01:54:59.198]      // while-condition  =>  TRUE
[01:54:59.198]      // while "1"  (timeout="200")
[01:54:59.198]      // while-condition  =>  TRUE
[01:54:59.198]      // while "1"  (timeout="200")
[01:54:59.198]      // while-condition  =>  TRUE
[01:54:59.198]      // while "1"  (timeout="200")
[01:54:59.198]      // while-condition  =>  TRUE
[01:54:59.198]      // while "1"  (timeout="200")
[01:54:59.200]      // while-condition  =>  TRUE
[01:54:59.200]      // while "1"  (timeout="200")
[01:54:59.200]      // while-condition  =>  TRUE
[01:54:59.200]      // while "1"  (timeout="200")
[01:54:59.200]      // while-condition  =>  TRUE
[01:54:59.200]      // while "1"  (timeout="200")
[01:54:59.200]      // while-condition  =>  TRUE
[01:54:59.200]      // while "1"  (timeout="200")
[01:54:59.200]      // while-condition  =>  TRUE
[01:54:59.200]      // while "1"  (timeout="200")
[01:54:59.200]      // while-condition  =>  TRUE
[01:54:59.200]      // while "1"  (timeout="200")
[01:54:59.200]      // while-condition  =>  TRUE
[01:54:59.200]      // while "1"  (timeout="200")
[01:54:59.200]      // while-condition  =>  TRUE
[01:54:59.200]      // while "1"  (timeout="200")
[01:54:59.200]      // while-condition  =>  TRUE
[01:54:59.200]      // while "1"  (timeout="200")
[01:54:59.200]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.202]      // while "1"  (timeout="200")
[01:54:59.202]      // while-condition  =>  TRUE
[01:54:59.210]      // while "1"  (timeout="200")
[01:54:59.210]      // while  =>  TIMEOUT
[01:54:59.210]      // end while "1"
[01:54:59.210]    </control>
[01:54:59.210]    <control if="canReadPins" while="" timeout="0" info="">
[01:54:59.210]      // if-block "canReadPins"
[01:54:59.210]        // =>  TRUE
[01:54:59.210]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:54:59.210]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:54:59.210]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:54:59.210]        // while-condition  =>  FALSE
[01:54:59.210]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:54:59.210]      </control>
[01:54:59.210]      // end if-block "canReadPins"
[01:54:59.210]    </control>
[01:54:59.210]    <control if="!canReadPins" while="" timeout="0" info="">
[01:54:59.210]      // if-block "!canReadPins"
[01:54:59.210]        // =>  FALSE
[01:54:59.210]      // skip if-block "!canReadPins"
[01:54:59.210]    </control>
[01:54:59.210]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:54:59.210]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:54:59.210]        // =>  TRUE
[01:54:59.210]      <block atomic="false" info="">
[01:54:59.210]        WriteAP(0x00, 0x190008);
[01:54:59.220]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:54:59.220]        WriteAP(0xF0, 0x01);
[01:54:59.232]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:54:59.232]      </block>
[01:54:59.232]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:54:59.232]    </control>
[01:54:59.232]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:54:59.235]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:54:59.235]        // =>  FALSE
[01:54:59.235]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:54:59.235]    </control>
[01:54:59.235]    <block atomic="false" info="">
[01:54:59.235]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:54:59.240]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:54:59.240]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:54:59.240]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:54:59.240]      __ap = 0; //lets make sure we reset the access point selection
[01:54:59.240]        // -> [__ap <= 0x00000000]
[01:54:59.240]    </block>
[01:54:59.240]  </sequence>
[01:54:59.240]  
[01:54:59.276]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:54:59.276]  
[01:54:59.276]  <debugvars>
[01:54:59.276]    // Pre-defined
[01:54:59.276]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:59.276]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:54:59.276]    __dp=0x00000000
[01:54:59.276]    __ap=0x00000000
[01:54:59.276]    __traceout=0x00000000      (Trace Disabled)
[01:54:59.276]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:59.276]    __FlashAddr=0x00000000
[01:54:59.276]    __FlashLen=0x00000000
[01:54:59.276]    __FlashArg=0x00000000
[01:54:59.276]    __FlashOp=0x00000000
[01:54:59.276]    __Result=0x00000000
[01:54:59.276]  </debugvars>
[01:54:59.276]  
[01:54:59.276]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:54:59.276]    <block atomic="false" info="">
[01:54:59.276]      __var deviceID = 0;
[01:54:59.276]        // -> [deviceID <= 0x00000000]
[01:54:59.276]      __var version = 0;
[01:54:59.276]        // -> [version <= 0x00000000]
[01:54:59.276]      __var partNum = 0;
[01:54:59.276]        // -> [partNum <= 0x00000000]
[01:54:59.276]      __var manuf = 0;
[01:54:59.276]        // -> [manuf <= 0x00000000]
[01:54:59.276]      __var isMSPM0G1X0X_G3X0X = 0;
[01:54:59.276]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:54:59.276]      __var isProduction = 0;
[01:54:59.276]        // -> [isProduction <= 0x00000000]
[01:54:59.276]      __var continueId = 0;
[01:54:59.276]        // -> [continueId <= 0x00000000]
[01:54:59.276]      deviceID =   Read32(0x41C40004);
[01:54:59.286]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:54:59.288]        // -> [deviceID <= 0x2BB8802F]
[01:54:59.288]      version = deviceID >> 28;
[01:54:59.288]        // -> [version <= 0x00000002]
[01:54:59.288]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:54:59.288]        // -> [partNum <= 0x0000BB88]
[01:54:59.288]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:54:59.288]        // -> [manuf <= 0x00000017]
[01:54:59.288]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:54:59.288]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:54:59.288]      isProduction = (version > 0);
[01:54:59.288]        // -> [isProduction <= 0x00000001]
[01:54:59.288]    </block>
[01:54:59.288]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:54:59.289]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:54:59.289]        // =>  FALSE
[01:54:59.289]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:54:59.289]    </control>
[01:54:59.289]    <control if="continueId == 4" while="" timeout="0" info="">
[01:54:59.289]      // if-block "continueId == 4"
[01:54:59.289]        // =>  FALSE
[01:54:59.289]      // skip if-block "continueId == 4"
[01:54:59.289]    </control>
[01:54:59.289]    <control if="!isProduction" while="" timeout="0" info="">
[01:54:59.289]      // if-block "!isProduction"
[01:54:59.289]        // =>  FALSE
[01:54:59.289]      // skip if-block "!isProduction"
[01:54:59.289]    </control>
[01:54:59.289]  </sequence>
[01:54:59.289]  
[02:01:44.664]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:01:44.664]  
[02:01:44.664]  <debugvars>
[02:01:44.664]    // Pre-defined
[02:01:44.664]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:01:44.664]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:01:44.664]    __dp=0x00000000
[02:01:44.664]    __ap=0x00000000
[02:01:44.664]    __traceout=0x00000000      (Trace Disabled)
[02:01:44.664]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:01:44.664]    __FlashAddr=0x00000000
[02:01:44.664]    __FlashLen=0x00000000
[02:01:44.664]    __FlashArg=0x00000000
[02:01:44.664]    __FlashOp=0x00000000
[02:01:44.664]    __Result=0x00000000
[02:01:44.664]  </debugvars>
[02:01:44.664]  
[02:01:44.664]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:01:44.664]    <block atomic="false" info="">
[02:01:44.664]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:01:44.664]        // -> [isSWJ <= 0x00000001]
[02:01:44.664]      __var hasDormant = __protocol & 0x00020000;
[02:01:44.664]        // -> [hasDormant <= 0x00000000]
[02:01:44.664]      __var protType   = __protocol & 0x0000FFFF;
[02:01:44.664]        // -> [protType <= 0x00000002]
[02:01:44.664]    </block>
[02:01:44.664]    <control if="protType == 1" while="" timeout="0" info="">
[02:01:44.664]      // if-block "protType == 1"
[02:01:44.664]        // =>  FALSE
[02:01:44.664]      // skip if-block "protType == 1"
[02:01:44.674]    </control>
[02:01:44.674]    <control if="protType == 2" while="" timeout="0" info="">
[02:01:44.674]      // if-block "protType == 2"
[02:01:44.674]        // =>  TRUE
[02:01:44.674]      <control if="isSWJ" while="" timeout="0" info="">
[02:01:44.674]        // if-block "isSWJ"
[02:01:44.674]          // =>  TRUE
[02:01:44.674]        <control if="hasDormant" while="" timeout="0" info="">
[02:01:44.674]          // if-block "hasDormant"
[02:01:44.674]            // =>  FALSE
[02:01:44.674]          // skip if-block "hasDormant"
[02:01:44.674]        </control>
[02:01:44.674]        <control if="!hasDormant" while="" timeout="0" info="">
[02:01:44.674]          // if-block "!hasDormant"
[02:01:44.674]            // =>  TRUE
[02:01:44.674]          <block atomic="false" info="">
[02:01:44.674]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:01:44.674]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:01:44.674]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:01:44.674]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:01:44.674]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:01:44.674]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:01:44.674]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:01:44.684]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:01:44.684]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:01:44.684]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:01:44.684]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:01:44.684]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:01:44.684]          </block>
[02:01:44.684]          // end if-block "!hasDormant"
[02:01:44.684]        </control>
[02:01:44.684]        // end if-block "isSWJ"
[02:01:44.684]      </control>
[02:01:44.684]      <control if="!isSWJ" while="" timeout="0" info="">
[02:01:44.684]        // if-block "!isSWJ"
[02:01:44.684]          // =>  FALSE
[02:01:44.684]        // skip if-block "!isSWJ"
[02:01:44.684]      </control>
[02:01:44.684]      <block atomic="false" info="">
[02:01:44.684]        ReadDP(0x0);
[02:01:44.684]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:01:44.684]      </block>
[02:01:44.684]      // end if-block "protType == 2"
[02:01:44.684]    </control>
[02:01:44.684]  </sequence>
[02:01:44.684]  
[02:01:44.694]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:01:44.694]  
[02:01:44.694]  <debugvars>
[02:01:44.694]    // Pre-defined
[02:01:44.694]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:01:44.694]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:01:44.694]    __dp=0x00000000
[02:01:44.694]    __ap=0x00000000
[02:01:44.694]    __traceout=0x00000000      (Trace Disabled)
[02:01:44.694]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:01:44.694]    __FlashAddr=0x00000000
[02:01:44.694]    __FlashLen=0x00000000
[02:01:44.694]    __FlashArg=0x00000000
[02:01:44.694]    __FlashOp=0x00000000
[02:01:44.694]    __Result=0x00000000
[02:01:44.694]  </debugvars>
[02:01:44.694]  
[02:01:44.694]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:01:44.694]    <block atomic="false" info="">
[02:01:44.694]      __var SW_DP_ABORT       = 0x0;
[02:01:44.694]        // -> [SW_DP_ABORT <= 0x00000000]
[02:01:44.694]      __var DP_CTRL_STAT      = 0x4;
[02:01:44.696]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:01:44.696]      __var DP_SELECT         = 0x8;
[02:01:44.696]        // -> [DP_SELECT <= 0x00000008]
[02:01:44.696]      __var powered_down      = 0;
[02:01:44.696]        // -> [powered_down <= 0x00000000]
[02:01:44.696]      WriteDP(DP_SELECT, 0x00000000);
[02:01:44.696]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:01:44.696]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:01:44.696]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:01:44.696]        // -> [powered_down <= 0x00000001]
[02:01:44.696]    </block>
[02:01:44.696]    <control if="powered_down" while="" timeout="0" info="">
[02:01:44.696]      // if-block "powered_down"
[02:01:44.696]        // =>  TRUE
[02:01:44.696]      <block atomic="false" info="">
[02:01:44.696]        Message(0, "Debug/System power-up request sent");
[02:01:44.696]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:01:44.704]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:01:44.704]      </block>
[02:01:44.704]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:01:44.704]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:01:44.704]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:01:44.704]        // while-condition  =>  FALSE
[02:01:44.704]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:01:44.704]      </control>
[02:01:44.704]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:01:44.704]        // if-block "(__protocol & 0xFFFF) == 1"
[02:01:44.704]          // =>  FALSE
[02:01:44.704]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:01:44.704]      </control>
[02:01:44.704]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:01:44.704]        // if-block "(__protocol & 0xFFFF) == 2"
[02:01:44.704]          // =>  TRUE
[02:01:44.704]        <block atomic="false" info="">
[02:01:44.704]          Message(0, "executing SWD power up");
[02:01:44.704]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:01:44.704]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:01:44.704]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:01:44.704]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:01:44.704]        </block>
[02:01:44.704]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:01:44.704]      </control>
[02:01:44.704]      // end if-block "powered_down"
[02:01:44.704]    </control>
[02:01:44.704]    <block atomic="false" info="">
[02:01:44.704]      __var DEBUG_PORT_VAL    = 0;
[02:01:44.704]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:01:44.704]      __var ACCESS_POINT_VAL  = 0;
[02:01:44.714]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:01:44.714]      __ap = 1; 
[02:01:44.714]        // -> [__ap <= 0x00000001]
[02:01:44.714]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:01:44.714]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:01:44.714]      __ap = 4;
[02:01:44.714]        // -> [__ap <= 0x00000004]
[02:01:44.714]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:01:44.714]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:01:44.714]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:01:44.714]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:01:44.724]    </block>
[02:01:44.724]    <block atomic="false" info="">
[02:01:44.724]      __var nReset = 0x80;
[02:01:44.724]        // -> [nReset <= 0x00000080]
[02:01:44.724]      __var canReadPins = 0;
[02:01:44.724]        // -> [canReadPins <= 0x00000000]
[02:01:44.724]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:01:44.724]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:01:44.724]        // -> [canReadPins <= 0x00000001]
[02:01:44.724]    </block>
[02:01:44.724]    <control if="" while="1" timeout="200" info="">
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.724]      // while-condition  =>  TRUE
[02:01:44.724]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.734]      // while-condition  =>  TRUE
[02:01:44.734]      // while "1"  (timeout="200")
[02:01:44.744]      // while-condition  =>  TRUE
[02:01:44.744]      // while "1"  (timeout="200")
[02:01:44.744]      // while  =>  TIMEOUT
[02:01:44.744]      // end while "1"
[02:01:44.745]    </control>
[02:01:44.745]    <control if="canReadPins" while="" timeout="0" info="">
[02:01:44.745]      // if-block "canReadPins"
[02:01:44.745]        // =>  TRUE
[02:01:44.745]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:01:44.745]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:01:44.745]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:01:44.745]        // while-condition  =>  FALSE
[02:01:44.745]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:01:44.745]      </control>
[02:01:44.745]      // end if-block "canReadPins"
[02:01:44.745]    </control>
[02:01:44.745]    <control if="!canReadPins" while="" timeout="0" info="">
[02:01:44.745]      // if-block "!canReadPins"
[02:01:44.745]        // =>  FALSE
[02:01:44.745]      // skip if-block "!canReadPins"
[02:01:44.745]    </control>
[02:01:44.745]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:01:44.745]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:01:44.745]        // =>  TRUE
[02:01:44.745]      <block atomic="false" info="">
[02:01:44.745]        WriteAP(0x00, 0x190008);
[02:01:44.745]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:01:44.745]        WriteAP(0xF0, 0x01);
[02:01:44.745]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:01:44.754]      </block>
[02:01:44.754]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:01:44.754]    </control>
[02:01:44.754]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:01:44.754]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:01:44.754]        // =>  FALSE
[02:01:44.754]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:01:44.754]    </control>
[02:01:44.754]    <block atomic="false" info="">
[02:01:44.754]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:01:44.754]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:01:44.754]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:01:44.754]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:01:44.754]      __ap = 0; //lets make sure we reset the access point selection
[02:01:44.754]        // -> [__ap <= 0x00000000]
[02:01:44.754]    </block>
[02:01:44.754]  </sequence>
[02:01:44.754]  
[02:01:44.784]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:01:44.784]  
[02:01:44.784]  <debugvars>
[02:01:44.784]    // Pre-defined
[02:01:44.784]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:01:44.784]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:01:44.784]    __dp=0x00000000
[02:01:44.784]    __ap=0x00000000
[02:01:44.784]    __traceout=0x00000000      (Trace Disabled)
[02:01:44.784]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:01:44.784]    __FlashAddr=0x00000000
[02:01:44.784]    __FlashLen=0x00000000
[02:01:44.784]    __FlashArg=0x00000000
[02:01:44.784]    __FlashOp=0x00000000
[02:01:44.784]    __Result=0x00000000
[02:01:44.784]  </debugvars>
[02:01:44.784]  
[02:01:44.784]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:01:44.784]    <block atomic="false" info="">
[02:01:44.784]      __var deviceID = 0;
[02:01:44.784]        // -> [deviceID <= 0x00000000]
[02:01:44.784]      __var version = 0;
[02:01:44.784]        // -> [version <= 0x00000000]
[02:01:44.784]      __var partNum = 0;
[02:01:44.784]        // -> [partNum <= 0x00000000]
[02:01:44.784]      __var manuf = 0;
[02:01:44.784]        // -> [manuf <= 0x00000000]
[02:01:44.784]      __var isMSPM0G1X0X_G3X0X = 0;
[02:01:44.784]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:01:44.784]      __var isProduction = 0;
[02:01:44.784]        // -> [isProduction <= 0x00000000]
[02:01:44.784]      __var continueId = 0;
[02:01:44.784]        // -> [continueId <= 0x00000000]
[02:01:44.784]      deviceID =   Read32(0x41C40004);
[02:01:44.794]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:01:44.794]        // -> [deviceID <= 0x2BB8802F]
[02:01:44.794]      version = deviceID >> 28;
[02:01:44.794]        // -> [version <= 0x00000002]
[02:01:44.794]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:01:44.794]        // -> [partNum <= 0x0000BB88]
[02:01:44.795]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:01:44.795]        // -> [manuf <= 0x00000017]
[02:01:44.795]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:01:44.795]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:01:44.795]      isProduction = (version > 0);
[02:01:44.795]        // -> [isProduction <= 0x00000001]
[02:01:44.795]    </block>
[02:01:44.795]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:01:44.795]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:01:44.795]        // =>  FALSE
[02:01:44.795]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:01:44.795]    </control>
[02:01:44.795]    <control if="continueId == 4" while="" timeout="0" info="">
[02:01:44.795]      // if-block "continueId == 4"
[02:01:44.795]        // =>  FALSE
[02:01:44.795]      // skip if-block "continueId == 4"
[02:01:44.795]    </control>
[02:01:44.795]    <control if="!isProduction" while="" timeout="0" info="">
[02:01:44.795]      // if-block "!isProduction"
[02:01:44.795]        // =>  FALSE
[02:01:44.795]      // skip if-block "!isProduction"
[02:01:44.795]    </control>
[02:01:44.795]  </sequence>
[02:01:44.795]  
[02:03:02.387]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:03:02.387]  
[02:03:02.387]  <debugvars>
[02:03:02.387]    // Pre-defined
[02:03:02.387]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:02.387]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:03:02.390]    __dp=0x00000000
[02:03:02.390]    __ap=0x00000000
[02:03:02.390]    __traceout=0x00000000      (Trace Disabled)
[02:03:02.390]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:02.390]    __FlashAddr=0x00000000
[02:03:02.390]    __FlashLen=0x00000000
[02:03:02.390]    __FlashArg=0x00000000
[02:03:02.390]    __FlashOp=0x00000000
[02:03:02.390]    __Result=0x00000000
[02:03:02.390]  </debugvars>
[02:03:02.390]  
[02:03:02.390]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:03:02.390]    <block atomic="false" info="">
[02:03:02.391]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:03:02.391]        // -> [isSWJ <= 0x00000001]
[02:03:02.392]      __var hasDormant = __protocol & 0x00020000;
[02:03:02.392]        // -> [hasDormant <= 0x00000000]
[02:03:02.392]      __var protType   = __protocol & 0x0000FFFF;
[02:03:02.392]        // -> [protType <= 0x00000002]
[02:03:02.392]    </block>
[02:03:02.392]    <control if="protType == 1" while="" timeout="0" info="">
[02:03:02.392]      // if-block "protType == 1"
[02:03:02.392]        // =>  FALSE
[02:03:02.392]      // skip if-block "protType == 1"
[02:03:02.392]    </control>
[02:03:02.393]    <control if="protType == 2" while="" timeout="0" info="">
[02:03:02.393]      // if-block "protType == 2"
[02:03:02.393]        // =>  TRUE
[02:03:02.393]      <control if="isSWJ" while="" timeout="0" info="">
[02:03:02.393]        // if-block "isSWJ"
[02:03:02.393]          // =>  TRUE
[02:03:02.393]        <control if="hasDormant" while="" timeout="0" info="">
[02:03:02.393]          // if-block "hasDormant"
[02:03:02.393]            // =>  FALSE
[02:03:02.393]          // skip if-block "hasDormant"
[02:03:02.393]        </control>
[02:03:02.393]        <control if="!hasDormant" while="" timeout="0" info="">
[02:03:02.394]          // if-block "!hasDormant"
[02:03:02.394]            // =>  TRUE
[02:03:02.394]          <block atomic="false" info="">
[02:03:02.394]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:03:02.394]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:02.394]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:03:02.402]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:03:02.402]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:03:02.403]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:02.403]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:03:02.405]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:03:02.405]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:03:02.405]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:02.405]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:03:02.405]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:03:02.405]          </block>
[02:03:02.405]          // end if-block "!hasDormant"
[02:03:02.405]        </control>
[02:03:02.405]        // end if-block "isSWJ"
[02:03:02.405]      </control>
[02:03:02.405]      <control if="!isSWJ" while="" timeout="0" info="">
[02:03:02.405]        // if-block "!isSWJ"
[02:03:02.405]          // =>  FALSE
[02:03:02.405]        // skip if-block "!isSWJ"
[02:03:02.405]      </control>
[02:03:02.405]      <block atomic="false" info="">
[02:03:02.405]        ReadDP(0x0);
[02:03:02.405]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:03:02.405]      </block>
[02:03:02.412]      // end if-block "protType == 2"
[02:03:02.412]    </control>
[02:03:02.412]  </sequence>
[02:03:02.412]  
[02:03:02.414]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:03:02.414]  
[02:03:02.414]  <debugvars>
[02:03:02.414]    // Pre-defined
[02:03:02.414]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:02.414]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:03:02.414]    __dp=0x00000000
[02:03:02.414]    __ap=0x00000000
[02:03:02.414]    __traceout=0x00000000      (Trace Disabled)
[02:03:02.414]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:02.414]    __FlashAddr=0x00000000
[02:03:02.414]    __FlashLen=0x00000000
[02:03:02.414]    __FlashArg=0x00000000
[02:03:02.414]    __FlashOp=0x00000000
[02:03:02.414]    __Result=0x00000000
[02:03:02.414]  </debugvars>
[02:03:02.414]  
[02:03:02.414]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:03:02.414]    <block atomic="false" info="">
[02:03:02.414]      __var SW_DP_ABORT       = 0x0;
[02:03:02.414]        // -> [SW_DP_ABORT <= 0x00000000]
[02:03:02.414]      __var DP_CTRL_STAT      = 0x4;
[02:03:02.414]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:03:02.414]      __var DP_SELECT         = 0x8;
[02:03:02.414]        // -> [DP_SELECT <= 0x00000008]
[02:03:02.414]      __var powered_down      = 0;
[02:03:02.414]        // -> [powered_down <= 0x00000000]
[02:03:02.414]      WriteDP(DP_SELECT, 0x00000000);
[02:03:02.418]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:03:02.418]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:03:02.420]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:03:02.420]        // -> [powered_down <= 0x00000001]
[02:03:02.420]    </block>
[02:03:02.420]    <control if="powered_down" while="" timeout="0" info="">
[02:03:02.420]      // if-block "powered_down"
[02:03:02.420]        // =>  TRUE
[02:03:02.420]      <block atomic="false" info="">
[02:03:02.422]        Message(0, "Debug/System power-up request sent");
[02:03:02.423]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:03:02.425]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:03:02.425]      </block>
[02:03:02.425]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:03:02.425]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:03:02.428]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:03:02.428]        // while-condition  =>  FALSE
[02:03:02.428]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:03:02.428]      </control>
[02:03:02.428]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:03:02.428]        // if-block "(__protocol & 0xFFFF) == 1"
[02:03:02.428]          // =>  FALSE
[02:03:02.428]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:03:02.428]      </control>
[02:03:02.428]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:03:02.428]        // if-block "(__protocol & 0xFFFF) == 2"
[02:03:02.428]          // =>  TRUE
[02:03:02.428]        <block atomic="false" info="">
[02:03:02.428]          Message(0, "executing SWD power up");
[02:03:02.432]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:03:02.432]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:03:02.432]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:03:02.440]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:03:02.440]        </block>
[02:03:02.440]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:03:02.442]      </control>
[02:03:02.442]      // end if-block "powered_down"
[02:03:02.442]    </control>
[02:03:02.442]    <block atomic="false" info="">
[02:03:02.442]      __var DEBUG_PORT_VAL    = 0;
[02:03:02.442]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:03:02.442]      __var ACCESS_POINT_VAL  = 0;
[02:03:02.442]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:03:02.442]      __ap = 1; 
[02:03:02.442]        // -> [__ap <= 0x00000001]
[02:03:02.442]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:03:02.442]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:03:02.442]      __ap = 4;
[02:03:02.442]        // -> [__ap <= 0x00000004]
[02:03:02.442]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:03:02.442]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:03:02.442]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:03:02.442]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:03:02.452]    </block>
[02:03:02.452]    <block atomic="false" info="">
[02:03:02.452]      __var nReset = 0x80;
[02:03:02.452]        // -> [nReset <= 0x00000080]
[02:03:02.452]      __var canReadPins = 0;
[02:03:02.452]        // -> [canReadPins <= 0x00000000]
[02:03:02.452]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:03:02.452]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:03:02.452]        // -> [canReadPins <= 0x00000001]
[02:03:02.452]    </block>
[02:03:02.452]    <control if="" while="1" timeout="200" info="">
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.452]      // while "1"  (timeout="200")
[02:03:02.452]      // while-condition  =>  TRUE
[02:03:02.463]      // while "1"  (timeout="200")
[02:03:02.463]      // while  =>  TIMEOUT
[02:03:02.463]      // end while "1"
[02:03:02.463]    </control>
[02:03:02.463]    <control if="canReadPins" while="" timeout="0" info="">
[02:03:02.463]      // if-block "canReadPins"
[02:03:02.463]        // =>  TRUE
[02:03:02.463]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:03:02.463]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:03:02.463]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:03:02.463]        // while-condition  =>  FALSE
[02:03:02.463]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:03:02.463]      </control>
[02:03:02.463]      // end if-block "canReadPins"
[02:03:02.463]    </control>
[02:03:02.463]    <control if="!canReadPins" while="" timeout="0" info="">
[02:03:02.463]      // if-block "!canReadPins"
[02:03:02.463]        // =>  FALSE
[02:03:02.463]      // skip if-block "!canReadPins"
[02:03:02.463]    </control>
[02:03:02.463]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:03:02.463]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:03:02.463]        // =>  TRUE
[02:03:02.463]      <block atomic="false" info="">
[02:03:02.463]        WriteAP(0x00, 0x190008);
[02:03:02.463]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:03:02.463]        WriteAP(0xF0, 0x01);
[02:03:02.473]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:03:02.473]      </block>
[02:03:02.473]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:03:02.473]    </control>
[02:03:02.473]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:03:02.473]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:03:02.473]        // =>  FALSE
[02:03:02.473]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:03:02.473]    </control>
[02:03:02.473]    <block atomic="false" info="">
[02:03:02.473]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:03:02.477]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:03:02.477]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:03:02.477]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:03:02.477]      __ap = 0; //lets make sure we reset the access point selection
[02:03:02.477]        // -> [__ap <= 0x00000000]
[02:03:02.477]    </block>
[02:03:02.477]  </sequence>
[02:03:02.477]  
[02:03:02.506]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:03:02.506]  
[02:03:02.506]  <debugvars>
[02:03:02.507]    // Pre-defined
[02:03:02.507]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:02.507]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:03:02.507]    __dp=0x00000000
[02:03:02.507]    __ap=0x00000000
[02:03:02.507]    __traceout=0x00000000      (Trace Disabled)
[02:03:02.507]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:02.507]    __FlashAddr=0x00000000
[02:03:02.507]    __FlashLen=0x00000000
[02:03:02.507]    __FlashArg=0x00000000
[02:03:02.507]    __FlashOp=0x00000000
[02:03:02.507]    __Result=0x00000000
[02:03:02.507]  </debugvars>
[02:03:02.507]  
[02:03:02.507]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:03:02.507]    <block atomic="false" info="">
[02:03:02.507]      __var deviceID = 0;
[02:03:02.507]        // -> [deviceID <= 0x00000000]
[02:03:02.507]      __var version = 0;
[02:03:02.507]        // -> [version <= 0x00000000]
[02:03:02.507]      __var partNum = 0;
[02:03:02.507]        // -> [partNum <= 0x00000000]
[02:03:02.507]      __var manuf = 0;
[02:03:02.507]        // -> [manuf <= 0x00000000]
[02:03:02.507]      __var isMSPM0G1X0X_G3X0X = 0;
[02:03:02.507]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:03:02.507]      __var isProduction = 0;
[02:03:02.507]        // -> [isProduction <= 0x00000000]
[02:03:02.507]      __var continueId = 0;
[02:03:02.507]        // -> [continueId <= 0x00000000]
[02:03:02.507]      deviceID =   Read32(0x41C40004);
[02:03:02.513]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:03:02.513]        // -> [deviceID <= 0x2BB8802F]
[02:03:02.513]      version = deviceID >> 28;
[02:03:02.513]        // -> [version <= 0x00000002]
[02:03:02.513]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:03:02.513]        // -> [partNum <= 0x0000BB88]
[02:03:02.513]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:03:02.513]        // -> [manuf <= 0x00000017]
[02:03:02.513]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:03:02.513]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:03:02.513]      isProduction = (version > 0);
[02:03:02.513]        // -> [isProduction <= 0x00000001]
[02:03:02.513]    </block>
[02:03:02.513]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:03:02.513]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:03:02.513]        // =>  FALSE
[02:03:02.513]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:03:02.513]    </control>
[02:03:02.513]    <control if="continueId == 4" while="" timeout="0" info="">
[02:03:02.513]      // if-block "continueId == 4"
[02:03:02.513]        // =>  FALSE
[02:03:02.513]      // skip if-block "continueId == 4"
[02:03:02.513]    </control>
[02:03:02.513]    <control if="!isProduction" while="" timeout="0" info="">
[02:03:02.513]      // if-block "!isProduction"
[02:03:02.513]        // =>  FALSE
[02:03:02.513]      // skip if-block "!isProduction"
[02:03:02.513]    </control>
[02:03:02.513]  </sequence>
[02:03:02.513]  
[02:03:24.345]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:03:24.345]  
[02:03:24.357]  <debugvars>
[02:03:24.357]    // Pre-defined
[02:03:24.357]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:24.357]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:03:24.357]    __dp=0x00000000
[02:03:24.357]    __ap=0x00000000
[02:03:24.357]    __traceout=0x00000000      (Trace Disabled)
[02:03:24.357]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:24.357]    __FlashAddr=0x00000000
[02:03:24.357]    __FlashLen=0x00000000
[02:03:24.357]    __FlashArg=0x00000000
[02:03:24.359]    __FlashOp=0x00000000
[02:03:24.359]    __Result=0x00000000
[02:03:24.359]  </debugvars>
[02:03:24.359]  
[02:03:24.359]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:03:24.359]    <block atomic="false" info="">
[02:03:24.359]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:03:24.359]        // -> [isSWJ <= 0x00000001]
[02:03:24.359]      __var hasDormant = __protocol & 0x00020000;
[02:03:24.359]        // -> [hasDormant <= 0x00000000]
[02:03:24.359]      __var protType   = __protocol & 0x0000FFFF;
[02:03:24.359]        // -> [protType <= 0x00000002]
[02:03:24.359]    </block>
[02:03:24.359]    <control if="protType == 1" while="" timeout="0" info="">
[02:03:24.359]      // if-block "protType == 1"
[02:03:24.359]        // =>  FALSE
[02:03:24.359]      // skip if-block "protType == 1"
[02:03:24.359]    </control>
[02:03:24.359]    <control if="protType == 2" while="" timeout="0" info="">
[02:03:24.359]      // if-block "protType == 2"
[02:03:24.359]        // =>  TRUE
[02:03:24.359]      <control if="isSWJ" while="" timeout="0" info="">
[02:03:24.359]        // if-block "isSWJ"
[02:03:24.359]          // =>  TRUE
[02:03:24.359]        <control if="hasDormant" while="" timeout="0" info="">
[02:03:24.359]          // if-block "hasDormant"
[02:03:24.359]            // =>  FALSE
[02:03:24.359]          // skip if-block "hasDormant"
[02:03:24.359]        </control>
[02:03:24.359]        <control if="!hasDormant" while="" timeout="0" info="">
[02:03:24.359]          // if-block "!hasDormant"
[02:03:24.359]            // =>  TRUE
[02:03:24.359]          <block atomic="false" info="">
[02:03:24.359]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:03:24.359]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:24.359]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:03:24.359]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:03:24.359]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:03:24.359]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:24.359]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:03:24.370]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:03:24.370]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:03:24.371]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:24.371]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:03:24.381]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:03:24.381]          </block>
[02:03:24.381]          // end if-block "!hasDormant"
[02:03:24.381]        </control>
[02:03:24.381]        // end if-block "isSWJ"
[02:03:24.381]      </control>
[02:03:24.381]      <control if="!isSWJ" while="" timeout="0" info="">
[02:03:24.381]        // if-block "!isSWJ"
[02:03:24.381]          // =>  FALSE
[02:03:24.381]        // skip if-block "!isSWJ"
[02:03:24.381]      </control>
[02:03:24.381]      <block atomic="false" info="">
[02:03:24.381]        ReadDP(0x0);
[02:03:24.384]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:03:24.384]      </block>
[02:03:24.384]      // end if-block "protType == 2"
[02:03:24.384]    </control>
[02:03:24.384]  </sequence>
[02:03:24.384]  
[02:03:24.387]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:03:24.387]  
[02:03:24.387]  <debugvars>
[02:03:24.387]    // Pre-defined
[02:03:24.387]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:24.387]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:03:24.387]    __dp=0x00000000
[02:03:24.387]    __ap=0x00000000
[02:03:24.387]    __traceout=0x00000000      (Trace Disabled)
[02:03:24.387]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:24.387]    __FlashAddr=0x00000000
[02:03:24.387]    __FlashLen=0x00000000
[02:03:24.387]    __FlashArg=0x00000000
[02:03:24.389]    __FlashOp=0x00000000
[02:03:24.389]    __Result=0x00000000
[02:03:24.389]  </debugvars>
[02:03:24.389]  
[02:03:24.389]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:03:24.389]    <block atomic="false" info="">
[02:03:24.389]      __var SW_DP_ABORT       = 0x0;
[02:03:24.389]        // -> [SW_DP_ABORT <= 0x00000000]
[02:03:24.389]      __var DP_CTRL_STAT      = 0x4;
[02:03:24.390]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:03:24.390]      __var DP_SELECT         = 0x8;
[02:03:24.390]        // -> [DP_SELECT <= 0x00000008]
[02:03:24.390]      __var powered_down      = 0;
[02:03:24.390]        // -> [powered_down <= 0x00000000]
[02:03:24.390]      WriteDP(DP_SELECT, 0x00000000);
[02:03:24.391]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:03:24.391]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:03:24.394]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:03:24.394]        // -> [powered_down <= 0x00000001]
[02:03:24.394]    </block>
[02:03:24.394]    <control if="powered_down" while="" timeout="0" info="">
[02:03:24.394]      // if-block "powered_down"
[02:03:24.394]        // =>  TRUE
[02:03:24.394]      <block atomic="false" info="">
[02:03:24.394]        Message(0, "Debug/System power-up request sent");
[02:03:24.395]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:03:24.398]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:03:24.398]      </block>
[02:03:24.398]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:03:24.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:03:24.399]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:03:24.399]        // while-condition  =>  FALSE
[02:03:24.399]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:03:24.399]      </control>
[02:03:24.399]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:03:24.399]        // if-block "(__protocol & 0xFFFF) == 1"
[02:03:24.399]          // =>  FALSE
[02:03:24.399]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:03:24.399]      </control>
[02:03:24.399]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:03:24.399]        // if-block "(__protocol & 0xFFFF) == 2"
[02:03:24.401]          // =>  TRUE
[02:03:24.401]        <block atomic="false" info="">
[02:03:24.401]          Message(0, "executing SWD power up");
[02:03:24.402]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:03:24.404]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:03:24.404]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:03:24.406]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:03:24.406]        </block>
[02:03:24.406]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:03:24.406]      </control>
[02:03:24.406]      // end if-block "powered_down"
[02:03:24.406]    </control>
[02:03:24.406]    <block atomic="false" info="">
[02:03:24.406]      __var DEBUG_PORT_VAL    = 0;
[02:03:24.406]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:03:24.406]      __var ACCESS_POINT_VAL  = 0;
[02:03:24.406]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:03:24.406]      __ap = 1; 
[02:03:24.406]        // -> [__ap <= 0x00000001]
[02:03:24.406]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:03:24.411]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:03:24.411]      __ap = 4;
[02:03:24.411]        // -> [__ap <= 0x00000004]
[02:03:24.411]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:03:24.420]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:03:24.422]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:03:24.422]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:03:24.423]    </block>
[02:03:24.423]    <block atomic="false" info="">
[02:03:24.423]      __var nReset = 0x80;
[02:03:24.423]        // -> [nReset <= 0x00000080]
[02:03:24.423]      __var canReadPins = 0;
[02:03:24.423]        // -> [canReadPins <= 0x00000000]
[02:03:24.423]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:03:24.423]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:03:24.423]        // -> [canReadPins <= 0x00000001]
[02:03:24.423]    </block>
[02:03:24.423]    <control if="" while="1" timeout="200" info="">
[02:03:24.423]      // while "1"  (timeout="200")
[02:03:24.423]      // while-condition  =>  TRUE
[02:03:24.423]      // while "1"  (timeout="200")
[02:03:24.423]      // while-condition  =>  TRUE
[02:03:24.423]      // while "1"  (timeout="200")
[02:03:24.423]      // while-condition  =>  TRUE
[02:03:24.423]      // while "1"  (timeout="200")
[02:03:24.423]      // while-condition  =>  TRUE
[02:03:24.423]      // while "1"  (timeout="200")
[02:03:24.423]      // while-condition  =>  TRUE
[02:03:24.427]      // while "1"  (timeout="200")
[02:03:24.427]      // while  =>  TIMEOUT
[02:03:24.427]      // end while "1"
[02:03:24.427]    </control>
[02:03:24.427]    <control if="canReadPins" while="" timeout="0" info="">
[02:03:24.427]      // if-block "canReadPins"
[02:03:24.427]        // =>  TRUE
[02:03:24.427]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:03:24.427]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:03:24.427]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:03:24.427]        // while-condition  =>  FALSE
[02:03:24.427]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:03:24.427]      </control>
[02:03:24.427]      // end if-block "canReadPins"
[02:03:24.427]    </control>
[02:03:24.427]    <control if="!canReadPins" while="" timeout="0" info="">
[02:03:24.430]      // if-block "!canReadPins"
[02:03:24.430]        // =>  FALSE
[02:03:24.430]      // skip if-block "!canReadPins"
[02:03:24.430]    </control>
[02:03:24.430]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:03:24.430]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:03:24.430]        // =>  TRUE
[02:03:24.430]      <block atomic="false" info="">
[02:03:24.430]        WriteAP(0x00, 0x190008);
[02:03:24.431]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:03:24.431]        WriteAP(0xF0, 0x01);
[02:03:24.431]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:03:24.431]      </block>
[02:03:24.431]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:03:24.431]    </control>
[02:03:24.431]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:03:24.431]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:03:24.431]        // =>  FALSE
[02:03:24.431]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:03:24.431]    </control>
[02:03:24.431]    <block atomic="false" info="">
[02:03:24.440]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:03:24.440]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:03:24.440]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:03:24.440]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:03:24.440]      __ap = 0; //lets make sure we reset the access point selection
[02:03:24.440]        // -> [__ap <= 0x00000000]
[02:03:24.440]    </block>
[02:03:24.440]  </sequence>
[02:03:24.440]  
[02:03:24.481]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:03:24.481]  
[02:03:24.481]  <debugvars>
[02:03:24.481]    // Pre-defined
[02:03:24.481]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:24.481]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:03:24.481]    __dp=0x00000000
[02:03:24.481]    __ap=0x00000000
[02:03:24.481]    __traceout=0x00000000      (Trace Disabled)
[02:03:24.481]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:24.481]    __FlashAddr=0x00000000
[02:03:24.481]    __FlashLen=0x00000000
[02:03:24.481]    __FlashArg=0x00000000
[02:03:24.481]    __FlashOp=0x00000000
[02:03:24.481]    __Result=0x00000000
[02:03:24.481]  </debugvars>
[02:03:24.481]  
[02:03:24.481]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:03:24.481]    <block atomic="false" info="">
[02:03:24.481]      __var deviceID = 0;
[02:03:24.481]        // -> [deviceID <= 0x00000000]
[02:03:24.481]      __var version = 0;
[02:03:24.481]        // -> [version <= 0x00000000]
[02:03:24.481]      __var partNum = 0;
[02:03:24.481]        // -> [partNum <= 0x00000000]
[02:03:24.481]      __var manuf = 0;
[02:03:24.481]        // -> [manuf <= 0x00000000]
[02:03:24.481]      __var isMSPM0G1X0X_G3X0X = 0;
[02:03:24.481]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:03:24.481]      __var isProduction = 0;
[02:03:24.481]        // -> [isProduction <= 0x00000000]
[02:03:24.481]      __var continueId = 0;
[02:03:24.481]        // -> [continueId <= 0x00000000]
[02:03:24.481]      deviceID =   Read32(0x41C40004);
[02:03:24.491]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:03:24.491]        // -> [deviceID <= 0x2BB8802F]
[02:03:24.491]      version = deviceID >> 28;
[02:03:24.491]        // -> [version <= 0x00000002]
[02:03:24.491]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:03:24.491]        // -> [partNum <= 0x0000BB88]
[02:03:24.491]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:03:24.491]        // -> [manuf <= 0x00000017]
[02:03:24.491]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:03:24.491]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:03:24.491]      isProduction = (version > 0);
[02:03:24.492]        // -> [isProduction <= 0x00000001]
[02:03:24.492]    </block>
[02:03:24.492]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:03:24.492]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:03:24.492]        // =>  FALSE
[02:03:24.492]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:03:24.492]    </control>
[02:03:24.492]    <control if="continueId == 4" while="" timeout="0" info="">
[02:03:24.492]      // if-block "continueId == 4"
[02:03:24.492]        // =>  FALSE
[02:03:24.492]      // skip if-block "continueId == 4"
[02:03:24.492]    </control>
[02:03:24.492]    <control if="!isProduction" while="" timeout="0" info="">
[02:03:24.492]      // if-block "!isProduction"
[02:03:24.494]        // =>  FALSE
[02:03:24.494]      // skip if-block "!isProduction"
[02:03:24.494]    </control>
[02:03:24.494]  </sequence>
[02:03:24.494]  
[02:05:28.990]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:05:28.990]  
[02:05:28.992]  <debugvars>
[02:05:28.992]    // Pre-defined
[02:05:28.992]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:05:28.992]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:05:28.992]    __dp=0x00000000
[02:05:28.992]    __ap=0x00000000
[02:05:28.993]    __traceout=0x00000000      (Trace Disabled)
[02:05:28.993]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:05:28.993]    __FlashAddr=0x00000000
[02:05:28.993]    __FlashLen=0x00000000
[02:05:28.993]    __FlashArg=0x00000000
[02:05:28.993]    __FlashOp=0x00000000
[02:05:28.993]    __Result=0x00000000
[02:05:28.993]  </debugvars>
[02:05:28.993]  
[02:05:28.993]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:05:28.993]    <block atomic="false" info="">
[02:05:28.993]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:05:28.994]        // -> [isSWJ <= 0x00000001]
[02:05:28.994]      __var hasDormant = __protocol & 0x00020000;
[02:05:28.994]        // -> [hasDormant <= 0x00000000]
[02:05:28.994]      __var protType   = __protocol & 0x0000FFFF;
[02:05:28.994]        // -> [protType <= 0x00000002]
[02:05:28.995]    </block>
[02:05:28.995]    <control if="protType == 1" while="" timeout="0" info="">
[02:05:28.995]      // if-block "protType == 1"
[02:05:28.995]        // =>  FALSE
[02:05:28.995]      // skip if-block "protType == 1"
[02:05:28.995]    </control>
[02:05:28.995]    <control if="protType == 2" while="" timeout="0" info="">
[02:05:28.995]      // if-block "protType == 2"
[02:05:28.995]        // =>  TRUE
[02:05:28.995]      <control if="isSWJ" while="" timeout="0" info="">
[02:05:28.995]        // if-block "isSWJ"
[02:05:28.995]          // =>  TRUE
[02:05:28.995]        <control if="hasDormant" while="" timeout="0" info="">
[02:05:28.995]          // if-block "hasDormant"
[02:05:28.995]            // =>  FALSE
[02:05:28.995]          // skip if-block "hasDormant"
[02:05:28.995]        </control>
[02:05:28.995]        <control if="!hasDormant" while="" timeout="0" info="">
[02:05:28.995]          // if-block "!hasDormant"
[02:05:28.995]            // =>  TRUE
[02:05:28.995]          <block atomic="false" info="">
[02:05:28.995]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:05:28.995]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:05:28.995]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:05:28.995]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:05:28.995]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:05:29.002]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:05:29.002]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:05:29.009]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:05:29.009]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:05:29.015]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:05:29.015]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:05:29.015]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:05:29.015]          </block>
[02:05:29.015]          // end if-block "!hasDormant"
[02:05:29.015]        </control>
[02:05:29.015]        // end if-block "isSWJ"
[02:05:29.015]      </control>
[02:05:29.015]      <control if="!isSWJ" while="" timeout="0" info="">
[02:05:29.015]        // if-block "!isSWJ"
[02:05:29.015]          // =>  FALSE
[02:05:29.015]        // skip if-block "!isSWJ"
[02:05:29.015]      </control>
[02:05:29.015]      <block atomic="false" info="">
[02:05:29.015]        ReadDP(0x0);
[02:05:29.024]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:05:29.024]      </block>
[02:05:29.024]      // end if-block "protType == 2"
[02:05:29.024]    </control>
[02:05:29.024]  </sequence>
[02:05:29.024]  
[02:05:29.029]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:05:29.029]  
[02:05:29.029]  <debugvars>
[02:05:29.029]    // Pre-defined
[02:05:29.030]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:05:29.030]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:05:29.030]    __dp=0x00000000
[02:05:29.030]    __ap=0x00000000
[02:05:29.030]    __traceout=0x00000000      (Trace Disabled)
[02:05:29.030]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:05:29.030]    __FlashAddr=0x00000000
[02:05:29.030]    __FlashLen=0x00000000
[02:05:29.030]    __FlashArg=0x00000000
[02:05:29.030]    __FlashOp=0x00000000
[02:05:29.030]    __Result=0x00000000
[02:05:29.030]  </debugvars>
[02:05:29.030]  
[02:05:29.030]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:05:29.030]    <block atomic="false" info="">
[02:05:29.030]      __var SW_DP_ABORT       = 0x0;
[02:05:29.030]        // -> [SW_DP_ABORT <= 0x00000000]
[02:05:29.030]      __var DP_CTRL_STAT      = 0x4;
[02:05:29.032]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:05:29.032]      __var DP_SELECT         = 0x8;
[02:05:29.032]        // -> [DP_SELECT <= 0x00000008]
[02:05:29.032]      __var powered_down      = 0;
[02:05:29.032]        // -> [powered_down <= 0x00000000]
[02:05:29.032]      WriteDP(DP_SELECT, 0x00000000);
[02:05:29.034]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:05:29.034]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:05:29.035]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:05:29.035]        // -> [powered_down <= 0x00000001]
[02:05:29.035]    </block>
[02:05:29.037]    <control if="powered_down" while="" timeout="0" info="">
[02:05:29.037]      // if-block "powered_down"
[02:05:29.037]        // =>  TRUE
[02:05:29.037]      <block atomic="false" info="">
[02:05:29.037]        Message(0, "Debug/System power-up request sent");
[02:05:29.037]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:05:29.041]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:05:29.041]      </block>
[02:05:29.041]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:05:29.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:05:29.041]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:05:29.041]        // while-condition  =>  FALSE
[02:05:29.041]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:05:29.041]      </control>
[02:05:29.043]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:05:29.043]        // if-block "(__protocol & 0xFFFF) == 1"
[02:05:29.043]          // =>  FALSE
[02:05:29.043]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:05:29.043]      </control>
[02:05:29.043]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:05:29.043]        // if-block "(__protocol & 0xFFFF) == 2"
[02:05:29.043]          // =>  TRUE
[02:05:29.043]        <block atomic="false" info="">
[02:05:29.043]          Message(0, "executing SWD power up");
[02:05:29.045]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:05:29.047]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:05:29.047]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:05:29.049]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:05:29.049]        </block>
[02:05:29.049]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:05:29.049]      </control>
[02:05:29.049]      // end if-block "powered_down"
[02:05:29.049]    </control>
[02:05:29.049]    <block atomic="false" info="">
[02:05:29.049]      __var DEBUG_PORT_VAL    = 0;
[02:05:29.049]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:05:29.049]      __var ACCESS_POINT_VAL  = 0;
[02:05:29.049]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:05:29.049]      __ap = 1; 
[02:05:29.049]        // -> [__ap <= 0x00000001]
[02:05:29.049]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:05:29.055]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:05:29.055]      __ap = 4;
[02:05:29.055]        // -> [__ap <= 0x00000004]
[02:05:29.055]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:05:29.063]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:05:29.063]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:05:29.063]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:05:29.065]    </block>
[02:05:29.065]    <block atomic="false" info="">
[02:05:29.065]      __var nReset = 0x80;
[02:05:29.065]        // -> [nReset <= 0x00000080]
[02:05:29.065]      __var canReadPins = 0;
[02:05:29.065]        // -> [canReadPins <= 0x00000000]
[02:05:29.065]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:05:29.065]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:05:29.065]        // -> [canReadPins <= 0x00000001]
[02:05:29.065]    </block>
[02:05:29.065]    <control if="" while="1" timeout="200" info="">
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.065]      // while "1"  (timeout="200")
[02:05:29.065]      // while-condition  =>  TRUE
[02:05:29.075]      // while "1"  (timeout="200")
[02:05:29.075]      // while  =>  TIMEOUT
[02:05:29.075]      // end while "1"
[02:05:29.075]    </control>
[02:05:29.075]    <control if="canReadPins" while="" timeout="0" info="">
[02:05:29.075]      // if-block "canReadPins"
[02:05:29.075]        // =>  TRUE
[02:05:29.075]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:05:29.075]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:05:29.075]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:05:29.075]        // while-condition  =>  FALSE
[02:05:29.075]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:05:29.075]      </control>
[02:05:29.075]      // end if-block "canReadPins"
[02:05:29.075]    </control>
[02:05:29.075]    <control if="!canReadPins" while="" timeout="0" info="">
[02:05:29.075]      // if-block "!canReadPins"
[02:05:29.075]        // =>  FALSE
[02:05:29.075]      // skip if-block "!canReadPins"
[02:05:29.075]    </control>
[02:05:29.075]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:05:29.075]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:05:29.075]        // =>  TRUE
[02:05:29.075]      <block atomic="false" info="">
[02:05:29.075]        WriteAP(0x00, 0x190008);
[02:05:29.085]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:05:29.085]        WriteAP(0xF0, 0x01);
[02:05:29.085]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:05:29.085]      </block>
[02:05:29.085]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:05:29.085]    </control>
[02:05:29.085]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:05:29.085]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:05:29.085]        // =>  FALSE
[02:05:29.085]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:05:29.085]    </control>
[02:05:29.085]    <block atomic="false" info="">
[02:05:29.085]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:05:29.095]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:05:29.095]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:05:29.095]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:05:29.095]      __ap = 0; //lets make sure we reset the access point selection
[02:05:29.095]        // -> [__ap <= 0x00000000]
[02:05:29.095]    </block>
[02:05:29.095]  </sequence>
[02:05:29.095]  
[02:05:29.145]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:05:29.145]  
[02:05:29.145]  <debugvars>
[02:05:29.145]    // Pre-defined
[02:05:29.145]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:05:29.145]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:05:29.145]    __dp=0x00000000
[02:05:29.145]    __ap=0x00000000
[02:05:29.145]    __traceout=0x00000000      (Trace Disabled)
[02:05:29.145]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:05:29.145]    __FlashAddr=0x00000000
[02:05:29.146]    __FlashLen=0x00000000
[02:05:29.146]    __FlashArg=0x00000000
[02:05:29.146]    __FlashOp=0x00000000
[02:05:29.146]    __Result=0x00000000
[02:05:29.146]  </debugvars>
[02:05:29.146]  
[02:05:29.146]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:05:29.146]    <block atomic="false" info="">
[02:05:29.146]      __var deviceID = 0;
[02:05:29.146]        // -> [deviceID <= 0x00000000]
[02:05:29.146]      __var version = 0;
[02:05:29.146]        // -> [version <= 0x00000000]
[02:05:29.146]      __var partNum = 0;
[02:05:29.146]        // -> [partNum <= 0x00000000]
[02:05:29.146]      __var manuf = 0;
[02:05:29.146]        // -> [manuf <= 0x00000000]
[02:05:29.146]      __var isMSPM0G1X0X_G3X0X = 0;
[02:05:29.148]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:05:29.148]      __var isProduction = 0;
[02:05:29.148]        // -> [isProduction <= 0x00000000]
[02:05:29.148]      __var continueId = 0;
[02:05:29.148]        // -> [continueId <= 0x00000000]
[02:05:29.148]      deviceID =   Read32(0x41C40004);
[02:05:29.153]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:05:29.153]        // -> [deviceID <= 0x2BB8802F]
[02:05:29.153]      version = deviceID >> 28;
[02:05:29.153]        // -> [version <= 0x00000002]
[02:05:29.153]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:05:29.153]        // -> [partNum <= 0x0000BB88]
[02:05:29.153]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:05:29.153]        // -> [manuf <= 0x00000017]
[02:05:29.153]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:05:29.153]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:05:29.153]      isProduction = (version > 0);
[02:05:29.153]        // -> [isProduction <= 0x00000001]
[02:05:29.155]    </block>
[02:05:29.155]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:05:29.155]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:05:29.155]        // =>  FALSE
[02:05:29.155]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:05:29.155]    </control>
[02:05:29.155]    <control if="continueId == 4" while="" timeout="0" info="">
[02:05:29.155]      // if-block "continueId == 4"
[02:05:29.155]        // =>  FALSE
[02:05:29.155]      // skip if-block "continueId == 4"
[02:05:29.155]    </control>
[02:05:29.155]    <control if="!isProduction" while="" timeout="0" info="">
[02:05:29.155]      // if-block "!isProduction"
[02:05:29.155]        // =>  FALSE
[02:05:29.155]      // skip if-block "!isProduction"
[02:05:29.155]    </control>
[02:05:29.155]  </sequence>
[02:05:29.155]  
[02:11:40.642]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:11:40.642]  
[02:11:40.655]  <debugvars>
[02:11:40.655]    // Pre-defined
[02:11:40.655]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:11:40.655]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:11:40.655]    __dp=0x00000000
[02:11:40.655]    __ap=0x00000000
[02:11:40.655]    __traceout=0x00000000      (Trace Disabled)
[02:11:40.655]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:11:40.655]    __FlashAddr=0x00000000
[02:11:40.655]    __FlashLen=0x00000000
[02:11:40.655]    __FlashArg=0x00000000
[02:11:40.655]    __FlashOp=0x00000000
[02:11:40.655]    __Result=0x00000000
[02:11:40.655]  </debugvars>
[02:11:40.655]  
[02:11:40.655]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:11:40.655]    <block atomic="false" info="">
[02:11:40.655]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:11:40.655]        // -> [isSWJ <= 0x00000001]
[02:11:40.655]      __var hasDormant = __protocol & 0x00020000;
[02:11:40.655]        // -> [hasDormant <= 0x00000000]
[02:11:40.655]      __var protType   = __protocol & 0x0000FFFF;
[02:11:40.655]        // -> [protType <= 0x00000002]
[02:11:40.655]    </block>
[02:11:40.655]    <control if="protType == 1" while="" timeout="0" info="">
[02:11:40.658]      // if-block "protType == 1"
[02:11:40.658]        // =>  FALSE
[02:11:40.658]      // skip if-block "protType == 1"
[02:11:40.658]    </control>
[02:11:40.658]    <control if="protType == 2" while="" timeout="0" info="">
[02:11:40.658]      // if-block "protType == 2"
[02:11:40.658]        // =>  TRUE
[02:11:40.658]      <control if="isSWJ" while="" timeout="0" info="">
[02:11:40.658]        // if-block "isSWJ"
[02:11:40.658]          // =>  TRUE
[02:11:40.658]        <control if="hasDormant" while="" timeout="0" info="">
[02:11:40.658]          // if-block "hasDormant"
[02:11:40.658]            // =>  FALSE
[02:11:40.658]          // skip if-block "hasDormant"
[02:11:40.658]        </control>
[02:11:40.658]        <control if="!hasDormant" while="" timeout="0" info="">
[02:11:40.658]          // if-block "!hasDormant"
[02:11:40.659]            // =>  TRUE
[02:11:40.659]          <block atomic="false" info="">
[02:11:40.659]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:11:40.660]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:11:40.660]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:11:40.662]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:11:40.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:11:40.662]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:11:40.662]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:11:40.662]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:11:40.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:11:40.662]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:11:40.662]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:11:40.662]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:11:40.662]          </block>
[02:11:40.662]          // end if-block "!hasDormant"
[02:11:40.662]        </control>
[02:11:40.662]        // end if-block "isSWJ"
[02:11:40.662]      </control>
[02:11:40.662]      <control if="!isSWJ" while="" timeout="0" info="">
[02:11:40.662]        // if-block "!isSWJ"
[02:11:40.662]          // =>  FALSE
[02:11:40.662]        // skip if-block "!isSWJ"
[02:11:40.662]      </control>
[02:11:40.672]      <block atomic="false" info="">
[02:11:40.672]        ReadDP(0x0);
[02:11:40.672]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:11:40.672]      </block>
[02:11:40.672]      // end if-block "protType == 2"
[02:11:40.672]    </control>
[02:11:40.672]  </sequence>
[02:11:40.672]  
[02:11:40.682]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:11:40.682]  
[02:11:40.682]  <debugvars>
[02:11:40.682]    // Pre-defined
[02:11:40.682]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:11:40.682]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:11:40.682]    __dp=0x00000000
[02:11:40.682]    __ap=0x00000000
[02:11:40.682]    __traceout=0x00000000      (Trace Disabled)
[02:11:40.682]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:11:40.682]    __FlashAddr=0x00000000
[02:11:40.682]    __FlashLen=0x00000000
[02:11:40.682]    __FlashArg=0x00000000
[02:11:40.682]    __FlashOp=0x00000000
[02:11:40.682]    __Result=0x00000000
[02:11:40.682]  </debugvars>
[02:11:40.682]  
[02:11:40.682]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:11:40.682]    <block atomic="false" info="">
[02:11:40.682]      __var SW_DP_ABORT       = 0x0;
[02:11:40.687]        // -> [SW_DP_ABORT <= 0x00000000]
[02:11:40.687]      __var DP_CTRL_STAT      = 0x4;
[02:11:40.687]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:11:40.687]      __var DP_SELECT         = 0x8;
[02:11:40.687]        // -> [DP_SELECT <= 0x00000008]
[02:11:40.687]      __var powered_down      = 0;
[02:11:40.687]        // -> [powered_down <= 0x00000000]
[02:11:40.687]      WriteDP(DP_SELECT, 0x00000000);
[02:11:40.695]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:11:40.695]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:11:40.695]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:11:40.695]        // -> [powered_down <= 0x00000001]
[02:11:40.699]    </block>
[02:11:40.699]    <control if="powered_down" while="" timeout="0" info="">
[02:11:40.699]      // if-block "powered_down"
[02:11:40.699]        // =>  TRUE
[02:11:40.699]      <block atomic="false" info="">
[02:11:40.699]        Message(0, "Debug/System power-up request sent");
[02:11:40.700]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:11:40.700]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:11:40.700]      </block>
[02:11:40.703]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:11:40.703]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:11:40.703]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:11:40.703]        // while-condition  =>  FALSE
[02:11:40.703]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:11:40.703]      </control>
[02:11:40.703]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:11:40.703]        // if-block "(__protocol & 0xFFFF) == 1"
[02:11:40.703]          // =>  FALSE
[02:11:40.703]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:11:40.703]      </control>
[02:11:40.703]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:11:40.703]        // if-block "(__protocol & 0xFFFF) == 2"
[02:11:40.703]          // =>  TRUE
[02:11:40.703]        <block atomic="false" info="">
[02:11:40.703]          Message(0, "executing SWD power up");
[02:11:40.708]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:11:40.713]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:11:40.713]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:11:40.714]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:11:40.714]        </block>
[02:11:40.714]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:11:40.714]      </control>
[02:11:40.714]      // end if-block "powered_down"
[02:11:40.714]    </control>
[02:11:40.714]    <block atomic="false" info="">
[02:11:40.714]      __var DEBUG_PORT_VAL    = 0;
[02:11:40.714]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:11:40.714]      __var ACCESS_POINT_VAL  = 0;
[02:11:40.714]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:11:40.714]      __ap = 1; 
[02:11:40.714]        // -> [__ap <= 0x00000001]
[02:11:40.714]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:11:40.724]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:11:40.724]      __ap = 4;
[02:11:40.724]        // -> [__ap <= 0x00000004]
[02:11:40.724]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:11:40.742]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:11:40.742]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:11:40.742]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:11:40.746]    </block>
[02:11:40.746]    <block atomic="false" info="">
[02:11:40.746]      __var nReset = 0x80;
[02:11:40.746]        // -> [nReset <= 0x00000080]
[02:11:40.746]      __var canReadPins = 0;
[02:11:40.746]        // -> [canReadPins <= 0x00000000]
[02:11:40.746]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:11:40.746]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:11:40.749]        // -> [canReadPins <= 0x00000001]
[02:11:40.749]    </block>
[02:11:40.749]    <control if="" while="1" timeout="200" info="">
[02:11:40.749]      // while "1"  (timeout="200")
[02:11:40.749]      // while-condition  =>  TRUE
[02:11:40.749]      // while "1"  (timeout="200")
[02:11:40.749]      // while-condition  =>  TRUE
[02:11:40.749]      // while "1"  (timeout="200")
[02:11:40.749]      // while-condition  =>  TRUE
[02:11:40.749]      // while "1"  (timeout="200")
[02:11:40.751]      // while-condition  =>  TRUE
[02:11:40.751]      // while "1"  (timeout="200")
[02:11:40.751]      // while-condition  =>  TRUE
[02:11:40.751]      // while "1"  (timeout="200")
[02:11:40.751]      // while-condition  =>  TRUE
[02:11:40.751]      // while "1"  (timeout="200")
[02:11:40.751]      // while-condition  =>  TRUE
[02:11:40.751]      // while "1"  (timeout="200")
[02:11:40.751]      // while-condition  =>  TRUE
[02:11:40.751]      // while "1"  (timeout="200")
[02:11:40.751]      // while-condition  =>  TRUE
[02:11:40.751]      // while "1"  (timeout="200")
[02:11:40.751]      // while-condition  =>  TRUE
[02:11:40.751]      // while "1"  (timeout="200")
[02:11:40.751]      // while-condition  =>  TRUE
[02:11:40.752]      // while "1"  (timeout="200")
[02:11:40.752]      // while-condition  =>  TRUE
[02:11:40.752]      // while "1"  (timeout="200")
[02:11:40.752]      // while-condition  =>  TRUE
[02:11:40.752]      // while "1"  (timeout="200")
[02:11:40.752]      // while-condition  =>  TRUE
[02:11:40.752]      // while "1"  (timeout="200")
[02:11:40.752]      // while-condition  =>  TRUE
[02:11:40.752]      // while "1"  (timeout="200")
[02:11:40.752]      // while-condition  =>  TRUE
[02:11:40.752]      // while "1"  (timeout="200")
[02:11:40.752]      // while-condition  =>  TRUE
[02:11:40.752]      // while "1"  (timeout="200")
[02:11:40.752]      // while-condition  =>  TRUE
[02:11:40.752]      // while "1"  (timeout="200")
[02:11:40.752]      // while-condition  =>  TRUE
[02:11:40.754]      // while "1"  (timeout="200")
[02:11:40.754]      // while  =>  TIMEOUT
[02:11:40.754]      // end while "1"
[02:11:40.754]    </control>
[02:11:40.754]    <control if="canReadPins" while="" timeout="0" info="">
[02:11:40.754]      // if-block "canReadPins"
[02:11:40.754]        // =>  TRUE
[02:11:40.754]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:11:40.754]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:11:40.759]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:11:40.760]        // while-condition  =>  FALSE
[02:11:40.760]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:11:40.760]      </control>
[02:11:40.760]      // end if-block "canReadPins"
[02:11:40.760]    </control>
[02:11:40.760]    <control if="!canReadPins" while="" timeout="0" info="">
[02:11:40.760]      // if-block "!canReadPins"
[02:11:40.760]        // =>  FALSE
[02:11:40.760]      // skip if-block "!canReadPins"
[02:11:40.760]    </control>
[02:11:40.760]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:11:40.760]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:11:40.760]        // =>  TRUE
[02:11:40.760]      <block atomic="false" info="">
[02:11:40.760]        WriteAP(0x00, 0x190008);
[02:11:40.762]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:11:40.762]        WriteAP(0xF0, 0x01);
[02:11:40.766]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:11:40.766]      </block>
[02:11:40.766]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:11:40.766]    </control>
[02:11:40.766]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:11:40.766]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:11:40.766]        // =>  FALSE
[02:11:40.766]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:11:40.766]    </control>
[02:11:40.766]    <block atomic="false" info="">
[02:11:40.766]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:11:40.770]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:11:40.770]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:11:40.770]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:11:40.770]      __ap = 0; //lets make sure we reset the access point selection
[02:11:40.770]        // -> [__ap <= 0x00000000]
[02:11:40.770]    </block>
[02:11:40.770]  </sequence>
[02:11:40.774]  
[02:11:40.833]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:11:40.833]  
[02:11:40.833]  <debugvars>
[02:11:40.833]    // Pre-defined
[02:11:40.833]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:11:40.833]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:11:40.833]    __dp=0x00000000
[02:11:40.833]    __ap=0x00000000
[02:11:40.833]    __traceout=0x00000000      (Trace Disabled)
[02:11:40.833]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:11:40.833]    __FlashAddr=0x00000000
[02:11:40.833]    __FlashLen=0x00000000
[02:11:40.833]    __FlashArg=0x00000000
[02:11:40.835]    __FlashOp=0x00000000
[02:11:40.835]    __Result=0x00000000
[02:11:40.835]  </debugvars>
[02:11:40.835]  
[02:11:40.835]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:11:40.835]    <block atomic="false" info="">
[02:11:40.836]      __var deviceID = 0;
[02:11:40.836]        // -> [deviceID <= 0x00000000]
[02:11:40.836]      __var version = 0;
[02:11:40.836]        // -> [version <= 0x00000000]
[02:11:40.836]      __var partNum = 0;
[02:11:40.836]        // -> [partNum <= 0x00000000]
[02:11:40.836]      __var manuf = 0;
[02:11:40.836]        // -> [manuf <= 0x00000000]
[02:11:40.836]      __var isMSPM0G1X0X_G3X0X = 0;
[02:11:40.836]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:11:40.837]      __var isProduction = 0;
[02:11:40.837]        // -> [isProduction <= 0x00000000]
[02:11:40.837]      __var continueId = 0;
[02:11:40.837]        // -> [continueId <= 0x00000000]
[02:11:40.837]      deviceID =   Read32(0x41C40004);
[02:11:40.843]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:11:40.843]        // -> [deviceID <= 0x2BB8802F]
[02:11:40.843]      version = deviceID >> 28;
[02:11:40.843]        // -> [version <= 0x00000002]
[02:11:40.843]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:11:40.843]        // -> [partNum <= 0x0000BB88]
[02:11:40.843]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:11:40.843]        // -> [manuf <= 0x00000017]
[02:11:40.843]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:11:40.843]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:11:40.843]      isProduction = (version > 0);
[02:11:40.843]        // -> [isProduction <= 0x00000001]
[02:11:40.845]    </block>
[02:11:40.845]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:11:40.845]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:11:40.845]        // =>  FALSE
[02:11:40.845]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:11:40.845]    </control>
[02:11:40.846]    <control if="continueId == 4" while="" timeout="0" info="">
[02:11:40.846]      // if-block "continueId == 4"
[02:11:40.846]        // =>  FALSE
[02:11:40.846]      // skip if-block "continueId == 4"
[02:11:40.846]    </control>
[02:11:40.846]    <control if="!isProduction" while="" timeout="0" info="">
[02:11:40.846]      // if-block "!isProduction"
[02:11:40.846]        // =>  FALSE
[02:11:40.846]      // skip if-block "!isProduction"
[02:11:40.846]    </control>
[02:11:40.846]  </sequence>
[02:11:40.846]  
[02:12:24.969]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:12:24.969]  
[02:12:24.977]  <debugvars>
[02:12:24.977]    // Pre-defined
[02:12:24.977]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:12:24.977]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:12:24.977]    __dp=0x00000000
[02:12:24.977]    __ap=0x00000000
[02:12:24.977]    __traceout=0x00000000      (Trace Disabled)
[02:12:24.977]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:12:24.977]    __FlashAddr=0x00000000
[02:12:24.977]    __FlashLen=0x00000000
[02:12:24.977]    __FlashArg=0x00000000
[02:12:24.977]    __FlashOp=0x00000000
[02:12:24.977]    __Result=0x00000000
[02:12:24.977]  </debugvars>
[02:12:24.977]  
[02:12:24.977]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:12:24.977]    <block atomic="false" info="">
[02:12:24.977]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:12:24.977]        // -> [isSWJ <= 0x00000001]
[02:12:24.977]      __var hasDormant = __protocol & 0x00020000;
[02:12:24.977]        // -> [hasDormant <= 0x00000000]
[02:12:24.977]      __var protType   = __protocol & 0x0000FFFF;
[02:12:24.980]        // -> [protType <= 0x00000002]
[02:12:24.980]    </block>
[02:12:24.980]    <control if="protType == 1" while="" timeout="0" info="">
[02:12:24.980]      // if-block "protType == 1"
[02:12:24.980]        // =>  FALSE
[02:12:24.980]      // skip if-block "protType == 1"
[02:12:24.980]    </control>
[02:12:24.980]    <control if="protType == 2" while="" timeout="0" info="">
[02:12:24.980]      // if-block "protType == 2"
[02:12:24.980]        // =>  TRUE
[02:12:24.980]      <control if="isSWJ" while="" timeout="0" info="">
[02:12:24.980]        // if-block "isSWJ"
[02:12:24.980]          // =>  TRUE
[02:12:24.980]        <control if="hasDormant" while="" timeout="0" info="">
[02:12:24.980]          // if-block "hasDormant"
[02:12:24.980]            // =>  FALSE
[02:12:24.980]          // skip if-block "hasDormant"
[02:12:24.980]        </control>
[02:12:24.980]        <control if="!hasDormant" while="" timeout="0" info="">
[02:12:24.980]          // if-block "!hasDormant"
[02:12:24.980]            // =>  TRUE
[02:12:24.980]          <block atomic="false" info="">
[02:12:24.980]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:12:24.980]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:12:24.980]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:12:24.985]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:12:24.985]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:12:24.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:12:24.985]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:12:24.985]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:12:24.985]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:12:24.990]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:12:24.990]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:12:24.990]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:12:24.990]          </block>
[02:12:24.990]          // end if-block "!hasDormant"
[02:12:24.990]        </control>
[02:12:24.990]        // end if-block "isSWJ"
[02:12:24.990]      </control>
[02:12:24.990]      <control if="!isSWJ" while="" timeout="0" info="">
[02:12:24.990]        // if-block "!isSWJ"
[02:12:24.990]          // =>  FALSE
[02:12:24.990]        // skip if-block "!isSWJ"
[02:12:24.990]      </control>
[02:12:24.990]      <block atomic="false" info="">
[02:12:24.990]        ReadDP(0x0);
[02:12:24.990]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:12:24.990]      </block>
[02:12:24.990]      // end if-block "protType == 2"
[02:12:24.990]    </control>
[02:12:24.990]  </sequence>
[02:12:24.990]  
[02:12:25.000]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:12:25.000]  
[02:12:25.000]  <debugvars>
[02:12:25.000]    // Pre-defined
[02:12:25.000]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:12:25.000]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:12:25.000]    __dp=0x00000000
[02:12:25.000]    __ap=0x00000000
[02:12:25.000]    __traceout=0x00000000      (Trace Disabled)
[02:12:25.000]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:12:25.000]    __FlashAddr=0x00000000
[02:12:25.000]    __FlashLen=0x00000000
[02:12:25.000]    __FlashArg=0x00000000
[02:12:25.000]    __FlashOp=0x00000000
[02:12:25.000]    __Result=0x00000000
[02:12:25.000]  </debugvars>
[02:12:25.000]  
[02:12:25.000]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:12:25.000]    <block atomic="false" info="">
[02:12:25.000]      __var SW_DP_ABORT       = 0x0;
[02:12:25.000]        // -> [SW_DP_ABORT <= 0x00000000]
[02:12:25.000]      __var DP_CTRL_STAT      = 0x4;
[02:12:25.000]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:12:25.000]      __var DP_SELECT         = 0x8;
[02:12:25.000]        // -> [DP_SELECT <= 0x00000008]
[02:12:25.000]      __var powered_down      = 0;
[02:12:25.000]        // -> [powered_down <= 0x00000000]
[02:12:25.000]      WriteDP(DP_SELECT, 0x00000000);
[02:12:25.000]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:12:25.000]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:12:25.000]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:12:25.000]        // -> [powered_down <= 0x00000001]
[02:12:25.000]    </block>
[02:12:25.000]    <control if="powered_down" while="" timeout="0" info="">
[02:12:25.000]      // if-block "powered_down"
[02:12:25.000]        // =>  TRUE
[02:12:25.000]      <block atomic="false" info="">
[02:12:25.000]        Message(0, "Debug/System power-up request sent");
[02:12:25.000]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:12:25.010]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:12:25.010]      </block>
[02:12:25.010]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:12:25.010]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:12:25.013]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:12:25.013]        // while-condition  =>  FALSE
[02:12:25.013]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:12:25.013]      </control>
[02:12:25.013]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:12:25.013]        // if-block "(__protocol & 0xFFFF) == 1"
[02:12:25.013]          // =>  FALSE
[02:12:25.013]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:12:25.013]      </control>
[02:12:25.013]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:12:25.013]        // if-block "(__protocol & 0xFFFF) == 2"
[02:12:25.013]          // =>  TRUE
[02:12:25.013]        <block atomic="false" info="">
[02:12:25.013]          Message(0, "executing SWD power up");
[02:12:25.021]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:12:25.021]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:12:25.021]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:12:25.021]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:12:25.021]        </block>
[02:12:25.021]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:12:25.021]      </control>
[02:12:25.021]      // end if-block "powered_down"
[02:12:25.021]    </control>
[02:12:25.021]    <block atomic="false" info="">
[02:12:25.021]      __var DEBUG_PORT_VAL    = 0;
[02:12:25.021]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:12:25.021]      __var ACCESS_POINT_VAL  = 0;
[02:12:25.021]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:12:25.021]      __ap = 1; 
[02:12:25.021]        // -> [__ap <= 0x00000001]
[02:12:25.021]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:12:25.030]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:12:25.030]      __ap = 4;
[02:12:25.030]        // -> [__ap <= 0x00000004]
[02:12:25.030]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:12:25.030]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:12:25.030]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:12:25.030]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:12:25.040]    </block>
[02:12:25.040]    <block atomic="false" info="">
[02:12:25.040]      __var nReset = 0x80;
[02:12:25.040]        // -> [nReset <= 0x00000080]
[02:12:25.040]      __var canReadPins = 0;
[02:12:25.040]        // -> [canReadPins <= 0x00000000]
[02:12:25.040]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:12:25.040]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:12:25.040]        // -> [canReadPins <= 0x00000001]
[02:12:25.040]    </block>
[02:12:25.040]    <control if="" while="1" timeout="200" info="">
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.040]      // while "1"  (timeout="200")
[02:12:25.040]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.050]      // while "1"  (timeout="200")
[02:12:25.050]      // while-condition  =>  TRUE
[02:12:25.060]      // while "1"  (timeout="200")
[02:12:25.060]      // while  =>  TIMEOUT
[02:12:25.060]      // end while "1"
[02:12:25.060]    </control>
[02:12:25.060]    <control if="canReadPins" while="" timeout="0" info="">
[02:12:25.060]      // if-block "canReadPins"
[02:12:25.060]        // =>  TRUE
[02:12:25.060]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:12:25.060]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:12:25.060]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:12:25.060]        // while-condition  =>  FALSE
[02:12:25.060]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:12:25.060]      </control>
[02:12:25.060]      // end if-block "canReadPins"
[02:12:25.060]    </control>
[02:12:25.060]    <control if="!canReadPins" while="" timeout="0" info="">
[02:12:25.060]      // if-block "!canReadPins"
[02:12:25.060]        // =>  FALSE
[02:12:25.060]      // skip if-block "!canReadPins"
[02:12:25.060]    </control>
[02:12:25.060]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:12:25.060]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:12:25.060]        // =>  TRUE
[02:12:25.060]      <block atomic="false" info="">
[02:12:25.060]        WriteAP(0x00, 0x190008);
[02:12:25.060]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:12:25.060]        WriteAP(0xF0, 0x01);
[02:12:25.070]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:12:25.070]      </block>
[02:12:25.070]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:12:25.070]    </control>
[02:12:25.070]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:12:25.070]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:12:25.070]        // =>  FALSE
[02:12:25.070]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:12:25.076]    </control>
[02:12:25.076]    <block atomic="false" info="">
[02:12:25.076]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:12:25.076]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:12:25.076]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:12:25.076]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:12:25.080]      __ap = 0; //lets make sure we reset the access point selection
[02:12:25.080]        // -> [__ap <= 0x00000000]
[02:12:25.080]    </block>
[02:12:25.080]  </sequence>
[02:12:25.080]  
[02:12:25.114]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:12:25.114]  
[02:12:25.114]  <debugvars>
[02:12:25.114]    // Pre-defined
[02:12:25.114]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:12:25.114]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:12:25.114]    __dp=0x00000000
[02:12:25.114]    __ap=0x00000000
[02:12:25.114]    __traceout=0x00000000      (Trace Disabled)
[02:12:25.114]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:12:25.114]    __FlashAddr=0x00000000
[02:12:25.114]    __FlashLen=0x00000000
[02:12:25.114]    __FlashArg=0x00000000
[02:12:25.116]    __FlashOp=0x00000000
[02:12:25.116]    __Result=0x00000000
[02:12:25.116]  </debugvars>
[02:12:25.116]  
[02:12:25.116]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:12:25.116]    <block atomic="false" info="">
[02:12:25.116]      __var deviceID = 0;
[02:12:25.116]        // -> [deviceID <= 0x00000000]
[02:12:25.116]      __var version = 0;
[02:12:25.116]        // -> [version <= 0x00000000]
[02:12:25.116]      __var partNum = 0;
[02:12:25.116]        // -> [partNum <= 0x00000000]
[02:12:25.116]      __var manuf = 0;
[02:12:25.118]        // -> [manuf <= 0x00000000]
[02:12:25.118]      __var isMSPM0G1X0X_G3X0X = 0;
[02:12:25.118]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:12:25.118]      __var isProduction = 0;
[02:12:25.118]        // -> [isProduction <= 0x00000000]
[02:12:25.118]      __var continueId = 0;
[02:12:25.118]        // -> [continueId <= 0x00000000]
[02:12:25.118]      deviceID =   Read32(0x41C40004);
[02:12:25.121]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:12:25.121]        // -> [deviceID <= 0x2BB8802F]
[02:12:25.121]      version = deviceID >> 28;
[02:12:25.121]        // -> [version <= 0x00000002]
[02:12:25.121]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:12:25.121]        // -> [partNum <= 0x0000BB88]
[02:12:25.121]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:12:25.121]        // -> [manuf <= 0x00000017]
[02:12:25.121]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:12:25.121]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:12:25.121]      isProduction = (version > 0);
[02:12:25.121]        // -> [isProduction <= 0x00000001]
[02:12:25.121]    </block>
[02:12:25.121]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:12:25.121]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:12:25.121]        // =>  FALSE
[02:12:25.121]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:12:25.128]    </control>
[02:12:25.128]    <control if="continueId == 4" while="" timeout="0" info="">
[02:12:25.128]      // if-block "continueId == 4"
[02:12:25.128]        // =>  FALSE
[02:12:25.128]      // skip if-block "continueId == 4"
[02:12:25.128]    </control>
[02:12:25.128]    <control if="!isProduction" while="" timeout="0" info="">
[02:12:25.128]      // if-block "!isProduction"
[02:12:25.128]        // =>  FALSE
[02:12:25.128]      // skip if-block "!isProduction"
[02:12:25.128]    </control>
[02:12:25.128]  </sequence>
[02:12:25.128]  
[02:13:48.692]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:13:48.692]  
[02:13:48.703]  <debugvars>
[02:13:48.703]    // Pre-defined
[02:13:48.703]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:13:48.703]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:13:48.703]    __dp=0x00000000
[02:13:48.703]    __ap=0x00000000
[02:13:48.703]    __traceout=0x00000000      (Trace Disabled)
[02:13:48.703]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:13:48.703]    __FlashAddr=0x00000000
[02:13:48.703]    __FlashLen=0x00000000
[02:13:48.703]    __FlashArg=0x00000000
[02:13:48.703]    __FlashOp=0x00000000
[02:13:48.703]    __Result=0x00000000
[02:13:48.703]  </debugvars>
[02:13:48.703]  
[02:13:48.703]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:13:48.706]    <block atomic="false" info="">
[02:13:48.706]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:13:48.706]        // -> [isSWJ <= 0x00000001]
[02:13:48.706]      __var hasDormant = __protocol & 0x00020000;
[02:13:48.706]        // -> [hasDormant <= 0x00000000]
[02:13:48.706]      __var protType   = __protocol & 0x0000FFFF;
[02:13:48.706]        // -> [protType <= 0x00000002]
[02:13:48.706]    </block>
[02:13:48.706]    <control if="protType == 1" while="" timeout="0" info="">
[02:13:48.706]      // if-block "protType == 1"
[02:13:48.706]        // =>  FALSE
[02:13:48.706]      // skip if-block "protType == 1"
[02:13:48.706]    </control>
[02:13:48.706]    <control if="protType == 2" while="" timeout="0" info="">
[02:13:48.706]      // if-block "protType == 2"
[02:13:48.706]        // =>  TRUE
[02:13:48.706]      <control if="isSWJ" while="" timeout="0" info="">
[02:13:48.706]        // if-block "isSWJ"
[02:13:48.708]          // =>  TRUE
[02:13:48.708]        <control if="hasDormant" while="" timeout="0" info="">
[02:13:48.708]          // if-block "hasDormant"
[02:13:48.708]            // =>  FALSE
[02:13:48.708]          // skip if-block "hasDormant"
[02:13:48.708]        </control>
[02:13:48.708]        <control if="!hasDormant" while="" timeout="0" info="">
[02:13:48.708]          // if-block "!hasDormant"
[02:13:48.708]            // =>  TRUE
[02:13:48.708]          <block atomic="false" info="">
[02:13:48.708]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:13:48.708]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:13:48.708]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:13:48.708]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:13:48.708]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:13:48.713]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:13:48.713]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:13:48.715]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:13:48.715]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:13:48.716]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:13:48.716]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:13:48.716]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:13:48.716]          </block>
[02:13:48.716]          // end if-block "!hasDormant"
[02:13:48.716]        </control>
[02:13:48.716]        // end if-block "isSWJ"
[02:13:48.716]      </control>
[02:13:48.716]      <control if="!isSWJ" while="" timeout="0" info="">
[02:13:48.716]        // if-block "!isSWJ"
[02:13:48.716]          // =>  FALSE
[02:13:48.716]        // skip if-block "!isSWJ"
[02:13:48.716]      </control>
[02:13:48.716]      <block atomic="false" info="">
[02:13:48.716]        ReadDP(0x0);
[02:13:48.716]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:13:48.716]      </block>
[02:13:48.716]      // end if-block "protType == 2"
[02:13:48.716]    </control>
[02:13:48.716]  </sequence>
[02:13:48.716]  
[02:13:48.726]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:13:48.726]  
[02:13:48.726]  <debugvars>
[02:13:48.726]    // Pre-defined
[02:13:48.726]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:13:48.726]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:13:48.726]    __dp=0x00000000
[02:13:48.726]    __ap=0x00000000
[02:13:48.726]    __traceout=0x00000000      (Trace Disabled)
[02:13:48.726]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:13:48.726]    __FlashAddr=0x00000000
[02:13:48.726]    __FlashLen=0x00000000
[02:13:48.726]    __FlashArg=0x00000000
[02:13:48.726]    __FlashOp=0x00000000
[02:13:48.726]    __Result=0x00000000
[02:13:48.726]  </debugvars>
[02:13:48.726]  
[02:13:48.726]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:13:48.726]    <block atomic="false" info="">
[02:13:48.726]      __var SW_DP_ABORT       = 0x0;
[02:13:48.726]        // -> [SW_DP_ABORT <= 0x00000000]
[02:13:48.726]      __var DP_CTRL_STAT      = 0x4;
[02:13:48.726]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:13:48.726]      __var DP_SELECT         = 0x8;
[02:13:48.726]        // -> [DP_SELECT <= 0x00000008]
[02:13:48.726]      __var powered_down      = 0;
[02:13:48.726]        // -> [powered_down <= 0x00000000]
[02:13:48.726]      WriteDP(DP_SELECT, 0x00000000);
[02:13:48.736]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:13:48.736]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:13:48.736]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:13:48.736]        // -> [powered_down <= 0x00000001]
[02:13:48.736]    </block>
[02:13:48.736]    <control if="powered_down" while="" timeout="0" info="">
[02:13:48.736]      // if-block "powered_down"
[02:13:48.736]        // =>  TRUE
[02:13:48.736]      <block atomic="false" info="">
[02:13:48.736]        Message(0, "Debug/System power-up request sent");
[02:13:48.744]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:13:48.744]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:13:48.744]      </block>
[02:13:48.744]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:13:48.744]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:13:48.746]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:13:48.746]        // while-condition  =>  FALSE
[02:13:48.746]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:13:48.746]      </control>
[02:13:48.746]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:13:48.746]        // if-block "(__protocol & 0xFFFF) == 1"
[02:13:48.746]          // =>  FALSE
[02:13:48.746]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:13:48.746]      </control>
[02:13:48.746]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:13:48.746]        // if-block "(__protocol & 0xFFFF) == 2"
[02:13:48.746]          // =>  TRUE
[02:13:48.746]        <block atomic="false" info="">
[02:13:48.746]          Message(0, "executing SWD power up");
[02:13:48.750]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:13:48.755]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:13:48.755]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:13:48.756]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:13:48.756]        </block>
[02:13:48.756]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:13:48.756]      </control>
[02:13:48.756]      // end if-block "powered_down"
[02:13:48.756]    </control>
[02:13:48.756]    <block atomic="false" info="">
[02:13:48.756]      __var DEBUG_PORT_VAL    = 0;
[02:13:48.756]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:13:48.756]      __var ACCESS_POINT_VAL  = 0;
[02:13:48.756]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:13:48.756]      __ap = 1; 
[02:13:48.756]        // -> [__ap <= 0x00000001]
[02:13:48.756]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:13:48.756]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:13:48.764]      __ap = 4;
[02:13:48.764]        // -> [__ap <= 0x00000004]
[02:13:48.764]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:13:48.766]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:13:48.766]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:13:48.766]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:13:48.766]    </block>
[02:13:48.766]    <block atomic="false" info="">
[02:13:48.766]      __var nReset = 0x80;
[02:13:48.766]        // -> [nReset <= 0x00000080]
[02:13:48.766]      __var canReadPins = 0;
[02:13:48.766]        // -> [canReadPins <= 0x00000000]
[02:13:48.766]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:13:48.776]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:13:48.776]        // -> [canReadPins <= 0x00000001]
[02:13:48.776]    </block>
[02:13:48.776]    <control if="" while="1" timeout="200" info="">
[02:13:48.776]      // while "1"  (timeout="200")
[02:13:48.776]      // while-condition  =>  TRUE
[02:13:48.776]      // while "1"  (timeout="200")
[02:13:48.776]      // while-condition  =>  TRUE
[02:13:48.776]      // while "1"  (timeout="200")
[02:13:48.776]      // while-condition  =>  TRUE
[02:13:48.776]      // while "1"  (timeout="200")
[02:13:48.776]      // while-condition  =>  TRUE
[02:13:48.776]      // while "1"  (timeout="200")
[02:13:48.776]      // while-condition  =>  TRUE
[02:13:48.776]      // while "1"  (timeout="200")
[02:13:48.776]      // while-condition  =>  TRUE
[02:13:48.776]      // while "1"  (timeout="200")
[02:13:48.776]      // while-condition  =>  TRUE
[02:13:48.776]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.779]      // while-condition  =>  TRUE
[02:13:48.779]      // while "1"  (timeout="200")
[02:13:48.785]      // while-condition  =>  TRUE
[02:13:48.785]      // while "1"  (timeout="200")
[02:13:48.785]      // while-condition  =>  TRUE
[02:13:48.785]      // while "1"  (timeout="200")
[02:13:48.785]      // while-condition  =>  TRUE
[02:13:48.785]      // while "1"  (timeout="200")
[02:13:48.785]      // while-condition  =>  TRUE
[02:13:48.785]      // while "1"  (timeout="200")
[02:13:48.785]      // while-condition  =>  TRUE
[02:13:48.785]      // while "1"  (timeout="200")
[02:13:48.785]      // while-condition  =>  TRUE
[02:13:48.785]      // while "1"  (timeout="200")
[02:13:48.785]      // while-condition  =>  TRUE
[02:13:48.786]      // while "1"  (timeout="200")
[02:13:48.786]      // while  =>  TIMEOUT
[02:13:48.786]      // end while "1"
[02:13:48.786]    </control>
[02:13:48.786]    <control if="canReadPins" while="" timeout="0" info="">
[02:13:48.786]      // if-block "canReadPins"
[02:13:48.786]        // =>  TRUE
[02:13:48.786]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:13:48.786]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:13:48.788]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:13:48.788]        // while-condition  =>  FALSE
[02:13:48.788]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:13:48.788]      </control>
[02:13:48.788]      // end if-block "canReadPins"
[02:13:48.788]    </control>
[02:13:48.788]    <control if="!canReadPins" while="" timeout="0" info="">
[02:13:48.788]      // if-block "!canReadPins"
[02:13:48.788]        // =>  FALSE
[02:13:48.788]      // skip if-block "!canReadPins"
[02:13:48.788]    </control>
[02:13:48.788]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:13:48.788]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:13:48.788]        // =>  TRUE
[02:13:48.788]      <block atomic="false" info="">
[02:13:48.788]        WriteAP(0x00, 0x190008);
[02:13:48.788]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:13:48.788]        WriteAP(0xF0, 0x01);
[02:13:48.796]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:13:48.796]      </block>
[02:13:48.796]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:13:48.796]    </control>
[02:13:48.796]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:13:48.796]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:13:48.796]        // =>  FALSE
[02:13:48.796]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:13:48.796]    </control>
[02:13:48.796]    <block atomic="false" info="">
[02:13:48.796]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:13:48.796]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:13:48.796]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:13:48.796]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:13:48.805]      __ap = 0; //lets make sure we reset the access point selection
[02:13:48.805]        // -> [__ap <= 0x00000000]
[02:13:48.805]    </block>
[02:13:48.805]  </sequence>
[02:13:48.805]  
[02:13:48.826]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:13:48.826]  
[02:13:48.826]  <debugvars>
[02:13:48.826]    // Pre-defined
[02:13:48.826]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:13:48.826]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:13:48.826]    __dp=0x00000000
[02:13:48.826]    __ap=0x00000000
[02:13:48.826]    __traceout=0x00000000      (Trace Disabled)
[02:13:48.826]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:13:48.826]    __FlashAddr=0x00000000
[02:13:48.826]    __FlashLen=0x00000000
[02:13:48.826]    __FlashArg=0x00000000
[02:13:48.826]    __FlashOp=0x00000000
[02:13:48.826]    __Result=0x00000000
[02:13:48.826]  </debugvars>
[02:13:48.826]  
[02:13:48.826]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:13:48.826]    <block atomic="false" info="">
[02:13:48.826]      __var deviceID = 0;
[02:13:48.826]        // -> [deviceID <= 0x00000000]
[02:13:48.826]      __var version = 0;
[02:13:48.826]        // -> [version <= 0x00000000]
[02:13:48.826]      __var partNum = 0;
[02:13:48.826]        // -> [partNum <= 0x00000000]
[02:13:48.826]      __var manuf = 0;
[02:13:48.826]        // -> [manuf <= 0x00000000]
[02:13:48.826]      __var isMSPM0G1X0X_G3X0X = 0;
[02:13:48.826]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:13:48.826]      __var isProduction = 0;
[02:13:48.826]        // -> [isProduction <= 0x00000000]
[02:13:48.826]      __var continueId = 0;
[02:13:48.826]        // -> [continueId <= 0x00000000]
[02:13:48.826]      deviceID =   Read32(0x41C40004);
[02:13:48.837]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:13:48.837]        // -> [deviceID <= 0x2BB8802F]
[02:13:48.837]      version = deviceID >> 28;
[02:13:48.837]        // -> [version <= 0x00000002]
[02:13:48.837]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:13:48.837]        // -> [partNum <= 0x0000BB88]
[02:13:48.837]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:13:48.837]        // -> [manuf <= 0x00000017]
[02:13:48.837]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:13:48.837]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:13:48.837]      isProduction = (version > 0);
[02:13:48.837]        // -> [isProduction <= 0x00000001]
[02:13:48.837]    </block>
[02:13:48.837]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:13:48.837]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:13:48.837]        // =>  FALSE
[02:13:48.837]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:13:48.837]    </control>
[02:13:48.837]    <control if="continueId == 4" while="" timeout="0" info="">
[02:13:48.837]      // if-block "continueId == 4"
[02:13:48.837]        // =>  FALSE
[02:13:48.837]      // skip if-block "continueId == 4"
[02:13:48.837]    </control>
[02:13:48.837]    <control if="!isProduction" while="" timeout="0" info="">
[02:13:48.837]      // if-block "!isProduction"
[02:13:48.837]        // =>  FALSE
[02:13:48.837]      // skip if-block "!isProduction"
[02:13:48.837]    </control>
[02:13:48.845]  </sequence>
[02:13:48.845]  
[02:14:52.094]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:14:52.094]  
[02:14:52.094]  <debugvars>
[02:14:52.094]    // Pre-defined
[02:14:52.094]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:14:52.094]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:14:52.094]    __dp=0x00000000
[02:14:52.094]    __ap=0x00000000
[02:14:52.094]    __traceout=0x00000000      (Trace Disabled)
[02:14:52.094]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:14:52.094]    __FlashAddr=0x00000000
[02:14:52.094]    __FlashLen=0x00000000
[02:14:52.094]    __FlashArg=0x00000000
[02:14:52.094]    __FlashOp=0x00000000
[02:14:52.094]    __Result=0x00000000
[02:14:52.094]  </debugvars>
[02:14:52.094]  
[02:14:52.094]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:14:52.094]    <block atomic="false" info="">
[02:14:52.094]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:14:52.094]        // -> [isSWJ <= 0x00000001]
[02:14:52.094]      __var hasDormant = __protocol & 0x00020000;
[02:14:52.094]        // -> [hasDormant <= 0x00000000]
[02:14:52.094]      __var protType   = __protocol & 0x0000FFFF;
[02:14:52.094]        // -> [protType <= 0x00000002]
[02:14:52.094]    </block>
[02:14:52.094]    <control if="protType == 1" while="" timeout="0" info="">
[02:14:52.094]      // if-block "protType == 1"
[02:14:52.094]        // =>  FALSE
[02:14:52.094]      // skip if-block "protType == 1"
[02:14:52.094]    </control>
[02:14:52.094]    <control if="protType == 2" while="" timeout="0" info="">
[02:14:52.094]      // if-block "protType == 2"
[02:14:52.094]        // =>  TRUE
[02:14:52.094]      <control if="isSWJ" while="" timeout="0" info="">
[02:14:52.094]        // if-block "isSWJ"
[02:14:52.094]          // =>  TRUE
[02:14:52.094]        <control if="hasDormant" while="" timeout="0" info="">
[02:14:52.094]          // if-block "hasDormant"
[02:14:52.094]            // =>  FALSE
[02:14:52.094]          // skip if-block "hasDormant"
[02:14:52.094]        </control>
[02:14:52.094]        <control if="!hasDormant" while="" timeout="0" info="">
[02:14:52.094]          // if-block "!hasDormant"
[02:14:52.094]            // =>  TRUE
[02:14:52.094]          <block atomic="false" info="">
[02:14:52.094]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:14:52.101]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:14:52.101]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:14:52.101]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:14:52.101]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:14:52.106]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:14:52.106]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:14:52.106]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:14:52.106]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:14:52.106]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:14:52.106]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:14:52.106]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:14:52.111]          </block>
[02:14:52.111]          // end if-block "!hasDormant"
[02:14:52.111]        </control>
[02:14:52.111]        // end if-block "isSWJ"
[02:14:52.111]      </control>
[02:14:52.111]      <control if="!isSWJ" while="" timeout="0" info="">
[02:14:52.111]        // if-block "!isSWJ"
[02:14:52.111]          // =>  FALSE
[02:14:52.111]        // skip if-block "!isSWJ"
[02:14:52.111]      </control>
[02:14:52.111]      <block atomic="false" info="">
[02:14:52.111]        ReadDP(0x0);
[02:14:52.111]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:14:52.111]      </block>
[02:14:52.111]      // end if-block "protType == 2"
[02:14:52.111]    </control>
[02:14:52.111]  </sequence>
[02:14:52.111]  
[02:14:52.116]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:14:52.116]  
[02:14:52.116]  <debugvars>
[02:14:52.116]    // Pre-defined
[02:14:52.116]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:14:52.116]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:14:52.116]    __dp=0x00000000
[02:14:52.116]    __ap=0x00000000
[02:14:52.116]    __traceout=0x00000000      (Trace Disabled)
[02:14:52.116]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:14:52.116]    __FlashAddr=0x00000000
[02:14:52.116]    __FlashLen=0x00000000
[02:14:52.116]    __FlashArg=0x00000000
[02:14:52.116]    __FlashOp=0x00000000
[02:14:52.116]    __Result=0x00000000
[02:14:52.116]  </debugvars>
[02:14:52.116]  
[02:14:52.116]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:14:52.116]    <block atomic="false" info="">
[02:14:52.116]      __var SW_DP_ABORT       = 0x0;
[02:14:52.116]        // -> [SW_DP_ABORT <= 0x00000000]
[02:14:52.116]      __var DP_CTRL_STAT      = 0x4;
[02:14:52.116]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:14:52.116]      __var DP_SELECT         = 0x8;
[02:14:52.116]        // -> [DP_SELECT <= 0x00000008]
[02:14:52.116]      __var powered_down      = 0;
[02:14:52.116]        // -> [powered_down <= 0x00000000]
[02:14:52.116]      WriteDP(DP_SELECT, 0x00000000);
[02:14:52.121]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:14:52.121]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:14:52.121]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:14:52.121]        // -> [powered_down <= 0x00000001]
[02:14:52.121]    </block>
[02:14:52.121]    <control if="powered_down" while="" timeout="0" info="">
[02:14:52.121]      // if-block "powered_down"
[02:14:52.121]        // =>  TRUE
[02:14:52.121]      <block atomic="false" info="">
[02:14:52.121]        Message(0, "Debug/System power-up request sent");
[02:14:52.121]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:14:52.126]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:14:52.126]      </block>
[02:14:52.126]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:14:52.126]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:14:52.126]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:14:52.126]        // while-condition  =>  FALSE
[02:14:52.126]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:14:52.126]      </control>
[02:14:52.126]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:14:52.126]        // if-block "(__protocol & 0xFFFF) == 1"
[02:14:52.126]          // =>  FALSE
[02:14:52.126]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:14:52.126]      </control>
[02:14:52.126]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:14:52.126]        // if-block "(__protocol & 0xFFFF) == 2"
[02:14:52.126]          // =>  TRUE
[02:14:52.126]        <block atomic="false" info="">
[02:14:52.126]          Message(0, "executing SWD power up");
[02:14:52.131]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:14:52.131]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:14:52.131]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:14:52.131]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:14:52.131]        </block>
[02:14:52.131]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:14:52.131]      </control>
[02:14:52.131]      // end if-block "powered_down"
[02:14:52.131]    </control>
[02:14:52.131]    <block atomic="false" info="">
[02:14:52.131]      __var DEBUG_PORT_VAL    = 0;
[02:14:52.131]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:14:52.131]      __var ACCESS_POINT_VAL  = 0;
[02:14:52.131]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:14:52.131]      __ap = 1; 
[02:14:52.131]        // -> [__ap <= 0x00000001]
[02:14:52.136]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:14:52.141]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:14:52.141]      __ap = 4;
[02:14:52.141]        // -> [__ap <= 0x00000004]
[02:14:52.141]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:14:52.141]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:14:52.141]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:14:52.141]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:14:52.146]    </block>
[02:14:52.146]    <block atomic="false" info="">
[02:14:52.146]      __var nReset = 0x80;
[02:14:52.146]        // -> [nReset <= 0x00000080]
[02:14:52.146]      __var canReadPins = 0;
[02:14:52.146]        // -> [canReadPins <= 0x00000000]
[02:14:52.146]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:14:52.151]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:14:52.151]        // -> [canReadPins <= 0x00000001]
[02:14:52.151]    </block>
[02:14:52.151]    <control if="" while="1" timeout="200" info="">
[02:14:52.151]      // while "1"  (timeout="200")
[02:14:52.151]      // while-condition  =>  TRUE
[02:14:52.151]      // while "1"  (timeout="200")
[02:14:52.151]      // while-condition  =>  TRUE
[02:14:52.151]      // while "1"  (timeout="200")
[02:14:52.151]      // while-condition  =>  TRUE
[02:14:52.151]      // while "1"  (timeout="200")
[02:14:52.151]      // while-condition  =>  TRUE
[02:14:52.151]      // while "1"  (timeout="200")
[02:14:52.151]      // while-condition  =>  TRUE
[02:14:52.151]      // while "1"  (timeout="200")
[02:14:52.151]      // while-condition  =>  TRUE
[02:14:52.151]      // while "1"  (timeout="200")
[02:14:52.151]      // while-condition  =>  TRUE
[02:14:52.151]      // while "1"  (timeout="200")
[02:14:52.151]      // while-condition  =>  TRUE
[02:14:52.151]      // while "1"  (timeout="200")
[02:14:52.151]      // while-condition  =>  TRUE
[02:14:52.151]      // while "1"  (timeout="200")
[02:14:52.151]      // while-condition  =>  TRUE
[02:14:52.153]      // while "1"  (timeout="200")
[02:14:52.153]      // while-condition  =>  TRUE
[02:14:52.153]      // while "1"  (timeout="200")
[02:14:52.153]      // while-condition  =>  TRUE
[02:14:52.153]      // while "1"  (timeout="200")
[02:14:52.153]      // while-condition  =>  TRUE
[02:14:52.153]      // while "1"  (timeout="200")
[02:14:52.153]      // while-condition  =>  TRUE
[02:14:52.153]      // while "1"  (timeout="200")
[02:14:52.153]      // while-condition  =>  TRUE
[02:14:52.153]      // while "1"  (timeout="200")
[02:14:52.153]      // while-condition  =>  TRUE
[02:14:52.153]      // while "1"  (timeout="200")
[02:14:52.153]      // while-condition  =>  TRUE
[02:14:52.153]      // while "1"  (timeout="200")
[02:14:52.153]      // while-condition  =>  TRUE
[02:14:52.153]      // while "1"  (timeout="200")
[02:14:52.153]      // while-condition  =>  TRUE
[02:14:52.153]      // while "1"  (timeout="200")
[02:14:52.153]      // while-condition  =>  TRUE
[02:14:52.153]      // while "1"  (timeout="200")
[02:14:52.153]      // while-condition  =>  TRUE
[02:14:52.153]      // while "1"  (timeout="200")
[02:14:52.153]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.156]      // while-condition  =>  TRUE
[02:14:52.156]      // while "1"  (timeout="200")
[02:14:52.161]      // while-condition  =>  TRUE
[02:14:52.161]      // while "1"  (timeout="200")
[02:14:52.161]      // while  =>  TIMEOUT
[02:14:52.161]      // end while "1"
[02:14:52.161]    </control>
[02:14:52.161]    <control if="canReadPins" while="" timeout="0" info="">
[02:14:52.161]      // if-block "canReadPins"
[02:14:52.161]        // =>  TRUE
[02:14:52.161]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:14:52.161]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:14:52.161]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:14:52.161]        // while-condition  =>  FALSE
[02:14:52.161]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:14:52.161]      </control>
[02:14:52.161]      // end if-block "canReadPins"
[02:14:52.161]    </control>
[02:14:52.161]    <control if="!canReadPins" while="" timeout="0" info="">
[02:14:52.161]      // if-block "!canReadPins"
[02:14:52.161]        // =>  FALSE
[02:14:52.161]      // skip if-block "!canReadPins"
[02:14:52.161]    </control>
[02:14:52.161]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:14:52.161]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:14:52.161]        // =>  TRUE
[02:14:52.161]      <block atomic="false" info="">
[02:14:52.161]        WriteAP(0x00, 0x190008);
[02:14:52.166]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:14:52.166]        WriteAP(0xF0, 0x01);
[02:14:52.171]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:14:52.171]      </block>
[02:14:52.171]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:14:52.171]    </control>
[02:14:52.171]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:14:52.171]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:14:52.171]        // =>  FALSE
[02:14:52.172]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:14:52.172]    </control>
[02:14:52.172]    <block atomic="false" info="">
[02:14:52.172]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:14:52.176]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:14:52.176]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:14:52.176]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:14:52.178]      __ap = 0; //lets make sure we reset the access point selection
[02:14:52.178]        // -> [__ap <= 0x00000000]
[02:14:52.178]    </block>
[02:14:52.178]  </sequence>
[02:14:52.178]  
[02:14:52.204]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:14:52.204]  
[02:14:52.204]  <debugvars>
[02:14:52.204]    // Pre-defined
[02:14:52.204]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:14:52.204]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:14:52.204]    __dp=0x00000000
[02:14:52.204]    __ap=0x00000000
[02:14:52.204]    __traceout=0x00000000      (Trace Disabled)
[02:14:52.204]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:14:52.204]    __FlashAddr=0x00000000
[02:14:52.204]    __FlashLen=0x00000000
[02:14:52.206]    __FlashArg=0x00000000
[02:14:52.206]    __FlashOp=0x00000000
[02:14:52.206]    __Result=0x00000000
[02:14:52.206]  </debugvars>
[02:14:52.206]  
[02:14:52.206]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:14:52.206]    <block atomic="false" info="">
[02:14:52.206]      __var deviceID = 0;
[02:14:52.207]        // -> [deviceID <= 0x00000000]
[02:14:52.207]      __var version = 0;
[02:14:52.207]        // -> [version <= 0x00000000]
[02:14:52.207]      __var partNum = 0;
[02:14:52.207]        // -> [partNum <= 0x00000000]
[02:14:52.207]      __var manuf = 0;
[02:14:52.207]        // -> [manuf <= 0x00000000]
[02:14:52.207]      __var isMSPM0G1X0X_G3X0X = 0;
[02:14:52.207]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:14:52.207]      __var isProduction = 0;
[02:14:52.207]        // -> [isProduction <= 0x00000000]
[02:14:52.208]      __var continueId = 0;
[02:14:52.208]        // -> [continueId <= 0x00000000]
[02:14:52.208]      deviceID =   Read32(0x41C40004);
[02:14:52.215]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:14:52.215]        // -> [deviceID <= 0x2BB8802F]
[02:14:52.215]      version = deviceID >> 28;
[02:14:52.215]        // -> [version <= 0x00000002]
[02:14:52.215]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:14:52.215]        // -> [partNum <= 0x0000BB88]
[02:14:52.215]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:14:52.215]        // -> [manuf <= 0x00000017]
[02:14:52.215]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:14:52.215]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:14:52.215]      isProduction = (version > 0);
[02:14:52.215]        // -> [isProduction <= 0x00000001]
[02:14:52.215]    </block>
[02:14:52.215]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:14:52.215]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:14:52.215]        // =>  FALSE
[02:14:52.215]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:14:52.215]    </control>
[02:14:52.219]    <control if="continueId == 4" while="" timeout="0" info="">
[02:14:52.219]      // if-block "continueId == 4"
[02:14:52.219]        // =>  FALSE
[02:14:52.219]      // skip if-block "continueId == 4"
[02:14:52.219]    </control>
[02:14:52.219]    <control if="!isProduction" while="" timeout="0" info="">
[02:14:52.219]      // if-block "!isProduction"
[02:14:52.219]        // =>  FALSE
[02:14:52.219]      // skip if-block "!isProduction"
[02:14:52.219]    </control>
[02:14:52.219]  </sequence>
[02:14:52.219]  
[02:17:41.330]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:17:41.330]  
[02:17:41.339]  <debugvars>
[02:17:41.339]    // Pre-defined
[02:17:41.339]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:41.339]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:17:41.339]    __dp=0x00000000
[02:17:41.339]    __ap=0x00000000
[02:17:41.339]    __traceout=0x00000000      (Trace Disabled)
[02:17:41.339]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:41.339]    __FlashAddr=0x00000000
[02:17:41.339]    __FlashLen=0x00000000
[02:17:41.339]    __FlashArg=0x00000000
[02:17:41.339]    __FlashOp=0x00000000
[02:17:41.339]    __Result=0x00000000
[02:17:41.339]  </debugvars>
[02:17:41.339]  
[02:17:41.339]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:17:41.339]    <block atomic="false" info="">
[02:17:41.339]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:17:41.339]        // -> [isSWJ <= 0x00000001]
[02:17:41.341]      __var hasDormant = __protocol & 0x00020000;
[02:17:41.341]        // -> [hasDormant <= 0x00000000]
[02:17:41.341]      __var protType   = __protocol & 0x0000FFFF;
[02:17:41.341]        // -> [protType <= 0x00000002]
[02:17:41.341]    </block>
[02:17:41.341]    <control if="protType == 1" while="" timeout="0" info="">
[02:17:41.341]      // if-block "protType == 1"
[02:17:41.341]        // =>  FALSE
[02:17:41.343]      // skip if-block "protType == 1"
[02:17:41.343]    </control>
[02:17:41.343]    <control if="protType == 2" while="" timeout="0" info="">
[02:17:41.343]      // if-block "protType == 2"
[02:17:41.343]        // =>  TRUE
[02:17:41.343]      <control if="isSWJ" while="" timeout="0" info="">
[02:17:41.343]        // if-block "isSWJ"
[02:17:41.343]          // =>  TRUE
[02:17:41.343]        <control if="hasDormant" while="" timeout="0" info="">
[02:17:41.343]          // if-block "hasDormant"
[02:17:41.343]            // =>  FALSE
[02:17:41.343]          // skip if-block "hasDormant"
[02:17:41.343]        </control>
[02:17:41.343]        <control if="!hasDormant" while="" timeout="0" info="">
[02:17:41.343]          // if-block "!hasDormant"
[02:17:41.343]            // =>  TRUE
[02:17:41.343]          <block atomic="false" info="">
[02:17:41.343]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:17:41.352]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:41.352]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:17:41.353]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:17:41.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:17:41.353]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:41.353]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:17:41.353]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:17:41.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:17:41.360]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:17:41.360]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:17:41.363]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:17:41.363]          </block>
[02:17:41.363]          // end if-block "!hasDormant"
[02:17:41.363]        </control>
[02:17:41.363]        // end if-block "isSWJ"
[02:17:41.363]      </control>
[02:17:41.363]      <control if="!isSWJ" while="" timeout="0" info="">
[02:17:41.363]        // if-block "!isSWJ"
[02:17:41.363]          // =>  FALSE
[02:17:41.363]        // skip if-block "!isSWJ"
[02:17:41.363]      </control>
[02:17:41.363]      <block atomic="false" info="">
[02:17:41.363]        ReadDP(0x0);
[02:17:41.363]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:17:41.363]      </block>
[02:17:41.363]      // end if-block "protType == 2"
[02:17:41.363]    </control>
[02:17:41.363]  </sequence>
[02:17:41.363]  
[02:17:41.370]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:17:41.370]  
[02:17:41.370]  <debugvars>
[02:17:41.373]    // Pre-defined
[02:17:41.373]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:41.373]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:17:41.373]    __dp=0x00000000
[02:17:41.373]    __ap=0x00000000
[02:17:41.373]    __traceout=0x00000000      (Trace Disabled)
[02:17:41.373]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:41.373]    __FlashAddr=0x00000000
[02:17:41.373]    __FlashLen=0x00000000
[02:17:41.373]    __FlashArg=0x00000000
[02:17:41.373]    __FlashOp=0x00000000
[02:17:41.373]    __Result=0x00000000
[02:17:41.373]  </debugvars>
[02:17:41.373]  
[02:17:41.373]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:17:41.373]    <block atomic="false" info="">
[02:17:41.373]      __var SW_DP_ABORT       = 0x0;
[02:17:41.373]        // -> [SW_DP_ABORT <= 0x00000000]
[02:17:41.373]      __var DP_CTRL_STAT      = 0x4;
[02:17:41.373]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:17:41.373]      __var DP_SELECT         = 0x8;
[02:17:41.373]        // -> [DP_SELECT <= 0x00000008]
[02:17:41.373]      __var powered_down      = 0;
[02:17:41.373]        // -> [powered_down <= 0x00000000]
[02:17:41.373]      WriteDP(DP_SELECT, 0x00000000);
[02:17:41.373]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:17:41.373]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:17:41.383]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:17:41.383]        // -> [powered_down <= 0x00000001]
[02:17:41.383]    </block>
[02:17:41.383]    <control if="powered_down" while="" timeout="0" info="">
[02:17:41.383]      // if-block "powered_down"
[02:17:41.383]        // =>  TRUE
[02:17:41.383]      <block atomic="false" info="">
[02:17:41.383]        Message(0, "Debug/System power-up request sent");
[02:17:41.383]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:17:41.383]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:17:41.383]      </block>
[02:17:41.383]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:17:41.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:17:41.388]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:17:41.388]        // while-condition  =>  FALSE
[02:17:41.388]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:17:41.388]      </control>
[02:17:41.388]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:17:41.388]        // if-block "(__protocol & 0xFFFF) == 1"
[02:17:41.388]          // =>  FALSE
[02:17:41.388]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:17:41.388]      </control>
[02:17:41.391]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:17:41.391]        // if-block "(__protocol & 0xFFFF) == 2"
[02:17:41.391]          // =>  TRUE
[02:17:41.391]        <block atomic="false" info="">
[02:17:41.391]          Message(0, "executing SWD power up");
[02:17:41.393]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:17:41.393]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:17:41.393]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:17:41.393]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:17:41.393]        </block>
[02:17:41.393]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:17:41.398]      </control>
[02:17:41.398]      // end if-block "powered_down"
[02:17:41.398]    </control>
[02:17:41.398]    <block atomic="false" info="">
[02:17:41.398]      __var DEBUG_PORT_VAL    = 0;
[02:17:41.398]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:17:41.398]      __var ACCESS_POINT_VAL  = 0;
[02:17:41.398]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:17:41.398]      __ap = 1; 
[02:17:41.398]        // -> [__ap <= 0x00000001]
[02:17:41.398]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:17:41.403]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:17:41.403]      __ap = 4;
[02:17:41.403]        // -> [__ap <= 0x00000004]
[02:17:41.403]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:17:41.405]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:17:41.405]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:17:41.405]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:17:41.414]    </block>
[02:17:41.414]    <block atomic="false" info="">
[02:17:41.414]      __var nReset = 0x80;
[02:17:41.414]        // -> [nReset <= 0x00000080]
[02:17:41.414]      __var canReadPins = 0;
[02:17:41.414]        // -> [canReadPins <= 0x00000000]
[02:17:41.414]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:17:41.416]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:17:41.416]        // -> [canReadPins <= 0x00000001]
[02:17:41.416]    </block>
[02:17:41.416]    <control if="" while="1" timeout="200" info="">
[02:17:41.416]      // while "1"  (timeout="200")
[02:17:41.416]      // while-condition  =>  TRUE
[02:17:41.416]      // while "1"  (timeout="200")
[02:17:41.416]      // while-condition  =>  TRUE
[02:17:41.416]      // while "1"  (timeout="200")
[02:17:41.416]      // while-condition  =>  TRUE
[02:17:41.416]      // while "1"  (timeout="200")
[02:17:41.416]      // while-condition  =>  TRUE
[02:17:41.416]      // while "1"  (timeout="200")
[02:17:41.416]      // while-condition  =>  TRUE
[02:17:41.416]      // while "1"  (timeout="200")
[02:17:41.416]      // while-condition  =>  TRUE
[02:17:41.416]      // while "1"  (timeout="200")
[02:17:41.416]      // while-condition  =>  TRUE
[02:17:41.422]      // while "1"  (timeout="200")
[02:17:41.422]      // while-condition  =>  TRUE
[02:17:41.422]      // while "1"  (timeout="200")
[02:17:41.422]      // while-condition  =>  TRUE
[02:17:41.422]      // while "1"  (timeout="200")
[02:17:41.422]      // while-condition  =>  TRUE
[02:17:41.422]      // while "1"  (timeout="200")
[02:17:41.422]      // while-condition  =>  TRUE
[02:17:41.422]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.423]      // while-condition  =>  TRUE
[02:17:41.423]      // while "1"  (timeout="200")
[02:17:41.432]      // while-condition  =>  TRUE
[02:17:41.432]      // while "1"  (timeout="200")
[02:17:41.433]      // while  =>  TIMEOUT
[02:17:41.433]      // end while "1"
[02:17:41.433]    </control>
[02:17:41.433]    <control if="canReadPins" while="" timeout="0" info="">
[02:17:41.433]      // if-block "canReadPins"
[02:17:41.433]        // =>  TRUE
[02:17:41.433]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:17:41.433]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:17:41.433]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:17:41.433]        // while-condition  =>  FALSE
[02:17:41.433]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:17:41.433]      </control>
[02:17:41.433]      // end if-block "canReadPins"
[02:17:41.433]    </control>
[02:17:41.433]    <control if="!canReadPins" while="" timeout="0" info="">
[02:17:41.433]      // if-block "!canReadPins"
[02:17:41.433]        // =>  FALSE
[02:17:41.433]      // skip if-block "!canReadPins"
[02:17:41.433]    </control>
[02:17:41.433]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:17:41.433]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:17:41.433]        // =>  TRUE
[02:17:41.433]      <block atomic="false" info="">
[02:17:41.433]        WriteAP(0x00, 0x190008);
[02:17:41.433]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:17:41.433]        WriteAP(0xF0, 0x01);
[02:17:41.442]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:17:41.443]      </block>
[02:17:41.443]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:17:41.443]    </control>
[02:17:41.443]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:17:41.443]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:17:41.443]        // =>  FALSE
[02:17:41.443]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:17:41.443]    </control>
[02:17:41.443]    <block atomic="false" info="">
[02:17:41.443]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:17:41.443]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:17:41.443]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:17:41.443]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:17:41.443]      __ap = 0; //lets make sure we reset the access point selection
[02:17:41.443]        // -> [__ap <= 0x00000000]
[02:17:41.443]    </block>
[02:17:41.443]  </sequence>
[02:17:41.443]  
[02:17:41.473]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:17:41.473]  
[02:17:41.473]  <debugvars>
[02:17:41.473]    // Pre-defined
[02:17:41.473]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:17:41.473]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:17:41.473]    __dp=0x00000000
[02:17:41.473]    __ap=0x00000000
[02:17:41.473]    __traceout=0x00000000      (Trace Disabled)
[02:17:41.473]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:17:41.473]    __FlashAddr=0x00000000
[02:17:41.473]    __FlashLen=0x00000000
[02:17:41.473]    __FlashArg=0x00000000
[02:17:41.473]    __FlashOp=0x00000000
[02:17:41.473]    __Result=0x00000000
[02:17:41.473]  </debugvars>
[02:17:41.473]  
[02:17:41.473]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:17:41.473]    <block atomic="false" info="">
[02:17:41.473]      __var deviceID = 0;
[02:17:41.473]        // -> [deviceID <= 0x00000000]
[02:17:41.473]      __var version = 0;
[02:17:41.473]        // -> [version <= 0x00000000]
[02:17:41.473]      __var partNum = 0;
[02:17:41.473]        // -> [partNum <= 0x00000000]
[02:17:41.473]      __var manuf = 0;
[02:17:41.473]        // -> [manuf <= 0x00000000]
[02:17:41.473]      __var isMSPM0G1X0X_G3X0X = 0;
[02:17:41.473]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:17:41.473]      __var isProduction = 0;
[02:17:41.473]        // -> [isProduction <= 0x00000000]
[02:17:41.473]      __var continueId = 0;
[02:17:41.473]        // -> [continueId <= 0x00000000]
[02:17:41.473]      deviceID =   Read32(0x41C40004);
[02:17:41.483]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:17:41.483]        // -> [deviceID <= 0x2BB8802F]
[02:17:41.483]      version = deviceID >> 28;
[02:17:41.483]        // -> [version <= 0x00000002]
[02:17:41.483]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:17:41.483]        // -> [partNum <= 0x0000BB88]
[02:17:41.483]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:17:41.483]        // -> [manuf <= 0x00000017]
[02:17:41.483]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:17:41.483]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:17:41.483]      isProduction = (version > 0);
[02:17:41.483]        // -> [isProduction <= 0x00000001]
[02:17:41.483]    </block>
[02:17:41.483]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:17:41.483]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:17:41.483]        // =>  FALSE
[02:17:41.483]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:17:41.483]    </control>
[02:17:41.483]    <control if="continueId == 4" while="" timeout="0" info="">
[02:17:41.483]      // if-block "continueId == 4"
[02:17:41.483]        // =>  FALSE
[02:17:41.483]      // skip if-block "continueId == 4"
[02:17:41.483]    </control>
[02:17:41.483]    <control if="!isProduction" while="" timeout="0" info="">
[02:17:41.483]      // if-block "!isProduction"
[02:17:41.483]        // =>  FALSE
[02:17:41.483]      // skip if-block "!isProduction"
[02:17:41.483]    </control>
[02:17:41.483]  </sequence>
[02:17:41.483]  
[02:19:19.771]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:19:19.771]  
[02:19:19.779]  <debugvars>
[02:19:19.779]    // Pre-defined
[02:19:19.779]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:19:19.779]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:19:19.779]    __dp=0x00000000
[02:19:19.779]    __ap=0x00000000
[02:19:19.779]    __traceout=0x00000000      (Trace Disabled)
[02:19:19.779]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:19:19.779]    __FlashAddr=0x00000000
[02:19:19.779]    __FlashLen=0x00000000
[02:19:19.779]    __FlashArg=0x00000000
[02:19:19.779]    __FlashOp=0x00000000
[02:19:19.779]    __Result=0x00000000
[02:19:19.779]  </debugvars>
[02:19:19.779]  
[02:19:19.779]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:19:19.779]    <block atomic="false" info="">
[02:19:19.779]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:19:19.779]        // -> [isSWJ <= 0x00000001]
[02:19:19.779]      __var hasDormant = __protocol & 0x00020000;
[02:19:19.779]        // -> [hasDormant <= 0x00000000]
[02:19:19.779]      __var protType   = __protocol & 0x0000FFFF;
[02:19:19.779]        // -> [protType <= 0x00000002]
[02:19:19.779]    </block>
[02:19:19.779]    <control if="protType == 1" while="" timeout="0" info="">
[02:19:19.779]      // if-block "protType == 1"
[02:19:19.782]        // =>  FALSE
[02:19:19.782]      // skip if-block "protType == 1"
[02:19:19.782]    </control>
[02:19:19.782]    <control if="protType == 2" while="" timeout="0" info="">
[02:19:19.782]      // if-block "protType == 2"
[02:19:19.782]        // =>  TRUE
[02:19:19.782]      <control if="isSWJ" while="" timeout="0" info="">
[02:19:19.782]        // if-block "isSWJ"
[02:19:19.782]          // =>  TRUE
[02:19:19.782]        <control if="hasDormant" while="" timeout="0" info="">
[02:19:19.782]          // if-block "hasDormant"
[02:19:19.782]            // =>  FALSE
[02:19:19.782]          // skip if-block "hasDormant"
[02:19:19.782]        </control>
[02:19:19.782]        <control if="!hasDormant" while="" timeout="0" info="">
[02:19:19.782]          // if-block "!hasDormant"
[02:19:19.782]            // =>  TRUE
[02:19:19.782]          <block atomic="false" info="">
[02:19:19.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:19:19.782]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:19:19.782]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:19:19.782]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:19:19.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:19:19.782]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:19:19.782]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:19:19.782]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:19:19.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:19:19.782]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:19:19.792]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:19:19.792]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:19:19.792]          </block>
[02:19:19.792]          // end if-block "!hasDormant"
[02:19:19.792]        </control>
[02:19:19.792]        // end if-block "isSWJ"
[02:19:19.792]      </control>
[02:19:19.792]      <control if="!isSWJ" while="" timeout="0" info="">
[02:19:19.792]        // if-block "!isSWJ"
[02:19:19.792]          // =>  FALSE
[02:19:19.792]        // skip if-block "!isSWJ"
[02:19:19.792]      </control>
[02:19:19.792]      <block atomic="false" info="">
[02:19:19.792]        ReadDP(0x0);
[02:19:19.792]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:19:19.792]      </block>
[02:19:19.792]      // end if-block "protType == 2"
[02:19:19.792]    </control>
[02:19:19.792]  </sequence>
[02:19:19.792]  
[02:19:19.792]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:19:19.792]  
[02:19:19.792]  <debugvars>
[02:19:19.792]    // Pre-defined
[02:19:19.792]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:19:19.792]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:19:19.792]    __dp=0x00000000
[02:19:19.792]    __ap=0x00000000
[02:19:19.792]    __traceout=0x00000000      (Trace Disabled)
[02:19:19.792]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:19:19.792]    __FlashAddr=0x00000000
[02:19:19.792]    __FlashLen=0x00000000
[02:19:19.792]    __FlashArg=0x00000000
[02:19:19.792]    __FlashOp=0x00000000
[02:19:19.792]    __Result=0x00000000
[02:19:19.792]  </debugvars>
[02:19:19.792]  
[02:19:19.792]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:19:19.792]    <block atomic="false" info="">
[02:19:19.792]      __var SW_DP_ABORT       = 0x0;
[02:19:19.792]        // -> [SW_DP_ABORT <= 0x00000000]
[02:19:19.792]      __var DP_CTRL_STAT      = 0x4;
[02:19:19.792]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:19:19.792]      __var DP_SELECT         = 0x8;
[02:19:19.792]        // -> [DP_SELECT <= 0x00000008]
[02:19:19.792]      __var powered_down      = 0;
[02:19:19.792]        // -> [powered_down <= 0x00000000]
[02:19:19.792]      WriteDP(DP_SELECT, 0x00000000);
[02:19:19.802]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:19:19.802]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:19:19.802]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:19:19.802]        // -> [powered_down <= 0x00000001]
[02:19:19.802]    </block>
[02:19:19.802]    <control if="powered_down" while="" timeout="0" info="">
[02:19:19.802]      // if-block "powered_down"
[02:19:19.802]        // =>  TRUE
[02:19:19.802]      <block atomic="false" info="">
[02:19:19.802]        Message(0, "Debug/System power-up request sent");
[02:19:19.802]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:19:19.802]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:19:19.802]      </block>
[02:19:19.802]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:19:19.802]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:19:19.802]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:19:19.802]        // while-condition  =>  FALSE
[02:19:19.812]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:19:19.812]      </control>
[02:19:19.812]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:19:19.812]        // if-block "(__protocol & 0xFFFF) == 1"
[02:19:19.812]          // =>  FALSE
[02:19:19.812]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:19:19.812]      </control>
[02:19:19.812]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:19:19.812]        // if-block "(__protocol & 0xFFFF) == 2"
[02:19:19.812]          // =>  TRUE
[02:19:19.812]        <block atomic="false" info="">
[02:19:19.812]          Message(0, "executing SWD power up");
[02:19:19.812]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:19:19.812]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:19:19.812]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:19:19.812]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:19:19.812]        </block>
[02:19:19.812]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:19:19.812]      </control>
[02:19:19.812]      // end if-block "powered_down"
[02:19:19.812]    </control>
[02:19:19.812]    <block atomic="false" info="">
[02:19:19.812]      __var DEBUG_PORT_VAL    = 0;
[02:19:19.812]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:19:19.812]      __var ACCESS_POINT_VAL  = 0;
[02:19:19.812]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:19:19.812]      __ap = 1; 
[02:19:19.812]        // -> [__ap <= 0x00000001]
[02:19:19.812]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:19:19.822]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:19:19.822]      __ap = 4;
[02:19:19.822]        // -> [__ap <= 0x00000004]
[02:19:19.822]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:19:19.822]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:19:19.822]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:19:19.822]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:19:19.822]    </block>
[02:19:19.822]    <block atomic="false" info="">
[02:19:19.822]      __var nReset = 0x80;
[02:19:19.822]        // -> [nReset <= 0x00000080]
[02:19:19.822]      __var canReadPins = 0;
[02:19:19.822]        // -> [canReadPins <= 0x00000000]
[02:19:19.822]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:19:19.822]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:19:19.822]        // -> [canReadPins <= 0x00000001]
[02:19:19.822]    </block>
[02:19:19.832]    <control if="" while="1" timeout="200" info="">
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.832]      // while "1"  (timeout="200")
[02:19:19.832]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.842]      // while-condition  =>  TRUE
[02:19:19.842]      // while "1"  (timeout="200")
[02:19:19.852]      // while-condition  =>  TRUE
[02:19:19.852]      // while "1"  (timeout="200")
[02:19:19.852]      // while  =>  TIMEOUT
[02:19:19.852]      // end while "1"
[02:19:19.852]    </control>
[02:19:19.852]    <control if="canReadPins" while="" timeout="0" info="">
[02:19:19.852]      // if-block "canReadPins"
[02:19:19.852]        // =>  TRUE
[02:19:19.852]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:19:19.852]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:19:19.852]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:19:19.852]        // while-condition  =>  FALSE
[02:19:19.852]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:19:19.852]      </control>
[02:19:19.852]      // end if-block "canReadPins"
[02:19:19.852]    </control>
[02:19:19.852]    <control if="!canReadPins" while="" timeout="0" info="">
[02:19:19.852]      // if-block "!canReadPins"
[02:19:19.852]        // =>  FALSE
[02:19:19.852]      // skip if-block "!canReadPins"
[02:19:19.852]    </control>
[02:19:19.852]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:19:19.852]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:19:19.852]        // =>  TRUE
[02:19:19.852]      <block atomic="false" info="">
[02:19:19.852]        WriteAP(0x00, 0x190008);
[02:19:19.858]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:19:19.858]        WriteAP(0xF0, 0x01);
[02:19:19.862]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:19:19.862]      </block>
[02:19:19.862]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:19:19.862]    </control>
[02:19:19.862]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:19:19.862]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:19:19.862]        // =>  FALSE
[02:19:19.862]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:19:19.862]    </control>
[02:19:19.862]    <block atomic="false" info="">
[02:19:19.862]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:19:19.862]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:19:19.862]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:19:19.862]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:19:19.862]      __ap = 0; //lets make sure we reset the access point selection
[02:19:19.872]        // -> [__ap <= 0x00000000]
[02:19:19.872]    </block>
[02:19:19.872]  </sequence>
[02:19:19.872]  
[02:19:19.902]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:19:19.902]  
[02:19:19.902]  <debugvars>
[02:19:19.902]    // Pre-defined
[02:19:19.902]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:19:19.902]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:19:19.902]    __dp=0x00000000
[02:19:19.902]    __ap=0x00000000
[02:19:19.902]    __traceout=0x00000000      (Trace Disabled)
[02:19:19.905]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:19:19.905]    __FlashAddr=0x00000000
[02:19:19.905]    __FlashLen=0x00000000
[02:19:19.905]    __FlashArg=0x00000000
[02:19:19.905]    __FlashOp=0x00000000
[02:19:19.905]    __Result=0x00000000
[02:19:19.905]  </debugvars>
[02:19:19.905]  
[02:19:19.905]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:19:19.905]    <block atomic="false" info="">
[02:19:19.905]      __var deviceID = 0;
[02:19:19.905]        // -> [deviceID <= 0x00000000]
[02:19:19.905]      __var version = 0;
[02:19:19.905]        // -> [version <= 0x00000000]
[02:19:19.905]      __var partNum = 0;
[02:19:19.905]        // -> [partNum <= 0x00000000]
[02:19:19.905]      __var manuf = 0;
[02:19:19.905]        // -> [manuf <= 0x00000000]
[02:19:19.905]      __var isMSPM0G1X0X_G3X0X = 0;
[02:19:19.905]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:19:19.905]      __var isProduction = 0;
[02:19:19.905]        // -> [isProduction <= 0x00000000]
[02:19:19.905]      __var continueId = 0;
[02:19:19.905]        // -> [continueId <= 0x00000000]
[02:19:19.905]      deviceID =   Read32(0x41C40004);
[02:19:19.905]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:19:19.905]        // -> [deviceID <= 0x2BB8802F]
[02:19:19.905]      version = deviceID >> 28;
[02:19:19.905]        // -> [version <= 0x00000002]
[02:19:19.905]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:19:19.912]        // -> [partNum <= 0x0000BB88]
[02:19:19.912]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:19:19.912]        // -> [manuf <= 0x00000017]
[02:19:19.912]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:19:19.912]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:19:19.912]      isProduction = (version > 0);
[02:19:19.912]        // -> [isProduction <= 0x00000001]
[02:19:19.912]    </block>
[02:19:19.912]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:19:19.912]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:19:19.912]        // =>  FALSE
[02:19:19.912]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:19:19.912]    </control>
[02:19:19.912]    <control if="continueId == 4" while="" timeout="0" info="">
[02:19:19.912]      // if-block "continueId == 4"
[02:19:19.912]        // =>  FALSE
[02:19:19.912]      // skip if-block "continueId == 4"
[02:19:19.912]    </control>
[02:19:19.912]    <control if="!isProduction" while="" timeout="0" info="">
[02:19:19.912]      // if-block "!isProduction"
[02:19:19.912]        // =>  FALSE
[02:19:19.912]      // skip if-block "!isProduction"
[02:19:19.912]    </control>
[02:19:19.912]  </sequence>
[02:19:19.912]  
[02:22:03.878]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:22:03.878]  
[02:22:03.878]  <debugvars>
[02:22:03.878]    // Pre-defined
[02:22:03.878]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:03.878]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:22:03.878]    __dp=0x00000000
[02:22:03.878]    __ap=0x00000000
[02:22:03.888]    __traceout=0x00000000      (Trace Disabled)
[02:22:03.888]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:03.888]    __FlashAddr=0x00000000
[02:22:03.888]    __FlashLen=0x00000000
[02:22:03.888]    __FlashArg=0x00000000
[02:22:03.888]    __FlashOp=0x00000000
[02:22:03.888]    __Result=0x00000000
[02:22:03.888]  </debugvars>
[02:22:03.888]  
[02:22:03.888]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:22:03.888]    <block atomic="false" info="">
[02:22:03.888]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:22:03.888]        // -> [isSWJ <= 0x00000001]
[02:22:03.888]      __var hasDormant = __protocol & 0x00020000;
[02:22:03.888]        // -> [hasDormant <= 0x00000000]
[02:22:03.888]      __var protType   = __protocol & 0x0000FFFF;
[02:22:03.888]        // -> [protType <= 0x00000002]
[02:22:03.888]    </block>
[02:22:03.888]    <control if="protType == 1" while="" timeout="0" info="">
[02:22:03.888]      // if-block "protType == 1"
[02:22:03.888]        // =>  FALSE
[02:22:03.888]      // skip if-block "protType == 1"
[02:22:03.888]    </control>
[02:22:03.888]    <control if="protType == 2" while="" timeout="0" info="">
[02:22:03.888]      // if-block "protType == 2"
[02:22:03.888]        // =>  TRUE
[02:22:03.888]      <control if="isSWJ" while="" timeout="0" info="">
[02:22:03.888]        // if-block "isSWJ"
[02:22:03.888]          // =>  TRUE
[02:22:03.888]        <control if="hasDormant" while="" timeout="0" info="">
[02:22:03.888]          // if-block "hasDormant"
[02:22:03.888]            // =>  FALSE
[02:22:03.888]          // skip if-block "hasDormant"
[02:22:03.888]        </control>
[02:22:03.888]        <control if="!hasDormant" while="" timeout="0" info="">
[02:22:03.888]          // if-block "!hasDormant"
[02:22:03.888]            // =>  TRUE
[02:22:03.888]          <block atomic="false" info="">
[02:22:03.888]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:22:03.893]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:22:03.893]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:22:03.893]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:22:03.893]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:22:03.893]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:22:03.893]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:22:03.898]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:22:03.898]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:22:03.898]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:22:03.898]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:22:03.898]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:22:03.898]          </block>
[02:22:03.898]          // end if-block "!hasDormant"
[02:22:03.898]        </control>
[02:22:03.898]        // end if-block "isSWJ"
[02:22:03.898]      </control>
[02:22:03.898]      <control if="!isSWJ" while="" timeout="0" info="">
[02:22:03.898]        // if-block "!isSWJ"
[02:22:03.898]          // =>  FALSE
[02:22:03.898]        // skip if-block "!isSWJ"
[02:22:03.898]      </control>
[02:22:03.898]      <block atomic="false" info="">
[02:22:03.898]        ReadDP(0x0);
[02:22:03.898]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:22:03.898]      </block>
[02:22:03.898]      // end if-block "protType == 2"
[02:22:03.898]    </control>
[02:22:03.898]  </sequence>
[02:22:03.898]  
[02:22:03.908]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:22:03.908]  
[02:22:03.908]  <debugvars>
[02:22:03.908]    // Pre-defined
[02:22:03.908]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:03.908]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:22:03.908]    __dp=0x00000000
[02:22:03.908]    __ap=0x00000000
[02:22:03.908]    __traceout=0x00000000      (Trace Disabled)
[02:22:03.908]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:03.908]    __FlashAddr=0x00000000
[02:22:03.908]    __FlashLen=0x00000000
[02:22:03.908]    __FlashArg=0x00000000
[02:22:03.908]    __FlashOp=0x00000000
[02:22:03.908]    __Result=0x00000000
[02:22:03.908]  </debugvars>
[02:22:03.908]  
[02:22:03.908]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:22:03.908]    <block atomic="false" info="">
[02:22:03.908]      __var SW_DP_ABORT       = 0x0;
[02:22:03.908]        // -> [SW_DP_ABORT <= 0x00000000]
[02:22:03.908]      __var DP_CTRL_STAT      = 0x4;
[02:22:03.908]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:22:03.908]      __var DP_SELECT         = 0x8;
[02:22:03.908]        // -> [DP_SELECT <= 0x00000008]
[02:22:03.908]      __var powered_down      = 0;
[02:22:03.908]        // -> [powered_down <= 0x00000000]
[02:22:03.908]      WriteDP(DP_SELECT, 0x00000000);
[02:22:03.918]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:22:03.918]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:22:03.918]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:22:03.918]        // -> [powered_down <= 0x00000001]
[02:22:03.918]    </block>
[02:22:03.918]    <control if="powered_down" while="" timeout="0" info="">
[02:22:03.918]      // if-block "powered_down"
[02:22:03.918]        // =>  TRUE
[02:22:03.918]      <block atomic="false" info="">
[02:22:03.918]        Message(0, "Debug/System power-up request sent");
[02:22:03.918]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:22:03.918]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:22:03.918]      </block>
[02:22:03.918]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:22:03.918]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:22:03.918]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:22:03.918]        // while-condition  =>  FALSE
[02:22:03.918]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:22:03.918]      </control>
[02:22:03.918]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:22:03.918]        // if-block "(__protocol & 0xFFFF) == 1"
[02:22:03.918]          // =>  FALSE
[02:22:03.918]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:22:03.918]      </control>
[02:22:03.918]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:22:03.918]        // if-block "(__protocol & 0xFFFF) == 2"
[02:22:03.918]          // =>  TRUE
[02:22:03.918]        <block atomic="false" info="">
[02:22:03.918]          Message(0, "executing SWD power up");
[02:22:03.928]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:22:03.930]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:22:03.930]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:22:03.930]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:22:03.930]        </block>
[02:22:03.930]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:22:03.930]      </control>
[02:22:03.930]      // end if-block "powered_down"
[02:22:03.930]    </control>
[02:22:03.930]    <block atomic="false" info="">
[02:22:03.930]      __var DEBUG_PORT_VAL    = 0;
[02:22:03.930]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:22:03.930]      __var ACCESS_POINT_VAL  = 0;
[02:22:03.930]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:22:03.930]      __ap = 1; 
[02:22:03.930]        // -> [__ap <= 0x00000001]
[02:22:03.930]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:22:03.930]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:22:03.930]      __ap = 4;
[02:22:03.930]        // -> [__ap <= 0x00000004]
[02:22:03.930]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:22:03.938]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:22:03.938]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:22:03.938]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:22:03.938]    </block>
[02:22:03.938]    <block atomic="false" info="">
[02:22:03.938]      __var nReset = 0x80;
[02:22:03.938]        // -> [nReset <= 0x00000080]
[02:22:03.938]      __var canReadPins = 0;
[02:22:03.938]        // -> [canReadPins <= 0x00000000]
[02:22:03.938]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:22:03.948]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:22:03.948]        // -> [canReadPins <= 0x00000001]
[02:22:03.948]    </block>
[02:22:03.948]    <control if="" while="1" timeout="200" info="">
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.948]      // while-condition  =>  TRUE
[02:22:03.948]      // while "1"  (timeout="200")
[02:22:03.958]      // while-condition  =>  TRUE
[02:22:03.958]      // while "1"  (timeout="200")
[02:22:03.958]      // while  =>  TIMEOUT
[02:22:03.958]      // end while "1"
[02:22:03.958]    </control>
[02:22:03.958]    <control if="canReadPins" while="" timeout="0" info="">
[02:22:03.958]      // if-block "canReadPins"
[02:22:03.958]        // =>  TRUE
[02:22:03.958]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:22:03.958]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:22:03.958]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:22:03.958]        // while-condition  =>  FALSE
[02:22:03.958]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:22:03.958]      </control>
[02:22:03.958]      // end if-block "canReadPins"
[02:22:03.958]    </control>
[02:22:03.958]    <control if="!canReadPins" while="" timeout="0" info="">
[02:22:03.958]      // if-block "!canReadPins"
[02:22:03.958]        // =>  FALSE
[02:22:03.958]      // skip if-block "!canReadPins"
[02:22:03.958]    </control>
[02:22:03.958]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:22:03.958]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:22:03.958]        // =>  TRUE
[02:22:03.958]      <block atomic="false" info="">
[02:22:03.958]        WriteAP(0x00, 0x190008);
[02:22:03.968]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:22:03.968]        WriteAP(0xF0, 0x01);
[02:22:03.968]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:22:03.968]      </block>
[02:22:03.968]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:22:03.968]    </control>
[02:22:03.968]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:22:03.968]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:22:03.968]        // =>  FALSE
[02:22:03.968]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:22:03.968]    </control>
[02:22:03.968]    <block atomic="false" info="">
[02:22:03.968]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:22:03.978]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:22:03.978]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:22:03.978]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:22:03.978]      __ap = 0; //lets make sure we reset the access point selection
[02:22:03.978]        // -> [__ap <= 0x00000000]
[02:22:03.978]    </block>
[02:22:03.978]  </sequence>
[02:22:03.978]  
[02:22:04.008]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:22:04.008]  
[02:22:04.008]  <debugvars>
[02:22:04.008]    // Pre-defined
[02:22:04.008]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:22:04.008]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:22:04.008]    __dp=0x00000000
[02:22:04.008]    __ap=0x00000000
[02:22:04.008]    __traceout=0x00000000      (Trace Disabled)
[02:22:04.008]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:22:04.008]    __FlashAddr=0x00000000
[02:22:04.008]    __FlashLen=0x00000000
[02:22:04.008]    __FlashArg=0x00000000
[02:22:04.008]    __FlashOp=0x00000000
[02:22:04.008]    __Result=0x00000000
[02:22:04.008]  </debugvars>
[02:22:04.008]  
[02:22:04.008]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:22:04.008]    <block atomic="false" info="">
[02:22:04.008]      __var deviceID = 0;
[02:22:04.008]        // -> [deviceID <= 0x00000000]
[02:22:04.008]      __var version = 0;
[02:22:04.008]        // -> [version <= 0x00000000]
[02:22:04.008]      __var partNum = 0;
[02:22:04.008]        // -> [partNum <= 0x00000000]
[02:22:04.008]      __var manuf = 0;
[02:22:04.008]        // -> [manuf <= 0x00000000]
[02:22:04.008]      __var isMSPM0G1X0X_G3X0X = 0;
[02:22:04.008]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:22:04.008]      __var isProduction = 0;
[02:22:04.008]        // -> [isProduction <= 0x00000000]
[02:22:04.008]      __var continueId = 0;
[02:22:04.008]        // -> [continueId <= 0x00000000]
[02:22:04.008]      deviceID =   Read32(0x41C40004);
[02:22:04.018]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:22:04.018]        // -> [deviceID <= 0x2BB8802F]
[02:22:04.018]      version = deviceID >> 28;
[02:22:04.018]        // -> [version <= 0x00000002]
[02:22:04.018]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:22:04.018]        // -> [partNum <= 0x0000BB88]
[02:22:04.018]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:22:04.018]        // -> [manuf <= 0x00000017]
[02:22:04.018]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:22:04.018]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:22:04.018]      isProduction = (version > 0);
[02:22:04.018]        // -> [isProduction <= 0x00000001]
[02:22:04.018]    </block>
[02:22:04.018]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:22:04.018]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:22:04.018]        // =>  FALSE
[02:22:04.018]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:22:04.018]    </control>
[02:22:04.018]    <control if="continueId == 4" while="" timeout="0" info="">
[02:22:04.018]      // if-block "continueId == 4"
[02:22:04.018]        // =>  FALSE
[02:22:04.018]      // skip if-block "continueId == 4"
[02:22:04.018]    </control>
[02:22:04.018]    <control if="!isProduction" while="" timeout="0" info="">
[02:22:04.018]      // if-block "!isProduction"
[02:22:04.018]        // =>  FALSE
[02:22:04.018]      // skip if-block "!isProduction"
[02:22:04.018]    </control>
[02:22:04.018]  </sequence>
[02:22:04.018]  
[02:23:42.501]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:23:42.501]  
[02:23:42.509]  <debugvars>
[02:23:42.509]    // Pre-defined
[02:23:42.509]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:23:42.509]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:23:42.509]    __dp=0x00000000
[02:23:42.509]    __ap=0x00000000
[02:23:42.509]    __traceout=0x00000000      (Trace Disabled)
[02:23:42.509]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:23:42.509]    __FlashAddr=0x00000000
[02:23:42.509]    __FlashLen=0x00000000
[02:23:42.510]    __FlashArg=0x00000000
[02:23:42.510]    __FlashOp=0x00000000
[02:23:42.510]    __Result=0x00000000
[02:23:42.510]  </debugvars>
[02:23:42.510]  
[02:23:42.510]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:23:42.510]    <block atomic="false" info="">
[02:23:42.510]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:23:42.510]        // -> [isSWJ <= 0x00000001]
[02:23:42.510]      __var hasDormant = __protocol & 0x00020000;
[02:23:42.511]        // -> [hasDormant <= 0x00000000]
[02:23:42.511]      __var protType   = __protocol & 0x0000FFFF;
[02:23:42.511]        // -> [protType <= 0x00000002]
[02:23:42.511]    </block>
[02:23:42.511]    <control if="protType == 1" while="" timeout="0" info="">
[02:23:42.511]      // if-block "protType == 1"
[02:23:42.511]        // =>  FALSE
[02:23:42.511]      // skip if-block "protType == 1"
[02:23:42.511]    </control>
[02:23:42.511]    <control if="protType == 2" while="" timeout="0" info="">
[02:23:42.513]      // if-block "protType == 2"
[02:23:42.513]        // =>  TRUE
[02:23:42.513]      <control if="isSWJ" while="" timeout="0" info="">
[02:23:42.513]        // if-block "isSWJ"
[02:23:42.513]          // =>  TRUE
[02:23:42.513]        <control if="hasDormant" while="" timeout="0" info="">
[02:23:42.513]          // if-block "hasDormant"
[02:23:42.513]            // =>  FALSE
[02:23:42.513]          // skip if-block "hasDormant"
[02:23:42.513]        </control>
[02:23:42.513]        <control if="!hasDormant" while="" timeout="0" info="">
[02:23:42.513]          // if-block "!hasDormant"
[02:23:42.513]            // =>  TRUE
[02:23:42.513]          <block atomic="false" info="">
[02:23:42.513]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:23:42.517]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:23:42.517]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:23:42.517]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:23:42.517]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:23:42.517]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:23:42.517]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:23:42.526]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:23:42.526]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:23:42.526]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:23:42.526]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:23:42.526]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:23:42.526]          </block>
[02:23:42.526]          // end if-block "!hasDormant"
[02:23:42.526]        </control>
[02:23:42.526]        // end if-block "isSWJ"
[02:23:42.526]      </control>
[02:23:42.526]      <control if="!isSWJ" while="" timeout="0" info="">
[02:23:42.526]        // if-block "!isSWJ"
[02:23:42.526]          // =>  FALSE
[02:23:42.526]        // skip if-block "!isSWJ"
[02:23:42.526]      </control>
[02:23:42.526]      <block atomic="false" info="">
[02:23:42.526]        ReadDP(0x0);
[02:23:42.526]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:23:42.526]      </block>
[02:23:42.526]      // end if-block "protType == 2"
[02:23:42.526]    </control>
[02:23:42.526]  </sequence>
[02:23:42.536]  
[02:23:42.538]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:23:42.538]  
[02:23:42.538]  <debugvars>
[02:23:42.538]    // Pre-defined
[02:23:42.538]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:23:42.538]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:23:42.538]    __dp=0x00000000
[02:23:42.538]    __ap=0x00000000
[02:23:42.538]    __traceout=0x00000000      (Trace Disabled)
[02:23:42.538]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:23:42.538]    __FlashAddr=0x00000000
[02:23:42.538]    __FlashLen=0x00000000
[02:23:42.538]    __FlashArg=0x00000000
[02:23:42.538]    __FlashOp=0x00000000
[02:23:42.538]    __Result=0x00000000
[02:23:42.538]  </debugvars>
[02:23:42.538]  
[02:23:42.538]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:23:42.538]    <block atomic="false" info="">
[02:23:42.538]      __var SW_DP_ABORT       = 0x0;
[02:23:42.538]        // -> [SW_DP_ABORT <= 0x00000000]
[02:23:42.541]      __var DP_CTRL_STAT      = 0x4;
[02:23:42.541]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:23:42.541]      __var DP_SELECT         = 0x8;
[02:23:42.541]        // -> [DP_SELECT <= 0x00000008]
[02:23:42.541]      __var powered_down      = 0;
[02:23:42.541]        // -> [powered_down <= 0x00000000]
[02:23:42.541]      WriteDP(DP_SELECT, 0x00000000);
[02:23:42.542]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:23:42.542]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:23:42.547]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:23:42.547]        // -> [powered_down <= 0x00000001]
[02:23:42.547]    </block>
[02:23:42.547]    <control if="powered_down" while="" timeout="0" info="">
[02:23:42.547]      // if-block "powered_down"
[02:23:42.547]        // =>  TRUE
[02:23:42.547]      <block atomic="false" info="">
[02:23:42.548]        Message(0, "Debug/System power-up request sent");
[02:23:42.548]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:23:42.548]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:23:42.548]      </block>
[02:23:42.548]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:23:42.548]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:23:42.552]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:23:42.552]        // while-condition  =>  FALSE
[02:23:42.552]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:23:42.552]      </control>
[02:23:42.552]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:23:42.552]        // if-block "(__protocol & 0xFFFF) == 1"
[02:23:42.552]          // =>  FALSE
[02:23:42.552]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:23:42.552]      </control>
[02:23:42.552]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:23:42.552]        // if-block "(__protocol & 0xFFFF) == 2"
[02:23:42.552]          // =>  TRUE
[02:23:42.552]        <block atomic="false" info="">
[02:23:42.552]          Message(0, "executing SWD power up");
[02:23:42.556]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:23:42.557]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:23:42.557]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:23:42.558]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:23:42.558]        </block>
[02:23:42.558]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:23:42.558]      </control>
[02:23:42.558]      // end if-block "powered_down"
[02:23:42.558]    </control>
[02:23:42.558]    <block atomic="false" info="">
[02:23:42.558]      __var DEBUG_PORT_VAL    = 0;
[02:23:42.558]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:23:42.558]      __var ACCESS_POINT_VAL  = 0;
[02:23:42.558]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:23:42.558]      __ap = 1; 
[02:23:42.558]        // -> [__ap <= 0x00000001]
[02:23:42.558]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:23:42.571]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:23:42.571]      __ap = 4;
[02:23:42.571]        // -> [__ap <= 0x00000004]
[02:23:42.571]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:23:42.583]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:23:42.583]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:23:42.583]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:23:42.585]    </block>
[02:23:42.585]    <block atomic="false" info="">
[02:23:42.585]      __var nReset = 0x80;
[02:23:42.585]        // -> [nReset <= 0x00000080]
[02:23:42.585]      __var canReadPins = 0;
[02:23:42.585]        // -> [canReadPins <= 0x00000000]
[02:23:42.585]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:23:42.589]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:23:42.589]        // -> [canReadPins <= 0x00000001]
[02:23:42.589]    </block>
[02:23:42.589]    <control if="" while="1" timeout="200" info="">
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.589]      // while "1"  (timeout="200")
[02:23:42.589]      // while-condition  =>  TRUE
[02:23:42.596]      // while "1"  (timeout="200")
[02:23:42.596]      // while-condition  =>  TRUE
[02:23:42.596]      // while "1"  (timeout="200")
[02:23:42.596]      // while-condition  =>  TRUE
[02:23:42.596]      // while "1"  (timeout="200")
[02:23:42.596]      // while-condition  =>  TRUE
[02:23:42.596]      // while "1"  (timeout="200")
[02:23:42.596]      // while-condition  =>  TRUE
[02:23:42.596]      // while "1"  (timeout="200")
[02:23:42.596]      // while-condition  =>  TRUE
[02:23:42.596]      // while "1"  (timeout="200")
[02:23:42.596]      // while-condition  =>  TRUE
[02:23:42.598]      // while "1"  (timeout="200")
[02:23:42.598]      // while  =>  TIMEOUT
[02:23:42.598]      // end while "1"
[02:23:42.598]    </control>
[02:23:42.598]    <control if="canReadPins" while="" timeout="0" info="">
[02:23:42.598]      // if-block "canReadPins"
[02:23:42.598]        // =>  TRUE
[02:23:42.598]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:23:42.598]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:23:42.598]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:23:42.598]        // while-condition  =>  FALSE
[02:23:42.598]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:23:42.598]      </control>
[02:23:42.598]      // end if-block "canReadPins"
[02:23:42.598]    </control>
[02:23:42.598]    <control if="!canReadPins" while="" timeout="0" info="">
[02:23:42.598]      // if-block "!canReadPins"
[02:23:42.598]        // =>  FALSE
[02:23:42.598]      // skip if-block "!canReadPins"
[02:23:42.598]    </control>
[02:23:42.598]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:23:42.598]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:23:42.598]        // =>  TRUE
[02:23:42.598]      <block atomic="false" info="">
[02:23:42.598]        WriteAP(0x00, 0x190008);
[02:23:42.598]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:23:42.598]        WriteAP(0xF0, 0x01);
[02:23:42.598]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:23:42.608]      </block>
[02:23:42.608]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:23:42.608]    </control>
[02:23:42.608]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:23:42.608]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:23:42.608]        // =>  FALSE
[02:23:42.608]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:23:42.608]    </control>
[02:23:42.608]    <block atomic="false" info="">
[02:23:42.608]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:23:42.608]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:23:42.608]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:23:42.608]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:23:42.608]      __ap = 0; //lets make sure we reset the access point selection
[02:23:42.608]        // -> [__ap <= 0x00000000]
[02:23:42.608]    </block>
[02:23:42.608]  </sequence>
[02:23:42.608]  
[02:23:42.638]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:23:42.638]  
[02:23:42.638]  <debugvars>
[02:23:42.638]    // Pre-defined
[02:23:42.638]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:23:42.638]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:23:42.638]    __dp=0x00000000
[02:23:42.638]    __ap=0x00000000
[02:23:42.638]    __traceout=0x00000000      (Trace Disabled)
[02:23:42.638]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:23:42.638]    __FlashAddr=0x00000000
[02:23:42.638]    __FlashLen=0x00000000
[02:23:42.638]    __FlashArg=0x00000000
[02:23:42.638]    __FlashOp=0x00000000
[02:23:42.638]    __Result=0x00000000
[02:23:42.638]  </debugvars>
[02:23:42.638]  
[02:23:42.638]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:23:42.638]    <block atomic="false" info="">
[02:23:42.638]      __var deviceID = 0;
[02:23:42.638]        // -> [deviceID <= 0x00000000]
[02:23:42.643]      __var version = 0;
[02:23:42.643]        // -> [version <= 0x00000000]
[02:23:42.643]      __var partNum = 0;
[02:23:42.643]        // -> [partNum <= 0x00000000]
[02:23:42.643]      __var manuf = 0;
[02:23:42.643]        // -> [manuf <= 0x00000000]
[02:23:42.643]      __var isMSPM0G1X0X_G3X0X = 0;
[02:23:42.643]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:23:42.643]      __var isProduction = 0;
[02:23:42.643]        // -> [isProduction <= 0x00000000]
[02:23:42.643]      __var continueId = 0;
[02:23:42.643]        // -> [continueId <= 0x00000000]
[02:23:42.643]      deviceID =   Read32(0x41C40004);
[02:23:42.648]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:23:42.649]        // -> [deviceID <= 0x2BB8802F]
[02:23:42.649]      version = deviceID >> 28;
[02:23:42.649]        // -> [version <= 0x00000002]
[02:23:42.649]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:23:42.649]        // -> [partNum <= 0x0000BB88]
[02:23:42.649]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:23:42.649]        // -> [manuf <= 0x00000017]
[02:23:42.649]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:23:42.649]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:23:42.649]      isProduction = (version > 0);
[02:23:42.649]        // -> [isProduction <= 0x00000001]
[02:23:42.649]    </block>
[02:23:42.649]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:23:42.649]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:23:42.649]        // =>  FALSE
[02:23:42.649]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:23:42.649]    </control>
[02:23:42.649]    <control if="continueId == 4" while="" timeout="0" info="">
[02:23:42.649]      // if-block "continueId == 4"
[02:23:42.649]        // =>  FALSE
[02:23:42.649]      // skip if-block "continueId == 4"
[02:23:42.649]    </control>
[02:23:42.649]    <control if="!isProduction" while="" timeout="0" info="">
[02:23:42.649]      // if-block "!isProduction"
[02:23:42.652]        // =>  FALSE
[02:23:42.652]      // skip if-block "!isProduction"
[02:23:42.652]    </control>
[02:23:42.652]  </sequence>
[02:23:42.652]  
[02:28:11.575]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:28:11.575]  
[02:28:11.585]  <debugvars>
[02:28:11.585]    // Pre-defined
[02:28:11.585]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:28:11.585]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:28:11.585]    __dp=0x00000000
[02:28:11.585]    __ap=0x00000000
[02:28:11.585]    __traceout=0x00000000      (Trace Disabled)
[02:28:11.585]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:28:11.585]    __FlashAddr=0x00000000
[02:28:11.586]    __FlashLen=0x00000000
[02:28:11.586]    __FlashArg=0x00000000
[02:28:11.586]    __FlashOp=0x00000000
[02:28:11.586]    __Result=0x00000000
[02:28:11.586]  </debugvars>
[02:28:11.586]  
[02:28:11.586]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:28:11.586]    <block atomic="false" info="">
[02:28:11.586]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:28:11.586]        // -> [isSWJ <= 0x00000001]
[02:28:11.586]      __var hasDormant = __protocol & 0x00020000;
[02:28:11.586]        // -> [hasDormant <= 0x00000000]
[02:28:11.586]      __var protType   = __protocol & 0x0000FFFF;
[02:28:11.586]        // -> [protType <= 0x00000002]
[02:28:11.586]    </block>
[02:28:11.586]    <control if="protType == 1" while="" timeout="0" info="">
[02:28:11.586]      // if-block "protType == 1"
[02:28:11.586]        // =>  FALSE
[02:28:11.588]      // skip if-block "protType == 1"
[02:28:11.588]    </control>
[02:28:11.588]    <control if="protType == 2" while="" timeout="0" info="">
[02:28:11.588]      // if-block "protType == 2"
[02:28:11.588]        // =>  TRUE
[02:28:11.588]      <control if="isSWJ" while="" timeout="0" info="">
[02:28:11.588]        // if-block "isSWJ"
[02:28:11.588]          // =>  TRUE
[02:28:11.588]        <control if="hasDormant" while="" timeout="0" info="">
[02:28:11.588]          // if-block "hasDormant"
[02:28:11.588]            // =>  FALSE
[02:28:11.588]          // skip if-block "hasDormant"
[02:28:11.588]        </control>
[02:28:11.588]        <control if="!hasDormant" while="" timeout="0" info="">
[02:28:11.588]          // if-block "!hasDormant"
[02:28:11.589]            // =>  TRUE
[02:28:11.589]          <block atomic="false" info="">
[02:28:11.589]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:28:11.589]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:28:11.589]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:28:11.593]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:28:11.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:28:11.593]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:28:11.593]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:28:11.602]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:28:11.602]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:28:11.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:28:11.603]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:28:11.605]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:28:11.605]          </block>
[02:28:11.605]          // end if-block "!hasDormant"
[02:28:11.605]        </control>
[02:28:11.605]        // end if-block "isSWJ"
[02:28:11.605]      </control>
[02:28:11.605]      <control if="!isSWJ" while="" timeout="0" info="">
[02:28:11.605]        // if-block "!isSWJ"
[02:28:11.606]          // =>  FALSE
[02:28:11.606]        // skip if-block "!isSWJ"
[02:28:11.606]      </control>
[02:28:11.606]      <block atomic="false" info="">
[02:28:11.606]        ReadDP(0x0);
[02:28:11.607]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:28:11.607]      </block>
[02:28:11.607]      // end if-block "protType == 2"
[02:28:11.607]    </control>
[02:28:11.607]  </sequence>
[02:28:11.607]  
[02:28:11.609]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:28:11.609]  
[02:28:11.609]  <debugvars>
[02:28:11.609]    // Pre-defined
[02:28:11.609]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:28:11.609]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:28:11.609]    __dp=0x00000000
[02:28:11.609]    __ap=0x00000000
[02:28:11.609]    __traceout=0x00000000      (Trace Disabled)
[02:28:11.609]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:28:11.609]    __FlashAddr=0x00000000
[02:28:11.612]    __FlashLen=0x00000000
[02:28:11.612]    __FlashArg=0x00000000
[02:28:11.612]    __FlashOp=0x00000000
[02:28:11.612]    __Result=0x00000000
[02:28:11.612]  </debugvars>
[02:28:11.612]  
[02:28:11.612]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:28:11.612]    <block atomic="false" info="">
[02:28:11.612]      __var SW_DP_ABORT       = 0x0;
[02:28:11.612]        // -> [SW_DP_ABORT <= 0x00000000]
[02:28:11.612]      __var DP_CTRL_STAT      = 0x4;
[02:28:11.612]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:28:11.613]      __var DP_SELECT         = 0x8;
[02:28:11.613]        // -> [DP_SELECT <= 0x00000008]
[02:28:11.613]      __var powered_down      = 0;
[02:28:11.613]        // -> [powered_down <= 0x00000000]
[02:28:11.613]      WriteDP(DP_SELECT, 0x00000000);
[02:28:11.614]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:28:11.616]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:28:11.617]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:28:11.617]        // -> [powered_down <= 0x00000001]
[02:28:11.617]    </block>
[02:28:11.617]    <control if="powered_down" while="" timeout="0" info="">
[02:28:11.617]      // if-block "powered_down"
[02:28:11.617]        // =>  TRUE
[02:28:11.617]      <block atomic="false" info="">
[02:28:11.617]        Message(0, "Debug/System power-up request sent");
[02:28:11.619]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:28:11.623]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:28:11.623]      </block>
[02:28:11.623]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:28:11.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:28:11.626]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:28:11.626]        // while-condition  =>  FALSE
[02:28:11.626]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:28:11.626]      </control>
[02:28:11.626]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:28:11.626]        // if-block "(__protocol & 0xFFFF) == 1"
[02:28:11.626]          // =>  FALSE
[02:28:11.626]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:28:11.626]      </control>
[02:28:11.626]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:28:11.626]        // if-block "(__protocol & 0xFFFF) == 2"
[02:28:11.626]          // =>  TRUE
[02:28:11.626]        <block atomic="false" info="">
[02:28:11.626]          Message(0, "executing SWD power up");
[02:28:11.626]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:28:11.626]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:28:11.626]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:28:11.626]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:28:11.626]        </block>
[02:28:11.626]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:28:11.626]      </control>
[02:28:11.626]      // end if-block "powered_down"
[02:28:11.626]    </control>
[02:28:11.626]    <block atomic="false" info="">
[02:28:11.626]      __var DEBUG_PORT_VAL    = 0;
[02:28:11.635]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:28:11.635]      __var ACCESS_POINT_VAL  = 0;
[02:28:11.635]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:28:11.635]      __ap = 1; 
[02:28:11.635]        // -> [__ap <= 0x00000001]
[02:28:11.635]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:28:11.652]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:28:11.652]      __ap = 4;
[02:28:11.652]        // -> [__ap <= 0x00000004]
[02:28:11.652]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:28:11.652]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:28:11.652]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:28:11.652]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:28:11.657]    </block>
[02:28:11.657]    <block atomic="false" info="">
[02:28:11.657]      __var nReset = 0x80;
[02:28:11.657]        // -> [nReset <= 0x00000080]
[02:28:11.657]      __var canReadPins = 0;
[02:28:11.657]        // -> [canReadPins <= 0x00000000]
[02:28:11.657]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:28:11.659]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:28:11.659]        // -> [canReadPins <= 0x00000001]
[02:28:11.659]    </block>
[02:28:11.659]    <control if="" while="1" timeout="200" info="">
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.659]      // while "1"  (timeout="200")
[02:28:11.659]      // while-condition  =>  TRUE
[02:28:11.663]      // while "1"  (timeout="200")
[02:28:11.663]      // while  =>  TIMEOUT
[02:28:11.663]      // end while "1"
[02:28:11.663]    </control>
[02:28:11.663]    <control if="canReadPins" while="" timeout="0" info="">
[02:28:11.663]      // if-block "canReadPins"
[02:28:11.663]        // =>  TRUE
[02:28:11.663]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:28:11.663]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:28:11.665]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:28:11.665]        // while-condition  =>  FALSE
[02:28:11.665]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:28:11.665]      </control>
[02:28:11.665]      // end if-block "canReadPins"
[02:28:11.665]    </control>
[02:28:11.665]    <control if="!canReadPins" while="" timeout="0" info="">
[02:28:11.665]      // if-block "!canReadPins"
[02:28:11.665]        // =>  FALSE
[02:28:11.665]      // skip if-block "!canReadPins"
[02:28:11.665]    </control>
[02:28:11.665]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:28:11.665]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:28:11.665]        // =>  TRUE
[02:28:11.665]      <block atomic="false" info="">
[02:28:11.665]        WriteAP(0x00, 0x190008);
[02:28:11.669]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:28:11.669]        WriteAP(0xF0, 0x01);
[02:28:11.673]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:28:11.673]      </block>
[02:28:11.673]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:28:11.673]    </control>
[02:28:11.673]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:28:11.673]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:28:11.673]        // =>  FALSE
[02:28:11.673]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:28:11.673]    </control>
[02:28:11.673]    <block atomic="false" info="">
[02:28:11.673]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:28:11.677]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:28:11.677]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:28:11.677]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:28:11.679]      __ap = 0; //lets make sure we reset the access point selection
[02:28:11.680]        // -> [__ap <= 0x00000000]
[02:28:11.680]    </block>
[02:28:11.680]  </sequence>
[02:28:11.680]  
[02:28:11.710]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:28:11.710]  
[02:28:11.710]  <debugvars>
[02:28:11.710]    // Pre-defined
[02:28:11.710]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:28:11.710]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:28:11.710]    __dp=0x00000000
[02:28:11.710]    __ap=0x00000000
[02:28:11.710]    __traceout=0x00000000      (Trace Disabled)
[02:28:11.710]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:28:11.710]    __FlashAddr=0x00000000
[02:28:11.710]    __FlashLen=0x00000000
[02:28:11.710]    __FlashArg=0x00000000
[02:28:11.710]    __FlashOp=0x00000000
[02:28:11.710]    __Result=0x00000000
[02:28:11.710]  </debugvars>
[02:28:11.710]  
[02:28:11.710]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:28:11.710]    <block atomic="false" info="">
[02:28:11.710]      __var deviceID = 0;
[02:28:11.710]        // -> [deviceID <= 0x00000000]
[02:28:11.710]      __var version = 0;
[02:28:11.710]        // -> [version <= 0x00000000]
[02:28:11.710]      __var partNum = 0;
[02:28:11.710]        // -> [partNum <= 0x00000000]
[02:28:11.710]      __var manuf = 0;
[02:28:11.710]        // -> [manuf <= 0x00000000]
[02:28:11.710]      __var isMSPM0G1X0X_G3X0X = 0;
[02:28:11.710]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:28:11.710]      __var isProduction = 0;
[02:28:11.710]        // -> [isProduction <= 0x00000000]
[02:28:11.710]      __var continueId = 0;
[02:28:11.710]        // -> [continueId <= 0x00000000]
[02:28:11.710]      deviceID =   Read32(0x41C40004);
[02:28:11.720]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:28:11.720]        // -> [deviceID <= 0x2BB8802F]
[02:28:11.720]      version = deviceID >> 28;
[02:28:11.720]        // -> [version <= 0x00000002]
[02:28:11.720]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:28:11.720]        // -> [partNum <= 0x0000BB88]
[02:28:11.720]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:28:11.720]        // -> [manuf <= 0x00000017]
[02:28:11.720]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:28:11.720]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:28:11.720]      isProduction = (version > 0);
[02:28:11.720]        // -> [isProduction <= 0x00000001]
[02:28:11.720]    </block>
[02:28:11.720]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:28:11.720]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:28:11.728]        // =>  FALSE
[02:28:11.728]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:28:11.728]    </control>
[02:28:11.728]    <control if="continueId == 4" while="" timeout="0" info="">
[02:28:11.728]      // if-block "continueId == 4"
[02:28:11.728]        // =>  FALSE
[02:28:11.728]      // skip if-block "continueId == 4"
[02:28:11.728]    </control>
[02:28:11.728]    <control if="!isProduction" while="" timeout="0" info="">
[02:28:11.728]      // if-block "!isProduction"
[02:28:11.728]        // =>  FALSE
[02:28:11.728]      // skip if-block "!isProduction"
[02:28:11.728]    </control>
[02:28:11.728]  </sequence>
[02:28:11.728]  
[02:29:48.511]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:29:48.511]  
[02:29:48.511]  <debugvars>
[02:29:48.511]    // Pre-defined
[02:29:48.511]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:29:48.511]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:29:48.511]    __dp=0x00000000
[02:29:48.511]    __ap=0x00000000
[02:29:48.511]    __traceout=0x00000000      (Trace Disabled)
[02:29:48.511]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:29:48.511]    __FlashAddr=0x00000000
[02:29:48.511]    __FlashLen=0x00000000
[02:29:48.511]    __FlashArg=0x00000000
[02:29:48.511]    __FlashOp=0x00000000
[02:29:48.511]    __Result=0x00000000
[02:29:48.511]  </debugvars>
[02:29:48.511]  
[02:29:48.511]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:29:48.511]    <block atomic="false" info="">
[02:29:48.511]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:29:48.511]        // -> [isSWJ <= 0x00000001]
[02:29:48.520]      __var hasDormant = __protocol & 0x00020000;
[02:29:48.520]        // -> [hasDormant <= 0x00000000]
[02:29:48.520]      __var protType   = __protocol & 0x0000FFFF;
[02:29:48.520]        // -> [protType <= 0x00000002]
[02:29:48.520]    </block>
[02:29:48.520]    <control if="protType == 1" while="" timeout="0" info="">
[02:29:48.520]      // if-block "protType == 1"
[02:29:48.520]        // =>  FALSE
[02:29:48.520]      // skip if-block "protType == 1"
[02:29:48.520]    </control>
[02:29:48.520]    <control if="protType == 2" while="" timeout="0" info="">
[02:29:48.520]      // if-block "protType == 2"
[02:29:48.520]        // =>  TRUE
[02:29:48.520]      <control if="isSWJ" while="" timeout="0" info="">
[02:29:48.520]        // if-block "isSWJ"
[02:29:48.520]          // =>  TRUE
[02:29:48.520]        <control if="hasDormant" while="" timeout="0" info="">
[02:29:48.520]          // if-block "hasDormant"
[02:29:48.520]            // =>  FALSE
[02:29:48.522]          // skip if-block "hasDormant"
[02:29:48.522]        </control>
[02:29:48.522]        <control if="!hasDormant" while="" timeout="0" info="">
[02:29:48.522]          // if-block "!hasDormant"
[02:29:48.522]            // =>  TRUE
[02:29:48.522]          <block atomic="false" info="">
[02:29:48.522]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:29:48.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:29:48.522]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:29:48.522]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:29:48.522]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:29:48.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:29:48.522]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:29:48.530]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:29:48.530]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:29:48.532]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:29:48.532]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:29:48.532]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:29:48.532]          </block>
[02:29:48.532]          // end if-block "!hasDormant"
[02:29:48.532]        </control>
[02:29:48.532]        // end if-block "isSWJ"
[02:29:48.532]      </control>
[02:29:48.532]      <control if="!isSWJ" while="" timeout="0" info="">
[02:29:48.532]        // if-block "!isSWJ"
[02:29:48.532]          // =>  FALSE
[02:29:48.532]        // skip if-block "!isSWJ"
[02:29:48.532]      </control>
[02:29:48.532]      <block atomic="false" info="">
[02:29:48.532]        ReadDP(0x0);
[02:29:48.537]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:29:48.538]      </block>
[02:29:48.538]      // end if-block "protType == 2"
[02:29:48.538]    </control>
[02:29:48.538]  </sequence>
[02:29:48.539]  
[02:29:48.542]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:29:48.542]  
[02:29:48.542]  <debugvars>
[02:29:48.542]    // Pre-defined
[02:29:48.543]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:29:48.543]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:29:48.543]    __dp=0x00000000
[02:29:48.543]    __ap=0x00000000
[02:29:48.543]    __traceout=0x00000000      (Trace Disabled)
[02:29:48.543]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:29:48.543]    __FlashAddr=0x00000000
[02:29:48.543]    __FlashLen=0x00000000
[02:29:48.543]    __FlashArg=0x00000000
[02:29:48.543]    __FlashOp=0x00000000
[02:29:48.543]    __Result=0x00000000
[02:29:48.544]  </debugvars>
[02:29:48.544]  
[02:29:48.544]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:29:48.544]    <block atomic="false" info="">
[02:29:48.544]      __var SW_DP_ABORT       = 0x0;
[02:29:48.544]        // -> [SW_DP_ABORT <= 0x00000000]
[02:29:48.544]      __var DP_CTRL_STAT      = 0x4;
[02:29:48.544]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:29:48.544]      __var DP_SELECT         = 0x8;
[02:29:48.544]        // -> [DP_SELECT <= 0x00000008]
[02:29:48.544]      __var powered_down      = 0;
[02:29:48.545]        // -> [powered_down <= 0x00000000]
[02:29:48.545]      WriteDP(DP_SELECT, 0x00000000);
[02:29:48.546]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:29:48.546]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:29:48.551]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:29:48.551]        // -> [powered_down <= 0x00000001]
[02:29:48.552]    </block>
[02:29:48.552]    <control if="powered_down" while="" timeout="0" info="">
[02:29:48.552]      // if-block "powered_down"
[02:29:48.552]        // =>  TRUE
[02:29:48.552]      <block atomic="false" info="">
[02:29:48.552]        Message(0, "Debug/System power-up request sent");
[02:29:48.553]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:29:48.556]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:29:48.556]      </block>
[02:29:48.556]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:29:48.556]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:29:48.557]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:29:48.557]        // while-condition  =>  FALSE
[02:29:48.558]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:29:48.558]      </control>
[02:29:48.558]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:29:48.558]        // if-block "(__protocol & 0xFFFF) == 1"
[02:29:48.558]          // =>  FALSE
[02:29:48.558]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:29:48.558]      </control>
[02:29:48.558]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:29:48.558]        // if-block "(__protocol & 0xFFFF) == 2"
[02:29:48.558]          // =>  TRUE
[02:29:48.559]        <block atomic="false" info="">
[02:29:48.559]          Message(0, "executing SWD power up");
[02:29:48.560]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:29:48.562]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:29:48.562]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:29:48.563]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:29:48.563]        </block>
[02:29:48.564]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:29:48.564]      </control>
[02:29:48.564]      // end if-block "powered_down"
[02:29:48.564]    </control>
[02:29:48.564]    <block atomic="false" info="">
[02:29:48.564]      __var DEBUG_PORT_VAL    = 0;
[02:29:48.564]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:29:48.564]      __var ACCESS_POINT_VAL  = 0;
[02:29:48.564]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:29:48.565]      __ap = 1; 
[02:29:48.565]        // -> [__ap <= 0x00000001]
[02:29:48.565]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:29:48.570]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:29:48.570]      __ap = 4;
[02:29:48.570]        // -> [__ap <= 0x00000004]
[02:29:48.570]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:29:48.573]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:29:48.573]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:29:48.573]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:29:48.577]    </block>
[02:29:48.577]    <block atomic="false" info="">
[02:29:48.577]      __var nReset = 0x80;
[02:29:48.577]        // -> [nReset <= 0x00000080]
[02:29:48.577]      __var canReadPins = 0;
[02:29:48.577]        // -> [canReadPins <= 0x00000000]
[02:29:48.577]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:29:48.580]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:29:48.580]        // -> [canReadPins <= 0x00000001]
[02:29:48.580]    </block>
[02:29:48.580]    <control if="" while="1" timeout="200" info="">
[02:29:48.580]      // while "1"  (timeout="200")
[02:29:48.580]      // while-condition  =>  TRUE
[02:29:48.580]      // while "1"  (timeout="200")
[02:29:48.580]      // while-condition  =>  TRUE
[02:29:48.580]      // while "1"  (timeout="200")
[02:29:48.580]      // while-condition  =>  TRUE
[02:29:48.580]      // while "1"  (timeout="200")
[02:29:48.580]      // while-condition  =>  TRUE
[02:29:48.580]      // while "1"  (timeout="200")
[02:29:48.580]      // while-condition  =>  TRUE
[02:29:48.582]      // while "1"  (timeout="200")
[02:29:48.582]      // while  =>  TIMEOUT
[02:29:48.582]      // end while "1"
[02:29:48.582]    </control>
[02:29:48.582]    <control if="canReadPins" while="" timeout="0" info="">
[02:29:48.582]      // if-block "canReadPins"
[02:29:48.582]        // =>  TRUE
[02:29:48.582]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:29:48.582]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:29:48.584]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:29:48.584]        // while-condition  =>  FALSE
[02:29:48.584]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:29:48.584]      </control>
[02:29:48.584]      // end if-block "canReadPins"
[02:29:48.584]    </control>
[02:29:48.585]    <control if="!canReadPins" while="" timeout="0" info="">
[02:29:48.585]      // if-block "!canReadPins"
[02:29:48.585]        // =>  FALSE
[02:29:48.585]      // skip if-block "!canReadPins"
[02:29:48.585]    </control>
[02:29:48.585]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:29:48.585]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:29:48.585]        // =>  TRUE
[02:29:48.585]      <block atomic="false" info="">
[02:29:48.586]        WriteAP(0x00, 0x190008);
[02:29:48.587]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:29:48.587]        WriteAP(0xF0, 0x01);
[02:29:48.591]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:29:48.591]      </block>
[02:29:48.591]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:29:48.591]    </control>
[02:29:48.591]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:29:48.591]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:29:48.591]        // =>  FALSE
[02:29:48.591]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:29:48.591]    </control>
[02:29:48.591]    <block atomic="false" info="">
[02:29:48.591]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:29:48.598]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:29:48.598]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:29:48.598]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:29:48.600]      __ap = 0; //lets make sure we reset the access point selection
[02:29:48.600]        // -> [__ap <= 0x00000000]
[02:29:48.600]    </block>
[02:29:48.600]  </sequence>
[02:29:48.600]  
[02:29:48.621]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:29:48.621]  
[02:29:48.621]  <debugvars>
[02:29:48.621]    // Pre-defined
[02:29:48.621]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:29:48.621]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:29:48.621]    __dp=0x00000000
[02:29:48.621]    __ap=0x00000000
[02:29:48.621]    __traceout=0x00000000      (Trace Disabled)
[02:29:48.621]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:29:48.621]    __FlashAddr=0x00000000
[02:29:48.621]    __FlashLen=0x00000000
[02:29:48.621]    __FlashArg=0x00000000
[02:29:48.621]    __FlashOp=0x00000000
[02:29:48.621]    __Result=0x00000000
[02:29:48.621]  </debugvars>
[02:29:48.621]  
[02:29:48.621]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:29:48.621]    <block atomic="false" info="">
[02:29:48.621]      __var deviceID = 0;
[02:29:48.621]        // -> [deviceID <= 0x00000000]
[02:29:48.621]      __var version = 0;
[02:29:48.621]        // -> [version <= 0x00000000]
[02:29:48.621]      __var partNum = 0;
[02:29:48.621]        // -> [partNum <= 0x00000000]
[02:29:48.621]      __var manuf = 0;
[02:29:48.621]        // -> [manuf <= 0x00000000]
[02:29:48.621]      __var isMSPM0G1X0X_G3X0X = 0;
[02:29:48.621]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:29:48.621]      __var isProduction = 0;
[02:29:48.621]        // -> [isProduction <= 0x00000000]
[02:29:48.621]      __var continueId = 0;
[02:29:48.621]        // -> [continueId <= 0x00000000]
[02:29:48.621]      deviceID =   Read32(0x41C40004);
[02:29:48.632]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:29:48.632]        // -> [deviceID <= 0x2BB8802F]
[02:29:48.632]      version = deviceID >> 28;
[02:29:48.632]        // -> [version <= 0x00000002]
[02:29:48.632]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:29:48.632]        // -> [partNum <= 0x0000BB88]
[02:29:48.632]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:29:48.632]        // -> [manuf <= 0x00000017]
[02:29:48.632]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:29:48.632]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:29:48.632]      isProduction = (version > 0);
[02:29:48.632]        // -> [isProduction <= 0x00000001]
[02:29:48.632]    </block>
[02:29:48.632]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:29:48.632]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:29:48.632]        // =>  FALSE
[02:29:48.632]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:29:48.632]    </control>
[02:29:48.632]    <control if="continueId == 4" while="" timeout="0" info="">
[02:29:48.632]      // if-block "continueId == 4"
[02:29:48.632]        // =>  FALSE
[02:29:48.632]      // skip if-block "continueId == 4"
[02:29:48.632]    </control>
[02:29:48.632]    <control if="!isProduction" while="" timeout="0" info="">
[02:29:48.632]      // if-block "!isProduction"
[02:29:48.632]        // =>  FALSE
[02:29:48.632]      // skip if-block "!isProduction"
[02:29:48.632]    </control>
[02:29:48.632]  </sequence>
[02:29:48.632]  
[02:40:54.248]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:40:54.248]  
[02:40:54.266]  <debugvars>
[02:40:54.266]    // Pre-defined
[02:40:54.266]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:40:54.266]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:40:54.266]    __dp=0x00000000
[02:40:54.266]    __ap=0x00000000
[02:40:54.266]    __traceout=0x00000000      (Trace Disabled)
[02:40:54.266]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:40:54.266]    __FlashAddr=0x00000000
[02:40:54.266]    __FlashLen=0x00000000
[02:40:54.266]    __FlashArg=0x00000000
[02:40:54.266]    __FlashOp=0x00000000
[02:40:54.266]    __Result=0x00000000
[02:40:54.266]  </debugvars>
[02:40:54.266]  
[02:40:54.266]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:40:54.266]    <block atomic="false" info="">
[02:40:54.266]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:40:54.266]        // -> [isSWJ <= 0x00000001]
[02:40:54.266]      __var hasDormant = __protocol & 0x00020000;
[02:40:54.266]        // -> [hasDormant <= 0x00000000]
[02:40:54.266]      __var protType   = __protocol & 0x0000FFFF;
[02:40:54.266]        // -> [protType <= 0x00000002]
[02:40:54.266]    </block>
[02:40:54.266]    <control if="protType == 1" while="" timeout="0" info="">
[02:40:54.266]      // if-block "protType == 1"
[02:40:54.269]        // =>  FALSE
[02:40:54.269]      // skip if-block "protType == 1"
[02:40:54.269]    </control>
[02:40:54.269]    <control if="protType == 2" while="" timeout="0" info="">
[02:40:54.269]      // if-block "protType == 2"
[02:40:54.269]        // =>  TRUE
[02:40:54.269]      <control if="isSWJ" while="" timeout="0" info="">
[02:40:54.269]        // if-block "isSWJ"
[02:40:54.269]          // =>  TRUE
[02:40:54.269]        <control if="hasDormant" while="" timeout="0" info="">
[02:40:54.269]          // if-block "hasDormant"
[02:40:54.269]            // =>  FALSE
[02:40:54.269]          // skip if-block "hasDormant"
[02:40:54.269]        </control>
[02:40:54.269]        <control if="!hasDormant" while="" timeout="0" info="">
[02:40:54.269]          // if-block "!hasDormant"
[02:40:54.269]            // =>  TRUE
[02:40:54.269]          <block atomic="false" info="">
[02:40:54.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:40:54.269]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:40:54.269]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:40:54.269]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:40:54.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:40:54.269]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:40:54.269]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:40:54.279]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:40:54.279]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:40:54.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:40:54.279]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:40:54.279]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:40:54.279]          </block>
[02:40:54.279]          // end if-block "!hasDormant"
[02:40:54.279]        </control>
[02:40:54.279]        // end if-block "isSWJ"
[02:40:54.279]      </control>
[02:40:54.279]      <control if="!isSWJ" while="" timeout="0" info="">
[02:40:54.279]        // if-block "!isSWJ"
[02:40:54.279]          // =>  FALSE
[02:40:54.279]        // skip if-block "!isSWJ"
[02:40:54.279]      </control>
[02:40:54.279]      <block atomic="false" info="">
[02:40:54.279]        ReadDP(0x0);
[02:40:54.279]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:40:54.279]      </block>
[02:40:54.279]      // end if-block "protType == 2"
[02:40:54.279]    </control>
[02:40:54.279]  </sequence>
[02:40:54.279]  
[02:40:54.291]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:40:54.291]  
[02:40:54.291]  <debugvars>
[02:40:54.291]    // Pre-defined
[02:40:54.291]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:40:54.291]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:40:54.291]    __dp=0x00000000
[02:40:54.291]    __ap=0x00000000
[02:40:54.291]    __traceout=0x00000000      (Trace Disabled)
[02:40:54.291]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:40:54.291]    __FlashAddr=0x00000000
[02:40:54.291]    __FlashLen=0x00000000
[02:40:54.291]    __FlashArg=0x00000000
[02:40:54.291]    __FlashOp=0x00000000
[02:40:54.291]    __Result=0x00000000
[02:40:54.291]  </debugvars>
[02:40:54.291]  
[02:40:54.291]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:40:54.291]    <block atomic="false" info="">
[02:40:54.291]      __var SW_DP_ABORT       = 0x0;
[02:40:54.291]        // -> [SW_DP_ABORT <= 0x00000000]
[02:40:54.291]      __var DP_CTRL_STAT      = 0x4;
[02:40:54.291]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:40:54.291]      __var DP_SELECT         = 0x8;
[02:40:54.291]        // -> [DP_SELECT <= 0x00000008]
[02:40:54.291]      __var powered_down      = 0;
[02:40:54.291]        // -> [powered_down <= 0x00000000]
[02:40:54.291]      WriteDP(DP_SELECT, 0x00000000);
[02:40:54.291]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:40:54.291]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:40:54.291]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:40:54.291]        // -> [powered_down <= 0x00000001]
[02:40:54.299]    </block>
[02:40:54.299]    <control if="powered_down" while="" timeout="0" info="">
[02:40:54.299]      // if-block "powered_down"
[02:40:54.299]        // =>  TRUE
[02:40:54.299]      <block atomic="false" info="">
[02:40:54.299]        Message(0, "Debug/System power-up request sent");
[02:40:54.301]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:40:54.301]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:40:54.301]      </block>
[02:40:54.301]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:40:54.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:40:54.301]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:40:54.301]        // while-condition  =>  FALSE
[02:40:54.301]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:40:54.301]      </control>
[02:40:54.301]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:40:54.301]        // if-block "(__protocol & 0xFFFF) == 1"
[02:40:54.301]          // =>  FALSE
[02:40:54.301]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:40:54.301]      </control>
[02:40:54.301]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:40:54.301]        // if-block "(__protocol & 0xFFFF) == 2"
[02:40:54.301]          // =>  TRUE
[02:40:54.301]        <block atomic="false" info="">
[02:40:54.301]          Message(0, "executing SWD power up");
[02:40:54.301]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:40:54.309]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:40:54.309]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:40:54.309]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:40:54.309]        </block>
[02:40:54.309]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:40:54.309]      </control>
[02:40:54.309]      // end if-block "powered_down"
[02:40:54.309]    </control>
[02:40:54.309]    <block atomic="false" info="">
[02:40:54.309]      __var DEBUG_PORT_VAL    = 0;
[02:40:54.309]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:40:54.309]      __var ACCESS_POINT_VAL  = 0;
[02:40:54.309]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:40:54.309]      __ap = 1; 
[02:40:54.309]        // -> [__ap <= 0x00000001]
[02:40:54.309]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:40:54.316]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:40:54.316]      __ap = 4;
[02:40:54.316]        // -> [__ap <= 0x00000004]
[02:40:54.318]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:40:54.320]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:40:54.320]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:40:54.320]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:40:54.320]    </block>
[02:40:54.320]    <block atomic="false" info="">
[02:40:54.320]      __var nReset = 0x80;
[02:40:54.320]        // -> [nReset <= 0x00000080]
[02:40:54.320]      __var canReadPins = 0;
[02:40:54.320]        // -> [canReadPins <= 0x00000000]
[02:40:54.320]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:40:54.320]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:40:54.330]        // -> [canReadPins <= 0x00000001]
[02:40:54.330]    </block>
[02:40:54.330]    <control if="" while="1" timeout="200" info="">
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.330]      // while "1"  (timeout="200")
[02:40:54.330]      // while-condition  =>  TRUE
[02:40:54.340]      // while "1"  (timeout="200")
[02:40:54.340]      // while  =>  TIMEOUT
[02:40:54.340]      // end while "1"
[02:40:54.340]    </control>
[02:40:54.340]    <control if="canReadPins" while="" timeout="0" info="">
[02:40:54.340]      // if-block "canReadPins"
[02:40:54.340]        // =>  TRUE
[02:40:54.340]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:40:54.340]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:40:54.340]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:40:54.340]        // while-condition  =>  FALSE
[02:40:54.340]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:40:54.340]      </control>
[02:40:54.340]      // end if-block "canReadPins"
[02:40:54.340]    </control>
[02:40:54.340]    <control if="!canReadPins" while="" timeout="0" info="">
[02:40:54.340]      // if-block "!canReadPins"
[02:40:54.340]        // =>  FALSE
[02:40:54.340]      // skip if-block "!canReadPins"
[02:40:54.340]    </control>
[02:40:54.340]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:40:54.340]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:40:54.340]        // =>  TRUE
[02:40:54.340]      <block atomic="false" info="">
[02:40:54.340]        WriteAP(0x00, 0x190008);
[02:40:54.340]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:40:54.340]        WriteAP(0xF0, 0x01);
[02:40:54.350]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:40:54.350]      </block>
[02:40:54.350]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:40:54.350]    </control>
[02:40:54.350]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:40:54.350]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:40:54.350]        // =>  FALSE
[02:40:54.350]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:40:54.350]    </control>
[02:40:54.350]    <block atomic="false" info="">
[02:40:54.350]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:40:54.350]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:40:54.350]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:40:54.350]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:40:54.350]      __ap = 0; //lets make sure we reset the access point selection
[02:40:54.350]        // -> [__ap <= 0x00000000]
[02:40:54.350]    </block>
[02:40:54.350]  </sequence>
[02:40:54.350]  
[02:40:54.370]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:40:54.370]  
[02:40:54.370]  <debugvars>
[02:40:54.370]    // Pre-defined
[02:40:54.370]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:40:54.370]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:40:54.370]    __dp=0x00000000
[02:40:54.370]    __ap=0x00000000
[02:40:54.370]    __traceout=0x00000000      (Trace Disabled)
[02:40:54.370]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:40:54.380]    __FlashAddr=0x00000000
[02:40:54.380]    __FlashLen=0x00000000
[02:40:54.380]    __FlashArg=0x00000000
[02:40:54.380]    __FlashOp=0x00000000
[02:40:54.380]    __Result=0x00000000
[02:40:54.380]  </debugvars>
[02:40:54.380]  
[02:40:54.380]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:40:54.380]    <block atomic="false" info="">
[02:40:54.380]      __var deviceID = 0;
[02:40:54.380]        // -> [deviceID <= 0x00000000]
[02:40:54.380]      __var version = 0;
[02:40:54.380]        // -> [version <= 0x00000000]
[02:40:54.380]      __var partNum = 0;
[02:40:54.380]        // -> [partNum <= 0x00000000]
[02:40:54.382]      __var manuf = 0;
[02:40:54.382]        // -> [manuf <= 0x00000000]
[02:40:54.382]      __var isMSPM0G1X0X_G3X0X = 0;
[02:40:54.382]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:40:54.382]      __var isProduction = 0;
[02:40:54.382]        // -> [isProduction <= 0x00000000]
[02:40:54.382]      __var continueId = 0;
[02:40:54.382]        // -> [continueId <= 0x00000000]
[02:40:54.382]      deviceID =   Read32(0x41C40004);
[02:40:54.382]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:40:54.382]        // -> [deviceID <= 0x2BB8802F]
[02:40:54.382]      version = deviceID >> 28;
[02:40:54.382]        // -> [version <= 0x00000002]
[02:40:54.382]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:40:54.382]        // -> [partNum <= 0x0000BB88]
[02:40:54.382]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:40:54.382]        // -> [manuf <= 0x00000017]
[02:40:54.382]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:40:54.382]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:40:54.382]      isProduction = (version > 0);
[02:40:54.382]        // -> [isProduction <= 0x00000001]
[02:40:54.382]    </block>
[02:40:54.382]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:40:54.382]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:40:54.382]        // =>  FALSE
[02:40:54.382]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:40:54.382]    </control>
[02:40:54.382]    <control if="continueId == 4" while="" timeout="0" info="">
[02:40:54.382]      // if-block "continueId == 4"
[02:40:54.382]        // =>  FALSE
[02:40:54.382]      // skip if-block "continueId == 4"
[02:40:54.390]    </control>
[02:40:54.390]    <control if="!isProduction" while="" timeout="0" info="">
[02:40:54.390]      // if-block "!isProduction"
[02:40:54.390]        // =>  FALSE
[02:40:54.390]      // skip if-block "!isProduction"
[02:40:54.390]    </control>
[02:40:54.390]  </sequence>
[02:40:54.390]  
[02:49:08.537]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:49:08.537]  
[02:49:08.537]  <debugvars>
[02:49:08.537]    // Pre-defined
[02:49:08.537]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:49:08.537]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:49:08.537]    __dp=0x00000000
[02:49:08.537]    __ap=0x00000000
[02:49:08.537]    __traceout=0x00000000      (Trace Disabled)
[02:49:08.537]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:49:08.537]    __FlashAddr=0x00000000
[02:49:08.537]    __FlashLen=0x00000000
[02:49:08.541]    __FlashArg=0x00000000
[02:49:08.541]    __FlashOp=0x00000000
[02:49:08.541]    __Result=0x00000000
[02:49:08.541]  </debugvars>
[02:49:08.541]  
[02:49:08.541]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:49:08.541]    <block atomic="false" info="">
[02:49:08.541]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:49:08.541]        // -> [isSWJ <= 0x00000001]
[02:49:08.541]      __var hasDormant = __protocol & 0x00020000;
[02:49:08.541]        // -> [hasDormant <= 0x00000000]
[02:49:08.541]      __var protType   = __protocol & 0x0000FFFF;
[02:49:08.541]        // -> [protType <= 0x00000002]
[02:49:08.541]    </block>
[02:49:08.541]    <control if="protType == 1" while="" timeout="0" info="">
[02:49:08.541]      // if-block "protType == 1"
[02:49:08.541]        // =>  FALSE
[02:49:08.541]      // skip if-block "protType == 1"
[02:49:08.541]    </control>
[02:49:08.541]    <control if="protType == 2" while="" timeout="0" info="">
[02:49:08.541]      // if-block "protType == 2"
[02:49:08.541]        // =>  TRUE
[02:49:08.541]      <control if="isSWJ" while="" timeout="0" info="">
[02:49:08.541]        // if-block "isSWJ"
[02:49:08.541]          // =>  TRUE
[02:49:08.541]        <control if="hasDormant" while="" timeout="0" info="">
[02:49:08.541]          // if-block "hasDormant"
[02:49:08.541]            // =>  FALSE
[02:49:08.541]          // skip if-block "hasDormant"
[02:49:08.541]        </control>
[02:49:08.541]        <control if="!hasDormant" while="" timeout="0" info="">
[02:49:08.541]          // if-block "!hasDormant"
[02:49:08.541]            // =>  TRUE
[02:49:08.541]          <block atomic="false" info="">
[02:49:08.541]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:49:08.541]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:49:08.541]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:49:08.548]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:49:08.548]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:49:08.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:49:08.551]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:49:08.551]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:49:08.551]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:49:08.551]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:49:08.558]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:49:08.558]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:49:08.558]          </block>
[02:49:08.558]          // end if-block "!hasDormant"
[02:49:08.558]        </control>
[02:49:08.558]        // end if-block "isSWJ"
[02:49:08.558]      </control>
[02:49:08.558]      <control if="!isSWJ" while="" timeout="0" info="">
[02:49:08.558]        // if-block "!isSWJ"
[02:49:08.558]          // =>  FALSE
[02:49:08.558]        // skip if-block "!isSWJ"
[02:49:08.558]      </control>
[02:49:08.558]      <block atomic="false" info="">
[02:49:08.558]        ReadDP(0x0);
[02:49:08.561]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:49:08.561]      </block>
[02:49:08.561]      // end if-block "protType == 2"
[02:49:08.561]    </control>
[02:49:08.561]  </sequence>
[02:49:08.561]  
[02:49:08.561]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:49:08.561]  
[02:49:08.561]  <debugvars>
[02:49:08.561]    // Pre-defined
[02:49:08.561]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:49:08.561]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:49:08.561]    __dp=0x00000000
[02:49:08.561]    __ap=0x00000000
[02:49:08.561]    __traceout=0x00000000      (Trace Disabled)
[02:49:08.561]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:49:08.561]    __FlashAddr=0x00000000
[02:49:08.561]    __FlashLen=0x00000000
[02:49:08.561]    __FlashArg=0x00000000
[02:49:08.561]    __FlashOp=0x00000000
[02:49:08.561]    __Result=0x00000000
[02:49:08.561]  </debugvars>
[02:49:08.561]  
[02:49:08.561]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:49:08.561]    <block atomic="false" info="">
[02:49:08.561]      __var SW_DP_ABORT       = 0x0;
[02:49:08.561]        // -> [SW_DP_ABORT <= 0x00000000]
[02:49:08.561]      __var DP_CTRL_STAT      = 0x4;
[02:49:08.561]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:49:08.561]      __var DP_SELECT         = 0x8;
[02:49:08.568]        // -> [DP_SELECT <= 0x00000008]
[02:49:08.568]      __var powered_down      = 0;
[02:49:08.568]        // -> [powered_down <= 0x00000000]
[02:49:08.568]      WriteDP(DP_SELECT, 0x00000000);
[02:49:08.570]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:49:08.570]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:49:08.571]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:49:08.571]        // -> [powered_down <= 0x00000001]
[02:49:08.571]    </block>
[02:49:08.571]    <control if="powered_down" while="" timeout="0" info="">
[02:49:08.571]      // if-block "powered_down"
[02:49:08.571]        // =>  TRUE
[02:49:08.571]      <block atomic="false" info="">
[02:49:08.571]        Message(0, "Debug/System power-up request sent");
[02:49:08.571]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:49:08.571]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:49:08.571]      </block>
[02:49:08.571]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:49:08.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:49:08.578]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:49:08.578]        // while-condition  =>  FALSE
[02:49:08.578]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:49:08.578]      </control>
[02:49:08.578]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:49:08.578]        // if-block "(__protocol & 0xFFFF) == 1"
[02:49:08.578]          // =>  FALSE
[02:49:08.578]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:49:08.578]      </control>
[02:49:08.578]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:49:08.578]        // if-block "(__protocol & 0xFFFF) == 2"
[02:49:08.578]          // =>  TRUE
[02:49:08.578]        <block atomic="false" info="">
[02:49:08.578]          Message(0, "executing SWD power up");
[02:49:08.581]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:49:08.581]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:49:08.581]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:49:08.581]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:49:08.581]        </block>
[02:49:08.588]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:49:08.588]      </control>
[02:49:08.588]      // end if-block "powered_down"
[02:49:08.589]    </control>
[02:49:08.589]    <block atomic="false" info="">
[02:49:08.589]      __var DEBUG_PORT_VAL    = 0;
[02:49:08.589]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:49:08.589]      __var ACCESS_POINT_VAL  = 0;
[02:49:08.589]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:49:08.589]      __ap = 1; 
[02:49:08.589]        // -> [__ap <= 0x00000001]
[02:49:08.589]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:49:08.592]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:49:08.592]      __ap = 4;
[02:49:08.592]        // -> [__ap <= 0x00000004]
[02:49:08.592]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:49:08.592]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:49:08.592]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:49:08.592]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:49:08.599]    </block>
[02:49:08.599]    <block atomic="false" info="">
[02:49:08.599]      __var nReset = 0x80;
[02:49:08.599]        // -> [nReset <= 0x00000080]
[02:49:08.599]      __var canReadPins = 0;
[02:49:08.599]        // -> [canReadPins <= 0x00000000]
[02:49:08.599]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:49:08.601]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:49:08.601]        // -> [canReadPins <= 0x00000001]
[02:49:08.601]    </block>
[02:49:08.601]    <control if="" while="1" timeout="200" info="">
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.601]      // while "1"  (timeout="200")
[02:49:08.601]      // while-condition  =>  TRUE
[02:49:08.609]      // while "1"  (timeout="200")
[02:49:08.609]      // while-condition  =>  TRUE
[02:49:08.609]      // while "1"  (timeout="200")
[02:49:08.609]      // while-condition  =>  TRUE
[02:49:08.609]      // while "1"  (timeout="200")
[02:49:08.609]      // while-condition  =>  TRUE
[02:49:08.609]      // while "1"  (timeout="200")
[02:49:08.609]      // while-condition  =>  TRUE
[02:49:08.609]      // while "1"  (timeout="200")
[02:49:08.609]      // while-condition  =>  TRUE
[02:49:08.609]      // while "1"  (timeout="200")
[02:49:08.609]      // while-condition  =>  TRUE
[02:49:08.609]      // while "1"  (timeout="200")
[02:49:08.609]      // while-condition  =>  TRUE
[02:49:08.609]      // while "1"  (timeout="200")
[02:49:08.609]      // while-condition  =>  TRUE
[02:49:08.609]      // while "1"  (timeout="200")
[02:49:08.609]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.611]      // while-condition  =>  TRUE
[02:49:08.611]      // while "1"  (timeout="200")
[02:49:08.619]      // while-condition  =>  TRUE
[02:49:08.619]      // while "1"  (timeout="200")
[02:49:08.619]      // while  =>  TIMEOUT
[02:49:08.619]      // end while "1"
[02:49:08.619]    </control>
[02:49:08.619]    <control if="canReadPins" while="" timeout="0" info="">
[02:49:08.619]      // if-block "canReadPins"
[02:49:08.619]        // =>  TRUE
[02:49:08.619]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:49:08.619]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:49:08.622]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:49:08.622]        // while-condition  =>  FALSE
[02:49:08.622]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:49:08.622]      </control>
[02:49:08.622]      // end if-block "canReadPins"
[02:49:08.622]    </control>
[02:49:08.622]    <control if="!canReadPins" while="" timeout="0" info="">
[02:49:08.622]      // if-block "!canReadPins"
[02:49:08.622]        // =>  FALSE
[02:49:08.622]      // skip if-block "!canReadPins"
[02:49:08.622]    </control>
[02:49:08.622]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:49:08.622]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:49:08.622]        // =>  TRUE
[02:49:08.622]      <block atomic="false" info="">
[02:49:08.622]        WriteAP(0x00, 0x190008);
[02:49:08.622]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:49:08.622]        WriteAP(0xF0, 0x01);
[02:49:08.632]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:49:08.632]      </block>
[02:49:08.632]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:49:08.632]    </control>
[02:49:08.632]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:49:08.632]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:49:08.632]        // =>  FALSE
[02:49:08.632]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:49:08.632]    </control>
[02:49:08.632]    <block atomic="false" info="">
[02:49:08.632]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:49:08.632]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:49:08.632]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:49:08.632]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:49:08.632]      __ap = 0; //lets make sure we reset the access point selection
[02:49:08.632]        // -> [__ap <= 0x00000000]
[02:49:08.632]    </block>
[02:49:08.632]  </sequence>
[02:49:08.632]  
[02:49:08.662]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:49:08.662]  
[02:49:08.662]  <debugvars>
[02:49:08.662]    // Pre-defined
[02:49:08.662]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:49:08.662]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:49:08.662]    __dp=0x00000000
[02:49:08.662]    __ap=0x00000000
[02:49:08.662]    __traceout=0x00000000      (Trace Disabled)
[02:49:08.662]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:49:08.662]    __FlashAddr=0x00000000
[02:49:08.662]    __FlashLen=0x00000000
[02:49:08.662]    __FlashArg=0x00000000
[02:49:08.662]    __FlashOp=0x00000000
[02:49:08.662]    __Result=0x00000000
[02:49:08.662]  </debugvars>
[02:49:08.662]  
[02:49:08.662]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:49:08.662]    <block atomic="false" info="">
[02:49:08.662]      __var deviceID = 0;
[02:49:08.662]        // -> [deviceID <= 0x00000000]
[02:49:08.662]      __var version = 0;
[02:49:08.662]        // -> [version <= 0x00000000]
[02:49:08.662]      __var partNum = 0;
[02:49:08.662]        // -> [partNum <= 0x00000000]
[02:49:08.662]      __var manuf = 0;
[02:49:08.662]        // -> [manuf <= 0x00000000]
[02:49:08.662]      __var isMSPM0G1X0X_G3X0X = 0;
[02:49:08.662]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:49:08.662]      __var isProduction = 0;
[02:49:08.662]        // -> [isProduction <= 0x00000000]
[02:49:08.662]      __var continueId = 0;
[02:49:08.662]        // -> [continueId <= 0x00000000]
[02:49:08.671]      deviceID =   Read32(0x41C40004);
[02:49:08.672]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:49:08.672]        // -> [deviceID <= 0x2BB8802F]
[02:49:08.672]      version = deviceID >> 28;
[02:49:08.672]        // -> [version <= 0x00000002]
[02:49:08.672]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:49:08.672]        // -> [partNum <= 0x0000BB88]
[02:49:08.672]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:49:08.672]        // -> [manuf <= 0x00000017]
[02:49:08.672]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:49:08.672]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:49:08.672]      isProduction = (version > 0);
[02:49:08.672]        // -> [isProduction <= 0x00000001]
[02:49:08.672]    </block>
[02:49:08.672]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:49:08.672]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:49:08.672]        // =>  FALSE
[02:49:08.672]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:49:08.672]    </control>
[02:49:08.672]    <control if="continueId == 4" while="" timeout="0" info="">
[02:49:08.672]      // if-block "continueId == 4"
[02:49:08.672]        // =>  FALSE
[02:49:08.672]      // skip if-block "continueId == 4"
[02:49:08.672]    </control>
[02:49:08.672]    <control if="!isProduction" while="" timeout="0" info="">
[02:49:08.672]      // if-block "!isProduction"
[02:49:08.672]        // =>  FALSE
[02:49:08.672]      // skip if-block "!isProduction"
[02:49:08.672]    </control>
[02:49:08.672]  </sequence>
[02:49:08.672]  
[02:50:28.039]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:50:28.039]  
[02:50:28.039]  <debugvars>
[02:50:28.039]    // Pre-defined
[02:50:28.039]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:50:28.039]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:50:28.039]    __dp=0x00000000
[02:50:28.039]    __ap=0x00000000
[02:50:28.039]    __traceout=0x00000000      (Trace Disabled)
[02:50:28.039]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:50:28.039]    __FlashAddr=0x00000000
[02:50:28.039]    __FlashLen=0x00000000
[02:50:28.039]    __FlashArg=0x00000000
[02:50:28.039]    __FlashOp=0x00000000
[02:50:28.039]    __Result=0x00000000
[02:50:28.039]  </debugvars>
[02:50:28.039]  
[02:50:28.039]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:50:28.039]    <block atomic="false" info="">
[02:50:28.039]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:50:28.039]        // -> [isSWJ <= 0x00000001]
[02:50:28.039]      __var hasDormant = __protocol & 0x00020000;
[02:50:28.039]        // -> [hasDormant <= 0x00000000]
[02:50:28.039]      __var protType   = __protocol & 0x0000FFFF;
[02:50:28.039]        // -> [protType <= 0x00000002]
[02:50:28.039]    </block>
[02:50:28.039]    <control if="protType == 1" while="" timeout="0" info="">
[02:50:28.039]      // if-block "protType == 1"
[02:50:28.039]        // =>  FALSE
[02:50:28.039]      // skip if-block "protType == 1"
[02:50:28.039]    </control>
[02:50:28.047]    <control if="protType == 2" while="" timeout="0" info="">
[02:50:28.047]      // if-block "protType == 2"
[02:50:28.047]        // =>  TRUE
[02:50:28.047]      <control if="isSWJ" while="" timeout="0" info="">
[02:50:28.047]        // if-block "isSWJ"
[02:50:28.047]          // =>  TRUE
[02:50:28.047]        <control if="hasDormant" while="" timeout="0" info="">
[02:50:28.047]          // if-block "hasDormant"
[02:50:28.047]            // =>  FALSE
[02:50:28.047]          // skip if-block "hasDormant"
[02:50:28.047]        </control>
[02:50:28.047]        <control if="!hasDormant" while="" timeout="0" info="">
[02:50:28.047]          // if-block "!hasDormant"
[02:50:28.047]            // =>  TRUE
[02:50:28.047]          <block atomic="false" info="">
[02:50:28.047]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:50:28.047]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:50:28.047]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:50:28.047]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:50:28.047]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:50:28.047]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:50:28.047]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:50:28.047]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:50:28.047]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:50:28.047]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:50:28.057]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:50:28.057]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:50:28.057]          </block>
[02:50:28.057]          // end if-block "!hasDormant"
[02:50:28.057]        </control>
[02:50:28.057]        // end if-block "isSWJ"
[02:50:28.057]      </control>
[02:50:28.057]      <control if="!isSWJ" while="" timeout="0" info="">
[02:50:28.057]        // if-block "!isSWJ"
[02:50:28.057]          // =>  FALSE
[02:50:28.057]        // skip if-block "!isSWJ"
[02:50:28.057]      </control>
[02:50:28.057]      <block atomic="false" info="">
[02:50:28.057]        ReadDP(0x0);
[02:50:28.057]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:50:28.057]      </block>
[02:50:28.057]      // end if-block "protType == 2"
[02:50:28.057]    </control>
[02:50:28.057]  </sequence>
[02:50:28.057]  
[02:50:28.057]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:50:28.057]  
[02:50:28.057]  <debugvars>
[02:50:28.057]    // Pre-defined
[02:50:28.057]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:50:28.057]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:50:28.057]    __dp=0x00000000
[02:50:28.057]    __ap=0x00000000
[02:50:28.057]    __traceout=0x00000000      (Trace Disabled)
[02:50:28.057]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:50:28.057]    __FlashAddr=0x00000000
[02:50:28.057]    __FlashLen=0x00000000
[02:50:28.057]    __FlashArg=0x00000000
[02:50:28.057]    __FlashOp=0x00000000
[02:50:28.057]    __Result=0x00000000
[02:50:28.057]  </debugvars>
[02:50:28.057]  
[02:50:28.057]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:50:28.057]    <block atomic="false" info="">
[02:50:28.057]      __var SW_DP_ABORT       = 0x0;
[02:50:28.057]        // -> [SW_DP_ABORT <= 0x00000000]
[02:50:28.057]      __var DP_CTRL_STAT      = 0x4;
[02:50:28.057]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:50:28.057]      __var DP_SELECT         = 0x8;
[02:50:28.057]        // -> [DP_SELECT <= 0x00000008]
[02:50:28.067]      __var powered_down      = 0;
[02:50:28.067]        // -> [powered_down <= 0x00000000]
[02:50:28.067]      WriteDP(DP_SELECT, 0x00000000);
[02:50:28.067]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:50:28.067]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:50:28.067]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:50:28.067]        // -> [powered_down <= 0x00000001]
[02:50:28.067]    </block>
[02:50:28.067]    <control if="powered_down" while="" timeout="0" info="">
[02:50:28.067]      // if-block "powered_down"
[02:50:28.067]        // =>  TRUE
[02:50:28.067]      <block atomic="false" info="">
[02:50:28.067]        Message(0, "Debug/System power-up request sent");
[02:50:28.075]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:50:28.076]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:50:28.076]      </block>
[02:50:28.077]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:50:28.077]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:50:28.078]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:50:28.079]        // while-condition  =>  FALSE
[02:50:28.079]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:50:28.079]      </control>
[02:50:28.079]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:50:28.079]        // if-block "(__protocol & 0xFFFF) == 1"
[02:50:28.079]          // =>  FALSE
[02:50:28.079]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:50:28.079]      </control>
[02:50:28.079]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:50:28.079]        // if-block "(__protocol & 0xFFFF) == 2"
[02:50:28.079]          // =>  TRUE
[02:50:28.080]        <block atomic="false" info="">
[02:50:28.080]          Message(0, "executing SWD power up");
[02:50:28.081]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:50:28.084]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:50:28.084]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:50:28.088]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:50:28.088]        </block>
[02:50:28.088]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:50:28.088]      </control>
[02:50:28.088]      // end if-block "powered_down"
[02:50:28.088]    </control>
[02:50:28.088]    <block atomic="false" info="">
[02:50:28.088]      __var DEBUG_PORT_VAL    = 0;
[02:50:28.088]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:50:28.088]      __var ACCESS_POINT_VAL  = 0;
[02:50:28.088]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:50:28.088]      __ap = 1; 
[02:50:28.088]        // -> [__ap <= 0x00000001]
[02:50:28.088]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:50:28.093]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:50:28.093]      __ap = 4;
[02:50:28.093]        // -> [__ap <= 0x00000004]
[02:50:28.093]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:50:28.096]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:50:28.097]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:50:28.097]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:50:28.098]    </block>
[02:50:28.098]    <block atomic="false" info="">
[02:50:28.098]      __var nReset = 0x80;
[02:50:28.098]        // -> [nReset <= 0x00000080]
[02:50:28.098]      __var canReadPins = 0;
[02:50:28.098]        // -> [canReadPins <= 0x00000000]
[02:50:28.098]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:50:28.101]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:50:28.101]        // -> [canReadPins <= 0x00000001]
[02:50:28.101]    </block>
[02:50:28.101]    <control if="" while="1" timeout="200" info="">
[02:50:28.101]      // while "1"  (timeout="200")
[02:50:28.101]      // while-condition  =>  TRUE
[02:50:28.101]      // while "1"  (timeout="200")
[02:50:28.101]      // while-condition  =>  TRUE
[02:50:28.101]      // while "1"  (timeout="200")
[02:50:28.101]      // while-condition  =>  TRUE
[02:50:28.101]      // while "1"  (timeout="200")
[02:50:28.101]      // while-condition  =>  TRUE
[02:50:28.101]      // while "1"  (timeout="200")
[02:50:28.101]      // while-condition  =>  TRUE
[02:50:28.101]      // while "1"  (timeout="200")
[02:50:28.101]      // while-condition  =>  TRUE
[02:50:28.102]      // while "1"  (timeout="200")
[02:50:28.102]      // while-condition  =>  TRUE
[02:50:28.102]      // while "1"  (timeout="200")
[02:50:28.102]      // while-condition  =>  TRUE
[02:50:28.102]      // while "1"  (timeout="200")
[02:50:28.102]      // while-condition  =>  TRUE
[02:50:28.102]      // while "1"  (timeout="200")
[02:50:28.102]      // while-condition  =>  TRUE
[02:50:28.102]      // while "1"  (timeout="200")
[02:50:28.102]      // while-condition  =>  TRUE
[02:50:28.102]      // while "1"  (timeout="200")
[02:50:28.102]      // while-condition  =>  TRUE
[02:50:28.102]      // while "1"  (timeout="200")
[02:50:28.102]      // while-condition  =>  TRUE
[02:50:28.102]      // while "1"  (timeout="200")
[02:50:28.104]      // while-condition  =>  TRUE
[02:50:28.104]      // while "1"  (timeout="200")
[02:50:28.104]      // while-condition  =>  TRUE
[02:50:28.104]      // while "1"  (timeout="200")
[02:50:28.104]      // while-condition  =>  TRUE
[02:50:28.104]      // while "1"  (timeout="200")
[02:50:28.104]      // while-condition  =>  TRUE
[02:50:28.104]      // while "1"  (timeout="200")
[02:50:28.104]      // while-condition  =>  TRUE
[02:50:28.104]      // while "1"  (timeout="200")
[02:50:28.104]      // while-condition  =>  TRUE
[02:50:28.104]      // while "1"  (timeout="200")
[02:50:28.104]      // while-condition  =>  TRUE
[02:50:28.104]      // while "1"  (timeout="200")
[02:50:28.105]      // while-condition  =>  TRUE
[02:50:28.105]      // while "1"  (timeout="200")
[02:50:28.105]      // while-condition  =>  TRUE
[02:50:28.105]      // while "1"  (timeout="200")
[02:50:28.105]      // while-condition  =>  TRUE
[02:50:28.105]      // while "1"  (timeout="200")
[02:50:28.105]      // while-condition  =>  TRUE
[02:50:28.105]      // while "1"  (timeout="200")
[02:50:28.105]      // while-condition  =>  TRUE
[02:50:28.105]      // while "1"  (timeout="200")
[02:50:28.105]      // while-condition  =>  TRUE
[02:50:28.105]      // while "1"  (timeout="200")
[02:50:28.105]      // while-condition  =>  TRUE
[02:50:28.105]      // while "1"  (timeout="200")
[02:50:28.106]      // while-condition  =>  TRUE
[02:50:28.106]      // while "1"  (timeout="200")
[02:50:28.106]      // while-condition  =>  TRUE
[02:50:28.106]      // while "1"  (timeout="200")
[02:50:28.106]      // while-condition  =>  TRUE
[02:50:28.106]      // while "1"  (timeout="200")
[02:50:28.106]      // while-condition  =>  TRUE
[02:50:28.107]      // while "1"  (timeout="200")
[02:50:28.107]      // while-condition  =>  TRUE
[02:50:28.107]      // while "1"  (timeout="200")
[02:50:28.107]      // while-condition  =>  TRUE
[02:50:28.107]      // while "1"  (timeout="200")
[02:50:28.107]      // while-condition  =>  TRUE
[02:50:28.107]      // while "1"  (timeout="200")
[02:50:28.107]      // while-condition  =>  TRUE
[02:50:28.107]      // while "1"  (timeout="200")
[02:50:28.107]      // while-condition  =>  TRUE
[02:50:28.107]      // while "1"  (timeout="200")
[02:50:28.107]      // while-condition  =>  TRUE
[02:50:28.107]      // while "1"  (timeout="200")
[02:50:28.107]      // while-condition  =>  TRUE
[02:50:28.109]      // while "1"  (timeout="200")
[02:50:28.109]      // while-condition  =>  TRUE
[02:50:28.109]      // while "1"  (timeout="200")
[02:50:28.109]      // while-condition  =>  TRUE
[02:50:28.109]      // while "1"  (timeout="200")
[02:50:28.109]      // while-condition  =>  TRUE
[02:50:28.109]      // while "1"  (timeout="200")
[02:50:28.109]      // while-condition  =>  TRUE
[02:50:28.109]      // while "1"  (timeout="200")
[02:50:28.109]      // while-condition  =>  TRUE
[02:50:28.111]      // while "1"  (timeout="200")
[02:50:28.111]      // while-condition  =>  TRUE
[02:50:28.111]      // while "1"  (timeout="200")
[02:50:28.111]      // while-condition  =>  TRUE
[02:50:28.111]      // while "1"  (timeout="200")
[02:50:28.111]      // while-condition  =>  TRUE
[02:50:28.111]      // while "1"  (timeout="200")
[02:50:28.111]      // while-condition  =>  TRUE
[02:50:28.111]      // while "1"  (timeout="200")
[02:50:28.111]      // while-condition  =>  TRUE
[02:50:28.111]      // while "1"  (timeout="200")
[02:50:28.111]      // while-condition  =>  TRUE
[02:50:28.113]      // while "1"  (timeout="200")
[02:50:28.113]      // while-condition  =>  TRUE
[02:50:28.113]      // while "1"  (timeout="200")
[02:50:28.113]      // while-condition  =>  TRUE
[02:50:28.113]      // while "1"  (timeout="200")
[02:50:28.113]      // while-condition  =>  TRUE
[02:50:28.113]      // while "1"  (timeout="200")
[02:50:28.113]      // while-condition  =>  TRUE
[02:50:28.113]      // while "1"  (timeout="200")
[02:50:28.113]      // while-condition  =>  TRUE
[02:50:28.113]      // while "1"  (timeout="200")
[02:50:28.113]      // while-condition  =>  TRUE
[02:50:28.113]      // while "1"  (timeout="200")
[02:50:28.113]      // while-condition  =>  TRUE
[02:50:28.114]      // while "1"  (timeout="200")
[02:50:28.114]      // while  =>  TIMEOUT
[02:50:28.114]      // end while "1"
[02:50:28.114]    </control>
[02:50:28.114]    <control if="canReadPins" while="" timeout="0" info="">
[02:50:28.114]      // if-block "canReadPins"
[02:50:28.114]        // =>  TRUE
[02:50:28.114]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:50:28.114]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:50:28.116]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:50:28.116]        // while-condition  =>  FALSE
[02:50:28.116]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:50:28.117]      </control>
[02:50:28.117]      // end if-block "canReadPins"
[02:50:28.117]    </control>
[02:50:28.117]    <control if="!canReadPins" while="" timeout="0" info="">
[02:50:28.117]      // if-block "!canReadPins"
[02:50:28.117]        // =>  FALSE
[02:50:28.117]      // skip if-block "!canReadPins"
[02:50:28.117]    </control>
[02:50:28.117]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:50:28.117]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:50:28.118]        // =>  TRUE
[02:50:28.118]      <block atomic="false" info="">
[02:50:28.118]        WriteAP(0x00, 0x190008);
[02:50:28.120]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:50:28.120]        WriteAP(0xF0, 0x01);
[02:50:28.123]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:50:28.123]      </block>
[02:50:28.123]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:50:28.123]    </control>
[02:50:28.123]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:50:28.123]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:50:28.123]        // =>  FALSE
[02:50:28.123]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:50:28.123]    </control>
[02:50:28.123]    <block atomic="false" info="">
[02:50:28.123]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:50:28.128]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:50:28.128]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:50:28.128]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:50:28.130]      __ap = 0; //lets make sure we reset the access point selection
[02:50:28.130]        // -> [__ap <= 0x00000000]
[02:50:28.130]    </block>
[02:50:28.130]  </sequence>
[02:50:28.130]  
[02:50:28.155]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:50:28.155]  
[02:50:28.155]  <debugvars>
[02:50:28.155]    // Pre-defined
[02:50:28.155]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:50:28.155]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:50:28.155]    __dp=0x00000000
[02:50:28.155]    __ap=0x00000000
[02:50:28.155]    __traceout=0x00000000      (Trace Disabled)
[02:50:28.157]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:50:28.157]    __FlashAddr=0x00000000
[02:50:28.157]    __FlashLen=0x00000000
[02:50:28.157]    __FlashArg=0x00000000
[02:50:28.157]    __FlashOp=0x00000000
[02:50:28.157]    __Result=0x00000000
[02:50:28.157]  </debugvars>
[02:50:28.157]  
[02:50:28.157]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:50:28.157]    <block atomic="false" info="">
[02:50:28.158]      __var deviceID = 0;
[02:50:28.158]        // -> [deviceID <= 0x00000000]
[02:50:28.158]      __var version = 0;
[02:50:28.158]        // -> [version <= 0x00000000]
[02:50:28.158]      __var partNum = 0;
[02:50:28.158]        // -> [partNum <= 0x00000000]
[02:50:28.158]      __var manuf = 0;
[02:50:28.158]        // -> [manuf <= 0x00000000]
[02:50:28.158]      __var isMSPM0G1X0X_G3X0X = 0;
[02:50:28.158]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:50:28.158]      __var isProduction = 0;
[02:50:28.158]        // -> [isProduction <= 0x00000000]
[02:50:28.158]      __var continueId = 0;
[02:50:28.158]        // -> [continueId <= 0x00000000]
[02:50:28.158]      deviceID =   Read32(0x41C40004);
[02:50:28.163]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:50:28.163]        // -> [deviceID <= 0x2BB8802F]
[02:50:28.163]      version = deviceID >> 28;
[02:50:28.163]        // -> [version <= 0x00000002]
[02:50:28.163]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:50:28.163]        // -> [partNum <= 0x0000BB88]
[02:50:28.163]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:50:28.163]        // -> [manuf <= 0x00000017]
[02:50:28.163]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:50:28.163]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:50:28.163]      isProduction = (version > 0);
[02:50:28.163]        // -> [isProduction <= 0x00000001]
[02:50:28.163]    </block>
[02:50:28.163]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:50:28.163]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:50:28.163]        // =>  FALSE
[02:50:28.163]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:50:28.166]    </control>
[02:50:28.166]    <control if="continueId == 4" while="" timeout="0" info="">
[02:50:28.166]      // if-block "continueId == 4"
[02:50:28.166]        // =>  FALSE
[02:50:28.166]      // skip if-block "continueId == 4"
[02:50:28.166]    </control>
[02:50:28.166]    <control if="!isProduction" while="" timeout="0" info="">
[02:50:28.166]      // if-block "!isProduction"
[02:50:28.166]        // =>  FALSE
[02:50:28.166]      // skip if-block "!isProduction"
[02:50:28.167]    </control>
[02:50:28.167]  </sequence>
[02:50:28.167]  
[02:50:52.673]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:50:52.673]  
[02:50:52.688]  <debugvars>
[02:50:52.688]    // Pre-defined
[02:50:52.688]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:50:52.688]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:50:52.688]    __dp=0x00000000
[02:50:52.688]    __ap=0x00000000
[02:50:52.688]    __traceout=0x00000000      (Trace Disabled)
[02:50:52.688]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:50:52.688]    __FlashAddr=0x00000000
[02:50:52.688]    __FlashLen=0x00000000
[02:50:52.688]    __FlashArg=0x00000000
[02:50:52.688]    __FlashOp=0x00000000
[02:50:52.688]    __Result=0x00000000
[02:50:52.688]  </debugvars>
[02:50:52.688]  
[02:50:52.688]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:50:52.688]    <block atomic="false" info="">
[02:50:52.688]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:50:52.688]        // -> [isSWJ <= 0x00000001]
[02:50:52.688]      __var hasDormant = __protocol & 0x00020000;
[02:50:52.688]        // -> [hasDormant <= 0x00000000]
[02:50:52.688]      __var protType   = __protocol & 0x0000FFFF;
[02:50:52.688]        // -> [protType <= 0x00000002]
[02:50:52.688]    </block>
[02:50:52.688]    <control if="protType == 1" while="" timeout="0" info="">
[02:50:52.688]      // if-block "protType == 1"
[02:50:52.688]        // =>  FALSE
[02:50:52.688]      // skip if-block "protType == 1"
[02:50:52.688]    </control>
[02:50:52.692]    <control if="protType == 2" while="" timeout="0" info="">
[02:50:52.692]      // if-block "protType == 2"
[02:50:52.692]        // =>  TRUE
[02:50:52.692]      <control if="isSWJ" while="" timeout="0" info="">
[02:50:52.692]        // if-block "isSWJ"
[02:50:52.692]          // =>  TRUE
[02:50:52.692]        <control if="hasDormant" while="" timeout="0" info="">
[02:50:52.692]          // if-block "hasDormant"
[02:50:52.692]            // =>  FALSE
[02:50:52.692]          // skip if-block "hasDormant"
[02:50:52.692]        </control>
[02:50:52.692]        <control if="!hasDormant" while="" timeout="0" info="">
[02:50:52.692]          // if-block "!hasDormant"
[02:50:52.692]            // =>  TRUE
[02:50:52.692]          <block atomic="false" info="">
[02:50:52.692]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:50:52.692]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:50:52.692]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:50:52.698]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:50:52.698]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:50:52.698]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:50:52.698]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:50:52.703]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:50:52.703]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:50:52.703]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:50:52.703]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:50:52.706]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:50:52.706]          </block>
[02:50:52.706]          // end if-block "!hasDormant"
[02:50:52.706]        </control>
[02:50:52.706]        // end if-block "isSWJ"
[02:50:52.706]      </control>
[02:50:52.706]      <control if="!isSWJ" while="" timeout="0" info="">
[02:50:52.706]        // if-block "!isSWJ"
[02:50:52.706]          // =>  FALSE
[02:50:52.706]        // skip if-block "!isSWJ"
[02:50:52.706]      </control>
[02:50:52.706]      <block atomic="false" info="">
[02:50:52.706]        ReadDP(0x0);
[02:50:52.706]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:50:52.706]      </block>
[02:50:52.706]      // end if-block "protType == 2"
[02:50:52.706]    </control>
[02:50:52.706]  </sequence>
[02:50:52.706]  
[02:50:52.706]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:50:52.706]  
[02:50:52.706]  <debugvars>
[02:50:52.706]    // Pre-defined
[02:50:52.706]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:50:52.706]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:50:52.706]    __dp=0x00000000
[02:50:52.706]    __ap=0x00000000
[02:50:52.706]    __traceout=0x00000000      (Trace Disabled)
[02:50:52.712]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:50:52.712]    __FlashAddr=0x00000000
[02:50:52.712]    __FlashLen=0x00000000
[02:50:52.712]    __FlashArg=0x00000000
[02:50:52.712]    __FlashOp=0x00000000
[02:50:52.713]    __Result=0x00000000
[02:50:52.713]  </debugvars>
[02:50:52.713]  
[02:50:52.713]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:50:52.713]    <block atomic="false" info="">
[02:50:52.713]      __var SW_DP_ABORT       = 0x0;
[02:50:52.713]        // -> [SW_DP_ABORT <= 0x00000000]
[02:50:52.713]      __var DP_CTRL_STAT      = 0x4;
[02:50:52.713]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:50:52.713]      __var DP_SELECT         = 0x8;
[02:50:52.713]        // -> [DP_SELECT <= 0x00000008]
[02:50:52.713]      __var powered_down      = 0;
[02:50:52.713]        // -> [powered_down <= 0x00000000]
[02:50:52.713]      WriteDP(DP_SELECT, 0x00000000);
[02:50:52.713]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:50:52.713]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:50:52.717]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:50:52.717]        // -> [powered_down <= 0x00000001]
[02:50:52.717]    </block>
[02:50:52.717]    <control if="powered_down" while="" timeout="0" info="">
[02:50:52.717]      // if-block "powered_down"
[02:50:52.717]        // =>  TRUE
[02:50:52.717]      <block atomic="false" info="">
[02:50:52.717]        Message(0, "Debug/System power-up request sent");
[02:50:52.722]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:50:52.722]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:50:52.722]      </block>
[02:50:52.722]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:50:52.722]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:50:52.731]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:50:52.731]        // while-condition  =>  FALSE
[02:50:52.731]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:50:52.731]      </control>
[02:50:52.731]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:50:52.731]        // if-block "(__protocol & 0xFFFF) == 1"
[02:50:52.731]          // =>  FALSE
[02:50:52.731]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:50:52.733]      </control>
[02:50:52.733]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:50:52.733]        // if-block "(__protocol & 0xFFFF) == 2"
[02:50:52.733]          // =>  TRUE
[02:50:52.733]        <block atomic="false" info="">
[02:50:52.733]          Message(0, "executing SWD power up");
[02:50:52.733]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:50:52.733]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:50:52.733]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:50:52.738]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:50:52.739]        </block>
[02:50:52.739]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:50:52.739]      </control>
[02:50:52.739]      // end if-block "powered_down"
[02:50:52.739]    </control>
[02:50:52.739]    <block atomic="false" info="">
[02:50:52.739]      __var DEBUG_PORT_VAL    = 0;
[02:50:52.739]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:50:52.739]      __var ACCESS_POINT_VAL  = 0;
[02:50:52.739]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:50:52.739]      __ap = 1; 
[02:50:52.739]        // -> [__ap <= 0x00000001]
[02:50:52.739]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:50:52.743]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:50:52.743]      __ap = 4;
[02:50:52.743]        // -> [__ap <= 0x00000004]
[02:50:52.743]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:50:52.751]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:50:52.753]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:50:52.753]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:50:52.753]    </block>
[02:50:52.753]    <block atomic="false" info="">
[02:50:52.753]      __var nReset = 0x80;
[02:50:52.753]        // -> [nReset <= 0x00000080]
[02:50:52.753]      __var canReadPins = 0;
[02:50:52.753]        // -> [canReadPins <= 0x00000000]
[02:50:52.753]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:50:52.753]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:50:52.753]        // -> [canReadPins <= 0x00000001]
[02:50:52.753]    </block>
[02:50:52.753]    <control if="" while="1" timeout="200" info="">
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.753]      // while-condition  =>  TRUE
[02:50:52.753]      // while "1"  (timeout="200")
[02:50:52.763]      // while-condition  =>  TRUE
[02:50:52.763]      // while "1"  (timeout="200")
[02:50:52.763]      // while  =>  TIMEOUT
[02:50:52.763]      // end while "1"
[02:50:52.763]    </control>
[02:50:52.763]    <control if="canReadPins" while="" timeout="0" info="">
[02:50:52.763]      // if-block "canReadPins"
[02:50:52.763]        // =>  TRUE
[02:50:52.763]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:50:52.763]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:50:52.768]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:50:52.768]        // while-condition  =>  FALSE
[02:50:52.768]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:50:52.768]      </control>
[02:50:52.768]      // end if-block "canReadPins"
[02:50:52.768]    </control>
[02:50:52.768]    <control if="!canReadPins" while="" timeout="0" info="">
[02:50:52.768]      // if-block "!canReadPins"
[02:50:52.768]        // =>  FALSE
[02:50:52.768]      // skip if-block "!canReadPins"
[02:50:52.768]    </control>
[02:50:52.768]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:50:52.768]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:50:52.768]        // =>  TRUE
[02:50:52.768]      <block atomic="false" info="">
[02:50:52.768]        WriteAP(0x00, 0x190008);
[02:50:52.768]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:50:52.768]        WriteAP(0xF0, 0x01);
[02:50:52.774]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:50:52.774]      </block>
[02:50:52.774]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:50:52.774]    </control>
[02:50:52.774]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:50:52.774]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:50:52.774]        // =>  FALSE
[02:50:52.774]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:50:52.774]    </control>
[02:50:52.774]    <block atomic="false" info="">
[02:50:52.776]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:50:52.776]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:50:52.776]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:50:52.776]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:50:52.776]      __ap = 0; //lets make sure we reset the access point selection
[02:50:52.776]        // -> [__ap <= 0x00000000]
[02:50:52.776]    </block>
[02:50:52.776]  </sequence>
[02:50:52.776]  
[02:50:52.801]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:50:52.801]  
[02:50:52.801]  <debugvars>
[02:50:52.801]    // Pre-defined
[02:50:52.801]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:50:52.804]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:50:52.804]    __dp=0x00000000
[02:50:52.804]    __ap=0x00000000
[02:50:52.804]    __traceout=0x00000000      (Trace Disabled)
[02:50:52.804]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:50:52.804]    __FlashAddr=0x00000000
[02:50:52.804]    __FlashLen=0x00000000
[02:50:52.804]    __FlashArg=0x00000000
[02:50:52.804]    __FlashOp=0x00000000
[02:50:52.804]    __Result=0x00000000
[02:50:52.804]  </debugvars>
[02:50:52.804]  
[02:50:52.804]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:50:52.804]    <block atomic="false" info="">
[02:50:52.804]      __var deviceID = 0;
[02:50:52.804]        // -> [deviceID <= 0x00000000]
[02:50:52.804]      __var version = 0;
[02:50:52.804]        // -> [version <= 0x00000000]
[02:50:52.804]      __var partNum = 0;
[02:50:52.804]        // -> [partNum <= 0x00000000]
[02:50:52.804]      __var manuf = 0;
[02:50:52.804]        // -> [manuf <= 0x00000000]
[02:50:52.804]      __var isMSPM0G1X0X_G3X0X = 0;
[02:50:52.804]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:50:52.804]      __var isProduction = 0;
[02:50:52.804]        // -> [isProduction <= 0x00000000]
[02:50:52.804]      __var continueId = 0;
[02:50:52.804]        // -> [continueId <= 0x00000000]
[02:50:52.804]      deviceID =   Read32(0x41C40004);
[02:50:52.804]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:50:52.804]        // -> [deviceID <= 0x2BB8802F]
[02:50:52.804]      version = deviceID >> 28;
[02:50:52.804]        // -> [version <= 0x00000002]
[02:50:52.804]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:50:52.804]        // -> [partNum <= 0x0000BB88]
[02:50:52.804]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:50:52.804]        // -> [manuf <= 0x00000017]
[02:50:52.804]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:50:52.815]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:50:52.815]      isProduction = (version > 0);
[02:50:52.815]        // -> [isProduction <= 0x00000001]
[02:50:52.815]    </block>
[02:50:52.815]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:50:52.815]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:50:52.815]        // =>  FALSE
[02:50:52.815]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:50:52.815]    </control>
[02:50:52.815]    <control if="continueId == 4" while="" timeout="0" info="">
[02:50:52.815]      // if-block "continueId == 4"
[02:50:52.815]        // =>  FALSE
[02:50:52.815]      // skip if-block "continueId == 4"
[02:50:52.815]    </control>
[02:50:52.815]    <control if="!isProduction" while="" timeout="0" info="">
[02:50:52.815]      // if-block "!isProduction"
[02:50:52.815]        // =>  FALSE
[02:50:52.815]      // skip if-block "!isProduction"
[02:50:52.815]    </control>
[02:50:52.815]  </sequence>
[02:50:52.815]  
[02:52:21.937]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:52:21.937]  
[02:52:21.939]  <debugvars>
[02:52:21.939]    // Pre-defined
[02:52:21.939]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:52:21.939]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:52:21.939]    __dp=0x00000000
[02:52:21.939]    __ap=0x00000000
[02:52:21.939]    __traceout=0x00000000      (Trace Disabled)
[02:52:21.939]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:52:21.939]    __FlashAddr=0x00000000
[02:52:21.939]    __FlashLen=0x00000000
[02:52:21.939]    __FlashArg=0x00000000
[02:52:21.939]    __FlashOp=0x00000000
[02:52:21.939]    __Result=0x00000000
[02:52:21.939]  </debugvars>
[02:52:21.939]  
[02:52:21.939]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:52:21.939]    <block atomic="false" info="">
[02:52:21.939]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:52:21.939]        // -> [isSWJ <= 0x00000001]
[02:52:21.939]      __var hasDormant = __protocol & 0x00020000;
[02:52:21.939]        // -> [hasDormant <= 0x00000000]
[02:52:21.939]      __var protType   = __protocol & 0x0000FFFF;
[02:52:21.939]        // -> [protType <= 0x00000002]
[02:52:21.939]    </block>
[02:52:21.939]    <control if="protType == 1" while="" timeout="0" info="">
[02:52:21.939]      // if-block "protType == 1"
[02:52:21.939]        // =>  FALSE
[02:52:21.939]      // skip if-block "protType == 1"
[02:52:21.939]    </control>
[02:52:21.939]    <control if="protType == 2" while="" timeout="0" info="">
[02:52:21.939]      // if-block "protType == 2"
[02:52:21.939]        // =>  TRUE
[02:52:21.939]      <control if="isSWJ" while="" timeout="0" info="">
[02:52:21.939]        // if-block "isSWJ"
[02:52:21.939]          // =>  TRUE
[02:52:21.939]        <control if="hasDormant" while="" timeout="0" info="">
[02:52:21.939]          // if-block "hasDormant"
[02:52:21.939]            // =>  FALSE
[02:52:21.939]          // skip if-block "hasDormant"
[02:52:21.939]        </control>
[02:52:21.939]        <control if="!hasDormant" while="" timeout="0" info="">
[02:52:21.939]          // if-block "!hasDormant"
[02:52:21.939]            // =>  TRUE
[02:52:21.939]          <block atomic="false" info="">
[02:52:21.939]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:52:21.939]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:52:21.939]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:52:21.947]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:52:21.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:52:21.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:52:21.947]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:52:21.947]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:52:21.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:52:21.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:52:21.947]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:52:21.947]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:52:21.947]          </block>
[02:52:21.947]          // end if-block "!hasDormant"
[02:52:21.947]        </control>
[02:52:21.947]        // end if-block "isSWJ"
[02:52:21.947]      </control>
[02:52:21.947]      <control if="!isSWJ" while="" timeout="0" info="">
[02:52:21.947]        // if-block "!isSWJ"
[02:52:21.947]          // =>  FALSE
[02:52:21.947]        // skip if-block "!isSWJ"
[02:52:21.947]      </control>
[02:52:21.947]      <block atomic="false" info="">
[02:52:21.947]        ReadDP(0x0);
[02:52:21.958]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:52:21.958]      </block>
[02:52:21.958]      // end if-block "protType == 2"
[02:52:21.958]    </control>
[02:52:21.958]  </sequence>
[02:52:21.958]  
[02:52:21.958]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:52:21.958]  
[02:52:21.958]  <debugvars>
[02:52:21.958]    // Pre-defined
[02:52:21.958]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:52:21.958]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:52:21.958]    __dp=0x00000000
[02:52:21.958]    __ap=0x00000000
[02:52:21.958]    __traceout=0x00000000      (Trace Disabled)
[02:52:21.958]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:52:21.958]    __FlashAddr=0x00000000
[02:52:21.958]    __FlashLen=0x00000000
[02:52:21.958]    __FlashArg=0x00000000
[02:52:21.958]    __FlashOp=0x00000000
[02:52:21.958]    __Result=0x00000000
[02:52:21.958]  </debugvars>
[02:52:21.958]  
[02:52:21.958]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:52:21.958]    <block atomic="false" info="">
[02:52:21.958]      __var SW_DP_ABORT       = 0x0;
[02:52:21.958]        // -> [SW_DP_ABORT <= 0x00000000]
[02:52:21.958]      __var DP_CTRL_STAT      = 0x4;
[02:52:21.958]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:52:21.958]      __var DP_SELECT         = 0x8;
[02:52:21.958]        // -> [DP_SELECT <= 0x00000008]
[02:52:21.958]      __var powered_down      = 0;
[02:52:21.958]        // -> [powered_down <= 0x00000000]
[02:52:21.958]      WriteDP(DP_SELECT, 0x00000000);
[02:52:21.958]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:52:21.958]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:52:21.967]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:52:21.967]        // -> [powered_down <= 0x00000001]
[02:52:21.967]    </block>
[02:52:21.967]    <control if="powered_down" while="" timeout="0" info="">
[02:52:21.967]      // if-block "powered_down"
[02:52:21.967]        // =>  TRUE
[02:52:21.967]      <block atomic="false" info="">
[02:52:21.967]        Message(0, "Debug/System power-up request sent");
[02:52:21.967]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:52:21.967]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:52:21.967]      </block>
[02:52:21.967]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:52:21.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:52:21.973]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:52:21.973]        // while-condition  =>  FALSE
[02:52:21.973]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:52:21.973]      </control>
[02:52:21.973]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:52:21.973]        // if-block "(__protocol & 0xFFFF) == 1"
[02:52:21.973]          // =>  FALSE
[02:52:21.973]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:52:21.973]      </control>
[02:52:21.973]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:52:21.973]        // if-block "(__protocol & 0xFFFF) == 2"
[02:52:21.973]          // =>  TRUE
[02:52:21.973]        <block atomic="false" info="">
[02:52:21.973]          Message(0, "executing SWD power up");
[02:52:21.978]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:52:21.978]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:52:21.978]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:52:21.978]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:52:21.978]        </block>
[02:52:21.978]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:52:21.978]      </control>
[02:52:21.978]      // end if-block "powered_down"
[02:52:21.978]    </control>
[02:52:21.978]    <block atomic="false" info="">
[02:52:21.978]      __var DEBUG_PORT_VAL    = 0;
[02:52:21.978]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:52:21.978]      __var ACCESS_POINT_VAL  = 0;
[02:52:21.978]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:52:21.988]      __ap = 1; 
[02:52:21.988]        // -> [__ap <= 0x00000001]
[02:52:21.988]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:52:21.988]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:52:21.988]      __ap = 4;
[02:52:21.988]        // -> [__ap <= 0x00000004]
[02:52:21.988]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:52:21.988]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:52:21.988]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:52:21.988]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:52:21.998]    </block>
[02:52:21.998]    <block atomic="false" info="">
[02:52:21.998]      __var nReset = 0x80;
[02:52:21.998]        // -> [nReset <= 0x00000080]
[02:52:21.998]      __var canReadPins = 0;
[02:52:21.998]        // -> [canReadPins <= 0x00000000]
[02:52:21.998]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:52:21.998]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:52:21.998]        // -> [canReadPins <= 0x00000001]
[02:52:21.998]    </block>
[02:52:21.998]    <control if="" while="1" timeout="200" info="">
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:21.998]      // while-condition  =>  TRUE
[02:52:21.998]      // while "1"  (timeout="200")
[02:52:22.007]      // while-condition  =>  TRUE
[02:52:22.007]      // while "1"  (timeout="200")
[02:52:22.008]      // while  =>  TIMEOUT
[02:52:22.008]      // end while "1"
[02:52:22.008]    </control>
[02:52:22.008]    <control if="canReadPins" while="" timeout="0" info="">
[02:52:22.008]      // if-block "canReadPins"
[02:52:22.008]        // =>  TRUE
[02:52:22.008]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:52:22.008]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:52:22.009]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:52:22.009]        // while-condition  =>  FALSE
[02:52:22.009]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:52:22.009]      </control>
[02:52:22.009]      // end if-block "canReadPins"
[02:52:22.009]    </control>
[02:52:22.009]    <control if="!canReadPins" while="" timeout="0" info="">
[02:52:22.009]      // if-block "!canReadPins"
[02:52:22.018]        // =>  FALSE
[02:52:22.018]      // skip if-block "!canReadPins"
[02:52:22.018]    </control>
[02:52:22.018]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:52:22.018]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:52:22.018]        // =>  TRUE
[02:52:22.018]      <block atomic="false" info="">
[02:52:22.018]        WriteAP(0x00, 0x190008);
[02:52:22.019]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:52:22.019]        WriteAP(0xF0, 0x01);
[02:52:22.019]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:52:22.019]      </block>
[02:52:22.019]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:52:22.019]    </control>
[02:52:22.019]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:52:22.019]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:52:22.019]        // =>  FALSE
[02:52:22.019]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:52:22.019]    </control>
[02:52:22.019]    <block atomic="false" info="">
[02:52:22.019]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:52:22.031]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:52:22.031]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:52:22.031]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:52:22.031]      __ap = 0; //lets make sure we reset the access point selection
[02:52:22.031]        // -> [__ap <= 0x00000000]
[02:52:22.031]    </block>
[02:52:22.031]  </sequence>
[02:52:22.031]  
[02:52:22.058]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:52:22.058]  
[02:52:22.058]  <debugvars>
[02:52:22.058]    // Pre-defined
[02:52:22.058]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:52:22.058]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:52:22.058]    __dp=0x00000000
[02:52:22.058]    __ap=0x00000000
[02:52:22.058]    __traceout=0x00000000      (Trace Disabled)
[02:52:22.058]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:52:22.058]    __FlashAddr=0x00000000
[02:52:22.058]    __FlashLen=0x00000000
[02:52:22.058]    __FlashArg=0x00000000
[02:52:22.058]    __FlashOp=0x00000000
[02:52:22.058]    __Result=0x00000000
[02:52:22.058]  </debugvars>
[02:52:22.058]  
[02:52:22.058]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:52:22.058]    <block atomic="false" info="">
[02:52:22.058]      __var deviceID = 0;
[02:52:22.058]        // -> [deviceID <= 0x00000000]
[02:52:22.058]      __var version = 0;
[02:52:22.058]        // -> [version <= 0x00000000]
[02:52:22.058]      __var partNum = 0;
[02:52:22.058]        // -> [partNum <= 0x00000000]
[02:52:22.058]      __var manuf = 0;
[02:52:22.058]        // -> [manuf <= 0x00000000]
[02:52:22.058]      __var isMSPM0G1X0X_G3X0X = 0;
[02:52:22.058]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:52:22.058]      __var isProduction = 0;
[02:52:22.058]        // -> [isProduction <= 0x00000000]
[02:52:22.058]      __var continueId = 0;
[02:52:22.058]        // -> [continueId <= 0x00000000]
[02:52:22.058]      deviceID =   Read32(0x41C40004);
[02:52:22.058]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:52:22.058]        // -> [deviceID <= 0x2BB8802F]
[02:52:22.058]      version = deviceID >> 28;
[02:52:22.058]        // -> [version <= 0x00000002]
[02:52:22.058]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:52:22.058]        // -> [partNum <= 0x0000BB88]
[02:52:22.058]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:52:22.058]        // -> [manuf <= 0x00000017]
[02:52:22.058]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:52:22.058]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:52:22.068]      isProduction = (version > 0);
[02:52:22.068]        // -> [isProduction <= 0x00000001]
[02:52:22.068]    </block>
[02:52:22.068]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:52:22.068]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:52:22.068]        // =>  FALSE
[02:52:22.068]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:52:22.068]    </control>
[02:52:22.068]    <control if="continueId == 4" while="" timeout="0" info="">
[02:52:22.068]      // if-block "continueId == 4"
[02:52:22.068]        // =>  FALSE
[02:52:22.068]      // skip if-block "continueId == 4"
[02:52:22.068]    </control>
[02:52:22.068]    <control if="!isProduction" while="" timeout="0" info="">
[02:52:22.068]      // if-block "!isProduction"
[02:52:22.068]        // =>  FALSE
[02:52:22.068]      // skip if-block "!isProduction"
[02:52:22.068]    </control>
[02:52:22.068]  </sequence>
[02:52:22.068]  
[02:53:34.384]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:53:34.384]  
[02:53:34.384]  <debugvars>
[02:53:34.384]    // Pre-defined
[02:53:34.384]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:53:34.384]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:53:34.384]    __dp=0x00000000
[02:53:34.384]    __ap=0x00000000
[02:53:34.384]    __traceout=0x00000000      (Trace Disabled)
[02:53:34.384]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:53:34.384]    __FlashAddr=0x00000000
[02:53:34.384]    __FlashLen=0x00000000
[02:53:34.384]    __FlashArg=0x00000000
[02:53:34.384]    __FlashOp=0x00000000
[02:53:34.384]    __Result=0x00000000
[02:53:34.384]  </debugvars>
[02:53:34.384]  
[02:53:34.384]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:53:34.384]    <block atomic="false" info="">
[02:53:34.389]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:53:34.389]        // -> [isSWJ <= 0x00000001]
[02:53:34.389]      __var hasDormant = __protocol & 0x00020000;
[02:53:34.389]        // -> [hasDormant <= 0x00000000]
[02:53:34.389]      __var protType   = __protocol & 0x0000FFFF;
[02:53:34.390]        // -> [protType <= 0x00000002]
[02:53:34.390]    </block>
[02:53:34.390]    <control if="protType == 1" while="" timeout="0" info="">
[02:53:34.390]      // if-block "protType == 1"
[02:53:34.390]        // =>  FALSE
[02:53:34.390]      // skip if-block "protType == 1"
[02:53:34.390]    </control>
[02:53:34.390]    <control if="protType == 2" while="" timeout="0" info="">
[02:53:34.390]      // if-block "protType == 2"
[02:53:34.390]        // =>  TRUE
[02:53:34.390]      <control if="isSWJ" while="" timeout="0" info="">
[02:53:34.390]        // if-block "isSWJ"
[02:53:34.391]          // =>  TRUE
[02:53:34.391]        <control if="hasDormant" while="" timeout="0" info="">
[02:53:34.391]          // if-block "hasDormant"
[02:53:34.391]            // =>  FALSE
[02:53:34.391]          // skip if-block "hasDormant"
[02:53:34.391]        </control>
[02:53:34.391]        <control if="!hasDormant" while="" timeout="0" info="">
[02:53:34.391]          // if-block "!hasDormant"
[02:53:34.391]            // =>  TRUE
[02:53:34.392]          <block atomic="false" info="">
[02:53:34.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:53:34.393]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:53:34.393]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:53:34.395]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:53:34.395]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:53:34.396]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:53:34.396]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:53:34.398]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:53:34.398]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:53:34.404]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:53:34.404]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:53:34.405]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:53:34.406]          </block>
[02:53:34.406]          // end if-block "!hasDormant"
[02:53:34.406]        </control>
[02:53:34.406]        // end if-block "isSWJ"
[02:53:34.406]      </control>
[02:53:34.406]      <control if="!isSWJ" while="" timeout="0" info="">
[02:53:34.406]        // if-block "!isSWJ"
[02:53:34.406]          // =>  FALSE
[02:53:34.406]        // skip if-block "!isSWJ"
[02:53:34.406]      </control>
[02:53:34.407]      <block atomic="false" info="">
[02:53:34.407]        ReadDP(0x0);
[02:53:34.408]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:53:34.408]      </block>
[02:53:34.408]      // end if-block "protType == 2"
[02:53:34.409]    </control>
[02:53:34.409]  </sequence>
[02:53:34.409]  
[02:53:34.412]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:53:34.412]  
[02:53:34.412]  <debugvars>
[02:53:34.412]    // Pre-defined
[02:53:34.412]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:53:34.412]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:53:34.412]    __dp=0x00000000
[02:53:34.413]    __ap=0x00000000
[02:53:34.413]    __traceout=0x00000000      (Trace Disabled)
[02:53:34.413]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:53:34.413]    __FlashAddr=0x00000000
[02:53:34.413]    __FlashLen=0x00000000
[02:53:34.414]    __FlashArg=0x00000000
[02:53:34.414]    __FlashOp=0x00000000
[02:53:34.414]    __Result=0x00000000
[02:53:34.414]  </debugvars>
[02:53:34.414]  
[02:53:34.414]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:53:34.414]    <block atomic="false" info="">
[02:53:34.414]      __var SW_DP_ABORT       = 0x0;
[02:53:34.414]        // -> [SW_DP_ABORT <= 0x00000000]
[02:53:34.414]      __var DP_CTRL_STAT      = 0x4;
[02:53:34.415]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:53:34.415]      __var DP_SELECT         = 0x8;
[02:53:34.415]        // -> [DP_SELECT <= 0x00000008]
[02:53:34.415]      __var powered_down      = 0;
[02:53:34.415]        // -> [powered_down <= 0x00000000]
[02:53:34.415]      WriteDP(DP_SELECT, 0x00000000);
[02:53:34.417]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:53:34.417]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:53:34.418]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:53:34.418]        // -> [powered_down <= 0x00000001]
[02:53:34.418]    </block>
[02:53:34.418]    <control if="powered_down" while="" timeout="0" info="">
[02:53:34.418]      // if-block "powered_down"
[02:53:34.419]        // =>  TRUE
[02:53:34.419]      <block atomic="false" info="">
[02:53:34.419]        Message(0, "Debug/System power-up request sent");
[02:53:34.421]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:53:34.424]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:53:34.424]      </block>
[02:53:34.424]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:53:34.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:53:34.424]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:53:34.424]        // while-condition  =>  FALSE
[02:53:34.424]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:53:34.424]      </control>
[02:53:34.424]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:53:34.424]        // if-block "(__protocol & 0xFFFF) == 1"
[02:53:34.424]          // =>  FALSE
[02:53:34.424]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:53:34.424]      </control>
[02:53:34.424]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:53:34.424]        // if-block "(__protocol & 0xFFFF) == 2"
[02:53:34.424]          // =>  TRUE
[02:53:34.424]        <block atomic="false" info="">
[02:53:34.424]          Message(0, "executing SWD power up");
[02:53:34.424]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:53:34.432]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:53:34.432]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:53:34.432]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:53:34.432]        </block>
[02:53:34.432]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:53:34.432]      </control>
[02:53:34.432]      // end if-block "powered_down"
[02:53:34.432]    </control>
[02:53:34.432]    <block atomic="false" info="">
[02:53:34.432]      __var DEBUG_PORT_VAL    = 0;
[02:53:34.432]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:53:34.432]      __var ACCESS_POINT_VAL  = 0;
[02:53:34.432]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:53:34.432]      __ap = 1; 
[02:53:34.432]        // -> [__ap <= 0x00000001]
[02:53:34.432]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:53:34.432]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:53:34.432]      __ap = 4;
[02:53:34.432]        // -> [__ap <= 0x00000004]
[02:53:34.432]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:53:34.442]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:53:34.442]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:53:34.442]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:53:34.442]    </block>
[02:53:34.442]    <block atomic="false" info="">
[02:53:34.442]      __var nReset = 0x80;
[02:53:34.442]        // -> [nReset <= 0x00000080]
[02:53:34.442]      __var canReadPins = 0;
[02:53:34.442]        // -> [canReadPins <= 0x00000000]
[02:53:34.442]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:53:34.442]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:53:34.442]        // -> [canReadPins <= 0x00000001]
[02:53:34.442]    </block>
[02:53:34.442]    <control if="" while="1" timeout="200" info="">
[02:53:34.442]      // while "1"  (timeout="200")
[02:53:34.442]      // while-condition  =>  TRUE
[02:53:34.442]      // while "1"  (timeout="200")
[02:53:34.442]      // while-condition  =>  TRUE
[02:53:34.442]      // while "1"  (timeout="200")
[02:53:34.442]      // while-condition  =>  TRUE
[02:53:34.442]      // while "1"  (timeout="200")
[02:53:34.442]      // while-condition  =>  TRUE
[02:53:34.442]      // while "1"  (timeout="200")
[02:53:34.442]      // while-condition  =>  TRUE
[02:53:34.442]      // while "1"  (timeout="200")
[02:53:34.442]      // while-condition  =>  TRUE
[02:53:34.442]      // while "1"  (timeout="200")
[02:53:34.442]      // while-condition  =>  TRUE
[02:53:34.442]      // while "1"  (timeout="200")
[02:53:34.442]      // while-condition  =>  TRUE
[02:53:34.442]      // while "1"  (timeout="200")
[02:53:34.442]      // while-condition  =>  TRUE
[02:53:34.442]      // while "1"  (timeout="200")
[02:53:34.451]      // while-condition  =>  TRUE
[02:53:34.451]      // while "1"  (timeout="200")
[02:53:34.451]      // while-condition  =>  TRUE
[02:53:34.451]      // while "1"  (timeout="200")
[02:53:34.451]      // while-condition  =>  TRUE
[02:53:34.451]      // while "1"  (timeout="200")
[02:53:34.451]      // while-condition  =>  TRUE
[02:53:34.451]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.452]      // while-condition  =>  TRUE
[02:53:34.452]      // while "1"  (timeout="200")
[02:53:34.462]      // while-condition  =>  TRUE
[02:53:34.462]      // while "1"  (timeout="200")
[02:53:34.462]      // while  =>  TIMEOUT
[02:53:34.462]      // end while "1"
[02:53:34.462]    </control>
[02:53:34.462]    <control if="canReadPins" while="" timeout="0" info="">
[02:53:34.462]      // if-block "canReadPins"
[02:53:34.463]        // =>  TRUE
[02:53:34.463]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:53:34.463]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:53:34.464]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:53:34.464]        // while-condition  =>  FALSE
[02:53:34.464]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:53:34.464]      </control>
[02:53:34.464]      // end if-block "canReadPins"
[02:53:34.464]    </control>
[02:53:34.464]    <control if="!canReadPins" while="" timeout="0" info="">
[02:53:34.464]      // if-block "!canReadPins"
[02:53:34.464]        // =>  FALSE
[02:53:34.464]      // skip if-block "!canReadPins"
[02:53:34.464]    </control>
[02:53:34.464]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:53:34.464]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:53:34.464]        // =>  TRUE
[02:53:34.464]      <block atomic="false" info="">
[02:53:34.464]        WriteAP(0x00, 0x190008);
[02:53:34.464]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:53:34.464]        WriteAP(0xF0, 0x01);
[02:53:34.472]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:53:34.472]      </block>
[02:53:34.472]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:53:34.472]    </control>
[02:53:34.472]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:53:34.472]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:53:34.472]        // =>  FALSE
[02:53:34.474]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:53:34.474]    </control>
[02:53:34.474]    <block atomic="false" info="">
[02:53:34.474]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:53:34.477]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:53:34.477]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:53:34.477]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:53:34.477]      __ap = 0; //lets make sure we reset the access point selection
[02:53:34.477]        // -> [__ap <= 0x00000000]
[02:53:34.477]    </block>
[02:53:34.477]  </sequence>
[02:53:34.477]  
[02:53:34.493]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:53:34.493]  
[02:53:34.493]  <debugvars>
[02:53:34.493]    // Pre-defined
[02:53:34.493]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:53:34.493]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:53:34.493]    __dp=0x00000000
[02:53:34.493]    __ap=0x00000000
[02:53:34.493]    __traceout=0x00000000      (Trace Disabled)
[02:53:34.493]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:53:34.493]    __FlashAddr=0x00000000
[02:53:34.493]    __FlashLen=0x00000000
[02:53:34.493]    __FlashArg=0x00000000
[02:53:34.493]    __FlashOp=0x00000000
[02:53:34.493]    __Result=0x00000000
[02:53:34.493]  </debugvars>
[02:53:34.493]  
[02:53:34.493]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:53:34.493]    <block atomic="false" info="">
[02:53:34.502]      __var deviceID = 0;
[02:53:34.502]        // -> [deviceID <= 0x00000000]
[02:53:34.502]      __var version = 0;
[02:53:34.502]        // -> [version <= 0x00000000]
[02:53:34.502]      __var partNum = 0;
[02:53:34.502]        // -> [partNum <= 0x00000000]
[02:53:34.502]      __var manuf = 0;
[02:53:34.502]        // -> [manuf <= 0x00000000]
[02:53:34.502]      __var isMSPM0G1X0X_G3X0X = 0;
[02:53:34.502]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:53:34.502]      __var isProduction = 0;
[02:53:34.502]        // -> [isProduction <= 0x00000000]
[02:53:34.502]      __var continueId = 0;
[02:53:34.502]        // -> [continueId <= 0x00000000]
[02:53:34.502]      deviceID =   Read32(0x41C40004);
[02:53:34.513]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:53:34.513]        // -> [deviceID <= 0x2BB8802F]
[02:53:34.513]      version = deviceID >> 28;
[02:53:34.513]        // -> [version <= 0x00000002]
[02:53:34.513]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:53:34.513]        // -> [partNum <= 0x0000BB88]
[02:53:34.513]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:53:34.513]        // -> [manuf <= 0x00000017]
[02:53:34.514]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:53:34.514]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:53:34.514]      isProduction = (version > 0);
[02:53:34.514]        // -> [isProduction <= 0x00000001]
[02:53:34.514]    </block>
[02:53:34.514]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:53:34.514]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:53:34.514]        // =>  FALSE
[02:53:34.514]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:53:34.514]    </control>
[02:53:34.514]    <control if="continueId == 4" while="" timeout="0" info="">
[02:53:34.514]      // if-block "continueId == 4"
[02:53:34.514]        // =>  FALSE
[02:53:34.514]      // skip if-block "continueId == 4"
[02:53:34.514]    </control>
[02:53:34.514]    <control if="!isProduction" while="" timeout="0" info="">
[02:53:34.514]      // if-block "!isProduction"
[02:53:34.514]        // =>  FALSE
[02:53:34.514]      // skip if-block "!isProduction"
[02:53:34.514]    </control>
[02:53:34.514]  </sequence>
[02:53:34.514]  
[02:54:01.626]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:54:01.626]  
[02:54:01.626]  <debugvars>
[02:54:01.626]    // Pre-defined
[02:54:01.626]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:54:01.626]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:54:01.626]    __dp=0x00000000
[02:54:01.626]    __ap=0x00000000
[02:54:01.626]    __traceout=0x00000000      (Trace Disabled)
[02:54:01.626]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:54:01.626]    __FlashAddr=0x00000000
[02:54:01.626]    __FlashLen=0x00000000
[02:54:01.626]    __FlashArg=0x00000000
[02:54:01.626]    __FlashOp=0x00000000
[02:54:01.626]    __Result=0x00000000
[02:54:01.626]  </debugvars>
[02:54:01.626]  
[02:54:01.626]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:54:01.626]    <block atomic="false" info="">
[02:54:01.626]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:54:01.626]        // -> [isSWJ <= 0x00000001]
[02:54:01.626]      __var hasDormant = __protocol & 0x00020000;
[02:54:01.626]        // -> [hasDormant <= 0x00000000]
[02:54:01.626]      __var protType   = __protocol & 0x0000FFFF;
[02:54:01.626]        // -> [protType <= 0x00000002]
[02:54:01.626]    </block>
[02:54:01.626]    <control if="protType == 1" while="" timeout="0" info="">
[02:54:01.626]      // if-block "protType == 1"
[02:54:01.626]        // =>  FALSE
[02:54:01.626]      // skip if-block "protType == 1"
[02:54:01.626]    </control>
[02:54:01.626]    <control if="protType == 2" while="" timeout="0" info="">
[02:54:01.626]      // if-block "protType == 2"
[02:54:01.626]        // =>  TRUE
[02:54:01.626]      <control if="isSWJ" while="" timeout="0" info="">
[02:54:01.626]        // if-block "isSWJ"
[02:54:01.626]          // =>  TRUE
[02:54:01.626]        <control if="hasDormant" while="" timeout="0" info="">
[02:54:01.626]          // if-block "hasDormant"
[02:54:01.626]            // =>  FALSE
[02:54:01.626]          // skip if-block "hasDormant"
[02:54:01.626]        </control>
[02:54:01.626]        <control if="!hasDormant" while="" timeout="0" info="">
[02:54:01.626]          // if-block "!hasDormant"
[02:54:01.626]            // =>  TRUE
[02:54:01.626]          <block atomic="false" info="">
[02:54:01.626]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:54:01.626]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:54:01.626]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:54:01.626]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:54:01.626]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:54:01.626]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:54:01.626]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:54:01.636]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:54:01.636]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:54:01.638]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:54:01.638]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:54:01.639]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:54:01.639]          </block>
[02:54:01.639]          // end if-block "!hasDormant"
[02:54:01.639]        </control>
[02:54:01.639]        // end if-block "isSWJ"
[02:54:01.639]      </control>
[02:54:01.639]      <control if="!isSWJ" while="" timeout="0" info="">
[02:54:01.639]        // if-block "!isSWJ"
[02:54:01.639]          // =>  FALSE
[02:54:01.639]        // skip if-block "!isSWJ"
[02:54:01.639]      </control>
[02:54:01.639]      <block atomic="false" info="">
[02:54:01.639]        ReadDP(0x0);
[02:54:01.639]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:54:01.639]      </block>
[02:54:01.639]      // end if-block "protType == 2"
[02:54:01.639]    </control>
[02:54:01.639]  </sequence>
[02:54:01.639]  
[02:54:01.646]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:54:01.646]  
[02:54:01.646]  <debugvars>
[02:54:01.646]    // Pre-defined
[02:54:01.646]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:54:01.646]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:54:01.646]    __dp=0x00000000
[02:54:01.646]    __ap=0x00000000
[02:54:01.646]    __traceout=0x00000000      (Trace Disabled)
[02:54:01.646]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:54:01.646]    __FlashAddr=0x00000000
[02:54:01.646]    __FlashLen=0x00000000
[02:54:01.646]    __FlashArg=0x00000000
[02:54:01.646]    __FlashOp=0x00000000
[02:54:01.646]    __Result=0x00000000
[02:54:01.646]  </debugvars>
[02:54:01.646]  
[02:54:01.646]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:54:01.646]    <block atomic="false" info="">
[02:54:01.646]      __var SW_DP_ABORT       = 0x0;
[02:54:01.646]        // -> [SW_DP_ABORT <= 0x00000000]
[02:54:01.646]      __var DP_CTRL_STAT      = 0x4;
[02:54:01.646]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:54:01.646]      __var DP_SELECT         = 0x8;
[02:54:01.646]        // -> [DP_SELECT <= 0x00000008]
[02:54:01.651]      __var powered_down      = 0;
[02:54:01.651]        // -> [powered_down <= 0x00000000]
[02:54:01.651]      WriteDP(DP_SELECT, 0x00000000);
[02:54:01.651]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:54:01.651]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:54:01.651]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:54:01.651]        // -> [powered_down <= 0x00000001]
[02:54:01.651]    </block>
[02:54:01.651]    <control if="powered_down" while="" timeout="0" info="">
[02:54:01.651]      // if-block "powered_down"
[02:54:01.651]        // =>  TRUE
[02:54:01.651]      <block atomic="false" info="">
[02:54:01.651]        Message(0, "Debug/System power-up request sent");
[02:54:01.656]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:54:01.656]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:54:01.656]      </block>
[02:54:01.656]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:54:01.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:54:01.656]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:54:01.656]        // while-condition  =>  FALSE
[02:54:01.656]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:54:01.656]      </control>
[02:54:01.656]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:54:01.656]        // if-block "(__protocol & 0xFFFF) == 1"
[02:54:01.656]          // =>  FALSE
[02:54:01.656]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:54:01.656]      </control>
[02:54:01.656]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:54:01.656]        // if-block "(__protocol & 0xFFFF) == 2"
[02:54:01.656]          // =>  TRUE
[02:54:01.656]        <block atomic="false" info="">
[02:54:01.656]          Message(0, "executing SWD power up");
[02:54:01.666]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:54:01.668]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:54:01.669]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:54:01.670]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:54:01.671]        </block>
[02:54:01.671]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:54:01.671]      </control>
[02:54:01.671]      // end if-block "powered_down"
[02:54:01.671]    </control>
[02:54:01.671]    <block atomic="false" info="">
[02:54:01.671]      __var DEBUG_PORT_VAL    = 0;
[02:54:01.671]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:54:01.671]      __var ACCESS_POINT_VAL  = 0;
[02:54:01.671]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:54:01.671]      __ap = 1; 
[02:54:01.673]        // -> [__ap <= 0x00000001]
[02:54:01.673]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:54:01.677]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:54:01.677]      __ap = 4;
[02:54:01.677]        // -> [__ap <= 0x00000004]
[02:54:01.677]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:54:01.681]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:54:01.681]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:54:01.681]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:54:01.681]    </block>
[02:54:01.681]    <block atomic="false" info="">
[02:54:01.681]      __var nReset = 0x80;
[02:54:01.681]        // -> [nReset <= 0x00000080]
[02:54:01.686]      __var canReadPins = 0;
[02:54:01.686]        // -> [canReadPins <= 0x00000000]
[02:54:01.686]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:54:01.687]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:54:01.687]        // -> [canReadPins <= 0x00000001]
[02:54:01.687]    </block>
[02:54:01.687]    <control if="" while="1" timeout="200" info="">
[02:54:01.687]      // while "1"  (timeout="200")
[02:54:01.687]      // while-condition  =>  TRUE
[02:54:01.688]      // while "1"  (timeout="200")
[02:54:01.688]      // while-condition  =>  TRUE
[02:54:01.688]      // while "1"  (timeout="200")
[02:54:01.688]      // while-condition  =>  TRUE
[02:54:01.688]      // while "1"  (timeout="200")
[02:54:01.688]      // while-condition  =>  TRUE
[02:54:01.688]      // while "1"  (timeout="200")
[02:54:01.688]      // while-condition  =>  TRUE
[02:54:01.688]      // while "1"  (timeout="200")
[02:54:01.688]      // while-condition  =>  TRUE
[02:54:01.688]      // while "1"  (timeout="200")
[02:54:01.688]      // while-condition  =>  TRUE
[02:54:01.688]      // while "1"  (timeout="200")
[02:54:01.688]      // while-condition  =>  TRUE
[02:54:01.688]      // while "1"  (timeout="200")
[02:54:01.688]      // while-condition  =>  TRUE
[02:54:01.688]      // while "1"  (timeout="200")
[02:54:01.688]      // while-condition  =>  TRUE
[02:54:01.688]      // while "1"  (timeout="200")
[02:54:01.688]      // while-condition  =>  TRUE
[02:54:01.690]      // while "1"  (timeout="200")
[02:54:01.690]      // while-condition  =>  TRUE
[02:54:01.690]      // while "1"  (timeout="200")
[02:54:01.690]      // while-condition  =>  TRUE
[02:54:01.690]      // while "1"  (timeout="200")
[02:54:01.690]      // while-condition  =>  TRUE
[02:54:01.690]      // while "1"  (timeout="200")
[02:54:01.690]      // while-condition  =>  TRUE
[02:54:01.690]      // while "1"  (timeout="200")
[02:54:01.690]      // while-condition  =>  TRUE
[02:54:01.690]      // while "1"  (timeout="200")
[02:54:01.690]      // while-condition  =>  TRUE
[02:54:01.690]      // while "1"  (timeout="200")
[02:54:01.691]      // while-condition  =>  TRUE
[02:54:01.691]      // while "1"  (timeout="200")
[02:54:01.691]      // while  =>  TIMEOUT
[02:54:01.691]      // end while "1"
[02:54:01.691]    </control>
[02:54:01.691]    <control if="canReadPins" while="" timeout="0" info="">
[02:54:01.691]      // if-block "canReadPins"
[02:54:01.691]        // =>  TRUE
[02:54:01.691]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:54:01.691]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:54:01.697]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:54:01.697]        // while-condition  =>  FALSE
[02:54:01.697]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:54:01.697]      </control>
[02:54:01.697]      // end if-block "canReadPins"
[02:54:01.697]    </control>
[02:54:01.697]    <control if="!canReadPins" while="" timeout="0" info="">
[02:54:01.697]      // if-block "!canReadPins"
[02:54:01.697]        // =>  FALSE
[02:54:01.697]      // skip if-block "!canReadPins"
[02:54:01.697]    </control>
[02:54:01.697]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:54:01.697]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:54:01.697]        // =>  TRUE
[02:54:01.697]      <block atomic="false" info="">
[02:54:01.697]        WriteAP(0x00, 0x190008);
[02:54:01.697]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:54:01.697]        WriteAP(0xF0, 0x01);
[02:54:01.710]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:54:01.710]      </block>
[02:54:01.710]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:54:01.710]    </control>
[02:54:01.710]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:54:01.710]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:54:01.710]        // =>  FALSE
[02:54:01.710]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:54:01.710]    </control>
[02:54:01.710]    <block atomic="false" info="">
[02:54:01.710]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:54:01.718]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:54:01.718]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:54:01.718]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:54:01.718]      __ap = 0; //lets make sure we reset the access point selection
[02:54:01.718]        // -> [__ap <= 0x00000000]
[02:54:01.718]    </block>
[02:54:01.718]  </sequence>
[02:54:01.718]  
[02:54:01.746]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:54:01.746]  
[02:54:01.746]  <debugvars>
[02:54:01.746]    // Pre-defined
[02:54:01.746]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:54:01.746]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:54:01.746]    __dp=0x00000000
[02:54:01.746]    __ap=0x00000000
[02:54:01.746]    __traceout=0x00000000      (Trace Disabled)
[02:54:01.746]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:54:01.746]    __FlashAddr=0x00000000
[02:54:01.746]    __FlashLen=0x00000000
[02:54:01.746]    __FlashArg=0x00000000
[02:54:01.746]    __FlashOp=0x00000000
[02:54:01.746]    __Result=0x00000000
[02:54:01.746]  </debugvars>
[02:54:01.746]  
[02:54:01.746]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:54:01.746]    <block atomic="false" info="">
[02:54:01.746]      __var deviceID = 0;
[02:54:01.746]        // -> [deviceID <= 0x00000000]
[02:54:01.746]      __var version = 0;
[02:54:01.746]        // -> [version <= 0x00000000]
[02:54:01.746]      __var partNum = 0;
[02:54:01.746]        // -> [partNum <= 0x00000000]
[02:54:01.746]      __var manuf = 0;
[02:54:01.746]        // -> [manuf <= 0x00000000]
[02:54:01.746]      __var isMSPM0G1X0X_G3X0X = 0;
[02:54:01.746]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:54:01.746]      __var isProduction = 0;
[02:54:01.746]        // -> [isProduction <= 0x00000000]
[02:54:01.746]      __var continueId = 0;
[02:54:01.746]        // -> [continueId <= 0x00000000]
[02:54:01.746]      deviceID =   Read32(0x41C40004);
[02:54:01.756]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:54:01.756]        // -> [deviceID <= 0x2BB8802F]
[02:54:01.756]      version = deviceID >> 28;
[02:54:01.756]        // -> [version <= 0x00000002]
[02:54:01.756]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:54:01.756]        // -> [partNum <= 0x0000BB88]
[02:54:01.756]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:54:01.756]        // -> [manuf <= 0x00000017]
[02:54:01.756]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:54:01.756]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:54:01.756]      isProduction = (version > 0);
[02:54:01.756]        // -> [isProduction <= 0x00000001]
[02:54:01.756]    </block>
[02:54:01.756]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:54:01.756]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:54:01.756]        // =>  FALSE
[02:54:01.756]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:54:01.756]    </control>
[02:54:01.756]    <control if="continueId == 4" while="" timeout="0" info="">
[02:54:01.756]      // if-block "continueId == 4"
[02:54:01.756]        // =>  FALSE
[02:54:01.756]      // skip if-block "continueId == 4"
[02:54:01.756]    </control>
[02:54:01.756]    <control if="!isProduction" while="" timeout="0" info="">
[02:54:01.756]      // if-block "!isProduction"
[02:54:01.756]        // =>  FALSE
[02:54:01.756]      // skip if-block "!isProduction"
[02:54:01.756]    </control>
[02:54:01.756]  </sequence>
[02:54:01.756]  
[02:54:15.489]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:54:15.489]  
[02:54:15.500]  <debugvars>
[02:54:15.500]    // Pre-defined
[02:54:15.500]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:54:15.500]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:54:15.500]    __dp=0x00000000
[02:54:15.500]    __ap=0x00000000
[02:54:15.500]    __traceout=0x00000000      (Trace Disabled)
[02:54:15.500]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:54:15.500]    __FlashAddr=0x00000000
[02:54:15.500]    __FlashLen=0x00000000
[02:54:15.500]    __FlashArg=0x00000000
[02:54:15.500]    __FlashOp=0x00000000
[02:54:15.500]    __Result=0x00000000
[02:54:15.500]  </debugvars>
[02:54:15.500]  
[02:54:15.500]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:54:15.500]    <block atomic="false" info="">
[02:54:15.500]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:54:15.500]        // -> [isSWJ <= 0x00000001]
[02:54:15.500]      __var hasDormant = __protocol & 0x00020000;
[02:54:15.500]        // -> [hasDormant <= 0x00000000]
[02:54:15.503]      __var protType   = __protocol & 0x0000FFFF;
[02:54:15.503]        // -> [protType <= 0x00000002]
[02:54:15.503]    </block>
[02:54:15.503]    <control if="protType == 1" while="" timeout="0" info="">
[02:54:15.503]      // if-block "protType == 1"
[02:54:15.503]        // =>  FALSE
[02:54:15.503]      // skip if-block "protType == 1"
[02:54:15.503]    </control>
[02:54:15.503]    <control if="protType == 2" while="" timeout="0" info="">
[02:54:15.503]      // if-block "protType == 2"
[02:54:15.503]        // =>  TRUE
[02:54:15.503]      <control if="isSWJ" while="" timeout="0" info="">
[02:54:15.503]        // if-block "isSWJ"
[02:54:15.503]          // =>  TRUE
[02:54:15.503]        <control if="hasDormant" while="" timeout="0" info="">
[02:54:15.503]          // if-block "hasDormant"
[02:54:15.503]            // =>  FALSE
[02:54:15.503]          // skip if-block "hasDormant"
[02:54:15.503]        </control>
[02:54:15.503]        <control if="!hasDormant" while="" timeout="0" info="">
[02:54:15.503]          // if-block "!hasDormant"
[02:54:15.503]            // =>  TRUE
[02:54:15.503]          <block atomic="false" info="">
[02:54:15.503]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:54:15.503]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:54:15.503]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:54:15.503]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:54:15.503]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:54:15.509]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:54:15.509]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:54:15.509]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:54:15.509]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:54:15.513]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:54:15.513]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:54:15.513]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:54:15.513]          </block>
[02:54:15.515]          // end if-block "!hasDormant"
[02:54:15.515]        </control>
[02:54:15.515]        // end if-block "isSWJ"
[02:54:15.515]      </control>
[02:54:15.515]      <control if="!isSWJ" while="" timeout="0" info="">
[02:54:15.515]        // if-block "!isSWJ"
[02:54:15.515]          // =>  FALSE
[02:54:15.515]        // skip if-block "!isSWJ"
[02:54:15.515]      </control>
[02:54:15.515]      <block atomic="false" info="">
[02:54:15.515]        ReadDP(0x0);
[02:54:15.515]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:54:15.515]      </block>
[02:54:15.515]      // end if-block "protType == 2"
[02:54:15.515]    </control>
[02:54:15.515]  </sequence>
[02:54:15.515]  
[02:54:15.519]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:54:15.519]  
[02:54:15.519]  <debugvars>
[02:54:15.519]    // Pre-defined
[02:54:15.519]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:54:15.519]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:54:15.519]    __dp=0x00000000
[02:54:15.519]    __ap=0x00000000
[02:54:15.519]    __traceout=0x00000000      (Trace Disabled)
[02:54:15.519]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:54:15.519]    __FlashAddr=0x00000000
[02:54:15.519]    __FlashLen=0x00000000
[02:54:15.519]    __FlashArg=0x00000000
[02:54:15.519]    __FlashOp=0x00000000
[02:54:15.523]    __Result=0x00000000
[02:54:15.523]  </debugvars>
[02:54:15.523]  
[02:54:15.523]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:54:15.523]    <block atomic="false" info="">
[02:54:15.523]      __var SW_DP_ABORT       = 0x0;
[02:54:15.523]        // -> [SW_DP_ABORT <= 0x00000000]
[02:54:15.523]      __var DP_CTRL_STAT      = 0x4;
[02:54:15.523]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:54:15.523]      __var DP_SELECT         = 0x8;
[02:54:15.523]        // -> [DP_SELECT <= 0x00000008]
[02:54:15.523]      __var powered_down      = 0;
[02:54:15.523]        // -> [powered_down <= 0x00000000]
[02:54:15.523]      WriteDP(DP_SELECT, 0x00000000);
[02:54:15.523]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:54:15.523]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:54:15.529]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:54:15.529]        // -> [powered_down <= 0x00000001]
[02:54:15.529]    </block>
[02:54:15.529]    <control if="powered_down" while="" timeout="0" info="">
[02:54:15.529]      // if-block "powered_down"
[02:54:15.529]        // =>  TRUE
[02:54:15.529]      <block atomic="false" info="">
[02:54:15.529]        Message(0, "Debug/System power-up request sent");
[02:54:15.529]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:54:15.533]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:54:15.533]      </block>
[02:54:15.533]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:54:15.533]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:54:15.533]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:54:15.533]        // while-condition  =>  FALSE
[02:54:15.533]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:54:15.533]      </control>
[02:54:15.533]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:54:15.533]        // if-block "(__protocol & 0xFFFF) == 1"
[02:54:15.533]          // =>  FALSE
[02:54:15.533]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:54:15.533]      </control>
[02:54:15.533]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:54:15.533]        // if-block "(__protocol & 0xFFFF) == 2"
[02:54:15.533]          // =>  TRUE
[02:54:15.533]        <block atomic="false" info="">
[02:54:15.533]          Message(0, "executing SWD power up");
[02:54:15.539]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:54:15.539]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:54:15.539]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:54:15.544]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:54:15.544]        </block>
[02:54:15.544]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:54:15.544]      </control>
[02:54:15.544]      // end if-block "powered_down"
[02:54:15.544]    </control>
[02:54:15.544]    <block atomic="false" info="">
[02:54:15.544]      __var DEBUG_PORT_VAL    = 0;
[02:54:15.544]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:54:15.544]      __var ACCESS_POINT_VAL  = 0;
[02:54:15.544]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:54:15.544]      __ap = 1; 
[02:54:15.544]        // -> [__ap <= 0x00000001]
[02:54:15.544]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:54:15.549]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:54:15.549]      __ap = 4;
[02:54:15.549]        // -> [__ap <= 0x00000004]
[02:54:15.549]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:54:15.554]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:54:15.554]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:54:15.554]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:54:15.554]    </block>
[02:54:15.554]    <block atomic="false" info="">
[02:54:15.554]      __var nReset = 0x80;
[02:54:15.554]        // -> [nReset <= 0x00000080]
[02:54:15.554]      __var canReadPins = 0;
[02:54:15.554]        // -> [canReadPins <= 0x00000000]
[02:54:15.554]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:54:15.554]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:54:15.554]        // -> [canReadPins <= 0x00000001]
[02:54:15.554]    </block>
[02:54:15.554]    <control if="" while="1" timeout="200" info="">
[02:54:15.554]      // while "1"  (timeout="200")
[02:54:15.554]      // while-condition  =>  TRUE
[02:54:15.554]      // while "1"  (timeout="200")
[02:54:15.559]      // while-condition  =>  TRUE
[02:54:15.559]      // while "1"  (timeout="200")
[02:54:15.559]      // while-condition  =>  TRUE
[02:54:15.559]      // while "1"  (timeout="200")
[02:54:15.559]      // while-condition  =>  TRUE
[02:54:15.559]      // while "1"  (timeout="200")
[02:54:15.559]      // while-condition  =>  TRUE
[02:54:15.559]      // while "1"  (timeout="200")
[02:54:15.559]      // while-condition  =>  TRUE
[02:54:15.559]      // while "1"  (timeout="200")
[02:54:15.559]      // while-condition  =>  TRUE
[02:54:15.559]      // while "1"  (timeout="200")
[02:54:15.559]      // while-condition  =>  TRUE
[02:54:15.559]      // while "1"  (timeout="200")
[02:54:15.559]      // while-condition  =>  TRUE
[02:54:15.559]      // while "1"  (timeout="200")
[02:54:15.559]      // while-condition  =>  TRUE
[02:54:15.559]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.561]      // while-condition  =>  TRUE
[02:54:15.561]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.564]      // while-condition  =>  TRUE
[02:54:15.564]      // while "1"  (timeout="200")
[02:54:15.569]      // while-condition  =>  TRUE
[02:54:15.569]      // while "1"  (timeout="200")
[02:54:15.569]      // while  =>  TIMEOUT
[02:54:15.569]      // end while "1"
[02:54:15.569]    </control>
[02:54:15.569]    <control if="canReadPins" while="" timeout="0" info="">
[02:54:15.569]      // if-block "canReadPins"
[02:54:15.569]        // =>  TRUE
[02:54:15.569]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:54:15.569]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:54:15.569]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:54:15.569]        // while-condition  =>  FALSE
[02:54:15.569]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:54:15.569]      </control>
[02:54:15.569]      // end if-block "canReadPins"
[02:54:15.569]    </control>
[02:54:15.569]    <control if="!canReadPins" while="" timeout="0" info="">
[02:54:15.569]      // if-block "!canReadPins"
[02:54:15.569]        // =>  FALSE
[02:54:15.569]      // skip if-block "!canReadPins"
[02:54:15.569]    </control>
[02:54:15.569]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:54:15.569]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:54:15.569]        // =>  TRUE
[02:54:15.569]      <block atomic="false" info="">
[02:54:15.569]        WriteAP(0x00, 0x190008);
[02:54:15.574]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:54:15.574]        WriteAP(0xF0, 0x01);
[02:54:15.574]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:54:15.579]      </block>
[02:54:15.579]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:54:15.579]    </control>
[02:54:15.579]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:54:15.579]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:54:15.579]        // =>  FALSE
[02:54:15.579]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:54:15.579]    </control>
[02:54:15.579]    <block atomic="false" info="">
[02:54:15.580]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:54:15.586]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:54:15.586]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:54:15.586]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:54:15.589]      __ap = 0; //lets make sure we reset the access point selection
[02:54:15.589]        // -> [__ap <= 0x00000000]
[02:54:15.589]    </block>
[02:54:15.589]  </sequence>
[02:54:15.589]  
[02:54:15.617]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:54:15.617]  
[02:54:15.617]  <debugvars>
[02:54:15.617]    // Pre-defined
[02:54:15.617]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:54:15.617]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:54:15.617]    __dp=0x00000000
[02:54:15.617]    __ap=0x00000000
[02:54:15.617]    __traceout=0x00000000      (Trace Disabled)
[02:54:15.617]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:54:15.617]    __FlashAddr=0x00000000
[02:54:15.617]    __FlashLen=0x00000000
[02:54:15.617]    __FlashArg=0x00000000
[02:54:15.617]    __FlashOp=0x00000000
[02:54:15.617]    __Result=0x00000000
[02:54:15.617]  </debugvars>
[02:54:15.617]  
[02:54:15.619]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:54:15.619]    <block atomic="false" info="">
[02:54:15.619]      __var deviceID = 0;
[02:54:15.619]        // -> [deviceID <= 0x00000000]
[02:54:15.619]      __var version = 0;
[02:54:15.619]        // -> [version <= 0x00000000]
[02:54:15.619]      __var partNum = 0;
[02:54:15.619]        // -> [partNum <= 0x00000000]
[02:54:15.619]      __var manuf = 0;
[02:54:15.619]        // -> [manuf <= 0x00000000]
[02:54:15.619]      __var isMSPM0G1X0X_G3X0X = 0;
[02:54:15.619]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:54:15.619]      __var isProduction = 0;
[02:54:15.619]        // -> [isProduction <= 0x00000000]
[02:54:15.619]      __var continueId = 0;
[02:54:15.619]        // -> [continueId <= 0x00000000]
[02:54:15.619]      deviceID =   Read32(0x41C40004);
[02:54:15.625]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:54:15.625]        // -> [deviceID <= 0x2BB8802F]
[02:54:15.625]      version = deviceID >> 28;
[02:54:15.625]        // -> [version <= 0x00000002]
[02:54:15.625]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:54:15.625]        // -> [partNum <= 0x0000BB88]
[02:54:15.625]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:54:15.625]        // -> [manuf <= 0x00000017]
[02:54:15.625]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:54:15.625]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:54:15.625]      isProduction = (version > 0);
[02:54:15.625]        // -> [isProduction <= 0x00000001]
[02:54:15.625]    </block>
[02:54:15.625]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:54:15.625]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:54:15.625]        // =>  FALSE
[02:54:15.625]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:54:15.625]    </control>
[02:54:15.625]    <control if="continueId == 4" while="" timeout="0" info="">
[02:54:15.625]      // if-block "continueId == 4"
[02:54:15.625]        // =>  FALSE
[02:54:15.625]      // skip if-block "continueId == 4"
[02:54:15.625]    </control>
[02:54:15.629]    <control if="!isProduction" while="" timeout="0" info="">
[02:54:15.629]      // if-block "!isProduction"
[02:54:15.629]        // =>  FALSE
[02:54:15.629]      // skip if-block "!isProduction"
[02:54:15.629]    </control>
[02:54:15.629]  </sequence>
[02:54:15.629]  
[02:55:16.014]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:55:16.014]  
[02:55:16.014]  <debugvars>
[02:55:16.014]    // Pre-defined
[02:55:16.014]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:55:16.014]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:55:16.014]    __dp=0x00000000
[02:55:16.014]    __ap=0x00000000
[02:55:16.014]    __traceout=0x00000000      (Trace Disabled)
[02:55:16.014]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:55:16.014]    __FlashAddr=0x00000000
[02:55:16.014]    __FlashLen=0x00000000
[02:55:16.014]    __FlashArg=0x00000000
[02:55:16.014]    __FlashOp=0x00000000
[02:55:16.014]    __Result=0x00000000
[02:55:16.014]  </debugvars>
[02:55:16.014]  
[02:55:16.014]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:55:16.014]    <block atomic="false" info="">
[02:55:16.014]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:55:16.014]        // -> [isSWJ <= 0x00000001]
[02:55:16.014]      __var hasDormant = __protocol & 0x00020000;
[02:55:16.014]        // -> [hasDormant <= 0x00000000]
[02:55:16.014]      __var protType   = __protocol & 0x0000FFFF;
[02:55:16.014]        // -> [protType <= 0x00000002]
[02:55:16.014]    </block>
[02:55:16.014]    <control if="protType == 1" while="" timeout="0" info="">
[02:55:16.014]      // if-block "protType == 1"
[02:55:16.014]        // =>  FALSE
[02:55:16.014]      // skip if-block "protType == 1"
[02:55:16.014]    </control>
[02:55:16.014]    <control if="protType == 2" while="" timeout="0" info="">
[02:55:16.014]      // if-block "protType == 2"
[02:55:16.014]        // =>  TRUE
[02:55:16.014]      <control if="isSWJ" while="" timeout="0" info="">
[02:55:16.014]        // if-block "isSWJ"
[02:55:16.014]          // =>  TRUE
[02:55:16.014]        <control if="hasDormant" while="" timeout="0" info="">
[02:55:16.014]          // if-block "hasDormant"
[02:55:16.014]            // =>  FALSE
[02:55:16.014]          // skip if-block "hasDormant"
[02:55:16.014]        </control>
[02:55:16.014]        <control if="!hasDormant" while="" timeout="0" info="">
[02:55:16.014]          // if-block "!hasDormant"
[02:55:16.014]            // =>  TRUE
[02:55:16.014]          <block atomic="false" info="">
[02:55:16.014]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:55:16.021]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:55:16.021]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:55:16.031]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:55:16.031]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:55:16.031]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:55:16.031]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:55:16.031]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:55:16.031]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:55:16.041]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:55:16.041]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:55:16.041]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:55:16.041]          </block>
[02:55:16.041]          // end if-block "!hasDormant"
[02:55:16.041]        </control>
[02:55:16.041]        // end if-block "isSWJ"
[02:55:16.041]      </control>
[02:55:16.041]      <control if="!isSWJ" while="" timeout="0" info="">
[02:55:16.041]        // if-block "!isSWJ"
[02:55:16.041]          // =>  FALSE
[02:55:16.041]        // skip if-block "!isSWJ"
[02:55:16.041]      </control>
[02:55:16.041]      <block atomic="false" info="">
[02:55:16.041]        ReadDP(0x0);
[02:55:16.041]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:55:16.041]      </block>
[02:55:16.041]      // end if-block "protType == 2"
[02:55:16.041]    </control>
[02:55:16.041]  </sequence>
[02:55:16.041]  
[02:55:16.051]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:55:16.051]  
[02:55:16.051]  <debugvars>
[02:55:16.051]    // Pre-defined
[02:55:16.051]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:55:16.051]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:55:16.051]    __dp=0x00000000
[02:55:16.051]    __ap=0x00000000
[02:55:16.051]    __traceout=0x00000000      (Trace Disabled)
[02:55:16.051]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:55:16.051]    __FlashAddr=0x00000000
[02:55:16.051]    __FlashLen=0x00000000
[02:55:16.051]    __FlashArg=0x00000000
[02:55:16.051]    __FlashOp=0x00000000
[02:55:16.051]    __Result=0x00000000
[02:55:16.051]  </debugvars>
[02:55:16.051]  
[02:55:16.051]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:55:16.051]    <block atomic="false" info="">
[02:55:16.051]      __var SW_DP_ABORT       = 0x0;
[02:55:16.051]        // -> [SW_DP_ABORT <= 0x00000000]
[02:55:16.051]      __var DP_CTRL_STAT      = 0x4;
[02:55:16.051]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:55:16.051]      __var DP_SELECT         = 0x8;
[02:55:16.051]        // -> [DP_SELECT <= 0x00000008]
[02:55:16.051]      __var powered_down      = 0;
[02:55:16.051]        // -> [powered_down <= 0x00000000]
[02:55:16.051]      WriteDP(DP_SELECT, 0x00000000);
[02:55:16.051]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:55:16.051]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:55:16.051]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:55:16.051]        // -> [powered_down <= 0x00000001]
[02:55:16.051]    </block>
[02:55:16.051]    <control if="powered_down" while="" timeout="0" info="">
[02:55:16.051]      // if-block "powered_down"
[02:55:16.051]        // =>  TRUE
[02:55:16.051]      <block atomic="false" info="">
[02:55:16.051]        Message(0, "Debug/System power-up request sent");
[02:55:16.062]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:55:16.062]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:55:16.062]      </block>
[02:55:16.062]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:55:16.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:55:16.062]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:55:16.062]        // while-condition  =>  FALSE
[02:55:16.062]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:55:16.062]      </control>
[02:55:16.062]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:55:16.062]        // if-block "(__protocol & 0xFFFF) == 1"
[02:55:16.062]          // =>  FALSE
[02:55:16.062]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:55:16.062]      </control>
[02:55:16.062]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:55:16.062]        // if-block "(__protocol & 0xFFFF) == 2"
[02:55:16.062]          // =>  TRUE
[02:55:16.062]        <block atomic="false" info="">
[02:55:16.062]          Message(0, "executing SWD power up");
[02:55:16.062]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:55:16.071]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:55:16.071]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:55:16.071]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:55:16.071]        </block>
[02:55:16.071]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:55:16.071]      </control>
[02:55:16.071]      // end if-block "powered_down"
[02:55:16.071]    </control>
[02:55:16.071]    <block atomic="false" info="">
[02:55:16.071]      __var DEBUG_PORT_VAL    = 0;
[02:55:16.071]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:55:16.071]      __var ACCESS_POINT_VAL  = 0;
[02:55:16.071]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:55:16.071]      __ap = 1; 
[02:55:16.071]        // -> [__ap <= 0x00000001]
[02:55:16.071]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:55:16.076]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:55:16.076]      __ap = 4;
[02:55:16.076]        // -> [__ap <= 0x00000004]
[02:55:16.076]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:55:16.081]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:55:16.081]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:55:16.081]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:55:16.081]    </block>
[02:55:16.086]    <block atomic="false" info="">
[02:55:16.086]      __var nReset = 0x80;
[02:55:16.086]        // -> [nReset <= 0x00000080]
[02:55:16.086]      __var canReadPins = 0;
[02:55:16.086]        // -> [canReadPins <= 0x00000000]
[02:55:16.086]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:55:16.086]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:55:16.086]        // -> [canReadPins <= 0x00000001]
[02:55:16.086]    </block>
[02:55:16.086]    <control if="" while="1" timeout="200" info="">
[02:55:16.086]      // while "1"  (timeout="200")
[02:55:16.086]      // while-condition  =>  TRUE
[02:55:16.086]      // while "1"  (timeout="200")
[02:55:16.086]      // while-condition  =>  TRUE
[02:55:16.086]      // while "1"  (timeout="200")
[02:55:16.086]      // while-condition  =>  TRUE
[02:55:16.086]      // while "1"  (timeout="200")
[02:55:16.086]      // while-condition  =>  TRUE
[02:55:16.086]      // while "1"  (timeout="200")
[02:55:16.086]      // while-condition  =>  TRUE
[02:55:16.086]      // while "1"  (timeout="200")
[02:55:16.086]      // while-condition  =>  TRUE
[02:55:16.086]      // while "1"  (timeout="200")
[02:55:16.086]      // while-condition  =>  TRUE
[02:55:16.086]      // while "1"  (timeout="200")
[02:55:16.086]      // while-condition  =>  TRUE
[02:55:16.086]      // while "1"  (timeout="200")
[02:55:16.086]      // while-condition  =>  TRUE
[02:55:16.086]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.091]      // while-condition  =>  TRUE
[02:55:16.091]      // while "1"  (timeout="200")
[02:55:16.101]      // while-condition  =>  TRUE
[02:55:16.101]      // while "1"  (timeout="200")
[02:55:16.101]      // while  =>  TIMEOUT
[02:55:16.101]      // end while "1"
[02:55:16.101]    </control>
[02:55:16.101]    <control if="canReadPins" while="" timeout="0" info="">
[02:55:16.101]      // if-block "canReadPins"
[02:55:16.101]        // =>  TRUE
[02:55:16.101]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:55:16.101]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:55:16.101]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:55:16.101]        // while-condition  =>  FALSE
[02:55:16.101]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:55:16.101]      </control>
[02:55:16.101]      // end if-block "canReadPins"
[02:55:16.101]    </control>
[02:55:16.101]    <control if="!canReadPins" while="" timeout="0" info="">
[02:55:16.101]      // if-block "!canReadPins"
[02:55:16.101]        // =>  FALSE
[02:55:16.101]      // skip if-block "!canReadPins"
[02:55:16.101]    </control>
[02:55:16.101]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:55:16.101]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:55:16.101]        // =>  TRUE
[02:55:16.101]      <block atomic="false" info="">
[02:55:16.101]        WriteAP(0x00, 0x190008);
[02:55:16.101]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:55:16.101]        WriteAP(0xF0, 0x01);
[02:55:16.111]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:55:16.111]      </block>
[02:55:16.111]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:55:16.111]    </control>
[02:55:16.111]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:55:16.111]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:55:16.111]        // =>  FALSE
[02:55:16.111]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:55:16.111]    </control>
[02:55:16.111]    <block atomic="false" info="">
[02:55:16.111]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:55:16.111]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:55:16.111]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:55:16.111]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:55:16.111]      __ap = 0; //lets make sure we reset the access point selection
[02:55:16.121]        // -> [__ap <= 0x00000000]
[02:55:16.121]    </block>
[02:55:16.121]  </sequence>
[02:55:16.121]  
[02:55:16.141]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:55:16.141]  
[02:55:16.151]  <debugvars>
[02:55:16.151]    // Pre-defined
[02:55:16.151]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:55:16.151]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:55:16.151]    __dp=0x00000000
[02:55:16.151]    __ap=0x00000000
[02:55:16.151]    __traceout=0x00000000      (Trace Disabled)
[02:55:16.151]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:55:16.151]    __FlashAddr=0x00000000
[02:55:16.151]    __FlashLen=0x00000000
[02:55:16.151]    __FlashArg=0x00000000
[02:55:16.151]    __FlashOp=0x00000000
[02:55:16.151]    __Result=0x00000000
[02:55:16.151]  </debugvars>
[02:55:16.151]  
[02:55:16.151]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:55:16.151]    <block atomic="false" info="">
[02:55:16.151]      __var deviceID = 0;
[02:55:16.151]        // -> [deviceID <= 0x00000000]
[02:55:16.151]      __var version = 0;
[02:55:16.151]        // -> [version <= 0x00000000]
[02:55:16.151]      __var partNum = 0;
[02:55:16.151]        // -> [partNum <= 0x00000000]
[02:55:16.151]      __var manuf = 0;
[02:55:16.151]        // -> [manuf <= 0x00000000]
[02:55:16.151]      __var isMSPM0G1X0X_G3X0X = 0;
[02:55:16.151]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:55:16.151]      __var isProduction = 0;
[02:55:16.151]        // -> [isProduction <= 0x00000000]
[02:55:16.151]      __var continueId = 0;
[02:55:16.151]        // -> [continueId <= 0x00000000]
[02:55:16.151]      deviceID =   Read32(0x41C40004);
[02:55:16.151]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:55:16.161]        // -> [deviceID <= 0x2BB8802F]
[02:55:16.161]      version = deviceID >> 28;
[02:55:16.161]        // -> [version <= 0x00000002]
[02:55:16.162]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:55:16.162]        // -> [partNum <= 0x0000BB88]
[02:55:16.162]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:55:16.162]        // -> [manuf <= 0x00000017]
[02:55:16.162]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:55:16.162]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:55:16.162]      isProduction = (version > 0);
[02:55:16.162]        // -> [isProduction <= 0x00000001]
[02:55:16.162]    </block>
[02:55:16.162]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:55:16.162]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:55:16.162]        // =>  FALSE
[02:55:16.162]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:55:16.162]    </control>
[02:55:16.162]    <control if="continueId == 4" while="" timeout="0" info="">
[02:55:16.162]      // if-block "continueId == 4"
[02:55:16.162]        // =>  FALSE
[02:55:16.162]      // skip if-block "continueId == 4"
[02:55:16.162]    </control>
[02:55:16.162]    <control if="!isProduction" while="" timeout="0" info="">
[02:55:16.162]      // if-block "!isProduction"
[02:55:16.162]        // =>  FALSE
[02:55:16.162]      // skip if-block "!isProduction"
[02:55:16.162]    </control>
[02:55:16.162]  </sequence>
[02:55:16.162]  
[02:56:48.959]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:56:48.959]  
[02:56:48.970]  <debugvars>
[02:56:48.970]    // Pre-defined
[02:56:48.970]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:56:48.970]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:56:48.970]    __dp=0x00000000
[02:56:48.970]    __ap=0x00000000
[02:56:48.970]    __traceout=0x00000000      (Trace Disabled)
[02:56:48.970]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:56:48.970]    __FlashAddr=0x00000000
[02:56:48.970]    __FlashLen=0x00000000
[02:56:48.970]    __FlashArg=0x00000000
[02:56:48.970]    __FlashOp=0x00000000
[02:56:48.970]    __Result=0x00000000
[02:56:48.970]  </debugvars>
[02:56:48.970]  
[02:56:48.970]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:56:48.970]    <block atomic="false" info="">
[02:56:48.970]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:56:48.970]        // -> [isSWJ <= 0x00000001]
[02:56:48.970]      __var hasDormant = __protocol & 0x00020000;
[02:56:48.970]        // -> [hasDormant <= 0x00000000]
[02:56:48.970]      __var protType   = __protocol & 0x0000FFFF;
[02:56:48.970]        // -> [protType <= 0x00000002]
[02:56:48.970]    </block>
[02:56:48.970]    <control if="protType == 1" while="" timeout="0" info="">
[02:56:48.970]      // if-block "protType == 1"
[02:56:48.970]        // =>  FALSE
[02:56:48.970]      // skip if-block "protType == 1"
[02:56:48.970]    </control>
[02:56:48.970]    <control if="protType == 2" while="" timeout="0" info="">
[02:56:48.970]      // if-block "protType == 2"
[02:56:48.970]        // =>  TRUE
[02:56:48.970]      <control if="isSWJ" while="" timeout="0" info="">
[02:56:48.970]        // if-block "isSWJ"
[02:56:48.970]          // =>  TRUE
[02:56:48.970]        <control if="hasDormant" while="" timeout="0" info="">
[02:56:48.970]          // if-block "hasDormant"
[02:56:48.970]            // =>  FALSE
[02:56:48.970]          // skip if-block "hasDormant"
[02:56:48.970]        </control>
[02:56:48.970]        <control if="!hasDormant" while="" timeout="0" info="">
[02:56:48.970]          // if-block "!hasDormant"
[02:56:48.970]            // =>  TRUE
[02:56:48.970]          <block atomic="false" info="">
[02:56:48.970]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:56:48.970]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:56:48.970]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:56:48.977]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:56:48.977]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:56:48.978]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:56:48.978]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:56:48.978]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:56:48.978]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:56:48.978]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:56:48.978]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:56:48.978]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:56:48.978]          </block>
[02:56:48.978]          // end if-block "!hasDormant"
[02:56:48.978]        </control>
[02:56:48.978]        // end if-block "isSWJ"
[02:56:48.978]      </control>
[02:56:48.978]      <control if="!isSWJ" while="" timeout="0" info="">
[02:56:48.978]        // if-block "!isSWJ"
[02:56:48.978]          // =>  FALSE
[02:56:48.978]        // skip if-block "!isSWJ"
[02:56:48.978]      </control>
[02:56:48.978]      <block atomic="false" info="">
[02:56:48.978]        ReadDP(0x0);
[02:56:48.987]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:56:48.987]      </block>
[02:56:48.987]      // end if-block "protType == 2"
[02:56:48.987]    </control>
[02:56:48.987]  </sequence>
[02:56:48.987]  
[02:56:48.989]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:56:48.989]  
[02:56:48.989]  <debugvars>
[02:56:48.989]    // Pre-defined
[02:56:48.989]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:56:48.989]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:56:48.989]    __dp=0x00000000
[02:56:48.989]    __ap=0x00000000
[02:56:48.989]    __traceout=0x00000000      (Trace Disabled)
[02:56:48.989]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:56:48.989]    __FlashAddr=0x00000000
[02:56:48.989]    __FlashLen=0x00000000
[02:56:48.989]    __FlashArg=0x00000000
[02:56:48.989]    __FlashOp=0x00000000
[02:56:48.989]    __Result=0x00000000
[02:56:48.989]  </debugvars>
[02:56:48.989]  
[02:56:48.989]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:56:48.989]    <block atomic="false" info="">
[02:56:48.989]      __var SW_DP_ABORT       = 0x0;
[02:56:48.989]        // -> [SW_DP_ABORT <= 0x00000000]
[02:56:48.989]      __var DP_CTRL_STAT      = 0x4;
[02:56:48.989]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:56:48.989]      __var DP_SELECT         = 0x8;
[02:56:48.989]        // -> [DP_SELECT <= 0x00000008]
[02:56:48.989]      __var powered_down      = 0;
[02:56:48.989]        // -> [powered_down <= 0x00000000]
[02:56:48.989]      WriteDP(DP_SELECT, 0x00000000);
[02:56:48.997]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:56:48.997]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:56:48.999]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:56:48.999]        // -> [powered_down <= 0x00000001]
[02:56:48.999]    </block>
[02:56:48.999]    <control if="powered_down" while="" timeout="0" info="">
[02:56:48.999]      // if-block "powered_down"
[02:56:48.999]        // =>  TRUE
[02:56:48.999]      <block atomic="false" info="">
[02:56:49.000]        Message(0, "Debug/System power-up request sent");
[02:56:49.000]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:56:49.000]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:56:49.000]      </block>
[02:56:49.000]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:56:49.000]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:56:49.000]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:56:49.000]        // while-condition  =>  FALSE
[02:56:49.000]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:56:49.000]      </control>
[02:56:49.000]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:56:49.000]        // if-block "(__protocol & 0xFFFF) == 1"
[02:56:49.000]          // =>  FALSE
[02:56:49.000]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:56:49.000]      </control>
[02:56:49.000]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:56:49.000]        // if-block "(__protocol & 0xFFFF) == 2"
[02:56:49.000]          // =>  TRUE
[02:56:49.000]        <block atomic="false" info="">
[02:56:49.000]          Message(0, "executing SWD power up");
[02:56:49.008]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:56:49.008]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:56:49.008]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:56:49.008]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:56:49.008]        </block>
[02:56:49.008]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:56:49.008]      </control>
[02:56:49.008]      // end if-block "powered_down"
[02:56:49.008]    </control>
[02:56:49.008]    <block atomic="false" info="">
[02:56:49.008]      __var DEBUG_PORT_VAL    = 0;
[02:56:49.008]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:56:49.008]      __var ACCESS_POINT_VAL  = 0;
[02:56:49.008]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:56:49.008]      __ap = 1; 
[02:56:49.008]        // -> [__ap <= 0x00000001]
[02:56:49.008]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:56:49.015]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:56:49.015]      __ap = 4;
[02:56:49.017]        // -> [__ap <= 0x00000004]
[02:56:49.017]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:56:49.018]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:56:49.018]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:56:49.018]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:56:49.018]    </block>
[02:56:49.018]    <block atomic="false" info="">
[02:56:49.018]      __var nReset = 0x80;
[02:56:49.018]        // -> [nReset <= 0x00000080]
[02:56:49.018]      __var canReadPins = 0;
[02:56:49.018]        // -> [canReadPins <= 0x00000000]
[02:56:49.018]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:56:49.029]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:56:49.029]        // -> [canReadPins <= 0x00000001]
[02:56:49.029]    </block>
[02:56:49.029]    <control if="" while="1" timeout="200" info="">
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.029]      // while-condition  =>  TRUE
[02:56:49.029]      // while "1"  (timeout="200")
[02:56:49.034]      // while-condition  =>  TRUE
[02:56:49.034]      // while "1"  (timeout="200")
[02:56:49.034]      // while-condition  =>  TRUE
[02:56:49.035]      // while "1"  (timeout="200")
[02:56:49.035]      // while  =>  TIMEOUT
[02:56:49.035]      // end while "1"
[02:56:49.035]    </control>
[02:56:49.035]    <control if="canReadPins" while="" timeout="0" info="">
[02:56:49.035]      // if-block "canReadPins"
[02:56:49.035]        // =>  TRUE
[02:56:49.035]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:56:49.035]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:56:49.038]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:56:49.038]        // while-condition  =>  FALSE
[02:56:49.038]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:56:49.038]      </control>
[02:56:49.038]      // end if-block "canReadPins"
[02:56:49.038]    </control>
[02:56:49.038]    <control if="!canReadPins" while="" timeout="0" info="">
[02:56:49.038]      // if-block "!canReadPins"
[02:56:49.038]        // =>  FALSE
[02:56:49.038]      // skip if-block "!canReadPins"
[02:56:49.038]    </control>
[02:56:49.038]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:56:49.038]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:56:49.038]        // =>  TRUE
[02:56:49.038]      <block atomic="false" info="">
[02:56:49.038]        WriteAP(0x00, 0x190008);
[02:56:49.038]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:56:49.038]        WriteAP(0xF0, 0x01);
[02:56:49.038]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:56:49.038]      </block>
[02:56:49.038]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:56:49.049]    </control>
[02:56:49.049]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:56:49.049]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:56:49.049]        // =>  FALSE
[02:56:49.049]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:56:49.049]    </control>
[02:56:49.050]    <block atomic="false" info="">
[02:56:49.050]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:56:49.052]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:56:49.052]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:56:49.052]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:56:49.054]      __ap = 0; //lets make sure we reset the access point selection
[02:56:49.054]        // -> [__ap <= 0x00000000]
[02:56:49.054]    </block>
[02:56:49.054]  </sequence>
[02:56:49.054]  
[02:56:49.074]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:56:49.074]  
[02:56:49.074]  <debugvars>
[02:56:49.074]    // Pre-defined
[02:56:49.074]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:56:49.074]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:56:49.079]    __dp=0x00000000
[02:56:49.079]    __ap=0x00000000
[02:56:49.079]    __traceout=0x00000000      (Trace Disabled)
[02:56:49.079]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:56:49.079]    __FlashAddr=0x00000000
[02:56:49.079]    __FlashLen=0x00000000
[02:56:49.079]    __FlashArg=0x00000000
[02:56:49.079]    __FlashOp=0x00000000
[02:56:49.079]    __Result=0x00000000
[02:56:49.079]  </debugvars>
[02:56:49.079]  
[02:56:49.079]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:56:49.079]    <block atomic="false" info="">
[02:56:49.079]      __var deviceID = 0;
[02:56:49.079]        // -> [deviceID <= 0x00000000]
[02:56:49.079]      __var version = 0;
[02:56:49.079]        // -> [version <= 0x00000000]
[02:56:49.079]      __var partNum = 0;
[02:56:49.079]        // -> [partNum <= 0x00000000]
[02:56:49.079]      __var manuf = 0;
[02:56:49.079]        // -> [manuf <= 0x00000000]
[02:56:49.079]      __var isMSPM0G1X0X_G3X0X = 0;
[02:56:49.081]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:56:49.081]      __var isProduction = 0;
[02:56:49.081]        // -> [isProduction <= 0x00000000]
[02:56:49.081]      __var continueId = 0;
[02:56:49.081]        // -> [continueId <= 0x00000000]
[02:56:49.081]      deviceID =   Read32(0x41C40004);
[02:56:49.091]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:56:49.091]        // -> [deviceID <= 0x2BB8802F]
[02:56:49.091]      version = deviceID >> 28;
[02:56:49.091]        // -> [version <= 0x00000002]
[02:56:49.091]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:56:49.091]        // -> [partNum <= 0x0000BB88]
[02:56:49.091]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:56:49.091]        // -> [manuf <= 0x00000017]
[02:56:49.091]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:56:49.091]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:56:49.091]      isProduction = (version > 0);
[02:56:49.091]        // -> [isProduction <= 0x00000001]
[02:56:49.091]    </block>
[02:56:49.091]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:56:49.091]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:56:49.091]        // =>  FALSE
[02:56:49.091]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:56:49.091]    </control>
[02:56:49.091]    <control if="continueId == 4" while="" timeout="0" info="">
[02:56:49.094]      // if-block "continueId == 4"
[02:56:49.094]        // =>  FALSE
[02:56:49.094]      // skip if-block "continueId == 4"
[02:56:49.094]    </control>
[02:56:49.094]    <control if="!isProduction" while="" timeout="0" info="">
[02:56:49.094]      // if-block "!isProduction"
[02:56:49.094]        // =>  FALSE
[02:56:49.094]      // skip if-block "!isProduction"
[02:56:49.094]    </control>
[02:56:49.094]  </sequence>
[02:56:49.094]  
[02:57:31.173]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:57:31.173]  
[02:57:31.173]  <debugvars>
[02:57:31.173]    // Pre-defined
[02:57:31.173]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:57:31.173]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:57:31.173]    __dp=0x00000000
[02:57:31.173]    __ap=0x00000000
[02:57:31.173]    __traceout=0x00000000      (Trace Disabled)
[02:57:31.173]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:57:31.173]    __FlashAddr=0x00000000
[02:57:31.173]    __FlashLen=0x00000000
[02:57:31.173]    __FlashArg=0x00000000
[02:57:31.173]    __FlashOp=0x00000000
[02:57:31.173]    __Result=0x00000000
[02:57:31.173]  </debugvars>
[02:57:31.173]  
[02:57:31.173]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:57:31.173]    <block atomic="false" info="">
[02:57:31.177]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:57:31.177]        // -> [isSWJ <= 0x00000001]
[02:57:31.177]      __var hasDormant = __protocol & 0x00020000;
[02:57:31.177]        // -> [hasDormant <= 0x00000000]
[02:57:31.177]      __var protType   = __protocol & 0x0000FFFF;
[02:57:31.177]        // -> [protType <= 0x00000002]
[02:57:31.177]    </block>
[02:57:31.177]    <control if="protType == 1" while="" timeout="0" info="">
[02:57:31.177]      // if-block "protType == 1"
[02:57:31.177]        // =>  FALSE
[02:57:31.177]      // skip if-block "protType == 1"
[02:57:31.177]    </control>
[02:57:31.177]    <control if="protType == 2" while="" timeout="0" info="">
[02:57:31.177]      // if-block "protType == 2"
[02:57:31.177]        // =>  TRUE
[02:57:31.177]      <control if="isSWJ" while="" timeout="0" info="">
[02:57:31.177]        // if-block "isSWJ"
[02:57:31.177]          // =>  TRUE
[02:57:31.177]        <control if="hasDormant" while="" timeout="0" info="">
[02:57:31.177]          // if-block "hasDormant"
[02:57:31.177]            // =>  FALSE
[02:57:31.177]          // skip if-block "hasDormant"
[02:57:31.177]        </control>
[02:57:31.177]        <control if="!hasDormant" while="" timeout="0" info="">
[02:57:31.177]          // if-block "!hasDormant"
[02:57:31.177]            // =>  TRUE
[02:57:31.177]          <block atomic="false" info="">
[02:57:31.177]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:57:31.183]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:57:31.183]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:57:31.183]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:57:31.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:57:31.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:57:31.187]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:57:31.187]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:57:31.187]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:57:31.190]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:57:31.190]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:57:31.190]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:57:31.190]          </block>
[02:57:31.190]          // end if-block "!hasDormant"
[02:57:31.190]        </control>
[02:57:31.190]        // end if-block "isSWJ"
[02:57:31.190]      </control>
[02:57:31.190]      <control if="!isSWJ" while="" timeout="0" info="">
[02:57:31.190]        // if-block "!isSWJ"
[02:57:31.190]          // =>  FALSE
[02:57:31.190]        // skip if-block "!isSWJ"
[02:57:31.190]      </control>
[02:57:31.190]      <block atomic="false" info="">
[02:57:31.192]        ReadDP(0x0);
[02:57:31.192]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:57:31.192]      </block>
[02:57:31.192]      // end if-block "protType == 2"
[02:57:31.192]    </control>
[02:57:31.192]  </sequence>
[02:57:31.192]  
[02:57:31.198]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:57:31.198]  
[02:57:31.203]  <debugvars>
[02:57:31.203]    // Pre-defined
[02:57:31.203]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:57:31.203]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:57:31.203]    __dp=0x00000000
[02:57:31.203]    __ap=0x00000000
[02:57:31.203]    __traceout=0x00000000      (Trace Disabled)
[02:57:31.203]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:57:31.203]    __FlashAddr=0x00000000
[02:57:31.203]    __FlashLen=0x00000000
[02:57:31.203]    __FlashArg=0x00000000
[02:57:31.203]    __FlashOp=0x00000000
[02:57:31.203]    __Result=0x00000000
[02:57:31.203]  </debugvars>
[02:57:31.203]  
[02:57:31.203]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:57:31.203]    <block atomic="false" info="">
[02:57:31.203]      __var SW_DP_ABORT       = 0x0;
[02:57:31.203]        // -> [SW_DP_ABORT <= 0x00000000]
[02:57:31.203]      __var DP_CTRL_STAT      = 0x4;
[02:57:31.203]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:57:31.203]      __var DP_SELECT         = 0x8;
[02:57:31.203]        // -> [DP_SELECT <= 0x00000008]
[02:57:31.203]      __var powered_down      = 0;
[02:57:31.203]        // -> [powered_down <= 0x00000000]
[02:57:31.203]      WriteDP(DP_SELECT, 0x00000000);
[02:57:31.210]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:57:31.210]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:57:31.212]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:57:31.212]        // -> [powered_down <= 0x00000001]
[02:57:31.212]    </block>
[02:57:31.212]    <control if="powered_down" while="" timeout="0" info="">
[02:57:31.212]      // if-block "powered_down"
[02:57:31.212]        // =>  TRUE
[02:57:31.212]      <block atomic="false" info="">
[02:57:31.212]        Message(0, "Debug/System power-up request sent");
[02:57:31.212]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:57:31.212]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:57:31.218]      </block>
[02:57:31.218]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:57:31.218]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:57:31.219]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:57:31.219]        // while-condition  =>  FALSE
[02:57:31.219]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:57:31.219]      </control>
[02:57:31.219]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:57:31.219]        // if-block "(__protocol & 0xFFFF) == 1"
[02:57:31.219]          // =>  FALSE
[02:57:31.219]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:57:31.219]      </control>
[02:57:31.219]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:57:31.219]        // if-block "(__protocol & 0xFFFF) == 2"
[02:57:31.219]          // =>  TRUE
[02:57:31.219]        <block atomic="false" info="">
[02:57:31.219]          Message(0, "executing SWD power up");
[02:57:31.222]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:57:31.228]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:57:31.228]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:57:31.233]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:57:31.233]        </block>
[02:57:31.233]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:57:31.233]      </control>
[02:57:31.233]      // end if-block "powered_down"
[02:57:31.233]    </control>
[02:57:31.233]    <block atomic="false" info="">
[02:57:31.233]      __var DEBUG_PORT_VAL    = 0;
[02:57:31.233]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:57:31.233]      __var ACCESS_POINT_VAL  = 0;
[02:57:31.233]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:57:31.233]      __ap = 1; 
[02:57:31.233]        // -> [__ap <= 0x00000001]
[02:57:31.233]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:57:31.243]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:57:31.243]      __ap = 4;
[02:57:31.243]        // -> [__ap <= 0x00000004]
[02:57:31.243]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:57:31.253]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:57:31.253]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:57:31.253]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:57:31.253]    </block>
[02:57:31.253]    <block atomic="false" info="">
[02:57:31.253]      __var nReset = 0x80;
[02:57:31.253]        // -> [nReset <= 0x00000080]
[02:57:31.253]      __var canReadPins = 0;
[02:57:31.253]        // -> [canReadPins <= 0x00000000]
[02:57:31.253]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:57:31.258]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:57:31.258]        // -> [canReadPins <= 0x00000001]
[02:57:31.258]    </block>
[02:57:31.258]    <control if="" while="1" timeout="200" info="">
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.258]      // while "1"  (timeout="200")
[02:57:31.258]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.263]      // while-condition  =>  TRUE
[02:57:31.263]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.268]      // while "1"  (timeout="200")
[02:57:31.268]      // while-condition  =>  TRUE
[02:57:31.273]      // while "1"  (timeout="200")
[02:57:31.273]      // while  =>  TIMEOUT
[02:57:31.273]      // end while "1"
[02:57:31.273]    </control>
[02:57:31.273]    <control if="canReadPins" while="" timeout="0" info="">
[02:57:31.273]      // if-block "canReadPins"
[02:57:31.273]        // =>  TRUE
[02:57:31.273]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:57:31.273]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:57:31.278]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:57:31.278]        // while-condition  =>  FALSE
[02:57:31.278]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:57:31.278]      </control>
[02:57:31.278]      // end if-block "canReadPins"
[02:57:31.278]    </control>
[02:57:31.278]    <control if="!canReadPins" while="" timeout="0" info="">
[02:57:31.278]      // if-block "!canReadPins"
[02:57:31.278]        // =>  FALSE
[02:57:31.278]      // skip if-block "!canReadPins"
[02:57:31.278]    </control>
[02:57:31.278]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:57:31.278]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:57:31.278]        // =>  TRUE
[02:57:31.278]      <block atomic="false" info="">
[02:57:31.278]        WriteAP(0x00, 0x190008);
[02:57:31.283]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:57:31.283]        WriteAP(0xF0, 0x01);
[02:57:31.291]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:57:31.291]      </block>
[02:57:31.291]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:57:31.291]    </control>
[02:57:31.291]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:57:31.293]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:57:31.293]        // =>  FALSE
[02:57:31.293]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:57:31.293]    </control>
[02:57:31.293]    <block atomic="false" info="">
[02:57:31.293]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:57:31.293]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:57:31.293]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:57:31.293]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:57:31.298]      __ap = 0; //lets make sure we reset the access point selection
[02:57:31.299]        // -> [__ap <= 0x00000000]
[02:57:31.299]    </block>
[02:57:31.299]  </sequence>
[02:57:31.299]  
[02:57:31.322]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:57:31.322]  
[02:57:31.322]  <debugvars>
[02:57:31.322]    // Pre-defined
[02:57:31.322]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:57:31.322]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:57:31.322]    __dp=0x00000000
[02:57:31.322]    __ap=0x00000000
[02:57:31.322]    __traceout=0x00000000      (Trace Disabled)
[02:57:31.322]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:57:31.322]    __FlashAddr=0x00000000
[02:57:31.322]    __FlashLen=0x00000000
[02:57:31.322]    __FlashArg=0x00000000
[02:57:31.322]    __FlashOp=0x00000000
[02:57:31.322]    __Result=0x00000000
[02:57:31.322]  </debugvars>
[02:57:31.322]  
[02:57:31.322]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:57:31.322]    <block atomic="false" info="">
[02:57:31.322]      __var deviceID = 0;
[02:57:31.322]        // -> [deviceID <= 0x00000000]
[02:57:31.322]      __var version = 0;
[02:57:31.322]        // -> [version <= 0x00000000]
[02:57:31.322]      __var partNum = 0;
[02:57:31.322]        // -> [partNum <= 0x00000000]
[02:57:31.322]      __var manuf = 0;
[02:57:31.322]        // -> [manuf <= 0x00000000]
[02:57:31.322]      __var isMSPM0G1X0X_G3X0X = 0;
[02:57:31.322]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:57:31.322]      __var isProduction = 0;
[02:57:31.322]        // -> [isProduction <= 0x00000000]
[02:57:31.329]      __var continueId = 0;
[02:57:31.329]        // -> [continueId <= 0x00000000]
[02:57:31.329]      deviceID =   Read32(0x41C40004);
[02:57:31.339]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:57:31.339]        // -> [deviceID <= 0x2BB8802F]
[02:57:31.339]      version = deviceID >> 28;
[02:57:31.339]        // -> [version <= 0x00000002]
[02:57:31.339]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:57:31.339]        // -> [partNum <= 0x0000BB88]
[02:57:31.339]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:57:31.339]        // -> [manuf <= 0x00000017]
[02:57:31.339]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:57:31.339]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:57:31.339]      isProduction = (version > 0);
[02:57:31.339]        // -> [isProduction <= 0x00000001]
[02:57:31.339]    </block>
[02:57:31.339]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:57:31.339]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:57:31.339]        // =>  FALSE
[02:57:31.339]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:57:31.339]    </control>
[02:57:31.339]    <control if="continueId == 4" while="" timeout="0" info="">
[02:57:31.339]      // if-block "continueId == 4"
[02:57:31.339]        // =>  FALSE
[02:57:31.343]      // skip if-block "continueId == 4"
[02:57:31.343]    </control>
[02:57:31.343]    <control if="!isProduction" while="" timeout="0" info="">
[02:57:31.343]      // if-block "!isProduction"
[02:57:31.343]        // =>  FALSE
[02:57:31.343]      // skip if-block "!isProduction"
[02:57:31.343]    </control>
[02:57:31.343]  </sequence>
[02:57:31.343]  
[04:41:49.339]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:41:49.339]  
[04:41:49.339]  <debugvars>
[04:41:49.339]    // Pre-defined
[04:41:49.339]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:41:49.339]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:41:49.339]    __dp=0x00000000
[04:41:49.339]    __ap=0x00000000
[04:41:49.339]    __traceout=0x00000000      (Trace Disabled)
[04:41:49.339]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:41:49.339]    __FlashAddr=0x00000000
[04:41:49.339]    __FlashLen=0x00000000
[04:41:49.339]    __FlashArg=0x00000000
[04:41:49.339]    __FlashOp=0x00000000
[04:41:49.339]    __Result=0x00000000
[04:41:49.339]  </debugvars>
[04:41:49.339]  
[04:41:49.339]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:41:49.339]    <block atomic="false" info="">
[04:41:49.339]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:41:49.339]        // -> [isSWJ <= 0x00000001]
[04:41:49.339]      __var hasDormant = __protocol & 0x00020000;
[04:41:49.339]        // -> [hasDormant <= 0x00000000]
[04:41:49.339]      __var protType   = __protocol & 0x0000FFFF;
[04:41:49.339]        // -> [protType <= 0x00000002]
[04:41:49.339]    </block>
[04:41:49.339]    <control if="protType == 1" while="" timeout="0" info="">
[04:41:49.339]      // if-block "protType == 1"
[04:41:49.339]        // =>  FALSE
[04:41:49.339]      // skip if-block "protType == 1"
[04:41:49.339]    </control>
[04:41:49.339]    <control if="protType == 2" while="" timeout="0" info="">
[04:41:49.339]      // if-block "protType == 2"
[04:41:49.339]        // =>  TRUE
[04:41:49.339]      <control if="isSWJ" while="" timeout="0" info="">
[04:41:49.339]        // if-block "isSWJ"
[04:41:49.339]          // =>  TRUE
[04:41:49.339]        <control if="hasDormant" while="" timeout="0" info="">
[04:41:49.339]          // if-block "hasDormant"
[04:41:49.339]            // =>  FALSE
[04:41:49.339]          // skip if-block "hasDormant"
[04:41:49.339]        </control>
[04:41:49.339]        <control if="!hasDormant" while="" timeout="0" info="">
[04:41:49.339]          // if-block "!hasDormant"
[04:41:49.339]            // =>  TRUE
[04:41:49.339]          <block atomic="false" info="">
[04:41:49.339]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:41:49.339]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:41:49.339]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:41:49.339]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:41:49.339]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:41:49.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:41:49.348]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:41:49.348]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:41:49.348]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:41:49.348]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:41:49.348]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:41:49.348]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:41:49.348]          </block>
[04:41:49.348]          // end if-block "!hasDormant"
[04:41:49.348]        </control>
[04:41:49.348]        // end if-block "isSWJ"
[04:41:49.348]      </control>
[04:41:49.348]      <control if="!isSWJ" while="" timeout="0" info="">
[04:41:49.348]        // if-block "!isSWJ"
[04:41:49.348]          // =>  FALSE
[04:41:49.348]        // skip if-block "!isSWJ"
[04:41:49.348]      </control>
[04:41:49.348]      <block atomic="false" info="">
[04:41:49.348]        ReadDP(0x0);
[04:41:49.348]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:41:49.348]      </block>
[04:41:49.348]      // end if-block "protType == 2"
[04:41:49.348]    </control>
[04:41:49.348]  </sequence>
[04:41:49.348]  
[04:41:49.359]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:41:49.359]  
[04:41:49.359]  <debugvars>
[04:41:49.359]    // Pre-defined
[04:41:49.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:41:49.359]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:41:49.359]    __dp=0x00000000
[04:41:49.359]    __ap=0x00000000
[04:41:49.359]    __traceout=0x00000000      (Trace Disabled)
[04:41:49.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:41:49.359]    __FlashAddr=0x00000000
[04:41:49.359]    __FlashLen=0x00000000
[04:41:49.359]    __FlashArg=0x00000000
[04:41:49.359]    __FlashOp=0x00000000
[04:41:49.359]    __Result=0x00000000
[04:41:49.359]  </debugvars>
[04:41:49.359]  
[04:41:49.359]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:41:49.359]    <block atomic="false" info="">
[04:41:49.359]      __var SW_DP_ABORT       = 0x0;
[04:41:49.359]        // -> [SW_DP_ABORT <= 0x00000000]
[04:41:49.359]      __var DP_CTRL_STAT      = 0x4;
[04:41:49.359]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:41:49.359]      __var DP_SELECT         = 0x8;
[04:41:49.359]        // -> [DP_SELECT <= 0x00000008]
[04:41:49.359]      __var powered_down      = 0;
[04:41:49.359]        // -> [powered_down <= 0x00000000]
[04:41:49.359]      WriteDP(DP_SELECT, 0x00000000);
[04:41:49.359]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:41:49.359]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:41:49.359]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:41:49.359]        // -> [powered_down <= 0x00000001]
[04:41:49.359]    </block>
[04:41:49.359]    <control if="powered_down" while="" timeout="0" info="">
[04:41:49.359]      // if-block "powered_down"
[04:41:49.359]        // =>  TRUE
[04:41:49.359]      <block atomic="false" info="">
[04:41:49.359]        Message(0, "Debug/System power-up request sent");
[04:41:49.359]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:41:49.369]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:41:49.369]      </block>
[04:41:49.369]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:41:49.369]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:41:49.369]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:41:49.369]        // while-condition  =>  FALSE
[04:41:49.369]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:41:49.369]      </control>
[04:41:49.369]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:41:49.369]        // if-block "(__protocol & 0xFFFF) == 1"
[04:41:49.369]          // =>  FALSE
[04:41:49.369]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:41:49.369]      </control>
[04:41:49.369]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:41:49.369]        // if-block "(__protocol & 0xFFFF) == 2"
[04:41:49.369]          // =>  TRUE
[04:41:49.369]        <block atomic="false" info="">
[04:41:49.369]          Message(0, "executing SWD power up");
[04:41:49.369]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:41:49.369]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:41:49.369]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:41:49.379]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:41:49.379]        </block>
[04:41:49.379]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:41:49.379]      </control>
[04:41:49.379]      // end if-block "powered_down"
[04:41:49.379]    </control>
[04:41:49.379]    <block atomic="false" info="">
[04:41:49.379]      __var DEBUG_PORT_VAL    = 0;
[04:41:49.379]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:41:49.379]      __var ACCESS_POINT_VAL  = 0;
[04:41:49.379]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:41:49.379]      __ap = 1; 
[04:41:49.379]        // -> [__ap <= 0x00000001]
[04:41:49.379]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:41:49.379]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:41:49.379]      __ap = 4;
[04:41:49.379]        // -> [__ap <= 0x00000004]
[04:41:49.379]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:41:49.379]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:41:49.379]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:41:49.379]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:41:49.379]    </block>
[04:41:49.379]    <block atomic="false" info="">
[04:41:49.379]      __var nReset = 0x80;
[04:41:49.379]        // -> [nReset <= 0x00000080]
[04:41:49.389]      __var canReadPins = 0;
[04:41:49.389]        // -> [canReadPins <= 0x00000000]
[04:41:49.389]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:41:49.390]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:41:49.390]        // -> [canReadPins <= 0x00000001]
[04:41:49.390]    </block>
[04:41:49.390]    <control if="" while="1" timeout="200" info="">
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.390]      // while "1"  (timeout="200")
[04:41:49.390]      // while-condition  =>  TRUE
[04:41:49.399]      // while "1"  (timeout="200")
[04:41:49.399]      // while  =>  TIMEOUT
[04:41:49.399]      // end while "1"
[04:41:49.399]    </control>
[04:41:49.399]    <control if="canReadPins" while="" timeout="0" info="">
[04:41:49.399]      // if-block "canReadPins"
[04:41:49.399]        // =>  TRUE
[04:41:49.399]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:41:49.399]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:41:49.399]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:41:49.399]        // while-condition  =>  FALSE
[04:41:49.399]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:41:49.399]      </control>
[04:41:49.399]      // end if-block "canReadPins"
[04:41:49.399]    </control>
[04:41:49.399]    <control if="!canReadPins" while="" timeout="0" info="">
[04:41:49.399]      // if-block "!canReadPins"
[04:41:49.399]        // =>  FALSE
[04:41:49.399]      // skip if-block "!canReadPins"
[04:41:49.399]    </control>
[04:41:49.399]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:41:49.399]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:41:49.399]        // =>  TRUE
[04:41:49.399]      <block atomic="false" info="">
[04:41:49.399]        WriteAP(0x00, 0x190008);
[04:41:49.399]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:41:49.399]        WriteAP(0xF0, 0x01);
[04:41:49.399]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:41:49.399]      </block>
[04:41:49.399]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:41:49.399]    </control>
[04:41:49.399]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:41:49.399]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:41:49.409]        // =>  FALSE
[04:41:49.409]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:41:49.409]    </control>
[04:41:49.409]    <block atomic="false" info="">
[04:41:49.409]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:41:49.409]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:41:49.409]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:41:49.409]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:41:49.409]      __ap = 0; //lets make sure we reset the access point selection
[04:41:49.409]        // -> [__ap <= 0x00000000]
[04:41:49.409]    </block>
[04:41:49.409]  </sequence>
[04:41:49.409]  
[04:41:49.439]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:41:49.439]  
[04:41:49.439]  <debugvars>
[04:41:49.439]    // Pre-defined
[04:41:49.439]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:41:49.439]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:41:49.439]    __dp=0x00000000
[04:41:49.439]    __ap=0x00000000
[04:41:49.439]    __traceout=0x00000000      (Trace Disabled)
[04:41:49.439]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:41:49.439]    __FlashAddr=0x00000000
[04:41:49.439]    __FlashLen=0x00000000
[04:41:49.439]    __FlashArg=0x00000000
[04:41:49.439]    __FlashOp=0x00000000
[04:41:49.439]    __Result=0x00000000
[04:41:49.439]  </debugvars>
[04:41:49.439]  
[04:41:49.439]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:41:49.439]    <block atomic="false" info="">
[04:41:49.439]      __var deviceID = 0;
[04:41:49.439]        // -> [deviceID <= 0x00000000]
[04:41:49.439]      __var version = 0;
[04:41:49.439]        // -> [version <= 0x00000000]
[04:41:49.439]      __var partNum = 0;
[04:41:49.439]        // -> [partNum <= 0x00000000]
[04:41:49.439]      __var manuf = 0;
[04:41:49.449]        // -> [manuf <= 0x00000000]
[04:41:49.449]      __var isMSPM0G1X0X_G3X0X = 0;
[04:41:49.449]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:41:49.449]      __var isProduction = 0;
[04:41:49.449]        // -> [isProduction <= 0x00000000]
[04:41:49.449]      __var continueId = 0;
[04:41:49.449]        // -> [continueId <= 0x00000000]
[04:41:49.449]      deviceID =   Read32(0x41C40004);
[04:41:49.449]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:41:49.459]        // -> [deviceID <= 0x2BB8802F]
[04:41:49.459]      version = deviceID >> 28;
[04:41:49.459]        // -> [version <= 0x00000002]
[04:41:49.459]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:41:49.459]        // -> [partNum <= 0x0000BB88]
[04:41:49.459]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:41:49.459]        // -> [manuf <= 0x00000017]
[04:41:49.459]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:41:49.459]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:41:49.459]      isProduction = (version > 0);
[04:41:49.459]        // -> [isProduction <= 0x00000001]
[04:41:49.459]    </block>
[04:41:49.459]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:41:49.459]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:41:49.459]        // =>  FALSE
[04:41:49.459]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:41:49.459]    </control>
[04:41:49.459]    <control if="continueId == 4" while="" timeout="0" info="">
[04:41:49.459]      // if-block "continueId == 4"
[04:41:49.459]        // =>  FALSE
[04:41:49.459]      // skip if-block "continueId == 4"
[04:41:49.459]    </control>
[04:41:49.459]    <control if="!isProduction" while="" timeout="0" info="">
[04:41:49.459]      // if-block "!isProduction"
[04:41:49.459]        // =>  FALSE
[04:41:49.459]      // skip if-block "!isProduction"
[04:41:49.459]    </control>
[04:41:49.459]  </sequence>
[04:41:49.459]  
[04:41:55.614]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:41:55.614]  
[04:41:55.614]  <debugvars>
[04:41:55.614]    // Pre-defined
[04:41:55.614]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:41:55.614]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:41:55.614]    __dp=0x00000000
[04:41:55.614]    __ap=0x00000000
[04:41:55.614]    __traceout=0x00000000      (Trace Disabled)
[04:41:55.614]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:41:55.614]    __FlashAddr=0x00000000
[04:41:55.614]    __FlashLen=0x00000000
[04:41:55.614]    __FlashArg=0x00000000
[04:41:55.614]    __FlashOp=0x00000000
[04:41:55.614]    __Result=0x00000000
[04:41:55.614]  </debugvars>
[04:41:55.614]  
[04:41:55.614]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:41:55.614]    <block atomic="false" info="">
[04:41:55.614]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:41:55.614]        // -> [isSWJ <= 0x00000001]
[04:41:55.618]      __var hasDormant = __protocol & 0x00020000;
[04:41:55.618]        // -> [hasDormant <= 0x00000000]
[04:41:55.618]      __var protType   = __protocol & 0x0000FFFF;
[04:41:55.618]        // -> [protType <= 0x00000002]
[04:41:55.618]    </block>
[04:41:55.618]    <control if="protType == 1" while="" timeout="0" info="">
[04:41:55.618]      // if-block "protType == 1"
[04:41:55.618]        // =>  FALSE
[04:41:55.618]      // skip if-block "protType == 1"
[04:41:55.618]    </control>
[04:41:55.618]    <control if="protType == 2" while="" timeout="0" info="">
[04:41:55.618]      // if-block "protType == 2"
[04:41:55.618]        // =>  TRUE
[04:41:55.618]      <control if="isSWJ" while="" timeout="0" info="">
[04:41:55.618]        // if-block "isSWJ"
[04:41:55.618]          // =>  TRUE
[04:41:55.618]        <control if="hasDormant" while="" timeout="0" info="">
[04:41:55.618]          // if-block "hasDormant"
[04:41:55.618]            // =>  FALSE
[04:41:55.618]          // skip if-block "hasDormant"
[04:41:55.618]        </control>
[04:41:55.618]        <control if="!hasDormant" while="" timeout="0" info="">
[04:41:55.618]          // if-block "!hasDormant"
[04:41:55.618]            // =>  TRUE
[04:41:55.618]          <block atomic="false" info="">
[04:41:55.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:41:55.618]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:41:55.622]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:41:55.622]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:41:55.622]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:41:55.622]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:41:55.626]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:41:55.626]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:41:55.626]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:41:55.630]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:41:55.630]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:41:55.630]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:41:55.630]          </block>
[04:41:55.630]          // end if-block "!hasDormant"
[04:41:55.630]        </control>
[04:41:55.630]        // end if-block "isSWJ"
[04:41:55.630]      </control>
[04:41:55.630]      <control if="!isSWJ" while="" timeout="0" info="">
[04:41:55.630]        // if-block "!isSWJ"
[04:41:55.630]          // =>  FALSE
[04:41:55.630]        // skip if-block "!isSWJ"
[04:41:55.630]      </control>
[04:41:55.630]      <block atomic="false" info="">
[04:41:55.630]        ReadDP(0x0);
[04:41:55.634]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:41:55.634]      </block>
[04:41:55.634]      // end if-block "protType == 2"
[04:41:55.634]    </control>
[04:41:55.634]  </sequence>
[04:41:55.634]  
[04:41:55.634]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:41:55.634]  
[04:41:55.634]  <debugvars>
[04:41:55.634]    // Pre-defined
[04:41:55.638]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:41:55.638]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:41:55.638]    __dp=0x00000000
[04:41:55.638]    __ap=0x00000000
[04:41:55.638]    __traceout=0x00000000      (Trace Disabled)
[04:41:55.638]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:41:55.638]    __FlashAddr=0x00000000
[04:41:55.638]    __FlashLen=0x00000000
[04:41:55.638]    __FlashArg=0x00000000
[04:41:55.638]    __FlashOp=0x00000000
[04:41:55.638]    __Result=0x00000000
[04:41:55.638]  </debugvars>
[04:41:55.638]  
[04:41:55.638]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:41:55.638]    <block atomic="false" info="">
[04:41:55.638]      __var SW_DP_ABORT       = 0x0;
[04:41:55.638]        // -> [SW_DP_ABORT <= 0x00000000]
[04:41:55.638]      __var DP_CTRL_STAT      = 0x4;
[04:41:55.638]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:41:55.638]      __var DP_SELECT         = 0x8;
[04:41:55.638]        // -> [DP_SELECT <= 0x00000008]
[04:41:55.638]      __var powered_down      = 0;
[04:41:55.638]        // -> [powered_down <= 0x00000000]
[04:41:55.638]      WriteDP(DP_SELECT, 0x00000000);
[04:41:55.642]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:41:55.642]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:41:55.646]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:41:55.646]        // -> [powered_down <= 0x00000001]
[04:41:55.646]    </block>
[04:41:55.646]    <control if="powered_down" while="" timeout="0" info="">
[04:41:55.646]      // if-block "powered_down"
[04:41:55.646]        // =>  TRUE
[04:41:55.646]      <block atomic="false" info="">
[04:41:55.646]        Message(0, "Debug/System power-up request sent");
[04:41:55.650]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:41:55.654]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:41:55.654]      </block>
[04:41:55.654]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:41:55.654]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:41:55.662]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:41:55.662]        // while-condition  =>  FALSE
[04:41:55.662]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:41:55.662]      </control>
[04:41:55.662]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:41:55.662]        // if-block "(__protocol & 0xFFFF) == 1"
[04:41:55.662]          // =>  FALSE
[04:41:55.662]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:41:55.662]      </control>
[04:41:55.662]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:41:55.662]        // if-block "(__protocol & 0xFFFF) == 2"
[04:41:55.662]          // =>  TRUE
[04:41:55.662]        <block atomic="false" info="">
[04:41:55.662]          Message(0, "executing SWD power up");
[04:41:55.664]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:41:55.666]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:41:55.666]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:41:55.666]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:41:55.666]        </block>
[04:41:55.666]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:41:55.666]      </control>
[04:41:55.666]      // end if-block "powered_down"
[04:41:55.666]    </control>
[04:41:55.666]    <block atomic="false" info="">
[04:41:55.666]      __var DEBUG_PORT_VAL    = 0;
[04:41:55.666]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:41:55.666]      __var ACCESS_POINT_VAL  = 0;
[04:41:55.666]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:41:55.666]      __ap = 1; 
[04:41:55.666]        // -> [__ap <= 0x00000001]
[04:41:55.666]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:41:55.670]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:41:55.674]      __ap = 4;
[04:41:55.674]        // -> [__ap <= 0x00000004]
[04:41:55.674]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:41:55.678]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:41:55.678]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:41:55.678]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:41:55.678]    </block>
[04:41:55.678]    <block atomic="false" info="">
[04:41:55.678]      __var nReset = 0x80;
[04:41:55.678]        // -> [nReset <= 0x00000080]
[04:41:55.678]      __var canReadPins = 0;
[04:41:55.678]        // -> [canReadPins <= 0x00000000]
[04:41:55.678]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:41:55.678]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:41:55.678]        // -> [canReadPins <= 0x00000001]
[04:41:55.678]    </block>
[04:41:55.682]    <control if="" while="1" timeout="200" info="">
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.682]      // while "1"  (timeout="200")
[04:41:55.682]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.686]      // while "1"  (timeout="200")
[04:41:55.686]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.690]      // while-condition  =>  TRUE
[04:41:55.690]      // while "1"  (timeout="200")
[04:41:55.694]      // while-condition  =>  TRUE
[04:41:55.694]      // while "1"  (timeout="200")
[04:41:55.694]      // while  =>  TIMEOUT
[04:41:55.694]      // end while "1"
[04:41:55.694]    </control>
[04:41:55.694]    <control if="canReadPins" while="" timeout="0" info="">
[04:41:55.694]      // if-block "canReadPins"
[04:41:55.694]        // =>  TRUE
[04:41:55.694]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:41:55.694]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:41:55.694]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:41:55.694]        // while-condition  =>  FALSE
[04:41:55.694]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:41:55.694]      </control>
[04:41:55.694]      // end if-block "canReadPins"
[04:41:55.694]    </control>
[04:41:55.694]    <control if="!canReadPins" while="" timeout="0" info="">
[04:41:55.694]      // if-block "!canReadPins"
[04:41:55.694]        // =>  FALSE
[04:41:55.694]      // skip if-block "!canReadPins"
[04:41:55.694]    </control>
[04:41:55.694]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:41:55.694]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:41:55.694]        // =>  TRUE
[04:41:55.694]      <block atomic="false" info="">
[04:41:55.694]        WriteAP(0x00, 0x190008);
[04:41:55.698]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:41:55.698]        WriteAP(0xF0, 0x01);
[04:41:55.706]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:41:55.706]      </block>
[04:41:55.706]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:41:55.706]    </control>
[04:41:55.706]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:41:55.706]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:41:55.706]        // =>  FALSE
[04:41:55.706]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:41:55.706]    </control>
[04:41:55.706]    <block atomic="false" info="">
[04:41:55.706]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:41:55.718]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:41:55.718]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:41:55.718]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:41:55.722]      __ap = 0; //lets make sure we reset the access point selection
[04:41:55.722]        // -> [__ap <= 0x00000000]
[04:41:55.722]    </block>
[04:41:55.722]  </sequence>
[04:41:55.722]  
[04:41:55.750]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:41:55.750]  
[04:41:55.750]  <debugvars>
[04:41:55.750]    // Pre-defined
[04:41:55.750]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:41:55.750]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:41:55.750]    __dp=0x00000000
[04:41:55.750]    __ap=0x00000000
[04:41:55.750]    __traceout=0x00000000      (Trace Disabled)
[04:41:55.750]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:41:55.750]    __FlashAddr=0x00000000
[04:41:55.750]    __FlashLen=0x00000000
[04:41:55.750]    __FlashArg=0x00000000
[04:41:55.750]    __FlashOp=0x00000000
[04:41:55.750]    __Result=0x00000000
[04:41:55.750]  </debugvars>
[04:41:55.750]  
[04:41:55.750]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:41:55.750]    <block atomic="false" info="">
[04:41:55.750]      __var deviceID = 0;
[04:41:55.750]        // -> [deviceID <= 0x00000000]
[04:41:55.750]      __var version = 0;
[04:41:55.750]        // -> [version <= 0x00000000]
[04:41:55.754]      __var partNum = 0;
[04:41:55.754]        // -> [partNum <= 0x00000000]
[04:41:55.754]      __var manuf = 0;
[04:41:55.754]        // -> [manuf <= 0x00000000]
[04:41:55.754]      __var isMSPM0G1X0X_G3X0X = 0;
[04:41:55.754]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:41:55.754]      __var isProduction = 0;
[04:41:55.754]        // -> [isProduction <= 0x00000000]
[04:41:55.754]      __var continueId = 0;
[04:41:55.754]        // -> [continueId <= 0x00000000]
[04:41:55.754]      deviceID =   Read32(0x41C40004);
[04:41:55.758]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:41:55.758]        // -> [deviceID <= 0x2BB8802F]
[04:41:55.758]      version = deviceID >> 28;
[04:41:55.758]        // -> [version <= 0x00000002]
[04:41:55.758]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:41:55.758]        // -> [partNum <= 0x0000BB88]
[04:41:55.758]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:41:55.758]        // -> [manuf <= 0x00000017]
[04:41:55.758]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:41:55.758]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:41:55.758]      isProduction = (version > 0);
[04:41:55.758]        // -> [isProduction <= 0x00000001]
[04:41:55.762]    </block>
[04:41:55.762]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:41:55.762]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:41:55.762]        // =>  FALSE
[04:41:55.762]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:41:55.762]    </control>
[04:41:55.762]    <control if="continueId == 4" while="" timeout="0" info="">
[04:41:55.762]      // if-block "continueId == 4"
[04:41:55.762]        // =>  FALSE
[04:41:55.762]      // skip if-block "continueId == 4"
[04:41:55.762]    </control>
[04:41:55.762]    <control if="!isProduction" while="" timeout="0" info="">
[04:41:55.762]      // if-block "!isProduction"
[04:41:55.762]        // =>  FALSE
[04:41:55.762]      // skip if-block "!isProduction"
[04:41:55.762]    </control>
[04:41:55.762]  </sequence>
[04:41:55.762]  
[04:54:24.537]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:54:24.537]  
[04:54:24.537]  <debugvars>
[04:54:24.537]    // Pre-defined
[04:54:24.537]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:54:24.537]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:54:24.539]    __dp=0x00000000
[04:54:24.539]    __ap=0x00000000
[04:54:24.539]    __traceout=0x00000000      (Trace Disabled)
[04:54:24.539]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:54:24.539]    __FlashAddr=0x00000000
[04:54:24.539]    __FlashLen=0x00000000
[04:54:24.539]    __FlashArg=0x00000000
[04:54:24.539]    __FlashOp=0x00000000
[04:54:24.539]    __Result=0x00000000
[04:54:24.539]  </debugvars>
[04:54:24.539]  
[04:54:24.539]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:54:24.539]    <block atomic="false" info="">
[04:54:24.539]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:54:24.539]        // -> [isSWJ <= 0x00000001]
[04:54:24.539]      __var hasDormant = __protocol & 0x00020000;
[04:54:24.539]        // -> [hasDormant <= 0x00000000]
[04:54:24.539]      __var protType   = __protocol & 0x0000FFFF;
[04:54:24.539]        // -> [protType <= 0x00000002]
[04:54:24.539]    </block>
[04:54:24.539]    <control if="protType == 1" while="" timeout="0" info="">
[04:54:24.539]      // if-block "protType == 1"
[04:54:24.539]        // =>  FALSE
[04:54:24.539]      // skip if-block "protType == 1"
[04:54:24.539]    </control>
[04:54:24.539]    <control if="protType == 2" while="" timeout="0" info="">
[04:54:24.539]      // if-block "protType == 2"
[04:54:24.539]        // =>  TRUE
[04:54:24.539]      <control if="isSWJ" while="" timeout="0" info="">
[04:54:24.539]        // if-block "isSWJ"
[04:54:24.539]          // =>  TRUE
[04:54:24.539]        <control if="hasDormant" while="" timeout="0" info="">
[04:54:24.539]          // if-block "hasDormant"
[04:54:24.539]            // =>  FALSE
[04:54:24.539]          // skip if-block "hasDormant"
[04:54:24.539]        </control>
[04:54:24.539]        <control if="!hasDormant" while="" timeout="0" info="">
[04:54:24.539]          // if-block "!hasDormant"
[04:54:24.539]            // =>  TRUE
[04:54:24.539]          <block atomic="false" info="">
[04:54:24.539]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:54:24.539]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:54:24.539]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:54:24.547]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:54:24.547]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:54:24.547]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:54:24.547]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:54:24.547]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:54:24.547]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:54:24.547]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:54:24.547]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:54:24.547]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:54:24.547]          </block>
[04:54:24.547]          // end if-block "!hasDormant"
[04:54:24.547]        </control>
[04:54:24.547]        // end if-block "isSWJ"
[04:54:24.547]      </control>
[04:54:24.547]      <control if="!isSWJ" while="" timeout="0" info="">
[04:54:24.547]        // if-block "!isSWJ"
[04:54:24.547]          // =>  FALSE
[04:54:24.547]        // skip if-block "!isSWJ"
[04:54:24.547]      </control>
[04:54:24.547]      <block atomic="false" info="">
[04:54:24.547]        ReadDP(0x0);
[04:54:24.547]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:54:24.547]      </block>
[04:54:24.547]      // end if-block "protType == 2"
[04:54:24.547]    </control>
[04:54:24.547]  </sequence>
[04:54:24.547]  
[04:54:24.558]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:54:24.558]  
[04:54:24.558]  <debugvars>
[04:54:24.558]    // Pre-defined
[04:54:24.558]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:54:24.558]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:54:24.558]    __dp=0x00000000
[04:54:24.558]    __ap=0x00000000
[04:54:24.558]    __traceout=0x00000000      (Trace Disabled)
[04:54:24.558]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:54:24.558]    __FlashAddr=0x00000000
[04:54:24.558]    __FlashLen=0x00000000
[04:54:24.558]    __FlashArg=0x00000000
[04:54:24.558]    __FlashOp=0x00000000
[04:54:24.558]    __Result=0x00000000
[04:54:24.558]  </debugvars>
[04:54:24.558]  
[04:54:24.558]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:54:24.558]    <block atomic="false" info="">
[04:54:24.558]      __var SW_DP_ABORT       = 0x0;
[04:54:24.558]        // -> [SW_DP_ABORT <= 0x00000000]
[04:54:24.558]      __var DP_CTRL_STAT      = 0x4;
[04:54:24.558]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:54:24.558]      __var DP_SELECT         = 0x8;
[04:54:24.558]        // -> [DP_SELECT <= 0x00000008]
[04:54:24.558]      __var powered_down      = 0;
[04:54:24.558]        // -> [powered_down <= 0x00000000]
[04:54:24.558]      WriteDP(DP_SELECT, 0x00000000);
[04:54:24.558]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:54:24.558]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:54:24.567]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:54:24.567]        // -> [powered_down <= 0x00000001]
[04:54:24.567]    </block>
[04:54:24.567]    <control if="powered_down" while="" timeout="0" info="">
[04:54:24.567]      // if-block "powered_down"
[04:54:24.567]        // =>  TRUE
[04:54:24.567]      <block atomic="false" info="">
[04:54:24.567]        Message(0, "Debug/System power-up request sent");
[04:54:24.567]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:54:24.567]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:54:24.567]      </block>
[04:54:24.567]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:54:24.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:54:24.567]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:54:24.567]        // while-condition  =>  FALSE
[04:54:24.567]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:54:24.567]      </control>
[04:54:24.567]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:54:24.567]        // if-block "(__protocol & 0xFFFF) == 1"
[04:54:24.567]          // =>  FALSE
[04:54:24.567]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:54:24.567]      </control>
[04:54:24.567]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:54:24.567]        // if-block "(__protocol & 0xFFFF) == 2"
[04:54:24.567]          // =>  TRUE
[04:54:24.567]        <block atomic="false" info="">
[04:54:24.567]          Message(0, "executing SWD power up");
[04:54:24.578]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:54:24.578]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:54:24.578]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:54:24.578]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:54:24.578]        </block>
[04:54:24.578]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:54:24.578]      </control>
[04:54:24.578]      // end if-block "powered_down"
[04:54:24.578]    </control>
[04:54:24.578]    <block atomic="false" info="">
[04:54:24.578]      __var DEBUG_PORT_VAL    = 0;
[04:54:24.578]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:54:24.578]      __var ACCESS_POINT_VAL  = 0;
[04:54:24.578]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:54:24.578]      __ap = 1; 
[04:54:24.578]        // -> [__ap <= 0x00000001]
[04:54:24.578]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:54:24.578]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:54:24.578]      __ap = 4;
[04:54:24.578]        // -> [__ap <= 0x00000004]
[04:54:24.578]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:54:24.588]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:54:24.588]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:54:24.588]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:54:24.588]    </block>
[04:54:24.588]    <block atomic="false" info="">
[04:54:24.588]      __var nReset = 0x80;
[04:54:24.588]        // -> [nReset <= 0x00000080]
[04:54:24.588]      __var canReadPins = 0;
[04:54:24.588]        // -> [canReadPins <= 0x00000000]
[04:54:24.588]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:54:24.588]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:54:24.588]        // -> [canReadPins <= 0x00000001]
[04:54:24.588]    </block>
[04:54:24.588]    <control if="" while="1" timeout="200" info="">
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.588]      // while-condition  =>  TRUE
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.588]      // while-condition  =>  TRUE
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.588]      // while-condition  =>  TRUE
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.588]      // while-condition  =>  TRUE
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.588]      // while-condition  =>  TRUE
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.588]      // while-condition  =>  TRUE
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.588]      // while-condition  =>  TRUE
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.588]      // while-condition  =>  TRUE
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.588]      // while-condition  =>  TRUE
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.588]      // while-condition  =>  TRUE
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.588]      // while-condition  =>  TRUE
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.588]      // while-condition  =>  TRUE
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.588]      // while-condition  =>  TRUE
[04:54:24.588]      // while "1"  (timeout="200")
[04:54:24.597]      // while-condition  =>  TRUE
[04:54:24.597]      // while "1"  (timeout="200")
[04:54:24.597]      // while  =>  TIMEOUT
[04:54:24.597]      // end while "1"
[04:54:24.597]    </control>
[04:54:24.597]    <control if="canReadPins" while="" timeout="0" info="">
[04:54:24.597]      // if-block "canReadPins"
[04:54:24.597]        // =>  TRUE
[04:54:24.597]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:54:24.597]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:54:24.597]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:54:24.597]        // while-condition  =>  FALSE
[04:54:24.597]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:54:24.597]      </control>
[04:54:24.597]      // end if-block "canReadPins"
[04:54:24.597]    </control>
[04:54:24.597]    <control if="!canReadPins" while="" timeout="0" info="">
[04:54:24.597]      // if-block "!canReadPins"
[04:54:24.597]        // =>  FALSE
[04:54:24.597]      // skip if-block "!canReadPins"
[04:54:24.597]    </control>
[04:54:24.597]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:54:24.597]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:54:24.597]        // =>  TRUE
[04:54:24.597]      <block atomic="false" info="">
[04:54:24.597]        WriteAP(0x00, 0x190008);
[04:54:24.597]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:54:24.597]        WriteAP(0xF0, 0x01);
[04:54:24.597]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:54:24.597]      </block>
[04:54:24.597]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:54:24.597]    </control>
[04:54:24.597]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:54:24.608]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:54:24.608]        // =>  FALSE
[04:54:24.608]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:54:24.608]    </control>
[04:54:24.608]    <block atomic="false" info="">
[04:54:24.608]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:54:24.608]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:54:24.608]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:54:24.608]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:54:24.617]      __ap = 0; //lets make sure we reset the access point selection
[04:54:24.617]        // -> [__ap <= 0x00000000]
[04:54:24.617]    </block>
[04:54:24.617]  </sequence>
[04:54:24.617]  
[04:54:24.640]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:54:24.640]  
[04:54:24.640]  <debugvars>
[04:54:24.640]    // Pre-defined
[04:54:24.640]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:54:24.640]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:54:24.640]    __dp=0x00000000
[04:54:24.640]    __ap=0x00000000
[04:54:24.640]    __traceout=0x00000000      (Trace Disabled)
[04:54:24.640]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:54:24.640]    __FlashAddr=0x00000000
[04:54:24.640]    __FlashLen=0x00000000
[04:54:24.640]    __FlashArg=0x00000000
[04:54:24.640]    __FlashOp=0x00000000
[04:54:24.640]    __Result=0x00000000
[04:54:24.640]  </debugvars>
[04:54:24.640]  
[04:54:24.640]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:54:24.640]    <block atomic="false" info="">
[04:54:24.640]      __var deviceID = 0;
[04:54:24.640]        // -> [deviceID <= 0x00000000]
[04:54:24.640]      __var version = 0;
[04:54:24.640]        // -> [version <= 0x00000000]
[04:54:24.640]      __var partNum = 0;
[04:54:24.640]        // -> [partNum <= 0x00000000]
[04:54:24.640]      __var manuf = 0;
[04:54:24.640]        // -> [manuf <= 0x00000000]
[04:54:24.640]      __var isMSPM0G1X0X_G3X0X = 0;
[04:54:24.640]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:54:24.640]      __var isProduction = 0;
[04:54:24.640]        // -> [isProduction <= 0x00000000]
[04:54:24.640]      __var continueId = 0;
[04:54:24.640]        // -> [continueId <= 0x00000000]
[04:54:24.640]      deviceID =   Read32(0x41C40004);
[04:54:24.650]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:54:24.650]        // -> [deviceID <= 0x2BB8802F]
[04:54:24.650]      version = deviceID >> 28;
[04:54:24.650]        // -> [version <= 0x00000002]
[04:54:24.650]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:54:24.650]        // -> [partNum <= 0x0000BB88]
[04:54:24.650]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:54:24.650]        // -> [manuf <= 0x00000017]
[04:54:24.650]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:54:24.650]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:54:24.650]      isProduction = (version > 0);
[04:54:24.650]        // -> [isProduction <= 0x00000001]
[04:54:24.650]    </block>
[04:54:24.650]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:54:24.650]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:54:24.650]        // =>  FALSE
[04:54:24.650]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:54:24.650]    </control>
[04:54:24.650]    <control if="continueId == 4" while="" timeout="0" info="">
[04:54:24.650]      // if-block "continueId == 4"
[04:54:24.650]        // =>  FALSE
[04:54:24.650]      // skip if-block "continueId == 4"
[04:54:24.650]    </control>
[04:54:24.650]    <control if="!isProduction" while="" timeout="0" info="">
[04:54:24.650]      // if-block "!isProduction"
[04:54:24.650]        // =>  FALSE
[04:54:24.650]      // skip if-block "!isProduction"
[04:54:24.650]    </control>
[04:54:24.650]  </sequence>
[04:54:24.650]  
[04:54:30.201]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:54:30.201]  
[04:54:30.201]  <debugvars>
[04:54:30.201]    // Pre-defined
[04:54:30.201]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:54:30.201]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:54:30.201]    __dp=0x00000000
[04:54:30.201]    __ap=0x00000000
[04:54:30.201]    __traceout=0x00000000      (Trace Disabled)
[04:54:30.201]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:54:30.201]    __FlashAddr=0x00000000
[04:54:30.201]    __FlashLen=0x00000000
[04:54:30.201]    __FlashArg=0x00000000
[04:54:30.201]    __FlashOp=0x00000000
[04:54:30.201]    __Result=0x00000000
[04:54:30.201]  </debugvars>
[04:54:30.201]  
[04:54:30.201]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:54:30.201]    <block atomic="false" info="">
[04:54:30.201]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:54:30.201]        // -> [isSWJ <= 0x00000001]
[04:54:30.201]      __var hasDormant = __protocol & 0x00020000;
[04:54:30.201]        // -> [hasDormant <= 0x00000000]
[04:54:30.201]      __var protType   = __protocol & 0x0000FFFF;
[04:54:30.201]        // -> [protType <= 0x00000002]
[04:54:30.201]    </block>
[04:54:30.201]    <control if="protType == 1" while="" timeout="0" info="">
[04:54:30.201]      // if-block "protType == 1"
[04:54:30.201]        // =>  FALSE
[04:54:30.201]      // skip if-block "protType == 1"
[04:54:30.201]    </control>
[04:54:30.201]    <control if="protType == 2" while="" timeout="0" info="">
[04:54:30.201]      // if-block "protType == 2"
[04:54:30.201]        // =>  TRUE
[04:54:30.201]      <control if="isSWJ" while="" timeout="0" info="">
[04:54:30.201]        // if-block "isSWJ"
[04:54:30.201]          // =>  TRUE
[04:54:30.201]        <control if="hasDormant" while="" timeout="0" info="">
[04:54:30.201]          // if-block "hasDormant"
[04:54:30.201]            // =>  FALSE
[04:54:30.201]          // skip if-block "hasDormant"
[04:54:30.201]        </control>
[04:54:30.201]        <control if="!hasDormant" while="" timeout="0" info="">
[04:54:30.201]          // if-block "!hasDormant"
[04:54:30.201]            // =>  TRUE
[04:54:30.201]          <block atomic="false" info="">
[04:54:30.201]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:54:30.210]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:54:30.210]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:54:30.210]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:54:30.210]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:54:30.210]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:54:30.210]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:54:30.210]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:54:30.210]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:54:30.210]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:54:30.210]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:54:30.210]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:54:30.210]          </block>
[04:54:30.210]          // end if-block "!hasDormant"
[04:54:30.220]        </control>
[04:54:30.220]        // end if-block "isSWJ"
[04:54:30.220]      </control>
[04:54:30.220]      <control if="!isSWJ" while="" timeout="0" info="">
[04:54:30.220]        // if-block "!isSWJ"
[04:54:30.220]          // =>  FALSE
[04:54:30.220]        // skip if-block "!isSWJ"
[04:54:30.220]      </control>
[04:54:30.220]      <block atomic="false" info="">
[04:54:30.220]        ReadDP(0x0);
[04:54:30.220]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:54:30.220]      </block>
[04:54:30.220]      // end if-block "protType == 2"
[04:54:30.220]    </control>
[04:54:30.220]  </sequence>
[04:54:30.220]  
[04:54:30.220]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:54:30.220]  
[04:54:30.220]  <debugvars>
[04:54:30.220]    // Pre-defined
[04:54:30.220]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:54:30.220]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:54:30.220]    __dp=0x00000000
[04:54:30.220]    __ap=0x00000000
[04:54:30.220]    __traceout=0x00000000      (Trace Disabled)
[04:54:30.220]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:54:30.220]    __FlashAddr=0x00000000
[04:54:30.220]    __FlashLen=0x00000000
[04:54:30.220]    __FlashArg=0x00000000
[04:54:30.220]    __FlashOp=0x00000000
[04:54:30.220]    __Result=0x00000000
[04:54:30.220]  </debugvars>
[04:54:30.220]  
[04:54:30.220]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:54:30.220]    <block atomic="false" info="">
[04:54:30.220]      __var SW_DP_ABORT       = 0x0;
[04:54:30.220]        // -> [SW_DP_ABORT <= 0x00000000]
[04:54:30.220]      __var DP_CTRL_STAT      = 0x4;
[04:54:30.230]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:54:30.230]      __var DP_SELECT         = 0x8;
[04:54:30.230]        // -> [DP_SELECT <= 0x00000008]
[04:54:30.230]      __var powered_down      = 0;
[04:54:30.230]        // -> [powered_down <= 0x00000000]
[04:54:30.230]      WriteDP(DP_SELECT, 0x00000000);
[04:54:30.230]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:54:30.230]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:54:30.230]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:54:30.230]        // -> [powered_down <= 0x00000001]
[04:54:30.230]    </block>
[04:54:30.230]    <control if="powered_down" while="" timeout="0" info="">
[04:54:30.230]      // if-block "powered_down"
[04:54:30.230]        // =>  TRUE
[04:54:30.230]      <block atomic="false" info="">
[04:54:30.230]        Message(0, "Debug/System power-up request sent");
[04:54:30.230]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:54:30.230]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:54:30.230]      </block>
[04:54:30.230]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:54:30.230]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:54:30.230]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:54:30.230]        // while-condition  =>  FALSE
[04:54:30.240]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:54:30.240]      </control>
[04:54:30.240]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:54:30.240]        // if-block "(__protocol & 0xFFFF) == 1"
[04:54:30.240]          // =>  FALSE
[04:54:30.240]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:54:30.240]      </control>
[04:54:30.240]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:54:30.240]        // if-block "(__protocol & 0xFFFF) == 2"
[04:54:30.240]          // =>  TRUE
[04:54:30.240]        <block atomic="false" info="">
[04:54:30.240]          Message(0, "executing SWD power up");
[04:54:30.240]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:54:30.246]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:54:30.246]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:54:30.246]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:54:30.246]        </block>
[04:54:30.246]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:54:30.246]      </control>
[04:54:30.246]      // end if-block "powered_down"
[04:54:30.246]    </control>
[04:54:30.246]    <block atomic="false" info="">
[04:54:30.246]      __var DEBUG_PORT_VAL    = 0;
[04:54:30.246]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:54:30.246]      __var ACCESS_POINT_VAL  = 0;
[04:54:30.246]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:54:30.246]      __ap = 1; 
[04:54:30.246]        // -> [__ap <= 0x00000001]
[04:54:30.246]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:54:30.250]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:54:30.250]      __ap = 4;
[04:54:30.250]        // -> [__ap <= 0x00000004]
[04:54:30.250]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:54:30.250]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:54:30.250]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:54:30.250]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:54:30.250]    </block>
[04:54:30.250]    <block atomic="false" info="">
[04:54:30.250]      __var nReset = 0x80;
[04:54:30.250]        // -> [nReset <= 0x00000080]
[04:54:30.250]      __var canReadPins = 0;
[04:54:30.250]        // -> [canReadPins <= 0x00000000]
[04:54:30.250]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:54:30.260]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:54:30.260]        // -> [canReadPins <= 0x00000001]
[04:54:30.260]    </block>
[04:54:30.261]    <control if="" while="1" timeout="200" info="">
[04:54:30.261]      // while "1"  (timeout="200")
[04:54:30.261]      // while-condition  =>  TRUE
[04:54:30.261]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.262]      // while "1"  (timeout="200")
[04:54:30.262]      // while-condition  =>  TRUE
[04:54:30.270]      // while "1"  (timeout="200")
[04:54:30.270]      // while  =>  TIMEOUT
[04:54:30.270]      // end while "1"
[04:54:30.270]    </control>
[04:54:30.270]    <control if="canReadPins" while="" timeout="0" info="">
[04:54:30.270]      // if-block "canReadPins"
[04:54:30.270]        // =>  TRUE
[04:54:30.270]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:54:30.270]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:54:30.270]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:54:30.270]        // while-condition  =>  FALSE
[04:54:30.270]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:54:30.270]      </control>
[04:54:30.270]      // end if-block "canReadPins"
[04:54:30.270]    </control>
[04:54:30.270]    <control if="!canReadPins" while="" timeout="0" info="">
[04:54:30.270]      // if-block "!canReadPins"
[04:54:30.270]        // =>  FALSE
[04:54:30.270]      // skip if-block "!canReadPins"
[04:54:30.270]    </control>
[04:54:30.270]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:54:30.270]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:54:30.270]        // =>  TRUE
[04:54:30.270]      <block atomic="false" info="">
[04:54:30.270]        WriteAP(0x00, 0x190008);
[04:54:30.270]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:54:30.270]        WriteAP(0xF0, 0x01);
[04:54:30.280]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:54:30.280]      </block>
[04:54:30.280]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:54:30.280]    </control>
[04:54:30.280]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:54:30.280]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:54:30.280]        // =>  FALSE
[04:54:30.280]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:54:30.280]    </control>
[04:54:30.280]    <block atomic="false" info="">
[04:54:30.280]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:54:30.284]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:54:30.284]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:54:30.284]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:54:30.285]      __ap = 0; //lets make sure we reset the access point selection
[04:54:30.286]        // -> [__ap <= 0x00000000]
[04:54:30.286]    </block>
[04:54:30.286]  </sequence>
[04:54:30.286]  
[04:54:30.308]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:54:30.308]  
[04:54:30.309]  <debugvars>
[04:54:30.309]    // Pre-defined
[04:54:30.309]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:54:30.309]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:54:30.309]    __dp=0x00000000
[04:54:30.309]    __ap=0x00000000
[04:54:30.309]    __traceout=0x00000000      (Trace Disabled)
[04:54:30.309]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:54:30.309]    __FlashAddr=0x00000000
[04:54:30.310]    __FlashLen=0x00000000
[04:54:30.310]    __FlashArg=0x00000000
[04:54:30.310]    __FlashOp=0x00000000
[04:54:30.310]    __Result=0x00000000
[04:54:30.310]  </debugvars>
[04:54:30.311]  
[04:54:30.311]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:54:30.311]    <block atomic="false" info="">
[04:54:30.311]      __var deviceID = 0;
[04:54:30.311]        // -> [deviceID <= 0x00000000]
[04:54:30.311]      __var version = 0;
[04:54:30.311]        // -> [version <= 0x00000000]
[04:54:30.311]      __var partNum = 0;
[04:54:30.311]        // -> [partNum <= 0x00000000]
[04:54:30.312]      __var manuf = 0;
[04:54:30.312]        // -> [manuf <= 0x00000000]
[04:54:30.312]      __var isMSPM0G1X0X_G3X0X = 0;
[04:54:30.312]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:54:30.312]      __var isProduction = 0;
[04:54:30.312]        // -> [isProduction <= 0x00000000]
[04:54:30.312]      __var continueId = 0;
[04:54:30.312]        // -> [continueId <= 0x00000000]
[04:54:30.313]      deviceID =   Read32(0x41C40004);
[04:54:30.315]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:54:30.315]        // -> [deviceID <= 0x2BB8802F]
[04:54:30.315]      version = deviceID >> 28;
[04:54:30.315]        // -> [version <= 0x00000002]
[04:54:30.315]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:54:30.315]        // -> [partNum <= 0x0000BB88]
[04:54:30.315]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:54:30.315]        // -> [manuf <= 0x00000017]
[04:54:30.315]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:54:30.315]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:54:30.315]      isProduction = (version > 0);
[04:54:30.315]        // -> [isProduction <= 0x00000001]
[04:54:30.315]    </block>
[04:54:30.315]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:54:30.315]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:54:30.315]        // =>  FALSE
[04:54:30.315]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:54:30.315]    </control>
[04:54:30.315]    <control if="continueId == 4" while="" timeout="0" info="">
[04:54:30.320]      // if-block "continueId == 4"
[04:54:30.320]        // =>  FALSE
[04:54:30.320]      // skip if-block "continueId == 4"
[04:54:30.320]    </control>
[04:54:30.320]    <control if="!isProduction" while="" timeout="0" info="">
[04:54:30.320]      // if-block "!isProduction"
[04:54:30.320]        // =>  FALSE
[04:54:30.320]      // skip if-block "!isProduction"
[04:54:30.320]    </control>
[04:54:30.320]  </sequence>
[04:54:30.320]  
[04:58:09.176]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:58:09.176]  
[04:58:09.186]  <debugvars>
[04:58:09.186]    // Pre-defined
[04:58:09.186]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:58:09.186]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:58:09.186]    __dp=0x00000000
[04:58:09.186]    __ap=0x00000000
[04:58:09.186]    __traceout=0x00000000      (Trace Disabled)
[04:58:09.186]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:58:09.186]    __FlashAddr=0x00000000
[04:58:09.186]    __FlashLen=0x00000000
[04:58:09.186]    __FlashArg=0x00000000
[04:58:09.186]    __FlashOp=0x00000000
[04:58:09.186]    __Result=0x00000000
[04:58:09.186]  </debugvars>
[04:58:09.186]  
[04:58:09.186]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:58:09.186]    <block atomic="false" info="">
[04:58:09.186]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:58:09.186]        // -> [isSWJ <= 0x00000001]
[04:58:09.186]      __var hasDormant = __protocol & 0x00020000;
[04:58:09.186]        // -> [hasDormant <= 0x00000000]
[04:58:09.186]      __var protType   = __protocol & 0x0000FFFF;
[04:58:09.186]        // -> [protType <= 0x00000002]
[04:58:09.186]    </block>
[04:58:09.186]    <control if="protType == 1" while="" timeout="0" info="">
[04:58:09.186]      // if-block "protType == 1"
[04:58:09.186]        // =>  FALSE
[04:58:09.186]      // skip if-block "protType == 1"
[04:58:09.186]    </control>
[04:58:09.186]    <control if="protType == 2" while="" timeout="0" info="">
[04:58:09.186]      // if-block "protType == 2"
[04:58:09.186]        // =>  TRUE
[04:58:09.186]      <control if="isSWJ" while="" timeout="0" info="">
[04:58:09.186]        // if-block "isSWJ"
[04:58:09.186]          // =>  TRUE
[04:58:09.186]        <control if="hasDormant" while="" timeout="0" info="">
[04:58:09.186]          // if-block "hasDormant"
[04:58:09.186]            // =>  FALSE
[04:58:09.186]          // skip if-block "hasDormant"
[04:58:09.186]        </control>
[04:58:09.186]        <control if="!hasDormant" while="" timeout="0" info="">
[04:58:09.190]          // if-block "!hasDormant"
[04:58:09.190]            // =>  TRUE
[04:58:09.190]          <block atomic="false" info="">
[04:58:09.190]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:58:09.190]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:58:09.190]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:58:09.190]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:58:09.190]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:58:09.190]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:58:09.190]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:58:09.196]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:58:09.196]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:58:09.196]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:58:09.196]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:58:09.200]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:58:09.200]          </block>
[04:58:09.200]          // end if-block "!hasDormant"
[04:58:09.200]        </control>
[04:58:09.200]        // end if-block "isSWJ"
[04:58:09.200]      </control>
[04:58:09.200]      <control if="!isSWJ" while="" timeout="0" info="">
[04:58:09.200]        // if-block "!isSWJ"
[04:58:09.200]          // =>  FALSE
[04:58:09.200]        // skip if-block "!isSWJ"
[04:58:09.200]      </control>
[04:58:09.200]      <block atomic="false" info="">
[04:58:09.200]        ReadDP(0x0);
[04:58:09.200]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:58:09.200]      </block>
[04:58:09.200]      // end if-block "protType == 2"
[04:58:09.200]    </control>
[04:58:09.200]  </sequence>
[04:58:09.200]  
[04:58:09.206]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:58:09.206]  
[04:58:09.206]  <debugvars>
[04:58:09.206]    // Pre-defined
[04:58:09.206]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:58:09.206]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:58:09.206]    __dp=0x00000000
[04:58:09.206]    __ap=0x00000000
[04:58:09.206]    __traceout=0x00000000      (Trace Disabled)
[04:58:09.206]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:58:09.206]    __FlashAddr=0x00000000
[04:58:09.206]    __FlashLen=0x00000000
[04:58:09.206]    __FlashArg=0x00000000
[04:58:09.206]    __FlashOp=0x00000000
[04:58:09.206]    __Result=0x00000000
[04:58:09.206]  </debugvars>
[04:58:09.206]  
[04:58:09.206]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:58:09.208]    <block atomic="false" info="">
[04:58:09.208]      __var SW_DP_ABORT       = 0x0;
[04:58:09.208]        // -> [SW_DP_ABORT <= 0x00000000]
[04:58:09.208]      __var DP_CTRL_STAT      = 0x4;
[04:58:09.208]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:58:09.208]      __var DP_SELECT         = 0x8;
[04:58:09.208]        // -> [DP_SELECT <= 0x00000008]
[04:58:09.208]      __var powered_down      = 0;
[04:58:09.208]        // -> [powered_down <= 0x00000000]
[04:58:09.208]      WriteDP(DP_SELECT, 0x00000000);
[04:58:09.210]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:58:09.210]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:58:09.210]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:58:09.210]        // -> [powered_down <= 0x00000001]
[04:58:09.210]    </block>
[04:58:09.210]    <control if="powered_down" while="" timeout="0" info="">
[04:58:09.210]      // if-block "powered_down"
[04:58:09.210]        // =>  TRUE
[04:58:09.210]      <block atomic="false" info="">
[04:58:09.210]        Message(0, "Debug/System power-up request sent");
[04:58:09.214]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:58:09.216]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:58:09.216]      </block>
[04:58:09.216]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:58:09.216]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:58:09.216]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:58:09.216]        // while-condition  =>  FALSE
[04:58:09.216]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:58:09.216]      </control>
[04:58:09.216]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:58:09.216]        // if-block "(__protocol & 0xFFFF) == 1"
[04:58:09.216]          // =>  FALSE
[04:58:09.218]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:58:09.218]      </control>
[04:58:09.218]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:58:09.218]        // if-block "(__protocol & 0xFFFF) == 2"
[04:58:09.218]          // =>  TRUE
[04:58:09.218]        <block atomic="false" info="">
[04:58:09.218]          Message(0, "executing SWD power up");
[04:58:09.218]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:58:09.221]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:58:09.221]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:58:09.221]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:58:09.221]        </block>
[04:58:09.221]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:58:09.221]      </control>
[04:58:09.221]      // end if-block "powered_down"
[04:58:09.221]    </control>
[04:58:09.221]    <block atomic="false" info="">
[04:58:09.221]      __var DEBUG_PORT_VAL    = 0;
[04:58:09.221]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:58:09.221]      __var ACCESS_POINT_VAL  = 0;
[04:58:09.221]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:58:09.221]      __ap = 1; 
[04:58:09.221]        // -> [__ap <= 0x00000001]
[04:58:09.221]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:58:09.226]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:58:09.226]      __ap = 4;
[04:58:09.226]        // -> [__ap <= 0x00000004]
[04:58:09.226]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:58:09.231]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:58:09.231]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:58:09.231]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:58:09.231]    </block>
[04:58:09.231]    <block atomic="false" info="">
[04:58:09.231]      __var nReset = 0x80;
[04:58:09.231]        // -> [nReset <= 0x00000080]
[04:58:09.231]      __var canReadPins = 0;
[04:58:09.231]        // -> [canReadPins <= 0x00000000]
[04:58:09.231]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:58:09.236]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:58:09.236]        // -> [canReadPins <= 0x00000001]
[04:58:09.236]    </block>
[04:58:09.236]    <control if="" while="1" timeout="200" info="">
[04:58:09.236]      // while "1"  (timeout="200")
[04:58:09.236]      // while-condition  =>  TRUE
[04:58:09.236]      // while "1"  (timeout="200")
[04:58:09.236]      // while-condition  =>  TRUE
[04:58:09.236]      // while "1"  (timeout="200")
[04:58:09.236]      // while-condition  =>  TRUE
[04:58:09.236]      // while "1"  (timeout="200")
[04:58:09.236]      // while-condition  =>  TRUE
[04:58:09.236]      // while "1"  (timeout="200")
[04:58:09.236]      // while-condition  =>  TRUE
[04:58:09.236]      // while "1"  (timeout="200")
[04:58:09.239]      // while-condition  =>  TRUE
[04:58:09.239]      // while "1"  (timeout="200")
[04:58:09.239]      // while  =>  TIMEOUT
[04:58:09.239]      // end while "1"
[04:58:09.239]    </control>
[04:58:09.239]    <control if="canReadPins" while="" timeout="0" info="">
[04:58:09.239]      // if-block "canReadPins"
[04:58:09.239]        // =>  TRUE
[04:58:09.239]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:58:09.239]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:58:09.242]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:58:09.242]        // while-condition  =>  FALSE
[04:58:09.242]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:58:09.242]      </control>
[04:58:09.242]      // end if-block "canReadPins"
[04:58:09.242]    </control>
[04:58:09.242]    <control if="!canReadPins" while="" timeout="0" info="">
[04:58:09.242]      // if-block "!canReadPins"
[04:58:09.242]        // =>  FALSE
[04:58:09.242]      // skip if-block "!canReadPins"
[04:58:09.242]    </control>
[04:58:09.242]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:58:09.242]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:58:09.242]        // =>  TRUE
[04:58:09.242]      <block atomic="false" info="">
[04:58:09.242]        WriteAP(0x00, 0x190008);
[04:58:09.245]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:58:09.245]        WriteAP(0xF0, 0x01);
[04:58:09.247]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:58:09.249]      </block>
[04:58:09.249]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:58:09.249]    </control>
[04:58:09.249]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:58:09.249]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:58:09.249]        // =>  FALSE
[04:58:09.249]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:58:09.249]    </control>
[04:58:09.249]    <block atomic="false" info="">
[04:58:09.249]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:58:09.254]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:58:09.254]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:58:09.254]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:58:09.256]      __ap = 0; //lets make sure we reset the access point selection
[04:58:09.256]        // -> [__ap <= 0x00000000]
[04:58:09.256]    </block>
[04:58:09.256]  </sequence>
[04:58:09.256]  
[04:58:09.276]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:58:09.276]  
[04:58:09.276]  <debugvars>
[04:58:09.276]    // Pre-defined
[04:58:09.276]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:58:09.276]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[04:58:09.276]    __dp=0x00000000
[04:58:09.276]    __ap=0x00000000
[04:58:09.276]    __traceout=0x00000000      (Trace Disabled)
[04:58:09.276]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:58:09.276]    __FlashAddr=0x00000000
[04:58:09.276]    __FlashLen=0x00000000
[04:58:09.276]    __FlashArg=0x00000000
[04:58:09.276]    __FlashOp=0x00000000
[04:58:09.276]    __Result=0x00000000
[04:58:09.276]  </debugvars>
[04:58:09.276]  
[04:58:09.276]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:58:09.276]    <block atomic="false" info="">
[04:58:09.276]      __var deviceID = 0;
[04:58:09.276]        // -> [deviceID <= 0x00000000]
[04:58:09.276]      __var version = 0;
[04:58:09.276]        // -> [version <= 0x00000000]
[04:58:09.276]      __var partNum = 0;
[04:58:09.276]        // -> [partNum <= 0x00000000]
[04:58:09.276]      __var manuf = 0;
[04:58:09.276]        // -> [manuf <= 0x00000000]
[04:58:09.276]      __var isMSPM0G1X0X_G3X0X = 0;
[04:58:09.276]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:58:09.276]      __var isProduction = 0;
[04:58:09.276]        // -> [isProduction <= 0x00000000]
[04:58:09.276]      __var continueId = 0;
[04:58:09.276]        // -> [continueId <= 0x00000000]
[04:58:09.276]      deviceID =   Read32(0x41C40004);
[04:58:09.285]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:58:09.285]        // -> [deviceID <= 0x2BB8802F]
[04:58:09.286]      version = deviceID >> 28;
[04:58:09.286]        // -> [version <= 0x00000002]
[04:58:09.286]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:58:09.286]        // -> [partNum <= 0x0000BB88]
[04:58:09.286]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:58:09.286]        // -> [manuf <= 0x00000017]
[04:58:09.286]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:58:09.286]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:58:09.286]      isProduction = (version > 0);
[04:58:09.286]        // -> [isProduction <= 0x00000001]
[04:58:09.287]    </block>
[04:58:09.287]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:58:09.287]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:58:09.287]        // =>  FALSE
[04:58:09.287]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:58:09.287]    </control>
[04:58:09.287]    <control if="continueId == 4" while="" timeout="0" info="">
[04:58:09.287]      // if-block "continueId == 4"
[04:58:09.287]        // =>  FALSE
[04:58:09.287]      // skip if-block "continueId == 4"
[04:58:09.287]    </control>
[04:58:09.287]    <control if="!isProduction" while="" timeout="0" info="">
[04:58:09.287]      // if-block "!isProduction"
[04:58:09.287]        // =>  FALSE
[04:58:09.287]      // skip if-block "!isProduction"
[04:58:09.287]    </control>
[04:58:09.287]  </sequence>
[04:58:09.287]  
[04:58:15.888]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[04:58:15.888]  
[04:58:15.888]  <debugvars>
[04:58:15.888]    // Pre-defined
[04:58:15.888]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:58:15.888]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:58:15.888]    __dp=0x00000000
[04:58:15.888]    __ap=0x00000000
[04:58:15.888]    __traceout=0x00000000      (Trace Disabled)
[04:58:15.888]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:58:15.888]    __FlashAddr=0x00000000
[04:58:15.888]    __FlashLen=0x00000000
[04:58:15.888]    __FlashArg=0x00000000
[04:58:15.888]    __FlashOp=0x00000000
[04:58:15.888]    __Result=0x00000000
[04:58:15.888]  </debugvars>
[04:58:15.888]  
[04:58:15.888]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[04:58:15.888]    <block atomic="false" info="">
[04:58:15.888]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[04:58:15.888]        // -> [isSWJ <= 0x00000001]
[04:58:15.888]      __var hasDormant = __protocol & 0x00020000;
[04:58:15.888]        // -> [hasDormant <= 0x00000000]
[04:58:15.888]      __var protType   = __protocol & 0x0000FFFF;
[04:58:15.888]        // -> [protType <= 0x00000002]
[04:58:15.888]    </block>
[04:58:15.888]    <control if="protType == 1" while="" timeout="0" info="">
[04:58:15.888]      // if-block "protType == 1"
[04:58:15.888]        // =>  FALSE
[04:58:15.888]      // skip if-block "protType == 1"
[04:58:15.888]    </control>
[04:58:15.888]    <control if="protType == 2" while="" timeout="0" info="">
[04:58:15.888]      // if-block "protType == 2"
[04:58:15.888]        // =>  TRUE
[04:58:15.888]      <control if="isSWJ" while="" timeout="0" info="">
[04:58:15.888]        // if-block "isSWJ"
[04:58:15.888]          // =>  TRUE
[04:58:15.888]        <control if="hasDormant" while="" timeout="0" info="">
[04:58:15.898]          // if-block "hasDormant"
[04:58:15.898]            // =>  FALSE
[04:58:15.898]          // skip if-block "hasDormant"
[04:58:15.898]        </control>
[04:58:15.898]        <control if="!hasDormant" while="" timeout="0" info="">
[04:58:15.898]          // if-block "!hasDormant"
[04:58:15.898]            // =>  TRUE
[04:58:15.898]          <block atomic="false" info="">
[04:58:15.898]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[04:58:15.899]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:58:15.899]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[04:58:15.902]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[04:58:15.902]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[04:58:15.907]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:58:15.907]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[04:58:15.909]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[04:58:15.909]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[04:58:15.909]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[04:58:15.910]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[04:58:15.910]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[04:58:15.910]          </block>
[04:58:15.910]          // end if-block "!hasDormant"
[04:58:15.910]        </control>
[04:58:15.910]        // end if-block "isSWJ"
[04:58:15.910]      </control>
[04:58:15.910]      <control if="!isSWJ" while="" timeout="0" info="">
[04:58:15.910]        // if-block "!isSWJ"
[04:58:15.910]          // =>  FALSE
[04:58:15.910]        // skip if-block "!isSWJ"
[04:58:15.910]      </control>
[04:58:15.910]      <block atomic="false" info="">
[04:58:15.910]        ReadDP(0x0);
[04:58:15.910]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[04:58:15.915]      </block>
[04:58:15.915]      // end if-block "protType == 2"
[04:58:15.915]    </control>
[04:58:15.915]  </sequence>
[04:58:15.915]  
[04:58:15.918]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[04:58:15.918]  
[04:58:15.918]  <debugvars>
[04:58:15.918]    // Pre-defined
[04:58:15.918]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:58:15.918]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:58:15.918]    __dp=0x00000000
[04:58:15.918]    __ap=0x00000000
[04:58:15.918]    __traceout=0x00000000      (Trace Disabled)
[04:58:15.918]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:58:15.918]    __FlashAddr=0x00000000
[04:58:15.918]    __FlashLen=0x00000000
[04:58:15.918]    __FlashArg=0x00000000
[04:58:15.918]    __FlashOp=0x00000000
[04:58:15.918]    __Result=0x00000000
[04:58:15.918]  </debugvars>
[04:58:15.918]  
[04:58:15.918]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[04:58:15.918]    <block atomic="false" info="">
[04:58:15.918]      __var SW_DP_ABORT       = 0x0;
[04:58:15.918]        // -> [SW_DP_ABORT <= 0x00000000]
[04:58:15.920]      __var DP_CTRL_STAT      = 0x4;
[04:58:15.920]        // -> [DP_CTRL_STAT <= 0x00000004]
[04:58:15.920]      __var DP_SELECT         = 0x8;
[04:58:15.920]        // -> [DP_SELECT <= 0x00000008]
[04:58:15.920]      __var powered_down      = 0;
[04:58:15.920]        // -> [powered_down <= 0x00000000]
[04:58:15.920]      WriteDP(DP_SELECT, 0x00000000);
[04:58:15.920]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[04:58:15.920]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[04:58:15.920]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[04:58:15.920]        // -> [powered_down <= 0x00000001]
[04:58:15.920]    </block>
[04:58:15.920]    <control if="powered_down" while="" timeout="0" info="">
[04:58:15.920]      // if-block "powered_down"
[04:58:15.920]        // =>  TRUE
[04:58:15.920]      <block atomic="false" info="">
[04:58:15.920]        Message(0, "Debug/System power-up request sent");
[04:58:15.920]        WriteDP(DP_CTRL_STAT, 0x50000000);
[04:58:15.920]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[04:58:15.928]      </block>
[04:58:15.928]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[04:58:15.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[04:58:15.928]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[04:58:15.928]        // while-condition  =>  FALSE
[04:58:15.928]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[04:58:15.928]      </control>
[04:58:15.928]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[04:58:15.928]        // if-block "(__protocol & 0xFFFF) == 1"
[04:58:15.928]          // =>  FALSE
[04:58:15.928]        // skip if-block "(__protocol & 0xFFFF) == 1"
[04:58:15.928]      </control>
[04:58:15.928]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[04:58:15.928]        // if-block "(__protocol & 0xFFFF) == 2"
[04:58:15.931]          // =>  TRUE
[04:58:15.931]        <block atomic="false" info="">
[04:58:15.931]          Message(0, "executing SWD power up");
[04:58:15.931]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[04:58:15.931]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[04:58:15.931]          WriteDP(SW_DP_ABORT, 0x0000001E);
[04:58:15.931]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[04:58:15.931]        </block>
[04:58:15.931]        // end if-block "(__protocol & 0xFFFF) == 2"
[04:58:15.931]      </control>
[04:58:15.931]      // end if-block "powered_down"
[04:58:15.931]    </control>
[04:58:15.931]    <block atomic="false" info="">
[04:58:15.931]      __var DEBUG_PORT_VAL    = 0;
[04:58:15.931]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[04:58:15.931]      __var ACCESS_POINT_VAL  = 0;
[04:58:15.931]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[04:58:15.931]      __ap = 1; 
[04:58:15.931]        // -> [__ap <= 0x00000001]
[04:58:15.931]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[04:58:15.940]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[04:58:15.940]      __ap = 4;
[04:58:15.940]        // -> [__ap <= 0x00000004]
[04:58:15.940]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:58:15.941]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[04:58:15.944]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[04:58:15.944]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:58:15.944]    </block>
[04:58:15.944]    <block atomic="false" info="">
[04:58:15.944]      __var nReset = 0x80;
[04:58:15.944]        // -> [nReset <= 0x00000080]
[04:58:15.944]      __var canReadPins = 0;
[04:58:15.944]        // -> [canReadPins <= 0x00000000]
[04:58:15.944]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[04:58:15.948]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[04:58:15.948]        // -> [canReadPins <= 0x00000001]
[04:58:15.948]    </block>
[04:58:15.948]    <control if="" while="1" timeout="200" info="">
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.948]      // while "1"  (timeout="200")
[04:58:15.948]      // while-condition  =>  TRUE
[04:58:15.957]      // while "1"  (timeout="200")
[04:58:15.957]      // while  =>  TIMEOUT
[04:58:15.957]      // end while "1"
[04:58:15.957]    </control>
[04:58:15.957]    <control if="canReadPins" while="" timeout="0" info="">
[04:58:15.957]      // if-block "canReadPins"
[04:58:15.957]        // =>  TRUE
[04:58:15.957]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[04:58:15.957]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[04:58:15.962]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[04:58:15.962]        // while-condition  =>  FALSE
[04:58:15.962]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[04:58:15.962]      </control>
[04:58:15.962]      // end if-block "canReadPins"
[04:58:15.962]    </control>
[04:58:15.962]    <control if="!canReadPins" while="" timeout="0" info="">
[04:58:15.962]      // if-block "!canReadPins"
[04:58:15.962]        // =>  FALSE
[04:58:15.962]      // skip if-block "!canReadPins"
[04:58:15.962]    </control>
[04:58:15.962]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[04:58:15.962]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:58:15.962]        // =>  TRUE
[04:58:15.962]      <block atomic="false" info="">
[04:58:15.962]        WriteAP(0x00, 0x190008);
[04:58:15.965]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[04:58:15.965]        WriteAP(0xF0, 0x01);
[04:58:15.969]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[04:58:15.969]      </block>
[04:58:15.969]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[04:58:15.969]    </control>
[04:58:15.969]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[04:58:15.969]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:58:15.969]        // =>  FALSE
[04:58:15.969]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[04:58:15.969]    </control>
[04:58:15.969]    <block atomic="false" info="">
[04:58:15.969]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[04:58:15.969]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[04:58:15.969]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[04:58:15.969]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[04:58:15.969]      __ap = 0; //lets make sure we reset the access point selection
[04:58:15.969]        // -> [__ap <= 0x00000000]
[04:58:15.969]    </block>
[04:58:15.969]  </sequence>
[04:58:15.969]  
[04:58:15.991]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[04:58:15.991]  
[04:58:15.991]  <debugvars>
[04:58:15.991]    // Pre-defined
[04:58:15.991]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[04:58:15.991]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[04:58:15.998]    __dp=0x00000000
[04:58:15.998]    __ap=0x00000000
[04:58:15.998]    __traceout=0x00000000      (Trace Disabled)
[04:58:15.998]    __errorcontrol=0x00000000  (Skip Errors="False")
[04:58:15.998]    __FlashAddr=0x00000000
[04:58:15.998]    __FlashLen=0x00000000
[04:58:15.998]    __FlashArg=0x00000000
[04:58:15.998]    __FlashOp=0x00000000
[04:58:15.998]    __Result=0x00000000
[04:58:15.998]  </debugvars>
[04:58:15.998]  
[04:58:15.998]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[04:58:15.998]    <block atomic="false" info="">
[04:58:15.998]      __var deviceID = 0;
[04:58:15.998]        // -> [deviceID <= 0x00000000]
[04:58:15.998]      __var version = 0;
[04:58:15.998]        // -> [version <= 0x00000000]
[04:58:16.000]      __var partNum = 0;
[04:58:16.000]        // -> [partNum <= 0x00000000]
[04:58:16.000]      __var manuf = 0;
[04:58:16.000]        // -> [manuf <= 0x00000000]
[04:58:16.000]      __var isMSPM0G1X0X_G3X0X = 0;
[04:58:16.000]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[04:58:16.000]      __var isProduction = 0;
[04:58:16.000]        // -> [isProduction <= 0x00000000]
[04:58:16.000]      __var continueId = 0;
[04:58:16.000]        // -> [continueId <= 0x00000000]
[04:58:16.000]      deviceID =   Read32(0x41C40004);
[04:58:16.000]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[04:58:16.000]        // -> [deviceID <= 0x2BB8802F]
[04:58:16.000]      version = deviceID >> 28;
[04:58:16.000]        // -> [version <= 0x00000002]
[04:58:16.000]      partNum = (deviceID & 0x0FFFF000) >> 12;
[04:58:16.000]        // -> [partNum <= 0x0000BB88]
[04:58:16.000]      manuf = (deviceID & 0x00000FFE) >> 1;
[04:58:16.000]        // -> [manuf <= 0x00000017]
[04:58:16.000]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[04:58:16.000]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[04:58:16.000]      isProduction = (version > 0);
[04:58:16.000]        // -> [isProduction <= 0x00000001]
[04:58:16.000]    </block>
[04:58:16.000]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[04:58:16.000]      // if-block "!isMSPM0G1X0X_G3X0X"
[04:58:16.000]        // =>  FALSE
[04:58:16.000]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[04:58:16.000]    </control>
[04:58:16.000]    <control if="continueId == 4" while="" timeout="0" info="">
[04:58:16.000]      // if-block "continueId == 4"
[04:58:16.000]        // =>  FALSE
[04:58:16.000]      // skip if-block "continueId == 4"
[04:58:16.000]    </control>
[04:58:16.000]    <control if="!isProduction" while="" timeout="0" info="">
[04:58:16.000]      // if-block "!isProduction"
[04:58:16.000]        // =>  FALSE
[04:58:16.000]      // skip if-block "!isProduction"
[04:58:16.000]    </control>
[04:58:16.000]  </sequence>
[04:58:16.000]  
[05:00:25.329]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:00:25.329]  
[05:00:25.339]  <debugvars>
[05:00:25.339]    // Pre-defined
[05:00:25.339]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:00:25.339]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:00:25.339]    __dp=0x00000000
[05:00:25.339]    __ap=0x00000000
[05:00:25.339]    __traceout=0x00000000      (Trace Disabled)
[05:00:25.339]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:00:25.339]    __FlashAddr=0x00000000
[05:00:25.339]    __FlashLen=0x00000000
[05:00:25.339]    __FlashArg=0x00000000
[05:00:25.339]    __FlashOp=0x00000000
[05:00:25.339]    __Result=0x00000000
[05:00:25.339]  </debugvars>
[05:00:25.339]  
[05:00:25.339]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:00:25.339]    <block atomic="false" info="">
[05:00:25.339]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:00:25.339]        // -> [isSWJ <= 0x00000001]
[05:00:25.339]      __var hasDormant = __protocol & 0x00020000;
[05:00:25.339]        // -> [hasDormant <= 0x00000000]
[05:00:25.339]      __var protType   = __protocol & 0x0000FFFF;
[05:00:25.341]        // -> [protType <= 0x00000002]
[05:00:25.341]    </block>
[05:00:25.341]    <control if="protType == 1" while="" timeout="0" info="">
[05:00:25.341]      // if-block "protType == 1"
[05:00:25.341]        // =>  FALSE
[05:00:25.341]      // skip if-block "protType == 1"
[05:00:25.341]    </control>
[05:00:25.341]    <control if="protType == 2" while="" timeout="0" info="">
[05:00:25.341]      // if-block "protType == 2"
[05:00:25.341]        // =>  TRUE
[05:00:25.341]      <control if="isSWJ" while="" timeout="0" info="">
[05:00:25.341]        // if-block "isSWJ"
[05:00:25.341]          // =>  TRUE
[05:00:25.341]        <control if="hasDormant" while="" timeout="0" info="">
[05:00:25.341]          // if-block "hasDormant"
[05:00:25.341]            // =>  FALSE
[05:00:25.341]          // skip if-block "hasDormant"
[05:00:25.341]        </control>
[05:00:25.341]        <control if="!hasDormant" while="" timeout="0" info="">
[05:00:25.341]          // if-block "!hasDormant"
[05:00:25.341]            // =>  TRUE
[05:00:25.341]          <block atomic="false" info="">
[05:00:25.341]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:00:25.341]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:00:25.341]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:00:25.341]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:00:25.341]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:00:25.341]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:00:25.341]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:00:25.349]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:00:25.349]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:00:25.351]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:00:25.351]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:00:25.351]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:00:25.351]          </block>
[05:00:25.351]          // end if-block "!hasDormant"
[05:00:25.351]        </control>
[05:00:25.351]        // end if-block "isSWJ"
[05:00:25.351]      </control>
[05:00:25.351]      <control if="!isSWJ" while="" timeout="0" info="">
[05:00:25.351]        // if-block "!isSWJ"
[05:00:25.351]          // =>  FALSE
[05:00:25.351]        // skip if-block "!isSWJ"
[05:00:25.351]      </control>
[05:00:25.351]      <block atomic="false" info="">
[05:00:25.351]        ReadDP(0x0);
[05:00:25.351]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:00:25.351]      </block>
[05:00:25.351]      // end if-block "protType == 2"
[05:00:25.351]    </control>
[05:00:25.351]  </sequence>
[05:00:25.351]  
[05:00:25.359]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:00:25.359]  
[05:00:25.359]  <debugvars>
[05:00:25.359]    // Pre-defined
[05:00:25.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:00:25.359]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:00:25.359]    __dp=0x00000000
[05:00:25.359]    __ap=0x00000000
[05:00:25.359]    __traceout=0x00000000      (Trace Disabled)
[05:00:25.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:00:25.359]    __FlashAddr=0x00000000
[05:00:25.359]    __FlashLen=0x00000000
[05:00:25.359]    __FlashArg=0x00000000
[05:00:25.359]    __FlashOp=0x00000000
[05:00:25.359]    __Result=0x00000000
[05:00:25.359]  </debugvars>
[05:00:25.361]  
[05:00:25.361]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:00:25.361]    <block atomic="false" info="">
[05:00:25.361]      __var SW_DP_ABORT       = 0x0;
[05:00:25.361]        // -> [SW_DP_ABORT <= 0x00000000]
[05:00:25.361]      __var DP_CTRL_STAT      = 0x4;
[05:00:25.361]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:00:25.361]      __var DP_SELECT         = 0x8;
[05:00:25.361]        // -> [DP_SELECT <= 0x00000008]
[05:00:25.361]      __var powered_down      = 0;
[05:00:25.361]        // -> [powered_down <= 0x00000000]
[05:00:25.361]      WriteDP(DP_SELECT, 0x00000000);
[05:00:25.361]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:00:25.361]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:00:25.361]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:00:25.361]        // -> [powered_down <= 0x00000001]
[05:00:25.361]    </block>
[05:00:25.361]    <control if="powered_down" while="" timeout="0" info="">
[05:00:25.361]      // if-block "powered_down"
[05:00:25.361]        // =>  TRUE
[05:00:25.361]      <block atomic="false" info="">
[05:00:25.361]        Message(0, "Debug/System power-up request sent");
[05:00:25.361]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:00:25.368]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:00:25.368]      </block>
[05:00:25.370]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:00:25.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:00:25.371]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:00:25.371]        // while-condition  =>  FALSE
[05:00:25.371]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:00:25.371]      </control>
[05:00:25.371]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:00:25.371]        // if-block "(__protocol & 0xFFFF) == 1"
[05:00:25.371]          // =>  FALSE
[05:00:25.371]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:00:25.371]      </control>
[05:00:25.371]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:00:25.371]        // if-block "(__protocol & 0xFFFF) == 2"
[05:00:25.371]          // =>  TRUE
[05:00:25.371]        <block atomic="false" info="">
[05:00:25.371]          Message(0, "executing SWD power up");
[05:00:25.371]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:00:25.371]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:00:25.371]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:00:25.371]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:00:25.378]        </block>
[05:00:25.378]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:00:25.378]      </control>
[05:00:25.378]      // end if-block "powered_down"
[05:00:25.378]    </control>
[05:00:25.378]    <block atomic="false" info="">
[05:00:25.378]      __var DEBUG_PORT_VAL    = 0;
[05:00:25.378]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:00:25.378]      __var ACCESS_POINT_VAL  = 0;
[05:00:25.378]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:00:25.378]      __ap = 1; 
[05:00:25.378]        // -> [__ap <= 0x00000001]
[05:00:25.378]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:00:25.381]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:00:25.381]      __ap = 4;
[05:00:25.381]        // -> [__ap <= 0x00000004]
[05:00:25.381]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:00:25.381]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:00:25.381]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:00:25.381]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:00:25.388]    </block>
[05:00:25.388]    <block atomic="false" info="">
[05:00:25.388]      __var nReset = 0x80;
[05:00:25.388]        // -> [nReset <= 0x00000080]
[05:00:25.388]      __var canReadPins = 0;
[05:00:25.388]        // -> [canReadPins <= 0x00000000]
[05:00:25.388]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:00:25.388]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:00:25.392]        // -> [canReadPins <= 0x00000001]
[05:00:25.392]    </block>
[05:00:25.392]    <control if="" while="1" timeout="200" info="">
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.392]      // while-condition  =>  TRUE
[05:00:25.392]      // while "1"  (timeout="200")
[05:00:25.399]      // while-condition  =>  TRUE
[05:00:25.399]      // while "1"  (timeout="200")
[05:00:25.399]      // while  =>  TIMEOUT
[05:00:25.399]      // end while "1"
[05:00:25.399]    </control>
[05:00:25.399]    <control if="canReadPins" while="" timeout="0" info="">
[05:00:25.399]      // if-block "canReadPins"
[05:00:25.399]        // =>  TRUE
[05:00:25.399]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:00:25.399]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:00:25.399]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:00:25.399]        // while-condition  =>  FALSE
[05:00:25.402]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:00:25.402]      </control>
[05:00:25.402]      // end if-block "canReadPins"
[05:00:25.402]    </control>
[05:00:25.402]    <control if="!canReadPins" while="" timeout="0" info="">
[05:00:25.402]      // if-block "!canReadPins"
[05:00:25.402]        // =>  FALSE
[05:00:25.403]      // skip if-block "!canReadPins"
[05:00:25.403]    </control>
[05:00:25.403]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:00:25.403]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:00:25.403]        // =>  TRUE
[05:00:25.403]      <block atomic="false" info="">
[05:00:25.403]        WriteAP(0x00, 0x190008);
[05:00:25.403]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:00:25.403]        WriteAP(0xF0, 0x01);
[05:00:25.408]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:00:25.408]      </block>
[05:00:25.408]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:00:25.408]    </control>
[05:00:25.408]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:00:25.408]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:00:25.408]        // =>  FALSE
[05:00:25.408]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:00:25.408]    </control>
[05:00:25.408]    <block atomic="false" info="">
[05:00:25.408]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:00:25.412]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:00:25.412]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:00:25.412]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:00:25.412]      __ap = 0; //lets make sure we reset the access point selection
[05:00:25.412]        // -> [__ap <= 0x00000000]
[05:00:25.412]    </block>
[05:00:25.412]  </sequence>
[05:00:25.412]  
[05:00:25.433]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:00:25.433]  
[05:00:25.433]  <debugvars>
[05:00:25.433]    // Pre-defined
[05:00:25.433]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:00:25.433]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:00:25.433]    __dp=0x00000000
[05:00:25.433]    __ap=0x00000000
[05:00:25.433]    __traceout=0x00000000      (Trace Disabled)
[05:00:25.433]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:00:25.433]    __FlashAddr=0x00000000
[05:00:25.433]    __FlashLen=0x00000000
[05:00:25.433]    __FlashArg=0x00000000
[05:00:25.433]    __FlashOp=0x00000000
[05:00:25.433]    __Result=0x00000000
[05:00:25.433]  </debugvars>
[05:00:25.433]  
[05:00:25.433]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:00:25.433]    <block atomic="false" info="">
[05:00:25.433]      __var deviceID = 0;
[05:00:25.433]        // -> [deviceID <= 0x00000000]
[05:00:25.433]      __var version = 0;
[05:00:25.433]        // -> [version <= 0x00000000]
[05:00:25.433]      __var partNum = 0;
[05:00:25.433]        // -> [partNum <= 0x00000000]
[05:00:25.433]      __var manuf = 0;
[05:00:25.433]        // -> [manuf <= 0x00000000]
[05:00:25.433]      __var isMSPM0G1X0X_G3X0X = 0;
[05:00:25.433]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:00:25.433]      __var isProduction = 0;
[05:00:25.433]        // -> [isProduction <= 0x00000000]
[05:00:25.433]      __var continueId = 0;
[05:00:25.433]        // -> [continueId <= 0x00000000]
[05:00:25.433]      deviceID =   Read32(0x41C40004);
[05:00:25.442]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:00:25.442]        // -> [deviceID <= 0x2BB8802F]
[05:00:25.442]      version = deviceID >> 28;
[05:00:25.442]        // -> [version <= 0x00000002]
[05:00:25.442]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:00:25.442]        // -> [partNum <= 0x0000BB88]
[05:00:25.442]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:00:25.442]        // -> [manuf <= 0x00000017]
[05:00:25.442]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:00:25.442]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:00:25.442]      isProduction = (version > 0);
[05:00:25.442]        // -> [isProduction <= 0x00000001]
[05:00:25.442]    </block>
[05:00:25.442]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:00:25.442]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:00:25.442]        // =>  FALSE
[05:00:25.442]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:00:25.442]    </control>
[05:00:25.442]    <control if="continueId == 4" while="" timeout="0" info="">
[05:00:25.442]      // if-block "continueId == 4"
[05:00:25.442]        // =>  FALSE
[05:00:25.442]      // skip if-block "continueId == 4"
[05:00:25.442]    </control>
[05:00:25.442]    <control if="!isProduction" while="" timeout="0" info="">
[05:00:25.442]      // if-block "!isProduction"
[05:00:25.442]        // =>  FALSE
[05:00:25.442]      // skip if-block "!isProduction"
[05:00:25.442]    </control>
[05:00:25.442]  </sequence>
[05:00:25.442]  
[05:00:31.066]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:00:31.066]  
[05:00:31.066]  <debugvars>
[05:00:31.066]    // Pre-defined
[05:00:31.066]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:00:31.066]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:00:31.066]    __dp=0x00000000
[05:00:31.066]    __ap=0x00000000
[05:00:31.066]    __traceout=0x00000000      (Trace Disabled)
[05:00:31.066]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:00:31.066]    __FlashAddr=0x00000000
[05:00:31.066]    __FlashLen=0x00000000
[05:00:31.066]    __FlashArg=0x00000000
[05:00:31.066]    __FlashOp=0x00000000
[05:00:31.066]    __Result=0x00000000
[05:00:31.066]  </debugvars>
[05:00:31.066]  
[05:00:31.066]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:00:31.072]    <block atomic="false" info="">
[05:00:31.072]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:00:31.072]        // -> [isSWJ <= 0x00000001]
[05:00:31.072]      __var hasDormant = __protocol & 0x00020000;
[05:00:31.072]        // -> [hasDormant <= 0x00000000]
[05:00:31.072]      __var protType   = __protocol & 0x0000FFFF;
[05:00:31.072]        // -> [protType <= 0x00000002]
[05:00:31.072]    </block>
[05:00:31.072]    <control if="protType == 1" while="" timeout="0" info="">
[05:00:31.072]      // if-block "protType == 1"
[05:00:31.072]        // =>  FALSE
[05:00:31.072]      // skip if-block "protType == 1"
[05:00:31.072]    </control>
[05:00:31.072]    <control if="protType == 2" while="" timeout="0" info="">
[05:00:31.072]      // if-block "protType == 2"
[05:00:31.072]        // =>  TRUE
[05:00:31.072]      <control if="isSWJ" while="" timeout="0" info="">
[05:00:31.072]        // if-block "isSWJ"
[05:00:31.072]          // =>  TRUE
[05:00:31.072]        <control if="hasDormant" while="" timeout="0" info="">
[05:00:31.072]          // if-block "hasDormant"
[05:00:31.072]            // =>  FALSE
[05:00:31.072]          // skip if-block "hasDormant"
[05:00:31.072]        </control>
[05:00:31.072]        <control if="!hasDormant" while="" timeout="0" info="">
[05:00:31.072]          // if-block "!hasDormant"
[05:00:31.072]            // =>  TRUE
[05:00:31.072]          <block atomic="false" info="">
[05:00:31.072]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:00:31.076]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:00:31.076]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:00:31.076]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:00:31.076]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:00:31.076]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:00:31.076]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:00:31.076]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:00:31.076]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:00:31.076]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:00:31.086]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:00:31.086]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:00:31.086]          </block>
[05:00:31.086]          // end if-block "!hasDormant"
[05:00:31.086]        </control>
[05:00:31.086]        // end if-block "isSWJ"
[05:00:31.086]      </control>
[05:00:31.086]      <control if="!isSWJ" while="" timeout="0" info="">
[05:00:31.086]        // if-block "!isSWJ"
[05:00:31.086]          // =>  FALSE
[05:00:31.086]        // skip if-block "!isSWJ"
[05:00:31.086]      </control>
[05:00:31.086]      <block atomic="false" info="">
[05:00:31.086]        ReadDP(0x0);
[05:00:31.086]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:00:31.086]      </block>
[05:00:31.086]      // end if-block "protType == 2"
[05:00:31.086]    </control>
[05:00:31.086]  </sequence>
[05:00:31.086]  
[05:00:31.086]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:00:31.086]  
[05:00:31.086]  <debugvars>
[05:00:31.086]    // Pre-defined
[05:00:31.086]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:00:31.086]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:00:31.086]    __dp=0x00000000
[05:00:31.086]    __ap=0x00000000
[05:00:31.086]    __traceout=0x00000000      (Trace Disabled)
[05:00:31.086]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:00:31.086]    __FlashAddr=0x00000000
[05:00:31.096]    __FlashLen=0x00000000
[05:00:31.096]    __FlashArg=0x00000000
[05:00:31.096]    __FlashOp=0x00000000
[05:00:31.096]    __Result=0x00000000
[05:00:31.096]  </debugvars>
[05:00:31.096]  
[05:00:31.096]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:00:31.096]    <block atomic="false" info="">
[05:00:31.096]      __var SW_DP_ABORT       = 0x0;
[05:00:31.096]        // -> [SW_DP_ABORT <= 0x00000000]
[05:00:31.096]      __var DP_CTRL_STAT      = 0x4;
[05:00:31.096]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:00:31.096]      __var DP_SELECT         = 0x8;
[05:00:31.096]        // -> [DP_SELECT <= 0x00000008]
[05:00:31.096]      __var powered_down      = 0;
[05:00:31.096]        // -> [powered_down <= 0x00000000]
[05:00:31.096]      WriteDP(DP_SELECT, 0x00000000);
[05:00:31.096]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:00:31.096]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:00:31.096]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:00:31.096]        // -> [powered_down <= 0x00000001]
[05:00:31.096]    </block>
[05:00:31.096]    <control if="powered_down" while="" timeout="0" info="">
[05:00:31.096]      // if-block "powered_down"
[05:00:31.096]        // =>  TRUE
[05:00:31.096]      <block atomic="false" info="">
[05:00:31.096]        Message(0, "Debug/System power-up request sent");
[05:00:31.096]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:00:31.096]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:00:31.096]      </block>
[05:00:31.106]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:00:31.106]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:00:31.112]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:00:31.112]        // while-condition  =>  FALSE
[05:00:31.112]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:00:31.112]      </control>
[05:00:31.112]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:00:31.112]        // if-block "(__protocol & 0xFFFF) == 1"
[05:00:31.112]          // =>  FALSE
[05:00:31.112]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:00:31.112]      </control>
[05:00:31.112]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:00:31.114]        // if-block "(__protocol & 0xFFFF) == 2"
[05:00:31.114]          // =>  TRUE
[05:00:31.114]        <block atomic="false" info="">
[05:00:31.114]          Message(0, "executing SWD power up");
[05:00:31.115]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:00:31.115]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:00:31.115]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:00:31.119]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:00:31.119]        </block>
[05:00:31.119]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:00:31.119]      </control>
[05:00:31.119]      // end if-block "powered_down"
[05:00:31.119]    </control>
[05:00:31.119]    <block atomic="false" info="">
[05:00:31.119]      __var DEBUG_PORT_VAL    = 0;
[05:00:31.119]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:00:31.119]      __var ACCESS_POINT_VAL  = 0;
[05:00:31.119]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:00:31.119]      __ap = 1; 
[05:00:31.124]        // -> [__ap <= 0x00000001]
[05:00:31.124]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:00:31.127]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:00:31.127]      __ap = 4;
[05:00:31.127]        // -> [__ap <= 0x00000004]
[05:00:31.127]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:00:31.131]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:00:31.131]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:00:31.131]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:00:31.131]    </block>
[05:00:31.131]    <block atomic="false" info="">
[05:00:31.133]      __var nReset = 0x80;
[05:00:31.133]        // -> [nReset <= 0x00000080]
[05:00:31.133]      __var canReadPins = 0;
[05:00:31.133]        // -> [canReadPins <= 0x00000000]
[05:00:31.133]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:00:31.136]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:00:31.136]        // -> [canReadPins <= 0x00000001]
[05:00:31.136]    </block>
[05:00:31.136]    <control if="" while="1" timeout="200" info="">
[05:00:31.136]      // while "1"  (timeout="200")
[05:00:31.136]      // while-condition  =>  TRUE
[05:00:31.136]      // while "1"  (timeout="200")
[05:00:31.136]      // while-condition  =>  TRUE
[05:00:31.136]      // while "1"  (timeout="200")
[05:00:31.136]      // while-condition  =>  TRUE
[05:00:31.136]      // while "1"  (timeout="200")
[05:00:31.136]      // while-condition  =>  TRUE
[05:00:31.136]      // while "1"  (timeout="200")
[05:00:31.136]      // while-condition  =>  TRUE
[05:00:31.136]      // while "1"  (timeout="200")
[05:00:31.136]      // while-condition  =>  TRUE
[05:00:31.136]      // while "1"  (timeout="200")
[05:00:31.136]      // while-condition  =>  TRUE
[05:00:31.136]      // while "1"  (timeout="200")
[05:00:31.136]      // while-condition  =>  TRUE
[05:00:31.136]      // while "1"  (timeout="200")
[05:00:31.136]      // while-condition  =>  TRUE
[05:00:31.136]      // while "1"  (timeout="200")
[05:00:31.136]      // while-condition  =>  TRUE
[05:00:31.136]      // while "1"  (timeout="200")
[05:00:31.136]      // while-condition  =>  TRUE
[05:00:31.136]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.139]      // while "1"  (timeout="200")
[05:00:31.139]      // while-condition  =>  TRUE
[05:00:31.144]      // while "1"  (timeout="200")
[05:00:31.144]      // while-condition  =>  TRUE
[05:00:31.144]      // while "1"  (timeout="200")
[05:00:31.144]      // while-condition  =>  TRUE
[05:00:31.144]      // while "1"  (timeout="200")
[05:00:31.144]      // while-condition  =>  TRUE
[05:00:31.144]      // while "1"  (timeout="200")
[05:00:31.144]      // while-condition  =>  TRUE
[05:00:31.144]      // while "1"  (timeout="200")
[05:00:31.144]      // while-condition  =>  TRUE
[05:00:31.144]      // while "1"  (timeout="200")
[05:00:31.144]      // while-condition  =>  TRUE
[05:00:31.144]      // while "1"  (timeout="200")
[05:00:31.144]      // while-condition  =>  TRUE
[05:00:31.144]      // while "1"  (timeout="200")
[05:00:31.144]      // while-condition  =>  TRUE
[05:00:31.144]      // while "1"  (timeout="200")
[05:00:31.144]      // while-condition  =>  TRUE
[05:00:31.144]      // while "1"  (timeout="200")
[05:00:31.144]      // while-condition  =>  TRUE
[05:00:31.146]      // while "1"  (timeout="200")
[05:00:31.146]      // while  =>  TIMEOUT
[05:00:31.146]      // end while "1"
[05:00:31.146]    </control>
[05:00:31.146]    <control if="canReadPins" while="" timeout="0" info="">
[05:00:31.147]      // if-block "canReadPins"
[05:00:31.147]        // =>  TRUE
[05:00:31.147]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:00:31.147]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:00:31.148]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:00:31.148]        // while-condition  =>  FALSE
[05:00:31.148]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:00:31.148]      </control>
[05:00:31.148]      // end if-block "canReadPins"
[05:00:31.148]    </control>
[05:00:31.148]    <control if="!canReadPins" while="" timeout="0" info="">
[05:00:31.148]      // if-block "!canReadPins"
[05:00:31.148]        // =>  FALSE
[05:00:31.148]      // skip if-block "!canReadPins"
[05:00:31.148]    </control>
[05:00:31.148]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:00:31.150]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:00:31.150]        // =>  TRUE
[05:00:31.150]      <block atomic="false" info="">
[05:00:31.150]        WriteAP(0x00, 0x190008);
[05:00:31.150]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:00:31.150]        WriteAP(0xF0, 0x01);
[05:00:31.150]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:00:31.150]      </block>
[05:00:31.150]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:00:31.150]    </control>
[05:00:31.150]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:00:31.150]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:00:31.150]        // =>  FALSE
[05:00:31.150]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:00:31.150]    </control>
[05:00:31.156]    <block atomic="false" info="">
[05:00:31.156]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:00:31.157]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:00:31.157]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:00:31.157]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:00:31.157]      __ap = 0; //lets make sure we reset the access point selection
[05:00:31.157]        // -> [__ap <= 0x00000000]
[05:00:31.157]    </block>
[05:00:31.157]  </sequence>
[05:00:31.157]  
[05:00:31.187]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:00:31.187]  
[05:00:31.187]  <debugvars>
[05:00:31.187]    // Pre-defined
[05:00:31.187]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:00:31.187]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:00:31.187]    __dp=0x00000000
[05:00:31.187]    __ap=0x00000000
[05:00:31.187]    __traceout=0x00000000      (Trace Disabled)
[05:00:31.187]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:00:31.187]    __FlashAddr=0x00000000
[05:00:31.187]    __FlashLen=0x00000000
[05:00:31.187]    __FlashArg=0x00000000
[05:00:31.187]    __FlashOp=0x00000000
[05:00:31.187]    __Result=0x00000000
[05:00:31.187]  </debugvars>
[05:00:31.187]  
[05:00:31.187]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:00:31.187]    <block atomic="false" info="">
[05:00:31.187]      __var deviceID = 0;
[05:00:31.187]        // -> [deviceID <= 0x00000000]
[05:00:31.187]      __var version = 0;
[05:00:31.187]        // -> [version <= 0x00000000]
[05:00:31.187]      __var partNum = 0;
[05:00:31.187]        // -> [partNum <= 0x00000000]
[05:00:31.187]      __var manuf = 0;
[05:00:31.187]        // -> [manuf <= 0x00000000]
[05:00:31.187]      __var isMSPM0G1X0X_G3X0X = 0;
[05:00:31.187]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:00:31.187]      __var isProduction = 0;
[05:00:31.187]        // -> [isProduction <= 0x00000000]
[05:00:31.187]      __var continueId = 0;
[05:00:31.187]        // -> [continueId <= 0x00000000]
[05:00:31.187]      deviceID =   Read32(0x41C40004);
[05:00:31.198]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:00:31.198]        // -> [deviceID <= 0x2BB8802F]
[05:00:31.198]      version = deviceID >> 28;
[05:00:31.198]        // -> [version <= 0x00000002]
[05:00:31.198]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:00:31.198]        // -> [partNum <= 0x0000BB88]
[05:00:31.198]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:00:31.198]        // -> [manuf <= 0x00000017]
[05:00:31.198]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:00:31.198]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:00:31.198]      isProduction = (version > 0);
[05:00:31.198]        // -> [isProduction <= 0x00000001]
[05:00:31.198]    </block>
[05:00:31.199]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:00:31.200]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:00:31.200]        // =>  FALSE
[05:00:31.200]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:00:31.200]    </control>
[05:00:31.200]    <control if="continueId == 4" while="" timeout="0" info="">
[05:00:31.200]      // if-block "continueId == 4"
[05:00:31.201]        // =>  FALSE
[05:00:31.201]      // skip if-block "continueId == 4"
[05:00:31.201]    </control>
[05:00:31.201]    <control if="!isProduction" while="" timeout="0" info="">
[05:00:31.201]      // if-block "!isProduction"
[05:00:31.201]        // =>  FALSE
[05:00:31.201]      // skip if-block "!isProduction"
[05:00:31.201]    </control>
[05:00:31.201]  </sequence>
[05:00:31.201]  
[05:01:20.034]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:01:20.034]  
[05:01:20.050]  <debugvars>
[05:01:20.050]    // Pre-defined
[05:01:20.050]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:01:20.050]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:01:20.050]    __dp=0x00000000
[05:01:20.050]    __ap=0x00000000
[05:01:20.050]    __traceout=0x00000000      (Trace Disabled)
[05:01:20.050]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:01:20.050]    __FlashAddr=0x00000000
[05:01:20.050]    __FlashLen=0x00000000
[05:01:20.050]    __FlashArg=0x00000000
[05:01:20.050]    __FlashOp=0x00000000
[05:01:20.050]    __Result=0x00000000
[05:01:20.050]  </debugvars>
[05:01:20.050]  
[05:01:20.050]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:01:20.050]    <block atomic="false" info="">
[05:01:20.050]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:01:20.050]        // -> [isSWJ <= 0x00000001]
[05:01:20.050]      __var hasDormant = __protocol & 0x00020000;
[05:01:20.050]        // -> [hasDormant <= 0x00000000]
[05:01:20.050]      __var protType   = __protocol & 0x0000FFFF;
[05:01:20.053]        // -> [protType <= 0x00000002]
[05:01:20.053]    </block>
[05:01:20.053]    <control if="protType == 1" while="" timeout="0" info="">
[05:01:20.053]      // if-block "protType == 1"
[05:01:20.053]        // =>  FALSE
[05:01:20.053]      // skip if-block "protType == 1"
[05:01:20.053]    </control>
[05:01:20.053]    <control if="protType == 2" while="" timeout="0" info="">
[05:01:20.053]      // if-block "protType == 2"
[05:01:20.053]        // =>  TRUE
[05:01:20.053]      <control if="isSWJ" while="" timeout="0" info="">
[05:01:20.053]        // if-block "isSWJ"
[05:01:20.054]          // =>  TRUE
[05:01:20.054]        <control if="hasDormant" while="" timeout="0" info="">
[05:01:20.054]          // if-block "hasDormant"
[05:01:20.054]            // =>  FALSE
[05:01:20.054]          // skip if-block "hasDormant"
[05:01:20.054]        </control>
[05:01:20.054]        <control if="!hasDormant" while="" timeout="0" info="">
[05:01:20.054]          // if-block "!hasDormant"
[05:01:20.054]            // =>  TRUE
[05:01:20.054]          <block atomic="false" info="">
[05:01:20.054]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:01:20.054]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:01:20.054]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:01:20.054]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:01:20.054]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:01:20.063]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:01:20.063]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:01:20.064]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:01:20.064]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:01:20.064]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:01:20.064]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:01:20.064]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:01:20.064]          </block>
[05:01:20.064]          // end if-block "!hasDormant"
[05:01:20.064]        </control>
[05:01:20.064]        // end if-block "isSWJ"
[05:01:20.064]      </control>
[05:01:20.064]      <control if="!isSWJ" while="" timeout="0" info="">
[05:01:20.064]        // if-block "!isSWJ"
[05:01:20.064]          // =>  FALSE
[05:01:20.064]        // skip if-block "!isSWJ"
[05:01:20.064]      </control>
[05:01:20.064]      <block atomic="false" info="">
[05:01:20.064]        ReadDP(0x0);
[05:01:20.064]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:01:20.064]      </block>
[05:01:20.064]      // end if-block "protType == 2"
[05:01:20.064]    </control>
[05:01:20.064]  </sequence>
[05:01:20.073]  
[05:01:20.074]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:01:20.074]  
[05:01:20.074]  <debugvars>
[05:01:20.074]    // Pre-defined
[05:01:20.074]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:01:20.074]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:01:20.074]    __dp=0x00000000
[05:01:20.074]    __ap=0x00000000
[05:01:20.074]    __traceout=0x00000000      (Trace Disabled)
[05:01:20.074]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:01:20.074]    __FlashAddr=0x00000000
[05:01:20.074]    __FlashLen=0x00000000
[05:01:20.074]    __FlashArg=0x00000000
[05:01:20.074]    __FlashOp=0x00000000
[05:01:20.074]    __Result=0x00000000
[05:01:20.074]  </debugvars>
[05:01:20.074]  
[05:01:20.074]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:01:20.074]    <block atomic="false" info="">
[05:01:20.074]      __var SW_DP_ABORT       = 0x0;
[05:01:20.074]        // -> [SW_DP_ABORT <= 0x00000000]
[05:01:20.074]      __var DP_CTRL_STAT      = 0x4;
[05:01:20.074]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:01:20.074]      __var DP_SELECT         = 0x8;
[05:01:20.074]        // -> [DP_SELECT <= 0x00000008]
[05:01:20.074]      __var powered_down      = 0;
[05:01:20.074]        // -> [powered_down <= 0x00000000]
[05:01:20.074]      WriteDP(DP_SELECT, 0x00000000);
[05:01:20.074]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:01:20.074]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:01:20.084]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:01:20.084]        // -> [powered_down <= 0x00000001]
[05:01:20.084]    </block>
[05:01:20.084]    <control if="powered_down" while="" timeout="0" info="">
[05:01:20.084]      // if-block "powered_down"
[05:01:20.084]        // =>  TRUE
[05:01:20.084]      <block atomic="false" info="">
[05:01:20.084]        Message(0, "Debug/System power-up request sent");
[05:01:20.086]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:01:20.089]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:01:20.089]      </block>
[05:01:20.089]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:01:20.089]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:01:20.092]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:01:20.092]        // while-condition  =>  FALSE
[05:01:20.092]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:01:20.092]      </control>
[05:01:20.092]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:01:20.092]        // if-block "(__protocol & 0xFFFF) == 1"
[05:01:20.092]          // =>  FALSE
[05:01:20.092]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:01:20.092]      </control>
[05:01:20.092]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:01:20.092]        // if-block "(__protocol & 0xFFFF) == 2"
[05:01:20.092]          // =>  TRUE
[05:01:20.092]        <block atomic="false" info="">
[05:01:20.092]          Message(0, "executing SWD power up");
[05:01:20.094]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:01:20.096]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:01:20.096]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:01:20.096]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:01:20.096]        </block>
[05:01:20.096]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:01:20.096]      </control>
[05:01:20.096]      // end if-block "powered_down"
[05:01:20.096]    </control>
[05:01:20.096]    <block atomic="false" info="">
[05:01:20.096]      __var DEBUG_PORT_VAL    = 0;
[05:01:20.096]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:01:20.096]      __var ACCESS_POINT_VAL  = 0;
[05:01:20.096]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:01:20.096]      __ap = 1; 
[05:01:20.096]        // -> [__ap <= 0x00000001]
[05:01:20.096]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:01:20.096]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:01:20.096]      __ap = 4;
[05:01:20.096]        // -> [__ap <= 0x00000004]
[05:01:20.096]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:01:20.104]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:01:20.104]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:01:20.104]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:01:20.104]    </block>
[05:01:20.104]    <block atomic="false" info="">
[05:01:20.104]      __var nReset = 0x80;
[05:01:20.104]        // -> [nReset <= 0x00000080]
[05:01:20.104]      __var canReadPins = 0;
[05:01:20.104]        // -> [canReadPins <= 0x00000000]
[05:01:20.104]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:01:20.104]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:01:20.104]        // -> [canReadPins <= 0x00000001]
[05:01:20.104]    </block>
[05:01:20.104]    <control if="" while="1" timeout="200" info="">
[05:01:20.104]      // while "1"  (timeout="200")
[05:01:20.104]      // while-condition  =>  TRUE
[05:01:20.104]      // while "1"  (timeout="200")
[05:01:20.104]      // while-condition  =>  TRUE
[05:01:20.104]      // while "1"  (timeout="200")
[05:01:20.104]      // while-condition  =>  TRUE
[05:01:20.104]      // while "1"  (timeout="200")
[05:01:20.104]      // while-condition  =>  TRUE
[05:01:20.104]      // while "1"  (timeout="200")
[05:01:20.104]      // while-condition  =>  TRUE
[05:01:20.104]      // while "1"  (timeout="200")
[05:01:20.104]      // while-condition  =>  TRUE
[05:01:20.104]      // while "1"  (timeout="200")
[05:01:20.104]      // while-condition  =>  TRUE
[05:01:20.104]      // while "1"  (timeout="200")
[05:01:20.104]      // while-condition  =>  TRUE
[05:01:20.104]      // while "1"  (timeout="200")
[05:01:20.104]      // while-condition  =>  TRUE
[05:01:20.104]      // while "1"  (timeout="200")
[05:01:20.104]      // while-condition  =>  TRUE
[05:01:20.104]      // while "1"  (timeout="200")
[05:01:20.104]      // while-condition  =>  TRUE
[05:01:20.104]      // while "1"  (timeout="200")
[05:01:20.104]      // while-condition  =>  TRUE
[05:01:20.104]      // while "1"  (timeout="200")
[05:01:20.104]      // while-condition  =>  TRUE
[05:01:20.114]      // while "1"  (timeout="200")
[05:01:20.114]      // while  =>  TIMEOUT
[05:01:20.114]      // end while "1"
[05:01:20.114]    </control>
[05:01:20.114]    <control if="canReadPins" while="" timeout="0" info="">
[05:01:20.114]      // if-block "canReadPins"
[05:01:20.114]        // =>  TRUE
[05:01:20.114]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:01:20.114]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:01:20.114]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:01:20.114]        // while-condition  =>  FALSE
[05:01:20.114]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:01:20.114]      </control>
[05:01:20.114]      // end if-block "canReadPins"
[05:01:20.114]    </control>
[05:01:20.114]    <control if="!canReadPins" while="" timeout="0" info="">
[05:01:20.114]      // if-block "!canReadPins"
[05:01:20.114]        // =>  FALSE
[05:01:20.114]      // skip if-block "!canReadPins"
[05:01:20.114]    </control>
[05:01:20.114]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:01:20.114]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:01:20.114]        // =>  TRUE
[05:01:20.114]      <block atomic="false" info="">
[05:01:20.114]        WriteAP(0x00, 0x190008);
[05:01:20.114]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:01:20.114]        WriteAP(0xF0, 0x01);
[05:01:20.124]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:01:20.124]      </block>
[05:01:20.124]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:01:20.124]    </control>
[05:01:20.124]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:01:20.124]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:01:20.124]        // =>  FALSE
[05:01:20.124]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:01:20.124]    </control>
[05:01:20.124]    <block atomic="false" info="">
[05:01:20.124]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:01:20.124]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:01:20.124]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:01:20.124]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:01:20.124]      __ap = 0; //lets make sure we reset the access point selection
[05:01:20.124]        // -> [__ap <= 0x00000000]
[05:01:20.124]    </block>
[05:01:20.124]  </sequence>
[05:01:20.124]  
[05:01:20.154]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:01:20.154]  
[05:01:20.154]  <debugvars>
[05:01:20.154]    // Pre-defined
[05:01:20.154]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:01:20.154]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:01:20.154]    __dp=0x00000000
[05:01:20.154]    __ap=0x00000000
[05:01:20.154]    __traceout=0x00000000      (Trace Disabled)
[05:01:20.154]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:01:20.154]    __FlashAddr=0x00000000
[05:01:20.154]    __FlashLen=0x00000000
[05:01:20.154]    __FlashArg=0x00000000
[05:01:20.154]    __FlashOp=0x00000000
[05:01:20.154]    __Result=0x00000000
[05:01:20.154]  </debugvars>
[05:01:20.154]  
[05:01:20.154]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:01:20.154]    <block atomic="false" info="">
[05:01:20.154]      __var deviceID = 0;
[05:01:20.154]        // -> [deviceID <= 0x00000000]
[05:01:20.154]      __var version = 0;
[05:01:20.154]        // -> [version <= 0x00000000]
[05:01:20.154]      __var partNum = 0;
[05:01:20.154]        // -> [partNum <= 0x00000000]
[05:01:20.154]      __var manuf = 0;
[05:01:20.154]        // -> [manuf <= 0x00000000]
[05:01:20.154]      __var isMSPM0G1X0X_G3X0X = 0;
[05:01:20.154]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:01:20.154]      __var isProduction = 0;
[05:01:20.154]        // -> [isProduction <= 0x00000000]
[05:01:20.154]      __var continueId = 0;
[05:01:20.154]        // -> [continueId <= 0x00000000]
[05:01:20.154]      deviceID =   Read32(0x41C40004);
[05:01:20.164]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:01:20.164]        // -> [deviceID <= 0x2BB8802F]
[05:01:20.164]      version = deviceID >> 28;
[05:01:20.164]        // -> [version <= 0x00000002]
[05:01:20.164]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:01:20.164]        // -> [partNum <= 0x0000BB88]
[05:01:20.164]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:01:20.164]        // -> [manuf <= 0x00000017]
[05:01:20.164]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:01:20.164]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:01:20.164]      isProduction = (version > 0);
[05:01:20.164]        // -> [isProduction <= 0x00000001]
[05:01:20.164]    </block>
[05:01:20.164]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:01:20.164]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:01:20.164]        // =>  FALSE
[05:01:20.164]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:01:20.164]    </control>
[05:01:20.164]    <control if="continueId == 4" while="" timeout="0" info="">
[05:01:20.164]      // if-block "continueId == 4"
[05:01:20.164]        // =>  FALSE
[05:01:20.164]      // skip if-block "continueId == 4"
[05:01:20.164]    </control>
[05:01:20.164]    <control if="!isProduction" while="" timeout="0" info="">
[05:01:20.164]      // if-block "!isProduction"
[05:01:20.164]        // =>  FALSE
[05:01:20.164]      // skip if-block "!isProduction"
[05:01:20.164]    </control>
[05:01:20.164]  </sequence>
[05:01:20.164]  
[05:01:25.903]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:01:25.903]  
[05:01:25.917]  <debugvars>
[05:01:25.917]    // Pre-defined
[05:01:25.917]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:01:25.917]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:01:25.917]    __dp=0x00000000
[05:01:25.917]    __ap=0x00000000
[05:01:25.917]    __traceout=0x00000000      (Trace Disabled)
[05:01:25.917]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:01:25.918]    __FlashAddr=0x00000000
[05:01:25.918]    __FlashLen=0x00000000
[05:01:25.918]    __FlashArg=0x00000000
[05:01:25.918]    __FlashOp=0x00000000
[05:01:25.918]    __Result=0x00000000
[05:01:25.918]  </debugvars>
[05:01:25.918]  
[05:01:25.918]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:01:25.918]    <block atomic="false" info="">
[05:01:25.918]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:01:25.918]        // -> [isSWJ <= 0x00000001]
[05:01:25.918]      __var hasDormant = __protocol & 0x00020000;
[05:01:25.918]        // -> [hasDormant <= 0x00000000]
[05:01:25.918]      __var protType   = __protocol & 0x0000FFFF;
[05:01:25.918]        // -> [protType <= 0x00000002]
[05:01:25.918]    </block>
[05:01:25.918]    <control if="protType == 1" while="" timeout="0" info="">
[05:01:25.918]      // if-block "protType == 1"
[05:01:25.918]        // =>  FALSE
[05:01:25.918]      // skip if-block "protType == 1"
[05:01:25.918]    </control>
[05:01:25.918]    <control if="protType == 2" while="" timeout="0" info="">
[05:01:25.918]      // if-block "protType == 2"
[05:01:25.918]        // =>  TRUE
[05:01:25.918]      <control if="isSWJ" while="" timeout="0" info="">
[05:01:25.918]        // if-block "isSWJ"
[05:01:25.918]          // =>  TRUE
[05:01:25.918]        <control if="hasDormant" while="" timeout="0" info="">
[05:01:25.918]          // if-block "hasDormant"
[05:01:25.918]            // =>  FALSE
[05:01:25.918]          // skip if-block "hasDormant"
[05:01:25.918]        </control>
[05:01:25.918]        <control if="!hasDormant" while="" timeout="0" info="">
[05:01:25.918]          // if-block "!hasDormant"
[05:01:25.918]            // =>  TRUE
[05:01:25.918]          <block atomic="false" info="">
[05:01:25.918]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:01:25.923]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:01:25.923]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:01:25.926]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:01:25.926]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:01:25.928]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:01:25.928]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:01:25.930]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:01:25.930]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:01:25.932]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:01:25.932]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:01:25.933]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:01:25.933]          </block>
[05:01:25.933]          // end if-block "!hasDormant"
[05:01:25.933]        </control>
[05:01:25.933]        // end if-block "isSWJ"
[05:01:25.933]      </control>
[05:01:25.933]      <control if="!isSWJ" while="" timeout="0" info="">
[05:01:25.933]        // if-block "!isSWJ"
[05:01:25.933]          // =>  FALSE
[05:01:25.933]        // skip if-block "!isSWJ"
[05:01:25.933]      </control>
[05:01:25.933]      <block atomic="false" info="">
[05:01:25.933]        ReadDP(0x0);
[05:01:25.936]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:01:25.936]      </block>
[05:01:25.936]      // end if-block "protType == 2"
[05:01:25.936]    </control>
[05:01:25.936]  </sequence>
[05:01:25.936]  
[05:01:25.936]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:01:25.936]  
[05:01:25.936]  <debugvars>
[05:01:25.936]    // Pre-defined
[05:01:25.936]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:01:25.936]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:01:25.936]    __dp=0x00000000
[05:01:25.936]    __ap=0x00000000
[05:01:25.936]    __traceout=0x00000000      (Trace Disabled)
[05:01:25.936]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:01:25.936]    __FlashAddr=0x00000000
[05:01:25.936]    __FlashLen=0x00000000
[05:01:25.936]    __FlashArg=0x00000000
[05:01:25.936]    __FlashOp=0x00000000
[05:01:25.936]    __Result=0x00000000
[05:01:25.936]  </debugvars>
[05:01:25.936]  
[05:01:25.936]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:01:25.936]    <block atomic="false" info="">
[05:01:25.936]      __var SW_DP_ABORT       = 0x0;
[05:01:25.936]        // -> [SW_DP_ABORT <= 0x00000000]
[05:01:25.936]      __var DP_CTRL_STAT      = 0x4;
[05:01:25.936]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:01:25.936]      __var DP_SELECT         = 0x8;
[05:01:25.936]        // -> [DP_SELECT <= 0x00000008]
[05:01:25.936]      __var powered_down      = 0;
[05:01:25.936]        // -> [powered_down <= 0x00000000]
[05:01:25.936]      WriteDP(DP_SELECT, 0x00000000);
[05:01:25.945]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:01:25.945]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:01:25.945]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:01:25.945]        // -> [powered_down <= 0x00000001]
[05:01:25.945]    </block>
[05:01:25.945]    <control if="powered_down" while="" timeout="0" info="">
[05:01:25.945]      // if-block "powered_down"
[05:01:25.945]        // =>  TRUE
[05:01:25.945]      <block atomic="false" info="">
[05:01:25.945]        Message(0, "Debug/System power-up request sent");
[05:01:25.945]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:01:25.945]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:01:25.945]      </block>
[05:01:25.953]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:01:25.953]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:01:25.954]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:01:25.954]        // while-condition  =>  FALSE
[05:01:25.954]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:01:25.954]      </control>
[05:01:25.954]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:01:25.954]        // if-block "(__protocol & 0xFFFF) == 1"
[05:01:25.954]          // =>  FALSE
[05:01:25.954]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:01:25.954]      </control>
[05:01:25.954]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:01:25.955]        // if-block "(__protocol & 0xFFFF) == 2"
[05:01:25.955]          // =>  TRUE
[05:01:25.955]        <block atomic="false" info="">
[05:01:25.955]          Message(0, "executing SWD power up");
[05:01:25.956]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:01:25.958]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:01:25.959]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:01:25.960]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:01:25.960]        </block>
[05:01:25.960]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:01:25.961]      </control>
[05:01:25.961]      // end if-block "powered_down"
[05:01:25.961]    </control>
[05:01:25.961]    <block atomic="false" info="">
[05:01:25.961]      __var DEBUG_PORT_VAL    = 0;
[05:01:25.961]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:01:25.961]      __var ACCESS_POINT_VAL  = 0;
[05:01:25.962]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:01:25.962]      __ap = 1; 
[05:01:25.962]        // -> [__ap <= 0x00000001]
[05:01:25.962]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:01:25.964]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:01:25.964]      __ap = 4;
[05:01:25.964]        // -> [__ap <= 0x00000004]
[05:01:25.964]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:01:25.967]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:01:25.967]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:01:25.967]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:01:25.967]    </block>
[05:01:25.967]    <block atomic="false" info="">
[05:01:25.967]      __var nReset = 0x80;
[05:01:25.967]        // -> [nReset <= 0x00000080]
[05:01:25.967]      __var canReadPins = 0;
[05:01:25.967]        // -> [canReadPins <= 0x00000000]
[05:01:25.967]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:01:25.967]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:01:25.967]        // -> [canReadPins <= 0x00000001]
[05:01:25.967]    </block>
[05:01:25.967]    <control if="" while="1" timeout="200" info="">
[05:01:25.967]      // while "1"  (timeout="200")
[05:01:25.967]      // while-condition  =>  TRUE
[05:01:25.967]      // while "1"  (timeout="200")
[05:01:25.967]      // while-condition  =>  TRUE
[05:01:25.967]      // while "1"  (timeout="200")
[05:01:25.967]      // while-condition  =>  TRUE
[05:01:25.974]      // while "1"  (timeout="200")
[05:01:25.974]      // while  =>  TIMEOUT
[05:01:25.974]      // end while "1"
[05:01:25.974]    </control>
[05:01:25.974]    <control if="canReadPins" while="" timeout="0" info="">
[05:01:25.974]      // if-block "canReadPins"
[05:01:25.974]        // =>  TRUE
[05:01:25.974]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:01:25.974]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:01:25.974]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:01:25.974]        // while-condition  =>  FALSE
[05:01:25.974]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:01:25.974]      </control>
[05:01:25.974]      // end if-block "canReadPins"
[05:01:25.974]    </control>
[05:01:25.974]    <control if="!canReadPins" while="" timeout="0" info="">
[05:01:25.974]      // if-block "!canReadPins"
[05:01:25.974]        // =>  FALSE
[05:01:25.974]      // skip if-block "!canReadPins"
[05:01:25.974]    </control>
[05:01:25.974]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:01:25.974]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:01:25.974]        // =>  TRUE
[05:01:25.974]      <block atomic="false" info="">
[05:01:25.974]        WriteAP(0x00, 0x190008);
[05:01:25.974]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:01:25.974]        WriteAP(0xF0, 0x01);
[05:01:25.985]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:01:25.985]      </block>
[05:01:25.985]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:01:25.985]    </control>
[05:01:25.985]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:01:25.985]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:01:25.985]        // =>  FALSE
[05:01:25.985]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:01:25.985]    </control>
[05:01:25.985]    <block atomic="false" info="">
[05:01:25.985]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:01:25.991]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:01:25.991]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:01:25.991]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:01:25.992]      __ap = 0; //lets make sure we reset the access point selection
[05:01:25.992]        // -> [__ap <= 0x00000000]
[05:01:25.992]    </block>
[05:01:25.992]  </sequence>
[05:01:25.993]  
[05:01:26.013]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:01:26.013]  
[05:01:26.013]  <debugvars>
[05:01:26.013]    // Pre-defined
[05:01:26.013]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:01:26.013]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:01:26.013]    __dp=0x00000000
[05:01:26.015]    __ap=0x00000000
[05:01:26.015]    __traceout=0x00000000      (Trace Disabled)
[05:01:26.015]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:01:26.015]    __FlashAddr=0x00000000
[05:01:26.015]    __FlashLen=0x00000000
[05:01:26.015]    __FlashArg=0x00000000
[05:01:26.015]    __FlashOp=0x00000000
[05:01:26.015]    __Result=0x00000000
[05:01:26.015]  </debugvars>
[05:01:26.015]  
[05:01:26.015]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:01:26.015]    <block atomic="false" info="">
[05:01:26.015]      __var deviceID = 0;
[05:01:26.016]        // -> [deviceID <= 0x00000000]
[05:01:26.016]      __var version = 0;
[05:01:26.016]        // -> [version <= 0x00000000]
[05:01:26.016]      __var partNum = 0;
[05:01:26.016]        // -> [partNum <= 0x00000000]
[05:01:26.016]      __var manuf = 0;
[05:01:26.016]        // -> [manuf <= 0x00000000]
[05:01:26.016]      __var isMSPM0G1X0X_G3X0X = 0;
[05:01:26.016]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:01:26.016]      __var isProduction = 0;
[05:01:26.016]        // -> [isProduction <= 0x00000000]
[05:01:26.016]      __var continueId = 0;
[05:01:26.016]        // -> [continueId <= 0x00000000]
[05:01:26.016]      deviceID =   Read32(0x41C40004);
[05:01:26.022]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:01:26.022]        // -> [deviceID <= 0x2BB8802F]
[05:01:26.022]      version = deviceID >> 28;
[05:01:26.022]        // -> [version <= 0x00000002]
[05:01:26.024]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:01:26.024]        // -> [partNum <= 0x0000BB88]
[05:01:26.024]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:01:26.024]        // -> [manuf <= 0x00000017]
[05:01:26.024]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:01:26.024]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:01:26.024]      isProduction = (version > 0);
[05:01:26.024]        // -> [isProduction <= 0x00000001]
[05:01:26.024]    </block>
[05:01:26.024]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:01:26.024]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:01:26.024]        // =>  FALSE
[05:01:26.024]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:01:26.024]    </control>
[05:01:26.024]    <control if="continueId == 4" while="" timeout="0" info="">
[05:01:26.024]      // if-block "continueId == 4"
[05:01:26.024]        // =>  FALSE
[05:01:26.025]      // skip if-block "continueId == 4"
[05:01:26.025]    </control>
[05:01:26.025]    <control if="!isProduction" while="" timeout="0" info="">
[05:01:26.025]      // if-block "!isProduction"
[05:01:26.025]        // =>  FALSE
[05:01:26.025]      // skip if-block "!isProduction"
[05:01:26.025]    </control>
[05:01:26.025]  </sequence>
[05:01:26.025]  
[05:11:06.384]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:11:06.384]  
[05:11:06.394]  <debugvars>
[05:11:06.394]    // Pre-defined
[05:11:06.394]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:11:06.394]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:11:06.394]    __dp=0x00000000
[05:11:06.394]    __ap=0x00000000
[05:11:06.394]    __traceout=0x00000000      (Trace Disabled)
[05:11:06.394]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:11:06.394]    __FlashAddr=0x00000000
[05:11:06.394]    __FlashLen=0x00000000
[05:11:06.394]    __FlashArg=0x00000000
[05:11:06.394]    __FlashOp=0x00000000
[05:11:06.394]    __Result=0x00000000
[05:11:06.394]  </debugvars>
[05:11:06.394]  
[05:11:06.394]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:11:06.394]    <block atomic="false" info="">
[05:11:06.394]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:11:06.394]        // -> [isSWJ <= 0x00000001]
[05:11:06.394]      __var hasDormant = __protocol & 0x00020000;
[05:11:06.394]        // -> [hasDormant <= 0x00000000]
[05:11:06.394]      __var protType   = __protocol & 0x0000FFFF;
[05:11:06.394]        // -> [protType <= 0x00000002]
[05:11:06.394]    </block>
[05:11:06.394]    <control if="protType == 1" while="" timeout="0" info="">
[05:11:06.394]      // if-block "protType == 1"
[05:11:06.394]        // =>  FALSE
[05:11:06.394]      // skip if-block "protType == 1"
[05:11:06.394]    </control>
[05:11:06.394]    <control if="protType == 2" while="" timeout="0" info="">
[05:11:06.394]      // if-block "protType == 2"
[05:11:06.394]        // =>  TRUE
[05:11:06.394]      <control if="isSWJ" while="" timeout="0" info="">
[05:11:06.394]        // if-block "isSWJ"
[05:11:06.394]          // =>  TRUE
[05:11:06.394]        <control if="hasDormant" while="" timeout="0" info="">
[05:11:06.394]          // if-block "hasDormant"
[05:11:06.394]            // =>  FALSE
[05:11:06.394]          // skip if-block "hasDormant"
[05:11:06.394]        </control>
[05:11:06.394]        <control if="!hasDormant" while="" timeout="0" info="">
[05:11:06.399]          // if-block "!hasDormant"
[05:11:06.399]            // =>  TRUE
[05:11:06.399]          <block atomic="false" info="">
[05:11:06.399]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:11:06.400]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:11:06.400]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:11:06.400]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:11:06.400]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:11:06.400]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:11:06.400]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:11:06.400]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:11:06.400]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:11:06.400]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:11:06.400]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:11:06.400]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:11:06.400]          </block>
[05:11:06.400]          // end if-block "!hasDormant"
[05:11:06.410]        </control>
[05:11:06.410]        // end if-block "isSWJ"
[05:11:06.410]      </control>
[05:11:06.410]      <control if="!isSWJ" while="" timeout="0" info="">
[05:11:06.410]        // if-block "!isSWJ"
[05:11:06.410]          // =>  FALSE
[05:11:06.410]        // skip if-block "!isSWJ"
[05:11:06.410]      </control>
[05:11:06.410]      <block atomic="false" info="">
[05:11:06.410]        ReadDP(0x0);
[05:11:06.410]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:11:06.410]      </block>
[05:11:06.410]      // end if-block "protType == 2"
[05:11:06.410]    </control>
[05:11:06.410]  </sequence>
[05:11:06.410]  
[05:11:06.410]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:11:06.410]  
[05:11:06.410]  <debugvars>
[05:11:06.410]    // Pre-defined
[05:11:06.410]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:11:06.410]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:11:06.410]    __dp=0x00000000
[05:11:06.410]    __ap=0x00000000
[05:11:06.410]    __traceout=0x00000000      (Trace Disabled)
[05:11:06.410]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:11:06.410]    __FlashAddr=0x00000000
[05:11:06.410]    __FlashLen=0x00000000
[05:11:06.410]    __FlashArg=0x00000000
[05:11:06.410]    __FlashOp=0x00000000
[05:11:06.417]    __Result=0x00000000
[05:11:06.417]  </debugvars>
[05:11:06.417]  
[05:11:06.417]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:11:06.417]    <block atomic="false" info="">
[05:11:06.417]      __var SW_DP_ABORT       = 0x0;
[05:11:06.417]        // -> [SW_DP_ABORT <= 0x00000000]
[05:11:06.417]      __var DP_CTRL_STAT      = 0x4;
[05:11:06.417]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:11:06.417]      __var DP_SELECT         = 0x8;
[05:11:06.417]        // -> [DP_SELECT <= 0x00000008]
[05:11:06.417]      __var powered_down      = 0;
[05:11:06.417]        // -> [powered_down <= 0x00000000]
[05:11:06.417]      WriteDP(DP_SELECT, 0x00000000);
[05:11:06.420]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:11:06.420]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:11:06.422]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:11:06.422]        // -> [powered_down <= 0x00000001]
[05:11:06.422]    </block>
[05:11:06.422]    <control if="powered_down" while="" timeout="0" info="">
[05:11:06.422]      // if-block "powered_down"
[05:11:06.422]        // =>  TRUE
[05:11:06.422]      <block atomic="false" info="">
[05:11:06.422]        Message(0, "Debug/System power-up request sent");
[05:11:06.422]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:11:06.422]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:11:06.422]      </block>
[05:11:06.422]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:11:06.422]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:11:06.422]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:11:06.422]        // while-condition  =>  FALSE
[05:11:06.422]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:11:06.422]      </control>
[05:11:06.422]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:11:06.429]        // if-block "(__protocol & 0xFFFF) == 1"
[05:11:06.429]          // =>  FALSE
[05:11:06.429]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:11:06.429]      </control>
[05:11:06.429]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:11:06.429]        // if-block "(__protocol & 0xFFFF) == 2"
[05:11:06.429]          // =>  TRUE
[05:11:06.429]        <block atomic="false" info="">
[05:11:06.429]          Message(0, "executing SWD power up");
[05:11:06.429]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:11:06.429]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:11:06.429]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:11:06.429]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:11:06.429]        </block>
[05:11:06.429]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:11:06.429]      </control>
[05:11:06.429]      // end if-block "powered_down"
[05:11:06.429]    </control>
[05:11:06.429]    <block atomic="false" info="">
[05:11:06.429]      __var DEBUG_PORT_VAL    = 0;
[05:11:06.429]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:11:06.429]      __var ACCESS_POINT_VAL  = 0;
[05:11:06.429]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:11:06.429]      __ap = 1; 
[05:11:06.429]        // -> [__ap <= 0x00000001]
[05:11:06.429]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:11:06.440]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:11:06.440]      __ap = 4;
[05:11:06.440]        // -> [__ap <= 0x00000004]
[05:11:06.440]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:11:06.440]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:11:06.440]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:11:06.440]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:11:06.440]    </block>
[05:11:06.440]    <block atomic="false" info="">
[05:11:06.440]      __var nReset = 0x80;
[05:11:06.440]        // -> [nReset <= 0x00000080]
[05:11:06.440]      __var canReadPins = 0;
[05:11:06.440]        // -> [canReadPins <= 0x00000000]
[05:11:06.440]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:11:06.449]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:11:06.449]        // -> [canReadPins <= 0x00000001]
[05:11:06.449]    </block>
[05:11:06.449]    <control if="" while="1" timeout="200" info="">
[05:11:06.449]      // while "1"  (timeout="200")
[05:11:06.449]      // while-condition  =>  TRUE
[05:11:06.449]      // while "1"  (timeout="200")
[05:11:06.449]      // while-condition  =>  TRUE
[05:11:06.449]      // while "1"  (timeout="200")
[05:11:06.449]      // while-condition  =>  TRUE
[05:11:06.449]      // while "1"  (timeout="200")
[05:11:06.449]      // while-condition  =>  TRUE
[05:11:06.451]      // while "1"  (timeout="200")
[05:11:06.451]      // while-condition  =>  TRUE
[05:11:06.451]      // while "1"  (timeout="200")
[05:11:06.451]      // while-condition  =>  TRUE
[05:11:06.451]      // while "1"  (timeout="200")
[05:11:06.451]      // while-condition  =>  TRUE
[05:11:06.451]      // while "1"  (timeout="200")
[05:11:06.451]      // while-condition  =>  TRUE
[05:11:06.451]      // while "1"  (timeout="200")
[05:11:06.451]      // while-condition  =>  TRUE
[05:11:06.451]      // while "1"  (timeout="200")
[05:11:06.451]      // while-condition  =>  TRUE
[05:11:06.451]      // while "1"  (timeout="200")
[05:11:06.451]      // while-condition  =>  TRUE
[05:11:06.451]      // while "1"  (timeout="200")
[05:11:06.451]      // while-condition  =>  TRUE
[05:11:06.451]      // while "1"  (timeout="200")
[05:11:06.451]      // while-condition  =>  TRUE
[05:11:06.451]      // while "1"  (timeout="200")
[05:11:06.451]      // while-condition  =>  TRUE
[05:11:06.454]      // while "1"  (timeout="200")
[05:11:06.454]      // while-condition  =>  TRUE
[05:11:06.454]      // while "1"  (timeout="200")
[05:11:06.454]      // while-condition  =>  TRUE
[05:11:06.454]      // while "1"  (timeout="200")
[05:11:06.454]      // while-condition  =>  TRUE
[05:11:06.454]      // while "1"  (timeout="200")
[05:11:06.454]      // while-condition  =>  TRUE
[05:11:06.454]      // while "1"  (timeout="200")
[05:11:06.454]      // while-condition  =>  TRUE
[05:11:06.454]      // while "1"  (timeout="200")
[05:11:06.454]      // while-condition  =>  TRUE
[05:11:06.455]      // while "1"  (timeout="200")
[05:11:06.455]      // while-condition  =>  TRUE
[05:11:06.455]      // while "1"  (timeout="200")
[05:11:06.455]      // while-condition  =>  TRUE
[05:11:06.455]      // while "1"  (timeout="200")
[05:11:06.455]      // while-condition  =>  TRUE
[05:11:06.455]      // while "1"  (timeout="200")
[05:11:06.455]      // while-condition  =>  TRUE
[05:11:06.455]      // while "1"  (timeout="200")
[05:11:06.455]      // while-condition  =>  TRUE
[05:11:06.455]      // while "1"  (timeout="200")
[05:11:06.455]      // while-condition  =>  TRUE
[05:11:06.455]      // while "1"  (timeout="200")
[05:11:06.455]      // while-condition  =>  TRUE
[05:11:06.455]      // while "1"  (timeout="200")
[05:11:06.455]      // while-condition  =>  TRUE
[05:11:06.455]      // while "1"  (timeout="200")
[05:11:06.455]      // while-condition  =>  TRUE
[05:11:06.455]      // while "1"  (timeout="200")
[05:11:06.455]      // while-condition  =>  TRUE
[05:11:06.457]      // while "1"  (timeout="200")
[05:11:06.457]      // while  =>  TIMEOUT
[05:11:06.457]      // end while "1"
[05:11:06.457]    </control>
[05:11:06.457]    <control if="canReadPins" while="" timeout="0" info="">
[05:11:06.457]      // if-block "canReadPins"
[05:11:06.457]        // =>  TRUE
[05:11:06.457]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:11:06.457]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:11:06.458]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:11:06.458]        // while-condition  =>  FALSE
[05:11:06.458]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:11:06.459]      </control>
[05:11:06.460]      // end if-block "canReadPins"
[05:11:06.460]    </control>
[05:11:06.460]    <control if="!canReadPins" while="" timeout="0" info="">
[05:11:06.460]      // if-block "!canReadPins"
[05:11:06.460]        // =>  FALSE
[05:11:06.460]      // skip if-block "!canReadPins"
[05:11:06.460]    </control>
[05:11:06.460]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:11:06.460]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:11:06.460]        // =>  TRUE
[05:11:06.460]      <block atomic="false" info="">
[05:11:06.460]        WriteAP(0x00, 0x190008);
[05:11:06.461]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:11:06.463]        WriteAP(0xF0, 0x01);
[05:11:06.465]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:11:06.465]      </block>
[05:11:06.465]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:11:06.465]    </control>
[05:11:06.465]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:11:06.466]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:11:06.466]        // =>  FALSE
[05:11:06.466]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:11:06.466]    </control>
[05:11:06.466]    <block atomic="false" info="">
[05:11:06.466]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:11:06.469]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:11:06.469]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:11:06.469]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:11:06.471]      __ap = 0; //lets make sure we reset the access point selection
[05:11:06.471]        // -> [__ap <= 0x00000000]
[05:11:06.471]    </block>
[05:11:06.471]  </sequence>
[05:11:06.471]  
[05:11:06.491]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:11:06.491]  
[05:11:06.491]  <debugvars>
[05:11:06.491]    // Pre-defined
[05:11:06.491]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:11:06.491]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:11:06.491]    __dp=0x00000000
[05:11:06.491]    __ap=0x00000000
[05:11:06.491]    __traceout=0x00000000      (Trace Disabled)
[05:11:06.491]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:11:06.491]    __FlashAddr=0x00000000
[05:11:06.491]    __FlashLen=0x00000000
[05:11:06.491]    __FlashArg=0x00000000
[05:11:06.491]    __FlashOp=0x00000000
[05:11:06.491]    __Result=0x00000000
[05:11:06.491]  </debugvars>
[05:11:06.491]  
[05:11:06.491]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:11:06.491]    <block atomic="false" info="">
[05:11:06.491]      __var deviceID = 0;
[05:11:06.491]        // -> [deviceID <= 0x00000000]
[05:11:06.491]      __var version = 0;
[05:11:06.491]        // -> [version <= 0x00000000]
[05:11:06.491]      __var partNum = 0;
[05:11:06.491]        // -> [partNum <= 0x00000000]
[05:11:06.491]      __var manuf = 0;
[05:11:06.491]        // -> [manuf <= 0x00000000]
[05:11:06.491]      __var isMSPM0G1X0X_G3X0X = 0;
[05:11:06.491]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:11:06.491]      __var isProduction = 0;
[05:11:06.491]        // -> [isProduction <= 0x00000000]
[05:11:06.491]      __var continueId = 0;
[05:11:06.491]        // -> [continueId <= 0x00000000]
[05:11:06.491]      deviceID =   Read32(0x41C40004);
[05:11:06.500]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:11:06.500]        // -> [deviceID <= 0x2BB8802F]
[05:11:06.500]      version = deviceID >> 28;
[05:11:06.500]        // -> [version <= 0x00000002]
[05:11:06.500]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:11:06.500]        // -> [partNum <= 0x0000BB88]
[05:11:06.500]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:11:06.500]        // -> [manuf <= 0x00000017]
[05:11:06.500]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:11:06.500]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:11:06.500]      isProduction = (version > 0);
[05:11:06.500]        // -> [isProduction <= 0x00000001]
[05:11:06.500]    </block>
[05:11:06.500]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:11:06.500]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:11:06.505]        // =>  FALSE
[05:11:06.505]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:11:06.505]    </control>
[05:11:06.505]    <control if="continueId == 4" while="" timeout="0" info="">
[05:11:06.505]      // if-block "continueId == 4"
[05:11:06.505]        // =>  FALSE
[05:11:06.505]      // skip if-block "continueId == 4"
[05:11:06.505]    </control>
[05:11:06.505]    <control if="!isProduction" while="" timeout="0" info="">
[05:11:06.505]      // if-block "!isProduction"
[05:11:06.505]        // =>  FALSE
[05:11:06.505]      // skip if-block "!isProduction"
[05:11:06.505]    </control>
[05:11:06.505]  </sequence>
[05:11:06.505]  
[05:11:12.032]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:11:12.032]  
[05:11:12.032]  <debugvars>
[05:11:12.032]    // Pre-defined
[05:11:12.032]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:11:12.032]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:11:12.032]    __dp=0x00000000
[05:11:12.032]    __ap=0x00000000
[05:11:12.032]    __traceout=0x00000000      (Trace Disabled)
[05:11:12.032]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:11:12.032]    __FlashAddr=0x00000000
[05:11:12.032]    __FlashLen=0x00000000
[05:11:12.032]    __FlashArg=0x00000000
[05:11:12.032]    __FlashOp=0x00000000
[05:11:12.032]    __Result=0x00000000
[05:11:12.032]  </debugvars>
[05:11:12.032]  
[05:11:12.032]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:11:12.032]    <block atomic="false" info="">
[05:11:12.032]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:11:12.032]        // -> [isSWJ <= 0x00000001]
[05:11:12.032]      __var hasDormant = __protocol & 0x00020000;
[05:11:12.032]        // -> [hasDormant <= 0x00000000]
[05:11:12.032]      __var protType   = __protocol & 0x0000FFFF;
[05:11:12.032]        // -> [protType <= 0x00000002]
[05:11:12.032]    </block>
[05:11:12.032]    <control if="protType == 1" while="" timeout="0" info="">
[05:11:12.032]      // if-block "protType == 1"
[05:11:12.032]        // =>  FALSE
[05:11:12.032]      // skip if-block "protType == 1"
[05:11:12.032]    </control>
[05:11:12.032]    <control if="protType == 2" while="" timeout="0" info="">
[05:11:12.039]      // if-block "protType == 2"
[05:11:12.039]        // =>  TRUE
[05:11:12.039]      <control if="isSWJ" while="" timeout="0" info="">
[05:11:12.039]        // if-block "isSWJ"
[05:11:12.039]          // =>  TRUE
[05:11:12.039]        <control if="hasDormant" while="" timeout="0" info="">
[05:11:12.039]          // if-block "hasDormant"
[05:11:12.039]            // =>  FALSE
[05:11:12.039]          // skip if-block "hasDormant"
[05:11:12.039]        </control>
[05:11:12.039]        <control if="!hasDormant" while="" timeout="0" info="">
[05:11:12.039]          // if-block "!hasDormant"
[05:11:12.039]            // =>  TRUE
[05:11:12.039]          <block atomic="false" info="">
[05:11:12.039]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:11:12.043]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:11:12.043]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:11:12.044]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:11:12.044]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:11:12.044]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:11:12.044]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:11:12.044]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:11:12.044]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:11:12.044]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:11:12.044]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:11:12.044]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:11:12.044]          </block>
[05:11:12.044]          // end if-block "!hasDormant"
[05:11:12.044]        </control>
[05:11:12.044]        // end if-block "isSWJ"
[05:11:12.044]      </control>
[05:11:12.044]      <control if="!isSWJ" while="" timeout="0" info="">
[05:11:12.052]        // if-block "!isSWJ"
[05:11:12.052]          // =>  FALSE
[05:11:12.052]        // skip if-block "!isSWJ"
[05:11:12.052]      </control>
[05:11:12.052]      <block atomic="false" info="">
[05:11:12.052]        ReadDP(0x0);
[05:11:12.054]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:11:12.054]      </block>
[05:11:12.054]      // end if-block "protType == 2"
[05:11:12.054]    </control>
[05:11:12.054]  </sequence>
[05:11:12.054]  
[05:11:12.058]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:11:12.058]  
[05:11:12.058]  <debugvars>
[05:11:12.058]    // Pre-defined
[05:11:12.058]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:11:12.058]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:11:12.058]    __dp=0x00000000
[05:11:12.058]    __ap=0x00000000
[05:11:12.058]    __traceout=0x00000000      (Trace Disabled)
[05:11:12.058]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:11:12.058]    __FlashAddr=0x00000000
[05:11:12.058]    __FlashLen=0x00000000
[05:11:12.058]    __FlashArg=0x00000000
[05:11:12.058]    __FlashOp=0x00000000
[05:11:12.058]    __Result=0x00000000
[05:11:12.058]  </debugvars>
[05:11:12.058]  
[05:11:12.058]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:11:12.058]    <block atomic="false" info="">
[05:11:12.062]      __var SW_DP_ABORT       = 0x0;
[05:11:12.062]        // -> [SW_DP_ABORT <= 0x00000000]
[05:11:12.063]      __var DP_CTRL_STAT      = 0x4;
[05:11:12.063]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:11:12.063]      __var DP_SELECT         = 0x8;
[05:11:12.063]        // -> [DP_SELECT <= 0x00000008]
[05:11:12.063]      __var powered_down      = 0;
[05:11:12.063]        // -> [powered_down <= 0x00000000]
[05:11:12.063]      WriteDP(DP_SELECT, 0x00000000);
[05:11:12.065]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:11:12.065]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:11:12.065]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:11:12.065]        // -> [powered_down <= 0x00000001]
[05:11:12.065]    </block>
[05:11:12.065]    <control if="powered_down" while="" timeout="0" info="">
[05:11:12.065]      // if-block "powered_down"
[05:11:12.065]        // =>  TRUE
[05:11:12.065]      <block atomic="false" info="">
[05:11:12.065]        Message(0, "Debug/System power-up request sent");
[05:11:12.065]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:11:12.071]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:11:12.071]      </block>
[05:11:12.071]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:11:12.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:11:12.073]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:11:12.073]        // while-condition  =>  FALSE
[05:11:12.073]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:11:12.073]      </control>
[05:11:12.073]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:11:12.073]        // if-block "(__protocol & 0xFFFF) == 1"
[05:11:12.073]          // =>  FALSE
[05:11:12.073]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:11:12.073]      </control>
[05:11:12.073]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:11:12.073]        // if-block "(__protocol & 0xFFFF) == 2"
[05:11:12.073]          // =>  TRUE
[05:11:12.074]        <block atomic="false" info="">
[05:11:12.074]          Message(0, "executing SWD power up");
[05:11:12.074]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:11:12.074]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:11:12.074]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:11:12.074]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:11:12.074]        </block>
[05:11:12.074]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:11:12.074]      </control>
[05:11:12.074]      // end if-block "powered_down"
[05:11:12.074]    </control>
[05:11:12.074]    <block atomic="false" info="">
[05:11:12.074]      __var DEBUG_PORT_VAL    = 0;
[05:11:12.074]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:11:12.074]      __var ACCESS_POINT_VAL  = 0;
[05:11:12.074]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:11:12.074]      __ap = 1; 
[05:11:12.074]        // -> [__ap <= 0x00000001]
[05:11:12.074]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:11:12.083]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:11:12.083]      __ap = 4;
[05:11:12.083]        // -> [__ap <= 0x00000004]
[05:11:12.083]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:11:12.088]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:11:12.088]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:11:12.088]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:11:12.088]    </block>
[05:11:12.088]    <block atomic="false" info="">
[05:11:12.090]      __var nReset = 0x80;
[05:11:12.090]        // -> [nReset <= 0x00000080]
[05:11:12.090]      __var canReadPins = 0;
[05:11:12.090]        // -> [canReadPins <= 0x00000000]
[05:11:12.090]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:11:12.092]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:11:12.092]        // -> [canReadPins <= 0x00000001]
[05:11:12.092]    </block>
[05:11:12.092]    <control if="" while="1" timeout="200" info="">
[05:11:12.092]      // while "1"  (timeout="200")
[05:11:12.092]      // while-condition  =>  TRUE
[05:11:12.092]      // while "1"  (timeout="200")
[05:11:12.093]      // while-condition  =>  TRUE
[05:11:12.093]      // while "1"  (timeout="200")
[05:11:12.093]      // while-condition  =>  TRUE
[05:11:12.093]      // while "1"  (timeout="200")
[05:11:12.093]      // while-condition  =>  TRUE
[05:11:12.093]      // while "1"  (timeout="200")
[05:11:12.093]      // while-condition  =>  TRUE
[05:11:12.093]      // while "1"  (timeout="200")
[05:11:12.093]      // while-condition  =>  TRUE
[05:11:12.093]      // while "1"  (timeout="200")
[05:11:12.093]      // while-condition  =>  TRUE
[05:11:12.095]      // while "1"  (timeout="200")
[05:11:12.095]      // while-condition  =>  TRUE
[05:11:12.095]      // while "1"  (timeout="200")
[05:11:12.095]      // while-condition  =>  TRUE
[05:11:12.095]      // while "1"  (timeout="200")
[05:11:12.095]      // while-condition  =>  TRUE
[05:11:12.095]      // while "1"  (timeout="200")
[05:11:12.095]      // while-condition  =>  TRUE
[05:11:12.095]      // while "1"  (timeout="200")
[05:11:12.095]      // while-condition  =>  TRUE
[05:11:12.095]      // while "1"  (timeout="200")
[05:11:12.095]      // while-condition  =>  TRUE
[05:11:12.095]      // while "1"  (timeout="200")
[05:11:12.095]      // while-condition  =>  TRUE
[05:11:12.095]      // while "1"  (timeout="200")
[05:11:12.095]      // while-condition  =>  TRUE
[05:11:12.095]      // while "1"  (timeout="200")
[05:11:12.097]      // while-condition  =>  TRUE
[05:11:12.097]      // while "1"  (timeout="200")
[05:11:12.097]      // while-condition  =>  TRUE
[05:11:12.097]      // while "1"  (timeout="200")
[05:11:12.097]      // while-condition  =>  TRUE
[05:11:12.097]      // while "1"  (timeout="200")
[05:11:12.097]      // while-condition  =>  TRUE
[05:11:12.097]      // while "1"  (timeout="200")
[05:11:12.097]      // while-condition  =>  TRUE
[05:11:12.097]      // while "1"  (timeout="200")
[05:11:12.097]      // while-condition  =>  TRUE
[05:11:12.097]      // while "1"  (timeout="200")
[05:11:12.097]      // while-condition  =>  TRUE
[05:11:12.097]      // while "1"  (timeout="200")
[05:11:12.097]      // while-condition  =>  TRUE
[05:11:12.097]      // while "1"  (timeout="200")
[05:11:12.097]      // while-condition  =>  TRUE
[05:11:12.099]      // while "1"  (timeout="200")
[05:11:12.099]      // while  =>  TIMEOUT
[05:11:12.099]      // end while "1"
[05:11:12.099]    </control>
[05:11:12.099]    <control if="canReadPins" while="" timeout="0" info="">
[05:11:12.099]      // if-block "canReadPins"
[05:11:12.099]        // =>  TRUE
[05:11:12.099]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:11:12.099]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:11:12.099]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:11:12.099]        // while-condition  =>  FALSE
[05:11:12.099]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:11:12.099]      </control>
[05:11:12.099]      // end if-block "canReadPins"
[05:11:12.099]    </control>
[05:11:12.099]    <control if="!canReadPins" while="" timeout="0" info="">
[05:11:12.099]      // if-block "!canReadPins"
[05:11:12.099]        // =>  FALSE
[05:11:12.099]      // skip if-block "!canReadPins"
[05:11:12.099]    </control>
[05:11:12.099]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:11:12.099]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:11:12.099]        // =>  TRUE
[05:11:12.099]      <block atomic="false" info="">
[05:11:12.099]        WriteAP(0x00, 0x190008);
[05:11:12.104]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:11:12.104]        WriteAP(0xF0, 0x01);
[05:11:12.106]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:11:12.106]      </block>
[05:11:12.106]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:11:12.106]    </control>
[05:11:12.106]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:11:12.106]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:11:12.106]        // =>  FALSE
[05:11:12.106]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:11:12.106]    </control>
[05:11:12.106]    <block atomic="false" info="">
[05:11:12.106]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:11:12.114]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:11:12.114]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:11:12.114]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:11:12.116]      __ap = 0; //lets make sure we reset the access point selection
[05:11:12.116]        // -> [__ap <= 0x00000000]
[05:11:12.116]    </block>
[05:11:12.116]  </sequence>
[05:11:12.116]  
[05:11:12.134]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:11:12.134]  
[05:11:12.134]  <debugvars>
[05:11:12.134]    // Pre-defined
[05:11:12.134]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:11:12.134]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:11:12.134]    __dp=0x00000000
[05:11:12.134]    __ap=0x00000000
[05:11:12.134]    __traceout=0x00000000      (Trace Disabled)
[05:11:12.134]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:11:12.134]    __FlashAddr=0x00000000
[05:11:12.134]    __FlashLen=0x00000000
[05:11:12.134]    __FlashArg=0x00000000
[05:11:12.134]    __FlashOp=0x00000000
[05:11:12.134]    __Result=0x00000000
[05:11:12.134]  </debugvars>
[05:11:12.134]  
[05:11:12.134]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:11:12.134]    <block atomic="false" info="">
[05:11:12.134]      __var deviceID = 0;
[05:11:12.134]        // -> [deviceID <= 0x00000000]
[05:11:12.134]      __var version = 0;
[05:11:12.134]        // -> [version <= 0x00000000]
[05:11:12.134]      __var partNum = 0;
[05:11:12.134]        // -> [partNum <= 0x00000000]
[05:11:12.134]      __var manuf = 0;
[05:11:12.134]        // -> [manuf <= 0x00000000]
[05:11:12.134]      __var isMSPM0G1X0X_G3X0X = 0;
[05:11:12.134]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:11:12.134]      __var isProduction = 0;
[05:11:12.140]        // -> [isProduction <= 0x00000000]
[05:11:12.140]      __var continueId = 0;
[05:11:12.140]        // -> [continueId <= 0x00000000]
[05:11:12.140]      deviceID =   Read32(0x41C40004);
[05:11:12.145]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:11:12.145]        // -> [deviceID <= 0x2BB8802F]
[05:11:12.145]      version = deviceID >> 28;
[05:11:12.145]        // -> [version <= 0x00000002]
[05:11:12.145]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:11:12.145]        // -> [partNum <= 0x0000BB88]
[05:11:12.145]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:11:12.145]        // -> [manuf <= 0x00000017]
[05:11:12.145]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:11:12.145]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:11:12.145]      isProduction = (version > 0);
[05:11:12.145]        // -> [isProduction <= 0x00000001]
[05:11:12.145]    </block>
[05:11:12.145]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:11:12.145]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:11:12.145]        // =>  FALSE
[05:11:12.145]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:11:12.145]    </control>
[05:11:12.145]    <control if="continueId == 4" while="" timeout="0" info="">
[05:11:12.145]      // if-block "continueId == 4"
[05:11:12.145]        // =>  FALSE
[05:11:12.145]      // skip if-block "continueId == 4"
[05:11:12.145]    </control>
[05:11:12.145]    <control if="!isProduction" while="" timeout="0" info="">
[05:11:12.145]      // if-block "!isProduction"
[05:11:12.149]        // =>  FALSE
[05:11:12.149]      // skip if-block "!isProduction"
[05:11:12.149]    </control>
[05:11:12.149]  </sequence>
[05:11:12.149]  
[05:13:19.593]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:13:19.593]  
[05:13:19.593]  <debugvars>
[05:13:19.593]    // Pre-defined
[05:13:19.593]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:13:19.593]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:13:19.593]    __dp=0x00000000
[05:13:19.593]    __ap=0x00000000
[05:13:19.593]    __traceout=0x00000000      (Trace Disabled)
[05:13:19.593]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:13:19.593]    __FlashAddr=0x00000000
[05:13:19.593]    __FlashLen=0x00000000
[05:13:19.593]    __FlashArg=0x00000000
[05:13:19.593]    __FlashOp=0x00000000
[05:13:19.593]    __Result=0x00000000
[05:13:19.593]  </debugvars>
[05:13:19.593]  
[05:13:19.593]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:13:19.593]    <block atomic="false" info="">
[05:13:19.593]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:13:19.593]        // -> [isSWJ <= 0x00000001]
[05:13:19.593]      __var hasDormant = __protocol & 0x00020000;
[05:13:19.593]        // -> [hasDormant <= 0x00000000]
[05:13:19.593]      __var protType   = __protocol & 0x0000FFFF;
[05:13:19.593]        // -> [protType <= 0x00000002]
[05:13:19.593]    </block>
[05:13:19.599]    <control if="protType == 1" while="" timeout="0" info="">
[05:13:19.599]      // if-block "protType == 1"
[05:13:19.599]        // =>  FALSE
[05:13:19.599]      // skip if-block "protType == 1"
[05:13:19.599]    </control>
[05:13:19.599]    <control if="protType == 2" while="" timeout="0" info="">
[05:13:19.599]      // if-block "protType == 2"
[05:13:19.599]        // =>  TRUE
[05:13:19.599]      <control if="isSWJ" while="" timeout="0" info="">
[05:13:19.599]        // if-block "isSWJ"
[05:13:19.599]          // =>  TRUE
[05:13:19.599]        <control if="hasDormant" while="" timeout="0" info="">
[05:13:19.599]          // if-block "hasDormant"
[05:13:19.599]            // =>  FALSE
[05:13:19.599]          // skip if-block "hasDormant"
[05:13:19.599]        </control>
[05:13:19.599]        <control if="!hasDormant" while="" timeout="0" info="">
[05:13:19.599]          // if-block "!hasDormant"
[05:13:19.599]            // =>  TRUE
[05:13:19.599]          <block atomic="false" info="">
[05:13:19.599]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:13:19.599]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:13:19.599]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:13:19.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:13:19.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:13:19.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:13:19.603]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:13:19.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:13:19.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:13:19.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:13:19.609]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:13:19.609]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:13:19.609]          </block>
[05:13:19.609]          // end if-block "!hasDormant"
[05:13:19.609]        </control>
[05:13:19.609]        // end if-block "isSWJ"
[05:13:19.609]      </control>
[05:13:19.609]      <control if="!isSWJ" while="" timeout="0" info="">
[05:13:19.609]        // if-block "!isSWJ"
[05:13:19.609]          // =>  FALSE
[05:13:19.609]        // skip if-block "!isSWJ"
[05:13:19.609]      </control>
[05:13:19.609]      <block atomic="false" info="">
[05:13:19.609]        ReadDP(0x0);
[05:13:19.613]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:13:19.613]      </block>
[05:13:19.613]      // end if-block "protType == 2"
[05:13:19.613]    </control>
[05:13:19.613]  </sequence>
[05:13:19.613]  
[05:13:19.613]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:13:19.613]  
[05:13:19.613]  <debugvars>
[05:13:19.613]    // Pre-defined
[05:13:19.613]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:13:19.613]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:13:19.613]    __dp=0x00000000
[05:13:19.613]    __ap=0x00000000
[05:13:19.613]    __traceout=0x00000000      (Trace Disabled)
[05:13:19.613]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:13:19.613]    __FlashAddr=0x00000000
[05:13:19.613]    __FlashLen=0x00000000
[05:13:19.613]    __FlashArg=0x00000000
[05:13:19.613]    __FlashOp=0x00000000
[05:13:19.613]    __Result=0x00000000
[05:13:19.613]  </debugvars>
[05:13:19.613]  
[05:13:19.613]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:13:19.613]    <block atomic="false" info="">
[05:13:19.613]      __var SW_DP_ABORT       = 0x0;
[05:13:19.613]        // -> [SW_DP_ABORT <= 0x00000000]
[05:13:19.613]      __var DP_CTRL_STAT      = 0x4;
[05:13:19.613]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:13:19.613]      __var DP_SELECT         = 0x8;
[05:13:19.613]        // -> [DP_SELECT <= 0x00000008]
[05:13:19.613]      __var powered_down      = 0;
[05:13:19.613]        // -> [powered_down <= 0x00000000]
[05:13:19.613]      WriteDP(DP_SELECT, 0x00000000);
[05:13:19.619]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:13:19.619]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:13:19.619]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:13:19.619]        // -> [powered_down <= 0x00000001]
[05:13:19.619]    </block>
[05:13:19.619]    <control if="powered_down" while="" timeout="0" info="">
[05:13:19.619]      // if-block "powered_down"
[05:13:19.619]        // =>  TRUE
[05:13:19.619]      <block atomic="false" info="">
[05:13:19.619]        Message(0, "Debug/System power-up request sent");
[05:13:19.623]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:13:19.623]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:13:19.623]      </block>
[05:13:19.623]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:13:19.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:13:19.629]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:13:19.629]        // while-condition  =>  FALSE
[05:13:19.629]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:13:19.629]      </control>
[05:13:19.629]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:13:19.629]        // if-block "(__protocol & 0xFFFF) == 1"
[05:13:19.629]          // =>  FALSE
[05:13:19.629]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:13:19.629]      </control>
[05:13:19.629]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:13:19.631]        // if-block "(__protocol & 0xFFFF) == 2"
[05:13:19.631]          // =>  TRUE
[05:13:19.631]        <block atomic="false" info="">
[05:13:19.631]          Message(0, "executing SWD power up");
[05:13:19.631]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:13:19.634]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:13:19.634]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:13:19.635]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:13:19.635]        </block>
[05:13:19.635]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:13:19.635]      </control>
[05:13:19.635]      // end if-block "powered_down"
[05:13:19.635]    </control>
[05:13:19.635]    <block atomic="false" info="">
[05:13:19.635]      __var DEBUG_PORT_VAL    = 0;
[05:13:19.635]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:13:19.637]      __var ACCESS_POINT_VAL  = 0;
[05:13:19.637]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:13:19.637]      __ap = 1; 
[05:13:19.637]        // -> [__ap <= 0x00000001]
[05:13:19.637]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:13:19.639]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:13:19.639]      __ap = 4;
[05:13:19.639]        // -> [__ap <= 0x00000004]
[05:13:19.639]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:13:19.644]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:13:19.644]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:13:19.644]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:13:19.644]    </block>
[05:13:19.649]    <block atomic="false" info="">
[05:13:19.649]      __var nReset = 0x80;
[05:13:19.649]        // -> [nReset <= 0x00000080]
[05:13:19.649]      __var canReadPins = 0;
[05:13:19.649]        // -> [canReadPins <= 0x00000000]
[05:13:19.649]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:13:19.650]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:13:19.650]        // -> [canReadPins <= 0x00000001]
[05:13:19.650]    </block>
[05:13:19.650]    <control if="" while="1" timeout="200" info="">
[05:13:19.650]      // while "1"  (timeout="200")
[05:13:19.650]      // while-condition  =>  TRUE
[05:13:19.650]      // while "1"  (timeout="200")
[05:13:19.650]      // while-condition  =>  TRUE
[05:13:19.650]      // while "1"  (timeout="200")
[05:13:19.650]      // while-condition  =>  TRUE
[05:13:19.650]      // while "1"  (timeout="200")
[05:13:19.650]      // while-condition  =>  TRUE
[05:13:19.650]      // while "1"  (timeout="200")
[05:13:19.652]      // while-condition  =>  TRUE
[05:13:19.652]      // while "1"  (timeout="200")
[05:13:19.652]      // while-condition  =>  TRUE
[05:13:19.652]      // while "1"  (timeout="200")
[05:13:19.652]      // while-condition  =>  TRUE
[05:13:19.652]      // while "1"  (timeout="200")
[05:13:19.652]      // while-condition  =>  TRUE
[05:13:19.652]      // while "1"  (timeout="200")
[05:13:19.652]      // while-condition  =>  TRUE
[05:13:19.652]      // while "1"  (timeout="200")
[05:13:19.652]      // while-condition  =>  TRUE
[05:13:19.652]      // while "1"  (timeout="200")
[05:13:19.652]      // while-condition  =>  TRUE
[05:13:19.652]      // while "1"  (timeout="200")
[05:13:19.652]      // while-condition  =>  TRUE
[05:13:19.652]      // while "1"  (timeout="200")
[05:13:19.652]      // while-condition  =>  TRUE
[05:13:19.652]      // while "1"  (timeout="200")
[05:13:19.652]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.654]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.654]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.654]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.654]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.654]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.654]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.654]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.654]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.654]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.654]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.654]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.654]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.654]      // while-condition  =>  TRUE
[05:13:19.654]      // while "1"  (timeout="200")
[05:13:19.657]      // while-condition  =>  TRUE
[05:13:19.657]      // while "1"  (timeout="200")
[05:13:19.657]      // while-condition  =>  TRUE
[05:13:19.657]      // while "1"  (timeout="200")
[05:13:19.657]      // while-condition  =>  TRUE
[05:13:19.657]      // while "1"  (timeout="200")
[05:13:19.657]      // while-condition  =>  TRUE
[05:13:19.657]      // while "1"  (timeout="200")
[05:13:19.657]      // while-condition  =>  TRUE
[05:13:19.657]      // while "1"  (timeout="200")
[05:13:19.657]      // while-condition  =>  TRUE
[05:13:19.657]      // while "1"  (timeout="200")
[05:13:19.657]      // while-condition  =>  TRUE
[05:13:19.657]      // while "1"  (timeout="200")
[05:13:19.657]      // while-condition  =>  TRUE
[05:13:19.657]      // while "1"  (timeout="200")
[05:13:19.657]      // while-condition  =>  TRUE
[05:13:19.658]      // while "1"  (timeout="200")
[05:13:19.658]      // while-condition  =>  TRUE
[05:13:19.658]      // while "1"  (timeout="200")
[05:13:19.658]      // while-condition  =>  TRUE
[05:13:19.658]      // while "1"  (timeout="200")
[05:13:19.658]      // while-condition  =>  TRUE
[05:13:19.658]      // while "1"  (timeout="200")
[05:13:19.658]      // while-condition  =>  TRUE
[05:13:19.658]      // while "1"  (timeout="200")
[05:13:19.658]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.659]      // while "1"  (timeout="200")
[05:13:19.659]      // while-condition  =>  TRUE
[05:13:19.664]      // while "1"  (timeout="200")
[05:13:19.664]      // while  =>  TIMEOUT
[05:13:19.664]      // end while "1"
[05:13:19.664]    </control>
[05:13:19.664]    <control if="canReadPins" while="" timeout="0" info="">
[05:13:19.664]      // if-block "canReadPins"
[05:13:19.664]        // =>  TRUE
[05:13:19.664]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:13:19.664]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:13:19.664]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:13:19.664]        // while-condition  =>  FALSE
[05:13:19.664]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:13:19.664]      </control>
[05:13:19.664]      // end if-block "canReadPins"
[05:13:19.664]    </control>
[05:13:19.664]    <control if="!canReadPins" while="" timeout="0" info="">
[05:13:19.664]      // if-block "!canReadPins"
[05:13:19.664]        // =>  FALSE
[05:13:19.664]      // skip if-block "!canReadPins"
[05:13:19.664]    </control>
[05:13:19.664]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:13:19.664]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:13:19.664]        // =>  TRUE
[05:13:19.664]      <block atomic="false" info="">
[05:13:19.664]        WriteAP(0x00, 0x190008);
[05:13:19.669]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:13:19.669]        WriteAP(0xF0, 0x01);
[05:13:19.674]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:13:19.674]      </block>
[05:13:19.674]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:13:19.674]    </control>
[05:13:19.674]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:13:19.674]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:13:19.674]        // =>  FALSE
[05:13:19.674]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:13:19.674]    </control>
[05:13:19.674]    <block atomic="false" info="">
[05:13:19.674]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:13:19.684]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:13:19.684]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:13:19.684]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:13:19.685]      __ap = 0; //lets make sure we reset the access point selection
[05:13:19.685]        // -> [__ap <= 0x00000000]
[05:13:19.685]    </block>
[05:13:19.685]  </sequence>
[05:13:19.685]  
[05:13:19.706]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:13:19.706]  
[05:13:19.706]  <debugvars>
[05:13:19.706]    // Pre-defined
[05:13:19.706]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:13:19.706]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:13:19.706]    __dp=0x00000000
[05:13:19.706]    __ap=0x00000000
[05:13:19.706]    __traceout=0x00000000      (Trace Disabled)
[05:13:19.706]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:13:19.706]    __FlashAddr=0x00000000
[05:13:19.706]    __FlashLen=0x00000000
[05:13:19.706]    __FlashArg=0x00000000
[05:13:19.706]    __FlashOp=0x00000000
[05:13:19.709]    __Result=0x00000000
[05:13:19.709]  </debugvars>
[05:13:19.709]  
[05:13:19.709]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:13:19.709]    <block atomic="false" info="">
[05:13:19.709]      __var deviceID = 0;
[05:13:19.709]        // -> [deviceID <= 0x00000000]
[05:13:19.709]      __var version = 0;
[05:13:19.709]        // -> [version <= 0x00000000]
[05:13:19.709]      __var partNum = 0;
[05:13:19.709]        // -> [partNum <= 0x00000000]
[05:13:19.709]      __var manuf = 0;
[05:13:19.709]        // -> [manuf <= 0x00000000]
[05:13:19.709]      __var isMSPM0G1X0X_G3X0X = 0;
[05:13:19.709]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:13:19.709]      __var isProduction = 0;
[05:13:19.709]        // -> [isProduction <= 0x00000000]
[05:13:19.709]      __var continueId = 0;
[05:13:19.709]        // -> [continueId <= 0x00000000]
[05:13:19.709]      deviceID =   Read32(0x41C40004);
[05:13:19.715]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:13:19.715]        // -> [deviceID <= 0x2BB8802F]
[05:13:19.715]      version = deviceID >> 28;
[05:13:19.715]        // -> [version <= 0x00000002]
[05:13:19.715]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:13:19.715]        // -> [partNum <= 0x0000BB88]
[05:13:19.715]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:13:19.715]        // -> [manuf <= 0x00000017]
[05:13:19.715]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:13:19.715]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:13:19.715]      isProduction = (version > 0);
[05:13:19.715]        // -> [isProduction <= 0x00000001]
[05:13:19.715]    </block>
[05:13:19.715]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:13:19.715]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:13:19.715]        // =>  FALSE
[05:13:19.715]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:13:19.715]    </control>
[05:13:19.715]    <control if="continueId == 4" while="" timeout="0" info="">
[05:13:19.715]      // if-block "continueId == 4"
[05:13:19.715]        // =>  FALSE
[05:13:19.715]      // skip if-block "continueId == 4"
[05:13:19.715]    </control>
[05:13:19.715]    <control if="!isProduction" while="" timeout="0" info="">
[05:13:19.715]      // if-block "!isProduction"
[05:13:19.715]        // =>  FALSE
[05:13:19.715]      // skip if-block "!isProduction"
[05:13:19.715]    </control>
[05:13:19.715]  </sequence>
[05:13:19.719]  
[05:13:25.238]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:13:25.238]  
[05:13:25.254]  <debugvars>
[05:13:25.254]    // Pre-defined
[05:13:25.254]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:13:25.254]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:13:25.254]    __dp=0x00000000
[05:13:25.254]    __ap=0x00000000
[05:13:25.254]    __traceout=0x00000000      (Trace Disabled)
[05:13:25.254]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:13:25.254]    __FlashAddr=0x00000000
[05:13:25.254]    __FlashLen=0x00000000
[05:13:25.254]    __FlashArg=0x00000000
[05:13:25.254]    __FlashOp=0x00000000
[05:13:25.254]    __Result=0x00000000
[05:13:25.254]  </debugvars>
[05:13:25.254]  
[05:13:25.254]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:13:25.254]    <block atomic="false" info="">
[05:13:25.254]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:13:25.254]        // -> [isSWJ <= 0x00000001]
[05:13:25.254]      __var hasDormant = __protocol & 0x00020000;
[05:13:25.254]        // -> [hasDormant <= 0x00000000]
[05:13:25.254]      __var protType   = __protocol & 0x0000FFFF;
[05:13:25.254]        // -> [protType <= 0x00000002]
[05:13:25.254]    </block>
[05:13:25.254]    <control if="protType == 1" while="" timeout="0" info="">
[05:13:25.254]      // if-block "protType == 1"
[05:13:25.254]        // =>  FALSE
[05:13:25.254]      // skip if-block "protType == 1"
[05:13:25.254]    </control>
[05:13:25.254]    <control if="protType == 2" while="" timeout="0" info="">
[05:13:25.254]      // if-block "protType == 2"
[05:13:25.254]        // =>  TRUE
[05:13:25.254]      <control if="isSWJ" while="" timeout="0" info="">
[05:13:25.254]        // if-block "isSWJ"
[05:13:25.254]          // =>  TRUE
[05:13:25.254]        <control if="hasDormant" while="" timeout="0" info="">
[05:13:25.259]          // if-block "hasDormant"
[05:13:25.259]            // =>  FALSE
[05:13:25.259]          // skip if-block "hasDormant"
[05:13:25.259]        </control>
[05:13:25.259]        <control if="!hasDormant" while="" timeout="0" info="">
[05:13:25.259]          // if-block "!hasDormant"
[05:13:25.259]            // =>  TRUE
[05:13:25.259]          <block atomic="false" info="">
[05:13:25.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:13:25.259]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:13:25.259]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:13:25.259]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:13:25.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:13:25.259]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:13:25.259]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:13:25.259]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:13:25.259]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:13:25.259]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:13:25.259]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:13:25.269]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:13:25.269]          </block>
[05:13:25.269]          // end if-block "!hasDormant"
[05:13:25.269]        </control>
[05:13:25.269]        // end if-block "isSWJ"
[05:13:25.269]      </control>
[05:13:25.269]      <control if="!isSWJ" while="" timeout="0" info="">
[05:13:25.269]        // if-block "!isSWJ"
[05:13:25.269]          // =>  FALSE
[05:13:25.269]        // skip if-block "!isSWJ"
[05:13:25.269]      </control>
[05:13:25.269]      <block atomic="false" info="">
[05:13:25.269]        ReadDP(0x0);
[05:13:25.269]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:13:25.269]      </block>
[05:13:25.269]      // end if-block "protType == 2"
[05:13:25.269]    </control>
[05:13:25.269]  </sequence>
[05:13:25.269]  
[05:13:25.269]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:13:25.269]  
[05:13:25.269]  <debugvars>
[05:13:25.269]    // Pre-defined
[05:13:25.269]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:13:25.269]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:13:25.269]    __dp=0x00000000
[05:13:25.269]    __ap=0x00000000
[05:13:25.269]    __traceout=0x00000000      (Trace Disabled)
[05:13:25.269]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:13:25.269]    __FlashAddr=0x00000000
[05:13:25.269]    __FlashLen=0x00000000
[05:13:25.269]    __FlashArg=0x00000000
[05:13:25.269]    __FlashOp=0x00000000
[05:13:25.269]    __Result=0x00000000
[05:13:25.269]  </debugvars>
[05:13:25.269]  
[05:13:25.269]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:13:25.269]    <block atomic="false" info="">
[05:13:25.269]      __var SW_DP_ABORT       = 0x0;
[05:13:25.269]        // -> [SW_DP_ABORT <= 0x00000000]
[05:13:25.279]      __var DP_CTRL_STAT      = 0x4;
[05:13:25.279]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:13:25.279]      __var DP_SELECT         = 0x8;
[05:13:25.279]        // -> [DP_SELECT <= 0x00000008]
[05:13:25.279]      __var powered_down      = 0;
[05:13:25.279]        // -> [powered_down <= 0x00000000]
[05:13:25.279]      WriteDP(DP_SELECT, 0x00000000);
[05:13:25.279]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:13:25.279]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:13:25.279]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:13:25.279]        // -> [powered_down <= 0x00000001]
[05:13:25.279]    </block>
[05:13:25.279]    <control if="powered_down" while="" timeout="0" info="">
[05:13:25.279]      // if-block "powered_down"
[05:13:25.279]        // =>  TRUE
[05:13:25.279]      <block atomic="false" info="">
[05:13:25.279]        Message(0, "Debug/System power-up request sent");
[05:13:25.279]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:13:25.279]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:13:25.279]      </block>
[05:13:25.279]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:13:25.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:13:25.289]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:13:25.289]        // while-condition  =>  FALSE
[05:13:25.289]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:13:25.289]      </control>
[05:13:25.289]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:13:25.289]        // if-block "(__protocol & 0xFFFF) == 1"
[05:13:25.289]          // =>  FALSE
[05:13:25.289]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:13:25.289]      </control>
[05:13:25.289]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:13:25.289]        // if-block "(__protocol & 0xFFFF) == 2"
[05:13:25.289]          // =>  TRUE
[05:13:25.289]        <block atomic="false" info="">
[05:13:25.289]          Message(0, "executing SWD power up");
[05:13:25.289]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:13:25.289]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:13:25.289]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:13:25.289]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:13:25.289]        </block>
[05:13:25.289]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:13:25.289]      </control>
[05:13:25.289]      // end if-block "powered_down"
[05:13:25.289]    </control>
[05:13:25.289]    <block atomic="false" info="">
[05:13:25.289]      __var DEBUG_PORT_VAL    = 0;
[05:13:25.289]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:13:25.289]      __var ACCESS_POINT_VAL  = 0;
[05:13:25.289]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:13:25.289]      __ap = 1; 
[05:13:25.289]        // -> [__ap <= 0x00000001]
[05:13:25.289]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:13:25.299]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:13:25.299]      __ap = 4;
[05:13:25.299]        // -> [__ap <= 0x00000004]
[05:13:25.299]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:13:25.309]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:13:25.309]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:13:25.309]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:13:25.309]    </block>
[05:13:25.309]    <block atomic="false" info="">
[05:13:25.309]      __var nReset = 0x80;
[05:13:25.312]        // -> [nReset <= 0x00000080]
[05:13:25.312]      __var canReadPins = 0;
[05:13:25.312]        // -> [canReadPins <= 0x00000000]
[05:13:25.312]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:13:25.312]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:13:25.312]        // -> [canReadPins <= 0x00000001]
[05:13:25.312]    </block>
[05:13:25.312]    <control if="" while="1" timeout="200" info="">
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.312]      // while "1"  (timeout="200")
[05:13:25.312]      // while-condition  =>  TRUE
[05:13:25.319]      // while "1"  (timeout="200")
[05:13:25.319]      // while  =>  TIMEOUT
[05:13:25.319]      // end while "1"
[05:13:25.319]    </control>
[05:13:25.319]    <control if="canReadPins" while="" timeout="0" info="">
[05:13:25.319]      // if-block "canReadPins"
[05:13:25.319]        // =>  TRUE
[05:13:25.319]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:13:25.319]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:13:25.319]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:13:25.319]        // while-condition  =>  FALSE
[05:13:25.319]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:13:25.319]      </control>
[05:13:25.319]      // end if-block "canReadPins"
[05:13:25.319]    </control>
[05:13:25.319]    <control if="!canReadPins" while="" timeout="0" info="">
[05:13:25.319]      // if-block "!canReadPins"
[05:13:25.319]        // =>  FALSE
[05:13:25.319]      // skip if-block "!canReadPins"
[05:13:25.319]    </control>
[05:13:25.319]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:13:25.319]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:13:25.319]        // =>  TRUE
[05:13:25.319]      <block atomic="false" info="">
[05:13:25.319]        WriteAP(0x00, 0x190008);
[05:13:25.319]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:13:25.319]        WriteAP(0xF0, 0x01);
[05:13:25.319]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:13:25.319]      </block>
[05:13:25.319]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:13:25.319]    </control>
[05:13:25.319]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:13:25.319]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:13:25.319]        // =>  FALSE
[05:13:25.319]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:13:25.319]    </control>
[05:13:25.319]    <block atomic="false" info="">
[05:13:25.319]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:13:25.329]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:13:25.329]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:13:25.329]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:13:25.329]      __ap = 0; //lets make sure we reset the access point selection
[05:13:25.329]        // -> [__ap <= 0x00000000]
[05:13:25.329]    </block>
[05:13:25.329]  </sequence>
[05:13:25.329]  
[05:13:25.349]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:13:25.349]  
[05:13:25.349]  <debugvars>
[05:13:25.349]    // Pre-defined
[05:13:25.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:13:25.349]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:13:25.349]    __dp=0x00000000
[05:13:25.349]    __ap=0x00000000
[05:13:25.349]    __traceout=0x00000000      (Trace Disabled)
[05:13:25.349]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:13:25.349]    __FlashAddr=0x00000000
[05:13:25.359]    __FlashLen=0x00000000
[05:13:25.359]    __FlashArg=0x00000000
[05:13:25.359]    __FlashOp=0x00000000
[05:13:25.359]    __Result=0x00000000
[05:13:25.359]  </debugvars>
[05:13:25.359]  
[05:13:25.359]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:13:25.359]    <block atomic="false" info="">
[05:13:25.359]      __var deviceID = 0;
[05:13:25.359]        // -> [deviceID <= 0x00000000]
[05:13:25.359]      __var version = 0;
[05:13:25.361]        // -> [version <= 0x00000000]
[05:13:25.361]      __var partNum = 0;
[05:13:25.361]        // -> [partNum <= 0x00000000]
[05:13:25.361]      __var manuf = 0;
[05:13:25.361]        // -> [manuf <= 0x00000000]
[05:13:25.361]      __var isMSPM0G1X0X_G3X0X = 0;
[05:13:25.361]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:13:25.361]      __var isProduction = 0;
[05:13:25.361]        // -> [isProduction <= 0x00000000]
[05:13:25.361]      __var continueId = 0;
[05:13:25.361]        // -> [continueId <= 0x00000000]
[05:13:25.361]      deviceID =   Read32(0x41C40004);
[05:13:25.363]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:13:25.363]        // -> [deviceID <= 0x2BB8802F]
[05:13:25.363]      version = deviceID >> 28;
[05:13:25.363]        // -> [version <= 0x00000002]
[05:13:25.363]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:13:25.363]        // -> [partNum <= 0x0000BB88]
[05:13:25.363]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:13:25.363]        // -> [manuf <= 0x00000017]
[05:13:25.363]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:13:25.363]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:13:25.363]      isProduction = (version > 0);
[05:13:25.363]        // -> [isProduction <= 0x00000001]
[05:13:25.363]    </block>
[05:13:25.363]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:13:25.363]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:13:25.363]        // =>  FALSE
[05:13:25.363]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:13:25.363]    </control>
[05:13:25.363]    <control if="continueId == 4" while="" timeout="0" info="">
[05:13:25.363]      // if-block "continueId == 4"
[05:13:25.363]        // =>  FALSE
[05:13:25.363]      // skip if-block "continueId == 4"
[05:13:25.363]    </control>
[05:13:25.363]    <control if="!isProduction" while="" timeout="0" info="">
[05:13:25.363]      // if-block "!isProduction"
[05:13:25.363]        // =>  FALSE
[05:13:25.363]      // skip if-block "!isProduction"
[05:13:25.363]    </control>
[05:13:25.363]  </sequence>
[05:13:25.370]  
[05:14:00.821]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:14:00.821]  
[05:14:00.830]  <debugvars>
[05:14:00.831]    // Pre-defined
[05:14:00.831]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:14:00.831]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:14:00.831]    __dp=0x00000000
[05:14:00.831]    __ap=0x00000000
[05:14:00.831]    __traceout=0x00000000      (Trace Disabled)
[05:14:00.831]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:14:00.831]    __FlashAddr=0x00000000
[05:14:00.831]    __FlashLen=0x00000000
[05:14:00.831]    __FlashArg=0x00000000
[05:14:00.831]    __FlashOp=0x00000000
[05:14:00.831]    __Result=0x00000000
[05:14:00.831]  </debugvars>
[05:14:00.831]  
[05:14:00.831]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:14:00.831]    <block atomic="false" info="">
[05:14:00.831]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:14:00.831]        // -> [isSWJ <= 0x00000001]
[05:14:00.831]      __var hasDormant = __protocol & 0x00020000;
[05:14:00.831]        // -> [hasDormant <= 0x00000000]
[05:14:00.831]      __var protType   = __protocol & 0x0000FFFF;
[05:14:00.831]        // -> [protType <= 0x00000002]
[05:14:00.831]    </block>
[05:14:00.831]    <control if="protType == 1" while="" timeout="0" info="">
[05:14:00.831]      // if-block "protType == 1"
[05:14:00.831]        // =>  FALSE
[05:14:00.831]      // skip if-block "protType == 1"
[05:14:00.831]    </control>
[05:14:00.831]    <control if="protType == 2" while="" timeout="0" info="">
[05:14:00.831]      // if-block "protType == 2"
[05:14:00.831]        // =>  TRUE
[05:14:00.831]      <control if="isSWJ" while="" timeout="0" info="">
[05:14:00.831]        // if-block "isSWJ"
[05:14:00.831]          // =>  TRUE
[05:14:00.831]        <control if="hasDormant" while="" timeout="0" info="">
[05:14:00.831]          // if-block "hasDormant"
[05:14:00.831]            // =>  FALSE
[05:14:00.831]          // skip if-block "hasDormant"
[05:14:00.831]        </control>
[05:14:00.831]        <control if="!hasDormant" while="" timeout="0" info="">
[05:14:00.831]          // if-block "!hasDormant"
[05:14:00.831]            // =>  TRUE
[05:14:00.831]          <block atomic="false" info="">
[05:14:00.831]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:14:00.831]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:14:00.831]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:14:00.839]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:14:00.839]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:14:00.839]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:14:00.839]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:14:00.841]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:14:00.841]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:14:00.841]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:14:00.841]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:14:00.841]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:14:00.841]          </block>
[05:14:00.841]          // end if-block "!hasDormant"
[05:14:00.841]        </control>
[05:14:00.841]        // end if-block "isSWJ"
[05:14:00.841]      </control>
[05:14:00.841]      <control if="!isSWJ" while="" timeout="0" info="">
[05:14:00.841]        // if-block "!isSWJ"
[05:14:00.841]          // =>  FALSE
[05:14:00.841]        // skip if-block "!isSWJ"
[05:14:00.841]      </control>
[05:14:00.841]      <block atomic="false" info="">
[05:14:00.841]        ReadDP(0x0);
[05:14:00.841]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:14:00.841]      </block>
[05:14:00.841]      // end if-block "protType == 2"
[05:14:00.841]    </control>
[05:14:00.841]  </sequence>
[05:14:00.841]  
[05:14:00.849]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:14:00.849]  
[05:14:00.849]  <debugvars>
[05:14:00.849]    // Pre-defined
[05:14:00.851]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:14:00.851]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:14:00.851]    __dp=0x00000000
[05:14:00.851]    __ap=0x00000000
[05:14:00.851]    __traceout=0x00000000      (Trace Disabled)
[05:14:00.851]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:14:00.851]    __FlashAddr=0x00000000
[05:14:00.851]    __FlashLen=0x00000000
[05:14:00.851]    __FlashArg=0x00000000
[05:14:00.851]    __FlashOp=0x00000000
[05:14:00.851]    __Result=0x00000000
[05:14:00.851]  </debugvars>
[05:14:00.851]  
[05:14:00.851]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:14:00.851]    <block atomic="false" info="">
[05:14:00.851]      __var SW_DP_ABORT       = 0x0;
[05:14:00.851]        // -> [SW_DP_ABORT <= 0x00000000]
[05:14:00.851]      __var DP_CTRL_STAT      = 0x4;
[05:14:00.851]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:14:00.851]      __var DP_SELECT         = 0x8;
[05:14:00.851]        // -> [DP_SELECT <= 0x00000008]
[05:14:00.851]      __var powered_down      = 0;
[05:14:00.851]        // -> [powered_down <= 0x00000000]
[05:14:00.851]      WriteDP(DP_SELECT, 0x00000000);
[05:14:00.851]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:14:00.851]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:14:00.851]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:14:00.851]        // -> [powered_down <= 0x00000001]
[05:14:00.851]    </block>
[05:14:00.851]    <control if="powered_down" while="" timeout="0" info="">
[05:14:00.851]      // if-block "powered_down"
[05:14:00.851]        // =>  TRUE
[05:14:00.851]      <block atomic="false" info="">
[05:14:00.851]        Message(0, "Debug/System power-up request sent");
[05:14:00.851]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:14:00.859]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:14:00.859]      </block>
[05:14:00.859]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:14:00.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:14:00.861]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:14:00.861]        // while-condition  =>  FALSE
[05:14:00.861]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:14:00.861]      </control>
[05:14:00.861]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:14:00.861]        // if-block "(__protocol & 0xFFFF) == 1"
[05:14:00.861]          // =>  FALSE
[05:14:00.861]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:14:00.861]      </control>
[05:14:00.861]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:14:00.861]        // if-block "(__protocol & 0xFFFF) == 2"
[05:14:00.861]          // =>  TRUE
[05:14:00.861]        <block atomic="false" info="">
[05:14:00.861]          Message(0, "executing SWD power up");
[05:14:00.861]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:14:00.861]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:14:00.861]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:14:00.861]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:14:00.861]        </block>
[05:14:00.861]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:14:00.861]      </control>
[05:14:00.861]      // end if-block "powered_down"
[05:14:00.861]    </control>
[05:14:00.861]    <block atomic="false" info="">
[05:14:00.861]      __var DEBUG_PORT_VAL    = 0;
[05:14:00.861]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:14:00.861]      __var ACCESS_POINT_VAL  = 0;
[05:14:00.861]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:14:00.869]      __ap = 1; 
[05:14:00.869]        // -> [__ap <= 0x00000001]
[05:14:00.869]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:14:00.871]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:14:00.871]      __ap = 4;
[05:14:00.871]        // -> [__ap <= 0x00000004]
[05:14:00.871]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:14:00.871]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:14:00.871]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:14:00.871]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:14:00.880]    </block>
[05:14:00.880]    <block atomic="false" info="">
[05:14:00.880]      __var nReset = 0x80;
[05:14:00.880]        // -> [nReset <= 0x00000080]
[05:14:00.880]      __var canReadPins = 0;
[05:14:00.880]        // -> [canReadPins <= 0x00000000]
[05:14:00.880]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:14:00.882]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:14:00.882]        // -> [canReadPins <= 0x00000001]
[05:14:00.882]    </block>
[05:14:00.882]    <control if="" while="1" timeout="200" info="">
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.882]      // while-condition  =>  TRUE
[05:14:00.882]      // while "1"  (timeout="200")
[05:14:00.890]      // while-condition  =>  TRUE
[05:14:00.890]      // while "1"  (timeout="200")
[05:14:00.890]      // while-condition  =>  TRUE
[05:14:00.890]      // while "1"  (timeout="200")
[05:14:00.890]      // while-condition  =>  TRUE
[05:14:00.890]      // while "1"  (timeout="200")
[05:14:00.890]      // while-condition  =>  TRUE
[05:14:00.890]      // while "1"  (timeout="200")
[05:14:00.890]      // while-condition  =>  TRUE
[05:14:00.890]      // while "1"  (timeout="200")
[05:14:00.890]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.891]      // while-condition  =>  TRUE
[05:14:00.891]      // while "1"  (timeout="200")
[05:14:00.900]      // while-condition  =>  TRUE
[05:14:00.900]      // while "1"  (timeout="200")
[05:14:00.900]      // while  =>  TIMEOUT
[05:14:00.900]      // end while "1"
[05:14:00.900]    </control>
[05:14:00.901]    <control if="canReadPins" while="" timeout="0" info="">
[05:14:00.901]      // if-block "canReadPins"
[05:14:00.901]        // =>  TRUE
[05:14:00.901]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:14:00.901]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:14:00.901]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:14:00.901]        // while-condition  =>  FALSE
[05:14:00.901]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:14:00.901]      </control>
[05:14:00.901]      // end if-block "canReadPins"
[05:14:00.901]    </control>
[05:14:00.901]    <control if="!canReadPins" while="" timeout="0" info="">
[05:14:00.901]      // if-block "!canReadPins"
[05:14:00.901]        // =>  FALSE
[05:14:00.901]      // skip if-block "!canReadPins"
[05:14:00.901]    </control>
[05:14:00.901]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:14:00.901]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:14:00.901]        // =>  TRUE
[05:14:00.901]      <block atomic="false" info="">
[05:14:00.901]        WriteAP(0x00, 0x190008);
[05:14:00.901]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:14:00.901]        WriteAP(0xF0, 0x01);
[05:14:00.901]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:14:00.901]      </block>
[05:14:00.901]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:14:00.901]    </control>
[05:14:00.901]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:14:00.901]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:14:00.901]        // =>  FALSE
[05:14:00.901]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:14:00.911]    </control>
[05:14:00.911]    <block atomic="false" info="">
[05:14:00.911]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:14:00.911]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:14:00.911]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:14:00.911]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:14:00.911]      __ap = 0; //lets make sure we reset the access point selection
[05:14:00.911]        // -> [__ap <= 0x00000000]
[05:14:00.911]    </block>
[05:14:00.911]  </sequence>
[05:14:00.911]  
[05:14:00.938]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:14:00.938]  
[05:14:00.938]  <debugvars>
[05:14:00.938]    // Pre-defined
[05:14:00.938]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:14:00.938]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:14:00.938]    __dp=0x00000000
[05:14:00.938]    __ap=0x00000000
[05:14:00.938]    __traceout=0x00000000      (Trace Disabled)
[05:14:00.938]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:14:00.938]    __FlashAddr=0x00000000
[05:14:00.938]    __FlashLen=0x00000000
[05:14:00.938]    __FlashArg=0x00000000
[05:14:00.938]    __FlashOp=0x00000000
[05:14:00.938]    __Result=0x00000000
[05:14:00.938]  </debugvars>
[05:14:00.938]  
[05:14:00.938]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:14:00.941]    <block atomic="false" info="">
[05:14:00.941]      __var deviceID = 0;
[05:14:00.941]        // -> [deviceID <= 0x00000000]
[05:14:00.941]      __var version = 0;
[05:14:00.941]        // -> [version <= 0x00000000]
[05:14:00.941]      __var partNum = 0;
[05:14:00.941]        // -> [partNum <= 0x00000000]
[05:14:00.941]      __var manuf = 0;
[05:14:00.941]        // -> [manuf <= 0x00000000]
[05:14:00.941]      __var isMSPM0G1X0X_G3X0X = 0;
[05:14:00.941]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:14:00.941]      __var isProduction = 0;
[05:14:00.941]        // -> [isProduction <= 0x00000000]
[05:14:00.941]      __var continueId = 0;
[05:14:00.941]        // -> [continueId <= 0x00000000]
[05:14:00.941]      deviceID =   Read32(0x41C40004);
[05:14:00.941]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:14:00.941]        // -> [deviceID <= 0x2BB8802F]
[05:14:00.941]      version = deviceID >> 28;
[05:14:00.941]        // -> [version <= 0x00000002]
[05:14:00.941]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:14:00.941]        // -> [partNum <= 0x0000BB88]
[05:14:00.941]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:14:00.941]        // -> [manuf <= 0x00000017]
[05:14:00.941]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:14:00.941]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:14:00.941]      isProduction = (version > 0);
[05:14:00.941]        // -> [isProduction <= 0x00000001]
[05:14:00.941]    </block>
[05:14:00.941]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:14:00.941]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:14:00.941]        // =>  FALSE
[05:14:00.941]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:14:00.941]    </control>
[05:14:00.941]    <control if="continueId == 4" while="" timeout="0" info="">
[05:14:00.941]      // if-block "continueId == 4"
[05:14:00.941]        // =>  FALSE
[05:14:00.941]      // skip if-block "continueId == 4"
[05:14:00.941]    </control>
[05:14:00.941]    <control if="!isProduction" while="" timeout="0" info="">
[05:14:00.941]      // if-block "!isProduction"
[05:14:00.941]        // =>  FALSE
[05:14:00.941]      // skip if-block "!isProduction"
[05:14:00.941]    </control>
[05:14:00.941]  </sequence>
[05:14:00.941]  
[05:14:06.517]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:14:06.517]  
[05:14:06.517]  <debugvars>
[05:14:06.517]    // Pre-defined
[05:14:06.517]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:14:06.517]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:14:06.517]    __dp=0x00000000
[05:14:06.517]    __ap=0x00000000
[05:14:06.517]    __traceout=0x00000000      (Trace Disabled)
[05:14:06.517]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:14:06.517]    __FlashAddr=0x00000000
[05:14:06.517]    __FlashLen=0x00000000
[05:14:06.517]    __FlashArg=0x00000000
[05:14:06.517]    __FlashOp=0x00000000
[05:14:06.517]    __Result=0x00000000
[05:14:06.517]  </debugvars>
[05:14:06.517]  
[05:14:06.517]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:14:06.517]    <block atomic="false" info="">
[05:14:06.517]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:14:06.517]        // -> [isSWJ <= 0x00000001]
[05:14:06.517]      __var hasDormant = __protocol & 0x00020000;
[05:14:06.517]        // -> [hasDormant <= 0x00000000]
[05:14:06.517]      __var protType   = __protocol & 0x0000FFFF;
[05:14:06.517]        // -> [protType <= 0x00000002]
[05:14:06.521]    </block>
[05:14:06.521]    <control if="protType == 1" while="" timeout="0" info="">
[05:14:06.521]      // if-block "protType == 1"
[05:14:06.521]        // =>  FALSE
[05:14:06.521]      // skip if-block "protType == 1"
[05:14:06.521]    </control>
[05:14:06.521]    <control if="protType == 2" while="" timeout="0" info="">
[05:14:06.521]      // if-block "protType == 2"
[05:14:06.521]        // =>  TRUE
[05:14:06.521]      <control if="isSWJ" while="" timeout="0" info="">
[05:14:06.521]        // if-block "isSWJ"
[05:14:06.521]          // =>  TRUE
[05:14:06.521]        <control if="hasDormant" while="" timeout="0" info="">
[05:14:06.521]          // if-block "hasDormant"
[05:14:06.521]            // =>  FALSE
[05:14:06.521]          // skip if-block "hasDormant"
[05:14:06.521]        </control>
[05:14:06.521]        <control if="!hasDormant" while="" timeout="0" info="">
[05:14:06.521]          // if-block "!hasDormant"
[05:14:06.521]            // =>  TRUE
[05:14:06.521]          <block atomic="false" info="">
[05:14:06.524]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:14:06.525]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:14:06.525]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:14:06.526]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:14:06.526]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:14:06.526]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:14:06.526]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:14:06.526]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:14:06.526]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:14:06.526]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:14:06.526]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:14:06.526]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:14:06.526]          </block>
[05:14:06.526]          // end if-block "!hasDormant"
[05:14:06.526]        </control>
[05:14:06.526]        // end if-block "isSWJ"
[05:14:06.526]      </control>
[05:14:06.526]      <control if="!isSWJ" while="" timeout="0" info="">
[05:14:06.526]        // if-block "!isSWJ"
[05:14:06.526]          // =>  FALSE
[05:14:06.526]        // skip if-block "!isSWJ"
[05:14:06.526]      </control>
[05:14:06.526]      <block atomic="false" info="">
[05:14:06.526]        ReadDP(0x0);
[05:14:06.536]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:14:06.536]      </block>
[05:14:06.536]      // end if-block "protType == 2"
[05:14:06.536]    </control>
[05:14:06.536]  </sequence>
[05:14:06.536]  
[05:14:06.536]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:14:06.536]  
[05:14:06.536]  <debugvars>
[05:14:06.536]    // Pre-defined
[05:14:06.536]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:14:06.536]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:14:06.536]    __dp=0x00000000
[05:14:06.536]    __ap=0x00000000
[05:14:06.536]    __traceout=0x00000000      (Trace Disabled)
[05:14:06.536]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:14:06.536]    __FlashAddr=0x00000000
[05:14:06.536]    __FlashLen=0x00000000
[05:14:06.536]    __FlashArg=0x00000000
[05:14:06.536]    __FlashOp=0x00000000
[05:14:06.536]    __Result=0x00000000
[05:14:06.541]  </debugvars>
[05:14:06.541]  
[05:14:06.541]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:14:06.541]    <block atomic="false" info="">
[05:14:06.541]      __var SW_DP_ABORT       = 0x0;
[05:14:06.541]        // -> [SW_DP_ABORT <= 0x00000000]
[05:14:06.541]      __var DP_CTRL_STAT      = 0x4;
[05:14:06.541]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:14:06.541]      __var DP_SELECT         = 0x8;
[05:14:06.541]        // -> [DP_SELECT <= 0x00000008]
[05:14:06.541]      __var powered_down      = 0;
[05:14:06.541]        // -> [powered_down <= 0x00000000]
[05:14:06.541]      WriteDP(DP_SELECT, 0x00000000);
[05:14:06.543]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:14:06.543]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:14:06.545]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:14:06.545]        // -> [powered_down <= 0x00000001]
[05:14:06.545]    </block>
[05:14:06.545]    <control if="powered_down" while="" timeout="0" info="">
[05:14:06.545]      // if-block "powered_down"
[05:14:06.548]        // =>  TRUE
[05:14:06.548]      <block atomic="false" info="">
[05:14:06.548]        Message(0, "Debug/System power-up request sent");
[05:14:06.548]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:14:06.551]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:14:06.551]      </block>
[05:14:06.551]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:14:06.551]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:14:06.552]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:14:06.552]        // while-condition  =>  FALSE
[05:14:06.552]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:14:06.552]      </control>
[05:14:06.552]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:14:06.552]        // if-block "(__protocol & 0xFFFF) == 1"
[05:14:06.552]          // =>  FALSE
[05:14:06.552]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:14:06.554]      </control>
[05:14:06.554]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:14:06.554]        // if-block "(__protocol & 0xFFFF) == 2"
[05:14:06.554]          // =>  TRUE
[05:14:06.554]        <block atomic="false" info="">
[05:14:06.554]          Message(0, "executing SWD power up");
[05:14:06.558]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:14:06.559]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:14:06.559]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:14:06.562]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:14:06.562]        </block>
[05:14:06.562]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:14:06.562]      </control>
[05:14:06.562]      // end if-block "powered_down"
[05:14:06.562]    </control>
[05:14:06.562]    <block atomic="false" info="">
[05:14:06.563]      __var DEBUG_PORT_VAL    = 0;
[05:14:06.563]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:14:06.563]      __var ACCESS_POINT_VAL  = 0;
[05:14:06.563]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:14:06.563]      __ap = 1; 
[05:14:06.563]        // -> [__ap <= 0x00000001]
[05:14:06.563]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:14:06.566]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:14:06.566]      __ap = 4;
[05:14:06.566]        // -> [__ap <= 0x00000004]
[05:14:06.566]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:14:06.574]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:14:06.574]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:14:06.574]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:14:06.576]    </block>
[05:14:06.576]    <block atomic="false" info="">
[05:14:06.576]      __var nReset = 0x80;
[05:14:06.576]        // -> [nReset <= 0x00000080]
[05:14:06.576]      __var canReadPins = 0;
[05:14:06.576]        // -> [canReadPins <= 0x00000000]
[05:14:06.576]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:14:06.578]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:14:06.578]        // -> [canReadPins <= 0x00000001]
[05:14:06.578]    </block>
[05:14:06.578]    <control if="" while="1" timeout="200" info="">
[05:14:06.578]      // while "1"  (timeout="200")
[05:14:06.578]      // while-condition  =>  TRUE
[05:14:06.578]      // while "1"  (timeout="200")
[05:14:06.578]      // while-condition  =>  TRUE
[05:14:06.578]      // while "1"  (timeout="200")
[05:14:06.578]      // while-condition  =>  TRUE
[05:14:06.578]      // while "1"  (timeout="200")
[05:14:06.578]      // while-condition  =>  TRUE
[05:14:06.578]      // while "1"  (timeout="200")
[05:14:06.578]      // while-condition  =>  TRUE
[05:14:06.578]      // while "1"  (timeout="200")
[05:14:06.578]      // while-condition  =>  TRUE
[05:14:06.578]      // while "1"  (timeout="200")
[05:14:06.581]      // while-condition  =>  TRUE
[05:14:06.581]      // while "1"  (timeout="200")
[05:14:06.581]      // while-condition  =>  TRUE
[05:14:06.581]      // while "1"  (timeout="200")
[05:14:06.581]      // while-condition  =>  TRUE
[05:14:06.581]      // while "1"  (timeout="200")
[05:14:06.581]      // while-condition  =>  TRUE
[05:14:06.581]      // while "1"  (timeout="200")
[05:14:06.581]      // while-condition  =>  TRUE
[05:14:06.581]      // while "1"  (timeout="200")
[05:14:06.581]      // while-condition  =>  TRUE
[05:14:06.581]      // while "1"  (timeout="200")
[05:14:06.581]      // while-condition  =>  TRUE
[05:14:06.581]      // while "1"  (timeout="200")
[05:14:06.581]      // while-condition  =>  TRUE
[05:14:06.581]      // while "1"  (timeout="200")
[05:14:06.581]      // while-condition  =>  TRUE
[05:14:06.582]      // while "1"  (timeout="200")
[05:14:06.582]      // while  =>  TIMEOUT
[05:14:06.582]      // end while "1"
[05:14:06.582]    </control>
[05:14:06.582]    <control if="canReadPins" while="" timeout="0" info="">
[05:14:06.582]      // if-block "canReadPins"
[05:14:06.582]        // =>  TRUE
[05:14:06.582]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:14:06.582]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:14:06.583]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:14:06.583]        // while-condition  =>  FALSE
[05:14:06.583]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:14:06.583]      </control>
[05:14:06.583]      // end if-block "canReadPins"
[05:14:06.583]    </control>
[05:14:06.583]    <control if="!canReadPins" while="" timeout="0" info="">
[05:14:06.583]      // if-block "!canReadPins"
[05:14:06.583]        // =>  FALSE
[05:14:06.583]      // skip if-block "!canReadPins"
[05:14:06.583]    </control>
[05:14:06.583]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:14:06.583]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:14:06.583]        // =>  TRUE
[05:14:06.586]      <block atomic="false" info="">
[05:14:06.586]        WriteAP(0x00, 0x190008);
[05:14:06.596]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:14:06.596]        WriteAP(0xF0, 0x01);
[05:14:06.596]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:14:06.596]      </block>
[05:14:06.596]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:14:06.596]    </control>
[05:14:06.596]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:14:06.596]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:14:06.596]        // =>  FALSE
[05:14:06.596]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:14:06.596]    </control>
[05:14:06.596]    <block atomic="false" info="">
[05:14:06.596]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:14:06.596]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:14:06.596]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:14:06.596]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:14:06.596]      __ap = 0; //lets make sure we reset the access point selection
[05:14:06.596]        // -> [__ap <= 0x00000000]
[05:14:06.596]    </block>
[05:14:06.606]  </sequence>
[05:14:06.606]  
[05:14:06.626]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:14:06.626]  
[05:14:06.626]  <debugvars>
[05:14:06.626]    // Pre-defined
[05:14:06.626]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:14:06.626]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:14:06.626]    __dp=0x00000000
[05:14:06.626]    __ap=0x00000000
[05:14:06.626]    __traceout=0x00000000      (Trace Disabled)
[05:14:06.626]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:14:06.626]    __FlashAddr=0x00000000
[05:14:06.626]    __FlashLen=0x00000000
[05:14:06.626]    __FlashArg=0x00000000
[05:14:06.626]    __FlashOp=0x00000000
[05:14:06.626]    __Result=0x00000000
[05:14:06.626]  </debugvars>
[05:14:06.626]  
[05:14:06.626]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:14:06.626]    <block atomic="false" info="">
[05:14:06.626]      __var deviceID = 0;
[05:14:06.626]        // -> [deviceID <= 0x00000000]
[05:14:06.626]      __var version = 0;
[05:14:06.626]        // -> [version <= 0x00000000]
[05:14:06.626]      __var partNum = 0;
[05:14:06.626]        // -> [partNum <= 0x00000000]
[05:14:06.626]      __var manuf = 0;
[05:14:06.626]        // -> [manuf <= 0x00000000]
[05:14:06.626]      __var isMSPM0G1X0X_G3X0X = 0;
[05:14:06.626]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:14:06.626]      __var isProduction = 0;
[05:14:06.626]        // -> [isProduction <= 0x00000000]
[05:14:06.626]      __var continueId = 0;
[05:14:06.626]        // -> [continueId <= 0x00000000]
[05:14:06.626]      deviceID =   Read32(0x41C40004);
[05:14:06.636]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:14:06.636]        // -> [deviceID <= 0x2BB8802F]
[05:14:06.636]      version = deviceID >> 28;
[05:14:06.636]        // -> [version <= 0x00000002]
[05:14:06.636]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:14:06.636]        // -> [partNum <= 0x0000BB88]
[05:14:06.636]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:14:06.636]        // -> [manuf <= 0x00000017]
[05:14:06.636]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:14:06.636]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:14:06.636]      isProduction = (version > 0);
[05:14:06.636]        // -> [isProduction <= 0x00000001]
[05:14:06.636]    </block>
[05:14:06.636]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:14:06.636]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:14:06.636]        // =>  FALSE
[05:14:06.636]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:14:06.636]    </control>
[05:14:06.636]    <control if="continueId == 4" while="" timeout="0" info="">
[05:14:06.636]      // if-block "continueId == 4"
[05:14:06.636]        // =>  FALSE
[05:14:06.636]      // skip if-block "continueId == 4"
[05:14:06.636]    </control>
[05:14:06.636]    <control if="!isProduction" while="" timeout="0" info="">
[05:14:06.636]      // if-block "!isProduction"
[05:14:06.636]        // =>  FALSE
[05:14:06.636]      // skip if-block "!isProduction"
[05:14:06.636]    </control>
[05:14:06.636]  </sequence>
[05:14:06.636]  
[05:16:08.707]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:16:08.707]  
[05:16:08.717]  <debugvars>
[05:16:08.717]    // Pre-defined
[05:16:08.717]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:16:08.717]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:16:08.717]    __dp=0x00000000
[05:16:08.717]    __ap=0x00000000
[05:16:08.717]    __traceout=0x00000000      (Trace Disabled)
[05:16:08.717]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:16:08.717]    __FlashAddr=0x00000000
[05:16:08.717]    __FlashLen=0x00000000
[05:16:08.717]    __FlashArg=0x00000000
[05:16:08.717]    __FlashOp=0x00000000
[05:16:08.717]    __Result=0x00000000
[05:16:08.717]  </debugvars>
[05:16:08.717]  
[05:16:08.717]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:16:08.717]    <block atomic="false" info="">
[05:16:08.717]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:16:08.717]        // -> [isSWJ <= 0x00000001]
[05:16:08.717]      __var hasDormant = __protocol & 0x00020000;
[05:16:08.717]        // -> [hasDormant <= 0x00000000]
[05:16:08.717]      __var protType   = __protocol & 0x0000FFFF;
[05:16:08.717]        // -> [protType <= 0x00000002]
[05:16:08.717]    </block>
[05:16:08.717]    <control if="protType == 1" while="" timeout="0" info="">
[05:16:08.717]      // if-block "protType == 1"
[05:16:08.717]        // =>  FALSE
[05:16:08.717]      // skip if-block "protType == 1"
[05:16:08.717]    </control>
[05:16:08.717]    <control if="protType == 2" while="" timeout="0" info="">
[05:16:08.717]      // if-block "protType == 2"
[05:16:08.717]        // =>  TRUE
[05:16:08.717]      <control if="isSWJ" while="" timeout="0" info="">
[05:16:08.717]        // if-block "isSWJ"
[05:16:08.717]          // =>  TRUE
[05:16:08.717]        <control if="hasDormant" while="" timeout="0" info="">
[05:16:08.717]          // if-block "hasDormant"
[05:16:08.717]            // =>  FALSE
[05:16:08.717]          // skip if-block "hasDormant"
[05:16:08.717]        </control>
[05:16:08.717]        <control if="!hasDormant" while="" timeout="0" info="">
[05:16:08.717]          // if-block "!hasDormant"
[05:16:08.717]            // =>  TRUE
[05:16:08.717]          <block atomic="false" info="">
[05:16:08.717]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:16:08.717]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:16:08.717]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:16:08.717]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:16:08.717]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:16:08.717]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:16:08.717]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:16:08.727]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:16:08.727]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:16:08.727]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:16:08.727]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:16:08.727]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:16:08.727]          </block>
[05:16:08.727]          // end if-block "!hasDormant"
[05:16:08.727]        </control>
[05:16:08.727]        // end if-block "isSWJ"
[05:16:08.727]      </control>
[05:16:08.727]      <control if="!isSWJ" while="" timeout="0" info="">
[05:16:08.727]        // if-block "!isSWJ"
[05:16:08.727]          // =>  FALSE
[05:16:08.727]        // skip if-block "!isSWJ"
[05:16:08.727]      </control>
[05:16:08.727]      <block atomic="false" info="">
[05:16:08.727]        ReadDP(0x0);
[05:16:08.727]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:16:08.727]      </block>
[05:16:08.727]      // end if-block "protType == 2"
[05:16:08.727]    </control>
[05:16:08.727]  </sequence>
[05:16:08.727]  
[05:16:08.737]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:16:08.737]  
[05:16:08.737]  <debugvars>
[05:16:08.737]    // Pre-defined
[05:16:08.737]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:16:08.737]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:16:08.737]    __dp=0x00000000
[05:16:08.737]    __ap=0x00000000
[05:16:08.737]    __traceout=0x00000000      (Trace Disabled)
[05:16:08.737]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:16:08.737]    __FlashAddr=0x00000000
[05:16:08.737]    __FlashLen=0x00000000
[05:16:08.737]    __FlashArg=0x00000000
[05:16:08.737]    __FlashOp=0x00000000
[05:16:08.737]    __Result=0x00000000
[05:16:08.737]  </debugvars>
[05:16:08.737]  
[05:16:08.737]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:16:08.737]    <block atomic="false" info="">
[05:16:08.737]      __var SW_DP_ABORT       = 0x0;
[05:16:08.737]        // -> [SW_DP_ABORT <= 0x00000000]
[05:16:08.737]      __var DP_CTRL_STAT      = 0x4;
[05:16:08.737]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:16:08.737]      __var DP_SELECT         = 0x8;
[05:16:08.737]        // -> [DP_SELECT <= 0x00000008]
[05:16:08.737]      __var powered_down      = 0;
[05:16:08.737]        // -> [powered_down <= 0x00000000]
[05:16:08.737]      WriteDP(DP_SELECT, 0x00000000);
[05:16:08.737]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:16:08.737]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:16:08.737]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:16:08.737]        // -> [powered_down <= 0x00000001]
[05:16:08.737]    </block>
[05:16:08.737]    <control if="powered_down" while="" timeout="0" info="">
[05:16:08.737]      // if-block "powered_down"
[05:16:08.737]        // =>  TRUE
[05:16:08.737]      <block atomic="false" info="">
[05:16:08.737]        Message(0, "Debug/System power-up request sent");
[05:16:08.737]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:16:08.737]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:16:08.737]      </block>
[05:16:08.737]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:16:08.737]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:16:08.747]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:16:08.747]        // while-condition  =>  FALSE
[05:16:08.748]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:16:08.748]      </control>
[05:16:08.748]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:16:08.748]        // if-block "(__protocol & 0xFFFF) == 1"
[05:16:08.748]          // =>  FALSE
[05:16:08.748]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:16:08.748]      </control>
[05:16:08.748]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:16:08.748]        // if-block "(__protocol & 0xFFFF) == 2"
[05:16:08.748]          // =>  TRUE
[05:16:08.748]        <block atomic="false" info="">
[05:16:08.748]          Message(0, "executing SWD power up");
[05:16:08.748]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:16:08.748]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:16:08.748]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:16:08.748]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:16:08.748]        </block>
[05:16:08.748]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:16:08.748]      </control>
[05:16:08.748]      // end if-block "powered_down"
[05:16:08.748]    </control>
[05:16:08.748]    <block atomic="false" info="">
[05:16:08.748]      __var DEBUG_PORT_VAL    = 0;
[05:16:08.748]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:16:08.748]      __var ACCESS_POINT_VAL  = 0;
[05:16:08.748]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:16:08.748]      __ap = 1; 
[05:16:08.748]        // -> [__ap <= 0x00000001]
[05:16:08.748]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:16:08.757]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:16:08.757]      __ap = 4;
[05:16:08.757]        // -> [__ap <= 0x00000004]
[05:16:08.757]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:16:08.757]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:16:08.757]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:16:08.757]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:16:08.757]    </block>
[05:16:08.757]    <block atomic="false" info="">
[05:16:08.757]      __var nReset = 0x80;
[05:16:08.757]        // -> [nReset <= 0x00000080]
[05:16:08.757]      __var canReadPins = 0;
[05:16:08.757]        // -> [canReadPins <= 0x00000000]
[05:16:08.757]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:16:08.767]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:16:08.767]        // -> [canReadPins <= 0x00000001]
[05:16:08.767]    </block>
[05:16:08.767]    <control if="" while="1" timeout="200" info="">
[05:16:08.767]      // while "1"  (timeout="200")
[05:16:08.767]      // while-condition  =>  TRUE
[05:16:08.767]      // while "1"  (timeout="200")
[05:16:08.767]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.768]      // while "1"  (timeout="200")
[05:16:08.768]      // while-condition  =>  TRUE
[05:16:08.777]      // while "1"  (timeout="200")
[05:16:08.777]      // while  =>  TIMEOUT
[05:16:08.777]      // end while "1"
[05:16:08.777]    </control>
[05:16:08.777]    <control if="canReadPins" while="" timeout="0" info="">
[05:16:08.777]      // if-block "canReadPins"
[05:16:08.777]        // =>  TRUE
[05:16:08.777]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:16:08.777]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:16:08.777]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:16:08.777]        // while-condition  =>  FALSE
[05:16:08.777]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:16:08.777]      </control>
[05:16:08.777]      // end if-block "canReadPins"
[05:16:08.777]    </control>
[05:16:08.777]    <control if="!canReadPins" while="" timeout="0" info="">
[05:16:08.777]      // if-block "!canReadPins"
[05:16:08.777]        // =>  FALSE
[05:16:08.777]      // skip if-block "!canReadPins"
[05:16:08.777]    </control>
[05:16:08.777]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:16:08.777]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:16:08.777]        // =>  TRUE
[05:16:08.777]      <block atomic="false" info="">
[05:16:08.777]        WriteAP(0x00, 0x190008);
[05:16:08.777]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:16:08.777]        WriteAP(0xF0, 0x01);
[05:16:08.777]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:16:08.777]      </block>
[05:16:08.777]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:16:08.777]    </control>
[05:16:08.787]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:16:08.787]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:16:08.787]        // =>  FALSE
[05:16:08.787]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:16:08.787]    </control>
[05:16:08.787]    <block atomic="false" info="">
[05:16:08.787]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:16:08.787]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:16:08.787]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:16:08.787]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:16:08.787]      __ap = 0; //lets make sure we reset the access point selection
[05:16:08.787]        // -> [__ap <= 0x00000000]
[05:16:08.787]    </block>
[05:16:08.787]  </sequence>
[05:16:08.787]  
[05:16:08.810]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:16:08.810]  
[05:16:08.810]  <debugvars>
[05:16:08.810]    // Pre-defined
[05:16:08.810]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:16:08.810]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:16:08.810]    __dp=0x00000000
[05:16:08.810]    __ap=0x00000000
[05:16:08.810]    __traceout=0x00000000      (Trace Disabled)
[05:16:08.810]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:16:08.810]    __FlashAddr=0x00000000
[05:16:08.810]    __FlashLen=0x00000000
[05:16:08.813]    __FlashArg=0x00000000
[05:16:08.813]    __FlashOp=0x00000000
[05:16:08.813]    __Result=0x00000000
[05:16:08.813]  </debugvars>
[05:16:08.813]  
[05:16:08.813]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:16:08.813]    <block atomic="false" info="">
[05:16:08.813]      __var deviceID = 0;
[05:16:08.813]        // -> [deviceID <= 0x00000000]
[05:16:08.813]      __var version = 0;
[05:16:08.813]        // -> [version <= 0x00000000]
[05:16:08.813]      __var partNum = 0;
[05:16:08.813]        // -> [partNum <= 0x00000000]
[05:16:08.813]      __var manuf = 0;
[05:16:08.813]        // -> [manuf <= 0x00000000]
[05:16:08.813]      __var isMSPM0G1X0X_G3X0X = 0;
[05:16:08.813]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:16:08.813]      __var isProduction = 0;
[05:16:08.813]        // -> [isProduction <= 0x00000000]
[05:16:08.813]      __var continueId = 0;
[05:16:08.813]        // -> [continueId <= 0x00000000]
[05:16:08.813]      deviceID =   Read32(0x41C40004);
[05:16:08.817]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:16:08.817]        // -> [deviceID <= 0x2BB8802F]
[05:16:08.817]      version = deviceID >> 28;
[05:16:08.817]        // -> [version <= 0x00000002]
[05:16:08.817]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:16:08.817]        // -> [partNum <= 0x0000BB88]
[05:16:08.817]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:16:08.817]        // -> [manuf <= 0x00000017]
[05:16:08.817]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:16:08.817]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:16:08.817]      isProduction = (version > 0);
[05:16:08.817]        // -> [isProduction <= 0x00000001]
[05:16:08.817]    </block>
[05:16:08.817]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:16:08.817]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:16:08.817]        // =>  FALSE
[05:16:08.817]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:16:08.817]    </control>
[05:16:08.817]    <control if="continueId == 4" while="" timeout="0" info="">
[05:16:08.817]      // if-block "continueId == 4"
[05:16:08.817]        // =>  FALSE
[05:16:08.817]      // skip if-block "continueId == 4"
[05:16:08.817]    </control>
[05:16:08.817]    <control if="!isProduction" while="" timeout="0" info="">
[05:16:08.817]      // if-block "!isProduction"
[05:16:08.817]        // =>  FALSE
[05:16:08.817]      // skip if-block "!isProduction"
[05:16:08.817]    </control>
[05:16:08.817]  </sequence>
[05:16:08.817]  
[05:16:14.323]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:16:14.323]  
[05:16:14.333]  <debugvars>
[05:16:14.333]    // Pre-defined
[05:16:14.333]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:16:14.333]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:16:14.333]    __dp=0x00000000
[05:16:14.333]    __ap=0x00000000
[05:16:14.333]    __traceout=0x00000000      (Trace Disabled)
[05:16:14.333]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:16:14.333]    __FlashAddr=0x00000000
[05:16:14.333]    __FlashLen=0x00000000
[05:16:14.333]    __FlashArg=0x00000000
[05:16:14.333]    __FlashOp=0x00000000
[05:16:14.333]    __Result=0x00000000
[05:16:14.333]  </debugvars>
[05:16:14.333]  
[05:16:14.333]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:16:14.333]    <block atomic="false" info="">
[05:16:14.335]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:16:14.335]        // -> [isSWJ <= 0x00000001]
[05:16:14.335]      __var hasDormant = __protocol & 0x00020000;
[05:16:14.335]        // -> [hasDormant <= 0x00000000]
[05:16:14.335]      __var protType   = __protocol & 0x0000FFFF;
[05:16:14.335]        // -> [protType <= 0x00000002]
[05:16:14.335]    </block>
[05:16:14.335]    <control if="protType == 1" while="" timeout="0" info="">
[05:16:14.335]      // if-block "protType == 1"
[05:16:14.335]        // =>  FALSE
[05:16:14.335]      // skip if-block "protType == 1"
[05:16:14.335]    </control>
[05:16:14.335]    <control if="protType == 2" while="" timeout="0" info="">
[05:16:14.335]      // if-block "protType == 2"
[05:16:14.335]        // =>  TRUE
[05:16:14.335]      <control if="isSWJ" while="" timeout="0" info="">
[05:16:14.335]        // if-block "isSWJ"
[05:16:14.335]          // =>  TRUE
[05:16:14.335]        <control if="hasDormant" while="" timeout="0" info="">
[05:16:14.335]          // if-block "hasDormant"
[05:16:14.335]            // =>  FALSE
[05:16:14.335]          // skip if-block "hasDormant"
[05:16:14.335]        </control>
[05:16:14.335]        <control if="!hasDormant" while="" timeout="0" info="">
[05:16:14.335]          // if-block "!hasDormant"
[05:16:14.335]            // =>  TRUE
[05:16:14.335]          <block atomic="false" info="">
[05:16:14.335]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:16:14.335]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:16:14.335]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:16:14.335]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:16:14.335]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:16:14.335]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:16:14.335]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:16:14.345]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:16:14.345]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:16:14.345]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:16:14.345]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:16:14.345]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:16:14.345]          </block>
[05:16:14.345]          // end if-block "!hasDormant"
[05:16:14.345]        </control>
[05:16:14.345]        // end if-block "isSWJ"
[05:16:14.345]      </control>
[05:16:14.345]      <control if="!isSWJ" while="" timeout="0" info="">
[05:16:14.345]        // if-block "!isSWJ"
[05:16:14.345]          // =>  FALSE
[05:16:14.345]        // skip if-block "!isSWJ"
[05:16:14.345]      </control>
[05:16:14.345]      <block atomic="false" info="">
[05:16:14.345]        ReadDP(0x0);
[05:16:14.345]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:16:14.345]      </block>
[05:16:14.345]      // end if-block "protType == 2"
[05:16:14.345]    </control>
[05:16:14.345]  </sequence>
[05:16:14.345]  
[05:16:14.355]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:16:14.355]  
[05:16:14.355]  <debugvars>
[05:16:14.355]    // Pre-defined
[05:16:14.355]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:16:14.355]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:16:14.355]    __dp=0x00000000
[05:16:14.355]    __ap=0x00000000
[05:16:14.355]    __traceout=0x00000000      (Trace Disabled)
[05:16:14.355]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:16:14.355]    __FlashAddr=0x00000000
[05:16:14.355]    __FlashLen=0x00000000
[05:16:14.355]    __FlashArg=0x00000000
[05:16:14.355]    __FlashOp=0x00000000
[05:16:14.355]    __Result=0x00000000
[05:16:14.355]  </debugvars>
[05:16:14.355]  
[05:16:14.355]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:16:14.355]    <block atomic="false" info="">
[05:16:14.355]      __var SW_DP_ABORT       = 0x0;
[05:16:14.355]        // -> [SW_DP_ABORT <= 0x00000000]
[05:16:14.355]      __var DP_CTRL_STAT      = 0x4;
[05:16:14.355]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:16:14.355]      __var DP_SELECT         = 0x8;
[05:16:14.355]        // -> [DP_SELECT <= 0x00000008]
[05:16:14.355]      __var powered_down      = 0;
[05:16:14.355]        // -> [powered_down <= 0x00000000]
[05:16:14.355]      WriteDP(DP_SELECT, 0x00000000);
[05:16:14.355]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:16:14.355]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:16:14.355]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:16:14.355]        // -> [powered_down <= 0x00000001]
[05:16:14.355]    </block>
[05:16:14.364]    <control if="powered_down" while="" timeout="0" info="">
[05:16:14.364]      // if-block "powered_down"
[05:16:14.364]        // =>  TRUE
[05:16:14.364]      <block atomic="false" info="">
[05:16:14.364]        Message(0, "Debug/System power-up request sent");
[05:16:14.365]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:16:14.365]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:16:14.365]      </block>
[05:16:14.365]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:16:14.365]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:16:14.365]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:16:14.365]        // while-condition  =>  FALSE
[05:16:14.365]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:16:14.365]      </control>
[05:16:14.365]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:16:14.365]        // if-block "(__protocol & 0xFFFF) == 1"
[05:16:14.365]          // =>  FALSE
[05:16:14.365]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:16:14.365]      </control>
[05:16:14.365]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:16:14.365]        // if-block "(__protocol & 0xFFFF) == 2"
[05:16:14.365]          // =>  TRUE
[05:16:14.365]        <block atomic="false" info="">
[05:16:14.365]          Message(0, "executing SWD power up");
[05:16:14.373]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:16:14.374]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:16:14.374]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:16:14.374]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:16:14.374]        </block>
[05:16:14.374]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:16:14.374]      </control>
[05:16:14.374]      // end if-block "powered_down"
[05:16:14.374]    </control>
[05:16:14.374]    <block atomic="false" info="">
[05:16:14.374]      __var DEBUG_PORT_VAL    = 0;
[05:16:14.374]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:16:14.374]      __var ACCESS_POINT_VAL  = 0;
[05:16:14.374]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:16:14.374]      __ap = 1; 
[05:16:14.374]        // -> [__ap <= 0x00000001]
[05:16:14.374]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:16:14.374]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:16:14.374]      __ap = 4;
[05:16:14.374]        // -> [__ap <= 0x00000004]
[05:16:14.374]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:16:14.384]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:16:14.384]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:16:14.384]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:16:14.384]    </block>
[05:16:14.384]    <block atomic="false" info="">
[05:16:14.384]      __var nReset = 0x80;
[05:16:14.384]        // -> [nReset <= 0x00000080]
[05:16:14.384]      __var canReadPins = 0;
[05:16:14.384]        // -> [canReadPins <= 0x00000000]
[05:16:14.384]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:16:14.384]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:16:14.384]        // -> [canReadPins <= 0x00000001]
[05:16:14.384]    </block>
[05:16:14.384]    <control if="" while="1" timeout="200" info="">
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.384]      // while "1"  (timeout="200")
[05:16:14.384]      // while-condition  =>  TRUE
[05:16:14.394]      // while "1"  (timeout="200")
[05:16:14.394]      // while  =>  TIMEOUT
[05:16:14.394]      // end while "1"
[05:16:14.394]    </control>
[05:16:14.394]    <control if="canReadPins" while="" timeout="0" info="">
[05:16:14.394]      // if-block "canReadPins"
[05:16:14.394]        // =>  TRUE
[05:16:14.394]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:16:14.394]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:16:14.395]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:16:14.395]        // while-condition  =>  FALSE
[05:16:14.395]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:16:14.395]      </control>
[05:16:14.395]      // end if-block "canReadPins"
[05:16:14.395]    </control>
[05:16:14.395]    <control if="!canReadPins" while="" timeout="0" info="">
[05:16:14.395]      // if-block "!canReadPins"
[05:16:14.395]        // =>  FALSE
[05:16:14.395]      // skip if-block "!canReadPins"
[05:16:14.395]    </control>
[05:16:14.395]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:16:14.395]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:16:14.395]        // =>  TRUE
[05:16:14.395]      <block atomic="false" info="">
[05:16:14.395]        WriteAP(0x00, 0x190008);
[05:16:14.395]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:16:14.395]        WriteAP(0xF0, 0x01);
[05:16:14.395]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:16:14.395]      </block>
[05:16:14.395]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:16:14.395]    </control>
[05:16:14.395]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:16:14.395]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:16:14.395]        // =>  FALSE
[05:16:14.404]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:16:14.404]    </control>
[05:16:14.404]    <block atomic="false" info="">
[05:16:14.404]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:16:14.406]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:16:14.406]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:16:14.406]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:16:14.409]      __ap = 0; //lets make sure we reset the access point selection
[05:16:14.409]        // -> [__ap <= 0x00000000]
[05:16:14.409]    </block>
[05:16:14.409]  </sequence>
[05:16:14.409]  
[05:16:14.427]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:16:14.427]  
[05:16:14.427]  <debugvars>
[05:16:14.427]    // Pre-defined
[05:16:14.427]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:16:14.427]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:16:14.427]    __dp=0x00000000
[05:16:14.427]    __ap=0x00000000
[05:16:14.427]    __traceout=0x00000000      (Trace Disabled)
[05:16:14.427]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:16:14.427]    __FlashAddr=0x00000000
[05:16:14.427]    __FlashLen=0x00000000
[05:16:14.427]    __FlashArg=0x00000000
[05:16:14.427]    __FlashOp=0x00000000
[05:16:14.427]    __Result=0x00000000
[05:16:14.427]  </debugvars>
[05:16:14.427]  
[05:16:14.427]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:16:14.427]    <block atomic="false" info="">
[05:16:14.427]      __var deviceID = 0;
[05:16:14.427]        // -> [deviceID <= 0x00000000]
[05:16:14.427]      __var version = 0;
[05:16:14.433]        // -> [version <= 0x00000000]
[05:16:14.433]      __var partNum = 0;
[05:16:14.433]        // -> [partNum <= 0x00000000]
[05:16:14.433]      __var manuf = 0;
[05:16:14.433]        // -> [manuf <= 0x00000000]
[05:16:14.433]      __var isMSPM0G1X0X_G3X0X = 0;
[05:16:14.433]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:16:14.433]      __var isProduction = 0;
[05:16:14.433]        // -> [isProduction <= 0x00000000]
[05:16:14.434]      __var continueId = 0;
[05:16:14.434]        // -> [continueId <= 0x00000000]
[05:16:14.434]      deviceID =   Read32(0x41C40004);
[05:16:14.437]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:16:14.437]        // -> [deviceID <= 0x2BB8802F]
[05:16:14.437]      version = deviceID >> 28;
[05:16:14.437]        // -> [version <= 0x00000002]
[05:16:14.437]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:16:14.437]        // -> [partNum <= 0x0000BB88]
[05:16:14.437]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:16:14.437]        // -> [manuf <= 0x00000017]
[05:16:14.437]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:16:14.437]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:16:14.437]      isProduction = (version > 0);
[05:16:14.437]        // -> [isProduction <= 0x00000001]
[05:16:14.437]    </block>
[05:16:14.437]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:16:14.437]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:16:14.437]        // =>  FALSE
[05:16:14.437]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:16:14.437]    </control>
[05:16:14.437]    <control if="continueId == 4" while="" timeout="0" info="">
[05:16:14.437]      // if-block "continueId == 4"
[05:16:14.437]        // =>  FALSE
[05:16:14.437]      // skip if-block "continueId == 4"
[05:16:14.437]    </control>
[05:16:14.437]    <control if="!isProduction" while="" timeout="0" info="">
[05:16:14.437]      // if-block "!isProduction"
[05:16:14.437]        // =>  FALSE
[05:16:14.437]      // skip if-block "!isProduction"
[05:16:14.437]    </control>
[05:16:14.437]  </sequence>
[05:16:14.437]  
[05:19:12.900]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:19:12.900]  
[05:19:12.918]  <debugvars>
[05:19:12.918]    // Pre-defined
[05:19:12.918]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:19:12.918]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:19:12.918]    __dp=0x00000000
[05:19:12.918]    __ap=0x00000000
[05:19:12.918]    __traceout=0x00000000      (Trace Disabled)
[05:19:12.918]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:19:12.918]    __FlashAddr=0x00000000
[05:19:12.918]    __FlashLen=0x00000000
[05:19:12.918]    __FlashArg=0x00000000
[05:19:12.918]    __FlashOp=0x00000000
[05:19:12.918]    __Result=0x00000000
[05:19:12.918]  </debugvars>
[05:19:12.918]  
[05:19:12.918]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:19:12.920]    <block atomic="false" info="">
[05:19:12.920]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:19:12.920]        // -> [isSWJ <= 0x00000001]
[05:19:12.920]      __var hasDormant = __protocol & 0x00020000;
[05:19:12.920]        // -> [hasDormant <= 0x00000000]
[05:19:12.920]      __var protType   = __protocol & 0x0000FFFF;
[05:19:12.920]        // -> [protType <= 0x00000002]
[05:19:12.920]    </block>
[05:19:12.920]    <control if="protType == 1" while="" timeout="0" info="">
[05:19:12.920]      // if-block "protType == 1"
[05:19:12.920]        // =>  FALSE
[05:19:12.920]      // skip if-block "protType == 1"
[05:19:12.920]    </control>
[05:19:12.920]    <control if="protType == 2" while="" timeout="0" info="">
[05:19:12.920]      // if-block "protType == 2"
[05:19:12.920]        // =>  TRUE
[05:19:12.920]      <control if="isSWJ" while="" timeout="0" info="">
[05:19:12.920]        // if-block "isSWJ"
[05:19:12.920]          // =>  TRUE
[05:19:12.920]        <control if="hasDormant" while="" timeout="0" info="">
[05:19:12.920]          // if-block "hasDormant"
[05:19:12.920]            // =>  FALSE
[05:19:12.920]          // skip if-block "hasDormant"
[05:19:12.920]        </control>
[05:19:12.920]        <control if="!hasDormant" while="" timeout="0" info="">
[05:19:12.920]          // if-block "!hasDormant"
[05:19:12.920]            // =>  TRUE
[05:19:12.920]          <block atomic="false" info="">
[05:19:12.920]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:19:12.920]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:19:12.920]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:19:12.920]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:19:12.920]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:19:12.920]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:19:12.920]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:19:12.920]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:19:12.920]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:19:12.930]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:19:12.930]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:19:12.930]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:19:12.930]          </block>
[05:19:12.930]          // end if-block "!hasDormant"
[05:19:12.930]        </control>
[05:19:12.930]        // end if-block "isSWJ"
[05:19:12.930]      </control>
[05:19:12.930]      <control if="!isSWJ" while="" timeout="0" info="">
[05:19:12.930]        // if-block "!isSWJ"
[05:19:12.930]          // =>  FALSE
[05:19:12.930]        // skip if-block "!isSWJ"
[05:19:12.930]      </control>
[05:19:12.930]      <block atomic="false" info="">
[05:19:12.930]        ReadDP(0x0);
[05:19:12.930]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:19:12.930]      </block>
[05:19:12.930]      // end if-block "protType == 2"
[05:19:12.930]    </control>
[05:19:12.930]  </sequence>
[05:19:12.930]  
[05:19:12.940]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:19:12.940]  
[05:19:12.940]  <debugvars>
[05:19:12.940]    // Pre-defined
[05:19:12.940]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:19:12.940]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:19:12.940]    __dp=0x00000000
[05:19:12.940]    __ap=0x00000000
[05:19:12.940]    __traceout=0x00000000      (Trace Disabled)
[05:19:12.940]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:19:12.940]    __FlashAddr=0x00000000
[05:19:12.940]    __FlashLen=0x00000000
[05:19:12.940]    __FlashArg=0x00000000
[05:19:12.940]    __FlashOp=0x00000000
[05:19:12.940]    __Result=0x00000000
[05:19:12.940]  </debugvars>
[05:19:12.940]  
[05:19:12.940]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:19:12.940]    <block atomic="false" info="">
[05:19:12.940]      __var SW_DP_ABORT       = 0x0;
[05:19:12.940]        // -> [SW_DP_ABORT <= 0x00000000]
[05:19:12.940]      __var DP_CTRL_STAT      = 0x4;
[05:19:12.940]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:19:12.940]      __var DP_SELECT         = 0x8;
[05:19:12.940]        // -> [DP_SELECT <= 0x00000008]
[05:19:12.940]      __var powered_down      = 0;
[05:19:12.940]        // -> [powered_down <= 0x00000000]
[05:19:12.940]      WriteDP(DP_SELECT, 0x00000000);
[05:19:12.940]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:19:12.940]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:19:12.940]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:19:12.940]        // -> [powered_down <= 0x00000001]
[05:19:12.940]    </block>
[05:19:12.940]    <control if="powered_down" while="" timeout="0" info="">
[05:19:12.940]      // if-block "powered_down"
[05:19:12.940]        // =>  TRUE
[05:19:12.940]      <block atomic="false" info="">
[05:19:12.940]        Message(0, "Debug/System power-up request sent");
[05:19:12.950]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:19:12.950]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:19:12.950]      </block>
[05:19:12.950]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:19:12.950]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:19:12.950]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:19:12.950]        // while-condition  =>  FALSE
[05:19:12.950]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:19:12.950]      </control>
[05:19:12.950]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:19:12.950]        // if-block "(__protocol & 0xFFFF) == 1"
[05:19:12.950]          // =>  FALSE
[05:19:12.950]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:19:12.950]      </control>
[05:19:12.950]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:19:12.950]        // if-block "(__protocol & 0xFFFF) == 2"
[05:19:12.950]          // =>  TRUE
[05:19:12.950]        <block atomic="false" info="">
[05:19:12.950]          Message(0, "executing SWD power up");
[05:19:12.950]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:19:12.960]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:19:12.960]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:19:12.960]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:19:12.960]        </block>
[05:19:12.960]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:19:12.960]      </control>
[05:19:12.960]      // end if-block "powered_down"
[05:19:12.960]    </control>
[05:19:12.960]    <block atomic="false" info="">
[05:19:12.960]      __var DEBUG_PORT_VAL    = 0;
[05:19:12.960]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:19:12.960]      __var ACCESS_POINT_VAL  = 0;
[05:19:12.960]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:19:12.960]      __ap = 1; 
[05:19:12.960]        // -> [__ap <= 0x00000001]
[05:19:12.960]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:19:12.960]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:19:12.960]      __ap = 4;
[05:19:12.960]        // -> [__ap <= 0x00000004]
[05:19:12.960]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:19:12.970]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:19:12.970]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:19:12.970]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:19:12.970]    </block>
[05:19:12.970]    <block atomic="false" info="">
[05:19:12.970]      __var nReset = 0x80;
[05:19:12.970]        // -> [nReset <= 0x00000080]
[05:19:12.970]      __var canReadPins = 0;
[05:19:12.970]        // -> [canReadPins <= 0x00000000]
[05:19:12.970]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:19:12.970]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:19:12.970]        // -> [canReadPins <= 0x00000001]
[05:19:12.970]    </block>
[05:19:12.970]    <control if="" while="1" timeout="200" info="">
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.970]      // while "1"  (timeout="200")
[05:19:12.970]      // while-condition  =>  TRUE
[05:19:12.980]      // while "1"  (timeout="200")
[05:19:12.980]      // while  =>  TIMEOUT
[05:19:12.980]      // end while "1"
[05:19:12.980]    </control>
[05:19:12.980]    <control if="canReadPins" while="" timeout="0" info="">
[05:19:12.980]      // if-block "canReadPins"
[05:19:12.980]        // =>  TRUE
[05:19:12.980]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:19:12.980]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:19:12.980]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:19:12.980]        // while-condition  =>  FALSE
[05:19:12.980]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:19:12.980]      </control>
[05:19:12.980]      // end if-block "canReadPins"
[05:19:12.980]    </control>
[05:19:12.980]    <control if="!canReadPins" while="" timeout="0" info="">
[05:19:12.980]      // if-block "!canReadPins"
[05:19:12.980]        // =>  FALSE
[05:19:12.980]      // skip if-block "!canReadPins"
[05:19:12.980]    </control>
[05:19:12.980]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:19:12.980]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:19:12.980]        // =>  TRUE
[05:19:12.980]      <block atomic="false" info="">
[05:19:12.980]        WriteAP(0x00, 0x190008);
[05:19:12.980]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:19:12.980]        WriteAP(0xF0, 0x01);
[05:19:12.990]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:19:12.990]      </block>
[05:19:12.990]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:19:12.991]    </control>
[05:19:12.991]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:19:12.991]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:19:12.991]        // =>  FALSE
[05:19:12.991]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:19:12.991]    </control>
[05:19:12.991]    <block atomic="false" info="">
[05:19:12.991]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:19:12.991]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:19:12.991]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:19:12.991]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:19:12.991]      __ap = 0; //lets make sure we reset the access point selection
[05:19:12.991]        // -> [__ap <= 0x00000000]
[05:19:12.991]    </block>
[05:19:12.991]  </sequence>
[05:19:12.991]  
[05:19:13.020]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:19:13.020]  
[05:19:13.020]  <debugvars>
[05:19:13.020]    // Pre-defined
[05:19:13.020]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:19:13.020]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:19:13.020]    __dp=0x00000000
[05:19:13.020]    __ap=0x00000000
[05:19:13.020]    __traceout=0x00000000      (Trace Disabled)
[05:19:13.020]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:19:13.020]    __FlashAddr=0x00000000
[05:19:13.020]    __FlashLen=0x00000000
[05:19:13.020]    __FlashArg=0x00000000
[05:19:13.020]    __FlashOp=0x00000000
[05:19:13.020]    __Result=0x00000000
[05:19:13.020]  </debugvars>
[05:19:13.020]  
[05:19:13.020]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:19:13.020]    <block atomic="false" info="">
[05:19:13.020]      __var deviceID = 0;
[05:19:13.020]        // -> [deviceID <= 0x00000000]
[05:19:13.020]      __var version = 0;
[05:19:13.020]        // -> [version <= 0x00000000]
[05:19:13.020]      __var partNum = 0;
[05:19:13.020]        // -> [partNum <= 0x00000000]
[05:19:13.020]      __var manuf = 0;
[05:19:13.020]        // -> [manuf <= 0x00000000]
[05:19:13.020]      __var isMSPM0G1X0X_G3X0X = 0;
[05:19:13.020]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:19:13.020]      __var isProduction = 0;
[05:19:13.020]        // -> [isProduction <= 0x00000000]
[05:19:13.020]      __var continueId = 0;
[05:19:13.020]        // -> [continueId <= 0x00000000]
[05:19:13.020]      deviceID =   Read32(0x41C40004);
[05:19:13.020]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:19:13.020]        // -> [deviceID <= 0x2BB8802F]
[05:19:13.020]      version = deviceID >> 28;
[05:19:13.030]        // -> [version <= 0x00000002]
[05:19:13.030]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:19:13.030]        // -> [partNum <= 0x0000BB88]
[05:19:13.030]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:19:13.030]        // -> [manuf <= 0x00000017]
[05:19:13.030]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:19:13.030]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:19:13.030]      isProduction = (version > 0);
[05:19:13.030]        // -> [isProduction <= 0x00000001]
[05:19:13.030]    </block>
[05:19:13.030]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:19:13.030]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:19:13.030]        // =>  FALSE
[05:19:13.030]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:19:13.030]    </control>
[05:19:13.030]    <control if="continueId == 4" while="" timeout="0" info="">
[05:19:13.030]      // if-block "continueId == 4"
[05:19:13.032]        // =>  FALSE
[05:19:13.032]      // skip if-block "continueId == 4"
[05:19:13.032]    </control>
[05:19:13.032]    <control if="!isProduction" while="" timeout="0" info="">
[05:19:13.032]      // if-block "!isProduction"
[05:19:13.032]        // =>  FALSE
[05:19:13.032]      // skip if-block "!isProduction"
[05:19:13.032]    </control>
[05:19:13.032]  </sequence>
[05:19:13.032]  
[05:19:23.679]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:19:23.679]  
[05:19:23.691]  <debugvars>
[05:19:23.691]    // Pre-defined
[05:19:23.691]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:19:23.691]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:19:23.691]    __dp=0x00000000
[05:19:23.691]    __ap=0x00000000
[05:19:23.691]    __traceout=0x00000000      (Trace Disabled)
[05:19:23.691]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:19:23.691]    __FlashAddr=0x00000000
[05:19:23.691]    __FlashLen=0x00000000
[05:19:23.691]    __FlashArg=0x00000000
[05:19:23.691]    __FlashOp=0x00000000
[05:19:23.691]    __Result=0x00000000
[05:19:23.691]  </debugvars>
[05:19:23.691]  
[05:19:23.691]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:19:23.691]    <block atomic="false" info="">
[05:19:23.691]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:19:23.691]        // -> [isSWJ <= 0x00000001]
[05:19:23.691]      __var hasDormant = __protocol & 0x00020000;
[05:19:23.691]        // -> [hasDormant <= 0x00000000]
[05:19:23.691]      __var protType   = __protocol & 0x0000FFFF;
[05:19:23.691]        // -> [protType <= 0x00000002]
[05:19:23.691]    </block>
[05:19:23.691]    <control if="protType == 1" while="" timeout="0" info="">
[05:19:23.691]      // if-block "protType == 1"
[05:19:23.691]        // =>  FALSE
[05:19:23.691]      // skip if-block "protType == 1"
[05:19:23.691]    </control>
[05:19:23.691]    <control if="protType == 2" while="" timeout="0" info="">
[05:19:23.691]      // if-block "protType == 2"
[05:19:23.691]        // =>  TRUE
[05:19:23.691]      <control if="isSWJ" while="" timeout="0" info="">
[05:19:23.691]        // if-block "isSWJ"
[05:19:23.691]          // =>  TRUE
[05:19:23.691]        <control if="hasDormant" while="" timeout="0" info="">
[05:19:23.691]          // if-block "hasDormant"
[05:19:23.691]            // =>  FALSE
[05:19:23.691]          // skip if-block "hasDormant"
[05:19:23.691]        </control>
[05:19:23.691]        <control if="!hasDormant" while="" timeout="0" info="">
[05:19:23.691]          // if-block "!hasDormant"
[05:19:23.691]            // =>  TRUE
[05:19:23.691]          <block atomic="false" info="">
[05:19:23.691]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:19:23.691]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:19:23.691]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:19:23.699]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:19:23.699]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:19:23.699]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:19:23.699]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:19:23.699]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:19:23.699]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:19:23.699]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:19:23.699]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:19:23.699]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:19:23.699]          </block>
[05:19:23.699]          // end if-block "!hasDormant"
[05:19:23.699]        </control>
[05:19:23.699]        // end if-block "isSWJ"
[05:19:23.699]      </control>
[05:19:23.699]      <control if="!isSWJ" while="" timeout="0" info="">
[05:19:23.699]        // if-block "!isSWJ"
[05:19:23.699]          // =>  FALSE
[05:19:23.699]        // skip if-block "!isSWJ"
[05:19:23.699]      </control>
[05:19:23.699]      <block atomic="false" info="">
[05:19:23.699]        ReadDP(0x0);
[05:19:23.709]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:19:23.709]      </block>
[05:19:23.709]      // end if-block "protType == 2"
[05:19:23.709]    </control>
[05:19:23.709]  </sequence>
[05:19:23.709]  
[05:19:23.709]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:19:23.709]  
[05:19:23.709]  <debugvars>
[05:19:23.709]    // Pre-defined
[05:19:23.709]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:19:23.709]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:19:23.709]    __dp=0x00000000
[05:19:23.709]    __ap=0x00000000
[05:19:23.709]    __traceout=0x00000000      (Trace Disabled)
[05:19:23.709]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:19:23.709]    __FlashAddr=0x00000000
[05:19:23.709]    __FlashLen=0x00000000
[05:19:23.709]    __FlashArg=0x00000000
[05:19:23.709]    __FlashOp=0x00000000
[05:19:23.709]    __Result=0x00000000
[05:19:23.709]  </debugvars>
[05:19:23.709]  
[05:19:23.709]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:19:23.709]    <block atomic="false" info="">
[05:19:23.709]      __var SW_DP_ABORT       = 0x0;
[05:19:23.709]        // -> [SW_DP_ABORT <= 0x00000000]
[05:19:23.709]      __var DP_CTRL_STAT      = 0x4;
[05:19:23.709]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:19:23.709]      __var DP_SELECT         = 0x8;
[05:19:23.709]        // -> [DP_SELECT <= 0x00000008]
[05:19:23.709]      __var powered_down      = 0;
[05:19:23.709]        // -> [powered_down <= 0x00000000]
[05:19:23.709]      WriteDP(DP_SELECT, 0x00000000);
[05:19:23.709]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:19:23.709]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:19:23.719]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:19:23.719]        // -> [powered_down <= 0x00000001]
[05:19:23.719]    </block>
[05:19:23.719]    <control if="powered_down" while="" timeout="0" info="">
[05:19:23.719]      // if-block "powered_down"
[05:19:23.719]        // =>  TRUE
[05:19:23.719]      <block atomic="false" info="">
[05:19:23.719]        Message(0, "Debug/System power-up request sent");
[05:19:23.719]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:19:23.719]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:19:23.719]      </block>
[05:19:23.719]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:19:23.719]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:19:23.719]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:19:23.719]        // while-condition  =>  FALSE
[05:19:23.719]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:19:23.719]      </control>
[05:19:23.719]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:19:23.719]        // if-block "(__protocol & 0xFFFF) == 1"
[05:19:23.719]          // =>  FALSE
[05:19:23.719]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:19:23.719]      </control>
[05:19:23.719]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:19:23.719]        // if-block "(__protocol & 0xFFFF) == 2"
[05:19:23.719]          // =>  TRUE
[05:19:23.719]        <block atomic="false" info="">
[05:19:23.719]          Message(0, "executing SWD power up");
[05:19:23.729]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:19:23.731]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:19:23.731]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:19:23.731]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:19:23.731]        </block>
[05:19:23.731]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:19:23.731]      </control>
[05:19:23.731]      // end if-block "powered_down"
[05:19:23.731]    </control>
[05:19:23.731]    <block atomic="false" info="">
[05:19:23.731]      __var DEBUG_PORT_VAL    = 0;
[05:19:23.731]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:19:23.731]      __var ACCESS_POINT_VAL  = 0;
[05:19:23.731]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:19:23.731]      __ap = 1; 
[05:19:23.731]        // -> [__ap <= 0x00000001]
[05:19:23.731]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:19:23.731]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:19:23.731]      __ap = 4;
[05:19:23.731]        // -> [__ap <= 0x00000004]
[05:19:23.731]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:19:23.739]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:19:23.739]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:19:23.739]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:19:23.739]    </block>
[05:19:23.739]    <block atomic="false" info="">
[05:19:23.739]      __var nReset = 0x80;
[05:19:23.739]        // -> [nReset <= 0x00000080]
[05:19:23.739]      __var canReadPins = 0;
[05:19:23.739]        // -> [canReadPins <= 0x00000000]
[05:19:23.739]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:19:23.739]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:19:23.739]        // -> [canReadPins <= 0x00000001]
[05:19:23.739]    </block>
[05:19:23.739]    <control if="" while="1" timeout="200" info="">
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.739]      // while "1"  (timeout="200")
[05:19:23.739]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.749]      // while "1"  (timeout="200")
[05:19:23.749]      // while-condition  =>  TRUE
[05:19:23.759]      // while "1"  (timeout="200")
[05:19:23.759]      // while  =>  TIMEOUT
[05:19:23.759]      // end while "1"
[05:19:23.759]    </control>
[05:19:23.759]    <control if="canReadPins" while="" timeout="0" info="">
[05:19:23.759]      // if-block "canReadPins"
[05:19:23.759]        // =>  TRUE
[05:19:23.759]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:19:23.759]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:19:23.759]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:19:23.759]        // while-condition  =>  FALSE
[05:19:23.759]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:19:23.759]      </control>
[05:19:23.759]      // end if-block "canReadPins"
[05:19:23.759]    </control>
[05:19:23.759]    <control if="!canReadPins" while="" timeout="0" info="">
[05:19:23.759]      // if-block "!canReadPins"
[05:19:23.759]        // =>  FALSE
[05:19:23.759]      // skip if-block "!canReadPins"
[05:19:23.759]    </control>
[05:19:23.759]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:19:23.759]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:19:23.759]        // =>  TRUE
[05:19:23.759]      <block atomic="false" info="">
[05:19:23.759]        WriteAP(0x00, 0x190008);
[05:19:23.759]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:19:23.759]        WriteAP(0xF0, 0x01);
[05:19:23.769]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:19:23.769]      </block>
[05:19:23.769]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:19:23.769]    </control>
[05:19:23.769]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:19:23.769]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:19:23.769]        // =>  FALSE
[05:19:23.769]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:19:23.769]    </control>
[05:19:23.769]    <block atomic="false" info="">
[05:19:23.769]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:19:23.769]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:19:23.769]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:19:23.769]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:19:23.769]      __ap = 0; //lets make sure we reset the access point selection
[05:19:23.769]        // -> [__ap <= 0x00000000]
[05:19:23.769]    </block>
[05:19:23.769]  </sequence>
[05:19:23.769]  
[05:19:23.789]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:19:23.789]  
[05:19:23.789]  <debugvars>
[05:19:23.789]    // Pre-defined
[05:19:23.789]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:19:23.789]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:19:23.789]    __dp=0x00000000
[05:19:23.789]    __ap=0x00000000
[05:19:23.789]    __traceout=0x00000000      (Trace Disabled)
[05:19:23.789]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:19:23.789]    __FlashAddr=0x00000000
[05:19:23.789]    __FlashLen=0x00000000
[05:19:23.789]    __FlashArg=0x00000000
[05:19:23.789]    __FlashOp=0x00000000
[05:19:23.789]    __Result=0x00000000
[05:19:23.789]  </debugvars>
[05:19:23.789]  
[05:19:23.789]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:19:23.789]    <block atomic="false" info="">
[05:19:23.789]      __var deviceID = 0;
[05:19:23.789]        // -> [deviceID <= 0x00000000]
[05:19:23.789]      __var version = 0;
[05:19:23.789]        // -> [version <= 0x00000000]
[05:19:23.789]      __var partNum = 0;
[05:19:23.789]        // -> [partNum <= 0x00000000]
[05:19:23.789]      __var manuf = 0;
[05:19:23.789]        // -> [manuf <= 0x00000000]
[05:19:23.799]      __var isMSPM0G1X0X_G3X0X = 0;
[05:19:23.799]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:19:23.799]      __var isProduction = 0;
[05:19:23.799]        // -> [isProduction <= 0x00000000]
[05:19:23.799]      __var continueId = 0;
[05:19:23.799]        // -> [continueId <= 0x00000000]
[05:19:23.799]      deviceID =   Read32(0x41C40004);
[05:19:23.809]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:19:23.809]        // -> [deviceID <= 0x2BB8802F]
[05:19:23.809]      version = deviceID >> 28;
[05:19:23.809]        // -> [version <= 0x00000002]
[05:19:23.809]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:19:23.809]        // -> [partNum <= 0x0000BB88]
[05:19:23.809]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:19:23.809]        // -> [manuf <= 0x00000017]
[05:19:23.809]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:19:23.809]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:19:23.809]      isProduction = (version > 0);
[05:19:23.809]        // -> [isProduction <= 0x00000001]
[05:19:23.809]    </block>
[05:19:23.809]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:19:23.809]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:19:23.809]        // =>  FALSE
[05:19:23.809]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:19:23.809]    </control>
[05:19:23.809]    <control if="continueId == 4" while="" timeout="0" info="">
[05:19:23.809]      // if-block "continueId == 4"
[05:19:23.809]        // =>  FALSE
[05:19:23.809]      // skip if-block "continueId == 4"
[05:19:23.809]    </control>
[05:19:23.809]    <control if="!isProduction" while="" timeout="0" info="">
[05:19:23.809]      // if-block "!isProduction"
[05:19:23.809]        // =>  FALSE
[05:19:23.809]      // skip if-block "!isProduction"
[05:19:23.809]    </control>
[05:19:23.809]  </sequence>
[05:19:23.809]  
[05:21:36.103]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:21:36.103]  
[05:21:36.116]  <debugvars>
[05:21:36.116]    // Pre-defined
[05:21:36.116]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:21:36.116]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:21:36.116]    __dp=0x00000000
[05:21:36.116]    __ap=0x00000000
[05:21:36.116]    __traceout=0x00000000      (Trace Disabled)
[05:21:36.116]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:21:36.116]    __FlashAddr=0x00000000
[05:21:36.116]    __FlashLen=0x00000000
[05:21:36.116]    __FlashArg=0x00000000
[05:21:36.116]    __FlashOp=0x00000000
[05:21:36.116]    __Result=0x00000000
[05:21:36.116]  </debugvars>
[05:21:36.116]  
[05:21:36.116]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:21:36.116]    <block atomic="false" info="">
[05:21:36.116]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:21:36.116]        // -> [isSWJ <= 0x00000001]
[05:21:36.116]      __var hasDormant = __protocol & 0x00020000;
[05:21:36.116]        // -> [hasDormant <= 0x00000000]
[05:21:36.116]      __var protType   = __protocol & 0x0000FFFF;
[05:21:36.116]        // -> [protType <= 0x00000002]
[05:21:36.116]    </block>
[05:21:36.116]    <control if="protType == 1" while="" timeout="0" info="">
[05:21:36.116]      // if-block "protType == 1"
[05:21:36.116]        // =>  FALSE
[05:21:36.116]      // skip if-block "protType == 1"
[05:21:36.116]    </control>
[05:21:36.116]    <control if="protType == 2" while="" timeout="0" info="">
[05:21:36.116]      // if-block "protType == 2"
[05:21:36.116]        // =>  TRUE
[05:21:36.116]      <control if="isSWJ" while="" timeout="0" info="">
[05:21:36.116]        // if-block "isSWJ"
[05:21:36.116]          // =>  TRUE
[05:21:36.116]        <control if="hasDormant" while="" timeout="0" info="">
[05:21:36.116]          // if-block "hasDormant"
[05:21:36.116]            // =>  FALSE
[05:21:36.116]          // skip if-block "hasDormant"
[05:21:36.116]        </control>
[05:21:36.116]        <control if="!hasDormant" while="" timeout="0" info="">
[05:21:36.116]          // if-block "!hasDormant"
[05:21:36.116]            // =>  TRUE
[05:21:36.116]          <block atomic="false" info="">
[05:21:36.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:21:36.123]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:21:36.123]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:21:36.123]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:21:36.123]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:21:36.123]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:21:36.123]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:21:36.123]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:21:36.123]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:21:36.123]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:21:36.123]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:21:36.133]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:21:36.133]          </block>
[05:21:36.133]          // end if-block "!hasDormant"
[05:21:36.133]        </control>
[05:21:36.133]        // end if-block "isSWJ"
[05:21:36.133]      </control>
[05:21:36.133]      <control if="!isSWJ" while="" timeout="0" info="">
[05:21:36.133]        // if-block "!isSWJ"
[05:21:36.133]          // =>  FALSE
[05:21:36.133]        // skip if-block "!isSWJ"
[05:21:36.133]      </control>
[05:21:36.133]      <block atomic="false" info="">
[05:21:36.133]        ReadDP(0x0);
[05:21:36.135]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:21:36.135]      </block>
[05:21:36.135]      // end if-block "protType == 2"
[05:21:36.135]    </control>
[05:21:36.135]  </sequence>
[05:21:36.135]  
[05:21:36.135]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:21:36.135]  
[05:21:36.135]  <debugvars>
[05:21:36.135]    // Pre-defined
[05:21:36.135]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:21:36.135]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:21:36.135]    __dp=0x00000000
[05:21:36.135]    __ap=0x00000000
[05:21:36.135]    __traceout=0x00000000      (Trace Disabled)
[05:21:36.135]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:21:36.135]    __FlashAddr=0x00000000
[05:21:36.135]    __FlashLen=0x00000000
[05:21:36.135]    __FlashArg=0x00000000
[05:21:36.135]    __FlashOp=0x00000000
[05:21:36.135]    __Result=0x00000000
[05:21:36.135]  </debugvars>
[05:21:36.135]  
[05:21:36.135]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:21:36.135]    <block atomic="false" info="">
[05:21:36.135]      __var SW_DP_ABORT       = 0x0;
[05:21:36.135]        // -> [SW_DP_ABORT <= 0x00000000]
[05:21:36.135]      __var DP_CTRL_STAT      = 0x4;
[05:21:36.135]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:21:36.135]      __var DP_SELECT         = 0x8;
[05:21:36.135]        // -> [DP_SELECT <= 0x00000008]
[05:21:36.135]      __var powered_down      = 0;
[05:21:36.143]        // -> [powered_down <= 0x00000000]
[05:21:36.143]      WriteDP(DP_SELECT, 0x00000000);
[05:21:36.143]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:21:36.143]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:21:36.143]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:21:36.143]        // -> [powered_down <= 0x00000001]
[05:21:36.143]    </block>
[05:21:36.143]    <control if="powered_down" while="" timeout="0" info="">
[05:21:36.143]      // if-block "powered_down"
[05:21:36.143]        // =>  TRUE
[05:21:36.143]      <block atomic="false" info="">
[05:21:36.143]        Message(0, "Debug/System power-up request sent");
[05:21:36.143]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:21:36.143]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:21:36.143]      </block>
[05:21:36.143]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:21:36.143]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:21:36.143]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:21:36.143]        // while-condition  =>  FALSE
[05:21:36.143]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:21:36.143]      </control>
[05:21:36.153]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:21:36.153]        // if-block "(__protocol & 0xFFFF) == 1"
[05:21:36.153]          // =>  FALSE
[05:21:36.153]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:21:36.153]      </control>
[05:21:36.153]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:21:36.153]        // if-block "(__protocol & 0xFFFF) == 2"
[05:21:36.153]          // =>  TRUE
[05:21:36.153]        <block atomic="false" info="">
[05:21:36.153]          Message(0, "executing SWD power up");
[05:21:36.156]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:21:36.156]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:21:36.156]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:21:36.156]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:21:36.156]        </block>
[05:21:36.156]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:21:36.156]      </control>
[05:21:36.156]      // end if-block "powered_down"
[05:21:36.156]    </control>
[05:21:36.156]    <block atomic="false" info="">
[05:21:36.156]      __var DEBUG_PORT_VAL    = 0;
[05:21:36.156]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:21:36.156]      __var ACCESS_POINT_VAL  = 0;
[05:21:36.163]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:21:36.163]      __ap = 1; 
[05:21:36.163]        // -> [__ap <= 0x00000001]
[05:21:36.163]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:21:36.165]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:21:36.165]      __ap = 4;
[05:21:36.165]        // -> [__ap <= 0x00000004]
[05:21:36.165]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:21:36.165]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:21:36.165]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:21:36.165]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:21:36.174]    </block>
[05:21:36.174]    <block atomic="false" info="">
[05:21:36.174]      __var nReset = 0x80;
[05:21:36.174]        // -> [nReset <= 0x00000080]
[05:21:36.174]      __var canReadPins = 0;
[05:21:36.174]        // -> [canReadPins <= 0x00000000]
[05:21:36.174]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:21:36.175]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:21:36.175]        // -> [canReadPins <= 0x00000001]
[05:21:36.175]    </block>
[05:21:36.175]    <control if="" while="1" timeout="200" info="">
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.175]      // while "1"  (timeout="200")
[05:21:36.175]      // while-condition  =>  TRUE
[05:21:36.184]      // while "1"  (timeout="200")
[05:21:36.184]      // while  =>  TIMEOUT
[05:21:36.184]      // end while "1"
[05:21:36.184]    </control>
[05:21:36.184]    <control if="canReadPins" while="" timeout="0" info="">
[05:21:36.184]      // if-block "canReadPins"
[05:21:36.184]        // =>  TRUE
[05:21:36.184]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:21:36.184]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:21:36.184]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:21:36.184]        // while-condition  =>  FALSE
[05:21:36.184]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:21:36.184]      </control>
[05:21:36.184]      // end if-block "canReadPins"
[05:21:36.184]    </control>
[05:21:36.184]    <control if="!canReadPins" while="" timeout="0" info="">
[05:21:36.184]      // if-block "!canReadPins"
[05:21:36.184]        // =>  FALSE
[05:21:36.184]      // skip if-block "!canReadPins"
[05:21:36.184]    </control>
[05:21:36.184]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:21:36.184]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:21:36.184]        // =>  TRUE
[05:21:36.184]      <block atomic="false" info="">
[05:21:36.184]        WriteAP(0x00, 0x190008);
[05:21:36.184]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:21:36.184]        WriteAP(0xF0, 0x01);
[05:21:36.184]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:21:36.184]      </block>
[05:21:36.184]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:21:36.184]    </control>
[05:21:36.184]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:21:36.184]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:21:36.194]        // =>  FALSE
[05:21:36.194]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:21:36.194]    </control>
[05:21:36.194]    <block atomic="false" info="">
[05:21:36.194]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:21:36.195]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:21:36.195]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:21:36.195]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:21:36.195]      __ap = 0; //lets make sure we reset the access point selection
[05:21:36.195]        // -> [__ap <= 0x00000000]
[05:21:36.195]    </block>
[05:21:36.195]  </sequence>
[05:21:36.195]  
[05:21:36.224]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:21:36.224]  
[05:21:36.224]  <debugvars>
[05:21:36.224]    // Pre-defined
[05:21:36.224]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:21:36.224]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:21:36.224]    __dp=0x00000000
[05:21:36.224]    __ap=0x00000000
[05:21:36.224]    __traceout=0x00000000      (Trace Disabled)
[05:21:36.224]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:21:36.224]    __FlashAddr=0x00000000
[05:21:36.224]    __FlashLen=0x00000000
[05:21:36.224]    __FlashArg=0x00000000
[05:21:36.224]    __FlashOp=0x00000000
[05:21:36.224]    __Result=0x00000000
[05:21:36.224]  </debugvars>
[05:21:36.224]  
[05:21:36.224]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:21:36.224]    <block atomic="false" info="">
[05:21:36.224]      __var deviceID = 0;
[05:21:36.224]        // -> [deviceID <= 0x00000000]
[05:21:36.224]      __var version = 0;
[05:21:36.224]        // -> [version <= 0x00000000]
[05:21:36.224]      __var partNum = 0;
[05:21:36.224]        // -> [partNum <= 0x00000000]
[05:21:36.224]      __var manuf = 0;
[05:21:36.224]        // -> [manuf <= 0x00000000]
[05:21:36.224]      __var isMSPM0G1X0X_G3X0X = 0;
[05:21:36.224]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:21:36.224]      __var isProduction = 0;
[05:21:36.224]        // -> [isProduction <= 0x00000000]
[05:21:36.224]      __var continueId = 0;
[05:21:36.224]        // -> [continueId <= 0x00000000]
[05:21:36.224]      deviceID =   Read32(0x41C40004);
[05:21:36.234]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:21:36.234]        // -> [deviceID <= 0x2BB8802F]
[05:21:36.234]      version = deviceID >> 28;
[05:21:36.234]        // -> [version <= 0x00000002]
[05:21:36.234]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:21:36.234]        // -> [partNum <= 0x0000BB88]
[05:21:36.234]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:21:36.234]        // -> [manuf <= 0x00000017]
[05:21:36.234]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:21:36.234]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:21:36.234]      isProduction = (version > 0);
[05:21:36.234]        // -> [isProduction <= 0x00000001]
[05:21:36.234]    </block>
[05:21:36.234]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:21:36.234]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:21:36.234]        // =>  FALSE
[05:21:36.234]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:21:36.234]    </control>
[05:21:36.234]    <control if="continueId == 4" while="" timeout="0" info="">
[05:21:36.234]      // if-block "continueId == 4"
[05:21:36.234]        // =>  FALSE
[05:21:36.234]      // skip if-block "continueId == 4"
[05:21:36.234]    </control>
[05:21:36.234]    <control if="!isProduction" while="" timeout="0" info="">
[05:21:36.234]      // if-block "!isProduction"
[05:21:36.234]        // =>  FALSE
[05:21:36.234]      // skip if-block "!isProduction"
[05:21:36.234]    </control>
[05:21:36.234]  </sequence>
[05:21:36.234]  
[05:21:41.928]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:21:41.928]  
[05:21:41.942]  <debugvars>
[05:21:41.942]    // Pre-defined
[05:21:41.942]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:21:41.942]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:21:41.942]    __dp=0x00000000
[05:21:41.942]    __ap=0x00000000
[05:21:41.942]    __traceout=0x00000000      (Trace Disabled)
[05:21:41.942]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:21:41.942]    __FlashAddr=0x00000000
[05:21:41.942]    __FlashLen=0x00000000
[05:21:41.942]    __FlashArg=0x00000000
[05:21:41.942]    __FlashOp=0x00000000
[05:21:41.942]    __Result=0x00000000
[05:21:41.942]  </debugvars>
[05:21:41.942]  
[05:21:41.942]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:21:41.942]    <block atomic="false" info="">
[05:21:41.942]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:21:41.942]        // -> [isSWJ <= 0x00000001]
[05:21:41.942]      __var hasDormant = __protocol & 0x00020000;
[05:21:41.942]        // -> [hasDormant <= 0x00000000]
[05:21:41.942]      __var protType   = __protocol & 0x0000FFFF;
[05:21:41.942]        // -> [protType <= 0x00000002]
[05:21:41.942]    </block>
[05:21:41.942]    <control if="protType == 1" while="" timeout="0" info="">
[05:21:41.942]      // if-block "protType == 1"
[05:21:41.942]        // =>  FALSE
[05:21:41.942]      // skip if-block "protType == 1"
[05:21:41.942]    </control>
[05:21:41.942]    <control if="protType == 2" while="" timeout="0" info="">
[05:21:41.942]      // if-block "protType == 2"
[05:21:41.942]        // =>  TRUE
[05:21:41.942]      <control if="isSWJ" while="" timeout="0" info="">
[05:21:41.942]        // if-block "isSWJ"
[05:21:41.942]          // =>  TRUE
[05:21:41.942]        <control if="hasDormant" while="" timeout="0" info="">
[05:21:41.942]          // if-block "hasDormant"
[05:21:41.942]            // =>  FALSE
[05:21:41.942]          // skip if-block "hasDormant"
[05:21:41.942]        </control>
[05:21:41.942]        <control if="!hasDormant" while="" timeout="0" info="">
[05:21:41.942]          // if-block "!hasDormant"
[05:21:41.942]            // =>  TRUE
[05:21:41.942]          <block atomic="false" info="">
[05:21:41.942]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:21:41.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:21:41.947]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:21:41.947]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:21:41.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:21:41.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:21:41.947]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:21:41.947]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:21:41.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:21:41.957]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:21:41.957]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:21:41.957]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:21:41.957]          </block>
[05:21:41.957]          // end if-block "!hasDormant"
[05:21:41.957]        </control>
[05:21:41.957]        // end if-block "isSWJ"
[05:21:41.957]      </control>
[05:21:41.957]      <control if="!isSWJ" while="" timeout="0" info="">
[05:21:41.957]        // if-block "!isSWJ"
[05:21:41.957]          // =>  FALSE
[05:21:41.957]        // skip if-block "!isSWJ"
[05:21:41.957]      </control>
[05:21:41.957]      <block atomic="false" info="">
[05:21:41.957]        ReadDP(0x0);
[05:21:41.962]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:21:41.962]      </block>
[05:21:41.962]      // end if-block "protType == 2"
[05:21:41.962]    </control>
[05:21:41.962]  </sequence>
[05:21:41.962]  
[05:21:41.962]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:21:41.962]  
[05:21:41.962]  <debugvars>
[05:21:41.962]    // Pre-defined
[05:21:41.962]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:21:41.962]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:21:41.962]    __dp=0x00000000
[05:21:41.962]    __ap=0x00000000
[05:21:41.962]    __traceout=0x00000000      (Trace Disabled)
[05:21:41.962]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:21:41.962]    __FlashAddr=0x00000000
[05:21:41.962]    __FlashLen=0x00000000
[05:21:41.962]    __FlashArg=0x00000000
[05:21:41.962]    __FlashOp=0x00000000
[05:21:41.962]    __Result=0x00000000
[05:21:41.962]  </debugvars>
[05:21:41.962]  
[05:21:41.962]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:21:41.967]    <block atomic="false" info="">
[05:21:41.967]      __var SW_DP_ABORT       = 0x0;
[05:21:41.967]        // -> [SW_DP_ABORT <= 0x00000000]
[05:21:41.967]      __var DP_CTRL_STAT      = 0x4;
[05:21:41.967]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:21:41.967]      __var DP_SELECT         = 0x8;
[05:21:41.967]        // -> [DP_SELECT <= 0x00000008]
[05:21:41.967]      __var powered_down      = 0;
[05:21:41.967]        // -> [powered_down <= 0x00000000]
[05:21:41.967]      WriteDP(DP_SELECT, 0x00000000);
[05:21:41.967]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:21:41.967]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:21:41.967]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:21:41.967]        // -> [powered_down <= 0x00000001]
[05:21:41.967]    </block>
[05:21:41.967]    <control if="powered_down" while="" timeout="0" info="">
[05:21:41.967]      // if-block "powered_down"
[05:21:41.967]        // =>  TRUE
[05:21:41.967]      <block atomic="false" info="">
[05:21:41.967]        Message(0, "Debug/System power-up request sent");
[05:21:41.967]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:21:41.967]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:21:41.967]      </block>
[05:21:41.967]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:21:41.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:21:41.978]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:21:41.978]        // while-condition  =>  FALSE
[05:21:41.978]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:21:41.978]      </control>
[05:21:41.978]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:21:41.978]        // if-block "(__protocol & 0xFFFF) == 1"
[05:21:41.978]          // =>  FALSE
[05:21:41.978]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:21:41.978]      </control>
[05:21:41.978]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:21:41.978]        // if-block "(__protocol & 0xFFFF) == 2"
[05:21:41.978]          // =>  TRUE
[05:21:41.978]        <block atomic="false" info="">
[05:21:41.978]          Message(0, "executing SWD power up");
[05:21:41.978]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:21:41.978]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:21:41.978]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:21:41.988]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:21:41.988]        </block>
[05:21:41.988]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:21:41.988]      </control>
[05:21:41.988]      // end if-block "powered_down"
[05:21:41.988]    </control>
[05:21:41.988]    <block atomic="false" info="">
[05:21:41.988]      __var DEBUG_PORT_VAL    = 0;
[05:21:41.988]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:21:41.988]      __var ACCESS_POINT_VAL  = 0;
[05:21:41.988]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:21:41.988]      __ap = 1; 
[05:21:41.988]        // -> [__ap <= 0x00000001]
[05:21:41.988]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:21:41.988]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:21:41.988]      __ap = 4;
[05:21:41.988]        // -> [__ap <= 0x00000004]
[05:21:41.988]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:21:41.999]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:21:41.999]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:21:41.999]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:21:41.999]    </block>
[05:21:41.999]    <block atomic="false" info="">
[05:21:41.999]      __var nReset = 0x80;
[05:21:41.999]        // -> [nReset <= 0x00000080]
[05:21:41.999]      __var canReadPins = 0;
[05:21:41.999]        // -> [canReadPins <= 0x00000000]
[05:21:41.999]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:21:42.008]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:21:42.008]        // -> [canReadPins <= 0x00000001]
[05:21:42.008]    </block>
[05:21:42.008]    <control if="" while="1" timeout="200" info="">
[05:21:42.008]      // while "1"  (timeout="200")
[05:21:42.008]      // while-condition  =>  TRUE
[05:21:42.009]      // while "1"  (timeout="200")
[05:21:42.009]      // while-condition  =>  TRUE
[05:21:42.009]      // while "1"  (timeout="200")
[05:21:42.009]      // while-condition  =>  TRUE
[05:21:42.009]      // while "1"  (timeout="200")
[05:21:42.009]      // while-condition  =>  TRUE
[05:21:42.009]      // while "1"  (timeout="200")
[05:21:42.009]      // while-condition  =>  TRUE
[05:21:42.009]      // while "1"  (timeout="200")
[05:21:42.009]      // while-condition  =>  TRUE
[05:21:42.009]      // while "1"  (timeout="200")
[05:21:42.009]      // while-condition  =>  TRUE
[05:21:42.009]      // while "1"  (timeout="200")
[05:21:42.009]      // while-condition  =>  TRUE
[05:21:42.009]      // while "1"  (timeout="200")
[05:21:42.009]      // while-condition  =>  TRUE
[05:21:42.009]      // while "1"  (timeout="200")
[05:21:42.009]      // while-condition  =>  TRUE
[05:21:42.009]      // while "1"  (timeout="200")
[05:21:42.009]      // while-condition  =>  TRUE
[05:21:42.009]      // while "1"  (timeout="200")
[05:21:42.011]      // while-condition  =>  TRUE
[05:21:42.011]      // while "1"  (timeout="200")
[05:21:42.011]      // while-condition  =>  TRUE
[05:21:42.011]      // while "1"  (timeout="200")
[05:21:42.011]      // while-condition  =>  TRUE
[05:21:42.011]      // while "1"  (timeout="200")
[05:21:42.011]      // while-condition  =>  TRUE
[05:21:42.011]      // while "1"  (timeout="200")
[05:21:42.011]      // while-condition  =>  TRUE
[05:21:42.011]      // while "1"  (timeout="200")
[05:21:42.011]      // while-condition  =>  TRUE
[05:21:42.011]      // while "1"  (timeout="200")
[05:21:42.011]      // while-condition  =>  TRUE
[05:21:42.011]      // while "1"  (timeout="200")
[05:21:42.013]      // while-condition  =>  TRUE
[05:21:42.013]      // while "1"  (timeout="200")
[05:21:42.013]      // while-condition  =>  TRUE
[05:21:42.013]      // while "1"  (timeout="200")
[05:21:42.013]      // while-condition  =>  TRUE
[05:21:42.013]      // while "1"  (timeout="200")
[05:21:42.013]      // while-condition  =>  TRUE
[05:21:42.013]      // while "1"  (timeout="200")
[05:21:42.013]      // while-condition  =>  TRUE
[05:21:42.013]      // while "1"  (timeout="200")
[05:21:42.013]      // while-condition  =>  TRUE
[05:21:42.013]      // while "1"  (timeout="200")
[05:21:42.014]      // while-condition  =>  TRUE
[05:21:42.014]      // while "1"  (timeout="200")
[05:21:42.014]      // while-condition  =>  TRUE
[05:21:42.014]      // while "1"  (timeout="200")
[05:21:42.014]      // while-condition  =>  TRUE
[05:21:42.014]      // while "1"  (timeout="200")
[05:21:42.014]      // while-condition  =>  TRUE
[05:21:42.014]      // while "1"  (timeout="200")
[05:21:42.014]      // while-condition  =>  TRUE
[05:21:42.014]      // while "1"  (timeout="200")
[05:21:42.014]      // while-condition  =>  TRUE
[05:21:42.014]      // while "1"  (timeout="200")
[05:21:42.015]      // while-condition  =>  TRUE
[05:21:42.015]      // while "1"  (timeout="200")
[05:21:42.015]      // while-condition  =>  TRUE
[05:21:42.015]      // while "1"  (timeout="200")
[05:21:42.015]      // while-condition  =>  TRUE
[05:21:42.015]      // while "1"  (timeout="200")
[05:21:42.015]      // while-condition  =>  TRUE
[05:21:42.016]      // while "1"  (timeout="200")
[05:21:42.016]      // while-condition  =>  TRUE
[05:21:42.016]      // while "1"  (timeout="200")
[05:21:42.016]      // while-condition  =>  TRUE
[05:21:42.016]      // while "1"  (timeout="200")
[05:21:42.016]      // while-condition  =>  TRUE
[05:21:42.016]      // while "1"  (timeout="200")
[05:21:42.016]      // while-condition  =>  TRUE
[05:21:42.016]      // while "1"  (timeout="200")
[05:21:42.016]      // while-condition  =>  TRUE
[05:21:42.016]      // while "1"  (timeout="200")
[05:21:42.016]      // while-condition  =>  TRUE
[05:21:42.016]      // while "1"  (timeout="200")
[05:21:42.016]      // while-condition  =>  TRUE
[05:21:42.016]      // while "1"  (timeout="200")
[05:21:42.018]      // while-condition  =>  TRUE
[05:21:42.018]      // while "1"  (timeout="200")
[05:21:42.018]      // while-condition  =>  TRUE
[05:21:42.018]      // while "1"  (timeout="200")
[05:21:42.018]      // while-condition  =>  TRUE
[05:21:42.018]      // while "1"  (timeout="200")
[05:21:42.018]      // while-condition  =>  TRUE
[05:21:42.018]      // while "1"  (timeout="200")
[05:21:42.018]      // while-condition  =>  TRUE
[05:21:42.018]      // while "1"  (timeout="200")
[05:21:42.018]      // while-condition  =>  TRUE
[05:21:42.019]      // while "1"  (timeout="200")
[05:21:42.019]      // while-condition  =>  TRUE
[05:21:42.019]      // while "1"  (timeout="200")
[05:21:42.019]      // while-condition  =>  TRUE
[05:21:42.019]      // while "1"  (timeout="200")
[05:21:42.019]      // while-condition  =>  TRUE
[05:21:42.019]      // while "1"  (timeout="200")
[05:21:42.019]      // while-condition  =>  TRUE
[05:21:42.019]      // while "1"  (timeout="200")
[05:21:42.019]      // while-condition  =>  TRUE
[05:21:42.019]      // while "1"  (timeout="200")
[05:21:42.019]      // while-condition  =>  TRUE
[05:21:42.019]      // while "1"  (timeout="200")
[05:21:42.020]      // while-condition  =>  TRUE
[05:21:42.020]      // while "1"  (timeout="200")
[05:21:42.020]      // while  =>  TIMEOUT
[05:21:42.020]      // end while "1"
[05:21:42.020]    </control>
[05:21:42.020]    <control if="canReadPins" while="" timeout="0" info="">
[05:21:42.020]      // if-block "canReadPins"
[05:21:42.020]        // =>  TRUE
[05:21:42.020]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:21:42.020]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:21:42.021]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:21:42.021]        // while-condition  =>  FALSE
[05:21:42.021]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:21:42.021]      </control>
[05:21:42.021]      // end if-block "canReadPins"
[05:21:42.021]    </control>
[05:21:42.021]    <control if="!canReadPins" while="" timeout="0" info="">
[05:21:42.021]      // if-block "!canReadPins"
[05:21:42.021]        // =>  FALSE
[05:21:42.021]      // skip if-block "!canReadPins"
[05:21:42.021]    </control>
[05:21:42.021]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:21:42.021]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:21:42.021]        // =>  TRUE
[05:21:42.021]      <block atomic="false" info="">
[05:21:42.021]        WriteAP(0x00, 0x190008);
[05:21:42.025]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:21:42.025]        WriteAP(0xF0, 0x01);
[05:21:42.030]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:21:42.030]      </block>
[05:21:42.030]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:21:42.030]    </control>
[05:21:42.030]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:21:42.030]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:21:42.030]        // =>  FALSE
[05:21:42.030]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:21:42.030]    </control>
[05:21:42.030]    <block atomic="false" info="">
[05:21:42.030]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:21:42.031]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:21:42.031]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:21:42.031]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:21:42.031]      __ap = 0; //lets make sure we reset the access point selection
[05:21:42.031]        // -> [__ap <= 0x00000000]
[05:21:42.031]    </block>
[05:21:42.031]  </sequence>
[05:21:42.031]  
[05:21:42.064]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:21:42.064]  
[05:21:42.064]  <debugvars>
[05:21:42.064]    // Pre-defined
[05:21:42.064]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:21:42.064]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:21:42.064]    __dp=0x00000000
[05:21:42.066]    __ap=0x00000000
[05:21:42.066]    __traceout=0x00000000      (Trace Disabled)
[05:21:42.066]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:21:42.066]    __FlashAddr=0x00000000
[05:21:42.066]    __FlashLen=0x00000000
[05:21:42.066]    __FlashArg=0x00000000
[05:21:42.066]    __FlashOp=0x00000000
[05:21:42.066]    __Result=0x00000000
[05:21:42.066]  </debugvars>
[05:21:42.066]  
[05:21:42.067]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:21:42.067]    <block atomic="false" info="">
[05:21:42.067]      __var deviceID = 0;
[05:21:42.067]        // -> [deviceID <= 0x00000000]
[05:21:42.067]      __var version = 0;
[05:21:42.067]        // -> [version <= 0x00000000]
[05:21:42.067]      __var partNum = 0;
[05:21:42.067]        // -> [partNum <= 0x00000000]
[05:21:42.067]      __var manuf = 0;
[05:21:42.067]        // -> [manuf <= 0x00000000]
[05:21:42.068]      __var isMSPM0G1X0X_G3X0X = 0;
[05:21:42.068]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:21:42.068]      __var isProduction = 0;
[05:21:42.068]        // -> [isProduction <= 0x00000000]
[05:21:42.068]      __var continueId = 0;
[05:21:42.068]        // -> [continueId <= 0x00000000]
[05:21:42.068]      deviceID =   Read32(0x41C40004);
[05:21:42.069]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:21:42.069]        // -> [deviceID <= 0x2BB8802F]
[05:21:42.069]      version = deviceID >> 28;
[05:21:42.069]        // -> [version <= 0x00000002]
[05:21:42.069]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:21:42.069]        // -> [partNum <= 0x0000BB88]
[05:21:42.069]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:21:42.069]        // -> [manuf <= 0x00000017]
[05:21:42.069]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:21:42.069]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:21:42.069]      isProduction = (version > 0);
[05:21:42.069]        // -> [isProduction <= 0x00000001]
[05:21:42.069]    </block>
[05:21:42.069]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:21:42.069]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:21:42.069]        // =>  FALSE
[05:21:42.069]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:21:42.069]    </control>
[05:21:42.069]    <control if="continueId == 4" while="" timeout="0" info="">
[05:21:42.069]      // if-block "continueId == 4"
[05:21:42.069]        // =>  FALSE
[05:21:42.069]      // skip if-block "continueId == 4"
[05:21:42.069]    </control>
[05:21:42.069]    <control if="!isProduction" while="" timeout="0" info="">
[05:21:42.069]      // if-block "!isProduction"
[05:21:42.069]        // =>  FALSE
[05:21:42.069]      // skip if-block "!isProduction"
[05:21:42.069]    </control>
[05:21:42.069]  </sequence>
[05:21:42.069]  
[05:23:22.250]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:23:22.250]  
[05:23:22.251]  <debugvars>
[05:23:22.251]    // Pre-defined
[05:23:22.251]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:23:22.251]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:23:22.251]    __dp=0x00000000
[05:23:22.251]    __ap=0x00000000
[05:23:22.251]    __traceout=0x00000000      (Trace Disabled)
[05:23:22.251]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:23:22.251]    __FlashAddr=0x00000000
[05:23:22.252]    __FlashLen=0x00000000
[05:23:22.252]    __FlashArg=0x00000000
[05:23:22.252]    __FlashOp=0x00000000
[05:23:22.252]    __Result=0x00000000
[05:23:22.252]  </debugvars>
[05:23:22.252]  
[05:23:22.252]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:23:22.252]    <block atomic="false" info="">
[05:23:22.252]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:23:22.252]        // -> [isSWJ <= 0x00000001]
[05:23:22.252]      __var hasDormant = __protocol & 0x00020000;
[05:23:22.252]        // -> [hasDormant <= 0x00000000]
[05:23:22.252]      __var protType   = __protocol & 0x0000FFFF;
[05:23:22.252]        // -> [protType <= 0x00000002]
[05:23:22.252]    </block>
[05:23:22.252]    <control if="protType == 1" while="" timeout="0" info="">
[05:23:22.252]      // if-block "protType == 1"
[05:23:22.252]        // =>  FALSE
[05:23:22.252]      // skip if-block "protType == 1"
[05:23:22.252]    </control>
[05:23:22.252]    <control if="protType == 2" while="" timeout="0" info="">
[05:23:22.252]      // if-block "protType == 2"
[05:23:22.252]        // =>  TRUE
[05:23:22.252]      <control if="isSWJ" while="" timeout="0" info="">
[05:23:22.252]        // if-block "isSWJ"
[05:23:22.252]          // =>  TRUE
[05:23:22.252]        <control if="hasDormant" while="" timeout="0" info="">
[05:23:22.255]          // if-block "hasDormant"
[05:23:22.255]            // =>  FALSE
[05:23:22.255]          // skip if-block "hasDormant"
[05:23:22.255]        </control>
[05:23:22.255]        <control if="!hasDormant" while="" timeout="0" info="">
[05:23:22.255]          // if-block "!hasDormant"
[05:23:22.255]            // =>  TRUE
[05:23:22.255]          <block atomic="false" info="">
[05:23:22.255]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:23:22.257]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:23:22.257]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:23:22.257]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:23:22.257]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:23:22.260]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:23:22.261]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:23:22.261]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:23:22.261]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:23:22.261]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:23:22.261]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:23:22.261]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:23:22.261]          </block>
[05:23:22.261]          // end if-block "!hasDormant"
[05:23:22.261]        </control>
[05:23:22.261]        // end if-block "isSWJ"
[05:23:22.261]      </control>
[05:23:22.261]      <control if="!isSWJ" while="" timeout="0" info="">
[05:23:22.261]        // if-block "!isSWJ"
[05:23:22.261]          // =>  FALSE
[05:23:22.261]        // skip if-block "!isSWJ"
[05:23:22.261]      </control>
[05:23:22.261]      <block atomic="false" info="">
[05:23:22.261]        ReadDP(0x0);
[05:23:22.261]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:23:22.261]      </block>
[05:23:22.261]      // end if-block "protType == 2"
[05:23:22.261]    </control>
[05:23:22.261]  </sequence>
[05:23:22.261]  
[05:23:22.270]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:23:22.270]  
[05:23:22.270]  <debugvars>
[05:23:22.270]    // Pre-defined
[05:23:22.270]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:23:22.270]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:23:22.270]    __dp=0x00000000
[05:23:22.270]    __ap=0x00000000
[05:23:22.270]    __traceout=0x00000000      (Trace Disabled)
[05:23:22.270]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:23:22.270]    __FlashAddr=0x00000000
[05:23:22.270]    __FlashLen=0x00000000
[05:23:22.270]    __FlashArg=0x00000000
[05:23:22.270]    __FlashOp=0x00000000
[05:23:22.270]    __Result=0x00000000
[05:23:22.270]  </debugvars>
[05:23:22.270]  
[05:23:22.273]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:23:22.273]    <block atomic="false" info="">
[05:23:22.273]      __var SW_DP_ABORT       = 0x0;
[05:23:22.273]        // -> [SW_DP_ABORT <= 0x00000000]
[05:23:22.273]      __var DP_CTRL_STAT      = 0x4;
[05:23:22.273]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:23:22.273]      __var DP_SELECT         = 0x8;
[05:23:22.273]        // -> [DP_SELECT <= 0x00000008]
[05:23:22.273]      __var powered_down      = 0;
[05:23:22.273]        // -> [powered_down <= 0x00000000]
[05:23:22.273]      WriteDP(DP_SELECT, 0x00000000);
[05:23:22.273]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:23:22.273]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:23:22.273]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:23:22.273]        // -> [powered_down <= 0x00000001]
[05:23:22.273]    </block>
[05:23:22.273]    <control if="powered_down" while="" timeout="0" info="">
[05:23:22.273]      // if-block "powered_down"
[05:23:22.273]        // =>  TRUE
[05:23:22.273]      <block atomic="false" info="">
[05:23:22.273]        Message(0, "Debug/System power-up request sent");
[05:23:22.273]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:23:22.273]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:23:22.273]      </block>
[05:23:22.273]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:23:22.273]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:23:22.281]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:23:22.281]        // while-condition  =>  FALSE
[05:23:22.281]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:23:22.281]      </control>
[05:23:22.281]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:23:22.281]        // if-block "(__protocol & 0xFFFF) == 1"
[05:23:22.281]          // =>  FALSE
[05:23:22.281]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:23:22.281]      </control>
[05:23:22.281]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:23:22.281]        // if-block "(__protocol & 0xFFFF) == 2"
[05:23:22.281]          // =>  TRUE
[05:23:22.281]        <block atomic="false" info="">
[05:23:22.281]          Message(0, "executing SWD power up");
[05:23:22.281]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:23:22.281]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:23:22.281]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:23:22.281]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:23:22.281]        </block>
[05:23:22.281]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:23:22.281]      </control>
[05:23:22.281]      // end if-block "powered_down"
[05:23:22.281]    </control>
[05:23:22.281]    <block atomic="false" info="">
[05:23:22.281]      __var DEBUG_PORT_VAL    = 0;
[05:23:22.281]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:23:22.281]      __var ACCESS_POINT_VAL  = 0;
[05:23:22.281]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:23:22.281]      __ap = 1; 
[05:23:22.281]        // -> [__ap <= 0x00000001]
[05:23:22.281]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:23:22.294]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:23:22.294]      __ap = 4;
[05:23:22.294]        // -> [__ap <= 0x00000004]
[05:23:22.294]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:23:22.294]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:23:22.294]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:23:22.294]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:23:22.303]    </block>
[05:23:22.303]    <block atomic="false" info="">
[05:23:22.303]      __var nReset = 0x80;
[05:23:22.303]        // -> [nReset <= 0x00000080]
[05:23:22.303]      __var canReadPins = 0;
[05:23:22.304]        // -> [canReadPins <= 0x00000000]
[05:23:22.304]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:23:22.304]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:23:22.306]        // -> [canReadPins <= 0x00000001]
[05:23:22.306]    </block>
[05:23:22.306]    <control if="" while="1" timeout="200" info="">
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.306]      // while-condition  =>  TRUE
[05:23:22.306]      // while "1"  (timeout="200")
[05:23:22.310]      // while-condition  =>  TRUE
[05:23:22.310]      // while "1"  (timeout="200")
[05:23:22.310]      // while-condition  =>  TRUE
[05:23:22.310]      // while "1"  (timeout="200")
[05:23:22.310]      // while-condition  =>  TRUE
[05:23:22.310]      // while "1"  (timeout="200")
[05:23:22.310]      // while-condition  =>  TRUE
[05:23:22.310]      // while "1"  (timeout="200")
[05:23:22.310]      // while-condition  =>  TRUE
[05:23:22.310]      // while "1"  (timeout="200")
[05:23:22.310]      // while-condition  =>  TRUE
[05:23:22.310]      // while "1"  (timeout="200")
[05:23:22.310]      // while-condition  =>  TRUE
[05:23:22.310]      // while "1"  (timeout="200")
[05:23:22.311]      // while-condition  =>  TRUE
[05:23:22.311]      // while "1"  (timeout="200")
[05:23:22.312]      // while-condition  =>  TRUE
[05:23:22.312]      // while "1"  (timeout="200")
[05:23:22.312]      // while-condition  =>  TRUE
[05:23:22.312]      // while "1"  (timeout="200")
[05:23:22.312]      // while-condition  =>  TRUE
[05:23:22.312]      // while "1"  (timeout="200")
[05:23:22.312]      // while-condition  =>  TRUE
[05:23:22.312]      // while "1"  (timeout="200")
[05:23:22.312]      // while-condition  =>  TRUE
[05:23:22.312]      // while "1"  (timeout="200")
[05:23:22.312]      // while-condition  =>  TRUE
[05:23:22.312]      // while "1"  (timeout="200")
[05:23:22.312]      // while-condition  =>  TRUE
[05:23:22.312]      // while "1"  (timeout="200")
[05:23:22.312]      // while-condition  =>  TRUE
[05:23:22.312]      // while "1"  (timeout="200")
[05:23:22.312]      // while-condition  =>  TRUE
[05:23:22.314]      // while "1"  (timeout="200")
[05:23:22.314]      // while-condition  =>  TRUE
[05:23:22.314]      // while "1"  (timeout="200")
[05:23:22.314]      // while-condition  =>  TRUE
[05:23:22.314]      // while "1"  (timeout="200")
[05:23:22.314]      // while-condition  =>  TRUE
[05:23:22.314]      // while "1"  (timeout="200")
[05:23:22.314]      // while-condition  =>  TRUE
[05:23:22.314]      // while "1"  (timeout="200")
[05:23:22.314]      // while-condition  =>  TRUE
[05:23:22.314]      // while "1"  (timeout="200")
[05:23:22.315]      // while-condition  =>  TRUE
[05:23:22.315]      // while "1"  (timeout="200")
[05:23:22.315]      // while-condition  =>  TRUE
[05:23:22.315]      // while "1"  (timeout="200")
[05:23:22.315]      // while-condition  =>  TRUE
[05:23:22.315]      // while "1"  (timeout="200")
[05:23:22.315]      // while-condition  =>  TRUE
[05:23:22.315]      // while "1"  (timeout="200")
[05:23:22.315]      // while-condition  =>  TRUE
[05:23:22.315]      // while "1"  (timeout="200")
[05:23:22.315]      // while-condition  =>  TRUE
[05:23:22.315]      // while "1"  (timeout="200")
[05:23:22.316]      // while-condition  =>  TRUE
[05:23:22.316]      // while "1"  (timeout="200")
[05:23:22.316]      // while  =>  TIMEOUT
[05:23:22.316]      // end while "1"
[05:23:22.316]    </control>
[05:23:22.316]    <control if="canReadPins" while="" timeout="0" info="">
[05:23:22.316]      // if-block "canReadPins"
[05:23:22.316]        // =>  TRUE
[05:23:22.316]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:23:22.316]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:23:22.318]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:23:22.318]        // while-condition  =>  FALSE
[05:23:22.318]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:23:22.318]      </control>
[05:23:22.318]      // end if-block "canReadPins"
[05:23:22.319]    </control>
[05:23:22.319]    <control if="!canReadPins" while="" timeout="0" info="">
[05:23:22.319]      // if-block "!canReadPins"
[05:23:22.319]        // =>  FALSE
[05:23:22.319]      // skip if-block "!canReadPins"
[05:23:22.319]    </control>
[05:23:22.319]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:23:22.319]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:23:22.319]        // =>  TRUE
[05:23:22.319]      <block atomic="false" info="">
[05:23:22.319]        WriteAP(0x00, 0x190008);
[05:23:22.320]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:23:22.322]        WriteAP(0xF0, 0x01);
[05:23:22.322]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:23:22.322]      </block>
[05:23:22.322]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:23:22.322]    </control>
[05:23:22.322]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:23:22.322]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:23:22.322]        // =>  FALSE
[05:23:22.322]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:23:22.322]    </control>
[05:23:22.322]    <block atomic="false" info="">
[05:23:22.322]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:23:22.329]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:23:22.329]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:23:22.329]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:23:22.331]      __ap = 0; //lets make sure we reset the access point selection
[05:23:22.331]        // -> [__ap <= 0x00000000]
[05:23:22.331]    </block>
[05:23:22.331]  </sequence>
[05:23:22.331]  
[05:23:22.353]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:23:22.353]  
[05:23:22.353]  <debugvars>
[05:23:22.353]    // Pre-defined
[05:23:22.353]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:23:22.353]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[05:23:22.353]    __dp=0x00000000
[05:23:22.353]    __ap=0x00000000
[05:23:22.353]    __traceout=0x00000000      (Trace Disabled)
[05:23:22.353]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:23:22.353]    __FlashAddr=0x00000000
[05:23:22.353]    __FlashLen=0x00000000
[05:23:22.353]    __FlashArg=0x00000000
[05:23:22.353]    __FlashOp=0x00000000
[05:23:22.355]    __Result=0x00000000
[05:23:22.355]  </debugvars>
[05:23:22.355]  
[05:23:22.355]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:23:22.355]    <block atomic="false" info="">
[05:23:22.355]      __var deviceID = 0;
[05:23:22.355]        // -> [deviceID <= 0x00000000]
[05:23:22.355]      __var version = 0;
[05:23:22.355]        // -> [version <= 0x00000000]
[05:23:22.355]      __var partNum = 0;
[05:23:22.355]        // -> [partNum <= 0x00000000]
[05:23:22.356]      __var manuf = 0;
[05:23:22.356]        // -> [manuf <= 0x00000000]
[05:23:22.356]      __var isMSPM0G1X0X_G3X0X = 0;
[05:23:22.356]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:23:22.356]      __var isProduction = 0;
[05:23:22.356]        // -> [isProduction <= 0x00000000]
[05:23:22.356]      __var continueId = 0;
[05:23:22.356]        // -> [continueId <= 0x00000000]
[05:23:22.356]      deviceID =   Read32(0x41C40004);
[05:23:22.360]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:23:22.360]        // -> [deviceID <= 0x2BB8802F]
[05:23:22.363]      version = deviceID >> 28;
[05:23:22.363]        // -> [version <= 0x00000002]
[05:23:22.363]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:23:22.363]        // -> [partNum <= 0x0000BB88]
[05:23:22.363]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:23:22.363]        // -> [manuf <= 0x00000017]
[05:23:22.363]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:23:22.363]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:23:22.363]      isProduction = (version > 0);
[05:23:22.363]        // -> [isProduction <= 0x00000001]
[05:23:22.363]    </block>
[05:23:22.363]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:23:22.363]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:23:22.363]        // =>  FALSE
[05:23:22.363]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:23:22.363]    </control>
[05:23:22.363]    <control if="continueId == 4" while="" timeout="0" info="">
[05:23:22.363]      // if-block "continueId == 4"
[05:23:22.363]        // =>  FALSE
[05:23:22.366]      // skip if-block "continueId == 4"
[05:23:22.366]    </control>
[05:23:22.366]    <control if="!isProduction" while="" timeout="0" info="">
[05:23:22.366]      // if-block "!isProduction"
[05:23:22.366]        // =>  FALSE
[05:23:22.366]      // skip if-block "!isProduction"
[05:23:22.366]    </control>
[05:23:22.366]  </sequence>
[05:23:22.366]  
[05:25:48.965]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:25:48.965]  
[05:25:48.974]  <debugvars>
[05:25:48.974]    // Pre-defined
[05:25:48.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:25:48.974]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:25:48.974]    __dp=0x00000000
[05:25:48.974]    __ap=0x00000000
[05:25:48.974]    __traceout=0x00000000      (Trace Disabled)
[05:25:48.974]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:25:48.974]    __FlashAddr=0x00000000
[05:25:48.974]    __FlashLen=0x00000000
[05:25:48.974]    __FlashArg=0x00000000
[05:25:48.974]    __FlashOp=0x00000000
[05:25:48.974]    __Result=0x00000000
[05:25:48.974]  </debugvars>
[05:25:48.974]  
[05:25:48.974]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:25:48.974]    <block atomic="false" info="">
[05:25:48.974]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:25:48.974]        // -> [isSWJ <= 0x00000001]
[05:25:48.974]      __var hasDormant = __protocol & 0x00020000;
[05:25:48.974]        // -> [hasDormant <= 0x00000000]
[05:25:48.974]      __var protType   = __protocol & 0x0000FFFF;
[05:25:48.974]        // -> [protType <= 0x00000002]
[05:25:48.974]    </block>
[05:25:48.974]    <control if="protType == 1" while="" timeout="0" info="">
[05:25:48.974]      // if-block "protType == 1"
[05:25:48.974]        // =>  FALSE
[05:25:48.974]      // skip if-block "protType == 1"
[05:25:48.974]    </control>
[05:25:48.974]    <control if="protType == 2" while="" timeout="0" info="">
[05:25:48.974]      // if-block "protType == 2"
[05:25:48.974]        // =>  TRUE
[05:25:48.974]      <control if="isSWJ" while="" timeout="0" info="">
[05:25:48.974]        // if-block "isSWJ"
[05:25:48.978]          // =>  TRUE
[05:25:48.978]        <control if="hasDormant" while="" timeout="0" info="">
[05:25:48.978]          // if-block "hasDormant"
[05:25:48.978]            // =>  FALSE
[05:25:48.978]          // skip if-block "hasDormant"
[05:25:48.978]        </control>
[05:25:48.978]        <control if="!hasDormant" while="" timeout="0" info="">
[05:25:48.978]          // if-block "!hasDormant"
[05:25:48.978]            // =>  TRUE
[05:25:48.978]          <block atomic="false" info="">
[05:25:48.978]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:25:48.981]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:25:48.981]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:25:48.984]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:25:48.984]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:25:48.984]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:25:48.984]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:25:48.984]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:25:48.984]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:25:48.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:25:48.989]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:25:48.990]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:25:48.990]          </block>
[05:25:48.990]          // end if-block "!hasDormant"
[05:25:48.990]        </control>
[05:25:48.990]        // end if-block "isSWJ"
[05:25:48.990]      </control>
[05:25:48.990]      <control if="!isSWJ" while="" timeout="0" info="">
[05:25:48.990]        // if-block "!isSWJ"
[05:25:48.990]          // =>  FALSE
[05:25:48.990]        // skip if-block "!isSWJ"
[05:25:48.990]      </control>
[05:25:48.990]      <block atomic="false" info="">
[05:25:48.990]        ReadDP(0x0);
[05:25:48.990]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:25:48.990]      </block>
[05:25:48.990]      // end if-block "protType == 2"
[05:25:48.990]    </control>
[05:25:48.990]  </sequence>
[05:25:48.990]  
[05:25:48.994]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:25:48.994]  
[05:25:48.994]  <debugvars>
[05:25:48.994]    // Pre-defined
[05:25:48.994]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:25:48.994]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:25:48.994]    __dp=0x00000000
[05:25:48.994]    __ap=0x00000000
[05:25:48.994]    __traceout=0x00000000      (Trace Disabled)
[05:25:48.994]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:25:48.994]    __FlashAddr=0x00000000
[05:25:48.994]    __FlashLen=0x00000000
[05:25:48.994]    __FlashArg=0x00000000
[05:25:48.994]    __FlashOp=0x00000000
[05:25:48.994]    __Result=0x00000000
[05:25:48.994]  </debugvars>
[05:25:48.994]  
[05:25:48.994]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:25:48.994]    <block atomic="false" info="">
[05:25:48.994]      __var SW_DP_ABORT       = 0x0;
[05:25:48.994]        // -> [SW_DP_ABORT <= 0x00000000]
[05:25:48.994]      __var DP_CTRL_STAT      = 0x4;
[05:25:48.994]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:25:48.994]      __var DP_SELECT         = 0x8;
[05:25:48.994]        // -> [DP_SELECT <= 0x00000008]
[05:25:48.994]      __var powered_down      = 0;
[05:25:48.994]        // -> [powered_down <= 0x00000000]
[05:25:48.994]      WriteDP(DP_SELECT, 0x00000000);
[05:25:49.000]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:25:49.000]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:25:49.002]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:25:49.002]        // -> [powered_down <= 0x00000001]
[05:25:49.002]    </block>
[05:25:49.004]    <control if="powered_down" while="" timeout="0" info="">
[05:25:49.004]      // if-block "powered_down"
[05:25:49.004]        // =>  TRUE
[05:25:49.004]      <block atomic="false" info="">
[05:25:49.004]        Message(0, "Debug/System power-up request sent");
[05:25:49.004]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:25:49.007]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:25:49.007]      </block>
[05:25:49.007]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:25:49.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:25:49.007]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:25:49.007]        // while-condition  =>  FALSE
[05:25:49.007]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:25:49.007]      </control>
[05:25:49.007]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:25:49.007]        // if-block "(__protocol & 0xFFFF) == 1"
[05:25:49.010]          // =>  FALSE
[05:25:49.010]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:25:49.010]      </control>
[05:25:49.010]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:25:49.010]        // if-block "(__protocol & 0xFFFF) == 2"
[05:25:49.010]          // =>  TRUE
[05:25:49.010]        <block atomic="false" info="">
[05:25:49.010]          Message(0, "executing SWD power up");
[05:25:49.010]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:25:49.014]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:25:49.014]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:25:49.014]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:25:49.014]        </block>
[05:25:49.014]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:25:49.014]      </control>
[05:25:49.014]      // end if-block "powered_down"
[05:25:49.014]    </control>
[05:25:49.014]    <block atomic="false" info="">
[05:25:49.014]      __var DEBUG_PORT_VAL    = 0;
[05:25:49.014]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:25:49.014]      __var ACCESS_POINT_VAL  = 0;
[05:25:49.014]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:25:49.014]      __ap = 1; 
[05:25:49.014]        // -> [__ap <= 0x00000001]
[05:25:49.014]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:25:49.020]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:25:49.020]      __ap = 4;
[05:25:49.020]        // -> [__ap <= 0x00000004]
[05:25:49.020]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:25:49.024]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:25:49.024]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:25:49.024]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:25:49.024]    </block>
[05:25:49.024]    <block atomic="false" info="">
[05:25:49.024]      __var nReset = 0x80;
[05:25:49.024]        // -> [nReset <= 0x00000080]
[05:25:49.024]      __var canReadPins = 0;
[05:25:49.024]        // -> [canReadPins <= 0x00000000]
[05:25:49.024]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:25:49.024]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:25:49.024]        // -> [canReadPins <= 0x00000001]
[05:25:49.024]    </block>
[05:25:49.024]    <control if="" while="1" timeout="200" info="">
[05:25:49.024]      // while "1"  (timeout="200")
[05:25:49.029]      // while-condition  =>  TRUE
[05:25:49.029]      // while "1"  (timeout="200")
[05:25:49.029]      // while-condition  =>  TRUE
[05:25:49.029]      // while "1"  (timeout="200")
[05:25:49.029]      // while-condition  =>  TRUE
[05:25:49.029]      // while "1"  (timeout="200")
[05:25:49.029]      // while-condition  =>  TRUE
[05:25:49.029]      // while "1"  (timeout="200")
[05:25:49.029]      // while-condition  =>  TRUE
[05:25:49.029]      // while "1"  (timeout="200")
[05:25:49.029]      // while-condition  =>  TRUE
[05:25:49.029]      // while "1"  (timeout="200")
[05:25:49.029]      // while-condition  =>  TRUE
[05:25:49.029]      // while "1"  (timeout="200")
[05:25:49.029]      // while-condition  =>  TRUE
[05:25:49.029]      // while "1"  (timeout="200")
[05:25:49.029]      // while-condition  =>  TRUE
[05:25:49.030]      // while "1"  (timeout="200")
[05:25:49.030]      // while-condition  =>  TRUE
[05:25:49.030]      // while "1"  (timeout="200")
[05:25:49.030]      // while-condition  =>  TRUE
[05:25:49.030]      // while "1"  (timeout="200")
[05:25:49.030]      // while-condition  =>  TRUE
[05:25:49.030]      // while "1"  (timeout="200")
[05:25:49.030]      // while-condition  =>  TRUE
[05:25:49.030]      // while "1"  (timeout="200")
[05:25:49.030]      // while-condition  =>  TRUE
[05:25:49.031]      // while "1"  (timeout="200")
[05:25:49.031]      // while-condition  =>  TRUE
[05:25:49.031]      // while "1"  (timeout="200")
[05:25:49.031]      // while-condition  =>  TRUE
[05:25:49.031]      // while "1"  (timeout="200")
[05:25:49.031]      // while-condition  =>  TRUE
[05:25:49.032]      // while "1"  (timeout="200")
[05:25:49.032]      // while-condition  =>  TRUE
[05:25:49.032]      // while "1"  (timeout="200")
[05:25:49.032]      // while-condition  =>  TRUE
[05:25:49.032]      // while "1"  (timeout="200")
[05:25:49.032]      // while-condition  =>  TRUE
[05:25:49.032]      // while "1"  (timeout="200")
[05:25:49.032]      // while-condition  =>  TRUE
[05:25:49.032]      // while "1"  (timeout="200")
[05:25:49.032]      // while-condition  =>  TRUE
[05:25:49.032]      // while "1"  (timeout="200")
[05:25:49.032]      // while-condition  =>  TRUE
[05:25:49.032]      // while "1"  (timeout="200")
[05:25:49.032]      // while-condition  =>  TRUE
[05:25:49.032]      // while "1"  (timeout="200")
[05:25:49.032]      // while-condition  =>  TRUE
[05:25:49.032]      // while "1"  (timeout="200")
[05:25:49.032]      // while-condition  =>  TRUE
[05:25:49.032]      // while "1"  (timeout="200")
[05:25:49.032]      // while-condition  =>  TRUE
[05:25:49.032]      // while "1"  (timeout="200")
[05:25:49.032]      // while-condition  =>  TRUE
[05:25:49.032]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.034]      // while-condition  =>  TRUE
[05:25:49.034]      // while "1"  (timeout="200")
[05:25:49.040]      // while-condition  =>  TRUE
[05:25:49.040]      // while "1"  (timeout="200")
[05:25:49.040]      // while  =>  TIMEOUT
[05:25:49.040]      // end while "1"
[05:25:49.040]    </control>
[05:25:49.040]    <control if="canReadPins" while="" timeout="0" info="">
[05:25:49.040]      // if-block "canReadPins"
[05:25:49.040]        // =>  TRUE
[05:25:49.040]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:25:49.040]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:25:49.042]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:25:49.042]        // while-condition  =>  FALSE
[05:25:49.042]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:25:49.042]      </control>
[05:25:49.042]      // end if-block "canReadPins"
[05:25:49.042]    </control>
[05:25:49.042]    <control if="!canReadPins" while="" timeout="0" info="">
[05:25:49.042]      // if-block "!canReadPins"
[05:25:49.044]        // =>  FALSE
[05:25:49.044]      // skip if-block "!canReadPins"
[05:25:49.044]    </control>
[05:25:49.044]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:25:49.044]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:25:49.044]        // =>  TRUE
[05:25:49.044]      <block atomic="false" info="">
[05:25:49.044]        WriteAP(0x00, 0x190008);
[05:25:49.044]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:25:49.044]        WriteAP(0xF0, 0x01);
[05:25:49.044]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:25:49.044]      </block>
[05:25:49.044]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:25:49.044]    </control>
[05:25:49.044]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:25:49.044]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:25:49.044]        // =>  FALSE
[05:25:49.044]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:25:49.044]    </control>
[05:25:49.044]    <block atomic="false" info="">
[05:25:49.050]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:25:49.054]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:25:49.054]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:25:49.054]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:25:49.056]      __ap = 0; //lets make sure we reset the access point selection
[05:25:49.056]        // -> [__ap <= 0x00000000]
[05:25:49.056]    </block>
[05:25:49.056]  </sequence>
[05:25:49.056]  
[05:25:49.074]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:25:49.074]  
[05:25:49.074]  <debugvars>
[05:25:49.074]    // Pre-defined
[05:25:49.074]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:25:49.074]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:25:49.074]    __dp=0x00000000
[05:25:49.074]    __ap=0x00000000
[05:25:49.074]    __traceout=0x00000000      (Trace Disabled)
[05:25:49.074]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:25:49.074]    __FlashAddr=0x00000000
[05:25:49.074]    __FlashLen=0x00000000
[05:25:49.074]    __FlashArg=0x00000000
[05:25:49.074]    __FlashOp=0x00000000
[05:25:49.074]    __Result=0x00000000
[05:25:49.074]  </debugvars>
[05:25:49.074]  
[05:25:49.074]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:25:49.074]    <block atomic="false" info="">
[05:25:49.074]      __var deviceID = 0;
[05:25:49.074]        // -> [deviceID <= 0x00000000]
[05:25:49.074]      __var version = 0;
[05:25:49.074]        // -> [version <= 0x00000000]
[05:25:49.074]      __var partNum = 0;
[05:25:49.074]        // -> [partNum <= 0x00000000]
[05:25:49.074]      __var manuf = 0;
[05:25:49.074]        // -> [manuf <= 0x00000000]
[05:25:49.074]      __var isMSPM0G1X0X_G3X0X = 0;
[05:25:49.074]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:25:49.074]      __var isProduction = 0;
[05:25:49.074]        // -> [isProduction <= 0x00000000]
[05:25:49.074]      __var continueId = 0;
[05:25:49.074]        // -> [continueId <= 0x00000000]
[05:25:49.074]      deviceID =   Read32(0x41C40004);
[05:25:49.084]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:25:49.084]        // -> [deviceID <= 0x2BB8802F]
[05:25:49.084]      version = deviceID >> 28;
[05:25:49.084]        // -> [version <= 0x00000002]
[05:25:49.084]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:25:49.084]        // -> [partNum <= 0x0000BB88]
[05:25:49.084]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:25:49.084]        // -> [manuf <= 0x00000017]
[05:25:49.084]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:25:49.084]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:25:49.084]      isProduction = (version > 0);
[05:25:49.084]        // -> [isProduction <= 0x00000001]
[05:25:49.084]    </block>
[05:25:49.084]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:25:49.084]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:25:49.084]        // =>  FALSE
[05:25:49.084]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:25:49.086]    </control>
[05:25:49.086]    <control if="continueId == 4" while="" timeout="0" info="">
[05:25:49.086]      // if-block "continueId == 4"
[05:25:49.086]        // =>  FALSE
[05:25:49.086]      // skip if-block "continueId == 4"
[05:25:49.086]    </control>
[05:25:49.086]    <control if="!isProduction" while="" timeout="0" info="">
[05:25:49.086]      // if-block "!isProduction"
[05:25:49.086]        // =>  FALSE
[05:25:49.086]      // skip if-block "!isProduction"
[05:25:49.086]    </control>
[05:25:49.086]  </sequence>
[05:25:49.086]  
[05:29:18.055]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[05:29:18.055]  
[05:29:18.060]  <debugvars>
[05:29:18.060]    // Pre-defined
[05:29:18.060]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:29:18.060]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:29:18.060]    __dp=0x00000000
[05:29:18.060]    __ap=0x00000000
[05:29:18.060]    __traceout=0x00000000      (Trace Disabled)
[05:29:18.060]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:29:18.062]    __FlashAddr=0x00000000
[05:29:18.062]    __FlashLen=0x00000000
[05:29:18.062]    __FlashArg=0x00000000
[05:29:18.062]    __FlashOp=0x00000000
[05:29:18.062]    __Result=0x00000000
[05:29:18.062]  </debugvars>
[05:29:18.062]  
[05:29:18.062]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[05:29:18.062]    <block atomic="false" info="">
[05:29:18.062]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[05:29:18.062]        // -> [isSWJ <= 0x00000001]
[05:29:18.062]      __var hasDormant = __protocol & 0x00020000;
[05:29:18.062]        // -> [hasDormant <= 0x00000000]
[05:29:18.062]      __var protType   = __protocol & 0x0000FFFF;
[05:29:18.062]        // -> [protType <= 0x00000002]
[05:29:18.062]    </block>
[05:29:18.062]    <control if="protType == 1" while="" timeout="0" info="">
[05:29:18.062]      // if-block "protType == 1"
[05:29:18.062]        // =>  FALSE
[05:29:18.062]      // skip if-block "protType == 1"
[05:29:18.062]    </control>
[05:29:18.062]    <control if="protType == 2" while="" timeout="0" info="">
[05:29:18.062]      // if-block "protType == 2"
[05:29:18.062]        // =>  TRUE
[05:29:18.062]      <control if="isSWJ" while="" timeout="0" info="">
[05:29:18.062]        // if-block "isSWJ"
[05:29:18.065]          // =>  TRUE
[05:29:18.065]        <control if="hasDormant" while="" timeout="0" info="">
[05:29:18.065]          // if-block "hasDormant"
[05:29:18.065]            // =>  FALSE
[05:29:18.065]          // skip if-block "hasDormant"
[05:29:18.065]        </control>
[05:29:18.065]        <control if="!hasDormant" while="" timeout="0" info="">
[05:29:18.065]          // if-block "!hasDormant"
[05:29:18.065]            // =>  TRUE
[05:29:18.065]          <block atomic="false" info="">
[05:29:18.065]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[05:29:18.065]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:29:18.065]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[05:29:18.065]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[05:29:18.065]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[05:29:18.075]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:29:18.075]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[05:29:18.075]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[05:29:18.075]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[05:29:18.084]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[05:29:18.084]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[05:29:18.085]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[05:29:18.085]          </block>
[05:29:18.085]          // end if-block "!hasDormant"
[05:29:18.085]        </control>
[05:29:18.085]        // end if-block "isSWJ"
[05:29:18.085]      </control>
[05:29:18.085]      <control if="!isSWJ" while="" timeout="0" info="">
[05:29:18.085]        // if-block "!isSWJ"
[05:29:18.085]          // =>  FALSE
[05:29:18.085]        // skip if-block "!isSWJ"
[05:29:18.085]      </control>
[05:29:18.085]      <block atomic="false" info="">
[05:29:18.085]        ReadDP(0x0);
[05:29:18.085]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[05:29:18.085]      </block>
[05:29:18.085]      // end if-block "protType == 2"
[05:29:18.085]    </control>
[05:29:18.085]  </sequence>
[05:29:18.085]  
[05:29:18.085]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[05:29:18.085]  
[05:29:18.085]  <debugvars>
[05:29:18.085]    // Pre-defined
[05:29:18.085]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:29:18.093]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:29:18.093]    __dp=0x00000000
[05:29:18.093]    __ap=0x00000000
[05:29:18.093]    __traceout=0x00000000      (Trace Disabled)
[05:29:18.093]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:29:18.093]    __FlashAddr=0x00000000
[05:29:18.093]    __FlashLen=0x00000000
[05:29:18.093]    __FlashArg=0x00000000
[05:29:18.093]    __FlashOp=0x00000000
[05:29:18.093]    __Result=0x00000000
[05:29:18.093]  </debugvars>
[05:29:18.095]  
[05:29:18.095]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[05:29:18.095]    <block atomic="false" info="">
[05:29:18.095]      __var SW_DP_ABORT       = 0x0;
[05:29:18.095]        // -> [SW_DP_ABORT <= 0x00000000]
[05:29:18.095]      __var DP_CTRL_STAT      = 0x4;
[05:29:18.095]        // -> [DP_CTRL_STAT <= 0x00000004]
[05:29:18.095]      __var DP_SELECT         = 0x8;
[05:29:18.095]        // -> [DP_SELECT <= 0x00000008]
[05:29:18.095]      __var powered_down      = 0;
[05:29:18.095]        // -> [powered_down <= 0x00000000]
[05:29:18.095]      WriteDP(DP_SELECT, 0x00000000);
[05:29:18.095]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[05:29:18.095]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[05:29:18.095]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[05:29:18.095]        // -> [powered_down <= 0x00000001]
[05:29:18.095]    </block>
[05:29:18.095]    <control if="powered_down" while="" timeout="0" info="">
[05:29:18.095]      // if-block "powered_down"
[05:29:18.095]        // =>  TRUE
[05:29:18.095]      <block atomic="false" info="">
[05:29:18.095]        Message(0, "Debug/System power-up request sent");
[05:29:18.095]        WriteDP(DP_CTRL_STAT, 0x50000000);
[05:29:18.095]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[05:29:18.095]      </block>
[05:29:18.095]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[05:29:18.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[05:29:18.104]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[05:29:18.104]        // while-condition  =>  FALSE
[05:29:18.104]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[05:29:18.104]      </control>
[05:29:18.104]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[05:29:18.104]        // if-block "(__protocol & 0xFFFF) == 1"
[05:29:18.104]          // =>  FALSE
[05:29:18.105]        // skip if-block "(__protocol & 0xFFFF) == 1"
[05:29:18.105]      </control>
[05:29:18.105]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[05:29:18.105]        // if-block "(__protocol & 0xFFFF) == 2"
[05:29:18.105]          // =>  TRUE
[05:29:18.105]        <block atomic="false" info="">
[05:29:18.105]          Message(0, "executing SWD power up");
[05:29:18.105]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[05:29:18.105]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[05:29:18.105]          WriteDP(SW_DP_ABORT, 0x0000001E);
[05:29:18.105]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[05:29:18.105]        </block>
[05:29:18.105]        // end if-block "(__protocol & 0xFFFF) == 2"
[05:29:18.105]      </control>
[05:29:18.105]      // end if-block "powered_down"
[05:29:18.105]    </control>
[05:29:18.105]    <block atomic="false" info="">
[05:29:18.105]      __var DEBUG_PORT_VAL    = 0;
[05:29:18.105]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[05:29:18.105]      __var ACCESS_POINT_VAL  = 0;
[05:29:18.105]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[05:29:18.105]      __ap = 1; 
[05:29:18.105]        // -> [__ap <= 0x00000001]
[05:29:18.105]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[05:29:18.115]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[05:29:18.115]      __ap = 4;
[05:29:18.115]        // -> [__ap <= 0x00000004]
[05:29:18.115]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:29:18.115]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[05:29:18.115]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[05:29:18.115]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:29:18.115]    </block>
[05:29:18.115]    <block atomic="false" info="">
[05:29:18.115]      __var nReset = 0x80;
[05:29:18.115]        // -> [nReset <= 0x00000080]
[05:29:18.115]      __var canReadPins = 0;
[05:29:18.115]        // -> [canReadPins <= 0x00000000]
[05:29:18.115]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[05:29:18.115]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[05:29:18.124]        // -> [canReadPins <= 0x00000001]
[05:29:18.124]    </block>
[05:29:18.124]    <control if="" while="1" timeout="200" info="">
[05:29:18.124]      // while "1"  (timeout="200")
[05:29:18.124]      // while-condition  =>  TRUE
[05:29:18.124]      // while "1"  (timeout="200")
[05:29:18.124]      // while-condition  =>  TRUE
[05:29:18.124]      // while "1"  (timeout="200")
[05:29:18.125]      // while-condition  =>  TRUE
[05:29:18.125]      // while "1"  (timeout="200")
[05:29:18.125]      // while-condition  =>  TRUE
[05:29:18.125]      // while "1"  (timeout="200")
[05:29:18.125]      // while-condition  =>  TRUE
[05:29:18.125]      // while "1"  (timeout="200")
[05:29:18.125]      // while-condition  =>  TRUE
[05:29:18.125]      // while "1"  (timeout="200")
[05:29:18.125]      // while-condition  =>  TRUE
[05:29:18.125]      // while "1"  (timeout="200")
[05:29:18.125]      // while-condition  =>  TRUE
[05:29:18.125]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.126]      // while "1"  (timeout="200")
[05:29:18.126]      // while-condition  =>  TRUE
[05:29:18.135]      // while "1"  (timeout="200")
[05:29:18.135]      // while  =>  TIMEOUT
[05:29:18.135]      // end while "1"
[05:29:18.135]    </control>
[05:29:18.135]    <control if="canReadPins" while="" timeout="0" info="">
[05:29:18.135]      // if-block "canReadPins"
[05:29:18.135]        // =>  TRUE
[05:29:18.135]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[05:29:18.135]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[05:29:18.137]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[05:29:18.137]        // while-condition  =>  FALSE
[05:29:18.137]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[05:29:18.137]      </control>
[05:29:18.137]      // end if-block "canReadPins"
[05:29:18.137]    </control>
[05:29:18.137]    <control if="!canReadPins" while="" timeout="0" info="">
[05:29:18.137]      // if-block "!canReadPins"
[05:29:18.137]        // =>  FALSE
[05:29:18.137]      // skip if-block "!canReadPins"
[05:29:18.137]    </control>
[05:29:18.137]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[05:29:18.137]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:29:18.137]        // =>  TRUE
[05:29:18.137]      <block atomic="false" info="">
[05:29:18.137]        WriteAP(0x00, 0x190008);
[05:29:18.137]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[05:29:18.137]        WriteAP(0xF0, 0x01);
[05:29:18.137]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[05:29:18.137]      </block>
[05:29:18.137]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[05:29:18.137]    </control>
[05:29:18.137]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[05:29:18.145]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:29:18.146]        // =>  FALSE
[05:29:18.146]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[05:29:18.146]    </control>
[05:29:18.146]    <block atomic="false" info="">
[05:29:18.146]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[05:29:18.146]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[05:29:18.146]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[05:29:18.146]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[05:29:18.146]      __ap = 0; //lets make sure we reset the access point selection
[05:29:18.146]        // -> [__ap <= 0x00000000]
[05:29:18.146]    </block>
[05:29:18.146]  </sequence>
[05:29:18.146]  
[05:29:18.166]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[05:29:18.166]  
[05:29:18.166]  <debugvars>
[05:29:18.166]    // Pre-defined
[05:29:18.166]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[05:29:18.166]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[05:29:18.166]    __dp=0x00000000
[05:29:18.166]    __ap=0x00000000
[05:29:18.166]    __traceout=0x00000000      (Trace Disabled)
[05:29:18.166]    __errorcontrol=0x00000000  (Skip Errors="False")
[05:29:18.166]    __FlashAddr=0x00000000
[05:29:18.166]    __FlashLen=0x00000000
[05:29:18.166]    __FlashArg=0x00000000
[05:29:18.166]    __FlashOp=0x00000000
[05:29:18.166]    __Result=0x00000000
[05:29:18.166]  </debugvars>
[05:29:18.166]  
[05:29:18.166]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[05:29:18.166]    <block atomic="false" info="">
[05:29:18.166]      __var deviceID = 0;
[05:29:18.166]        // -> [deviceID <= 0x00000000]
[05:29:18.166]      __var version = 0;
[05:29:18.166]        // -> [version <= 0x00000000]
[05:29:18.166]      __var partNum = 0;
[05:29:18.166]        // -> [partNum <= 0x00000000]
[05:29:18.166]      __var manuf = 0;
[05:29:18.166]        // -> [manuf <= 0x00000000]
[05:29:18.166]      __var isMSPM0G1X0X_G3X0X = 0;
[05:29:18.166]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[05:29:18.166]      __var isProduction = 0;
[05:29:18.176]        // -> [isProduction <= 0x00000000]
[05:29:18.176]      __var continueId = 0;
[05:29:18.176]        // -> [continueId <= 0x00000000]
[05:29:18.176]      deviceID =   Read32(0x41C40004);
[05:29:18.178]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[05:29:18.178]        // -> [deviceID <= 0x2BB8802F]
[05:29:18.178]      version = deviceID >> 28;
[05:29:18.178]        // -> [version <= 0x00000002]
[05:29:18.178]      partNum = (deviceID & 0x0FFFF000) >> 12;
[05:29:18.178]        // -> [partNum <= 0x0000BB88]
[05:29:18.178]      manuf = (deviceID & 0x00000FFE) >> 1;
[05:29:18.178]        // -> [manuf <= 0x00000017]
[05:29:18.178]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[05:29:18.178]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[05:29:18.178]      isProduction = (version > 0);
[05:29:18.178]        // -> [isProduction <= 0x00000001]
[05:29:18.178]    </block>
[05:29:18.178]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[05:29:18.178]      // if-block "!isMSPM0G1X0X_G3X0X"
[05:29:18.178]        // =>  FALSE
[05:29:18.178]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[05:29:18.178]    </control>
[05:29:18.178]    <control if="continueId == 4" while="" timeout="0" info="">
[05:29:18.178]      // if-block "continueId == 4"
[05:29:18.178]        // =>  FALSE
[05:29:18.178]      // skip if-block "continueId == 4"
[05:29:18.178]    </control>
[05:29:18.178]    <control if="!isProduction" while="" timeout="0" info="">
[05:29:18.178]      // if-block "!isProduction"
[05:29:18.178]        // =>  FALSE
[05:29:18.178]      // skip if-block "!isProduction"
[05:29:18.178]    </control>
[05:29:18.178]  </sequence>
[05:29:18.178]  
