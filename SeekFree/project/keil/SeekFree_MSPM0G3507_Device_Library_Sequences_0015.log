/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0015.log
 *  Created     : 16:54:54 (25/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[16:54:54.909]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:54:54.909]  
[16:54:54.910]  <debugvars>
[16:54:54.910]    // Pre-defined
[16:54:54.911]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:54:54.911]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:54:54.911]    __dp=0x00000000
[16:54:54.911]    __ap=0x00000000
[16:54:54.911]    __traceout=0x00000000      (Trace Disabled)
[16:54:54.911]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:54:54.911]    __FlashAddr=0x00000000
[16:54:54.911]    __FlashLen=0x00000000
[16:54:54.912]    __FlashArg=0x00000000
[16:54:54.912]    __FlashOp=0x00000000
[16:54:54.912]    __Result=0x00000000
[16:54:54.912]  </debugvars>
[16:54:54.913]  
[16:54:54.913]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:54:54.913]    <block atomic="false" info="">
[16:54:54.913]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:54:54.913]        // -> [isSWJ <= 0x00000001]
[16:54:54.913]      __var hasDormant = __protocol & 0x00020000;
[16:54:54.913]        // -> [hasDormant <= 0x00000000]
[16:54:54.914]      __var protType   = __protocol & 0x0000FFFF;
[16:54:54.914]        // -> [protType <= 0x00000002]
[16:54:54.914]    </block>
[16:54:54.914]    <control if="protType == 1" while="" timeout="0" info="">
[16:54:54.914]      // if-block "protType == 1"
[16:54:54.914]        // =>  FALSE
[16:54:54.914]      // skip if-block "protType == 1"
[16:54:54.914]    </control>
[16:54:54.914]    <control if="protType == 2" while="" timeout="0" info="">
[16:54:54.914]      // if-block "protType == 2"
[16:54:54.914]        // =>  TRUE
[16:54:54.914]      <control if="isSWJ" while="" timeout="0" info="">
[16:54:54.914]        // if-block "isSWJ"
[16:54:54.915]          // =>  TRUE
[16:54:54.915]        <control if="hasDormant" while="" timeout="0" info="">
[16:54:54.915]          // if-block "hasDormant"
[16:54:54.915]            // =>  FALSE
[16:54:54.915]          // skip if-block "hasDormant"
[16:54:54.915]        </control>
[16:54:54.915]        <control if="!hasDormant" while="" timeout="0" info="">
[16:54:54.915]          // if-block "!hasDormant"
[16:54:54.915]            // =>  TRUE
[16:54:54.915]          <block atomic="false" info="">
[16:54:54.915]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:54:54.918]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:54:54.918]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:54:54.919]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:54:54.919]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:54:54.924]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:54:54.924]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:54:54.932]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:54:54.932]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:54:54.940]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:54:54.940]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:54:54.941]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:54:54.942]          </block>
[16:54:54.942]          // end if-block "!hasDormant"
[16:54:54.942]        </control>
[16:54:54.942]        // end if-block "isSWJ"
[16:54:54.942]      </control>
[16:54:54.942]      <control if="!isSWJ" while="" timeout="0" info="">
[16:54:54.942]        // if-block "!isSWJ"
[16:54:54.942]          // =>  FALSE
[16:54:54.942]        // skip if-block "!isSWJ"
[16:54:54.942]      </control>
[16:54:54.943]      <block atomic="false" info="">
[16:54:54.943]        ReadDP(0x0);
[16:54:54.944]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:54:54.944]      </block>
[16:54:54.945]      // end if-block "protType == 2"
[16:54:54.945]    </control>
[16:54:54.945]  </sequence>
[16:54:54.945]  
[16:54:54.948]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:54:54.948]  
[16:54:54.948]  <debugvars>
[16:54:54.948]    // Pre-defined
[16:54:54.948]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:54:54.948]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:54:54.949]    __dp=0x00000000
[16:54:54.949]    __ap=0x00000000
[16:54:54.949]    __traceout=0x00000000      (Trace Disabled)
[16:54:54.949]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:54:54.949]    __FlashAddr=0x00000000
[16:54:54.949]    __FlashLen=0x00000000
[16:54:54.949]    __FlashArg=0x00000000
[16:54:54.949]    __FlashOp=0x00000000
[16:54:54.949]    __Result=0x00000000
[16:54:54.949]  </debugvars>
[16:54:54.950]  
[16:54:54.950]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:54:54.950]    <block atomic="false" info="">
[16:54:54.950]      __var SW_DP_ABORT       = 0x0;
[16:54:54.950]        // -> [SW_DP_ABORT <= 0x00000000]
[16:54:54.950]      __var DP_CTRL_STAT      = 0x4;
[16:54:54.950]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:54:54.950]      __var DP_SELECT         = 0x8;
[16:54:54.950]        // -> [DP_SELECT <= 0x00000008]
[16:54:54.950]      __var powered_down      = 0;
[16:54:54.951]        // -> [powered_down <= 0x00000000]
[16:54:54.951]      WriteDP(DP_SELECT, 0x00000000);
[16:54:54.952]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:54:54.952]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:54:54.954]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:54:54.954]        // -> [powered_down <= 0x00000001]
[16:54:54.954]    </block>
[16:54:54.954]    <control if="powered_down" while="" timeout="0" info="">
[16:54:54.954]      // if-block "powered_down"
[16:54:54.954]        // =>  TRUE
[16:54:54.955]      <block atomic="false" info="">
[16:54:54.955]        Message(0, "Debug/System power-up request sent");
[16:54:54.959]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:54:54.960]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:54:54.960]      </block>
[16:54:54.960]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:54:54.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:54:54.962]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:54:54.962]        // while-condition  =>  FALSE
[16:54:54.962]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:54:54.963]      </control>
[16:54:54.963]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:54:54.963]        // if-block "(__protocol & 0xFFFF) == 1"
[16:54:54.963]          // =>  FALSE
[16:54:54.963]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:54:54.963]      </control>
[16:54:54.963]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:54:54.963]        // if-block "(__protocol & 0xFFFF) == 2"
[16:54:54.963]          // =>  TRUE
[16:54:54.963]        <block atomic="false" info="">
[16:54:54.964]          Message(0, "executing SWD power up");
[16:54:54.968]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:54:54.972]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:54:54.972]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:54:54.976]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:54:54.976]        </block>
[16:54:54.976]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:54:54.977]      </control>
[16:54:54.977]      // end if-block "powered_down"
[16:54:54.978]    </control>
[16:54:54.978]    <block atomic="false" info="">
[16:54:54.978]      __var DEBUG_PORT_VAL    = 0;
[16:54:54.978]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:54:54.978]      __var ACCESS_POINT_VAL  = 0;
[16:54:54.978]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:54:54.978]      __ap = 1; 
[16:54:54.979]        // -> [__ap <= 0x00000001]
[16:54:54.979]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:54:54.984]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:54:54.984]      __ap = 4;
[16:54:54.984]        // -> [__ap <= 0x00000004]
[16:54:54.984]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:54:54.989]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:54:54.989]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:54:54.989]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:54:54.992]    </block>
[16:54:54.992]    <block atomic="false" info="">
[16:54:54.992]      __var nReset = 0x80;
[16:54:54.992]        // -> [nReset <= 0x00000080]
[16:54:54.992]      __var canReadPins = 0;
[16:54:54.992]        // -> [canReadPins <= 0x00000000]
[16:54:54.992]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:54:54.994]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:54:54.994]        // -> [canReadPins <= 0x00000001]
[16:54:54.994]    </block>
[16:54:54.994]    <control if="" while="1" timeout="200" info="">
[16:54:54.994]      // while "1"  (timeout="200")
[16:54:54.994]      // while-condition  =>  TRUE
[16:54:54.994]      // while "1"  (timeout="200")
[16:54:54.995]      // while-condition  =>  TRUE
[16:54:54.995]      // while "1"  (timeout="200")
[16:54:54.995]      // while-condition  =>  TRUE
[16:54:54.995]      // while "1"  (timeout="200")
[16:54:54.995]      // while-condition  =>  TRUE
[16:54:54.995]      // while "1"  (timeout="200")
[16:54:54.995]      // while-condition  =>  TRUE
[16:54:54.995]      // while "1"  (timeout="200")
[16:54:54.995]      // while-condition  =>  TRUE
[16:54:54.996]      // while "1"  (timeout="200")
[16:54:54.996]      // while-condition  =>  TRUE
[16:54:54.996]      // while "1"  (timeout="200")
[16:54:54.996]      // while-condition  =>  TRUE
[16:54:54.996]      // while "1"  (timeout="200")
[16:54:54.996]      // while-condition  =>  TRUE
[16:54:54.996]      // while "1"  (timeout="200")
[16:54:54.996]      // while-condition  =>  TRUE
[16:54:54.996]      // while "1"  (timeout="200")
[16:54:54.996]      // while-condition  =>  TRUE
[16:54:54.996]      // while "1"  (timeout="200")
[16:54:54.997]      // while-condition  =>  TRUE
[16:54:54.997]      // while "1"  (timeout="200")
[16:54:54.997]      // while-condition  =>  TRUE
[16:54:54.997]      // while "1"  (timeout="200")
[16:54:54.997]      // while-condition  =>  TRUE
[16:54:54.997]      // while "1"  (timeout="200")
[16:54:54.997]      // while-condition  =>  TRUE
[16:54:54.997]      // while "1"  (timeout="200")
[16:54:54.998]      // while-condition  =>  TRUE
[16:54:54.998]      // while "1"  (timeout="200")
[16:54:54.998]      // while-condition  =>  TRUE
[16:54:54.998]      // while "1"  (timeout="200")
[16:54:54.998]      // while-condition  =>  TRUE
[16:54:54.998]      // while "1"  (timeout="200")
[16:54:54.998]      // while-condition  =>  TRUE
[16:54:54.998]      // while "1"  (timeout="200")
[16:54:54.998]      // while-condition  =>  TRUE
[16:54:54.998]      // while "1"  (timeout="200")
[16:54:54.999]      // while-condition  =>  TRUE
[16:54:54.999]      // while "1"  (timeout="200")
[16:54:54.999]      // while-condition  =>  TRUE
[16:54:54.999]      // while "1"  (timeout="200")
[16:54:54.999]      // while-condition  =>  TRUE
[16:54:54.999]      // while "1"  (timeout="200")
[16:54:54.999]      // while-condition  =>  TRUE
[16:54:54.999]      // while "1"  (timeout="200")
[16:54:54.999]      // while-condition  =>  TRUE
[16:54:54.999]      // while "1"  (timeout="200")
[16:54:55.000]      // while-condition  =>  TRUE
[16:54:55.000]      // while "1"  (timeout="200")
[16:54:55.000]      // while-condition  =>  TRUE
[16:54:55.000]      // while "1"  (timeout="200")
[16:54:55.000]      // while-condition  =>  TRUE
[16:54:55.000]      // while "1"  (timeout="200")
[16:54:55.000]      // while-condition  =>  TRUE
[16:54:55.000]      // while "1"  (timeout="200")
[16:54:55.001]      // while-condition  =>  TRUE
[16:54:55.001]      // while "1"  (timeout="200")
[16:54:55.001]      // while-condition  =>  TRUE
[16:54:55.001]      // while "1"  (timeout="200")
[16:54:55.001]      // while-condition  =>  TRUE
[16:54:55.001]      // while "1"  (timeout="200")
[16:54:55.001]      // while-condition  =>  TRUE
[16:54:55.001]      // while "1"  (timeout="200")
[16:54:55.001]      // while-condition  =>  TRUE
[16:54:55.001]      // while "1"  (timeout="200")
[16:54:55.001]      // while-condition  =>  TRUE
[16:54:55.001]      // while "1"  (timeout="200")
[16:54:55.001]      // while-condition  =>  TRUE
[16:54:55.002]      // while "1"  (timeout="200")
[16:54:55.002]      // while-condition  =>  TRUE
[16:54:55.002]      // while "1"  (timeout="200")
[16:54:55.002]      // while-condition  =>  TRUE
[16:54:55.002]      // while "1"  (timeout="200")
[16:54:55.002]      // while-condition  =>  TRUE
[16:54:55.002]      // while "1"  (timeout="200")
[16:54:55.003]      // while-condition  =>  TRUE
[16:54:55.003]      // while "1"  (timeout="200")
[16:54:55.003]      // while  =>  TIMEOUT
[16:54:55.003]      // end while "1"
[16:54:55.003]    </control>
[16:54:55.003]    <control if="canReadPins" while="" timeout="0" info="">
[16:54:55.003]      // if-block "canReadPins"
[16:54:55.003]        // =>  TRUE
[16:54:55.003]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:54:55.004]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:54:55.006]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:54:55.006]        // while-condition  =>  FALSE
[16:54:55.006]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:54:55.006]      </control>
[16:54:55.006]      // end if-block "canReadPins"
[16:54:55.006]    </control>
[16:54:55.007]    <control if="!canReadPins" while="" timeout="0" info="">
[16:54:55.007]      // if-block "!canReadPins"
[16:54:55.007]        // =>  FALSE
[16:54:55.007]      // skip if-block "!canReadPins"
[16:54:55.007]    </control>
[16:54:55.007]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:54:55.007]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:54:55.007]        // =>  TRUE
[16:54:55.007]      <block atomic="false" info="">
[16:54:55.007]        WriteAP(0x00, 0x190008);
[16:54:55.009]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:54:55.010]        WriteAP(0xF0, 0x01);
[16:54:55.023]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:54:55.023]      </block>
[16:54:55.023]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:54:55.023]    </control>
[16:54:55.023]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:54:55.023]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:54:55.023]        // =>  FALSE
[16:54:55.023]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:54:55.023]    </control>
[16:54:55.023]    <block atomic="false" info="">
[16:54:55.023]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:54:55.027]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:54:55.027]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:54:55.027]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:54:55.030]      __ap = 0; //lets make sure we reset the access point selection
[16:54:55.031]        // -> [__ap <= 0x00000000]
[16:54:55.031]    </block>
[16:54:55.031]  </sequence>
[16:54:55.031]  
[16:54:55.061]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:54:55.061]  
[16:54:55.062]  <debugvars>
[16:54:55.062]    // Pre-defined
[16:54:55.062]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:54:55.062]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:54:55.062]    __dp=0x00000000
[16:54:55.063]    __ap=0x00000000
[16:54:55.063]    __traceout=0x00000000      (Trace Disabled)
[16:54:55.063]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:54:55.063]    __FlashAddr=0x00000000
[16:54:55.063]    __FlashLen=0x00000000
[16:54:55.063]    __FlashArg=0x00000000
[16:54:55.063]    __FlashOp=0x00000000
[16:54:55.063]    __Result=0x00000000
[16:54:55.063]  </debugvars>
[16:54:55.063]  
[16:54:55.063]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:54:55.064]    <block atomic="false" info="">
[16:54:55.064]      __var deviceID = 0;
[16:54:55.064]        // -> [deviceID <= 0x00000000]
[16:54:55.064]      __var version = 0;
[16:54:55.064]        // -> [version <= 0x00000000]
[16:54:55.064]      __var partNum = 0;
[16:54:55.064]        // -> [partNum <= 0x00000000]
[16:54:55.064]      __var manuf = 0;
[16:54:55.064]        // -> [manuf <= 0x00000000]
[16:54:55.065]      __var isMSPM0G1X0X_G3X0X = 0;
[16:54:55.065]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:54:55.065]      __var isProduction = 0;
[16:54:55.065]        // -> [isProduction <= 0x00000000]
[16:54:55.065]      __var continueId = 0;
[16:54:55.065]        // -> [continueId <= 0x00000000]
[16:54:55.065]      deviceID =   Read32(0x41C40004);
[16:54:55.081]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:54:55.081]        // -> [deviceID <= 0x2BB8802F]
[16:54:55.081]      version = deviceID >> 28;
[16:54:55.081]        // -> [version <= 0x00000002]
[16:54:55.081]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:54:55.081]        // -> [partNum <= 0x0000BB88]
[16:54:55.082]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:54:55.082]        // -> [manuf <= 0x00000017]
[16:54:55.082]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:54:55.082]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:54:55.082]      isProduction = (version > 0);
[16:54:55.082]        // -> [isProduction <= 0x00000001]
[16:54:55.083]    </block>
[16:54:55.083]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:54:55.083]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:54:55.083]        // =>  FALSE
[16:54:55.083]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:54:55.083]    </control>
[16:54:55.083]    <control if="continueId == 4" while="" timeout="0" info="">
[16:54:55.083]      // if-block "continueId == 4"
[16:54:55.083]        // =>  FALSE
[16:54:55.083]      // skip if-block "continueId == 4"
[16:54:55.083]    </control>
[16:54:55.084]    <control if="!isProduction" while="" timeout="0" info="">
[16:54:55.084]      // if-block "!isProduction"
[16:54:55.084]        // =>  FALSE
[16:54:55.084]      // skip if-block "!isProduction"
[16:54:55.084]    </control>
[16:54:55.084]  </sequence>
[16:54:55.085]  
[16:59:16.975]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[16:59:16.975]  
[16:59:16.983]  <debugvars>
[16:59:16.983]    // Pre-defined
[16:59:16.983]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:59:16.983]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:59:16.983]    __dp=0x00000000
[16:59:16.983]    __ap=0x00000000
[16:59:16.983]    __traceout=0x00000000      (Trace Disabled)
[16:59:16.983]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:59:16.985]    __FlashAddr=0x00000000
[16:59:16.985]    __FlashLen=0x00000000
[16:59:16.985]    __FlashArg=0x00000000
[16:59:16.985]    __FlashOp=0x00000000
[16:59:16.985]    __Result=0x00000000
[16:59:16.985]  </debugvars>
[16:59:16.986]  
[16:59:16.986]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[16:59:16.986]    <block atomic="false" info="">
[16:59:16.986]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[16:59:16.986]        // -> [isSWJ <= 0x00000001]
[16:59:16.986]      __var hasDormant = __protocol & 0x00020000;
[16:59:16.986]        // -> [hasDormant <= 0x00000000]
[16:59:16.986]      __var protType   = __protocol & 0x0000FFFF;
[16:59:16.986]        // -> [protType <= 0x00000002]
[16:59:16.986]    </block>
[16:59:16.986]    <control if="protType == 1" while="" timeout="0" info="">
[16:59:16.986]      // if-block "protType == 1"
[16:59:16.986]        // =>  FALSE
[16:59:16.986]      // skip if-block "protType == 1"
[16:59:16.986]    </control>
[16:59:16.986]    <control if="protType == 2" while="" timeout="0" info="">
[16:59:16.986]      // if-block "protType == 2"
[16:59:16.986]        // =>  TRUE
[16:59:16.986]      <control if="isSWJ" while="" timeout="0" info="">
[16:59:16.986]        // if-block "isSWJ"
[16:59:16.986]          // =>  TRUE
[16:59:16.986]        <control if="hasDormant" while="" timeout="0" info="">
[16:59:16.986]          // if-block "hasDormant"
[16:59:16.986]            // =>  FALSE
[16:59:16.986]          // skip if-block "hasDormant"
[16:59:16.986]        </control>
[16:59:16.986]        <control if="!hasDormant" while="" timeout="0" info="">
[16:59:16.986]          // if-block "!hasDormant"
[16:59:16.986]            // =>  TRUE
[16:59:16.986]          <block atomic="false" info="">
[16:59:16.986]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[16:59:16.993]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:59:16.993]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[16:59:16.995]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[16:59:16.995]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[16:59:16.995]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:59:16.995]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[16:59:17.004]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[16:59:17.004]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[16:59:17.005]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[16:59:17.005]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[16:59:17.005]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[16:59:17.005]          </block>
[16:59:17.005]          // end if-block "!hasDormant"
[16:59:17.005]        </control>
[16:59:17.005]        // end if-block "isSWJ"
[16:59:17.005]      </control>
[16:59:17.005]      <control if="!isSWJ" while="" timeout="0" info="">
[16:59:17.005]        // if-block "!isSWJ"
[16:59:17.005]          // =>  FALSE
[16:59:17.005]        // skip if-block "!isSWJ"
[16:59:17.005]      </control>
[16:59:17.005]      <block atomic="false" info="">
[16:59:17.005]        ReadDP(0x0);
[16:59:17.005]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[16:59:17.005]      </block>
[16:59:17.005]      // end if-block "protType == 2"
[16:59:17.005]    </control>
[16:59:17.005]  </sequence>
[16:59:17.005]  
[16:59:17.014]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[16:59:17.014]  
[16:59:17.014]  <debugvars>
[16:59:17.014]    // Pre-defined
[16:59:17.014]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:59:17.014]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:59:17.014]    __dp=0x00000000
[16:59:17.014]    __ap=0x00000000
[16:59:17.014]    __traceout=0x00000000      (Trace Disabled)
[16:59:17.014]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:59:17.014]    __FlashAddr=0x00000000
[16:59:17.014]    __FlashLen=0x00000000
[16:59:17.014]    __FlashArg=0x00000000
[16:59:17.014]    __FlashOp=0x00000000
[16:59:17.014]    __Result=0x00000000
[16:59:17.014]  </debugvars>
[16:59:17.014]  
[16:59:17.014]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[16:59:17.014]    <block atomic="false" info="">
[16:59:17.014]      __var SW_DP_ABORT       = 0x0;
[16:59:17.014]        // -> [SW_DP_ABORT <= 0x00000000]
[16:59:17.014]      __var DP_CTRL_STAT      = 0x4;
[16:59:17.014]        // -> [DP_CTRL_STAT <= 0x00000004]
[16:59:17.014]      __var DP_SELECT         = 0x8;
[16:59:17.014]        // -> [DP_SELECT <= 0x00000008]
[16:59:17.014]      __var powered_down      = 0;
[16:59:17.014]        // -> [powered_down <= 0x00000000]
[16:59:17.014]      WriteDP(DP_SELECT, 0x00000000);
[16:59:17.014]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[16:59:17.014]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[16:59:17.014]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[16:59:17.014]        // -> [powered_down <= 0x00000001]
[16:59:17.014]    </block>
[16:59:17.014]    <control if="powered_down" while="" timeout="0" info="">
[16:59:17.014]      // if-block "powered_down"
[16:59:17.014]        // =>  TRUE
[16:59:17.023]      <block atomic="false" info="">
[16:59:17.023]        Message(0, "Debug/System power-up request sent");
[16:59:17.026]        WriteDP(DP_CTRL_STAT, 0x50000000);
[16:59:17.026]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[16:59:17.026]      </block>
[16:59:17.026]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[16:59:17.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[16:59:17.030]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[16:59:17.030]        // while-condition  =>  FALSE
[16:59:17.031]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[16:59:17.031]      </control>
[16:59:17.031]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[16:59:17.031]        // if-block "(__protocol & 0xFFFF) == 1"
[16:59:17.031]          // =>  FALSE
[16:59:17.031]        // skip if-block "(__protocol & 0xFFFF) == 1"
[16:59:17.031]      </control>
[16:59:17.031]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[16:59:17.031]        // if-block "(__protocol & 0xFFFF) == 2"
[16:59:17.031]          // =>  TRUE
[16:59:17.031]        <block atomic="false" info="">
[16:59:17.031]          Message(0, "executing SWD power up");
[16:59:17.031]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[16:59:17.034]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[16:59:17.034]          WriteDP(SW_DP_ABORT, 0x0000001E);
[16:59:17.034]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[16:59:17.034]        </block>
[16:59:17.034]        // end if-block "(__protocol & 0xFFFF) == 2"
[16:59:17.034]      </control>
[16:59:17.034]      // end if-block "powered_down"
[16:59:17.034]    </control>
[16:59:17.034]    <block atomic="false" info="">
[16:59:17.034]      __var DEBUG_PORT_VAL    = 0;
[16:59:17.034]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[16:59:17.034]      __var ACCESS_POINT_VAL  = 0;
[16:59:17.034]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[16:59:17.034]      __ap = 1; 
[16:59:17.034]        // -> [__ap <= 0x00000001]
[16:59:17.034]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[16:59:17.044]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[16:59:17.044]      __ap = 4;
[16:59:17.044]        // -> [__ap <= 0x00000004]
[16:59:17.044]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:59:17.044]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[16:59:17.044]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[16:59:17.044]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:59:17.055]    </block>
[16:59:17.055]    <block atomic="false" info="">
[16:59:17.055]      __var nReset = 0x80;
[16:59:17.055]        // -> [nReset <= 0x00000080]
[16:59:17.055]      __var canReadPins = 0;
[16:59:17.055]        // -> [canReadPins <= 0x00000000]
[16:59:17.055]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[16:59:17.055]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[16:59:17.055]        // -> [canReadPins <= 0x00000001]
[16:59:17.055]    </block>
[16:59:17.055]    <control if="" while="1" timeout="200" info="">
[16:59:17.055]      // while "1"  (timeout="200")
[16:59:17.055]      // while-condition  =>  TRUE
[16:59:17.055]      // while "1"  (timeout="200")
[16:59:17.055]      // while-condition  =>  TRUE
[16:59:17.055]      // while "1"  (timeout="200")
[16:59:17.055]      // while-condition  =>  TRUE
[16:59:17.055]      // while "1"  (timeout="200")
[16:59:17.055]      // while-condition  =>  TRUE
[16:59:17.055]      // while "1"  (timeout="200")
[16:59:17.061]      // while-condition  =>  TRUE
[16:59:17.061]      // while "1"  (timeout="200")
[16:59:17.061]      // while-condition  =>  TRUE
[16:59:17.061]      // while "1"  (timeout="200")
[16:59:17.061]      // while-condition  =>  TRUE
[16:59:17.061]      // while "1"  (timeout="200")
[16:59:17.061]      // while-condition  =>  TRUE
[16:59:17.061]      // while "1"  (timeout="200")
[16:59:17.061]      // while-condition  =>  TRUE
[16:59:17.061]      // while "1"  (timeout="200")
[16:59:17.061]      // while-condition  =>  TRUE
[16:59:17.061]      // while "1"  (timeout="200")
[16:59:17.061]      // while-condition  =>  TRUE
[16:59:17.061]      // while "1"  (timeout="200")
[16:59:17.061]      // while-condition  =>  TRUE
[16:59:17.061]      // while "1"  (timeout="200")
[16:59:17.061]      // while-condition  =>  TRUE
[16:59:17.061]      // while "1"  (timeout="200")
[16:59:17.061]      // while-condition  =>  TRUE
[16:59:17.061]      // while "1"  (timeout="200")
[16:59:17.061]      // while-condition  =>  TRUE
[16:59:17.061]      // while "1"  (timeout="200")
[16:59:17.061]      // while-condition  =>  TRUE
[16:59:17.061]      // while "1"  (timeout="200")
[16:59:17.061]      // while-condition  =>  TRUE
[16:59:17.064]      // while "1"  (timeout="200")
[16:59:17.064]      // while-condition  =>  TRUE
[16:59:17.064]      // while "1"  (timeout="200")
[16:59:17.064]      // while-condition  =>  TRUE
[16:59:17.064]      // while "1"  (timeout="200")
[16:59:17.064]      // while-condition  =>  TRUE
[16:59:17.064]      // while "1"  (timeout="200")
[16:59:17.065]      // while-condition  =>  TRUE
[16:59:17.065]      // while "1"  (timeout="200")
[16:59:17.065]      // while-condition  =>  TRUE
[16:59:17.065]      // while "1"  (timeout="200")
[16:59:17.065]      // while-condition  =>  TRUE
[16:59:17.065]      // while "1"  (timeout="200")
[16:59:17.065]      // while-condition  =>  TRUE
[16:59:17.066]      // while "1"  (timeout="200")
[16:59:17.066]      // while  =>  TIMEOUT
[16:59:17.066]      // end while "1"
[16:59:17.066]    </control>
[16:59:17.066]    <control if="canReadPins" while="" timeout="0" info="">
[16:59:17.066]      // if-block "canReadPins"
[16:59:17.066]        // =>  TRUE
[16:59:17.066]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[16:59:17.066]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[16:59:17.068]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[16:59:17.068]        // while-condition  =>  FALSE
[16:59:17.068]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[16:59:17.068]      </control>
[16:59:17.068]      // end if-block "canReadPins"
[16:59:17.068]    </control>
[16:59:17.068]    <control if="!canReadPins" while="" timeout="0" info="">
[16:59:17.068]      // if-block "!canReadPins"
[16:59:17.068]        // =>  FALSE
[16:59:17.068]      // skip if-block "!canReadPins"
[16:59:17.068]    </control>
[16:59:17.068]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[16:59:17.068]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:59:17.068]        // =>  TRUE
[16:59:17.068]      <block atomic="false" info="">
[16:59:17.068]        WriteAP(0x00, 0x190008);
[16:59:17.074]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[16:59:17.074]        WriteAP(0xF0, 0x01);
[16:59:17.076]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[16:59:17.076]      </block>
[16:59:17.076]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[16:59:17.076]    </control>
[16:59:17.076]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[16:59:17.076]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:59:17.076]        // =>  FALSE
[16:59:17.076]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[16:59:17.076]    </control>
[16:59:17.076]    <block atomic="false" info="">
[16:59:17.076]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[16:59:17.076]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[16:59:17.076]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[16:59:17.076]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[16:59:17.084]      __ap = 0; //lets make sure we reset the access point selection
[16:59:17.085]        // -> [__ap <= 0x00000000]
[16:59:17.085]    </block>
[16:59:17.085]  </sequence>
[16:59:17.085]  
[16:59:17.115]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[16:59:17.115]  
[16:59:17.116]  <debugvars>
[16:59:17.116]    // Pre-defined
[16:59:17.116]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[16:59:17.116]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[16:59:17.116]    __dp=0x00000000
[16:59:17.116]    __ap=0x00000000
[16:59:17.116]    __traceout=0x00000000      (Trace Disabled)
[16:59:17.116]    __errorcontrol=0x00000000  (Skip Errors="False")
[16:59:17.116]    __FlashAddr=0x00000000
[16:59:17.116]    __FlashLen=0x00000000
[16:59:17.116]    __FlashArg=0x00000000
[16:59:17.116]    __FlashOp=0x00000000
[16:59:17.116]    __Result=0x00000000
[16:59:17.116]  </debugvars>
[16:59:17.116]  
[16:59:17.116]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[16:59:17.116]    <block atomic="false" info="">
[16:59:17.116]      __var deviceID = 0;
[16:59:17.116]        // -> [deviceID <= 0x00000000]
[16:59:17.116]      __var version = 0;
[16:59:17.116]        // -> [version <= 0x00000000]
[16:59:17.116]      __var partNum = 0;
[16:59:17.116]        // -> [partNum <= 0x00000000]
[16:59:17.116]      __var manuf = 0;
[16:59:17.116]        // -> [manuf <= 0x00000000]
[16:59:17.116]      __var isMSPM0G1X0X_G3X0X = 0;
[16:59:17.116]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[16:59:17.116]      __var isProduction = 0;
[16:59:17.116]        // -> [isProduction <= 0x00000000]
[16:59:17.116]      __var continueId = 0;
[16:59:17.116]        // -> [continueId <= 0x00000000]
[16:59:17.116]      deviceID =   Read32(0x41C40004);
[16:59:17.116]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[16:59:17.116]        // -> [deviceID <= 0x2BB8802F]
[16:59:17.116]      version = deviceID >> 28;
[16:59:17.116]        // -> [version <= 0x00000002]
[16:59:17.124]      partNum = (deviceID & 0x0FFFF000) >> 12;
[16:59:17.124]        // -> [partNum <= 0x0000BB88]
[16:59:17.124]      manuf = (deviceID & 0x00000FFE) >> 1;
[16:59:17.124]        // -> [manuf <= 0x00000017]
[16:59:17.124]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[16:59:17.124]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[16:59:17.124]      isProduction = (version > 0);
[16:59:17.124]        // -> [isProduction <= 0x00000001]
[16:59:17.124]    </block>
[16:59:17.124]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[16:59:17.124]      // if-block "!isMSPM0G1X0X_G3X0X"
[16:59:17.124]        // =>  FALSE
[16:59:17.124]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[16:59:17.124]    </control>
[16:59:17.124]    <control if="continueId == 4" while="" timeout="0" info="">
[16:59:17.124]      // if-block "continueId == 4"
[16:59:17.124]        // =>  FALSE
[16:59:17.124]      // skip if-block "continueId == 4"
[16:59:17.124]    </control>
[16:59:17.124]    <control if="!isProduction" while="" timeout="0" info="">
[16:59:17.124]      // if-block "!isProduction"
[16:59:17.124]        // =>  FALSE
[16:59:17.124]      // skip if-block "!isProduction"
[16:59:17.124]    </control>
[16:59:17.124]  </sequence>
[16:59:17.124]  
[17:01:53.734]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:01:53.734]  
[17:01:53.752]  <debugvars>
[17:01:53.752]    // Pre-defined
[17:01:53.752]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:01:53.752]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:01:53.752]    __dp=0x00000000
[17:01:53.752]    __ap=0x00000000
[17:01:53.752]    __traceout=0x00000000      (Trace Disabled)
[17:01:53.752]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:01:53.752]    __FlashAddr=0x00000000
[17:01:53.752]    __FlashLen=0x00000000
[17:01:53.752]    __FlashArg=0x00000000
[17:01:53.752]    __FlashOp=0x00000000
[17:01:53.752]    __Result=0x00000000
[17:01:53.752]  </debugvars>
[17:01:53.752]  
[17:01:53.752]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:01:53.754]    <block atomic="false" info="">
[17:01:53.754]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:01:53.754]        // -> [isSWJ <= 0x00000001]
[17:01:53.754]      __var hasDormant = __protocol & 0x00020000;
[17:01:53.754]        // -> [hasDormant <= 0x00000000]
[17:01:53.754]      __var protType   = __protocol & 0x0000FFFF;
[17:01:53.754]        // -> [protType <= 0x00000002]
[17:01:53.754]    </block>
[17:01:53.755]    <control if="protType == 1" while="" timeout="0" info="">
[17:01:53.755]      // if-block "protType == 1"
[17:01:53.755]        // =>  FALSE
[17:01:53.755]      // skip if-block "protType == 1"
[17:01:53.755]    </control>
[17:01:53.755]    <control if="protType == 2" while="" timeout="0" info="">
[17:01:53.755]      // if-block "protType == 2"
[17:01:53.755]        // =>  TRUE
[17:01:53.755]      <control if="isSWJ" while="" timeout="0" info="">
[17:01:53.755]        // if-block "isSWJ"
[17:01:53.755]          // =>  TRUE
[17:01:53.755]        <control if="hasDormant" while="" timeout="0" info="">
[17:01:53.755]          // if-block "hasDormant"
[17:01:53.755]            // =>  FALSE
[17:01:53.755]          // skip if-block "hasDormant"
[17:01:53.755]        </control>
[17:01:53.755]        <control if="!hasDormant" while="" timeout="0" info="">
[17:01:53.755]          // if-block "!hasDormant"
[17:01:53.755]            // =>  TRUE
[17:01:53.755]          <block atomic="false" info="">
[17:01:53.755]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:01:53.759]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:01:53.759]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:01:53.759]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:01:53.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:01:53.765]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:01:53.765]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:01:53.786]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:01:53.786]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:01:53.794]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:01:53.794]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:01:53.805]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:01:53.805]          </block>
[17:01:53.805]          // end if-block "!hasDormant"
[17:01:53.805]        </control>
[17:01:53.805]        // end if-block "isSWJ"
[17:01:53.805]      </control>
[17:01:53.805]      <control if="!isSWJ" while="" timeout="0" info="">
[17:01:53.805]        // if-block "!isSWJ"
[17:01:53.805]          // =>  FALSE
[17:01:53.805]        // skip if-block "!isSWJ"
[17:01:53.806]      </control>
[17:01:53.806]      <block atomic="false" info="">
[17:01:53.806]        ReadDP(0x0);
[17:01:53.806]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:01:53.806]      </block>
[17:01:53.806]      // end if-block "protType == 2"
[17:01:53.806]    </control>
[17:01:53.806]  </sequence>
[17:01:53.806]  
[17:01:53.815]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:01:53.815]  
[17:01:53.815]  <debugvars>
[17:01:53.815]    // Pre-defined
[17:01:53.815]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:01:53.815]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:01:53.815]    __dp=0x00000000
[17:01:53.815]    __ap=0x00000000
[17:01:53.815]    __traceout=0x00000000      (Trace Disabled)
[17:01:53.815]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:01:53.815]    __FlashAddr=0x00000000
[17:01:53.815]    __FlashLen=0x00000000
[17:01:53.823]    __FlashArg=0x00000000
[17:01:53.823]    __FlashOp=0x00000000
[17:01:53.823]    __Result=0x00000000
[17:01:53.823]  </debugvars>
[17:01:53.823]  
[17:01:53.823]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:01:53.824]    <block atomic="false" info="">
[17:01:53.824]      __var SW_DP_ABORT       = 0x0;
[17:01:53.824]        // -> [SW_DP_ABORT <= 0x00000000]
[17:01:53.824]      __var DP_CTRL_STAT      = 0x4;
[17:01:53.824]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:01:53.824]      __var DP_SELECT         = 0x8;
[17:01:53.824]        // -> [DP_SELECT <= 0x00000008]
[17:01:53.824]      __var powered_down      = 0;
[17:01:53.824]        // -> [powered_down <= 0x00000000]
[17:01:53.824]      WriteDP(DP_SELECT, 0x00000000);
[17:01:53.825]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:01:53.825]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:01:53.834]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:01:53.834]        // -> [powered_down <= 0x00000001]
[17:01:53.834]    </block>
[17:01:53.834]    <control if="powered_down" while="" timeout="0" info="">
[17:01:53.834]      // if-block "powered_down"
[17:01:53.834]        // =>  TRUE
[17:01:53.834]      <block atomic="false" info="">
[17:01:53.834]        Message(0, "Debug/System power-up request sent");
[17:01:53.834]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:01:53.845]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:01:53.845]      </block>
[17:01:53.845]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:01:53.845]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:01:53.845]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:01:53.853]        // while-condition  =>  FALSE
[17:01:53.853]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:01:53.853]      </control>
[17:01:53.853]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:01:53.853]        // if-block "(__protocol & 0xFFFF) == 1"
[17:01:53.855]          // =>  FALSE
[17:01:53.855]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:01:53.855]      </control>
[17:01:53.855]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:01:53.855]        // if-block "(__protocol & 0xFFFF) == 2"
[17:01:53.855]          // =>  TRUE
[17:01:53.855]        <block atomic="false" info="">
[17:01:53.855]          Message(0, "executing SWD power up");
[17:01:53.856]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:01:53.865]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:01:53.865]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:01:53.876]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:01:53.876]        </block>
[17:01:53.876]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:01:53.876]      </control>
[17:01:53.876]      // end if-block "powered_down"
[17:01:53.876]    </control>
[17:01:53.876]    <block atomic="false" info="">
[17:01:53.876]      __var DEBUG_PORT_VAL    = 0;
[17:01:53.876]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:01:53.876]      __var ACCESS_POINT_VAL  = 0;
[17:01:53.876]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:01:53.876]      __ap = 1; 
[17:01:53.876]        // -> [__ap <= 0x00000001]
[17:01:53.876]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:01:53.895]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:01:53.895]      __ap = 4;
[17:01:53.895]        // -> [__ap <= 0x00000004]
[17:01:53.895]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:01:53.944]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:01:53.944]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:01:53.944]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:01:53.944]    </block>
[17:01:53.944]    <block atomic="false" info="">
[17:01:53.944]      __var nReset = 0x80;
[17:01:53.944]        // -> [nReset <= 0x00000080]
[17:01:53.944]      __var canReadPins = 0;
[17:01:53.944]        // -> [canReadPins <= 0x00000000]
[17:01:53.944]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:01:53.956]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:01:53.956]        // -> [canReadPins <= 0x00000001]
[17:01:53.956]    </block>
[17:01:53.956]    <control if="" while="1" timeout="200" info="">
[17:01:53.956]      // while "1"  (timeout="200")
[17:01:53.956]      // while-condition  =>  TRUE
[17:01:53.956]      // while "1"  (timeout="200")
[17:01:53.956]      // while-condition  =>  TRUE
[17:01:53.956]      // while "1"  (timeout="200")
[17:01:53.956]      // while-condition  =>  TRUE
[17:01:53.956]      // while "1"  (timeout="200")
[17:01:53.956]      // while-condition  =>  TRUE
[17:01:53.956]      // while "1"  (timeout="200")
[17:01:53.956]      // while-condition  =>  TRUE
[17:01:53.956]      // while "1"  (timeout="200")
[17:01:53.956]      // while-condition  =>  TRUE
[17:01:53.956]      // while "1"  (timeout="200")
[17:01:53.956]      // while-condition  =>  TRUE
[17:01:53.956]      // while "1"  (timeout="200")
[17:01:53.956]      // while-condition  =>  TRUE
[17:01:53.956]      // while "1"  (timeout="200")
[17:01:53.956]      // while-condition  =>  TRUE
[17:01:53.956]      // while "1"  (timeout="200")
[17:01:53.956]      // while-condition  =>  TRUE
[17:01:53.956]      // while "1"  (timeout="200")
[17:01:53.956]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.964]      // while-condition  =>  TRUE
[17:01:53.964]      // while "1"  (timeout="200")
[17:01:53.974]      // while-condition  =>  TRUE
[17:01:53.974]      // while "1"  (timeout="200")
[17:01:53.974]      // while  =>  TIMEOUT
[17:01:53.974]      // end while "1"
[17:01:53.974]    </control>
[17:01:53.974]    <control if="canReadPins" while="" timeout="0" info="">
[17:01:53.974]      // if-block "canReadPins"
[17:01:53.974]        // =>  TRUE
[17:01:53.974]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:01:53.974]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:01:53.975]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:01:53.975]        // while-condition  =>  FALSE
[17:01:53.975]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:01:53.975]      </control>
[17:01:53.975]      // end if-block "canReadPins"
[17:01:53.975]    </control>
[17:01:53.975]    <control if="!canReadPins" while="" timeout="0" info="">
[17:01:53.975]      // if-block "!canReadPins"
[17:01:53.975]        // =>  FALSE
[17:01:53.975]      // skip if-block "!canReadPins"
[17:01:53.983]    </control>
[17:01:53.983]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:01:53.983]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:01:53.983]        // =>  TRUE
[17:01:53.983]      <block atomic="false" info="">
[17:01:53.983]        WriteAP(0x00, 0x190008);
[17:01:53.996]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:01:53.996]        WriteAP(0xF0, 0x01);
[17:01:53.996]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:01:53.996]      </block>
[17:01:53.996]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:01:53.996]    </control>
[17:01:53.996]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:01:53.996]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:01:53.996]        // =>  FALSE
[17:01:53.996]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:01:53.996]    </control>
[17:01:53.996]    <block atomic="false" info="">
[17:01:53.996]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:01:54.026]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:01:54.026]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:01:54.026]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:01:54.026]      __ap = 0; //lets make sure we reset the access point selection
[17:01:54.026]        // -> [__ap <= 0x00000000]
[17:01:54.026]    </block>
[17:01:54.026]  </sequence>
[17:01:54.026]  
[17:01:54.075]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:01:54.075]  
[17:01:54.075]  <debugvars>
[17:01:54.075]    // Pre-defined
[17:01:54.075]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:01:54.075]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:01:54.075]    __dp=0x00000000
[17:01:54.075]    __ap=0x00000000
[17:01:54.075]    __traceout=0x00000000      (Trace Disabled)
[17:01:54.075]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:01:54.075]    __FlashAddr=0x00000000
[17:01:54.075]    __FlashLen=0x00000000
[17:01:54.075]    __FlashArg=0x00000000
[17:01:54.075]    __FlashOp=0x00000000
[17:01:54.075]    __Result=0x00000000
[17:01:54.075]  </debugvars>
[17:01:54.075]  
[17:01:54.075]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:01:54.075]    <block atomic="false" info="">
[17:01:54.075]      __var deviceID = 0;
[17:01:54.075]        // -> [deviceID <= 0x00000000]
[17:01:54.075]      __var version = 0;
[17:01:54.075]        // -> [version <= 0x00000000]
[17:01:54.075]      __var partNum = 0;
[17:01:54.075]        // -> [partNum <= 0x00000000]
[17:01:54.075]      __var manuf = 0;
[17:01:54.075]        // -> [manuf <= 0x00000000]
[17:01:54.075]      __var isMSPM0G1X0X_G3X0X = 0;
[17:01:54.075]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:01:54.075]      __var isProduction = 0;
[17:01:54.075]        // -> [isProduction <= 0x00000000]
[17:01:54.075]      __var continueId = 0;
[17:01:54.075]        // -> [continueId <= 0x00000000]
[17:01:54.075]      deviceID =   Read32(0x41C40004);
[17:01:54.085]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:01:54.085]        // -> [deviceID <= 0x2BB8802F]
[17:01:54.085]      version = deviceID >> 28;
[17:01:54.085]        // -> [version <= 0x00000002]
[17:01:54.085]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:01:54.085]        // -> [partNum <= 0x0000BB88]
[17:01:54.085]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:01:54.085]        // -> [manuf <= 0x00000017]
[17:01:54.085]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:01:54.085]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:01:54.085]      isProduction = (version > 0);
[17:01:54.085]        // -> [isProduction <= 0x00000001]
[17:01:54.085]    </block>
[17:01:54.085]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:01:54.085]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:01:54.085]        // =>  FALSE
[17:01:54.085]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:01:54.085]    </control>
[17:01:54.085]    <control if="continueId == 4" while="" timeout="0" info="">
[17:01:54.085]      // if-block "continueId == 4"
[17:01:54.085]        // =>  FALSE
[17:01:54.085]      // skip if-block "continueId == 4"
[17:01:54.085]    </control>
[17:01:54.085]    <control if="!isProduction" while="" timeout="0" info="">
[17:01:54.085]      // if-block "!isProduction"
[17:01:54.085]        // =>  FALSE
[17:01:54.085]      // skip if-block "!isProduction"
[17:01:54.085]    </control>
[17:01:54.085]  </sequence>
[17:01:54.085]  
[17:04:38.577]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:04:38.577]  
[17:04:38.581]  <debugvars>
[17:04:38.581]    // Pre-defined
[17:04:38.581]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:04:38.581]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:04:38.581]    __dp=0x00000000
[17:04:38.581]    __ap=0x00000000
[17:04:38.581]    __traceout=0x00000000      (Trace Disabled)
[17:04:38.581]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:04:38.581]    __FlashAddr=0x00000000
[17:04:38.581]    __FlashLen=0x00000000
[17:04:38.581]    __FlashArg=0x00000000
[17:04:38.581]    __FlashOp=0x00000000
[17:04:38.581]    __Result=0x00000000
[17:04:38.581]  </debugvars>
[17:04:38.581]  
[17:04:38.581]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:04:38.581]    <block atomic="false" info="">
[17:04:38.581]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:04:38.581]        // -> [isSWJ <= 0x00000001]
[17:04:38.581]      __var hasDormant = __protocol & 0x00020000;
[17:04:38.581]        // -> [hasDormant <= 0x00000000]
[17:04:38.581]      __var protType   = __protocol & 0x0000FFFF;
[17:04:38.581]        // -> [protType <= 0x00000002]
[17:04:38.581]    </block>
[17:04:38.581]    <control if="protType == 1" while="" timeout="0" info="">
[17:04:38.581]      // if-block "protType == 1"
[17:04:38.581]        // =>  FALSE
[17:04:38.581]      // skip if-block "protType == 1"
[17:04:38.581]    </control>
[17:04:38.581]    <control if="protType == 2" while="" timeout="0" info="">
[17:04:38.581]      // if-block "protType == 2"
[17:04:38.581]        // =>  TRUE
[17:04:38.581]      <control if="isSWJ" while="" timeout="0" info="">
[17:04:38.581]        // if-block "isSWJ"
[17:04:38.581]          // =>  TRUE
[17:04:38.581]        <control if="hasDormant" while="" timeout="0" info="">
[17:04:38.581]          // if-block "hasDormant"
[17:04:38.581]            // =>  FALSE
[17:04:38.581]          // skip if-block "hasDormant"
[17:04:38.581]        </control>
[17:04:38.581]        <control if="!hasDormant" while="" timeout="0" info="">
[17:04:38.581]          // if-block "!hasDormant"
[17:04:38.581]            // =>  TRUE
[17:04:38.581]          <block atomic="false" info="">
[17:04:38.581]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:04:38.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:04:38.609]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:04:38.618]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:04:38.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:04:38.618]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:04:38.618]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:04:38.629]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:04:38.629]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:04:38.636]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:04:38.637]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:04:38.660]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:04:38.660]          </block>
[17:04:38.660]          // end if-block "!hasDormant"
[17:04:38.660]        </control>
[17:04:38.660]        // end if-block "isSWJ"
[17:04:38.660]      </control>
[17:04:38.660]      <control if="!isSWJ" while="" timeout="0" info="">
[17:04:38.660]        // if-block "!isSWJ"
[17:04:38.660]          // =>  FALSE
[17:04:38.660]        // skip if-block "!isSWJ"
[17:04:38.660]      </control>
[17:04:38.660]      <block atomic="false" info="">
[17:04:38.660]        ReadDP(0x0);
[17:04:38.670]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:04:38.670]      </block>
[17:04:38.670]      // end if-block "protType == 2"
[17:04:38.670]    </control>
[17:04:38.670]  </sequence>
[17:04:38.670]  
[17:04:38.676]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:04:38.676]  
[17:04:38.676]  <debugvars>
[17:04:38.676]    // Pre-defined
[17:04:38.676]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:04:38.677]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:04:38.677]    __dp=0x00000000
[17:04:38.677]    __ap=0x00000000
[17:04:38.677]    __traceout=0x00000000      (Trace Disabled)
[17:04:38.678]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:04:38.678]    __FlashAddr=0x00000000
[17:04:38.678]    __FlashLen=0x00000000
[17:04:38.678]    __FlashArg=0x00000000
[17:04:38.678]    __FlashOp=0x00000000
[17:04:38.678]    __Result=0x00000000
[17:04:38.678]  </debugvars>
[17:04:38.678]  
[17:04:38.678]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:04:38.678]    <block atomic="false" info="">
[17:04:38.678]      __var SW_DP_ABORT       = 0x0;
[17:04:38.678]        // -> [SW_DP_ABORT <= 0x00000000]
[17:04:38.678]      __var DP_CTRL_STAT      = 0x4;
[17:04:38.678]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:04:38.678]      __var DP_SELECT         = 0x8;
[17:04:38.678]        // -> [DP_SELECT <= 0x00000008]
[17:04:38.678]      __var powered_down      = 0;
[17:04:38.678]        // -> [powered_down <= 0x00000000]
[17:04:38.678]      WriteDP(DP_SELECT, 0x00000000);
[17:04:38.682]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:04:38.682]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:04:38.688]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:04:38.688]        // -> [powered_down <= 0x00000001]
[17:04:38.688]    </block>
[17:04:38.688]    <control if="powered_down" while="" timeout="0" info="">
[17:04:38.688]      // if-block "powered_down"
[17:04:38.688]        // =>  TRUE
[17:04:38.697]      <block atomic="false" info="">
[17:04:38.697]        Message(0, "Debug/System power-up request sent");
[17:04:38.698]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:04:38.717]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:04:38.717]      </block>
[17:04:38.717]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:04:38.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:04:38.736]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:04:38.736]        // while-condition  =>  FALSE
[17:04:38.737]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:04:38.737]      </control>
[17:04:38.737]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:04:38.737]        // if-block "(__protocol & 0xFFFF) == 1"
[17:04:38.737]          // =>  FALSE
[17:04:38.737]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:04:38.737]      </control>
[17:04:38.737]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:04:38.737]        // if-block "(__protocol & 0xFFFF) == 2"
[17:04:38.737]          // =>  TRUE
[17:04:38.737]        <block atomic="false" info="">
[17:04:38.737]          Message(0, "executing SWD power up");
[17:04:38.740]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:04:38.748]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:04:38.748]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:04:38.768]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:04:38.768]        </block>
[17:04:38.768]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:04:38.768]      </control>
[17:04:38.768]      // end if-block "powered_down"
[17:04:38.768]    </control>
[17:04:38.768]    <block atomic="false" info="">
[17:04:38.768]      __var DEBUG_PORT_VAL    = 0;
[17:04:38.768]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:04:38.768]      __var ACCESS_POINT_VAL  = 0;
[17:04:38.768]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:04:38.768]      __ap = 1; 
[17:04:38.768]        // -> [__ap <= 0x00000001]
[17:04:38.768]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:04:38.786]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:04:38.786]      __ap = 4;
[17:04:38.787]        // -> [__ap <= 0x00000004]
[17:04:38.787]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:04:38.808]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:04:38.808]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:04:38.808]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:04:38.808]    </block>
[17:04:38.808]    <block atomic="false" info="">
[17:04:38.808]      __var nReset = 0x80;
[17:04:38.808]        // -> [nReset <= 0x00000080]
[17:04:38.808]      __var canReadPins = 0;
[17:04:38.808]        // -> [canReadPins <= 0x00000000]
[17:04:38.808]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:04:38.838]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:04:38.838]        // -> [canReadPins <= 0x00000001]
[17:04:38.838]    </block>
[17:04:38.838]    <control if="" while="1" timeout="200" info="">
[17:04:38.838]      // while "1"  (timeout="200")
[17:04:38.838]      // while-condition  =>  TRUE
[17:04:38.838]      // while "1"  (timeout="200")
[17:04:38.838]      // while-condition  =>  TRUE
[17:04:38.838]      // while "1"  (timeout="200")
[17:04:38.838]      // while-condition  =>  TRUE
[17:04:38.838]      // while "1"  (timeout="200")
[17:04:38.838]      // while-condition  =>  TRUE
[17:04:38.838]      // while "1"  (timeout="200")
[17:04:38.838]      // while-condition  =>  TRUE
[17:04:38.838]      // while "1"  (timeout="200")
[17:04:38.838]      // while-condition  =>  TRUE
[17:04:38.838]      // while "1"  (timeout="200")
[17:04:38.838]      // while-condition  =>  TRUE
[17:04:38.838]      // while "1"  (timeout="200")
[17:04:38.846]      // while-condition  =>  TRUE
[17:04:38.846]      // while "1"  (timeout="200")
[17:04:38.846]      // while-condition  =>  TRUE
[17:04:38.846]      // while "1"  (timeout="200")
[17:04:38.846]      // while  =>  TIMEOUT
[17:04:38.846]      // end while "1"
[17:04:38.846]    </control>
[17:04:38.846]    <control if="canReadPins" while="" timeout="0" info="">
[17:04:38.846]      // if-block "canReadPins"
[17:04:38.846]        // =>  TRUE
[17:04:38.846]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:04:38.846]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:04:38.870]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:04:38.870]        // while-condition  =>  FALSE
[17:04:38.870]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:04:38.870]      </control>
[17:04:38.871]      // end if-block "canReadPins"
[17:04:38.871]    </control>
[17:04:38.871]    <control if="!canReadPins" while="" timeout="0" info="">
[17:04:38.871]      // if-block "!canReadPins"
[17:04:38.871]        // =>  FALSE
[17:04:38.871]      // skip if-block "!canReadPins"
[17:04:38.871]    </control>
[17:04:38.871]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:04:38.871]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:04:38.871]        // =>  TRUE
[17:04:38.871]      <block atomic="false" info="">
[17:04:38.871]        WriteAP(0x00, 0x190008);
[17:04:38.882]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:04:38.882]        WriteAP(0xF0, 0x01);
[17:04:38.898]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:04:38.898]      </block>
[17:04:38.898]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:04:38.898]    </control>
[17:04:38.898]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:04:38.898]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:04:38.898]        // =>  FALSE
[17:04:38.898]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:04:38.898]    </control>
[17:04:38.898]    <block atomic="false" info="">
[17:04:38.898]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:04:38.927]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:04:38.927]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:04:38.927]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:04:38.928]      __ap = 0; //lets make sure we reset the access point selection
[17:04:38.930]        // -> [__ap <= 0x00000000]
[17:04:38.930]    </block>
[17:04:38.930]  </sequence>
[17:04:38.930]  
[17:04:39.088]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:04:39.088]  
[17:04:39.088]  <debugvars>
[17:04:39.088]    // Pre-defined
[17:04:39.088]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:04:39.088]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:04:39.088]    __dp=0x00000000
[17:04:39.088]    __ap=0x00000000
[17:04:39.088]    __traceout=0x00000000      (Trace Disabled)
[17:04:39.088]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:04:39.088]    __FlashAddr=0x00000000
[17:04:39.088]    __FlashLen=0x00000000
[17:04:39.088]    __FlashArg=0x00000000
[17:04:39.088]    __FlashOp=0x00000000
[17:04:39.088]    __Result=0x00000000
[17:04:39.088]  </debugvars>
[17:04:39.088]  
[17:04:39.088]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:04:39.088]    <block atomic="false" info="">
[17:04:39.088]      __var deviceID = 0;
[17:04:39.088]        // -> [deviceID <= 0x00000000]
[17:04:39.088]      __var version = 0;
[17:04:39.088]        // -> [version <= 0x00000000]
[17:04:39.088]      __var partNum = 0;
[17:04:39.088]        // -> [partNum <= 0x00000000]
[17:04:39.088]      __var manuf = 0;
[17:04:39.088]        // -> [manuf <= 0x00000000]
[17:04:39.088]      __var isMSPM0G1X0X_G3X0X = 0;
[17:04:39.088]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:04:39.088]      __var isProduction = 0;
[17:04:39.088]        // -> [isProduction <= 0x00000000]
[17:04:39.096]      __var continueId = 0;
[17:04:39.096]        // -> [continueId <= 0x00000000]
[17:04:39.096]      deviceID =   Read32(0x41C40004);
[17:04:39.127]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:04:39.127]        // -> [deviceID <= 0x2BB8802F]
[17:04:39.127]      version = deviceID >> 28;
[17:04:39.128]        // -> [version <= 0x00000002]
[17:04:39.128]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:04:39.128]        // -> [partNum <= 0x0000BB88]
[17:04:39.128]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:04:39.128]        // -> [manuf <= 0x00000017]
[17:04:39.128]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:04:39.128]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:04:39.128]      isProduction = (version > 0);
[17:04:39.128]        // -> [isProduction <= 0x00000001]
[17:04:39.128]    </block>
[17:04:39.130]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:04:39.130]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:04:39.130]        // =>  FALSE
[17:04:39.130]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:04:39.130]    </control>
[17:04:39.130]    <control if="continueId == 4" while="" timeout="0" info="">
[17:04:39.130]      // if-block "continueId == 4"
[17:04:39.131]        // =>  FALSE
[17:04:39.131]      // skip if-block "continueId == 4"
[17:04:39.131]    </control>
[17:04:39.131]    <control if="!isProduction" while="" timeout="0" info="">
[17:04:39.131]      // if-block "!isProduction"
[17:04:39.131]        // =>  FALSE
[17:04:39.131]      // skip if-block "!isProduction"
[17:04:39.131]    </control>
[17:04:39.131]  </sequence>
[17:04:39.131]  
[17:07:20.846]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:07:20.846]  
[17:07:20.856]  <debugvars>
[17:07:20.856]    // Pre-defined
[17:07:20.856]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:07:20.856]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:07:20.856]    __dp=0x00000000
[17:07:20.856]    __ap=0x00000000
[17:07:20.856]    __traceout=0x00000000      (Trace Disabled)
[17:07:20.856]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:07:20.856]    __FlashAddr=0x00000000
[17:07:20.856]    __FlashLen=0x00000000
[17:07:20.856]    __FlashArg=0x00000000
[17:07:20.858]    __FlashOp=0x00000000
[17:07:20.858]    __Result=0x00000000
[17:07:20.858]  </debugvars>
[17:07:20.858]  
[17:07:20.858]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:07:20.858]    <block atomic="false" info="">
[17:07:20.858]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:07:20.858]        // -> [isSWJ <= 0x00000001]
[17:07:20.858]      __var hasDormant = __protocol & 0x00020000;
[17:07:20.858]        // -> [hasDormant <= 0x00000000]
[17:07:20.858]      __var protType   = __protocol & 0x0000FFFF;
[17:07:20.858]        // -> [protType <= 0x00000002]
[17:07:20.858]    </block>
[17:07:20.858]    <control if="protType == 1" while="" timeout="0" info="">
[17:07:20.858]      // if-block "protType == 1"
[17:07:20.858]        // =>  FALSE
[17:07:20.858]      // skip if-block "protType == 1"
[17:07:20.858]    </control>
[17:07:20.858]    <control if="protType == 2" while="" timeout="0" info="">
[17:07:20.858]      // if-block "protType == 2"
[17:07:20.858]        // =>  TRUE
[17:07:20.858]      <control if="isSWJ" while="" timeout="0" info="">
[17:07:20.858]        // if-block "isSWJ"
[17:07:20.858]          // =>  TRUE
[17:07:20.858]        <control if="hasDormant" while="" timeout="0" info="">
[17:07:20.858]          // if-block "hasDormant"
[17:07:20.858]            // =>  FALSE
[17:07:20.858]          // skip if-block "hasDormant"
[17:07:20.858]        </control>
[17:07:20.858]        <control if="!hasDormant" while="" timeout="0" info="">
[17:07:20.858]          // if-block "!hasDormant"
[17:07:20.858]            // =>  TRUE
[17:07:20.858]          <block atomic="false" info="">
[17:07:20.858]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:07:20.858]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:07:20.858]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:07:20.858]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:07:20.858]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:07:20.867]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:07:20.867]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:07:20.867]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:07:20.867]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:07:20.867]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:07:20.867]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:07:20.876]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:07:20.876]          </block>
[17:07:20.876]          // end if-block "!hasDormant"
[17:07:20.876]        </control>
[17:07:20.876]        // end if-block "isSWJ"
[17:07:20.876]      </control>
[17:07:20.876]      <control if="!isSWJ" while="" timeout="0" info="">
[17:07:20.876]        // if-block "!isSWJ"
[17:07:20.876]          // =>  FALSE
[17:07:20.876]        // skip if-block "!isSWJ"
[17:07:20.876]      </control>
[17:07:20.876]      <block atomic="false" info="">
[17:07:20.876]        ReadDP(0x0);
[17:07:20.876]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:07:20.876]      </block>
[17:07:20.876]      // end if-block "protType == 2"
[17:07:20.876]    </control>
[17:07:20.876]  </sequence>
[17:07:20.876]  
[17:07:20.876]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:07:20.876]  
[17:07:20.876]  <debugvars>
[17:07:20.876]    // Pre-defined
[17:07:20.876]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:07:20.876]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:07:20.876]    __dp=0x00000000
[17:07:20.876]    __ap=0x00000000
[17:07:20.876]    __traceout=0x00000000      (Trace Disabled)
[17:07:20.876]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:07:20.876]    __FlashAddr=0x00000000
[17:07:20.876]    __FlashLen=0x00000000
[17:07:20.876]    __FlashArg=0x00000000
[17:07:20.876]    __FlashOp=0x00000000
[17:07:20.876]    __Result=0x00000000
[17:07:20.876]  </debugvars>
[17:07:20.876]  
[17:07:20.876]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:07:20.876]    <block atomic="false" info="">
[17:07:20.876]      __var SW_DP_ABORT       = 0x0;
[17:07:20.876]        // -> [SW_DP_ABORT <= 0x00000000]
[17:07:20.876]      __var DP_CTRL_STAT      = 0x4;
[17:07:20.876]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:07:20.876]      __var DP_SELECT         = 0x8;
[17:07:20.876]        // -> [DP_SELECT <= 0x00000008]
[17:07:20.876]      __var powered_down      = 0;
[17:07:20.886]        // -> [powered_down <= 0x00000000]
[17:07:20.886]      WriteDP(DP_SELECT, 0x00000000);
[17:07:20.887]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:07:20.887]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:07:20.887]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:07:20.887]        // -> [powered_down <= 0x00000001]
[17:07:20.887]    </block>
[17:07:20.887]    <control if="powered_down" while="" timeout="0" info="">
[17:07:20.887]      // if-block "powered_down"
[17:07:20.887]        // =>  TRUE
[17:07:20.887]      <block atomic="false" info="">
[17:07:20.887]        Message(0, "Debug/System power-up request sent");
[17:07:20.887]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:07:20.887]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:07:20.887]      </block>
[17:07:20.887]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:07:20.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:07:20.896]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:07:20.896]        // while-condition  =>  FALSE
[17:07:20.896]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:07:20.896]      </control>
[17:07:20.896]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:07:20.896]        // if-block "(__protocol & 0xFFFF) == 1"
[17:07:20.896]          // =>  FALSE
[17:07:20.896]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:07:20.896]      </control>
[17:07:20.896]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:07:20.896]        // if-block "(__protocol & 0xFFFF) == 2"
[17:07:20.896]          // =>  TRUE
[17:07:20.896]        <block atomic="false" info="">
[17:07:20.896]          Message(0, "executing SWD power up");
[17:07:20.896]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:07:20.896]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:07:20.896]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:07:20.896]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:07:20.896]        </block>
[17:07:20.896]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:07:20.896]      </control>
[17:07:20.896]      // end if-block "powered_down"
[17:07:20.896]    </control>
[17:07:20.896]    <block atomic="false" info="">
[17:07:20.896]      __var DEBUG_PORT_VAL    = 0;
[17:07:20.896]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:07:20.905]      __var ACCESS_POINT_VAL  = 0;
[17:07:20.905]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:07:20.905]      __ap = 1; 
[17:07:20.905]        // -> [__ap <= 0x00000001]
[17:07:20.905]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:07:20.908]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:07:20.908]      __ap = 4;
[17:07:20.908]        // -> [__ap <= 0x00000004]
[17:07:20.908]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:07:20.908]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:07:20.908]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:07:20.908]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:07:20.916]    </block>
[17:07:20.916]    <block atomic="false" info="">
[17:07:20.916]      __var nReset = 0x80;
[17:07:20.916]        // -> [nReset <= 0x00000080]
[17:07:20.916]      __var canReadPins = 0;
[17:07:20.916]        // -> [canReadPins <= 0x00000000]
[17:07:20.916]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:07:20.918]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:07:20.918]        // -> [canReadPins <= 0x00000001]
[17:07:20.918]    </block>
[17:07:20.918]    <control if="" while="1" timeout="200" info="">
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.918]      // while-condition  =>  TRUE
[17:07:20.918]      // while "1"  (timeout="200")
[17:07:20.926]      // while-condition  =>  TRUE
[17:07:20.926]      // while "1"  (timeout="200")
[17:07:20.926]      // while  =>  TIMEOUT
[17:07:20.926]      // end while "1"
[17:07:20.926]    </control>
[17:07:20.926]    <control if="canReadPins" while="" timeout="0" info="">
[17:07:20.926]      // if-block "canReadPins"
[17:07:20.926]        // =>  TRUE
[17:07:20.927]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:07:20.927]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:07:20.928]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:07:20.928]        // while-condition  =>  FALSE
[17:07:20.928]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:07:20.928]      </control>
[17:07:20.928]      // end if-block "canReadPins"
[17:07:20.928]    </control>
[17:07:20.928]    <control if="!canReadPins" while="" timeout="0" info="">
[17:07:20.928]      // if-block "!canReadPins"
[17:07:20.928]        // =>  FALSE
[17:07:20.928]      // skip if-block "!canReadPins"
[17:07:20.928]    </control>
[17:07:20.928]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:07:20.928]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:07:20.928]        // =>  TRUE
[17:07:20.928]      <block atomic="false" info="">
[17:07:20.928]        WriteAP(0x00, 0x190008);
[17:07:20.928]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:07:20.928]        WriteAP(0xF0, 0x01);
[17:07:20.941]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:07:20.941]      </block>
[17:07:20.941]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:07:20.941]    </control>
[17:07:20.941]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:07:20.941]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:07:20.941]        // =>  FALSE
[17:07:20.941]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:07:20.941]    </control>
[17:07:20.941]    <block atomic="false" info="">
[17:07:20.941]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:07:20.946]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:07:20.946]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:07:20.946]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:07:20.948]      __ap = 0; //lets make sure we reset the access point selection
[17:07:20.948]        // -> [__ap <= 0x00000000]
[17:07:20.948]    </block>
[17:07:20.948]  </sequence>
[17:07:20.948]  
[17:07:20.974]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:07:20.974]  
[17:07:20.974]  <debugvars>
[17:07:20.974]    // Pre-defined
[17:07:20.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:07:20.974]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:07:20.974]    __dp=0x00000000
[17:07:20.974]    __ap=0x00000000
[17:07:20.974]    __traceout=0x00000000      (Trace Disabled)
[17:07:20.974]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:07:20.974]    __FlashAddr=0x00000000
[17:07:20.976]    __FlashLen=0x00000000
[17:07:20.976]    __FlashArg=0x00000000
[17:07:20.976]    __FlashOp=0x00000000
[17:07:20.976]    __Result=0x00000000
[17:07:20.976]  </debugvars>
[17:07:20.976]  
[17:07:20.976]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:07:20.976]    <block atomic="false" info="">
[17:07:20.976]      __var deviceID = 0;
[17:07:20.976]        // -> [deviceID <= 0x00000000]
[17:07:20.976]      __var version = 0;
[17:07:20.976]        // -> [version <= 0x00000000]
[17:07:20.976]      __var partNum = 0;
[17:07:20.976]        // -> [partNum <= 0x00000000]
[17:07:20.976]      __var manuf = 0;
[17:07:20.976]        // -> [manuf <= 0x00000000]
[17:07:20.976]      __var isMSPM0G1X0X_G3X0X = 0;
[17:07:20.978]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:07:20.978]      __var isProduction = 0;
[17:07:20.978]        // -> [isProduction <= 0x00000000]
[17:07:20.978]      __var continueId = 0;
[17:07:20.978]        // -> [continueId <= 0x00000000]
[17:07:20.978]      deviceID =   Read32(0x41C40004);
[17:07:20.983]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:07:20.983]        // -> [deviceID <= 0x2BB8802F]
[17:07:20.983]      version = deviceID >> 28;
[17:07:20.983]        // -> [version <= 0x00000002]
[17:07:20.983]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:07:20.983]        // -> [partNum <= 0x0000BB88]
[17:07:20.984]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:07:20.984]        // -> [manuf <= 0x00000017]
[17:07:20.984]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:07:20.984]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:07:20.984]      isProduction = (version > 0);
[17:07:20.984]        // -> [isProduction <= 0x00000001]
[17:07:20.985]    </block>
[17:07:20.985]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:07:20.985]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:07:20.985]        // =>  FALSE
[17:07:20.985]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:07:20.985]    </control>
[17:07:20.985]    <control if="continueId == 4" while="" timeout="0" info="">
[17:07:20.985]      // if-block "continueId == 4"
[17:07:20.985]        // =>  FALSE
[17:07:20.985]      // skip if-block "continueId == 4"
[17:07:20.986]    </control>
[17:07:20.986]    <control if="!isProduction" while="" timeout="0" info="">
[17:07:20.986]      // if-block "!isProduction"
[17:07:20.986]        // =>  FALSE
[17:07:20.986]      // skip if-block "!isProduction"
[17:07:20.986]    </control>
[17:07:20.986]  </sequence>
[17:07:20.986]  
[17:08:05.346]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:08:05.346]  
[17:08:05.354]  <debugvars>
[17:08:05.354]    // Pre-defined
[17:08:05.354]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:08:05.355]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:08:05.355]    __dp=0x00000000
[17:08:05.355]    __ap=0x00000000
[17:08:05.355]    __traceout=0x00000000      (Trace Disabled)
[17:08:05.355]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:08:05.355]    __FlashAddr=0x00000000
[17:08:05.355]    __FlashLen=0x00000000
[17:08:05.356]    __FlashArg=0x00000000
[17:08:05.356]    __FlashOp=0x00000000
[17:08:05.356]    __Result=0x00000000
[17:08:05.356]  </debugvars>
[17:08:05.356]  
[17:08:05.356]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:08:05.357]    <block atomic="false" info="">
[17:08:05.357]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:08:05.357]        // -> [isSWJ <= 0x00000001]
[17:08:05.357]      __var hasDormant = __protocol & 0x00020000;
[17:08:05.357]        // -> [hasDormant <= 0x00000000]
[17:08:05.357]      __var protType   = __protocol & 0x0000FFFF;
[17:08:05.357]        // -> [protType <= 0x00000002]
[17:08:05.357]    </block>
[17:08:05.357]    <control if="protType == 1" while="" timeout="0" info="">
[17:08:05.357]      // if-block "protType == 1"
[17:08:05.358]        // =>  FALSE
[17:08:05.358]      // skip if-block "protType == 1"
[17:08:05.358]    </control>
[17:08:05.358]    <control if="protType == 2" while="" timeout="0" info="">
[17:08:05.358]      // if-block "protType == 2"
[17:08:05.358]        // =>  TRUE
[17:08:05.358]      <control if="isSWJ" while="" timeout="0" info="">
[17:08:05.358]        // if-block "isSWJ"
[17:08:05.359]          // =>  TRUE
[17:08:05.359]        <control if="hasDormant" while="" timeout="0" info="">
[17:08:05.359]          // if-block "hasDormant"
[17:08:05.359]            // =>  FALSE
[17:08:05.359]          // skip if-block "hasDormant"
[17:08:05.359]        </control>
[17:08:05.359]        <control if="!hasDormant" while="" timeout="0" info="">
[17:08:05.359]          // if-block "!hasDormant"
[17:08:05.359]            // =>  TRUE
[17:08:05.360]          <block atomic="false" info="">
[17:08:05.360]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:08:05.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:08:05.365]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:08:05.368]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:08:05.368]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:08:05.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:08:05.372]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:08:05.376]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:08:05.376]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:08:05.397]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:08:05.398]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:08:05.407]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:08:05.407]          </block>
[17:08:05.407]          // end if-block "!hasDormant"
[17:08:05.407]        </control>
[17:08:05.407]        // end if-block "isSWJ"
[17:08:05.407]      </control>
[17:08:05.407]      <control if="!isSWJ" while="" timeout="0" info="">
[17:08:05.407]        // if-block "!isSWJ"
[17:08:05.407]          // =>  FALSE
[17:08:05.407]        // skip if-block "!isSWJ"
[17:08:05.407]      </control>
[17:08:05.407]      <block atomic="false" info="">
[17:08:05.407]        ReadDP(0x0);
[17:08:05.416]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:08:05.416]      </block>
[17:08:05.416]      // end if-block "protType == 2"
[17:08:05.416]    </control>
[17:08:05.416]  </sequence>
[17:08:05.416]  
[17:08:05.416]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:08:05.416]  
[17:08:05.416]  <debugvars>
[17:08:05.416]    // Pre-defined
[17:08:05.416]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:08:05.416]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:08:05.416]    __dp=0x00000000
[17:08:05.416]    __ap=0x00000000
[17:08:05.416]    __traceout=0x00000000      (Trace Disabled)
[17:08:05.416]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:08:05.416]    __FlashAddr=0x00000000
[17:08:05.416]    __FlashLen=0x00000000
[17:08:05.416]    __FlashArg=0x00000000
[17:08:05.416]    __FlashOp=0x00000000
[17:08:05.416]    __Result=0x00000000
[17:08:05.416]  </debugvars>
[17:08:05.416]  
[17:08:05.416]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:08:05.416]    <block atomic="false" info="">
[17:08:05.416]      __var SW_DP_ABORT       = 0x0;
[17:08:05.416]        // -> [SW_DP_ABORT <= 0x00000000]
[17:08:05.416]      __var DP_CTRL_STAT      = 0x4;
[17:08:05.416]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:08:05.416]      __var DP_SELECT         = 0x8;
[17:08:05.416]        // -> [DP_SELECT <= 0x00000008]
[17:08:05.426]      __var powered_down      = 0;
[17:08:05.426]        // -> [powered_down <= 0x00000000]
[17:08:05.426]      WriteDP(DP_SELECT, 0x00000000);
[17:08:05.453]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:08:05.453]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:08:05.463]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:08:05.463]        // -> [powered_down <= 0x00000001]
[17:08:05.463]    </block>
[17:08:05.463]    <control if="powered_down" while="" timeout="0" info="">
[17:08:05.463]      // if-block "powered_down"
[17:08:05.463]        // =>  TRUE
[17:08:05.463]      <block atomic="false" info="">
[17:08:05.463]        Message(0, "Debug/System power-up request sent");
[17:08:05.465]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:08:05.487]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:08:05.487]      </block>
[17:08:05.487]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:08:05.487]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:08:05.506]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:08:05.506]        // while-condition  =>  FALSE
[17:08:05.508]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:08:05.508]      </control>
[17:08:05.508]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:08:05.508]        // if-block "(__protocol & 0xFFFF) == 1"
[17:08:05.508]          // =>  FALSE
[17:08:05.508]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:08:05.508]      </control>
[17:08:05.508]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:08:05.508]        // if-block "(__protocol & 0xFFFF) == 2"
[17:08:05.508]          // =>  TRUE
[17:08:05.508]        <block atomic="false" info="">
[17:08:05.508]          Message(0, "executing SWD power up");
[17:08:05.511]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:08:05.517]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:08:05.517]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:08:05.525]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:08:05.525]        </block>
[17:08:05.525]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:08:05.526]      </control>
[17:08:05.526]      // end if-block "powered_down"
[17:08:05.526]    </control>
[17:08:05.527]    <block atomic="false" info="">
[17:08:05.527]      __var DEBUG_PORT_VAL    = 0;
[17:08:05.527]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:08:05.527]      __var ACCESS_POINT_VAL  = 0;
[17:08:05.527]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:08:05.527]      __ap = 1; 
[17:08:05.527]        // -> [__ap <= 0x00000001]
[17:08:05.527]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:08:05.536]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:08:05.536]      __ap = 4;
[17:08:05.536]        // -> [__ap <= 0x00000004]
[17:08:05.536]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:08:05.558]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:08:05.558]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:08:05.558]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:08:05.563]    </block>
[17:08:05.563]    <block atomic="false" info="">
[17:08:05.563]      __var nReset = 0x80;
[17:08:05.563]        // -> [nReset <= 0x00000080]
[17:08:05.563]      __var canReadPins = 0;
[17:08:05.563]        // -> [canReadPins <= 0x00000000]
[17:08:05.563]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:08:05.577]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:08:05.577]        // -> [canReadPins <= 0x00000001]
[17:08:05.577]    </block>
[17:08:05.577]    <control if="" while="1" timeout="200" info="">
[17:08:05.577]      // while "1"  (timeout="200")
[17:08:05.577]      // while-condition  =>  TRUE
[17:08:05.577]      // while "1"  (timeout="200")
[17:08:05.577]      // while-condition  =>  TRUE
[17:08:05.577]      // while "1"  (timeout="200")
[17:08:05.577]      // while-condition  =>  TRUE
[17:08:05.577]      // while "1"  (timeout="200")
[17:08:05.581]      // while-condition  =>  TRUE
[17:08:05.581]      // while "1"  (timeout="200")
[17:08:05.581]      // while  =>  TIMEOUT
[17:08:05.581]      // end while "1"
[17:08:05.581]    </control>
[17:08:05.581]    <control if="canReadPins" while="" timeout="0" info="">
[17:08:05.581]      // if-block "canReadPins"
[17:08:05.581]        // =>  TRUE
[17:08:05.581]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:08:05.581]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:08:05.583]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:08:05.583]        // while-condition  =>  FALSE
[17:08:05.583]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:08:05.583]      </control>
[17:08:05.583]      // end if-block "canReadPins"
[17:08:05.583]    </control>
[17:08:05.583]    <control if="!canReadPins" while="" timeout="0" info="">
[17:08:05.585]      // if-block "!canReadPins"
[17:08:05.585]        // =>  FALSE
[17:08:05.585]      // skip if-block "!canReadPins"
[17:08:05.585]    </control>
[17:08:05.585]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:08:05.585]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:08:05.585]        // =>  TRUE
[17:08:05.586]      <block atomic="false" info="">
[17:08:05.586]        WriteAP(0x00, 0x190008);
[17:08:05.593]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:08:05.593]        WriteAP(0xF0, 0x01);
[17:08:05.606]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:08:05.606]      </block>
[17:08:05.606]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:08:05.606]    </control>
[17:08:05.606]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:08:05.606]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:08:05.606]        // =>  FALSE
[17:08:05.606]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:08:05.606]    </control>
[17:08:05.606]    <block atomic="false" info="">
[17:08:05.606]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:08:05.627]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:08:05.627]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:08:05.627]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:08:05.629]      __ap = 0; //lets make sure we reset the access point selection
[17:08:05.629]        // -> [__ap <= 0x00000000]
[17:08:05.629]    </block>
[17:08:05.629]  </sequence>
[17:08:05.629]  
[17:08:05.655]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:08:05.655]  
[17:08:05.655]  <debugvars>
[17:08:05.655]    // Pre-defined
[17:08:05.655]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:08:05.655]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:08:05.656]    __dp=0x00000000
[17:08:05.656]    __ap=0x00000000
[17:08:05.656]    __traceout=0x00000000      (Trace Disabled)
[17:08:05.656]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:08:05.656]    __FlashAddr=0x00000000
[17:08:05.656]    __FlashLen=0x00000000
[17:08:05.656]    __FlashArg=0x00000000
[17:08:05.656]    __FlashOp=0x00000000
[17:08:05.656]    __Result=0x00000000
[17:08:05.656]  </debugvars>
[17:08:05.656]  
[17:08:05.656]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:08:05.658]    <block atomic="false" info="">
[17:08:05.658]      __var deviceID = 0;
[17:08:05.658]        // -> [deviceID <= 0x00000000]
[17:08:05.658]      __var version = 0;
[17:08:05.658]        // -> [version <= 0x00000000]
[17:08:05.658]      __var partNum = 0;
[17:08:05.658]        // -> [partNum <= 0x00000000]
[17:08:05.658]      __var manuf = 0;
[17:08:05.658]        // -> [manuf <= 0x00000000]
[17:08:05.658]      __var isMSPM0G1X0X_G3X0X = 0;
[17:08:05.658]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:08:05.658]      __var isProduction = 0;
[17:08:05.659]        // -> [isProduction <= 0x00000000]
[17:08:05.659]      __var continueId = 0;
[17:08:05.659]        // -> [continueId <= 0x00000000]
[17:08:05.659]      deviceID =   Read32(0x41C40004);
[17:08:05.664]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:08:05.664]        // -> [deviceID <= 0x2BB8802F]
[17:08:05.664]      version = deviceID >> 28;
[17:08:05.664]        // -> [version <= 0x00000002]
[17:08:05.664]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:08:05.664]        // -> [partNum <= 0x0000BB88]
[17:08:05.664]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:08:05.665]        // -> [manuf <= 0x00000017]
[17:08:05.665]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:08:05.665]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:08:05.665]      isProduction = (version > 0);
[17:08:05.665]        // -> [isProduction <= 0x00000001]
[17:08:05.665]    </block>
[17:08:05.665]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:08:05.665]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:08:05.665]        // =>  FALSE
[17:08:05.665]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:08:05.665]    </control>
[17:08:05.666]    <control if="continueId == 4" while="" timeout="0" info="">
[17:08:05.666]      // if-block "continueId == 4"
[17:08:05.666]        // =>  FALSE
[17:08:05.666]      // skip if-block "continueId == 4"
[17:08:05.666]    </control>
[17:08:05.666]    <control if="!isProduction" while="" timeout="0" info="">
[17:08:05.666]      // if-block "!isProduction"
[17:08:05.667]        // =>  FALSE
[17:08:05.667]      // skip if-block "!isProduction"
[17:08:05.667]    </control>
[17:08:05.667]  </sequence>
[17:08:05.667]  
[17:12:43.931]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:12:43.932]  
[17:12:43.940]  <debugvars>
[17:12:43.940]    // Pre-defined
[17:12:43.940]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:12:43.940]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:12:43.940]    __dp=0x00000000
[17:12:43.940]    __ap=0x00000000
[17:12:43.940]    __traceout=0x00000000      (Trace Disabled)
[17:12:43.940]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:12:43.940]    __FlashAddr=0x00000000
[17:12:43.940]    __FlashLen=0x00000000
[17:12:43.940]    __FlashArg=0x00000000
[17:12:43.940]    __FlashOp=0x00000000
[17:12:43.940]    __Result=0x00000000
[17:12:43.940]  </debugvars>
[17:12:43.940]  
[17:12:43.940]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:12:43.941]    <block atomic="false" info="">
[17:12:43.941]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:12:43.941]        // -> [isSWJ <= 0x00000001]
[17:12:43.941]      __var hasDormant = __protocol & 0x00020000;
[17:12:43.942]        // -> [hasDormant <= 0x00000000]
[17:12:43.942]      __var protType   = __protocol & 0x0000FFFF;
[17:12:43.942]        // -> [protType <= 0x00000002]
[17:12:43.942]    </block>
[17:12:43.942]    <control if="protType == 1" while="" timeout="0" info="">
[17:12:43.942]      // if-block "protType == 1"
[17:12:43.942]        // =>  FALSE
[17:12:43.942]      // skip if-block "protType == 1"
[17:12:43.942]    </control>
[17:12:43.942]    <control if="protType == 2" while="" timeout="0" info="">
[17:12:43.943]      // if-block "protType == 2"
[17:12:43.943]        // =>  TRUE
[17:12:43.943]      <control if="isSWJ" while="" timeout="0" info="">
[17:12:43.943]        // if-block "isSWJ"
[17:12:43.943]          // =>  TRUE
[17:12:43.943]        <control if="hasDormant" while="" timeout="0" info="">
[17:12:43.943]          // if-block "hasDormant"
[17:12:43.943]            // =>  FALSE
[17:12:43.943]          // skip if-block "hasDormant"
[17:12:43.943]        </control>
[17:12:43.943]        <control if="!hasDormant" while="" timeout="0" info="">
[17:12:43.943]          // if-block "!hasDormant"
[17:12:43.943]            // =>  TRUE
[17:12:43.943]          <block atomic="false" info="">
[17:12:43.943]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:12:43.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:12:43.944]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:12:43.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:12:43.947]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:12:43.949]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:12:43.949]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:12:43.955]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:12:43.955]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:12:43.958]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:12:43.958]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:12:43.960]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:12:43.960]          </block>
[17:12:43.960]          // end if-block "!hasDormant"
[17:12:43.960]        </control>
[17:12:43.960]        // end if-block "isSWJ"
[17:12:43.960]      </control>
[17:12:43.960]      <control if="!isSWJ" while="" timeout="0" info="">
[17:12:43.960]        // if-block "!isSWJ"
[17:12:43.960]          // =>  FALSE
[17:12:43.960]        // skip if-block "!isSWJ"
[17:12:43.960]      </control>
[17:12:43.961]      <block atomic="false" info="">
[17:12:43.961]        ReadDP(0x0);
[17:12:43.963]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:12:43.963]      </block>
[17:12:43.963]      // end if-block "protType == 2"
[17:12:43.963]    </control>
[17:12:43.963]  </sequence>
[17:12:43.963]  
[17:12:43.963]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:12:43.963]  
[17:12:43.963]  <debugvars>
[17:12:43.963]    // Pre-defined
[17:12:43.963]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:12:43.971]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:12:43.971]    __dp=0x00000000
[17:12:43.972]    __ap=0x00000000
[17:12:43.972]    __traceout=0x00000000      (Trace Disabled)
[17:12:43.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:12:43.972]    __FlashAddr=0x00000000
[17:12:43.972]    __FlashLen=0x00000000
[17:12:43.972]    __FlashArg=0x00000000
[17:12:43.972]    __FlashOp=0x00000000
[17:12:43.972]    __Result=0x00000000
[17:12:43.972]  </debugvars>
[17:12:43.972]  
[17:12:43.973]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:12:43.973]    <block atomic="false" info="">
[17:12:43.973]      __var SW_DP_ABORT       = 0x0;
[17:12:43.973]        // -> [SW_DP_ABORT <= 0x00000000]
[17:12:43.973]      __var DP_CTRL_STAT      = 0x4;
[17:12:43.973]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:12:43.973]      __var DP_SELECT         = 0x8;
[17:12:43.973]        // -> [DP_SELECT <= 0x00000008]
[17:12:43.973]      __var powered_down      = 0;
[17:12:43.973]        // -> [powered_down <= 0x00000000]
[17:12:43.973]      WriteDP(DP_SELECT, 0x00000000);
[17:12:43.974]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:12:43.974]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:12:43.974]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:12:43.974]        // -> [powered_down <= 0x00000001]
[17:12:43.974]    </block>
[17:12:43.974]    <control if="powered_down" while="" timeout="0" info="">
[17:12:43.974]      // if-block "powered_down"
[17:12:43.974]        // =>  TRUE
[17:12:43.974]      <block atomic="false" info="">
[17:12:43.974]        Message(0, "Debug/System power-up request sent");
[17:12:43.979]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:12:43.981]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:12:43.981]      </block>
[17:12:43.981]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:12:43.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:12:43.982]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:12:43.982]        // while-condition  =>  FALSE
[17:12:43.982]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:12:43.982]      </control>
[17:12:43.982]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:12:43.982]        // if-block "(__protocol & 0xFFFF) == 1"
[17:12:43.982]          // =>  FALSE
[17:12:43.982]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:12:43.982]      </control>
[17:12:43.982]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:12:43.982]        // if-block "(__protocol & 0xFFFF) == 2"
[17:12:43.982]          // =>  TRUE
[17:12:43.982]        <block atomic="false" info="">
[17:12:43.982]          Message(0, "executing SWD power up");
[17:12:43.985]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:12:43.987]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:12:43.987]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:12:43.987]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:12:43.989]        </block>
[17:12:43.989]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:12:43.989]      </control>
[17:12:43.989]      // end if-block "powered_down"
[17:12:43.989]    </control>
[17:12:43.989]    <block atomic="false" info="">
[17:12:43.989]      __var DEBUG_PORT_VAL    = 0;
[17:12:43.989]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:12:43.989]      __var ACCESS_POINT_VAL  = 0;
[17:12:43.989]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:12:43.989]      __ap = 1; 
[17:12:43.989]        // -> [__ap <= 0x00000001]
[17:12:43.989]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:12:43.993]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:12:43.993]      __ap = 4;
[17:12:43.993]        // -> [__ap <= 0x00000004]
[17:12:43.993]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:12:43.993]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:12:43.993]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:12:43.993]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:12:43.999]    </block>
[17:12:43.999]    <block atomic="false" info="">
[17:12:43.999]      __var nReset = 0x80;
[17:12:43.999]        // -> [nReset <= 0x00000080]
[17:12:43.999]      __var canReadPins = 0;
[17:12:43.999]        // -> [canReadPins <= 0x00000000]
[17:12:43.999]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:12:43.999]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:12:44.001]        // -> [canReadPins <= 0x00000001]
[17:12:44.001]    </block>
[17:12:44.002]    <control if="" while="1" timeout="200" info="">
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.002]      // while-condition  =>  TRUE
[17:12:44.002]      // while "1"  (timeout="200")
[17:12:44.006]      // while-condition  =>  TRUE
[17:12:44.006]      // while "1"  (timeout="200")
[17:12:44.006]      // while  =>  TIMEOUT
[17:12:44.006]      // end while "1"
[17:12:44.006]    </control>
[17:12:44.006]    <control if="canReadPins" while="" timeout="0" info="">
[17:12:44.006]      // if-block "canReadPins"
[17:12:44.006]        // =>  TRUE
[17:12:44.006]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:12:44.006]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:12:44.013]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:12:44.013]        // while-condition  =>  FALSE
[17:12:44.013]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:12:44.013]      </control>
[17:12:44.013]      // end if-block "canReadPins"
[17:12:44.013]    </control>
[17:12:44.013]    <control if="!canReadPins" while="" timeout="0" info="">
[17:12:44.013]      // if-block "!canReadPins"
[17:12:44.013]        // =>  FALSE
[17:12:44.013]      // skip if-block "!canReadPins"
[17:12:44.013]    </control>
[17:12:44.013]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:12:44.013]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:12:44.013]        // =>  TRUE
[17:12:44.013]      <block atomic="false" info="">
[17:12:44.013]        WriteAP(0x00, 0x190008);
[17:12:44.013]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:12:44.013]        WriteAP(0xF0, 0x01);
[17:12:44.021]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:12:44.021]      </block>
[17:12:44.021]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:12:44.021]    </control>
[17:12:44.022]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:12:44.022]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:12:44.022]        // =>  FALSE
[17:12:44.022]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:12:44.022]    </control>
[17:12:44.022]    <block atomic="false" info="">
[17:12:44.022]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:12:44.023]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:12:44.023]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:12:44.023]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:12:44.023]      __ap = 0; //lets make sure we reset the access point selection
[17:12:44.023]        // -> [__ap <= 0x00000000]
[17:12:44.023]    </block>
[17:12:44.023]  </sequence>
[17:12:44.023]  
[17:12:44.053]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:12:44.053]  
[17:12:44.053]  <debugvars>
[17:12:44.053]    // Pre-defined
[17:12:44.053]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:12:44.053]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:12:44.053]    __dp=0x00000000
[17:12:44.053]    __ap=0x00000000
[17:12:44.053]    __traceout=0x00000000      (Trace Disabled)
[17:12:44.053]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:12:44.053]    __FlashAddr=0x00000000
[17:12:44.053]    __FlashLen=0x00000000
[17:12:44.053]    __FlashArg=0x00000000
[17:12:44.053]    __FlashOp=0x00000000
[17:12:44.053]    __Result=0x00000000
[17:12:44.053]  </debugvars>
[17:12:44.053]  
[17:12:44.053]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:12:44.053]    <block atomic="false" info="">
[17:12:44.053]      __var deviceID = 0;
[17:12:44.053]        // -> [deviceID <= 0x00000000]
[17:12:44.053]      __var version = 0;
[17:12:44.053]        // -> [version <= 0x00000000]
[17:12:44.053]      __var partNum = 0;
[17:12:44.053]        // -> [partNum <= 0x00000000]
[17:12:44.053]      __var manuf = 0;
[17:12:44.053]        // -> [manuf <= 0x00000000]
[17:12:44.053]      __var isMSPM0G1X0X_G3X0X = 0;
[17:12:44.053]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:12:44.053]      __var isProduction = 0;
[17:12:44.053]        // -> [isProduction <= 0x00000000]
[17:12:44.053]      __var continueId = 0;
[17:12:44.053]        // -> [continueId <= 0x00000000]
[17:12:44.053]      deviceID =   Read32(0x41C40004);
[17:12:44.062]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:12:44.063]        // -> [deviceID <= 0x2BB8802F]
[17:12:44.063]      version = deviceID >> 28;
[17:12:44.063]        // -> [version <= 0x00000002]
[17:12:44.063]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:12:44.063]        // -> [partNum <= 0x0000BB88]
[17:12:44.063]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:12:44.063]        // -> [manuf <= 0x00000017]
[17:12:44.063]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:12:44.063]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:12:44.063]      isProduction = (version > 0);
[17:12:44.063]        // -> [isProduction <= 0x00000001]
[17:12:44.063]    </block>
[17:12:44.063]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:12:44.063]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:12:44.063]        // =>  FALSE
[17:12:44.063]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:12:44.063]    </control>
[17:12:44.063]    <control if="continueId == 4" while="" timeout="0" info="">
[17:12:44.063]      // if-block "continueId == 4"
[17:12:44.063]        // =>  FALSE
[17:12:44.063]      // skip if-block "continueId == 4"
[17:12:44.063]    </control>
[17:12:44.063]    <control if="!isProduction" while="" timeout="0" info="">
[17:12:44.063]      // if-block "!isProduction"
[17:12:44.063]        // =>  FALSE
[17:12:44.063]      // skip if-block "!isProduction"
[17:12:44.063]    </control>
[17:12:44.063]  </sequence>
[17:12:44.063]  
[17:16:55.573]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:16:55.573]  
[17:16:55.582]  <debugvars>
[17:16:55.582]    // Pre-defined
[17:16:55.582]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:16:55.582]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:16:55.582]    __dp=0x00000000
[17:16:55.582]    __ap=0x00000000
[17:16:55.582]    __traceout=0x00000000      (Trace Disabled)
[17:16:55.582]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:55.583]    __FlashAddr=0x00000000
[17:16:55.583]    __FlashLen=0x00000000
[17:16:55.583]    __FlashArg=0x00000000
[17:16:55.584]    __FlashOp=0x00000000
[17:16:55.584]    __Result=0x00000000
[17:16:55.584]  </debugvars>
[17:16:55.584]  
[17:16:55.584]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:16:55.584]    <block atomic="false" info="">
[17:16:55.584]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:16:55.584]        // -> [isSWJ <= 0x00000001]
[17:16:55.584]      __var hasDormant = __protocol & 0x00020000;
[17:16:55.584]        // -> [hasDormant <= 0x00000000]
[17:16:55.584]      __var protType   = __protocol & 0x0000FFFF;
[17:16:55.584]        // -> [protType <= 0x00000002]
[17:16:55.584]    </block>
[17:16:55.584]    <control if="protType == 1" while="" timeout="0" info="">
[17:16:55.584]      // if-block "protType == 1"
[17:16:55.584]        // =>  FALSE
[17:16:55.584]      // skip if-block "protType == 1"
[17:16:55.584]    </control>
[17:16:55.584]    <control if="protType == 2" while="" timeout="0" info="">
[17:16:55.586]      // if-block "protType == 2"
[17:16:55.586]        // =>  TRUE
[17:16:55.586]      <control if="isSWJ" while="" timeout="0" info="">
[17:16:55.586]        // if-block "isSWJ"
[17:16:55.586]          // =>  TRUE
[17:16:55.586]        <control if="hasDormant" while="" timeout="0" info="">
[17:16:55.586]          // if-block "hasDormant"
[17:16:55.586]            // =>  FALSE
[17:16:55.586]          // skip if-block "hasDormant"
[17:16:55.586]        </control>
[17:16:55.586]        <control if="!hasDormant" while="" timeout="0" info="">
[17:16:55.586]          // if-block "!hasDormant"
[17:16:55.586]            // =>  TRUE
[17:16:55.587]          <block atomic="false" info="">
[17:16:55.587]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:16:55.592]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:16:55.592]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:16:55.593]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:16:55.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:16:55.595]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:16:55.595]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:16:55.595]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:16:55.595]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:16:55.595]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:16:55.595]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:16:55.595]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:16:55.595]          </block>
[17:16:55.595]          // end if-block "!hasDormant"
[17:16:55.595]        </control>
[17:16:55.595]        // end if-block "isSWJ"
[17:16:55.595]      </control>
[17:16:55.595]      <control if="!isSWJ" while="" timeout="0" info="">
[17:16:55.595]        // if-block "!isSWJ"
[17:16:55.595]          // =>  FALSE
[17:16:55.595]        // skip if-block "!isSWJ"
[17:16:55.595]      </control>
[17:16:55.595]      <block atomic="false" info="">
[17:16:55.600]        ReadDP(0x0);
[17:16:55.600]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:16:55.600]      </block>
[17:16:55.600]      // end if-block "protType == 2"
[17:16:55.600]    </control>
[17:16:55.600]  </sequence>
[17:16:55.600]  
[17:16:55.604]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:16:55.604]  
[17:16:55.604]  <debugvars>
[17:16:55.604]    // Pre-defined
[17:16:55.604]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:16:55.604]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:16:55.604]    __dp=0x00000000
[17:16:55.604]    __ap=0x00000000
[17:16:55.604]    __traceout=0x00000000      (Trace Disabled)
[17:16:55.604]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:55.604]    __FlashAddr=0x00000000
[17:16:55.604]    __FlashLen=0x00000000
[17:16:55.604]    __FlashArg=0x00000000
[17:16:55.604]    __FlashOp=0x00000000
[17:16:55.604]    __Result=0x00000000
[17:16:55.604]  </debugvars>
[17:16:55.604]  
[17:16:55.604]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:16:55.604]    <block atomic="false" info="">
[17:16:55.604]      __var SW_DP_ABORT       = 0x0;
[17:16:55.604]        // -> [SW_DP_ABORT <= 0x00000000]
[17:16:55.604]      __var DP_CTRL_STAT      = 0x4;
[17:16:55.604]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:16:55.604]      __var DP_SELECT         = 0x8;
[17:16:55.604]        // -> [DP_SELECT <= 0x00000008]
[17:16:55.604]      __var powered_down      = 0;
[17:16:55.604]        // -> [powered_down <= 0x00000000]
[17:16:55.604]      WriteDP(DP_SELECT, 0x00000000);
[17:16:55.604]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:16:55.604]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:16:55.611]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:16:55.611]        // -> [powered_down <= 0x00000001]
[17:16:55.611]    </block>
[17:16:55.611]    <control if="powered_down" while="" timeout="0" info="">
[17:16:55.611]      // if-block "powered_down"
[17:16:55.611]        // =>  TRUE
[17:16:55.611]      <block atomic="false" info="">
[17:16:55.611]        Message(0, "Debug/System power-up request sent");
[17:16:55.614]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:16:55.615]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:16:55.615]      </block>
[17:16:55.615]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:16:55.615]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:16:55.618]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:16:55.618]        // while-condition  =>  FALSE
[17:16:55.618]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:16:55.618]      </control>
[17:16:55.618]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:16:55.618]        // if-block "(__protocol & 0xFFFF) == 1"
[17:16:55.618]          // =>  FALSE
[17:16:55.618]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:16:55.618]      </control>
[17:16:55.618]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:16:55.618]        // if-block "(__protocol & 0xFFFF) == 2"
[17:16:55.618]          // =>  TRUE
[17:16:55.618]        <block atomic="false" info="">
[17:16:55.618]          Message(0, "executing SWD power up");
[17:16:55.621]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:16:55.624]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:16:55.624]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:16:55.625]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:16:55.625]        </block>
[17:16:55.625]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:16:55.625]      </control>
[17:16:55.625]      // end if-block "powered_down"
[17:16:55.625]    </control>
[17:16:55.625]    <block atomic="false" info="">
[17:16:55.625]      __var DEBUG_PORT_VAL    = 0;
[17:16:55.625]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:16:55.625]      __var ACCESS_POINT_VAL  = 0;
[17:16:55.625]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:16:55.625]      __ap = 1; 
[17:16:55.625]        // -> [__ap <= 0x00000001]
[17:16:55.625]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:16:55.631]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:16:55.631]      __ap = 4;
[17:16:55.631]        // -> [__ap <= 0x00000004]
[17:16:55.631]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:16:55.635]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:16:55.635]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:16:55.635]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:16:55.635]    </block>
[17:16:55.635]    <block atomic="false" info="">
[17:16:55.635]      __var nReset = 0x80;
[17:16:55.635]        // -> [nReset <= 0x00000080]
[17:16:55.635]      __var canReadPins = 0;
[17:16:55.635]        // -> [canReadPins <= 0x00000000]
[17:16:55.635]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:16:55.635]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:16:55.641]        // -> [canReadPins <= 0x00000001]
[17:16:55.641]    </block>
[17:16:55.641]    <control if="" while="1" timeout="200" info="">
[17:16:55.641]      // while "1"  (timeout="200")
[17:16:55.641]      // while-condition  =>  TRUE
[17:16:55.641]      // while "1"  (timeout="200")
[17:16:55.641]      // while-condition  =>  TRUE
[17:16:55.641]      // while "1"  (timeout="200")
[17:16:55.641]      // while-condition  =>  TRUE
[17:16:55.641]      // while "1"  (timeout="200")
[17:16:55.641]      // while-condition  =>  TRUE
[17:16:55.641]      // while "1"  (timeout="200")
[17:16:55.641]      // while-condition  =>  TRUE
[17:16:55.641]      // while "1"  (timeout="200")
[17:16:55.641]      // while-condition  =>  TRUE
[17:16:55.641]      // while "1"  (timeout="200")
[17:16:55.643]      // while-condition  =>  TRUE
[17:16:55.643]      // while "1"  (timeout="200")
[17:16:55.643]      // while  =>  TIMEOUT
[17:16:55.643]      // end while "1"
[17:16:55.643]    </control>
[17:16:55.643]    <control if="canReadPins" while="" timeout="0" info="">
[17:16:55.644]      // if-block "canReadPins"
[17:16:55.644]        // =>  TRUE
[17:16:55.644]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:16:55.644]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:16:55.644]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:16:55.644]        // while-condition  =>  FALSE
[17:16:55.644]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:16:55.644]      </control>
[17:16:55.644]      // end if-block "canReadPins"
[17:16:55.644]    </control>
[17:16:55.644]    <control if="!canReadPins" while="" timeout="0" info="">
[17:16:55.644]      // if-block "!canReadPins"
[17:16:55.644]        // =>  FALSE
[17:16:55.644]      // skip if-block "!canReadPins"
[17:16:55.644]    </control>
[17:16:55.644]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:16:55.644]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:16:55.644]        // =>  TRUE
[17:16:55.644]      <block atomic="false" info="">
[17:16:55.644]        WriteAP(0x00, 0x190008);
[17:16:55.644]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:16:55.644]        WriteAP(0xF0, 0x01);
[17:16:55.653]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:16:55.653]      </block>
[17:16:55.653]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:16:55.653]    </control>
[17:16:55.653]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:16:55.654]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:16:55.654]        // =>  FALSE
[17:16:55.654]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:16:55.654]    </control>
[17:16:55.654]    <block atomic="false" info="">
[17:16:55.654]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:16:55.655]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:16:55.655]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:16:55.655]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:16:55.655]      __ap = 0; //lets make sure we reset the access point selection
[17:16:55.655]        // -> [__ap <= 0x00000000]
[17:16:55.655]    </block>
[17:16:55.655]  </sequence>
[17:16:55.655]  
[17:16:55.686]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:16:55.686]  
[17:16:55.686]  <debugvars>
[17:16:55.686]    // Pre-defined
[17:16:55.686]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:16:55.686]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:16:55.686]    __dp=0x00000000
[17:16:55.686]    __ap=0x00000000
[17:16:55.686]    __traceout=0x00000000      (Trace Disabled)
[17:16:55.686]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:16:55.686]    __FlashAddr=0x00000000
[17:16:55.686]    __FlashLen=0x00000000
[17:16:55.686]    __FlashArg=0x00000000
[17:16:55.686]    __FlashOp=0x00000000
[17:16:55.686]    __Result=0x00000000
[17:16:55.686]  </debugvars>
[17:16:55.686]  
[17:16:55.686]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:16:55.686]    <block atomic="false" info="">
[17:16:55.686]      __var deviceID = 0;
[17:16:55.686]        // -> [deviceID <= 0x00000000]
[17:16:55.686]      __var version = 0;
[17:16:55.686]        // -> [version <= 0x00000000]
[17:16:55.686]      __var partNum = 0;
[17:16:55.686]        // -> [partNum <= 0x00000000]
[17:16:55.686]      __var manuf = 0;
[17:16:55.686]        // -> [manuf <= 0x00000000]
[17:16:55.686]      __var isMSPM0G1X0X_G3X0X = 0;
[17:16:55.686]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:16:55.686]      __var isProduction = 0;
[17:16:55.691]        // -> [isProduction <= 0x00000000]
[17:16:55.691]      __var continueId = 0;
[17:16:55.691]        // -> [continueId <= 0x00000000]
[17:16:55.691]      deviceID =   Read32(0x41C40004);
[17:16:55.705]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:16:55.705]        // -> [deviceID <= 0x2BB8802F]
[17:16:55.705]      version = deviceID >> 28;
[17:16:55.705]        // -> [version <= 0x00000002]
[17:16:55.705]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:16:55.705]        // -> [partNum <= 0x0000BB88]
[17:16:55.705]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:16:55.705]        // -> [manuf <= 0x00000017]
[17:16:55.705]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:16:55.705]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:16:55.705]      isProduction = (version > 0);
[17:16:55.705]        // -> [isProduction <= 0x00000001]
[17:16:55.705]    </block>
[17:16:55.705]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:16:55.705]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:16:55.705]        // =>  FALSE
[17:16:55.705]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:16:55.705]    </control>
[17:16:55.705]    <control if="continueId == 4" while="" timeout="0" info="">
[17:16:55.705]      // if-block "continueId == 4"
[17:16:55.705]        // =>  FALSE
[17:16:55.705]      // skip if-block "continueId == 4"
[17:16:55.705]    </control>
[17:16:55.705]    <control if="!isProduction" while="" timeout="0" info="">
[17:16:55.710]      // if-block "!isProduction"
[17:16:55.710]        // =>  FALSE
[17:16:55.710]      // skip if-block "!isProduction"
[17:16:55.710]    </control>
[17:16:55.710]  </sequence>
[17:16:55.710]  
[17:17:36.805]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:17:36.805]  
[17:17:36.805]  <debugvars>
[17:17:36.805]    // Pre-defined
[17:17:36.805]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:17:36.805]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:17:36.805]    __dp=0x00000000
[17:17:36.805]    __ap=0x00000000
[17:17:36.805]    __traceout=0x00000000      (Trace Disabled)
[17:17:36.805]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:17:36.805]    __FlashAddr=0x00000000
[17:17:36.805]    __FlashLen=0x00000000
[17:17:36.805]    __FlashArg=0x00000000
[17:17:36.805]    __FlashOp=0x00000000
[17:17:36.805]    __Result=0x00000000
[17:17:36.805]  </debugvars>
[17:17:36.805]  
[17:17:36.805]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:17:36.805]    <block atomic="false" info="">
[17:17:36.805]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:17:36.805]        // -> [isSWJ <= 0x00000001]
[17:17:36.805]      __var hasDormant = __protocol & 0x00020000;
[17:17:36.805]        // -> [hasDormant <= 0x00000000]
[17:17:36.805]      __var protType   = __protocol & 0x0000FFFF;
[17:17:36.805]        // -> [protType <= 0x00000002]
[17:17:36.805]    </block>
[17:17:36.805]    <control if="protType == 1" while="" timeout="0" info="">
[17:17:36.805]      // if-block "protType == 1"
[17:17:36.805]        // =>  FALSE
[17:17:36.805]      // skip if-block "protType == 1"
[17:17:36.805]    </control>
[17:17:36.805]    <control if="protType == 2" while="" timeout="0" info="">
[17:17:36.805]      // if-block "protType == 2"
[17:17:36.805]        // =>  TRUE
[17:17:36.805]      <control if="isSWJ" while="" timeout="0" info="">
[17:17:36.805]        // if-block "isSWJ"
[17:17:36.805]          // =>  TRUE
[17:17:36.805]        <control if="hasDormant" while="" timeout="0" info="">
[17:17:36.805]          // if-block "hasDormant"
[17:17:36.805]            // =>  FALSE
[17:17:36.805]          // skip if-block "hasDormant"
[17:17:36.805]        </control>
[17:17:36.805]        <control if="!hasDormant" while="" timeout="0" info="">
[17:17:36.805]          // if-block "!hasDormant"
[17:17:36.805]            // =>  TRUE
[17:17:36.812]          <block atomic="false" info="">
[17:17:36.812]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:17:36.814]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:17:36.814]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:17:36.815]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:17:36.815]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:17:36.815]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:17:36.815]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:17:36.815]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:17:36.815]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:17:36.824]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:17:36.824]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:17:36.834]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:17:36.834]          </block>
[17:17:36.835]          // end if-block "!hasDormant"
[17:17:36.835]        </control>
[17:17:36.835]        // end if-block "isSWJ"
[17:17:36.835]      </control>
[17:17:36.835]      <control if="!isSWJ" while="" timeout="0" info="">
[17:17:36.835]        // if-block "!isSWJ"
[17:17:36.835]          // =>  FALSE
[17:17:36.835]        // skip if-block "!isSWJ"
[17:17:36.835]      </control>
[17:17:36.835]      <block atomic="false" info="">
[17:17:36.835]        ReadDP(0x0);
[17:17:36.835]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:17:36.835]      </block>
[17:17:36.835]      // end if-block "protType == 2"
[17:17:36.835]    </control>
[17:17:36.835]  </sequence>
[17:17:36.835]  
[17:17:36.844]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:17:36.844]  
[17:17:36.844]  <debugvars>
[17:17:36.844]    // Pre-defined
[17:17:36.844]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:17:36.844]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:17:36.844]    __dp=0x00000000
[17:17:36.844]    __ap=0x00000000
[17:17:36.844]    __traceout=0x00000000      (Trace Disabled)
[17:17:36.844]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:17:36.844]    __FlashAddr=0x00000000
[17:17:36.844]    __FlashLen=0x00000000
[17:17:36.844]    __FlashArg=0x00000000
[17:17:36.844]    __FlashOp=0x00000000
[17:17:36.844]    __Result=0x00000000
[17:17:36.844]  </debugvars>
[17:17:36.844]  
[17:17:36.844]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:17:36.844]    <block atomic="false" info="">
[17:17:36.844]      __var SW_DP_ABORT       = 0x0;
[17:17:36.844]        // -> [SW_DP_ABORT <= 0x00000000]
[17:17:36.844]      __var DP_CTRL_STAT      = 0x4;
[17:17:36.844]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:17:36.844]      __var DP_SELECT         = 0x8;
[17:17:36.844]        // -> [DP_SELECT <= 0x00000008]
[17:17:36.844]      __var powered_down      = 0;
[17:17:36.844]        // -> [powered_down <= 0x00000000]
[17:17:36.844]      WriteDP(DP_SELECT, 0x00000000);
[17:17:36.844]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:17:36.844]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:17:36.853]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:17:36.854]        // -> [powered_down <= 0x00000001]
[17:17:36.854]    </block>
[17:17:36.854]    <control if="powered_down" while="" timeout="0" info="">
[17:17:36.854]      // if-block "powered_down"
[17:17:36.854]        // =>  TRUE
[17:17:36.854]      <block atomic="false" info="">
[17:17:36.854]        Message(0, "Debug/System power-up request sent");
[17:17:36.855]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:17:36.855]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:17:36.855]      </block>
[17:17:36.855]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:17:36.855]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:17:36.855]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:17:36.855]        // while-condition  =>  FALSE
[17:17:36.855]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:17:36.855]      </control>
[17:17:36.855]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:17:36.855]        // if-block "(__protocol & 0xFFFF) == 1"
[17:17:36.855]          // =>  FALSE
[17:17:36.863]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:17:36.863]      </control>
[17:17:36.863]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:17:36.863]        // if-block "(__protocol & 0xFFFF) == 2"
[17:17:36.863]          // =>  TRUE
[17:17:36.863]        <block atomic="false" info="">
[17:17:36.863]          Message(0, "executing SWD power up");
[17:17:36.865]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:17:36.867]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:17:36.867]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:17:36.868]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:17:36.868]        </block>
[17:17:36.868]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:17:36.870]      </control>
[17:17:36.870]      // end if-block "powered_down"
[17:17:36.870]    </control>
[17:17:36.870]    <block atomic="false" info="">
[17:17:36.870]      __var DEBUG_PORT_VAL    = 0;
[17:17:36.870]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:17:36.870]      __var ACCESS_POINT_VAL  = 0;
[17:17:36.870]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:17:36.870]      __ap = 1; 
[17:17:36.870]        // -> [__ap <= 0x00000001]
[17:17:36.870]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:17:36.874]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:17:36.874]      __ap = 4;
[17:17:36.874]        // -> [__ap <= 0x00000004]
[17:17:36.874]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:17:36.875]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:17:36.875]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:17:36.875]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:17:36.875]    </block>
[17:17:36.875]    <block atomic="false" info="">
[17:17:36.875]      __var nReset = 0x80;
[17:17:36.875]        // -> [nReset <= 0x00000080]
[17:17:36.875]      __var canReadPins = 0;
[17:17:36.875]        // -> [canReadPins <= 0x00000000]
[17:17:36.875]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:17:36.875]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:17:36.875]        // -> [canReadPins <= 0x00000001]
[17:17:36.875]    </block>
[17:17:36.875]    <control if="" while="1" timeout="200" info="">
[17:17:36.875]      // while "1"  (timeout="200")
[17:17:36.875]      // while-condition  =>  TRUE
[17:17:36.875]      // while "1"  (timeout="200")
[17:17:36.875]      // while-condition  =>  TRUE
[17:17:36.875]      // while "1"  (timeout="200")
[17:17:36.883]      // while-condition  =>  TRUE
[17:17:36.883]      // while "1"  (timeout="200")
[17:17:36.883]      // while  =>  TIMEOUT
[17:17:36.883]      // end while "1"
[17:17:36.883]    </control>
[17:17:36.883]    <control if="canReadPins" while="" timeout="0" info="">
[17:17:36.883]      // if-block "canReadPins"
[17:17:36.884]        // =>  TRUE
[17:17:36.884]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:17:36.884]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:17:36.885]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:17:36.885]        // while-condition  =>  FALSE
[17:17:36.885]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:17:36.885]      </control>
[17:17:36.885]      // end if-block "canReadPins"
[17:17:36.885]    </control>
[17:17:36.885]    <control if="!canReadPins" while="" timeout="0" info="">
[17:17:36.885]      // if-block "!canReadPins"
[17:17:36.885]        // =>  FALSE
[17:17:36.885]      // skip if-block "!canReadPins"
[17:17:36.885]    </control>
[17:17:36.885]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:17:36.885]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:17:36.885]        // =>  TRUE
[17:17:36.885]      <block atomic="false" info="">
[17:17:36.885]        WriteAP(0x00, 0x190008);
[17:17:36.888]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:17:36.888]        WriteAP(0xF0, 0x01);
[17:17:36.888]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:17:36.888]      </block>
[17:17:36.888]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:17:36.888]    </control>
[17:17:36.888]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:17:36.893]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:17:36.893]        // =>  FALSE
[17:17:36.893]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:17:36.893]    </control>
[17:17:36.893]    <block atomic="false" info="">
[17:17:36.893]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:17:36.895]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:17:36.895]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:17:36.895]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:17:36.895]      __ap = 0; //lets make sure we reset the access point selection
[17:17:36.895]        // -> [__ap <= 0x00000000]
[17:17:36.895]    </block>
[17:17:36.895]  </sequence>
[17:17:36.895]  
[17:17:36.924]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:17:36.924]  
[17:17:36.924]  <debugvars>
[17:17:36.924]    // Pre-defined
[17:17:36.924]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:17:36.924]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:17:36.924]    __dp=0x00000000
[17:17:36.924]    __ap=0x00000000
[17:17:36.924]    __traceout=0x00000000      (Trace Disabled)
[17:17:36.924]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:17:36.924]    __FlashAddr=0x00000000
[17:17:36.924]    __FlashLen=0x00000000
[17:17:36.924]    __FlashArg=0x00000000
[17:17:36.924]    __FlashOp=0x00000000
[17:17:36.924]    __Result=0x00000000
[17:17:36.924]  </debugvars>
[17:17:36.924]  
[17:17:36.924]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:17:36.924]    <block atomic="false" info="">
[17:17:36.924]      __var deviceID = 0;
[17:17:36.924]        // -> [deviceID <= 0x00000000]
[17:17:36.924]      __var version = 0;
[17:17:36.924]        // -> [version <= 0x00000000]
[17:17:36.924]      __var partNum = 0;
[17:17:36.924]        // -> [partNum <= 0x00000000]
[17:17:36.924]      __var manuf = 0;
[17:17:36.924]        // -> [manuf <= 0x00000000]
[17:17:36.924]      __var isMSPM0G1X0X_G3X0X = 0;
[17:17:36.924]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:17:36.924]      __var isProduction = 0;
[17:17:36.924]        // -> [isProduction <= 0x00000000]
[17:17:36.924]      __var continueId = 0;
[17:17:36.924]        // -> [continueId <= 0x00000000]
[17:17:36.924]      deviceID =   Read32(0x41C40004);
[17:17:36.924]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:17:36.924]        // -> [deviceID <= 0x2BB8802F]
[17:17:36.924]      version = deviceID >> 28;
[17:17:36.924]        // -> [version <= 0x00000002]
[17:17:36.924]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:17:36.924]        // -> [partNum <= 0x0000BB88]
[17:17:36.924]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:17:36.924]        // -> [manuf <= 0x00000017]
[17:17:36.924]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:17:36.933]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:17:36.933]      isProduction = (version > 0);
[17:17:36.933]        // -> [isProduction <= 0x00000001]
[17:17:36.933]    </block>
[17:17:36.933]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:17:36.933]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:17:36.934]        // =>  FALSE
[17:17:36.934]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:17:36.934]    </control>
[17:17:36.934]    <control if="continueId == 4" while="" timeout="0" info="">
[17:17:36.934]      // if-block "continueId == 4"
[17:17:36.934]        // =>  FALSE
[17:17:36.934]      // skip if-block "continueId == 4"
[17:17:36.934]    </control>
[17:17:36.935]    <control if="!isProduction" while="" timeout="0" info="">
[17:17:36.935]      // if-block "!isProduction"
[17:17:36.935]        // =>  FALSE
[17:17:36.935]      // skip if-block "!isProduction"
[17:17:36.935]    </control>
[17:17:36.935]  </sequence>
[17:17:36.935]  
[17:19:14.676]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:19:14.676]  
[17:19:14.690]  <debugvars>
[17:19:14.690]    // Pre-defined
[17:19:14.690]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:19:14.690]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:19:14.690]    __dp=0x00000000
[17:19:14.690]    __ap=0x00000000
[17:19:14.690]    __traceout=0x00000000      (Trace Disabled)
[17:19:14.690]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:19:14.690]    __FlashAddr=0x00000000
[17:19:14.690]    __FlashLen=0x00000000
[17:19:14.690]    __FlashArg=0x00000000
[17:19:14.690]    __FlashOp=0x00000000
[17:19:14.690]    __Result=0x00000000
[17:19:14.690]  </debugvars>
[17:19:14.690]  
[17:19:14.690]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:19:14.690]    <block atomic="false" info="">
[17:19:14.690]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:19:14.690]        // -> [isSWJ <= 0x00000001]
[17:19:14.690]      __var hasDormant = __protocol & 0x00020000;
[17:19:14.690]        // -> [hasDormant <= 0x00000000]
[17:19:14.690]      __var protType   = __protocol & 0x0000FFFF;
[17:19:14.690]        // -> [protType <= 0x00000002]
[17:19:14.690]    </block>
[17:19:14.690]    <control if="protType == 1" while="" timeout="0" info="">
[17:19:14.690]      // if-block "protType == 1"
[17:19:14.690]        // =>  FALSE
[17:19:14.690]      // skip if-block "protType == 1"
[17:19:14.690]    </control>
[17:19:14.690]    <control if="protType == 2" while="" timeout="0" info="">
[17:19:14.690]      // if-block "protType == 2"
[17:19:14.690]        // =>  TRUE
[17:19:14.690]      <control if="isSWJ" while="" timeout="0" info="">
[17:19:14.690]        // if-block "isSWJ"
[17:19:14.690]          // =>  TRUE
[17:19:14.690]        <control if="hasDormant" while="" timeout="0" info="">
[17:19:14.693]          // if-block "hasDormant"
[17:19:14.693]            // =>  FALSE
[17:19:14.693]          // skip if-block "hasDormant"
[17:19:14.693]        </control>
[17:19:14.693]        <control if="!hasDormant" while="" timeout="0" info="">
[17:19:14.693]          // if-block "!hasDormant"
[17:19:14.694]            // =>  TRUE
[17:19:14.694]          <block atomic="false" info="">
[17:19:14.694]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:19:14.694]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:19:14.694]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:19:14.694]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:19:14.694]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:19:14.694]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:19:14.694]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:19:14.694]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:19:14.694]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:19:14.694]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:19:14.704]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:19:14.705]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:19:14.705]          </block>
[17:19:14.705]          // end if-block "!hasDormant"
[17:19:14.705]        </control>
[17:19:14.705]        // end if-block "isSWJ"
[17:19:14.705]      </control>
[17:19:14.705]      <control if="!isSWJ" while="" timeout="0" info="">
[17:19:14.705]        // if-block "!isSWJ"
[17:19:14.705]          // =>  FALSE
[17:19:14.705]        // skip if-block "!isSWJ"
[17:19:14.705]      </control>
[17:19:14.705]      <block atomic="false" info="">
[17:19:14.705]        ReadDP(0x0);
[17:19:14.705]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:19:14.705]      </block>
[17:19:14.705]      // end if-block "protType == 2"
[17:19:14.705]    </control>
[17:19:14.705]  </sequence>
[17:19:14.705]  
[17:19:14.714]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:19:14.714]  
[17:19:14.714]  <debugvars>
[17:19:14.714]    // Pre-defined
[17:19:14.714]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:19:14.714]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:19:14.714]    __dp=0x00000000
[17:19:14.714]    __ap=0x00000000
[17:19:14.714]    __traceout=0x00000000      (Trace Disabled)
[17:19:14.714]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:19:14.714]    __FlashAddr=0x00000000
[17:19:14.714]    __FlashLen=0x00000000
[17:19:14.714]    __FlashArg=0x00000000
[17:19:14.714]    __FlashOp=0x00000000
[17:19:14.714]    __Result=0x00000000
[17:19:14.714]  </debugvars>
[17:19:14.714]  
[17:19:14.714]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:19:14.714]    <block atomic="false" info="">
[17:19:14.714]      __var SW_DP_ABORT       = 0x0;
[17:19:14.714]        // -> [SW_DP_ABORT <= 0x00000000]
[17:19:14.714]      __var DP_CTRL_STAT      = 0x4;
[17:19:14.714]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:19:14.714]      __var DP_SELECT         = 0x8;
[17:19:14.714]        // -> [DP_SELECT <= 0x00000008]
[17:19:14.714]      __var powered_down      = 0;
[17:19:14.714]        // -> [powered_down <= 0x00000000]
[17:19:14.714]      WriteDP(DP_SELECT, 0x00000000);
[17:19:14.714]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:19:14.714]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:19:14.724]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:19:14.724]        // -> [powered_down <= 0x00000001]
[17:19:14.724]    </block>
[17:19:14.724]    <control if="powered_down" while="" timeout="0" info="">
[17:19:14.724]      // if-block "powered_down"
[17:19:14.724]        // =>  TRUE
[17:19:14.724]      <block atomic="false" info="">
[17:19:14.724]        Message(0, "Debug/System power-up request sent");
[17:19:14.726]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:19:14.726]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:19:14.726]      </block>
[17:19:14.726]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:19:14.726]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:19:14.726]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:19:14.726]        // while-condition  =>  FALSE
[17:19:14.726]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:19:14.726]      </control>
[17:19:14.726]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:19:14.726]        // if-block "(__protocol & 0xFFFF) == 1"
[17:19:14.726]          // =>  FALSE
[17:19:14.726]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:19:14.726]      </control>
[17:19:14.726]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:19:14.726]        // if-block "(__protocol & 0xFFFF) == 2"
[17:19:14.726]          // =>  TRUE
[17:19:14.726]        <block atomic="false" info="">
[17:19:14.726]          Message(0, "executing SWD power up");
[17:19:14.734]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:19:14.736]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:19:14.736]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:19:14.736]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:19:14.736]        </block>
[17:19:14.736]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:19:14.736]      </control>
[17:19:14.736]      // end if-block "powered_down"
[17:19:14.736]    </control>
[17:19:14.736]    <block atomic="false" info="">
[17:19:14.736]      __var DEBUG_PORT_VAL    = 0;
[17:19:14.736]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:19:14.736]      __var ACCESS_POINT_VAL  = 0;
[17:19:14.736]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:19:14.736]      __ap = 1; 
[17:19:14.736]        // -> [__ap <= 0x00000001]
[17:19:14.736]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:19:14.744]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:19:14.744]      __ap = 4;
[17:19:14.744]        // -> [__ap <= 0x00000004]
[17:19:14.744]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:19:14.744]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:19:14.744]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:19:14.744]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:19:14.744]    </block>
[17:19:14.744]    <block atomic="false" info="">
[17:19:14.744]      __var nReset = 0x80;
[17:19:14.744]        // -> [nReset <= 0x00000080]
[17:19:14.744]      __var canReadPins = 0;
[17:19:14.744]        // -> [canReadPins <= 0x00000000]
[17:19:14.744]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:19:14.754]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:19:14.755]        // -> [canReadPins <= 0x00000001]
[17:19:14.755]    </block>
[17:19:14.755]    <control if="" while="1" timeout="200" info="">
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.755]      // while-condition  =>  TRUE
[17:19:14.755]      // while "1"  (timeout="200")
[17:19:14.763]      // while-condition  =>  TRUE
[17:19:14.763]      // while "1"  (timeout="200")
[17:19:14.763]      // while-condition  =>  TRUE
[17:19:14.763]      // while "1"  (timeout="200")
[17:19:14.763]      // while-condition  =>  TRUE
[17:19:14.763]      // while "1"  (timeout="200")
[17:19:14.764]      // while-condition  =>  TRUE
[17:19:14.764]      // while "1"  (timeout="200")
[17:19:14.764]      // while-condition  =>  TRUE
[17:19:14.764]      // while "1"  (timeout="200")
[17:19:14.764]      // while-condition  =>  TRUE
[17:19:14.764]      // while "1"  (timeout="200")
[17:19:14.764]      // while-condition  =>  TRUE
[17:19:14.764]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.765]      // while "1"  (timeout="200")
[17:19:14.765]      // while-condition  =>  TRUE
[17:19:14.773]      // while "1"  (timeout="200")
[17:19:14.773]      // while  =>  TIMEOUT
[17:19:14.773]      // end while "1"
[17:19:14.774]    </control>
[17:19:14.774]    <control if="canReadPins" while="" timeout="0" info="">
[17:19:14.774]      // if-block "canReadPins"
[17:19:14.774]        // =>  TRUE
[17:19:14.774]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:19:14.774]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:19:14.775]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:19:14.775]        // while-condition  =>  FALSE
[17:19:14.775]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:19:14.775]      </control>
[17:19:14.775]      // end if-block "canReadPins"
[17:19:14.775]    </control>
[17:19:14.775]    <control if="!canReadPins" while="" timeout="0" info="">
[17:19:14.775]      // if-block "!canReadPins"
[17:19:14.775]        // =>  FALSE
[17:19:14.775]      // skip if-block "!canReadPins"
[17:19:14.775]    </control>
[17:19:14.775]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:19:14.775]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:19:14.775]        // =>  TRUE
[17:19:14.775]      <block atomic="false" info="">
[17:19:14.775]        WriteAP(0x00, 0x190008);
[17:19:14.775]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:19:14.775]        WriteAP(0xF0, 0x01);
[17:19:14.784]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:19:14.784]      </block>
[17:19:14.784]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:19:14.784]    </control>
[17:19:14.784]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:19:14.784]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:19:14.784]        // =>  FALSE
[17:19:14.784]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:19:14.784]    </control>
[17:19:14.784]    <block atomic="false" info="">
[17:19:14.784]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:19:14.785]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:19:14.785]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:19:14.785]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:19:14.785]      __ap = 0; //lets make sure we reset the access point selection
[17:19:14.785]        // -> [__ap <= 0x00000000]
[17:19:14.785]    </block>
[17:19:14.785]  </sequence>
[17:19:14.785]  
[17:19:14.815]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:19:14.815]  
[17:19:14.815]  <debugvars>
[17:19:14.815]    // Pre-defined
[17:19:14.815]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:19:14.815]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:19:14.815]    __dp=0x00000000
[17:19:14.815]    __ap=0x00000000
[17:19:14.815]    __traceout=0x00000000      (Trace Disabled)
[17:19:14.815]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:19:14.815]    __FlashAddr=0x00000000
[17:19:14.815]    __FlashLen=0x00000000
[17:19:14.815]    __FlashArg=0x00000000
[17:19:14.815]    __FlashOp=0x00000000
[17:19:14.815]    __Result=0x00000000
[17:19:14.815]  </debugvars>
[17:19:14.815]  
[17:19:14.815]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:19:14.815]    <block atomic="false" info="">
[17:19:14.815]      __var deviceID = 0;
[17:19:14.815]        // -> [deviceID <= 0x00000000]
[17:19:14.815]      __var version = 0;
[17:19:14.815]        // -> [version <= 0x00000000]
[17:19:14.815]      __var partNum = 0;
[17:19:14.815]        // -> [partNum <= 0x00000000]
[17:19:14.815]      __var manuf = 0;
[17:19:14.815]        // -> [manuf <= 0x00000000]
[17:19:14.815]      __var isMSPM0G1X0X_G3X0X = 0;
[17:19:14.815]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:19:14.815]      __var isProduction = 0;
[17:19:14.815]        // -> [isProduction <= 0x00000000]
[17:19:14.815]      __var continueId = 0;
[17:19:14.815]        // -> [continueId <= 0x00000000]
[17:19:14.815]      deviceID =   Read32(0x41C40004);
[17:19:14.835]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:19:14.835]        // -> [deviceID <= 0x2BB8802F]
[17:19:14.835]      version = deviceID >> 28;
[17:19:14.835]        // -> [version <= 0x00000002]
[17:19:14.835]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:19:14.835]        // -> [partNum <= 0x0000BB88]
[17:19:14.835]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:19:14.835]        // -> [manuf <= 0x00000017]
[17:19:14.835]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:19:14.835]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:19:14.835]      isProduction = (version > 0);
[17:19:14.835]        // -> [isProduction <= 0x00000001]
[17:19:14.835]    </block>
[17:19:14.835]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:19:14.835]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:19:14.835]        // =>  FALSE
[17:19:14.835]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:19:14.835]    </control>
[17:19:14.835]    <control if="continueId == 4" while="" timeout="0" info="">
[17:19:14.835]      // if-block "continueId == 4"
[17:19:14.835]        // =>  FALSE
[17:19:14.835]      // skip if-block "continueId == 4"
[17:19:14.835]    </control>
[17:19:14.835]    <control if="!isProduction" while="" timeout="0" info="">
[17:19:14.835]      // if-block "!isProduction"
[17:19:14.835]        // =>  FALSE
[17:19:14.835]      // skip if-block "!isProduction"
[17:19:14.835]    </control>
[17:19:14.835]  </sequence>
[17:19:14.835]  
[17:20:31.179]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:20:31.179]  
[17:20:31.181]  <debugvars>
[17:20:31.181]    // Pre-defined
[17:20:31.181]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:20:31.181]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:20:31.181]    __dp=0x00000000
[17:20:31.182]    __ap=0x00000000
[17:20:31.182]    __traceout=0x00000000      (Trace Disabled)
[17:20:31.182]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:20:31.182]    __FlashAddr=0x00000000
[17:20:31.182]    __FlashLen=0x00000000
[17:20:31.182]    __FlashArg=0x00000000
[17:20:31.182]    __FlashOp=0x00000000
[17:20:31.182]    __Result=0x00000000
[17:20:31.182]  </debugvars>
[17:20:31.182]  
[17:20:31.182]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:20:31.182]    <block atomic="false" info="">
[17:20:31.183]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:20:31.183]        // -> [isSWJ <= 0x00000001]
[17:20:31.184]      __var hasDormant = __protocol & 0x00020000;
[17:20:31.184]        // -> [hasDormant <= 0x00000000]
[17:20:31.184]      __var protType   = __protocol & 0x0000FFFF;
[17:20:31.184]        // -> [protType <= 0x00000002]
[17:20:31.184]    </block>
[17:20:31.184]    <control if="protType == 1" while="" timeout="0" info="">
[17:20:31.184]      // if-block "protType == 1"
[17:20:31.184]        // =>  FALSE
[17:20:31.184]      // skip if-block "protType == 1"
[17:20:31.185]    </control>
[17:20:31.185]    <control if="protType == 2" while="" timeout="0" info="">
[17:20:31.185]      // if-block "protType == 2"
[17:20:31.185]        // =>  TRUE
[17:20:31.185]      <control if="isSWJ" while="" timeout="0" info="">
[17:20:31.185]        // if-block "isSWJ"
[17:20:31.185]          // =>  TRUE
[17:20:31.185]        <control if="hasDormant" while="" timeout="0" info="">
[17:20:31.185]          // if-block "hasDormant"
[17:20:31.185]            // =>  FALSE
[17:20:31.185]          // skip if-block "hasDormant"
[17:20:31.185]        </control>
[17:20:31.185]        <control if="!hasDormant" while="" timeout="0" info="">
[17:20:31.185]          // if-block "!hasDormant"
[17:20:31.185]            // =>  TRUE
[17:20:31.185]          <block atomic="false" info="">
[17:20:31.185]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:20:31.185]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:20:31.185]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:20:31.194]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:20:31.194]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:20:31.194]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:20:31.194]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:20:31.194]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:20:31.194]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:20:31.194]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:20:31.194]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:20:31.194]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:20:31.194]          </block>
[17:20:31.194]          // end if-block "!hasDormant"
[17:20:31.194]        </control>
[17:20:31.194]        // end if-block "isSWJ"
[17:20:31.194]      </control>
[17:20:31.194]      <control if="!isSWJ" while="" timeout="0" info="">
[17:20:31.194]        // if-block "!isSWJ"
[17:20:31.194]          // =>  FALSE
[17:20:31.194]        // skip if-block "!isSWJ"
[17:20:31.194]      </control>
[17:20:31.194]      <block atomic="false" info="">
[17:20:31.194]        ReadDP(0x0);
[17:20:31.194]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:20:31.194]      </block>
[17:20:31.194]      // end if-block "protType == 2"
[17:20:31.194]    </control>
[17:20:31.194]  </sequence>
[17:20:31.194]  
[17:20:31.204]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:20:31.204]  
[17:20:31.204]  <debugvars>
[17:20:31.204]    // Pre-defined
[17:20:31.204]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:20:31.204]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:20:31.204]    __dp=0x00000000
[17:20:31.204]    __ap=0x00000000
[17:20:31.204]    __traceout=0x00000000      (Trace Disabled)
[17:20:31.204]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:20:31.204]    __FlashAddr=0x00000000
[17:20:31.204]    __FlashLen=0x00000000
[17:20:31.204]    __FlashArg=0x00000000
[17:20:31.204]    __FlashOp=0x00000000
[17:20:31.204]    __Result=0x00000000
[17:20:31.204]  </debugvars>
[17:20:31.204]  
[17:20:31.204]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:20:31.204]    <block atomic="false" info="">
[17:20:31.204]      __var SW_DP_ABORT       = 0x0;
[17:20:31.204]        // -> [SW_DP_ABORT <= 0x00000000]
[17:20:31.204]      __var DP_CTRL_STAT      = 0x4;
[17:20:31.204]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:20:31.204]      __var DP_SELECT         = 0x8;
[17:20:31.204]        // -> [DP_SELECT <= 0x00000008]
[17:20:31.204]      __var powered_down      = 0;
[17:20:31.204]        // -> [powered_down <= 0x00000000]
[17:20:31.204]      WriteDP(DP_SELECT, 0x00000000);
[17:20:31.204]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:20:31.204]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:20:31.204]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:20:31.204]        // -> [powered_down <= 0x00000001]
[17:20:31.204]    </block>
[17:20:31.204]    <control if="powered_down" while="" timeout="0" info="">
[17:20:31.204]      // if-block "powered_down"
[17:20:31.204]        // =>  TRUE
[17:20:31.204]      <block atomic="false" info="">
[17:20:31.204]        Message(0, "Debug/System power-up request sent");
[17:20:31.214]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:20:31.215]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:20:31.215]      </block>
[17:20:31.215]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:20:31.215]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:20:31.215]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:20:31.215]        // while-condition  =>  FALSE
[17:20:31.215]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:20:31.215]      </control>
[17:20:31.215]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:20:31.215]        // if-block "(__protocol & 0xFFFF) == 1"
[17:20:31.215]          // =>  FALSE
[17:20:31.215]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:20:31.215]      </control>
[17:20:31.215]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:20:31.215]        // if-block "(__protocol & 0xFFFF) == 2"
[17:20:31.215]          // =>  TRUE
[17:20:31.215]        <block atomic="false" info="">
[17:20:31.215]          Message(0, "executing SWD power up");
[17:20:31.215]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:20:31.226]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:20:31.226]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:20:31.226]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:20:31.226]        </block>
[17:20:31.226]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:20:31.226]      </control>
[17:20:31.226]      // end if-block "powered_down"
[17:20:31.226]    </control>
[17:20:31.226]    <block atomic="false" info="">
[17:20:31.226]      __var DEBUG_PORT_VAL    = 0;
[17:20:31.226]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:20:31.226]      __var ACCESS_POINT_VAL  = 0;
[17:20:31.226]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:20:31.226]      __ap = 1; 
[17:20:31.226]        // -> [__ap <= 0x00000001]
[17:20:31.226]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:20:31.235]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:20:31.235]      __ap = 4;
[17:20:31.235]        // -> [__ap <= 0x00000004]
[17:20:31.235]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:20:31.239]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:20:31.239]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:20:31.239]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:20:31.239]    </block>
[17:20:31.239]    <block atomic="false" info="">
[17:20:31.239]      __var nReset = 0x80;
[17:20:31.239]        // -> [nReset <= 0x00000080]
[17:20:31.239]      __var canReadPins = 0;
[17:20:31.239]        // -> [canReadPins <= 0x00000000]
[17:20:31.239]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:20:31.243]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:20:31.243]        // -> [canReadPins <= 0x00000001]
[17:20:31.243]    </block>
[17:20:31.243]    <control if="" while="1" timeout="200" info="">
[17:20:31.243]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.244]      // while "1"  (timeout="200")
[17:20:31.244]      // while-condition  =>  TRUE
[17:20:31.253]      // while "1"  (timeout="200")
[17:20:31.253]      // while  =>  TIMEOUT
[17:20:31.253]      // end while "1"
[17:20:31.253]    </control>
[17:20:31.253]    <control if="canReadPins" while="" timeout="0" info="">
[17:20:31.253]      // if-block "canReadPins"
[17:20:31.253]        // =>  TRUE
[17:20:31.253]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:20:31.254]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:20:31.255]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:20:31.255]        // while-condition  =>  FALSE
[17:20:31.255]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:20:31.255]      </control>
[17:20:31.255]      // end if-block "canReadPins"
[17:20:31.255]    </control>
[17:20:31.255]    <control if="!canReadPins" while="" timeout="0" info="">
[17:20:31.255]      // if-block "!canReadPins"
[17:20:31.255]        // =>  FALSE
[17:20:31.255]      // skip if-block "!canReadPins"
[17:20:31.255]    </control>
[17:20:31.255]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:20:31.255]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:20:31.255]        // =>  TRUE
[17:20:31.255]      <block atomic="false" info="">
[17:20:31.255]        WriteAP(0x00, 0x190008);
[17:20:31.255]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:20:31.255]        WriteAP(0xF0, 0x01);
[17:20:31.255]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:20:31.255]      </block>
[17:20:31.255]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:20:31.255]    </control>
[17:20:31.255]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:20:31.255]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:20:31.255]        // =>  FALSE
[17:20:31.255]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:20:31.255]    </control>
[17:20:31.255]    <block atomic="false" info="">
[17:20:31.255]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:20:31.264]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:20:31.264]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:20:31.264]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:20:31.264]      __ap = 0; //lets make sure we reset the access point selection
[17:20:31.264]        // -> [__ap <= 0x00000000]
[17:20:31.264]    </block>
[17:20:31.264]  </sequence>
[17:20:31.264]  
[17:20:31.286]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:20:31.286]  
[17:20:31.286]  <debugvars>
[17:20:31.286]    // Pre-defined
[17:20:31.286]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:20:31.286]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:20:31.286]    __dp=0x00000000
[17:20:31.286]    __ap=0x00000000
[17:20:31.286]    __traceout=0x00000000      (Trace Disabled)
[17:20:31.286]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:20:31.286]    __FlashAddr=0x00000000
[17:20:31.286]    __FlashLen=0x00000000
[17:20:31.286]    __FlashArg=0x00000000
[17:20:31.286]    __FlashOp=0x00000000
[17:20:31.286]    __Result=0x00000000
[17:20:31.293]  </debugvars>
[17:20:31.293]  
[17:20:31.293]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:20:31.293]    <block atomic="false" info="">
[17:20:31.293]      __var deviceID = 0;
[17:20:31.293]        // -> [deviceID <= 0x00000000]
[17:20:31.294]      __var version = 0;
[17:20:31.294]        // -> [version <= 0x00000000]
[17:20:31.294]      __var partNum = 0;
[17:20:31.294]        // -> [partNum <= 0x00000000]
[17:20:31.294]      __var manuf = 0;
[17:20:31.294]        // -> [manuf <= 0x00000000]
[17:20:31.294]      __var isMSPM0G1X0X_G3X0X = 0;
[17:20:31.294]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:20:31.296]      __var isProduction = 0;
[17:20:31.296]        // -> [isProduction <= 0x00000000]
[17:20:31.296]      __var continueId = 0;
[17:20:31.296]        // -> [continueId <= 0x00000000]
[17:20:31.296]      deviceID =   Read32(0x41C40004);
[17:20:31.296]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:20:31.296]        // -> [deviceID <= 0x2BB8802F]
[17:20:31.296]      version = deviceID >> 28;
[17:20:31.296]        // -> [version <= 0x00000002]
[17:20:31.296]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:20:31.296]        // -> [partNum <= 0x0000BB88]
[17:20:31.296]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:20:31.296]        // -> [manuf <= 0x00000017]
[17:20:31.296]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:20:31.296]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:20:31.296]      isProduction = (version > 0);
[17:20:31.296]        // -> [isProduction <= 0x00000001]
[17:20:31.296]    </block>
[17:20:31.296]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:20:31.296]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:20:31.296]        // =>  FALSE
[17:20:31.296]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:20:31.296]    </control>
[17:20:31.296]    <control if="continueId == 4" while="" timeout="0" info="">
[17:20:31.296]      // if-block "continueId == 4"
[17:20:31.296]        // =>  FALSE
[17:20:31.296]      // skip if-block "continueId == 4"
[17:20:31.296]    </control>
[17:20:31.296]    <control if="!isProduction" while="" timeout="0" info="">
[17:20:31.296]      // if-block "!isProduction"
[17:20:31.303]        // =>  FALSE
[17:20:31.303]      // skip if-block "!isProduction"
[17:20:31.303]    </control>
[17:20:31.303]  </sequence>
[17:20:31.303]  
[17:23:24.770]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:23:24.770]  
[17:23:24.778]  <debugvars>
[17:23:24.778]    // Pre-defined
[17:23:24.778]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:23:24.779]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:23:24.779]    __dp=0x00000000
[17:23:24.779]    __ap=0x00000000
[17:23:24.779]    __traceout=0x00000000      (Trace Disabled)
[17:23:24.779]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:23:24.779]    __FlashAddr=0x00000000
[17:23:24.779]    __FlashLen=0x00000000
[17:23:24.779]    __FlashArg=0x00000000
[17:23:24.779]    __FlashOp=0x00000000
[17:23:24.779]    __Result=0x00000000
[17:23:24.779]  </debugvars>
[17:23:24.779]  
[17:23:24.780]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:23:24.780]    <block atomic="false" info="">
[17:23:24.780]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:23:24.780]        // -> [isSWJ <= 0x00000001]
[17:23:24.780]      __var hasDormant = __protocol & 0x00020000;
[17:23:24.780]        // -> [hasDormant <= 0x00000000]
[17:23:24.780]      __var protType   = __protocol & 0x0000FFFF;
[17:23:24.780]        // -> [protType <= 0x00000002]
[17:23:24.780]    </block>
[17:23:24.780]    <control if="protType == 1" while="" timeout="0" info="">
[17:23:24.780]      // if-block "protType == 1"
[17:23:24.780]        // =>  FALSE
[17:23:24.780]      // skip if-block "protType == 1"
[17:23:24.781]    </control>
[17:23:24.781]    <control if="protType == 2" while="" timeout="0" info="">
[17:23:24.781]      // if-block "protType == 2"
[17:23:24.781]        // =>  TRUE
[17:23:24.781]      <control if="isSWJ" while="" timeout="0" info="">
[17:23:24.781]        // if-block "isSWJ"
[17:23:24.781]          // =>  TRUE
[17:23:24.782]        <control if="hasDormant" while="" timeout="0" info="">
[17:23:24.782]          // if-block "hasDormant"
[17:23:24.782]            // =>  FALSE
[17:23:24.782]          // skip if-block "hasDormant"
[17:23:24.782]        </control>
[17:23:24.782]        <control if="!hasDormant" while="" timeout="0" info="">
[17:23:24.782]          // if-block "!hasDormant"
[17:23:24.782]            // =>  TRUE
[17:23:24.782]          <block atomic="false" info="">
[17:23:24.782]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:23:24.793]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:23:24.793]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:23:24.805]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:23:24.806]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:23:24.823]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:23:24.824]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:23:24.829]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:23:24.829]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:23:24.847]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:23:24.847]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:23:24.862]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:23:24.862]          </block>
[17:23:24.862]          // end if-block "!hasDormant"
[17:23:24.862]        </control>
[17:23:24.862]        // end if-block "isSWJ"
[17:23:24.862]      </control>
[17:23:24.862]      <control if="!isSWJ" while="" timeout="0" info="">
[17:23:24.863]        // if-block "!isSWJ"
[17:23:24.863]          // =>  FALSE
[17:23:24.863]        // skip if-block "!isSWJ"
[17:23:24.863]      </control>
[17:23:24.863]      <block atomic="false" info="">
[17:23:24.863]        ReadDP(0x0);
[17:23:24.874]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:23:24.874]      </block>
[17:23:24.874]      // end if-block "protType == 2"
[17:23:24.874]    </control>
[17:23:24.875]  </sequence>
[17:23:24.875]  
[17:23:24.890]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:23:24.890]  
[17:23:24.890]  <debugvars>
[17:23:24.890]    // Pre-defined
[17:23:24.890]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:23:24.890]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:23:24.890]    __dp=0x00000000
[17:23:24.890]    __ap=0x00000000
[17:23:24.891]    __traceout=0x00000000      (Trace Disabled)
[17:23:24.891]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:23:24.891]    __FlashAddr=0x00000000
[17:23:24.891]    __FlashLen=0x00000000
[17:23:24.891]    __FlashArg=0x00000000
[17:23:24.891]    __FlashOp=0x00000000
[17:23:24.891]    __Result=0x00000000
[17:23:24.891]  </debugvars>
[17:23:24.891]  
[17:23:24.891]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:23:24.891]    <block atomic="false" info="">
[17:23:24.892]      __var SW_DP_ABORT       = 0x0;
[17:23:24.892]        // -> [SW_DP_ABORT <= 0x00000000]
[17:23:24.892]      __var DP_CTRL_STAT      = 0x4;
[17:23:24.892]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:23:24.892]      __var DP_SELECT         = 0x8;
[17:23:24.892]        // -> [DP_SELECT <= 0x00000008]
[17:23:24.892]      __var powered_down      = 0;
[17:23:24.892]        // -> [powered_down <= 0x00000000]
[17:23:24.892]      WriteDP(DP_SELECT, 0x00000000);
[17:23:24.896]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:23:24.896]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:23:24.909]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:23:24.909]        // -> [powered_down <= 0x00000001]
[17:23:24.909]    </block>
[17:23:24.909]    <control if="powered_down" while="" timeout="0" info="">
[17:23:24.909]      // if-block "powered_down"
[17:23:24.909]        // =>  TRUE
[17:23:24.909]      <block atomic="false" info="">
[17:23:24.909]        Message(0, "Debug/System power-up request sent");
[17:23:24.911]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:23:24.932]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:23:24.932]      </block>
[17:23:24.932]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:23:24.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:23:24.955]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:23:24.955]        // while-condition  =>  FALSE
[17:23:24.956]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:23:24.956]      </control>
[17:23:24.956]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:23:24.956]        // if-block "(__protocol & 0xFFFF) == 1"
[17:23:24.956]          // =>  FALSE
[17:23:24.956]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:23:24.956]      </control>
[17:23:24.956]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:23:24.956]        // if-block "(__protocol & 0xFFFF) == 2"
[17:23:24.956]          // =>  TRUE
[17:23:24.956]        <block atomic="false" info="">
[17:23:24.956]          Message(0, "executing SWD power up");
[17:23:24.960]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:23:24.972]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:23:24.972]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:23:24.977]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:23:24.977]        </block>
[17:23:24.978]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:23:24.978]      </control>
[17:23:24.978]      // end if-block "powered_down"
[17:23:24.978]    </control>
[17:23:24.978]    <block atomic="false" info="">
[17:23:24.979]      __var DEBUG_PORT_VAL    = 0;
[17:23:24.979]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:23:24.979]      __var ACCESS_POINT_VAL  = 0;
[17:23:24.979]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:23:24.979]      __ap = 1; 
[17:23:24.979]        // -> [__ap <= 0x00000001]
[17:23:24.979]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:23:24.998]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:23:24.998]      __ap = 4;
[17:23:24.999]        // -> [__ap <= 0x00000004]
[17:23:24.999]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:23:25.020]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:23:25.020]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:23:25.021]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:23:25.023]    </block>
[17:23:25.023]    <block atomic="false" info="">
[17:23:25.023]      __var nReset = 0x80;
[17:23:25.023]        // -> [nReset <= 0x00000080]
[17:23:25.023]      __var canReadPins = 0;
[17:23:25.023]        // -> [canReadPins <= 0x00000000]
[17:23:25.023]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:23:25.028]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:23:25.028]        // -> [canReadPins <= 0x00000001]
[17:23:25.028]    </block>
[17:23:25.028]    <control if="" while="1" timeout="200" info="">
[17:23:25.028]      // while "1"  (timeout="200")
[17:23:25.028]      // while-condition  =>  TRUE
[17:23:25.028]      // while "1"  (timeout="200")
[17:23:25.028]      // while-condition  =>  TRUE
[17:23:25.028]      // while "1"  (timeout="200")
[17:23:25.029]      // while-condition  =>  TRUE
[17:23:25.029]      // while "1"  (timeout="200")
[17:23:25.029]      // while-condition  =>  TRUE
[17:23:25.029]      // while "1"  (timeout="200")
[17:23:25.030]      // while-condition  =>  TRUE
[17:23:25.030]      // while "1"  (timeout="200")
[17:23:25.030]      // while-condition  =>  TRUE
[17:23:25.030]      // while "1"  (timeout="200")
[17:23:25.030]      // while-condition  =>  TRUE
[17:23:25.030]      // while "1"  (timeout="200")
[17:23:25.030]      // while-condition  =>  TRUE
[17:23:25.030]      // while "1"  (timeout="200")
[17:23:25.030]      // while-condition  =>  TRUE
[17:23:25.030]      // while "1"  (timeout="200")
[17:23:25.030]      // while-condition  =>  TRUE
[17:23:25.030]      // while "1"  (timeout="200")
[17:23:25.030]      // while-condition  =>  TRUE
[17:23:25.030]      // while "1"  (timeout="200")
[17:23:25.030]      // while-condition  =>  TRUE
[17:23:25.031]      // while "1"  (timeout="200")
[17:23:25.031]      // while-condition  =>  TRUE
[17:23:25.031]      // while "1"  (timeout="200")
[17:23:25.031]      // while-condition  =>  TRUE
[17:23:25.031]      // while "1"  (timeout="200")
[17:23:25.032]      // while-condition  =>  TRUE
[17:23:25.032]      // while "1"  (timeout="200")
[17:23:25.032]      // while-condition  =>  TRUE
[17:23:25.032]      // while "1"  (timeout="200")
[17:23:25.032]      // while-condition  =>  TRUE
[17:23:25.032]      // while "1"  (timeout="200")
[17:23:25.032]      // while-condition  =>  TRUE
[17:23:25.032]      // while "1"  (timeout="200")
[17:23:25.032]      // while-condition  =>  TRUE
[17:23:25.033]      // while "1"  (timeout="200")
[17:23:25.033]      // while-condition  =>  TRUE
[17:23:25.033]      // while "1"  (timeout="200")
[17:23:25.033]      // while-condition  =>  TRUE
[17:23:25.033]      // while "1"  (timeout="200")
[17:23:25.033]      // while-condition  =>  TRUE
[17:23:25.033]      // while "1"  (timeout="200")
[17:23:25.033]      // while-condition  =>  TRUE
[17:23:25.033]      // while "1"  (timeout="200")
[17:23:25.033]      // while-condition  =>  TRUE
[17:23:25.033]      // while "1"  (timeout="200")
[17:23:25.033]      // while-condition  =>  TRUE
[17:23:25.034]      // while "1"  (timeout="200")
[17:23:25.034]      // while  =>  TIMEOUT
[17:23:25.034]      // end while "1"
[17:23:25.034]    </control>
[17:23:25.034]    <control if="canReadPins" while="" timeout="0" info="">
[17:23:25.034]      // if-block "canReadPins"
[17:23:25.034]        // =>  TRUE
[17:23:25.034]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:23:25.035]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:23:25.045]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:23:25.045]        // while-condition  =>  FALSE
[17:23:25.045]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:23:25.045]      </control>
[17:23:25.046]      // end if-block "canReadPins"
[17:23:25.046]    </control>
[17:23:25.046]    <control if="!canReadPins" while="" timeout="0" info="">
[17:23:25.046]      // if-block "!canReadPins"
[17:23:25.046]        // =>  FALSE
[17:23:25.046]      // skip if-block "!canReadPins"
[17:23:25.046]    </control>
[17:23:25.046]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:23:25.046]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:23:25.046]        // =>  TRUE
[17:23:25.046]      <block atomic="false" info="">
[17:23:25.046]        WriteAP(0x00, 0x190008);
[17:23:25.058]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:23:25.058]        WriteAP(0xF0, 0x01);
[17:23:25.072]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:23:25.072]      </block>
[17:23:25.072]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:23:25.072]    </control>
[17:23:25.072]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:23:25.072]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:23:25.072]        // =>  FALSE
[17:23:25.072]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:23:25.072]    </control>
[17:23:25.072]    <block atomic="false" info="">
[17:23:25.072]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:23:25.086]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:23:25.086]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:23:25.086]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:23:25.088]      __ap = 0; //lets make sure we reset the access point selection
[17:23:25.089]        // -> [__ap <= 0x00000000]
[17:23:25.089]    </block>
[17:23:25.089]  </sequence>
[17:23:25.089]  
[17:23:25.189]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:23:25.189]  
[17:23:25.189]  <debugvars>
[17:23:25.189]    // Pre-defined
[17:23:25.189]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:23:25.190]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:23:25.190]    __dp=0x00000000
[17:23:25.190]    __ap=0x00000000
[17:23:25.190]    __traceout=0x00000000      (Trace Disabled)
[17:23:25.190]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:23:25.190]    __FlashAddr=0x00000000
[17:23:25.190]    __FlashLen=0x00000000
[17:23:25.190]    __FlashArg=0x00000000
[17:23:25.190]    __FlashOp=0x00000000
[17:23:25.190]    __Result=0x00000000
[17:23:25.190]  </debugvars>
[17:23:25.191]  
[17:23:25.191]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:23:25.191]    <block atomic="false" info="">
[17:23:25.191]      __var deviceID = 0;
[17:23:25.191]        // -> [deviceID <= 0x00000000]
[17:23:25.191]      __var version = 0;
[17:23:25.191]        // -> [version <= 0x00000000]
[17:23:25.191]      __var partNum = 0;
[17:23:25.191]        // -> [partNum <= 0x00000000]
[17:23:25.191]      __var manuf = 0;
[17:23:25.192]        // -> [manuf <= 0x00000000]
[17:23:25.192]      __var isMSPM0G1X0X_G3X0X = 0;
[17:23:25.192]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:23:25.192]      __var isProduction = 0;
[17:23:25.192]        // -> [isProduction <= 0x00000000]
[17:23:25.192]      __var continueId = 0;
[17:23:25.192]        // -> [continueId <= 0x00000000]
[17:23:25.193]      deviceID =   Read32(0x41C40004);
[17:23:25.216]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:23:25.216]        // -> [deviceID <= 0x2BB8802F]
[17:23:25.216]      version = deviceID >> 28;
[17:23:25.216]        // -> [version <= 0x00000002]
[17:23:25.216]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:23:25.216]        // -> [partNum <= 0x0000BB88]
[17:23:25.216]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:23:25.217]        // -> [manuf <= 0x00000017]
[17:23:25.217]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:23:25.217]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:23:25.217]      isProduction = (version > 0);
[17:23:25.217]        // -> [isProduction <= 0x00000001]
[17:23:25.217]    </block>
[17:23:25.217]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:23:25.217]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:23:25.217]        // =>  FALSE
[17:23:25.217]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:23:25.217]    </control>
[17:23:25.217]    <control if="continueId == 4" while="" timeout="0" info="">
[17:23:25.217]      // if-block "continueId == 4"
[17:23:25.217]        // =>  FALSE
[17:23:25.217]      // skip if-block "continueId == 4"
[17:23:25.217]    </control>
[17:23:25.217]    <control if="!isProduction" while="" timeout="0" info="">
[17:23:25.218]      // if-block "!isProduction"
[17:23:25.218]        // =>  FALSE
[17:23:25.218]      // skip if-block "!isProduction"
[17:23:25.218]    </control>
[17:23:25.218]  </sequence>
[17:23:25.218]  
[17:24:38.821]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:24:38.821]  
[17:24:38.830]  <debugvars>
[17:24:38.830]    // Pre-defined
[17:24:38.831]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:24:38.831]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:24:38.831]    __dp=0x00000000
[17:24:38.831]    __ap=0x00000000
[17:24:38.831]    __traceout=0x00000000      (Trace Disabled)
[17:24:38.831]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:24:38.832]    __FlashAddr=0x00000000
[17:24:38.832]    __FlashLen=0x00000000
[17:24:38.832]    __FlashArg=0x00000000
[17:24:38.832]    __FlashOp=0x00000000
[17:24:38.832]    __Result=0x00000000
[17:24:38.832]  </debugvars>
[17:24:38.832]  
[17:24:38.832]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:24:38.832]    <block atomic="false" info="">
[17:24:38.833]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:24:38.833]        // -> [isSWJ <= 0x00000001]
[17:24:38.833]      __var hasDormant = __protocol & 0x00020000;
[17:24:38.833]        // -> [hasDormant <= 0x00000000]
[17:24:38.833]      __var protType   = __protocol & 0x0000FFFF;
[17:24:38.833]        // -> [protType <= 0x00000002]
[17:24:38.833]    </block>
[17:24:38.833]    <control if="protType == 1" while="" timeout="0" info="">
[17:24:38.833]      // if-block "protType == 1"
[17:24:38.833]        // =>  FALSE
[17:24:38.833]      // skip if-block "protType == 1"
[17:24:38.834]    </control>
[17:24:38.834]    <control if="protType == 2" while="" timeout="0" info="">
[17:24:38.834]      // if-block "protType == 2"
[17:24:38.834]        // =>  TRUE
[17:24:38.834]      <control if="isSWJ" while="" timeout="0" info="">
[17:24:38.834]        // if-block "isSWJ"
[17:24:38.834]          // =>  TRUE
[17:24:38.834]        <control if="hasDormant" while="" timeout="0" info="">
[17:24:38.834]          // if-block "hasDormant"
[17:24:38.834]            // =>  FALSE
[17:24:38.834]          // skip if-block "hasDormant"
[17:24:38.835]        </control>
[17:24:38.835]        <control if="!hasDormant" while="" timeout="0" info="">
[17:24:38.835]          // if-block "!hasDormant"
[17:24:38.835]            // =>  TRUE
[17:24:38.835]          <block atomic="false" info="">
[17:24:38.835]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:24:38.838]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:24:38.839]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:24:38.840]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:24:38.840]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:24:38.843]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:24:38.843]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:24:38.844]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:24:38.845]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:24:38.846]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:24:38.846]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:24:38.847]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:24:38.847]          </block>
[17:24:38.847]          // end if-block "!hasDormant"
[17:24:38.847]        </control>
[17:24:38.848]        // end if-block "isSWJ"
[17:24:38.848]      </control>
[17:24:38.848]      <control if="!isSWJ" while="" timeout="0" info="">
[17:24:38.848]        // if-block "!isSWJ"
[17:24:38.848]          // =>  FALSE
[17:24:38.848]        // skip if-block "!isSWJ"
[17:24:38.848]      </control>
[17:24:38.848]      <block atomic="false" info="">
[17:24:38.848]        ReadDP(0x0);
[17:24:38.855]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:24:38.855]      </block>
[17:24:38.855]      // end if-block "protType == 2"
[17:24:38.855]    </control>
[17:24:38.855]  </sequence>
[17:24:38.855]  
[17:24:38.857]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:24:38.857]  
[17:24:38.857]  <debugvars>
[17:24:38.858]    // Pre-defined
[17:24:38.858]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:24:38.858]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:24:38.858]    __dp=0x00000000
[17:24:38.858]    __ap=0x00000000
[17:24:38.858]    __traceout=0x00000000      (Trace Disabled)
[17:24:38.858]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:24:38.858]    __FlashAddr=0x00000000
[17:24:38.858]    __FlashLen=0x00000000
[17:24:38.858]    __FlashArg=0x00000000
[17:24:38.858]    __FlashOp=0x00000000
[17:24:38.858]    __Result=0x00000000
[17:24:38.859]  </debugvars>
[17:24:38.859]  
[17:24:38.859]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:24:38.859]    <block atomic="false" info="">
[17:24:38.859]      __var SW_DP_ABORT       = 0x0;
[17:24:38.859]        // -> [SW_DP_ABORT <= 0x00000000]
[17:24:38.859]      __var DP_CTRL_STAT      = 0x4;
[17:24:38.859]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:24:38.860]      __var DP_SELECT         = 0x8;
[17:24:38.860]        // -> [DP_SELECT <= 0x00000008]
[17:24:38.860]      __var powered_down      = 0;
[17:24:38.860]        // -> [powered_down <= 0x00000000]
[17:24:38.860]      WriteDP(DP_SELECT, 0x00000000);
[17:24:38.862]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:24:38.862]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:24:38.864]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:24:38.864]        // -> [powered_down <= 0x00000001]
[17:24:38.864]    </block>
[17:24:38.864]    <control if="powered_down" while="" timeout="0" info="">
[17:24:38.865]      // if-block "powered_down"
[17:24:38.865]        // =>  TRUE
[17:24:38.865]      <block atomic="false" info="">
[17:24:38.865]        Message(0, "Debug/System power-up request sent");
[17:24:38.867]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:24:38.870]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:24:38.870]      </block>
[17:24:38.870]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:24:38.870]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:24:38.871]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:24:38.871]        // while-condition  =>  FALSE
[17:24:38.872]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:24:38.872]      </control>
[17:24:38.872]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:24:38.872]        // if-block "(__protocol & 0xFFFF) == 1"
[17:24:38.872]          // =>  FALSE
[17:24:38.872]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:24:38.872]      </control>
[17:24:38.872]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:24:38.872]        // if-block "(__protocol & 0xFFFF) == 2"
[17:24:38.872]          // =>  TRUE
[17:24:38.873]        <block atomic="false" info="">
[17:24:38.873]          Message(0, "executing SWD power up");
[17:24:38.875]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:24:38.877]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:24:38.877]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:24:38.879]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:24:38.879]        </block>
[17:24:38.879]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:24:38.879]      </control>
[17:24:38.880]      // end if-block "powered_down"
[17:24:38.880]    </control>
[17:24:38.880]    <block atomic="false" info="">
[17:24:38.880]      __var DEBUG_PORT_VAL    = 0;
[17:24:38.880]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:24:38.880]      __var ACCESS_POINT_VAL  = 0;
[17:24:38.881]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:24:38.881]      __ap = 1; 
[17:24:38.881]        // -> [__ap <= 0x00000001]
[17:24:38.881]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:24:38.887]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:24:38.887]      __ap = 4;
[17:24:38.887]        // -> [__ap <= 0x00000004]
[17:24:38.887]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:24:38.894]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:24:38.894]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:24:38.894]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:24:38.896]    </block>
[17:24:38.896]    <block atomic="false" info="">
[17:24:38.897]      __var nReset = 0x80;
[17:24:38.897]        // -> [nReset <= 0x00000080]
[17:24:38.897]      __var canReadPins = 0;
[17:24:38.897]        // -> [canReadPins <= 0x00000000]
[17:24:38.897]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:24:38.899]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:24:38.899]        // -> [canReadPins <= 0x00000001]
[17:24:38.899]    </block>
[17:24:38.899]    <control if="" while="1" timeout="200" info="">
[17:24:38.899]      // while "1"  (timeout="200")
[17:24:38.899]      // while-condition  =>  TRUE
[17:24:38.900]      // while "1"  (timeout="200")
[17:24:38.900]      // while-condition  =>  TRUE
[17:24:38.900]      // while "1"  (timeout="200")
[17:24:38.900]      // while-condition  =>  TRUE
[17:24:38.900]      // while "1"  (timeout="200")
[17:24:38.900]      // while-condition  =>  TRUE
[17:24:38.900]      // while "1"  (timeout="200")
[17:24:38.900]      // while-condition  =>  TRUE
[17:24:38.900]      // while "1"  (timeout="200")
[17:24:38.900]      // while-condition  =>  TRUE
[17:24:38.900]      // while "1"  (timeout="200")
[17:24:38.900]      // while-condition  =>  TRUE
[17:24:38.900]      // while "1"  (timeout="200")
[17:24:38.901]      // while-condition  =>  TRUE
[17:24:38.901]      // while "1"  (timeout="200")
[17:24:38.901]      // while-condition  =>  TRUE
[17:24:38.901]      // while "1"  (timeout="200")
[17:24:38.901]      // while-condition  =>  TRUE
[17:24:38.901]      // while "1"  (timeout="200")
[17:24:38.901]      // while-condition  =>  TRUE
[17:24:38.901]      // while "1"  (timeout="200")
[17:24:38.902]      // while-condition  =>  TRUE
[17:24:38.902]      // while "1"  (timeout="200")
[17:24:38.902]      // while-condition  =>  TRUE
[17:24:38.902]      // while "1"  (timeout="200")
[17:24:38.902]      // while-condition  =>  TRUE
[17:24:38.902]      // while "1"  (timeout="200")
[17:24:38.902]      // while-condition  =>  TRUE
[17:24:38.902]      // while "1"  (timeout="200")
[17:24:38.902]      // while-condition  =>  TRUE
[17:24:38.902]      // while "1"  (timeout="200")
[17:24:38.902]      // while-condition  =>  TRUE
[17:24:38.902]      // while "1"  (timeout="200")
[17:24:38.902]      // while-condition  =>  TRUE
[17:24:38.903]      // while "1"  (timeout="200")
[17:24:38.903]      // while-condition  =>  TRUE
[17:24:38.903]      // while "1"  (timeout="200")
[17:24:38.903]      // while-condition  =>  TRUE
[17:24:38.903]      // while "1"  (timeout="200")
[17:24:38.903]      // while-condition  =>  TRUE
[17:24:38.903]      // while "1"  (timeout="200")
[17:24:38.903]      // while-condition  =>  TRUE
[17:24:38.903]      // while "1"  (timeout="200")
[17:24:38.903]      // while-condition  =>  TRUE
[17:24:38.903]      // while "1"  (timeout="200")
[17:24:38.904]      // while-condition  =>  TRUE
[17:24:38.904]      // while "1"  (timeout="200")
[17:24:38.904]      // while-condition  =>  TRUE
[17:24:38.904]      // while "1"  (timeout="200")
[17:24:38.904]      // while-condition  =>  TRUE
[17:24:38.904]      // while "1"  (timeout="200")
[17:24:38.904]      // while-condition  =>  TRUE
[17:24:38.905]      // while "1"  (timeout="200")
[17:24:38.905]      // while-condition  =>  TRUE
[17:24:38.905]      // while "1"  (timeout="200")
[17:24:38.905]      // while-condition  =>  TRUE
[17:24:38.905]      // while "1"  (timeout="200")
[17:24:38.905]      // while-condition  =>  TRUE
[17:24:38.905]      // while "1"  (timeout="200")
[17:24:38.905]      // while-condition  =>  TRUE
[17:24:38.905]      // while "1"  (timeout="200")
[17:24:38.906]      // while-condition  =>  TRUE
[17:24:38.906]      // while "1"  (timeout="200")
[17:24:38.906]      // while-condition  =>  TRUE
[17:24:38.906]      // while "1"  (timeout="200")
[17:24:38.906]      // while-condition  =>  TRUE
[17:24:38.906]      // while "1"  (timeout="200")
[17:24:38.906]      // while-condition  =>  TRUE
[17:24:38.906]      // while "1"  (timeout="200")
[17:24:38.906]      // while-condition  =>  TRUE
[17:24:38.906]      // while "1"  (timeout="200")
[17:24:38.907]      // while-condition  =>  TRUE
[17:24:38.907]      // while "1"  (timeout="200")
[17:24:38.907]      // while-condition  =>  TRUE
[17:24:38.907]      // while "1"  (timeout="200")
[17:24:38.907]      // while-condition  =>  TRUE
[17:24:38.907]      // while "1"  (timeout="200")
[17:24:38.909]      // while-condition  =>  TRUE
[17:24:38.909]      // while "1"  (timeout="200")
[17:24:38.909]      // while  =>  TIMEOUT
[17:24:38.909]      // end while "1"
[17:24:38.909]    </control>
[17:24:38.909]    <control if="canReadPins" while="" timeout="0" info="">
[17:24:38.909]      // if-block "canReadPins"
[17:24:38.910]        // =>  TRUE
[17:24:38.910]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:24:38.910]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:24:38.911]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:24:38.911]        // while-condition  =>  FALSE
[17:24:38.911]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:24:38.911]      </control>
[17:24:38.912]      // end if-block "canReadPins"
[17:24:38.912]    </control>
[17:24:38.912]    <control if="!canReadPins" while="" timeout="0" info="">
[17:24:38.912]      // if-block "!canReadPins"
[17:24:38.912]        // =>  FALSE
[17:24:38.912]      // skip if-block "!canReadPins"
[17:24:38.912]    </control>
[17:24:38.912]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:24:38.912]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:24:38.912]        // =>  TRUE
[17:24:38.912]      <block atomic="false" info="">
[17:24:38.912]        WriteAP(0x00, 0x190008);
[17:24:38.917]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:24:38.917]        WriteAP(0xF0, 0x01);
[17:24:38.920]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:24:38.920]      </block>
[17:24:38.920]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:24:38.920]    </control>
[17:24:38.920]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:24:38.920]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:24:38.920]        // =>  FALSE
[17:24:38.920]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:24:38.920]    </control>
[17:24:38.920]    <block atomic="false" info="">
[17:24:38.920]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:24:38.924]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:24:38.924]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:24:38.924]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:24:38.926]      __ap = 0; //lets make sure we reset the access point selection
[17:24:38.926]        // -> [__ap <= 0x00000000]
[17:24:38.926]    </block>
[17:24:38.926]  </sequence>
[17:24:38.926]  
[17:24:38.955]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:24:38.955]  
[17:24:38.956]  <debugvars>
[17:24:38.956]    // Pre-defined
[17:24:38.956]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:24:38.956]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:24:38.956]    __dp=0x00000000
[17:24:38.956]    __ap=0x00000000
[17:24:38.956]    __traceout=0x00000000      (Trace Disabled)
[17:24:38.956]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:24:38.956]    __FlashAddr=0x00000000
[17:24:38.956]    __FlashLen=0x00000000
[17:24:38.956]    __FlashArg=0x00000000
[17:24:38.957]    __FlashOp=0x00000000
[17:24:38.957]    __Result=0x00000000
[17:24:38.957]  </debugvars>
[17:24:38.957]  
[17:24:38.957]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:24:38.957]    <block atomic="false" info="">
[17:24:38.957]      __var deviceID = 0;
[17:24:38.957]        // -> [deviceID <= 0x00000000]
[17:24:38.957]      __var version = 0;
[17:24:38.957]        // -> [version <= 0x00000000]
[17:24:38.958]      __var partNum = 0;
[17:24:38.958]        // -> [partNum <= 0x00000000]
[17:24:38.958]      __var manuf = 0;
[17:24:38.958]        // -> [manuf <= 0x00000000]
[17:24:38.958]      __var isMSPM0G1X0X_G3X0X = 0;
[17:24:38.958]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:24:38.958]      __var isProduction = 0;
[17:24:38.958]        // -> [isProduction <= 0x00000000]
[17:24:38.958]      __var continueId = 0;
[17:24:38.958]        // -> [continueId <= 0x00000000]
[17:24:38.958]      deviceID =   Read32(0x41C40004);
[17:24:38.966]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:24:38.967]        // -> [deviceID <= 0x2BB8802F]
[17:24:38.967]      version = deviceID >> 28;
[17:24:38.967]        // -> [version <= 0x00000002]
[17:24:38.967]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:24:38.967]        // -> [partNum <= 0x0000BB88]
[17:24:38.967]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:24:38.967]        // -> [manuf <= 0x00000017]
[17:24:38.967]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:24:38.967]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:24:38.967]      isProduction = (version > 0);
[17:24:38.967]        // -> [isProduction <= 0x00000001]
[17:24:38.967]    </block>
[17:24:38.967]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:24:38.967]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:24:38.967]        // =>  FALSE
[17:24:38.967]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:24:38.967]    </control>
[17:24:38.968]    <control if="continueId == 4" while="" timeout="0" info="">
[17:24:38.968]      // if-block "continueId == 4"
[17:24:38.968]        // =>  FALSE
[17:24:38.968]      // skip if-block "continueId == 4"
[17:24:38.968]    </control>
[17:24:38.968]    <control if="!isProduction" while="" timeout="0" info="">
[17:24:38.969]      // if-block "!isProduction"
[17:24:38.969]        // =>  FALSE
[17:24:38.969]      // skip if-block "!isProduction"
[17:24:38.969]    </control>
[17:24:38.969]  </sequence>
[17:24:38.969]  
[17:27:10.324]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:27:10.324]  
[17:27:10.334]  <debugvars>
[17:27:10.334]    // Pre-defined
[17:27:10.334]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:27:10.334]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:27:10.334]    __dp=0x00000000
[17:27:10.334]    __ap=0x00000000
[17:27:10.334]    __traceout=0x00000000      (Trace Disabled)
[17:27:10.334]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:27:10.335]    __FlashAddr=0x00000000
[17:27:10.335]    __FlashLen=0x00000000
[17:27:10.335]    __FlashArg=0x00000000
[17:27:10.335]    __FlashOp=0x00000000
[17:27:10.335]    __Result=0x00000000
[17:27:10.335]  </debugvars>
[17:27:10.335]  
[17:27:10.335]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:27:10.335]    <block atomic="false" info="">
[17:27:10.335]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:27:10.335]        // -> [isSWJ <= 0x00000001]
[17:27:10.335]      __var hasDormant = __protocol & 0x00020000;
[17:27:10.335]        // -> [hasDormant <= 0x00000000]
[17:27:10.336]      __var protType   = __protocol & 0x0000FFFF;
[17:27:10.336]        // -> [protType <= 0x00000002]
[17:27:10.336]    </block>
[17:27:10.336]    <control if="protType == 1" while="" timeout="0" info="">
[17:27:10.336]      // if-block "protType == 1"
[17:27:10.336]        // =>  FALSE
[17:27:10.336]      // skip if-block "protType == 1"
[17:27:10.336]    </control>
[17:27:10.336]    <control if="protType == 2" while="" timeout="0" info="">
[17:27:10.337]      // if-block "protType == 2"
[17:27:10.337]        // =>  TRUE
[17:27:10.337]      <control if="isSWJ" while="" timeout="0" info="">
[17:27:10.337]        // if-block "isSWJ"
[17:27:10.337]          // =>  TRUE
[17:27:10.337]        <control if="hasDormant" while="" timeout="0" info="">
[17:27:10.337]          // if-block "hasDormant"
[17:27:10.337]            // =>  FALSE
[17:27:10.337]          // skip if-block "hasDormant"
[17:27:10.337]        </control>
[17:27:10.337]        <control if="!hasDormant" while="" timeout="0" info="">
[17:27:10.338]          // if-block "!hasDormant"
[17:27:10.338]            // =>  TRUE
[17:27:10.338]          <block atomic="false" info="">
[17:27:10.338]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:27:10.339]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:27:10.339]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:27:10.342]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:27:10.342]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:27:10.345]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:27:10.345]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:27:10.346]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:27:10.346]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:27:10.351]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:27:10.351]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:27:10.353]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:27:10.353]          </block>
[17:27:10.353]          // end if-block "!hasDormant"
[17:27:10.353]        </control>
[17:27:10.353]        // end if-block "isSWJ"
[17:27:10.353]      </control>
[17:27:10.353]      <control if="!isSWJ" while="" timeout="0" info="">
[17:27:10.353]        // if-block "!isSWJ"
[17:27:10.353]          // =>  FALSE
[17:27:10.353]        // skip if-block "!isSWJ"
[17:27:10.353]      </control>
[17:27:10.353]      <block atomic="false" info="">
[17:27:10.353]        ReadDP(0x0);
[17:27:10.354]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:27:10.354]      </block>
[17:27:10.354]      // end if-block "protType == 2"
[17:27:10.356]    </control>
[17:27:10.356]  </sequence>
[17:27:10.356]  
[17:27:10.358]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:27:10.358]  
[17:27:10.358]  <debugvars>
[17:27:10.358]    // Pre-defined
[17:27:10.358]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:27:10.358]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:27:10.358]    __dp=0x00000000
[17:27:10.358]    __ap=0x00000000
[17:27:10.358]    __traceout=0x00000000      (Trace Disabled)
[17:27:10.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:27:10.359]    __FlashAddr=0x00000000
[17:27:10.359]    __FlashLen=0x00000000
[17:27:10.359]    __FlashArg=0x00000000
[17:27:10.359]    __FlashOp=0x00000000
[17:27:10.359]    __Result=0x00000000
[17:27:10.359]  </debugvars>
[17:27:10.359]  
[17:27:10.359]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:27:10.359]    <block atomic="false" info="">
[17:27:10.359]      __var SW_DP_ABORT       = 0x0;
[17:27:10.360]        // -> [SW_DP_ABORT <= 0x00000000]
[17:27:10.360]      __var DP_CTRL_STAT      = 0x4;
[17:27:10.360]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:27:10.360]      __var DP_SELECT         = 0x8;
[17:27:10.360]        // -> [DP_SELECT <= 0x00000008]
[17:27:10.360]      __var powered_down      = 0;
[17:27:10.360]        // -> [powered_down <= 0x00000000]
[17:27:10.360]      WriteDP(DP_SELECT, 0x00000000);
[17:27:10.365]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:27:10.365]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:27:10.367]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:27:10.367]        // -> [powered_down <= 0x00000001]
[17:27:10.368]    </block>
[17:27:10.368]    <control if="powered_down" while="" timeout="0" info="">
[17:27:10.368]      // if-block "powered_down"
[17:27:10.368]        // =>  TRUE
[17:27:10.368]      <block atomic="false" info="">
[17:27:10.368]        Message(0, "Debug/System power-up request sent");
[17:27:10.369]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:27:10.372]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:27:10.372]      </block>
[17:27:10.372]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:27:10.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:27:10.374]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:27:10.374]        // while-condition  =>  FALSE
[17:27:10.374]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:27:10.374]      </control>
[17:27:10.374]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:27:10.374]        // if-block "(__protocol & 0xFFFF) == 1"
[17:27:10.374]          // =>  FALSE
[17:27:10.374]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:27:10.374]      </control>
[17:27:10.375]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:27:10.375]        // if-block "(__protocol & 0xFFFF) == 2"
[17:27:10.375]          // =>  TRUE
[17:27:10.375]        <block atomic="false" info="">
[17:27:10.375]          Message(0, "executing SWD power up");
[17:27:10.377]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:27:10.379]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:27:10.379]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:27:10.380]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:27:10.380]        </block>
[17:27:10.381]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:27:10.381]      </control>
[17:27:10.381]      // end if-block "powered_down"
[17:27:10.381]    </control>
[17:27:10.381]    <block atomic="false" info="">
[17:27:10.381]      __var DEBUG_PORT_VAL    = 0;
[17:27:10.381]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:27:10.381]      __var ACCESS_POINT_VAL  = 0;
[17:27:10.381]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:27:10.381]      __ap = 1; 
[17:27:10.382]        // -> [__ap <= 0x00000001]
[17:27:10.382]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:27:10.387]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:27:10.387]      __ap = 4;
[17:27:10.387]        // -> [__ap <= 0x00000004]
[17:27:10.387]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:27:10.392]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:27:10.392]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:27:10.392]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:27:10.394]    </block>
[17:27:10.394]    <block atomic="false" info="">
[17:27:10.394]      __var nReset = 0x80;
[17:27:10.394]        // -> [nReset <= 0x00000080]
[17:27:10.394]      __var canReadPins = 0;
[17:27:10.395]        // -> [canReadPins <= 0x00000000]
[17:27:10.395]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:27:10.396]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:27:10.397]        // -> [canReadPins <= 0x00000001]
[17:27:10.397]    </block>
[17:27:10.397]    <control if="" while="1" timeout="200" info="">
[17:27:10.397]      // while "1"  (timeout="200")
[17:27:10.397]      // while-condition  =>  TRUE
[17:27:10.397]      // while "1"  (timeout="200")
[17:27:10.398]      // while-condition  =>  TRUE
[17:27:10.398]      // while "1"  (timeout="200")
[17:27:10.398]      // while-condition  =>  TRUE
[17:27:10.398]      // while "1"  (timeout="200")
[17:27:10.398]      // while-condition  =>  TRUE
[17:27:10.398]      // while "1"  (timeout="200")
[17:27:10.398]      // while-condition  =>  TRUE
[17:27:10.398]      // while "1"  (timeout="200")
[17:27:10.398]      // while-condition  =>  TRUE
[17:27:10.399]      // while "1"  (timeout="200")
[17:27:10.399]      // while-condition  =>  TRUE
[17:27:10.399]      // while "1"  (timeout="200")
[17:27:10.400]      // while-condition  =>  TRUE
[17:27:10.400]      // while "1"  (timeout="200")
[17:27:10.400]      // while-condition  =>  TRUE
[17:27:10.400]      // while "1"  (timeout="200")
[17:27:10.400]      // while-condition  =>  TRUE
[17:27:10.400]      // while "1"  (timeout="200")
[17:27:10.400]      // while-condition  =>  TRUE
[17:27:10.400]      // while "1"  (timeout="200")
[17:27:10.400]      // while-condition  =>  TRUE
[17:27:10.401]      // while "1"  (timeout="200")
[17:27:10.401]      // while-condition  =>  TRUE
[17:27:10.401]      // while "1"  (timeout="200")
[17:27:10.401]      // while-condition  =>  TRUE
[17:27:10.401]      // while "1"  (timeout="200")
[17:27:10.401]      // while-condition  =>  TRUE
[17:27:10.401]      // while "1"  (timeout="200")
[17:27:10.401]      // while-condition  =>  TRUE
[17:27:10.401]      // while "1"  (timeout="200")
[17:27:10.401]      // while-condition  =>  TRUE
[17:27:10.401]      // while "1"  (timeout="200")
[17:27:10.401]      // while-condition  =>  TRUE
[17:27:10.401]      // while "1"  (timeout="200")
[17:27:10.401]      // while-condition  =>  TRUE
[17:27:10.401]      // while "1"  (timeout="200")
[17:27:10.401]      // while-condition  =>  TRUE
[17:27:10.401]      // while "1"  (timeout="200")
[17:27:10.402]      // while-condition  =>  TRUE
[17:27:10.402]      // while "1"  (timeout="200")
[17:27:10.402]      // while-condition  =>  TRUE
[17:27:10.402]      // while "1"  (timeout="200")
[17:27:10.402]      // while-condition  =>  TRUE
[17:27:10.402]      // while "1"  (timeout="200")
[17:27:10.402]      // while-condition  =>  TRUE
[17:27:10.402]      // while "1"  (timeout="200")
[17:27:10.402]      // while-condition  =>  TRUE
[17:27:10.402]      // while "1"  (timeout="200")
[17:27:10.402]      // while-condition  =>  TRUE
[17:27:10.402]      // while "1"  (timeout="200")
[17:27:10.403]      // while-condition  =>  TRUE
[17:27:10.403]      // while "1"  (timeout="200")
[17:27:10.403]      // while-condition  =>  TRUE
[17:27:10.403]      // while "1"  (timeout="200")
[17:27:10.403]      // while-condition  =>  TRUE
[17:27:10.403]      // while "1"  (timeout="200")
[17:27:10.404]      // while-condition  =>  TRUE
[17:27:10.404]      // while "1"  (timeout="200")
[17:27:10.404]      // while-condition  =>  TRUE
[17:27:10.404]      // while "1"  (timeout="200")
[17:27:10.404]      // while-condition  =>  TRUE
[17:27:10.404]      // while "1"  (timeout="200")
[17:27:10.404]      // while-condition  =>  TRUE
[17:27:10.404]      // while "1"  (timeout="200")
[17:27:10.404]      // while-condition  =>  TRUE
[17:27:10.405]      // while "1"  (timeout="200")
[17:27:10.405]      // while-condition  =>  TRUE
[17:27:10.405]      // while "1"  (timeout="200")
[17:27:10.405]      // while-condition  =>  TRUE
[17:27:10.405]      // while "1"  (timeout="200")
[17:27:10.405]      // while-condition  =>  TRUE
[17:27:10.405]      // while "1"  (timeout="200")
[17:27:10.405]      // while-condition  =>  TRUE
[17:27:10.405]      // while "1"  (timeout="200")
[17:27:10.405]      // while-condition  =>  TRUE
[17:27:10.405]      // while "1"  (timeout="200")
[17:27:10.405]      // while-condition  =>  TRUE
[17:27:10.405]      // while "1"  (timeout="200")
[17:27:10.405]      // while-condition  =>  TRUE
[17:27:10.406]      // while "1"  (timeout="200")
[17:27:10.407]      // while-condition  =>  TRUE
[17:27:10.407]      // while "1"  (timeout="200")
[17:27:10.407]      // while-condition  =>  TRUE
[17:27:10.407]      // while "1"  (timeout="200")
[17:27:10.407]      // while-condition  =>  TRUE
[17:27:10.407]      // while "1"  (timeout="200")
[17:27:10.407]      // while-condition  =>  TRUE
[17:27:10.407]      // while "1"  (timeout="200")
[17:27:10.407]      // while-condition  =>  TRUE
[17:27:10.407]      // while "1"  (timeout="200")
[17:27:10.407]      // while-condition  =>  TRUE
[17:27:10.407]      // while "1"  (timeout="200")
[17:27:10.408]      // while-condition  =>  TRUE
[17:27:10.408]      // while "1"  (timeout="200")
[17:27:10.408]      // while-condition  =>  TRUE
[17:27:10.408]      // while "1"  (timeout="200")
[17:27:10.408]      // while-condition  =>  TRUE
[17:27:10.408]      // while "1"  (timeout="200")
[17:27:10.408]      // while-condition  =>  TRUE
[17:27:10.408]      // while "1"  (timeout="200")
[17:27:10.408]      // while-condition  =>  TRUE
[17:27:10.408]      // while "1"  (timeout="200")
[17:27:10.408]      // while-condition  =>  TRUE
[17:27:10.408]      // while "1"  (timeout="200")
[17:27:10.409]      // while-condition  =>  TRUE
[17:27:10.409]      // while "1"  (timeout="200")
[17:27:10.409]      // while  =>  TIMEOUT
[17:27:10.409]      // end while "1"
[17:27:10.409]    </control>
[17:27:10.409]    <control if="canReadPins" while="" timeout="0" info="">
[17:27:10.409]      // if-block "canReadPins"
[17:27:10.409]        // =>  TRUE
[17:27:10.409]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:27:10.410]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:27:10.411]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:27:10.411]        // while-condition  =>  FALSE
[17:27:10.411]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:27:10.411]      </control>
[17:27:10.412]      // end if-block "canReadPins"
[17:27:10.412]    </control>
[17:27:10.412]    <control if="!canReadPins" while="" timeout="0" info="">
[17:27:10.412]      // if-block "!canReadPins"
[17:27:10.412]        // =>  FALSE
[17:27:10.412]      // skip if-block "!canReadPins"
[17:27:10.412]    </control>
[17:27:10.412]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:27:10.412]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:27:10.412]        // =>  TRUE
[17:27:10.412]      <block atomic="false" info="">
[17:27:10.413]        WriteAP(0x00, 0x190008);
[17:27:10.415]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:27:10.415]        WriteAP(0xF0, 0x01);
[17:27:10.427]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:27:10.427]      </block>
[17:27:10.427]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:27:10.427]    </control>
[17:27:10.427]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:27:10.427]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:27:10.427]        // =>  FALSE
[17:27:10.427]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:27:10.427]    </control>
[17:27:10.427]    <block atomic="false" info="">
[17:27:10.427]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:27:10.431]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:27:10.431]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:27:10.431]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:27:10.432]      __ap = 0; //lets make sure we reset the access point selection
[17:27:10.432]        // -> [__ap <= 0x00000000]
[17:27:10.432]    </block>
[17:27:10.432]  </sequence>
[17:27:10.432]  
[17:27:10.460]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:27:10.460]  
[17:27:10.460]  <debugvars>
[17:27:10.460]    // Pre-defined
[17:27:10.460]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:27:10.460]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[17:27:10.460]    __dp=0x00000000
[17:27:10.460]    __ap=0x00000000
[17:27:10.460]    __traceout=0x00000000      (Trace Disabled)
[17:27:10.460]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:27:10.460]    __FlashAddr=0x00000000
[17:27:10.462]    __FlashLen=0x00000000
[17:27:10.462]    __FlashArg=0x00000000
[17:27:10.462]    __FlashOp=0x00000000
[17:27:10.462]    __Result=0x00000000
[17:27:10.462]  </debugvars>
[17:27:10.462]  
[17:27:10.462]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:27:10.462]    <block atomic="false" info="">
[17:27:10.462]      __var deviceID = 0;
[17:27:10.462]        // -> [deviceID <= 0x00000000]
[17:27:10.462]      __var version = 0;
[17:27:10.462]        // -> [version <= 0x00000000]
[17:27:10.462]      __var partNum = 0;
[17:27:10.462]        // -> [partNum <= 0x00000000]
[17:27:10.463]      __var manuf = 0;
[17:27:10.463]        // -> [manuf <= 0x00000000]
[17:27:10.463]      __var isMSPM0G1X0X_G3X0X = 0;
[17:27:10.463]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:27:10.463]      __var isProduction = 0;
[17:27:10.463]        // -> [isProduction <= 0x00000000]
[17:27:10.463]      __var continueId = 0;
[17:27:10.463]        // -> [continueId <= 0x00000000]
[17:27:10.463]      deviceID =   Read32(0x41C40004);
[17:27:10.471]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:27:10.471]        // -> [deviceID <= 0x2BB8802F]
[17:27:10.471]      version = deviceID >> 28;
[17:27:10.471]        // -> [version <= 0x00000002]
[17:27:10.471]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:27:10.471]        // -> [partNum <= 0x0000BB88]
[17:27:10.471]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:27:10.471]        // -> [manuf <= 0x00000017]
[17:27:10.471]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:27:10.471]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:27:10.471]      isProduction = (version > 0);
[17:27:10.471]        // -> [isProduction <= 0x00000001]
[17:27:10.471]    </block>
[17:27:10.471]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:27:10.471]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:27:10.472]        // =>  FALSE
[17:27:10.472]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:27:10.472]    </control>
[17:27:10.472]    <control if="continueId == 4" while="" timeout="0" info="">
[17:27:10.472]      // if-block "continueId == 4"
[17:27:10.472]        // =>  FALSE
[17:27:10.472]      // skip if-block "continueId == 4"
[17:27:10.472]    </control>
[17:27:10.472]    <control if="!isProduction" while="" timeout="0" info="">
[17:27:10.472]      // if-block "!isProduction"
[17:27:10.473]        // =>  FALSE
[17:27:10.474]      // skip if-block "!isProduction"
[17:27:10.474]    </control>
[17:27:10.474]  </sequence>
[17:27:10.474]  
[17:30:33.457]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:30:33.457]  
[17:30:33.467]  <debugvars>
[17:30:33.467]    // Pre-defined
[17:30:33.467]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:30:33.467]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:30:33.467]    __dp=0x00000000
[17:30:33.467]    __ap=0x00000000
[17:30:33.467]    __traceout=0x00000000      (Trace Disabled)
[17:30:33.467]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:30:33.467]    __FlashAddr=0x00000000
[17:30:33.467]    __FlashLen=0x00000000
[17:30:33.468]    __FlashArg=0x00000000
[17:30:33.468]    __FlashOp=0x00000000
[17:30:33.468]    __Result=0x00000000
[17:30:33.468]  </debugvars>
[17:30:33.468]  
[17:30:33.468]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:30:33.468]    <block atomic="false" info="">
[17:30:33.468]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:30:33.468]        // -> [isSWJ <= 0x00000001]
[17:30:33.468]      __var hasDormant = __protocol & 0x00020000;
[17:30:33.468]        // -> [hasDormant <= 0x00000000]
[17:30:33.468]      __var protType   = __protocol & 0x0000FFFF;
[17:30:33.468]        // -> [protType <= 0x00000002]
[17:30:33.468]    </block>
[17:30:33.468]    <control if="protType == 1" while="" timeout="0" info="">
[17:30:33.469]      // if-block "protType == 1"
[17:30:33.469]        // =>  FALSE
[17:30:33.469]      // skip if-block "protType == 1"
[17:30:33.469]    </control>
[17:30:33.469]    <control if="protType == 2" while="" timeout="0" info="">
[17:30:33.469]      // if-block "protType == 2"
[17:30:33.470]        // =>  TRUE
[17:30:33.470]      <control if="isSWJ" while="" timeout="0" info="">
[17:30:33.470]        // if-block "isSWJ"
[17:30:33.470]          // =>  TRUE
[17:30:33.470]        <control if="hasDormant" while="" timeout="0" info="">
[17:30:33.470]          // if-block "hasDormant"
[17:30:33.470]            // =>  FALSE
[17:30:33.470]          // skip if-block "hasDormant"
[17:30:33.470]        </control>
[17:30:33.470]        <control if="!hasDormant" while="" timeout="0" info="">
[17:30:33.470]          // if-block "!hasDormant"
[17:30:33.472]            // =>  TRUE
[17:30:33.472]          <block atomic="false" info="">
[17:30:33.472]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:30:33.478]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:30:33.479]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:30:33.488]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:30:33.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:30:33.490]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:30:33.490]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:30:33.493]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:30:33.493]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:30:33.496]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:30:33.496]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:30:33.504]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:30:33.505]          </block>
[17:30:33.505]          // end if-block "!hasDormant"
[17:30:33.505]        </control>
[17:30:33.505]        // end if-block "isSWJ"
[17:30:33.505]      </control>
[17:30:33.505]      <control if="!isSWJ" while="" timeout="0" info="">
[17:30:33.505]        // if-block "!isSWJ"
[17:30:33.505]          // =>  FALSE
[17:30:33.505]        // skip if-block "!isSWJ"
[17:30:33.505]      </control>
[17:30:33.505]      <block atomic="false" info="">
[17:30:33.505]        ReadDP(0x0);
[17:30:33.509]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:30:33.510]      </block>
[17:30:33.510]      // end if-block "protType == 2"
[17:30:33.510]    </control>
[17:30:33.510]  </sequence>
[17:30:33.510]  
[17:30:33.513]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:30:33.513]  
[17:30:33.514]  <debugvars>
[17:30:33.514]    // Pre-defined
[17:30:33.514]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:30:33.514]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:30:33.514]    __dp=0x00000000
[17:30:33.514]    __ap=0x00000000
[17:30:33.514]    __traceout=0x00000000      (Trace Disabled)
[17:30:33.514]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:30:33.514]    __FlashAddr=0x00000000
[17:30:33.515]    __FlashLen=0x00000000
[17:30:33.515]    __FlashArg=0x00000000
[17:30:33.515]    __FlashOp=0x00000000
[17:30:33.515]    __Result=0x00000000
[17:30:33.515]  </debugvars>
[17:30:33.515]  
[17:30:33.515]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:30:33.516]    <block atomic="false" info="">
[17:30:33.516]      __var SW_DP_ABORT       = 0x0;
[17:30:33.516]        // -> [SW_DP_ABORT <= 0x00000000]
[17:30:33.516]      __var DP_CTRL_STAT      = 0x4;
[17:30:33.516]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:30:33.516]      __var DP_SELECT         = 0x8;
[17:30:33.516]        // -> [DP_SELECT <= 0x00000008]
[17:30:33.516]      __var powered_down      = 0;
[17:30:33.516]        // -> [powered_down <= 0x00000000]
[17:30:33.516]      WriteDP(DP_SELECT, 0x00000000);
[17:30:33.520]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:30:33.520]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:30:33.521]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:30:33.522]        // -> [powered_down <= 0x00000001]
[17:30:33.522]    </block>
[17:30:33.522]    <control if="powered_down" while="" timeout="0" info="">
[17:30:33.522]      // if-block "powered_down"
[17:30:33.522]        // =>  TRUE
[17:30:33.522]      <block atomic="false" info="">
[17:30:33.522]        Message(0, "Debug/System power-up request sent");
[17:30:33.525]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:30:33.526]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:30:33.526]      </block>
[17:30:33.526]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:30:33.526]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:30:33.528]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:30:33.528]        // while-condition  =>  FALSE
[17:30:33.528]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:30:33.528]      </control>
[17:30:33.528]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:30:33.528]        // if-block "(__protocol & 0xFFFF) == 1"
[17:30:33.528]          // =>  FALSE
[17:30:33.528]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:30:33.528]      </control>
[17:30:33.528]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:30:33.529]        // if-block "(__protocol & 0xFFFF) == 2"
[17:30:33.529]          // =>  TRUE
[17:30:33.529]        <block atomic="false" info="">
[17:30:33.529]          Message(0, "executing SWD power up");
[17:30:33.531]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:30:33.538]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:30:33.538]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:30:33.540]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:30:33.540]        </block>
[17:30:33.540]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:30:33.540]      </control>
[17:30:33.540]      // end if-block "powered_down"
[17:30:33.540]    </control>
[17:30:33.540]    <block atomic="false" info="">
[17:30:33.540]      __var DEBUG_PORT_VAL    = 0;
[17:30:33.540]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:30:33.540]      __var ACCESS_POINT_VAL  = 0;
[17:30:33.541]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:30:33.541]      __ap = 1; 
[17:30:33.541]        // -> [__ap <= 0x00000001]
[17:30:33.541]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:30:33.551]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:30:33.551]      __ap = 4;
[17:30:33.551]        // -> [__ap <= 0x00000004]
[17:30:33.551]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:30:33.555]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:30:33.555]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:30:33.555]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:30:33.556]    </block>
[17:30:33.556]    <block atomic="false" info="">
[17:30:33.556]      __var nReset = 0x80;
[17:30:33.558]        // -> [nReset <= 0x00000080]
[17:30:33.558]      __var canReadPins = 0;
[17:30:33.558]        // -> [canReadPins <= 0x00000000]
[17:30:33.558]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:30:33.559]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:30:33.559]        // -> [canReadPins <= 0x00000001]
[17:30:33.560]    </block>
[17:30:33.560]    <control if="" while="1" timeout="200" info="">
[17:30:33.560]      // while "1"  (timeout="200")
[17:30:33.560]      // while-condition  =>  TRUE
[17:30:33.560]      // while "1"  (timeout="200")
[17:30:33.560]      // while-condition  =>  TRUE
[17:30:33.560]      // while "1"  (timeout="200")
[17:30:33.560]      // while-condition  =>  TRUE
[17:30:33.560]      // while "1"  (timeout="200")
[17:30:33.560]      // while-condition  =>  TRUE
[17:30:33.561]      // while "1"  (timeout="200")
[17:30:33.561]      // while-condition  =>  TRUE
[17:30:33.561]      // while "1"  (timeout="200")
[17:30:33.561]      // while-condition  =>  TRUE
[17:30:33.561]      // while "1"  (timeout="200")
[17:30:33.561]      // while-condition  =>  TRUE
[17:30:33.561]      // while "1"  (timeout="200")
[17:30:33.561]      // while-condition  =>  TRUE
[17:30:33.561]      // while "1"  (timeout="200")
[17:30:33.561]      // while-condition  =>  TRUE
[17:30:33.561]      // while "1"  (timeout="200")
[17:30:33.561]      // while-condition  =>  TRUE
[17:30:33.562]      // while "1"  (timeout="200")
[17:30:33.562]      // while-condition  =>  TRUE
[17:30:33.562]      // while "1"  (timeout="200")
[17:30:33.562]      // while-condition  =>  TRUE
[17:30:33.562]      // while "1"  (timeout="200")
[17:30:33.562]      // while-condition  =>  TRUE
[17:30:33.562]      // while "1"  (timeout="200")
[17:30:33.562]      // while-condition  =>  TRUE
[17:30:33.562]      // while "1"  (timeout="200")
[17:30:33.562]      // while-condition  =>  TRUE
[17:30:33.562]      // while "1"  (timeout="200")
[17:30:33.562]      // while-condition  =>  TRUE
[17:30:33.563]      // while "1"  (timeout="200")
[17:30:33.563]      // while-condition  =>  TRUE
[17:30:33.563]      // while "1"  (timeout="200")
[17:30:33.563]      // while-condition  =>  TRUE
[17:30:33.563]      // while "1"  (timeout="200")
[17:30:33.564]      // while-condition  =>  TRUE
[17:30:33.564]      // while "1"  (timeout="200")
[17:30:33.564]      // while-condition  =>  TRUE
[17:30:33.564]      // while "1"  (timeout="200")
[17:30:33.564]      // while-condition  =>  TRUE
[17:30:33.564]      // while "1"  (timeout="200")
[17:30:33.564]      // while-condition  =>  TRUE
[17:30:33.565]      // while "1"  (timeout="200")
[17:30:33.565]      // while  =>  TIMEOUT
[17:30:33.565]      // end while "1"
[17:30:33.565]    </control>
[17:30:33.565]    <control if="canReadPins" while="" timeout="0" info="">
[17:30:33.565]      // if-block "canReadPins"
[17:30:33.565]        // =>  TRUE
[17:30:33.565]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:30:33.565]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:30:33.570]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:30:33.570]        // while-condition  =>  FALSE
[17:30:33.571]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:30:33.571]      </control>
[17:30:33.571]      // end if-block "canReadPins"
[17:30:33.571]    </control>
[17:30:33.571]    <control if="!canReadPins" while="" timeout="0" info="">
[17:30:33.571]      // if-block "!canReadPins"
[17:30:33.571]        // =>  FALSE
[17:30:33.571]      // skip if-block "!canReadPins"
[17:30:33.571]    </control>
[17:30:33.571]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:30:33.571]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:30:33.572]        // =>  TRUE
[17:30:33.572]      <block atomic="false" info="">
[17:30:33.572]        WriteAP(0x00, 0x190008);
[17:30:33.573]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:30:33.574]        WriteAP(0xF0, 0x01);
[17:30:33.578]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:30:33.579]      </block>
[17:30:33.579]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:30:33.579]    </control>
[17:30:33.579]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:30:33.579]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:30:33.579]        // =>  FALSE
[17:30:33.580]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:30:33.580]    </control>
[17:30:33.581]    <block atomic="false" info="">
[17:30:33.581]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:30:33.585]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:30:33.586]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:30:33.586]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:30:33.588]      __ap = 0; //lets make sure we reset the access point selection
[17:30:33.588]        // -> [__ap <= 0x00000000]
[17:30:33.588]    </block>
[17:30:33.588]  </sequence>
[17:30:33.588]  
[17:30:33.634]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:30:33.634]  
[17:30:33.634]  <debugvars>
[17:30:33.634]    // Pre-defined
[17:30:33.634]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:30:33.634]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:30:33.634]    __dp=0x00000000
[17:30:33.634]    __ap=0x00000000
[17:30:33.634]    __traceout=0x00000000      (Trace Disabled)
[17:30:33.634]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:30:33.634]    __FlashAddr=0x00000000
[17:30:33.634]    __FlashLen=0x00000000
[17:30:33.634]    __FlashArg=0x00000000
[17:30:33.634]    __FlashOp=0x00000000
[17:30:33.634]    __Result=0x00000000
[17:30:33.635]  </debugvars>
[17:30:33.635]  
[17:30:33.635]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:30:33.635]    <block atomic="false" info="">
[17:30:33.635]      __var deviceID = 0;
[17:30:33.635]        // -> [deviceID <= 0x00000000]
[17:30:33.636]      __var version = 0;
[17:30:33.636]        // -> [version <= 0x00000000]
[17:30:33.637]      __var partNum = 0;
[17:30:33.637]        // -> [partNum <= 0x00000000]
[17:30:33.637]      __var manuf = 0;
[17:30:33.637]        // -> [manuf <= 0x00000000]
[17:30:33.637]      __var isMSPM0G1X0X_G3X0X = 0;
[17:30:33.637]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:30:33.637]      __var isProduction = 0;
[17:30:33.637]        // -> [isProduction <= 0x00000000]
[17:30:33.637]      __var continueId = 0;
[17:30:33.637]        // -> [continueId <= 0x00000000]
[17:30:33.637]      deviceID =   Read32(0x41C40004);
[17:30:33.644]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:30:33.644]        // -> [deviceID <= 0x2BB8802F]
[17:30:33.644]      version = deviceID >> 28;
[17:30:33.644]        // -> [version <= 0x00000002]
[17:30:33.644]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:30:33.644]        // -> [partNum <= 0x0000BB88]
[17:30:33.644]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:30:33.644]        // -> [manuf <= 0x00000017]
[17:30:33.644]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:30:33.644]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:30:33.645]      isProduction = (version > 0);
[17:30:33.645]        // -> [isProduction <= 0x00000001]
[17:30:33.645]    </block>
[17:30:33.645]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:30:33.645]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:30:33.645]        // =>  FALSE
[17:30:33.645]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:30:33.645]    </control>
[17:30:33.645]    <control if="continueId == 4" while="" timeout="0" info="">
[17:30:33.645]      // if-block "continueId == 4"
[17:30:33.645]        // =>  FALSE
[17:30:33.646]      // skip if-block "continueId == 4"
[17:30:33.646]    </control>
[17:30:33.646]    <control if="!isProduction" while="" timeout="0" info="">
[17:30:33.646]      // if-block "!isProduction"
[17:30:33.646]        // =>  FALSE
[17:30:33.646]      // skip if-block "!isProduction"
[17:30:33.646]    </control>
[17:30:33.647]  </sequence>
[17:30:33.647]  
[17:31:34.321]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:31:34.321]  
[17:31:34.325]  <debugvars>
[17:31:34.325]    // Pre-defined
[17:31:34.325]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:31:34.325]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:31:34.325]    __dp=0x00000000
[17:31:34.326]    __ap=0x00000000
[17:31:34.326]    __traceout=0x00000000      (Trace Disabled)
[17:31:34.326]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:31:34.326]    __FlashAddr=0x00000000
[17:31:34.326]    __FlashLen=0x00000000
[17:31:34.326]    __FlashArg=0x00000000
[17:31:34.326]    __FlashOp=0x00000000
[17:31:34.326]    __Result=0x00000000
[17:31:34.326]  </debugvars>
[17:31:34.326]  
[17:31:34.326]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:31:34.326]    <block atomic="false" info="">
[17:31:34.327]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:31:34.327]        // -> [isSWJ <= 0x00000001]
[17:31:34.327]      __var hasDormant = __protocol & 0x00020000;
[17:31:34.327]        // -> [hasDormant <= 0x00000000]
[17:31:34.327]      __var protType   = __protocol & 0x0000FFFF;
[17:31:34.327]        // -> [protType <= 0x00000002]
[17:31:34.327]    </block>
[17:31:34.327]    <control if="protType == 1" while="" timeout="0" info="">
[17:31:34.330]      // if-block "protType == 1"
[17:31:34.330]        // =>  FALSE
[17:31:34.330]      // skip if-block "protType == 1"
[17:31:34.330]    </control>
[17:31:34.331]    <control if="protType == 2" while="" timeout="0" info="">
[17:31:34.331]      // if-block "protType == 2"
[17:31:34.331]        // =>  TRUE
[17:31:34.331]      <control if="isSWJ" while="" timeout="0" info="">
[17:31:34.331]        // if-block "isSWJ"
[17:31:34.331]          // =>  TRUE
[17:31:34.331]        <control if="hasDormant" while="" timeout="0" info="">
[17:31:34.332]          // if-block "hasDormant"
[17:31:34.332]            // =>  FALSE
[17:31:34.332]          // skip if-block "hasDormant"
[17:31:34.332]        </control>
[17:31:34.333]        <control if="!hasDormant" while="" timeout="0" info="">
[17:31:34.333]          // if-block "!hasDormant"
[17:31:34.333]            // =>  TRUE
[17:31:34.333]          <block atomic="false" info="">
[17:31:34.333]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:31:34.336]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:31:34.336]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:31:34.338]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:31:34.338]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:31:34.340]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:31:34.340]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:31:34.345]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:31:34.345]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:31:34.347]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:31:34.347]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:31:34.358]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:31:34.358]          </block>
[17:31:34.358]          // end if-block "!hasDormant"
[17:31:34.358]        </control>
[17:31:34.358]        // end if-block "isSWJ"
[17:31:34.359]      </control>
[17:31:34.359]      <control if="!isSWJ" while="" timeout="0" info="">
[17:31:34.359]        // if-block "!isSWJ"
[17:31:34.360]          // =>  FALSE
[17:31:34.360]        // skip if-block "!isSWJ"
[17:31:34.360]      </control>
[17:31:34.360]      <block atomic="false" info="">
[17:31:34.360]        ReadDP(0x0);
[17:31:34.361]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:31:34.362]      </block>
[17:31:34.362]      // end if-block "protType == 2"
[17:31:34.362]    </control>
[17:31:34.362]  </sequence>
[17:31:34.362]  
[17:31:34.365]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:31:34.365]  
[17:31:34.365]  <debugvars>
[17:31:34.365]    // Pre-defined
[17:31:34.365]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:31:34.365]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:31:34.365]    __dp=0x00000000
[17:31:34.365]    __ap=0x00000000
[17:31:34.366]    __traceout=0x00000000      (Trace Disabled)
[17:31:34.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:31:34.366]    __FlashAddr=0x00000000
[17:31:34.366]    __FlashLen=0x00000000
[17:31:34.366]    __FlashArg=0x00000000
[17:31:34.366]    __FlashOp=0x00000000
[17:31:34.366]    __Result=0x00000000
[17:31:34.366]  </debugvars>
[17:31:34.366]  
[17:31:34.366]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:31:34.366]    <block atomic="false" info="">
[17:31:34.366]      __var SW_DP_ABORT       = 0x0;
[17:31:34.367]        // -> [SW_DP_ABORT <= 0x00000000]
[17:31:34.367]      __var DP_CTRL_STAT      = 0x4;
[17:31:34.367]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:31:34.367]      __var DP_SELECT         = 0x8;
[17:31:34.367]        // -> [DP_SELECT <= 0x00000008]
[17:31:34.367]      __var powered_down      = 0;
[17:31:34.367]        // -> [powered_down <= 0x00000000]
[17:31:34.367]      WriteDP(DP_SELECT, 0x00000000);
[17:31:34.370]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:31:34.370]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:31:34.371]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:31:34.371]        // -> [powered_down <= 0x00000001]
[17:31:34.372]    </block>
[17:31:34.372]    <control if="powered_down" while="" timeout="0" info="">
[17:31:34.372]      // if-block "powered_down"
[17:31:34.372]        // =>  TRUE
[17:31:34.372]      <block atomic="false" info="">
[17:31:34.372]        Message(0, "Debug/System power-up request sent");
[17:31:34.374]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:31:34.385]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:31:34.385]      </block>
[17:31:34.385]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:31:34.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:31:34.389]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:31:34.389]        // while-condition  =>  FALSE
[17:31:34.389]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:31:34.389]      </control>
[17:31:34.389]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:31:34.389]        // if-block "(__protocol & 0xFFFF) == 1"
[17:31:34.389]          // =>  FALSE
[17:31:34.389]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:31:34.389]      </control>
[17:31:34.390]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:31:34.390]        // if-block "(__protocol & 0xFFFF) == 2"
[17:31:34.390]          // =>  TRUE
[17:31:34.390]        <block atomic="false" info="">
[17:31:34.390]          Message(0, "executing SWD power up");
[17:31:34.391]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:31:34.396]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:31:34.398]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:31:34.400]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:31:34.400]        </block>
[17:31:34.401]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:31:34.401]      </control>
[17:31:34.402]      // end if-block "powered_down"
[17:31:34.402]    </control>
[17:31:34.402]    <block atomic="false" info="">
[17:31:34.402]      __var DEBUG_PORT_VAL    = 0;
[17:31:34.402]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:31:34.402]      __var ACCESS_POINT_VAL  = 0;
[17:31:34.402]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:31:34.402]      __ap = 1; 
[17:31:34.402]        // -> [__ap <= 0x00000001]
[17:31:34.402]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:31:34.405]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:31:34.406]      __ap = 4;
[17:31:34.406]        // -> [__ap <= 0x00000004]
[17:31:34.406]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:31:34.409]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:31:34.409]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:31:34.409]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:31:34.411]    </block>
[17:31:34.412]    <block atomic="false" info="">
[17:31:34.412]      __var nReset = 0x80;
[17:31:34.412]        // -> [nReset <= 0x00000080]
[17:31:34.412]      __var canReadPins = 0;
[17:31:34.412]        // -> [canReadPins <= 0x00000000]
[17:31:34.412]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:31:34.418]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:31:34.418]        // -> [canReadPins <= 0x00000001]
[17:31:34.419]    </block>
[17:31:34.419]    <control if="" while="1" timeout="200" info="">
[17:31:34.419]      // while "1"  (timeout="200")
[17:31:34.419]      // while-condition  =>  TRUE
[17:31:34.419]      // while "1"  (timeout="200")
[17:31:34.419]      // while-condition  =>  TRUE
[17:31:34.419]      // while "1"  (timeout="200")
[17:31:34.419]      // while-condition  =>  TRUE
[17:31:34.419]      // while "1"  (timeout="200")
[17:31:34.419]      // while-condition  =>  TRUE
[17:31:34.419]      // while "1"  (timeout="200")
[17:31:34.419]      // while-condition  =>  TRUE
[17:31:34.421]      // while "1"  (timeout="200")
[17:31:34.421]      // while-condition  =>  TRUE
[17:31:34.421]      // while "1"  (timeout="200")
[17:31:34.421]      // while-condition  =>  TRUE
[17:31:34.421]      // while "1"  (timeout="200")
[17:31:34.421]      // while-condition  =>  TRUE
[17:31:34.421]      // while "1"  (timeout="200")
[17:31:34.421]      // while-condition  =>  TRUE
[17:31:34.421]      // while "1"  (timeout="200")
[17:31:34.421]      // while-condition  =>  TRUE
[17:31:34.421]      // while "1"  (timeout="200")
[17:31:34.421]      // while-condition  =>  TRUE
[17:31:34.422]      // while "1"  (timeout="200")
[17:31:34.422]      // while-condition  =>  TRUE
[17:31:34.422]      // while "1"  (timeout="200")
[17:31:34.422]      // while-condition  =>  TRUE
[17:31:34.422]      // while "1"  (timeout="200")
[17:31:34.422]      // while-condition  =>  TRUE
[17:31:34.422]      // while "1"  (timeout="200")
[17:31:34.422]      // while-condition  =>  TRUE
[17:31:34.422]      // while "1"  (timeout="200")
[17:31:34.422]      // while-condition  =>  TRUE
[17:31:34.422]      // while "1"  (timeout="200")
[17:31:34.422]      // while-condition  =>  TRUE
[17:31:34.423]      // while "1"  (timeout="200")
[17:31:34.423]      // while-condition  =>  TRUE
[17:31:34.423]      // while "1"  (timeout="200")
[17:31:34.423]      // while-condition  =>  TRUE
[17:31:34.423]      // while "1"  (timeout="200")
[17:31:34.423]      // while-condition  =>  TRUE
[17:31:34.423]      // while "1"  (timeout="200")
[17:31:34.423]      // while-condition  =>  TRUE
[17:31:34.423]      // while "1"  (timeout="200")
[17:31:34.423]      // while-condition  =>  TRUE
[17:31:34.423]      // while "1"  (timeout="200")
[17:31:34.423]      // while-condition  =>  TRUE
[17:31:34.423]      // while "1"  (timeout="200")
[17:31:34.424]      // while-condition  =>  TRUE
[17:31:34.424]      // while "1"  (timeout="200")
[17:31:34.424]      // while  =>  TIMEOUT
[17:31:34.424]      // end while "1"
[17:31:34.424]    </control>
[17:31:34.424]    <control if="canReadPins" while="" timeout="0" info="">
[17:31:34.424]      // if-block "canReadPins"
[17:31:34.424]        // =>  TRUE
[17:31:34.424]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:31:34.424]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:31:34.425]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:31:34.425]        // while-condition  =>  FALSE
[17:31:34.427]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:31:34.427]      </control>
[17:31:34.427]      // end if-block "canReadPins"
[17:31:34.427]    </control>
[17:31:34.427]    <control if="!canReadPins" while="" timeout="0" info="">
[17:31:34.427]      // if-block "!canReadPins"
[17:31:34.427]        // =>  FALSE
[17:31:34.427]      // skip if-block "!canReadPins"
[17:31:34.427]    </control>
[17:31:34.427]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:31:34.427]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:31:34.428]        // =>  TRUE
[17:31:34.428]      <block atomic="false" info="">
[17:31:34.428]        WriteAP(0x00, 0x190008);
[17:31:34.434]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:31:34.434]        WriteAP(0xF0, 0x01);
[17:31:34.443]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:31:34.443]      </block>
[17:31:34.443]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:31:34.443]    </control>
[17:31:34.444]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:31:34.444]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:31:34.444]        // =>  FALSE
[17:31:34.444]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:31:34.444]    </control>
[17:31:34.444]    <block atomic="false" info="">
[17:31:34.445]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:31:34.455]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:31:34.455]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:31:34.455]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:31:34.457]      __ap = 0; //lets make sure we reset the access point selection
[17:31:34.457]        // -> [__ap <= 0x00000000]
[17:31:34.458]    </block>
[17:31:34.458]  </sequence>
[17:31:34.458]  
[17:31:34.485]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:31:34.485]  
[17:31:34.485]  <debugvars>
[17:31:34.485]    // Pre-defined
[17:31:34.486]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:31:34.486]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:31:34.486]    __dp=0x00000000
[17:31:34.486]    __ap=0x00000000
[17:31:34.486]    __traceout=0x00000000      (Trace Disabled)
[17:31:34.486]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:31:34.486]    __FlashAddr=0x00000000
[17:31:34.486]    __FlashLen=0x00000000
[17:31:34.486]    __FlashArg=0x00000000
[17:31:34.486]    __FlashOp=0x00000000
[17:31:34.486]    __Result=0x00000000
[17:31:34.486]  </debugvars>
[17:31:34.487]  
[17:31:34.487]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:31:34.487]    <block atomic="false" info="">
[17:31:34.487]      __var deviceID = 0;
[17:31:34.487]        // -> [deviceID <= 0x00000000]
[17:31:34.487]      __var version = 0;
[17:31:34.487]        // -> [version <= 0x00000000]
[17:31:34.487]      __var partNum = 0;
[17:31:34.487]        // -> [partNum <= 0x00000000]
[17:31:34.487]      __var manuf = 0;
[17:31:34.488]        // -> [manuf <= 0x00000000]
[17:31:34.488]      __var isMSPM0G1X0X_G3X0X = 0;
[17:31:34.488]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:31:34.488]      __var isProduction = 0;
[17:31:34.488]        // -> [isProduction <= 0x00000000]
[17:31:34.488]      __var continueId = 0;
[17:31:34.488]        // -> [continueId <= 0x00000000]
[17:31:34.488]      deviceID =   Read32(0x41C40004);
[17:31:34.492]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:31:34.492]        // -> [deviceID <= 0x2BB8802F]
[17:31:34.493]      version = deviceID >> 28;
[17:31:34.493]        // -> [version <= 0x00000002]
[17:31:34.493]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:31:34.493]        // -> [partNum <= 0x0000BB88]
[17:31:34.493]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:31:34.493]        // -> [manuf <= 0x00000017]
[17:31:34.493]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:31:34.493]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:31:34.493]      isProduction = (version > 0);
[17:31:34.493]        // -> [isProduction <= 0x00000001]
[17:31:34.493]    </block>
[17:31:34.494]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:31:34.494]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:31:34.494]        // =>  FALSE
[17:31:34.494]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:31:34.494]    </control>
[17:31:34.494]    <control if="continueId == 4" while="" timeout="0" info="">
[17:31:34.494]      // if-block "continueId == 4"
[17:31:34.494]        // =>  FALSE
[17:31:34.494]      // skip if-block "continueId == 4"
[17:31:34.494]    </control>
[17:31:34.494]    <control if="!isProduction" while="" timeout="0" info="">
[17:31:34.494]      // if-block "!isProduction"
[17:31:34.495]        // =>  FALSE
[17:31:34.495]      // skip if-block "!isProduction"
[17:31:34.495]    </control>
[17:31:34.495]  </sequence>
[17:31:34.495]  
[17:32:26.674]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:32:26.674]  
[17:32:26.683]  <debugvars>
[17:32:26.683]    // Pre-defined
[17:32:26.683]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:32:26.683]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:32:26.683]    __dp=0x00000000
[17:32:26.683]    __ap=0x00000000
[17:32:26.683]    __traceout=0x00000000      (Trace Disabled)
[17:32:26.684]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:32:26.684]    __FlashAddr=0x00000000
[17:32:26.684]    __FlashLen=0x00000000
[17:32:26.684]    __FlashArg=0x00000000
[17:32:26.684]    __FlashOp=0x00000000
[17:32:26.684]    __Result=0x00000000
[17:32:26.684]  </debugvars>
[17:32:26.684]  
[17:32:26.684]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:32:26.684]    <block atomic="false" info="">
[17:32:26.684]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:32:26.685]        // -> [isSWJ <= 0x00000001]
[17:32:26.685]      __var hasDormant = __protocol & 0x00020000;
[17:32:26.685]        // -> [hasDormant <= 0x00000000]
[17:32:26.685]      __var protType   = __protocol & 0x0000FFFF;
[17:32:26.685]        // -> [protType <= 0x00000002]
[17:32:26.685]    </block>
[17:32:26.685]    <control if="protType == 1" while="" timeout="0" info="">
[17:32:26.685]      // if-block "protType == 1"
[17:32:26.685]        // =>  FALSE
[17:32:26.685]      // skip if-block "protType == 1"
[17:32:26.686]    </control>
[17:32:26.686]    <control if="protType == 2" while="" timeout="0" info="">
[17:32:26.686]      // if-block "protType == 2"
[17:32:26.686]        // =>  TRUE
[17:32:26.686]      <control if="isSWJ" while="" timeout="0" info="">
[17:32:26.687]        // if-block "isSWJ"
[17:32:26.687]          // =>  TRUE
[17:32:26.688]        <control if="hasDormant" while="" timeout="0" info="">
[17:32:26.688]          // if-block "hasDormant"
[17:32:26.688]            // =>  FALSE
[17:32:26.688]          // skip if-block "hasDormant"
[17:32:26.688]        </control>
[17:32:26.688]        <control if="!hasDormant" while="" timeout="0" info="">
[17:32:26.688]          // if-block "!hasDormant"
[17:32:26.688]            // =>  TRUE
[17:32:26.688]          <block atomic="false" info="">
[17:32:26.689]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:32:26.690]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:32:26.690]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:32:26.694]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:32:26.694]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:32:26.696]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:32:26.696]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:32:26.697]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:32:26.698]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:32:26.699]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:32:26.699]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:32:26.700]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:32:26.701]          </block>
[17:32:26.701]          // end if-block "!hasDormant"
[17:32:26.701]        </control>
[17:32:26.701]        // end if-block "isSWJ"
[17:32:26.701]      </control>
[17:32:26.701]      <control if="!isSWJ" while="" timeout="0" info="">
[17:32:26.701]        // if-block "!isSWJ"
[17:32:26.701]          // =>  FALSE
[17:32:26.701]        // skip if-block "!isSWJ"
[17:32:26.701]      </control>
[17:32:26.701]      <block atomic="false" info="">
[17:32:26.701]        ReadDP(0x0);
[17:32:26.702]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:32:26.702]      </block>
[17:32:26.702]      // end if-block "protType == 2"
[17:32:26.702]    </control>
[17:32:26.702]  </sequence>
[17:32:26.703]  
[17:32:26.706]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:32:26.706]  
[17:32:26.706]  <debugvars>
[17:32:26.706]    // Pre-defined
[17:32:26.706]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:32:26.706]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:32:26.706]    __dp=0x00000000
[17:32:26.706]    __ap=0x00000000
[17:32:26.707]    __traceout=0x00000000      (Trace Disabled)
[17:32:26.707]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:32:26.707]    __FlashAddr=0x00000000
[17:32:26.707]    __FlashLen=0x00000000
[17:32:26.707]    __FlashArg=0x00000000
[17:32:26.708]    __FlashOp=0x00000000
[17:32:26.708]    __Result=0x00000000
[17:32:26.708]  </debugvars>
[17:32:26.708]  
[17:32:26.708]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:32:26.708]    <block atomic="false" info="">
[17:32:26.708]      __var SW_DP_ABORT       = 0x0;
[17:32:26.708]        // -> [SW_DP_ABORT <= 0x00000000]
[17:32:26.708]      __var DP_CTRL_STAT      = 0x4;
[17:32:26.708]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:32:26.708]      __var DP_SELECT         = 0x8;
[17:32:26.708]        // -> [DP_SELECT <= 0x00000008]
[17:32:26.708]      __var powered_down      = 0;
[17:32:26.708]        // -> [powered_down <= 0x00000000]
[17:32:26.708]      WriteDP(DP_SELECT, 0x00000000);
[17:32:26.709]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:32:26.711]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:32:26.712]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:32:26.712]        // -> [powered_down <= 0x00000001]
[17:32:26.712]    </block>
[17:32:26.712]    <control if="powered_down" while="" timeout="0" info="">
[17:32:26.712]      // if-block "powered_down"
[17:32:26.713]        // =>  TRUE
[17:32:26.713]      <block atomic="false" info="">
[17:32:26.713]        Message(0, "Debug/System power-up request sent");
[17:32:26.714]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:32:26.716]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:32:26.717]      </block>
[17:32:26.717]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:32:26.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:32:26.718]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:32:26.718]        // while-condition  =>  FALSE
[17:32:26.718]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:32:26.718]      </control>
[17:32:26.718]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:32:26.718]        // if-block "(__protocol & 0xFFFF) == 1"
[17:32:26.718]          // =>  FALSE
[17:32:26.718]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:32:26.718]      </control>
[17:32:26.718]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:32:26.718]        // if-block "(__protocol & 0xFFFF) == 2"
[17:32:26.720]          // =>  TRUE
[17:32:26.720]        <block atomic="false" info="">
[17:32:26.720]          Message(0, "executing SWD power up");
[17:32:26.721]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:32:26.722]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:32:26.722]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:32:26.725]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:32:26.725]        </block>
[17:32:26.725]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:32:26.725]      </control>
[17:32:26.725]      // end if-block "powered_down"
[17:32:26.725]    </control>
[17:32:26.725]    <block atomic="false" info="">
[17:32:26.725]      __var DEBUG_PORT_VAL    = 0;
[17:32:26.726]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:32:26.726]      __var ACCESS_POINT_VAL  = 0;
[17:32:26.726]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:32:26.726]      __ap = 1; 
[17:32:26.726]        // -> [__ap <= 0x00000001]
[17:32:26.726]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:32:26.731]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:32:26.731]      __ap = 4;
[17:32:26.731]        // -> [__ap <= 0x00000004]
[17:32:26.731]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:32:26.734]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:32:26.734]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:32:26.734]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:32:26.735]    </block>
[17:32:26.736]    <block atomic="false" info="">
[17:32:26.736]      __var nReset = 0x80;
[17:32:26.736]        // -> [nReset <= 0x00000080]
[17:32:26.736]      __var canReadPins = 0;
[17:32:26.736]        // -> [canReadPins <= 0x00000000]
[17:32:26.736]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:32:26.737]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:32:26.738]        // -> [canReadPins <= 0x00000001]
[17:32:26.738]    </block>
[17:32:26.738]    <control if="" while="1" timeout="200" info="">
[17:32:26.738]      // while "1"  (timeout="200")
[17:32:26.738]      // while-condition  =>  TRUE
[17:32:26.738]      // while "1"  (timeout="200")
[17:32:26.738]      // while-condition  =>  TRUE
[17:32:26.738]      // while "1"  (timeout="200")
[17:32:26.739]      // while-condition  =>  TRUE
[17:32:26.739]      // while "1"  (timeout="200")
[17:32:26.739]      // while-condition  =>  TRUE
[17:32:26.739]      // while "1"  (timeout="200")
[17:32:26.740]      // while-condition  =>  TRUE
[17:32:26.740]      // while "1"  (timeout="200")
[17:32:26.740]      // while-condition  =>  TRUE
[17:32:26.740]      // while "1"  (timeout="200")
[17:32:26.740]      // while-condition  =>  TRUE
[17:32:26.740]      // while "1"  (timeout="200")
[17:32:26.740]      // while-condition  =>  TRUE
[17:32:26.740]      // while "1"  (timeout="200")
[17:32:26.740]      // while-condition  =>  TRUE
[17:32:26.740]      // while "1"  (timeout="200")
[17:32:26.740]      // while-condition  =>  TRUE
[17:32:26.740]      // while "1"  (timeout="200")
[17:32:26.741]      // while-condition  =>  TRUE
[17:32:26.741]      // while "1"  (timeout="200")
[17:32:26.741]      // while-condition  =>  TRUE
[17:32:26.741]      // while "1"  (timeout="200")
[17:32:26.741]      // while-condition  =>  TRUE
[17:32:26.741]      // while "1"  (timeout="200")
[17:32:26.741]      // while-condition  =>  TRUE
[17:32:26.741]      // while "1"  (timeout="200")
[17:32:26.741]      // while-condition  =>  TRUE
[17:32:26.741]      // while "1"  (timeout="200")
[17:32:26.741]      // while-condition  =>  TRUE
[17:32:26.741]      // while "1"  (timeout="200")
[17:32:26.741]      // while-condition  =>  TRUE
[17:32:26.741]      // while "1"  (timeout="200")
[17:32:26.743]      // while-condition  =>  TRUE
[17:32:26.743]      // while "1"  (timeout="200")
[17:32:26.743]      // while-condition  =>  TRUE
[17:32:26.743]      // while "1"  (timeout="200")
[17:32:26.743]      // while-condition  =>  TRUE
[17:32:26.743]      // while "1"  (timeout="200")
[17:32:26.743]      // while-condition  =>  TRUE
[17:32:26.743]      // while "1"  (timeout="200")
[17:32:26.743]      // while-condition  =>  TRUE
[17:32:26.743]      // while "1"  (timeout="200")
[17:32:26.743]      // while-condition  =>  TRUE
[17:32:26.743]      // while "1"  (timeout="200")
[17:32:26.743]      // while-condition  =>  TRUE
[17:32:26.743]      // while "1"  (timeout="200")
[17:32:26.743]      // while-condition  =>  TRUE
[17:32:26.743]      // while "1"  (timeout="200")
[17:32:26.743]      // while-condition  =>  TRUE
[17:32:26.743]      // while "1"  (timeout="200")
[17:32:26.743]      // while-condition  =>  TRUE
[17:32:26.743]      // while "1"  (timeout="200")
[17:32:26.744]      // while-condition  =>  TRUE
[17:32:26.744]      // while "1"  (timeout="200")
[17:32:26.744]      // while-condition  =>  TRUE
[17:32:26.744]      // while "1"  (timeout="200")
[17:32:26.744]      // while-condition  =>  TRUE
[17:32:26.744]      // while "1"  (timeout="200")
[17:32:26.744]      // while-condition  =>  TRUE
[17:32:26.744]      // while "1"  (timeout="200")
[17:32:26.744]      // while-condition  =>  TRUE
[17:32:26.744]      // while "1"  (timeout="200")
[17:32:26.744]      // while-condition  =>  TRUE
[17:32:26.746]      // while "1"  (timeout="200")
[17:32:26.746]      // while-condition  =>  TRUE
[17:32:26.746]      // while "1"  (timeout="200")
[17:32:26.746]      // while-condition  =>  TRUE
[17:32:26.746]      // while "1"  (timeout="200")
[17:32:26.746]      // while-condition  =>  TRUE
[17:32:26.746]      // while "1"  (timeout="200")
[17:32:26.746]      // while-condition  =>  TRUE
[17:32:26.746]      // while "1"  (timeout="200")
[17:32:26.746]      // while-condition  =>  TRUE
[17:32:26.746]      // while "1"  (timeout="200")
[17:32:26.747]      // while-condition  =>  TRUE
[17:32:26.747]      // while "1"  (timeout="200")
[17:32:26.747]      // while-condition  =>  TRUE
[17:32:26.747]      // while "1"  (timeout="200")
[17:32:26.747]      // while-condition  =>  TRUE
[17:32:26.747]      // while "1"  (timeout="200")
[17:32:26.747]      // while-condition  =>  TRUE
[17:32:26.747]      // while "1"  (timeout="200")
[17:32:26.747]      // while-condition  =>  TRUE
[17:32:26.747]      // while "1"  (timeout="200")
[17:32:26.748]      // while-condition  =>  TRUE
[17:32:26.748]      // while "1"  (timeout="200")
[17:32:26.748]      // while-condition  =>  TRUE
[17:32:26.748]      // while "1"  (timeout="200")
[17:32:26.748]      // while-condition  =>  TRUE
[17:32:26.748]      // while "1"  (timeout="200")
[17:32:26.748]      // while-condition  =>  TRUE
[17:32:26.748]      // while "1"  (timeout="200")
[17:32:26.749]      // while-condition  =>  TRUE
[17:32:26.749]      // while "1"  (timeout="200")
[17:32:26.749]      // while-condition  =>  TRUE
[17:32:26.749]      // while "1"  (timeout="200")
[17:32:26.749]      // while-condition  =>  TRUE
[17:32:26.749]      // while "1"  (timeout="200")
[17:32:26.749]      // while-condition  =>  TRUE
[17:32:26.749]      // while "1"  (timeout="200")
[17:32:26.749]      // while-condition  =>  TRUE
[17:32:26.749]      // while "1"  (timeout="200")
[17:32:26.750]      // while-condition  =>  TRUE
[17:32:26.750]      // while "1"  (timeout="200")
[17:32:26.750]      // while-condition  =>  TRUE
[17:32:26.750]      // while "1"  (timeout="200")
[17:32:26.750]      // while-condition  =>  TRUE
[17:32:26.750]      // while "1"  (timeout="200")
[17:32:26.750]      // while-condition  =>  TRUE
[17:32:26.750]      // while "1"  (timeout="200")
[17:32:26.750]      // while-condition  =>  TRUE
[17:32:26.750]      // while "1"  (timeout="200")
[17:32:26.750]      // while-condition  =>  TRUE
[17:32:26.750]      // while "1"  (timeout="200")
[17:32:26.750]      // while-condition  =>  TRUE
[17:32:26.750]      // while "1"  (timeout="200")
[17:32:26.750]      // while-condition  =>  TRUE
[17:32:26.751]      // while "1"  (timeout="200")
[17:32:26.751]      // while-condition  =>  TRUE
[17:32:26.751]      // while "1"  (timeout="200")
[17:32:26.751]      // while-condition  =>  TRUE
[17:32:26.751]      // while "1"  (timeout="200")
[17:32:26.751]      // while-condition  =>  TRUE
[17:32:26.751]      // while "1"  (timeout="200")
[17:32:26.751]      // while-condition  =>  TRUE
[17:32:26.751]      // while "1"  (timeout="200")
[17:32:26.752]      // while-condition  =>  TRUE
[17:32:26.752]      // while "1"  (timeout="200")
[17:32:26.752]      // while  =>  TIMEOUT
[17:32:26.752]      // end while "1"
[17:32:26.752]    </control>
[17:32:26.752]    <control if="canReadPins" while="" timeout="0" info="">
[17:32:26.752]      // if-block "canReadPins"
[17:32:26.752]        // =>  TRUE
[17:32:26.752]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:32:26.752]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:32:26.754]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:32:26.754]        // while-condition  =>  FALSE
[17:32:26.754]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:32:26.754]      </control>
[17:32:26.755]      // end if-block "canReadPins"
[17:32:26.755]    </control>
[17:32:26.755]    <control if="!canReadPins" while="" timeout="0" info="">
[17:32:26.755]      // if-block "!canReadPins"
[17:32:26.755]        // =>  FALSE
[17:32:26.755]      // skip if-block "!canReadPins"
[17:32:26.755]    </control>
[17:32:26.755]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:32:26.755]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:32:26.755]        // =>  TRUE
[17:32:26.755]      <block atomic="false" info="">
[17:32:26.756]        WriteAP(0x00, 0x190008);
[17:32:26.758]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:32:26.758]        WriteAP(0xF0, 0x01);
[17:32:26.761]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:32:26.761]      </block>
[17:32:26.761]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:32:26.761]    </control>
[17:32:26.761]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:32:26.761]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:32:26.762]        // =>  FALSE
[17:32:26.762]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:32:26.762]    </control>
[17:32:26.762]    <block atomic="false" info="">
[17:32:26.762]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:32:26.765]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:32:26.767]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:32:26.767]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:32:26.769]      __ap = 0; //lets make sure we reset the access point selection
[17:32:26.769]        // -> [__ap <= 0x00000000]
[17:32:26.769]    </block>
[17:32:26.769]  </sequence>
[17:32:26.769]  
[17:32:26.799]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:32:26.799]  
[17:32:26.799]  <debugvars>
[17:32:26.799]    // Pre-defined
[17:32:26.799]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:32:26.799]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:32:26.799]    __dp=0x00000000
[17:32:26.799]    __ap=0x00000000
[17:32:26.799]    __traceout=0x00000000      (Trace Disabled)
[17:32:26.799]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:32:26.800]    __FlashAddr=0x00000000
[17:32:26.800]    __FlashLen=0x00000000
[17:32:26.800]    __FlashArg=0x00000000
[17:32:26.800]    __FlashOp=0x00000000
[17:32:26.800]    __Result=0x00000000
[17:32:26.800]  </debugvars>
[17:32:26.800]  
[17:32:26.800]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:32:26.801]    <block atomic="false" info="">
[17:32:26.801]      __var deviceID = 0;
[17:32:26.801]        // -> [deviceID <= 0x00000000]
[17:32:26.801]      __var version = 0;
[17:32:26.801]        // -> [version <= 0x00000000]
[17:32:26.801]      __var partNum = 0;
[17:32:26.801]        // -> [partNum <= 0x00000000]
[17:32:26.801]      __var manuf = 0;
[17:32:26.801]        // -> [manuf <= 0x00000000]
[17:32:26.801]      __var isMSPM0G1X0X_G3X0X = 0;
[17:32:26.801]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:32:26.801]      __var isProduction = 0;
[17:32:26.801]        // -> [isProduction <= 0x00000000]
[17:32:26.802]      __var continueId = 0;
[17:32:26.802]        // -> [continueId <= 0x00000000]
[17:32:26.802]      deviceID =   Read32(0x41C40004);
[17:32:26.812]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:32:26.812]        // -> [deviceID <= 0x2BB8802F]
[17:32:26.812]      version = deviceID >> 28;
[17:32:26.812]        // -> [version <= 0x00000002]
[17:32:26.812]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:32:26.812]        // -> [partNum <= 0x0000BB88]
[17:32:26.812]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:32:26.812]        // -> [manuf <= 0x00000017]
[17:32:26.812]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:32:26.812]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:32:26.812]      isProduction = (version > 0);
[17:32:26.812]        // -> [isProduction <= 0x00000001]
[17:32:26.812]    </block>
[17:32:26.812]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:32:26.812]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:32:26.812]        // =>  FALSE
[17:32:26.812]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:32:26.812]    </control>
[17:32:26.814]    <control if="continueId == 4" while="" timeout="0" info="">
[17:32:26.814]      // if-block "continueId == 4"
[17:32:26.814]        // =>  FALSE
[17:32:26.814]      // skip if-block "continueId == 4"
[17:32:26.814]    </control>
[17:32:26.814]    <control if="!isProduction" while="" timeout="0" info="">
[17:32:26.814]      // if-block "!isProduction"
[17:32:26.814]        // =>  FALSE
[17:32:26.814]      // skip if-block "!isProduction"
[17:32:26.814]    </control>
[17:32:26.815]  </sequence>
[17:32:26.815]  
[17:34:24.497]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:34:24.497]  
[17:34:24.507]  <debugvars>
[17:34:24.507]    // Pre-defined
[17:34:24.507]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:34:24.507]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:34:24.507]    __dp=0x00000000
[17:34:24.507]    __ap=0x00000000
[17:34:24.507]    __traceout=0x00000000      (Trace Disabled)
[17:34:24.507]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:34:24.507]    __FlashAddr=0x00000000
[17:34:24.508]    __FlashLen=0x00000000
[17:34:24.508]    __FlashArg=0x00000000
[17:34:24.508]    __FlashOp=0x00000000
[17:34:24.508]    __Result=0x00000000
[17:34:24.508]  </debugvars>
[17:34:24.509]  
[17:34:24.509]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:34:24.509]    <block atomic="false" info="">
[17:34:24.509]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:34:24.509]        // -> [isSWJ <= 0x00000001]
[17:34:24.509]      __var hasDormant = __protocol & 0x00020000;
[17:34:24.509]        // -> [hasDormant <= 0x00000000]
[17:34:24.509]      __var protType   = __protocol & 0x0000FFFF;
[17:34:24.509]        // -> [protType <= 0x00000002]
[17:34:24.509]    </block>
[17:34:24.509]    <control if="protType == 1" while="" timeout="0" info="">
[17:34:24.509]      // if-block "protType == 1"
[17:34:24.509]        // =>  FALSE
[17:34:24.509]      // skip if-block "protType == 1"
[17:34:24.509]    </control>
[17:34:24.509]    <control if="protType == 2" while="" timeout="0" info="">
[17:34:24.509]      // if-block "protType == 2"
[17:34:24.509]        // =>  TRUE
[17:34:24.509]      <control if="isSWJ" while="" timeout="0" info="">
[17:34:24.510]        // if-block "isSWJ"
[17:34:24.510]          // =>  TRUE
[17:34:24.510]        <control if="hasDormant" while="" timeout="0" info="">
[17:34:24.510]          // if-block "hasDormant"
[17:34:24.510]            // =>  FALSE
[17:34:24.510]          // skip if-block "hasDormant"
[17:34:24.510]        </control>
[17:34:24.510]        <control if="!hasDormant" while="" timeout="0" info="">
[17:34:24.510]          // if-block "!hasDormant"
[17:34:24.510]            // =>  TRUE
[17:34:24.510]          <block atomic="false" info="">
[17:34:24.510]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:34:24.512]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:34:24.512]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:34:24.514]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:34:24.514]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:34:24.516]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:34:24.516]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:34:24.517]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:34:24.517]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:34:24.518]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:34:24.519]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:34:24.520]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:34:24.520]          </block>
[17:34:24.520]          // end if-block "!hasDormant"
[17:34:24.520]        </control>
[17:34:24.520]        // end if-block "isSWJ"
[17:34:24.520]      </control>
[17:34:24.520]      <control if="!isSWJ" while="" timeout="0" info="">
[17:34:24.520]        // if-block "!isSWJ"
[17:34:24.520]          // =>  FALSE
[17:34:24.520]        // skip if-block "!isSWJ"
[17:34:24.520]      </control>
[17:34:24.520]      <block atomic="false" info="">
[17:34:24.520]        ReadDP(0x0);
[17:34:24.522]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:34:24.522]      </block>
[17:34:24.522]      // end if-block "protType == 2"
[17:34:24.523]    </control>
[17:34:24.523]  </sequence>
[17:34:24.523]  
[17:34:24.526]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:34:24.526]  
[17:34:24.526]  <debugvars>
[17:34:24.526]    // Pre-defined
[17:34:24.526]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:34:24.526]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:34:24.526]    __dp=0x00000000
[17:34:24.526]    __ap=0x00000000
[17:34:24.526]    __traceout=0x00000000      (Trace Disabled)
[17:34:24.526]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:34:24.526]    __FlashAddr=0x00000000
[17:34:24.526]    __FlashLen=0x00000000
[17:34:24.526]    __FlashArg=0x00000000
[17:34:24.526]    __FlashOp=0x00000000
[17:34:24.527]    __Result=0x00000000
[17:34:24.527]  </debugvars>
[17:34:24.527]  
[17:34:24.527]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:34:24.527]    <block atomic="false" info="">
[17:34:24.527]      __var SW_DP_ABORT       = 0x0;
[17:34:24.527]        // -> [SW_DP_ABORT <= 0x00000000]
[17:34:24.527]      __var DP_CTRL_STAT      = 0x4;
[17:34:24.527]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:34:24.529]      __var DP_SELECT         = 0x8;
[17:34:24.529]        // -> [DP_SELECT <= 0x00000008]
[17:34:24.529]      __var powered_down      = 0;
[17:34:24.529]        // -> [powered_down <= 0x00000000]
[17:34:24.529]      WriteDP(DP_SELECT, 0x00000000);
[17:34:24.530]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:34:24.531]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:34:24.531]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:34:24.532]        // -> [powered_down <= 0x00000001]
[17:34:24.532]    </block>
[17:34:24.532]    <control if="powered_down" while="" timeout="0" info="">
[17:34:24.532]      // if-block "powered_down"
[17:34:24.532]        // =>  TRUE
[17:34:24.532]      <block atomic="false" info="">
[17:34:24.532]        Message(0, "Debug/System power-up request sent");
[17:34:24.534]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:34:24.535]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:34:24.535]      </block>
[17:34:24.536]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:34:24.536]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:34:24.537]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:34:24.537]        // while-condition  =>  FALSE
[17:34:24.538]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:34:24.538]      </control>
[17:34:24.538]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:34:24.538]        // if-block "(__protocol & 0xFFFF) == 1"
[17:34:24.538]          // =>  FALSE
[17:34:24.538]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:34:24.538]      </control>
[17:34:24.538]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:34:24.538]        // if-block "(__protocol & 0xFFFF) == 2"
[17:34:24.538]          // =>  TRUE
[17:34:24.539]        <block atomic="false" info="">
[17:34:24.539]          Message(0, "executing SWD power up");
[17:34:24.540]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:34:24.542]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:34:24.542]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:34:24.544]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:34:24.544]        </block>
[17:34:24.544]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:34:24.544]      </control>
[17:34:24.544]      // end if-block "powered_down"
[17:34:24.544]    </control>
[17:34:24.544]    <block atomic="false" info="">
[17:34:24.545]      __var DEBUG_PORT_VAL    = 0;
[17:34:24.545]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:34:24.545]      __var ACCESS_POINT_VAL  = 0;
[17:34:24.545]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:34:24.545]      __ap = 1; 
[17:34:24.545]        // -> [__ap <= 0x00000001]
[17:34:24.545]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:34:24.549]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:34:24.549]      __ap = 4;
[17:34:24.549]        // -> [__ap <= 0x00000004]
[17:34:24.549]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:34:24.552]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:34:24.552]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:34:24.552]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:34:24.555]    </block>
[17:34:24.555]    <block atomic="false" info="">
[17:34:24.555]      __var nReset = 0x80;
[17:34:24.555]        // -> [nReset <= 0x00000080]
[17:34:24.555]      __var canReadPins = 0;
[17:34:24.555]        // -> [canReadPins <= 0x00000000]
[17:34:24.555]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:34:24.557]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:34:24.557]        // -> [canReadPins <= 0x00000001]
[17:34:24.557]    </block>
[17:34:24.557]    <control if="" while="1" timeout="200" info="">
[17:34:24.557]      // while "1"  (timeout="200")
[17:34:24.558]      // while-condition  =>  TRUE
[17:34:24.558]      // while "1"  (timeout="200")
[17:34:24.558]      // while-condition  =>  TRUE
[17:34:24.558]      // while "1"  (timeout="200")
[17:34:24.558]      // while-condition  =>  TRUE
[17:34:24.558]      // while "1"  (timeout="200")
[17:34:24.558]      // while-condition  =>  TRUE
[17:34:24.559]      // while "1"  (timeout="200")
[17:34:24.559]      // while-condition  =>  TRUE
[17:34:24.559]      // while "1"  (timeout="200")
[17:34:24.559]      // while-condition  =>  TRUE
[17:34:24.559]      // while "1"  (timeout="200")
[17:34:24.559]      // while-condition  =>  TRUE
[17:34:24.559]      // while "1"  (timeout="200")
[17:34:24.559]      // while-condition  =>  TRUE
[17:34:24.559]      // while "1"  (timeout="200")
[17:34:24.560]      // while-condition  =>  TRUE
[17:34:24.560]      // while "1"  (timeout="200")
[17:34:24.560]      // while-condition  =>  TRUE
[17:34:24.560]      // while "1"  (timeout="200")
[17:34:24.560]      // while-condition  =>  TRUE
[17:34:24.560]      // while "1"  (timeout="200")
[17:34:24.560]      // while-condition  =>  TRUE
[17:34:24.560]      // while "1"  (timeout="200")
[17:34:24.560]      // while-condition  =>  TRUE
[17:34:24.560]      // while "1"  (timeout="200")
[17:34:24.560]      // while-condition  =>  TRUE
[17:34:24.560]      // while "1"  (timeout="200")
[17:34:24.560]      // while-condition  =>  TRUE
[17:34:24.560]      // while "1"  (timeout="200")
[17:34:24.560]      // while-condition  =>  TRUE
[17:34:24.560]      // while "1"  (timeout="200")
[17:34:24.560]      // while-condition  =>  TRUE
[17:34:24.560]      // while "1"  (timeout="200")
[17:34:24.561]      // while-condition  =>  TRUE
[17:34:24.561]      // while "1"  (timeout="200")
[17:34:24.561]      // while-condition  =>  TRUE
[17:34:24.561]      // while "1"  (timeout="200")
[17:34:24.561]      // while-condition  =>  TRUE
[17:34:24.561]      // while "1"  (timeout="200")
[17:34:24.561]      // while-condition  =>  TRUE
[17:34:24.561]      // while "1"  (timeout="200")
[17:34:24.563]      // while-condition  =>  TRUE
[17:34:24.563]      // while "1"  (timeout="200")
[17:34:24.563]      // while-condition  =>  TRUE
[17:34:24.563]      // while "1"  (timeout="200")
[17:34:24.563]      // while-condition  =>  TRUE
[17:34:24.563]      // while "1"  (timeout="200")
[17:34:24.563]      // while-condition  =>  TRUE
[17:34:24.563]      // while "1"  (timeout="200")
[17:34:24.563]      // while-condition  =>  TRUE
[17:34:24.563]      // while "1"  (timeout="200")
[17:34:24.563]      // while-condition  =>  TRUE
[17:34:24.563]      // while "1"  (timeout="200")
[17:34:24.563]      // while-condition  =>  TRUE
[17:34:24.563]      // while "1"  (timeout="200")
[17:34:24.564]      // while-condition  =>  TRUE
[17:34:24.564]      // while "1"  (timeout="200")
[17:34:24.564]      // while-condition  =>  TRUE
[17:34:24.564]      // while "1"  (timeout="200")
[17:34:24.564]      // while-condition  =>  TRUE
[17:34:24.565]      // while "1"  (timeout="200")
[17:34:24.565]      // while  =>  TIMEOUT
[17:34:24.565]      // end while "1"
[17:34:24.565]    </control>
[17:34:24.565]    <control if="canReadPins" while="" timeout="0" info="">
[17:34:24.565]      // if-block "canReadPins"
[17:34:24.565]        // =>  TRUE
[17:34:24.565]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:34:24.565]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:34:24.567]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:34:24.567]        // while-condition  =>  FALSE
[17:34:24.567]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:34:24.567]      </control>
[17:34:24.567]      // end if-block "canReadPins"
[17:34:24.567]    </control>
[17:34:24.567]    <control if="!canReadPins" while="" timeout="0" info="">
[17:34:24.567]      // if-block "!canReadPins"
[17:34:24.567]        // =>  FALSE
[17:34:24.567]      // skip if-block "!canReadPins"
[17:34:24.567]    </control>
[17:34:24.569]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:34:24.569]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:34:24.569]        // =>  TRUE
[17:34:24.569]      <block atomic="false" info="">
[17:34:24.569]        WriteAP(0x00, 0x190008);
[17:34:24.573]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:34:24.573]        WriteAP(0xF0, 0x01);
[17:34:24.576]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:34:24.576]      </block>
[17:34:24.576]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:34:24.577]    </control>
[17:34:24.577]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:34:24.577]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:34:24.577]        // =>  FALSE
[17:34:24.577]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:34:24.578]    </control>
[17:34:24.578]    <block atomic="false" info="">
[17:34:24.578]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:34:24.582]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:34:24.582]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:34:24.582]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:34:24.585]      __ap = 0; //lets make sure we reset the access point selection
[17:34:24.585]        // -> [__ap <= 0x00000000]
[17:34:24.585]    </block>
[17:34:24.585]  </sequence>
[17:34:24.586]  
[17:34:24.604]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:34:24.604]  
[17:34:24.605]  <debugvars>
[17:34:24.605]    // Pre-defined
[17:34:24.605]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:34:24.606]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:34:24.606]    __dp=0x00000000
[17:34:24.606]    __ap=0x00000000
[17:34:24.606]    __traceout=0x00000000      (Trace Disabled)
[17:34:24.607]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:34:24.607]    __FlashAddr=0x00000000
[17:34:24.607]    __FlashLen=0x00000000
[17:34:24.607]    __FlashArg=0x00000000
[17:34:24.607]    __FlashOp=0x00000000
[17:34:24.607]    __Result=0x00000000
[17:34:24.607]  </debugvars>
[17:34:24.607]  
[17:34:24.607]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:34:24.607]    <block atomic="false" info="">
[17:34:24.607]      __var deviceID = 0;
[17:34:24.608]        // -> [deviceID <= 0x00000000]
[17:34:24.608]      __var version = 0;
[17:34:24.608]        // -> [version <= 0x00000000]
[17:34:24.608]      __var partNum = 0;
[17:34:24.608]        // -> [partNum <= 0x00000000]
[17:34:24.608]      __var manuf = 0;
[17:34:24.608]        // -> [manuf <= 0x00000000]
[17:34:24.608]      __var isMSPM0G1X0X_G3X0X = 0;
[17:34:24.608]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:34:24.608]      __var isProduction = 0;
[17:34:24.609]        // -> [isProduction <= 0x00000000]
[17:34:24.609]      __var continueId = 0;
[17:34:24.609]        // -> [continueId <= 0x00000000]
[17:34:24.609]      deviceID =   Read32(0x41C40004);
[17:34:24.620]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:34:24.620]        // -> [deviceID <= 0x2BB8802F]
[17:34:24.620]      version = deviceID >> 28;
[17:34:24.620]        // -> [version <= 0x00000002]
[17:34:24.620]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:34:24.620]        // -> [partNum <= 0x0000BB88]
[17:34:24.620]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:34:24.620]        // -> [manuf <= 0x00000017]
[17:34:24.620]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:34:24.620]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:34:24.620]      isProduction = (version > 0);
[17:34:24.620]        // -> [isProduction <= 0x00000001]
[17:34:24.620]    </block>
[17:34:24.620]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:34:24.620]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:34:24.620]        // =>  FALSE
[17:34:24.621]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:34:24.621]    </control>
[17:34:24.621]    <control if="continueId == 4" while="" timeout="0" info="">
[17:34:24.621]      // if-block "continueId == 4"
[17:34:24.621]        // =>  FALSE
[17:34:24.621]      // skip if-block "continueId == 4"
[17:34:24.621]    </control>
[17:34:24.621]    <control if="!isProduction" while="" timeout="0" info="">
[17:34:24.621]      // if-block "!isProduction"
[17:34:24.622]        // =>  FALSE
[17:34:24.622]      // skip if-block "!isProduction"
[17:34:24.622]    </control>
[17:34:24.622]  </sequence>
[17:34:24.622]  
[17:37:16.023]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:37:16.023]  
[17:37:16.023]  <debugvars>
[17:37:16.023]    // Pre-defined
[17:37:16.023]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:37:16.023]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:37:16.023]    __dp=0x00000000
[17:37:16.023]    __ap=0x00000000
[17:37:16.023]    __traceout=0x00000000      (Trace Disabled)
[17:37:16.023]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:37:16.023]    __FlashAddr=0x00000000
[17:37:16.023]    __FlashLen=0x00000000
[17:37:16.023]    __FlashArg=0x00000000
[17:37:16.023]    __FlashOp=0x00000000
[17:37:16.023]    __Result=0x00000000
[17:37:16.023]  </debugvars>
[17:37:16.024]  
[17:37:16.024]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:37:16.024]    <block atomic="false" info="">
[17:37:16.024]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:37:16.024]        // -> [isSWJ <= 0x00000001]
[17:37:16.024]      __var hasDormant = __protocol & 0x00020000;
[17:37:16.024]        // -> [hasDormant <= 0x00000000]
[17:37:16.024]      __var protType   = __protocol & 0x0000FFFF;
[17:37:16.024]        // -> [protType <= 0x00000002]
[17:37:16.024]    </block>
[17:37:16.025]    <control if="protType == 1" while="" timeout="0" info="">
[17:37:16.025]      // if-block "protType == 1"
[17:37:16.025]        // =>  FALSE
[17:37:16.025]      // skip if-block "protType == 1"
[17:37:16.025]    </control>
[17:37:16.025]    <control if="protType == 2" while="" timeout="0" info="">
[17:37:16.025]      // if-block "protType == 2"
[17:37:16.026]        // =>  TRUE
[17:37:16.026]      <control if="isSWJ" while="" timeout="0" info="">
[17:37:16.026]        // if-block "isSWJ"
[17:37:16.026]          // =>  TRUE
[17:37:16.026]        <control if="hasDormant" while="" timeout="0" info="">
[17:37:16.026]          // if-block "hasDormant"
[17:37:16.026]            // =>  FALSE
[17:37:16.026]          // skip if-block "hasDormant"
[17:37:16.026]        </control>
[17:37:16.026]        <control if="!hasDormant" while="" timeout="0" info="">
[17:37:16.026]          // if-block "!hasDormant"
[17:37:16.026]            // =>  TRUE
[17:37:16.026]          <block atomic="false" info="">
[17:37:16.027]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:37:16.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:37:16.028]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:37:16.030]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:37:16.030]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:37:16.033]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:37:16.033]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:37:16.034]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:37:16.034]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:37:16.036]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:37:16.036]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:37:16.037]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:37:16.037]          </block>
[17:37:16.037]          // end if-block "!hasDormant"
[17:37:16.037]        </control>
[17:37:16.037]        // end if-block "isSWJ"
[17:37:16.037]      </control>
[17:37:16.037]      <control if="!isSWJ" while="" timeout="0" info="">
[17:37:16.037]        // if-block "!isSWJ"
[17:37:16.037]          // =>  FALSE
[17:37:16.038]        // skip if-block "!isSWJ"
[17:37:16.038]      </control>
[17:37:16.038]      <block atomic="false" info="">
[17:37:16.038]        ReadDP(0x0);
[17:37:16.040]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:37:16.040]      </block>
[17:37:16.040]      // end if-block "protType == 2"
[17:37:16.040]    </control>
[17:37:16.040]  </sequence>
[17:37:16.040]  
[17:37:16.043]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:37:16.043]  
[17:37:16.043]  <debugvars>
[17:37:16.043]    // Pre-defined
[17:37:16.043]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:37:16.043]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:37:16.043]    __dp=0x00000000
[17:37:16.043]    __ap=0x00000000
[17:37:16.043]    __traceout=0x00000000      (Trace Disabled)
[17:37:16.043]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:37:16.043]    __FlashAddr=0x00000000
[17:37:16.043]    __FlashLen=0x00000000
[17:37:16.043]    __FlashArg=0x00000000
[17:37:16.043]    __FlashOp=0x00000000
[17:37:16.044]    __Result=0x00000000
[17:37:16.044]  </debugvars>
[17:37:16.044]  
[17:37:16.044]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:37:16.044]    <block atomic="false" info="">
[17:37:16.044]      __var SW_DP_ABORT       = 0x0;
[17:37:16.044]        // -> [SW_DP_ABORT <= 0x00000000]
[17:37:16.044]      __var DP_CTRL_STAT      = 0x4;
[17:37:16.044]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:37:16.044]      __var DP_SELECT         = 0x8;
[17:37:16.044]        // -> [DP_SELECT <= 0x00000008]
[17:37:16.045]      __var powered_down      = 0;
[17:37:16.045]        // -> [powered_down <= 0x00000000]
[17:37:16.045]      WriteDP(DP_SELECT, 0x00000000);
[17:37:16.047]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:37:16.047]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:37:16.048]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:37:16.048]        // -> [powered_down <= 0x00000001]
[17:37:16.048]    </block>
[17:37:16.048]    <control if="powered_down" while="" timeout="0" info="">
[17:37:16.048]      // if-block "powered_down"
[17:37:16.049]        // =>  TRUE
[17:37:16.049]      <block atomic="false" info="">
[17:37:16.049]        Message(0, "Debug/System power-up request sent");
[17:37:16.050]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:37:16.053]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:37:16.053]      </block>
[17:37:16.053]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:37:16.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:37:16.054]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:37:16.054]        // while-condition  =>  FALSE
[17:37:16.054]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:37:16.054]      </control>
[17:37:16.054]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:37:16.055]        // if-block "(__protocol & 0xFFFF) == 1"
[17:37:16.055]          // =>  FALSE
[17:37:16.055]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:37:16.055]      </control>
[17:37:16.055]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:37:16.055]        // if-block "(__protocol & 0xFFFF) == 2"
[17:37:16.055]          // =>  TRUE
[17:37:16.055]        <block atomic="false" info="">
[17:37:16.056]          Message(0, "executing SWD power up");
[17:37:16.058]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:37:16.060]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:37:16.060]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:37:16.063]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:37:16.063]        </block>
[17:37:16.063]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:37:16.063]      </control>
[17:37:16.063]      // end if-block "powered_down"
[17:37:16.063]    </control>
[17:37:16.063]    <block atomic="false" info="">
[17:37:16.063]      __var DEBUG_PORT_VAL    = 0;
[17:37:16.064]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:37:16.064]      __var ACCESS_POINT_VAL  = 0;
[17:37:16.064]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:37:16.064]      __ap = 1; 
[17:37:16.064]        // -> [__ap <= 0x00000001]
[17:37:16.065]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:37:16.068]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:37:16.068]      __ap = 4;
[17:37:16.068]        // -> [__ap <= 0x00000004]
[17:37:16.068]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:37:16.070]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:37:16.071]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:37:16.071]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:37:16.072]    </block>
[17:37:16.072]    <block atomic="false" info="">
[17:37:16.072]      __var nReset = 0x80;
[17:37:16.072]        // -> [nReset <= 0x00000080]
[17:37:16.073]      __var canReadPins = 0;
[17:37:16.073]        // -> [canReadPins <= 0x00000000]
[17:37:16.073]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:37:16.075]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:37:16.075]        // -> [canReadPins <= 0x00000001]
[17:37:16.075]    </block>
[17:37:16.075]    <control if="" while="1" timeout="200" info="">
[17:37:16.075]      // while "1"  (timeout="200")
[17:37:16.076]      // while-condition  =>  TRUE
[17:37:16.076]      // while "1"  (timeout="200")
[17:37:16.076]      // while-condition  =>  TRUE
[17:37:16.076]      // while "1"  (timeout="200")
[17:37:16.076]      // while-condition  =>  TRUE
[17:37:16.076]      // while "1"  (timeout="200")
[17:37:16.076]      // while-condition  =>  TRUE
[17:37:16.076]      // while "1"  (timeout="200")
[17:37:16.076]      // while-condition  =>  TRUE
[17:37:16.076]      // while "1"  (timeout="200")
[17:37:16.077]      // while-condition  =>  TRUE
[17:37:16.077]      // while "1"  (timeout="200")
[17:37:16.077]      // while-condition  =>  TRUE
[17:37:16.077]      // while "1"  (timeout="200")
[17:37:16.077]      // while-condition  =>  TRUE
[17:37:16.077]      // while "1"  (timeout="200")
[17:37:16.077]      // while-condition  =>  TRUE
[17:37:16.077]      // while "1"  (timeout="200")
[17:37:16.077]      // while-condition  =>  TRUE
[17:37:16.077]      // while "1"  (timeout="200")
[17:37:16.077]      // while-condition  =>  TRUE
[17:37:16.078]      // while "1"  (timeout="200")
[17:37:16.078]      // while-condition  =>  TRUE
[17:37:16.078]      // while "1"  (timeout="200")
[17:37:16.078]      // while-condition  =>  TRUE
[17:37:16.078]      // while "1"  (timeout="200")
[17:37:16.078]      // while-condition  =>  TRUE
[17:37:16.078]      // while "1"  (timeout="200")
[17:37:16.078]      // while-condition  =>  TRUE
[17:37:16.078]      // while "1"  (timeout="200")
[17:37:16.078]      // while-condition  =>  TRUE
[17:37:16.078]      // while "1"  (timeout="200")
[17:37:16.078]      // while-condition  =>  TRUE
[17:37:16.078]      // while "1"  (timeout="200")
[17:37:16.079]      // while-condition  =>  TRUE
[17:37:16.079]      // while "1"  (timeout="200")
[17:37:16.079]      // while-condition  =>  TRUE
[17:37:16.079]      // while "1"  (timeout="200")
[17:37:16.079]      // while-condition  =>  TRUE
[17:37:16.079]      // while "1"  (timeout="200")
[17:37:16.079]      // while-condition  =>  TRUE
[17:37:16.079]      // while "1"  (timeout="200")
[17:37:16.079]      // while-condition  =>  TRUE
[17:37:16.079]      // while "1"  (timeout="200")
[17:37:16.079]      // while-condition  =>  TRUE
[17:37:16.080]      // while "1"  (timeout="200")
[17:37:16.080]      // while-condition  =>  TRUE
[17:37:16.080]      // while "1"  (timeout="200")
[17:37:16.080]      // while-condition  =>  TRUE
[17:37:16.080]      // while "1"  (timeout="200")
[17:37:16.080]      // while-condition  =>  TRUE
[17:37:16.080]      // while "1"  (timeout="200")
[17:37:16.080]      // while-condition  =>  TRUE
[17:37:16.080]      // while "1"  (timeout="200")
[17:37:16.080]      // while-condition  =>  TRUE
[17:37:16.080]      // while "1"  (timeout="200")
[17:37:16.080]      // while-condition  =>  TRUE
[17:37:16.080]      // while "1"  (timeout="200")
[17:37:16.081]      // while-condition  =>  TRUE
[17:37:16.081]      // while "1"  (timeout="200")
[17:37:16.081]      // while  =>  TIMEOUT
[17:37:16.081]      // end while "1"
[17:37:16.081]    </control>
[17:37:16.081]    <control if="canReadPins" while="" timeout="0" info="">
[17:37:16.081]      // if-block "canReadPins"
[17:37:16.082]        // =>  TRUE
[17:37:16.082]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:37:16.082]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:37:16.084]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:37:16.084]        // while-condition  =>  FALSE
[17:37:16.084]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:37:16.084]      </control>
[17:37:16.085]      // end if-block "canReadPins"
[17:37:16.085]    </control>
[17:37:16.085]    <control if="!canReadPins" while="" timeout="0" info="">
[17:37:16.085]      // if-block "!canReadPins"
[17:37:16.085]        // =>  FALSE
[17:37:16.085]      // skip if-block "!canReadPins"
[17:37:16.085]    </control>
[17:37:16.085]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:37:16.085]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:37:16.086]        // =>  TRUE
[17:37:16.086]      <block atomic="false" info="">
[17:37:16.086]        WriteAP(0x00, 0x190008);
[17:37:16.087]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:37:16.088]        WriteAP(0xF0, 0x01);
[17:37:16.092]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:37:16.092]      </block>
[17:37:16.092]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:37:16.092]    </control>
[17:37:16.092]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:37:16.093]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:37:16.093]        // =>  FALSE
[17:37:16.093]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:37:16.093]    </control>
[17:37:16.093]    <block atomic="false" info="">
[17:37:16.093]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:37:16.097]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:37:16.098]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:37:16.098]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:37:16.099]      __ap = 0; //lets make sure we reset the access point selection
[17:37:16.099]        // -> [__ap <= 0x00000000]
[17:37:16.099]    </block>
[17:37:16.099]  </sequence>
[17:37:16.099]  
[17:37:16.123]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:37:16.123]  
[17:37:16.123]  <debugvars>
[17:37:16.123]    // Pre-defined
[17:37:16.123]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:37:16.123]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:37:16.123]    __dp=0x00000000
[17:37:16.123]    __ap=0x00000000
[17:37:16.123]    __traceout=0x00000000      (Trace Disabled)
[17:37:16.123]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:37:16.123]    __FlashAddr=0x00000000
[17:37:16.123]    __FlashLen=0x00000000
[17:37:16.123]    __FlashArg=0x00000000
[17:37:16.123]    __FlashOp=0x00000000
[17:37:16.123]    __Result=0x00000000
[17:37:16.124]  </debugvars>
[17:37:16.124]  
[17:37:16.124]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:37:16.124]    <block atomic="false" info="">
[17:37:16.124]      __var deviceID = 0;
[17:37:16.124]        // -> [deviceID <= 0x00000000]
[17:37:16.124]      __var version = 0;
[17:37:16.124]        // -> [version <= 0x00000000]
[17:37:16.124]      __var partNum = 0;
[17:37:16.126]        // -> [partNum <= 0x00000000]
[17:37:16.126]      __var manuf = 0;
[17:37:16.126]        // -> [manuf <= 0x00000000]
[17:37:16.126]      __var isMSPM0G1X0X_G3X0X = 0;
[17:37:16.126]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:37:16.126]      __var isProduction = 0;
[17:37:16.126]        // -> [isProduction <= 0x00000000]
[17:37:16.126]      __var continueId = 0;
[17:37:16.126]        // -> [continueId <= 0x00000000]
[17:37:16.127]      deviceID =   Read32(0x41C40004);
[17:37:16.136]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:37:16.136]        // -> [deviceID <= 0x2BB8802F]
[17:37:16.137]      version = deviceID >> 28;
[17:37:16.137]        // -> [version <= 0x00000002]
[17:37:16.137]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:37:16.137]        // -> [partNum <= 0x0000BB88]
[17:37:16.137]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:37:16.137]        // -> [manuf <= 0x00000017]
[17:37:16.137]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:37:16.137]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:37:16.138]      isProduction = (version > 0);
[17:37:16.138]        // -> [isProduction <= 0x00000001]
[17:37:16.138]    </block>
[17:37:16.138]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:37:16.138]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:37:16.138]        // =>  FALSE
[17:37:16.138]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:37:16.138]    </control>
[17:37:16.138]    <control if="continueId == 4" while="" timeout="0" info="">
[17:37:16.139]      // if-block "continueId == 4"
[17:37:16.139]        // =>  FALSE
[17:37:16.139]      // skip if-block "continueId == 4"
[17:37:16.139]    </control>
[17:37:16.139]    <control if="!isProduction" while="" timeout="0" info="">
[17:37:16.139]      // if-block "!isProduction"
[17:37:16.139]        // =>  FALSE
[17:37:16.139]      // skip if-block "!isProduction"
[17:37:16.139]    </control>
[17:37:16.140]  </sequence>
[17:37:16.140]  
[17:39:06.165]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:39:06.165]  
[17:39:06.174]  <debugvars>
[17:39:06.174]    // Pre-defined
[17:39:06.174]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:39:06.174]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:39:06.174]    __dp=0x00000000
[17:39:06.174]    __ap=0x00000000
[17:39:06.174]    __traceout=0x00000000      (Trace Disabled)
[17:39:06.175]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:39:06.175]    __FlashAddr=0x00000000
[17:39:06.175]    __FlashLen=0x00000000
[17:39:06.175]    __FlashArg=0x00000000
[17:39:06.175]    __FlashOp=0x00000000
[17:39:06.175]    __Result=0x00000000
[17:39:06.175]  </debugvars>
[17:39:06.175]  
[17:39:06.175]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:39:06.175]    <block atomic="false" info="">
[17:39:06.175]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:39:06.175]        // -> [isSWJ <= 0x00000001]
[17:39:06.175]      __var hasDormant = __protocol & 0x00020000;
[17:39:06.175]        // -> [hasDormant <= 0x00000000]
[17:39:06.175]      __var protType   = __protocol & 0x0000FFFF;
[17:39:06.175]        // -> [protType <= 0x00000002]
[17:39:06.175]    </block>
[17:39:06.177]    <control if="protType == 1" while="" timeout="0" info="">
[17:39:06.177]      // if-block "protType == 1"
[17:39:06.177]        // =>  FALSE
[17:39:06.177]      // skip if-block "protType == 1"
[17:39:06.177]    </control>
[17:39:06.178]    <control if="protType == 2" while="" timeout="0" info="">
[17:39:06.178]      // if-block "protType == 2"
[17:39:06.178]        // =>  TRUE
[17:39:06.178]      <control if="isSWJ" while="" timeout="0" info="">
[17:39:06.178]        // if-block "isSWJ"
[17:39:06.178]          // =>  TRUE
[17:39:06.178]        <control if="hasDormant" while="" timeout="0" info="">
[17:39:06.178]          // if-block "hasDormant"
[17:39:06.178]            // =>  FALSE
[17:39:06.178]          // skip if-block "hasDormant"
[17:39:06.178]        </control>
[17:39:06.178]        <control if="!hasDormant" while="" timeout="0" info="">
[17:39:06.178]          // if-block "!hasDormant"
[17:39:06.178]            // =>  TRUE
[17:39:06.179]          <block atomic="false" info="">
[17:39:06.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:39:06.181]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:39:06.181]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:39:06.183]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:39:06.183]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:39:06.187]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:39:06.187]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:39:06.188]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:39:06.188]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:39:06.191]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:39:06.191]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:39:06.195]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:39:06.195]          </block>
[17:39:06.195]          // end if-block "!hasDormant"
[17:39:06.195]        </control>
[17:39:06.195]        // end if-block "isSWJ"
[17:39:06.195]      </control>
[17:39:06.195]      <control if="!isSWJ" while="" timeout="0" info="">
[17:39:06.195]        // if-block "!isSWJ"
[17:39:06.195]          // =>  FALSE
[17:39:06.195]        // skip if-block "!isSWJ"
[17:39:06.196]      </control>
[17:39:06.196]      <block atomic="false" info="">
[17:39:06.196]        ReadDP(0x0);
[17:39:06.197]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:39:06.197]      </block>
[17:39:06.197]      // end if-block "protType == 2"
[17:39:06.197]    </control>
[17:39:06.198]  </sequence>
[17:39:06.198]  
[17:39:06.201]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:39:06.201]  
[17:39:06.201]  <debugvars>
[17:39:06.201]    // Pre-defined
[17:39:06.201]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:39:06.201]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:39:06.201]    __dp=0x00000000
[17:39:06.201]    __ap=0x00000000
[17:39:06.201]    __traceout=0x00000000      (Trace Disabled)
[17:39:06.201]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:39:06.201]    __FlashAddr=0x00000000
[17:39:06.201]    __FlashLen=0x00000000
[17:39:06.201]    __FlashArg=0x00000000
[17:39:06.201]    __FlashOp=0x00000000
[17:39:06.201]    __Result=0x00000000
[17:39:06.201]  </debugvars>
[17:39:06.202]  
[17:39:06.202]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:39:06.202]    <block atomic="false" info="">
[17:39:06.202]      __var SW_DP_ABORT       = 0x0;
[17:39:06.202]        // -> [SW_DP_ABORT <= 0x00000000]
[17:39:06.202]      __var DP_CTRL_STAT      = 0x4;
[17:39:06.203]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:39:06.203]      __var DP_SELECT         = 0x8;
[17:39:06.203]        // -> [DP_SELECT <= 0x00000008]
[17:39:06.203]      __var powered_down      = 0;
[17:39:06.203]        // -> [powered_down <= 0x00000000]
[17:39:06.203]      WriteDP(DP_SELECT, 0x00000000);
[17:39:06.204]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:39:06.204]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:39:06.207]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:39:06.207]        // -> [powered_down <= 0x00000001]
[17:39:06.207]    </block>
[17:39:06.208]    <control if="powered_down" while="" timeout="0" info="">
[17:39:06.208]      // if-block "powered_down"
[17:39:06.208]        // =>  TRUE
[17:39:06.208]      <block atomic="false" info="">
[17:39:06.209]        Message(0, "Debug/System power-up request sent");
[17:39:06.211]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:39:06.213]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:39:06.213]      </block>
[17:39:06.213]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:39:06.213]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:39:06.215]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:39:06.215]        // while-condition  =>  FALSE
[17:39:06.215]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:39:06.215]      </control>
[17:39:06.215]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:39:06.215]        // if-block "(__protocol & 0xFFFF) == 1"
[17:39:06.215]          // =>  FALSE
[17:39:06.215]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:39:06.215]      </control>
[17:39:06.215]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:39:06.215]        // if-block "(__protocol & 0xFFFF) == 2"
[17:39:06.215]          // =>  TRUE
[17:39:06.216]        <block atomic="false" info="">
[17:39:06.216]          Message(0, "executing SWD power up");
[17:39:06.218]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:39:06.220]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:39:06.220]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:39:06.221]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:39:06.221]        </block>
[17:39:06.222]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:39:06.222]      </control>
[17:39:06.222]      // end if-block "powered_down"
[17:39:06.222]    </control>
[17:39:06.222]    <block atomic="false" info="">
[17:39:06.222]      __var DEBUG_PORT_VAL    = 0;
[17:39:06.223]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:39:06.223]      __var ACCESS_POINT_VAL  = 0;
[17:39:06.223]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:39:06.223]      __ap = 1; 
[17:39:06.223]        // -> [__ap <= 0x00000001]
[17:39:06.223]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:39:06.229]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:39:06.229]      __ap = 4;
[17:39:06.229]        // -> [__ap <= 0x00000004]
[17:39:06.229]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:39:06.233]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:39:06.234]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:39:06.234]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:39:06.236]    </block>
[17:39:06.236]    <block atomic="false" info="">
[17:39:06.236]      __var nReset = 0x80;
[17:39:06.236]        // -> [nReset <= 0x00000080]
[17:39:06.237]      __var canReadPins = 0;
[17:39:06.237]        // -> [canReadPins <= 0x00000000]
[17:39:06.237]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:39:06.239]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:39:06.239]        // -> [canReadPins <= 0x00000001]
[17:39:06.239]    </block>
[17:39:06.239]    <control if="" while="1" timeout="200" info="">
[17:39:06.239]      // while "1"  (timeout="200")
[17:39:06.239]      // while-condition  =>  TRUE
[17:39:06.239]      // while "1"  (timeout="200")
[17:39:06.239]      // while-condition  =>  TRUE
[17:39:06.239]      // while "1"  (timeout="200")
[17:39:06.239]      // while-condition  =>  TRUE
[17:39:06.239]      // while "1"  (timeout="200")
[17:39:06.239]      // while-condition  =>  TRUE
[17:39:06.240]      // while "1"  (timeout="200")
[17:39:06.240]      // while-condition  =>  TRUE
[17:39:06.240]      // while "1"  (timeout="200")
[17:39:06.240]      // while-condition  =>  TRUE
[17:39:06.240]      // while "1"  (timeout="200")
[17:39:06.240]      // while-condition  =>  TRUE
[17:39:06.240]      // while "1"  (timeout="200")
[17:39:06.240]      // while-condition  =>  TRUE
[17:39:06.241]      // while "1"  (timeout="200")
[17:39:06.241]      // while-condition  =>  TRUE
[17:39:06.241]      // while "1"  (timeout="200")
[17:39:06.241]      // while-condition  =>  TRUE
[17:39:06.241]      // while "1"  (timeout="200")
[17:39:06.241]      // while-condition  =>  TRUE
[17:39:06.241]      // while "1"  (timeout="200")
[17:39:06.241]      // while-condition  =>  TRUE
[17:39:06.241]      // while "1"  (timeout="200")
[17:39:06.241]      // while-condition  =>  TRUE
[17:39:06.241]      // while "1"  (timeout="200")
[17:39:06.242]      // while-condition  =>  TRUE
[17:39:06.242]      // while "1"  (timeout="200")
[17:39:06.242]      // while-condition  =>  TRUE
[17:39:06.242]      // while "1"  (timeout="200")
[17:39:06.242]      // while-condition  =>  TRUE
[17:39:06.243]      // while "1"  (timeout="200")
[17:39:06.243]      // while-condition  =>  TRUE
[17:39:06.243]      // while "1"  (timeout="200")
[17:39:06.244]      // while-condition  =>  TRUE
[17:39:06.244]      // while "1"  (timeout="200")
[17:39:06.244]      // while-condition  =>  TRUE
[17:39:06.244]      // while "1"  (timeout="200")
[17:39:06.244]      // while-condition  =>  TRUE
[17:39:06.244]      // while "1"  (timeout="200")
[17:39:06.244]      // while-condition  =>  TRUE
[17:39:06.244]      // while "1"  (timeout="200")
[17:39:06.244]      // while-condition  =>  TRUE
[17:39:06.244]      // while "1"  (timeout="200")
[17:39:06.244]      // while-condition  =>  TRUE
[17:39:06.244]      // while "1"  (timeout="200")
[17:39:06.245]      // while-condition  =>  TRUE
[17:39:06.245]      // while "1"  (timeout="200")
[17:39:06.245]      // while-condition  =>  TRUE
[17:39:06.245]      // while "1"  (timeout="200")
[17:39:06.245]      // while-condition  =>  TRUE
[17:39:06.245]      // while "1"  (timeout="200")
[17:39:06.245]      // while-condition  =>  TRUE
[17:39:06.245]      // while "1"  (timeout="200")
[17:39:06.245]      // while-condition  =>  TRUE
[17:39:06.245]      // while "1"  (timeout="200")
[17:39:06.245]      // while-condition  =>  TRUE
[17:39:06.245]      // while "1"  (timeout="200")
[17:39:06.245]      // while-condition  =>  TRUE
[17:39:06.246]      // while "1"  (timeout="200")
[17:39:06.246]      // while-condition  =>  TRUE
[17:39:06.246]      // while "1"  (timeout="200")
[17:39:06.246]      // while-condition  =>  TRUE
[17:39:06.246]      // while "1"  (timeout="200")
[17:39:06.246]      // while-condition  =>  TRUE
[17:39:06.246]      // while "1"  (timeout="200")
[17:39:06.246]      // while-condition  =>  TRUE
[17:39:06.246]      // while "1"  (timeout="200")
[17:39:06.247]      // while-condition  =>  TRUE
[17:39:06.247]      // while "1"  (timeout="200")
[17:39:06.247]      // while-condition  =>  TRUE
[17:39:06.247]      // while "1"  (timeout="200")
[17:39:06.248]      // while-condition  =>  TRUE
[17:39:06.248]      // while "1"  (timeout="200")
[17:39:06.248]      // while-condition  =>  TRUE
[17:39:06.248]      // while "1"  (timeout="200")
[17:39:06.248]      // while-condition  =>  TRUE
[17:39:06.248]      // while "1"  (timeout="200")
[17:39:06.248]      // while-condition  =>  TRUE
[17:39:06.248]      // while "1"  (timeout="200")
[17:39:06.248]      // while-condition  =>  TRUE
[17:39:06.248]      // while "1"  (timeout="200")
[17:39:06.248]      // while-condition  =>  TRUE
[17:39:06.248]      // while "1"  (timeout="200")
[17:39:06.249]      // while-condition  =>  TRUE
[17:39:06.249]      // while "1"  (timeout="200")
[17:39:06.249]      // while-condition  =>  TRUE
[17:39:06.249]      // while "1"  (timeout="200")
[17:39:06.249]      // while-condition  =>  TRUE
[17:39:06.249]      // while "1"  (timeout="200")
[17:39:06.249]      // while-condition  =>  TRUE
[17:39:06.249]      // while "1"  (timeout="200")
[17:39:06.249]      // while-condition  =>  TRUE
[17:39:06.249]      // while "1"  (timeout="200")
[17:39:06.250]      // while-condition  =>  TRUE
[17:39:06.250]      // while "1"  (timeout="200")
[17:39:06.250]      // while-condition  =>  TRUE
[17:39:06.250]      // while "1"  (timeout="200")
[17:39:06.250]      // while-condition  =>  TRUE
[17:39:06.250]      // while "1"  (timeout="200")
[17:39:06.250]      // while-condition  =>  TRUE
[17:39:06.250]      // while "1"  (timeout="200")
[17:39:06.250]      // while-condition  =>  TRUE
[17:39:06.250]      // while "1"  (timeout="200")
[17:39:06.250]      // while-condition  =>  TRUE
[17:39:06.251]      // while "1"  (timeout="200")
[17:39:06.251]      // while-condition  =>  TRUE
[17:39:06.251]      // while "1"  (timeout="200")
[17:39:06.251]      // while-condition  =>  TRUE
[17:39:06.251]      // while "1"  (timeout="200")
[17:39:06.251]      // while-condition  =>  TRUE
[17:39:06.251]      // while "1"  (timeout="200")
[17:39:06.251]      // while-condition  =>  TRUE
[17:39:06.251]      // while "1"  (timeout="200")
[17:39:06.251]      // while-condition  =>  TRUE
[17:39:06.251]      // while "1"  (timeout="200")
[17:39:06.251]      // while-condition  =>  TRUE
[17:39:06.252]      // while "1"  (timeout="200")
[17:39:06.252]      // while-condition  =>  TRUE
[17:39:06.252]      // while "1"  (timeout="200")
[17:39:06.252]      // while-condition  =>  TRUE
[17:39:06.252]      // while "1"  (timeout="200")
[17:39:06.252]      // while-condition  =>  TRUE
[17:39:06.252]      // while "1"  (timeout="200")
[17:39:06.252]      // while-condition  =>  TRUE
[17:39:06.252]      // while "1"  (timeout="200")
[17:39:06.252]      // while-condition  =>  TRUE
[17:39:06.252]      // while "1"  (timeout="200")
[17:39:06.253]      // while-condition  =>  TRUE
[17:39:06.253]      // while "1"  (timeout="200")
[17:39:06.253]      // while  =>  TIMEOUT
[17:39:06.253]      // end while "1"
[17:39:06.253]    </control>
[17:39:06.253]    <control if="canReadPins" while="" timeout="0" info="">
[17:39:06.253]      // if-block "canReadPins"
[17:39:06.254]        // =>  TRUE
[17:39:06.254]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:39:06.254]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:39:06.257]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:39:06.257]        // while-condition  =>  FALSE
[17:39:06.257]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:39:06.257]      </control>
[17:39:06.257]      // end if-block "canReadPins"
[17:39:06.257]    </control>
[17:39:06.257]    <control if="!canReadPins" while="" timeout="0" info="">
[17:39:06.258]      // if-block "!canReadPins"
[17:39:06.258]        // =>  FALSE
[17:39:06.258]      // skip if-block "!canReadPins"
[17:39:06.258]    </control>
[17:39:06.258]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:39:06.258]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:39:06.258]        // =>  TRUE
[17:39:06.258]      <block atomic="false" info="">
[17:39:06.258]        WriteAP(0x00, 0x190008);
[17:39:06.260]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:39:06.260]        WriteAP(0xF0, 0x01);
[17:39:06.263]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:39:06.263]      </block>
[17:39:06.263]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:39:06.264]    </control>
[17:39:06.264]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:39:06.264]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:39:06.264]        // =>  FALSE
[17:39:06.264]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:39:06.264]    </control>
[17:39:06.264]    <block atomic="false" info="">
[17:39:06.264]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:39:06.267]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:39:06.267]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:39:06.268]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:39:06.270]      __ap = 0; //lets make sure we reset the access point selection
[17:39:06.270]        // -> [__ap <= 0x00000000]
[17:39:06.270]    </block>
[17:39:06.270]  </sequence>
[17:39:06.270]  
[17:39:06.295]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:39:06.295]  
[17:39:06.295]  <debugvars>
[17:39:06.295]    // Pre-defined
[17:39:06.296]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:39:06.296]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:39:06.296]    __dp=0x00000000
[17:39:06.296]    __ap=0x00000000
[17:39:06.296]    __traceout=0x00000000      (Trace Disabled)
[17:39:06.296]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:39:06.296]    __FlashAddr=0x00000000
[17:39:06.297]    __FlashLen=0x00000000
[17:39:06.297]    __FlashArg=0x00000000
[17:39:06.297]    __FlashOp=0x00000000
[17:39:06.297]    __Result=0x00000000
[17:39:06.297]  </debugvars>
[17:39:06.297]  
[17:39:06.297]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:39:06.297]    <block atomic="false" info="">
[17:39:06.297]      __var deviceID = 0;
[17:39:06.297]        // -> [deviceID <= 0x00000000]
[17:39:06.298]      __var version = 0;
[17:39:06.298]        // -> [version <= 0x00000000]
[17:39:06.298]      __var partNum = 0;
[17:39:06.298]        // -> [partNum <= 0x00000000]
[17:39:06.298]      __var manuf = 0;
[17:39:06.298]        // -> [manuf <= 0x00000000]
[17:39:06.298]      __var isMSPM0G1X0X_G3X0X = 0;
[17:39:06.298]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:39:06.298]      __var isProduction = 0;
[17:39:06.298]        // -> [isProduction <= 0x00000000]
[17:39:06.298]      __var continueId = 0;
[17:39:06.298]        // -> [continueId <= 0x00000000]
[17:39:06.298]      deviceID =   Read32(0x41C40004);
[17:39:06.305]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:39:06.305]        // -> [deviceID <= 0x2BB8802F]
[17:39:06.305]      version = deviceID >> 28;
[17:39:06.305]        // -> [version <= 0x00000002]
[17:39:06.305]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:39:06.305]        // -> [partNum <= 0x0000BB88]
[17:39:06.305]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:39:06.305]        // -> [manuf <= 0x00000017]
[17:39:06.305]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:39:06.305]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:39:06.305]      isProduction = (version > 0);
[17:39:06.305]        // -> [isProduction <= 0x00000001]
[17:39:06.305]    </block>
[17:39:06.306]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:39:06.306]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:39:06.306]        // =>  FALSE
[17:39:06.306]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:39:06.306]    </control>
[17:39:06.307]    <control if="continueId == 4" while="" timeout="0" info="">
[17:39:06.307]      // if-block "continueId == 4"
[17:39:06.307]        // =>  FALSE
[17:39:06.307]      // skip if-block "continueId == 4"
[17:39:06.307]    </control>
[17:39:06.307]    <control if="!isProduction" while="" timeout="0" info="">
[17:39:06.307]      // if-block "!isProduction"
[17:39:06.307]        // =>  FALSE
[17:39:06.307]      // skip if-block "!isProduction"
[17:39:06.307]    </control>
[17:39:06.307]  </sequence>
[17:39:06.308]  
[17:39:50.989]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:39:50.989]  
[17:39:50.997]  <debugvars>
[17:39:50.998]    // Pre-defined
[17:39:50.998]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:39:50.998]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:39:50.998]    __dp=0x00000000
[17:39:50.998]    __ap=0x00000000
[17:39:50.998]    __traceout=0x00000000      (Trace Disabled)
[17:39:50.998]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:39:50.998]    __FlashAddr=0x00000000
[17:39:50.998]    __FlashLen=0x00000000
[17:39:50.998]    __FlashArg=0x00000000
[17:39:50.998]    __FlashOp=0x00000000
[17:39:50.999]    __Result=0x00000000
[17:39:50.999]  </debugvars>
[17:39:50.999]  
[17:39:50.999]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:39:50.999]    <block atomic="false" info="">
[17:39:51.000]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:39:51.000]        // -> [isSWJ <= 0x00000001]
[17:39:51.000]      __var hasDormant = __protocol & 0x00020000;
[17:39:51.000]        // -> [hasDormant <= 0x00000000]
[17:39:51.000]      __var protType   = __protocol & 0x0000FFFF;
[17:39:51.000]        // -> [protType <= 0x00000002]
[17:39:51.000]    </block>
[17:39:51.000]    <control if="protType == 1" while="" timeout="0" info="">
[17:39:51.000]      // if-block "protType == 1"
[17:39:51.000]        // =>  FALSE
[17:39:51.000]      // skip if-block "protType == 1"
[17:39:51.000]    </control>
[17:39:51.000]    <control if="protType == 2" while="" timeout="0" info="">
[17:39:51.000]      // if-block "protType == 2"
[17:39:51.000]        // =>  TRUE
[17:39:51.000]      <control if="isSWJ" while="" timeout="0" info="">
[17:39:51.000]        // if-block "isSWJ"
[17:39:51.001]          // =>  TRUE
[17:39:51.001]        <control if="hasDormant" while="" timeout="0" info="">
[17:39:51.001]          // if-block "hasDormant"
[17:39:51.001]            // =>  FALSE
[17:39:51.001]          // skip if-block "hasDormant"
[17:39:51.001]        </control>
[17:39:51.001]        <control if="!hasDormant" while="" timeout="0" info="">
[17:39:51.001]          // if-block "!hasDormant"
[17:39:51.001]            // =>  TRUE
[17:39:51.001]          <block atomic="false" info="">
[17:39:51.001]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:39:51.008]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:39:51.008]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:39:51.016]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:39:51.016]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:39:51.032]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:39:51.032]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:39:51.044]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:39:51.044]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:39:51.063]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:39:51.063]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:39:51.067]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:39:51.067]          </block>
[17:39:51.067]          // end if-block "!hasDormant"
[17:39:51.068]        </control>
[17:39:51.068]        // end if-block "isSWJ"
[17:39:51.068]      </control>
[17:39:51.068]      <control if="!isSWJ" while="" timeout="0" info="">
[17:39:51.068]        // if-block "!isSWJ"
[17:39:51.068]          // =>  FALSE
[17:39:51.068]        // skip if-block "!isSWJ"
[17:39:51.068]      </control>
[17:39:51.068]      <block atomic="false" info="">
[17:39:51.068]        ReadDP(0x0);
[17:39:51.072]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:39:51.072]      </block>
[17:39:51.072]      // end if-block "protType == 2"
[17:39:51.072]    </control>
[17:39:51.072]  </sequence>
[17:39:51.072]  
[17:39:51.081]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:39:51.081]  
[17:39:51.081]  <debugvars>
[17:39:51.082]    // Pre-defined
[17:39:51.082]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:39:51.082]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:39:51.082]    __dp=0x00000000
[17:39:51.082]    __ap=0x00000000
[17:39:51.082]    __traceout=0x00000000      (Trace Disabled)
[17:39:51.082]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:39:51.082]    __FlashAddr=0x00000000
[17:39:51.082]    __FlashLen=0x00000000
[17:39:51.083]    __FlashArg=0x00000000
[17:39:51.083]    __FlashOp=0x00000000
[17:39:51.083]    __Result=0x00000000
[17:39:51.083]  </debugvars>
[17:39:51.083]  
[17:39:51.083]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:39:51.083]    <block atomic="false" info="">
[17:39:51.083]      __var SW_DP_ABORT       = 0x0;
[17:39:51.084]        // -> [SW_DP_ABORT <= 0x00000000]
[17:39:51.084]      __var DP_CTRL_STAT      = 0x4;
[17:39:51.084]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:39:51.084]      __var DP_SELECT         = 0x8;
[17:39:51.084]        // -> [DP_SELECT <= 0x00000008]
[17:39:51.084]      __var powered_down      = 0;
[17:39:51.084]        // -> [powered_down <= 0x00000000]
[17:39:51.084]      WriteDP(DP_SELECT, 0x00000000);
[17:39:51.091]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:39:51.091]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:39:51.093]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:39:51.093]        // -> [powered_down <= 0x00000001]
[17:39:51.094]    </block>
[17:39:51.094]    <control if="powered_down" while="" timeout="0" info="">
[17:39:51.094]      // if-block "powered_down"
[17:39:51.094]        // =>  TRUE
[17:39:51.094]      <block atomic="false" info="">
[17:39:51.094]        Message(0, "Debug/System power-up request sent");
[17:39:51.096]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:39:51.107]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:39:51.108]      </block>
[17:39:51.108]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:39:51.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:39:51.113]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:39:51.114]        // while-condition  =>  FALSE
[17:39:51.114]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:39:51.114]      </control>
[17:39:51.114]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:39:51.114]        // if-block "(__protocol & 0xFFFF) == 1"
[17:39:51.114]          // =>  FALSE
[17:39:51.114]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:39:51.115]      </control>
[17:39:51.115]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:39:51.115]        // if-block "(__protocol & 0xFFFF) == 2"
[17:39:51.115]          // =>  TRUE
[17:39:51.115]        <block atomic="false" info="">
[17:39:51.115]          Message(0, "executing SWD power up");
[17:39:51.118]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:39:51.134]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:39:51.135]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:39:51.146]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:39:51.146]        </block>
[17:39:51.146]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:39:51.146]      </control>
[17:39:51.147]      // end if-block "powered_down"
[17:39:51.147]    </control>
[17:39:51.147]    <block atomic="false" info="">
[17:39:51.147]      __var DEBUG_PORT_VAL    = 0;
[17:39:51.147]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:39:51.147]      __var ACCESS_POINT_VAL  = 0;
[17:39:51.147]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:39:51.147]      __ap = 1; 
[17:39:51.147]        // -> [__ap <= 0x00000001]
[17:39:51.147]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:39:51.167]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:39:51.167]      __ap = 4;
[17:39:51.167]        // -> [__ap <= 0x00000004]
[17:39:51.167]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:39:51.181]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:39:51.181]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:39:51.181]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:39:51.182]    </block>
[17:39:51.183]    <block atomic="false" info="">
[17:39:51.183]      __var nReset = 0x80;
[17:39:51.183]        // -> [nReset <= 0x00000080]
[17:39:51.183]      __var canReadPins = 0;
[17:39:51.183]        // -> [canReadPins <= 0x00000000]
[17:39:51.183]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:39:51.195]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:39:51.196]        // -> [canReadPins <= 0x00000001]
[17:39:51.196]    </block>
[17:39:51.196]    <control if="" while="1" timeout="200" info="">
[17:39:51.196]      // while "1"  (timeout="200")
[17:39:51.196]      // while-condition  =>  TRUE
[17:39:51.196]      // while "1"  (timeout="200")
[17:39:51.196]      // while-condition  =>  TRUE
[17:39:51.196]      // while "1"  (timeout="200")
[17:39:51.196]      // while-condition  =>  TRUE
[17:39:51.196]      // while "1"  (timeout="200")
[17:39:51.196]      // while-condition  =>  TRUE
[17:39:51.196]      // while "1"  (timeout="200")
[17:39:51.196]      // while-condition  =>  TRUE
[17:39:51.196]      // while "1"  (timeout="200")
[17:39:51.196]      // while-condition  =>  TRUE
[17:39:51.196]      // while "1"  (timeout="200")
[17:39:51.197]      // while-condition  =>  TRUE
[17:39:51.197]      // while "1"  (timeout="200")
[17:39:51.197]      // while-condition  =>  TRUE
[17:39:51.197]      // while "1"  (timeout="200")
[17:39:51.197]      // while-condition  =>  TRUE
[17:39:51.197]      // while "1"  (timeout="200")
[17:39:51.197]      // while-condition  =>  TRUE
[17:39:51.197]      // while "1"  (timeout="200")
[17:39:51.197]      // while-condition  =>  TRUE
[17:39:51.197]      // while "1"  (timeout="200")
[17:39:51.197]      // while-condition  =>  TRUE
[17:39:51.198]      // while "1"  (timeout="200")
[17:39:51.198]      // while-condition  =>  TRUE
[17:39:51.198]      // while "1"  (timeout="200")
[17:39:51.198]      // while-condition  =>  TRUE
[17:39:51.198]      // while "1"  (timeout="200")
[17:39:51.198]      // while-condition  =>  TRUE
[17:39:51.198]      // while "1"  (timeout="200")
[17:39:51.199]      // while-condition  =>  TRUE
[17:39:51.199]      // while "1"  (timeout="200")
[17:39:51.199]      // while-condition  =>  TRUE
[17:39:51.199]      // while "1"  (timeout="200")
[17:39:51.199]      // while-condition  =>  TRUE
[17:39:51.199]      // while "1"  (timeout="200")
[17:39:51.199]      // while-condition  =>  TRUE
[17:39:51.199]      // while "1"  (timeout="200")
[17:39:51.199]      // while-condition  =>  TRUE
[17:39:51.199]      // while "1"  (timeout="200")
[17:39:51.199]      // while-condition  =>  TRUE
[17:39:51.199]      // while "1"  (timeout="200")
[17:39:51.199]      // while-condition  =>  TRUE
[17:39:51.199]      // while "1"  (timeout="200")
[17:39:51.201]      // while-condition  =>  TRUE
[17:39:51.201]      // while "1"  (timeout="200")
[17:39:51.201]      // while-condition  =>  TRUE
[17:39:51.201]      // while "1"  (timeout="200")
[17:39:51.201]      // while-condition  =>  TRUE
[17:39:51.201]      // while "1"  (timeout="200")
[17:39:51.201]      // while-condition  =>  TRUE
[17:39:51.202]      // while "1"  (timeout="200")
[17:39:51.202]      // while-condition  =>  TRUE
[17:39:51.202]      // while "1"  (timeout="200")
[17:39:51.202]      // while-condition  =>  TRUE
[17:39:51.202]      // while "1"  (timeout="200")
[17:39:51.202]      // while-condition  =>  TRUE
[17:39:51.202]      // while "1"  (timeout="200")
[17:39:51.202]      // while-condition  =>  TRUE
[17:39:51.203]      // while "1"  (timeout="200")
[17:39:51.203]      // while-condition  =>  TRUE
[17:39:51.203]      // while "1"  (timeout="200")
[17:39:51.203]      // while-condition  =>  TRUE
[17:39:51.203]      // while "1"  (timeout="200")
[17:39:51.203]      // while-condition  =>  TRUE
[17:39:51.203]      // while "1"  (timeout="200")
[17:39:51.203]      // while-condition  =>  TRUE
[17:39:51.203]      // while "1"  (timeout="200")
[17:39:51.203]      // while-condition  =>  TRUE
[17:39:51.203]      // while "1"  (timeout="200")
[17:39:51.203]      // while-condition  =>  TRUE
[17:39:51.203]      // while "1"  (timeout="200")
[17:39:51.203]      // while-condition  =>  TRUE
[17:39:51.203]      // while "1"  (timeout="200")
[17:39:51.204]      // while-condition  =>  TRUE
[17:39:51.204]      // while "1"  (timeout="200")
[17:39:51.204]      // while-condition  =>  TRUE
[17:39:51.204]      // while "1"  (timeout="200")
[17:39:51.204]      // while-condition  =>  TRUE
[17:39:51.204]      // while "1"  (timeout="200")
[17:39:51.205]      // while-condition  =>  TRUE
[17:39:51.205]      // while "1"  (timeout="200")
[17:39:51.205]      // while-condition  =>  TRUE
[17:39:51.205]      // while "1"  (timeout="200")
[17:39:51.205]      // while-condition  =>  TRUE
[17:39:51.205]      // while "1"  (timeout="200")
[17:39:51.205]      // while-condition  =>  TRUE
[17:39:51.205]      // while "1"  (timeout="200")
[17:39:51.206]      // while-condition  =>  TRUE
[17:39:51.206]      // while "1"  (timeout="200")
[17:39:51.206]      // while  =>  TIMEOUT
[17:39:51.206]      // end while "1"
[17:39:51.206]    </control>
[17:39:51.206]    <control if="canReadPins" while="" timeout="0" info="">
[17:39:51.206]      // if-block "canReadPins"
[17:39:51.206]        // =>  TRUE
[17:39:51.206]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:39:51.206]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:39:51.213]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:39:51.213]        // while-condition  =>  FALSE
[17:39:51.213]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:39:51.213]      </control>
[17:39:51.213]      // end if-block "canReadPins"
[17:39:51.213]    </control>
[17:39:51.214]    <control if="!canReadPins" while="" timeout="0" info="">
[17:39:51.214]      // if-block "!canReadPins"
[17:39:51.214]        // =>  FALSE
[17:39:51.214]      // skip if-block "!canReadPins"
[17:39:51.214]    </control>
[17:39:51.214]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:39:51.214]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:39:51.214]        // =>  TRUE
[17:39:51.214]      <block atomic="false" info="">
[17:39:51.214]        WriteAP(0x00, 0x190008);
[17:39:51.218]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:39:51.218]        WriteAP(0xF0, 0x01);
[17:39:51.237]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:39:51.237]      </block>
[17:39:51.237]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:39:51.237]    </control>
[17:39:51.237]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:39:51.237]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:39:51.237]        // =>  FALSE
[17:39:51.237]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:39:51.237]    </control>
[17:39:51.237]    <block atomic="false" info="">
[17:39:51.237]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:39:51.252]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:39:51.252]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:39:51.252]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:39:51.254]      __ap = 0; //lets make sure we reset the access point selection
[17:39:51.254]        // -> [__ap <= 0x00000000]
[17:39:51.254]    </block>
[17:39:51.255]  </sequence>
[17:39:51.255]  
[17:39:51.304]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:39:51.304]  
[17:39:51.304]  <debugvars>
[17:39:51.304]    // Pre-defined
[17:39:51.304]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:39:51.304]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:39:51.305]    __dp=0x00000000
[17:39:51.305]    __ap=0x00000000
[17:39:51.305]    __traceout=0x00000000      (Trace Disabled)
[17:39:51.305]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:39:51.306]    __FlashAddr=0x00000000
[17:39:51.306]    __FlashLen=0x00000000
[17:39:51.306]    __FlashArg=0x00000000
[17:39:51.306]    __FlashOp=0x00000000
[17:39:51.306]    __Result=0x00000000
[17:39:51.306]  </debugvars>
[17:39:51.306]  
[17:39:51.306]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:39:51.306]    <block atomic="false" info="">
[17:39:51.306]      __var deviceID = 0;
[17:39:51.306]        // -> [deviceID <= 0x00000000]
[17:39:51.306]      __var version = 0;
[17:39:51.306]        // -> [version <= 0x00000000]
[17:39:51.306]      __var partNum = 0;
[17:39:51.307]        // -> [partNum <= 0x00000000]
[17:39:51.307]      __var manuf = 0;
[17:39:51.307]        // -> [manuf <= 0x00000000]
[17:39:51.307]      __var isMSPM0G1X0X_G3X0X = 0;
[17:39:51.307]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:39:51.307]      __var isProduction = 0;
[17:39:51.307]        // -> [isProduction <= 0x00000000]
[17:39:51.307]      __var continueId = 0;
[17:39:51.307]        // -> [continueId <= 0x00000000]
[17:39:51.308]      deviceID =   Read32(0x41C40004);
[17:39:51.313]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:39:51.313]        // -> [deviceID <= 0x2BB8802F]
[17:39:51.313]      version = deviceID >> 28;
[17:39:51.313]        // -> [version <= 0x00000002]
[17:39:51.313]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:39:51.313]        // -> [partNum <= 0x0000BB88]
[17:39:51.313]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:39:51.313]        // -> [manuf <= 0x00000017]
[17:39:51.313]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:39:51.313]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:39:51.313]      isProduction = (version > 0);
[17:39:51.313]        // -> [isProduction <= 0x00000001]
[17:39:51.313]    </block>
[17:39:51.313]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:39:51.314]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:39:51.314]        // =>  FALSE
[17:39:51.314]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:39:51.314]    </control>
[17:39:51.314]    <control if="continueId == 4" while="" timeout="0" info="">
[17:39:51.314]      // if-block "continueId == 4"
[17:39:51.314]        // =>  FALSE
[17:39:51.314]      // skip if-block "continueId == 4"
[17:39:51.314]    </control>
[17:39:51.314]    <control if="!isProduction" while="" timeout="0" info="">
[17:39:51.315]      // if-block "!isProduction"
[17:39:51.315]        // =>  FALSE
[17:39:51.315]      // skip if-block "!isProduction"
[17:39:51.315]    </control>
[17:39:51.315]  </sequence>
[17:39:51.315]  
[17:42:58.008]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[17:42:58.008]  
[17:42:58.008]  <debugvars>
[17:42:58.008]    // Pre-defined
[17:42:58.008]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:42:58.009]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:42:58.009]    __dp=0x00000000
[17:42:58.009]    __ap=0x00000000
[17:42:58.009]    __traceout=0x00000000      (Trace Disabled)
[17:42:58.009]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:42:58.009]    __FlashAddr=0x00000000
[17:42:58.009]    __FlashLen=0x00000000
[17:42:58.009]    __FlashArg=0x00000000
[17:42:58.009]    __FlashOp=0x00000000
[17:42:58.009]    __Result=0x00000000
[17:42:58.009]  </debugvars>
[17:42:58.009]  
[17:42:58.009]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[17:42:58.009]    <block atomic="false" info="">
[17:42:58.010]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[17:42:58.010]        // -> [isSWJ <= 0x00000001]
[17:42:58.010]      __var hasDormant = __protocol & 0x00020000;
[17:42:58.010]        // -> [hasDormant <= 0x00000000]
[17:42:58.010]      __var protType   = __protocol & 0x0000FFFF;
[17:42:58.011]        // -> [protType <= 0x00000002]
[17:42:58.011]    </block>
[17:42:58.011]    <control if="protType == 1" while="" timeout="0" info="">
[17:42:58.011]      // if-block "protType == 1"
[17:42:58.011]        // =>  FALSE
[17:42:58.011]      // skip if-block "protType == 1"
[17:42:58.011]    </control>
[17:42:58.011]    <control if="protType == 2" while="" timeout="0" info="">
[17:42:58.011]      // if-block "protType == 2"
[17:42:58.011]        // =>  TRUE
[17:42:58.012]      <control if="isSWJ" while="" timeout="0" info="">
[17:42:58.012]        // if-block "isSWJ"
[17:42:58.012]          // =>  TRUE
[17:42:58.012]        <control if="hasDormant" while="" timeout="0" info="">
[17:42:58.012]          // if-block "hasDormant"
[17:42:58.012]            // =>  FALSE
[17:42:58.012]          // skip if-block "hasDormant"
[17:42:58.012]        </control>
[17:42:58.012]        <control if="!hasDormant" while="" timeout="0" info="">
[17:42:58.012]          // if-block "!hasDormant"
[17:42:58.012]            // =>  TRUE
[17:42:58.013]          <block atomic="false" info="">
[17:42:58.013]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[17:42:58.014]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:42:58.014]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[17:42:58.016]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[17:42:58.016]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[17:42:58.017]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:42:58.017]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[17:42:58.019]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[17:42:58.019]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[17:42:58.021]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[17:42:58.021]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[17:42:58.024]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[17:42:58.024]          </block>
[17:42:58.024]          // end if-block "!hasDormant"
[17:42:58.024]        </control>
[17:42:58.024]        // end if-block "isSWJ"
[17:42:58.024]      </control>
[17:42:58.024]      <control if="!isSWJ" while="" timeout="0" info="">
[17:42:58.024]        // if-block "!isSWJ"
[17:42:58.024]          // =>  FALSE
[17:42:58.025]        // skip if-block "!isSWJ"
[17:42:58.025]      </control>
[17:42:58.025]      <block atomic="false" info="">
[17:42:58.025]        ReadDP(0x0);
[17:42:58.027]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[17:42:58.027]      </block>
[17:42:58.027]      // end if-block "protType == 2"
[17:42:58.027]    </control>
[17:42:58.027]  </sequence>
[17:42:58.027]  
[17:42:58.032]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[17:42:58.032]  
[17:42:58.032]  <debugvars>
[17:42:58.032]    // Pre-defined
[17:42:58.032]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:42:58.032]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:42:58.032]    __dp=0x00000000
[17:42:58.033]    __ap=0x00000000
[17:42:58.033]    __traceout=0x00000000      (Trace Disabled)
[17:42:58.033]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:42:58.033]    __FlashAddr=0x00000000
[17:42:58.033]    __FlashLen=0x00000000
[17:42:58.033]    __FlashArg=0x00000000
[17:42:58.033]    __FlashOp=0x00000000
[17:42:58.033]    __Result=0x00000000
[17:42:58.033]  </debugvars>
[17:42:58.033]  
[17:42:58.033]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[17:42:58.034]    <block atomic="false" info="">
[17:42:58.034]      __var SW_DP_ABORT       = 0x0;
[17:42:58.034]        // -> [SW_DP_ABORT <= 0x00000000]
[17:42:58.034]      __var DP_CTRL_STAT      = 0x4;
[17:42:58.034]        // -> [DP_CTRL_STAT <= 0x00000004]
[17:42:58.034]      __var DP_SELECT         = 0x8;
[17:42:58.034]        // -> [DP_SELECT <= 0x00000008]
[17:42:58.034]      __var powered_down      = 0;
[17:42:58.034]        // -> [powered_down <= 0x00000000]
[17:42:58.034]      WriteDP(DP_SELECT, 0x00000000);
[17:42:58.036]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[17:42:58.036]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[17:42:58.045]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[17:42:58.045]        // -> [powered_down <= 0x00000001]
[17:42:58.046]    </block>
[17:42:58.046]    <control if="powered_down" while="" timeout="0" info="">
[17:42:58.046]      // if-block "powered_down"
[17:42:58.046]        // =>  TRUE
[17:42:58.046]      <block atomic="false" info="">
[17:42:58.046]        Message(0, "Debug/System power-up request sent");
[17:42:58.048]        WriteDP(DP_CTRL_STAT, 0x50000000);
[17:42:58.053]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[17:42:58.054]      </block>
[17:42:58.054]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[17:42:58.054]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[17:42:58.055]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[17:42:58.056]        // while-condition  =>  FALSE
[17:42:58.056]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[17:42:58.056]      </control>
[17:42:58.056]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[17:42:58.056]        // if-block "(__protocol & 0xFFFF) == 1"
[17:42:58.056]          // =>  FALSE
[17:42:58.056]        // skip if-block "(__protocol & 0xFFFF) == 1"
[17:42:58.056]      </control>
[17:42:58.056]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[17:42:58.056]        // if-block "(__protocol & 0xFFFF) == 2"
[17:42:58.056]          // =>  TRUE
[17:42:58.056]        <block atomic="false" info="">
[17:42:58.057]          Message(0, "executing SWD power up");
[17:42:58.059]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[17:42:58.059]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[17:42:58.059]          WriteDP(SW_DP_ABORT, 0x0000001E);
[17:42:58.062]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[17:42:58.062]        </block>
[17:42:58.062]        // end if-block "(__protocol & 0xFFFF) == 2"
[17:42:58.062]      </control>
[17:42:58.062]      // end if-block "powered_down"
[17:42:58.063]    </control>
[17:42:58.063]    <block atomic="false" info="">
[17:42:58.063]      __var DEBUG_PORT_VAL    = 0;
[17:42:58.063]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[17:42:58.063]      __var ACCESS_POINT_VAL  = 0;
[17:42:58.063]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[17:42:58.063]      __ap = 1; 
[17:42:58.063]        // -> [__ap <= 0x00000001]
[17:42:58.063]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[17:42:58.066]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[17:42:58.066]      __ap = 4;
[17:42:58.066]        // -> [__ap <= 0x00000004]
[17:42:58.066]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:42:58.073]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[17:42:58.073]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[17:42:58.073]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:42:58.075]    </block>
[17:42:58.075]    <block atomic="false" info="">
[17:42:58.075]      __var nReset = 0x80;
[17:42:58.075]        // -> [nReset <= 0x00000080]
[17:42:58.075]      __var canReadPins = 0;
[17:42:58.075]        // -> [canReadPins <= 0x00000000]
[17:42:58.075]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[17:42:58.078]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[17:42:58.078]        // -> [canReadPins <= 0x00000001]
[17:42:58.078]    </block>
[17:42:58.078]    <control if="" while="1" timeout="200" info="">
[17:42:58.078]      // while "1"  (timeout="200")
[17:42:58.078]      // while-condition  =>  TRUE
[17:42:58.078]      // while "1"  (timeout="200")
[17:42:58.078]      // while-condition  =>  TRUE
[17:42:58.078]      // while "1"  (timeout="200")
[17:42:58.078]      // while-condition  =>  TRUE
[17:42:58.078]      // while "1"  (timeout="200")
[17:42:58.078]      // while-condition  =>  TRUE
[17:42:58.078]      // while "1"  (timeout="200")
[17:42:58.079]      // while-condition  =>  TRUE
[17:42:58.079]      // while "1"  (timeout="200")
[17:42:58.079]      // while-condition  =>  TRUE
[17:42:58.079]      // while "1"  (timeout="200")
[17:42:58.080]      // while-condition  =>  TRUE
[17:42:58.080]      // while "1"  (timeout="200")
[17:42:58.080]      // while-condition  =>  TRUE
[17:42:58.080]      // while "1"  (timeout="200")
[17:42:58.080]      // while-condition  =>  TRUE
[17:42:58.080]      // while "1"  (timeout="200")
[17:42:58.080]      // while-condition  =>  TRUE
[17:42:58.080]      // while "1"  (timeout="200")
[17:42:58.080]      // while-condition  =>  TRUE
[17:42:58.080]      // while "1"  (timeout="200")
[17:42:58.080]      // while  =>  TIMEOUT
[17:42:58.080]      // end while "1"
[17:42:58.080]    </control>
[17:42:58.080]    <control if="canReadPins" while="" timeout="0" info="">
[17:42:58.080]      // if-block "canReadPins"
[17:42:58.081]        // =>  TRUE
[17:42:58.081]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[17:42:58.081]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[17:42:58.083]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[17:42:58.083]        // while-condition  =>  FALSE
[17:42:58.083]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[17:42:58.083]      </control>
[17:42:58.084]      // end if-block "canReadPins"
[17:42:58.084]    </control>
[17:42:58.084]    <control if="!canReadPins" while="" timeout="0" info="">
[17:42:58.084]      // if-block "!canReadPins"
[17:42:58.084]        // =>  FALSE
[17:42:58.084]      // skip if-block "!canReadPins"
[17:42:58.084]    </control>
[17:42:58.084]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[17:42:58.084]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:42:58.084]        // =>  TRUE
[17:42:58.085]      <block atomic="false" info="">
[17:42:58.085]        WriteAP(0x00, 0x190008);
[17:42:58.086]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[17:42:58.086]        WriteAP(0xF0, 0x01);
[17:42:58.089]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[17:42:58.089]      </block>
[17:42:58.090]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[17:42:58.090]    </control>
[17:42:58.090]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[17:42:58.090]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:42:58.090]        // =>  FALSE
[17:42:58.090]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[17:42:58.090]    </control>
[17:42:58.090]    <block atomic="false" info="">
[17:42:58.090]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[17:42:58.097]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[17:42:58.097]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[17:42:58.097]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[17:42:58.098]      __ap = 0; //lets make sure we reset the access point selection
[17:42:58.099]        // -> [__ap <= 0x00000000]
[17:42:58.099]    </block>
[17:42:58.099]  </sequence>
[17:42:58.099]  
[17:42:58.117]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[17:42:58.117]  
[17:42:58.118]  <debugvars>
[17:42:58.118]    // Pre-defined
[17:42:58.118]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[17:42:58.118]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[17:42:58.118]    __dp=0x00000000
[17:42:58.118]    __ap=0x00000000
[17:42:58.118]    __traceout=0x00000000      (Trace Disabled)
[17:42:58.118]    __errorcontrol=0x00000000  (Skip Errors="False")
[17:42:58.118]    __FlashAddr=0x00000000
[17:42:58.118]    __FlashLen=0x00000000
[17:42:58.119]    __FlashArg=0x00000000
[17:42:58.119]    __FlashOp=0x00000000
[17:42:58.119]    __Result=0x00000000
[17:42:58.119]  </debugvars>
[17:42:58.119]  
[17:42:58.119]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[17:42:58.119]    <block atomic="false" info="">
[17:42:58.119]      __var deviceID = 0;
[17:42:58.119]        // -> [deviceID <= 0x00000000]
[17:42:58.119]      __var version = 0;
[17:42:58.119]        // -> [version <= 0x00000000]
[17:42:58.119]      __var partNum = 0;
[17:42:58.120]        // -> [partNum <= 0x00000000]
[17:42:58.120]      __var manuf = 0;
[17:42:58.120]        // -> [manuf <= 0x00000000]
[17:42:58.120]      __var isMSPM0G1X0X_G3X0X = 0;
[17:42:58.120]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[17:42:58.121]      __var isProduction = 0;
[17:42:58.121]        // -> [isProduction <= 0x00000000]
[17:42:58.121]      __var continueId = 0;
[17:42:58.121]        // -> [continueId <= 0x00000000]
[17:42:58.122]      deviceID =   Read32(0x41C40004);
[17:42:58.132]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[17:42:58.132]        // -> [deviceID <= 0x2BB8802F]
[17:42:58.132]      version = deviceID >> 28;
[17:42:58.132]        // -> [version <= 0x00000002]
[17:42:58.132]      partNum = (deviceID & 0x0FFFF000) >> 12;
[17:42:58.133]        // -> [partNum <= 0x0000BB88]
[17:42:58.133]      manuf = (deviceID & 0x00000FFE) >> 1;
[17:42:58.133]        // -> [manuf <= 0x00000017]
[17:42:58.133]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[17:42:58.133]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[17:42:58.133]      isProduction = (version > 0);
[17:42:58.133]        // -> [isProduction <= 0x00000001]
[17:42:58.133]    </block>
[17:42:58.133]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[17:42:58.133]      // if-block "!isMSPM0G1X0X_G3X0X"
[17:42:58.133]        // =>  FALSE
[17:42:58.134]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[17:42:58.134]    </control>
[17:42:58.134]    <control if="continueId == 4" while="" timeout="0" info="">
[17:42:58.134]      // if-block "continueId == 4"
[17:42:58.134]        // =>  FALSE
[17:42:58.134]      // skip if-block "continueId == 4"
[17:42:58.135]    </control>
[17:42:58.135]    <control if="!isProduction" while="" timeout="0" info="">
[17:42:58.135]      // if-block "!isProduction"
[17:42:58.136]        // =>  FALSE
[17:42:58.136]      // skip if-block "!isProduction"
[17:42:58.136]    </control>
[17:42:58.136]  </sequence>
[17:42:58.136]  
