/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\cao\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0017.log
 *  Created     : 19:40:11 (01/08/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[19:40:11.935]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:40:11.935]  
[19:40:11.935]  <debugvars>
[19:40:11.935]    // Pre-defined
[19:40:11.935]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:40:11.935]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:40:11.935]    __dp=0x00000000
[19:40:11.938]    __ap=0x00000000
[19:40:11.938]    __traceout=0x00000000      (Trace Disabled)
[19:40:11.938]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:40:11.938]    __FlashAddr=0x00000000
[19:40:11.938]    __FlashLen=0x00000000
[19:40:11.938]    __FlashArg=0x00000000
[19:40:11.938]    __FlashOp=0x00000000
[19:40:11.938]    __Result=0x00000000
[19:40:11.938]  </debugvars>
[19:40:11.938]  
[19:40:11.938]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:40:11.938]    <block atomic="false" info="">
[19:40:11.938]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:40:11.938]        // -> [isSWJ <= 0x00000001]
[19:40:11.938]      __var hasDormant = __protocol & 0x00020000;
[19:40:11.940]        // -> [hasDormant <= 0x00000000]
[19:40:11.940]      __var protType   = __protocol & 0x0000FFFF;
[19:40:11.940]        // -> [protType <= 0x00000002]
[19:40:11.940]    </block>
[19:40:11.940]    <control if="protType == 1" while="" timeout="0" info="">
[19:40:11.940]      // if-block "protType == 1"
[19:40:11.940]        // =>  FALSE
[19:40:11.941]      // skip if-block "protType == 1"
[19:40:11.941]    </control>
[19:40:11.941]    <control if="protType == 2" while="" timeout="0" info="">
[19:40:11.941]      // if-block "protType == 2"
[19:40:11.941]        // =>  TRUE
[19:40:11.941]      <control if="isSWJ" while="" timeout="0" info="">
[19:40:11.941]        // if-block "isSWJ"
[19:40:11.941]          // =>  TRUE
[19:40:11.941]        <control if="hasDormant" while="" timeout="0" info="">
[19:40:11.941]          // if-block "hasDormant"
[19:40:11.941]            // =>  FALSE
[19:40:11.941]          // skip if-block "hasDormant"
[19:40:11.942]        </control>
[19:40:11.942]        <control if="!hasDormant" while="" timeout="0" info="">
[19:40:11.942]          // if-block "!hasDormant"
[19:40:11.942]            // =>  TRUE
[19:40:11.942]          <block atomic="false" info="">
[19:40:11.942]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:40:11.943]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:40:11.945]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:40:11.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:40:11.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:40:11.947]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:40:11.947]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:40:11.949]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:40:11.949]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:40:11.953]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:40:11.953]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:40:11.956]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:40:11.956]          </block>
[19:40:11.956]          // end if-block "!hasDormant"
[19:40:11.956]        </control>
[19:40:11.958]        // end if-block "isSWJ"
[19:40:11.958]      </control>
[19:40:11.958]      <control if="!isSWJ" while="" timeout="0" info="">
[19:40:11.958]        // if-block "!isSWJ"
[19:40:11.958]          // =>  FALSE
[19:40:11.958]        // skip if-block "!isSWJ"
[19:40:11.958]      </control>
[19:40:11.958]      <block atomic="false" info="">
[19:40:11.958]        ReadDP(0x0);
[19:40:11.960]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:40:11.960]      </block>
[19:40:11.960]      // end if-block "protType == 2"
[19:40:11.960]    </control>
[19:40:11.960]  </sequence>
[19:40:11.961]  
[19:40:11.964]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:40:11.964]  
[19:40:11.964]  <debugvars>
[19:40:11.964]    // Pre-defined
[19:40:11.964]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:40:11.964]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:40:11.964]    __dp=0x00000000
[19:40:11.964]    __ap=0x00000000
[19:40:11.964]    __traceout=0x00000000      (Trace Disabled)
[19:40:11.964]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:40:11.964]    __FlashAddr=0x00000000
[19:40:11.964]    __FlashLen=0x00000000
[19:40:11.964]    __FlashArg=0x00000000
[19:40:11.964]    __FlashOp=0x00000000
[19:40:11.967]    __Result=0x00000000
[19:40:11.967]  </debugvars>
[19:40:11.967]  
[19:40:11.967]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:40:11.967]    <block atomic="false" info="">
[19:40:11.968]      __var SW_DP_ABORT       = 0x0;
[19:40:11.968]        // -> [SW_DP_ABORT <= 0x00000000]
[19:40:11.968]      __var DP_CTRL_STAT      = 0x4;
[19:40:11.968]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:40:11.968]      __var DP_SELECT         = 0x8;
[19:40:11.968]        // -> [DP_SELECT <= 0x00000008]
[19:40:11.968]      __var powered_down      = 0;
[19:40:11.968]        // -> [powered_down <= 0x00000000]
[19:40:11.969]      WriteDP(DP_SELECT, 0x00000000);
[19:40:11.973]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:40:11.973]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:40:11.973]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:40:11.973]        // -> [powered_down <= 0x00000001]
[19:40:11.973]    </block>
[19:40:11.973]    <control if="powered_down" while="" timeout="0" info="">
[19:40:11.973]      // if-block "powered_down"
[19:40:11.973]        // =>  TRUE
[19:40:11.973]      <block atomic="false" info="">
[19:40:11.977]        Message(0, "Debug/System power-up request sent");
[19:40:11.977]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:40:11.981]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:40:11.981]      </block>
[19:40:11.981]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:40:11.981]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:40:11.989]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:40:11.989]        // while-condition  =>  FALSE
[19:40:11.990]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:40:11.990]      </control>
[19:40:11.990]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:40:11.990]        // if-block "(__protocol & 0xFFFF) == 1"
[19:40:11.990]          // =>  FALSE
[19:40:11.990]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:40:11.990]      </control>
[19:40:11.990]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:40:11.990]        // if-block "(__protocol & 0xFFFF) == 2"
[19:40:11.990]          // =>  TRUE
[19:40:11.990]        <block atomic="false" info="">
[19:40:11.990]          Message(0, "executing SWD power up");
[19:40:11.993]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:40:11.997]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:40:11.997]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:40:11.997]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:40:11.997]        </block>
[19:40:11.997]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:40:11.997]      </control>
[19:40:11.997]      // end if-block "powered_down"
[19:40:11.997]    </control>
[19:40:11.997]    <block atomic="false" info="">
[19:40:11.997]      __var DEBUG_PORT_VAL    = 0;
[19:40:11.997]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:40:12.001]      __var ACCESS_POINT_VAL  = 0;
[19:40:12.001]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:40:12.001]      __ap = 1; 
[19:40:12.001]        // -> [__ap <= 0x00000001]
[19:40:12.001]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:40:12.006]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:40:12.006]      __ap = 4;
[19:40:12.007]        // -> [__ap <= 0x00000004]
[19:40:12.007]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:40:12.010]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:40:12.010]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:40:12.010]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:40:12.014]    </block>
[19:40:12.014]    <block atomic="false" info="">
[19:40:12.014]      __var nReset = 0x80;
[19:40:12.014]        // -> [nReset <= 0x00000080]
[19:40:12.014]      __var canReadPins = 0;
[19:40:12.015]        // -> [canReadPins <= 0x00000000]
[19:40:12.015]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:40:12.017]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:40:12.017]        // -> [canReadPins <= 0x00000001]
[19:40:12.017]    </block>
[19:40:12.018]    <control if="" while="1" timeout="200" info="">
[19:40:12.018]      // while "1"  (timeout="200")
[19:40:12.018]      // while-condition  =>  TRUE
[19:40:12.018]      // while "1"  (timeout="200")
[19:40:12.018]      // while-condition  =>  TRUE
[19:40:12.018]      // while "1"  (timeout="200")
[19:40:12.018]      // while-condition  =>  TRUE
[19:40:12.018]      // while "1"  (timeout="200")
[19:40:12.018]      // while-condition  =>  TRUE
[19:40:12.019]      // while "1"  (timeout="200")
[19:40:12.019]      // while  =>  TIMEOUT
[19:40:12.019]      // end while "1"
[19:40:12.019]    </control>
[19:40:12.019]    <control if="canReadPins" while="" timeout="0" info="">
[19:40:12.019]      // if-block "canReadPins"
[19:40:12.019]        // =>  TRUE
[19:40:12.019]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:40:12.019]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:40:12.022]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:40:12.022]        // while-condition  =>  FALSE
[19:40:12.022]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:40:12.022]      </control>
[19:40:12.022]      // end if-block "canReadPins"
[19:40:12.022]    </control>
[19:40:12.022]    <control if="!canReadPins" while="" timeout="0" info="">
[19:40:12.022]      // if-block "!canReadPins"
[19:40:12.022]        // =>  FALSE
[19:40:12.022]      // skip if-block "!canReadPins"
[19:40:12.022]    </control>
[19:40:12.022]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:40:12.022]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:40:12.022]        // =>  TRUE
[19:40:12.022]      <block atomic="false" info="">
[19:40:12.022]        WriteAP(0x00, 0x190008);
[19:40:12.026]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:40:12.026]        WriteAP(0xF0, 0x01);
[19:40:12.028]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:40:12.030]      </block>
[19:40:12.030]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:40:12.030]    </control>
[19:40:12.030]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:40:12.030]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:40:12.030]        // =>  FALSE
[19:40:12.030]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:40:12.030]    </control>
[19:40:12.030]    <block atomic="false" info="">
[19:40:12.030]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:40:12.034]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:40:12.034]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:40:12.034]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:40:12.034]      __ap = 0; //lets make sure we reset the access point selection
[19:40:12.037]        // -> [__ap <= 0x00000000]
[19:40:12.037]    </block>
[19:40:12.037]  </sequence>
[19:40:12.037]  
[19:40:12.071]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:40:12.071]  
[19:40:12.071]  <debugvars>
[19:40:12.075]    // Pre-defined
[19:40:12.075]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:40:12.075]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:40:12.075]    __dp=0x00000000
[19:40:12.075]    __ap=0x00000000
[19:40:12.075]    __traceout=0x00000000      (Trace Disabled)
[19:40:12.075]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:40:12.075]    __FlashAddr=0x00000000
[19:40:12.075]    __FlashLen=0x00000000
[19:40:12.075]    __FlashArg=0x00000000
[19:40:12.075]    __FlashOp=0x00000000
[19:40:12.075]    __Result=0x00000000
[19:40:12.075]  </debugvars>
[19:40:12.075]  
[19:40:12.075]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:40:12.075]    <block atomic="false" info="">
[19:40:12.075]      __var deviceID = 0;
[19:40:12.075]        // -> [deviceID <= 0x00000000]
[19:40:12.075]      __var version = 0;
[19:40:12.075]        // -> [version <= 0x00000000]
[19:40:12.075]      __var partNum = 0;
[19:40:12.075]        // -> [partNum <= 0x00000000]
[19:40:12.075]      __var manuf = 0;
[19:40:12.075]        // -> [manuf <= 0x00000000]
[19:40:12.075]      __var isMSPM0G1X0X_G3X0X = 0;
[19:40:12.078]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:40:12.078]      __var isProduction = 0;
[19:40:12.078]        // -> [isProduction <= 0x00000000]
[19:40:12.078]      __var continueId = 0;
[19:40:12.078]        // -> [continueId <= 0x00000000]
[19:40:12.078]      deviceID =   Read32(0x41C40004);
[19:40:12.083]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:40:12.083]        // -> [deviceID <= 0x2BB8802F]
[19:40:12.083]      version = deviceID >> 28;
[19:40:12.083]        // -> [version <= 0x00000002]
[19:40:12.083]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:40:12.083]        // -> [partNum <= 0x0000BB88]
[19:40:12.083]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:40:12.083]        // -> [manuf <= 0x00000017]
[19:40:12.083]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:40:12.083]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:40:12.083]      isProduction = (version > 0);
[19:40:12.083]        // -> [isProduction <= 0x00000001]
[19:40:12.088]    </block>
[19:40:12.088]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:40:12.088]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:40:12.088]        // =>  FALSE
[19:40:12.088]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:40:12.088]    </control>
[19:40:12.088]    <control if="continueId == 4" while="" timeout="0" info="">
[19:40:12.088]      // if-block "continueId == 4"
[19:40:12.088]        // =>  FALSE
[19:40:12.088]      // skip if-block "continueId == 4"
[19:40:12.088]    </control>
[19:40:12.088]    <control if="!isProduction" while="" timeout="0" info="">
[19:40:12.088]      // if-block "!isProduction"
[19:40:12.088]        // =>  FALSE
[19:40:12.088]      // skip if-block "!isProduction"
[19:40:12.088]    </control>
[19:40:12.088]  </sequence>
[19:40:12.088]  
[19:41:38.879]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:41:38.879]  
[19:41:38.889]  <debugvars>
[19:41:38.889]    // Pre-defined
[19:41:38.889]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:38.889]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:41:38.889]    __dp=0x00000000
[19:41:38.889]    __ap=0x00000000
[19:41:38.889]    __traceout=0x00000000      (Trace Disabled)
[19:41:38.889]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:38.889]    __FlashAddr=0x00000000
[19:41:38.889]    __FlashLen=0x00000000
[19:41:38.889]    __FlashArg=0x00000000
[19:41:38.889]    __FlashOp=0x00000000
[19:41:38.889]    __Result=0x00000000
[19:41:38.889]  </debugvars>
[19:41:38.891]  
[19:41:38.891]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:41:38.891]    <block atomic="false" info="">
[19:41:38.891]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:41:38.891]        // -> [isSWJ <= 0x00000001]
[19:41:38.891]      __var hasDormant = __protocol & 0x00020000;
[19:41:38.891]        // -> [hasDormant <= 0x00000000]
[19:41:38.892]      __var protType   = __protocol & 0x0000FFFF;
[19:41:38.892]        // -> [protType <= 0x00000002]
[19:41:38.892]    </block>
[19:41:38.892]    <control if="protType == 1" while="" timeout="0" info="">
[19:41:38.892]      // if-block "protType == 1"
[19:41:38.892]        // =>  FALSE
[19:41:38.892]      // skip if-block "protType == 1"
[19:41:38.892]    </control>
[19:41:38.892]    <control if="protType == 2" while="" timeout="0" info="">
[19:41:38.892]      // if-block "protType == 2"
[19:41:38.892]        // =>  TRUE
[19:41:38.892]      <control if="isSWJ" while="" timeout="0" info="">
[19:41:38.892]        // if-block "isSWJ"
[19:41:38.892]          // =>  TRUE
[19:41:38.892]        <control if="hasDormant" while="" timeout="0" info="">
[19:41:38.892]          // if-block "hasDormant"
[19:41:38.894]            // =>  FALSE
[19:41:38.894]          // skip if-block "hasDormant"
[19:41:38.894]        </control>
[19:41:38.894]        <control if="!hasDormant" while="" timeout="0" info="">
[19:41:38.894]          // if-block "!hasDormant"
[19:41:38.894]            // =>  TRUE
[19:41:38.894]          <block atomic="false" info="">
[19:41:38.894]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:41:38.896]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:38.896]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:41:38.902]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:41:38.902]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:41:38.903]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:38.904]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:41:38.904]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:41:38.904]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:41:38.904]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:38.904]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:41:38.909]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:41:38.909]          </block>
[19:41:38.909]          // end if-block "!hasDormant"
[19:41:38.909]        </control>
[19:41:38.909]        // end if-block "isSWJ"
[19:41:38.909]      </control>
[19:41:38.909]      <control if="!isSWJ" while="" timeout="0" info="">
[19:41:38.909]        // if-block "!isSWJ"
[19:41:38.909]          // =>  FALSE
[19:41:38.909]        // skip if-block "!isSWJ"
[19:41:38.909]      </control>
[19:41:38.912]      <block atomic="false" info="">
[19:41:38.912]        ReadDP(0x0);
[19:41:38.913]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:41:38.913]      </block>
[19:41:38.913]      // end if-block "protType == 2"
[19:41:38.913]    </control>
[19:41:38.913]  </sequence>
[19:41:38.913]  
[19:41:38.916]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:41:38.916]  
[19:41:38.916]  <debugvars>
[19:41:38.916]    // Pre-defined
[19:41:38.916]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:38.916]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:41:38.916]    __dp=0x00000000
[19:41:38.916]    __ap=0x00000000
[19:41:38.916]    __traceout=0x00000000      (Trace Disabled)
[19:41:38.916]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:38.916]    __FlashAddr=0x00000000
[19:41:38.916]    __FlashLen=0x00000000
[19:41:38.916]    __FlashArg=0x00000000
[19:41:38.916]    __FlashOp=0x00000000
[19:41:38.916]    __Result=0x00000000
[19:41:38.916]  </debugvars>
[19:41:38.916]  
[19:41:38.916]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:41:38.916]    <block atomic="false" info="">
[19:41:38.916]      __var SW_DP_ABORT       = 0x0;
[19:41:38.919]        // -> [SW_DP_ABORT <= 0x00000000]
[19:41:38.919]      __var DP_CTRL_STAT      = 0x4;
[19:41:38.919]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:41:38.919]      __var DP_SELECT         = 0x8;
[19:41:38.919]        // -> [DP_SELECT <= 0x00000008]
[19:41:38.919]      __var powered_down      = 0;
[19:41:38.919]        // -> [powered_down <= 0x00000000]
[19:41:38.919]      WriteDP(DP_SELECT, 0x00000000);
[19:41:38.923]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:41:38.923]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:41:38.929]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:41:38.929]        // -> [powered_down <= 0x00000001]
[19:41:38.929]    </block>
[19:41:38.929]    <control if="powered_down" while="" timeout="0" info="">
[19:41:38.929]      // if-block "powered_down"
[19:41:38.929]        // =>  TRUE
[19:41:38.929]      <block atomic="false" info="">
[19:41:38.929]        Message(0, "Debug/System power-up request sent");
[19:41:38.932]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:41:38.932]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:41:38.932]      </block>
[19:41:38.932]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:41:38.932]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:41:38.936]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:41:38.936]        // while-condition  =>  FALSE
[19:41:38.936]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:41:38.936]      </control>
[19:41:38.936]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:41:38.936]        // if-block "(__protocol & 0xFFFF) == 1"
[19:41:38.936]          // =>  FALSE
[19:41:38.936]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:41:38.936]      </control>
[19:41:38.936]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:41:38.936]        // if-block "(__protocol & 0xFFFF) == 2"
[19:41:38.936]          // =>  TRUE
[19:41:38.936]        <block atomic="false" info="">
[19:41:38.936]          Message(0, "executing SWD power up");
[19:41:38.939]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:41:38.943]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:41:38.943]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:41:38.945]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:41:38.945]        </block>
[19:41:38.945]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:41:38.945]      </control>
[19:41:38.947]      // end if-block "powered_down"
[19:41:38.947]    </control>
[19:41:38.947]    <block atomic="false" info="">
[19:41:38.947]      __var DEBUG_PORT_VAL    = 0;
[19:41:38.947]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:41:38.947]      __var ACCESS_POINT_VAL  = 0;
[19:41:38.947]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:41:38.947]      __ap = 1; 
[19:41:38.947]        // -> [__ap <= 0x00000001]
[19:41:38.947]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:41:38.949]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:41:38.951]      __ap = 4;
[19:41:38.951]        // -> [__ap <= 0x00000004]
[19:41:38.951]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:41:38.953]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:41:38.953]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:41:38.953]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:41:38.956]    </block>
[19:41:38.956]    <block atomic="false" info="">
[19:41:38.956]      __var nReset = 0x80;
[19:41:38.956]        // -> [nReset <= 0x00000080]
[19:41:38.956]      __var canReadPins = 0;
[19:41:38.956]        // -> [canReadPins <= 0x00000000]
[19:41:38.956]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:41:38.959]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:41:38.959]        // -> [canReadPins <= 0x00000001]
[19:41:38.960]    </block>
[19:41:38.960]    <control if="" while="1" timeout="200" info="">
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.960]      // while "1"  (timeout="200")
[19:41:38.960]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.963]      // while-condition  =>  TRUE
[19:41:38.963]      // while "1"  (timeout="200")
[19:41:38.967]      // while-condition  =>  TRUE
[19:41:38.967]      // while "1"  (timeout="200")
[19:41:38.967]      // while-condition  =>  TRUE
[19:41:38.967]      // while "1"  (timeout="200")
[19:41:38.967]      // while-condition  =>  TRUE
[19:41:38.967]      // while "1"  (timeout="200")
[19:41:38.967]      // while-condition  =>  TRUE
[19:41:38.967]      // while "1"  (timeout="200")
[19:41:38.967]      // while-condition  =>  TRUE
[19:41:38.967]      // while "1"  (timeout="200")
[19:41:38.967]      // while-condition  =>  TRUE
[19:41:38.967]      // while "1"  (timeout="200")
[19:41:38.967]      // while-condition  =>  TRUE
[19:41:38.967]      // while "1"  (timeout="200")
[19:41:38.967]      // while-condition  =>  TRUE
[19:41:38.967]      // while "1"  (timeout="200")
[19:41:38.967]      // while-condition  =>  TRUE
[19:41:38.967]      // while "1"  (timeout="200")
[19:41:38.967]      // while-condition  =>  TRUE
[19:41:38.967]      // while "1"  (timeout="200")
[19:41:38.967]      // while-condition  =>  TRUE
[19:41:38.967]      // while "1"  (timeout="200")
[19:41:38.967]      // while-condition  =>  TRUE
[19:41:38.969]      // while "1"  (timeout="200")
[19:41:38.969]      // while-condition  =>  TRUE
[19:41:38.969]      // while "1"  (timeout="200")
[19:41:38.969]      // while-condition  =>  TRUE
[19:41:38.969]      // while "1"  (timeout="200")
[19:41:38.969]      // while-condition  =>  TRUE
[19:41:38.969]      // while "1"  (timeout="200")
[19:41:38.969]      // while-condition  =>  TRUE
[19:41:38.969]      // while "1"  (timeout="200")
[19:41:38.969]      // while-condition  =>  TRUE
[19:41:38.969]      // while "1"  (timeout="200")
[19:41:38.969]      // while-condition  =>  TRUE
[19:41:38.969]      // while "1"  (timeout="200")
[19:41:38.969]      // while-condition  =>  TRUE
[19:41:38.969]      // while "1"  (timeout="200")
[19:41:38.969]      // while-condition  =>  TRUE
[19:41:38.969]      // while "1"  (timeout="200")
[19:41:38.969]      // while-condition  =>  TRUE
[19:41:38.969]      // while "1"  (timeout="200")
[19:41:38.969]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.971]      // while-condition  =>  TRUE
[19:41:38.971]      // while "1"  (timeout="200")
[19:41:38.975]      // while-condition  =>  TRUE
[19:41:38.975]      // while "1"  (timeout="200")
[19:41:38.975]      // while  =>  TIMEOUT
[19:41:38.975]      // end while "1"
[19:41:38.975]    </control>
[19:41:38.975]    <control if="canReadPins" while="" timeout="0" info="">
[19:41:38.975]      // if-block "canReadPins"
[19:41:38.975]        // =>  TRUE
[19:41:38.975]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:41:38.975]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:41:38.975]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:41:38.975]        // while-condition  =>  FALSE
[19:41:38.975]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:41:38.975]      </control>
[19:41:38.975]      // end if-block "canReadPins"
[19:41:38.975]    </control>
[19:41:38.975]    <control if="!canReadPins" while="" timeout="0" info="">
[19:41:38.975]      // if-block "!canReadPins"
[19:41:38.975]        // =>  FALSE
[19:41:38.975]      // skip if-block "!canReadPins"
[19:41:38.975]    </control>
[19:41:38.975]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:41:38.975]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:41:38.975]        // =>  TRUE
[19:41:38.979]      <block atomic="false" info="">
[19:41:38.979]        WriteAP(0x00, 0x190008);
[19:41:38.979]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:41:38.979]        WriteAP(0xF0, 0x01);
[19:41:38.983]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:41:38.983]      </block>
[19:41:38.983]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:41:38.983]    </control>
[19:41:38.983]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:41:38.983]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:41:38.983]        // =>  FALSE
[19:41:38.983]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:41:38.983]    </control>
[19:41:38.983]    <block atomic="false" info="">
[19:41:38.987]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:41:38.989]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:41:38.989]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:41:38.989]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:41:38.992]      __ap = 0; //lets make sure we reset the access point selection
[19:41:38.992]        // -> [__ap <= 0x00000000]
[19:41:38.992]    </block>
[19:41:38.992]  </sequence>
[19:41:38.992]  
[19:41:39.020]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:41:39.020]  
[19:41:39.020]  <debugvars>
[19:41:39.020]    // Pre-defined
[19:41:39.020]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:39.020]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:41:39.020]    __dp=0x00000000
[19:41:39.020]    __ap=0x00000000
[19:41:39.020]    __traceout=0x00000000      (Trace Disabled)
[19:41:39.020]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:39.020]    __FlashAddr=0x00000000
[19:41:39.020]    __FlashLen=0x00000000
[19:41:39.020]    __FlashArg=0x00000000
[19:41:39.020]    __FlashOp=0x00000000
[19:41:39.020]    __Result=0x00000000
[19:41:39.020]  </debugvars>
[19:41:39.020]  
[19:41:39.021]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:41:39.021]    <block atomic="false" info="">
[19:41:39.021]      __var deviceID = 0;
[19:41:39.021]        // -> [deviceID <= 0x00000000]
[19:41:39.021]      __var version = 0;
[19:41:39.021]        // -> [version <= 0x00000000]
[19:41:39.021]      __var partNum = 0;
[19:41:39.021]        // -> [partNum <= 0x00000000]
[19:41:39.021]      __var manuf = 0;
[19:41:39.021]        // -> [manuf <= 0x00000000]
[19:41:39.021]      __var isMSPM0G1X0X_G3X0X = 0;
[19:41:39.021]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:41:39.021]      __var isProduction = 0;
[19:41:39.021]        // -> [isProduction <= 0x00000000]
[19:41:39.021]      __var continueId = 0;
[19:41:39.021]        // -> [continueId <= 0x00000000]
[19:41:39.021]      deviceID =   Read32(0x41C40004);
[19:41:39.025]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:41:39.025]        // -> [deviceID <= 0x2BB8802F]
[19:41:39.025]      version = deviceID >> 28;
[19:41:39.025]        // -> [version <= 0x00000002]
[19:41:39.025]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:41:39.025]        // -> [partNum <= 0x0000BB88]
[19:41:39.025]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:41:39.029]        // -> [manuf <= 0x00000017]
[19:41:39.029]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:41:39.029]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:41:39.029]      isProduction = (version > 0);
[19:41:39.029]        // -> [isProduction <= 0x00000001]
[19:41:39.029]    </block>
[19:41:39.029]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:41:39.030]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:41:39.030]        // =>  FALSE
[19:41:39.030]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:41:39.030]    </control>
[19:41:39.030]    <control if="continueId == 4" while="" timeout="0" info="">
[19:41:39.030]      // if-block "continueId == 4"
[19:41:39.030]        // =>  FALSE
[19:41:39.030]      // skip if-block "continueId == 4"
[19:41:39.030]    </control>
[19:41:39.030]    <control if="!isProduction" while="" timeout="0" info="">
[19:41:39.030]      // if-block "!isProduction"
[19:41:39.030]        // =>  FALSE
[19:41:39.030]      // skip if-block "!isProduction"
[19:41:39.030]    </control>
[19:41:39.030]  </sequence>
[19:41:39.030]  
[19:42:07.029]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:42:07.029]  
[19:42:07.031]  <debugvars>
[19:42:07.031]    // Pre-defined
[19:42:07.031]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:42:07.031]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:42:07.031]    __dp=0x00000000
[19:42:07.031]    __ap=0x00000000
[19:42:07.031]    __traceout=0x00000000      (Trace Disabled)
[19:42:07.031]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:42:07.031]    __FlashAddr=0x00000000
[19:42:07.031]    __FlashLen=0x00000000
[19:42:07.033]    __FlashArg=0x00000000
[19:42:07.033]    __FlashOp=0x00000000
[19:42:07.033]    __Result=0x00000000
[19:42:07.033]  </debugvars>
[19:42:07.033]  
[19:42:07.033]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:42:07.033]    <block atomic="false" info="">
[19:42:07.033]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:42:07.033]        // -> [isSWJ <= 0x00000001]
[19:42:07.033]      __var hasDormant = __protocol & 0x00020000;
[19:42:07.033]        // -> [hasDormant <= 0x00000000]
[19:42:07.033]      __var protType   = __protocol & 0x0000FFFF;
[19:42:07.034]        // -> [protType <= 0x00000002]
[19:42:07.034]    </block>
[19:42:07.034]    <control if="protType == 1" while="" timeout="0" info="">
[19:42:07.034]      // if-block "protType == 1"
[19:42:07.034]        // =>  FALSE
[19:42:07.034]      // skip if-block "protType == 1"
[19:42:07.034]    </control>
[19:42:07.034]    <control if="protType == 2" while="" timeout="0" info="">
[19:42:07.034]      // if-block "protType == 2"
[19:42:07.034]        // =>  TRUE
[19:42:07.034]      <control if="isSWJ" while="" timeout="0" info="">
[19:42:07.034]        // if-block "isSWJ"
[19:42:07.034]          // =>  TRUE
[19:42:07.034]        <control if="hasDormant" while="" timeout="0" info="">
[19:42:07.034]          // if-block "hasDormant"
[19:42:07.034]            // =>  FALSE
[19:42:07.034]          // skip if-block "hasDormant"
[19:42:07.034]        </control>
[19:42:07.034]        <control if="!hasDormant" while="" timeout="0" info="">
[19:42:07.034]          // if-block "!hasDormant"
[19:42:07.036]            // =>  TRUE
[19:42:07.036]          <block atomic="false" info="">
[19:42:07.036]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:42:07.039]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:42:07.039]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:42:07.042]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:42:07.042]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:42:07.042]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:42:07.042]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:42:07.046]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:42:07.046]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:42:07.046]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:42:07.046]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:42:07.050]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:42:07.050]          </block>
[19:42:07.050]          // end if-block "!hasDormant"
[19:42:07.050]        </control>
[19:42:07.050]        // end if-block "isSWJ"
[19:42:07.050]      </control>
[19:42:07.050]      <control if="!isSWJ" while="" timeout="0" info="">
[19:42:07.050]        // if-block "!isSWJ"
[19:42:07.050]          // =>  FALSE
[19:42:07.050]        // skip if-block "!isSWJ"
[19:42:07.050]      </control>
[19:42:07.050]      <block atomic="false" info="">
[19:42:07.050]        ReadDP(0x0);
[19:42:07.050]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:42:07.050]      </block>
[19:42:07.050]      // end if-block "protType == 2"
[19:42:07.050]    </control>
[19:42:07.050]  </sequence>
[19:42:07.050]  
[19:42:07.053]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:42:07.053]  
[19:42:07.053]  <debugvars>
[19:42:07.053]    // Pre-defined
[19:42:07.053]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:42:07.053]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:42:07.053]    __dp=0x00000000
[19:42:07.053]    __ap=0x00000000
[19:42:07.053]    __traceout=0x00000000      (Trace Disabled)
[19:42:07.053]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:42:07.053]    __FlashAddr=0x00000000
[19:42:07.053]    __FlashLen=0x00000000
[19:42:07.053]    __FlashArg=0x00000000
[19:42:07.053]    __FlashOp=0x00000000
[19:42:07.053]    __Result=0x00000000
[19:42:07.053]  </debugvars>
[19:42:07.053]  
[19:42:07.053]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:42:07.053]    <block atomic="false" info="">
[19:42:07.057]      __var SW_DP_ABORT       = 0x0;
[19:42:07.057]        // -> [SW_DP_ABORT <= 0x00000000]
[19:42:07.057]      __var DP_CTRL_STAT      = 0x4;
[19:42:07.057]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:42:07.057]      __var DP_SELECT         = 0x8;
[19:42:07.057]        // -> [DP_SELECT <= 0x00000008]
[19:42:07.057]      __var powered_down      = 0;
[19:42:07.057]        // -> [powered_down <= 0x00000000]
[19:42:07.057]      WriteDP(DP_SELECT, 0x00000000);
[19:42:07.060]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:42:07.060]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:42:07.062]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:42:07.062]        // -> [powered_down <= 0x00000001]
[19:42:07.062]    </block>
[19:42:07.062]    <control if="powered_down" while="" timeout="0" info="">
[19:42:07.062]      // if-block "powered_down"
[19:42:07.062]        // =>  TRUE
[19:42:07.062]      <block atomic="false" info="">
[19:42:07.062]        Message(0, "Debug/System power-up request sent");
[19:42:07.064]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:42:07.070]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:42:07.070]      </block>
[19:42:07.070]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:42:07.070]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:42:07.072]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:42:07.072]        // while-condition  =>  FALSE
[19:42:07.072]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:42:07.074]      </control>
[19:42:07.074]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:42:07.074]        // if-block "(__protocol & 0xFFFF) == 1"
[19:42:07.074]          // =>  FALSE
[19:42:07.074]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:42:07.074]      </control>
[19:42:07.074]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:42:07.074]        // if-block "(__protocol & 0xFFFF) == 2"
[19:42:07.074]          // =>  TRUE
[19:42:07.074]        <block atomic="false" info="">
[19:42:07.074]          Message(0, "executing SWD power up");
[19:42:07.074]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:42:07.078]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:42:07.078]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:42:07.080]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:42:07.080]        </block>
[19:42:07.080]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:42:07.080]      </control>
[19:42:07.082]      // end if-block "powered_down"
[19:42:07.082]    </control>
[19:42:07.082]    <block atomic="false" info="">
[19:42:07.082]      __var DEBUG_PORT_VAL    = 0;
[19:42:07.082]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:42:07.082]      __var ACCESS_POINT_VAL  = 0;
[19:42:07.082]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:42:07.082]      __ap = 1; 
[19:42:07.082]        // -> [__ap <= 0x00000001]
[19:42:07.082]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:42:07.086]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:42:07.086]      __ap = 4;
[19:42:07.086]        // -> [__ap <= 0x00000004]
[19:42:07.086]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:42:07.090]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:42:07.090]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:42:07.090]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:42:07.090]    </block>
[19:42:07.090]    <block atomic="false" info="">
[19:42:07.090]      __var nReset = 0x80;
[19:42:07.090]        // -> [nReset <= 0x00000080]
[19:42:07.090]      __var canReadPins = 0;
[19:42:07.090]        // -> [canReadPins <= 0x00000000]
[19:42:07.090]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:42:07.098]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:42:07.098]        // -> [canReadPins <= 0x00000001]
[19:42:07.098]    </block>
[19:42:07.098]    <control if="" while="1" timeout="200" info="">
[19:42:07.098]      // while "1"  (timeout="200")
[19:42:07.100]      // while-condition  =>  TRUE
[19:42:07.100]      // while "1"  (timeout="200")
[19:42:07.100]      // while-condition  =>  TRUE
[19:42:07.100]      // while "1"  (timeout="200")
[19:42:07.100]      // while-condition  =>  TRUE
[19:42:07.100]      // while "1"  (timeout="200")
[19:42:07.100]      // while-condition  =>  TRUE
[19:42:07.100]      // while "1"  (timeout="200")
[19:42:07.100]      // while-condition  =>  TRUE
[19:42:07.100]      // while "1"  (timeout="200")
[19:42:07.100]      // while-condition  =>  TRUE
[19:42:07.100]      // while "1"  (timeout="200")
[19:42:07.100]      // while-condition  =>  TRUE
[19:42:07.100]      // while "1"  (timeout="200")
[19:42:07.100]      // while-condition  =>  TRUE
[19:42:07.101]      // while "1"  (timeout="200")
[19:42:07.101]      // while-condition  =>  TRUE
[19:42:07.101]      // while "1"  (timeout="200")
[19:42:07.101]      // while-condition  =>  TRUE
[19:42:07.101]      // while "1"  (timeout="200")
[19:42:07.101]      // while-condition  =>  TRUE
[19:42:07.101]      // while "1"  (timeout="200")
[19:42:07.101]      // while-condition  =>  TRUE
[19:42:07.101]      // while "1"  (timeout="200")
[19:42:07.101]      // while-condition  =>  TRUE
[19:42:07.101]      // while "1"  (timeout="200")
[19:42:07.101]      // while-condition  =>  TRUE
[19:42:07.101]      // while "1"  (timeout="200")
[19:42:07.101]      // while-condition  =>  TRUE
[19:42:07.101]      // while "1"  (timeout="200")
[19:42:07.101]      // while-condition  =>  TRUE
[19:42:07.101]      // while "1"  (timeout="200")
[19:42:07.101]      // while-condition  =>  TRUE
[19:42:07.103]      // while "1"  (timeout="200")
[19:42:07.103]      // while-condition  =>  TRUE
[19:42:07.103]      // while "1"  (timeout="200")
[19:42:07.103]      // while-condition  =>  TRUE
[19:42:07.103]      // while "1"  (timeout="200")
[19:42:07.103]      // while-condition  =>  TRUE
[19:42:07.103]      // while "1"  (timeout="200")
[19:42:07.103]      // while-condition  =>  TRUE
[19:42:07.103]      // while "1"  (timeout="200")
[19:42:07.103]      // while-condition  =>  TRUE
[19:42:07.104]      // while "1"  (timeout="200")
[19:42:07.104]      // while-condition  =>  TRUE
[19:42:07.104]      // while "1"  (timeout="200")
[19:42:07.104]      // while-condition  =>  TRUE
[19:42:07.104]      // while "1"  (timeout="200")
[19:42:07.104]      // while-condition  =>  TRUE
[19:42:07.104]      // while "1"  (timeout="200")
[19:42:07.104]      // while-condition  =>  TRUE
[19:42:07.104]      // while "1"  (timeout="200")
[19:42:07.104]      // while-condition  =>  TRUE
[19:42:07.104]      // while "1"  (timeout="200")
[19:42:07.104]      // while-condition  =>  TRUE
[19:42:07.105]      // while "1"  (timeout="200")
[19:42:07.105]      // while-condition  =>  TRUE
[19:42:07.105]      // while "1"  (timeout="200")
[19:42:07.105]      // while-condition  =>  TRUE
[19:42:07.105]      // while "1"  (timeout="200")
[19:42:07.105]      // while-condition  =>  TRUE
[19:42:07.105]      // while "1"  (timeout="200")
[19:42:07.106]      // while-condition  =>  TRUE
[19:42:07.106]      // while "1"  (timeout="200")
[19:42:07.106]      // while-condition  =>  TRUE
[19:42:07.106]      // while "1"  (timeout="200")
[19:42:07.106]      // while-condition  =>  TRUE
[19:42:07.106]      // while "1"  (timeout="200")
[19:42:07.106]      // while-condition  =>  TRUE
[19:42:07.106]      // while "1"  (timeout="200")
[19:42:07.106]      // while-condition  =>  TRUE
[19:42:07.106]      // while "1"  (timeout="200")
[19:42:07.106]      // while-condition  =>  TRUE
[19:42:07.107]      // while "1"  (timeout="200")
[19:42:07.107]      // while-condition  =>  TRUE
[19:42:07.107]      // while "1"  (timeout="200")
[19:42:07.107]      // while-condition  =>  TRUE
[19:42:07.107]      // while "1"  (timeout="200")
[19:42:07.107]      // while-condition  =>  TRUE
[19:42:07.107]      // while "1"  (timeout="200")
[19:42:07.107]      // while-condition  =>  TRUE
[19:42:07.107]      // while "1"  (timeout="200")
[19:42:07.107]      // while-condition  =>  TRUE
[19:42:07.107]      // while "1"  (timeout="200")
[19:42:07.107]      // while-condition  =>  TRUE
[19:42:07.108]      // while "1"  (timeout="200")
[19:42:07.108]      // while-condition  =>  TRUE
[19:42:07.108]      // while "1"  (timeout="200")
[19:42:07.108]      // while-condition  =>  TRUE
[19:42:07.108]      // while "1"  (timeout="200")
[19:42:07.108]      // while-condition  =>  TRUE
[19:42:07.108]      // while "1"  (timeout="200")
[19:42:07.108]      // while-condition  =>  TRUE
[19:42:07.108]      // while "1"  (timeout="200")
[19:42:07.108]      // while-condition  =>  TRUE
[19:42:07.108]      // while "1"  (timeout="200")
[19:42:07.108]      // while-condition  =>  TRUE
[19:42:07.108]      // while "1"  (timeout="200")
[19:42:07.108]      // while-condition  =>  TRUE
[19:42:07.108]      // while "1"  (timeout="200")
[19:42:07.108]      // while-condition  =>  TRUE
[19:42:07.109]      // while "1"  (timeout="200")
[19:42:07.109]      // while-condition  =>  TRUE
[19:42:07.109]      // while "1"  (timeout="200")
[19:42:07.109]      // while-condition  =>  TRUE
[19:42:07.109]      // while "1"  (timeout="200")
[19:42:07.109]      // while-condition  =>  TRUE
[19:42:07.110]      // while "1"  (timeout="200")
[19:42:07.110]      // while-condition  =>  TRUE
[19:42:07.110]      // while "1"  (timeout="200")
[19:42:07.110]      // while-condition  =>  TRUE
[19:42:07.110]      // while "1"  (timeout="200")
[19:42:07.110]      // while-condition  =>  TRUE
[19:42:07.110]      // while "1"  (timeout="200")
[19:42:07.110]      // while-condition  =>  TRUE
[19:42:07.110]      // while "1"  (timeout="200")
[19:42:07.111]      // while-condition  =>  TRUE
[19:42:07.111]      // while "1"  (timeout="200")
[19:42:07.111]      // while-condition  =>  TRUE
[19:42:07.111]      // while "1"  (timeout="200")
[19:42:07.111]      // while-condition  =>  TRUE
[19:42:07.111]      // while "1"  (timeout="200")
[19:42:07.111]      // while-condition  =>  TRUE
[19:42:07.111]      // while "1"  (timeout="200")
[19:42:07.111]      // while-condition  =>  TRUE
[19:42:07.111]      // while "1"  (timeout="200")
[19:42:07.111]      // while-condition  =>  TRUE
[19:42:07.111]      // while "1"  (timeout="200")
[19:42:07.111]      // while-condition  =>  TRUE
[19:42:07.111]      // while "1"  (timeout="200")
[19:42:07.111]      // while-condition  =>  TRUE
[19:42:07.113]      // while "1"  (timeout="200")
[19:42:07.113]      // while  =>  TIMEOUT
[19:42:07.113]      // end while "1"
[19:42:07.113]    </control>
[19:42:07.113]    <control if="canReadPins" while="" timeout="0" info="">
[19:42:07.113]      // if-block "canReadPins"
[19:42:07.113]        // =>  TRUE
[19:42:07.113]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:42:07.113]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:42:07.115]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:42:07.115]        // while-condition  =>  FALSE
[19:42:07.115]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:42:07.116]      </control>
[19:42:07.116]      // end if-block "canReadPins"
[19:42:07.116]    </control>
[19:42:07.116]    <control if="!canReadPins" while="" timeout="0" info="">
[19:42:07.116]      // if-block "!canReadPins"
[19:42:07.116]        // =>  FALSE
[19:42:07.116]      // skip if-block "!canReadPins"
[19:42:07.116]    </control>
[19:42:07.116]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:42:07.116]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:42:07.116]        // =>  TRUE
[19:42:07.116]      <block atomic="false" info="">
[19:42:07.116]        WriteAP(0x00, 0x190008);
[19:42:07.127]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:42:07.127]        WriteAP(0xF0, 0x01);
[19:42:07.133]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:42:07.133]      </block>
[19:42:07.133]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:42:07.133]    </control>
[19:42:07.133]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:42:07.133]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:42:07.133]        // =>  FALSE
[19:42:07.133]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:42:07.133]    </control>
[19:42:07.133]    <block atomic="false" info="">
[19:42:07.133]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:42:07.136]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:42:07.136]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:42:07.136]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:42:07.141]      __ap = 0; //lets make sure we reset the access point selection
[19:42:07.141]        // -> [__ap <= 0x00000000]
[19:42:07.141]    </block>
[19:42:07.141]  </sequence>
[19:42:07.141]  
[19:42:07.164]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:42:07.164]  
[19:42:07.164]  <debugvars>
[19:42:07.164]    // Pre-defined
[19:42:07.164]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:42:07.164]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:42:07.164]    __dp=0x00000000
[19:42:07.164]    __ap=0x00000000
[19:42:07.164]    __traceout=0x00000000      (Trace Disabled)
[19:42:07.164]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:42:07.164]    __FlashAddr=0x00000000
[19:42:07.164]    __FlashLen=0x00000000
[19:42:07.164]    __FlashArg=0x00000000
[19:42:07.164]    __FlashOp=0x00000000
[19:42:07.164]    __Result=0x00000000
[19:42:07.164]  </debugvars>
[19:42:07.164]  
[19:42:07.164]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:42:07.168]    <block atomic="false" info="">
[19:42:07.168]      __var deviceID = 0;
[19:42:07.168]        // -> [deviceID <= 0x00000000]
[19:42:07.168]      __var version = 0;
[19:42:07.168]        // -> [version <= 0x00000000]
[19:42:07.168]      __var partNum = 0;
[19:42:07.168]        // -> [partNum <= 0x00000000]
[19:42:07.170]      __var manuf = 0;
[19:42:07.170]        // -> [manuf <= 0x00000000]
[19:42:07.170]      __var isMSPM0G1X0X_G3X0X = 0;
[19:42:07.170]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:42:07.170]      __var isProduction = 0;
[19:42:07.170]        // -> [isProduction <= 0x00000000]
[19:42:07.170]      __var continueId = 0;
[19:42:07.170]        // -> [continueId <= 0x00000000]
[19:42:07.170]      deviceID =   Read32(0x41C40004);
[19:42:07.173]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:42:07.173]        // -> [deviceID <= 0x2BB8802F]
[19:42:07.173]      version = deviceID >> 28;
[19:42:07.173]        // -> [version <= 0x00000002]
[19:42:07.173]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:42:07.173]        // -> [partNum <= 0x0000BB88]
[19:42:07.173]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:42:07.173]        // -> [manuf <= 0x00000017]
[19:42:07.173]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:42:07.173]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:42:07.173]      isProduction = (version > 0);
[19:42:07.173]        // -> [isProduction <= 0x00000001]
[19:42:07.173]    </block>
[19:42:07.173]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:42:07.173]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:42:07.173]        // =>  FALSE
[19:42:07.173]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:42:07.173]    </control>
[19:42:07.173]    <control if="continueId == 4" while="" timeout="0" info="">
[19:42:07.173]      // if-block "continueId == 4"
[19:42:07.177]        // =>  FALSE
[19:42:07.177]      // skip if-block "continueId == 4"
[19:42:07.177]    </control>
[19:42:07.177]    <control if="!isProduction" while="" timeout="0" info="">
[19:42:07.177]      // if-block "!isProduction"
[19:42:07.177]        // =>  FALSE
[19:42:07.177]      // skip if-block "!isProduction"
[19:42:07.177]    </control>
[19:42:07.177]  </sequence>
[19:42:07.177]  
[19:43:15.527]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:43:15.527]  
[19:43:15.528]  <debugvars>
[19:43:15.528]    // Pre-defined
[19:43:15.528]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:43:15.528]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:43:15.528]    __dp=0x00000000
[19:43:15.528]    __ap=0x00000000
[19:43:15.528]    __traceout=0x00000000      (Trace Disabled)
[19:43:15.528]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:43:15.528]    __FlashAddr=0x00000000
[19:43:15.528]    __FlashLen=0x00000000
[19:43:15.528]    __FlashArg=0x00000000
[19:43:15.528]    __FlashOp=0x00000000
[19:43:15.528]    __Result=0x00000000
[19:43:15.528]  </debugvars>
[19:43:15.528]  
[19:43:15.530]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:43:15.530]    <block atomic="false" info="">
[19:43:15.530]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:43:15.530]        // -> [isSWJ <= 0x00000001]
[19:43:15.530]      __var hasDormant = __protocol & 0x00020000;
[19:43:15.530]        // -> [hasDormant <= 0x00000000]
[19:43:15.530]      __var protType   = __protocol & 0x0000FFFF;
[19:43:15.530]        // -> [protType <= 0x00000002]
[19:43:15.530]    </block>
[19:43:15.530]    <control if="protType == 1" while="" timeout="0" info="">
[19:43:15.530]      // if-block "protType == 1"
[19:43:15.531]        // =>  FALSE
[19:43:15.531]      // skip if-block "protType == 1"
[19:43:15.531]    </control>
[19:43:15.531]    <control if="protType == 2" while="" timeout="0" info="">
[19:43:15.531]      // if-block "protType == 2"
[19:43:15.531]        // =>  TRUE
[19:43:15.531]      <control if="isSWJ" while="" timeout="0" info="">
[19:43:15.531]        // if-block "isSWJ"
[19:43:15.531]          // =>  TRUE
[19:43:15.531]        <control if="hasDormant" while="" timeout="0" info="">
[19:43:15.531]          // if-block "hasDormant"
[19:43:15.531]            // =>  FALSE
[19:43:15.531]          // skip if-block "hasDormant"
[19:43:15.531]        </control>
[19:43:15.531]        <control if="!hasDormant" while="" timeout="0" info="">
[19:43:15.531]          // if-block "!hasDormant"
[19:43:15.533]            // =>  TRUE
[19:43:15.533]          <block atomic="false" info="">
[19:43:15.533]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:43:15.539]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:43:15.539]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:43:15.540]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:43:15.540]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:43:15.541]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:43:15.541]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:43:15.543]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:43:15.543]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:43:15.543]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:43:15.543]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:43:15.552]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:43:15.552]          </block>
[19:43:15.552]          // end if-block "!hasDormant"
[19:43:15.552]        </control>
[19:43:15.553]        // end if-block "isSWJ"
[19:43:15.553]      </control>
[19:43:15.553]      <control if="!isSWJ" while="" timeout="0" info="">
[19:43:15.553]        // if-block "!isSWJ"
[19:43:15.553]          // =>  FALSE
[19:43:15.553]        // skip if-block "!isSWJ"
[19:43:15.553]      </control>
[19:43:15.553]      <block atomic="false" info="">
[19:43:15.553]        ReadDP(0x0);
[19:43:15.559]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:43:15.559]      </block>
[19:43:15.559]      // end if-block "protType == 2"
[19:43:15.559]    </control>
[19:43:15.559]  </sequence>
[19:43:15.559]  
[19:43:15.561]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:43:15.561]  
[19:43:15.561]  <debugvars>
[19:43:15.561]    // Pre-defined
[19:43:15.561]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:43:15.561]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:43:15.561]    __dp=0x00000000
[19:43:15.563]    __ap=0x00000000
[19:43:15.563]    __traceout=0x00000000      (Trace Disabled)
[19:43:15.563]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:43:15.563]    __FlashAddr=0x00000000
[19:43:15.563]    __FlashLen=0x00000000
[19:43:15.563]    __FlashArg=0x00000000
[19:43:15.563]    __FlashOp=0x00000000
[19:43:15.563]    __Result=0x00000000
[19:43:15.563]  </debugvars>
[19:43:15.563]  
[19:43:15.563]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:43:15.563]    <block atomic="false" info="">
[19:43:15.563]      __var SW_DP_ABORT       = 0x0;
[19:43:15.563]        // -> [SW_DP_ABORT <= 0x00000000]
[19:43:15.563]      __var DP_CTRL_STAT      = 0x4;
[19:43:15.565]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:43:15.565]      __var DP_SELECT         = 0x8;
[19:43:15.565]        // -> [DP_SELECT <= 0x00000008]
[19:43:15.565]      __var powered_down      = 0;
[19:43:15.565]        // -> [powered_down <= 0x00000000]
[19:43:15.565]      WriteDP(DP_SELECT, 0x00000000);
[19:43:15.567]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:43:15.567]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:43:15.567]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:43:15.567]        // -> [powered_down <= 0x00000001]
[19:43:15.567]    </block>
[19:43:15.567]    <control if="powered_down" while="" timeout="0" info="">
[19:43:15.567]      // if-block "powered_down"
[19:43:15.567]        // =>  TRUE
[19:43:15.567]      <block atomic="false" info="">
[19:43:15.567]        Message(0, "Debug/System power-up request sent");
[19:43:15.571]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:43:15.573]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:43:15.573]      </block>
[19:43:15.573]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:43:15.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:43:15.576]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:43:15.576]        // while-condition  =>  FALSE
[19:43:15.576]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:43:15.576]      </control>
[19:43:15.576]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:43:15.576]        // if-block "(__protocol & 0xFFFF) == 1"
[19:43:15.576]          // =>  FALSE
[19:43:15.576]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:43:15.576]      </control>
[19:43:15.576]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:43:15.576]        // if-block "(__protocol & 0xFFFF) == 2"
[19:43:15.576]          // =>  TRUE
[19:43:15.576]        <block atomic="false" info="">
[19:43:15.576]          Message(0, "executing SWD power up");
[19:43:15.578]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:43:15.583]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:43:15.584]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:43:15.585]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:43:15.585]        </block>
[19:43:15.585]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:43:15.585]      </control>
[19:43:15.585]      // end if-block "powered_down"
[19:43:15.585]    </control>
[19:43:15.585]    <block atomic="false" info="">
[19:43:15.585]      __var DEBUG_PORT_VAL    = 0;
[19:43:15.585]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:43:15.585]      __var ACCESS_POINT_VAL  = 0;
[19:43:15.585]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:43:15.585]      __ap = 1; 
[19:43:15.585]        // -> [__ap <= 0x00000001]
[19:43:15.585]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:43:15.588]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:43:15.588]      __ap = 4;
[19:43:15.588]        // -> [__ap <= 0x00000004]
[19:43:15.588]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:43:15.593]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:43:15.593]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:43:15.596]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:43:15.596]    </block>
[19:43:15.596]    <block atomic="false" info="">
[19:43:15.596]      __var nReset = 0x80;
[19:43:15.596]        // -> [nReset <= 0x00000080]
[19:43:15.598]      __var canReadPins = 0;
[19:43:15.598]        // -> [canReadPins <= 0x00000000]
[19:43:15.598]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:43:15.601]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:43:15.601]        // -> [canReadPins <= 0x00000001]
[19:43:15.601]    </block>
[19:43:15.601]    <control if="" while="1" timeout="200" info="">
[19:43:15.601]      // while "1"  (timeout="200")
[19:43:15.601]      // while-condition  =>  TRUE
[19:43:15.601]      // while "1"  (timeout="200")
[19:43:15.601]      // while-condition  =>  TRUE
[19:43:15.601]      // while "1"  (timeout="200")
[19:43:15.601]      // while-condition  =>  TRUE
[19:43:15.601]      // while "1"  (timeout="200")
[19:43:15.601]      // while-condition  =>  TRUE
[19:43:15.601]      // while "1"  (timeout="200")
[19:43:15.601]      // while-condition  =>  TRUE
[19:43:15.601]      // while "1"  (timeout="200")
[19:43:15.601]      // while-condition  =>  TRUE
[19:43:15.601]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.604]      // while-condition  =>  TRUE
[19:43:15.604]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.608]      // while-condition  =>  TRUE
[19:43:15.608]      // while "1"  (timeout="200")
[19:43:15.611]      // while-condition  =>  TRUE
[19:43:15.611]      // while "1"  (timeout="200")
[19:43:15.611]      // while-condition  =>  TRUE
[19:43:15.611]      // while "1"  (timeout="200")
[19:43:15.611]      // while-condition  =>  TRUE
[19:43:15.611]      // while "1"  (timeout="200")
[19:43:15.611]      // while-condition  =>  TRUE
[19:43:15.611]      // while "1"  (timeout="200")
[19:43:15.611]      // while-condition  =>  TRUE
[19:43:15.611]      // while "1"  (timeout="200")
[19:43:15.611]      // while-condition  =>  TRUE
[19:43:15.612]      // while "1"  (timeout="200")
[19:43:15.612]      // while-condition  =>  TRUE
[19:43:15.612]      // while "1"  (timeout="200")
[19:43:15.612]      // while-condition  =>  TRUE
[19:43:15.612]      // while "1"  (timeout="200")
[19:43:15.612]      // while-condition  =>  TRUE
[19:43:15.612]      // while "1"  (timeout="200")
[19:43:15.612]      // while-condition  =>  TRUE
[19:43:15.613]      // while "1"  (timeout="200")
[19:43:15.613]      // while  =>  TIMEOUT
[19:43:15.613]      // end while "1"
[19:43:15.613]    </control>
[19:43:15.613]    <control if="canReadPins" while="" timeout="0" info="">
[19:43:15.613]      // if-block "canReadPins"
[19:43:15.613]        // =>  TRUE
[19:43:15.613]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:43:15.613]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:43:15.613]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:43:15.613]        // while-condition  =>  FALSE
[19:43:15.613]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:43:15.613]      </control>
[19:43:15.613]      // end if-block "canReadPins"
[19:43:15.613]    </control>
[19:43:15.616]    <control if="!canReadPins" while="" timeout="0" info="">
[19:43:15.616]      // if-block "!canReadPins"
[19:43:15.616]        // =>  FALSE
[19:43:15.616]      // skip if-block "!canReadPins"
[19:43:15.616]    </control>
[19:43:15.616]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:43:15.616]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:43:15.616]        // =>  TRUE
[19:43:15.616]      <block atomic="false" info="">
[19:43:15.616]        WriteAP(0x00, 0x190008);
[19:43:15.617]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:43:15.617]        WriteAP(0xF0, 0x01);
[19:43:15.626]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:43:15.626]      </block>
[19:43:15.626]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:43:15.626]    </control>
[19:43:15.626]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:43:15.626]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:43:15.626]        // =>  FALSE
[19:43:15.626]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:43:15.626]    </control>
[19:43:15.626]    <block atomic="false" info="">
[19:43:15.626]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:43:15.631]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:43:15.631]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:43:15.631]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:43:15.634]      __ap = 0; //lets make sure we reset the access point selection
[19:43:15.634]        // -> [__ap <= 0x00000000]
[19:43:15.634]    </block>
[19:43:15.634]  </sequence>
[19:43:15.634]  
[19:43:15.658]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:43:15.658]  
[19:43:15.658]  <debugvars>
[19:43:15.658]    // Pre-defined
[19:43:15.658]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:43:15.658]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:43:15.658]    __dp=0x00000000
[19:43:15.658]    __ap=0x00000000
[19:43:15.658]    __traceout=0x00000000      (Trace Disabled)
[19:43:15.659]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:43:15.659]    __FlashAddr=0x00000000
[19:43:15.659]    __FlashLen=0x00000000
[19:43:15.659]    __FlashArg=0x00000000
[19:43:15.659]    __FlashOp=0x00000000
[19:43:15.659]    __Result=0x00000000
[19:43:15.659]  </debugvars>
[19:43:15.659]  
[19:43:15.659]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:43:15.659]    <block atomic="false" info="">
[19:43:15.659]      __var deviceID = 0;
[19:43:15.659]        // -> [deviceID <= 0x00000000]
[19:43:15.659]      __var version = 0;
[19:43:15.659]        // -> [version <= 0x00000000]
[19:43:15.659]      __var partNum = 0;
[19:43:15.659]        // -> [partNum <= 0x00000000]
[19:43:15.659]      __var manuf = 0;
[19:43:15.659]        // -> [manuf <= 0x00000000]
[19:43:15.659]      __var isMSPM0G1X0X_G3X0X = 0;
[19:43:15.659]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:43:15.661]      __var isProduction = 0;
[19:43:15.661]        // -> [isProduction <= 0x00000000]
[19:43:15.661]      __var continueId = 0;
[19:43:15.661]        // -> [continueId <= 0x00000000]
[19:43:15.661]      deviceID =   Read32(0x41C40004);
[19:43:15.666]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:43:15.666]        // -> [deviceID <= 0x2BB8802F]
[19:43:15.666]      version = deviceID >> 28;
[19:43:15.667]        // -> [version <= 0x00000002]
[19:43:15.667]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:43:15.667]        // -> [partNum <= 0x0000BB88]
[19:43:15.667]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:43:15.667]        // -> [manuf <= 0x00000017]
[19:43:15.667]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:43:15.667]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:43:15.667]      isProduction = (version > 0);
[19:43:15.667]        // -> [isProduction <= 0x00000001]
[19:43:15.667]    </block>
[19:43:15.667]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:43:15.667]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:43:15.667]        // =>  FALSE
[19:43:15.667]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:43:15.667]    </control>
[19:43:15.669]    <control if="continueId == 4" while="" timeout="0" info="">
[19:43:15.669]      // if-block "continueId == 4"
[19:43:15.669]        // =>  FALSE
[19:43:15.669]      // skip if-block "continueId == 4"
[19:43:15.669]    </control>
[19:43:15.669]    <control if="!isProduction" while="" timeout="0" info="">
[19:43:15.669]      // if-block "!isProduction"
[19:43:15.669]        // =>  FALSE
[19:43:15.669]      // skip if-block "!isProduction"
[19:43:15.669]    </control>
[19:43:15.669]  </sequence>
[19:43:15.669]  
[19:44:14.138]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:44:14.138]  
[19:44:14.141]  <debugvars>
[19:44:14.141]    // Pre-defined
[19:44:14.141]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:44:14.141]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:44:14.141]    __dp=0x00000000
[19:44:14.141]    __ap=0x00000000
[19:44:14.141]    __traceout=0x00000000      (Trace Disabled)
[19:44:14.141]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:44:14.141]    __FlashAddr=0x00000000
[19:44:14.141]    __FlashLen=0x00000000
[19:44:14.141]    __FlashArg=0x00000000
[19:44:14.141]    __FlashOp=0x00000000
[19:44:14.141]    __Result=0x00000000
[19:44:14.141]  </debugvars>
[19:44:14.141]  
[19:44:14.141]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:44:14.141]    <block atomic="false" info="">
[19:44:14.142]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:44:14.142]        // -> [isSWJ <= 0x00000001]
[19:44:14.142]      __var hasDormant = __protocol & 0x00020000;
[19:44:14.142]        // -> [hasDormant <= 0x00000000]
[19:44:14.142]      __var protType   = __protocol & 0x0000FFFF;
[19:44:14.142]        // -> [protType <= 0x00000002]
[19:44:14.142]    </block>
[19:44:14.142]    <control if="protType == 1" while="" timeout="0" info="">
[19:44:14.142]      // if-block "protType == 1"
[19:44:14.142]        // =>  FALSE
[19:44:14.142]      // skip if-block "protType == 1"
[19:44:14.142]    </control>
[19:44:14.142]    <control if="protType == 2" while="" timeout="0" info="">
[19:44:14.142]      // if-block "protType == 2"
[19:44:14.142]        // =>  TRUE
[19:44:14.142]      <control if="isSWJ" while="" timeout="0" info="">
[19:44:14.142]        // if-block "isSWJ"
[19:44:14.142]          // =>  TRUE
[19:44:14.142]        <control if="hasDormant" while="" timeout="0" info="">
[19:44:14.142]          // if-block "hasDormant"
[19:44:14.142]            // =>  FALSE
[19:44:14.142]          // skip if-block "hasDormant"
[19:44:14.142]        </control>
[19:44:14.142]        <control if="!hasDormant" while="" timeout="0" info="">
[19:44:14.142]          // if-block "!hasDormant"
[19:44:14.142]            // =>  TRUE
[19:44:14.142]          <block atomic="false" info="">
[19:44:14.142]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:44:14.146]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:44:14.146]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:44:14.146]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:44:14.146]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:44:14.155]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:44:14.155]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:44:14.159]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:44:14.159]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:44:14.162]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:44:14.162]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:44:14.166]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:44:14.166]          </block>
[19:44:14.166]          // end if-block "!hasDormant"
[19:44:14.166]        </control>
[19:44:14.166]        // end if-block "isSWJ"
[19:44:14.166]      </control>
[19:44:14.166]      <control if="!isSWJ" while="" timeout="0" info="">
[19:44:14.166]        // if-block "!isSWJ"
[19:44:14.166]          // =>  FALSE
[19:44:14.166]        // skip if-block "!isSWJ"
[19:44:14.166]      </control>
[19:44:14.166]      <block atomic="false" info="">
[19:44:14.166]        ReadDP(0x0);
[19:44:14.166]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:44:14.166]      </block>
[19:44:14.166]      // end if-block "protType == 2"
[19:44:14.166]    </control>
[19:44:14.166]  </sequence>
[19:44:14.166]  
[19:44:14.172]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:44:14.172]  
[19:44:14.172]  <debugvars>
[19:44:14.172]    // Pre-defined
[19:44:14.172]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:44:14.172]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:44:14.172]    __dp=0x00000000
[19:44:14.172]    __ap=0x00000000
[19:44:14.174]    __traceout=0x00000000      (Trace Disabled)
[19:44:14.174]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:44:14.174]    __FlashAddr=0x00000000
[19:44:14.174]    __FlashLen=0x00000000
[19:44:14.174]    __FlashArg=0x00000000
[19:44:14.174]    __FlashOp=0x00000000
[19:44:14.174]    __Result=0x00000000
[19:44:14.174]  </debugvars>
[19:44:14.174]  
[19:44:14.174]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:44:14.174]    <block atomic="false" info="">
[19:44:14.174]      __var SW_DP_ABORT       = 0x0;
[19:44:14.174]        // -> [SW_DP_ABORT <= 0x00000000]
[19:44:14.174]      __var DP_CTRL_STAT      = 0x4;
[19:44:14.174]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:44:14.174]      __var DP_SELECT         = 0x8;
[19:44:14.174]        // -> [DP_SELECT <= 0x00000008]
[19:44:14.174]      __var powered_down      = 0;
[19:44:14.174]        // -> [powered_down <= 0x00000000]
[19:44:14.174]      WriteDP(DP_SELECT, 0x00000000);
[19:44:14.180]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:44:14.180]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:44:14.186]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:44:14.186]        // -> [powered_down <= 0x00000001]
[19:44:14.186]    </block>
[19:44:14.186]    <control if="powered_down" while="" timeout="0" info="">
[19:44:14.186]      // if-block "powered_down"
[19:44:14.186]        // =>  TRUE
[19:44:14.186]      <block atomic="false" info="">
[19:44:14.186]        Message(0, "Debug/System power-up request sent");
[19:44:14.186]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:44:14.190]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:44:14.190]      </block>
[19:44:14.190]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:44:14.190]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:44:14.192]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:44:14.192]        // while-condition  =>  FALSE
[19:44:14.192]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:44:14.194]      </control>
[19:44:14.194]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:44:14.194]        // if-block "(__protocol & 0xFFFF) == 1"
[19:44:14.194]          // =>  FALSE
[19:44:14.194]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:44:14.194]      </control>
[19:44:14.194]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:44:14.194]        // if-block "(__protocol & 0xFFFF) == 2"
[19:44:14.194]          // =>  TRUE
[19:44:14.194]        <block atomic="false" info="">
[19:44:14.194]          Message(0, "executing SWD power up");
[19:44:14.194]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:44:14.198]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:44:14.198]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:44:14.198]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:44:14.198]        </block>
[19:44:14.198]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:44:14.198]      </control>
[19:44:14.198]      // end if-block "powered_down"
[19:44:14.198]    </control>
[19:44:14.198]    <block atomic="false" info="">
[19:44:14.198]      __var DEBUG_PORT_VAL    = 0;
[19:44:14.198]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:44:14.198]      __var ACCESS_POINT_VAL  = 0;
[19:44:14.202]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:44:14.203]      __ap = 1; 
[19:44:14.203]        // -> [__ap <= 0x00000001]
[19:44:14.203]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:44:14.212]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:44:14.212]      __ap = 4;
[19:44:14.212]        // -> [__ap <= 0x00000004]
[19:44:14.212]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:44:14.216]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:44:14.216]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:44:14.216]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:44:14.217]    </block>
[19:44:14.217]    <block atomic="false" info="">
[19:44:14.217]      __var nReset = 0x80;
[19:44:14.217]        // -> [nReset <= 0x00000080]
[19:44:14.217]      __var canReadPins = 0;
[19:44:14.217]        // -> [canReadPins <= 0x00000000]
[19:44:14.217]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:44:14.219]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:44:14.219]        // -> [canReadPins <= 0x00000001]
[19:44:14.219]    </block>
[19:44:14.219]    <control if="" while="1" timeout="200" info="">
[19:44:14.219]      // while "1"  (timeout="200")
[19:44:14.219]      // while-condition  =>  TRUE
[19:44:14.219]      // while "1"  (timeout="200")
[19:44:14.219]      // while-condition  =>  TRUE
[19:44:14.219]      // while "1"  (timeout="200")
[19:44:14.219]      // while-condition  =>  TRUE
[19:44:14.219]      // while "1"  (timeout="200")
[19:44:14.219]      // while-condition  =>  TRUE
[19:44:14.219]      // while "1"  (timeout="200")
[19:44:14.219]      // while-condition  =>  TRUE
[19:44:14.219]      // while "1"  (timeout="200")
[19:44:14.219]      // while-condition  =>  TRUE
[19:44:14.219]      // while "1"  (timeout="200")
[19:44:14.219]      // while-condition  =>  TRUE
[19:44:14.219]      // while "1"  (timeout="200")
[19:44:14.219]      // while-condition  =>  TRUE
[19:44:14.219]      // while "1"  (timeout="200")
[19:44:14.219]      // while-condition  =>  TRUE
[19:44:14.219]      // while "1"  (timeout="200")
[19:44:14.219]      // while-condition  =>  TRUE
[19:44:14.219]      // while "1"  (timeout="200")
[19:44:14.219]      // while-condition  =>  TRUE
[19:44:14.219]      // while "1"  (timeout="200")
[19:44:14.219]      // while-condition  =>  TRUE
[19:44:14.222]      // while "1"  (timeout="200")
[19:44:14.222]      // while  =>  TIMEOUT
[19:44:14.222]      // end while "1"
[19:44:14.222]    </control>
[19:44:14.222]    <control if="canReadPins" while="" timeout="0" info="">
[19:44:14.222]      // if-block "canReadPins"
[19:44:14.222]        // =>  TRUE
[19:44:14.222]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:44:14.222]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:44:14.226]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:44:14.226]        // while-condition  =>  FALSE
[19:44:14.226]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:44:14.226]      </control>
[19:44:14.226]      // end if-block "canReadPins"
[19:44:14.226]    </control>
[19:44:14.226]    <control if="!canReadPins" while="" timeout="0" info="">
[19:44:14.226]      // if-block "!canReadPins"
[19:44:14.226]        // =>  FALSE
[19:44:14.226]      // skip if-block "!canReadPins"
[19:44:14.226]    </control>
[19:44:14.226]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:44:14.226]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:44:14.226]        // =>  TRUE
[19:44:14.226]      <block atomic="false" info="">
[19:44:14.226]        WriteAP(0x00, 0x190008);
[19:44:14.226]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:44:14.226]        WriteAP(0xF0, 0x01);
[19:44:14.232]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:44:14.232]      </block>
[19:44:14.232]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:44:14.232]    </control>
[19:44:14.232]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:44:14.232]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:44:14.232]        // =>  FALSE
[19:44:14.232]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:44:14.232]    </control>
[19:44:14.232]    <block atomic="false" info="">
[19:44:14.232]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:44:14.239]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:44:14.239]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:44:14.239]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:44:14.239]      __ap = 0; //lets make sure we reset the access point selection
[19:44:14.239]        // -> [__ap <= 0x00000000]
[19:44:14.239]    </block>
[19:44:14.239]  </sequence>
[19:44:14.239]  
[19:44:14.267]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:44:14.267]  
[19:44:14.267]  <debugvars>
[19:44:14.267]    // Pre-defined
[19:44:14.267]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:44:14.271]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:44:14.271]    __dp=0x00000000
[19:44:14.271]    __ap=0x00000000
[19:44:14.271]    __traceout=0x00000000      (Trace Disabled)
[19:44:14.271]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:44:14.271]    __FlashAddr=0x00000000
[19:44:14.271]    __FlashLen=0x00000000
[19:44:14.271]    __FlashArg=0x00000000
[19:44:14.271]    __FlashOp=0x00000000
[19:44:14.272]    __Result=0x00000000
[19:44:14.272]  </debugvars>
[19:44:14.272]  
[19:44:14.272]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:44:14.272]    <block atomic="false" info="">
[19:44:14.272]      __var deviceID = 0;
[19:44:14.272]        // -> [deviceID <= 0x00000000]
[19:44:14.272]      __var version = 0;
[19:44:14.272]        // -> [version <= 0x00000000]
[19:44:14.272]      __var partNum = 0;
[19:44:14.272]        // -> [partNum <= 0x00000000]
[19:44:14.272]      __var manuf = 0;
[19:44:14.272]        // -> [manuf <= 0x00000000]
[19:44:14.272]      __var isMSPM0G1X0X_G3X0X = 0;
[19:44:14.272]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:44:14.272]      __var isProduction = 0;
[19:44:14.272]        // -> [isProduction <= 0x00000000]
[19:44:14.272]      __var continueId = 0;
[19:44:14.272]        // -> [continueId <= 0x00000000]
[19:44:14.272]      deviceID =   Read32(0x41C40004);
[19:44:14.283]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:44:14.283]        // -> [deviceID <= 0x2BB8802F]
[19:44:14.283]      version = deviceID >> 28;
[19:44:14.283]        // -> [version <= 0x00000002]
[19:44:14.283]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:44:14.283]        // -> [partNum <= 0x0000BB88]
[19:44:14.283]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:44:14.283]        // -> [manuf <= 0x00000017]
[19:44:14.283]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:44:14.283]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:44:14.283]      isProduction = (version > 0);
[19:44:14.283]        // -> [isProduction <= 0x00000001]
[19:44:14.283]    </block>
[19:44:14.283]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:44:14.283]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:44:14.283]        // =>  FALSE
[19:44:14.283]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:44:14.283]    </control>
[19:44:14.283]    <control if="continueId == 4" while="" timeout="0" info="">
[19:44:14.283]      // if-block "continueId == 4"
[19:44:14.283]        // =>  FALSE
[19:44:14.283]      // skip if-block "continueId == 4"
[19:44:14.283]    </control>
[19:44:14.283]    <control if="!isProduction" while="" timeout="0" info="">
[19:44:14.283]      // if-block "!isProduction"
[19:44:14.283]        // =>  FALSE
[19:44:14.283]      // skip if-block "!isProduction"
[19:44:14.283]    </control>
[19:44:14.283]  </sequence>
[19:44:14.287]  
[19:45:23.078]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:45:23.078]  
[19:45:23.078]  <debugvars>
[19:45:23.078]    // Pre-defined
[19:45:23.078]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:45:23.078]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:45:23.078]    __dp=0x00000000
[19:45:23.078]    __ap=0x00000000
[19:45:23.078]    __traceout=0x00000000      (Trace Disabled)
[19:45:23.078]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:45:23.078]    __FlashAddr=0x00000000
[19:45:23.078]    __FlashLen=0x00000000
[19:45:23.078]    __FlashArg=0x00000000
[19:45:23.078]    __FlashOp=0x00000000
[19:45:23.078]    __Result=0x00000000
[19:45:23.078]  </debugvars>
[19:45:23.078]  
[19:45:23.078]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:45:23.078]    <block atomic="false" info="">
[19:45:23.078]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:45:23.078]        // -> [isSWJ <= 0x00000001]
[19:45:23.078]      __var hasDormant = __protocol & 0x00020000;
[19:45:23.078]        // -> [hasDormant <= 0x00000000]
[19:45:23.078]      __var protType   = __protocol & 0x0000FFFF;
[19:45:23.078]        // -> [protType <= 0x00000002]
[19:45:23.082]    </block>
[19:45:23.082]    <control if="protType == 1" while="" timeout="0" info="">
[19:45:23.082]      // if-block "protType == 1"
[19:45:23.082]        // =>  FALSE
[19:45:23.082]      // skip if-block "protType == 1"
[19:45:23.082]    </control>
[19:45:23.082]    <control if="protType == 2" while="" timeout="0" info="">
[19:45:23.082]      // if-block "protType == 2"
[19:45:23.082]        // =>  TRUE
[19:45:23.082]      <control if="isSWJ" while="" timeout="0" info="">
[19:45:23.082]        // if-block "isSWJ"
[19:45:23.082]          // =>  TRUE
[19:45:23.082]        <control if="hasDormant" while="" timeout="0" info="">
[19:45:23.082]          // if-block "hasDormant"
[19:45:23.082]            // =>  FALSE
[19:45:23.082]          // skip if-block "hasDormant"
[19:45:23.084]        </control>
[19:45:23.084]        <control if="!hasDormant" while="" timeout="0" info="">
[19:45:23.084]          // if-block "!hasDormant"
[19:45:23.084]            // =>  TRUE
[19:45:23.084]          <block atomic="false" info="">
[19:45:23.084]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:45:23.084]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:45:23.084]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:45:23.086]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:45:23.086]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:45:23.086]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:45:23.086]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:45:23.090]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:45:23.090]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:45:23.094]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:45:23.094]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:45:23.094]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:45:23.094]          </block>
[19:45:23.094]          // end if-block "!hasDormant"
[19:45:23.094]        </control>
[19:45:23.094]        // end if-block "isSWJ"
[19:45:23.094]      </control>
[19:45:23.094]      <control if="!isSWJ" while="" timeout="0" info="">
[19:45:23.094]        // if-block "!isSWJ"
[19:45:23.094]          // =>  FALSE
[19:45:23.094]        // skip if-block "!isSWJ"
[19:45:23.094]      </control>
[19:45:23.094]      <block atomic="false" info="">
[19:45:23.094]        ReadDP(0x0);
[19:45:23.098]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:45:23.098]      </block>
[19:45:23.098]      // end if-block "protType == 2"
[19:45:23.098]    </control>
[19:45:23.098]  </sequence>
[19:45:23.098]  
[19:45:23.106]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:45:23.106]  
[19:45:23.106]  <debugvars>
[19:45:23.106]    // Pre-defined
[19:45:23.106]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:45:23.106]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:45:23.106]    __dp=0x00000000
[19:45:23.106]    __ap=0x00000000
[19:45:23.106]    __traceout=0x00000000      (Trace Disabled)
[19:45:23.106]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:45:23.106]    __FlashAddr=0x00000000
[19:45:23.106]    __FlashLen=0x00000000
[19:45:23.106]    __FlashArg=0x00000000
[19:45:23.106]    __FlashOp=0x00000000
[19:45:23.106]    __Result=0x00000000
[19:45:23.106]  </debugvars>
[19:45:23.106]  
[19:45:23.106]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:45:23.106]    <block atomic="false" info="">
[19:45:23.106]      __var SW_DP_ABORT       = 0x0;
[19:45:23.106]        // -> [SW_DP_ABORT <= 0x00000000]
[19:45:23.106]      __var DP_CTRL_STAT      = 0x4;
[19:45:23.106]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:45:23.106]      __var DP_SELECT         = 0x8;
[19:45:23.106]        // -> [DP_SELECT <= 0x00000008]
[19:45:23.106]      __var powered_down      = 0;
[19:45:23.110]        // -> [powered_down <= 0x00000000]
[19:45:23.110]      WriteDP(DP_SELECT, 0x00000000);
[19:45:23.113]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:45:23.113]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:45:23.113]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:45:23.113]        // -> [powered_down <= 0x00000001]
[19:45:23.113]    </block>
[19:45:23.113]    <control if="powered_down" while="" timeout="0" info="">
[19:45:23.113]      // if-block "powered_down"
[19:45:23.113]        // =>  TRUE
[19:45:23.113]      <block atomic="false" info="">
[19:45:23.113]        Message(0, "Debug/System power-up request sent");
[19:45:23.117]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:45:23.117]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:45:23.117]      </block>
[19:45:23.117]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:45:23.117]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:45:23.122]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:45:23.122]        // while-condition  =>  FALSE
[19:45:23.122]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:45:23.122]      </control>
[19:45:23.122]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:45:23.122]        // if-block "(__protocol & 0xFFFF) == 1"
[19:45:23.122]          // =>  FALSE
[19:45:23.122]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:45:23.122]      </control>
[19:45:23.124]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:45:23.124]        // if-block "(__protocol & 0xFFFF) == 2"
[19:45:23.124]          // =>  TRUE
[19:45:23.124]        <block atomic="false" info="">
[19:45:23.124]          Message(0, "executing SWD power up");
[19:45:23.126]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:45:23.130]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:45:23.130]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:45:23.130]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:45:23.130]        </block>
[19:45:23.130]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:45:23.130]      </control>
[19:45:23.130]      // end if-block "powered_down"
[19:45:23.130]    </control>
[19:45:23.130]    <block atomic="false" info="">
[19:45:23.130]      __var DEBUG_PORT_VAL    = 0;
[19:45:23.130]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:45:23.130]      __var ACCESS_POINT_VAL  = 0;
[19:45:23.130]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:45:23.130]      __ap = 1; 
[19:45:23.130]        // -> [__ap <= 0x00000001]
[19:45:23.130]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:45:23.134]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:45:23.134]      __ap = 4;
[19:45:23.134]        // -> [__ap <= 0x00000004]
[19:45:23.134]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:45:23.146]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:45:23.146]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:45:23.146]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:45:23.148]    </block>
[19:45:23.148]    <block atomic="false" info="">
[19:45:23.148]      __var nReset = 0x80;
[19:45:23.148]        // -> [nReset <= 0x00000080]
[19:45:23.148]      __var canReadPins = 0;
[19:45:23.148]        // -> [canReadPins <= 0x00000000]
[19:45:23.148]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:45:23.150]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:45:23.150]        // -> [canReadPins <= 0x00000001]
[19:45:23.150]    </block>
[19:45:23.150]    <control if="" while="1" timeout="200" info="">
[19:45:23.150]      // while "1"  (timeout="200")
[19:45:23.150]      // while-condition  =>  TRUE
[19:45:23.150]      // while "1"  (timeout="200")
[19:45:23.150]      // while-condition  =>  TRUE
[19:45:23.150]      // while "1"  (timeout="200")
[19:45:23.150]      // while-condition  =>  TRUE
[19:45:23.150]      // while "1"  (timeout="200")
[19:45:23.150]      // while-condition  =>  TRUE
[19:45:23.150]      // while "1"  (timeout="200")
[19:45:23.150]      // while-condition  =>  TRUE
[19:45:23.150]      // while "1"  (timeout="200")
[19:45:23.150]      // while-condition  =>  TRUE
[19:45:23.150]      // while "1"  (timeout="200")
[19:45:23.150]      // while-condition  =>  TRUE
[19:45:23.150]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.153]      // while "1"  (timeout="200")
[19:45:23.153]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.157]      // while "1"  (timeout="200")
[19:45:23.157]      // while-condition  =>  TRUE
[19:45:23.161]      // while "1"  (timeout="200")
[19:45:23.161]      // while  =>  TIMEOUT
[19:45:23.161]      // end while "1"
[19:45:23.161]    </control>
[19:45:23.161]    <control if="canReadPins" while="" timeout="0" info="">
[19:45:23.161]      // if-block "canReadPins"
[19:45:23.161]        // =>  TRUE
[19:45:23.161]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:45:23.161]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:45:23.163]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:45:23.163]        // while-condition  =>  FALSE
[19:45:23.163]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:45:23.163]      </control>
[19:45:23.163]      // end if-block "canReadPins"
[19:45:23.163]    </control>
[19:45:23.163]    <control if="!canReadPins" while="" timeout="0" info="">
[19:45:23.163]      // if-block "!canReadPins"
[19:45:23.163]        // =>  FALSE
[19:45:23.163]      // skip if-block "!canReadPins"
[19:45:23.163]    </control>
[19:45:23.163]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:45:23.165]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:45:23.165]        // =>  TRUE
[19:45:23.165]      <block atomic="false" info="">
[19:45:23.165]        WriteAP(0x00, 0x190008);
[19:45:23.169]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:45:23.169]        WriteAP(0xF0, 0x01);
[19:45:23.177]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:45:23.177]      </block>
[19:45:23.177]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:45:23.177]    </control>
[19:45:23.177]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:45:23.177]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:45:23.177]        // =>  FALSE
[19:45:23.177]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:45:23.177]    </control>
[19:45:23.177]    <block atomic="false" info="">
[19:45:23.177]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:45:23.183]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:45:23.183]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:45:23.183]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:45:23.186]      __ap = 0; //lets make sure we reset the access point selection
[19:45:23.186]        // -> [__ap <= 0x00000000]
[19:45:23.186]    </block>
[19:45:23.186]  </sequence>
[19:45:23.186]  
[19:45:23.210]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:45:23.210]  
[19:45:23.210]  <debugvars>
[19:45:23.210]    // Pre-defined
[19:45:23.210]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:45:23.210]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:45:23.210]    __dp=0x00000000
[19:45:23.214]    __ap=0x00000000
[19:45:23.214]    __traceout=0x00000000      (Trace Disabled)
[19:45:23.214]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:45:23.214]    __FlashAddr=0x00000000
[19:45:23.214]    __FlashLen=0x00000000
[19:45:23.214]    __FlashArg=0x00000000
[19:45:23.214]    __FlashOp=0x00000000
[19:45:23.214]    __Result=0x00000000
[19:45:23.214]  </debugvars>
[19:45:23.214]  
[19:45:23.214]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:45:23.214]    <block atomic="false" info="">
[19:45:23.214]      __var deviceID = 0;
[19:45:23.214]        // -> [deviceID <= 0x00000000]
[19:45:23.214]      __var version = 0;
[19:45:23.214]        // -> [version <= 0x00000000]
[19:45:23.214]      __var partNum = 0;
[19:45:23.214]        // -> [partNum <= 0x00000000]
[19:45:23.214]      __var manuf = 0;
[19:45:23.214]        // -> [manuf <= 0x00000000]
[19:45:23.214]      __var isMSPM0G1X0X_G3X0X = 0;
[19:45:23.214]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:45:23.214]      __var isProduction = 0;
[19:45:23.214]        // -> [isProduction <= 0x00000000]
[19:45:23.214]      __var continueId = 0;
[19:45:23.214]        // -> [continueId <= 0x00000000]
[19:45:23.214]      deviceID =   Read32(0x41C40004);
[19:45:23.222]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:45:23.222]        // -> [deviceID <= 0x2BB8802F]
[19:45:23.222]      version = deviceID >> 28;
[19:45:23.222]        // -> [version <= 0x00000002]
[19:45:23.222]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:45:23.222]        // -> [partNum <= 0x0000BB88]
[19:45:23.222]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:45:23.222]        // -> [manuf <= 0x00000017]
[19:45:23.222]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:45:23.222]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:45:23.222]      isProduction = (version > 0);
[19:45:23.222]        // -> [isProduction <= 0x00000001]
[19:45:23.222]    </block>
[19:45:23.224]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:45:23.224]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:45:23.224]        // =>  FALSE
[19:45:23.224]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:45:23.224]    </control>
[19:45:23.224]    <control if="continueId == 4" while="" timeout="0" info="">
[19:45:23.224]      // if-block "continueId == 4"
[19:45:23.224]        // =>  FALSE
[19:45:23.224]      // skip if-block "continueId == 4"
[19:45:23.224]    </control>
[19:45:23.224]    <control if="!isProduction" while="" timeout="0" info="">
[19:45:23.224]      // if-block "!isProduction"
[19:45:23.224]        // =>  FALSE
[19:45:23.224]      // skip if-block "!isProduction"
[19:45:23.224]    </control>
[19:45:23.224]  </sequence>
[19:45:23.224]  
[19:47:18.728]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:47:18.728]  
[19:47:18.738]  <debugvars>
[19:47:18.738]    // Pre-defined
[19:47:18.738]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:47:18.738]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:47:18.738]    __dp=0x00000000
[19:47:18.738]    __ap=0x00000000
[19:47:18.738]    __traceout=0x00000000      (Trace Disabled)
[19:47:18.738]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:47:18.738]    __FlashAddr=0x00000000
[19:47:18.739]    __FlashLen=0x00000000
[19:47:18.739]    __FlashArg=0x00000000
[19:47:18.739]    __FlashOp=0x00000000
[19:47:18.739]    __Result=0x00000000
[19:47:18.739]  </debugvars>
[19:47:18.739]  
[19:47:18.739]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:47:18.739]    <block atomic="false" info="">
[19:47:18.739]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:47:18.740]        // -> [isSWJ <= 0x00000001]
[19:47:18.740]      __var hasDormant = __protocol & 0x00020000;
[19:47:18.740]        // -> [hasDormant <= 0x00000000]
[19:47:18.740]      __var protType   = __protocol & 0x0000FFFF;
[19:47:18.740]        // -> [protType <= 0x00000002]
[19:47:18.740]    </block>
[19:47:18.740]    <control if="protType == 1" while="" timeout="0" info="">
[19:47:18.740]      // if-block "protType == 1"
[19:47:18.740]        // =>  FALSE
[19:47:18.740]      // skip if-block "protType == 1"
[19:47:18.740]    </control>
[19:47:18.740]    <control if="protType == 2" while="" timeout="0" info="">
[19:47:18.740]      // if-block "protType == 2"
[19:47:18.740]        // =>  TRUE
[19:47:18.740]      <control if="isSWJ" while="" timeout="0" info="">
[19:47:18.740]        // if-block "isSWJ"
[19:47:18.740]          // =>  TRUE
[19:47:18.740]        <control if="hasDormant" while="" timeout="0" info="">
[19:47:18.740]          // if-block "hasDormant"
[19:47:18.740]            // =>  FALSE
[19:47:18.740]          // skip if-block "hasDormant"
[19:47:18.740]        </control>
[19:47:18.740]        <control if="!hasDormant" while="" timeout="0" info="">
[19:47:18.740]          // if-block "!hasDormant"
[19:47:18.740]            // =>  TRUE
[19:47:18.740]          <block atomic="false" info="">
[19:47:18.740]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:47:18.744]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:47:18.744]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:47:18.746]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:47:18.746]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:47:18.747]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:47:18.747]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:47:18.748]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:47:18.748]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:47:18.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:47:18.748]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:47:18.752]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:47:18.752]          </block>
[19:47:18.752]          // end if-block "!hasDormant"
[19:47:18.752]        </control>
[19:47:18.752]        // end if-block "isSWJ"
[19:47:18.752]      </control>
[19:47:18.752]      <control if="!isSWJ" while="" timeout="0" info="">
[19:47:18.752]        // if-block "!isSWJ"
[19:47:18.752]          // =>  FALSE
[19:47:18.752]        // skip if-block "!isSWJ"
[19:47:18.752]      </control>
[19:47:18.752]      <block atomic="false" info="">
[19:47:18.752]        ReadDP(0x0);
[19:47:18.758]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:47:18.758]      </block>
[19:47:18.758]      // end if-block "protType == 2"
[19:47:18.758]    </control>
[19:47:18.758]  </sequence>
[19:47:18.758]  
[19:47:18.761]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:47:18.761]  
[19:47:18.761]  <debugvars>
[19:47:18.761]    // Pre-defined
[19:47:18.761]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:47:18.761]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:47:18.761]    __dp=0x00000000
[19:47:18.761]    __ap=0x00000000
[19:47:18.761]    __traceout=0x00000000      (Trace Disabled)
[19:47:18.761]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:47:18.761]    __FlashAddr=0x00000000
[19:47:18.761]    __FlashLen=0x00000000
[19:47:18.761]    __FlashArg=0x00000000
[19:47:18.761]    __FlashOp=0x00000000
[19:47:18.761]    __Result=0x00000000
[19:47:18.761]  </debugvars>
[19:47:18.761]  
[19:47:18.761]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:47:18.761]    <block atomic="false" info="">
[19:47:18.761]      __var SW_DP_ABORT       = 0x0;
[19:47:18.761]        // -> [SW_DP_ABORT <= 0x00000000]
[19:47:18.761]      __var DP_CTRL_STAT      = 0x4;
[19:47:18.761]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:47:18.761]      __var DP_SELECT         = 0x8;
[19:47:18.761]        // -> [DP_SELECT <= 0x00000008]
[19:47:18.761]      __var powered_down      = 0;
[19:47:18.761]        // -> [powered_down <= 0x00000000]
[19:47:18.761]      WriteDP(DP_SELECT, 0x00000000);
[19:47:18.765]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:47:18.765]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:47:18.766]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:47:18.766]        // -> [powered_down <= 0x00000001]
[19:47:18.767]    </block>
[19:47:18.767]    <control if="powered_down" while="" timeout="0" info="">
[19:47:18.767]      // if-block "powered_down"
[19:47:18.767]        // =>  TRUE
[19:47:18.767]      <block atomic="false" info="">
[19:47:18.767]        Message(0, "Debug/System power-up request sent");
[19:47:18.769]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:47:18.769]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:47:18.769]      </block>
[19:47:18.769]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:47:18.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:47:18.773]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:47:18.773]        // while-condition  =>  FALSE
[19:47:18.773]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:47:18.773]      </control>
[19:47:18.773]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:47:18.773]        // if-block "(__protocol & 0xFFFF) == 1"
[19:47:18.773]          // =>  FALSE
[19:47:18.773]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:47:18.773]      </control>
[19:47:18.773]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:47:18.773]        // if-block "(__protocol & 0xFFFF) == 2"
[19:47:18.773]          // =>  TRUE
[19:47:18.773]        <block atomic="false" info="">
[19:47:18.773]          Message(0, "executing SWD power up");
[19:47:18.777]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:47:18.777]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:47:18.777]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:47:18.780]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:47:18.780]        </block>
[19:47:18.780]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:47:18.780]      </control>
[19:47:18.780]      // end if-block "powered_down"
[19:47:18.780]    </control>
[19:47:18.780]    <block atomic="false" info="">
[19:47:18.780]      __var DEBUG_PORT_VAL    = 0;
[19:47:18.780]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:47:18.780]      __var ACCESS_POINT_VAL  = 0;
[19:47:18.780]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:47:18.780]      __ap = 1; 
[19:47:18.780]        // -> [__ap <= 0x00000001]
[19:47:18.780]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:47:18.786]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:47:18.786]      __ap = 4;
[19:47:18.786]        // -> [__ap <= 0x00000004]
[19:47:18.786]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:47:18.789]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:47:18.789]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:47:18.789]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:47:18.793]    </block>
[19:47:18.793]    <block atomic="false" info="">
[19:47:18.793]      __var nReset = 0x80;
[19:47:18.793]        // -> [nReset <= 0x00000080]
[19:47:18.793]      __var canReadPins = 0;
[19:47:18.793]        // -> [canReadPins <= 0x00000000]
[19:47:18.793]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:47:18.796]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:47:18.798]        // -> [canReadPins <= 0x00000001]
[19:47:18.798]    </block>
[19:47:18.798]    <control if="" while="1" timeout="200" info="">
[19:47:18.798]      // while "1"  (timeout="200")
[19:47:18.798]      // while-condition  =>  TRUE
[19:47:18.798]      // while "1"  (timeout="200")
[19:47:18.798]      // while-condition  =>  TRUE
[19:47:18.798]      // while "1"  (timeout="200")
[19:47:18.798]      // while-condition  =>  TRUE
[19:47:18.798]      // while "1"  (timeout="200")
[19:47:18.798]      // while-condition  =>  TRUE
[19:47:18.798]      // while "1"  (timeout="200")
[19:47:18.798]      // while-condition  =>  TRUE
[19:47:18.799]      // while "1"  (timeout="200")
[19:47:18.799]      // while-condition  =>  TRUE
[19:47:18.799]      // while "1"  (timeout="200")
[19:47:18.799]      // while-condition  =>  TRUE
[19:47:18.799]      // while "1"  (timeout="200")
[19:47:18.799]      // while-condition  =>  TRUE
[19:47:18.799]      // while "1"  (timeout="200")
[19:47:18.799]      // while-condition  =>  TRUE
[19:47:18.799]      // while "1"  (timeout="200")
[19:47:18.799]      // while-condition  =>  TRUE
[19:47:18.799]      // while "1"  (timeout="200")
[19:47:18.800]      // while-condition  =>  TRUE
[19:47:18.800]      // while "1"  (timeout="200")
[19:47:18.800]      // while-condition  =>  TRUE
[19:47:18.800]      // while "1"  (timeout="200")
[19:47:18.800]      // while-condition  =>  TRUE
[19:47:18.800]      // while "1"  (timeout="200")
[19:47:18.800]      // while-condition  =>  TRUE
[19:47:18.800]      // while "1"  (timeout="200")
[19:47:18.800]      // while-condition  =>  TRUE
[19:47:18.800]      // while "1"  (timeout="200")
[19:47:18.800]      // while-condition  =>  TRUE
[19:47:18.800]      // while "1"  (timeout="200")
[19:47:18.800]      // while-condition  =>  TRUE
[19:47:18.800]      // while "1"  (timeout="200")
[19:47:18.800]      // while-condition  =>  TRUE
[19:47:18.802]      // while "1"  (timeout="200")
[19:47:18.802]      // while  =>  TIMEOUT
[19:47:18.802]      // end while "1"
[19:47:18.802]    </control>
[19:47:18.802]    <control if="canReadPins" while="" timeout="0" info="">
[19:47:18.802]      // if-block "canReadPins"
[19:47:18.802]        // =>  TRUE
[19:47:18.802]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:47:18.802]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:47:18.805]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:47:18.805]        // while-condition  =>  FALSE
[19:47:18.805]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:47:18.805]      </control>
[19:47:18.805]      // end if-block "canReadPins"
[19:47:18.805]    </control>
[19:47:18.805]    <control if="!canReadPins" while="" timeout="0" info="">
[19:47:18.805]      // if-block "!canReadPins"
[19:47:18.805]        // =>  FALSE
[19:47:18.805]      // skip if-block "!canReadPins"
[19:47:18.805]    </control>
[19:47:18.805]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:47:18.805]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:47:18.805]        // =>  TRUE
[19:47:18.805]      <block atomic="false" info="">
[19:47:18.806]        WriteAP(0x00, 0x190008);
[19:47:18.813]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:47:18.813]        WriteAP(0xF0, 0x01);
[19:47:18.817]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:47:18.817]      </block>
[19:47:18.817]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:47:18.817]    </control>
[19:47:18.817]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:47:18.817]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:47:18.817]        // =>  FALSE
[19:47:18.817]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:47:18.817]    </control>
[19:47:18.817]    <block atomic="false" info="">
[19:47:18.817]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:47:18.826]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:47:18.826]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:47:18.826]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:47:18.828]      __ap = 0; //lets make sure we reset the access point selection
[19:47:18.828]        // -> [__ap <= 0x00000000]
[19:47:18.828]    </block>
[19:47:18.828]  </sequence>
[19:47:18.828]  
[19:47:18.850]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:47:18.850]  
[19:47:18.850]  <debugvars>
[19:47:18.850]    // Pre-defined
[19:47:18.850]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:47:18.850]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:47:18.850]    __dp=0x00000000
[19:47:18.850]    __ap=0x00000000
[19:47:18.850]    __traceout=0x00000000      (Trace Disabled)
[19:47:18.850]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:47:18.853]    __FlashAddr=0x00000000
[19:47:18.853]    __FlashLen=0x00000000
[19:47:18.853]    __FlashArg=0x00000000
[19:47:18.853]    __FlashOp=0x00000000
[19:47:18.853]    __Result=0x00000000
[19:47:18.853]  </debugvars>
[19:47:18.853]  
[19:47:18.853]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:47:18.853]    <block atomic="false" info="">
[19:47:18.853]      __var deviceID = 0;
[19:47:18.853]        // -> [deviceID <= 0x00000000]
[19:47:18.853]      __var version = 0;
[19:47:18.853]        // -> [version <= 0x00000000]
[19:47:18.853]      __var partNum = 0;
[19:47:18.853]        // -> [partNum <= 0x00000000]
[19:47:18.853]      __var manuf = 0;
[19:47:18.853]        // -> [manuf <= 0x00000000]
[19:47:18.853]      __var isMSPM0G1X0X_G3X0X = 0;
[19:47:18.853]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:47:18.853]      __var isProduction = 0;
[19:47:18.853]        // -> [isProduction <= 0x00000000]
[19:47:18.853]      __var continueId = 0;
[19:47:18.853]        // -> [continueId <= 0x00000000]
[19:47:18.853]      deviceID =   Read32(0x41C40004);
[19:47:18.857]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:47:18.857]        // -> [deviceID <= 0x2BB8802F]
[19:47:18.857]      version = deviceID >> 28;
[19:47:18.857]        // -> [version <= 0x00000002]
[19:47:18.857]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:47:18.861]        // -> [partNum <= 0x0000BB88]
[19:47:18.861]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:47:18.861]        // -> [manuf <= 0x00000017]
[19:47:18.861]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:47:18.861]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:47:18.861]      isProduction = (version > 0);
[19:47:18.861]        // -> [isProduction <= 0x00000001]
[19:47:18.861]    </block>
[19:47:18.861]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:47:18.861]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:47:18.861]        // =>  FALSE
[19:47:18.861]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:47:18.861]    </control>
[19:47:18.861]    <control if="continueId == 4" while="" timeout="0" info="">
[19:47:18.861]      // if-block "continueId == 4"
[19:47:18.863]        // =>  FALSE
[19:47:18.863]      // skip if-block "continueId == 4"
[19:47:18.863]    </control>
[19:47:18.863]    <control if="!isProduction" while="" timeout="0" info="">
[19:47:18.863]      // if-block "!isProduction"
[19:47:18.863]        // =>  FALSE
[19:47:18.863]      // skip if-block "!isProduction"
[19:47:18.863]    </control>
[19:47:18.863]  </sequence>
[19:47:18.863]  
[19:48:56.276]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:48:56.276]  
[19:48:56.285]  <debugvars>
[19:48:56.285]    // Pre-defined
[19:48:56.285]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:48:56.285]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:48:56.285]    __dp=0x00000000
[19:48:56.285]    __ap=0x00000000
[19:48:56.286]    __traceout=0x00000000      (Trace Disabled)
[19:48:56.286]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:48:56.286]    __FlashAddr=0x00000000
[19:48:56.286]    __FlashLen=0x00000000
[19:48:56.286]    __FlashArg=0x00000000
[19:48:56.286]    __FlashOp=0x00000000
[19:48:56.286]    __Result=0x00000000
[19:48:56.286]  </debugvars>
[19:48:56.286]  
[19:48:56.286]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:48:56.288]    <block atomic="false" info="">
[19:48:56.288]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:48:56.288]        // -> [isSWJ <= 0x00000001]
[19:48:56.288]      __var hasDormant = __protocol & 0x00020000;
[19:48:56.288]        // -> [hasDormant <= 0x00000000]
[19:48:56.288]      __var protType   = __protocol & 0x0000FFFF;
[19:48:56.288]        // -> [protType <= 0x00000002]
[19:48:56.288]    </block>
[19:48:56.288]    <control if="protType == 1" while="" timeout="0" info="">
[19:48:56.288]      // if-block "protType == 1"
[19:48:56.288]        // =>  FALSE
[19:48:56.288]      // skip if-block "protType == 1"
[19:48:56.288]    </control>
[19:48:56.288]    <control if="protType == 2" while="" timeout="0" info="">
[19:48:56.288]      // if-block "protType == 2"
[19:48:56.288]        // =>  TRUE
[19:48:56.288]      <control if="isSWJ" while="" timeout="0" info="">
[19:48:56.288]        // if-block "isSWJ"
[19:48:56.288]          // =>  TRUE
[19:48:56.288]        <control if="hasDormant" while="" timeout="0" info="">
[19:48:56.288]          // if-block "hasDormant"
[19:48:56.288]            // =>  FALSE
[19:48:56.288]          // skip if-block "hasDormant"
[19:48:56.288]        </control>
[19:48:56.288]        <control if="!hasDormant" while="" timeout="0" info="">
[19:48:56.288]          // if-block "!hasDormant"
[19:48:56.290]            // =>  TRUE
[19:48:56.290]          <block atomic="false" info="">
[19:48:56.290]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:48:56.302]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:48:56.302]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:48:56.304]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:48:56.304]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:48:56.306]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:48:56.306]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:48:56.308]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:48:56.308]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:48:56.310]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:48:56.310]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:48:56.311]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:48:56.311]          </block>
[19:48:56.311]          // end if-block "!hasDormant"
[19:48:56.311]        </control>
[19:48:56.311]        // end if-block "isSWJ"
[19:48:56.311]      </control>
[19:48:56.311]      <control if="!isSWJ" while="" timeout="0" info="">
[19:48:56.311]        // if-block "!isSWJ"
[19:48:56.311]          // =>  FALSE
[19:48:56.311]        // skip if-block "!isSWJ"
[19:48:56.311]      </control>
[19:48:56.311]      <block atomic="false" info="">
[19:48:56.311]        ReadDP(0x0);
[19:48:56.318]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:48:56.318]      </block>
[19:48:56.318]      // end if-block "protType == 2"
[19:48:56.318]    </control>
[19:48:56.318]  </sequence>
[19:48:56.318]  
[19:48:56.319]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:48:56.319]  
[19:48:56.319]  <debugvars>
[19:48:56.319]    // Pre-defined
[19:48:56.319]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:48:56.319]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:48:56.319]    __dp=0x00000000
[19:48:56.319]    __ap=0x00000000
[19:48:56.319]    __traceout=0x00000000      (Trace Disabled)
[19:48:56.319]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:48:56.323]    __FlashAddr=0x00000000
[19:48:56.323]    __FlashLen=0x00000000
[19:48:56.323]    __FlashArg=0x00000000
[19:48:56.323]    __FlashOp=0x00000000
[19:48:56.323]    __Result=0x00000000
[19:48:56.323]  </debugvars>
[19:48:56.323]  
[19:48:56.323]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:48:56.323]    <block atomic="false" info="">
[19:48:56.323]      __var SW_DP_ABORT       = 0x0;
[19:48:56.323]        // -> [SW_DP_ABORT <= 0x00000000]
[19:48:56.323]      __var DP_CTRL_STAT      = 0x4;
[19:48:56.323]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:48:56.323]      __var DP_SELECT         = 0x8;
[19:48:56.323]        // -> [DP_SELECT <= 0x00000008]
[19:48:56.323]      __var powered_down      = 0;
[19:48:56.323]        // -> [powered_down <= 0x00000000]
[19:48:56.323]      WriteDP(DP_SELECT, 0x00000000);
[19:48:56.327]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:48:56.327]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:48:56.328]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:48:56.328]        // -> [powered_down <= 0x00000001]
[19:48:56.328]    </block>
[19:48:56.328]    <control if="powered_down" while="" timeout="0" info="">
[19:48:56.328]      // if-block "powered_down"
[19:48:56.328]        // =>  TRUE
[19:48:56.328]      <block atomic="false" info="">
[19:48:56.328]        Message(0, "Debug/System power-up request sent");
[19:48:56.328]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:48:56.331]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:48:56.331]      </block>
[19:48:56.331]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:48:56.331]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:48:56.335]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:48:56.335]        // while-condition  =>  FALSE
[19:48:56.335]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:48:56.335]      </control>
[19:48:56.335]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:48:56.335]        // if-block "(__protocol & 0xFFFF) == 1"
[19:48:56.335]          // =>  FALSE
[19:48:56.335]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:48:56.335]      </control>
[19:48:56.335]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:48:56.335]        // if-block "(__protocol & 0xFFFF) == 2"
[19:48:56.335]          // =>  TRUE
[19:48:56.335]        <block atomic="false" info="">
[19:48:56.335]          Message(0, "executing SWD power up");
[19:48:56.339]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:48:56.342]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:48:56.342]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:48:56.343]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:48:56.343]        </block>
[19:48:56.343]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:48:56.343]      </control>
[19:48:56.343]      // end if-block "powered_down"
[19:48:56.343]    </control>
[19:48:56.343]    <block atomic="false" info="">
[19:48:56.343]      __var DEBUG_PORT_VAL    = 0;
[19:48:56.343]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:48:56.343]      __var ACCESS_POINT_VAL  = 0;
[19:48:56.343]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:48:56.343]      __ap = 1; 
[19:48:56.343]        // -> [__ap <= 0x00000001]
[19:48:56.343]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:48:56.348]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:48:56.348]      __ap = 4;
[19:48:56.348]        // -> [__ap <= 0x00000004]
[19:48:56.348]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:48:56.352]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:48:56.352]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:48:56.352]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:48:56.352]    </block>
[19:48:56.352]    <block atomic="false" info="">
[19:48:56.352]      __var nReset = 0x80;
[19:48:56.352]        // -> [nReset <= 0x00000080]
[19:48:56.352]      __var canReadPins = 0;
[19:48:56.352]        // -> [canReadPins <= 0x00000000]
[19:48:56.352]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:48:56.356]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:48:56.356]        // -> [canReadPins <= 0x00000001]
[19:48:56.356]    </block>
[19:48:56.356]    <control if="" while="1" timeout="200" info="">
[19:48:56.356]      // while "1"  (timeout="200")
[19:48:56.356]      // while-condition  =>  TRUE
[19:48:56.356]      // while "1"  (timeout="200")
[19:48:56.356]      // while-condition  =>  TRUE
[19:48:56.356]      // while "1"  (timeout="200")
[19:48:56.356]      // while-condition  =>  TRUE
[19:48:56.356]      // while "1"  (timeout="200")
[19:48:56.356]      // while-condition  =>  TRUE
[19:48:56.356]      // while "1"  (timeout="200")
[19:48:56.356]      // while-condition  =>  TRUE
[19:48:56.358]      // while "1"  (timeout="200")
[19:48:56.358]      // while-condition  =>  TRUE
[19:48:56.358]      // while "1"  (timeout="200")
[19:48:56.358]      // while-condition  =>  TRUE
[19:48:56.358]      // while "1"  (timeout="200")
[19:48:56.358]      // while-condition  =>  TRUE
[19:48:56.358]      // while "1"  (timeout="200")
[19:48:56.358]      // while-condition  =>  TRUE
[19:48:56.358]      // while "1"  (timeout="200")
[19:48:56.358]      // while-condition  =>  TRUE
[19:48:56.358]      // while "1"  (timeout="200")
[19:48:56.358]      // while-condition  =>  TRUE
[19:48:56.358]      // while "1"  (timeout="200")
[19:48:56.358]      // while-condition  =>  TRUE
[19:48:56.358]      // while "1"  (timeout="200")
[19:48:56.358]      // while-condition  =>  TRUE
[19:48:56.358]      // while "1"  (timeout="200")
[19:48:56.358]      // while-condition  =>  TRUE
[19:48:56.358]      // while "1"  (timeout="200")
[19:48:56.358]      // while-condition  =>  TRUE
[19:48:56.358]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.360]      // while "1"  (timeout="200")
[19:48:56.360]      // while-condition  =>  TRUE
[19:48:56.364]      // while "1"  (timeout="200")
[19:48:56.364]      // while  =>  TIMEOUT
[19:48:56.364]      // end while "1"
[19:48:56.364]    </control>
[19:48:56.364]    <control if="canReadPins" while="" timeout="0" info="">
[19:48:56.364]      // if-block "canReadPins"
[19:48:56.364]        // =>  TRUE
[19:48:56.364]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:48:56.364]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:48:56.366]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:48:56.366]        // while-condition  =>  FALSE
[19:48:56.366]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:48:56.366]      </control>
[19:48:56.366]      // end if-block "canReadPins"
[19:48:56.366]    </control>
[19:48:56.366]    <control if="!canReadPins" while="" timeout="0" info="">
[19:48:56.366]      // if-block "!canReadPins"
[19:48:56.366]        // =>  FALSE
[19:48:56.366]      // skip if-block "!canReadPins"
[19:48:56.366]    </control>
[19:48:56.366]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:48:56.366]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:48:56.366]        // =>  TRUE
[19:48:56.366]      <block atomic="false" info="">
[19:48:56.366]        WriteAP(0x00, 0x190008);
[19:48:56.369]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:48:56.369]        WriteAP(0xF0, 0x01);
[19:48:56.374]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:48:56.374]      </block>
[19:48:56.374]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:48:56.374]    </control>
[19:48:56.374]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:48:56.375]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:48:56.375]        // =>  FALSE
[19:48:56.375]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:48:56.375]    </control>
[19:48:56.375]    <block atomic="false" info="">
[19:48:56.375]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:48:56.388]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:48:56.388]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:48:56.388]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:48:56.389]      __ap = 0; //lets make sure we reset the access point selection
[19:48:56.389]        // -> [__ap <= 0x00000000]
[19:48:56.389]    </block>
[19:48:56.389]  </sequence>
[19:48:56.389]  
[19:48:56.415]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:48:56.415]  
[19:48:56.415]  <debugvars>
[19:48:56.415]    // Pre-defined
[19:48:56.415]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:48:56.418]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:48:56.418]    __dp=0x00000000
[19:48:56.418]    __ap=0x00000000
[19:48:56.418]    __traceout=0x00000000      (Trace Disabled)
[19:48:56.418]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:48:56.418]    __FlashAddr=0x00000000
[19:48:56.418]    __FlashLen=0x00000000
[19:48:56.418]    __FlashArg=0x00000000
[19:48:56.418]    __FlashOp=0x00000000
[19:48:56.418]    __Result=0x00000000
[19:48:56.418]  </debugvars>
[19:48:56.418]  
[19:48:56.419]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:48:56.419]    <block atomic="false" info="">
[19:48:56.419]      __var deviceID = 0;
[19:48:56.419]        // -> [deviceID <= 0x00000000]
[19:48:56.419]      __var version = 0;
[19:48:56.419]        // -> [version <= 0x00000000]
[19:48:56.419]      __var partNum = 0;
[19:48:56.419]        // -> [partNum <= 0x00000000]
[19:48:56.419]      __var manuf = 0;
[19:48:56.419]        // -> [manuf <= 0x00000000]
[19:48:56.419]      __var isMSPM0G1X0X_G3X0X = 0;
[19:48:56.419]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:48:56.419]      __var isProduction = 0;
[19:48:56.419]        // -> [isProduction <= 0x00000000]
[19:48:56.419]      __var continueId = 0;
[19:48:56.419]        // -> [continueId <= 0x00000000]
[19:48:56.419]      deviceID =   Read32(0x41C40004);
[19:48:56.424]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:48:56.424]        // -> [deviceID <= 0x2BB8802F]
[19:48:56.424]      version = deviceID >> 28;
[19:48:56.424]        // -> [version <= 0x00000002]
[19:48:56.424]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:48:56.424]        // -> [partNum <= 0x0000BB88]
[19:48:56.424]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:48:56.424]        // -> [manuf <= 0x00000017]
[19:48:56.424]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:48:56.424]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:48:56.424]      isProduction = (version > 0);
[19:48:56.424]        // -> [isProduction <= 0x00000001]
[19:48:56.424]    </block>
[19:48:56.424]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:48:56.424]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:48:56.424]        // =>  FALSE
[19:48:56.424]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:48:56.424]    </control>
[19:48:56.428]    <control if="continueId == 4" while="" timeout="0" info="">
[19:48:56.428]      // if-block "continueId == 4"
[19:48:56.428]        // =>  FALSE
[19:48:56.428]      // skip if-block "continueId == 4"
[19:48:56.428]    </control>
[19:48:56.428]    <control if="!isProduction" while="" timeout="0" info="">
[19:48:56.428]      // if-block "!isProduction"
[19:48:56.428]        // =>  FALSE
[19:48:56.428]      // skip if-block "!isProduction"
[19:48:56.428]    </control>
[19:48:56.428]  </sequence>
[19:48:56.428]  
[19:49:50.367]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:49:50.367]  
[19:49:50.367]  <debugvars>
[19:49:50.367]    // Pre-defined
[19:49:50.367]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:50.367]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:49:50.367]    __dp=0x00000000
[19:49:50.367]    __ap=0x00000000
[19:49:50.369]    __traceout=0x00000000      (Trace Disabled)
[19:49:50.369]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:50.369]    __FlashAddr=0x00000000
[19:49:50.369]    __FlashLen=0x00000000
[19:49:50.369]    __FlashArg=0x00000000
[19:49:50.369]    __FlashOp=0x00000000
[19:49:50.369]    __Result=0x00000000
[19:49:50.369]  </debugvars>
[19:49:50.369]  
[19:49:50.369]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:50.369]    <block atomic="false" info="">
[19:49:50.369]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:50.369]        // -> [isSWJ <= 0x00000001]
[19:49:50.369]      __var hasDormant = __protocol & 0x00020000;
[19:49:50.369]        // -> [hasDormant <= 0x00000000]
[19:49:50.369]      __var protType   = __protocol & 0x0000FFFF;
[19:49:50.369]        // -> [protType <= 0x00000002]
[19:49:50.369]    </block>
[19:49:50.371]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:50.371]      // if-block "protType == 1"
[19:49:50.371]        // =>  FALSE
[19:49:50.371]      // skip if-block "protType == 1"
[19:49:50.371]    </control>
[19:49:50.371]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:50.371]      // if-block "protType == 2"
[19:49:50.371]        // =>  TRUE
[19:49:50.371]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:50.371]        // if-block "isSWJ"
[19:49:50.371]          // =>  TRUE
[19:49:50.371]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:50.371]          // if-block "hasDormant"
[19:49:50.371]            // =>  FALSE
[19:49:50.371]          // skip if-block "hasDormant"
[19:49:50.371]        </control>
[19:49:50.371]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:50.371]          // if-block "!hasDormant"
[19:49:50.371]            // =>  TRUE
[19:49:50.371]          <block atomic="false" info="">
[19:49:50.371]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:50.375]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:50.375]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:50.380]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:50.380]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:50.383]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:50.383]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:50.385]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:50.385]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:50.388]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:50.388]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:50.389]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:50.389]          </block>
[19:49:50.389]          // end if-block "!hasDormant"
[19:49:50.389]        </control>
[19:49:50.389]        // end if-block "isSWJ"
[19:49:50.389]      </control>
[19:49:50.389]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:50.389]        // if-block "!isSWJ"
[19:49:50.389]          // =>  FALSE
[19:49:50.389]        // skip if-block "!isSWJ"
[19:49:50.389]      </control>
[19:49:50.389]      <block atomic="false" info="">
[19:49:50.389]        ReadDP(0x0);
[19:49:50.392]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:50.392]      </block>
[19:49:50.392]      // end if-block "protType == 2"
[19:49:50.392]    </control>
[19:49:50.392]  </sequence>
[19:49:50.392]  
[19:49:50.400]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:49:50.400]  
[19:49:50.400]  <debugvars>
[19:49:50.400]    // Pre-defined
[19:49:50.404]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:50.404]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:49:50.404]    __dp=0x00000000
[19:49:50.404]    __ap=0x00000000
[19:49:50.404]    __traceout=0x00000000      (Trace Disabled)
[19:49:50.404]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:50.404]    __FlashAddr=0x00000000
[19:49:50.404]    __FlashLen=0x00000000
[19:49:50.404]    __FlashArg=0x00000000
[19:49:50.404]    __FlashOp=0x00000000
[19:49:50.404]    __Result=0x00000000
[19:49:50.404]  </debugvars>
[19:49:50.404]  
[19:49:50.404]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:49:50.404]    <block atomic="false" info="">
[19:49:50.404]      __var SW_DP_ABORT       = 0x0;
[19:49:50.404]        // -> [SW_DP_ABORT <= 0x00000000]
[19:49:50.404]      __var DP_CTRL_STAT      = 0x4;
[19:49:50.404]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:49:50.404]      __var DP_SELECT         = 0x8;
[19:49:50.404]        // -> [DP_SELECT <= 0x00000008]
[19:49:50.404]      __var powered_down      = 0;
[19:49:50.404]        // -> [powered_down <= 0x00000000]
[19:49:50.404]      WriteDP(DP_SELECT, 0x00000000);
[19:49:50.409]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:49:50.409]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:49:50.413]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:49:50.413]        // -> [powered_down <= 0x00000001]
[19:49:50.413]    </block>
[19:49:50.413]    <control if="powered_down" while="" timeout="0" info="">
[19:49:50.413]      // if-block "powered_down"
[19:49:50.413]        // =>  TRUE
[19:49:50.413]      <block atomic="false" info="">
[19:49:50.413]        Message(0, "Debug/System power-up request sent");
[19:49:50.417]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:49:50.419]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:49:50.419]      </block>
[19:49:50.419]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:49:50.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:49:50.421]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:49:50.421]        // while-condition  =>  FALSE
[19:49:50.421]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:49:50.421]      </control>
[19:49:50.421]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:49:50.421]        // if-block "(__protocol & 0xFFFF) == 1"
[19:49:50.421]          // =>  FALSE
[19:49:50.421]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:49:50.421]      </control>
[19:49:50.421]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:49:50.421]        // if-block "(__protocol & 0xFFFF) == 2"
[19:49:50.421]          // =>  TRUE
[19:49:50.421]        <block atomic="false" info="">
[19:49:50.421]          Message(0, "executing SWD power up");
[19:49:50.424]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:49:50.429]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:49:50.429]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:49:50.430]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:49:50.430]        </block>
[19:49:50.430]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:49:50.430]      </control>
[19:49:50.430]      // end if-block "powered_down"
[19:49:50.430]    </control>
[19:49:50.430]    <block atomic="false" info="">
[19:49:50.430]      __var DEBUG_PORT_VAL    = 0;
[19:49:50.430]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:49:50.430]      __var ACCESS_POINT_VAL  = 0;
[19:49:50.430]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:49:50.430]      __ap = 1; 
[19:49:50.430]        // -> [__ap <= 0x00000001]
[19:49:50.430]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:49:50.438]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:49:50.438]      __ap = 4;
[19:49:50.438]        // -> [__ap <= 0x00000004]
[19:49:50.439]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:49:50.442]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:49:50.442]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:49:50.442]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:49:50.442]    </block>
[19:49:50.442]    <block atomic="false" info="">
[19:49:50.442]      __var nReset = 0x80;
[19:49:50.442]        // -> [nReset <= 0x00000080]
[19:49:50.442]      __var canReadPins = 0;
[19:49:50.442]        // -> [canReadPins <= 0x00000000]
[19:49:50.442]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:49:50.446]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:49:50.446]        // -> [canReadPins <= 0x00000001]
[19:49:50.446]    </block>
[19:49:50.446]    <control if="" while="1" timeout="200" info="">
[19:49:50.446]      // while "1"  (timeout="200")
[19:49:50.446]      // while-condition  =>  TRUE
[19:49:50.446]      // while "1"  (timeout="200")
[19:49:50.446]      // while-condition  =>  TRUE
[19:49:50.448]      // while "1"  (timeout="200")
[19:49:50.448]      // while-condition  =>  TRUE
[19:49:50.448]      // while "1"  (timeout="200")
[19:49:50.448]      // while-condition  =>  TRUE
[19:49:50.448]      // while "1"  (timeout="200")
[19:49:50.448]      // while-condition  =>  TRUE
[19:49:50.449]      // while "1"  (timeout="200")
[19:49:50.449]      // while-condition  =>  TRUE
[19:49:50.449]      // while "1"  (timeout="200")
[19:49:50.449]      // while-condition  =>  TRUE
[19:49:50.449]      // while "1"  (timeout="200")
[19:49:50.449]      // while-condition  =>  TRUE
[19:49:50.450]      // while "1"  (timeout="200")
[19:49:50.450]      // while-condition  =>  TRUE
[19:49:50.450]      // while "1"  (timeout="200")
[19:49:50.450]      // while-condition  =>  TRUE
[19:49:50.450]      // while "1"  (timeout="200")
[19:49:50.450]      // while-condition  =>  TRUE
[19:49:50.450]      // while "1"  (timeout="200")
[19:49:50.450]      // while-condition  =>  TRUE
[19:49:50.450]      // while "1"  (timeout="200")
[19:49:50.450]      // while-condition  =>  TRUE
[19:49:50.450]      // while "1"  (timeout="200")
[19:49:50.450]      // while-condition  =>  TRUE
[19:49:50.450]      // while "1"  (timeout="200")
[19:49:50.450]      // while-condition  =>  TRUE
[19:49:50.450]      // while "1"  (timeout="200")
[19:49:50.450]      // while-condition  =>  TRUE
[19:49:50.450]      // while "1"  (timeout="200")
[19:49:50.450]      // while-condition  =>  TRUE
[19:49:50.451]      // while "1"  (timeout="200")
[19:49:50.451]      // while-condition  =>  TRUE
[19:49:50.451]      // while "1"  (timeout="200")
[19:49:50.451]      // while-condition  =>  TRUE
[19:49:50.451]      // while "1"  (timeout="200")
[19:49:50.451]      // while-condition  =>  TRUE
[19:49:50.451]      // while "1"  (timeout="200")
[19:49:50.451]      // while-condition  =>  TRUE
[19:49:50.451]      // while "1"  (timeout="200")
[19:49:50.451]      // while-condition  =>  TRUE
[19:49:50.451]      // while "1"  (timeout="200")
[19:49:50.451]      // while-condition  =>  TRUE
[19:49:50.451]      // while "1"  (timeout="200")
[19:49:50.451]      // while-condition  =>  TRUE
[19:49:50.451]      // while "1"  (timeout="200")
[19:49:50.453]      // while-condition  =>  TRUE
[19:49:50.453]      // while "1"  (timeout="200")
[19:49:50.453]      // while-condition  =>  TRUE
[19:49:50.453]      // while "1"  (timeout="200")
[19:49:50.453]      // while-condition  =>  TRUE
[19:49:50.453]      // while "1"  (timeout="200")
[19:49:50.453]      // while-condition  =>  TRUE
[19:49:50.453]      // while "1"  (timeout="200")
[19:49:50.453]      // while-condition  =>  TRUE
[19:49:50.453]      // while "1"  (timeout="200")
[19:49:50.453]      // while-condition  =>  TRUE
[19:49:50.453]      // while "1"  (timeout="200")
[19:49:50.453]      // while-condition  =>  TRUE
[19:49:50.453]      // while "1"  (timeout="200")
[19:49:50.453]      // while-condition  =>  TRUE
[19:49:50.454]      // while "1"  (timeout="200")
[19:49:50.454]      // while-condition  =>  TRUE
[19:49:50.454]      // while "1"  (timeout="200")
[19:49:50.454]      // while-condition  =>  TRUE
[19:49:50.454]      // while "1"  (timeout="200")
[19:49:50.454]      // while-condition  =>  TRUE
[19:49:50.454]      // while "1"  (timeout="200")
[19:49:50.454]      // while-condition  =>  TRUE
[19:49:50.454]      // while "1"  (timeout="200")
[19:49:50.454]      // while-condition  =>  TRUE
[19:49:50.454]      // while "1"  (timeout="200")
[19:49:50.455]      // while-condition  =>  TRUE
[19:49:50.455]      // while "1"  (timeout="200")
[19:49:50.455]      // while-condition  =>  TRUE
[19:49:50.455]      // while "1"  (timeout="200")
[19:49:50.455]      // while-condition  =>  TRUE
[19:49:50.455]      // while "1"  (timeout="200")
[19:49:50.455]      // while-condition  =>  TRUE
[19:49:50.455]      // while "1"  (timeout="200")
[19:49:50.455]      // while-condition  =>  TRUE
[19:49:50.455]      // while "1"  (timeout="200")
[19:49:50.455]      // while-condition  =>  TRUE
[19:49:50.455]      // while "1"  (timeout="200")
[19:49:50.455]      // while-condition  =>  TRUE
[19:49:50.455]      // while "1"  (timeout="200")
[19:49:50.455]      // while-condition  =>  TRUE
[19:49:50.455]      // while "1"  (timeout="200")
[19:49:50.457]      // while-condition  =>  TRUE
[19:49:50.457]      // while "1"  (timeout="200")
[19:49:50.457]      // while  =>  TIMEOUT
[19:49:50.457]      // end while "1"
[19:49:50.457]    </control>
[19:49:50.457]    <control if="canReadPins" while="" timeout="0" info="">
[19:49:50.457]      // if-block "canReadPins"
[19:49:50.457]        // =>  TRUE
[19:49:50.457]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:49:50.457]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:49:50.459]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:49:50.459]        // while-condition  =>  FALSE
[19:49:50.459]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:49:50.459]      </control>
[19:49:50.459]      // end if-block "canReadPins"
[19:49:50.459]    </control>
[19:49:50.460]    <control if="!canReadPins" while="" timeout="0" info="">
[19:49:50.461]      // if-block "!canReadPins"
[19:49:50.461]        // =>  FALSE
[19:49:50.461]      // skip if-block "!canReadPins"
[19:49:50.461]    </control>
[19:49:50.461]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:49:50.461]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:49:50.461]        // =>  TRUE
[19:49:50.461]      <block atomic="false" info="">
[19:49:50.461]        WriteAP(0x00, 0x190008);
[19:49:50.463]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:49:50.463]        WriteAP(0xF0, 0x01);
[19:49:50.472]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:49:50.472]      </block>
[19:49:50.472]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:49:50.472]    </control>
[19:49:50.472]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:49:50.472]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:49:50.472]        // =>  FALSE
[19:49:50.472]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:49:50.472]    </control>
[19:49:50.472]    <block atomic="false" info="">
[19:49:50.472]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:49:50.476]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:49:50.476]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:49:50.476]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:49:50.476]      __ap = 0; //lets make sure we reset the access point selection
[19:49:50.479]        // -> [__ap <= 0x00000000]
[19:49:50.479]    </block>
[19:49:50.479]  </sequence>
[19:49:50.479]  
[19:49:50.504]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:49:50.504]  
[19:49:50.504]  <debugvars>
[19:49:50.504]    // Pre-defined
[19:49:50.504]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:50.504]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:49:50.504]    __dp=0x00000000
[19:49:50.504]    __ap=0x00000000
[19:49:50.504]    __traceout=0x00000000      (Trace Disabled)
[19:49:50.504]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:50.504]    __FlashAddr=0x00000000
[19:49:50.504]    __FlashLen=0x00000000
[19:49:50.504]    __FlashArg=0x00000000
[19:49:50.504]    __FlashOp=0x00000000
[19:49:50.504]    __Result=0x00000000
[19:49:50.504]  </debugvars>
[19:49:50.504]  
[19:49:50.504]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:49:50.504]    <block atomic="false" info="">
[19:49:50.504]      __var deviceID = 0;
[19:49:50.504]        // -> [deviceID <= 0x00000000]
[19:49:50.504]      __var version = 0;
[19:49:50.504]        // -> [version <= 0x00000000]
[19:49:50.504]      __var partNum = 0;
[19:49:50.504]        // -> [partNum <= 0x00000000]
[19:49:50.504]      __var manuf = 0;
[19:49:50.504]        // -> [manuf <= 0x00000000]
[19:49:50.504]      __var isMSPM0G1X0X_G3X0X = 0;
[19:49:50.504]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:49:50.504]      __var isProduction = 0;
[19:49:50.504]        // -> [isProduction <= 0x00000000]
[19:49:50.504]      __var continueId = 0;
[19:49:50.504]        // -> [continueId <= 0x00000000]
[19:49:50.504]      deviceID =   Read32(0x41C40004);
[19:49:50.512]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:49:50.512]        // -> [deviceID <= 0x2BB8802F]
[19:49:50.512]      version = deviceID >> 28;
[19:49:50.512]        // -> [version <= 0x00000002]
[19:49:50.512]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:49:50.512]        // -> [partNum <= 0x0000BB88]
[19:49:50.512]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:49:50.512]        // -> [manuf <= 0x00000017]
[19:49:50.512]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:49:50.512]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:49:50.512]      isProduction = (version > 0);
[19:49:50.512]        // -> [isProduction <= 0x00000001]
[19:49:50.512]    </block>
[19:49:50.512]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:49:50.512]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:49:50.512]        // =>  FALSE
[19:49:50.512]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:49:50.512]    </control>
[19:49:50.512]    <control if="continueId == 4" while="" timeout="0" info="">
[19:49:50.512]      // if-block "continueId == 4"
[19:49:50.512]        // =>  FALSE
[19:49:50.512]      // skip if-block "continueId == 4"
[19:49:50.512]    </control>
[19:49:50.512]    <control if="!isProduction" while="" timeout="0" info="">
[19:49:50.512]      // if-block "!isProduction"
[19:49:50.512]        // =>  FALSE
[19:49:50.516]      // skip if-block "!isProduction"
[19:49:50.516]    </control>
[19:49:50.516]  </sequence>
[19:49:50.516]  
[19:50:39.255]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:50:39.255]  
[19:50:39.266]  <debugvars>
[19:50:39.266]    // Pre-defined
[19:50:39.266]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:39.266]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:50:39.266]    __dp=0x00000000
[19:50:39.266]    __ap=0x00000000
[19:50:39.266]    __traceout=0x00000000      (Trace Disabled)
[19:50:39.266]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:39.266]    __FlashAddr=0x00000000
[19:50:39.266]    __FlashLen=0x00000000
[19:50:39.266]    __FlashArg=0x00000000
[19:50:39.266]    __FlashOp=0x00000000
[19:50:39.266]    __Result=0x00000000
[19:50:39.266]  </debugvars>
[19:50:39.266]  
[19:50:39.266]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:50:39.266]    <block atomic="false" info="">
[19:50:39.266]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:50:39.266]        // -> [isSWJ <= 0x00000001]
[19:50:39.266]      __var hasDormant = __protocol & 0x00020000;
[19:50:39.266]        // -> [hasDormant <= 0x00000000]
[19:50:39.268]      __var protType   = __protocol & 0x0000FFFF;
[19:50:39.268]        // -> [protType <= 0x00000002]
[19:50:39.268]    </block>
[19:50:39.268]    <control if="protType == 1" while="" timeout="0" info="">
[19:50:39.268]      // if-block "protType == 1"
[19:50:39.268]        // =>  FALSE
[19:50:39.268]      // skip if-block "protType == 1"
[19:50:39.268]    </control>
[19:50:39.268]    <control if="protType == 2" while="" timeout="0" info="">
[19:50:39.268]      // if-block "protType == 2"
[19:50:39.268]        // =>  TRUE
[19:50:39.268]      <control if="isSWJ" while="" timeout="0" info="">
[19:50:39.268]        // if-block "isSWJ"
[19:50:39.268]          // =>  TRUE
[19:50:39.270]        <control if="hasDormant" while="" timeout="0" info="">
[19:50:39.270]          // if-block "hasDormant"
[19:50:39.270]            // =>  FALSE
[19:50:39.270]          // skip if-block "hasDormant"
[19:50:39.270]        </control>
[19:50:39.270]        <control if="!hasDormant" while="" timeout="0" info="">
[19:50:39.270]          // if-block "!hasDormant"
[19:50:39.270]            // =>  TRUE
[19:50:39.270]          <block atomic="false" info="">
[19:50:39.270]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:50:39.272]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:39.272]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:50:39.273]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:50:39.273]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:50:39.276]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:39.276]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:50:39.277]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:50:39.277]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:50:39.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:50:39.277]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:50:39.280]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:50:39.280]          </block>
[19:50:39.280]          // end if-block "!hasDormant"
[19:50:39.280]        </control>
[19:50:39.280]        // end if-block "isSWJ"
[19:50:39.280]      </control>
[19:50:39.280]      <control if="!isSWJ" while="" timeout="0" info="">
[19:50:39.280]        // if-block "!isSWJ"
[19:50:39.280]          // =>  FALSE
[19:50:39.280]        // skip if-block "!isSWJ"
[19:50:39.280]      </control>
[19:50:39.280]      <block atomic="false" info="">
[19:50:39.280]        ReadDP(0x0);
[19:50:39.284]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:50:39.284]      </block>
[19:50:39.284]      // end if-block "protType == 2"
[19:50:39.284]    </control>
[19:50:39.284]  </sequence>
[19:50:39.285]  
[19:50:39.290]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:50:39.290]  
[19:50:39.290]  <debugvars>
[19:50:39.291]    // Pre-defined
[19:50:39.291]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:39.291]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:50:39.291]    __dp=0x00000000
[19:50:39.291]    __ap=0x00000000
[19:50:39.291]    __traceout=0x00000000      (Trace Disabled)
[19:50:39.291]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:39.291]    __FlashAddr=0x00000000
[19:50:39.291]    __FlashLen=0x00000000
[19:50:39.291]    __FlashArg=0x00000000
[19:50:39.291]    __FlashOp=0x00000000
[19:50:39.291]    __Result=0x00000000
[19:50:39.291]  </debugvars>
[19:50:39.291]  
[19:50:39.291]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:50:39.291]    <block atomic="false" info="">
[19:50:39.291]      __var SW_DP_ABORT       = 0x0;
[19:50:39.291]        // -> [SW_DP_ABORT <= 0x00000000]
[19:50:39.291]      __var DP_CTRL_STAT      = 0x4;
[19:50:39.292]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:50:39.292]      __var DP_SELECT         = 0x8;
[19:50:39.292]        // -> [DP_SELECT <= 0x00000008]
[19:50:39.292]      __var powered_down      = 0;
[19:50:39.292]        // -> [powered_down <= 0x00000000]
[19:50:39.292]      WriteDP(DP_SELECT, 0x00000000);
[19:50:39.295]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:50:39.295]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:50:39.298]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:50:39.298]        // -> [powered_down <= 0x00000001]
[19:50:39.298]    </block>
[19:50:39.298]    <control if="powered_down" while="" timeout="0" info="">
[19:50:39.298]      // if-block "powered_down"
[19:50:39.298]        // =>  TRUE
[19:50:39.299]      <block atomic="false" info="">
[19:50:39.299]        Message(0, "Debug/System power-up request sent");
[19:50:39.301]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:50:39.307]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:50:39.307]      </block>
[19:50:39.307]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:50:39.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:50:39.310]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:50:39.310]        // while-condition  =>  FALSE
[19:50:39.310]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:50:39.310]      </control>
[19:50:39.310]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:50:39.310]        // if-block "(__protocol & 0xFFFF) == 1"
[19:50:39.310]          // =>  FALSE
[19:50:39.310]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:50:39.310]      </control>
[19:50:39.312]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:50:39.312]        // if-block "(__protocol & 0xFFFF) == 2"
[19:50:39.312]          // =>  TRUE
[19:50:39.312]        <block atomic="false" info="">
[19:50:39.312]          Message(0, "executing SWD power up");
[19:50:39.314]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:50:39.315]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:50:39.315]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:50:39.318]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:50:39.318]        </block>
[19:50:39.318]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:50:39.318]      </control>
[19:50:39.318]      // end if-block "powered_down"
[19:50:39.318]    </control>
[19:50:39.318]    <block atomic="false" info="">
[19:50:39.318]      __var DEBUG_PORT_VAL    = 0;
[19:50:39.318]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:50:39.318]      __var ACCESS_POINT_VAL  = 0;
[19:50:39.318]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:50:39.318]      __ap = 1; 
[19:50:39.318]        // -> [__ap <= 0x00000001]
[19:50:39.318]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:50:39.322]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:50:39.322]      __ap = 4;
[19:50:39.322]        // -> [__ap <= 0x00000004]
[19:50:39.322]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:50:39.330]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:50:39.330]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:50:39.330]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:50:39.332]    </block>
[19:50:39.332]    <block atomic="false" info="">
[19:50:39.332]      __var nReset = 0x80;
[19:50:39.332]        // -> [nReset <= 0x00000080]
[19:50:39.332]      __var canReadPins = 0;
[19:50:39.332]        // -> [canReadPins <= 0x00000000]
[19:50:39.332]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:50:39.332]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:50:39.332]        // -> [canReadPins <= 0x00000001]
[19:50:39.332]    </block>
[19:50:39.335]    <control if="" while="1" timeout="200" info="">
[19:50:39.335]      // while "1"  (timeout="200")
[19:50:39.335]      // while-condition  =>  TRUE
[19:50:39.335]      // while "1"  (timeout="200")
[19:50:39.335]      // while-condition  =>  TRUE
[19:50:39.335]      // while "1"  (timeout="200")
[19:50:39.335]      // while-condition  =>  TRUE
[19:50:39.335]      // while "1"  (timeout="200")
[19:50:39.335]      // while-condition  =>  TRUE
[19:50:39.335]      // while "1"  (timeout="200")
[19:50:39.335]      // while-condition  =>  TRUE
[19:50:39.335]      // while "1"  (timeout="200")
[19:50:39.335]      // while-condition  =>  TRUE
[19:50:39.335]      // while "1"  (timeout="200")
[19:50:39.335]      // while-condition  =>  TRUE
[19:50:39.335]      // while "1"  (timeout="200")
[19:50:39.335]      // while-condition  =>  TRUE
[19:50:39.335]      // while "1"  (timeout="200")
[19:50:39.335]      // while-condition  =>  TRUE
[19:50:39.335]      // while "1"  (timeout="200")
[19:50:39.335]      // while-condition  =>  TRUE
[19:50:39.338]      // while "1"  (timeout="200")
[19:50:39.338]      // while-condition  =>  TRUE
[19:50:39.338]      // while "1"  (timeout="200")
[19:50:39.338]      // while-condition  =>  TRUE
[19:50:39.338]      // while "1"  (timeout="200")
[19:50:39.338]      // while-condition  =>  TRUE
[19:50:39.338]      // while "1"  (timeout="200")
[19:50:39.338]      // while-condition  =>  TRUE
[19:50:39.338]      // while "1"  (timeout="200")
[19:50:39.338]      // while-condition  =>  TRUE
[19:50:39.338]      // while "1"  (timeout="200")
[19:50:39.338]      // while-condition  =>  TRUE
[19:50:39.338]      // while "1"  (timeout="200")
[19:50:39.338]      // while-condition  =>  TRUE
[19:50:39.338]      // while "1"  (timeout="200")
[19:50:39.338]      // while-condition  =>  TRUE
[19:50:39.338]      // while "1"  (timeout="200")
[19:50:39.338]      // while-condition  =>  TRUE
[19:50:39.338]      // while "1"  (timeout="200")
[19:50:39.338]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.340]      // while "1"  (timeout="200")
[19:50:39.340]      // while-condition  =>  TRUE
[19:50:39.343]      // while "1"  (timeout="200")
[19:50:39.343]      // while-condition  =>  TRUE
[19:50:39.343]      // while "1"  (timeout="200")
[19:50:39.343]      // while-condition  =>  TRUE
[19:50:39.343]      // while "1"  (timeout="200")
[19:50:39.343]      // while-condition  =>  TRUE
[19:50:39.343]      // while "1"  (timeout="200")
[19:50:39.343]      // while-condition  =>  TRUE
[19:50:39.343]      // while "1"  (timeout="200")
[19:50:39.343]      // while-condition  =>  TRUE
[19:50:39.343]      // while "1"  (timeout="200")
[19:50:39.343]      // while-condition  =>  TRUE
[19:50:39.343]      // while "1"  (timeout="200")
[19:50:39.343]      // while-condition  =>  TRUE
[19:50:39.345]      // while "1"  (timeout="200")
[19:50:39.345]      // while-condition  =>  TRUE
[19:50:39.345]      // while "1"  (timeout="200")
[19:50:39.345]      // while-condition  =>  TRUE
[19:50:39.345]      // while "1"  (timeout="200")
[19:50:39.345]      // while-condition  =>  TRUE
[19:50:39.345]      // while "1"  (timeout="200")
[19:50:39.345]      // while-condition  =>  TRUE
[19:50:39.345]      // while "1"  (timeout="200")
[19:50:39.345]      // while-condition  =>  TRUE
[19:50:39.345]      // while "1"  (timeout="200")
[19:50:39.345]      // while-condition  =>  TRUE
[19:50:39.345]      // while "1"  (timeout="200")
[19:50:39.346]      // while-condition  =>  TRUE
[19:50:39.346]      // while "1"  (timeout="200")
[19:50:39.346]      // while-condition  =>  TRUE
[19:50:39.346]      // while "1"  (timeout="200")
[19:50:39.346]      // while-condition  =>  TRUE
[19:50:39.346]      // while "1"  (timeout="200")
[19:50:39.346]      // while-condition  =>  TRUE
[19:50:39.346]      // while "1"  (timeout="200")
[19:50:39.346]      // while-condition  =>  TRUE
[19:50:39.346]      // while "1"  (timeout="200")
[19:50:39.346]      // while-condition  =>  TRUE
[19:50:39.346]      // while "1"  (timeout="200")
[19:50:39.346]      // while-condition  =>  TRUE
[19:50:39.347]      // while "1"  (timeout="200")
[19:50:39.347]      // while-condition  =>  TRUE
[19:50:39.347]      // while "1"  (timeout="200")
[19:50:39.347]      // while-condition  =>  TRUE
[19:50:39.347]      // while "1"  (timeout="200")
[19:50:39.347]      // while-condition  =>  TRUE
[19:50:39.347]      // while "1"  (timeout="200")
[19:50:39.347]      // while-condition  =>  TRUE
[19:50:39.347]      // while "1"  (timeout="200")
[19:50:39.347]      // while-condition  =>  TRUE
[19:50:39.347]      // while "1"  (timeout="200")
[19:50:39.347]      // while-condition  =>  TRUE
[19:50:39.348]      // while "1"  (timeout="200")
[19:50:39.348]      // while  =>  TIMEOUT
[19:50:39.348]      // end while "1"
[19:50:39.348]    </control>
[19:50:39.348]    <control if="canReadPins" while="" timeout="0" info="">
[19:50:39.348]      // if-block "canReadPins"
[19:50:39.348]        // =>  TRUE
[19:50:39.348]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:50:39.348]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:50:39.353]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:50:39.353]        // while-condition  =>  FALSE
[19:50:39.353]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:50:39.353]      </control>
[19:50:39.353]      // end if-block "canReadPins"
[19:50:39.353]    </control>
[19:50:39.354]    <control if="!canReadPins" while="" timeout="0" info="">
[19:50:39.354]      // if-block "!canReadPins"
[19:50:39.354]        // =>  FALSE
[19:50:39.354]      // skip if-block "!canReadPins"
[19:50:39.354]    </control>
[19:50:39.354]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:50:39.354]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:50:39.354]        // =>  TRUE
[19:50:39.354]      <block atomic="false" info="">
[19:50:39.354]        WriteAP(0x00, 0x190008);
[19:50:39.357]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:50:39.357]        WriteAP(0xF0, 0x01);
[19:50:39.360]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:50:39.360]      </block>
[19:50:39.360]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:50:39.360]    </control>
[19:50:39.361]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:50:39.362]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:50:39.362]        // =>  FALSE
[19:50:39.362]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:50:39.362]    </control>
[19:50:39.362]    <block atomic="false" info="">
[19:50:39.362]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:50:39.365]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:50:39.365]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:50:39.365]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:50:39.369]      __ap = 0; //lets make sure we reset the access point selection
[19:50:39.369]        // -> [__ap <= 0x00000000]
[19:50:39.369]    </block>
[19:50:39.369]  </sequence>
[19:50:39.369]  
[19:50:39.394]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:50:39.394]  
[19:50:39.394]  <debugvars>
[19:50:39.394]    // Pre-defined
[19:50:39.394]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:50:39.394]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:50:39.394]    __dp=0x00000000
[19:50:39.394]    __ap=0x00000000
[19:50:39.394]    __traceout=0x00000000      (Trace Disabled)
[19:50:39.394]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:50:39.394]    __FlashAddr=0x00000000
[19:50:39.394]    __FlashLen=0x00000000
[19:50:39.394]    __FlashArg=0x00000000
[19:50:39.394]    __FlashOp=0x00000000
[19:50:39.394]    __Result=0x00000000
[19:50:39.394]  </debugvars>
[19:50:39.394]  
[19:50:39.394]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:50:39.394]    <block atomic="false" info="">
[19:50:39.394]      __var deviceID = 0;
[19:50:39.394]        // -> [deviceID <= 0x00000000]
[19:50:39.394]      __var version = 0;
[19:50:39.394]        // -> [version <= 0x00000000]
[19:50:39.394]      __var partNum = 0;
[19:50:39.397]        // -> [partNum <= 0x00000000]
[19:50:39.397]      __var manuf = 0;
[19:50:39.397]        // -> [manuf <= 0x00000000]
[19:50:39.397]      __var isMSPM0G1X0X_G3X0X = 0;
[19:50:39.397]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:50:39.397]      __var isProduction = 0;
[19:50:39.397]        // -> [isProduction <= 0x00000000]
[19:50:39.397]      __var continueId = 0;
[19:50:39.397]        // -> [continueId <= 0x00000000]
[19:50:39.397]      deviceID =   Read32(0x41C40004);
[19:50:39.402]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:50:39.403]        // -> [deviceID <= 0x2BB8802F]
[19:50:39.403]      version = deviceID >> 28;
[19:50:39.403]        // -> [version <= 0x00000002]
[19:50:39.403]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:50:39.403]        // -> [partNum <= 0x0000BB88]
[19:50:39.403]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:50:39.403]        // -> [manuf <= 0x00000017]
[19:50:39.403]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:50:39.403]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:50:39.403]      isProduction = (version > 0);
[19:50:39.403]        // -> [isProduction <= 0x00000001]
[19:50:39.403]    </block>
[19:50:39.404]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:50:39.404]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:50:39.404]        // =>  FALSE
[19:50:39.404]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:50:39.404]    </control>
[19:50:39.404]    <control if="continueId == 4" while="" timeout="0" info="">
[19:50:39.404]      // if-block "continueId == 4"
[19:50:39.404]        // =>  FALSE
[19:50:39.404]      // skip if-block "continueId == 4"
[19:50:39.404]    </control>
[19:50:39.404]    <control if="!isProduction" while="" timeout="0" info="">
[19:50:39.404]      // if-block "!isProduction"
[19:50:39.404]        // =>  FALSE
[19:50:39.404]      // skip if-block "!isProduction"
[19:50:39.404]    </control>
[19:50:39.404]  </sequence>
[19:50:39.404]  
[19:51:38.883]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:51:38.883]  
[19:51:38.892]  <debugvars>
[19:51:38.892]    // Pre-defined
[19:51:38.892]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:51:38.892]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:51:38.892]    __dp=0x00000000
[19:51:38.892]    __ap=0x00000000
[19:51:38.892]    __traceout=0x00000000      (Trace Disabled)
[19:51:38.892]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:51:38.892]    __FlashAddr=0x00000000
[19:51:38.892]    __FlashLen=0x00000000
[19:51:38.892]    __FlashArg=0x00000000
[19:51:38.892]    __FlashOp=0x00000000
[19:51:38.892]    __Result=0x00000000
[19:51:38.892]  </debugvars>
[19:51:38.892]  
[19:51:38.892]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:51:38.892]    <block atomic="false" info="">
[19:51:38.892]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:51:38.892]        // -> [isSWJ <= 0x00000001]
[19:51:38.892]      __var hasDormant = __protocol & 0x00020000;
[19:51:38.892]        // -> [hasDormant <= 0x00000000]
[19:51:38.892]      __var protType   = __protocol & 0x0000FFFF;
[19:51:38.892]        // -> [protType <= 0x00000002]
[19:51:38.892]    </block>
[19:51:38.892]    <control if="protType == 1" while="" timeout="0" info="">
[19:51:38.892]      // if-block "protType == 1"
[19:51:38.892]        // =>  FALSE
[19:51:38.892]      // skip if-block "protType == 1"
[19:51:38.892]    </control>
[19:51:38.892]    <control if="protType == 2" while="" timeout="0" info="">
[19:51:38.892]      // if-block "protType == 2"
[19:51:38.892]        // =>  TRUE
[19:51:38.895]      <control if="isSWJ" while="" timeout="0" info="">
[19:51:38.895]        // if-block "isSWJ"
[19:51:38.895]          // =>  TRUE
[19:51:38.895]        <control if="hasDormant" while="" timeout="0" info="">
[19:51:38.895]          // if-block "hasDormant"
[19:51:38.895]            // =>  FALSE
[19:51:38.895]          // skip if-block "hasDormant"
[19:51:38.895]        </control>
[19:51:38.895]        <control if="!hasDormant" while="" timeout="0" info="">
[19:51:38.895]          // if-block "!hasDormant"
[19:51:38.895]            // =>  TRUE
[19:51:38.895]          <block atomic="false" info="">
[19:51:38.895]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:51:38.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:51:38.897]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:51:38.899]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:51:38.899]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:51:38.901]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:51:38.901]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:51:38.901]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:51:38.901]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:51:38.903]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:51:38.903]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:51:38.903]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:51:38.903]          </block>
[19:51:38.908]          // end if-block "!hasDormant"
[19:51:38.908]        </control>
[19:51:38.908]        // end if-block "isSWJ"
[19:51:38.908]      </control>
[19:51:38.908]      <control if="!isSWJ" while="" timeout="0" info="">
[19:51:38.908]        // if-block "!isSWJ"
[19:51:38.908]          // =>  FALSE
[19:51:38.908]        // skip if-block "!isSWJ"
[19:51:38.908]      </control>
[19:51:38.908]      <block atomic="false" info="">
[19:51:38.908]        ReadDP(0x0);
[19:51:38.912]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:51:38.912]      </block>
[19:51:38.912]      // end if-block "protType == 2"
[19:51:38.912]    </control>
[19:51:38.912]  </sequence>
[19:51:38.912]  
[19:51:38.916]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:51:38.916]  
[19:51:38.916]  <debugvars>
[19:51:38.916]    // Pre-defined
[19:51:38.916]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:51:38.916]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:51:38.916]    __dp=0x00000000
[19:51:38.916]    __ap=0x00000000
[19:51:38.916]    __traceout=0x00000000      (Trace Disabled)
[19:51:38.916]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:51:38.916]    __FlashAddr=0x00000000
[19:51:38.916]    __FlashLen=0x00000000
[19:51:38.916]    __FlashArg=0x00000000
[19:51:38.916]    __FlashOp=0x00000000
[19:51:38.916]    __Result=0x00000000
[19:51:38.916]  </debugvars>
[19:51:38.916]  
[19:51:38.916]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:51:38.916]    <block atomic="false" info="">
[19:51:38.916]      __var SW_DP_ABORT       = 0x0;
[19:51:38.916]        // -> [SW_DP_ABORT <= 0x00000000]
[19:51:38.916]      __var DP_CTRL_STAT      = 0x4;
[19:51:38.916]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:51:38.916]      __var DP_SELECT         = 0x8;
[19:51:38.916]        // -> [DP_SELECT <= 0x00000008]
[19:51:38.916]      __var powered_down      = 0;
[19:51:38.916]        // -> [powered_down <= 0x00000000]
[19:51:38.916]      WriteDP(DP_SELECT, 0x00000000);
[19:51:38.920]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:51:38.920]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:51:38.924]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:51:38.924]        // -> [powered_down <= 0x00000001]
[19:51:38.924]    </block>
[19:51:38.924]    <control if="powered_down" while="" timeout="0" info="">
[19:51:38.924]      // if-block "powered_down"
[19:51:38.924]        // =>  TRUE
[19:51:38.924]      <block atomic="false" info="">
[19:51:38.924]        Message(0, "Debug/System power-up request sent");
[19:51:38.924]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:51:38.928]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:51:38.928]      </block>
[19:51:38.928]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:51:38.928]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:51:38.930]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:51:38.930]        // while-condition  =>  FALSE
[19:51:38.930]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:51:38.931]      </control>
[19:51:38.931]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:51:38.931]        // if-block "(__protocol & 0xFFFF) == 1"
[19:51:38.931]          // =>  FALSE
[19:51:38.931]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:51:38.931]      </control>
[19:51:38.931]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:51:38.932]        // if-block "(__protocol & 0xFFFF) == 2"
[19:51:38.932]          // =>  TRUE
[19:51:38.932]        <block atomic="false" info="">
[19:51:38.932]          Message(0, "executing SWD power up");
[19:51:38.932]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:51:38.932]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:51:38.932]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:51:38.936]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:51:38.936]        </block>
[19:51:38.936]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:51:38.936]      </control>
[19:51:38.936]      // end if-block "powered_down"
[19:51:38.936]    </control>
[19:51:38.936]    <block atomic="false" info="">
[19:51:38.936]      __var DEBUG_PORT_VAL    = 0;
[19:51:38.936]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:51:38.936]      __var ACCESS_POINT_VAL  = 0;
[19:51:38.940]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:51:38.940]      __ap = 1; 
[19:51:38.940]        // -> [__ap <= 0x00000001]
[19:51:38.940]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:51:38.944]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:51:38.944]      __ap = 4;
[19:51:38.944]        // -> [__ap <= 0x00000004]
[19:51:38.944]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:51:38.944]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:51:38.949]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:51:38.949]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:51:38.949]    </block>
[19:51:38.949]    <block atomic="false" info="">
[19:51:38.949]      __var nReset = 0x80;
[19:51:38.951]        // -> [nReset <= 0x00000080]
[19:51:38.951]      __var canReadPins = 0;
[19:51:38.951]        // -> [canReadPins <= 0x00000000]
[19:51:38.951]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:51:38.953]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:51:38.953]        // -> [canReadPins <= 0x00000001]
[19:51:38.953]    </block>
[19:51:38.953]    <control if="" while="1" timeout="200" info="">
[19:51:38.953]      // while "1"  (timeout="200")
[19:51:38.953]      // while-condition  =>  TRUE
[19:51:38.953]      // while "1"  (timeout="200")
[19:51:38.953]      // while-condition  =>  TRUE
[19:51:38.953]      // while "1"  (timeout="200")
[19:51:38.953]      // while-condition  =>  TRUE
[19:51:38.953]      // while "1"  (timeout="200")
[19:51:38.953]      // while-condition  =>  TRUE
[19:51:38.953]      // while "1"  (timeout="200")
[19:51:38.954]      // while-condition  =>  TRUE
[19:51:38.954]      // while "1"  (timeout="200")
[19:51:38.954]      // while-condition  =>  TRUE
[19:51:38.954]      // while "1"  (timeout="200")
[19:51:38.954]      // while-condition  =>  TRUE
[19:51:38.954]      // while "1"  (timeout="200")
[19:51:38.954]      // while-condition  =>  TRUE
[19:51:38.954]      // while "1"  (timeout="200")
[19:51:38.956]      // while-condition  =>  TRUE
[19:51:38.956]      // while "1"  (timeout="200")
[19:51:38.956]      // while-condition  =>  TRUE
[19:51:38.956]      // while "1"  (timeout="200")
[19:51:38.956]      // while-condition  =>  TRUE
[19:51:38.956]      // while "1"  (timeout="200")
[19:51:38.956]      // while-condition  =>  TRUE
[19:51:38.956]      // while "1"  (timeout="200")
[19:51:38.956]      // while-condition  =>  TRUE
[19:51:38.956]      // while "1"  (timeout="200")
[19:51:38.956]      // while-condition  =>  TRUE
[19:51:38.956]      // while "1"  (timeout="200")
[19:51:38.956]      // while-condition  =>  TRUE
[19:51:38.956]      // while "1"  (timeout="200")
[19:51:38.956]      // while-condition  =>  TRUE
[19:51:38.956]      // while "1"  (timeout="200")
[19:51:38.957]      // while-condition  =>  TRUE
[19:51:38.957]      // while "1"  (timeout="200")
[19:51:38.957]      // while  =>  TIMEOUT
[19:51:38.957]      // end while "1"
[19:51:38.957]    </control>
[19:51:38.957]    <control if="canReadPins" while="" timeout="0" info="">
[19:51:38.957]      // if-block "canReadPins"
[19:51:38.957]        // =>  TRUE
[19:51:38.957]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:51:38.957]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:51:38.958]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:51:38.958]        // while-condition  =>  FALSE
[19:51:38.958]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:51:38.958]      </control>
[19:51:38.958]      // end if-block "canReadPins"
[19:51:38.958]    </control>
[19:51:38.958]    <control if="!canReadPins" while="" timeout="0" info="">
[19:51:38.958]      // if-block "!canReadPins"
[19:51:38.958]        // =>  FALSE
[19:51:38.958]      // skip if-block "!canReadPins"
[19:51:38.958]    </control>
[19:51:38.958]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:51:38.958]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:51:38.961]        // =>  TRUE
[19:51:38.961]      <block atomic="false" info="">
[19:51:38.961]        WriteAP(0x00, 0x190008);
[19:51:38.962]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:51:38.962]        WriteAP(0xF0, 0x01);
[19:51:38.965]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:51:38.965]      </block>
[19:51:38.965]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:51:38.965]    </control>
[19:51:38.965]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:51:38.965]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:51:38.965]        // =>  FALSE
[19:51:38.967]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:51:38.967]    </control>
[19:51:38.967]    <block atomic="false" info="">
[19:51:38.967]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:51:38.969]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:51:38.969]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:51:38.969]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:51:38.971]      __ap = 0; //lets make sure we reset the access point selection
[19:51:38.971]        // -> [__ap <= 0x00000000]
[19:51:38.971]    </block>
[19:51:38.971]  </sequence>
[19:51:38.971]  
[19:51:39.005]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:51:39.005]  
[19:51:39.005]  <debugvars>
[19:51:39.005]    // Pre-defined
[19:51:39.005]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:51:39.005]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:51:39.005]    __dp=0x00000000
[19:51:39.005]    __ap=0x00000000
[19:51:39.005]    __traceout=0x00000000      (Trace Disabled)
[19:51:39.005]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:51:39.005]    __FlashAddr=0x00000000
[19:51:39.005]    __FlashLen=0x00000000
[19:51:39.005]    __FlashArg=0x00000000
[19:51:39.005]    __FlashOp=0x00000000
[19:51:39.005]    __Result=0x00000000
[19:51:39.005]  </debugvars>
[19:51:39.005]  
[19:51:39.008]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:51:39.008]    <block atomic="false" info="">
[19:51:39.008]      __var deviceID = 0;
[19:51:39.008]        // -> [deviceID <= 0x00000000]
[19:51:39.008]      __var version = 0;
[19:51:39.008]        // -> [version <= 0x00000000]
[19:51:39.008]      __var partNum = 0;
[19:51:39.008]        // -> [partNum <= 0x00000000]
[19:51:39.008]      __var manuf = 0;
[19:51:39.008]        // -> [manuf <= 0x00000000]
[19:51:39.008]      __var isMSPM0G1X0X_G3X0X = 0;
[19:51:39.008]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:51:39.008]      __var isProduction = 0;
[19:51:39.008]        // -> [isProduction <= 0x00000000]
[19:51:39.008]      __var continueId = 0;
[19:51:39.008]        // -> [continueId <= 0x00000000]
[19:51:39.008]      deviceID =   Read32(0x41C40004);
[19:51:39.017]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:51:39.017]        // -> [deviceID <= 0x2BB8802F]
[19:51:39.017]      version = deviceID >> 28;
[19:51:39.017]        // -> [version <= 0x00000002]
[19:51:39.017]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:51:39.018]        // -> [partNum <= 0x0000BB88]
[19:51:39.018]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:51:39.018]        // -> [manuf <= 0x00000017]
[19:51:39.018]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:51:39.018]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:51:39.018]      isProduction = (version > 0);
[19:51:39.018]        // -> [isProduction <= 0x00000001]
[19:51:39.018]    </block>
[19:51:39.018]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:51:39.018]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:51:39.018]        // =>  FALSE
[19:51:39.018]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:51:39.018]    </control>
[19:51:39.018]    <control if="continueId == 4" while="" timeout="0" info="">
[19:51:39.018]      // if-block "continueId == 4"
[19:51:39.018]        // =>  FALSE
[19:51:39.018]      // skip if-block "continueId == 4"
[19:51:39.020]    </control>
[19:51:39.020]    <control if="!isProduction" while="" timeout="0" info="">
[19:51:39.020]      // if-block "!isProduction"
[19:51:39.020]        // =>  FALSE
[19:51:39.020]      // skip if-block "!isProduction"
[19:51:39.020]    </control>
[19:51:39.020]  </sequence>
[19:51:39.020]  
[19:52:26.840]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:52:26.840]  
[19:52:26.848]  <debugvars>
[19:52:26.848]    // Pre-defined
[19:52:26.848]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:52:26.848]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:52:26.848]    __dp=0x00000000
[19:52:26.848]    __ap=0x00000000
[19:52:26.848]    __traceout=0x00000000      (Trace Disabled)
[19:52:26.848]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:52:26.848]    __FlashAddr=0x00000000
[19:52:26.848]    __FlashLen=0x00000000
[19:52:26.848]    __FlashArg=0x00000000
[19:52:26.848]    __FlashOp=0x00000000
[19:52:26.848]    __Result=0x00000000
[19:52:26.848]  </debugvars>
[19:52:26.848]  
[19:52:26.848]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:52:26.848]    <block atomic="false" info="">
[19:52:26.848]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:52:26.848]        // -> [isSWJ <= 0x00000001]
[19:52:26.848]      __var hasDormant = __protocol & 0x00020000;
[19:52:26.848]        // -> [hasDormant <= 0x00000000]
[19:52:26.848]      __var protType   = __protocol & 0x0000FFFF;
[19:52:26.848]        // -> [protType <= 0x00000002]
[19:52:26.848]    </block>
[19:52:26.848]    <control if="protType == 1" while="" timeout="0" info="">
[19:52:26.848]      // if-block "protType == 1"
[19:52:26.848]        // =>  FALSE
[19:52:26.848]      // skip if-block "protType == 1"
[19:52:26.848]    </control>
[19:52:26.848]    <control if="protType == 2" while="" timeout="0" info="">
[19:52:26.848]      // if-block "protType == 2"
[19:52:26.848]        // =>  TRUE
[19:52:26.851]      <control if="isSWJ" while="" timeout="0" info="">
[19:52:26.851]        // if-block "isSWJ"
[19:52:26.851]          // =>  TRUE
[19:52:26.851]        <control if="hasDormant" while="" timeout="0" info="">
[19:52:26.851]          // if-block "hasDormant"
[19:52:26.851]            // =>  FALSE
[19:52:26.851]          // skip if-block "hasDormant"
[19:52:26.851]        </control>
[19:52:26.851]        <control if="!hasDormant" while="" timeout="0" info="">
[19:52:26.851]          // if-block "!hasDormant"
[19:52:26.851]            // =>  TRUE
[19:52:26.852]          <block atomic="false" info="">
[19:52:26.852]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:52:26.855]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:52:26.855]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:52:26.859]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:52:26.859]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:52:26.862]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:52:26.862]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:52:26.863]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:52:26.863]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:52:26.863]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:52:26.863]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:52:26.867]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:52:26.867]          </block>
[19:52:26.867]          // end if-block "!hasDormant"
[19:52:26.867]        </control>
[19:52:26.867]        // end if-block "isSWJ"
[19:52:26.867]      </control>
[19:52:26.867]      <control if="!isSWJ" while="" timeout="0" info="">
[19:52:26.867]        // if-block "!isSWJ"
[19:52:26.867]          // =>  FALSE
[19:52:26.867]        // skip if-block "!isSWJ"
[19:52:26.867]      </control>
[19:52:26.867]      <block atomic="false" info="">
[19:52:26.867]        ReadDP(0x0);
[19:52:26.867]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:52:26.867]      </block>
[19:52:26.867]      // end if-block "protType == 2"
[19:52:26.867]    </control>
[19:52:26.871]  </sequence>
[19:52:26.871]  
[19:52:26.875]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:52:26.875]  
[19:52:26.875]  <debugvars>
[19:52:26.875]    // Pre-defined
[19:52:26.875]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:52:26.875]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:52:26.875]    __dp=0x00000000
[19:52:26.875]    __ap=0x00000000
[19:52:26.875]    __traceout=0x00000000      (Trace Disabled)
[19:52:26.875]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:52:26.875]    __FlashAddr=0x00000000
[19:52:26.875]    __FlashLen=0x00000000
[19:52:26.875]    __FlashArg=0x00000000
[19:52:26.875]    __FlashOp=0x00000000
[19:52:26.875]    __Result=0x00000000
[19:52:26.875]  </debugvars>
[19:52:26.875]  
[19:52:26.879]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:52:26.879]    <block atomic="false" info="">
[19:52:26.879]      __var SW_DP_ABORT       = 0x0;
[19:52:26.879]        // -> [SW_DP_ABORT <= 0x00000000]
[19:52:26.880]      __var DP_CTRL_STAT      = 0x4;
[19:52:26.880]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:52:26.880]      __var DP_SELECT         = 0x8;
[19:52:26.880]        // -> [DP_SELECT <= 0x00000008]
[19:52:26.880]      __var powered_down      = 0;
[19:52:26.880]        // -> [powered_down <= 0x00000000]
[19:52:26.880]      WriteDP(DP_SELECT, 0x00000000);
[19:52:26.880]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:52:26.880]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:52:26.883]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:52:26.883]        // -> [powered_down <= 0x00000001]
[19:52:26.883]    </block>
[19:52:26.883]    <control if="powered_down" while="" timeout="0" info="">
[19:52:26.883]      // if-block "powered_down"
[19:52:26.883]        // =>  TRUE
[19:52:26.883]      <block atomic="false" info="">
[19:52:26.883]        Message(0, "Debug/System power-up request sent");
[19:52:26.883]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:52:26.887]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:52:26.887]      </block>
[19:52:26.887]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:52:26.887]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:52:26.887]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:52:26.887]        // while-condition  =>  FALSE
[19:52:26.887]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:52:26.887]      </control>
[19:52:26.887]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:52:26.887]        // if-block "(__protocol & 0xFFFF) == 1"
[19:52:26.887]          // =>  FALSE
[19:52:26.887]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:52:26.887]      </control>
[19:52:26.887]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:52:26.887]        // if-block "(__protocol & 0xFFFF) == 2"
[19:52:26.887]          // =>  TRUE
[19:52:26.887]        <block atomic="false" info="">
[19:52:26.887]          Message(0, "executing SWD power up");
[19:52:26.891]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:52:26.892]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:52:26.892]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:52:26.895]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:52:26.895]        </block>
[19:52:26.895]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:52:26.895]      </control>
[19:52:26.895]      // end if-block "powered_down"
[19:52:26.895]    </control>
[19:52:26.895]    <block atomic="false" info="">
[19:52:26.895]      __var DEBUG_PORT_VAL    = 0;
[19:52:26.895]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:52:26.895]      __var ACCESS_POINT_VAL  = 0;
[19:52:26.895]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:52:26.895]      __ap = 1; 
[19:52:26.895]        // -> [__ap <= 0x00000001]
[19:52:26.895]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:52:26.899]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:52:26.899]      __ap = 4;
[19:52:26.899]        // -> [__ap <= 0x00000004]
[19:52:26.899]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:52:26.904]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:52:26.904]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:52:26.904]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:52:26.907]    </block>
[19:52:26.907]    <block atomic="false" info="">
[19:52:26.907]      __var nReset = 0x80;
[19:52:26.907]        // -> [nReset <= 0x00000080]
[19:52:26.907]      __var canReadPins = 0;
[19:52:26.907]        // -> [canReadPins <= 0x00000000]
[19:52:26.907]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:52:26.909]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:52:26.909]        // -> [canReadPins <= 0x00000001]
[19:52:26.909]    </block>
[19:52:26.909]    <control if="" while="1" timeout="200" info="">
[19:52:26.909]      // while "1"  (timeout="200")
[19:52:26.909]      // while-condition  =>  TRUE
[19:52:26.909]      // while "1"  (timeout="200")
[19:52:26.909]      // while-condition  =>  TRUE
[19:52:26.909]      // while "1"  (timeout="200")
[19:52:26.909]      // while-condition  =>  TRUE
[19:52:26.909]      // while "1"  (timeout="200")
[19:52:26.909]      // while-condition  =>  TRUE
[19:52:26.911]      // while "1"  (timeout="200")
[19:52:26.911]      // while  =>  TIMEOUT
[19:52:26.911]      // end while "1"
[19:52:26.911]    </control>
[19:52:26.911]    <control if="canReadPins" while="" timeout="0" info="">
[19:52:26.911]      // if-block "canReadPins"
[19:52:26.911]        // =>  TRUE
[19:52:26.912]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:52:26.912]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:52:26.912]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:52:26.912]        // while-condition  =>  FALSE
[19:52:26.912]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:52:26.912]      </control>
[19:52:26.912]      // end if-block "canReadPins"
[19:52:26.912]    </control>
[19:52:26.912]    <control if="!canReadPins" while="" timeout="0" info="">
[19:52:26.912]      // if-block "!canReadPins"
[19:52:26.912]        // =>  FALSE
[19:52:26.912]      // skip if-block "!canReadPins"
[19:52:26.912]    </control>
[19:52:26.912]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:52:26.912]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:52:26.912]        // =>  TRUE
[19:52:26.912]      <block atomic="false" info="">
[19:52:26.916]        WriteAP(0x00, 0x190008);
[19:52:26.916]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:52:26.916]        WriteAP(0xF0, 0x01);
[19:52:26.920]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:52:26.920]      </block>
[19:52:26.920]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:52:26.922]    </control>
[19:52:26.922]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:52:26.922]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:52:26.922]        // =>  FALSE
[19:52:26.922]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:52:26.922]    </control>
[19:52:26.922]    <block atomic="false" info="">
[19:52:26.922]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:52:26.924]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:52:26.924]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:52:26.924]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:52:26.929]      __ap = 0; //lets make sure we reset the access point selection
[19:52:26.929]        // -> [__ap <= 0x00000000]
[19:52:26.929]    </block>
[19:52:26.929]  </sequence>
[19:52:26.929]  
[19:52:26.960]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:52:26.960]  
[19:52:26.962]  <debugvars>
[19:52:26.962]    // Pre-defined
[19:52:26.962]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:52:26.962]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:52:26.962]    __dp=0x00000000
[19:52:26.962]    __ap=0x00000000
[19:52:26.962]    __traceout=0x00000000      (Trace Disabled)
[19:52:26.962]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:52:26.962]    __FlashAddr=0x00000000
[19:52:26.962]    __FlashLen=0x00000000
[19:52:26.962]    __FlashArg=0x00000000
[19:52:26.962]    __FlashOp=0x00000000
[19:52:26.962]    __Result=0x00000000
[19:52:26.962]  </debugvars>
[19:52:26.962]  
[19:52:26.962]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:52:26.962]    <block atomic="false" info="">
[19:52:26.962]      __var deviceID = 0;
[19:52:26.962]        // -> [deviceID <= 0x00000000]
[19:52:26.962]      __var version = 0;
[19:52:26.962]        // -> [version <= 0x00000000]
[19:52:26.962]      __var partNum = 0;
[19:52:26.965]        // -> [partNum <= 0x00000000]
[19:52:26.965]      __var manuf = 0;
[19:52:26.965]        // -> [manuf <= 0x00000000]
[19:52:26.965]      __var isMSPM0G1X0X_G3X0X = 0;
[19:52:26.965]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:52:26.965]      __var isProduction = 0;
[19:52:26.965]        // -> [isProduction <= 0x00000000]
[19:52:26.965]      __var continueId = 0;
[19:52:26.965]        // -> [continueId <= 0x00000000]
[19:52:26.965]      deviceID =   Read32(0x41C40004);
[19:52:26.973]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:52:26.973]        // -> [deviceID <= 0x2BB8802F]
[19:52:26.973]      version = deviceID >> 28;
[19:52:26.973]        // -> [version <= 0x00000002]
[19:52:26.973]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:52:26.973]        // -> [partNum <= 0x0000BB88]
[19:52:26.973]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:52:26.973]        // -> [manuf <= 0x00000017]
[19:52:26.973]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:52:26.973]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:52:26.973]      isProduction = (version > 0);
[19:52:26.974]        // -> [isProduction <= 0x00000001]
[19:52:26.974]    </block>
[19:52:26.974]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:52:26.974]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:52:26.974]        // =>  FALSE
[19:52:26.974]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:52:26.974]    </control>
[19:52:26.974]    <control if="continueId == 4" while="" timeout="0" info="">
[19:52:26.974]      // if-block "continueId == 4"
[19:52:26.974]        // =>  FALSE
[19:52:26.974]      // skip if-block "continueId == 4"
[19:52:26.974]    </control>
[19:52:26.974]    <control if="!isProduction" while="" timeout="0" info="">
[19:52:26.974]      // if-block "!isProduction"
[19:52:26.974]        // =>  FALSE
[19:52:26.974]      // skip if-block "!isProduction"
[19:52:26.974]    </control>
[19:52:26.974]  </sequence>
[19:52:26.974]  
[19:53:21.430]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:53:21.430]  
[19:53:21.440]  <debugvars>
[19:53:21.440]    // Pre-defined
[19:53:21.440]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:53:21.440]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:53:21.440]    __dp=0x00000000
[19:53:21.440]    __ap=0x00000000
[19:53:21.440]    __traceout=0x00000000      (Trace Disabled)
[19:53:21.440]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:53:21.440]    __FlashAddr=0x00000000
[19:53:21.440]    __FlashLen=0x00000000
[19:53:21.440]    __FlashArg=0x00000000
[19:53:21.440]    __FlashOp=0x00000000
[19:53:21.440]    __Result=0x00000000
[19:53:21.440]  </debugvars>
[19:53:21.440]  
[19:53:21.440]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:53:21.440]    <block atomic="false" info="">
[19:53:21.440]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:53:21.440]        // -> [isSWJ <= 0x00000001]
[19:53:21.440]      __var hasDormant = __protocol & 0x00020000;
[19:53:21.442]        // -> [hasDormant <= 0x00000000]
[19:53:21.442]      __var protType   = __protocol & 0x0000FFFF;
[19:53:21.442]        // -> [protType <= 0x00000002]
[19:53:21.442]    </block>
[19:53:21.442]    <control if="protType == 1" while="" timeout="0" info="">
[19:53:21.442]      // if-block "protType == 1"
[19:53:21.442]        // =>  FALSE
[19:53:21.442]      // skip if-block "protType == 1"
[19:53:21.442]    </control>
[19:53:21.442]    <control if="protType == 2" while="" timeout="0" info="">
[19:53:21.442]      // if-block "protType == 2"
[19:53:21.442]        // =>  TRUE
[19:53:21.442]      <control if="isSWJ" while="" timeout="0" info="">
[19:53:21.442]        // if-block "isSWJ"
[19:53:21.442]          // =>  TRUE
[19:53:21.442]        <control if="hasDormant" while="" timeout="0" info="">
[19:53:21.443]          // if-block "hasDormant"
[19:53:21.443]            // =>  FALSE
[19:53:21.443]          // skip if-block "hasDormant"
[19:53:21.443]        </control>
[19:53:21.443]        <control if="!hasDormant" while="" timeout="0" info="">
[19:53:21.443]          // if-block "!hasDormant"
[19:53:21.443]            // =>  TRUE
[19:53:21.443]          <block atomic="false" info="">
[19:53:21.443]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:53:21.446]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:53:21.446]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:53:21.451]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:53:21.451]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:53:21.457]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:53:21.457]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:53:21.457]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:53:21.457]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:53:21.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:53:21.461]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:53:21.463]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:53:21.463]          </block>
[19:53:21.463]          // end if-block "!hasDormant"
[19:53:21.463]        </control>
[19:53:21.463]        // end if-block "isSWJ"
[19:53:21.463]      </control>
[19:53:21.465]      <control if="!isSWJ" while="" timeout="0" info="">
[19:53:21.465]        // if-block "!isSWJ"
[19:53:21.465]          // =>  FALSE
[19:53:21.465]        // skip if-block "!isSWJ"
[19:53:21.465]      </control>
[19:53:21.465]      <block atomic="false" info="">
[19:53:21.466]        ReadDP(0x0);
[19:53:21.466]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:53:21.466]      </block>
[19:53:21.466]      // end if-block "protType == 2"
[19:53:21.466]    </control>
[19:53:21.466]  </sequence>
[19:53:21.466]  
[19:53:21.469]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:53:21.469]  
[19:53:21.469]  <debugvars>
[19:53:21.469]    // Pre-defined
[19:53:21.469]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:53:21.469]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:53:21.469]    __dp=0x00000000
[19:53:21.469]    __ap=0x00000000
[19:53:21.469]    __traceout=0x00000000      (Trace Disabled)
[19:53:21.469]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:53:21.469]    __FlashAddr=0x00000000
[19:53:21.473]    __FlashLen=0x00000000
[19:53:21.473]    __FlashArg=0x00000000
[19:53:21.473]    __FlashOp=0x00000000
[19:53:21.473]    __Result=0x00000000
[19:53:21.473]  </debugvars>
[19:53:21.473]  
[19:53:21.473]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:53:21.473]    <block atomic="false" info="">
[19:53:21.473]      __var SW_DP_ABORT       = 0x0;
[19:53:21.473]        // -> [SW_DP_ABORT <= 0x00000000]
[19:53:21.473]      __var DP_CTRL_STAT      = 0x4;
[19:53:21.473]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:53:21.473]      __var DP_SELECT         = 0x8;
[19:53:21.473]        // -> [DP_SELECT <= 0x00000008]
[19:53:21.473]      __var powered_down      = 0;
[19:53:21.473]        // -> [powered_down <= 0x00000000]
[19:53:21.473]      WriteDP(DP_SELECT, 0x00000000);
[19:53:21.473]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:53:21.473]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:53:21.477]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:53:21.477]        // -> [powered_down <= 0x00000001]
[19:53:21.477]    </block>
[19:53:21.477]    <control if="powered_down" while="" timeout="0" info="">
[19:53:21.477]      // if-block "powered_down"
[19:53:21.477]        // =>  TRUE
[19:53:21.477]      <block atomic="false" info="">
[19:53:21.477]        Message(0, "Debug/System power-up request sent");
[19:53:21.481]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:53:21.483]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:53:21.483]      </block>
[19:53:21.483]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:53:21.483]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:53:21.485]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:53:21.485]        // while-condition  =>  FALSE
[19:53:21.485]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:53:21.485]      </control>
[19:53:21.485]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:53:21.485]        // if-block "(__protocol & 0xFFFF) == 1"
[19:53:21.485]          // =>  FALSE
[19:53:21.485]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:53:21.485]      </control>
[19:53:21.490]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:53:21.490]        // if-block "(__protocol & 0xFFFF) == 2"
[19:53:21.490]          // =>  TRUE
[19:53:21.490]        <block atomic="false" info="">
[19:53:21.490]          Message(0, "executing SWD power up");
[19:53:21.492]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:53:21.493]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:53:21.493]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:53:21.494]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:53:21.494]        </block>
[19:53:21.494]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:53:21.494]      </control>
[19:53:21.494]      // end if-block "powered_down"
[19:53:21.494]    </control>
[19:53:21.494]    <block atomic="false" info="">
[19:53:21.494]      __var DEBUG_PORT_VAL    = 0;
[19:53:21.494]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:53:21.494]      __var ACCESS_POINT_VAL  = 0;
[19:53:21.494]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:53:21.494]      __ap = 1; 
[19:53:21.494]        // -> [__ap <= 0x00000001]
[19:53:21.494]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:53:21.501]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:53:21.501]      __ap = 4;
[19:53:21.501]        // -> [__ap <= 0x00000004]
[19:53:21.501]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:53:21.510]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:53:21.510]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:53:21.510]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:53:21.510]    </block>
[19:53:21.510]    <block atomic="false" info="">
[19:53:21.510]      __var nReset = 0x80;
[19:53:21.510]        // -> [nReset <= 0x00000080]
[19:53:21.510]      __var canReadPins = 0;
[19:53:21.510]        // -> [canReadPins <= 0x00000000]
[19:53:21.510]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:53:21.514]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:53:21.514]        // -> [canReadPins <= 0x00000001]
[19:53:21.514]    </block>
[19:53:21.514]    <control if="" while="1" timeout="200" info="">
[19:53:21.514]      // while "1"  (timeout="200")
[19:53:21.514]      // while-condition  =>  TRUE
[19:53:21.514]      // while "1"  (timeout="200")
[19:53:21.514]      // while-condition  =>  TRUE
[19:53:21.514]      // while "1"  (timeout="200")
[19:53:21.514]      // while-condition  =>  TRUE
[19:53:21.514]      // while "1"  (timeout="200")
[19:53:21.514]      // while-condition  =>  TRUE
[19:53:21.514]      // while "1"  (timeout="200")
[19:53:21.514]      // while-condition  =>  TRUE
[19:53:21.514]      // while "1"  (timeout="200")
[19:53:21.514]      // while-condition  =>  TRUE
[19:53:21.514]      // while "1"  (timeout="200")
[19:53:21.514]      // while-condition  =>  TRUE
[19:53:21.514]      // while "1"  (timeout="200")
[19:53:21.514]      // while-condition  =>  TRUE
[19:53:21.514]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.518]      // while-condition  =>  TRUE
[19:53:21.518]      // while "1"  (timeout="200")
[19:53:21.522]      // while-condition  =>  TRUE
[19:53:21.522]      // while "1"  (timeout="200")
[19:53:21.522]      // while  =>  TIMEOUT
[19:53:21.522]      // end while "1"
[19:53:21.522]    </control>
[19:53:21.522]    <control if="canReadPins" while="" timeout="0" info="">
[19:53:21.522]      // if-block "canReadPins"
[19:53:21.522]        // =>  TRUE
[19:53:21.522]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:53:21.522]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:53:21.524]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:53:21.524]        // while-condition  =>  FALSE
[19:53:21.524]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:53:21.524]      </control>
[19:53:21.524]      // end if-block "canReadPins"
[19:53:21.524]    </control>
[19:53:21.524]    <control if="!canReadPins" while="" timeout="0" info="">
[19:53:21.524]      // if-block "!canReadPins"
[19:53:21.524]        // =>  FALSE
[19:53:21.524]      // skip if-block "!canReadPins"
[19:53:21.524]    </control>
[19:53:21.524]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:53:21.524]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:53:21.524]        // =>  TRUE
[19:53:21.526]      <block atomic="false" info="">
[19:53:21.526]        WriteAP(0x00, 0x190008);
[19:53:21.543]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:53:21.543]        WriteAP(0xF0, 0x01);
[19:53:21.547]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:53:21.547]      </block>
[19:53:21.547]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:53:21.547]    </control>
[19:53:21.547]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:53:21.547]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:53:21.547]        // =>  FALSE
[19:53:21.547]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:53:21.547]    </control>
[19:53:21.547]    <block atomic="false" info="">
[19:53:21.547]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:53:21.559]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:53:21.563]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:53:21.563]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:53:21.565]      __ap = 0; //lets make sure we reset the access point selection
[19:53:21.565]        // -> [__ap <= 0x00000000]
[19:53:21.565]    </block>
[19:53:21.565]  </sequence>
[19:53:21.565]  
[19:53:21.596]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:53:21.596]  
[19:53:21.596]  <debugvars>
[19:53:21.596]    // Pre-defined
[19:53:21.596]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:53:21.596]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:53:21.596]    __dp=0x00000000
[19:53:21.596]    __ap=0x00000000
[19:53:21.600]    __traceout=0x00000000      (Trace Disabled)
[19:53:21.600]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:53:21.600]    __FlashAddr=0x00000000
[19:53:21.600]    __FlashLen=0x00000000
[19:53:21.600]    __FlashArg=0x00000000
[19:53:21.600]    __FlashOp=0x00000000
[19:53:21.600]    __Result=0x00000000
[19:53:21.600]  </debugvars>
[19:53:21.600]  
[19:53:21.600]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:53:21.600]    <block atomic="false" info="">
[19:53:21.600]      __var deviceID = 0;
[19:53:21.600]        // -> [deviceID <= 0x00000000]
[19:53:21.600]      __var version = 0;
[19:53:21.600]        // -> [version <= 0x00000000]
[19:53:21.600]      __var partNum = 0;
[19:53:21.600]        // -> [partNum <= 0x00000000]
[19:53:21.600]      __var manuf = 0;
[19:53:21.600]        // -> [manuf <= 0x00000000]
[19:53:21.600]      __var isMSPM0G1X0X_G3X0X = 0;
[19:53:21.600]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:53:21.600]      __var isProduction = 0;
[19:53:21.602]        // -> [isProduction <= 0x00000000]
[19:53:21.602]      __var continueId = 0;
[19:53:21.602]        // -> [continueId <= 0x00000000]
[19:53:21.602]      deviceID =   Read32(0x41C40004);
[19:53:21.603]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:53:21.607]        // -> [deviceID <= 0x2BB8802F]
[19:53:21.607]      version = deviceID >> 28;
[19:53:21.607]        // -> [version <= 0x00000002]
[19:53:21.607]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:53:21.607]        // -> [partNum <= 0x0000BB88]
[19:53:21.607]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:53:21.607]        // -> [manuf <= 0x00000017]
[19:53:21.607]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:53:21.607]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:53:21.607]      isProduction = (version > 0);
[19:53:21.607]        // -> [isProduction <= 0x00000001]
[19:53:21.607]    </block>
[19:53:21.607]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:53:21.607]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:53:21.607]        // =>  FALSE
[19:53:21.607]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:53:21.607]    </control>
[19:53:21.607]    <control if="continueId == 4" while="" timeout="0" info="">
[19:53:21.607]      // if-block "continueId == 4"
[19:53:21.607]        // =>  FALSE
[19:53:21.607]      // skip if-block "continueId == 4"
[19:53:21.607]    </control>
[19:53:21.607]    <control if="!isProduction" while="" timeout="0" info="">
[19:53:21.607]      // if-block "!isProduction"
[19:53:21.607]        // =>  FALSE
[19:53:21.607]      // skip if-block "!isProduction"
[19:53:21.607]    </control>
[19:53:21.607]  </sequence>
[19:53:21.607]  
[19:54:04.540]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:54:04.540]  
[19:54:04.549]  <debugvars>
[19:54:04.549]    // Pre-defined
[19:54:04.549]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:54:04.549]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:54:04.549]    __dp=0x00000000
[19:54:04.549]    __ap=0x00000000
[19:54:04.549]    __traceout=0x00000000      (Trace Disabled)
[19:54:04.549]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:54:04.549]    __FlashAddr=0x00000000
[19:54:04.549]    __FlashLen=0x00000000
[19:54:04.549]    __FlashArg=0x00000000
[19:54:04.549]    __FlashOp=0x00000000
[19:54:04.549]    __Result=0x00000000
[19:54:04.549]  </debugvars>
[19:54:04.551]  
[19:54:04.551]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:54:04.551]    <block atomic="false" info="">
[19:54:04.551]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:54:04.551]        // -> [isSWJ <= 0x00000001]
[19:54:04.551]      __var hasDormant = __protocol & 0x00020000;
[19:54:04.551]        // -> [hasDormant <= 0x00000000]
[19:54:04.551]      __var protType   = __protocol & 0x0000FFFF;
[19:54:04.551]        // -> [protType <= 0x00000002]
[19:54:04.551]    </block>
[19:54:04.551]    <control if="protType == 1" while="" timeout="0" info="">
[19:54:04.551]      // if-block "protType == 1"
[19:54:04.551]        // =>  FALSE
[19:54:04.551]      // skip if-block "protType == 1"
[19:54:04.551]    </control>
[19:54:04.551]    <control if="protType == 2" while="" timeout="0" info="">
[19:54:04.551]      // if-block "protType == 2"
[19:54:04.551]        // =>  TRUE
[19:54:04.551]      <control if="isSWJ" while="" timeout="0" info="">
[19:54:04.551]        // if-block "isSWJ"
[19:54:04.551]          // =>  TRUE
[19:54:04.551]        <control if="hasDormant" while="" timeout="0" info="">
[19:54:04.551]          // if-block "hasDormant"
[19:54:04.551]            // =>  FALSE
[19:54:04.551]          // skip if-block "hasDormant"
[19:54:04.554]        </control>
[19:54:04.554]        <control if="!hasDormant" while="" timeout="0" info="">
[19:54:04.554]          // if-block "!hasDormant"
[19:54:04.554]            // =>  TRUE
[19:54:04.554]          <block atomic="false" info="">
[19:54:04.554]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:54:04.561]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:54:04.561]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:54:04.563]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:54:04.563]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:54:04.564]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:54:04.564]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:54:04.564]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:54:04.566]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:54:04.568]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:54:04.568]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:54:04.569]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:54:04.569]          </block>
[19:54:04.569]          // end if-block "!hasDormant"
[19:54:04.569]        </control>
[19:54:04.569]        // end if-block "isSWJ"
[19:54:04.569]      </control>
[19:54:04.569]      <control if="!isSWJ" while="" timeout="0" info="">
[19:54:04.569]        // if-block "!isSWJ"
[19:54:04.569]          // =>  FALSE
[19:54:04.569]        // skip if-block "!isSWJ"
[19:54:04.569]      </control>
[19:54:04.569]      <block atomic="false" info="">
[19:54:04.569]        ReadDP(0x0);
[19:54:04.572]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:54:04.572]      </block>
[19:54:04.572]      // end if-block "protType == 2"
[19:54:04.572]    </control>
[19:54:04.572]  </sequence>
[19:54:04.572]  
[19:54:04.590]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:54:04.590]  
[19:54:04.590]  <debugvars>
[19:54:04.590]    // Pre-defined
[19:54:04.590]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:54:04.590]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:54:04.590]    __dp=0x00000000
[19:54:04.590]    __ap=0x00000000
[19:54:04.590]    __traceout=0x00000000      (Trace Disabled)
[19:54:04.590]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:54:04.590]    __FlashAddr=0x00000000
[19:54:04.591]    __FlashLen=0x00000000
[19:54:04.591]    __FlashArg=0x00000000
[19:54:04.591]    __FlashOp=0x00000000
[19:54:04.591]    __Result=0x00000000
[19:54:04.591]  </debugvars>
[19:54:04.591]  
[19:54:04.591]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:54:04.591]    <block atomic="false" info="">
[19:54:04.591]      __var SW_DP_ABORT       = 0x0;
[19:54:04.591]        // -> [SW_DP_ABORT <= 0x00000000]
[19:54:04.591]      __var DP_CTRL_STAT      = 0x4;
[19:54:04.591]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:54:04.593]      __var DP_SELECT         = 0x8;
[19:54:04.593]        // -> [DP_SELECT <= 0x00000008]
[19:54:04.593]      __var powered_down      = 0;
[19:54:04.593]        // -> [powered_down <= 0x00000000]
[19:54:04.593]      WriteDP(DP_SELECT, 0x00000000);
[19:54:04.594]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:54:04.594]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:54:04.597]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:54:04.597]        // -> [powered_down <= 0x00000001]
[19:54:04.597]    </block>
[19:54:04.597]    <control if="powered_down" while="" timeout="0" info="">
[19:54:04.597]      // if-block "powered_down"
[19:54:04.597]        // =>  TRUE
[19:54:04.597]      <block atomic="false" info="">
[19:54:04.597]        Message(0, "Debug/System power-up request sent");
[19:54:04.599]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:54:04.599]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:54:04.599]      </block>
[19:54:04.599]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:54:04.601]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:54:04.601]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:54:04.601]        // while-condition  =>  FALSE
[19:54:04.601]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:54:04.601]      </control>
[19:54:04.601]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:54:04.601]        // if-block "(__protocol & 0xFFFF) == 1"
[19:54:04.601]          // =>  FALSE
[19:54:04.603]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:54:04.603]      </control>
[19:54:04.603]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:54:04.603]        // if-block "(__protocol & 0xFFFF) == 2"
[19:54:04.603]          // =>  TRUE
[19:54:04.603]        <block atomic="false" info="">
[19:54:04.603]          Message(0, "executing SWD power up");
[19:54:04.604]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:54:04.610]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:54:04.610]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:54:04.614]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:54:04.614]        </block>
[19:54:04.614]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:54:04.615]      </control>
[19:54:04.615]      // end if-block "powered_down"
[19:54:04.615]    </control>
[19:54:04.615]    <block atomic="false" info="">
[19:54:04.615]      __var DEBUG_PORT_VAL    = 0;
[19:54:04.615]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:54:04.615]      __var ACCESS_POINT_VAL  = 0;
[19:54:04.615]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:54:04.615]      __ap = 1; 
[19:54:04.615]        // -> [__ap <= 0x00000001]
[19:54:04.615]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:54:04.620]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:54:04.620]      __ap = 4;
[19:54:04.620]        // -> [__ap <= 0x00000004]
[19:54:04.620]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:54:04.626]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:54:04.627]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:54:04.627]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:54:04.627]    </block>
[19:54:04.627]    <block atomic="false" info="">
[19:54:04.627]      __var nReset = 0x80;
[19:54:04.627]        // -> [nReset <= 0x00000080]
[19:54:04.627]      __var canReadPins = 0;
[19:54:04.627]        // -> [canReadPins <= 0x00000000]
[19:54:04.627]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:54:04.631]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:54:04.631]        // -> [canReadPins <= 0x00000001]
[19:54:04.631]    </block>
[19:54:04.631]    <control if="" while="1" timeout="200" info="">
[19:54:04.631]      // while "1"  (timeout="200")
[19:54:04.631]      // while-condition  =>  TRUE
[19:54:04.631]      // while "1"  (timeout="200")
[19:54:04.631]      // while-condition  =>  TRUE
[19:54:04.631]      // while "1"  (timeout="200")
[19:54:04.631]      // while-condition  =>  TRUE
[19:54:04.631]      // while "1"  (timeout="200")
[19:54:04.631]      // while-condition  =>  TRUE
[19:54:04.631]      // while "1"  (timeout="200")
[19:54:04.631]      // while-condition  =>  TRUE
[19:54:04.634]      // while "1"  (timeout="200")
[19:54:04.634]      // while-condition  =>  TRUE
[19:54:04.634]      // while "1"  (timeout="200")
[19:54:04.634]      // while-condition  =>  TRUE
[19:54:04.634]      // while "1"  (timeout="200")
[19:54:04.634]      // while-condition  =>  TRUE
[19:54:04.634]      // while "1"  (timeout="200")
[19:54:04.634]      // while-condition  =>  TRUE
[19:54:04.634]      // while "1"  (timeout="200")
[19:54:04.634]      // while-condition  =>  TRUE
[19:54:04.634]      // while "1"  (timeout="200")
[19:54:04.634]      // while-condition  =>  TRUE
[19:54:04.635]      // while "1"  (timeout="200")
[19:54:04.635]      // while-condition  =>  TRUE
[19:54:04.635]      // while "1"  (timeout="200")
[19:54:04.635]      // while-condition  =>  TRUE
[19:54:04.635]      // while "1"  (timeout="200")
[19:54:04.635]      // while-condition  =>  TRUE
[19:54:04.635]      // while "1"  (timeout="200")
[19:54:04.635]      // while-condition  =>  TRUE
[19:54:04.635]      // while "1"  (timeout="200")
[19:54:04.635]      // while-condition  =>  TRUE
[19:54:04.635]      // while "1"  (timeout="200")
[19:54:04.635]      // while-condition  =>  TRUE
[19:54:04.635]      // while "1"  (timeout="200")
[19:54:04.635]      // while-condition  =>  TRUE
[19:54:04.635]      // while "1"  (timeout="200")
[19:54:04.635]      // while-condition  =>  TRUE
[19:54:04.635]      // while "1"  (timeout="200")
[19:54:04.635]      // while-condition  =>  TRUE
[19:54:04.635]      // while "1"  (timeout="200")
[19:54:04.635]      // while-condition  =>  TRUE
[19:54:04.635]      // while "1"  (timeout="200")
[19:54:04.635]      // while-condition  =>  TRUE
[19:54:04.635]      // while "1"  (timeout="200")
[19:54:04.635]      // while-condition  =>  TRUE
[19:54:04.637]      // while "1"  (timeout="200")
[19:54:04.637]      // while-condition  =>  TRUE
[19:54:04.637]      // while "1"  (timeout="200")
[19:54:04.637]      // while-condition  =>  TRUE
[19:54:04.637]      // while "1"  (timeout="200")
[19:54:04.637]      // while-condition  =>  TRUE
[19:54:04.637]      // while "1"  (timeout="200")
[19:54:04.637]      // while-condition  =>  TRUE
[19:54:04.637]      // while "1"  (timeout="200")
[19:54:04.637]      // while-condition  =>  TRUE
[19:54:04.637]      // while "1"  (timeout="200")
[19:54:04.637]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.639]      // while-condition  =>  TRUE
[19:54:04.639]      // while "1"  (timeout="200")
[19:54:04.643]      // while-condition  =>  TRUE
[19:54:04.643]      // while "1"  (timeout="200")
[19:54:04.643]      // while-condition  =>  TRUE
[19:54:04.643]      // while "1"  (timeout="200")
[19:54:04.643]      // while-condition  =>  TRUE
[19:54:04.643]      // while "1"  (timeout="200")
[19:54:04.643]      // while-condition  =>  TRUE
[19:54:04.643]      // while "1"  (timeout="200")
[19:54:04.643]      // while-condition  =>  TRUE
[19:54:04.643]      // while "1"  (timeout="200")
[19:54:04.643]      // while-condition  =>  TRUE
[19:54:04.643]      // while "1"  (timeout="200")
[19:54:04.644]      // while-condition  =>  TRUE
[19:54:04.644]      // while "1"  (timeout="200")
[19:54:04.644]      // while  =>  TIMEOUT
[19:54:04.644]      // end while "1"
[19:54:04.644]    </control>
[19:54:04.644]    <control if="canReadPins" while="" timeout="0" info="">
[19:54:04.644]      // if-block "canReadPins"
[19:54:04.644]        // =>  TRUE
[19:54:04.644]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:54:04.644]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:54:04.651]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:54:04.651]        // while-condition  =>  FALSE
[19:54:04.651]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:54:04.651]      </control>
[19:54:04.651]      // end if-block "canReadPins"
[19:54:04.651]    </control>
[19:54:04.651]    <control if="!canReadPins" while="" timeout="0" info="">
[19:54:04.651]      // if-block "!canReadPins"
[19:54:04.651]        // =>  FALSE
[19:54:04.651]      // skip if-block "!canReadPins"
[19:54:04.651]    </control>
[19:54:04.654]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:54:04.654]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:54:04.654]        // =>  TRUE
[19:54:04.654]      <block atomic="false" info="">
[19:54:04.654]        WriteAP(0x00, 0x190008);
[19:54:04.654]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:54:04.654]        WriteAP(0xF0, 0x01);
[19:54:04.664]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:54:04.664]      </block>
[19:54:04.664]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:54:04.664]    </control>
[19:54:04.664]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:54:04.664]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:54:04.664]        // =>  FALSE
[19:54:04.664]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:54:04.664]    </control>
[19:54:04.664]    <block atomic="false" info="">
[19:54:04.664]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:54:04.666]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:54:04.666]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:54:04.666]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:54:04.670]      __ap = 0; //lets make sure we reset the access point selection
[19:54:04.670]        // -> [__ap <= 0x00000000]
[19:54:04.670]    </block>
[19:54:04.670]  </sequence>
[19:54:04.670]  
[19:54:04.699]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:54:04.699]  
[19:54:04.699]  <debugvars>
[19:54:04.699]    // Pre-defined
[19:54:04.699]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:54:04.699]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:54:04.699]    __dp=0x00000000
[19:54:04.699]    __ap=0x00000000
[19:54:04.699]    __traceout=0x00000000      (Trace Disabled)
[19:54:04.699]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:54:04.699]    __FlashAddr=0x00000000
[19:54:04.699]    __FlashLen=0x00000000
[19:54:04.699]    __FlashArg=0x00000000
[19:54:04.699]    __FlashOp=0x00000000
[19:54:04.699]    __Result=0x00000000
[19:54:04.699]  </debugvars>
[19:54:04.699]  
[19:54:04.699]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:54:04.699]    <block atomic="false" info="">
[19:54:04.699]      __var deviceID = 0;
[19:54:04.703]        // -> [deviceID <= 0x00000000]
[19:54:04.703]      __var version = 0;
[19:54:04.703]        // -> [version <= 0x00000000]
[19:54:04.703]      __var partNum = 0;
[19:54:04.703]        // -> [partNum <= 0x00000000]
[19:54:04.703]      __var manuf = 0;
[19:54:04.703]        // -> [manuf <= 0x00000000]
[19:54:04.703]      __var isMSPM0G1X0X_G3X0X = 0;
[19:54:04.703]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:54:04.704]      __var isProduction = 0;
[19:54:04.704]        // -> [isProduction <= 0x00000000]
[19:54:04.704]      __var continueId = 0;
[19:54:04.704]        // -> [continueId <= 0x00000000]
[19:54:04.704]      deviceID =   Read32(0x41C40004);
[19:54:04.708]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:54:04.708]        // -> [deviceID <= 0x2BB8802F]
[19:54:04.708]      version = deviceID >> 28;
[19:54:04.708]        // -> [version <= 0x00000002]
[19:54:04.711]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:54:04.711]        // -> [partNum <= 0x0000BB88]
[19:54:04.711]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:54:04.711]        // -> [manuf <= 0x00000017]
[19:54:04.711]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:54:04.711]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:54:04.711]      isProduction = (version > 0);
[19:54:04.711]        // -> [isProduction <= 0x00000001]
[19:54:04.711]    </block>
[19:54:04.711]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:54:04.711]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:54:04.711]        // =>  FALSE
[19:54:04.711]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:54:04.711]    </control>
[19:54:04.711]    <control if="continueId == 4" while="" timeout="0" info="">
[19:54:04.711]      // if-block "continueId == 4"
[19:54:04.711]        // =>  FALSE
[19:54:04.713]      // skip if-block "continueId == 4"
[19:54:04.713]    </control>
[19:54:04.713]    <control if="!isProduction" while="" timeout="0" info="">
[19:54:04.713]      // if-block "!isProduction"
[19:54:04.713]        // =>  FALSE
[19:54:04.713]      // skip if-block "!isProduction"
[19:54:04.713]    </control>
[19:54:04.713]  </sequence>
[19:54:04.713]  
[19:55:10.594]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:55:10.594]  
[19:55:10.602]  <debugvars>
[19:55:10.602]    // Pre-defined
[19:55:10.602]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:55:10.602]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:55:10.602]    __dp=0x00000000
[19:55:10.602]    __ap=0x00000000
[19:55:10.602]    __traceout=0x00000000      (Trace Disabled)
[19:55:10.602]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:55:10.602]    __FlashAddr=0x00000000
[19:55:10.602]    __FlashLen=0x00000000
[19:55:10.602]    __FlashArg=0x00000000
[19:55:10.602]    __FlashOp=0x00000000
[19:55:10.602]    __Result=0x00000000
[19:55:10.602]  </debugvars>
[19:55:10.602]  
[19:55:10.602]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:55:10.602]    <block atomic="false" info="">
[19:55:10.602]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:55:10.602]        // -> [isSWJ <= 0x00000001]
[19:55:10.602]      __var hasDormant = __protocol & 0x00020000;
[19:55:10.602]        // -> [hasDormant <= 0x00000000]
[19:55:10.602]      __var protType   = __protocol & 0x0000FFFF;
[19:55:10.602]        // -> [protType <= 0x00000002]
[19:55:10.602]    </block>
[19:55:10.606]    <control if="protType == 1" while="" timeout="0" info="">
[19:55:10.606]      // if-block "protType == 1"
[19:55:10.606]        // =>  FALSE
[19:55:10.606]      // skip if-block "protType == 1"
[19:55:10.606]    </control>
[19:55:10.606]    <control if="protType == 2" while="" timeout="0" info="">
[19:55:10.606]      // if-block "protType == 2"
[19:55:10.606]        // =>  TRUE
[19:55:10.606]      <control if="isSWJ" while="" timeout="0" info="">
[19:55:10.606]        // if-block "isSWJ"
[19:55:10.606]          // =>  TRUE
[19:55:10.606]        <control if="hasDormant" while="" timeout="0" info="">
[19:55:10.606]          // if-block "hasDormant"
[19:55:10.606]            // =>  FALSE
[19:55:10.606]          // skip if-block "hasDormant"
[19:55:10.606]        </control>
[19:55:10.606]        <control if="!hasDormant" while="" timeout="0" info="">
[19:55:10.606]          // if-block "!hasDormant"
[19:55:10.606]            // =>  TRUE
[19:55:10.606]          <block atomic="false" info="">
[19:55:10.606]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:55:10.610]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:55:10.610]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:55:10.610]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:55:10.610]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:55:10.616]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:55:10.616]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:55:10.618]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:55:10.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:55:10.618]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:55:10.618]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:55:10.622]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:55:10.622]          </block>
[19:55:10.622]          // end if-block "!hasDormant"
[19:55:10.622]        </control>
[19:55:10.622]        // end if-block "isSWJ"
[19:55:10.622]      </control>
[19:55:10.622]      <control if="!isSWJ" while="" timeout="0" info="">
[19:55:10.622]        // if-block "!isSWJ"
[19:55:10.622]          // =>  FALSE
[19:55:10.622]        // skip if-block "!isSWJ"
[19:55:10.622]      </control>
[19:55:10.622]      <block atomic="false" info="">
[19:55:10.622]        ReadDP(0x0);
[19:55:10.622]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:55:10.622]      </block>
[19:55:10.622]      // end if-block "protType == 2"
[19:55:10.622]    </control>
[19:55:10.622]  </sequence>
[19:55:10.622]  
[19:55:10.630]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:55:10.630]  
[19:55:10.630]  <debugvars>
[19:55:10.630]    // Pre-defined
[19:55:10.630]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:55:10.630]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:55:10.631]    __dp=0x00000000
[19:55:10.631]    __ap=0x00000000
[19:55:10.631]    __traceout=0x00000000      (Trace Disabled)
[19:55:10.631]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:55:10.631]    __FlashAddr=0x00000000
[19:55:10.631]    __FlashLen=0x00000000
[19:55:10.631]    __FlashArg=0x00000000
[19:55:10.631]    __FlashOp=0x00000000
[19:55:10.631]    __Result=0x00000000
[19:55:10.631]  </debugvars>
[19:55:10.631]  
[19:55:10.632]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:55:10.632]    <block atomic="false" info="">
[19:55:10.632]      __var SW_DP_ABORT       = 0x0;
[19:55:10.632]        // -> [SW_DP_ABORT <= 0x00000000]
[19:55:10.632]      __var DP_CTRL_STAT      = 0x4;
[19:55:10.632]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:55:10.632]      __var DP_SELECT         = 0x8;
[19:55:10.632]        // -> [DP_SELECT <= 0x00000008]
[19:55:10.632]      __var powered_down      = 0;
[19:55:10.632]        // -> [powered_down <= 0x00000000]
[19:55:10.632]      WriteDP(DP_SELECT, 0x00000000);
[19:55:10.634]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:55:10.634]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:55:10.635]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:55:10.635]        // -> [powered_down <= 0x00000001]
[19:55:10.636]    </block>
[19:55:10.636]    <control if="powered_down" while="" timeout="0" info="">
[19:55:10.636]      // if-block "powered_down"
[19:55:10.636]        // =>  TRUE
[19:55:10.636]      <block atomic="false" info="">
[19:55:10.636]        Message(0, "Debug/System power-up request sent");
[19:55:10.639]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:55:10.645]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:55:10.645]      </block>
[19:55:10.645]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:55:10.645]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:55:10.646]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:55:10.647]        // while-condition  =>  FALSE
[19:55:10.647]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:55:10.647]      </control>
[19:55:10.647]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:55:10.647]        // if-block "(__protocol & 0xFFFF) == 1"
[19:55:10.647]          // =>  FALSE
[19:55:10.647]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:55:10.648]      </control>
[19:55:10.648]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:55:10.648]        // if-block "(__protocol & 0xFFFF) == 2"
[19:55:10.648]          // =>  TRUE
[19:55:10.648]        <block atomic="false" info="">
[19:55:10.648]          Message(0, "executing SWD power up");
[19:55:10.649]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:55:10.651]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:55:10.651]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:55:10.653]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:55:10.654]        </block>
[19:55:10.654]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:55:10.654]      </control>
[19:55:10.654]      // end if-block "powered_down"
[19:55:10.654]    </control>
[19:55:10.654]    <block atomic="false" info="">
[19:55:10.654]      __var DEBUG_PORT_VAL    = 0;
[19:55:10.654]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:55:10.654]      __var ACCESS_POINT_VAL  = 0;
[19:55:10.654]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:55:10.655]      __ap = 1; 
[19:55:10.655]        // -> [__ap <= 0x00000001]
[19:55:10.655]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:55:10.668]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:55:10.668]      __ap = 4;
[19:55:10.668]        // -> [__ap <= 0x00000004]
[19:55:10.668]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:55:10.672]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:55:10.672]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:55:10.672]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:55:10.672]    </block>
[19:55:10.672]    <block atomic="false" info="">
[19:55:10.672]      __var nReset = 0x80;
[19:55:10.672]        // -> [nReset <= 0x00000080]
[19:55:10.672]      __var canReadPins = 0;
[19:55:10.672]        // -> [canReadPins <= 0x00000000]
[19:55:10.672]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:55:10.682]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:55:10.682]        // -> [canReadPins <= 0x00000001]
[19:55:10.682]    </block>
[19:55:10.682]    <control if="" while="1" timeout="200" info="">
[19:55:10.682]      // while "1"  (timeout="200")
[19:55:10.682]      // while-condition  =>  TRUE
[19:55:10.682]      // while "1"  (timeout="200")
[19:55:10.682]      // while-condition  =>  TRUE
[19:55:10.682]      // while "1"  (timeout="200")
[19:55:10.682]      // while-condition  =>  TRUE
[19:55:10.682]      // while "1"  (timeout="200")
[19:55:10.684]      // while-condition  =>  TRUE
[19:55:10.684]      // while "1"  (timeout="200")
[19:55:10.684]      // while-condition  =>  TRUE
[19:55:10.684]      // while "1"  (timeout="200")
[19:55:10.684]      // while-condition  =>  TRUE
[19:55:10.684]      // while "1"  (timeout="200")
[19:55:10.684]      // while-condition  =>  TRUE
[19:55:10.684]      // while "1"  (timeout="200")
[19:55:10.684]      // while-condition  =>  TRUE
[19:55:10.684]      // while "1"  (timeout="200")
[19:55:10.684]      // while-condition  =>  TRUE
[19:55:10.684]      // while "1"  (timeout="200")
[19:55:10.684]      // while-condition  =>  TRUE
[19:55:10.684]      // while "1"  (timeout="200")
[19:55:10.684]      // while-condition  =>  TRUE
[19:55:10.684]      // while "1"  (timeout="200")
[19:55:10.684]      // while-condition  =>  TRUE
[19:55:10.684]      // while "1"  (timeout="200")
[19:55:10.684]      // while-condition  =>  TRUE
[19:55:10.684]      // while "1"  (timeout="200")
[19:55:10.684]      // while-condition  =>  TRUE
[19:55:10.684]      // while "1"  (timeout="200")
[19:55:10.686]      // while-condition  =>  TRUE
[19:55:10.686]      // while "1"  (timeout="200")
[19:55:10.686]      // while-condition  =>  TRUE
[19:55:10.686]      // while "1"  (timeout="200")
[19:55:10.686]      // while-condition  =>  TRUE
[19:55:10.686]      // while "1"  (timeout="200")
[19:55:10.686]      // while-condition  =>  TRUE
[19:55:10.686]      // while "1"  (timeout="200")
[19:55:10.686]      // while-condition  =>  TRUE
[19:55:10.686]      // while "1"  (timeout="200")
[19:55:10.686]      // while-condition  =>  TRUE
[19:55:10.686]      // while "1"  (timeout="200")
[19:55:10.686]      // while-condition  =>  TRUE
[19:55:10.686]      // while "1"  (timeout="200")
[19:55:10.686]      // while-condition  =>  TRUE
[19:55:10.686]      // while "1"  (timeout="200")
[19:55:10.686]      // while-condition  =>  TRUE
[19:55:10.686]      // while "1"  (timeout="200")
[19:55:10.686]      // while-condition  =>  TRUE
[19:55:10.686]      // while "1"  (timeout="200")
[19:55:10.686]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.688]      // while-condition  =>  TRUE
[19:55:10.688]      // while "1"  (timeout="200")
[19:55:10.692]      // while-condition  =>  TRUE
[19:55:10.692]      // while "1"  (timeout="200")
[19:55:10.692]      // while  =>  TIMEOUT
[19:55:10.692]      // end while "1"
[19:55:10.692]    </control>
[19:55:10.692]    <control if="canReadPins" while="" timeout="0" info="">
[19:55:10.692]      // if-block "canReadPins"
[19:55:10.692]        // =>  TRUE
[19:55:10.692]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:55:10.692]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:55:10.695]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:55:10.695]        // while-condition  =>  FALSE
[19:55:10.695]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:55:10.695]      </control>
[19:55:10.695]      // end if-block "canReadPins"
[19:55:10.695]    </control>
[19:55:10.695]    <control if="!canReadPins" while="" timeout="0" info="">
[19:55:10.695]      // if-block "!canReadPins"
[19:55:10.695]        // =>  FALSE
[19:55:10.695]      // skip if-block "!canReadPins"
[19:55:10.695]    </control>
[19:55:10.695]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:55:10.695]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:55:10.695]        // =>  TRUE
[19:55:10.695]      <block atomic="false" info="">
[19:55:10.695]        WriteAP(0x00, 0x190008);
[19:55:10.699]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:55:10.700]        WriteAP(0xF0, 0x01);
[19:55:10.706]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:55:10.706]      </block>
[19:55:10.706]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:55:10.706]    </control>
[19:55:10.708]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:55:10.708]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:55:10.708]        // =>  FALSE
[19:55:10.708]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:55:10.708]    </control>
[19:55:10.708]    <block atomic="false" info="">
[19:55:10.708]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:55:10.712]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:55:10.712]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:55:10.712]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:55:10.712]      __ap = 0; //lets make sure we reset the access point selection
[19:55:10.712]        // -> [__ap <= 0x00000000]
[19:55:10.712]    </block>
[19:55:10.712]  </sequence>
[19:55:10.712]  
[19:55:10.744]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:55:10.744]  
[19:55:10.744]  <debugvars>
[19:55:10.744]    // Pre-defined
[19:55:10.744]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:55:10.744]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:55:10.744]    __dp=0x00000000
[19:55:10.744]    __ap=0x00000000
[19:55:10.744]    __traceout=0x00000000      (Trace Disabled)
[19:55:10.744]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:55:10.744]    __FlashAddr=0x00000000
[19:55:10.744]    __FlashLen=0x00000000
[19:55:10.744]    __FlashArg=0x00000000
[19:55:10.746]    __FlashOp=0x00000000
[19:55:10.746]    __Result=0x00000000
[19:55:10.746]  </debugvars>
[19:55:10.746]  
[19:55:10.746]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:55:10.746]    <block atomic="false" info="">
[19:55:10.746]      __var deviceID = 0;
[19:55:10.746]        // -> [deviceID <= 0x00000000]
[19:55:10.746]      __var version = 0;
[19:55:10.746]        // -> [version <= 0x00000000]
[19:55:10.746]      __var partNum = 0;
[19:55:10.746]        // -> [partNum <= 0x00000000]
[19:55:10.746]      __var manuf = 0;
[19:55:10.746]        // -> [manuf <= 0x00000000]
[19:55:10.746]      __var isMSPM0G1X0X_G3X0X = 0;
[19:55:10.746]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:55:10.746]      __var isProduction = 0;
[19:55:10.746]        // -> [isProduction <= 0x00000000]
[19:55:10.746]      __var continueId = 0;
[19:55:10.746]        // -> [continueId <= 0x00000000]
[19:55:10.746]      deviceID =   Read32(0x41C40004);
[19:55:10.752]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:55:10.752]        // -> [deviceID <= 0x2BB8802F]
[19:55:10.752]      version = deviceID >> 28;
[19:55:10.752]        // -> [version <= 0x00000002]
[19:55:10.752]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:55:10.752]        // -> [partNum <= 0x0000BB88]
[19:55:10.752]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:55:10.752]        // -> [manuf <= 0x00000017]
[19:55:10.752]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:55:10.752]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:55:10.752]      isProduction = (version > 0);
[19:55:10.756]        // -> [isProduction <= 0x00000001]
[19:55:10.756]    </block>
[19:55:10.756]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:55:10.756]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:55:10.756]        // =>  FALSE
[19:55:10.756]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:55:10.756]    </control>
[19:55:10.756]    <control if="continueId == 4" while="" timeout="0" info="">
[19:55:10.756]      // if-block "continueId == 4"
[19:55:10.756]        // =>  FALSE
[19:55:10.756]      // skip if-block "continueId == 4"
[19:55:10.756]    </control>
[19:55:10.756]    <control if="!isProduction" while="" timeout="0" info="">
[19:55:10.756]      // if-block "!isProduction"
[19:55:10.756]        // =>  FALSE
[19:55:10.756]      // skip if-block "!isProduction"
[19:55:10.756]    </control>
[19:55:10.756]  </sequence>
[19:55:10.756]  
[19:56:45.450]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:56:45.450]  
[19:56:45.460]  <debugvars>
[19:56:45.460]    // Pre-defined
[19:56:45.460]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:56:45.460]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:56:45.460]    __dp=0x00000000
[19:56:45.460]    __ap=0x00000000
[19:56:45.460]    __traceout=0x00000000      (Trace Disabled)
[19:56:45.460]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:56:45.460]    __FlashAddr=0x00000000
[19:56:45.460]    __FlashLen=0x00000000
[19:56:45.460]    __FlashArg=0x00000000
[19:56:45.460]    __FlashOp=0x00000000
[19:56:45.460]    __Result=0x00000000
[19:56:45.460]  </debugvars>
[19:56:45.460]  
[19:56:45.460]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:56:45.460]    <block atomic="false" info="">
[19:56:45.462]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:56:45.462]        // -> [isSWJ <= 0x00000001]
[19:56:45.462]      __var hasDormant = __protocol & 0x00020000;
[19:56:45.462]        // -> [hasDormant <= 0x00000000]
[19:56:45.462]      __var protType   = __protocol & 0x0000FFFF;
[19:56:45.462]        // -> [protType <= 0x00000002]
[19:56:45.462]    </block>
[19:56:45.462]    <control if="protType == 1" while="" timeout="0" info="">
[19:56:45.462]      // if-block "protType == 1"
[19:56:45.462]        // =>  FALSE
[19:56:45.462]      // skip if-block "protType == 1"
[19:56:45.463]    </control>
[19:56:45.463]    <control if="protType == 2" while="" timeout="0" info="">
[19:56:45.463]      // if-block "protType == 2"
[19:56:45.463]        // =>  TRUE
[19:56:45.463]      <control if="isSWJ" while="" timeout="0" info="">
[19:56:45.463]        // if-block "isSWJ"
[19:56:45.463]          // =>  TRUE
[19:56:45.463]        <control if="hasDormant" while="" timeout="0" info="">
[19:56:45.463]          // if-block "hasDormant"
[19:56:45.463]            // =>  FALSE
[19:56:45.463]          // skip if-block "hasDormant"
[19:56:45.463]        </control>
[19:56:45.463]        <control if="!hasDormant" while="" timeout="0" info="">
[19:56:45.463]          // if-block "!hasDormant"
[19:56:45.463]            // =>  TRUE
[19:56:45.463]          <block atomic="false" info="">
[19:56:45.463]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:56:45.466]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:56:45.468]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:56:45.468]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:56:45.468]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:56:45.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:56:45.472]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:56:45.473]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:56:45.473]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:56:45.477]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:56:45.477]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:56:45.478]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:56:45.478]          </block>
[19:56:45.478]          // end if-block "!hasDormant"
[19:56:45.479]        </control>
[19:56:45.479]        // end if-block "isSWJ"
[19:56:45.479]      </control>
[19:56:45.479]      <control if="!isSWJ" while="" timeout="0" info="">
[19:56:45.479]        // if-block "!isSWJ"
[19:56:45.479]          // =>  FALSE
[19:56:45.479]        // skip if-block "!isSWJ"
[19:56:45.479]      </control>
[19:56:45.479]      <block atomic="false" info="">
[19:56:45.479]        ReadDP(0x0);
[19:56:45.481]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:56:45.481]      </block>
[19:56:45.481]      // end if-block "protType == 2"
[19:56:45.481]    </control>
[19:56:45.481]  </sequence>
[19:56:45.481]  
[19:56:45.503]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:56:45.503]  
[19:56:45.503]  <debugvars>
[19:56:45.503]    // Pre-defined
[19:56:45.503]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:56:45.503]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:56:45.503]    __dp=0x00000000
[19:56:45.503]    __ap=0x00000000
[19:56:45.503]    __traceout=0x00000000      (Trace Disabled)
[19:56:45.503]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:56:45.503]    __FlashAddr=0x00000000
[19:56:45.503]    __FlashLen=0x00000000
[19:56:45.503]    __FlashArg=0x00000000
[19:56:45.503]    __FlashOp=0x00000000
[19:56:45.503]    __Result=0x00000000
[19:56:45.503]  </debugvars>
[19:56:45.503]  
[19:56:45.503]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:56:45.503]    <block atomic="false" info="">
[19:56:45.507]      __var SW_DP_ABORT       = 0x0;
[19:56:45.507]        // -> [SW_DP_ABORT <= 0x00000000]
[19:56:45.507]      __var DP_CTRL_STAT      = 0x4;
[19:56:45.507]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:56:45.507]      __var DP_SELECT         = 0x8;
[19:56:45.507]        // -> [DP_SELECT <= 0x00000008]
[19:56:45.507]      __var powered_down      = 0;
[19:56:45.508]        // -> [powered_down <= 0x00000000]
[19:56:45.508]      WriteDP(DP_SELECT, 0x00000000);
[19:56:45.511]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:56:45.514]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:56:45.519]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:56:45.519]        // -> [powered_down <= 0x00000001]
[19:56:45.519]    </block>
[19:56:45.519]    <control if="powered_down" while="" timeout="0" info="">
[19:56:45.519]      // if-block "powered_down"
[19:56:45.519]        // =>  TRUE
[19:56:45.519]      <block atomic="false" info="">
[19:56:45.519]        Message(0, "Debug/System power-up request sent");
[19:56:45.522]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:56:45.523]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:56:45.523]      </block>
[19:56:45.523]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:56:45.523]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:56:45.523]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:56:45.523]        // while-condition  =>  FALSE
[19:56:45.523]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:56:45.523]      </control>
[19:56:45.523]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:56:45.523]        // if-block "(__protocol & 0xFFFF) == 1"
[19:56:45.523]          // =>  FALSE
[19:56:45.523]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:56:45.523]      </control>
[19:56:45.523]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:56:45.523]        // if-block "(__protocol & 0xFFFF) == 2"
[19:56:45.523]          // =>  TRUE
[19:56:45.523]        <block atomic="false" info="">
[19:56:45.523]          Message(0, "executing SWD power up");
[19:56:45.527]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:56:45.528]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:56:45.528]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:56:45.531]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:56:45.531]        </block>
[19:56:45.531]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:56:45.531]      </control>
[19:56:45.531]      // end if-block "powered_down"
[19:56:45.531]    </control>
[19:56:45.531]    <block atomic="false" info="">
[19:56:45.531]      __var DEBUG_PORT_VAL    = 0;
[19:56:45.531]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:56:45.531]      __var ACCESS_POINT_VAL  = 0;
[19:56:45.531]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:56:45.531]      __ap = 1; 
[19:56:45.531]        // -> [__ap <= 0x00000001]
[19:56:45.535]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:56:45.537]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:56:45.537]      __ap = 4;
[19:56:45.537]        // -> [__ap <= 0x00000004]
[19:56:45.537]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:56:45.543]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:56:45.543]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:56:45.543]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:56:45.543]    </block>
[19:56:45.543]    <block atomic="false" info="">
[19:56:45.543]      __var nReset = 0x80;
[19:56:45.543]        // -> [nReset <= 0x00000080]
[19:56:45.543]      __var canReadPins = 0;
[19:56:45.545]        // -> [canReadPins <= 0x00000000]
[19:56:45.545]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:56:45.545]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:56:45.545]        // -> [canReadPins <= 0x00000001]
[19:56:45.545]    </block>
[19:56:45.545]    <control if="" while="1" timeout="200" info="">
[19:56:45.545]      // while "1"  (timeout="200")
[19:56:45.547]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.548]      // while-condition  =>  TRUE
[19:56:45.548]      // while "1"  (timeout="200")
[19:56:45.551]      // while-condition  =>  TRUE
[19:56:45.551]      // while "1"  (timeout="200")
[19:56:45.551]      // while  =>  TIMEOUT
[19:56:45.551]      // end while "1"
[19:56:45.551]    </control>
[19:56:45.551]    <control if="canReadPins" while="" timeout="0" info="">
[19:56:45.551]      // if-block "canReadPins"
[19:56:45.551]        // =>  TRUE
[19:56:45.553]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:56:45.553]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:56:45.554]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:56:45.554]        // while-condition  =>  FALSE
[19:56:45.554]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:56:45.554]      </control>
[19:56:45.554]      // end if-block "canReadPins"
[19:56:45.554]    </control>
[19:56:45.554]    <control if="!canReadPins" while="" timeout="0" info="">
[19:56:45.554]      // if-block "!canReadPins"
[19:56:45.554]        // =>  FALSE
[19:56:45.554]      // skip if-block "!canReadPins"
[19:56:45.555]    </control>
[19:56:45.555]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:56:45.555]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:56:45.555]        // =>  TRUE
[19:56:45.555]      <block atomic="false" info="">
[19:56:45.555]        WriteAP(0x00, 0x190008);
[19:56:45.557]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:56:45.557]        WriteAP(0xF0, 0x01);
[19:56:45.561]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:56:45.561]      </block>
[19:56:45.561]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:56:45.561]    </control>
[19:56:45.561]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:56:45.561]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:56:45.561]        // =>  FALSE
[19:56:45.561]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:56:45.561]    </control>
[19:56:45.561]    <block atomic="false" info="">
[19:56:45.561]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:56:45.564]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:56:45.564]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:56:45.564]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:56:45.564]      __ap = 0; //lets make sure we reset the access point selection
[19:56:45.567]        // -> [__ap <= 0x00000000]
[19:56:45.567]    </block>
[19:56:45.567]  </sequence>
[19:56:45.567]  
[19:56:45.593]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:56:45.593]  
[19:56:45.593]  <debugvars>
[19:56:45.593]    // Pre-defined
[19:56:45.593]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:56:45.593]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:56:45.593]    __dp=0x00000000
[19:56:45.593]    __ap=0x00000000
[19:56:45.593]    __traceout=0x00000000      (Trace Disabled)
[19:56:45.593]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:56:45.593]    __FlashAddr=0x00000000
[19:56:45.593]    __FlashLen=0x00000000
[19:56:45.598]    __FlashArg=0x00000000
[19:56:45.598]    __FlashOp=0x00000000
[19:56:45.598]    __Result=0x00000000
[19:56:45.598]  </debugvars>
[19:56:45.598]  
[19:56:45.598]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:56:45.598]    <block atomic="false" info="">
[19:56:45.598]      __var deviceID = 0;
[19:56:45.598]        // -> [deviceID <= 0x00000000]
[19:56:45.598]      __var version = 0;
[19:56:45.598]        // -> [version <= 0x00000000]
[19:56:45.598]      __var partNum = 0;
[19:56:45.598]        // -> [partNum <= 0x00000000]
[19:56:45.598]      __var manuf = 0;
[19:56:45.598]        // -> [manuf <= 0x00000000]
[19:56:45.598]      __var isMSPM0G1X0X_G3X0X = 0;
[19:56:45.598]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:56:45.598]      __var isProduction = 0;
[19:56:45.598]        // -> [isProduction <= 0x00000000]
[19:56:45.598]      __var continueId = 0;
[19:56:45.598]        // -> [continueId <= 0x00000000]
[19:56:45.598]      deviceID =   Read32(0x41C40004);
[19:56:45.612]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:56:45.612]        // -> [deviceID <= 0x2BB8802F]
[19:56:45.612]      version = deviceID >> 28;
[19:56:45.612]        // -> [version <= 0x00000002]
[19:56:45.612]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:56:45.612]        // -> [partNum <= 0x0000BB88]
[19:56:45.612]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:56:45.612]        // -> [manuf <= 0x00000017]
[19:56:45.612]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:56:45.612]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:56:45.612]      isProduction = (version > 0);
[19:56:45.612]        // -> [isProduction <= 0x00000001]
[19:56:45.612]    </block>
[19:56:45.612]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:56:45.612]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:56:45.612]        // =>  FALSE
[19:56:45.612]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:56:45.612]    </control>
[19:56:45.612]    <control if="continueId == 4" while="" timeout="0" info="">
[19:56:45.612]      // if-block "continueId == 4"
[19:56:45.612]        // =>  FALSE
[19:56:45.614]      // skip if-block "continueId == 4"
[19:56:45.614]    </control>
[19:56:45.614]    <control if="!isProduction" while="" timeout="0" info="">
[19:56:45.614]      // if-block "!isProduction"
[19:56:45.614]        // =>  FALSE
[19:56:45.614]      // skip if-block "!isProduction"
[19:56:45.614]    </control>
[19:56:45.614]  </sequence>
[19:56:45.614]  
[19:59:31.184]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:59:31.184]  
[19:59:31.186]  <debugvars>
[19:59:31.186]    // Pre-defined
[19:59:31.186]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:59:31.186]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:59:31.186]    __dp=0x00000000
[19:59:31.186]    __ap=0x00000000
[19:59:31.186]    __traceout=0x00000000      (Trace Disabled)
[19:59:31.186]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:59:31.186]    __FlashAddr=0x00000000
[19:59:31.186]    __FlashLen=0x00000000
[19:59:31.186]    __FlashArg=0x00000000
[19:59:31.186]    __FlashOp=0x00000000
[19:59:31.186]    __Result=0x00000000
[19:59:31.186]  </debugvars>
[19:59:31.186]  
[19:59:31.186]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:59:31.186]    <block atomic="false" info="">
[19:59:31.186]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:59:31.186]        // -> [isSWJ <= 0x00000001]
[19:59:31.186]      __var hasDormant = __protocol & 0x00020000;
[19:59:31.186]        // -> [hasDormant <= 0x00000000]
[19:59:31.186]      __var protType   = __protocol & 0x0000FFFF;
[19:59:31.186]        // -> [protType <= 0x00000002]
[19:59:31.186]    </block>
[19:59:31.186]    <control if="protType == 1" while="" timeout="0" info="">
[19:59:31.186]      // if-block "protType == 1"
[19:59:31.186]        // =>  FALSE
[19:59:31.186]      // skip if-block "protType == 1"
[19:59:31.186]    </control>
[19:59:31.190]    <control if="protType == 2" while="" timeout="0" info="">
[19:59:31.190]      // if-block "protType == 2"
[19:59:31.190]        // =>  TRUE
[19:59:31.190]      <control if="isSWJ" while="" timeout="0" info="">
[19:59:31.190]        // if-block "isSWJ"
[19:59:31.190]          // =>  TRUE
[19:59:31.190]        <control if="hasDormant" while="" timeout="0" info="">
[19:59:31.190]          // if-block "hasDormant"
[19:59:31.190]            // =>  FALSE
[19:59:31.190]          // skip if-block "hasDormant"
[19:59:31.190]        </control>
[19:59:31.190]        <control if="!hasDormant" while="" timeout="0" info="">
[19:59:31.190]          // if-block "!hasDormant"
[19:59:31.190]            // =>  TRUE
[19:59:31.190]          <block atomic="false" info="">
[19:59:31.190]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:59:31.191]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:59:31.191]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:59:31.194]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:59:31.194]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:59:31.197]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:59:31.197]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:59:31.203]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:59:31.203]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:59:31.211]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:59:31.211]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:59:31.212]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:59:31.212]          </block>
[19:59:31.212]          // end if-block "!hasDormant"
[19:59:31.212]        </control>
[19:59:31.212]        // end if-block "isSWJ"
[19:59:31.212]      </control>
[19:59:31.212]      <control if="!isSWJ" while="" timeout="0" info="">
[19:59:31.212]        // if-block "!isSWJ"
[19:59:31.212]          // =>  FALSE
[19:59:31.212]        // skip if-block "!isSWJ"
[19:59:31.212]      </control>
[19:59:31.212]      <block atomic="false" info="">
[19:59:31.212]        ReadDP(0x0);
[19:59:31.219]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:59:31.219]      </block>
[19:59:31.219]      // end if-block "protType == 2"
[19:59:31.219]    </control>
[19:59:31.219]  </sequence>
[19:59:31.219]  
[19:59:31.222]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:59:31.222]  
[19:59:31.222]  <debugvars>
[19:59:31.222]    // Pre-defined
[19:59:31.222]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:59:31.222]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:59:31.222]    __dp=0x00000000
[19:59:31.222]    __ap=0x00000000
[19:59:31.222]    __traceout=0x00000000      (Trace Disabled)
[19:59:31.222]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:59:31.223]    __FlashAddr=0x00000000
[19:59:31.223]    __FlashLen=0x00000000
[19:59:31.223]    __FlashArg=0x00000000
[19:59:31.223]    __FlashOp=0x00000000
[19:59:31.223]    __Result=0x00000000
[19:59:31.223]  </debugvars>
[19:59:31.223]  
[19:59:31.223]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:59:31.223]    <block atomic="false" info="">
[19:59:31.223]      __var SW_DP_ABORT       = 0x0;
[19:59:31.223]        // -> [SW_DP_ABORT <= 0x00000000]
[19:59:31.223]      __var DP_CTRL_STAT      = 0x4;
[19:59:31.223]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:59:31.224]      __var DP_SELECT         = 0x8;
[19:59:31.224]        // -> [DP_SELECT <= 0x00000008]
[19:59:31.224]      __var powered_down      = 0;
[19:59:31.224]        // -> [powered_down <= 0x00000000]
[19:59:31.224]      WriteDP(DP_SELECT, 0x00000000);
[19:59:31.225]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:59:31.225]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:59:31.232]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:59:31.232]        // -> [powered_down <= 0x00000001]
[19:59:31.232]    </block>
[19:59:31.232]    <control if="powered_down" while="" timeout="0" info="">
[19:59:31.232]      // if-block "powered_down"
[19:59:31.232]        // =>  TRUE
[19:59:31.232]      <block atomic="false" info="">
[19:59:31.232]        Message(0, "Debug/System power-up request sent");
[19:59:31.234]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:59:31.236]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:59:31.236]      </block>
[19:59:31.236]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:59:31.236]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:59:31.238]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:59:31.238]        // while-condition  =>  FALSE
[19:59:31.238]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:59:31.238]      </control>
[19:59:31.238]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:59:31.238]        // if-block "(__protocol & 0xFFFF) == 1"
[19:59:31.238]          // =>  FALSE
[19:59:31.238]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:59:31.238]      </control>
[19:59:31.238]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:59:31.238]        // if-block "(__protocol & 0xFFFF) == 2"
[19:59:31.238]          // =>  TRUE
[19:59:31.238]        <block atomic="false" info="">
[19:59:31.238]          Message(0, "executing SWD power up");
[19:59:31.241]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:59:31.242]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:59:31.242]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:59:31.244]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:59:31.244]        </block>
[19:59:31.244]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:59:31.244]      </control>
[19:59:31.244]      // end if-block "powered_down"
[19:59:31.244]    </control>
[19:59:31.244]    <block atomic="false" info="">
[19:59:31.244]      __var DEBUG_PORT_VAL    = 0;
[19:59:31.244]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:59:31.244]      __var ACCESS_POINT_VAL  = 0;
[19:59:31.244]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:59:31.244]      __ap = 1; 
[19:59:31.247]        // -> [__ap <= 0x00000001]
[19:59:31.247]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:59:31.249]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:59:31.249]      __ap = 4;
[19:59:31.249]        // -> [__ap <= 0x00000004]
[19:59:31.249]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:59:31.252]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:59:31.252]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:59:31.256]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:59:31.257]    </block>
[19:59:31.257]    <block atomic="false" info="">
[19:59:31.257]      __var nReset = 0x80;
[19:59:31.257]        // -> [nReset <= 0x00000080]
[19:59:31.257]      __var canReadPins = 0;
[19:59:31.257]        // -> [canReadPins <= 0x00000000]
[19:59:31.257]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:59:31.260]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:59:31.260]        // -> [canReadPins <= 0x00000001]
[19:59:31.261]    </block>
[19:59:31.261]    <control if="" while="1" timeout="200" info="">
[19:59:31.261]      // while "1"  (timeout="200")
[19:59:31.261]      // while-condition  =>  TRUE
[19:59:31.261]      // while "1"  (timeout="200")
[19:59:31.262]      // while-condition  =>  TRUE
[19:59:31.262]      // while "1"  (timeout="200")
[19:59:31.262]      // while-condition  =>  TRUE
[19:59:31.262]      // while "1"  (timeout="200")
[19:59:31.262]      // while-condition  =>  TRUE
[19:59:31.262]      // while "1"  (timeout="200")
[19:59:31.262]      // while-condition  =>  TRUE
[19:59:31.262]      // while "1"  (timeout="200")
[19:59:31.262]      // while-condition  =>  TRUE
[19:59:31.262]      // while "1"  (timeout="200")
[19:59:31.262]      // while-condition  =>  TRUE
[19:59:31.262]      // while "1"  (timeout="200")
[19:59:31.262]      // while-condition  =>  TRUE
[19:59:31.262]      // while "1"  (timeout="200")
[19:59:31.262]      // while-condition  =>  TRUE
[19:59:31.263]      // while "1"  (timeout="200")
[19:59:31.263]      // while-condition  =>  TRUE
[19:59:31.263]      // while "1"  (timeout="200")
[19:59:31.263]      // while-condition  =>  TRUE
[19:59:31.263]      // while "1"  (timeout="200")
[19:59:31.263]      // while-condition  =>  TRUE
[19:59:31.263]      // while "1"  (timeout="200")
[19:59:31.263]      // while-condition  =>  TRUE
[19:59:31.263]      // while "1"  (timeout="200")
[19:59:31.263]      // while-condition  =>  TRUE
[19:59:31.264]      // while "1"  (timeout="200")
[19:59:31.264]      // while-condition  =>  TRUE
[19:59:31.264]      // while "1"  (timeout="200")
[19:59:31.264]      // while-condition  =>  TRUE
[19:59:31.264]      // while "1"  (timeout="200")
[19:59:31.264]      // while-condition  =>  TRUE
[19:59:31.264]      // while "1"  (timeout="200")
[19:59:31.264]      // while-condition  =>  TRUE
[19:59:31.264]      // while "1"  (timeout="200")
[19:59:31.264]      // while-condition  =>  TRUE
[19:59:31.264]      // while "1"  (timeout="200")
[19:59:31.264]      // while-condition  =>  TRUE
[19:59:31.264]      // while "1"  (timeout="200")
[19:59:31.264]      // while-condition  =>  TRUE
[19:59:31.264]      // while "1"  (timeout="200")
[19:59:31.266]      // while-condition  =>  TRUE
[19:59:31.266]      // while "1"  (timeout="200")
[19:59:31.266]      // while-condition  =>  TRUE
[19:59:31.266]      // while "1"  (timeout="200")
[19:59:31.266]      // while-condition  =>  TRUE
[19:59:31.266]      // while "1"  (timeout="200")
[19:59:31.266]      // while-condition  =>  TRUE
[19:59:31.266]      // while "1"  (timeout="200")
[19:59:31.266]      // while-condition  =>  TRUE
[19:59:31.266]      // while "1"  (timeout="200")
[19:59:31.266]      // while-condition  =>  TRUE
[19:59:31.266]      // while "1"  (timeout="200")
[19:59:31.266]      // while-condition  =>  TRUE
[19:59:31.266]      // while "1"  (timeout="200")
[19:59:31.266]      // while-condition  =>  TRUE
[19:59:31.266]      // while "1"  (timeout="200")
[19:59:31.266]      // while-condition  =>  TRUE
[19:59:31.266]      // while "1"  (timeout="200")
[19:59:31.266]      // while-condition  =>  TRUE
[19:59:31.266]      // while "1"  (timeout="200")
[19:59:31.266]      // while-condition  =>  TRUE
[19:59:31.266]      // while "1"  (timeout="200")
[19:59:31.266]      // while-condition  =>  TRUE
[19:59:31.266]      // while "1"  (timeout="200")
[19:59:31.266]      // while-condition  =>  TRUE
[19:59:31.266]      // while "1"  (timeout="200")
[19:59:31.269]      // while-condition  =>  TRUE
[19:59:31.269]      // while "1"  (timeout="200")
[19:59:31.269]      // while-condition  =>  TRUE
[19:59:31.269]      // while "1"  (timeout="200")
[19:59:31.269]      // while-condition  =>  TRUE
[19:59:31.269]      // while "1"  (timeout="200")
[19:59:31.269]      // while-condition  =>  TRUE
[19:59:31.269]      // while "1"  (timeout="200")
[19:59:31.269]      // while-condition  =>  TRUE
[19:59:31.269]      // while "1"  (timeout="200")
[19:59:31.269]      // while-condition  =>  TRUE
[19:59:31.269]      // while "1"  (timeout="200")
[19:59:31.269]      // while-condition  =>  TRUE
[19:59:31.269]      // while "1"  (timeout="200")
[19:59:31.269]      // while-condition  =>  TRUE
[19:59:31.269]      // while "1"  (timeout="200")
[19:59:31.269]      // while-condition  =>  TRUE
[19:59:31.269]      // while "1"  (timeout="200")
[19:59:31.269]      // while-condition  =>  TRUE
[19:59:31.269]      // while "1"  (timeout="200")
[19:59:31.269]      // while-condition  =>  TRUE
[19:59:31.271]      // while "1"  (timeout="200")
[19:59:31.271]      // while  =>  TIMEOUT
[19:59:31.271]      // end while "1"
[19:59:31.271]    </control>
[19:59:31.271]    <control if="canReadPins" while="" timeout="0" info="">
[19:59:31.271]      // if-block "canReadPins"
[19:59:31.271]        // =>  TRUE
[19:59:31.271]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:59:31.271]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:59:31.273]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:59:31.273]        // while-condition  =>  FALSE
[19:59:31.273]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:59:31.273]      </control>
[19:59:31.273]      // end if-block "canReadPins"
[19:59:31.273]    </control>
[19:59:31.273]    <control if="!canReadPins" while="" timeout="0" info="">
[19:59:31.273]      // if-block "!canReadPins"
[19:59:31.273]        // =>  FALSE
[19:59:31.273]      // skip if-block "!canReadPins"
[19:59:31.273]    </control>
[19:59:31.273]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:59:31.273]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:59:31.273]        // =>  TRUE
[19:59:31.275]      <block atomic="false" info="">
[19:59:31.275]        WriteAP(0x00, 0x190008);
[19:59:31.276]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:59:31.276]        WriteAP(0xF0, 0x01);
[19:59:31.281]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:59:31.281]      </block>
[19:59:31.281]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:59:31.281]    </control>
[19:59:31.281]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:59:31.281]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:59:31.281]        // =>  FALSE
[19:59:31.281]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:59:31.281]    </control>
[19:59:31.281]    <block atomic="false" info="">
[19:59:31.281]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:59:31.285]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:59:31.285]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:59:31.285]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:59:31.289]      __ap = 0; //lets make sure we reset the access point selection
[19:59:31.291]        // -> [__ap <= 0x00000000]
[19:59:31.291]    </block>
[19:59:31.291]  </sequence>
[19:59:31.291]  
[19:59:31.313]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:59:31.313]  
[19:59:31.313]  <debugvars>
[19:59:31.313]    // Pre-defined
[19:59:31.313]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:59:31.313]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:59:31.313]    __dp=0x00000000
[19:59:31.313]    __ap=0x00000000
[19:59:31.313]    __traceout=0x00000000      (Trace Disabled)
[19:59:31.313]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:59:31.317]    __FlashAddr=0x00000000
[19:59:31.317]    __FlashLen=0x00000000
[19:59:31.317]    __FlashArg=0x00000000
[19:59:31.317]    __FlashOp=0x00000000
[19:59:31.317]    __Result=0x00000000
[19:59:31.317]  </debugvars>
[19:59:31.317]  
[19:59:31.317]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:59:31.317]    <block atomic="false" info="">
[19:59:31.318]      __var deviceID = 0;
[19:59:31.318]        // -> [deviceID <= 0x00000000]
[19:59:31.318]      __var version = 0;
[19:59:31.318]        // -> [version <= 0x00000000]
[19:59:31.318]      __var partNum = 0;
[19:59:31.318]        // -> [partNum <= 0x00000000]
[19:59:31.318]      __var manuf = 0;
[19:59:31.318]        // -> [manuf <= 0x00000000]
[19:59:31.318]      __var isMSPM0G1X0X_G3X0X = 0;
[19:59:31.318]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:59:31.318]      __var isProduction = 0;
[19:59:31.319]        // -> [isProduction <= 0x00000000]
[19:59:31.319]      __var continueId = 0;
[19:59:31.319]        // -> [continueId <= 0x00000000]
[19:59:31.319]      deviceID =   Read32(0x41C40004);
[19:59:31.324]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:59:31.324]        // -> [deviceID <= 0x2BB8802F]
[19:59:31.324]      version = deviceID >> 28;
[19:59:31.324]        // -> [version <= 0x00000002]
[19:59:31.324]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:59:31.324]        // -> [partNum <= 0x0000BB88]
[19:59:31.324]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:59:31.325]        // -> [manuf <= 0x00000017]
[19:59:31.325]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:59:31.325]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:59:31.325]      isProduction = (version > 0);
[19:59:31.325]        // -> [isProduction <= 0x00000001]
[19:59:31.325]    </block>
[19:59:31.325]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:59:31.325]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:59:31.325]        // =>  FALSE
[19:59:31.325]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:59:31.325]    </control>
[19:59:31.325]    <control if="continueId == 4" while="" timeout="0" info="">
[19:59:31.325]      // if-block "continueId == 4"
[19:59:31.325]        // =>  FALSE
[19:59:31.325]      // skip if-block "continueId == 4"
[19:59:31.325]    </control>
[19:59:31.325]    <control if="!isProduction" while="" timeout="0" info="">
[19:59:31.325]      // if-block "!isProduction"
[19:59:31.325]        // =>  FALSE
[19:59:31.325]      // skip if-block "!isProduction"
[19:59:31.325]    </control>
[19:59:31.325]  </sequence>
[19:59:31.328]  
[20:00:45.602]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:00:45.602]  
[20:00:45.614]  <debugvars>
[20:00:45.614]    // Pre-defined
[20:00:45.614]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:00:45.614]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:00:45.614]    __dp=0x00000000
[20:00:45.614]    __ap=0x00000000
[20:00:45.614]    __traceout=0x00000000      (Trace Disabled)
[20:00:45.614]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:00:45.614]    __FlashAddr=0x00000000
[20:00:45.614]    __FlashLen=0x00000000
[20:00:45.614]    __FlashArg=0x00000000
[20:00:45.614]    __FlashOp=0x00000000
[20:00:45.614]    __Result=0x00000000
[20:00:45.614]  </debugvars>
[20:00:45.614]  
[20:00:45.614]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:00:45.614]    <block atomic="false" info="">
[20:00:45.614]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:00:45.614]        // -> [isSWJ <= 0x00000001]
[20:00:45.614]      __var hasDormant = __protocol & 0x00020000;
[20:00:45.614]        // -> [hasDormant <= 0x00000000]
[20:00:45.614]      __var protType   = __protocol & 0x0000FFFF;
[20:00:45.614]        // -> [protType <= 0x00000002]
[20:00:45.614]    </block>
[20:00:45.614]    <control if="protType == 1" while="" timeout="0" info="">
[20:00:45.614]      // if-block "protType == 1"
[20:00:45.614]        // =>  FALSE
[20:00:45.614]      // skip if-block "protType == 1"
[20:00:45.614]    </control>
[20:00:45.614]    <control if="protType == 2" while="" timeout="0" info="">
[20:00:45.614]      // if-block "protType == 2"
[20:00:45.614]        // =>  TRUE
[20:00:45.614]      <control if="isSWJ" while="" timeout="0" info="">
[20:00:45.614]        // if-block "isSWJ"
[20:00:45.618]          // =>  TRUE
[20:00:45.618]        <control if="hasDormant" while="" timeout="0" info="">
[20:00:45.618]          // if-block "hasDormant"
[20:00:45.618]            // =>  FALSE
[20:00:45.618]          // skip if-block "hasDormant"
[20:00:45.618]        </control>
[20:00:45.618]        <control if="!hasDormant" while="" timeout="0" info="">
[20:00:45.618]          // if-block "!hasDormant"
[20:00:45.618]            // =>  TRUE
[20:00:45.618]          <block atomic="false" info="">
[20:00:45.618]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:00:45.618]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:00:45.618]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:00:45.618]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:00:45.622]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:00:45.623]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:00:45.623]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:00:45.623]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:00:45.623]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:00:45.630]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:00:45.630]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:00:45.633]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:00:45.633]          </block>
[20:00:45.633]          // end if-block "!hasDormant"
[20:00:45.633]        </control>
[20:00:45.633]        // end if-block "isSWJ"
[20:00:45.633]      </control>
[20:00:45.633]      <control if="!isSWJ" while="" timeout="0" info="">
[20:00:45.633]        // if-block "!isSWJ"
[20:00:45.633]          // =>  FALSE
[20:00:45.633]        // skip if-block "!isSWJ"
[20:00:45.633]      </control>
[20:00:45.633]      <block atomic="false" info="">
[20:00:45.633]        ReadDP(0x0);
[20:00:45.634]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:00:45.634]      </block>
[20:00:45.634]      // end if-block "protType == 2"
[20:00:45.634]    </control>
[20:00:45.634]  </sequence>
[20:00:45.634]  
[20:00:45.638]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:00:45.638]  
[20:00:45.638]  <debugvars>
[20:00:45.643]    // Pre-defined
[20:00:45.643]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:00:45.643]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:00:45.643]    __dp=0x00000000
[20:00:45.643]    __ap=0x00000000
[20:00:45.643]    __traceout=0x00000000      (Trace Disabled)
[20:00:45.643]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:00:45.643]    __FlashAddr=0x00000000
[20:00:45.643]    __FlashLen=0x00000000
[20:00:45.643]    __FlashArg=0x00000000
[20:00:45.643]    __FlashOp=0x00000000
[20:00:45.643]    __Result=0x00000000
[20:00:45.643]  </debugvars>
[20:00:45.643]  
[20:00:45.643]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:00:45.643]    <block atomic="false" info="">
[20:00:45.643]      __var SW_DP_ABORT       = 0x0;
[20:00:45.643]        // -> [SW_DP_ABORT <= 0x00000000]
[20:00:45.643]      __var DP_CTRL_STAT      = 0x4;
[20:00:45.643]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:00:45.643]      __var DP_SELECT         = 0x8;
[20:00:45.643]        // -> [DP_SELECT <= 0x00000008]
[20:00:45.643]      __var powered_down      = 0;
[20:00:45.643]        // -> [powered_down <= 0x00000000]
[20:00:45.643]      WriteDP(DP_SELECT, 0x00000000);
[20:00:45.647]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:00:45.647]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:00:45.653]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:00:45.653]        // -> [powered_down <= 0x00000001]
[20:00:45.655]    </block>
[20:00:45.655]    <control if="powered_down" while="" timeout="0" info="">
[20:00:45.655]      // if-block "powered_down"
[20:00:45.655]        // =>  TRUE
[20:00:45.655]      <block atomic="false" info="">
[20:00:45.655]        Message(0, "Debug/System power-up request sent");
[20:00:45.655]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:00:45.659]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:00:45.659]      </block>
[20:00:45.659]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:00:45.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:00:45.662]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:00:45.662]        // while-condition  =>  FALSE
[20:00:45.662]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:00:45.662]      </control>
[20:00:45.662]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:00:45.662]        // if-block "(__protocol & 0xFFFF) == 1"
[20:00:45.662]          // =>  FALSE
[20:00:45.662]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:00:45.662]      </control>
[20:00:45.662]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:00:45.662]        // if-block "(__protocol & 0xFFFF) == 2"
[20:00:45.662]          // =>  TRUE
[20:00:45.662]        <block atomic="false" info="">
[20:00:45.662]          Message(0, "executing SWD power up");
[20:00:45.666]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:00:45.666]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:00:45.666]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:00:45.670]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:00:45.670]        </block>
[20:00:45.670]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:00:45.670]      </control>
[20:00:45.670]      // end if-block "powered_down"
[20:00:45.670]    </control>
[20:00:45.670]    <block atomic="false" info="">
[20:00:45.670]      __var DEBUG_PORT_VAL    = 0;
[20:00:45.670]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:00:45.670]      __var ACCESS_POINT_VAL  = 0;
[20:00:45.670]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:00:45.672]      __ap = 1; 
[20:00:45.672]        // -> [__ap <= 0x00000001]
[20:00:45.672]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:00:45.678]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:00:45.678]      __ap = 4;
[20:00:45.678]        // -> [__ap <= 0x00000004]
[20:00:45.678]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:00:45.680]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:00:45.680]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:00:45.680]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:00:45.683]    </block>
[20:00:45.683]    <block atomic="false" info="">
[20:00:45.683]      __var nReset = 0x80;
[20:00:45.683]        // -> [nReset <= 0x00000080]
[20:00:45.683]      __var canReadPins = 0;
[20:00:45.683]        // -> [canReadPins <= 0x00000000]
[20:00:45.683]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:00:45.683]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:00:45.683]        // -> [canReadPins <= 0x00000001]
[20:00:45.683]    </block>
[20:00:45.683]    <control if="" while="1" timeout="200" info="">
[20:00:45.687]      // while "1"  (timeout="200")
[20:00:45.687]      // while-condition  =>  TRUE
[20:00:45.687]      // while "1"  (timeout="200")
[20:00:45.687]      // while-condition  =>  TRUE
[20:00:45.687]      // while "1"  (timeout="200")
[20:00:45.687]      // while-condition  =>  TRUE
[20:00:45.687]      // while "1"  (timeout="200")
[20:00:45.687]      // while-condition  =>  TRUE
[20:00:45.687]      // while "1"  (timeout="200")
[20:00:45.687]      // while-condition  =>  TRUE
[20:00:45.687]      // while "1"  (timeout="200")
[20:00:45.687]      // while-condition  =>  TRUE
[20:00:45.687]      // while "1"  (timeout="200")
[20:00:45.687]      // while-condition  =>  TRUE
[20:00:45.687]      // while "1"  (timeout="200")
[20:00:45.687]      // while-condition  =>  TRUE
[20:00:45.687]      // while "1"  (timeout="200")
[20:00:45.687]      // while-condition  =>  TRUE
[20:00:45.687]      // while "1"  (timeout="200")
[20:00:45.687]      // while-condition  =>  TRUE
[20:00:45.687]      // while "1"  (timeout="200")
[20:00:45.689]      // while-condition  =>  TRUE
[20:00:45.689]      // while "1"  (timeout="200")
[20:00:45.689]      // while-condition  =>  TRUE
[20:00:45.689]      // while "1"  (timeout="200")
[20:00:45.689]      // while-condition  =>  TRUE
[20:00:45.689]      // while "1"  (timeout="200")
[20:00:45.689]      // while-condition  =>  TRUE
[20:00:45.689]      // while "1"  (timeout="200")
[20:00:45.689]      // while-condition  =>  TRUE
[20:00:45.689]      // while "1"  (timeout="200")
[20:00:45.689]      // while-condition  =>  TRUE
[20:00:45.689]      // while "1"  (timeout="200")
[20:00:45.689]      // while-condition  =>  TRUE
[20:00:45.689]      // while "1"  (timeout="200")
[20:00:45.689]      // while-condition  =>  TRUE
[20:00:45.691]      // while "1"  (timeout="200")
[20:00:45.691]      // while-condition  =>  TRUE
[20:00:45.691]      // while "1"  (timeout="200")
[20:00:45.691]      // while-condition  =>  TRUE
[20:00:45.691]      // while "1"  (timeout="200")
[20:00:45.691]      // while-condition  =>  TRUE
[20:00:45.691]      // while "1"  (timeout="200")
[20:00:45.691]      // while  =>  TIMEOUT
[20:00:45.691]      // end while "1"
[20:00:45.691]    </control>
[20:00:45.692]    <control if="canReadPins" while="" timeout="0" info="">
[20:00:45.692]      // if-block "canReadPins"
[20:00:45.692]        // =>  TRUE
[20:00:45.692]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:00:45.692]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:00:45.695]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:00:45.695]        // while-condition  =>  FALSE
[20:00:45.695]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:00:45.695]      </control>
[20:00:45.695]      // end if-block "canReadPins"
[20:00:45.699]    </control>
[20:00:45.699]    <control if="!canReadPins" while="" timeout="0" info="">
[20:00:45.699]      // if-block "!canReadPins"
[20:00:45.699]        // =>  FALSE
[20:00:45.699]      // skip if-block "!canReadPins"
[20:00:45.699]    </control>
[20:00:45.699]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:00:45.699]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:00:45.699]        // =>  TRUE
[20:00:45.699]      <block atomic="false" info="">
[20:00:45.699]        WriteAP(0x00, 0x190008);
[20:00:45.699]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:00:45.699]        WriteAP(0xF0, 0x01);
[20:00:45.714]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:00:45.714]      </block>
[20:00:45.714]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:00:45.714]    </control>
[20:00:45.714]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:00:45.714]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:00:45.714]        // =>  FALSE
[20:00:45.714]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:00:45.714]    </control>
[20:00:45.714]    <block atomic="false" info="">
[20:00:45.714]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:00:45.726]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:00:45.726]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:00:45.726]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:00:45.726]      __ap = 0; //lets make sure we reset the access point selection
[20:00:45.726]        // -> [__ap <= 0x00000000]
[20:00:45.726]    </block>
[20:00:45.726]  </sequence>
[20:00:45.726]  
[20:00:45.762]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:00:45.762]  
[20:00:45.762]  <debugvars>
[20:00:45.762]    // Pre-defined
[20:00:45.762]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:00:45.762]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:00:45.762]    __dp=0x00000000
[20:00:45.762]    __ap=0x00000000
[20:00:45.762]    __traceout=0x00000000      (Trace Disabled)
[20:00:45.762]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:00:45.762]    __FlashAddr=0x00000000
[20:00:45.762]    __FlashLen=0x00000000
[20:00:45.762]    __FlashArg=0x00000000
[20:00:45.762]    __FlashOp=0x00000000
[20:00:45.762]    __Result=0x00000000
[20:00:45.762]  </debugvars>
[20:00:45.762]  
[20:00:45.762]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:00:45.762]    <block atomic="false" info="">
[20:00:45.762]      __var deviceID = 0;
[20:00:45.762]        // -> [deviceID <= 0x00000000]
[20:00:45.762]      __var version = 0;
[20:00:45.762]        // -> [version <= 0x00000000]
[20:00:45.762]      __var partNum = 0;
[20:00:45.762]        // -> [partNum <= 0x00000000]
[20:00:45.762]      __var manuf = 0;
[20:00:45.762]        // -> [manuf <= 0x00000000]
[20:00:45.762]      __var isMSPM0G1X0X_G3X0X = 0;
[20:00:45.762]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:00:45.762]      __var isProduction = 0;
[20:00:45.762]        // -> [isProduction <= 0x00000000]
[20:00:45.762]      __var continueId = 0;
[20:00:45.762]        // -> [continueId <= 0x00000000]
[20:00:45.766]      deviceID =   Read32(0x41C40004);
[20:00:45.774]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:00:45.778]        // -> [deviceID <= 0x2BB8802F]
[20:00:45.778]      version = deviceID >> 28;
[20:00:45.778]        // -> [version <= 0x00000002]
[20:00:45.778]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:00:45.778]        // -> [partNum <= 0x0000BB88]
[20:00:45.778]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:00:45.778]        // -> [manuf <= 0x00000017]
[20:00:45.778]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:00:45.778]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:00:45.778]      isProduction = (version > 0);
[20:00:45.778]        // -> [isProduction <= 0x00000001]
[20:00:45.778]    </block>
[20:00:45.778]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:00:45.778]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:00:45.778]        // =>  FALSE
[20:00:45.778]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:00:45.778]    </control>
[20:00:45.778]    <control if="continueId == 4" while="" timeout="0" info="">
[20:00:45.778]      // if-block "continueId == 4"
[20:00:45.778]        // =>  FALSE
[20:00:45.778]      // skip if-block "continueId == 4"
[20:00:45.778]    </control>
[20:00:45.778]    <control if="!isProduction" while="" timeout="0" info="">
[20:00:45.778]      // if-block "!isProduction"
[20:00:45.778]        // =>  FALSE
[20:00:45.778]      // skip if-block "!isProduction"
[20:00:45.778]    </control>
[20:00:45.778]  </sequence>
[20:00:45.778]  
[20:02:13.964]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:02:13.964]  
[20:02:13.972]  <debugvars>
[20:02:13.972]    // Pre-defined
[20:02:13.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:02:13.972]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:02:13.972]    __dp=0x00000000
[20:02:13.972]    __ap=0x00000000
[20:02:13.972]    __traceout=0x00000000      (Trace Disabled)
[20:02:13.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:02:13.972]    __FlashAddr=0x00000000
[20:02:13.972]    __FlashLen=0x00000000
[20:02:13.972]    __FlashArg=0x00000000
[20:02:13.972]    __FlashOp=0x00000000
[20:02:13.972]    __Result=0x00000000
[20:02:13.972]  </debugvars>
[20:02:13.972]  
[20:02:13.972]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:02:13.972]    <block atomic="false" info="">
[20:02:13.972]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:02:13.972]        // -> [isSWJ <= 0x00000001]
[20:02:13.972]      __var hasDormant = __protocol & 0x00020000;
[20:02:13.972]        // -> [hasDormant <= 0x00000000]
[20:02:13.972]      __var protType   = __protocol & 0x0000FFFF;
[20:02:13.972]        // -> [protType <= 0x00000002]
[20:02:13.972]    </block>
[20:02:13.974]    <control if="protType == 1" while="" timeout="0" info="">
[20:02:13.974]      // if-block "protType == 1"
[20:02:13.974]        // =>  FALSE
[20:02:13.974]      // skip if-block "protType == 1"
[20:02:13.975]    </control>
[20:02:13.975]    <control if="protType == 2" while="" timeout="0" info="">
[20:02:13.975]      // if-block "protType == 2"
[20:02:13.975]        // =>  TRUE
[20:02:13.975]      <control if="isSWJ" while="" timeout="0" info="">
[20:02:13.975]        // if-block "isSWJ"
[20:02:13.975]          // =>  TRUE
[20:02:13.975]        <control if="hasDormant" while="" timeout="0" info="">
[20:02:13.975]          // if-block "hasDormant"
[20:02:13.975]            // =>  FALSE
[20:02:13.975]          // skip if-block "hasDormant"
[20:02:13.975]        </control>
[20:02:13.975]        <control if="!hasDormant" while="" timeout="0" info="">
[20:02:13.975]          // if-block "!hasDormant"
[20:02:13.975]            // =>  TRUE
[20:02:13.975]          <block atomic="false" info="">
[20:02:13.975]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:02:13.979]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:02:13.979]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:02:13.987]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:02:13.987]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:02:13.991]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:02:13.991]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:02:13.992]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:02:13.992]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:02:14.004]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:02:14.004]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:02:14.016]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:02:14.016]          </block>
[20:02:14.016]          // end if-block "!hasDormant"
[20:02:14.016]        </control>
[20:02:14.016]        // end if-block "isSWJ"
[20:02:14.016]      </control>
[20:02:14.016]      <control if="!isSWJ" while="" timeout="0" info="">
[20:02:14.016]        // if-block "!isSWJ"
[20:02:14.016]          // =>  FALSE
[20:02:14.016]        // skip if-block "!isSWJ"
[20:02:14.016]      </control>
[20:02:14.016]      <block atomic="false" info="">
[20:02:14.016]        ReadDP(0x0);
[20:02:14.020]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:02:14.020]      </block>
[20:02:14.020]      // end if-block "protType == 2"
[20:02:14.020]    </control>
[20:02:14.020]  </sequence>
[20:02:14.020]  
[20:02:14.024]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:02:14.024]  
[20:02:14.024]  <debugvars>
[20:02:14.024]    // Pre-defined
[20:02:14.024]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:02:14.024]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:02:14.024]    __dp=0x00000000
[20:02:14.024]    __ap=0x00000000
[20:02:14.024]    __traceout=0x00000000      (Trace Disabled)
[20:02:14.024]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:02:14.024]    __FlashAddr=0x00000000
[20:02:14.024]    __FlashLen=0x00000000
[20:02:14.024]    __FlashArg=0x00000000
[20:02:14.024]    __FlashOp=0x00000000
[20:02:14.024]    __Result=0x00000000
[20:02:14.024]  </debugvars>
[20:02:14.024]  
[20:02:14.024]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:02:14.024]    <block atomic="false" info="">
[20:02:14.024]      __var SW_DP_ABORT       = 0x0;
[20:02:14.024]        // -> [SW_DP_ABORT <= 0x00000000]
[20:02:14.024]      __var DP_CTRL_STAT      = 0x4;
[20:02:14.027]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:02:14.027]      __var DP_SELECT         = 0x8;
[20:02:14.027]        // -> [DP_SELECT <= 0x00000008]
[20:02:14.027]      __var powered_down      = 0;
[20:02:14.027]        // -> [powered_down <= 0x00000000]
[20:02:14.027]      WriteDP(DP_SELECT, 0x00000000);
[20:02:14.031]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:02:14.031]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:02:14.033]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:02:14.033]        // -> [powered_down <= 0x00000001]
[20:02:14.033]    </block>
[20:02:14.034]    <control if="powered_down" while="" timeout="0" info="">
[20:02:14.034]      // if-block "powered_down"
[20:02:14.034]        // =>  TRUE
[20:02:14.034]      <block atomic="false" info="">
[20:02:14.034]        Message(0, "Debug/System power-up request sent");
[20:02:14.036]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:02:14.041]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:02:14.041]      </block>
[20:02:14.041]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:02:14.041]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:02:14.045]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:02:14.045]        // while-condition  =>  FALSE
[20:02:14.045]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:02:14.045]      </control>
[20:02:14.045]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:02:14.045]        // if-block "(__protocol & 0xFFFF) == 1"
[20:02:14.045]          // =>  FALSE
[20:02:14.046]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:02:14.046]      </control>
[20:02:14.046]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:02:14.046]        // if-block "(__protocol & 0xFFFF) == 2"
[20:02:14.046]          // =>  TRUE
[20:02:14.046]        <block atomic="false" info="">
[20:02:14.046]          Message(0, "executing SWD power up");
[20:02:14.049]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:02:14.050]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:02:14.050]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:02:14.062]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:02:14.062]        </block>
[20:02:14.062]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:02:14.062]      </control>
[20:02:14.062]      // end if-block "powered_down"
[20:02:14.064]    </control>
[20:02:14.064]    <block atomic="false" info="">
[20:02:14.064]      __var DEBUG_PORT_VAL    = 0;
[20:02:14.064]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:02:14.064]      __var ACCESS_POINT_VAL  = 0;
[20:02:14.064]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:02:14.064]      __ap = 1; 
[20:02:14.064]        // -> [__ap <= 0x00000001]
[20:02:14.064]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:02:14.075]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:02:14.075]      __ap = 4;
[20:02:14.075]        // -> [__ap <= 0x00000004]
[20:02:14.075]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:02:14.079]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:02:14.079]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:02:14.079]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:02:14.083]    </block>
[20:02:14.084]    <block atomic="false" info="">
[20:02:14.084]      __var nReset = 0x80;
[20:02:14.084]        // -> [nReset <= 0x00000080]
[20:02:14.084]      __var canReadPins = 0;
[20:02:14.084]        // -> [canReadPins <= 0x00000000]
[20:02:14.084]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:02:14.091]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:02:14.091]        // -> [canReadPins <= 0x00000001]
[20:02:14.092]    </block>
[20:02:14.092]    <control if="" while="1" timeout="200" info="">
[20:02:14.092]      // while "1"  (timeout="200")
[20:02:14.092]      // while-condition  =>  TRUE
[20:02:14.092]      // while "1"  (timeout="200")
[20:02:14.092]      // while-condition  =>  TRUE
[20:02:14.092]      // while "1"  (timeout="200")
[20:02:14.092]      // while-condition  =>  TRUE
[20:02:14.092]      // while "1"  (timeout="200")
[20:02:14.092]      // while-condition  =>  TRUE
[20:02:14.092]      // while "1"  (timeout="200")
[20:02:14.092]      // while-condition  =>  TRUE
[20:02:14.092]      // while "1"  (timeout="200")
[20:02:14.092]      // while-condition  =>  TRUE
[20:02:14.092]      // while "1"  (timeout="200")
[20:02:14.092]      // while-condition  =>  TRUE
[20:02:14.092]      // while "1"  (timeout="200")
[20:02:14.094]      // while-condition  =>  TRUE
[20:02:14.094]      // while "1"  (timeout="200")
[20:02:14.094]      // while-condition  =>  TRUE
[20:02:14.094]      // while "1"  (timeout="200")
[20:02:14.094]      // while-condition  =>  TRUE
[20:02:14.094]      // while "1"  (timeout="200")
[20:02:14.094]      // while-condition  =>  TRUE
[20:02:14.094]      // while "1"  (timeout="200")
[20:02:14.094]      // while-condition  =>  TRUE
[20:02:14.094]      // while "1"  (timeout="200")
[20:02:14.094]      // while-condition  =>  TRUE
[20:02:14.095]      // while "1"  (timeout="200")
[20:02:14.095]      // while-condition  =>  TRUE
[20:02:14.095]      // while "1"  (timeout="200")
[20:02:14.095]      // while-condition  =>  TRUE
[20:02:14.095]      // while "1"  (timeout="200")
[20:02:14.095]      // while-condition  =>  TRUE
[20:02:14.095]      // while "1"  (timeout="200")
[20:02:14.095]      // while-condition  =>  TRUE
[20:02:14.095]      // while "1"  (timeout="200")
[20:02:14.095]      // while-condition  =>  TRUE
[20:02:14.095]      // while "1"  (timeout="200")
[20:02:14.095]      // while-condition  =>  TRUE
[20:02:14.096]      // while "1"  (timeout="200")
[20:02:14.096]      // while-condition  =>  TRUE
[20:02:14.096]      // while "1"  (timeout="200")
[20:02:14.096]      // while-condition  =>  TRUE
[20:02:14.096]      // while "1"  (timeout="200")
[20:02:14.096]      // while-condition  =>  TRUE
[20:02:14.096]      // while "1"  (timeout="200")
[20:02:14.096]      // while-condition  =>  TRUE
[20:02:14.096]      // while "1"  (timeout="200")
[20:02:14.096]      // while-condition  =>  TRUE
[20:02:14.096]      // while "1"  (timeout="200")
[20:02:14.096]      // while-condition  =>  TRUE
[20:02:14.096]      // while "1"  (timeout="200")
[20:02:14.097]      // while-condition  =>  TRUE
[20:02:14.097]      // while "1"  (timeout="200")
[20:02:14.097]      // while  =>  TIMEOUT
[20:02:14.097]      // end while "1"
[20:02:14.097]    </control>
[20:02:14.097]    <control if="canReadPins" while="" timeout="0" info="">
[20:02:14.097]      // if-block "canReadPins"
[20:02:14.097]        // =>  TRUE
[20:02:14.097]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:02:14.097]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:02:14.097]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:02:14.097]        // while-condition  =>  FALSE
[20:02:14.097]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:02:14.097]      </control>
[20:02:14.097]      // end if-block "canReadPins"
[20:02:14.097]    </control>
[20:02:14.097]    <control if="!canReadPins" while="" timeout="0" info="">
[20:02:14.097]      // if-block "!canReadPins"
[20:02:14.100]        // =>  FALSE
[20:02:14.100]      // skip if-block "!canReadPins"
[20:02:14.100]    </control>
[20:02:14.100]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:02:14.100]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:02:14.100]        // =>  TRUE
[20:02:14.100]      <block atomic="false" info="">
[20:02:14.100]        WriteAP(0x00, 0x190008);
[20:02:14.104]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:02:14.104]        WriteAP(0xF0, 0x01);
[20:02:14.117]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:02:14.117]      </block>
[20:02:14.120]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:02:14.120]    </control>
[20:02:14.121]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:02:14.121]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:02:14.121]        // =>  FALSE
[20:02:14.121]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:02:14.121]    </control>
[20:02:14.121]    <block atomic="false" info="">
[20:02:14.121]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:02:14.130]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:02:14.130]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:02:14.130]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:02:14.130]      __ap = 0; //lets make sure we reset the access point selection
[20:02:14.130]        // -> [__ap <= 0x00000000]
[20:02:14.130]    </block>
[20:02:14.130]  </sequence>
[20:02:14.130]  
[20:02:14.166]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:02:14.166]  
[20:02:14.166]  <debugvars>
[20:02:14.166]    // Pre-defined
[20:02:14.166]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:02:14.166]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:02:14.166]    __dp=0x00000000
[20:02:14.166]    __ap=0x00000000
[20:02:14.166]    __traceout=0x00000000      (Trace Disabled)
[20:02:14.166]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:02:14.166]    __FlashAddr=0x00000000
[20:02:14.166]    __FlashLen=0x00000000
[20:02:14.166]    __FlashArg=0x00000000
[20:02:14.166]    __FlashOp=0x00000000
[20:02:14.166]    __Result=0x00000000
[20:02:14.166]  </debugvars>
[20:02:14.166]  
[20:02:14.166]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:02:14.170]    <block atomic="false" info="">
[20:02:14.170]      __var deviceID = 0;
[20:02:14.170]        // -> [deviceID <= 0x00000000]
[20:02:14.170]      __var version = 0;
[20:02:14.170]        // -> [version <= 0x00000000]
[20:02:14.170]      __var partNum = 0;
[20:02:14.170]        // -> [partNum <= 0x00000000]
[20:02:14.170]      __var manuf = 0;
[20:02:14.170]        // -> [manuf <= 0x00000000]
[20:02:14.170]      __var isMSPM0G1X0X_G3X0X = 0;
[20:02:14.170]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:02:14.170]      __var isProduction = 0;
[20:02:14.171]        // -> [isProduction <= 0x00000000]
[20:02:14.171]      __var continueId = 0;
[20:02:14.171]        // -> [continueId <= 0x00000000]
[20:02:14.171]      deviceID =   Read32(0x41C40004);
[20:02:14.184]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:02:14.184]        // -> [deviceID <= 0x2BB8802F]
[20:02:14.186]      version = deviceID >> 28;
[20:02:14.186]        // -> [version <= 0x00000002]
[20:02:14.186]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:02:14.186]        // -> [partNum <= 0x0000BB88]
[20:02:14.186]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:02:14.186]        // -> [manuf <= 0x00000017]
[20:02:14.186]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:02:14.186]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:02:14.186]      isProduction = (version > 0);
[20:02:14.186]        // -> [isProduction <= 0x00000001]
[20:02:14.186]    </block>
[20:02:14.186]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:02:14.186]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:02:14.186]        // =>  FALSE
[20:02:14.186]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:02:14.187]    </control>
[20:02:14.187]    <control if="continueId == 4" while="" timeout="0" info="">
[20:02:14.187]      // if-block "continueId == 4"
[20:02:14.187]        // =>  FALSE
[20:02:14.187]      // skip if-block "continueId == 4"
[20:02:14.187]    </control>
[20:02:14.187]    <control if="!isProduction" while="" timeout="0" info="">
[20:02:14.187]      // if-block "!isProduction"
[20:02:14.187]        // =>  FALSE
[20:02:14.187]      // skip if-block "!isProduction"
[20:02:14.187]    </control>
[20:02:14.187]  </sequence>
[20:02:14.187]  
[20:02:21.572]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:02:21.572]  
[20:02:21.573]  <debugvars>
[20:02:21.573]    // Pre-defined
[20:02:21.573]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:02:21.573]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:02:21.573]    __dp=0x00000000
[20:02:21.573]    __ap=0x00000000
[20:02:21.573]    __traceout=0x00000000      (Trace Disabled)
[20:02:21.574]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:02:21.574]    __FlashAddr=0x00000000
[20:02:21.574]    __FlashLen=0x00000000
[20:02:21.574]    __FlashArg=0x00000000
[20:02:21.574]    __FlashOp=0x00000000
[20:02:21.574]    __Result=0x00000000
[20:02:21.574]  </debugvars>
[20:02:21.574]  
[20:02:21.574]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:02:21.574]    <block atomic="false" info="">
[20:02:21.575]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:02:21.575]        // -> [isSWJ <= 0x00000001]
[20:02:21.575]      __var hasDormant = __protocol & 0x00020000;
[20:02:21.575]        // -> [hasDormant <= 0x00000000]
[20:02:21.575]      __var protType   = __protocol & 0x0000FFFF;
[20:02:21.575]        // -> [protType <= 0x00000002]
[20:02:21.575]    </block>
[20:02:21.575]    <control if="protType == 1" while="" timeout="0" info="">
[20:02:21.575]      // if-block "protType == 1"
[20:02:21.575]        // =>  FALSE
[20:02:21.575]      // skip if-block "protType == 1"
[20:02:21.575]    </control>
[20:02:21.575]    <control if="protType == 2" while="" timeout="0" info="">
[20:02:21.575]      // if-block "protType == 2"
[20:02:21.575]        // =>  TRUE
[20:02:21.575]      <control if="isSWJ" while="" timeout="0" info="">
[20:02:21.575]        // if-block "isSWJ"
[20:02:21.575]          // =>  TRUE
[20:02:21.575]        <control if="hasDormant" while="" timeout="0" info="">
[20:02:21.575]          // if-block "hasDormant"
[20:02:21.578]            // =>  FALSE
[20:02:21.578]          // skip if-block "hasDormant"
[20:02:21.578]        </control>
[20:02:21.578]        <control if="!hasDormant" while="" timeout="0" info="">
[20:02:21.578]          // if-block "!hasDormant"
[20:02:21.578]            // =>  TRUE
[20:02:21.578]          <block atomic="false" info="">
[20:02:21.578]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:02:21.578]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:02:21.578]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:02:21.582]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:02:21.582]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:02:21.584]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:02:21.584]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:02:21.587]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:02:21.587]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:02:21.587]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:02:21.587]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:02:21.591]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:02:21.591]          </block>
[20:02:21.591]          // end if-block "!hasDormant"
[20:02:21.591]        </control>
[20:02:21.591]        // end if-block "isSWJ"
[20:02:21.591]      </control>
[20:02:21.591]      <control if="!isSWJ" while="" timeout="0" info="">
[20:02:21.591]        // if-block "!isSWJ"
[20:02:21.591]          // =>  FALSE
[20:02:21.591]        // skip if-block "!isSWJ"
[20:02:21.591]      </control>
[20:02:21.591]      <block atomic="false" info="">
[20:02:21.591]        ReadDP(0x0);
[20:02:21.594]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:02:21.594]      </block>
[20:02:21.594]      // end if-block "protType == 2"
[20:02:21.594]    </control>
[20:02:21.594]  </sequence>
[20:02:21.594]  
[20:02:21.598]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:02:21.598]  
[20:02:21.598]  <debugvars>
[20:02:21.598]    // Pre-defined
[20:02:21.598]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:02:21.598]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:02:21.599]    __dp=0x00000000
[20:02:21.599]    __ap=0x00000000
[20:02:21.599]    __traceout=0x00000000      (Trace Disabled)
[20:02:21.599]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:02:21.599]    __FlashAddr=0x00000000
[20:02:21.599]    __FlashLen=0x00000000
[20:02:21.599]    __FlashArg=0x00000000
[20:02:21.599]    __FlashOp=0x00000000
[20:02:21.599]    __Result=0x00000000
[20:02:21.599]  </debugvars>
[20:02:21.599]  
[20:02:21.599]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:02:21.599]    <block atomic="false" info="">
[20:02:21.599]      __var SW_DP_ABORT       = 0x0;
[20:02:21.599]        // -> [SW_DP_ABORT <= 0x00000000]
[20:02:21.599]      __var DP_CTRL_STAT      = 0x4;
[20:02:21.599]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:02:21.599]      __var DP_SELECT         = 0x8;
[20:02:21.599]        // -> [DP_SELECT <= 0x00000008]
[20:02:21.599]      __var powered_down      = 0;
[20:02:21.599]        // -> [powered_down <= 0x00000000]
[20:02:21.599]      WriteDP(DP_SELECT, 0x00000000);
[20:02:21.606]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:02:21.606]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:02:21.610]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:02:21.610]        // -> [powered_down <= 0x00000001]
[20:02:21.610]    </block>
[20:02:21.610]    <control if="powered_down" while="" timeout="0" info="">
[20:02:21.610]      // if-block "powered_down"
[20:02:21.610]        // =>  TRUE
[20:02:21.610]      <block atomic="false" info="">
[20:02:21.610]        Message(0, "Debug/System power-up request sent");
[20:02:21.610]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:02:21.616]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:02:21.618]      </block>
[20:02:21.618]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:02:21.618]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:02:21.620]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:02:21.620]        // while-condition  =>  FALSE
[20:02:21.620]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:02:21.623]      </control>
[20:02:21.623]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:02:21.623]        // if-block "(__protocol & 0xFFFF) == 1"
[20:02:21.623]          // =>  FALSE
[20:02:21.623]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:02:21.623]      </control>
[20:02:21.623]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:02:21.623]        // if-block "(__protocol & 0xFFFF) == 2"
[20:02:21.623]          // =>  TRUE
[20:02:21.623]        <block atomic="false" info="">
[20:02:21.623]          Message(0, "executing SWD power up");
[20:02:21.624]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:02:21.627]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:02:21.627]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:02:21.631]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:02:21.631]        </block>
[20:02:21.631]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:02:21.631]      </control>
[20:02:21.631]      // end if-block "powered_down"
[20:02:21.631]    </control>
[20:02:21.631]    <block atomic="false" info="">
[20:02:21.631]      __var DEBUG_PORT_VAL    = 0;
[20:02:21.631]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:02:21.631]      __var ACCESS_POINT_VAL  = 0;
[20:02:21.631]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:02:21.631]      __ap = 1; 
[20:02:21.631]        // -> [__ap <= 0x00000001]
[20:02:21.631]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:02:21.644]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:02:21.644]      __ap = 4;
[20:02:21.644]        // -> [__ap <= 0x00000004]
[20:02:21.644]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:02:21.652]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:02:21.652]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:02:21.652]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:02:21.653]    </block>
[20:02:21.653]    <block atomic="false" info="">
[20:02:21.653]      __var nReset = 0x80;
[20:02:21.654]        // -> [nReset <= 0x00000080]
[20:02:21.654]      __var canReadPins = 0;
[20:02:21.654]        // -> [canReadPins <= 0x00000000]
[20:02:21.654]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:02:21.654]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:02:21.657]        // -> [canReadPins <= 0x00000001]
[20:02:21.657]    </block>
[20:02:21.657]    <control if="" while="1" timeout="200" info="">
[20:02:21.657]      // while "1"  (timeout="200")
[20:02:21.657]      // while-condition  =>  TRUE
[20:02:21.657]      // while "1"  (timeout="200")
[20:02:21.657]      // while-condition  =>  TRUE
[20:02:21.657]      // while "1"  (timeout="200")
[20:02:21.657]      // while-condition  =>  TRUE
[20:02:21.657]      // while "1"  (timeout="200")
[20:02:21.658]      // while-condition  =>  TRUE
[20:02:21.658]      // while "1"  (timeout="200")
[20:02:21.658]      // while-condition  =>  TRUE
[20:02:21.658]      // while "1"  (timeout="200")
[20:02:21.658]      // while-condition  =>  TRUE
[20:02:21.658]      // while "1"  (timeout="200")
[20:02:21.658]      // while-condition  =>  TRUE
[20:02:21.658]      // while "1"  (timeout="200")
[20:02:21.658]      // while-condition  =>  TRUE
[20:02:21.658]      // while "1"  (timeout="200")
[20:02:21.658]      // while-condition  =>  TRUE
[20:02:21.659]      // while "1"  (timeout="200")
[20:02:21.659]      // while-condition  =>  TRUE
[20:02:21.659]      // while "1"  (timeout="200")
[20:02:21.659]      // while-condition  =>  TRUE
[20:02:21.659]      // while "1"  (timeout="200")
[20:02:21.659]      // while-condition  =>  TRUE
[20:02:21.659]      // while "1"  (timeout="200")
[20:02:21.659]      // while-condition  =>  TRUE
[20:02:21.659]      // while "1"  (timeout="200")
[20:02:21.659]      // while-condition  =>  TRUE
[20:02:21.660]      // while "1"  (timeout="200")
[20:02:21.660]      // while  =>  TIMEOUT
[20:02:21.660]      // end while "1"
[20:02:21.660]    </control>
[20:02:21.660]    <control if="canReadPins" while="" timeout="0" info="">
[20:02:21.660]      // if-block "canReadPins"
[20:02:21.660]        // =>  TRUE
[20:02:21.660]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:02:21.661]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:02:21.665]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:02:21.665]        // while-condition  =>  FALSE
[20:02:21.665]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:02:21.665]      </control>
[20:02:21.665]      // end if-block "canReadPins"
[20:02:21.665]    </control>
[20:02:21.665]    <control if="!canReadPins" while="" timeout="0" info="">
[20:02:21.665]      // if-block "!canReadPins"
[20:02:21.665]        // =>  FALSE
[20:02:21.665]      // skip if-block "!canReadPins"
[20:02:21.665]    </control>
[20:02:21.665]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:02:21.665]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:02:21.665]        // =>  TRUE
[20:02:21.665]      <block atomic="false" info="">
[20:02:21.665]        WriteAP(0x00, 0x190008);
[20:02:21.670]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:02:21.670]        WriteAP(0xF0, 0x01);
[20:02:21.685]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:02:21.685]      </block>
[20:02:21.685]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:02:21.685]    </control>
[20:02:21.685]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:02:21.685]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:02:21.685]        // =>  FALSE
[20:02:21.685]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:02:21.685]    </control>
[20:02:21.685]    <block atomic="false" info="">
[20:02:21.685]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:02:21.705]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:02:21.705]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:02:21.705]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:02:21.709]      __ap = 0; //lets make sure we reset the access point selection
[20:02:21.709]        // -> [__ap <= 0x00000000]
[20:02:21.709]    </block>
[20:02:21.709]  </sequence>
[20:02:21.709]  
[20:02:21.748]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:02:21.748]  
[20:02:21.748]  <debugvars>
[20:02:21.748]    // Pre-defined
[20:02:21.748]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:02:21.748]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:02:21.748]    __dp=0x00000000
[20:02:21.748]    __ap=0x00000000
[20:02:21.748]    __traceout=0x00000000      (Trace Disabled)
[20:02:21.748]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:02:21.748]    __FlashAddr=0x00000000
[20:02:21.748]    __FlashLen=0x00000000
[20:02:21.748]    __FlashArg=0x00000000
[20:02:21.748]    __FlashOp=0x00000000
[20:02:21.748]    __Result=0x00000000
[20:02:21.748]  </debugvars>
[20:02:21.748]  
[20:02:21.748]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:02:21.748]    <block atomic="false" info="">
[20:02:21.748]      __var deviceID = 0;
[20:02:21.748]        // -> [deviceID <= 0x00000000]
[20:02:21.748]      __var version = 0;
[20:02:21.748]        // -> [version <= 0x00000000]
[20:02:21.748]      __var partNum = 0;
[20:02:21.748]        // -> [partNum <= 0x00000000]
[20:02:21.748]      __var manuf = 0;
[20:02:21.752]        // -> [manuf <= 0x00000000]
[20:02:21.752]      __var isMSPM0G1X0X_G3X0X = 0;
[20:02:21.752]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:02:21.752]      __var isProduction = 0;
[20:02:21.752]        // -> [isProduction <= 0x00000000]
[20:02:21.752]      __var continueId = 0;
[20:02:21.752]        // -> [continueId <= 0x00000000]
[20:02:21.752]      deviceID =   Read32(0x41C40004);
[20:02:21.756]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:02:21.756]        // -> [deviceID <= 0x2BB8802F]
[20:02:21.756]      version = deviceID >> 28;
[20:02:21.756]        // -> [version <= 0x00000002]
[20:02:21.756]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:02:21.756]        // -> [partNum <= 0x0000BB88]
[20:02:21.756]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:02:21.756]        // -> [manuf <= 0x00000017]
[20:02:21.756]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:02:21.756]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:02:21.756]      isProduction = (version > 0);
[20:02:21.756]        // -> [isProduction <= 0x00000001]
[20:02:21.756]    </block>
[20:02:21.756]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:02:21.756]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:02:21.756]        // =>  FALSE
[20:02:21.756]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:02:21.756]    </control>
[20:02:21.756]    <control if="continueId == 4" while="" timeout="0" info="">
[20:02:21.756]      // if-block "continueId == 4"
[20:02:21.756]        // =>  FALSE
[20:02:21.756]      // skip if-block "continueId == 4"
[20:02:21.756]    </control>
[20:02:21.761]    <control if="!isProduction" while="" timeout="0" info="">
[20:02:21.761]      // if-block "!isProduction"
[20:02:21.761]        // =>  FALSE
[20:02:21.761]      // skip if-block "!isProduction"
[20:02:21.761]    </control>
[20:02:21.761]  </sequence>
[20:02:21.761]  
[20:03:08.878]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:03:08.878]  
[20:03:08.887]  <debugvars>
[20:03:08.887]    // Pre-defined
[20:03:08.887]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:03:08.887]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:03:08.887]    __dp=0x00000000
[20:03:08.887]    __ap=0x00000000
[20:03:08.887]    __traceout=0x00000000      (Trace Disabled)
[20:03:08.887]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:03:08.887]    __FlashAddr=0x00000000
[20:03:08.887]    __FlashLen=0x00000000
[20:03:08.888]    __FlashArg=0x00000000
[20:03:08.888]    __FlashOp=0x00000000
[20:03:08.888]    __Result=0x00000000
[20:03:08.888]  </debugvars>
[20:03:08.888]  
[20:03:08.888]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:03:08.888]    <block atomic="false" info="">
[20:03:08.888]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:03:08.888]        // -> [isSWJ <= 0x00000001]
[20:03:08.888]      __var hasDormant = __protocol & 0x00020000;
[20:03:08.888]        // -> [hasDormant <= 0x00000000]
[20:03:08.888]      __var protType   = __protocol & 0x0000FFFF;
[20:03:08.888]        // -> [protType <= 0x00000002]
[20:03:08.890]    </block>
[20:03:08.890]    <control if="protType == 1" while="" timeout="0" info="">
[20:03:08.890]      // if-block "protType == 1"
[20:03:08.890]        // =>  FALSE
[20:03:08.890]      // skip if-block "protType == 1"
[20:03:08.890]    </control>
[20:03:08.890]    <control if="protType == 2" while="" timeout="0" info="">
[20:03:08.890]      // if-block "protType == 2"
[20:03:08.890]        // =>  TRUE
[20:03:08.890]      <control if="isSWJ" while="" timeout="0" info="">
[20:03:08.890]        // if-block "isSWJ"
[20:03:08.890]          // =>  TRUE
[20:03:08.890]        <control if="hasDormant" while="" timeout="0" info="">
[20:03:08.890]          // if-block "hasDormant"
[20:03:08.890]            // =>  FALSE
[20:03:08.890]          // skip if-block "hasDormant"
[20:03:08.890]        </control>
[20:03:08.890]        <control if="!hasDormant" while="" timeout="0" info="">
[20:03:08.890]          // if-block "!hasDormant"
[20:03:08.890]            // =>  TRUE
[20:03:08.890]          <block atomic="false" info="">
[20:03:08.890]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:03:08.893]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:03:08.893]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:03:08.897]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:03:08.897]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:03:08.899]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:03:08.899]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:03:08.901]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:03:08.901]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:03:08.902]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:03:08.902]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:03:08.905]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:03:08.905]          </block>
[20:03:08.905]          // end if-block "!hasDormant"
[20:03:08.905]        </control>
[20:03:08.905]        // end if-block "isSWJ"
[20:03:08.905]      </control>
[20:03:08.905]      <control if="!isSWJ" while="" timeout="0" info="">
[20:03:08.905]        // if-block "!isSWJ"
[20:03:08.905]          // =>  FALSE
[20:03:08.905]        // skip if-block "!isSWJ"
[20:03:08.905]      </control>
[20:03:08.905]      <block atomic="false" info="">
[20:03:08.905]        ReadDP(0x0);
[20:03:08.905]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:03:08.905]      </block>
[20:03:08.905]      // end if-block "protType == 2"
[20:03:08.905]    </control>
[20:03:08.905]  </sequence>
[20:03:08.905]  
[20:03:08.917]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:03:08.917]  
[20:03:08.917]  <debugvars>
[20:03:08.917]    // Pre-defined
[20:03:08.917]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:03:08.917]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:03:08.917]    __dp=0x00000000
[20:03:08.917]    __ap=0x00000000
[20:03:08.917]    __traceout=0x00000000      (Trace Disabled)
[20:03:08.917]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:03:08.917]    __FlashAddr=0x00000000
[20:03:08.917]    __FlashLen=0x00000000
[20:03:08.917]    __FlashArg=0x00000000
[20:03:08.917]    __FlashOp=0x00000000
[20:03:08.917]    __Result=0x00000000
[20:03:08.917]  </debugvars>
[20:03:08.917]  
[20:03:08.917]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:03:08.917]    <block atomic="false" info="">
[20:03:08.917]      __var SW_DP_ABORT       = 0x0;
[20:03:08.917]        // -> [SW_DP_ABORT <= 0x00000000]
[20:03:08.917]      __var DP_CTRL_STAT      = 0x4;
[20:03:08.917]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:03:08.917]      __var DP_SELECT         = 0x8;
[20:03:08.917]        // -> [DP_SELECT <= 0x00000008]
[20:03:08.917]      __var powered_down      = 0;
[20:03:08.917]        // -> [powered_down <= 0x00000000]
[20:03:08.917]      WriteDP(DP_SELECT, 0x00000000);
[20:03:08.923]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:03:08.923]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:03:08.926]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:03:08.926]        // -> [powered_down <= 0x00000001]
[20:03:08.926]    </block>
[20:03:08.926]    <control if="powered_down" while="" timeout="0" info="">
[20:03:08.926]      // if-block "powered_down"
[20:03:08.926]        // =>  TRUE
[20:03:08.926]      <block atomic="false" info="">
[20:03:08.926]        Message(0, "Debug/System power-up request sent");
[20:03:08.928]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:03:08.930]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:03:08.930]      </block>
[20:03:08.930]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:03:08.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:03:08.930]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:03:08.930]        // while-condition  =>  FALSE
[20:03:08.930]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:03:08.930]      </control>
[20:03:08.930]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:03:08.930]        // if-block "(__protocol & 0xFFFF) == 1"
[20:03:08.930]          // =>  FALSE
[20:03:08.933]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:03:08.933]      </control>
[20:03:08.933]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:03:08.933]        // if-block "(__protocol & 0xFFFF) == 2"
[20:03:08.933]          // =>  TRUE
[20:03:08.933]        <block atomic="false" info="">
[20:03:08.933]          Message(0, "executing SWD power up");
[20:03:08.934]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:03:08.936]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:03:08.936]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:03:08.937]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:03:08.937]        </block>
[20:03:08.937]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:03:08.937]      </control>
[20:03:08.937]      // end if-block "powered_down"
[20:03:08.937]    </control>
[20:03:08.937]    <block atomic="false" info="">
[20:03:08.937]      __var DEBUG_PORT_VAL    = 0;
[20:03:08.937]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:03:08.937]      __var ACCESS_POINT_VAL  = 0;
[20:03:08.937]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:03:08.937]      __ap = 1; 
[20:03:08.937]        // -> [__ap <= 0x00000001]
[20:03:08.937]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:03:08.941]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:03:08.941]      __ap = 4;
[20:03:08.941]        // -> [__ap <= 0x00000004]
[20:03:08.941]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:03:08.950]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:03:08.950]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:03:08.951]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:03:08.952]    </block>
[20:03:08.952]    <block atomic="false" info="">
[20:03:08.953]      __var nReset = 0x80;
[20:03:08.953]        // -> [nReset <= 0x00000080]
[20:03:08.953]      __var canReadPins = 0;
[20:03:08.953]        // -> [canReadPins <= 0x00000000]
[20:03:08.953]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:03:08.958]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:03:08.958]        // -> [canReadPins <= 0x00000001]
[20:03:08.958]    </block>
[20:03:08.958]    <control if="" while="1" timeout="200" info="">
[20:03:08.958]      // while "1"  (timeout="200")
[20:03:08.960]      // while-condition  =>  TRUE
[20:03:08.960]      // while "1"  (timeout="200")
[20:03:08.960]      // while-condition  =>  TRUE
[20:03:08.960]      // while "1"  (timeout="200")
[20:03:08.960]      // while-condition  =>  TRUE
[20:03:08.960]      // while "1"  (timeout="200")
[20:03:08.960]      // while-condition  =>  TRUE
[20:03:08.960]      // while "1"  (timeout="200")
[20:03:08.960]      // while-condition  =>  TRUE
[20:03:08.960]      // while "1"  (timeout="200")
[20:03:08.960]      // while-condition  =>  TRUE
[20:03:08.960]      // while "1"  (timeout="200")
[20:03:08.960]      // while-condition  =>  TRUE
[20:03:08.962]      // while "1"  (timeout="200")
[20:03:08.962]      // while-condition  =>  TRUE
[20:03:08.962]      // while "1"  (timeout="200")
[20:03:08.962]      // while-condition  =>  TRUE
[20:03:08.962]      // while "1"  (timeout="200")
[20:03:08.962]      // while-condition  =>  TRUE
[20:03:08.963]      // while "1"  (timeout="200")
[20:03:08.963]      // while-condition  =>  TRUE
[20:03:08.963]      // while "1"  (timeout="200")
[20:03:08.963]      // while-condition  =>  TRUE
[20:03:08.963]      // while "1"  (timeout="200")
[20:03:08.963]      // while-condition  =>  TRUE
[20:03:08.963]      // while "1"  (timeout="200")
[20:03:08.963]      // while-condition  =>  TRUE
[20:03:08.963]      // while "1"  (timeout="200")
[20:03:08.963]      // while-condition  =>  TRUE
[20:03:08.963]      // while "1"  (timeout="200")
[20:03:08.963]      // while-condition  =>  TRUE
[20:03:08.963]      // while "1"  (timeout="200")
[20:03:08.963]      // while-condition  =>  TRUE
[20:03:08.963]      // while "1"  (timeout="200")
[20:03:08.963]      // while-condition  =>  TRUE
[20:03:08.963]      // while "1"  (timeout="200")
[20:03:08.963]      // while-condition  =>  TRUE
[20:03:08.963]      // while "1"  (timeout="200")
[20:03:08.963]      // while-condition  =>  TRUE
[20:03:08.963]      // while "1"  (timeout="200")
[20:03:08.963]      // while-condition  =>  TRUE
[20:03:08.963]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.965]      // while "1"  (timeout="200")
[20:03:08.965]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.969]      // while "1"  (timeout="200")
[20:03:08.969]      // while-condition  =>  TRUE
[20:03:08.973]      // while "1"  (timeout="200")
[20:03:08.973]      // while  =>  TIMEOUT
[20:03:08.973]      // end while "1"
[20:03:08.973]    </control>
[20:03:08.973]    <control if="canReadPins" while="" timeout="0" info="">
[20:03:08.973]      // if-block "canReadPins"
[20:03:08.973]        // =>  TRUE
[20:03:08.973]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:03:08.973]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:03:08.977]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:03:08.977]        // while-condition  =>  FALSE
[20:03:08.977]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:03:08.977]      </control>
[20:03:08.977]      // end if-block "canReadPins"
[20:03:08.977]    </control>
[20:03:08.977]    <control if="!canReadPins" while="" timeout="0" info="">
[20:03:08.978]      // if-block "!canReadPins"
[20:03:08.978]        // =>  FALSE
[20:03:08.978]      // skip if-block "!canReadPins"
[20:03:08.978]    </control>
[20:03:08.978]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:03:08.978]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:03:08.978]        // =>  TRUE
[20:03:08.978]      <block atomic="false" info="">
[20:03:08.978]        WriteAP(0x00, 0x190008);
[20:03:08.978]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:03:08.978]        WriteAP(0xF0, 0x01);
[20:03:08.981]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:03:08.981]      </block>
[20:03:08.981]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:03:08.981]    </control>
[20:03:08.981]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:03:08.981]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:03:08.981]        // =>  FALSE
[20:03:08.981]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:03:08.981]    </control>
[20:03:08.985]    <block atomic="false" info="">
[20:03:08.985]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:03:08.989]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:03:08.989]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:03:08.989]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:03:08.989]      __ap = 0; //lets make sure we reset the access point selection
[20:03:08.989]        // -> [__ap <= 0x00000000]
[20:03:08.989]    </block>
[20:03:08.989]  </sequence>
[20:03:08.989]  
[20:03:09.022]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:03:09.022]  
[20:03:09.022]  <debugvars>
[20:03:09.022]    // Pre-defined
[20:03:09.022]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:03:09.022]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:03:09.022]    __dp=0x00000000
[20:03:09.022]    __ap=0x00000000
[20:03:09.022]    __traceout=0x00000000      (Trace Disabled)
[20:03:09.022]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:03:09.022]    __FlashAddr=0x00000000
[20:03:09.022]    __FlashLen=0x00000000
[20:03:09.022]    __FlashArg=0x00000000
[20:03:09.022]    __FlashOp=0x00000000
[20:03:09.022]    __Result=0x00000000
[20:03:09.022]  </debugvars>
[20:03:09.022]  
[20:03:09.022]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:03:09.022]    <block atomic="false" info="">
[20:03:09.022]      __var deviceID = 0;
[20:03:09.025]        // -> [deviceID <= 0x00000000]
[20:03:09.025]      __var version = 0;
[20:03:09.025]        // -> [version <= 0x00000000]
[20:03:09.025]      __var partNum = 0;
[20:03:09.025]        // -> [partNum <= 0x00000000]
[20:03:09.025]      __var manuf = 0;
[20:03:09.025]        // -> [manuf <= 0x00000000]
[20:03:09.025]      __var isMSPM0G1X0X_G3X0X = 0;
[20:03:09.025]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:03:09.025]      __var isProduction = 0;
[20:03:09.025]        // -> [isProduction <= 0x00000000]
[20:03:09.025]      __var continueId = 0;
[20:03:09.025]        // -> [continueId <= 0x00000000]
[20:03:09.025]      deviceID =   Read32(0x41C40004);
[20:03:09.036]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:03:09.036]        // -> [deviceID <= 0x2BB8802F]
[20:03:09.036]      version = deviceID >> 28;
[20:03:09.036]        // -> [version <= 0x00000002]
[20:03:09.036]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:03:09.036]        // -> [partNum <= 0x0000BB88]
[20:03:09.036]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:03:09.036]        // -> [manuf <= 0x00000017]
[20:03:09.036]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:03:09.036]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:03:09.036]      isProduction = (version > 0);
[20:03:09.036]        // -> [isProduction <= 0x00000001]
[20:03:09.036]    </block>
[20:03:09.036]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:03:09.036]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:03:09.036]        // =>  FALSE
[20:03:09.036]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:03:09.038]    </control>
[20:03:09.038]    <control if="continueId == 4" while="" timeout="0" info="">
[20:03:09.038]      // if-block "continueId == 4"
[20:03:09.038]        // =>  FALSE
[20:03:09.038]      // skip if-block "continueId == 4"
[20:03:09.038]    </control>
[20:03:09.038]    <control if="!isProduction" while="" timeout="0" info="">
[20:03:09.038]      // if-block "!isProduction"
[20:03:09.038]        // =>  FALSE
[20:03:09.038]      // skip if-block "!isProduction"
[20:03:09.038]    </control>
[20:03:09.038]  </sequence>
[20:03:09.038]  
[20:03:17.958]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:03:17.958]  
[20:03:17.966]  <debugvars>
[20:03:17.967]    // Pre-defined
[20:03:17.967]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:03:17.967]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:03:17.967]    __dp=0x00000000
[20:03:17.967]    __ap=0x00000000
[20:03:17.967]    __traceout=0x00000000      (Trace Disabled)
[20:03:17.967]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:03:17.967]    __FlashAddr=0x00000000
[20:03:17.967]    __FlashLen=0x00000000
[20:03:17.967]    __FlashArg=0x00000000
[20:03:17.967]    __FlashOp=0x00000000
[20:03:17.967]    __Result=0x00000000
[20:03:17.967]  </debugvars>
[20:03:17.967]  
[20:03:17.967]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:03:17.967]    <block atomic="false" info="">
[20:03:17.967]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:03:17.967]        // -> [isSWJ <= 0x00000001]
[20:03:17.967]      __var hasDormant = __protocol & 0x00020000;
[20:03:17.967]        // -> [hasDormant <= 0x00000000]
[20:03:17.969]      __var protType   = __protocol & 0x0000FFFF;
[20:03:17.969]        // -> [protType <= 0x00000002]
[20:03:17.969]    </block>
[20:03:17.969]    <control if="protType == 1" while="" timeout="0" info="">
[20:03:17.969]      // if-block "protType == 1"
[20:03:17.969]        // =>  FALSE
[20:03:17.969]      // skip if-block "protType == 1"
[20:03:17.969]    </control>
[20:03:17.969]    <control if="protType == 2" while="" timeout="0" info="">
[20:03:17.969]      // if-block "protType == 2"
[20:03:17.969]        // =>  TRUE
[20:03:17.969]      <control if="isSWJ" while="" timeout="0" info="">
[20:03:17.969]        // if-block "isSWJ"
[20:03:17.969]          // =>  TRUE
[20:03:17.969]        <control if="hasDormant" while="" timeout="0" info="">
[20:03:17.969]          // if-block "hasDormant"
[20:03:17.969]            // =>  FALSE
[20:03:17.970]          // skip if-block "hasDormant"
[20:03:17.970]        </control>
[20:03:17.970]        <control if="!hasDormant" while="" timeout="0" info="">
[20:03:17.970]          // if-block "!hasDormant"
[20:03:17.970]            // =>  TRUE
[20:03:17.970]          <block atomic="false" info="">
[20:03:17.970]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:03:17.973]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:03:17.973]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:03:17.976]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:03:17.976]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:03:17.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:03:17.977]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:03:17.978]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:03:17.978]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:03:17.981]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:03:17.981]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:03:17.983]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:03:17.983]          </block>
[20:03:17.983]          // end if-block "!hasDormant"
[20:03:17.983]        </control>
[20:03:17.983]        // end if-block "isSWJ"
[20:03:17.983]      </control>
[20:03:17.983]      <control if="!isSWJ" while="" timeout="0" info="">
[20:03:17.983]        // if-block "!isSWJ"
[20:03:17.983]          // =>  FALSE
[20:03:17.983]        // skip if-block "!isSWJ"
[20:03:17.984]      </control>
[20:03:17.984]      <block atomic="false" info="">
[20:03:17.984]        ReadDP(0x0);
[20:03:17.987]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:03:17.987]      </block>
[20:03:17.987]      // end if-block "protType == 2"
[20:03:17.987]    </control>
[20:03:17.987]  </sequence>
[20:03:17.987]  
[20:03:17.992]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:03:17.992]  
[20:03:17.992]  <debugvars>
[20:03:17.992]    // Pre-defined
[20:03:17.992]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:03:17.992]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:03:17.992]    __dp=0x00000000
[20:03:17.992]    __ap=0x00000000
[20:03:17.992]    __traceout=0x00000000      (Trace Disabled)
[20:03:17.992]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:03:17.992]    __FlashAddr=0x00000000
[20:03:17.992]    __FlashLen=0x00000000
[20:03:17.992]    __FlashArg=0x00000000
[20:03:17.992]    __FlashOp=0x00000000
[20:03:17.992]    __Result=0x00000000
[20:03:17.992]  </debugvars>
[20:03:17.992]  
[20:03:17.992]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:03:17.992]    <block atomic="false" info="">
[20:03:17.992]      __var SW_DP_ABORT       = 0x0;
[20:03:17.992]        // -> [SW_DP_ABORT <= 0x00000000]
[20:03:17.992]      __var DP_CTRL_STAT      = 0x4;
[20:03:17.992]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:03:17.992]      __var DP_SELECT         = 0x8;
[20:03:17.995]        // -> [DP_SELECT <= 0x00000008]
[20:03:17.995]      __var powered_down      = 0;
[20:03:17.995]        // -> [powered_down <= 0x00000000]
[20:03:17.995]      WriteDP(DP_SELECT, 0x00000000);
[20:03:17.995]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:03:17.995]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:03:17.998]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:03:17.998]        // -> [powered_down <= 0x00000001]
[20:03:17.998]    </block>
[20:03:18.000]    <control if="powered_down" while="" timeout="0" info="">
[20:03:18.000]      // if-block "powered_down"
[20:03:18.000]        // =>  TRUE
[20:03:18.000]      <block atomic="false" info="">
[20:03:18.000]        Message(0, "Debug/System power-up request sent");
[20:03:18.002]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:03:18.003]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:03:18.004]      </block>
[20:03:18.004]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:03:18.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:03:18.006]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:03:18.006]        // while-condition  =>  FALSE
[20:03:18.006]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:03:18.006]      </control>
[20:03:18.006]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:03:18.006]        // if-block "(__protocol & 0xFFFF) == 1"
[20:03:18.006]          // =>  FALSE
[20:03:18.006]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:03:18.006]      </control>
[20:03:18.006]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:03:18.006]        // if-block "(__protocol & 0xFFFF) == 2"
[20:03:18.006]          // =>  TRUE
[20:03:18.006]        <block atomic="false" info="">
[20:03:18.007]          Message(0, "executing SWD power up");
[20:03:18.009]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:03:18.013]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:03:18.013]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:03:18.015]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:03:18.015]        </block>
[20:03:18.015]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:03:18.015]      </control>
[20:03:18.015]      // end if-block "powered_down"
[20:03:18.015]    </control>
[20:03:18.015]    <block atomic="false" info="">
[20:03:18.015]      __var DEBUG_PORT_VAL    = 0;
[20:03:18.015]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:03:18.015]      __var ACCESS_POINT_VAL  = 0;
[20:03:18.015]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:03:18.017]      __ap = 1; 
[20:03:18.017]        // -> [__ap <= 0x00000001]
[20:03:18.017]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:03:18.019]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:03:18.019]      __ap = 4;
[20:03:18.019]        // -> [__ap <= 0x00000004]
[20:03:18.021]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:03:18.024]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:03:18.024]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:03:18.024]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:03:18.026]    </block>
[20:03:18.026]    <block atomic="false" info="">
[20:03:18.026]      __var nReset = 0x80;
[20:03:18.027]        // -> [nReset <= 0x00000080]
[20:03:18.027]      __var canReadPins = 0;
[20:03:18.027]        // -> [canReadPins <= 0x00000000]
[20:03:18.027]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:03:18.030]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:03:18.030]        // -> [canReadPins <= 0x00000001]
[20:03:18.030]    </block>
[20:03:18.030]    <control if="" while="1" timeout="200" info="">
[20:03:18.030]      // while "1"  (timeout="200")
[20:03:18.030]      // while-condition  =>  TRUE
[20:03:18.030]      // while "1"  (timeout="200")
[20:03:18.030]      // while-condition  =>  TRUE
[20:03:18.030]      // while "1"  (timeout="200")
[20:03:18.030]      // while-condition  =>  TRUE
[20:03:18.031]      // while "1"  (timeout="200")
[20:03:18.031]      // while-condition  =>  TRUE
[20:03:18.031]      // while "1"  (timeout="200")
[20:03:18.031]      // while-condition  =>  TRUE
[20:03:18.031]      // while "1"  (timeout="200")
[20:03:18.031]      // while-condition  =>  TRUE
[20:03:18.031]      // while "1"  (timeout="200")
[20:03:18.031]      // while-condition  =>  TRUE
[20:03:18.031]      // while "1"  (timeout="200")
[20:03:18.031]      // while-condition  =>  TRUE
[20:03:18.031]      // while "1"  (timeout="200")
[20:03:18.031]      // while-condition  =>  TRUE
[20:03:18.031]      // while "1"  (timeout="200")
[20:03:18.033]      // while-condition  =>  TRUE
[20:03:18.033]      // while "1"  (timeout="200")
[20:03:18.033]      // while-condition  =>  TRUE
[20:03:18.033]      // while "1"  (timeout="200")
[20:03:18.033]      // while-condition  =>  TRUE
[20:03:18.033]      // while "1"  (timeout="200")
[20:03:18.033]      // while-condition  =>  TRUE
[20:03:18.033]      // while "1"  (timeout="200")
[20:03:18.033]      // while-condition  =>  TRUE
[20:03:18.033]      // while "1"  (timeout="200")
[20:03:18.033]      // while-condition  =>  TRUE
[20:03:18.033]      // while "1"  (timeout="200")
[20:03:18.034]      // while-condition  =>  TRUE
[20:03:18.034]      // while "1"  (timeout="200")
[20:03:18.034]      // while-condition  =>  TRUE
[20:03:18.034]      // while "1"  (timeout="200")
[20:03:18.034]      // while-condition  =>  TRUE
[20:03:18.034]      // while "1"  (timeout="200")
[20:03:18.034]      // while-condition  =>  TRUE
[20:03:18.034]      // while "1"  (timeout="200")
[20:03:18.034]      // while-condition  =>  TRUE
[20:03:18.034]      // while "1"  (timeout="200")
[20:03:18.035]      // while-condition  =>  TRUE
[20:03:18.035]      // while "1"  (timeout="200")
[20:03:18.035]      // while  =>  TIMEOUT
[20:03:18.035]      // end while "1"
[20:03:18.035]    </control>
[20:03:18.035]    <control if="canReadPins" while="" timeout="0" info="">
[20:03:18.035]      // if-block "canReadPins"
[20:03:18.035]        // =>  TRUE
[20:03:18.035]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:03:18.035]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:03:18.038]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:03:18.038]        // while-condition  =>  FALSE
[20:03:18.038]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:03:18.038]      </control>
[20:03:18.038]      // end if-block "canReadPins"
[20:03:18.038]    </control>
[20:03:18.038]    <control if="!canReadPins" while="" timeout="0" info="">
[20:03:18.038]      // if-block "!canReadPins"
[20:03:18.038]        // =>  FALSE
[20:03:18.039]      // skip if-block "!canReadPins"
[20:03:18.039]    </control>
[20:03:18.039]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:03:18.039]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:03:18.039]        // =>  TRUE
[20:03:18.039]      <block atomic="false" info="">
[20:03:18.039]        WriteAP(0x00, 0x190008);
[20:03:18.041]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:03:18.041]        WriteAP(0xF0, 0x01);
[20:03:18.045]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:03:18.045]      </block>
[20:03:18.045]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:03:18.045]    </control>
[20:03:18.045]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:03:18.045]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:03:18.045]        // =>  FALSE
[20:03:18.045]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:03:18.047]    </control>
[20:03:18.047]    <block atomic="false" info="">
[20:03:18.047]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:03:18.050]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:03:18.051]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:03:18.051]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:03:18.051]      __ap = 0; //lets make sure we reset the access point selection
[20:03:18.054]        // -> [__ap <= 0x00000000]
[20:03:18.054]    </block>
[20:03:18.054]  </sequence>
[20:03:18.054]  
[20:03:18.078]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:03:18.078]  
[20:03:18.078]  <debugvars>
[20:03:18.078]    // Pre-defined
[20:03:18.078]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:03:18.078]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:03:18.078]    __dp=0x00000000
[20:03:18.078]    __ap=0x00000000
[20:03:18.078]    __traceout=0x00000000      (Trace Disabled)
[20:03:18.078]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:03:18.078]    __FlashAddr=0x00000000
[20:03:18.078]    __FlashLen=0x00000000
[20:03:18.078]    __FlashArg=0x00000000
[20:03:18.078]    __FlashOp=0x00000000
[20:03:18.078]    __Result=0x00000000
[20:03:18.082]  </debugvars>
[20:03:18.082]  
[20:03:18.082]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:03:18.082]    <block atomic="false" info="">
[20:03:18.082]      __var deviceID = 0;
[20:03:18.082]        // -> [deviceID <= 0x00000000]
[20:03:18.082]      __var version = 0;
[20:03:18.082]        // -> [version <= 0x00000000]
[20:03:18.082]      __var partNum = 0;
[20:03:18.082]        // -> [partNum <= 0x00000000]
[20:03:18.082]      __var manuf = 0;
[20:03:18.082]        // -> [manuf <= 0x00000000]
[20:03:18.082]      __var isMSPM0G1X0X_G3X0X = 0;
[20:03:18.082]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:03:18.082]      __var isProduction = 0;
[20:03:18.082]        // -> [isProduction <= 0x00000000]
[20:03:18.082]      __var continueId = 0;
[20:03:18.082]        // -> [continueId <= 0x00000000]
[20:03:18.082]      deviceID =   Read32(0x41C40004);
[20:03:18.089]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:03:18.090]        // -> [deviceID <= 0x2BB8802F]
[20:03:18.090]      version = deviceID >> 28;
[20:03:18.090]        // -> [version <= 0x00000002]
[20:03:18.090]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:03:18.090]        // -> [partNum <= 0x0000BB88]
[20:03:18.090]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:03:18.090]        // -> [manuf <= 0x00000017]
[20:03:18.090]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:03:18.090]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:03:18.090]      isProduction = (version > 0);
[20:03:18.090]        // -> [isProduction <= 0x00000001]
[20:03:18.090]    </block>
[20:03:18.090]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:03:18.090]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:03:18.090]        // =>  FALSE
[20:03:18.090]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:03:18.090]    </control>
[20:03:18.092]    <control if="continueId == 4" while="" timeout="0" info="">
[20:03:18.092]      // if-block "continueId == 4"
[20:03:18.092]        // =>  FALSE
[20:03:18.092]      // skip if-block "continueId == 4"
[20:03:18.092]    </control>
[20:03:18.092]    <control if="!isProduction" while="" timeout="0" info="">
[20:03:18.092]      // if-block "!isProduction"
[20:03:18.092]        // =>  FALSE
[20:03:18.092]      // skip if-block "!isProduction"
[20:03:18.092]    </control>
[20:03:18.092]  </sequence>
[20:03:18.092]  
[20:04:07.347]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:04:07.347]  
[20:04:07.359]  <debugvars>
[20:04:07.359]    // Pre-defined
[20:04:07.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:04:07.359]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:04:07.359]    __dp=0x00000000
[20:04:07.359]    __ap=0x00000000
[20:04:07.359]    __traceout=0x00000000      (Trace Disabled)
[20:04:07.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:04:07.359]    __FlashAddr=0x00000000
[20:04:07.359]    __FlashLen=0x00000000
[20:04:07.359]    __FlashArg=0x00000000
[20:04:07.359]    __FlashOp=0x00000000
[20:04:07.359]    __Result=0x00000000
[20:04:07.359]  </debugvars>
[20:04:07.359]  
[20:04:07.359]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:04:07.359]    <block atomic="false" info="">
[20:04:07.359]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:04:07.359]        // -> [isSWJ <= 0x00000001]
[20:04:07.359]      __var hasDormant = __protocol & 0x00020000;
[20:04:07.359]        // -> [hasDormant <= 0x00000000]
[20:04:07.359]      __var protType   = __protocol & 0x0000FFFF;
[20:04:07.359]        // -> [protType <= 0x00000002]
[20:04:07.359]    </block>
[20:04:07.359]    <control if="protType == 1" while="" timeout="0" info="">
[20:04:07.359]      // if-block "protType == 1"
[20:04:07.359]        // =>  FALSE
[20:04:07.359]      // skip if-block "protType == 1"
[20:04:07.359]    </control>
[20:04:07.359]    <control if="protType == 2" while="" timeout="0" info="">
[20:04:07.359]      // if-block "protType == 2"
[20:04:07.359]        // =>  TRUE
[20:04:07.359]      <control if="isSWJ" while="" timeout="0" info="">
[20:04:07.359]        // if-block "isSWJ"
[20:04:07.359]          // =>  TRUE
[20:04:07.359]        <control if="hasDormant" while="" timeout="0" info="">
[20:04:07.364]          // if-block "hasDormant"
[20:04:07.364]            // =>  FALSE
[20:04:07.364]          // skip if-block "hasDormant"
[20:04:07.364]        </control>
[20:04:07.364]        <control if="!hasDormant" while="" timeout="0" info="">
[20:04:07.364]          // if-block "!hasDormant"
[20:04:07.364]            // =>  TRUE
[20:04:07.364]          <block atomic="false" info="">
[20:04:07.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:04:07.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:04:07.365]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:04:07.367]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:04:07.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:04:07.368]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:04:07.368]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:04:07.371]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:04:07.371]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:04:07.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:04:07.372]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:04:07.374]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:04:07.374]          </block>
[20:04:07.374]          // end if-block "!hasDormant"
[20:04:07.375]        </control>
[20:04:07.375]        // end if-block "isSWJ"
[20:04:07.375]      </control>
[20:04:07.375]      <control if="!isSWJ" while="" timeout="0" info="">
[20:04:07.375]        // if-block "!isSWJ"
[20:04:07.375]          // =>  FALSE
[20:04:07.375]        // skip if-block "!isSWJ"
[20:04:07.375]      </control>
[20:04:07.375]      <block atomic="false" info="">
[20:04:07.375]        ReadDP(0x0);
[20:04:07.377]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:04:07.377]      </block>
[20:04:07.377]      // end if-block "protType == 2"
[20:04:07.377]    </control>
[20:04:07.377]  </sequence>
[20:04:07.377]  
[20:04:07.381]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:04:07.381]  
[20:04:07.381]  <debugvars>
[20:04:07.381]    // Pre-defined
[20:04:07.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:04:07.381]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:04:07.381]    __dp=0x00000000
[20:04:07.381]    __ap=0x00000000
[20:04:07.381]    __traceout=0x00000000      (Trace Disabled)
[20:04:07.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:04:07.381]    __FlashAddr=0x00000000
[20:04:07.381]    __FlashLen=0x00000000
[20:04:07.381]    __FlashArg=0x00000000
[20:04:07.381]    __FlashOp=0x00000000
[20:04:07.381]    __Result=0x00000000
[20:04:07.381]  </debugvars>
[20:04:07.381]  
[20:04:07.381]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:04:07.381]    <block atomic="false" info="">
[20:04:07.381]      __var SW_DP_ABORT       = 0x0;
[20:04:07.381]        // -> [SW_DP_ABORT <= 0x00000000]
[20:04:07.381]      __var DP_CTRL_STAT      = 0x4;
[20:04:07.381]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:04:07.381]      __var DP_SELECT         = 0x8;
[20:04:07.381]        // -> [DP_SELECT <= 0x00000008]
[20:04:07.381]      __var powered_down      = 0;
[20:04:07.381]        // -> [powered_down <= 0x00000000]
[20:04:07.381]      WriteDP(DP_SELECT, 0x00000000);
[20:04:07.389]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:04:07.389]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:04:07.393]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:04:07.393]        // -> [powered_down <= 0x00000001]
[20:04:07.393]    </block>
[20:04:07.393]    <control if="powered_down" while="" timeout="0" info="">
[20:04:07.393]      // if-block "powered_down"
[20:04:07.393]        // =>  TRUE
[20:04:07.393]      <block atomic="false" info="">
[20:04:07.393]        Message(0, "Debug/System power-up request sent");
[20:04:07.396]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:04:07.400]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:04:07.400]      </block>
[20:04:07.400]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:04:07.400]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:04:07.406]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:04:07.406]        // while-condition  =>  FALSE
[20:04:07.406]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:04:07.406]      </control>
[20:04:07.406]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:04:07.406]        // if-block "(__protocol & 0xFFFF) == 1"
[20:04:07.406]          // =>  FALSE
[20:04:07.406]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:04:07.406]      </control>
[20:04:07.409]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:04:07.409]        // if-block "(__protocol & 0xFFFF) == 2"
[20:04:07.409]          // =>  TRUE
[20:04:07.409]        <block atomic="false" info="">
[20:04:07.409]          Message(0, "executing SWD power up");
[20:04:07.409]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:04:07.413]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:04:07.413]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:04:07.416]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:04:07.416]        </block>
[20:04:07.416]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:04:07.416]      </control>
[20:04:07.416]      // end if-block "powered_down"
[20:04:07.416]    </control>
[20:04:07.416]    <block atomic="false" info="">
[20:04:07.416]      __var DEBUG_PORT_VAL    = 0;
[20:04:07.416]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:04:07.416]      __var ACCESS_POINT_VAL  = 0;
[20:04:07.416]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:04:07.416]      __ap = 1; 
[20:04:07.416]        // -> [__ap <= 0x00000001]
[20:04:07.416]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:04:07.422]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:04:07.422]      __ap = 4;
[20:04:07.422]        // -> [__ap <= 0x00000004]
[20:04:07.422]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:04:07.427]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:04:07.427]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:04:07.427]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:04:07.430]    </block>
[20:04:07.430]    <block atomic="false" info="">
[20:04:07.430]      __var nReset = 0x80;
[20:04:07.430]        // -> [nReset <= 0x00000080]
[20:04:07.430]      __var canReadPins = 0;
[20:04:07.431]        // -> [canReadPins <= 0x00000000]
[20:04:07.431]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:04:07.433]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:04:07.433]        // -> [canReadPins <= 0x00000001]
[20:04:07.433]    </block>
[20:04:07.433]    <control if="" while="1" timeout="200" info="">
[20:04:07.434]      // while "1"  (timeout="200")
[20:04:07.434]      // while-condition  =>  TRUE
[20:04:07.434]      // while "1"  (timeout="200")
[20:04:07.434]      // while-condition  =>  TRUE
[20:04:07.434]      // while "1"  (timeout="200")
[20:04:07.434]      // while-condition  =>  TRUE
[20:04:07.434]      // while "1"  (timeout="200")
[20:04:07.434]      // while-condition  =>  TRUE
[20:04:07.434]      // while "1"  (timeout="200")
[20:04:07.434]      // while-condition  =>  TRUE
[20:04:07.434]      // while "1"  (timeout="200")
[20:04:07.435]      // while-condition  =>  TRUE
[20:04:07.435]      // while "1"  (timeout="200")
[20:04:07.435]      // while-condition  =>  TRUE
[20:04:07.435]      // while "1"  (timeout="200")
[20:04:07.435]      // while-condition  =>  TRUE
[20:04:07.435]      // while "1"  (timeout="200")
[20:04:07.435]      // while-condition  =>  TRUE
[20:04:07.435]      // while "1"  (timeout="200")
[20:04:07.436]      // while-condition  =>  TRUE
[20:04:07.436]      // while "1"  (timeout="200")
[20:04:07.436]      // while-condition  =>  TRUE
[20:04:07.436]      // while "1"  (timeout="200")
[20:04:07.436]      // while-condition  =>  TRUE
[20:04:07.436]      // while "1"  (timeout="200")
[20:04:07.436]      // while-condition  =>  TRUE
[20:04:07.436]      // while "1"  (timeout="200")
[20:04:07.436]      // while-condition  =>  TRUE
[20:04:07.436]      // while "1"  (timeout="200")
[20:04:07.437]      // while-condition  =>  TRUE
[20:04:07.437]      // while "1"  (timeout="200")
[20:04:07.437]      // while-condition  =>  TRUE
[20:04:07.437]      // while "1"  (timeout="200")
[20:04:07.437]      // while-condition  =>  TRUE
[20:04:07.437]      // while "1"  (timeout="200")
[20:04:07.437]      // while-condition  =>  TRUE
[20:04:07.437]      // while "1"  (timeout="200")
[20:04:07.437]      // while-condition  =>  TRUE
[20:04:07.437]      // while "1"  (timeout="200")
[20:04:07.437]      // while-condition  =>  TRUE
[20:04:07.438]      // while "1"  (timeout="200")
[20:04:07.438]      // while-condition  =>  TRUE
[20:04:07.438]      // while "1"  (timeout="200")
[20:04:07.438]      // while-condition  =>  TRUE
[20:04:07.438]      // while "1"  (timeout="200")
[20:04:07.438]      // while-condition  =>  TRUE
[20:04:07.438]      // while "1"  (timeout="200")
[20:04:07.438]      // while-condition  =>  TRUE
[20:04:07.438]      // while "1"  (timeout="200")
[20:04:07.438]      // while-condition  =>  TRUE
[20:04:07.438]      // while "1"  (timeout="200")
[20:04:07.439]      // while-condition  =>  TRUE
[20:04:07.439]      // while "1"  (timeout="200")
[20:04:07.439]      // while-condition  =>  TRUE
[20:04:07.439]      // while "1"  (timeout="200")
[20:04:07.439]      // while-condition  =>  TRUE
[20:04:07.439]      // while "1"  (timeout="200")
[20:04:07.439]      // while-condition  =>  TRUE
[20:04:07.439]      // while "1"  (timeout="200")
[20:04:07.439]      // while-condition  =>  TRUE
[20:04:07.439]      // while "1"  (timeout="200")
[20:04:07.439]      // while-condition  =>  TRUE
[20:04:07.440]      // while "1"  (timeout="200")
[20:04:07.440]      // while-condition  =>  TRUE
[20:04:07.440]      // while "1"  (timeout="200")
[20:04:07.440]      // while-condition  =>  TRUE
[20:04:07.440]      // while "1"  (timeout="200")
[20:04:07.440]      // while-condition  =>  TRUE
[20:04:07.440]      // while "1"  (timeout="200")
[20:04:07.440]      // while-condition  =>  TRUE
[20:04:07.440]      // while "1"  (timeout="200")
[20:04:07.440]      // while-condition  =>  TRUE
[20:04:07.440]      // while "1"  (timeout="200")
[20:04:07.440]      // while-condition  =>  TRUE
[20:04:07.441]      // while "1"  (timeout="200")
[20:04:07.441]      // while  =>  TIMEOUT
[20:04:07.441]      // end while "1"
[20:04:07.441]    </control>
[20:04:07.441]    <control if="canReadPins" while="" timeout="0" info="">
[20:04:07.441]      // if-block "canReadPins"
[20:04:07.441]        // =>  TRUE
[20:04:07.441]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:04:07.441]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:04:07.443]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:04:07.443]        // while-condition  =>  FALSE
[20:04:07.443]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:04:07.443]      </control>
[20:04:07.443]      // end if-block "canReadPins"
[20:04:07.444]    </control>
[20:04:07.444]    <control if="!canReadPins" while="" timeout="0" info="">
[20:04:07.444]      // if-block "!canReadPins"
[20:04:07.444]        // =>  FALSE
[20:04:07.444]      // skip if-block "!canReadPins"
[20:04:07.444]    </control>
[20:04:07.444]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:04:07.444]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:04:07.444]        // =>  TRUE
[20:04:07.444]      <block atomic="false" info="">
[20:04:07.444]        WriteAP(0x00, 0x190008);
[20:04:07.447]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:04:07.447]        WriteAP(0xF0, 0x01);
[20:04:07.454]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:04:07.454]      </block>
[20:04:07.455]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:04:07.455]    </control>
[20:04:07.455]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:04:07.455]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:04:07.455]        // =>  FALSE
[20:04:07.455]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:04:07.455]    </control>
[20:04:07.455]    <block atomic="false" info="">
[20:04:07.455]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:04:07.458]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:04:07.458]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:04:07.458]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:04:07.459]      __ap = 0; //lets make sure we reset the access point selection
[20:04:07.459]        // -> [__ap <= 0x00000000]
[20:04:07.459]    </block>
[20:04:07.459]  </sequence>
[20:04:07.459]  
[20:04:07.487]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:04:07.487]  
[20:04:07.487]  <debugvars>
[20:04:07.487]    // Pre-defined
[20:04:07.487]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:04:07.487]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:04:07.487]    __dp=0x00000000
[20:04:07.487]    __ap=0x00000000
[20:04:07.487]    __traceout=0x00000000      (Trace Disabled)
[20:04:07.487]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:04:07.487]    __FlashAddr=0x00000000
[20:04:07.487]    __FlashLen=0x00000000
[20:04:07.487]    __FlashArg=0x00000000
[20:04:07.487]    __FlashOp=0x00000000
[20:04:07.487]    __Result=0x00000000
[20:04:07.487]  </debugvars>
[20:04:07.487]  
[20:04:07.487]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:04:07.487]    <block atomic="false" info="">
[20:04:07.487]      __var deviceID = 0;
[20:04:07.487]        // -> [deviceID <= 0x00000000]
[20:04:07.487]      __var version = 0;
[20:04:07.487]        // -> [version <= 0x00000000]
[20:04:07.487]      __var partNum = 0;
[20:04:07.487]        // -> [partNum <= 0x00000000]
[20:04:07.487]      __var manuf = 0;
[20:04:07.487]        // -> [manuf <= 0x00000000]
[20:04:07.487]      __var isMSPM0G1X0X_G3X0X = 0;
[20:04:07.487]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:04:07.487]      __var isProduction = 0;
[20:04:07.487]        // -> [isProduction <= 0x00000000]
[20:04:07.487]      __var continueId = 0;
[20:04:07.491]        // -> [continueId <= 0x00000000]
[20:04:07.491]      deviceID =   Read32(0x41C40004);
[20:04:07.495]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:04:07.495]        // -> [deviceID <= 0x2BB8802F]
[20:04:07.495]      version = deviceID >> 28;
[20:04:07.495]        // -> [version <= 0x00000002]
[20:04:07.495]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:04:07.495]        // -> [partNum <= 0x0000BB88]
[20:04:07.496]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:04:07.496]        // -> [manuf <= 0x00000017]
[20:04:07.496]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:04:07.496]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:04:07.496]      isProduction = (version > 0);
[20:04:07.496]        // -> [isProduction <= 0x00000001]
[20:04:07.496]    </block>
[20:04:07.496]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:04:07.496]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:04:07.497]        // =>  FALSE
[20:04:07.497]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:04:07.497]    </control>
[20:04:07.497]    <control if="continueId == 4" while="" timeout="0" info="">
[20:04:07.497]      // if-block "continueId == 4"
[20:04:07.497]        // =>  FALSE
[20:04:07.497]      // skip if-block "continueId == 4"
[20:04:07.497]    </control>
[20:04:07.497]    <control if="!isProduction" while="" timeout="0" info="">
[20:04:07.497]      // if-block "!isProduction"
[20:04:07.497]        // =>  FALSE
[20:04:07.497]      // skip if-block "!isProduction"
[20:04:07.497]    </control>
[20:04:07.497]  </sequence>
[20:04:07.497]  
[20:05:23.983]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:05:23.983]  
[20:05:23.994]  <debugvars>
[20:05:23.994]    // Pre-defined
[20:05:23.994]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:05:23.994]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:05:23.994]    __dp=0x00000000
[20:05:23.994]    __ap=0x00000000
[20:05:23.994]    __traceout=0x00000000      (Trace Disabled)
[20:05:23.994]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:05:23.994]    __FlashAddr=0x00000000
[20:05:23.994]    __FlashLen=0x00000000
[20:05:23.995]    __FlashArg=0x00000000
[20:05:23.995]    __FlashOp=0x00000000
[20:05:23.995]    __Result=0x00000000
[20:05:23.995]  </debugvars>
[20:05:23.995]  
[20:05:23.995]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:05:23.995]    <block atomic="false" info="">
[20:05:23.995]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:05:23.995]        // -> [isSWJ <= 0x00000001]
[20:05:23.995]      __var hasDormant = __protocol & 0x00020000;
[20:05:23.995]        // -> [hasDormant <= 0x00000000]
[20:05:23.995]      __var protType   = __protocol & 0x0000FFFF;
[20:05:23.995]        // -> [protType <= 0x00000002]
[20:05:23.995]    </block>
[20:05:23.995]    <control if="protType == 1" while="" timeout="0" info="">
[20:05:23.995]      // if-block "protType == 1"
[20:05:23.995]        // =>  FALSE
[20:05:23.995]      // skip if-block "protType == 1"
[20:05:23.995]    </control>
[20:05:23.995]    <control if="protType == 2" while="" timeout="0" info="">
[20:05:23.995]      // if-block "protType == 2"
[20:05:23.995]        // =>  TRUE
[20:05:23.995]      <control if="isSWJ" while="" timeout="0" info="">
[20:05:23.995]        // if-block "isSWJ"
[20:05:23.995]          // =>  TRUE
[20:05:23.995]        <control if="hasDormant" while="" timeout="0" info="">
[20:05:23.995]          // if-block "hasDormant"
[20:05:23.998]            // =>  FALSE
[20:05:23.998]          // skip if-block "hasDormant"
[20:05:23.998]        </control>
[20:05:23.998]        <control if="!hasDormant" while="" timeout="0" info="">
[20:05:23.998]          // if-block "!hasDormant"
[20:05:23.998]            // =>  TRUE
[20:05:23.998]          <block atomic="false" info="">
[20:05:23.998]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:05:24.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:05:24.006]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:05:24.006]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:05:24.008]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:05:24.010]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:05:24.010]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:05:24.010]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:05:24.010]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:05:24.014]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:05:24.014]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:05:24.018]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:05:24.018]          </block>
[20:05:24.018]          // end if-block "!hasDormant"
[20:05:24.018]        </control>
[20:05:24.018]        // end if-block "isSWJ"
[20:05:24.018]      </control>
[20:05:24.018]      <control if="!isSWJ" while="" timeout="0" info="">
[20:05:24.018]        // if-block "!isSWJ"
[20:05:24.018]          // =>  FALSE
[20:05:24.018]        // skip if-block "!isSWJ"
[20:05:24.018]      </control>
[20:05:24.018]      <block atomic="false" info="">
[20:05:24.018]        ReadDP(0x0);
[20:05:24.024]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:05:24.024]      </block>
[20:05:24.024]      // end if-block "protType == 2"
[20:05:24.024]    </control>
[20:05:24.024]  </sequence>
[20:05:24.024]  
[20:05:24.031]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:05:24.031]  
[20:05:24.035]  <debugvars>
[20:05:24.035]    // Pre-defined
[20:05:24.035]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:05:24.035]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:05:24.035]    __dp=0x00000000
[20:05:24.035]    __ap=0x00000000
[20:05:24.035]    __traceout=0x00000000      (Trace Disabled)
[20:05:24.035]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:05:24.035]    __FlashAddr=0x00000000
[20:05:24.035]    __FlashLen=0x00000000
[20:05:24.035]    __FlashArg=0x00000000
[20:05:24.035]    __FlashOp=0x00000000
[20:05:24.035]    __Result=0x00000000
[20:05:24.035]  </debugvars>
[20:05:24.036]  
[20:05:24.036]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:05:24.036]    <block atomic="false" info="">
[20:05:24.036]      __var SW_DP_ABORT       = 0x0;
[20:05:24.036]        // -> [SW_DP_ABORT <= 0x00000000]
[20:05:24.036]      __var DP_CTRL_STAT      = 0x4;
[20:05:24.037]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:05:24.037]      __var DP_SELECT         = 0x8;
[20:05:24.037]        // -> [DP_SELECT <= 0x00000008]
[20:05:24.037]      __var powered_down      = 0;
[20:05:24.037]        // -> [powered_down <= 0x00000000]
[20:05:24.037]      WriteDP(DP_SELECT, 0x00000000);
[20:05:24.039]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:05:24.039]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:05:24.039]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:05:24.039]        // -> [powered_down <= 0x00000001]
[20:05:24.039]    </block>
[20:05:24.039]    <control if="powered_down" while="" timeout="0" info="">
[20:05:24.043]      // if-block "powered_down"
[20:05:24.043]        // =>  TRUE
[20:05:24.043]      <block atomic="false" info="">
[20:05:24.043]        Message(0, "Debug/System power-up request sent");
[20:05:24.043]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:05:24.046]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:05:24.046]      </block>
[20:05:24.046]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:05:24.047]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:05:24.048]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:05:24.048]        // while-condition  =>  FALSE
[20:05:24.048]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:05:24.048]      </control>
[20:05:24.048]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:05:24.048]        // if-block "(__protocol & 0xFFFF) == 1"
[20:05:24.048]          // =>  FALSE
[20:05:24.048]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:05:24.048]      </control>
[20:05:24.048]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:05:24.048]        // if-block "(__protocol & 0xFFFF) == 2"
[20:05:24.048]          // =>  TRUE
[20:05:24.048]        <block atomic="false" info="">
[20:05:24.048]          Message(0, "executing SWD power up");
[20:05:24.051]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:05:24.051]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:05:24.051]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:05:24.051]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:05:24.051]        </block>
[20:05:24.051]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:05:24.056]      </control>
[20:05:24.056]      // end if-block "powered_down"
[20:05:24.056]    </control>
[20:05:24.056]    <block atomic="false" info="">
[20:05:24.056]      __var DEBUG_PORT_VAL    = 0;
[20:05:24.056]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:05:24.056]      __var ACCESS_POINT_VAL  = 0;
[20:05:24.056]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:05:24.056]      __ap = 1; 
[20:05:24.056]        // -> [__ap <= 0x00000001]
[20:05:24.056]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:05:24.064]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:05:24.064]      __ap = 4;
[20:05:24.064]        // -> [__ap <= 0x00000004]
[20:05:24.064]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:05:24.069]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:05:24.069]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:05:24.069]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:05:24.069]    </block>
[20:05:24.069]    <block atomic="false" info="">
[20:05:24.069]      __var nReset = 0x80;
[20:05:24.069]        // -> [nReset <= 0x00000080]
[20:05:24.069]      __var canReadPins = 0;
[20:05:24.069]        // -> [canReadPins <= 0x00000000]
[20:05:24.069]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:05:24.076]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:05:24.076]        // -> [canReadPins <= 0x00000001]
[20:05:24.076]    </block>
[20:05:24.076]    <control if="" while="1" timeout="200" info="">
[20:05:24.076]      // while "1"  (timeout="200")
[20:05:24.076]      // while-condition  =>  TRUE
[20:05:24.076]      // while "1"  (timeout="200")
[20:05:24.076]      // while-condition  =>  TRUE
[20:05:24.076]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.078]      // while "1"  (timeout="200")
[20:05:24.078]      // while-condition  =>  TRUE
[20:05:24.080]      // while "1"  (timeout="200")
[20:05:24.080]      // while-condition  =>  TRUE
[20:05:24.080]      // while "1"  (timeout="200")
[20:05:24.080]      // while-condition  =>  TRUE
[20:05:24.080]      // while "1"  (timeout="200")
[20:05:24.080]      // while-condition  =>  TRUE
[20:05:24.081]      // while "1"  (timeout="200")
[20:05:24.081]      // while-condition  =>  TRUE
[20:05:24.081]      // while "1"  (timeout="200")
[20:05:24.081]      // while-condition  =>  TRUE
[20:05:24.081]      // while "1"  (timeout="200")
[20:05:24.081]      // while-condition  =>  TRUE
[20:05:24.081]      // while "1"  (timeout="200")
[20:05:24.081]      // while-condition  =>  TRUE
[20:05:24.081]      // while "1"  (timeout="200")
[20:05:24.081]      // while-condition  =>  TRUE
[20:05:24.081]      // while "1"  (timeout="200")
[20:05:24.081]      // while-condition  =>  TRUE
[20:05:24.081]      // while "1"  (timeout="200")
[20:05:24.081]      // while-condition  =>  TRUE
[20:05:24.081]      // while "1"  (timeout="200")
[20:05:24.081]      // while-condition  =>  TRUE
[20:05:24.081]      // while "1"  (timeout="200")
[20:05:24.081]      // while-condition  =>  TRUE
[20:05:24.081]      // while "1"  (timeout="200")
[20:05:24.081]      // while-condition  =>  TRUE
[20:05:24.081]      // while "1"  (timeout="200")
[20:05:24.081]      // while-condition  =>  TRUE
[20:05:24.081]      // while "1"  (timeout="200")
[20:05:24.081]      // while-condition  =>  TRUE
[20:05:24.083]      // while "1"  (timeout="200")
[20:05:24.083]      // while  =>  TIMEOUT
[20:05:24.083]      // end while "1"
[20:05:24.083]    </control>
[20:05:24.083]    <control if="canReadPins" while="" timeout="0" info="">
[20:05:24.083]      // if-block "canReadPins"
[20:05:24.083]        // =>  TRUE
[20:05:24.083]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:05:24.083]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:05:24.092]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:05:24.092]        // while-condition  =>  FALSE
[20:05:24.092]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:05:24.092]      </control>
[20:05:24.092]      // end if-block "canReadPins"
[20:05:24.092]    </control>
[20:05:24.092]    <control if="!canReadPins" while="" timeout="0" info="">
[20:05:24.092]      // if-block "!canReadPins"
[20:05:24.092]        // =>  FALSE
[20:05:24.092]      // skip if-block "!canReadPins"
[20:05:24.092]    </control>
[20:05:24.092]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:05:24.092]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:05:24.092]        // =>  TRUE
[20:05:24.092]      <block atomic="false" info="">
[20:05:24.092]        WriteAP(0x00, 0x190008);
[20:05:24.098]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:05:24.098]        WriteAP(0xF0, 0x01);
[20:05:24.101]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:05:24.101]      </block>
[20:05:24.101]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:05:24.101]    </control>
[20:05:24.101]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:05:24.101]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:05:24.101]        // =>  FALSE
[20:05:24.101]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:05:24.101]    </control>
[20:05:24.101]    <block atomic="false" info="">
[20:05:24.101]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:05:24.106]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:05:24.106]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:05:24.106]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:05:24.108]      __ap = 0; //lets make sure we reset the access point selection
[20:05:24.108]        // -> [__ap <= 0x00000000]
[20:05:24.108]    </block>
[20:05:24.108]  </sequence>
[20:05:24.108]  
[20:05:24.163]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:05:24.163]  
[20:05:24.163]  <debugvars>
[20:05:24.163]    // Pre-defined
[20:05:24.163]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:05:24.163]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:05:24.163]    __dp=0x00000000
[20:05:24.163]    __ap=0x00000000
[20:05:24.163]    __traceout=0x00000000      (Trace Disabled)
[20:05:24.163]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:05:24.163]    __FlashAddr=0x00000000
[20:05:24.163]    __FlashLen=0x00000000
[20:05:24.163]    __FlashArg=0x00000000
[20:05:24.163]    __FlashOp=0x00000000
[20:05:24.163]    __Result=0x00000000
[20:05:24.163]  </debugvars>
[20:05:24.163]  
[20:05:24.163]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:05:24.163]    <block atomic="false" info="">
[20:05:24.163]      __var deviceID = 0;
[20:05:24.163]        // -> [deviceID <= 0x00000000]
[20:05:24.163]      __var version = 0;
[20:05:24.163]        // -> [version <= 0x00000000]
[20:05:24.163]      __var partNum = 0;
[20:05:24.163]        // -> [partNum <= 0x00000000]
[20:05:24.163]      __var manuf = 0;
[20:05:24.163]        // -> [manuf <= 0x00000000]
[20:05:24.163]      __var isMSPM0G1X0X_G3X0X = 0;
[20:05:24.163]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:05:24.163]      __var isProduction = 0;
[20:05:24.163]        // -> [isProduction <= 0x00000000]
[20:05:24.166]      __var continueId = 0;
[20:05:24.166]        // -> [continueId <= 0x00000000]
[20:05:24.166]      deviceID =   Read32(0x41C40004);
[20:05:24.183]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:05:24.183]        // -> [deviceID <= 0x2BB8802F]
[20:05:24.183]      version = deviceID >> 28;
[20:05:24.183]        // -> [version <= 0x00000002]
[20:05:24.183]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:05:24.183]        // -> [partNum <= 0x0000BB88]
[20:05:24.183]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:05:24.183]        // -> [manuf <= 0x00000017]
[20:05:24.185]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:05:24.185]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:05:24.185]      isProduction = (version > 0);
[20:05:24.185]        // -> [isProduction <= 0x00000001]
[20:05:24.185]    </block>
[20:05:24.185]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:05:24.185]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:05:24.185]        // =>  FALSE
[20:05:24.185]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:05:24.185]    </control>
[20:05:24.186]    <control if="continueId == 4" while="" timeout="0" info="">
[20:05:24.186]      // if-block "continueId == 4"
[20:05:24.186]        // =>  FALSE
[20:05:24.186]      // skip if-block "continueId == 4"
[20:05:24.186]    </control>
[20:05:24.186]    <control if="!isProduction" while="" timeout="0" info="">
[20:05:24.186]      // if-block "!isProduction"
[20:05:24.186]        // =>  FALSE
[20:05:24.186]      // skip if-block "!isProduction"
[20:05:24.186]    </control>
[20:05:24.186]  </sequence>
[20:05:24.186]  
[20:06:21.884]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:06:21.884]  
[20:06:21.894]  <debugvars>
[20:06:21.895]    // Pre-defined
[20:06:21.895]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:06:21.895]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:06:21.895]    __dp=0x00000000
[20:06:21.895]    __ap=0x00000000
[20:06:21.895]    __traceout=0x00000000      (Trace Disabled)
[20:06:21.895]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:06:21.895]    __FlashAddr=0x00000000
[20:06:21.895]    __FlashLen=0x00000000
[20:06:21.895]    __FlashArg=0x00000000
[20:06:21.895]    __FlashOp=0x00000000
[20:06:21.895]    __Result=0x00000000
[20:06:21.895]  </debugvars>
[20:06:21.895]  
[20:06:21.895]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:06:21.895]    <block atomic="false" info="">
[20:06:21.895]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:06:21.895]        // -> [isSWJ <= 0x00000001]
[20:06:21.896]      __var hasDormant = __protocol & 0x00020000;
[20:06:21.896]        // -> [hasDormant <= 0x00000000]
[20:06:21.896]      __var protType   = __protocol & 0x0000FFFF;
[20:06:21.896]        // -> [protType <= 0x00000002]
[20:06:21.896]    </block>
[20:06:21.896]    <control if="protType == 1" while="" timeout="0" info="">
[20:06:21.896]      // if-block "protType == 1"
[20:06:21.896]        // =>  FALSE
[20:06:21.896]      // skip if-block "protType == 1"
[20:06:21.898]    </control>
[20:06:21.898]    <control if="protType == 2" while="" timeout="0" info="">
[20:06:21.898]      // if-block "protType == 2"
[20:06:21.898]        // =>  TRUE
[20:06:21.899]      <control if="isSWJ" while="" timeout="0" info="">
[20:06:21.899]        // if-block "isSWJ"
[20:06:21.899]          // =>  TRUE
[20:06:21.899]        <control if="hasDormant" while="" timeout="0" info="">
[20:06:21.899]          // if-block "hasDormant"
[20:06:21.899]            // =>  FALSE
[20:06:21.899]          // skip if-block "hasDormant"
[20:06:21.899]        </control>
[20:06:21.899]        <control if="!hasDormant" while="" timeout="0" info="">
[20:06:21.901]          // if-block "!hasDormant"
[20:06:21.901]            // =>  TRUE
[20:06:21.901]          <block atomic="false" info="">
[20:06:21.901]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:06:21.905]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:06:21.905]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:06:21.913]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:06:21.913]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:06:21.919]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:06:21.919]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:06:21.922]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:06:21.922]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:06:21.922]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:06:21.922]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:06:21.926]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:06:21.926]          </block>
[20:06:21.926]          // end if-block "!hasDormant"
[20:06:21.926]        </control>
[20:06:21.926]        // end if-block "isSWJ"
[20:06:21.926]      </control>
[20:06:21.926]      <control if="!isSWJ" while="" timeout="0" info="">
[20:06:21.926]        // if-block "!isSWJ"
[20:06:21.926]          // =>  FALSE
[20:06:21.926]        // skip if-block "!isSWJ"
[20:06:21.926]      </control>
[20:06:21.926]      <block atomic="false" info="">
[20:06:21.926]        ReadDP(0x0);
[20:06:21.930]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:06:21.930]      </block>
[20:06:21.930]      // end if-block "protType == 2"
[20:06:21.930]    </control>
[20:06:21.930]  </sequence>
[20:06:21.930]  
[20:06:21.934]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:06:21.934]  
[20:06:21.934]  <debugvars>
[20:06:21.934]    // Pre-defined
[20:06:21.934]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:06:21.934]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:06:21.934]    __dp=0x00000000
[20:06:21.934]    __ap=0x00000000
[20:06:21.934]    __traceout=0x00000000      (Trace Disabled)
[20:06:21.934]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:06:21.934]    __FlashAddr=0x00000000
[20:06:21.934]    __FlashLen=0x00000000
[20:06:21.934]    __FlashArg=0x00000000
[20:06:21.934]    __FlashOp=0x00000000
[20:06:21.934]    __Result=0x00000000
[20:06:21.938]  </debugvars>
[20:06:21.938]  
[20:06:21.938]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:06:21.938]    <block atomic="false" info="">
[20:06:21.938]      __var SW_DP_ABORT       = 0x0;
[20:06:21.938]        // -> [SW_DP_ABORT <= 0x00000000]
[20:06:21.938]      __var DP_CTRL_STAT      = 0x4;
[20:06:21.938]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:06:21.938]      __var DP_SELECT         = 0x8;
[20:06:21.938]        // -> [DP_SELECT <= 0x00000008]
[20:06:21.938]      __var powered_down      = 0;
[20:06:21.938]        // -> [powered_down <= 0x00000000]
[20:06:21.939]      WriteDP(DP_SELECT, 0x00000000);
[20:06:21.941]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:06:21.941]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:06:21.942]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:06:21.942]        // -> [powered_down <= 0x00000001]
[20:06:21.942]    </block>
[20:06:21.942]    <control if="powered_down" while="" timeout="0" info="">
[20:06:21.942]      // if-block "powered_down"
[20:06:21.942]        // =>  TRUE
[20:06:21.942]      <block atomic="false" info="">
[20:06:21.942]        Message(0, "Debug/System power-up request sent");
[20:06:21.946]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:06:21.946]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:06:21.946]      </block>
[20:06:21.946]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:06:21.946]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:06:21.949]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:06:21.949]        // while-condition  =>  FALSE
[20:06:21.949]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:06:21.950]      </control>
[20:06:21.950]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:06:21.950]        // if-block "(__protocol & 0xFFFF) == 1"
[20:06:21.950]          // =>  FALSE
[20:06:21.950]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:06:21.950]      </control>
[20:06:21.950]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:06:21.950]        // if-block "(__protocol & 0xFFFF) == 2"
[20:06:21.950]          // =>  TRUE
[20:06:21.950]        <block atomic="false" info="">
[20:06:21.950]          Message(0, "executing SWD power up");
[20:06:21.952]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:06:21.954]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:06:21.954]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:06:21.954]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:06:21.954]        </block>
[20:06:21.954]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:06:21.954]      </control>
[20:06:21.954]      // end if-block "powered_down"
[20:06:21.954]    </control>
[20:06:21.954]    <block atomic="false" info="">
[20:06:21.954]      __var DEBUG_PORT_VAL    = 0;
[20:06:21.954]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:06:21.954]      __var ACCESS_POINT_VAL  = 0;
[20:06:21.954]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:06:21.958]      __ap = 1; 
[20:06:21.958]        // -> [__ap <= 0x00000001]
[20:06:21.958]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:06:21.966]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:06:21.966]      __ap = 4;
[20:06:21.966]        // -> [__ap <= 0x00000004]
[20:06:21.966]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:06:21.969]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:06:21.969]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:06:21.970]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:06:21.971]    </block>
[20:06:21.971]    <block atomic="false" info="">
[20:06:21.971]      __var nReset = 0x80;
[20:06:21.971]        // -> [nReset <= 0x00000080]
[20:06:21.971]      __var canReadPins = 0;
[20:06:21.971]        // -> [canReadPins <= 0x00000000]
[20:06:21.971]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:06:21.974]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:06:21.974]        // -> [canReadPins <= 0x00000001]
[20:06:21.974]    </block>
[20:06:21.974]    <control if="" while="1" timeout="200" info="">
[20:06:21.974]      // while "1"  (timeout="200")
[20:06:21.974]      // while-condition  =>  TRUE
[20:06:21.974]      // while "1"  (timeout="200")
[20:06:21.974]      // while-condition  =>  TRUE
[20:06:21.974]      // while "1"  (timeout="200")
[20:06:21.974]      // while-condition  =>  TRUE
[20:06:21.974]      // while "1"  (timeout="200")
[20:06:21.974]      // while-condition  =>  TRUE
[20:06:21.974]      // while "1"  (timeout="200")
[20:06:21.974]      // while-condition  =>  TRUE
[20:06:21.974]      // while "1"  (timeout="200")
[20:06:21.974]      // while-condition  =>  TRUE
[20:06:21.974]      // while "1"  (timeout="200")
[20:06:21.974]      // while-condition  =>  TRUE
[20:06:21.974]      // while "1"  (timeout="200")
[20:06:21.974]      // while-condition  =>  TRUE
[20:06:21.977]      // while "1"  (timeout="200")
[20:06:21.977]      // while-condition  =>  TRUE
[20:06:21.977]      // while "1"  (timeout="200")
[20:06:21.977]      // while-condition  =>  TRUE
[20:06:21.977]      // while "1"  (timeout="200")
[20:06:21.977]      // while-condition  =>  TRUE
[20:06:21.977]      // while "1"  (timeout="200")
[20:06:21.977]      // while-condition  =>  TRUE
[20:06:21.977]      // while "1"  (timeout="200")
[20:06:21.979]      // while-condition  =>  TRUE
[20:06:21.979]      // while "1"  (timeout="200")
[20:06:21.979]      // while-condition  =>  TRUE
[20:06:21.979]      // while "1"  (timeout="200")
[20:06:21.979]      // while-condition  =>  TRUE
[20:06:21.979]      // while "1"  (timeout="200")
[20:06:21.979]      // while-condition  =>  TRUE
[20:06:21.979]      // while "1"  (timeout="200")
[20:06:21.979]      // while-condition  =>  TRUE
[20:06:21.979]      // while "1"  (timeout="200")
[20:06:21.979]      // while-condition  =>  TRUE
[20:06:21.979]      // while "1"  (timeout="200")
[20:06:21.979]      // while-condition  =>  TRUE
[20:06:21.979]      // while "1"  (timeout="200")
[20:06:21.979]      // while-condition  =>  TRUE
[20:06:21.979]      // while "1"  (timeout="200")
[20:06:21.979]      // while-condition  =>  TRUE
[20:06:21.979]      // while "1"  (timeout="200")
[20:06:21.979]      // while-condition  =>  TRUE
[20:06:21.979]      // while "1"  (timeout="200")
[20:06:21.979]      // while-condition  =>  TRUE
[20:06:21.979]      // while "1"  (timeout="200")
[20:06:21.979]      // while-condition  =>  TRUE
[20:06:21.979]      // while "1"  (timeout="200")
[20:06:21.979]      // while-condition  =>  TRUE
[20:06:21.981]      // while "1"  (timeout="200")
[20:06:21.981]      // while-condition  =>  TRUE
[20:06:21.981]      // while "1"  (timeout="200")
[20:06:21.981]      // while-condition  =>  TRUE
[20:06:21.981]      // while "1"  (timeout="200")
[20:06:21.981]      // while-condition  =>  TRUE
[20:06:21.981]      // while "1"  (timeout="200")
[20:06:21.981]      // while-condition  =>  TRUE
[20:06:21.981]      // while "1"  (timeout="200")
[20:06:21.981]      // while-condition  =>  TRUE
[20:06:21.981]      // while "1"  (timeout="200")
[20:06:21.981]      // while-condition  =>  TRUE
[20:06:21.981]      // while "1"  (timeout="200")
[20:06:21.981]      // while-condition  =>  TRUE
[20:06:21.981]      // while "1"  (timeout="200")
[20:06:21.981]      // while-condition  =>  TRUE
[20:06:21.981]      // while "1"  (timeout="200")
[20:06:21.983]      // while-condition  =>  TRUE
[20:06:21.983]      // while "1"  (timeout="200")
[20:06:21.983]      // while-condition  =>  TRUE
[20:06:21.983]      // while "1"  (timeout="200")
[20:06:21.983]      // while-condition  =>  TRUE
[20:06:21.983]      // while "1"  (timeout="200")
[20:06:21.983]      // while-condition  =>  TRUE
[20:06:21.983]      // while "1"  (timeout="200")
[20:06:21.983]      // while-condition  =>  TRUE
[20:06:21.983]      // while "1"  (timeout="200")
[20:06:21.983]      // while-condition  =>  TRUE
[20:06:21.983]      // while "1"  (timeout="200")
[20:06:21.983]      // while-condition  =>  TRUE
[20:06:21.983]      // while "1"  (timeout="200")
[20:06:21.983]      // while-condition  =>  TRUE
[20:06:21.983]      // while "1"  (timeout="200")
[20:06:21.984]      // while-condition  =>  TRUE
[20:06:21.984]      // while "1"  (timeout="200")
[20:06:21.984]      // while-condition  =>  TRUE
[20:06:21.984]      // while "1"  (timeout="200")
[20:06:21.984]      // while-condition  =>  TRUE
[20:06:21.984]      // while "1"  (timeout="200")
[20:06:21.984]      // while-condition  =>  TRUE
[20:06:21.984]      // while "1"  (timeout="200")
[20:06:21.984]      // while-condition  =>  TRUE
[20:06:21.984]      // while "1"  (timeout="200")
[20:06:21.984]      // while-condition  =>  TRUE
[20:06:21.985]      // while "1"  (timeout="200")
[20:06:21.985]      // while-condition  =>  TRUE
[20:06:21.985]      // while "1"  (timeout="200")
[20:06:21.985]      // while-condition  =>  TRUE
[20:06:21.985]      // while "1"  (timeout="200")
[20:06:21.985]      // while-condition  =>  TRUE
[20:06:21.985]      // while "1"  (timeout="200")
[20:06:21.985]      // while-condition  =>  TRUE
[20:06:21.985]      // while "1"  (timeout="200")
[20:06:21.985]      // while-condition  =>  TRUE
[20:06:21.985]      // while "1"  (timeout="200")
[20:06:21.985]      // while-condition  =>  TRUE
[20:06:21.985]      // while "1"  (timeout="200")
[20:06:21.985]      // while-condition  =>  TRUE
[20:06:21.985]      // while "1"  (timeout="200")
[20:06:21.985]      // while-condition  =>  TRUE
[20:06:21.987]      // while "1"  (timeout="200")
[20:06:21.987]      // while-condition  =>  TRUE
[20:06:21.987]      // while "1"  (timeout="200")
[20:06:21.987]      // while-condition  =>  TRUE
[20:06:21.987]      // while "1"  (timeout="200")
[20:06:21.987]      // while-condition  =>  TRUE
[20:06:21.987]      // while "1"  (timeout="200")
[20:06:21.987]      // while-condition  =>  TRUE
[20:06:21.987]      // while "1"  (timeout="200")
[20:06:21.987]      // while-condition  =>  TRUE
[20:06:21.987]      // while "1"  (timeout="200")
[20:06:21.987]      // while-condition  =>  TRUE
[20:06:21.987]      // while "1"  (timeout="200")
[20:06:21.987]      // while-condition  =>  TRUE
[20:06:21.987]      // while "1"  (timeout="200")
[20:06:21.987]      // while-condition  =>  TRUE
[20:06:21.987]      // while "1"  (timeout="200")
[20:06:21.987]      // while-condition  =>  TRUE
[20:06:21.988]      // while "1"  (timeout="200")
[20:06:21.988]      // while  =>  TIMEOUT
[20:06:21.988]      // end while "1"
[20:06:21.988]    </control>
[20:06:21.988]    <control if="canReadPins" while="" timeout="0" info="">
[20:06:21.988]      // if-block "canReadPins"
[20:06:21.988]        // =>  TRUE
[20:06:21.988]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:06:21.988]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:06:21.991]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:06:21.991]        // while-condition  =>  FALSE
[20:06:21.991]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:06:21.991]      </control>
[20:06:21.991]      // end if-block "canReadPins"
[20:06:21.991]    </control>
[20:06:21.991]    <control if="!canReadPins" while="" timeout="0" info="">
[20:06:21.991]      // if-block "!canReadPins"
[20:06:21.991]        // =>  FALSE
[20:06:21.991]      // skip if-block "!canReadPins"
[20:06:21.991]    </control>
[20:06:21.993]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:06:21.993]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:06:21.993]        // =>  TRUE
[20:06:21.993]      <block atomic="false" info="">
[20:06:21.993]        WriteAP(0x00, 0x190008);
[20:06:21.996]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:06:21.996]        WriteAP(0xF0, 0x01);
[20:06:22.002]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:06:22.002]      </block>
[20:06:22.002]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:06:22.002]    </control>
[20:06:22.002]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:06:22.002]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:06:22.003]        // =>  FALSE
[20:06:22.003]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:06:22.003]    </control>
[20:06:22.003]    <block atomic="false" info="">
[20:06:22.003]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:06:22.009]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:06:22.009]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:06:22.011]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:06:22.012]      __ap = 0; //lets make sure we reset the access point selection
[20:06:22.012]        // -> [__ap <= 0x00000000]
[20:06:22.012]    </block>
[20:06:22.012]  </sequence>
[20:06:22.012]  
[20:06:22.045]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:06:22.045]  
[20:06:22.045]  <debugvars>
[20:06:22.045]    // Pre-defined
[20:06:22.045]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:06:22.045]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:06:22.045]    __dp=0x00000000
[20:06:22.045]    __ap=0x00000000
[20:06:22.045]    __traceout=0x00000000      (Trace Disabled)
[20:06:22.045]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:06:22.045]    __FlashAddr=0x00000000
[20:06:22.045]    __FlashLen=0x00000000
[20:06:22.045]    __FlashArg=0x00000000
[20:06:22.045]    __FlashOp=0x00000000
[20:06:22.045]    __Result=0x00000000
[20:06:22.049]  </debugvars>
[20:06:22.049]  
[20:06:22.049]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:06:22.049]    <block atomic="false" info="">
[20:06:22.049]      __var deviceID = 0;
[20:06:22.049]        // -> [deviceID <= 0x00000000]
[20:06:22.049]      __var version = 0;
[20:06:22.049]        // -> [version <= 0x00000000]
[20:06:22.049]      __var partNum = 0;
[20:06:22.049]        // -> [partNum <= 0x00000000]
[20:06:22.049]      __var manuf = 0;
[20:06:22.049]        // -> [manuf <= 0x00000000]
[20:06:22.049]      __var isMSPM0G1X0X_G3X0X = 0;
[20:06:22.049]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:06:22.049]      __var isProduction = 0;
[20:06:22.049]        // -> [isProduction <= 0x00000000]
[20:06:22.049]      __var continueId = 0;
[20:06:22.049]        // -> [continueId <= 0x00000000]
[20:06:22.049]      deviceID =   Read32(0x41C40004);
[20:06:22.059]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:06:22.059]        // -> [deviceID <= 0x2BB8802F]
[20:06:22.059]      version = deviceID >> 28;
[20:06:22.059]        // -> [version <= 0x00000002]
[20:06:22.059]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:06:22.059]        // -> [partNum <= 0x0000BB88]
[20:06:22.059]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:06:22.059]        // -> [manuf <= 0x00000017]
[20:06:22.059]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:06:22.059]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:06:22.059]      isProduction = (version > 0);
[20:06:22.059]        // -> [isProduction <= 0x00000001]
[20:06:22.059]    </block>
[20:06:22.059]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:06:22.059]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:06:22.059]        // =>  FALSE
[20:06:22.059]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:06:22.059]    </control>
[20:06:22.059]    <control if="continueId == 4" while="" timeout="0" info="">
[20:06:22.059]      // if-block "continueId == 4"
[20:06:22.059]        // =>  FALSE
[20:06:22.059]      // skip if-block "continueId == 4"
[20:06:22.059]    </control>
[20:06:22.059]    <control if="!isProduction" while="" timeout="0" info="">
[20:06:22.062]      // if-block "!isProduction"
[20:06:22.062]        // =>  FALSE
[20:06:22.062]      // skip if-block "!isProduction"
[20:06:22.062]    </control>
[20:06:22.062]  </sequence>
[20:06:22.062]  
[20:07:30.903]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:07:30.903]  
[20:07:30.907]  <debugvars>
[20:07:30.907]    // Pre-defined
[20:07:30.907]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:07:30.907]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:07:30.907]    __dp=0x00000000
[20:07:30.907]    __ap=0x00000000
[20:07:30.907]    __traceout=0x00000000      (Trace Disabled)
[20:07:30.907]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:07:30.907]    __FlashAddr=0x00000000
[20:07:30.907]    __FlashLen=0x00000000
[20:07:30.907]    __FlashArg=0x00000000
[20:07:30.907]    __FlashOp=0x00000000
[20:07:30.907]    __Result=0x00000000
[20:07:30.907]  </debugvars>
[20:07:30.907]  
[20:07:30.907]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:07:30.907]    <block atomic="false" info="">
[20:07:30.907]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:07:30.907]        // -> [isSWJ <= 0x00000001]
[20:07:30.907]      __var hasDormant = __protocol & 0x00020000;
[20:07:30.907]        // -> [hasDormant <= 0x00000000]
[20:07:30.907]      __var protType   = __protocol & 0x0000FFFF;
[20:07:30.907]        // -> [protType <= 0x00000002]
[20:07:30.907]    </block>
[20:07:30.907]    <control if="protType == 1" while="" timeout="0" info="">
[20:07:30.907]      // if-block "protType == 1"
[20:07:30.907]        // =>  FALSE
[20:07:30.907]      // skip if-block "protType == 1"
[20:07:30.907]    </control>
[20:07:30.907]    <control if="protType == 2" while="" timeout="0" info="">
[20:07:30.907]      // if-block "protType == 2"
[20:07:30.907]        // =>  TRUE
[20:07:30.907]      <control if="isSWJ" while="" timeout="0" info="">
[20:07:30.910]        // if-block "isSWJ"
[20:07:30.910]          // =>  TRUE
[20:07:30.910]        <control if="hasDormant" while="" timeout="0" info="">
[20:07:30.910]          // if-block "hasDormant"
[20:07:30.910]            // =>  FALSE
[20:07:30.910]          // skip if-block "hasDormant"
[20:07:30.910]        </control>
[20:07:30.910]        <control if="!hasDormant" while="" timeout="0" info="">
[20:07:30.910]          // if-block "!hasDormant"
[20:07:30.910]            // =>  TRUE
[20:07:30.910]          <block atomic="false" info="">
[20:07:30.910]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:07:30.914]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:07:30.914]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:07:30.920]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:07:30.920]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:07:30.923]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:07:30.923]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:07:30.923]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:07:30.927]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:07:30.927]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:07:30.927]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:07:30.932]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:07:30.932]          </block>
[20:07:30.932]          // end if-block "!hasDormant"
[20:07:30.932]        </control>
[20:07:30.932]        // end if-block "isSWJ"
[20:07:30.932]      </control>
[20:07:30.932]      <control if="!isSWJ" while="" timeout="0" info="">
[20:07:30.932]        // if-block "!isSWJ"
[20:07:30.932]          // =>  FALSE
[20:07:30.932]        // skip if-block "!isSWJ"
[20:07:30.932]      </control>
[20:07:30.932]      <block atomic="false" info="">
[20:07:30.932]        ReadDP(0x0);
[20:07:30.934]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:07:30.934]      </block>
[20:07:30.934]      // end if-block "protType == 2"
[20:07:30.934]    </control>
[20:07:30.934]  </sequence>
[20:07:30.934]  
[20:07:30.941]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:07:30.941]  
[20:07:30.943]  <debugvars>
[20:07:30.943]    // Pre-defined
[20:07:30.943]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:07:30.943]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:07:30.943]    __dp=0x00000000
[20:07:30.943]    __ap=0x00000000
[20:07:30.943]    __traceout=0x00000000      (Trace Disabled)
[20:07:30.943]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:07:30.943]    __FlashAddr=0x00000000
[20:07:30.943]    __FlashLen=0x00000000
[20:07:30.944]    __FlashArg=0x00000000
[20:07:30.944]    __FlashOp=0x00000000
[20:07:30.944]    __Result=0x00000000
[20:07:30.944]  </debugvars>
[20:07:30.944]  
[20:07:30.944]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:07:30.944]    <block atomic="false" info="">
[20:07:30.944]      __var SW_DP_ABORT       = 0x0;
[20:07:30.944]        // -> [SW_DP_ABORT <= 0x00000000]
[20:07:30.944]      __var DP_CTRL_STAT      = 0x4;
[20:07:30.944]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:07:30.944]      __var DP_SELECT         = 0x8;
[20:07:30.944]        // -> [DP_SELECT <= 0x00000008]
[20:07:30.944]      __var powered_down      = 0;
[20:07:30.944]        // -> [powered_down <= 0x00000000]
[20:07:30.944]      WriteDP(DP_SELECT, 0x00000000);
[20:07:30.946]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:07:30.946]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:07:30.951]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:07:30.951]        // -> [powered_down <= 0x00000001]
[20:07:30.951]    </block>
[20:07:30.951]    <control if="powered_down" while="" timeout="0" info="">
[20:07:30.951]      // if-block "powered_down"
[20:07:30.951]        // =>  TRUE
[20:07:30.951]      <block atomic="false" info="">
[20:07:30.951]        Message(0, "Debug/System power-up request sent");
[20:07:30.951]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:07:30.955]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:07:30.955]      </block>
[20:07:30.955]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:07:30.955]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:07:30.955]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:07:30.955]        // while-condition  =>  FALSE
[20:07:30.955]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:07:30.955]      </control>
[20:07:30.955]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:07:30.955]        // if-block "(__protocol & 0xFFFF) == 1"
[20:07:30.955]          // =>  FALSE
[20:07:30.955]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:07:30.955]      </control>
[20:07:30.955]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:07:30.959]        // if-block "(__protocol & 0xFFFF) == 2"
[20:07:30.959]          // =>  TRUE
[20:07:30.959]        <block atomic="false" info="">
[20:07:30.959]          Message(0, "executing SWD power up");
[20:07:30.961]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:07:30.963]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:07:30.964]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:07:30.964]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:07:30.964]        </block>
[20:07:30.964]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:07:30.964]      </control>
[20:07:30.964]      // end if-block "powered_down"
[20:07:30.964]    </control>
[20:07:30.964]    <block atomic="false" info="">
[20:07:30.964]      __var DEBUG_PORT_VAL    = 0;
[20:07:30.964]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:07:30.964]      __var ACCESS_POINT_VAL  = 0;
[20:07:30.964]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:07:30.964]      __ap = 1; 
[20:07:30.964]        // -> [__ap <= 0x00000001]
[20:07:30.964]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:07:30.970]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:07:30.970]      __ap = 4;
[20:07:30.971]        // -> [__ap <= 0x00000004]
[20:07:30.971]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:07:30.975]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:07:30.975]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:07:30.976]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:07:30.977]    </block>
[20:07:30.977]    <block atomic="false" info="">
[20:07:30.977]      __var nReset = 0x80;
[20:07:30.977]        // -> [nReset <= 0x00000080]
[20:07:30.977]      __var canReadPins = 0;
[20:07:30.977]        // -> [canReadPins <= 0x00000000]
[20:07:30.977]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:07:30.980]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:07:30.980]        // -> [canReadPins <= 0x00000001]
[20:07:30.980]    </block>
[20:07:30.980]    <control if="" while="1" timeout="200" info="">
[20:07:30.980]      // while "1"  (timeout="200")
[20:07:30.980]      // while-condition  =>  TRUE
[20:07:30.980]      // while "1"  (timeout="200")
[20:07:30.980]      // while-condition  =>  TRUE
[20:07:30.980]      // while "1"  (timeout="200")
[20:07:30.980]      // while-condition  =>  TRUE
[20:07:30.980]      // while "1"  (timeout="200")
[20:07:30.980]      // while-condition  =>  TRUE
[20:07:30.980]      // while "1"  (timeout="200")
[20:07:30.980]      // while-condition  =>  TRUE
[20:07:30.980]      // while "1"  (timeout="200")
[20:07:30.980]      // while-condition  =>  TRUE
[20:07:30.980]      // while "1"  (timeout="200")
[20:07:30.980]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.983]      // while-condition  =>  TRUE
[20:07:30.983]      // while "1"  (timeout="200")
[20:07:30.986]      // while-condition  =>  TRUE
[20:07:30.986]      // while "1"  (timeout="200")
[20:07:30.986]      // while-condition  =>  TRUE
[20:07:30.986]      // while "1"  (timeout="200")
[20:07:30.986]      // while-condition  =>  TRUE
[20:07:30.986]      // while "1"  (timeout="200")
[20:07:30.986]      // while-condition  =>  TRUE
[20:07:30.986]      // while "1"  (timeout="200")
[20:07:30.986]      // while-condition  =>  TRUE
[20:07:30.986]      // while "1"  (timeout="200")
[20:07:30.986]      // while-condition  =>  TRUE
[20:07:30.986]      // while "1"  (timeout="200")
[20:07:30.986]      // while-condition  =>  TRUE
[20:07:30.986]      // while "1"  (timeout="200")
[20:07:30.987]      // while-condition  =>  TRUE
[20:07:30.987]      // while "1"  (timeout="200")
[20:07:30.987]      // while-condition  =>  TRUE
[20:07:30.987]      // while "1"  (timeout="200")
[20:07:30.987]      // while-condition  =>  TRUE
[20:07:30.987]      // while "1"  (timeout="200")
[20:07:30.987]      // while-condition  =>  TRUE
[20:07:30.987]      // while "1"  (timeout="200")
[20:07:30.987]      // while-condition  =>  TRUE
[20:07:30.987]      // while "1"  (timeout="200")
[20:07:30.987]      // while-condition  =>  TRUE
[20:07:30.988]      // while "1"  (timeout="200")
[20:07:30.988]      // while  =>  TIMEOUT
[20:07:30.988]      // end while "1"
[20:07:30.988]    </control>
[20:07:30.988]    <control if="canReadPins" while="" timeout="0" info="">
[20:07:30.988]      // if-block "canReadPins"
[20:07:30.988]        // =>  TRUE
[20:07:30.988]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:07:30.988]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:07:30.993]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:07:30.993]        // while-condition  =>  FALSE
[20:07:30.993]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:07:30.993]      </control>
[20:07:30.993]      // end if-block "canReadPins"
[20:07:30.993]    </control>
[20:07:30.993]    <control if="!canReadPins" while="" timeout="0" info="">
[20:07:30.993]      // if-block "!canReadPins"
[20:07:30.993]        // =>  FALSE
[20:07:30.993]      // skip if-block "!canReadPins"
[20:07:30.993]    </control>
[20:07:30.993]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:07:30.993]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:07:30.995]        // =>  TRUE
[20:07:30.995]      <block atomic="false" info="">
[20:07:30.995]        WriteAP(0x00, 0x190008);
[20:07:30.999]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:07:30.999]        WriteAP(0xF0, 0x01);
[20:07:31.007]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:07:31.007]      </block>
[20:07:31.007]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:07:31.007]    </control>
[20:07:31.007]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:07:31.007]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:07:31.007]        // =>  FALSE
[20:07:31.007]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:07:31.007]    </control>
[20:07:31.007]    <block atomic="false" info="">
[20:07:31.007]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:07:31.012]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:07:31.012]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:07:31.012]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:07:31.015]      __ap = 0; //lets make sure we reset the access point selection
[20:07:31.015]        // -> [__ap <= 0x00000000]
[20:07:31.015]    </block>
[20:07:31.015]  </sequence>
[20:07:31.015]  
[20:07:31.064]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:07:31.064]  
[20:07:31.064]  <debugvars>
[20:07:31.064]    // Pre-defined
[20:07:31.064]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:07:31.064]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:07:31.064]    __dp=0x00000000
[20:07:31.064]    __ap=0x00000000
[20:07:31.064]    __traceout=0x00000000      (Trace Disabled)
[20:07:31.064]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:07:31.064]    __FlashAddr=0x00000000
[20:07:31.064]    __FlashLen=0x00000000
[20:07:31.064]    __FlashArg=0x00000000
[20:07:31.064]    __FlashOp=0x00000000
[20:07:31.064]    __Result=0x00000000
[20:07:31.064]  </debugvars>
[20:07:31.064]  
[20:07:31.064]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:07:31.066]    <block atomic="false" info="">
[20:07:31.066]      __var deviceID = 0;
[20:07:31.066]        // -> [deviceID <= 0x00000000]
[20:07:31.066]      __var version = 0;
[20:07:31.066]        // -> [version <= 0x00000000]
[20:07:31.066]      __var partNum = 0;
[20:07:31.066]        // -> [partNum <= 0x00000000]
[20:07:31.066]      __var manuf = 0;
[20:07:31.066]        // -> [manuf <= 0x00000000]
[20:07:31.066]      __var isMSPM0G1X0X_G3X0X = 0;
[20:07:31.066]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:07:31.066]      __var isProduction = 0;
[20:07:31.066]        // -> [isProduction <= 0x00000000]
[20:07:31.066]      __var continueId = 0;
[20:07:31.066]        // -> [continueId <= 0x00000000]
[20:07:31.066]      deviceID =   Read32(0x41C40004);
[20:07:31.077]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:07:31.077]        // -> [deviceID <= 0x2BB8802F]
[20:07:31.077]      version = deviceID >> 28;
[20:07:31.077]        // -> [version <= 0x00000002]
[20:07:31.077]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:07:31.077]        // -> [partNum <= 0x0000BB88]
[20:07:31.077]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:07:31.077]        // -> [manuf <= 0x00000017]
[20:07:31.077]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:07:31.077]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:07:31.077]      isProduction = (version > 0);
[20:07:31.077]        // -> [isProduction <= 0x00000001]
[20:07:31.077]    </block>
[20:07:31.077]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:07:31.079]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:07:31.079]        // =>  FALSE
[20:07:31.079]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:07:31.079]    </control>
[20:07:31.079]    <control if="continueId == 4" while="" timeout="0" info="">
[20:07:31.079]      // if-block "continueId == 4"
[20:07:31.079]        // =>  FALSE
[20:07:31.079]      // skip if-block "continueId == 4"
[20:07:31.079]    </control>
[20:07:31.079]    <control if="!isProduction" while="" timeout="0" info="">
[20:07:31.079]      // if-block "!isProduction"
[20:07:31.079]        // =>  FALSE
[20:07:31.079]      // skip if-block "!isProduction"
[20:07:31.080]    </control>
[20:07:31.080]  </sequence>
[20:07:31.080]  
[20:08:26.650]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:08:26.650]  
[20:08:26.658]  <debugvars>
[20:08:26.658]    // Pre-defined
[20:08:26.658]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:08:26.658]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:08:26.658]    __dp=0x00000000
[20:08:26.658]    __ap=0x00000000
[20:08:26.658]    __traceout=0x00000000      (Trace Disabled)
[20:08:26.658]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:08:26.658]    __FlashAddr=0x00000000
[20:08:26.658]    __FlashLen=0x00000000
[20:08:26.658]    __FlashArg=0x00000000
[20:08:26.658]    __FlashOp=0x00000000
[20:08:26.658]    __Result=0x00000000
[20:08:26.658]  </debugvars>
[20:08:26.658]  
[20:08:26.658]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:08:26.658]    <block atomic="false" info="">
[20:08:26.658]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:08:26.658]        // -> [isSWJ <= 0x00000001]
[20:08:26.658]      __var hasDormant = __protocol & 0x00020000;
[20:08:26.658]        // -> [hasDormant <= 0x00000000]
[20:08:26.658]      __var protType   = __protocol & 0x0000FFFF;
[20:08:26.658]        // -> [protType <= 0x00000002]
[20:08:26.658]    </block>
[20:08:26.658]    <control if="protType == 1" while="" timeout="0" info="">
[20:08:26.658]      // if-block "protType == 1"
[20:08:26.658]        // =>  FALSE
[20:08:26.658]      // skip if-block "protType == 1"
[20:08:26.658]    </control>
[20:08:26.658]    <control if="protType == 2" while="" timeout="0" info="">
[20:08:26.658]      // if-block "protType == 2"
[20:08:26.658]        // =>  TRUE
[20:08:26.658]      <control if="isSWJ" while="" timeout="0" info="">
[20:08:26.662]        // if-block "isSWJ"
[20:08:26.662]          // =>  TRUE
[20:08:26.662]        <control if="hasDormant" while="" timeout="0" info="">
[20:08:26.662]          // if-block "hasDormant"
[20:08:26.662]            // =>  FALSE
[20:08:26.662]          // skip if-block "hasDormant"
[20:08:26.662]        </control>
[20:08:26.662]        <control if="!hasDormant" while="" timeout="0" info="">
[20:08:26.662]          // if-block "!hasDormant"
[20:08:26.662]            // =>  TRUE
[20:08:26.662]          <block atomic="false" info="">
[20:08:26.662]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:08:26.667]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:08:26.667]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:08:26.672]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:08:26.672]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:08:26.674]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:08:26.674]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:08:26.674]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:08:26.674]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:08:26.679]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:08:26.679]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:08:26.682]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:08:26.682]          </block>
[20:08:26.682]          // end if-block "!hasDormant"
[20:08:26.682]        </control>
[20:08:26.682]        // end if-block "isSWJ"
[20:08:26.682]      </control>
[20:08:26.682]      <control if="!isSWJ" while="" timeout="0" info="">
[20:08:26.682]        // if-block "!isSWJ"
[20:08:26.682]          // =>  FALSE
[20:08:26.682]        // skip if-block "!isSWJ"
[20:08:26.682]      </control>
[20:08:26.682]      <block atomic="false" info="">
[20:08:26.682]        ReadDP(0x0);
[20:08:26.686]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:08:26.686]      </block>
[20:08:26.686]      // end if-block "protType == 2"
[20:08:26.686]    </control>
[20:08:26.686]  </sequence>
[20:08:26.686]  
[20:08:26.690]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:08:26.690]  
[20:08:26.690]  <debugvars>
[20:08:26.690]    // Pre-defined
[20:08:26.690]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:08:26.690]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:08:26.692]    __dp=0x00000000
[20:08:26.692]    __ap=0x00000000
[20:08:26.692]    __traceout=0x00000000      (Trace Disabled)
[20:08:26.692]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:08:26.692]    __FlashAddr=0x00000000
[20:08:26.692]    __FlashLen=0x00000000
[20:08:26.692]    __FlashArg=0x00000000
[20:08:26.692]    __FlashOp=0x00000000
[20:08:26.693]    __Result=0x00000000
[20:08:26.693]  </debugvars>
[20:08:26.693]  
[20:08:26.693]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:08:26.693]    <block atomic="false" info="">
[20:08:26.693]      __var SW_DP_ABORT       = 0x0;
[20:08:26.693]        // -> [SW_DP_ABORT <= 0x00000000]
[20:08:26.693]      __var DP_CTRL_STAT      = 0x4;
[20:08:26.693]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:08:26.693]      __var DP_SELECT         = 0x8;
[20:08:26.693]        // -> [DP_SELECT <= 0x00000008]
[20:08:26.693]      __var powered_down      = 0;
[20:08:26.693]        // -> [powered_down <= 0x00000000]
[20:08:26.693]      WriteDP(DP_SELECT, 0x00000000);
[20:08:26.696]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:08:26.696]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:08:26.698]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:08:26.698]        // -> [powered_down <= 0x00000001]
[20:08:26.698]    </block>
[20:08:26.698]    <control if="powered_down" while="" timeout="0" info="">
[20:08:26.698]      // if-block "powered_down"
[20:08:26.698]        // =>  TRUE
[20:08:26.699]      <block atomic="false" info="">
[20:08:26.699]        Message(0, "Debug/System power-up request sent");
[20:08:26.700]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:08:26.703]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:08:26.703]      </block>
[20:08:26.703]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:08:26.703]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:08:26.709]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:08:26.709]        // while-condition  =>  FALSE
[20:08:26.711]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:08:26.711]      </control>
[20:08:26.711]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:08:26.711]        // if-block "(__protocol & 0xFFFF) == 1"
[20:08:26.711]          // =>  FALSE
[20:08:26.712]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:08:26.712]      </control>
[20:08:26.712]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:08:26.712]        // if-block "(__protocol & 0xFFFF) == 2"
[20:08:26.712]          // =>  TRUE
[20:08:26.712]        <block atomic="false" info="">
[20:08:26.712]          Message(0, "executing SWD power up");
[20:08:26.713]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:08:26.715]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:08:26.715]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:08:26.717]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:08:26.717]        </block>
[20:08:26.717]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:08:26.717]      </control>
[20:08:26.717]      // end if-block "powered_down"
[20:08:26.717]    </control>
[20:08:26.717]    <block atomic="false" info="">
[20:08:26.717]      __var DEBUG_PORT_VAL    = 0;
[20:08:26.717]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:08:26.717]      __var ACCESS_POINT_VAL  = 0;
[20:08:26.717]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:08:26.717]      __ap = 1; 
[20:08:26.717]        // -> [__ap <= 0x00000001]
[20:08:26.717]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:08:26.723]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:08:26.723]      __ap = 4;
[20:08:26.725]        // -> [__ap <= 0x00000004]
[20:08:26.725]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:08:26.729]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:08:26.729]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:08:26.729]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:08:26.730]    </block>
[20:08:26.730]    <block atomic="false" info="">
[20:08:26.730]      __var nReset = 0x80;
[20:08:26.730]        // -> [nReset <= 0x00000080]
[20:08:26.730]      __var canReadPins = 0;
[20:08:26.730]        // -> [canReadPins <= 0x00000000]
[20:08:26.730]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:08:26.736]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:08:26.736]        // -> [canReadPins <= 0x00000001]
[20:08:26.736]    </block>
[20:08:26.736]    <control if="" while="1" timeout="200" info="">
[20:08:26.737]      // while "1"  (timeout="200")
[20:08:26.737]      // while-condition  =>  TRUE
[20:08:26.737]      // while "1"  (timeout="200")
[20:08:26.737]      // while-condition  =>  TRUE
[20:08:26.737]      // while "1"  (timeout="200")
[20:08:26.737]      // while-condition  =>  TRUE
[20:08:26.737]      // while "1"  (timeout="200")
[20:08:26.737]      // while-condition  =>  TRUE
[20:08:26.737]      // while "1"  (timeout="200")
[20:08:26.737]      // while-condition  =>  TRUE
[20:08:26.737]      // while "1"  (timeout="200")
[20:08:26.737]      // while-condition  =>  TRUE
[20:08:26.739]      // while "1"  (timeout="200")
[20:08:26.739]      // while  =>  TIMEOUT
[20:08:26.739]      // end while "1"
[20:08:26.739]    </control>
[20:08:26.739]    <control if="canReadPins" while="" timeout="0" info="">
[20:08:26.739]      // if-block "canReadPins"
[20:08:26.739]        // =>  TRUE
[20:08:26.739]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:08:26.739]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:08:26.741]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:08:26.741]        // while-condition  =>  FALSE
[20:08:26.742]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:08:26.742]      </control>
[20:08:26.742]      // end if-block "canReadPins"
[20:08:26.742]    </control>
[20:08:26.742]    <control if="!canReadPins" while="" timeout="0" info="">
[20:08:26.742]      // if-block "!canReadPins"
[20:08:26.742]        // =>  FALSE
[20:08:26.742]      // skip if-block "!canReadPins"
[20:08:26.742]    </control>
[20:08:26.742]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:08:26.742]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:08:26.742]        // =>  TRUE
[20:08:26.742]      <block atomic="false" info="">
[20:08:26.742]        WriteAP(0x00, 0x190008);
[20:08:26.749]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:08:26.749]        WriteAP(0xF0, 0x01);
[20:08:26.758]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:08:26.758]      </block>
[20:08:26.758]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:08:26.758]    </control>
[20:08:26.758]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:08:26.758]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:08:26.758]        // =>  FALSE
[20:08:26.759]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:08:26.759]    </control>
[20:08:26.759]    <block atomic="false" info="">
[20:08:26.759]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:08:26.771]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:08:26.771]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:08:26.771]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:08:26.773]      __ap = 0; //lets make sure we reset the access point selection
[20:08:26.773]        // -> [__ap <= 0x00000000]
[20:08:26.773]    </block>
[20:08:26.774]  </sequence>
[20:08:26.774]  
[20:08:26.803]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:08:26.803]  
[20:08:26.803]  <debugvars>
[20:08:26.803]    // Pre-defined
[20:08:26.803]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:08:26.803]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:08:26.803]    __dp=0x00000000
[20:08:26.803]    __ap=0x00000000
[20:08:26.803]    __traceout=0x00000000      (Trace Disabled)
[20:08:26.803]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:08:26.803]    __FlashAddr=0x00000000
[20:08:26.803]    __FlashLen=0x00000000
[20:08:26.803]    __FlashArg=0x00000000
[20:08:26.804]    __FlashOp=0x00000000
[20:08:26.804]    __Result=0x00000000
[20:08:26.804]  </debugvars>
[20:08:26.804]  
[20:08:26.804]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:08:26.804]    <block atomic="false" info="">
[20:08:26.804]      __var deviceID = 0;
[20:08:26.804]        // -> [deviceID <= 0x00000000]
[20:08:26.804]      __var version = 0;
[20:08:26.804]        // -> [version <= 0x00000000]
[20:08:26.804]      __var partNum = 0;
[20:08:26.804]        // -> [partNum <= 0x00000000]
[20:08:26.804]      __var manuf = 0;
[20:08:26.804]        // -> [manuf <= 0x00000000]
[20:08:26.804]      __var isMSPM0G1X0X_G3X0X = 0;
[20:08:26.804]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:08:26.804]      __var isProduction = 0;
[20:08:26.806]        // -> [isProduction <= 0x00000000]
[20:08:26.806]      __var continueId = 0;
[20:08:26.806]        // -> [continueId <= 0x00000000]
[20:08:26.806]      deviceID =   Read32(0x41C40004);
[20:08:26.812]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:08:26.812]        // -> [deviceID <= 0x2BB8802F]
[20:08:26.814]      version = deviceID >> 28;
[20:08:26.814]        // -> [version <= 0x00000002]
[20:08:26.814]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:08:26.814]        // -> [partNum <= 0x0000BB88]
[20:08:26.814]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:08:26.814]        // -> [manuf <= 0x00000017]
[20:08:26.814]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:08:26.814]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:08:26.814]      isProduction = (version > 0);
[20:08:26.814]        // -> [isProduction <= 0x00000001]
[20:08:26.814]    </block>
[20:08:26.814]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:08:26.814]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:08:26.814]        // =>  FALSE
[20:08:26.814]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:08:26.814]    </control>
[20:08:26.814]    <control if="continueId == 4" while="" timeout="0" info="">
[20:08:26.814]      // if-block "continueId == 4"
[20:08:26.814]        // =>  FALSE
[20:08:26.814]      // skip if-block "continueId == 4"
[20:08:26.814]    </control>
[20:08:26.814]    <control if="!isProduction" while="" timeout="0" info="">
[20:08:26.814]      // if-block "!isProduction"
[20:08:26.814]        // =>  FALSE
[20:08:26.814]      // skip if-block "!isProduction"
[20:08:26.814]    </control>
[20:08:26.814]  </sequence>
[20:08:26.814]  
[20:10:01.709]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:10:01.709]  
[20:10:01.720]  <debugvars>
[20:10:01.720]    // Pre-defined
[20:10:01.720]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:10:01.720]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:10:01.720]    __dp=0x00000000
[20:10:01.720]    __ap=0x00000000
[20:10:01.720]    __traceout=0x00000000      (Trace Disabled)
[20:10:01.720]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:10:01.720]    __FlashAddr=0x00000000
[20:10:01.720]    __FlashLen=0x00000000
[20:10:01.720]    __FlashArg=0x00000000
[20:10:01.721]    __FlashOp=0x00000000
[20:10:01.721]    __Result=0x00000000
[20:10:01.721]  </debugvars>
[20:10:01.721]  
[20:10:01.721]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:10:01.721]    <block atomic="false" info="">
[20:10:01.721]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:10:01.721]        // -> [isSWJ <= 0x00000001]
[20:10:01.721]      __var hasDormant = __protocol & 0x00020000;
[20:10:01.721]        // -> [hasDormant <= 0x00000000]
[20:10:01.721]      __var protType   = __protocol & 0x0000FFFF;
[20:10:01.721]        // -> [protType <= 0x00000002]
[20:10:01.721]    </block>
[20:10:01.721]    <control if="protType == 1" while="" timeout="0" info="">
[20:10:01.721]      // if-block "protType == 1"
[20:10:01.721]        // =>  FALSE
[20:10:01.721]      // skip if-block "protType == 1"
[20:10:01.721]    </control>
[20:10:01.721]    <control if="protType == 2" while="" timeout="0" info="">
[20:10:01.721]      // if-block "protType == 2"
[20:10:01.721]        // =>  TRUE
[20:10:01.721]      <control if="isSWJ" while="" timeout="0" info="">
[20:10:01.721]        // if-block "isSWJ"
[20:10:01.723]          // =>  TRUE
[20:10:01.723]        <control if="hasDormant" while="" timeout="0" info="">
[20:10:01.723]          // if-block "hasDormant"
[20:10:01.723]            // =>  FALSE
[20:10:01.723]          // skip if-block "hasDormant"
[20:10:01.723]        </control>
[20:10:01.723]        <control if="!hasDormant" while="" timeout="0" info="">
[20:10:01.723]          // if-block "!hasDormant"
[20:10:01.723]            // =>  TRUE
[20:10:01.724]          <block atomic="false" info="">
[20:10:01.724]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:10:01.729]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:10:01.729]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:10:01.734]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:10:01.734]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:10:01.734]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:10:01.734]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:10:01.739]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:10:01.739]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:10:01.742]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:10:01.742]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:10:01.743]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:10:01.743]          </block>
[20:10:01.743]          // end if-block "!hasDormant"
[20:10:01.743]        </control>
[20:10:01.744]        // end if-block "isSWJ"
[20:10:01.744]      </control>
[20:10:01.744]      <control if="!isSWJ" while="" timeout="0" info="">
[20:10:01.744]        // if-block "!isSWJ"
[20:10:01.744]          // =>  FALSE
[20:10:01.744]        // skip if-block "!isSWJ"
[20:10:01.744]      </control>
[20:10:01.744]      <block atomic="false" info="">
[20:10:01.744]        ReadDP(0x0);
[20:10:01.746]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:10:01.746]      </block>
[20:10:01.746]      // end if-block "protType == 2"
[20:10:01.746]    </control>
[20:10:01.746]  </sequence>
[20:10:01.746]  
[20:10:01.750]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:10:01.750]  
[20:10:01.750]  <debugvars>
[20:10:01.750]    // Pre-defined
[20:10:01.750]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:10:01.750]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:10:01.750]    __dp=0x00000000
[20:10:01.750]    __ap=0x00000000
[20:10:01.750]    __traceout=0x00000000      (Trace Disabled)
[20:10:01.750]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:10:01.750]    __FlashAddr=0x00000000
[20:10:01.750]    __FlashLen=0x00000000
[20:10:01.750]    __FlashArg=0x00000000
[20:10:01.750]    __FlashOp=0x00000000
[20:10:01.750]    __Result=0x00000000
[20:10:01.750]  </debugvars>
[20:10:01.750]  
[20:10:01.750]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:10:01.750]    <block atomic="false" info="">
[20:10:01.750]      __var SW_DP_ABORT       = 0x0;
[20:10:01.750]        // -> [SW_DP_ABORT <= 0x00000000]
[20:10:01.750]      __var DP_CTRL_STAT      = 0x4;
[20:10:01.750]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:10:01.750]      __var DP_SELECT         = 0x8;
[20:10:01.750]        // -> [DP_SELECT <= 0x00000008]
[20:10:01.750]      __var powered_down      = 0;
[20:10:01.750]        // -> [powered_down <= 0x00000000]
[20:10:01.750]      WriteDP(DP_SELECT, 0x00000000);
[20:10:01.756]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:10:01.756]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:10:01.756]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:10:01.756]        // -> [powered_down <= 0x00000001]
[20:10:01.758]    </block>
[20:10:01.758]    <control if="powered_down" while="" timeout="0" info="">
[20:10:01.758]      // if-block "powered_down"
[20:10:01.758]        // =>  TRUE
[20:10:01.758]      <block atomic="false" info="">
[20:10:01.758]        Message(0, "Debug/System power-up request sent");
[20:10:01.758]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:10:01.767]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:10:01.767]      </block>
[20:10:01.767]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:10:01.767]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:10:01.767]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:10:01.767]        // while-condition  =>  FALSE
[20:10:01.767]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:10:01.767]      </control>
[20:10:01.767]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:10:01.770]        // if-block "(__protocol & 0xFFFF) == 1"
[20:10:01.770]          // =>  FALSE
[20:10:01.770]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:10:01.770]      </control>
[20:10:01.770]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:10:01.770]        // if-block "(__protocol & 0xFFFF) == 2"
[20:10:01.770]          // =>  TRUE
[20:10:01.770]        <block atomic="false" info="">
[20:10:01.770]          Message(0, "executing SWD power up");
[20:10:01.771]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:10:01.774]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:10:01.774]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:10:01.778]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:10:01.778]        </block>
[20:10:01.778]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:10:01.778]      </control>
[20:10:01.778]      // end if-block "powered_down"
[20:10:01.778]    </control>
[20:10:01.778]    <block atomic="false" info="">
[20:10:01.778]      __var DEBUG_PORT_VAL    = 0;
[20:10:01.778]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:10:01.778]      __var ACCESS_POINT_VAL  = 0;
[20:10:01.778]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:10:01.779]      __ap = 1; 
[20:10:01.779]        // -> [__ap <= 0x00000001]
[20:10:01.779]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:10:01.782]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:10:01.782]      __ap = 4;
[20:10:01.782]        // -> [__ap <= 0x00000004]
[20:10:01.782]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:10:01.786]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:10:01.786]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:10:01.786]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:10:01.790]    </block>
[20:10:01.790]    <block atomic="false" info="">
[20:10:01.790]      __var nReset = 0x80;
[20:10:01.790]        // -> [nReset <= 0x00000080]
[20:10:01.790]      __var canReadPins = 0;
[20:10:01.790]        // -> [canReadPins <= 0x00000000]
[20:10:01.790]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:10:01.795]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:10:01.795]        // -> [canReadPins <= 0x00000001]
[20:10:01.795]    </block>
[20:10:01.795]    <control if="" while="1" timeout="200" info="">
[20:10:01.795]      // while "1"  (timeout="200")
[20:10:01.795]      // while-condition  =>  TRUE
[20:10:01.795]      // while "1"  (timeout="200")
[20:10:01.795]      // while-condition  =>  TRUE
[20:10:01.795]      // while "1"  (timeout="200")
[20:10:01.795]      // while-condition  =>  TRUE
[20:10:01.795]      // while "1"  (timeout="200")
[20:10:01.795]      // while-condition  =>  TRUE
[20:10:01.795]      // while "1"  (timeout="200")
[20:10:01.795]      // while-condition  =>  TRUE
[20:10:01.795]      // while "1"  (timeout="200")
[20:10:01.795]      // while-condition  =>  TRUE
[20:10:01.798]      // while "1"  (timeout="200")
[20:10:01.798]      // while-condition  =>  TRUE
[20:10:01.798]      // while "1"  (timeout="200")
[20:10:01.798]      // while-condition  =>  TRUE
[20:10:01.798]      // while "1"  (timeout="200")
[20:10:01.798]      // while-condition  =>  TRUE
[20:10:01.798]      // while "1"  (timeout="200")
[20:10:01.798]      // while-condition  =>  TRUE
[20:10:01.798]      // while "1"  (timeout="200")
[20:10:01.798]      // while-condition  =>  TRUE
[20:10:01.798]      // while "1"  (timeout="200")
[20:10:01.798]      // while-condition  =>  TRUE
[20:10:01.798]      // while "1"  (timeout="200")
[20:10:01.798]      // while-condition  =>  TRUE
[20:10:01.798]      // while "1"  (timeout="200")
[20:10:01.800]      // while-condition  =>  TRUE
[20:10:01.800]      // while "1"  (timeout="200")
[20:10:01.800]      // while-condition  =>  TRUE
[20:10:01.800]      // while "1"  (timeout="200")
[20:10:01.800]      // while-condition  =>  TRUE
[20:10:01.800]      // while "1"  (timeout="200")
[20:10:01.800]      // while-condition  =>  TRUE
[20:10:01.800]      // while "1"  (timeout="200")
[20:10:01.800]      // while-condition  =>  TRUE
[20:10:01.800]      // while "1"  (timeout="200")
[20:10:01.800]      // while-condition  =>  TRUE
[20:10:01.800]      // while "1"  (timeout="200")
[20:10:01.800]      // while-condition  =>  TRUE
[20:10:01.800]      // while "1"  (timeout="200")
[20:10:01.800]      // while-condition  =>  TRUE
[20:10:01.800]      // while "1"  (timeout="200")
[20:10:01.800]      // while-condition  =>  TRUE
[20:10:01.800]      // while "1"  (timeout="200")
[20:10:01.800]      // while-condition  =>  TRUE
[20:10:01.800]      // while "1"  (timeout="200")
[20:10:01.800]      // while-condition  =>  TRUE
[20:10:01.802]      // while "1"  (timeout="200")
[20:10:01.802]      // while  =>  TIMEOUT
[20:10:01.802]      // end while "1"
[20:10:01.802]    </control>
[20:10:01.802]    <control if="canReadPins" while="" timeout="0" info="">
[20:10:01.802]      // if-block "canReadPins"
[20:10:01.802]        // =>  TRUE
[20:10:01.802]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:10:01.802]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:10:01.805]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:10:01.805]        // while-condition  =>  FALSE
[20:10:01.805]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:10:01.805]      </control>
[20:10:01.805]      // end if-block "canReadPins"
[20:10:01.805]    </control>
[20:10:01.805]    <control if="!canReadPins" while="" timeout="0" info="">
[20:10:01.805]      // if-block "!canReadPins"
[20:10:01.805]        // =>  FALSE
[20:10:01.805]      // skip if-block "!canReadPins"
[20:10:01.805]    </control>
[20:10:01.805]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:10:01.805]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:10:01.805]        // =>  TRUE
[20:10:01.806]      <block atomic="false" info="">
[20:10:01.806]        WriteAP(0x00, 0x190008);
[20:10:01.814]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:10:01.814]        WriteAP(0xF0, 0x01);
[20:10:01.814]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:10:01.818]      </block>
[20:10:01.818]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:10:01.818]    </control>
[20:10:01.818]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:10:01.818]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:10:01.818]        // =>  FALSE
[20:10:01.818]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:10:01.818]    </control>
[20:10:01.819]    <block atomic="false" info="">
[20:10:01.819]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:10:01.822]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:10:01.822]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:10:01.822]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:10:01.824]      __ap = 0; //lets make sure we reset the access point selection
[20:10:01.824]        // -> [__ap <= 0x00000000]
[20:10:01.824]    </block>
[20:10:01.824]  </sequence>
[20:10:01.824]  
[20:10:01.854]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:10:01.854]  
[20:10:01.854]  <debugvars>
[20:10:01.854]    // Pre-defined
[20:10:01.854]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:10:01.854]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:10:01.854]    __dp=0x00000000
[20:10:01.854]    __ap=0x00000000
[20:10:01.854]    __traceout=0x00000000      (Trace Disabled)
[20:10:01.854]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:10:01.854]    __FlashAddr=0x00000000
[20:10:01.854]    __FlashLen=0x00000000
[20:10:01.854]    __FlashArg=0x00000000
[20:10:01.854]    __FlashOp=0x00000000
[20:10:01.858]    __Result=0x00000000
[20:10:01.858]  </debugvars>
[20:10:01.858]  
[20:10:01.858]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:10:01.858]    <block atomic="false" info="">
[20:10:01.858]      __var deviceID = 0;
[20:10:01.858]        // -> [deviceID <= 0x00000000]
[20:10:01.858]      __var version = 0;
[20:10:01.858]        // -> [version <= 0x00000000]
[20:10:01.858]      __var partNum = 0;
[20:10:01.858]        // -> [partNum <= 0x00000000]
[20:10:01.858]      __var manuf = 0;
[20:10:01.858]        // -> [manuf <= 0x00000000]
[20:10:01.858]      __var isMSPM0G1X0X_G3X0X = 0;
[20:10:01.858]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:10:01.858]      __var isProduction = 0;
[20:10:01.858]        // -> [isProduction <= 0x00000000]
[20:10:01.858]      __var continueId = 0;
[20:10:01.858]        // -> [continueId <= 0x00000000]
[20:10:01.858]      deviceID =   Read32(0x41C40004);
[20:10:01.874]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:10:01.874]        // -> [deviceID <= 0x2BB8802F]
[20:10:01.874]      version = deviceID >> 28;
[20:10:01.874]        // -> [version <= 0x00000002]
[20:10:01.874]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:10:01.874]        // -> [partNum <= 0x0000BB88]
[20:10:01.874]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:10:01.874]        // -> [manuf <= 0x00000017]
[20:10:01.874]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:10:01.874]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:10:01.874]      isProduction = (version > 0);
[20:10:01.874]        // -> [isProduction <= 0x00000001]
[20:10:01.874]    </block>
[20:10:01.874]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:10:01.874]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:10:01.874]        // =>  FALSE
[20:10:01.874]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:10:01.874]    </control>
[20:10:01.874]    <control if="continueId == 4" while="" timeout="0" info="">
[20:10:01.874]      // if-block "continueId == 4"
[20:10:01.874]        // =>  FALSE
[20:10:01.874]      // skip if-block "continueId == 4"
[20:10:01.874]    </control>
[20:10:01.874]    <control if="!isProduction" while="" timeout="0" info="">
[20:10:01.874]      // if-block "!isProduction"
[20:10:01.874]        // =>  FALSE
[20:10:01.874]      // skip if-block "!isProduction"
[20:10:01.874]    </control>
[20:10:01.874]  </sequence>
[20:10:01.874]  
