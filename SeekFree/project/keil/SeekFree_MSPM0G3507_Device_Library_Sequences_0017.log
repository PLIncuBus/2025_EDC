/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0017.log
 *  Created     : 00:23:00 (26/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[00:23:00.914]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:23:00.914]  
[00:23:00.915]  <debugvars>
[00:23:00.915]    // Pre-defined
[00:23:00.915]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:00.915]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:23:00.915]    __dp=0x00000000
[00:23:00.915]    __ap=0x00000000
[00:23:00.915]    __traceout=0x00000000      (Trace Disabled)
[00:23:00.915]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:00.915]    __FlashAddr=0x00000000
[00:23:00.917]    __FlashLen=0x00000000
[00:23:00.917]    __FlashArg=0x00000000
[00:23:00.917]    __FlashOp=0x00000000
[00:23:00.917]    __Result=0x00000000
[00:23:00.917]  </debugvars>
[00:23:00.917]  
[00:23:00.917]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:23:00.917]    <block atomic="false" info="">
[00:23:00.919]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:23:00.919]        // -> [isSWJ <= 0x00000001]
[00:23:00.919]      __var hasDormant = __protocol & 0x00020000;
[00:23:00.919]        // -> [hasDormant <= 0x00000000]
[00:23:00.919]      __var protType   = __protocol & 0x0000FFFF;
[00:23:00.919]        // -> [protType <= 0x00000002]
[00:23:00.919]    </block>
[00:23:00.919]    <control if="protType == 1" while="" timeout="0" info="">
[00:23:00.920]      // if-block "protType == 1"
[00:23:00.920]        // =>  FALSE
[00:23:00.920]      // skip if-block "protType == 1"
[00:23:00.920]    </control>
[00:23:00.920]    <control if="protType == 2" while="" timeout="0" info="">
[00:23:00.920]      // if-block "protType == 2"
[00:23:00.920]        // =>  TRUE
[00:23:00.920]      <control if="isSWJ" while="" timeout="0" info="">
[00:23:00.921]        // if-block "isSWJ"
[00:23:00.921]          // =>  TRUE
[00:23:00.921]        <control if="hasDormant" while="" timeout="0" info="">
[00:23:00.921]          // if-block "hasDormant"
[00:23:00.921]            // =>  FALSE
[00:23:00.921]          // skip if-block "hasDormant"
[00:23:00.921]        </control>
[00:23:00.921]        <control if="!hasDormant" while="" timeout="0" info="">
[00:23:00.921]          // if-block "!hasDormant"
[00:23:00.922]            // =>  TRUE
[00:23:00.922]          <block atomic="false" info="">
[00:23:00.922]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:23:00.922]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:00.922]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:23:00.924]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:23:00.924]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:23:00.926]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:00.926]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:23:00.926]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:23:00.926]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:23:00.926]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:00.926]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:23:00.932]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:23:00.932]          </block>
[00:23:00.932]          // end if-block "!hasDormant"
[00:23:00.932]        </control>
[00:23:00.932]        // end if-block "isSWJ"
[00:23:00.932]      </control>
[00:23:00.932]      <control if="!isSWJ" while="" timeout="0" info="">
[00:23:00.933]        // if-block "!isSWJ"
[00:23:00.933]          // =>  FALSE
[00:23:00.933]        // skip if-block "!isSWJ"
[00:23:00.933]      </control>
[00:23:00.933]      <block atomic="false" info="">
[00:23:00.933]        ReadDP(0x0);
[00:23:00.934]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:23:00.936]      </block>
[00:23:00.936]      // end if-block "protType == 2"
[00:23:00.936]    </control>
[00:23:00.936]  </sequence>
[00:23:00.936]  
[00:23:00.937]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:23:00.937]  
[00:23:00.937]  <debugvars>
[00:23:00.937]    // Pre-defined
[00:23:00.937]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:00.937]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:23:00.937]    __dp=0x00000000
[00:23:00.937]    __ap=0x00000000
[00:23:00.937]    __traceout=0x00000000      (Trace Disabled)
[00:23:00.937]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:00.937]    __FlashAddr=0x00000000
[00:23:00.937]    __FlashLen=0x00000000
[00:23:00.937]    __FlashArg=0x00000000
[00:23:00.937]    __FlashOp=0x00000000
[00:23:00.941]    __Result=0x00000000
[00:23:00.941]  </debugvars>
[00:23:00.941]  
[00:23:00.941]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:23:00.941]    <block atomic="false" info="">
[00:23:00.941]      __var SW_DP_ABORT       = 0x0;
[00:23:00.941]        // -> [SW_DP_ABORT <= 0x00000000]
[00:23:00.941]      __var DP_CTRL_STAT      = 0x4;
[00:23:00.941]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:23:00.941]      __var DP_SELECT         = 0x8;
[00:23:00.941]        // -> [DP_SELECT <= 0x00000008]
[00:23:00.941]      __var powered_down      = 0;
[00:23:00.941]        // -> [powered_down <= 0x00000000]
[00:23:00.941]      WriteDP(DP_SELECT, 0x00000000);
[00:23:00.944]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:23:00.944]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:23:00.946]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:23:00.946]        // -> [powered_down <= 0x00000001]
[00:23:00.946]    </block>
[00:23:00.946]    <control if="powered_down" while="" timeout="0" info="">
[00:23:00.946]      // if-block "powered_down"
[00:23:00.946]        // =>  TRUE
[00:23:00.946]      <block atomic="false" info="">
[00:23:00.946]        Message(0, "Debug/System power-up request sent");
[00:23:00.946]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:23:00.948]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:23:00.948]      </block>
[00:23:00.948]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:23:00.948]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:23:00.950]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:23:00.950]        // while-condition  =>  FALSE
[00:23:00.950]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:23:00.950]      </control>
[00:23:00.950]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:23:00.950]        // if-block "(__protocol & 0xFFFF) == 1"
[00:23:00.950]          // =>  FALSE
[00:23:00.950]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:23:00.953]      </control>
[00:23:00.953]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:23:00.953]        // if-block "(__protocol & 0xFFFF) == 2"
[00:23:00.953]          // =>  TRUE
[00:23:00.953]        <block atomic="false" info="">
[00:23:00.953]          Message(0, "executing SWD power up");
[00:23:00.953]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:23:00.955]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:23:00.955]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:23:00.955]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:23:00.955]        </block>
[00:23:00.955]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:23:00.955]      </control>
[00:23:00.955]      // end if-block "powered_down"
[00:23:00.955]    </control>
[00:23:00.955]    <block atomic="false" info="">
[00:23:00.955]      __var DEBUG_PORT_VAL    = 0;
[00:23:00.955]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:23:00.955]      __var ACCESS_POINT_VAL  = 0;
[00:23:00.955]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:23:00.955]      __ap = 1; 
[00:23:00.955]        // -> [__ap <= 0x00000001]
[00:23:00.955]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:23:00.960]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:23:00.960]      __ap = 4;
[00:23:00.960]        // -> [__ap <= 0x00000004]
[00:23:00.960]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:23:00.965]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:23:00.965]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:23:00.965]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:23:00.965]    </block>
[00:23:00.965]    <block atomic="false" info="">
[00:23:00.967]      __var nReset = 0x80;
[00:23:00.967]        // -> [nReset <= 0x00000080]
[00:23:00.967]      __var canReadPins = 0;
[00:23:00.967]        // -> [canReadPins <= 0x00000000]
[00:23:00.967]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:23:00.969]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:23:00.969]        // -> [canReadPins <= 0x00000001]
[00:23:00.969]    </block>
[00:23:00.969]    <control if="" while="1" timeout="200" info="">
[00:23:00.969]      // while "1"  (timeout="200")
[00:23:00.972]      // while-condition  =>  TRUE
[00:23:00.972]      // while "1"  (timeout="200")
[00:23:00.972]      // while-condition  =>  TRUE
[00:23:00.972]      // while "1"  (timeout="200")
[00:23:00.972]      // while-condition  =>  TRUE
[00:23:00.972]      // while "1"  (timeout="200")
[00:23:00.972]      // while-condition  =>  TRUE
[00:23:00.972]      // while "1"  (timeout="200")
[00:23:00.972]      // while-condition  =>  TRUE
[00:23:00.972]      // while "1"  (timeout="200")
[00:23:00.972]      // while-condition  =>  TRUE
[00:23:00.972]      // while "1"  (timeout="200")
[00:23:00.972]      // while-condition  =>  TRUE
[00:23:00.972]      // while "1"  (timeout="200")
[00:23:00.972]      // while-condition  =>  TRUE
[00:23:00.972]      // while "1"  (timeout="200")
[00:23:00.972]      // while-condition  =>  TRUE
[00:23:00.972]      // while "1"  (timeout="200")
[00:23:00.972]      // while-condition  =>  TRUE
[00:23:00.972]      // while "1"  (timeout="200")
[00:23:00.972]      // while-condition  =>  TRUE
[00:23:00.972]      // while "1"  (timeout="200")
[00:23:00.972]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.976]      // while "1"  (timeout="200")
[00:23:00.976]      // while-condition  =>  TRUE
[00:23:00.983]      // while "1"  (timeout="200")
[00:23:00.983]      // while-condition  =>  TRUE
[00:23:00.983]      // while "1"  (timeout="200")
[00:23:00.983]      // while-condition  =>  TRUE
[00:23:00.983]      // while "1"  (timeout="200")
[00:23:00.983]      // while-condition  =>  TRUE
[00:23:00.983]      // while "1"  (timeout="200")
[00:23:00.983]      // while-condition  =>  TRUE
[00:23:00.983]      // while "1"  (timeout="200")
[00:23:00.983]      // while-condition  =>  TRUE
[00:23:00.983]      // while "1"  (timeout="200")
[00:23:00.983]      // while-condition  =>  TRUE
[00:23:00.983]      // while "1"  (timeout="200")
[00:23:00.983]      // while-condition  =>  TRUE
[00:23:00.983]      // while "1"  (timeout="200")
[00:23:00.983]      // while-condition  =>  TRUE
[00:23:00.983]      // while "1"  (timeout="200")
[00:23:00.985]      // while-condition  =>  TRUE
[00:23:00.985]      // while "1"  (timeout="200")
[00:23:00.985]      // while  =>  TIMEOUT
[00:23:00.985]      // end while "1"
[00:23:00.985]    </control>
[00:23:00.986]    <control if="canReadPins" while="" timeout="0" info="">
[00:23:00.986]      // if-block "canReadPins"
[00:23:00.986]        // =>  TRUE
[00:23:00.986]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:23:00.986]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:23:00.987]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:23:00.987]        // while-condition  =>  FALSE
[00:23:00.987]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:23:00.987]      </control>
[00:23:00.987]      // end if-block "canReadPins"
[00:23:00.987]    </control>
[00:23:00.987]    <control if="!canReadPins" while="" timeout="0" info="">
[00:23:00.987]      // if-block "!canReadPins"
[00:23:00.989]        // =>  FALSE
[00:23:00.989]      // skip if-block "!canReadPins"
[00:23:00.989]    </control>
[00:23:00.989]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:23:00.989]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:23:00.989]        // =>  TRUE
[00:23:00.989]      <block atomic="false" info="">
[00:23:00.989]        WriteAP(0x00, 0x190008);
[00:23:00.989]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:23:00.989]        WriteAP(0xF0, 0x01);
[00:23:00.989]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:23:00.989]      </block>
[00:23:00.989]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:23:00.989]    </control>
[00:23:00.989]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:23:00.989]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:23:00.989]        // =>  FALSE
[00:23:00.996]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:23:00.996]    </control>
[00:23:00.996]    <block atomic="false" info="">
[00:23:00.996]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:23:00.996]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:23:00.996]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:23:00.996]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:23:00.996]      __ap = 0; //lets make sure we reset the access point selection
[00:23:00.996]        // -> [__ap <= 0x00000000]
[00:23:00.996]    </block>
[00:23:00.996]  </sequence>
[00:23:00.996]  
[00:23:01.018]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:23:01.018]  
[00:23:01.018]  <debugvars>
[00:23:01.018]    // Pre-defined
[00:23:01.018]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:01.018]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:23:01.018]    __dp=0x00000000
[00:23:01.018]    __ap=0x00000000
[00:23:01.018]    __traceout=0x00000000      (Trace Disabled)
[00:23:01.018]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:01.018]    __FlashAddr=0x00000000
[00:23:01.018]    __FlashLen=0x00000000
[00:23:01.018]    __FlashArg=0x00000000
[00:23:01.018]    __FlashOp=0x00000000
[00:23:01.022]    __Result=0x00000000
[00:23:01.022]  </debugvars>
[00:23:01.022]  
[00:23:01.022]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:23:01.022]    <block atomic="false" info="">
[00:23:01.022]      __var deviceID = 0;
[00:23:01.022]        // -> [deviceID <= 0x00000000]
[00:23:01.022]      __var version = 0;
[00:23:01.022]        // -> [version <= 0x00000000]
[00:23:01.022]      __var partNum = 0;
[00:23:01.022]        // -> [partNum <= 0x00000000]
[00:23:01.022]      __var manuf = 0;
[00:23:01.022]        // -> [manuf <= 0x00000000]
[00:23:01.022]      __var isMSPM0G1X0X_G3X0X = 0;
[00:23:01.022]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:23:01.022]      __var isProduction = 0;
[00:23:01.022]        // -> [isProduction <= 0x00000000]
[00:23:01.022]      __var continueId = 0;
[00:23:01.022]        // -> [continueId <= 0x00000000]
[00:23:01.022]      deviceID =   Read32(0x41C40004);
[00:23:01.028]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:23:01.028]        // -> [deviceID <= 0x2BB8802F]
[00:23:01.028]      version = deviceID >> 28;
[00:23:01.028]        // -> [version <= 0x00000002]
[00:23:01.028]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:23:01.028]        // -> [partNum <= 0x0000BB88]
[00:23:01.028]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:23:01.028]        // -> [manuf <= 0x00000017]
[00:23:01.028]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:23:01.028]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:23:01.028]      isProduction = (version > 0);
[00:23:01.028]        // -> [isProduction <= 0x00000001]
[00:23:01.028]    </block>
[00:23:01.031]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:23:01.031]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:23:01.031]        // =>  FALSE
[00:23:01.031]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:23:01.031]    </control>
[00:23:01.031]    <control if="continueId == 4" while="" timeout="0" info="">
[00:23:01.031]      // if-block "continueId == 4"
[00:23:01.031]        // =>  FALSE
[00:23:01.032]      // skip if-block "continueId == 4"
[00:23:01.032]    </control>
[00:23:01.032]    <control if="!isProduction" while="" timeout="0" info="">
[00:23:01.032]      // if-block "!isProduction"
[00:23:01.032]        // =>  FALSE
[00:23:01.032]      // skip if-block "!isProduction"
[00:23:01.032]    </control>
[00:23:01.032]  </sequence>
[00:23:01.032]  
[00:23:06.348]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:23:06.348]  
[00:23:06.348]  <debugvars>
[00:23:06.348]    // Pre-defined
[00:23:06.348]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:06.348]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:23:06.348]    __dp=0x00000000
[00:23:06.348]    __ap=0x00000000
[00:23:06.348]    __traceout=0x00000000      (Trace Disabled)
[00:23:06.348]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:06.348]    __FlashAddr=0x00000000
[00:23:06.348]    __FlashLen=0x00000000
[00:23:06.348]    __FlashArg=0x00000000
[00:23:06.348]    __FlashOp=0x00000000
[00:23:06.348]    __Result=0x00000000
[00:23:06.358]  </debugvars>
[00:23:06.358]  
[00:23:06.358]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:23:06.358]    <block atomic="false" info="">
[00:23:06.358]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:23:06.358]        // -> [isSWJ <= 0x00000001]
[00:23:06.358]      __var hasDormant = __protocol & 0x00020000;
[00:23:06.358]        // -> [hasDormant <= 0x00000000]
[00:23:06.358]      __var protType   = __protocol & 0x0000FFFF;
[00:23:06.358]        // -> [protType <= 0x00000002]
[00:23:06.358]    </block>
[00:23:06.358]    <control if="protType == 1" while="" timeout="0" info="">
[00:23:06.358]      // if-block "protType == 1"
[00:23:06.358]        // =>  FALSE
[00:23:06.358]      // skip if-block "protType == 1"
[00:23:06.358]    </control>
[00:23:06.358]    <control if="protType == 2" while="" timeout="0" info="">
[00:23:06.358]      // if-block "protType == 2"
[00:23:06.358]        // =>  TRUE
[00:23:06.358]      <control if="isSWJ" while="" timeout="0" info="">
[00:23:06.358]        // if-block "isSWJ"
[00:23:06.358]          // =>  TRUE
[00:23:06.358]        <control if="hasDormant" while="" timeout="0" info="">
[00:23:06.358]          // if-block "hasDormant"
[00:23:06.358]            // =>  FALSE
[00:23:06.358]          // skip if-block "hasDormant"
[00:23:06.358]        </control>
[00:23:06.358]        <control if="!hasDormant" while="" timeout="0" info="">
[00:23:06.358]          // if-block "!hasDormant"
[00:23:06.358]            // =>  TRUE
[00:23:06.358]          <block atomic="false" info="">
[00:23:06.358]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:23:06.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:06.358]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:23:06.358]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:23:06.358]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:23:06.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:06.358]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:23:06.358]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:23:06.358]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:23:06.368]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:06.368]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:23:06.368]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:23:06.368]          </block>
[00:23:06.368]          // end if-block "!hasDormant"
[00:23:06.368]        </control>
[00:23:06.368]        // end if-block "isSWJ"
[00:23:06.368]      </control>
[00:23:06.368]      <control if="!isSWJ" while="" timeout="0" info="">
[00:23:06.368]        // if-block "!isSWJ"
[00:23:06.368]          // =>  FALSE
[00:23:06.368]        // skip if-block "!isSWJ"
[00:23:06.368]      </control>
[00:23:06.368]      <block atomic="false" info="">
[00:23:06.368]        ReadDP(0x0);
[00:23:06.368]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:23:06.368]      </block>
[00:23:06.368]      // end if-block "protType == 2"
[00:23:06.368]    </control>
[00:23:06.368]  </sequence>
[00:23:06.368]  
[00:23:06.368]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:23:06.368]  
[00:23:06.368]  <debugvars>
[00:23:06.368]    // Pre-defined
[00:23:06.368]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:06.368]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:23:06.368]    __dp=0x00000000
[00:23:06.368]    __ap=0x00000000
[00:23:06.368]    __traceout=0x00000000      (Trace Disabled)
[00:23:06.368]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:06.368]    __FlashAddr=0x00000000
[00:23:06.368]    __FlashLen=0x00000000
[00:23:06.368]    __FlashArg=0x00000000
[00:23:06.368]    __FlashOp=0x00000000
[00:23:06.368]    __Result=0x00000000
[00:23:06.368]  </debugvars>
[00:23:06.368]  
[00:23:06.368]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:23:06.368]    <block atomic="false" info="">
[00:23:06.368]      __var SW_DP_ABORT       = 0x0;
[00:23:06.368]        // -> [SW_DP_ABORT <= 0x00000000]
[00:23:06.368]      __var DP_CTRL_STAT      = 0x4;
[00:23:06.368]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:23:06.368]      __var DP_SELECT         = 0x8;
[00:23:06.368]        // -> [DP_SELECT <= 0x00000008]
[00:23:06.368]      __var powered_down      = 0;
[00:23:06.368]        // -> [powered_down <= 0x00000000]
[00:23:06.368]      WriteDP(DP_SELECT, 0x00000000);
[00:23:06.378]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:23:06.378]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:23:06.378]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:23:06.378]        // -> [powered_down <= 0x00000001]
[00:23:06.378]    </block>
[00:23:06.378]    <control if="powered_down" while="" timeout="0" info="">
[00:23:06.378]      // if-block "powered_down"
[00:23:06.378]        // =>  TRUE
[00:23:06.378]      <block atomic="false" info="">
[00:23:06.378]        Message(0, "Debug/System power-up request sent");
[00:23:06.378]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:23:06.378]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:23:06.378]      </block>
[00:23:06.378]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:23:06.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:23:06.378]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:23:06.378]        // while-condition  =>  FALSE
[00:23:06.378]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:23:06.378]      </control>
[00:23:06.378]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:23:06.378]        // if-block "(__protocol & 0xFFFF) == 1"
[00:23:06.378]          // =>  FALSE
[00:23:06.378]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:23:06.378]      </control>
[00:23:06.378]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:23:06.378]        // if-block "(__protocol & 0xFFFF) == 2"
[00:23:06.378]          // =>  TRUE
[00:23:06.378]        <block atomic="false" info="">
[00:23:06.378]          Message(0, "executing SWD power up");
[00:23:06.388]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:23:06.388]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:23:06.388]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:23:06.388]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:23:06.388]        </block>
[00:23:06.388]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:23:06.388]      </control>
[00:23:06.388]      // end if-block "powered_down"
[00:23:06.388]    </control>
[00:23:06.388]    <block atomic="false" info="">
[00:23:06.388]      __var DEBUG_PORT_VAL    = 0;
[00:23:06.388]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:23:06.388]      __var ACCESS_POINT_VAL  = 0;
[00:23:06.388]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:23:06.388]      __ap = 1; 
[00:23:06.388]        // -> [__ap <= 0x00000001]
[00:23:06.388]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:23:06.388]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:23:06.398]      __ap = 4;
[00:23:06.398]        // -> [__ap <= 0x00000004]
[00:23:06.398]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:23:06.398]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:23:06.398]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:23:06.398]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:23:06.398]    </block>
[00:23:06.398]    <block atomic="false" info="">
[00:23:06.398]      __var nReset = 0x80;
[00:23:06.398]        // -> [nReset <= 0x00000080]
[00:23:06.398]      __var canReadPins = 0;
[00:23:06.398]        // -> [canReadPins <= 0x00000000]
[00:23:06.398]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:23:06.398]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:23:06.398]        // -> [canReadPins <= 0x00000001]
[00:23:06.398]    </block>
[00:23:06.398]    <control if="" while="1" timeout="200" info="">
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.398]      // while-condition  =>  TRUE
[00:23:06.398]      // while "1"  (timeout="200")
[00:23:06.408]      // while-condition  =>  TRUE
[00:23:06.408]      // while "1"  (timeout="200")
[00:23:06.408]      // while  =>  TIMEOUT
[00:23:06.408]      // end while "1"
[00:23:06.408]    </control>
[00:23:06.408]    <control if="canReadPins" while="" timeout="0" info="">
[00:23:06.408]      // if-block "canReadPins"
[00:23:06.408]        // =>  TRUE
[00:23:06.408]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:23:06.408]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:23:06.408]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:23:06.408]        // while-condition  =>  FALSE
[00:23:06.408]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:23:06.408]      </control>
[00:23:06.408]      // end if-block "canReadPins"
[00:23:06.408]    </control>
[00:23:06.408]    <control if="!canReadPins" while="" timeout="0" info="">
[00:23:06.408]      // if-block "!canReadPins"
[00:23:06.408]        // =>  FALSE
[00:23:06.408]      // skip if-block "!canReadPins"
[00:23:06.408]    </control>
[00:23:06.408]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:23:06.408]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:23:06.408]        // =>  TRUE
[00:23:06.408]      <block atomic="false" info="">
[00:23:06.408]        WriteAP(0x00, 0x190008);
[00:23:06.408]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:23:06.408]        WriteAP(0xF0, 0x01);
[00:23:06.408]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:23:06.408]      </block>
[00:23:06.408]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:23:06.408]    </control>
[00:23:06.408]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:23:06.408]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:23:06.408]        // =>  FALSE
[00:23:06.418]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:23:06.418]    </control>
[00:23:06.418]    <block atomic="false" info="">
[00:23:06.418]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:23:06.418]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:23:06.418]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:23:06.418]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:23:06.418]      __ap = 0; //lets make sure we reset the access point selection
[00:23:06.418]        // -> [__ap <= 0x00000000]
[00:23:06.418]    </block>
[00:23:06.418]  </sequence>
[00:23:06.418]  
[00:23:06.438]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:23:06.438]  
[00:23:06.438]  <debugvars>
[00:23:06.438]    // Pre-defined
[00:23:06.438]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:06.438]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:23:06.438]    __dp=0x00000000
[00:23:06.438]    __ap=0x00000000
[00:23:06.438]    __traceout=0x00000000      (Trace Disabled)
[00:23:06.438]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:06.438]    __FlashAddr=0x00000000
[00:23:06.438]    __FlashLen=0x00000000
[00:23:06.438]    __FlashArg=0x00000000
[00:23:06.438]    __FlashOp=0x00000000
[00:23:06.438]    __Result=0x00000000
[00:23:06.438]  </debugvars>
[00:23:06.438]  
[00:23:06.438]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:23:06.438]    <block atomic="false" info="">
[00:23:06.438]      __var deviceID = 0;
[00:23:06.438]        // -> [deviceID <= 0x00000000]
[00:23:06.438]      __var version = 0;
[00:23:06.438]        // -> [version <= 0x00000000]
[00:23:06.438]      __var partNum = 0;
[00:23:06.438]        // -> [partNum <= 0x00000000]
[00:23:06.445]      __var manuf = 0;
[00:23:06.445]        // -> [manuf <= 0x00000000]
[00:23:06.445]      __var isMSPM0G1X0X_G3X0X = 0;
[00:23:06.445]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:23:06.445]      __var isProduction = 0;
[00:23:06.445]        // -> [isProduction <= 0x00000000]
[00:23:06.446]      __var continueId = 0;
[00:23:06.446]        // -> [continueId <= 0x00000000]
[00:23:06.446]      deviceID =   Read32(0x41C40004);
[00:23:06.449]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:23:06.449]        // -> [deviceID <= 0x2BB8802F]
[00:23:06.449]      version = deviceID >> 28;
[00:23:06.449]        // -> [version <= 0x00000002]
[00:23:06.449]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:23:06.449]        // -> [partNum <= 0x0000BB88]
[00:23:06.449]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:23:06.449]        // -> [manuf <= 0x00000017]
[00:23:06.449]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:23:06.449]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:23:06.449]      isProduction = (version > 0);
[00:23:06.449]        // -> [isProduction <= 0x00000001]
[00:23:06.449]    </block>
[00:23:06.449]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:23:06.449]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:23:06.449]        // =>  FALSE
[00:23:06.449]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:23:06.449]    </control>
[00:23:06.449]    <control if="continueId == 4" while="" timeout="0" info="">
[00:23:06.449]      // if-block "continueId == 4"
[00:23:06.449]        // =>  FALSE
[00:23:06.449]      // skip if-block "continueId == 4"
[00:23:06.449]    </control>
[00:23:06.449]    <control if="!isProduction" while="" timeout="0" info="">
[00:23:06.449]      // if-block "!isProduction"
[00:23:06.449]        // =>  FALSE
[00:23:06.449]      // skip if-block "!isProduction"
[00:23:06.449]    </control>
[00:23:06.449]  </sequence>
[00:23:06.449]  
[00:24:27.147]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:24:27.147]  
[00:24:27.147]  <debugvars>
[00:24:27.147]    // Pre-defined
[00:24:27.147]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:24:27.147]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:24:27.147]    __dp=0x00000000
[00:24:27.147]    __ap=0x00000000
[00:24:27.147]    __traceout=0x00000000      (Trace Disabled)
[00:24:27.147]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:24:27.147]    __FlashAddr=0x00000000
[00:24:27.147]    __FlashLen=0x00000000
[00:24:27.147]    __FlashArg=0x00000000
[00:24:27.147]    __FlashOp=0x00000000
[00:24:27.147]    __Result=0x00000000
[00:24:27.147]  </debugvars>
[00:24:27.147]  
[00:24:27.147]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:24:27.147]    <block atomic="false" info="">
[00:24:27.147]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:24:27.147]        // -> [isSWJ <= 0x00000001]
[00:24:27.147]      __var hasDormant = __protocol & 0x00020000;
[00:24:27.147]        // -> [hasDormant <= 0x00000000]
[00:24:27.147]      __var protType   = __protocol & 0x0000FFFF;
[00:24:27.147]        // -> [protType <= 0x00000002]
[00:24:27.147]    </block>
[00:24:27.147]    <control if="protType == 1" while="" timeout="0" info="">
[00:24:27.147]      // if-block "protType == 1"
[00:24:27.147]        // =>  FALSE
[00:24:27.147]      // skip if-block "protType == 1"
[00:24:27.147]    </control>
[00:24:27.147]    <control if="protType == 2" while="" timeout="0" info="">
[00:24:27.147]      // if-block "protType == 2"
[00:24:27.147]        // =>  TRUE
[00:24:27.147]      <control if="isSWJ" while="" timeout="0" info="">
[00:24:27.147]        // if-block "isSWJ"
[00:24:27.147]          // =>  TRUE
[00:24:27.147]        <control if="hasDormant" while="" timeout="0" info="">
[00:24:27.147]          // if-block "hasDormant"
[00:24:27.147]            // =>  FALSE
[00:24:27.147]          // skip if-block "hasDormant"
[00:24:27.147]        </control>
[00:24:27.147]        <control if="!hasDormant" while="" timeout="0" info="">
[00:24:27.147]          // if-block "!hasDormant"
[00:24:27.147]            // =>  TRUE
[00:24:27.147]          <block atomic="false" info="">
[00:24:27.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:24:27.147]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:24:27.147]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:24:27.147]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:24:27.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:24:27.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:24:27.157]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:24:27.157]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:24:27.157]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:24:27.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:24:27.157]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:24:27.157]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:24:27.157]          </block>
[00:24:27.157]          // end if-block "!hasDormant"
[00:24:27.157]        </control>
[00:24:27.157]        // end if-block "isSWJ"
[00:24:27.157]      </control>
[00:24:27.157]      <control if="!isSWJ" while="" timeout="0" info="">
[00:24:27.157]        // if-block "!isSWJ"
[00:24:27.157]          // =>  FALSE
[00:24:27.157]        // skip if-block "!isSWJ"
[00:24:27.157]      </control>
[00:24:27.157]      <block atomic="false" info="">
[00:24:27.157]        ReadDP(0x0);
[00:24:27.167]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:24:27.167]      </block>
[00:24:27.167]      // end if-block "protType == 2"
[00:24:27.167]    </control>
[00:24:27.167]  </sequence>
[00:24:27.167]  
[00:24:27.167]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:24:27.167]  
[00:24:27.167]  <debugvars>
[00:24:27.167]    // Pre-defined
[00:24:27.167]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:24:27.167]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:24:27.167]    __dp=0x00000000
[00:24:27.167]    __ap=0x00000000
[00:24:27.167]    __traceout=0x00000000      (Trace Disabled)
[00:24:27.167]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:24:27.167]    __FlashAddr=0x00000000
[00:24:27.167]    __FlashLen=0x00000000
[00:24:27.167]    __FlashArg=0x00000000
[00:24:27.167]    __FlashOp=0x00000000
[00:24:27.167]    __Result=0x00000000
[00:24:27.167]  </debugvars>
[00:24:27.167]  
[00:24:27.167]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:24:27.177]    <block atomic="false" info="">
[00:24:27.177]      __var SW_DP_ABORT       = 0x0;
[00:24:27.177]        // -> [SW_DP_ABORT <= 0x00000000]
[00:24:27.177]      __var DP_CTRL_STAT      = 0x4;
[00:24:27.177]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:24:27.177]      __var DP_SELECT         = 0x8;
[00:24:27.177]        // -> [DP_SELECT <= 0x00000008]
[00:24:27.177]      __var powered_down      = 0;
[00:24:27.177]        // -> [powered_down <= 0x00000000]
[00:24:27.177]      WriteDP(DP_SELECT, 0x00000000);
[00:24:27.177]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:24:27.177]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:24:27.177]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:24:27.177]        // -> [powered_down <= 0x00000001]
[00:24:27.177]    </block>
[00:24:27.177]    <control if="powered_down" while="" timeout="0" info="">
[00:24:27.177]      // if-block "powered_down"
[00:24:27.177]        // =>  TRUE
[00:24:27.177]      <block atomic="false" info="">
[00:24:27.177]        Message(0, "Debug/System power-up request sent");
[00:24:27.177]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:24:27.177]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:24:27.177]      </block>
[00:24:27.177]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:24:27.177]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:24:27.177]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:24:27.177]        // while-condition  =>  FALSE
[00:24:27.187]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:24:27.187]      </control>
[00:24:27.187]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:24:27.187]        // if-block "(__protocol & 0xFFFF) == 1"
[00:24:27.187]          // =>  FALSE
[00:24:27.187]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:24:27.187]      </control>
[00:24:27.187]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:24:27.187]        // if-block "(__protocol & 0xFFFF) == 2"
[00:24:27.187]          // =>  TRUE
[00:24:27.187]        <block atomic="false" info="">
[00:24:27.187]          Message(0, "executing SWD power up");
[00:24:27.187]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:24:27.187]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:24:27.187]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:24:27.187]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:24:27.187]        </block>
[00:24:27.187]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:24:27.187]      </control>
[00:24:27.187]      // end if-block "powered_down"
[00:24:27.187]    </control>
[00:24:27.187]    <block atomic="false" info="">
[00:24:27.187]      __var DEBUG_PORT_VAL    = 0;
[00:24:27.187]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:24:27.187]      __var ACCESS_POINT_VAL  = 0;
[00:24:27.187]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:24:27.187]      __ap = 1; 
[00:24:27.187]        // -> [__ap <= 0x00000001]
[00:24:27.187]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:24:27.197]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:24:27.197]      __ap = 4;
[00:24:27.197]        // -> [__ap <= 0x00000004]
[00:24:27.197]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:24:27.197]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:24:27.197]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:24:27.197]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:24:27.197]    </block>
[00:24:27.197]    <block atomic="false" info="">
[00:24:27.197]      __var nReset = 0x80;
[00:24:27.197]        // -> [nReset <= 0x00000080]
[00:24:27.197]      __var canReadPins = 0;
[00:24:27.197]        // -> [canReadPins <= 0x00000000]
[00:24:27.197]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:24:27.207]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:24:27.207]        // -> [canReadPins <= 0x00000001]
[00:24:27.207]    </block>
[00:24:27.207]    <control if="" while="1" timeout="200" info="">
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.207]      // while "1"  (timeout="200")
[00:24:27.207]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.217]      // while-condition  =>  TRUE
[00:24:27.217]      // while "1"  (timeout="200")
[00:24:27.227]      // while-condition  =>  TRUE
[00:24:27.227]      // while "1"  (timeout="200")
[00:24:27.227]      // while  =>  TIMEOUT
[00:24:27.227]      // end while "1"
[00:24:27.227]    </control>
[00:24:27.227]    <control if="canReadPins" while="" timeout="0" info="">
[00:24:27.227]      // if-block "canReadPins"
[00:24:27.227]        // =>  TRUE
[00:24:27.227]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:24:27.227]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:24:27.227]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:24:27.227]        // while-condition  =>  FALSE
[00:24:27.227]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:24:27.227]      </control>
[00:24:27.227]      // end if-block "canReadPins"
[00:24:27.227]    </control>
[00:24:27.227]    <control if="!canReadPins" while="" timeout="0" info="">
[00:24:27.227]      // if-block "!canReadPins"
[00:24:27.227]        // =>  FALSE
[00:24:27.227]      // skip if-block "!canReadPins"
[00:24:27.227]    </control>
[00:24:27.227]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:24:27.227]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:24:27.227]        // =>  TRUE
[00:24:27.227]      <block atomic="false" info="">
[00:24:27.227]        WriteAP(0x00, 0x190008);
[00:24:27.227]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:24:27.227]        WriteAP(0xF0, 0x01);
[00:24:27.227]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:24:27.227]      </block>
[00:24:27.227]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:24:27.227]    </control>
[00:24:27.237]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:24:27.237]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:24:27.237]        // =>  FALSE
[00:24:27.237]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:24:27.237]    </control>
[00:24:27.237]    <block atomic="false" info="">
[00:24:27.237]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:24:27.237]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:24:27.237]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:24:27.237]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:24:27.237]      __ap = 0; //lets make sure we reset the access point selection
[00:24:27.237]        // -> [__ap <= 0x00000000]
[00:24:27.237]    </block>
[00:24:27.237]  </sequence>
[00:24:27.237]  
[00:24:27.257]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:24:27.257]  
[00:24:27.257]  <debugvars>
[00:24:27.257]    // Pre-defined
[00:24:27.257]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:24:27.257]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:24:27.257]    __dp=0x00000000
[00:24:27.257]    __ap=0x00000000
[00:24:27.257]    __traceout=0x00000000      (Trace Disabled)
[00:24:27.257]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:24:27.257]    __FlashAddr=0x00000000
[00:24:27.257]    __FlashLen=0x00000000
[00:24:27.257]    __FlashArg=0x00000000
[00:24:27.257]    __FlashOp=0x00000000
[00:24:27.257]    __Result=0x00000000
[00:24:27.257]  </debugvars>
[00:24:27.257]  
[00:24:27.257]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:24:27.257]    <block atomic="false" info="">
[00:24:27.257]      __var deviceID = 0;
[00:24:27.257]        // -> [deviceID <= 0x00000000]
[00:24:27.257]      __var version = 0;
[00:24:27.257]        // -> [version <= 0x00000000]
[00:24:27.267]      __var partNum = 0;
[00:24:27.267]        // -> [partNum <= 0x00000000]
[00:24:27.267]      __var manuf = 0;
[00:24:27.267]        // -> [manuf <= 0x00000000]
[00:24:27.267]      __var isMSPM0G1X0X_G3X0X = 0;
[00:24:27.267]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:24:27.267]      __var isProduction = 0;
[00:24:27.267]        // -> [isProduction <= 0x00000000]
[00:24:27.267]      __var continueId = 0;
[00:24:27.267]        // -> [continueId <= 0x00000000]
[00:24:27.267]      deviceID =   Read32(0x41C40004);
[00:24:27.267]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:24:27.267]        // -> [deviceID <= 0x2BB8802F]
[00:24:27.267]      version = deviceID >> 28;
[00:24:27.267]        // -> [version <= 0x00000002]
[00:24:27.267]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:24:27.267]        // -> [partNum <= 0x0000BB88]
[00:24:27.267]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:24:27.267]        // -> [manuf <= 0x00000017]
[00:24:27.267]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:24:27.267]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:24:27.267]      isProduction = (version > 0);
[00:24:27.267]        // -> [isProduction <= 0x00000001]
[00:24:27.267]    </block>
[00:24:27.267]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:24:27.267]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:24:27.267]        // =>  FALSE
[00:24:27.267]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:24:27.267]    </control>
[00:24:27.267]    <control if="continueId == 4" while="" timeout="0" info="">
[00:24:27.267]      // if-block "continueId == 4"
[00:24:27.267]        // =>  FALSE
[00:24:27.267]      // skip if-block "continueId == 4"
[00:24:27.267]    </control>
[00:24:27.267]    <control if="!isProduction" while="" timeout="0" info="">
[00:24:27.267]      // if-block "!isProduction"
[00:24:27.267]        // =>  FALSE
[00:24:27.267]      // skip if-block "!isProduction"
[00:24:27.267]    </control>
[00:24:27.267]  </sequence>
[00:24:27.267]  
[00:31:37.504]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:31:37.504]  
[00:31:37.513]  <debugvars>
[00:31:37.513]    // Pre-defined
[00:31:37.513]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:37.513]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:31:37.513]    __dp=0x00000000
[00:31:37.513]    __ap=0x00000000
[00:31:37.513]    __traceout=0x00000000      (Trace Disabled)
[00:31:37.513]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:37.513]    __FlashAddr=0x00000000
[00:31:37.514]    __FlashLen=0x00000000
[00:31:37.514]    __FlashArg=0x00000000
[00:31:37.514]    __FlashOp=0x00000000
[00:31:37.514]    __Result=0x00000000
[00:31:37.514]  </debugvars>
[00:31:37.514]  
[00:31:37.514]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:31:37.514]    <block atomic="false" info="">
[00:31:37.515]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:31:37.515]        // -> [isSWJ <= 0x00000001]
[00:31:37.515]      __var hasDormant = __protocol & 0x00020000;
[00:31:37.515]        // -> [hasDormant <= 0x00000000]
[00:31:37.515]      __var protType   = __protocol & 0x0000FFFF;
[00:31:37.515]        // -> [protType <= 0x00000002]
[00:31:37.515]    </block>
[00:31:37.515]    <control if="protType == 1" while="" timeout="0" info="">
[00:31:37.515]      // if-block "protType == 1"
[00:31:37.515]        // =>  FALSE
[00:31:37.517]      // skip if-block "protType == 1"
[00:31:37.517]    </control>
[00:31:37.517]    <control if="protType == 2" while="" timeout="0" info="">
[00:31:37.517]      // if-block "protType == 2"
[00:31:37.517]        // =>  TRUE
[00:31:37.517]      <control if="isSWJ" while="" timeout="0" info="">
[00:31:37.517]        // if-block "isSWJ"
[00:31:37.517]          // =>  TRUE
[00:31:37.517]        <control if="hasDormant" while="" timeout="0" info="">
[00:31:37.517]          // if-block "hasDormant"
[00:31:37.517]            // =>  FALSE
[00:31:37.517]          // skip if-block "hasDormant"
[00:31:37.517]        </control>
[00:31:37.517]        <control if="!hasDormant" while="" timeout="0" info="">
[00:31:37.518]          // if-block "!hasDormant"
[00:31:37.518]            // =>  TRUE
[00:31:37.518]          <block atomic="false" info="">
[00:31:37.519]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:31:37.520]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:37.520]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:31:37.521]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:31:37.522]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:31:37.523]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:37.523]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:31:37.525]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:31:37.525]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:31:37.527]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:37.527]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:31:37.529]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:31:37.529]          </block>
[00:31:37.529]          // end if-block "!hasDormant"
[00:31:37.529]        </control>
[00:31:37.529]        // end if-block "isSWJ"
[00:31:37.530]      </control>
[00:31:37.530]      <control if="!isSWJ" while="" timeout="0" info="">
[00:31:37.530]        // if-block "!isSWJ"
[00:31:37.530]          // =>  FALSE
[00:31:37.530]        // skip if-block "!isSWJ"
[00:31:37.530]      </control>
[00:31:37.530]      <block atomic="false" info="">
[00:31:37.530]        ReadDP(0x0);
[00:31:37.531]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:31:37.531]      </block>
[00:31:37.532]      // end if-block "protType == 2"
[00:31:37.532]    </control>
[00:31:37.532]  </sequence>
[00:31:37.532]  
[00:31:37.535]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:31:37.535]  
[00:31:37.535]  <debugvars>
[00:31:37.535]    // Pre-defined
[00:31:37.535]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:37.535]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:31:37.535]    __dp=0x00000000
[00:31:37.535]    __ap=0x00000000
[00:31:37.535]    __traceout=0x00000000      (Trace Disabled)
[00:31:37.536]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:37.536]    __FlashAddr=0x00000000
[00:31:37.536]    __FlashLen=0x00000000
[00:31:37.536]    __FlashArg=0x00000000
[00:31:37.536]    __FlashOp=0x00000000
[00:31:37.536]    __Result=0x00000000
[00:31:37.537]  </debugvars>
[00:31:37.537]  
[00:31:37.537]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:31:37.537]    <block atomic="false" info="">
[00:31:37.537]      __var SW_DP_ABORT       = 0x0;
[00:31:37.537]        // -> [SW_DP_ABORT <= 0x00000000]
[00:31:37.537]      __var DP_CTRL_STAT      = 0x4;
[00:31:37.537]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:31:37.538]      __var DP_SELECT         = 0x8;
[00:31:37.538]        // -> [DP_SELECT <= 0x00000008]
[00:31:37.538]      __var powered_down      = 0;
[00:31:37.538]        // -> [powered_down <= 0x00000000]
[00:31:37.538]      WriteDP(DP_SELECT, 0x00000000);
[00:31:37.540]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:31:37.540]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:31:37.542]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:31:37.542]        // -> [powered_down <= 0x00000001]
[00:31:37.542]    </block>
[00:31:37.542]    <control if="powered_down" while="" timeout="0" info="">
[00:31:37.542]      // if-block "powered_down"
[00:31:37.542]        // =>  TRUE
[00:31:37.543]      <block atomic="false" info="">
[00:31:37.543]        Message(0, "Debug/System power-up request sent");
[00:31:37.545]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:31:37.547]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:31:37.547]      </block>
[00:31:37.547]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:31:37.547]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:31:37.548]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:31:37.548]        // while-condition  =>  FALSE
[00:31:37.549]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:31:37.549]      </control>
[00:31:37.549]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:31:37.549]        // if-block "(__protocol & 0xFFFF) == 1"
[00:31:37.549]          // =>  FALSE
[00:31:37.549]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:31:37.549]      </control>
[00:31:37.549]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:31:37.549]        // if-block "(__protocol & 0xFFFF) == 2"
[00:31:37.550]          // =>  TRUE
[00:31:37.550]        <block atomic="false" info="">
[00:31:37.550]          Message(0, "executing SWD power up");
[00:31:37.551]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:31:37.553]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:31:37.553]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:31:37.554]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:31:37.554]        </block>
[00:31:37.555]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:31:37.555]      </control>
[00:31:37.555]      // end if-block "powered_down"
[00:31:37.555]    </control>
[00:31:37.555]    <block atomic="false" info="">
[00:31:37.555]      __var DEBUG_PORT_VAL    = 0;
[00:31:37.555]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:31:37.555]      __var ACCESS_POINT_VAL  = 0;
[00:31:37.555]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:31:37.555]      __ap = 1; 
[00:31:37.556]        // -> [__ap <= 0x00000001]
[00:31:37.556]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:31:37.560]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:31:37.560]      __ap = 4;
[00:31:37.560]        // -> [__ap <= 0x00000004]
[00:31:37.560]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:31:37.563]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:31:37.563]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:31:37.563]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:31:37.565]    </block>
[00:31:37.565]    <block atomic="false" info="">
[00:31:37.565]      __var nReset = 0x80;
[00:31:37.565]        // -> [nReset <= 0x00000080]
[00:31:37.565]      __var canReadPins = 0;
[00:31:37.565]        // -> [canReadPins <= 0x00000000]
[00:31:37.565]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:31:37.568]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:31:37.568]        // -> [canReadPins <= 0x00000001]
[00:31:37.568]    </block>
[00:31:37.568]    <control if="" while="1" timeout="200" info="">
[00:31:37.568]      // while "1"  (timeout="200")
[00:31:37.568]      // while-condition  =>  TRUE
[00:31:37.568]      // while "1"  (timeout="200")
[00:31:37.568]      // while-condition  =>  TRUE
[00:31:37.569]      // while "1"  (timeout="200")
[00:31:37.569]      // while-condition  =>  TRUE
[00:31:37.569]      // while "1"  (timeout="200")
[00:31:37.569]      // while-condition  =>  TRUE
[00:31:37.569]      // while "1"  (timeout="200")
[00:31:37.569]      // while-condition  =>  TRUE
[00:31:37.570]      // while "1"  (timeout="200")
[00:31:37.570]      // while-condition  =>  TRUE
[00:31:37.570]      // while "1"  (timeout="200")
[00:31:37.570]      // while-condition  =>  TRUE
[00:31:37.570]      // while "1"  (timeout="200")
[00:31:37.570]      // while-condition  =>  TRUE
[00:31:37.570]      // while "1"  (timeout="200")
[00:31:37.570]      // while-condition  =>  TRUE
[00:31:37.570]      // while "1"  (timeout="200")
[00:31:37.570]      // while-condition  =>  TRUE
[00:31:37.570]      // while "1"  (timeout="200")
[00:31:37.571]      // while-condition  =>  TRUE
[00:31:37.571]      // while "1"  (timeout="200")
[00:31:37.571]      // while-condition  =>  TRUE
[00:31:37.571]      // while "1"  (timeout="200")
[00:31:37.571]      // while-condition  =>  TRUE
[00:31:37.571]      // while "1"  (timeout="200")
[00:31:37.571]      // while-condition  =>  TRUE
[00:31:37.571]      // while "1"  (timeout="200")
[00:31:37.571]      // while-condition  =>  TRUE
[00:31:37.571]      // while "1"  (timeout="200")
[00:31:37.572]      // while-condition  =>  TRUE
[00:31:37.572]      // while "1"  (timeout="200")
[00:31:37.572]      // while-condition  =>  TRUE
[00:31:37.572]      // while "1"  (timeout="200")
[00:31:37.572]      // while-condition  =>  TRUE
[00:31:37.572]      // while "1"  (timeout="200")
[00:31:37.572]      // while-condition  =>  TRUE
[00:31:37.572]      // while "1"  (timeout="200")
[00:31:37.573]      // while-condition  =>  TRUE
[00:31:37.573]      // while "1"  (timeout="200")
[00:31:37.573]      // while-condition  =>  TRUE
[00:31:37.573]      // while "1"  (timeout="200")
[00:31:37.573]      // while-condition  =>  TRUE
[00:31:37.573]      // while "1"  (timeout="200")
[00:31:37.573]      // while-condition  =>  TRUE
[00:31:37.573]      // while "1"  (timeout="200")
[00:31:37.573]      // while-condition  =>  TRUE
[00:31:37.574]      // while "1"  (timeout="200")
[00:31:37.574]      // while-condition  =>  TRUE
[00:31:37.574]      // while "1"  (timeout="200")
[00:31:37.574]      // while-condition  =>  TRUE
[00:31:37.574]      // while "1"  (timeout="200")
[00:31:37.574]      // while-condition  =>  TRUE
[00:31:37.574]      // while "1"  (timeout="200")
[00:31:37.574]      // while-condition  =>  TRUE
[00:31:37.574]      // while "1"  (timeout="200")
[00:31:37.574]      // while-condition  =>  TRUE
[00:31:37.575]      // while "1"  (timeout="200")
[00:31:37.575]      // while-condition  =>  TRUE
[00:31:37.575]      // while "1"  (timeout="200")
[00:31:37.575]      // while-condition  =>  TRUE
[00:31:37.575]      // while "1"  (timeout="200")
[00:31:37.575]      // while-condition  =>  TRUE
[00:31:37.575]      // while "1"  (timeout="200")
[00:31:37.575]      // while-condition  =>  TRUE
[00:31:37.575]      // while "1"  (timeout="200")
[00:31:37.575]      // while-condition  =>  TRUE
[00:31:37.576]      // while "1"  (timeout="200")
[00:31:37.576]      // while-condition  =>  TRUE
[00:31:37.576]      // while "1"  (timeout="200")
[00:31:37.576]      // while-condition  =>  TRUE
[00:31:37.576]      // while "1"  (timeout="200")
[00:31:37.576]      // while-condition  =>  TRUE
[00:31:37.576]      // while "1"  (timeout="200")
[00:31:37.577]      // while-condition  =>  TRUE
[00:31:37.577]      // while "1"  (timeout="200")
[00:31:37.577]      // while-condition  =>  TRUE
[00:31:37.577]      // while "1"  (timeout="200")
[00:31:37.577]      // while-condition  =>  TRUE
[00:31:37.577]      // while "1"  (timeout="200")
[00:31:37.577]      // while-condition  =>  TRUE
[00:31:37.577]      // while "1"  (timeout="200")
[00:31:37.577]      // while-condition  =>  TRUE
[00:31:37.578]      // while "1"  (timeout="200")
[00:31:37.578]      // while  =>  TIMEOUT
[00:31:37.578]      // end while "1"
[00:31:37.578]    </control>
[00:31:37.578]    <control if="canReadPins" while="" timeout="0" info="">
[00:31:37.578]      // if-block "canReadPins"
[00:31:37.578]        // =>  TRUE
[00:31:37.578]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:31:37.578]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:31:37.580]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:31:37.580]        // while-condition  =>  FALSE
[00:31:37.580]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:31:37.580]      </control>
[00:31:37.580]      // end if-block "canReadPins"
[00:31:37.580]    </control>
[00:31:37.580]    <control if="!canReadPins" while="" timeout="0" info="">
[00:31:37.580]      // if-block "!canReadPins"
[00:31:37.581]        // =>  FALSE
[00:31:37.581]      // skip if-block "!canReadPins"
[00:31:37.581]    </control>
[00:31:37.581]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:31:37.581]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:31:37.581]        // =>  TRUE
[00:31:37.581]      <block atomic="false" info="">
[00:31:37.581]        WriteAP(0x00, 0x190008);
[00:31:37.583]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:31:37.583]        WriteAP(0xF0, 0x01);
[00:31:37.588]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:31:37.588]      </block>
[00:31:37.588]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:31:37.588]    </control>
[00:31:37.588]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:31:37.588]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:31:37.588]        // =>  FALSE
[00:31:37.589]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:31:37.589]    </control>
[00:31:37.589]    <block atomic="false" info="">
[00:31:37.589]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:31:37.594]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:31:37.594]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:31:37.594]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:31:37.596]      __ap = 0; //lets make sure we reset the access point selection
[00:31:37.596]        // -> [__ap <= 0x00000000]
[00:31:37.596]    </block>
[00:31:37.596]  </sequence>
[00:31:37.596]  
[00:31:37.618]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:31:37.618]  
[00:31:37.618]  <debugvars>
[00:31:37.618]    // Pre-defined
[00:31:37.618]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:37.618]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:31:37.618]    __dp=0x00000000
[00:31:37.619]    __ap=0x00000000
[00:31:37.619]    __traceout=0x00000000      (Trace Disabled)
[00:31:37.619]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:37.619]    __FlashAddr=0x00000000
[00:31:37.619]    __FlashLen=0x00000000
[00:31:37.619]    __FlashArg=0x00000000
[00:31:37.619]    __FlashOp=0x00000000
[00:31:37.619]    __Result=0x00000000
[00:31:37.619]  </debugvars>
[00:31:37.619]  
[00:31:37.619]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:31:37.620]    <block atomic="false" info="">
[00:31:37.620]      __var deviceID = 0;
[00:31:37.620]        // -> [deviceID <= 0x00000000]
[00:31:37.620]      __var version = 0;
[00:31:37.620]        // -> [version <= 0x00000000]
[00:31:37.620]      __var partNum = 0;
[00:31:37.620]        // -> [partNum <= 0x00000000]
[00:31:37.620]      __var manuf = 0;
[00:31:37.620]        // -> [manuf <= 0x00000000]
[00:31:37.620]      __var isMSPM0G1X0X_G3X0X = 0;
[00:31:37.621]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:31:37.621]      __var isProduction = 0;
[00:31:37.621]        // -> [isProduction <= 0x00000000]
[00:31:37.621]      __var continueId = 0;
[00:31:37.621]        // -> [continueId <= 0x00000000]
[00:31:37.621]      deviceID =   Read32(0x41C40004);
[00:31:37.626]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:31:37.626]        // -> [deviceID <= 0x2BB8802F]
[00:31:37.626]      version = deviceID >> 28;
[00:31:37.626]        // -> [version <= 0x00000002]
[00:31:37.627]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:31:37.627]        // -> [partNum <= 0x0000BB88]
[00:31:37.627]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:31:37.627]        // -> [manuf <= 0x00000017]
[00:31:37.627]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:31:37.627]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:31:37.627]      isProduction = (version > 0);
[00:31:37.627]        // -> [isProduction <= 0x00000001]
[00:31:37.627]    </block>
[00:31:37.628]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:31:37.628]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:31:37.628]        // =>  FALSE
[00:31:37.628]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:31:37.628]    </control>
[00:31:37.628]    <control if="continueId == 4" while="" timeout="0" info="">
[00:31:37.628]      // if-block "continueId == 4"
[00:31:37.628]        // =>  FALSE
[00:31:37.628]      // skip if-block "continueId == 4"
[00:31:37.628]    </control>
[00:31:37.628]    <control if="!isProduction" while="" timeout="0" info="">
[00:31:37.628]      // if-block "!isProduction"
[00:31:37.630]        // =>  FALSE
[00:31:37.630]      // skip if-block "!isProduction"
[00:31:37.630]    </control>
[00:31:37.630]  </sequence>
[00:31:37.630]  
[00:31:42.947]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:31:42.947]  
[00:31:42.956]  <debugvars>
[00:31:42.956]    // Pre-defined
[00:31:42.956]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:42.956]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:31:42.956]    __dp=0x00000000
[00:31:42.957]    __ap=0x00000000
[00:31:42.957]    __traceout=0x00000000      (Trace Disabled)
[00:31:42.957]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:42.957]    __FlashAddr=0x00000000
[00:31:42.957]    __FlashLen=0x00000000
[00:31:42.957]    __FlashArg=0x00000000
[00:31:42.957]    __FlashOp=0x00000000
[00:31:42.957]    __Result=0x00000000
[00:31:42.957]  </debugvars>
[00:31:42.957]  
[00:31:42.957]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:31:42.958]    <block atomic="false" info="">
[00:31:42.958]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:31:42.958]        // -> [isSWJ <= 0x00000001]
[00:31:42.958]      __var hasDormant = __protocol & 0x00020000;
[00:31:42.958]        // -> [hasDormant <= 0x00000000]
[00:31:42.958]      __var protType   = __protocol & 0x0000FFFF;
[00:31:42.958]        // -> [protType <= 0x00000002]
[00:31:42.958]    </block>
[00:31:42.958]    <control if="protType == 1" while="" timeout="0" info="">
[00:31:42.958]      // if-block "protType == 1"
[00:31:42.958]        // =>  FALSE
[00:31:42.958]      // skip if-block "protType == 1"
[00:31:42.960]    </control>
[00:31:42.960]    <control if="protType == 2" while="" timeout="0" info="">
[00:31:42.960]      // if-block "protType == 2"
[00:31:42.960]        // =>  TRUE
[00:31:42.960]      <control if="isSWJ" while="" timeout="0" info="">
[00:31:42.960]        // if-block "isSWJ"
[00:31:42.960]          // =>  TRUE
[00:31:42.960]        <control if="hasDormant" while="" timeout="0" info="">
[00:31:42.961]          // if-block "hasDormant"
[00:31:42.961]            // =>  FALSE
[00:31:42.961]          // skip if-block "hasDormant"
[00:31:42.961]        </control>
[00:31:42.961]        <control if="!hasDormant" while="" timeout="0" info="">
[00:31:42.961]          // if-block "!hasDormant"
[00:31:42.961]            // =>  TRUE
[00:31:42.961]          <block atomic="false" info="">
[00:31:42.961]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:31:42.963]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:42.964]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:31:42.965]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:31:42.965]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:31:42.967]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:42.967]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:31:42.968]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:31:42.968]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:31:42.969]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:31:42.970]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:31:42.971]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:31:42.971]          </block>
[00:31:42.971]          // end if-block "!hasDormant"
[00:31:42.971]        </control>
[00:31:42.971]        // end if-block "isSWJ"
[00:31:42.971]      </control>
[00:31:42.971]      <control if="!isSWJ" while="" timeout="0" info="">
[00:31:42.972]        // if-block "!isSWJ"
[00:31:42.972]          // =>  FALSE
[00:31:42.972]        // skip if-block "!isSWJ"
[00:31:42.972]      </control>
[00:31:42.972]      <block atomic="false" info="">
[00:31:42.972]        ReadDP(0x0);
[00:31:42.973]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:31:42.974]      </block>
[00:31:42.974]      // end if-block "protType == 2"
[00:31:42.974]    </control>
[00:31:42.974]  </sequence>
[00:31:42.974]  
[00:31:42.978]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:31:42.978]  
[00:31:42.978]  <debugvars>
[00:31:42.978]    // Pre-defined
[00:31:42.978]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:42.978]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:31:42.978]    __dp=0x00000000
[00:31:42.978]    __ap=0x00000000
[00:31:42.978]    __traceout=0x00000000      (Trace Disabled)
[00:31:42.978]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:42.978]    __FlashAddr=0x00000000
[00:31:42.978]    __FlashLen=0x00000000
[00:31:42.978]    __FlashArg=0x00000000
[00:31:42.978]    __FlashOp=0x00000000
[00:31:42.978]    __Result=0x00000000
[00:31:42.978]  </debugvars>
[00:31:42.979]  
[00:31:42.979]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:31:42.979]    <block atomic="false" info="">
[00:31:42.979]      __var SW_DP_ABORT       = 0x0;
[00:31:42.979]        // -> [SW_DP_ABORT <= 0x00000000]
[00:31:42.979]      __var DP_CTRL_STAT      = 0x4;
[00:31:42.979]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:31:42.979]      __var DP_SELECT         = 0x8;
[00:31:42.980]        // -> [DP_SELECT <= 0x00000008]
[00:31:42.980]      __var powered_down      = 0;
[00:31:42.980]        // -> [powered_down <= 0x00000000]
[00:31:42.980]      WriteDP(DP_SELECT, 0x00000000);
[00:31:42.981]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:31:42.981]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:31:42.984]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:31:42.984]        // -> [powered_down <= 0x00000001]
[00:31:42.984]    </block>
[00:31:42.984]    <control if="powered_down" while="" timeout="0" info="">
[00:31:42.984]      // if-block "powered_down"
[00:31:42.984]        // =>  TRUE
[00:31:42.984]      <block atomic="false" info="">
[00:31:42.984]        Message(0, "Debug/System power-up request sent");
[00:31:42.986]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:31:42.987]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:31:42.987]      </block>
[00:31:42.987]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:31:42.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:31:42.989]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:31:42.989]        // while-condition  =>  FALSE
[00:31:42.989]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:31:42.990]      </control>
[00:31:42.990]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:31:42.990]        // if-block "(__protocol & 0xFFFF) == 1"
[00:31:42.990]          // =>  FALSE
[00:31:42.990]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:31:42.990]      </control>
[00:31:42.990]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:31:42.991]        // if-block "(__protocol & 0xFFFF) == 2"
[00:31:42.991]          // =>  TRUE
[00:31:42.991]        <block atomic="false" info="">
[00:31:42.991]          Message(0, "executing SWD power up");
[00:31:42.992]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:31:42.994]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:31:42.994]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:31:42.996]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:31:42.996]        </block>
[00:31:42.996]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:31:42.997]      </control>
[00:31:42.997]      // end if-block "powered_down"
[00:31:42.997]    </control>
[00:31:42.997]    <block atomic="false" info="">
[00:31:42.997]      __var DEBUG_PORT_VAL    = 0;
[00:31:42.997]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:31:42.997]      __var ACCESS_POINT_VAL  = 0;
[00:31:42.997]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:31:42.997]      __ap = 1; 
[00:31:42.997]        // -> [__ap <= 0x00000001]
[00:31:42.998]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:31:43.001]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:31:43.001]      __ap = 4;
[00:31:43.001]        // -> [__ap <= 0x00000004]
[00:31:43.002]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:31:43.004]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:31:43.004]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:31:43.004]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:31:43.006]    </block>
[00:31:43.006]    <block atomic="false" info="">
[00:31:43.006]      __var nReset = 0x80;
[00:31:43.006]        // -> [nReset <= 0x00000080]
[00:31:43.007]      __var canReadPins = 0;
[00:31:43.007]        // -> [canReadPins <= 0x00000000]
[00:31:43.007]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:31:43.008]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:31:43.009]        // -> [canReadPins <= 0x00000001]
[00:31:43.009]    </block>
[00:31:43.009]    <control if="" while="1" timeout="200" info="">
[00:31:43.009]      // while "1"  (timeout="200")
[00:31:43.009]      // while-condition  =>  TRUE
[00:31:43.009]      // while "1"  (timeout="200")
[00:31:43.009]      // while-condition  =>  TRUE
[00:31:43.009]      // while "1"  (timeout="200")
[00:31:43.009]      // while-condition  =>  TRUE
[00:31:43.009]      // while "1"  (timeout="200")
[00:31:43.010]      // while-condition  =>  TRUE
[00:31:43.010]      // while "1"  (timeout="200")
[00:31:43.010]      // while-condition  =>  TRUE
[00:31:43.010]      // while "1"  (timeout="200")
[00:31:43.010]      // while-condition  =>  TRUE
[00:31:43.010]      // while "1"  (timeout="200")
[00:31:43.010]      // while-condition  =>  TRUE
[00:31:43.010]      // while "1"  (timeout="200")
[00:31:43.010]      // while-condition  =>  TRUE
[00:31:43.011]      // while "1"  (timeout="200")
[00:31:43.011]      // while-condition  =>  TRUE
[00:31:43.011]      // while "1"  (timeout="200")
[00:31:43.011]      // while-condition  =>  TRUE
[00:31:43.011]      // while "1"  (timeout="200")
[00:31:43.011]      // while-condition  =>  TRUE
[00:31:43.011]      // while "1"  (timeout="200")
[00:31:43.011]      // while-condition  =>  TRUE
[00:31:43.011]      // while "1"  (timeout="200")
[00:31:43.012]      // while-condition  =>  TRUE
[00:31:43.012]      // while "1"  (timeout="200")
[00:31:43.012]      // while-condition  =>  TRUE
[00:31:43.012]      // while "1"  (timeout="200")
[00:31:43.012]      // while-condition  =>  TRUE
[00:31:43.012]      // while "1"  (timeout="200")
[00:31:43.013]      // while-condition  =>  TRUE
[00:31:43.013]      // while "1"  (timeout="200")
[00:31:43.013]      // while-condition  =>  TRUE
[00:31:43.013]      // while "1"  (timeout="200")
[00:31:43.013]      // while-condition  =>  TRUE
[00:31:43.013]      // while "1"  (timeout="200")
[00:31:43.013]      // while-condition  =>  TRUE
[00:31:43.013]      // while "1"  (timeout="200")
[00:31:43.013]      // while-condition  =>  TRUE
[00:31:43.013]      // while "1"  (timeout="200")
[00:31:43.013]      // while-condition  =>  TRUE
[00:31:43.014]      // while "1"  (timeout="200")
[00:31:43.014]      // while-condition  =>  TRUE
[00:31:43.014]      // while "1"  (timeout="200")
[00:31:43.014]      // while-condition  =>  TRUE
[00:31:43.014]      // while "1"  (timeout="200")
[00:31:43.014]      // while-condition  =>  TRUE
[00:31:43.014]      // while "1"  (timeout="200")
[00:31:43.014]      // while-condition  =>  TRUE
[00:31:43.014]      // while "1"  (timeout="200")
[00:31:43.014]      // while-condition  =>  TRUE
[00:31:43.014]      // while "1"  (timeout="200")
[00:31:43.016]      // while-condition  =>  TRUE
[00:31:43.016]      // while "1"  (timeout="200")
[00:31:43.016]      // while  =>  TIMEOUT
[00:31:43.016]      // end while "1"
[00:31:43.016]    </control>
[00:31:43.016]    <control if="canReadPins" while="" timeout="0" info="">
[00:31:43.016]      // if-block "canReadPins"
[00:31:43.016]        // =>  TRUE
[00:31:43.016]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:31:43.016]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:31:43.020]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:31:43.020]        // while-condition  =>  FALSE
[00:31:43.020]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:31:43.020]      </control>
[00:31:43.020]      // end if-block "canReadPins"
[00:31:43.020]    </control>
[00:31:43.020]    <control if="!canReadPins" while="" timeout="0" info="">
[00:31:43.020]      // if-block "!canReadPins"
[00:31:43.021]        // =>  FALSE
[00:31:43.021]      // skip if-block "!canReadPins"
[00:31:43.021]    </control>
[00:31:43.021]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:31:43.021]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:31:43.021]        // =>  TRUE
[00:31:43.021]      <block atomic="false" info="">
[00:31:43.021]        WriteAP(0x00, 0x190008);
[00:31:43.023]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:31:43.023]        WriteAP(0xF0, 0x01);
[00:31:43.027]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:31:43.027]      </block>
[00:31:43.027]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:31:43.027]    </control>
[00:31:43.027]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:31:43.028]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:31:43.028]        // =>  FALSE
[00:31:43.028]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:31:43.028]    </control>
[00:31:43.028]    <block atomic="false" info="">
[00:31:43.028]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:31:43.032]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:31:43.032]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:31:43.032]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:31:43.034]      __ap = 0; //lets make sure we reset the access point selection
[00:31:43.034]        // -> [__ap <= 0x00000000]
[00:31:43.034]    </block>
[00:31:43.034]  </sequence>
[00:31:43.034]  
[00:31:43.056]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:31:43.056]  
[00:31:43.056]  <debugvars>
[00:31:43.056]    // Pre-defined
[00:31:43.056]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:31:43.056]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:31:43.056]    __dp=0x00000000
[00:31:43.056]    __ap=0x00000000
[00:31:43.056]    __traceout=0x00000000      (Trace Disabled)
[00:31:43.056]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:31:43.056]    __FlashAddr=0x00000000
[00:31:43.056]    __FlashLen=0x00000000
[00:31:43.056]    __FlashArg=0x00000000
[00:31:43.056]    __FlashOp=0x00000000
[00:31:43.057]    __Result=0x00000000
[00:31:43.057]  </debugvars>
[00:31:43.057]  
[00:31:43.057]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:31:43.057]    <block atomic="false" info="">
[00:31:43.057]      __var deviceID = 0;
[00:31:43.057]        // -> [deviceID <= 0x00000000]
[00:31:43.057]      __var version = 0;
[00:31:43.057]        // -> [version <= 0x00000000]
[00:31:43.058]      __var partNum = 0;
[00:31:43.058]        // -> [partNum <= 0x00000000]
[00:31:43.058]      __var manuf = 0;
[00:31:43.058]        // -> [manuf <= 0x00000000]
[00:31:43.058]      __var isMSPM0G1X0X_G3X0X = 0;
[00:31:43.058]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:31:43.058]      __var isProduction = 0;
[00:31:43.058]        // -> [isProduction <= 0x00000000]
[00:31:43.058]      __var continueId = 0;
[00:31:43.058]        // -> [continueId <= 0x00000000]
[00:31:43.059]      deviceID =   Read32(0x41C40004);
[00:31:43.065]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:31:43.066]        // -> [deviceID <= 0x2BB8802F]
[00:31:43.066]      version = deviceID >> 28;
[00:31:43.066]        // -> [version <= 0x00000002]
[00:31:43.066]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:31:43.066]        // -> [partNum <= 0x0000BB88]
[00:31:43.066]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:31:43.066]        // -> [manuf <= 0x00000017]
[00:31:43.066]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:31:43.067]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:31:43.067]      isProduction = (version > 0);
[00:31:43.067]        // -> [isProduction <= 0x00000001]
[00:31:43.067]    </block>
[00:31:43.067]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:31:43.067]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:31:43.067]        // =>  FALSE
[00:31:43.067]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:31:43.067]    </control>
[00:31:43.067]    <control if="continueId == 4" while="" timeout="0" info="">
[00:31:43.068]      // if-block "continueId == 4"
[00:31:43.068]        // =>  FALSE
[00:31:43.068]      // skip if-block "continueId == 4"
[00:31:43.068]    </control>
[00:31:43.068]    <control if="!isProduction" while="" timeout="0" info="">
[00:31:43.068]      // if-block "!isProduction"
[00:31:43.068]        // =>  FALSE
[00:31:43.068]      // skip if-block "!isProduction"
[00:31:43.068]    </control>
[00:31:43.068]  </sequence>
[00:31:43.069]  
[00:34:16.781]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:34:16.781]  
[00:34:16.781]  <debugvars>
[00:34:16.781]    // Pre-defined
[00:34:16.781]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:34:16.781]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:34:16.781]    __dp=0x00000000
[00:34:16.781]    __ap=0x00000000
[00:34:16.781]    __traceout=0x00000000      (Trace Disabled)
[00:34:16.781]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:34:16.781]    __FlashAddr=0x00000000
[00:34:16.781]    __FlashLen=0x00000000
[00:34:16.781]    __FlashArg=0x00000000
[00:34:16.781]    __FlashOp=0x00000000
[00:34:16.781]    __Result=0x00000000
[00:34:16.781]  </debugvars>
[00:34:16.781]  
[00:34:16.781]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:34:16.781]    <block atomic="false" info="">
[00:34:16.781]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:34:16.781]        // -> [isSWJ <= 0x00000001]
[00:34:16.781]      __var hasDormant = __protocol & 0x00020000;
[00:34:16.781]        // -> [hasDormant <= 0x00000000]
[00:34:16.781]      __var protType   = __protocol & 0x0000FFFF;
[00:34:16.781]        // -> [protType <= 0x00000002]
[00:34:16.781]    </block>
[00:34:16.781]    <control if="protType == 1" while="" timeout="0" info="">
[00:34:16.781]      // if-block "protType == 1"
[00:34:16.781]        // =>  FALSE
[00:34:16.781]      // skip if-block "protType == 1"
[00:34:16.781]    </control>
[00:34:16.791]    <control if="protType == 2" while="" timeout="0" info="">
[00:34:16.791]      // if-block "protType == 2"
[00:34:16.791]        // =>  TRUE
[00:34:16.791]      <control if="isSWJ" while="" timeout="0" info="">
[00:34:16.791]        // if-block "isSWJ"
[00:34:16.791]          // =>  TRUE
[00:34:16.791]        <control if="hasDormant" while="" timeout="0" info="">
[00:34:16.791]          // if-block "hasDormant"
[00:34:16.791]            // =>  FALSE
[00:34:16.791]          // skip if-block "hasDormant"
[00:34:16.791]        </control>
[00:34:16.791]        <control if="!hasDormant" while="" timeout="0" info="">
[00:34:16.791]          // if-block "!hasDormant"
[00:34:16.791]            // =>  TRUE
[00:34:16.791]          <block atomic="false" info="">
[00:34:16.791]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:34:16.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:34:16.791]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:34:16.791]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:34:16.791]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:34:16.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:34:16.791]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:34:16.791]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:34:16.791]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:34:16.801]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:34:16.801]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:34:16.801]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:34:16.801]          </block>
[00:34:16.801]          // end if-block "!hasDormant"
[00:34:16.801]        </control>
[00:34:16.801]        // end if-block "isSWJ"
[00:34:16.801]      </control>
[00:34:16.801]      <control if="!isSWJ" while="" timeout="0" info="">
[00:34:16.801]        // if-block "!isSWJ"
[00:34:16.801]          // =>  FALSE
[00:34:16.801]        // skip if-block "!isSWJ"
[00:34:16.801]      </control>
[00:34:16.801]      <block atomic="false" info="">
[00:34:16.801]        ReadDP(0x0);
[00:34:16.801]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:34:16.801]      </block>
[00:34:16.801]      // end if-block "protType == 2"
[00:34:16.801]    </control>
[00:34:16.801]  </sequence>
[00:34:16.801]  
[00:34:16.801]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:34:16.801]  
[00:34:16.801]  <debugvars>
[00:34:16.801]    // Pre-defined
[00:34:16.801]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:34:16.801]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:34:16.801]    __dp=0x00000000
[00:34:16.801]    __ap=0x00000000
[00:34:16.801]    __traceout=0x00000000      (Trace Disabled)
[00:34:16.801]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:34:16.801]    __FlashAddr=0x00000000
[00:34:16.801]    __FlashLen=0x00000000
[00:34:16.801]    __FlashArg=0x00000000
[00:34:16.811]    __FlashOp=0x00000000
[00:34:16.811]    __Result=0x00000000
[00:34:16.811]  </debugvars>
[00:34:16.811]  
[00:34:16.811]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:34:16.811]    <block atomic="false" info="">
[00:34:16.811]      __var SW_DP_ABORT       = 0x0;
[00:34:16.811]        // -> [SW_DP_ABORT <= 0x00000000]
[00:34:16.811]      __var DP_CTRL_STAT      = 0x4;
[00:34:16.811]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:34:16.811]      __var DP_SELECT         = 0x8;
[00:34:16.811]        // -> [DP_SELECT <= 0x00000008]
[00:34:16.811]      __var powered_down      = 0;
[00:34:16.811]        // -> [powered_down <= 0x00000000]
[00:34:16.811]      WriteDP(DP_SELECT, 0x00000000);
[00:34:16.811]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:34:16.811]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:34:16.811]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:34:16.811]        // -> [powered_down <= 0x00000001]
[00:34:16.811]    </block>
[00:34:16.811]    <control if="powered_down" while="" timeout="0" info="">
[00:34:16.811]      // if-block "powered_down"
[00:34:16.811]        // =>  TRUE
[00:34:16.811]      <block atomic="false" info="">
[00:34:16.811]        Message(0, "Debug/System power-up request sent");
[00:34:16.811]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:34:16.811]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:34:16.811]      </block>
[00:34:16.811]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:34:16.811]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:34:16.820]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:34:16.820]        // while-condition  =>  FALSE
[00:34:16.820]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:34:16.820]      </control>
[00:34:16.820]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:34:16.820]        // if-block "(__protocol & 0xFFFF) == 1"
[00:34:16.820]          // =>  FALSE
[00:34:16.820]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:34:16.820]      </control>
[00:34:16.820]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:34:16.820]        // if-block "(__protocol & 0xFFFF) == 2"
[00:34:16.820]          // =>  TRUE
[00:34:16.820]        <block atomic="false" info="">
[00:34:16.820]          Message(0, "executing SWD power up");
[00:34:16.822]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:34:16.822]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:34:16.822]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:34:16.831]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:34:16.831]        </block>
[00:34:16.831]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:34:16.831]      </control>
[00:34:16.831]      // end if-block "powered_down"
[00:34:16.831]    </control>
[00:34:16.831]    <block atomic="false" info="">
[00:34:16.831]      __var DEBUG_PORT_VAL    = 0;
[00:34:16.831]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:34:16.831]      __var ACCESS_POINT_VAL  = 0;
[00:34:16.831]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:34:16.831]      __ap = 1; 
[00:34:16.831]        // -> [__ap <= 0x00000001]
[00:34:16.831]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:34:16.831]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:34:16.831]      __ap = 4;
[00:34:16.831]        // -> [__ap <= 0x00000004]
[00:34:16.831]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:34:16.831]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:34:16.831]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:34:16.831]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:34:16.842]    </block>
[00:34:16.842]    <block atomic="false" info="">
[00:34:16.842]      __var nReset = 0x80;
[00:34:16.842]        // -> [nReset <= 0x00000080]
[00:34:16.842]      __var canReadPins = 0;
[00:34:16.842]        // -> [canReadPins <= 0x00000000]
[00:34:16.842]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:34:16.842]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:34:16.842]        // -> [canReadPins <= 0x00000001]
[00:34:16.842]    </block>
[00:34:16.842]    <control if="" while="1" timeout="200" info="">
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.842]      // while-condition  =>  TRUE
[00:34:16.842]      // while "1"  (timeout="200")
[00:34:16.851]      // while-condition  =>  TRUE
[00:34:16.851]      // while "1"  (timeout="200")
[00:34:16.851]      // while  =>  TIMEOUT
[00:34:16.851]      // end while "1"
[00:34:16.851]    </control>
[00:34:16.851]    <control if="canReadPins" while="" timeout="0" info="">
[00:34:16.851]      // if-block "canReadPins"
[00:34:16.851]        // =>  TRUE
[00:34:16.851]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:34:16.851]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:34:16.851]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:34:16.851]        // while-condition  =>  FALSE
[00:34:16.851]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:34:16.851]      </control>
[00:34:16.851]      // end if-block "canReadPins"
[00:34:16.851]    </control>
[00:34:16.851]    <control if="!canReadPins" while="" timeout="0" info="">
[00:34:16.851]      // if-block "!canReadPins"
[00:34:16.851]        // =>  FALSE
[00:34:16.851]      // skip if-block "!canReadPins"
[00:34:16.851]    </control>
[00:34:16.851]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:34:16.851]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:34:16.851]        // =>  TRUE
[00:34:16.851]      <block atomic="false" info="">
[00:34:16.851]        WriteAP(0x00, 0x190008);
[00:34:16.851]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:34:16.851]        WriteAP(0xF0, 0x01);
[00:34:16.851]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:34:16.851]      </block>
[00:34:16.851]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:34:16.851]    </control>
[00:34:16.851]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:34:16.851]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:34:16.851]        // =>  FALSE
[00:34:16.851]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:34:16.851]    </control>
[00:34:16.861]    <block atomic="false" info="">
[00:34:16.861]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:34:16.861]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:34:16.861]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:34:16.861]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:34:16.861]      __ap = 0; //lets make sure we reset the access point selection
[00:34:16.861]        // -> [__ap <= 0x00000000]
[00:34:16.861]    </block>
[00:34:16.861]  </sequence>
[00:34:16.861]  
[00:34:16.881]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:34:16.881]  
[00:34:16.881]  <debugvars>
[00:34:16.881]    // Pre-defined
[00:34:16.881]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:34:16.881]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:34:16.881]    __dp=0x00000000
[00:34:16.881]    __ap=0x00000000
[00:34:16.881]    __traceout=0x00000000      (Trace Disabled)
[00:34:16.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:34:16.881]    __FlashAddr=0x00000000
[00:34:16.881]    __FlashLen=0x00000000
[00:34:16.881]    __FlashArg=0x00000000
[00:34:16.881]    __FlashOp=0x00000000
[00:34:16.881]    __Result=0x00000000
[00:34:16.881]  </debugvars>
[00:34:16.881]  
[00:34:16.881]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:34:16.881]    <block atomic="false" info="">
[00:34:16.881]      __var deviceID = 0;
[00:34:16.881]        // -> [deviceID <= 0x00000000]
[00:34:16.881]      __var version = 0;
[00:34:16.881]        // -> [version <= 0x00000000]
[00:34:16.881]      __var partNum = 0;
[00:34:16.881]        // -> [partNum <= 0x00000000]
[00:34:16.881]      __var manuf = 0;
[00:34:16.881]        // -> [manuf <= 0x00000000]
[00:34:16.881]      __var isMSPM0G1X0X_G3X0X = 0;
[00:34:16.881]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:34:16.881]      __var isProduction = 0;
[00:34:16.881]        // -> [isProduction <= 0x00000000]
[00:34:16.881]      __var continueId = 0;
[00:34:16.881]        // -> [continueId <= 0x00000000]
[00:34:16.881]      deviceID =   Read32(0x41C40004);
[00:34:16.891]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:34:16.891]        // -> [deviceID <= 0x2BB8802F]
[00:34:16.891]      version = deviceID >> 28;
[00:34:16.891]        // -> [version <= 0x00000002]
[00:34:16.891]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:34:16.891]        // -> [partNum <= 0x0000BB88]
[00:34:16.891]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:34:16.891]        // -> [manuf <= 0x00000017]
[00:34:16.891]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:34:16.891]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:34:16.891]      isProduction = (version > 0);
[00:34:16.891]        // -> [isProduction <= 0x00000001]
[00:34:16.891]    </block>
[00:34:16.891]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:34:16.891]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:34:16.891]        // =>  FALSE
[00:34:16.891]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:34:16.891]    </control>
[00:34:16.891]    <control if="continueId == 4" while="" timeout="0" info="">
[00:34:16.891]      // if-block "continueId == 4"
[00:34:16.891]        // =>  FALSE
[00:34:16.891]      // skip if-block "continueId == 4"
[00:34:16.891]    </control>
[00:34:16.891]    <control if="!isProduction" while="" timeout="0" info="">
[00:34:16.891]      // if-block "!isProduction"
[00:34:16.891]        // =>  FALSE
[00:34:16.891]      // skip if-block "!isProduction"
[00:34:16.891]    </control>
[00:34:16.891]  </sequence>
[00:34:16.891]  
[00:35:28.261]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:35:28.261]  
[00:35:28.270]  <debugvars>
[00:35:28.270]    // Pre-defined
[00:35:28.270]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:35:28.270]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:35:28.270]    __dp=0x00000000
[00:35:28.270]    __ap=0x00000000
[00:35:28.270]    __traceout=0x00000000      (Trace Disabled)
[00:35:28.270]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:35:28.270]    __FlashAddr=0x00000000
[00:35:28.270]    __FlashLen=0x00000000
[00:35:28.271]    __FlashArg=0x00000000
[00:35:28.271]    __FlashOp=0x00000000
[00:35:28.271]    __Result=0x00000000
[00:35:28.271]  </debugvars>
[00:35:28.271]  
[00:35:28.271]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:35:28.271]    <block atomic="false" info="">
[00:35:28.271]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:35:28.271]        // -> [isSWJ <= 0x00000001]
[00:35:28.271]      __var hasDormant = __protocol & 0x00020000;
[00:35:28.271]        // -> [hasDormant <= 0x00000000]
[00:35:28.273]      __var protType   = __protocol & 0x0000FFFF;
[00:35:28.273]        // -> [protType <= 0x00000002]
[00:35:28.273]    </block>
[00:35:28.273]    <control if="protType == 1" while="" timeout="0" info="">
[00:35:28.273]      // if-block "protType == 1"
[00:35:28.273]        // =>  FALSE
[00:35:28.273]      // skip if-block "protType == 1"
[00:35:28.273]    </control>
[00:35:28.273]    <control if="protType == 2" while="" timeout="0" info="">
[00:35:28.273]      // if-block "protType == 2"
[00:35:28.273]        // =>  TRUE
[00:35:28.274]      <control if="isSWJ" while="" timeout="0" info="">
[00:35:28.274]        // if-block "isSWJ"
[00:35:28.274]          // =>  TRUE
[00:35:28.274]        <control if="hasDormant" while="" timeout="0" info="">
[00:35:28.274]          // if-block "hasDormant"
[00:35:28.274]            // =>  FALSE
[00:35:28.274]          // skip if-block "hasDormant"
[00:35:28.274]        </control>
[00:35:28.274]        <control if="!hasDormant" while="" timeout="0" info="">
[00:35:28.274]          // if-block "!hasDormant"
[00:35:28.274]            // =>  TRUE
[00:35:28.274]          <block atomic="false" info="">
[00:35:28.274]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:35:28.276]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:35:28.276]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:35:28.277]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:35:28.278]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:35:28.279]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:35:28.279]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:35:28.281]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:35:28.281]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:35:28.283]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:35:28.283]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:35:28.284]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:35:28.284]          </block>
[00:35:28.285]          // end if-block "!hasDormant"
[00:35:28.285]        </control>
[00:35:28.285]        // end if-block "isSWJ"
[00:35:28.285]      </control>
[00:35:28.285]      <control if="!isSWJ" while="" timeout="0" info="">
[00:35:28.285]        // if-block "!isSWJ"
[00:35:28.285]          // =>  FALSE
[00:35:28.285]        // skip if-block "!isSWJ"
[00:35:28.285]      </control>
[00:35:28.285]      <block atomic="false" info="">
[00:35:28.285]        ReadDP(0x0);
[00:35:28.288]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:35:28.288]      </block>
[00:35:28.288]      // end if-block "protType == 2"
[00:35:28.288]    </control>
[00:35:28.288]  </sequence>
[00:35:28.288]  
[00:35:28.290]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:35:28.290]  
[00:35:28.291]  <debugvars>
[00:35:28.291]    // Pre-defined
[00:35:28.291]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:35:28.291]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:35:28.291]    __dp=0x00000000
[00:35:28.291]    __ap=0x00000000
[00:35:28.291]    __traceout=0x00000000      (Trace Disabled)
[00:35:28.291]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:35:28.292]    __FlashAddr=0x00000000
[00:35:28.292]    __FlashLen=0x00000000
[00:35:28.292]    __FlashArg=0x00000000
[00:35:28.292]    __FlashOp=0x00000000
[00:35:28.292]    __Result=0x00000000
[00:35:28.292]  </debugvars>
[00:35:28.292]  
[00:35:28.292]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:35:28.292]    <block atomic="false" info="">
[00:35:28.292]      __var SW_DP_ABORT       = 0x0;
[00:35:28.293]        // -> [SW_DP_ABORT <= 0x00000000]
[00:35:28.293]      __var DP_CTRL_STAT      = 0x4;
[00:35:28.293]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:35:28.293]      __var DP_SELECT         = 0x8;
[00:35:28.294]        // -> [DP_SELECT <= 0x00000008]
[00:35:28.294]      __var powered_down      = 0;
[00:35:28.294]        // -> [powered_down <= 0x00000000]
[00:35:28.294]      WriteDP(DP_SELECT, 0x00000000);
[00:35:28.295]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:35:28.295]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:35:28.297]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:35:28.297]        // -> [powered_down <= 0x00000001]
[00:35:28.297]    </block>
[00:35:28.297]    <control if="powered_down" while="" timeout="0" info="">
[00:35:28.297]      // if-block "powered_down"
[00:35:28.297]        // =>  TRUE
[00:35:28.297]      <block atomic="false" info="">
[00:35:28.297]        Message(0, "Debug/System power-up request sent");
[00:35:28.299]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:35:28.300]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:35:28.300]      </block>
[00:35:28.301]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:35:28.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:35:28.305]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:35:28.305]        // while-condition  =>  FALSE
[00:35:28.305]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:35:28.305]      </control>
[00:35:28.305]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:35:28.305]        // if-block "(__protocol & 0xFFFF) == 1"
[00:35:28.305]          // =>  FALSE
[00:35:28.305]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:35:28.305]      </control>
[00:35:28.306]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:35:28.306]        // if-block "(__protocol & 0xFFFF) == 2"
[00:35:28.306]          // =>  TRUE
[00:35:28.306]        <block atomic="false" info="">
[00:35:28.306]          Message(0, "executing SWD power up");
[00:35:28.308]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:35:28.311]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:35:28.312]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:35:28.313]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:35:28.313]        </block>
[00:35:28.313]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:35:28.313]      </control>
[00:35:28.314]      // end if-block "powered_down"
[00:35:28.314]    </control>
[00:35:28.314]    <block atomic="false" info="">
[00:35:28.314]      __var DEBUG_PORT_VAL    = 0;
[00:35:28.314]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:35:28.314]      __var ACCESS_POINT_VAL  = 0;
[00:35:28.314]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:35:28.315]      __ap = 1; 
[00:35:28.315]        // -> [__ap <= 0x00000001]
[00:35:28.315]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:35:28.318]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:35:28.318]      __ap = 4;
[00:35:28.318]        // -> [__ap <= 0x00000004]
[00:35:28.318]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:35:28.322]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:35:28.322]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:35:28.322]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:35:28.323]    </block>
[00:35:28.323]    <block atomic="false" info="">
[00:35:28.323]      __var nReset = 0x80;
[00:35:28.324]        // -> [nReset <= 0x00000080]
[00:35:28.324]      __var canReadPins = 0;
[00:35:28.324]        // -> [canReadPins <= 0x00000000]
[00:35:28.324]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:35:28.326]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:35:28.326]        // -> [canReadPins <= 0x00000001]
[00:35:28.326]    </block>
[00:35:28.326]    <control if="" while="1" timeout="200" info="">
[00:35:28.326]      // while "1"  (timeout="200")
[00:35:28.326]      // while-condition  =>  TRUE
[00:35:28.327]      // while "1"  (timeout="200")
[00:35:28.327]      // while-condition  =>  TRUE
[00:35:28.327]      // while "1"  (timeout="200")
[00:35:28.327]      // while-condition  =>  TRUE
[00:35:28.327]      // while "1"  (timeout="200")
[00:35:28.327]      // while-condition  =>  TRUE
[00:35:28.327]      // while "1"  (timeout="200")
[00:35:28.327]      // while-condition  =>  TRUE
[00:35:28.327]      // while "1"  (timeout="200")
[00:35:28.328]      // while-condition  =>  TRUE
[00:35:28.328]      // while "1"  (timeout="200")
[00:35:28.328]      // while  =>  TIMEOUT
[00:35:28.328]      // end while "1"
[00:35:28.328]    </control>
[00:35:28.328]    <control if="canReadPins" while="" timeout="0" info="">
[00:35:28.328]      // if-block "canReadPins"
[00:35:28.328]        // =>  TRUE
[00:35:28.328]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:35:28.329]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:35:28.330]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:35:28.330]        // while-condition  =>  FALSE
[00:35:28.330]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:35:28.330]      </control>
[00:35:28.331]      // end if-block "canReadPins"
[00:35:28.331]    </control>
[00:35:28.331]    <control if="!canReadPins" while="" timeout="0" info="">
[00:35:28.331]      // if-block "!canReadPins"
[00:35:28.331]        // =>  FALSE
[00:35:28.331]      // skip if-block "!canReadPins"
[00:35:28.331]    </control>
[00:35:28.331]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:35:28.331]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:35:28.331]        // =>  TRUE
[00:35:28.331]      <block atomic="false" info="">
[00:35:28.331]        WriteAP(0x00, 0x190008);
[00:35:28.334]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:35:28.334]        WriteAP(0xF0, 0x01);
[00:35:28.338]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:35:28.338]      </block>
[00:35:28.338]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:35:28.338]    </control>
[00:35:28.338]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:35:28.338]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:35:28.338]        // =>  FALSE
[00:35:28.338]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:35:28.338]    </control>
[00:35:28.339]    <block atomic="false" info="">
[00:35:28.339]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:35:28.346]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:35:28.346]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:35:28.346]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:35:28.347]      __ap = 0; //lets make sure we reset the access point selection
[00:35:28.347]        // -> [__ap <= 0x00000000]
[00:35:28.347]    </block>
[00:35:28.348]  </sequence>
[00:35:28.348]  
[00:35:28.368]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:35:28.368]  
[00:35:28.368]  <debugvars>
[00:35:28.368]    // Pre-defined
[00:35:28.368]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:35:28.369]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:35:28.369]    __dp=0x00000000
[00:35:28.369]    __ap=0x00000000
[00:35:28.369]    __traceout=0x00000000      (Trace Disabled)
[00:35:28.369]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:35:28.369]    __FlashAddr=0x00000000
[00:35:28.369]    __FlashLen=0x00000000
[00:35:28.369]    __FlashArg=0x00000000
[00:35:28.370]    __FlashOp=0x00000000
[00:35:28.370]    __Result=0x00000000
[00:35:28.370]  </debugvars>
[00:35:28.370]  
[00:35:28.370]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:35:28.370]    <block atomic="false" info="">
[00:35:28.371]      __var deviceID = 0;
[00:35:28.371]        // -> [deviceID <= 0x00000000]
[00:35:28.371]      __var version = 0;
[00:35:28.371]        // -> [version <= 0x00000000]
[00:35:28.371]      __var partNum = 0;
[00:35:28.371]        // -> [partNum <= 0x00000000]
[00:35:28.371]      __var manuf = 0;
[00:35:28.371]        // -> [manuf <= 0x00000000]
[00:35:28.371]      __var isMSPM0G1X0X_G3X0X = 0;
[00:35:28.371]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:35:28.371]      __var isProduction = 0;
[00:35:28.371]        // -> [isProduction <= 0x00000000]
[00:35:28.371]      __var continueId = 0;
[00:35:28.371]        // -> [continueId <= 0x00000000]
[00:35:28.371]      deviceID =   Read32(0x41C40004);
[00:35:28.380]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:35:28.380]        // -> [deviceID <= 0x2BB8802F]
[00:35:28.380]      version = deviceID >> 28;
[00:35:28.381]        // -> [version <= 0x00000002]
[00:35:28.381]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:35:28.381]        // -> [partNum <= 0x0000BB88]
[00:35:28.381]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:35:28.381]        // -> [manuf <= 0x00000017]
[00:35:28.381]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:35:28.381]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:35:28.381]      isProduction = (version > 0);
[00:35:28.381]        // -> [isProduction <= 0x00000001]
[00:35:28.381]    </block>
[00:35:28.381]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:35:28.382]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:35:28.382]        // =>  FALSE
[00:35:28.382]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:35:28.382]    </control>
[00:35:28.382]    <control if="continueId == 4" while="" timeout="0" info="">
[00:35:28.382]      // if-block "continueId == 4"
[00:35:28.383]        // =>  FALSE
[00:35:28.383]      // skip if-block "continueId == 4"
[00:35:28.383]    </control>
[00:35:28.383]    <control if="!isProduction" while="" timeout="0" info="">
[00:35:28.383]      // if-block "!isProduction"
[00:35:28.383]        // =>  FALSE
[00:35:28.383]      // skip if-block "!isProduction"
[00:35:28.383]    </control>
[00:35:28.383]  </sequence>
[00:35:28.383]  
[00:37:30.392]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:37:30.392]  
[00:37:30.399]  <debugvars>
[00:37:30.399]    // Pre-defined
[00:37:30.399]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:37:30.399]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:37:30.399]    __dp=0x00000000
[00:37:30.400]    __ap=0x00000000
[00:37:30.400]    __traceout=0x00000000      (Trace Disabled)
[00:37:30.400]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:37:30.400]    __FlashAddr=0x00000000
[00:37:30.400]    __FlashLen=0x00000000
[00:37:30.400]    __FlashArg=0x00000000
[00:37:30.400]    __FlashOp=0x00000000
[00:37:30.400]    __Result=0x00000000
[00:37:30.400]  </debugvars>
[00:37:30.400]  
[00:37:30.400]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:37:30.400]    <block atomic="false" info="">
[00:37:30.400]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:37:30.400]        // -> [isSWJ <= 0x00000001]
[00:37:30.400]      __var hasDormant = __protocol & 0x00020000;
[00:37:30.400]        // -> [hasDormant <= 0x00000000]
[00:37:30.400]      __var protType   = __protocol & 0x0000FFFF;
[00:37:30.400]        // -> [protType <= 0x00000002]
[00:37:30.400]    </block>
[00:37:30.400]    <control if="protType == 1" while="" timeout="0" info="">
[00:37:30.400]      // if-block "protType == 1"
[00:37:30.400]        // =>  FALSE
[00:37:30.400]      // skip if-block "protType == 1"
[00:37:30.402]    </control>
[00:37:30.402]    <control if="protType == 2" while="" timeout="0" info="">
[00:37:30.402]      // if-block "protType == 2"
[00:37:30.402]        // =>  TRUE
[00:37:30.402]      <control if="isSWJ" while="" timeout="0" info="">
[00:37:30.402]        // if-block "isSWJ"
[00:37:30.402]          // =>  TRUE
[00:37:30.402]        <control if="hasDormant" while="" timeout="0" info="">
[00:37:30.402]          // if-block "hasDormant"
[00:37:30.402]            // =>  FALSE
[00:37:30.402]          // skip if-block "hasDormant"
[00:37:30.402]        </control>
[00:37:30.402]        <control if="!hasDormant" while="" timeout="0" info="">
[00:37:30.402]          // if-block "!hasDormant"
[00:37:30.402]            // =>  TRUE
[00:37:30.402]          <block atomic="false" info="">
[00:37:30.402]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:37:30.405]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:37:30.405]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:37:30.409]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:37:30.409]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:37:30.410]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:37:30.410]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:37:30.412]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:37:30.412]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:37:30.413]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:37:30.413]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:37:30.415]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:37:30.415]          </block>
[00:37:30.415]          // end if-block "!hasDormant"
[00:37:30.415]        </control>
[00:37:30.415]        // end if-block "isSWJ"
[00:37:30.415]      </control>
[00:37:30.415]      <control if="!isSWJ" while="" timeout="0" info="">
[00:37:30.415]        // if-block "!isSWJ"
[00:37:30.415]          // =>  FALSE
[00:37:30.415]        // skip if-block "!isSWJ"
[00:37:30.415]      </control>
[00:37:30.415]      <block atomic="false" info="">
[00:37:30.415]        ReadDP(0x0);
[00:37:30.418]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:37:30.418]      </block>
[00:37:30.418]      // end if-block "protType == 2"
[00:37:30.418]    </control>
[00:37:30.418]  </sequence>
[00:37:30.418]  
[00:37:30.421]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:37:30.421]  
[00:37:30.421]  <debugvars>
[00:37:30.421]    // Pre-defined
[00:37:30.421]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:37:30.421]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:37:30.421]    __dp=0x00000000
[00:37:30.421]    __ap=0x00000000
[00:37:30.421]    __traceout=0x00000000      (Trace Disabled)
[00:37:30.421]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:37:30.422]    __FlashAddr=0x00000000
[00:37:30.422]    __FlashLen=0x00000000
[00:37:30.422]    __FlashArg=0x00000000
[00:37:30.422]    __FlashOp=0x00000000
[00:37:30.422]    __Result=0x00000000
[00:37:30.422]  </debugvars>
[00:37:30.422]  
[00:37:30.422]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:37:30.422]    <block atomic="false" info="">
[00:37:30.422]      __var SW_DP_ABORT       = 0x0;
[00:37:30.422]        // -> [SW_DP_ABORT <= 0x00000000]
[00:37:30.422]      __var DP_CTRL_STAT      = 0x4;
[00:37:30.422]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:37:30.422]      __var DP_SELECT         = 0x8;
[00:37:30.422]        // -> [DP_SELECT <= 0x00000008]
[00:37:30.422]      __var powered_down      = 0;
[00:37:30.422]        // -> [powered_down <= 0x00000000]
[00:37:30.422]      WriteDP(DP_SELECT, 0x00000000);
[00:37:30.422]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:37:30.422]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:37:30.422]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:37:30.422]        // -> [powered_down <= 0x00000001]
[00:37:30.422]    </block>
[00:37:30.422]    <control if="powered_down" while="" timeout="0" info="">
[00:37:30.422]      // if-block "powered_down"
[00:37:30.422]        // =>  TRUE
[00:37:30.422]      <block atomic="false" info="">
[00:37:30.422]        Message(0, "Debug/System power-up request sent");
[00:37:30.429]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:37:30.429]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:37:30.429]      </block>
[00:37:30.429]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:37:30.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:37:30.432]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:37:30.432]        // while-condition  =>  FALSE
[00:37:30.432]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:37:30.432]      </control>
[00:37:30.432]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:37:30.432]        // if-block "(__protocol & 0xFFFF) == 1"
[00:37:30.432]          // =>  FALSE
[00:37:30.432]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:37:30.432]      </control>
[00:37:30.432]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:37:30.432]        // if-block "(__protocol & 0xFFFF) == 2"
[00:37:30.432]          // =>  TRUE
[00:37:30.432]        <block atomic="false" info="">
[00:37:30.432]          Message(0, "executing SWD power up");
[00:37:30.432]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:37:30.432]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:37:30.432]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:37:30.432]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:37:30.439]        </block>
[00:37:30.439]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:37:30.439]      </control>
[00:37:30.439]      // end if-block "powered_down"
[00:37:30.439]    </control>
[00:37:30.439]    <block atomic="false" info="">
[00:37:30.439]      __var DEBUG_PORT_VAL    = 0;
[00:37:30.439]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:37:30.439]      __var ACCESS_POINT_VAL  = 0;
[00:37:30.439]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:37:30.439]      __ap = 1; 
[00:37:30.439]        // -> [__ap <= 0x00000001]
[00:37:30.439]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:37:30.442]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:37:30.442]      __ap = 4;
[00:37:30.442]        // -> [__ap <= 0x00000004]
[00:37:30.442]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:37:30.442]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:37:30.442]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:37:30.442]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:37:30.442]    </block>
[00:37:30.442]    <block atomic="false" info="">
[00:37:30.442]      __var nReset = 0x80;
[00:37:30.442]        // -> [nReset <= 0x00000080]
[00:37:30.442]      __var canReadPins = 0;
[00:37:30.450]        // -> [canReadPins <= 0x00000000]
[00:37:30.450]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:37:30.450]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:37:30.450]        // -> [canReadPins <= 0x00000001]
[00:37:30.450]    </block>
[00:37:30.450]    <control if="" while="1" timeout="200" info="">
[00:37:30.450]      // while "1"  (timeout="200")
[00:37:30.450]      // while-condition  =>  TRUE
[00:37:30.450]      // while "1"  (timeout="200")
[00:37:30.450]      // while-condition  =>  TRUE
[00:37:30.450]      // while "1"  (timeout="200")
[00:37:30.450]      // while-condition  =>  TRUE
[00:37:30.450]      // while "1"  (timeout="200")
[00:37:30.453]      // while-condition  =>  TRUE
[00:37:30.453]      // while "1"  (timeout="200")
[00:37:30.453]      // while  =>  TIMEOUT
[00:37:30.453]      // end while "1"
[00:37:30.453]    </control>
[00:37:30.453]    <control if="canReadPins" while="" timeout="0" info="">
[00:37:30.453]      // if-block "canReadPins"
[00:37:30.453]        // =>  TRUE
[00:37:30.453]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:37:30.453]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:37:30.453]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:37:30.453]        // while-condition  =>  FALSE
[00:37:30.453]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:37:30.453]      </control>
[00:37:30.453]      // end if-block "canReadPins"
[00:37:30.453]    </control>
[00:37:30.453]    <control if="!canReadPins" while="" timeout="0" info="">
[00:37:30.453]      // if-block "!canReadPins"
[00:37:30.453]        // =>  FALSE
[00:37:30.453]      // skip if-block "!canReadPins"
[00:37:30.453]    </control>
[00:37:30.453]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:37:30.453]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:37:30.453]        // =>  TRUE
[00:37:30.453]      <block atomic="false" info="">
[00:37:30.453]        WriteAP(0x00, 0x190008);
[00:37:30.453]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:37:30.453]        WriteAP(0xF0, 0x01);
[00:37:30.460]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:37:30.460]      </block>
[00:37:30.460]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:37:30.460]    </control>
[00:37:30.460]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:37:30.463]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:37:30.463]        // =>  FALSE
[00:37:30.463]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:37:30.463]    </control>
[00:37:30.463]    <block atomic="false" info="">
[00:37:30.463]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:37:30.463]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:37:30.463]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:37:30.463]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:37:30.468]      __ap = 0; //lets make sure we reset the access point selection
[00:37:30.468]        // -> [__ap <= 0x00000000]
[00:37:30.468]    </block>
[00:37:30.468]  </sequence>
[00:37:30.468]  
[00:37:30.484]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:37:30.484]  
[00:37:30.484]  <debugvars>
[00:37:30.484]    // Pre-defined
[00:37:30.484]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:37:30.484]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:37:30.484]    __dp=0x00000000
[00:37:30.484]    __ap=0x00000000
[00:37:30.484]    __traceout=0x00000000      (Trace Disabled)
[00:37:30.484]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:37:30.484]    __FlashAddr=0x00000000
[00:37:30.484]    __FlashLen=0x00000000
[00:37:30.484]    __FlashArg=0x00000000
[00:37:30.484]    __FlashOp=0x00000000
[00:37:30.484]    __Result=0x00000000
[00:37:30.484]  </debugvars>
[00:37:30.484]  
[00:37:30.484]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:37:30.484]    <block atomic="false" info="">
[00:37:30.484]      __var deviceID = 0;
[00:37:30.484]        // -> [deviceID <= 0x00000000]
[00:37:30.484]      __var version = 0;
[00:37:30.490]        // -> [version <= 0x00000000]
[00:37:30.490]      __var partNum = 0;
[00:37:30.490]        // -> [partNum <= 0x00000000]
[00:37:30.490]      __var manuf = 0;
[00:37:30.490]        // -> [manuf <= 0x00000000]
[00:37:30.490]      __var isMSPM0G1X0X_G3X0X = 0;
[00:37:30.490]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:37:30.490]      __var isProduction = 0;
[00:37:30.490]        // -> [isProduction <= 0x00000000]
[00:37:30.490]      __var continueId = 0;
[00:37:30.490]        // -> [continueId <= 0x00000000]
[00:37:30.490]      deviceID =   Read32(0x41C40004);
[00:37:30.492]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:37:30.492]        // -> [deviceID <= 0x2BB8802F]
[00:37:30.492]      version = deviceID >> 28;
[00:37:30.492]        // -> [version <= 0x00000002]
[00:37:30.492]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:37:30.492]        // -> [partNum <= 0x0000BB88]
[00:37:30.492]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:37:30.492]        // -> [manuf <= 0x00000017]
[00:37:30.492]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:37:30.492]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:37:30.492]      isProduction = (version > 0);
[00:37:30.492]        // -> [isProduction <= 0x00000001]
[00:37:30.492]    </block>
[00:37:30.492]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:37:30.497]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:37:30.497]        // =>  FALSE
[00:37:30.497]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:37:30.497]    </control>
[00:37:30.497]    <control if="continueId == 4" while="" timeout="0" info="">
[00:37:30.497]      // if-block "continueId == 4"
[00:37:30.497]        // =>  FALSE
[00:37:30.497]      // skip if-block "continueId == 4"
[00:37:30.497]    </control>
[00:37:30.497]    <control if="!isProduction" while="" timeout="0" info="">
[00:37:30.497]      // if-block "!isProduction"
[00:37:30.497]        // =>  FALSE
[00:37:30.497]      // skip if-block "!isProduction"
[00:37:30.497]    </control>
[00:37:30.497]  </sequence>
[00:37:30.497]  
[00:38:33.117]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:38:33.117]  
[00:38:33.127]  <debugvars>
[00:38:33.127]    // Pre-defined
[00:38:33.127]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:38:33.127]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:38:33.127]    __dp=0x00000000
[00:38:33.127]    __ap=0x00000000
[00:38:33.127]    __traceout=0x00000000      (Trace Disabled)
[00:38:33.127]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:38:33.127]    __FlashAddr=0x00000000
[00:38:33.127]    __FlashLen=0x00000000
[00:38:33.127]    __FlashArg=0x00000000
[00:38:33.127]    __FlashOp=0x00000000
[00:38:33.127]    __Result=0x00000000
[00:38:33.127]  </debugvars>
[00:38:33.127]  
[00:38:33.127]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:38:33.127]    <block atomic="false" info="">
[00:38:33.127]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:38:33.127]        // -> [isSWJ <= 0x00000001]
[00:38:33.127]      __var hasDormant = __protocol & 0x00020000;
[00:38:33.127]        // -> [hasDormant <= 0x00000000]
[00:38:33.127]      __var protType   = __protocol & 0x0000FFFF;
[00:38:33.127]        // -> [protType <= 0x00000002]
[00:38:33.127]    </block>
[00:38:33.127]    <control if="protType == 1" while="" timeout="0" info="">
[00:38:33.127]      // if-block "protType == 1"
[00:38:33.127]        // =>  FALSE
[00:38:33.127]      // skip if-block "protType == 1"
[00:38:33.127]    </control>
[00:38:33.127]    <control if="protType == 2" while="" timeout="0" info="">
[00:38:33.127]      // if-block "protType == 2"
[00:38:33.127]        // =>  TRUE
[00:38:33.127]      <control if="isSWJ" while="" timeout="0" info="">
[00:38:33.127]        // if-block "isSWJ"
[00:38:33.127]          // =>  TRUE
[00:38:33.127]        <control if="hasDormant" while="" timeout="0" info="">
[00:38:33.127]          // if-block "hasDormant"
[00:38:33.127]            // =>  FALSE
[00:38:33.127]          // skip if-block "hasDormant"
[00:38:33.127]        </control>
[00:38:33.127]        <control if="!hasDormant" while="" timeout="0" info="">
[00:38:33.127]          // if-block "!hasDormant"
[00:38:33.127]            // =>  TRUE
[00:38:33.127]          <block atomic="false" info="">
[00:38:33.127]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:38:33.127]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:38:33.127]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:38:33.127]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:38:33.127]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:38:33.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:38:33.137]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:38:33.137]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:38:33.137]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:38:33.137]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:38:33.137]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:38:33.137]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:38:33.137]          </block>
[00:38:33.137]          // end if-block "!hasDormant"
[00:38:33.137]        </control>
[00:38:33.137]        // end if-block "isSWJ"
[00:38:33.137]      </control>
[00:38:33.137]      <control if="!isSWJ" while="" timeout="0" info="">
[00:38:33.137]        // if-block "!isSWJ"
[00:38:33.137]          // =>  FALSE
[00:38:33.137]        // skip if-block "!isSWJ"
[00:38:33.137]      </control>
[00:38:33.137]      <block atomic="false" info="">
[00:38:33.137]        ReadDP(0x0);
[00:38:33.137]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:38:33.137]      </block>
[00:38:33.137]      // end if-block "protType == 2"
[00:38:33.137]    </control>
[00:38:33.137]  </sequence>
[00:38:33.137]  
[00:38:33.147]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:38:33.147]  
[00:38:33.147]  <debugvars>
[00:38:33.147]    // Pre-defined
[00:38:33.147]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:38:33.147]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:38:33.147]    __dp=0x00000000
[00:38:33.147]    __ap=0x00000000
[00:38:33.147]    __traceout=0x00000000      (Trace Disabled)
[00:38:33.147]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:38:33.147]    __FlashAddr=0x00000000
[00:38:33.147]    __FlashLen=0x00000000
[00:38:33.147]    __FlashArg=0x00000000
[00:38:33.147]    __FlashOp=0x00000000
[00:38:33.147]    __Result=0x00000000
[00:38:33.147]  </debugvars>
[00:38:33.147]  
[00:38:33.147]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:38:33.147]    <block atomic="false" info="">
[00:38:33.147]      __var SW_DP_ABORT       = 0x0;
[00:38:33.147]        // -> [SW_DP_ABORT <= 0x00000000]
[00:38:33.147]      __var DP_CTRL_STAT      = 0x4;
[00:38:33.147]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:38:33.147]      __var DP_SELECT         = 0x8;
[00:38:33.147]        // -> [DP_SELECT <= 0x00000008]
[00:38:33.147]      __var powered_down      = 0;
[00:38:33.147]        // -> [powered_down <= 0x00000000]
[00:38:33.147]      WriteDP(DP_SELECT, 0x00000000);
[00:38:33.147]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:38:33.147]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:38:33.147]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:38:33.147]        // -> [powered_down <= 0x00000001]
[00:38:33.147]    </block>
[00:38:33.147]    <control if="powered_down" while="" timeout="0" info="">
[00:38:33.147]      // if-block "powered_down"
[00:38:33.147]        // =>  TRUE
[00:38:33.147]      <block atomic="false" info="">
[00:38:33.147]        Message(0, "Debug/System power-up request sent");
[00:38:33.157]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:38:33.157]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:38:33.157]      </block>
[00:38:33.157]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:38:33.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:38:33.157]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:38:33.157]        // while-condition  =>  FALSE
[00:38:33.157]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:38:33.157]      </control>
[00:38:33.157]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:38:33.157]        // if-block "(__protocol & 0xFFFF) == 1"
[00:38:33.157]          // =>  FALSE
[00:38:33.157]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:38:33.157]      </control>
[00:38:33.157]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:38:33.157]        // if-block "(__protocol & 0xFFFF) == 2"
[00:38:33.157]          // =>  TRUE
[00:38:33.157]        <block atomic="false" info="">
[00:38:33.157]          Message(0, "executing SWD power up");
[00:38:33.157]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:38:33.167]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:38:33.167]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:38:33.167]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:38:33.167]        </block>
[00:38:33.167]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:38:33.167]      </control>
[00:38:33.167]      // end if-block "powered_down"
[00:38:33.167]    </control>
[00:38:33.167]    <block atomic="false" info="">
[00:38:33.167]      __var DEBUG_PORT_VAL    = 0;
[00:38:33.167]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:38:33.167]      __var ACCESS_POINT_VAL  = 0;
[00:38:33.167]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:38:33.167]      __ap = 1; 
[00:38:33.167]        // -> [__ap <= 0x00000001]
[00:38:33.167]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:38:33.167]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:38:33.167]      __ap = 4;
[00:38:33.167]        // -> [__ap <= 0x00000004]
[00:38:33.167]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:38:33.177]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:38:33.177]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:38:33.177]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:38:33.177]    </block>
[00:38:33.177]    <block atomic="false" info="">
[00:38:33.177]      __var nReset = 0x80;
[00:38:33.177]        // -> [nReset <= 0x00000080]
[00:38:33.177]      __var canReadPins = 0;
[00:38:33.177]        // -> [canReadPins <= 0x00000000]
[00:38:33.177]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:38:33.177]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:38:33.177]        // -> [canReadPins <= 0x00000001]
[00:38:33.177]    </block>
[00:38:33.177]    <control if="" while="1" timeout="200" info="">
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.177]      // while-condition  =>  TRUE
[00:38:33.177]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.187]      // while "1"  (timeout="200")
[00:38:33.187]      // while-condition  =>  TRUE
[00:38:33.197]      // while "1"  (timeout="200")
[00:38:33.197]      // while  =>  TIMEOUT
[00:38:33.197]      // end while "1"
[00:38:33.197]    </control>
[00:38:33.197]    <control if="canReadPins" while="" timeout="0" info="">
[00:38:33.197]      // if-block "canReadPins"
[00:38:33.197]        // =>  TRUE
[00:38:33.197]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:38:33.197]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:38:33.197]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:38:33.197]        // while-condition  =>  FALSE
[00:38:33.197]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:38:33.197]      </control>
[00:38:33.197]      // end if-block "canReadPins"
[00:38:33.197]    </control>
[00:38:33.197]    <control if="!canReadPins" while="" timeout="0" info="">
[00:38:33.197]      // if-block "!canReadPins"
[00:38:33.197]        // =>  FALSE
[00:38:33.197]      // skip if-block "!canReadPins"
[00:38:33.197]    </control>
[00:38:33.197]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:38:33.197]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:38:33.197]        // =>  TRUE
[00:38:33.197]      <block atomic="false" info="">
[00:38:33.197]        WriteAP(0x00, 0x190008);
[00:38:33.197]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:38:33.197]        WriteAP(0xF0, 0x01);
[00:38:33.197]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:38:33.197]      </block>
[00:38:33.197]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:38:33.197]    </control>
[00:38:33.207]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:38:33.207]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:38:33.207]        // =>  FALSE
[00:38:33.207]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:38:33.207]    </control>
[00:38:33.207]    <block atomic="false" info="">
[00:38:33.207]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:38:33.208]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:38:33.208]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:38:33.208]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:38:33.208]      __ap = 0; //lets make sure we reset the access point selection
[00:38:33.208]        // -> [__ap <= 0x00000000]
[00:38:33.208]    </block>
[00:38:33.208]  </sequence>
[00:38:33.208]  
[00:38:33.227]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:38:33.227]  
[00:38:33.227]  <debugvars>
[00:38:33.227]    // Pre-defined
[00:38:33.227]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:38:33.227]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:38:33.227]    __dp=0x00000000
[00:38:33.227]    __ap=0x00000000
[00:38:33.227]    __traceout=0x00000000      (Trace Disabled)
[00:38:33.227]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:38:33.227]    __FlashAddr=0x00000000
[00:38:33.227]    __FlashLen=0x00000000
[00:38:33.227]    __FlashArg=0x00000000
[00:38:33.227]    __FlashOp=0x00000000
[00:38:33.227]    __Result=0x00000000
[00:38:33.227]  </debugvars>
[00:38:33.227]  
[00:38:33.227]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:38:33.227]    <block atomic="false" info="">
[00:38:33.227]      __var deviceID = 0;
[00:38:33.227]        // -> [deviceID <= 0x00000000]
[00:38:33.227]      __var version = 0;
[00:38:33.227]        // -> [version <= 0x00000000]
[00:38:33.227]      __var partNum = 0;
[00:38:33.227]        // -> [partNum <= 0x00000000]
[00:38:33.227]      __var manuf = 0;
[00:38:33.227]        // -> [manuf <= 0x00000000]
[00:38:33.227]      __var isMSPM0G1X0X_G3X0X = 0;
[00:38:33.227]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:38:33.227]      __var isProduction = 0;
[00:38:33.227]        // -> [isProduction <= 0x00000000]
[00:38:33.227]      __var continueId = 0;
[00:38:33.227]        // -> [continueId <= 0x00000000]
[00:38:33.227]      deviceID =   Read32(0x41C40004);
[00:38:33.237]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:38:33.237]        // -> [deviceID <= 0x2BB8802F]
[00:38:33.237]      version = deviceID >> 28;
[00:38:33.237]        // -> [version <= 0x00000002]
[00:38:33.237]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:38:33.237]        // -> [partNum <= 0x0000BB88]
[00:38:33.237]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:38:33.237]        // -> [manuf <= 0x00000017]
[00:38:33.237]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:38:33.237]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:38:33.237]      isProduction = (version > 0);
[00:38:33.237]        // -> [isProduction <= 0x00000001]
[00:38:33.237]    </block>
[00:38:33.237]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:38:33.237]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:38:33.237]        // =>  FALSE
[00:38:33.237]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:38:33.237]    </control>
[00:38:33.237]    <control if="continueId == 4" while="" timeout="0" info="">
[00:38:33.237]      // if-block "continueId == 4"
[00:38:33.237]        // =>  FALSE
[00:38:33.237]      // skip if-block "continueId == 4"
[00:38:33.237]    </control>
[00:38:33.237]    <control if="!isProduction" while="" timeout="0" info="">
[00:38:33.237]      // if-block "!isProduction"
[00:38:33.237]        // =>  FALSE
[00:38:33.237]      // skip if-block "!isProduction"
[00:38:33.237]    </control>
[00:38:33.247]  </sequence>
[00:38:33.247]  
[00:42:53.837]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:42:53.837]  
[00:42:53.852]  <debugvars>
[00:42:53.852]    // Pre-defined
[00:42:53.852]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:53.852]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:53.852]    __dp=0x00000000
[00:42:53.852]    __ap=0x00000000
[00:42:53.852]    __traceout=0x00000000      (Trace Disabled)
[00:42:53.852]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:53.852]    __FlashAddr=0x00000000
[00:42:53.852]    __FlashLen=0x00000000
[00:42:53.852]    __FlashArg=0x00000000
[00:42:53.852]    __FlashOp=0x00000000
[00:42:53.852]    __Result=0x00000000
[00:42:53.852]  </debugvars>
[00:42:53.852]  
[00:42:53.852]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:42:53.852]    <block atomic="false" info="">
[00:42:53.852]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:42:53.852]        // -> [isSWJ <= 0x00000001]
[00:42:53.852]      __var hasDormant = __protocol & 0x00020000;
[00:42:53.852]        // -> [hasDormant <= 0x00000000]
[00:42:53.852]      __var protType   = __protocol & 0x0000FFFF;
[00:42:53.852]        // -> [protType <= 0x00000002]
[00:42:53.852]    </block>
[00:42:53.852]    <control if="protType == 1" while="" timeout="0" info="">
[00:42:53.852]      // if-block "protType == 1"
[00:42:53.852]        // =>  FALSE
[00:42:53.852]      // skip if-block "protType == 1"
[00:42:53.852]    </control>
[00:42:53.852]    <control if="protType == 2" while="" timeout="0" info="">
[00:42:53.852]      // if-block "protType == 2"
[00:42:53.852]        // =>  TRUE
[00:42:53.852]      <control if="isSWJ" while="" timeout="0" info="">
[00:42:53.852]        // if-block "isSWJ"
[00:42:53.852]          // =>  TRUE
[00:42:53.852]        <control if="hasDormant" while="" timeout="0" info="">
[00:42:53.852]          // if-block "hasDormant"
[00:42:53.852]            // =>  FALSE
[00:42:53.852]          // skip if-block "hasDormant"
[00:42:53.852]        </control>
[00:42:53.852]        <control if="!hasDormant" while="" timeout="0" info="">
[00:42:53.852]          // if-block "!hasDormant"
[00:42:53.852]            // =>  TRUE
[00:42:53.852]          <block atomic="false" info="">
[00:42:53.852]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:42:53.858]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:53.858]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:42:53.858]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:42:53.858]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:42:53.858]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:53.858]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:42:53.858]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:42:53.858]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:42:53.858]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:42:53.858]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:42:53.858]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:42:53.858]          </block>
[00:42:53.858]          // end if-block "!hasDormant"
[00:42:53.858]        </control>
[00:42:53.858]        // end if-block "isSWJ"
[00:42:53.858]      </control>
[00:42:53.858]      <control if="!isSWJ" while="" timeout="0" info="">
[00:42:53.858]        // if-block "!isSWJ"
[00:42:53.858]          // =>  FALSE
[00:42:53.858]        // skip if-block "!isSWJ"
[00:42:53.858]      </control>
[00:42:53.858]      <block atomic="false" info="">
[00:42:53.868]        ReadDP(0x0);
[00:42:53.868]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:42:53.868]      </block>
[00:42:53.868]      // end if-block "protType == 2"
[00:42:53.868]    </control>
[00:42:53.868]  </sequence>
[00:42:53.868]  
[00:42:53.868]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:42:53.868]  
[00:42:53.868]  <debugvars>
[00:42:53.868]    // Pre-defined
[00:42:53.868]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:53.868]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:53.868]    __dp=0x00000000
[00:42:53.868]    __ap=0x00000000
[00:42:53.868]    __traceout=0x00000000      (Trace Disabled)
[00:42:53.868]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:53.868]    __FlashAddr=0x00000000
[00:42:53.868]    __FlashLen=0x00000000
[00:42:53.868]    __FlashArg=0x00000000
[00:42:53.868]    __FlashOp=0x00000000
[00:42:53.868]    __Result=0x00000000
[00:42:53.868]  </debugvars>
[00:42:53.868]  
[00:42:53.868]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:42:53.868]    <block atomic="false" info="">
[00:42:53.868]      __var SW_DP_ABORT       = 0x0;
[00:42:53.868]        // -> [SW_DP_ABORT <= 0x00000000]
[00:42:53.868]      __var DP_CTRL_STAT      = 0x4;
[00:42:53.868]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:42:53.868]      __var DP_SELECT         = 0x8;
[00:42:53.868]        // -> [DP_SELECT <= 0x00000008]
[00:42:53.868]      __var powered_down      = 0;
[00:42:53.868]        // -> [powered_down <= 0x00000000]
[00:42:53.868]      WriteDP(DP_SELECT, 0x00000000);
[00:42:53.868]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:42:53.868]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:42:53.878]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:42:53.878]        // -> [powered_down <= 0x00000001]
[00:42:53.878]    </block>
[00:42:53.878]    <control if="powered_down" while="" timeout="0" info="">
[00:42:53.878]      // if-block "powered_down"
[00:42:53.878]        // =>  TRUE
[00:42:53.878]      <block atomic="false" info="">
[00:42:53.878]        Message(0, "Debug/System power-up request sent");
[00:42:53.878]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:42:53.878]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:42:53.878]      </block>
[00:42:53.878]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:42:53.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:42:53.888]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:42:53.888]        // while-condition  =>  FALSE
[00:42:53.888]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:42:53.888]      </control>
[00:42:53.888]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:42:53.888]        // if-block "(__protocol & 0xFFFF) == 1"
[00:42:53.888]          // =>  FALSE
[00:42:53.888]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:42:53.888]      </control>
[00:42:53.888]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:42:53.888]        // if-block "(__protocol & 0xFFFF) == 2"
[00:42:53.888]          // =>  TRUE
[00:42:53.888]        <block atomic="false" info="">
[00:42:53.888]          Message(0, "executing SWD power up");
[00:42:53.888]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:42:53.888]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:42:53.888]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:42:53.888]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:42:53.888]        </block>
[00:42:53.888]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:42:53.888]      </control>
[00:42:53.888]      // end if-block "powered_down"
[00:42:53.888]    </control>
[00:42:53.888]    <block atomic="false" info="">
[00:42:53.888]      __var DEBUG_PORT_VAL    = 0;
[00:42:53.888]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:42:53.888]      __var ACCESS_POINT_VAL  = 0;
[00:42:53.888]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:42:53.888]      __ap = 1; 
[00:42:53.888]        // -> [__ap <= 0x00000001]
[00:42:53.888]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:42:53.898]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:42:53.898]      __ap = 4;
[00:42:53.898]        // -> [__ap <= 0x00000004]
[00:42:53.898]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:42:53.898]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:42:53.898]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:42:53.898]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:42:53.898]    </block>
[00:42:53.898]    <block atomic="false" info="">
[00:42:53.898]      __var nReset = 0x80;
[00:42:53.898]        // -> [nReset <= 0x00000080]
[00:42:53.898]      __var canReadPins = 0;
[00:42:53.898]        // -> [canReadPins <= 0x00000000]
[00:42:53.898]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:42:53.898]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:42:53.898]        // -> [canReadPins <= 0x00000001]
[00:42:53.898]    </block>
[00:42:53.898]    <control if="" while="1" timeout="200" info="">
[00:42:53.898]      // while "1"  (timeout="200")
[00:42:53.898]      // while-condition  =>  TRUE
[00:42:53.908]      // while "1"  (timeout="200")
[00:42:53.908]      // while  =>  TIMEOUT
[00:42:53.908]      // end while "1"
[00:42:53.908]    </control>
[00:42:53.908]    <control if="canReadPins" while="" timeout="0" info="">
[00:42:53.908]      // if-block "canReadPins"
[00:42:53.908]        // =>  TRUE
[00:42:53.908]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:42:53.908]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:42:53.908]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:42:53.908]        // while-condition  =>  FALSE
[00:42:53.908]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:42:53.908]      </control>
[00:42:53.908]      // end if-block "canReadPins"
[00:42:53.908]    </control>
[00:42:53.908]    <control if="!canReadPins" while="" timeout="0" info="">
[00:42:53.908]      // if-block "!canReadPins"
[00:42:53.908]        // =>  FALSE
[00:42:53.908]      // skip if-block "!canReadPins"
[00:42:53.908]    </control>
[00:42:53.908]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:42:53.908]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:42:53.908]        // =>  TRUE
[00:42:53.908]      <block atomic="false" info="">
[00:42:53.908]        WriteAP(0x00, 0x190008);
[00:42:53.908]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:42:53.908]        WriteAP(0xF0, 0x01);
[00:42:53.908]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:42:53.908]      </block>
[00:42:53.908]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:42:53.908]    </control>
[00:42:53.908]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:42:53.908]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:42:53.908]        // =>  FALSE
[00:42:53.908]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:42:53.908]    </control>
[00:42:53.908]    <block atomic="false" info="">
[00:42:53.918]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:42:53.918]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:42:53.918]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:42:53.918]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:42:53.918]      __ap = 0; //lets make sure we reset the access point selection
[00:42:53.918]        // -> [__ap <= 0x00000000]
[00:42:53.918]    </block>
[00:42:53.918]  </sequence>
[00:42:53.918]  
[00:42:53.938]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:42:53.938]  
[00:42:53.938]  <debugvars>
[00:42:53.938]    // Pre-defined
[00:42:53.938]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:42:53.938]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:42:53.938]    __dp=0x00000000
[00:42:53.938]    __ap=0x00000000
[00:42:53.938]    __traceout=0x00000000      (Trace Disabled)
[00:42:53.938]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:42:53.938]    __FlashAddr=0x00000000
[00:42:53.938]    __FlashLen=0x00000000
[00:42:53.938]    __FlashArg=0x00000000
[00:42:53.938]    __FlashOp=0x00000000
[00:42:53.938]    __Result=0x00000000
[00:42:53.938]  </debugvars>
[00:42:53.938]  
[00:42:53.938]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:42:53.938]    <block atomic="false" info="">
[00:42:53.938]      __var deviceID = 0;
[00:42:53.938]        // -> [deviceID <= 0x00000000]
[00:42:53.938]      __var version = 0;
[00:42:53.938]        // -> [version <= 0x00000000]
[00:42:53.938]      __var partNum = 0;
[00:42:53.938]        // -> [partNum <= 0x00000000]
[00:42:53.938]      __var manuf = 0;
[00:42:53.938]        // -> [manuf <= 0x00000000]
[00:42:53.938]      __var isMSPM0G1X0X_G3X0X = 0;
[00:42:53.938]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:42:53.938]      __var isProduction = 0;
[00:42:53.938]        // -> [isProduction <= 0x00000000]
[00:42:53.938]      __var continueId = 0;
[00:42:53.938]        // -> [continueId <= 0x00000000]
[00:42:53.938]      deviceID =   Read32(0x41C40004);
[00:42:53.948]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:42:53.948]        // -> [deviceID <= 0x2BB8802F]
[00:42:53.948]      version = deviceID >> 28;
[00:42:53.948]        // -> [version <= 0x00000002]
[00:42:53.948]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:42:53.948]        // -> [partNum <= 0x0000BB88]
[00:42:53.948]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:42:53.948]        // -> [manuf <= 0x00000017]
[00:42:53.948]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:42:53.948]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:42:53.948]      isProduction = (version > 0);
[00:42:53.948]        // -> [isProduction <= 0x00000001]
[00:42:53.948]    </block>
[00:42:53.948]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:42:53.948]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:42:53.948]        // =>  FALSE
[00:42:53.948]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:42:53.948]    </control>
[00:42:53.948]    <control if="continueId == 4" while="" timeout="0" info="">
[00:42:53.948]      // if-block "continueId == 4"
[00:42:53.948]        // =>  FALSE
[00:42:53.948]      // skip if-block "continueId == 4"
[00:42:53.948]    </control>
[00:42:53.948]    <control if="!isProduction" while="" timeout="0" info="">
[00:42:53.948]      // if-block "!isProduction"
[00:42:53.948]        // =>  FALSE
[00:42:53.948]      // skip if-block "!isProduction"
[00:42:53.948]    </control>
[00:42:53.948]  </sequence>
[00:42:53.948]  
[00:49:36.993]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:49:36.993]  
[00:49:36.993]  <debugvars>
[00:49:36.993]    // Pre-defined
[00:49:36.993]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:36.993]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:49:36.993]    __dp=0x00000000
[00:49:36.993]    __ap=0x00000000
[00:49:36.993]    __traceout=0x00000000      (Trace Disabled)
[00:49:36.993]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:36.993]    __FlashAddr=0x00000000
[00:49:36.993]    __FlashLen=0x00000000
[00:49:37.002]    __FlashArg=0x00000000
[00:49:37.002]    __FlashOp=0x00000000
[00:49:37.002]    __Result=0x00000000
[00:49:37.002]  </debugvars>
[00:49:37.002]  
[00:49:37.002]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:49:37.002]    <block atomic="false" info="">
[00:49:37.002]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:49:37.002]        // -> [isSWJ <= 0x00000001]
[00:49:37.002]      __var hasDormant = __protocol & 0x00020000;
[00:49:37.002]        // -> [hasDormant <= 0x00000000]
[00:49:37.002]      __var protType   = __protocol & 0x0000FFFF;
[00:49:37.002]        // -> [protType <= 0x00000002]
[00:49:37.002]    </block>
[00:49:37.002]    <control if="protType == 1" while="" timeout="0" info="">
[00:49:37.002]      // if-block "protType == 1"
[00:49:37.002]        // =>  FALSE
[00:49:37.002]      // skip if-block "protType == 1"
[00:49:37.002]    </control>
[00:49:37.002]    <control if="protType == 2" while="" timeout="0" info="">
[00:49:37.004]      // if-block "protType == 2"
[00:49:37.005]        // =>  TRUE
[00:49:37.005]      <control if="isSWJ" while="" timeout="0" info="">
[00:49:37.005]        // if-block "isSWJ"
[00:49:37.005]          // =>  TRUE
[00:49:37.005]        <control if="hasDormant" while="" timeout="0" info="">
[00:49:37.005]          // if-block "hasDormant"
[00:49:37.005]            // =>  FALSE
[00:49:37.005]          // skip if-block "hasDormant"
[00:49:37.005]        </control>
[00:49:37.005]        <control if="!hasDormant" while="" timeout="0" info="">
[00:49:37.005]          // if-block "!hasDormant"
[00:49:37.005]            // =>  TRUE
[00:49:37.005]          <block atomic="false" info="">
[00:49:37.005]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:49:37.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:49:37.006]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:49:37.009]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:49:37.009]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:49:37.011]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:49:37.011]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:49:37.012]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:49:37.012]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:49:37.013]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:49:37.013]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:49:37.015]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:49:37.015]          </block>
[00:49:37.015]          // end if-block "!hasDormant"
[00:49:37.015]        </control>
[00:49:37.015]        // end if-block "isSWJ"
[00:49:37.015]      </control>
[00:49:37.015]      <control if="!isSWJ" while="" timeout="0" info="">
[00:49:37.015]        // if-block "!isSWJ"
[00:49:37.015]          // =>  FALSE
[00:49:37.015]        // skip if-block "!isSWJ"
[00:49:37.015]      </control>
[00:49:37.015]      <block atomic="false" info="">
[00:49:37.015]        ReadDP(0x0);
[00:49:37.018]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:49:37.018]      </block>
[00:49:37.018]      // end if-block "protType == 2"
[00:49:37.018]    </control>
[00:49:37.018]  </sequence>
[00:49:37.018]  
[00:49:37.021]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:49:37.021]  
[00:49:37.021]  <debugvars>
[00:49:37.021]    // Pre-defined
[00:49:37.021]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:37.021]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:49:37.021]    __dp=0x00000000
[00:49:37.023]    __ap=0x00000000
[00:49:37.023]    __traceout=0x00000000      (Trace Disabled)
[00:49:37.023]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:37.023]    __FlashAddr=0x00000000
[00:49:37.023]    __FlashLen=0x00000000
[00:49:37.023]    __FlashArg=0x00000000
[00:49:37.023]    __FlashOp=0x00000000
[00:49:37.024]    __Result=0x00000000
[00:49:37.024]  </debugvars>
[00:49:37.024]  
[00:49:37.024]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:49:37.024]    <block atomic="false" info="">
[00:49:37.024]      __var SW_DP_ABORT       = 0x0;
[00:49:37.024]        // -> [SW_DP_ABORT <= 0x00000000]
[00:49:37.024]      __var DP_CTRL_STAT      = 0x4;
[00:49:37.024]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:49:37.024]      __var DP_SELECT         = 0x8;
[00:49:37.024]        // -> [DP_SELECT <= 0x00000008]
[00:49:37.024]      __var powered_down      = 0;
[00:49:37.024]        // -> [powered_down <= 0x00000000]
[00:49:37.024]      WriteDP(DP_SELECT, 0x00000000);
[00:49:37.025]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:49:37.025]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:49:37.028]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:49:37.028]        // -> [powered_down <= 0x00000001]
[00:49:37.028]    </block>
[00:49:37.028]    <control if="powered_down" while="" timeout="0" info="">
[00:49:37.028]      // if-block "powered_down"
[00:49:37.028]        // =>  TRUE
[00:49:37.028]      <block atomic="false" info="">
[00:49:37.028]        Message(0, "Debug/System power-up request sent");
[00:49:37.028]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:49:37.029]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:49:37.029]      </block>
[00:49:37.029]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:49:37.029]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:49:37.033]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:49:37.033]        // while-condition  =>  FALSE
[00:49:37.033]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:49:37.033]      </control>
[00:49:37.034]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:49:37.034]        // if-block "(__protocol & 0xFFFF) == 1"
[00:49:37.034]          // =>  FALSE
[00:49:37.034]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:49:37.034]      </control>
[00:49:37.034]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:49:37.034]        // if-block "(__protocol & 0xFFFF) == 2"
[00:49:37.034]          // =>  TRUE
[00:49:37.034]        <block atomic="false" info="">
[00:49:37.034]          Message(0, "executing SWD power up");
[00:49:37.034]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:49:37.036]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:49:37.036]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:49:37.037]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:49:37.037]        </block>
[00:49:37.037]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:49:37.037]      </control>
[00:49:37.037]      // end if-block "powered_down"
[00:49:37.037]    </control>
[00:49:37.037]    <block atomic="false" info="">
[00:49:37.037]      __var DEBUG_PORT_VAL    = 0;
[00:49:37.037]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:49:37.039]      __var ACCESS_POINT_VAL  = 0;
[00:49:37.039]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:49:37.039]      __ap = 1; 
[00:49:37.039]        // -> [__ap <= 0x00000001]
[00:49:37.039]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:49:37.043]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:49:37.043]      __ap = 4;
[00:49:37.043]        // -> [__ap <= 0x00000004]
[00:49:37.043]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:49:37.043]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:49:37.043]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:49:37.043]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:49:37.043]    </block>
[00:49:37.043]    <block atomic="false" info="">
[00:49:37.043]      __var nReset = 0x80;
[00:49:37.043]        // -> [nReset <= 0x00000080]
[00:49:37.043]      __var canReadPins = 0;
[00:49:37.043]        // -> [canReadPins <= 0x00000000]
[00:49:37.043]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:49:37.048]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:49:37.048]        // -> [canReadPins <= 0x00000001]
[00:49:37.048]    </block>
[00:49:37.048]    <control if="" while="1" timeout="200" info="">
[00:49:37.048]      // while "1"  (timeout="200")
[00:49:37.048]      // while-condition  =>  TRUE
[00:49:37.048]      // while "1"  (timeout="200")
[00:49:37.048]      // while-condition  =>  TRUE
[00:49:37.048]      // while "1"  (timeout="200")
[00:49:37.048]      // while-condition  =>  TRUE
[00:49:37.048]      // while "1"  (timeout="200")
[00:49:37.048]      // while-condition  =>  TRUE
[00:49:37.048]      // while "1"  (timeout="200")
[00:49:37.048]      // while-condition  =>  TRUE
[00:49:37.048]      // while "1"  (timeout="200")
[00:49:37.048]      // while-condition  =>  TRUE
[00:49:37.048]      // while "1"  (timeout="200")
[00:49:37.048]      // while-condition  =>  TRUE
[00:49:37.048]      // while "1"  (timeout="200")
[00:49:37.048]      // while-condition  =>  TRUE
[00:49:37.051]      // while "1"  (timeout="200")
[00:49:37.051]      // while-condition  =>  TRUE
[00:49:37.051]      // while "1"  (timeout="200")
[00:49:37.051]      // while-condition  =>  TRUE
[00:49:37.051]      // while "1"  (timeout="200")
[00:49:37.051]      // while-condition  =>  TRUE
[00:49:37.051]      // while "1"  (timeout="200")
[00:49:37.051]      // while-condition  =>  TRUE
[00:49:37.051]      // while "1"  (timeout="200")
[00:49:37.051]      // while-condition  =>  TRUE
[00:49:37.051]      // while "1"  (timeout="200")
[00:49:37.051]      // while-condition  =>  TRUE
[00:49:37.051]      // while "1"  (timeout="200")
[00:49:37.053]      // while-condition  =>  TRUE
[00:49:37.053]      // while "1"  (timeout="200")
[00:49:37.053]      // while-condition  =>  TRUE
[00:49:37.053]      // while "1"  (timeout="200")
[00:49:37.053]      // while-condition  =>  TRUE
[00:49:37.053]      // while "1"  (timeout="200")
[00:49:37.054]      // while-condition  =>  TRUE
[00:49:37.054]      // while "1"  (timeout="200")
[00:49:37.054]      // while-condition  =>  TRUE
[00:49:37.054]      // while "1"  (timeout="200")
[00:49:37.054]      // while-condition  =>  TRUE
[00:49:37.054]      // while "1"  (timeout="200")
[00:49:37.054]      // while-condition  =>  TRUE
[00:49:37.054]      // while "1"  (timeout="200")
[00:49:37.054]      // while-condition  =>  TRUE
[00:49:37.054]      // while "1"  (timeout="200")
[00:49:37.054]      // while-condition  =>  TRUE
[00:49:37.054]      // while "1"  (timeout="200")
[00:49:37.055]      // while-condition  =>  TRUE
[00:49:37.055]      // while "1"  (timeout="200")
[00:49:37.055]      // while-condition  =>  TRUE
[00:49:37.055]      // while "1"  (timeout="200")
[00:49:37.055]      // while-condition  =>  TRUE
[00:49:37.055]      // while "1"  (timeout="200")
[00:49:37.055]      // while-condition  =>  TRUE
[00:49:37.055]      // while "1"  (timeout="200")
[00:49:37.055]      // while-condition  =>  TRUE
[00:49:37.055]      // while "1"  (timeout="200")
[00:49:37.055]      // while-condition  =>  TRUE
[00:49:37.055]      // while "1"  (timeout="200")
[00:49:37.055]      // while-condition  =>  TRUE
[00:49:37.056]      // while "1"  (timeout="200")
[00:49:37.056]      // while-condition  =>  TRUE
[00:49:37.056]      // while "1"  (timeout="200")
[00:49:37.056]      // while-condition  =>  TRUE
[00:49:37.056]      // while "1"  (timeout="200")
[00:49:37.056]      // while-condition  =>  TRUE
[00:49:37.056]      // while "1"  (timeout="200")
[00:49:37.056]      // while-condition  =>  TRUE
[00:49:37.056]      // while "1"  (timeout="200")
[00:49:37.056]      // while-condition  =>  TRUE
[00:49:37.056]      // while "1"  (timeout="200")
[00:49:37.056]      // while-condition  =>  TRUE
[00:49:37.057]      // while "1"  (timeout="200")
[00:49:37.057]      // while-condition  =>  TRUE
[00:49:37.057]      // while "1"  (timeout="200")
[00:49:37.057]      // while-condition  =>  TRUE
[00:49:37.057]      // while "1"  (timeout="200")
[00:49:37.057]      // while-condition  =>  TRUE
[00:49:37.057]      // while "1"  (timeout="200")
[00:49:37.057]      // while-condition  =>  TRUE
[00:49:37.057]      // while "1"  (timeout="200")
[00:49:37.057]      // while-condition  =>  TRUE
[00:49:37.057]      // while "1"  (timeout="200")
[00:49:37.057]      // while-condition  =>  TRUE
[00:49:37.059]      // while "1"  (timeout="200")
[00:49:37.059]      // while-condition  =>  TRUE
[00:49:37.059]      // while "1"  (timeout="200")
[00:49:37.059]      // while-condition  =>  TRUE
[00:49:37.059]      // while "1"  (timeout="200")
[00:49:37.059]      // while-condition  =>  TRUE
[00:49:37.059]      // while "1"  (timeout="200")
[00:49:37.059]      // while-condition  =>  TRUE
[00:49:37.059]      // while "1"  (timeout="200")
[00:49:37.060]      // while-condition  =>  TRUE
[00:49:37.060]      // while "1"  (timeout="200")
[00:49:37.060]      // while-condition  =>  TRUE
[00:49:37.060]      // while "1"  (timeout="200")
[00:49:37.060]      // while-condition  =>  TRUE
[00:49:37.060]      // while "1"  (timeout="200")
[00:49:37.060]      // while-condition  =>  TRUE
[00:49:37.060]      // while "1"  (timeout="200")
[00:49:37.060]      // while-condition  =>  TRUE
[00:49:37.060]      // while "1"  (timeout="200")
[00:49:37.060]      // while-condition  =>  TRUE
[00:49:37.060]      // while "1"  (timeout="200")
[00:49:37.060]      // while-condition  =>  TRUE
[00:49:37.062]      // while "1"  (timeout="200")
[00:49:37.062]      // while-condition  =>  TRUE
[00:49:37.062]      // while "1"  (timeout="200")
[00:49:37.062]      // while-condition  =>  TRUE
[00:49:37.062]      // while "1"  (timeout="200")
[00:49:37.062]      // while-condition  =>  TRUE
[00:49:37.063]      // while "1"  (timeout="200")
[00:49:37.063]      // while  =>  TIMEOUT
[00:49:37.063]      // end while "1"
[00:49:37.063]    </control>
[00:49:37.063]    <control if="canReadPins" while="" timeout="0" info="">
[00:49:37.063]      // if-block "canReadPins"
[00:49:37.063]        // =>  TRUE
[00:49:37.064]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:49:37.064]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:49:37.064]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:49:37.064]        // while-condition  =>  FALSE
[00:49:37.064]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:49:37.064]      </control>
[00:49:37.064]      // end if-block "canReadPins"
[00:49:37.064]    </control>
[00:49:37.064]    <control if="!canReadPins" while="" timeout="0" info="">
[00:49:37.064]      // if-block "!canReadPins"
[00:49:37.064]        // =>  FALSE
[00:49:37.064]      // skip if-block "!canReadPins"
[00:49:37.064]    </control>
[00:49:37.064]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:49:37.064]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:49:37.064]        // =>  TRUE
[00:49:37.067]      <block atomic="false" info="">
[00:49:37.067]        WriteAP(0x00, 0x190008);
[00:49:37.067]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:49:37.067]        WriteAP(0xF0, 0x01);
[00:49:37.067]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:49:37.067]      </block>
[00:49:37.067]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:49:37.067]    </control>
[00:49:37.073]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:49:37.073]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:49:37.073]        // =>  FALSE
[00:49:37.073]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:49:37.073]    </control>
[00:49:37.073]    <block atomic="false" info="">
[00:49:37.073]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:49:37.074]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:49:37.074]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:49:37.074]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:49:37.079]      __ap = 0; //lets make sure we reset the access point selection
[00:49:37.079]        // -> [__ap <= 0x00000000]
[00:49:37.079]    </block>
[00:49:37.079]  </sequence>
[00:49:37.079]  
[00:49:37.095]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:49:37.095]  
[00:49:37.095]  <debugvars>
[00:49:37.095]    // Pre-defined
[00:49:37.095]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:49:37.103]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:49:37.103]    __dp=0x00000000
[00:49:37.103]    __ap=0x00000000
[00:49:37.103]    __traceout=0x00000000      (Trace Disabled)
[00:49:37.103]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:49:37.103]    __FlashAddr=0x00000000
[00:49:37.103]    __FlashLen=0x00000000
[00:49:37.103]    __FlashArg=0x00000000
[00:49:37.103]    __FlashOp=0x00000000
[00:49:37.103]    __Result=0x00000000
[00:49:37.103]  </debugvars>
[00:49:37.103]  
[00:49:37.103]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:49:37.103]    <block atomic="false" info="">
[00:49:37.103]      __var deviceID = 0;
[00:49:37.103]        // -> [deviceID <= 0x00000000]
[00:49:37.103]      __var version = 0;
[00:49:37.103]        // -> [version <= 0x00000000]
[00:49:37.103]      __var partNum = 0;
[00:49:37.103]        // -> [partNum <= 0x00000000]
[00:49:37.103]      __var manuf = 0;
[00:49:37.103]        // -> [manuf <= 0x00000000]
[00:49:37.103]      __var isMSPM0G1X0X_G3X0X = 0;
[00:49:37.103]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:49:37.103]      __var isProduction = 0;
[00:49:37.103]        // -> [isProduction <= 0x00000000]
[00:49:37.103]      __var continueId = 0;
[00:49:37.103]        // -> [continueId <= 0x00000000]
[00:49:37.103]      deviceID =   Read32(0x41C40004);
[00:49:37.103]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:49:37.103]        // -> [deviceID <= 0x2BB8802F]
[00:49:37.103]      version = deviceID >> 28;
[00:49:37.113]        // -> [version <= 0x00000002]
[00:49:37.113]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:49:37.113]        // -> [partNum <= 0x0000BB88]
[00:49:37.113]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:49:37.113]        // -> [manuf <= 0x00000017]
[00:49:37.113]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:49:37.113]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:49:37.113]      isProduction = (version > 0);
[00:49:37.113]        // -> [isProduction <= 0x00000001]
[00:49:37.113]    </block>
[00:49:37.113]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:49:37.113]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:49:37.113]        // =>  FALSE
[00:49:37.113]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:49:37.113]    </control>
[00:49:37.113]    <control if="continueId == 4" while="" timeout="0" info="">
[00:49:37.113]      // if-block "continueId == 4"
[00:49:37.113]        // =>  FALSE
[00:49:37.113]      // skip if-block "continueId == 4"
[00:49:37.113]    </control>
[00:49:37.113]    <control if="!isProduction" while="" timeout="0" info="">
[00:49:37.113]      // if-block "!isProduction"
[00:49:37.113]        // =>  FALSE
[00:49:37.113]      // skip if-block "!isProduction"
[00:49:37.113]    </control>
[00:49:37.113]  </sequence>
[00:49:37.113]  
[00:50:47.166]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:50:47.166]  
[00:50:47.176]  <debugvars>
[00:50:47.176]    // Pre-defined
[00:50:47.176]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:50:47.176]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:50:47.176]    __dp=0x00000000
[00:50:47.176]    __ap=0x00000000
[00:50:47.176]    __traceout=0x00000000      (Trace Disabled)
[00:50:47.176]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:50:47.176]    __FlashAddr=0x00000000
[00:50:47.177]    __FlashLen=0x00000000
[00:50:47.177]    __FlashArg=0x00000000
[00:50:47.177]    __FlashOp=0x00000000
[00:50:47.177]    __Result=0x00000000
[00:50:47.177]  </debugvars>
[00:50:47.177]  
[00:50:47.177]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:50:47.177]    <block atomic="false" info="">
[00:50:47.177]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:50:47.177]        // -> [isSWJ <= 0x00000001]
[00:50:47.178]      __var hasDormant = __protocol & 0x00020000;
[00:50:47.178]        // -> [hasDormant <= 0x00000000]
[00:50:47.178]      __var protType   = __protocol & 0x0000FFFF;
[00:50:47.178]        // -> [protType <= 0x00000002]
[00:50:47.178]    </block>
[00:50:47.179]    <control if="protType == 1" while="" timeout="0" info="">
[00:50:47.179]      // if-block "protType == 1"
[00:50:47.179]        // =>  FALSE
[00:50:47.179]      // skip if-block "protType == 1"
[00:50:47.179]    </control>
[00:50:47.179]    <control if="protType == 2" while="" timeout="0" info="">
[00:50:47.179]      // if-block "protType == 2"
[00:50:47.179]        // =>  TRUE
[00:50:47.179]      <control if="isSWJ" while="" timeout="0" info="">
[00:50:47.180]        // if-block "isSWJ"
[00:50:47.180]          // =>  TRUE
[00:50:47.180]        <control if="hasDormant" while="" timeout="0" info="">
[00:50:47.180]          // if-block "hasDormant"
[00:50:47.180]            // =>  FALSE
[00:50:47.180]          // skip if-block "hasDormant"
[00:50:47.180]        </control>
[00:50:47.180]        <control if="!hasDormant" while="" timeout="0" info="">
[00:50:47.180]          // if-block "!hasDormant"
[00:50:47.180]            // =>  TRUE
[00:50:47.181]          <block atomic="false" info="">
[00:50:47.181]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:50:47.182]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:50:47.182]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:50:47.183]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:50:47.184]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:50:47.185]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:50:47.185]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:50:47.186]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:50:47.186]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:50:47.188]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:50:47.188]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:50:47.190]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:50:47.190]          </block>
[00:50:47.190]          // end if-block "!hasDormant"
[00:50:47.190]        </control>
[00:50:47.190]        // end if-block "isSWJ"
[00:50:47.190]      </control>
[00:50:47.191]      <control if="!isSWJ" while="" timeout="0" info="">
[00:50:47.191]        // if-block "!isSWJ"
[00:50:47.191]          // =>  FALSE
[00:50:47.191]        // skip if-block "!isSWJ"
[00:50:47.191]      </control>
[00:50:47.191]      <block atomic="false" info="">
[00:50:47.191]        ReadDP(0x0);
[00:50:47.193]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:50:47.193]      </block>
[00:50:47.193]      // end if-block "protType == 2"
[00:50:47.193]    </control>
[00:50:47.193]  </sequence>
[00:50:47.194]  
[00:50:47.196]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:50:47.196]  
[00:50:47.196]  <debugvars>
[00:50:47.196]    // Pre-defined
[00:50:47.196]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:50:47.196]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:50:47.196]    __dp=0x00000000
[00:50:47.196]    __ap=0x00000000
[00:50:47.196]    __traceout=0x00000000      (Trace Disabled)
[00:50:47.196]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:50:47.196]    __FlashAddr=0x00000000
[00:50:47.196]    __FlashLen=0x00000000
[00:50:47.197]    __FlashArg=0x00000000
[00:50:47.197]    __FlashOp=0x00000000
[00:50:47.197]    __Result=0x00000000
[00:50:47.197]  </debugvars>
[00:50:47.197]  
[00:50:47.197]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:50:47.197]    <block atomic="false" info="">
[00:50:47.197]      __var SW_DP_ABORT       = 0x0;
[00:50:47.197]        // -> [SW_DP_ABORT <= 0x00000000]
[00:50:47.198]      __var DP_CTRL_STAT      = 0x4;
[00:50:47.198]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:50:47.198]      __var DP_SELECT         = 0x8;
[00:50:47.198]        // -> [DP_SELECT <= 0x00000008]
[00:50:47.198]      __var powered_down      = 0;
[00:50:47.198]        // -> [powered_down <= 0x00000000]
[00:50:47.198]      WriteDP(DP_SELECT, 0x00000000);
[00:50:47.202]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:50:47.202]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:50:47.204]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:50:47.204]        // -> [powered_down <= 0x00000001]
[00:50:47.204]    </block>
[00:50:47.204]    <control if="powered_down" while="" timeout="0" info="">
[00:50:47.204]      // if-block "powered_down"
[00:50:47.204]        // =>  TRUE
[00:50:47.204]      <block atomic="false" info="">
[00:50:47.204]        Message(0, "Debug/System power-up request sent");
[00:50:47.208]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:50:47.210]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:50:47.210]      </block>
[00:50:47.211]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:50:47.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:50:47.211]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:50:47.212]        // while-condition  =>  FALSE
[00:50:47.212]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:50:47.212]      </control>
[00:50:47.212]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:50:47.212]        // if-block "(__protocol & 0xFFFF) == 1"
[00:50:47.212]          // =>  FALSE
[00:50:47.212]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:50:47.212]      </control>
[00:50:47.212]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:50:47.213]        // if-block "(__protocol & 0xFFFF) == 2"
[00:50:47.213]          // =>  TRUE
[00:50:47.213]        <block atomic="false" info="">
[00:50:47.213]          Message(0, "executing SWD power up");
[00:50:47.213]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:50:47.213]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:50:47.213]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:50:47.213]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:50:47.213]        </block>
[00:50:47.213]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:50:47.213]      </control>
[00:50:47.213]      // end if-block "powered_down"
[00:50:47.213]    </control>
[00:50:47.213]    <block atomic="false" info="">
[00:50:47.213]      __var DEBUG_PORT_VAL    = 0;
[00:50:47.213]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:50:47.213]      __var ACCESS_POINT_VAL  = 0;
[00:50:47.220]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:50:47.220]      __ap = 1; 
[00:50:47.220]        // -> [__ap <= 0x00000001]
[00:50:47.220]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:50:47.223]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:50:47.223]      __ap = 4;
[00:50:47.223]        // -> [__ap <= 0x00000004]
[00:50:47.223]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:50:47.225]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:50:47.225]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:50:47.225]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:50:47.229]    </block>
[00:50:47.229]    <block atomic="false" info="">
[00:50:47.229]      __var nReset = 0x80;
[00:50:47.229]        // -> [nReset <= 0x00000080]
[00:50:47.229]      __var canReadPins = 0;
[00:50:47.229]        // -> [canReadPins <= 0x00000000]
[00:50:47.229]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:50:47.229]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:50:47.232]        // -> [canReadPins <= 0x00000001]
[00:50:47.232]    </block>
[00:50:47.232]    <control if="" while="1" timeout="200" info="">
[00:50:47.232]      // while "1"  (timeout="200")
[00:50:47.232]      // while-condition  =>  TRUE
[00:50:47.232]      // while "1"  (timeout="200")
[00:50:47.232]      // while-condition  =>  TRUE
[00:50:47.232]      // while "1"  (timeout="200")
[00:50:47.232]      // while-condition  =>  TRUE
[00:50:47.232]      // while "1"  (timeout="200")
[00:50:47.232]      // while-condition  =>  TRUE
[00:50:47.233]      // while "1"  (timeout="200")
[00:50:47.233]      // while-condition  =>  TRUE
[00:50:47.233]      // while "1"  (timeout="200")
[00:50:47.233]      // while-condition  =>  TRUE
[00:50:47.233]      // while "1"  (timeout="200")
[00:50:47.233]      // while-condition  =>  TRUE
[00:50:47.233]      // while "1"  (timeout="200")
[00:50:47.233]      // while-condition  =>  TRUE
[00:50:47.233]      // while "1"  (timeout="200")
[00:50:47.233]      // while-condition  =>  TRUE
[00:50:47.233]      // while "1"  (timeout="200")
[00:50:47.233]      // while-condition  =>  TRUE
[00:50:47.233]      // while "1"  (timeout="200")
[00:50:47.233]      // while-condition  =>  TRUE
[00:50:47.233]      // while "1"  (timeout="200")
[00:50:47.233]      // while-condition  =>  TRUE
[00:50:47.233]      // while "1"  (timeout="200")
[00:50:47.233]      // while-condition  =>  TRUE
[00:50:47.233]      // while "1"  (timeout="200")
[00:50:47.233]      // while-condition  =>  TRUE
[00:50:47.233]      // while "1"  (timeout="200")
[00:50:47.233]      // while-condition  =>  TRUE
[00:50:47.233]      // while "1"  (timeout="200")
[00:50:47.233]      // while-condition  =>  TRUE
[00:50:47.233]      // while "1"  (timeout="200")
[00:50:47.237]      // while-condition  =>  TRUE
[00:50:47.237]      // while "1"  (timeout="200")
[00:50:47.237]      // while  =>  TIMEOUT
[00:50:47.237]      // end while "1"
[00:50:47.237]    </control>
[00:50:47.237]    <control if="canReadPins" while="" timeout="0" info="">
[00:50:47.237]      // if-block "canReadPins"
[00:50:47.237]        // =>  TRUE
[00:50:47.237]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:50:47.237]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:50:47.239]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:50:47.239]        // while-condition  =>  FALSE
[00:50:47.239]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:50:47.239]      </control>
[00:50:47.239]      // end if-block "canReadPins"
[00:50:47.240]    </control>
[00:50:47.240]    <control if="!canReadPins" while="" timeout="0" info="">
[00:50:47.240]      // if-block "!canReadPins"
[00:50:47.240]        // =>  FALSE
[00:50:47.240]      // skip if-block "!canReadPins"
[00:50:47.240]    </control>
[00:50:47.240]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:50:47.240]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:50:47.240]        // =>  TRUE
[00:50:47.240]      <block atomic="false" info="">
[00:50:47.240]        WriteAP(0x00, 0x190008);
[00:50:47.242]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:50:47.242]        WriteAP(0xF0, 0x01);
[00:50:47.245]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:50:47.245]      </block>
[00:50:47.245]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:50:47.245]    </control>
[00:50:47.245]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:50:47.245]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:50:47.245]        // =>  FALSE
[00:50:47.245]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:50:47.245]    </control>
[00:50:47.245]    <block atomic="false" info="">
[00:50:47.245]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:50:47.245]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:50:47.245]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:50:47.245]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:50:47.245]      __ap = 0; //lets make sure we reset the access point selection
[00:50:47.245]        // -> [__ap <= 0x00000000]
[00:50:47.245]    </block>
[00:50:47.245]  </sequence>
[00:50:47.245]  
[00:50:47.264]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:50:47.264]  
[00:50:47.264]  <debugvars>
[00:50:47.264]    // Pre-defined
[00:50:47.264]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:50:47.264]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:50:47.264]    __dp=0x00000000
[00:50:47.264]    __ap=0x00000000
[00:50:47.264]    __traceout=0x00000000      (Trace Disabled)
[00:50:47.264]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:50:47.264]    __FlashAddr=0x00000000
[00:50:47.264]    __FlashLen=0x00000000
[00:50:47.264]    __FlashArg=0x00000000
[00:50:47.264]    __FlashOp=0x00000000
[00:50:47.264]    __Result=0x00000000
[00:50:47.264]  </debugvars>
[00:50:47.264]  
[00:50:47.264]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:50:47.274]    <block atomic="false" info="">
[00:50:47.274]      __var deviceID = 0;
[00:50:47.274]        // -> [deviceID <= 0x00000000]
[00:50:47.274]      __var version = 0;
[00:50:47.274]        // -> [version <= 0x00000000]
[00:50:47.274]      __var partNum = 0;
[00:50:47.274]        // -> [partNum <= 0x00000000]
[00:50:47.274]      __var manuf = 0;
[00:50:47.274]        // -> [manuf <= 0x00000000]
[00:50:47.274]      __var isMSPM0G1X0X_G3X0X = 0;
[00:50:47.274]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:50:47.274]      __var isProduction = 0;
[00:50:47.274]        // -> [isProduction <= 0x00000000]
[00:50:47.274]      __var continueId = 0;
[00:50:47.274]        // -> [continueId <= 0x00000000]
[00:50:47.274]      deviceID =   Read32(0x41C40004);
[00:50:47.274]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:50:47.274]        // -> [deviceID <= 0x2BB8802F]
[00:50:47.274]      version = deviceID >> 28;
[00:50:47.274]        // -> [version <= 0x00000002]
[00:50:47.274]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:50:47.274]        // -> [partNum <= 0x0000BB88]
[00:50:47.274]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:50:47.274]        // -> [manuf <= 0x00000017]
[00:50:47.274]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:50:47.274]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:50:47.274]      isProduction = (version > 0);
[00:50:47.274]        // -> [isProduction <= 0x00000001]
[00:50:47.274]    </block>
[00:50:47.274]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:50:47.274]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:50:47.274]        // =>  FALSE
[00:50:47.274]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:50:47.274]    </control>
[00:50:47.274]    <control if="continueId == 4" while="" timeout="0" info="">
[00:50:47.274]      // if-block "continueId == 4"
[00:50:47.274]        // =>  FALSE
[00:50:47.274]      // skip if-block "continueId == 4"
[00:50:47.274]    </control>
[00:50:47.274]    <control if="!isProduction" while="" timeout="0" info="">
[00:50:47.274]      // if-block "!isProduction"
[00:50:47.274]        // =>  FALSE
[00:50:47.274]      // skip if-block "!isProduction"
[00:50:47.274]    </control>
[00:50:47.274]  </sequence>
[00:50:47.274]  
[00:51:45.420]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:51:45.420]  
[00:51:45.420]  <debugvars>
[00:51:45.420]    // Pre-defined
[00:51:45.420]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:51:45.420]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:51:45.420]    __dp=0x00000000
[00:51:45.420]    __ap=0x00000000
[00:51:45.420]    __traceout=0x00000000      (Trace Disabled)
[00:51:45.420]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:51:45.420]    __FlashAddr=0x00000000
[00:51:45.420]    __FlashLen=0x00000000
[00:51:45.420]    __FlashArg=0x00000000
[00:51:45.420]    __FlashOp=0x00000000
[00:51:45.420]    __Result=0x00000000
[00:51:45.420]  </debugvars>
[00:51:45.420]  
[00:51:45.420]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:51:45.420]    <block atomic="false" info="">
[00:51:45.420]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:51:45.420]        // -> [isSWJ <= 0x00000001]
[00:51:45.420]      __var hasDormant = __protocol & 0x00020000;
[00:51:45.420]        // -> [hasDormant <= 0x00000000]
[00:51:45.420]      __var protType   = __protocol & 0x0000FFFF;
[00:51:45.420]        // -> [protType <= 0x00000002]
[00:51:45.420]    </block>
[00:51:45.420]    <control if="protType == 1" while="" timeout="0" info="">
[00:51:45.420]      // if-block "protType == 1"
[00:51:45.420]        // =>  FALSE
[00:51:45.420]      // skip if-block "protType == 1"
[00:51:45.420]    </control>
[00:51:45.420]    <control if="protType == 2" while="" timeout="0" info="">
[00:51:45.420]      // if-block "protType == 2"
[00:51:45.420]        // =>  TRUE
[00:51:45.420]      <control if="isSWJ" while="" timeout="0" info="">
[00:51:45.420]        // if-block "isSWJ"
[00:51:45.420]          // =>  TRUE
[00:51:45.420]        <control if="hasDormant" while="" timeout="0" info="">
[00:51:45.420]          // if-block "hasDormant"
[00:51:45.420]            // =>  FALSE
[00:51:45.420]          // skip if-block "hasDormant"
[00:51:45.420]        </control>
[00:51:45.420]        <control if="!hasDormant" while="" timeout="0" info="">
[00:51:45.420]          // if-block "!hasDormant"
[00:51:45.420]            // =>  TRUE
[00:51:45.420]          <block atomic="false" info="">
[00:51:45.420]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:51:45.431]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:51:45.431]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:51:45.431]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:51:45.431]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:51:45.431]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:51:45.431]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:51:45.431]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:51:45.431]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:51:45.437]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:51:45.437]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:51:45.437]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:51:45.437]          </block>
[00:51:45.437]          // end if-block "!hasDormant"
[00:51:45.437]        </control>
[00:51:45.437]        // end if-block "isSWJ"
[00:51:45.437]      </control>
[00:51:45.437]      <control if="!isSWJ" while="" timeout="0" info="">
[00:51:45.439]        // if-block "!isSWJ"
[00:51:45.439]          // =>  FALSE
[00:51:45.439]        // skip if-block "!isSWJ"
[00:51:45.439]      </control>
[00:51:45.439]      <block atomic="false" info="">
[00:51:45.439]        ReadDP(0x0);
[00:51:45.441]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:51:45.441]      </block>
[00:51:45.441]      // end if-block "protType == 2"
[00:51:45.441]    </control>
[00:51:45.441]  </sequence>
[00:51:45.441]  
[00:51:45.444]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:51:45.444]  
[00:51:45.444]  <debugvars>
[00:51:45.444]    // Pre-defined
[00:51:45.444]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:51:45.444]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:51:45.444]    __dp=0x00000000
[00:51:45.444]    __ap=0x00000000
[00:51:45.444]    __traceout=0x00000000      (Trace Disabled)
[00:51:45.444]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:51:45.444]    __FlashAddr=0x00000000
[00:51:45.444]    __FlashLen=0x00000000
[00:51:45.444]    __FlashArg=0x00000000
[00:51:45.444]    __FlashOp=0x00000000
[00:51:45.444]    __Result=0x00000000
[00:51:45.444]  </debugvars>
[00:51:45.444]  
[00:51:45.444]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:51:45.444]    <block atomic="false" info="">
[00:51:45.444]      __var SW_DP_ABORT       = 0x0;
[00:51:45.444]        // -> [SW_DP_ABORT <= 0x00000000]
[00:51:45.444]      __var DP_CTRL_STAT      = 0x4;
[00:51:45.444]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:51:45.444]      __var DP_SELECT         = 0x8;
[00:51:45.444]        // -> [DP_SELECT <= 0x00000008]
[00:51:45.446]      __var powered_down      = 0;
[00:51:45.446]        // -> [powered_down <= 0x00000000]
[00:51:45.446]      WriteDP(DP_SELECT, 0x00000000);
[00:51:45.446]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:51:45.446]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:51:45.449]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:51:45.449]        // -> [powered_down <= 0x00000001]
[00:51:45.449]    </block>
[00:51:45.449]    <control if="powered_down" while="" timeout="0" info="">
[00:51:45.449]      // if-block "powered_down"
[00:51:45.449]        // =>  TRUE
[00:51:45.449]      <block atomic="false" info="">
[00:51:45.449]        Message(0, "Debug/System power-up request sent");
[00:51:45.453]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:51:45.455]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:51:45.455]      </block>
[00:51:45.455]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:51:45.455]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:51:45.456]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:51:45.456]        // while-condition  =>  FALSE
[00:51:45.456]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:51:45.456]      </control>
[00:51:45.456]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:51:45.456]        // if-block "(__protocol & 0xFFFF) == 1"
[00:51:45.456]          // =>  FALSE
[00:51:45.456]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:51:45.456]      </control>
[00:51:45.456]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:51:45.456]        // if-block "(__protocol & 0xFFFF) == 2"
[00:51:45.456]          // =>  TRUE
[00:51:45.456]        <block atomic="false" info="">
[00:51:45.456]          Message(0, "executing SWD power up");
[00:51:45.459]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:51:45.461]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:51:45.461]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:51:45.461]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:51:45.461]        </block>
[00:51:45.461]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:51:45.461]      </control>
[00:51:45.461]      // end if-block "powered_down"
[00:51:45.461]    </control>
[00:51:45.461]    <block atomic="false" info="">
[00:51:45.461]      __var DEBUG_PORT_VAL    = 0;
[00:51:45.461]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:51:45.461]      __var ACCESS_POINT_VAL  = 0;
[00:51:45.461]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:51:45.461]      __ap = 1; 
[00:51:45.461]        // -> [__ap <= 0x00000001]
[00:51:45.461]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:51:45.461]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:51:45.461]      __ap = 4;
[00:51:45.461]        // -> [__ap <= 0x00000004]
[00:51:45.461]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:51:45.470]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:51:45.470]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:51:45.470]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:51:45.470]    </block>
[00:51:45.470]    <block atomic="false" info="">
[00:51:45.470]      __var nReset = 0x80;
[00:51:45.470]        // -> [nReset <= 0x00000080]
[00:51:45.470]      __var canReadPins = 0;
[00:51:45.470]        // -> [canReadPins <= 0x00000000]
[00:51:45.470]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:51:45.470]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:51:45.470]        // -> [canReadPins <= 0x00000001]
[00:51:45.470]    </block>
[00:51:45.470]    <control if="" while="1" timeout="200" info="">
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.470]      // while "1"  (timeout="200")
[00:51:45.470]      // while-condition  =>  TRUE
[00:51:45.480]      // while "1"  (timeout="200")
[00:51:45.480]      // while-condition  =>  TRUE
[00:51:45.480]      // while "1"  (timeout="200")
[00:51:45.480]      // while-condition  =>  TRUE
[00:51:45.480]      // while "1"  (timeout="200")
[00:51:45.480]      // while-condition  =>  TRUE
[00:51:45.480]      // while "1"  (timeout="200")
[00:51:45.480]      // while-condition  =>  TRUE
[00:51:45.480]      // while "1"  (timeout="200")
[00:51:45.480]      // while-condition  =>  TRUE
[00:51:45.480]      // while "1"  (timeout="200")
[00:51:45.480]      // while-condition  =>  TRUE
[00:51:45.480]      // while "1"  (timeout="200")
[00:51:45.480]      // while-condition  =>  TRUE
[00:51:45.480]      // while "1"  (timeout="200")
[00:51:45.480]      // while-condition  =>  TRUE
[00:51:45.480]      // while "1"  (timeout="200")
[00:51:45.480]      // while-condition  =>  TRUE
[00:51:45.480]      // while "1"  (timeout="200")
[00:51:45.480]      // while-condition  =>  TRUE
[00:51:45.480]      // while "1"  (timeout="200")
[00:51:45.480]      // while-condition  =>  TRUE
[00:51:45.480]      // while "1"  (timeout="200")
[00:51:45.480]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.483]      // while-condition  =>  TRUE
[00:51:45.483]      // while "1"  (timeout="200")
[00:51:45.490]      // while-condition  =>  TRUE
[00:51:45.490]      // while "1"  (timeout="200")
[00:51:45.490]      // while  =>  TIMEOUT
[00:51:45.490]      // end while "1"
[00:51:45.490]    </control>
[00:51:45.490]    <control if="canReadPins" while="" timeout="0" info="">
[00:51:45.490]      // if-block "canReadPins"
[00:51:45.490]        // =>  TRUE
[00:51:45.490]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:51:45.490]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:51:45.490]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:51:45.490]        // while-condition  =>  FALSE
[00:51:45.490]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:51:45.490]      </control>
[00:51:45.490]      // end if-block "canReadPins"
[00:51:45.490]    </control>
[00:51:45.490]    <control if="!canReadPins" while="" timeout="0" info="">
[00:51:45.490]      // if-block "!canReadPins"
[00:51:45.490]        // =>  FALSE
[00:51:45.490]      // skip if-block "!canReadPins"
[00:51:45.490]    </control>
[00:51:45.490]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:51:45.490]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:51:45.490]        // =>  TRUE
[00:51:45.490]      <block atomic="false" info="">
[00:51:45.490]        WriteAP(0x00, 0x190008);
[00:51:45.490]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:51:45.490]        WriteAP(0xF0, 0x01);
[00:51:45.490]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:51:45.490]      </block>
[00:51:45.490]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:51:45.500]    </control>
[00:51:45.500]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:51:45.500]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:51:45.500]        // =>  FALSE
[00:51:45.500]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:51:45.500]    </control>
[00:51:45.500]    <block atomic="false" info="">
[00:51:45.500]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:51:45.502]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:51:45.502]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:51:45.502]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:51:45.502]      __ap = 0; //lets make sure we reset the access point selection
[00:51:45.502]        // -> [__ap <= 0x00000000]
[00:51:45.502]    </block>
[00:51:45.502]  </sequence>
[00:51:45.502]  
[00:51:45.522]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:51:45.522]  
[00:51:45.522]  <debugvars>
[00:51:45.522]    // Pre-defined
[00:51:45.522]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:51:45.522]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:51:45.522]    __dp=0x00000000
[00:51:45.522]    __ap=0x00000000
[00:51:45.522]    __traceout=0x00000000      (Trace Disabled)
[00:51:45.531]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:51:45.531]    __FlashAddr=0x00000000
[00:51:45.531]    __FlashLen=0x00000000
[00:51:45.531]    __FlashArg=0x00000000
[00:51:45.531]    __FlashOp=0x00000000
[00:51:45.531]    __Result=0x00000000
[00:51:45.531]  </debugvars>
[00:51:45.531]  
[00:51:45.531]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:51:45.531]    <block atomic="false" info="">
[00:51:45.531]      __var deviceID = 0;
[00:51:45.531]        // -> [deviceID <= 0x00000000]
[00:51:45.531]      __var version = 0;
[00:51:45.531]        // -> [version <= 0x00000000]
[00:51:45.531]      __var partNum = 0;
[00:51:45.531]        // -> [partNum <= 0x00000000]
[00:51:45.531]      __var manuf = 0;
[00:51:45.531]        // -> [manuf <= 0x00000000]
[00:51:45.531]      __var isMSPM0G1X0X_G3X0X = 0;
[00:51:45.531]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:51:45.531]      __var isProduction = 0;
[00:51:45.531]        // -> [isProduction <= 0x00000000]
[00:51:45.531]      __var continueId = 0;
[00:51:45.531]        // -> [continueId <= 0x00000000]
[00:51:45.531]      deviceID =   Read32(0x41C40004);
[00:51:45.537]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:51:45.537]        // -> [deviceID <= 0x2BB8802F]
[00:51:45.537]      version = deviceID >> 28;
[00:51:45.537]        // -> [version <= 0x00000002]
[00:51:45.537]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:51:45.537]        // -> [partNum <= 0x0000BB88]
[00:51:45.537]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:51:45.537]        // -> [manuf <= 0x00000017]
[00:51:45.537]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:51:45.537]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:51:45.537]      isProduction = (version > 0);
[00:51:45.537]        // -> [isProduction <= 0x00000001]
[00:51:45.537]    </block>
[00:51:45.541]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:51:45.541]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:51:45.541]        // =>  FALSE
[00:51:45.541]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:51:45.541]    </control>
[00:51:45.541]    <control if="continueId == 4" while="" timeout="0" info="">
[00:51:45.541]      // if-block "continueId == 4"
[00:51:45.541]        // =>  FALSE
[00:51:45.541]      // skip if-block "continueId == 4"
[00:51:45.541]    </control>
[00:51:45.541]    <control if="!isProduction" while="" timeout="0" info="">
[00:51:45.541]      // if-block "!isProduction"
[00:51:45.541]        // =>  FALSE
[00:51:45.541]      // skip if-block "!isProduction"
[00:51:45.541]    </control>
[00:51:45.541]  </sequence>
[00:51:45.541]  
[00:52:20.839]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:52:20.839]  
[00:52:20.839]  <debugvars>
[00:52:20.839]    // Pre-defined
[00:52:20.839]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:52:20.839]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:52:20.839]    __dp=0x00000000
[00:52:20.839]    __ap=0x00000000
[00:52:20.839]    __traceout=0x00000000      (Trace Disabled)
[00:52:20.839]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:52:20.839]    __FlashAddr=0x00000000
[00:52:20.839]    __FlashLen=0x00000000
[00:52:20.839]    __FlashArg=0x00000000
[00:52:20.839]    __FlashOp=0x00000000
[00:52:20.839]    __Result=0x00000000
[00:52:20.839]  </debugvars>
[00:52:20.839]  
[00:52:20.839]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:52:20.839]    <block atomic="false" info="">
[00:52:20.839]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:52:20.839]        // -> [isSWJ <= 0x00000001]
[00:52:20.839]      __var hasDormant = __protocol & 0x00020000;
[00:52:20.839]        // -> [hasDormant <= 0x00000000]
[00:52:20.839]      __var protType   = __protocol & 0x0000FFFF;
[00:52:20.839]        // -> [protType <= 0x00000002]
[00:52:20.839]    </block>
[00:52:20.839]    <control if="protType == 1" while="" timeout="0" info="">
[00:52:20.839]      // if-block "protType == 1"
[00:52:20.839]        // =>  FALSE
[00:52:20.839]      // skip if-block "protType == 1"
[00:52:20.839]    </control>
[00:52:20.839]    <control if="protType == 2" while="" timeout="0" info="">
[00:52:20.839]      // if-block "protType == 2"
[00:52:20.839]        // =>  TRUE
[00:52:20.839]      <control if="isSWJ" while="" timeout="0" info="">
[00:52:20.839]        // if-block "isSWJ"
[00:52:20.839]          // =>  TRUE
[00:52:20.839]        <control if="hasDormant" while="" timeout="0" info="">
[00:52:20.839]          // if-block "hasDormant"
[00:52:20.839]            // =>  FALSE
[00:52:20.839]          // skip if-block "hasDormant"
[00:52:20.839]        </control>
[00:52:20.839]        <control if="!hasDormant" while="" timeout="0" info="">
[00:52:20.839]          // if-block "!hasDormant"
[00:52:20.839]            // =>  TRUE
[00:52:20.839]          <block atomic="false" info="">
[00:52:20.839]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:52:20.848]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:52:20.848]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:52:20.850]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:52:20.850]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:52:20.851]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:52:20.851]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:52:20.853]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:52:20.853]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:52:20.854]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:52:20.854]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:52:20.856]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:52:20.856]          </block>
[00:52:20.856]          // end if-block "!hasDormant"
[00:52:20.856]        </control>
[00:52:20.856]        // end if-block "isSWJ"
[00:52:20.856]      </control>
[00:52:20.856]      <control if="!isSWJ" while="" timeout="0" info="">
[00:52:20.856]        // if-block "!isSWJ"
[00:52:20.856]          // =>  FALSE
[00:52:20.856]        // skip if-block "!isSWJ"
[00:52:20.856]      </control>
[00:52:20.856]      <block atomic="false" info="">
[00:52:20.856]        ReadDP(0x0);
[00:52:20.858]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:52:20.858]      </block>
[00:52:20.858]      // end if-block "protType == 2"
[00:52:20.858]    </control>
[00:52:20.858]  </sequence>
[00:52:20.858]  
[00:52:20.861]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:52:20.861]  
[00:52:20.861]  <debugvars>
[00:52:20.861]    // Pre-defined
[00:52:20.861]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:52:20.861]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:52:20.861]    __dp=0x00000000
[00:52:20.861]    __ap=0x00000000
[00:52:20.863]    __traceout=0x00000000      (Trace Disabled)
[00:52:20.863]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:52:20.863]    __FlashAddr=0x00000000
[00:52:20.863]    __FlashLen=0x00000000
[00:52:20.863]    __FlashArg=0x00000000
[00:52:20.863]    __FlashOp=0x00000000
[00:52:20.863]    __Result=0x00000000
[00:52:20.863]  </debugvars>
[00:52:20.863]  
[00:52:20.863]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:52:20.863]    <block atomic="false" info="">
[00:52:20.863]      __var SW_DP_ABORT       = 0x0;
[00:52:20.863]        // -> [SW_DP_ABORT <= 0x00000000]
[00:52:20.864]      __var DP_CTRL_STAT      = 0x4;
[00:52:20.864]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:52:20.864]      __var DP_SELECT         = 0x8;
[00:52:20.864]        // -> [DP_SELECT <= 0x00000008]
[00:52:20.864]      __var powered_down      = 0;
[00:52:20.864]        // -> [powered_down <= 0x00000000]
[00:52:20.864]      WriteDP(DP_SELECT, 0x00000000);
[00:52:20.866]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:52:20.866]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:52:20.867]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:52:20.867]        // -> [powered_down <= 0x00000001]
[00:52:20.867]    </block>
[00:52:20.867]    <control if="powered_down" while="" timeout="0" info="">
[00:52:20.867]      // if-block "powered_down"
[00:52:20.867]        // =>  TRUE
[00:52:20.867]      <block atomic="false" info="">
[00:52:20.869]        Message(0, "Debug/System power-up request sent");
[00:52:20.871]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:52:20.873]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:52:20.873]      </block>
[00:52:20.873]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:52:20.873]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:52:20.875]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:52:20.875]        // while-condition  =>  FALSE
[00:52:20.875]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:52:20.875]      </control>
[00:52:20.875]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:52:20.875]        // if-block "(__protocol & 0xFFFF) == 1"
[00:52:20.875]          // =>  FALSE
[00:52:20.875]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:52:20.875]      </control>
[00:52:20.875]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:52:20.875]        // if-block "(__protocol & 0xFFFF) == 2"
[00:52:20.875]          // =>  TRUE
[00:52:20.875]        <block atomic="false" info="">
[00:52:20.875]          Message(0, "executing SWD power up");
[00:52:20.878]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:52:20.879]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:52:20.879]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:52:20.881]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:52:20.881]        </block>
[00:52:20.881]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:52:20.882]      </control>
[00:52:20.882]      // end if-block "powered_down"
[00:52:20.882]    </control>
[00:52:20.882]    <block atomic="false" info="">
[00:52:20.882]      __var DEBUG_PORT_VAL    = 0;
[00:52:20.882]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:52:20.882]      __var ACCESS_POINT_VAL  = 0;
[00:52:20.882]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:52:20.882]      __ap = 1; 
[00:52:20.882]        // -> [__ap <= 0x00000001]
[00:52:20.882]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:52:20.885]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:52:20.885]      __ap = 4;
[00:52:20.885]        // -> [__ap <= 0x00000004]
[00:52:20.886]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:52:20.889]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:52:20.889]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:52:20.890]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:52:20.891]    </block>
[00:52:20.891]    <block atomic="false" info="">
[00:52:20.891]      __var nReset = 0x80;
[00:52:20.891]        // -> [nReset <= 0x00000080]
[00:52:20.891]      __var canReadPins = 0;
[00:52:20.891]        // -> [canReadPins <= 0x00000000]
[00:52:20.891]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:52:20.893]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:52:20.893]        // -> [canReadPins <= 0x00000001]
[00:52:20.893]    </block>
[00:52:20.893]    <control if="" while="1" timeout="200" info="">
[00:52:20.893]      // while "1"  (timeout="200")
[00:52:20.893]      // while-condition  =>  TRUE
[00:52:20.893]      // while "1"  (timeout="200")
[00:52:20.893]      // while-condition  =>  TRUE
[00:52:20.893]      // while "1"  (timeout="200")
[00:52:20.894]      // while-condition  =>  TRUE
[00:52:20.894]      // while "1"  (timeout="200")
[00:52:20.894]      // while-condition  =>  TRUE
[00:52:20.894]      // while "1"  (timeout="200")
[00:52:20.894]      // while-condition  =>  TRUE
[00:52:20.894]      // while "1"  (timeout="200")
[00:52:20.894]      // while-condition  =>  TRUE
[00:52:20.894]      // while "1"  (timeout="200")
[00:52:20.894]      // while-condition  =>  TRUE
[00:52:20.894]      // while "1"  (timeout="200")
[00:52:20.894]      // while-condition  =>  TRUE
[00:52:20.895]      // while "1"  (timeout="200")
[00:52:20.895]      // while-condition  =>  TRUE
[00:52:20.895]      // while "1"  (timeout="200")
[00:52:20.895]      // while-condition  =>  TRUE
[00:52:20.895]      // while "1"  (timeout="200")
[00:52:20.895]      // while-condition  =>  TRUE
[00:52:20.895]      // while "1"  (timeout="200")
[00:52:20.897]      // while-condition  =>  TRUE
[00:52:20.897]      // while "1"  (timeout="200")
[00:52:20.897]      // while-condition  =>  TRUE
[00:52:20.897]      // while "1"  (timeout="200")
[00:52:20.897]      // while-condition  =>  TRUE
[00:52:20.897]      // while "1"  (timeout="200")
[00:52:20.897]      // while-condition  =>  TRUE
[00:52:20.897]      // while "1"  (timeout="200")
[00:52:20.897]      // while-condition  =>  TRUE
[00:52:20.897]      // while "1"  (timeout="200")
[00:52:20.898]      // while-condition  =>  TRUE
[00:52:20.898]      // while "1"  (timeout="200")
[00:52:20.898]      // while-condition  =>  TRUE
[00:52:20.898]      // while "1"  (timeout="200")
[00:52:20.898]      // while-condition  =>  TRUE
[00:52:20.898]      // while "1"  (timeout="200")
[00:52:20.898]      // while-condition  =>  TRUE
[00:52:20.898]      // while "1"  (timeout="200")
[00:52:20.898]      // while-condition  =>  TRUE
[00:52:20.898]      // while "1"  (timeout="200")
[00:52:20.898]      // while-condition  =>  TRUE
[00:52:20.898]      // while "1"  (timeout="200")
[00:52:20.898]      // while-condition  =>  TRUE
[00:52:20.898]      // while "1"  (timeout="200")
[00:52:20.898]      // while-condition  =>  TRUE
[00:52:20.898]      // while "1"  (timeout="200")
[00:52:20.899]      // while-condition  =>  TRUE
[00:52:20.899]      // while "1"  (timeout="200")
[00:52:20.899]      // while-condition  =>  TRUE
[00:52:20.899]      // while "1"  (timeout="200")
[00:52:20.899]      // while-condition  =>  TRUE
[00:52:20.899]      // while "1"  (timeout="200")
[00:52:20.899]      // while-condition  =>  TRUE
[00:52:20.899]      // while "1"  (timeout="200")
[00:52:20.899]      // while-condition  =>  TRUE
[00:52:20.899]      // while "1"  (timeout="200")
[00:52:20.900]      // while-condition  =>  TRUE
[00:52:20.900]      // while "1"  (timeout="200")
[00:52:20.900]      // while-condition  =>  TRUE
[00:52:20.900]      // while "1"  (timeout="200")
[00:52:20.900]      // while-condition  =>  TRUE
[00:52:20.900]      // while "1"  (timeout="200")
[00:52:20.900]      // while-condition  =>  TRUE
[00:52:20.900]      // while "1"  (timeout="200")
[00:52:20.900]      // while-condition  =>  TRUE
[00:52:20.900]      // while "1"  (timeout="200")
[00:52:20.900]      // while-condition  =>  TRUE
[00:52:20.901]      // while "1"  (timeout="200")
[00:52:20.901]      // while-condition  =>  TRUE
[00:52:20.901]      // while "1"  (timeout="200")
[00:52:20.901]      // while-condition  =>  TRUE
[00:52:20.901]      // while "1"  (timeout="200")
[00:52:20.901]      // while-condition  =>  TRUE
[00:52:20.901]      // while "1"  (timeout="200")
[00:52:20.901]      // while-condition  =>  TRUE
[00:52:20.901]      // while "1"  (timeout="200")
[00:52:20.901]      // while-condition  =>  TRUE
[00:52:20.901]      // while "1"  (timeout="200")
[00:52:20.901]      // while-condition  =>  TRUE
[00:52:20.903]      // while "1"  (timeout="200")
[00:52:20.903]      // while-condition  =>  TRUE
[00:52:20.903]      // while "1"  (timeout="200")
[00:52:20.903]      // while-condition  =>  TRUE
[00:52:20.903]      // while "1"  (timeout="200")
[00:52:20.903]      // while-condition  =>  TRUE
[00:52:20.903]      // while "1"  (timeout="200")
[00:52:20.903]      // while-condition  =>  TRUE
[00:52:20.903]      // while "1"  (timeout="200")
[00:52:20.903]      // while-condition  =>  TRUE
[00:52:20.903]      // while "1"  (timeout="200")
[00:52:20.903]      // while-condition  =>  TRUE
[00:52:20.903]      // while "1"  (timeout="200")
[00:52:20.903]      // while-condition  =>  TRUE
[00:52:20.903]      // while "1"  (timeout="200")
[00:52:20.903]      // while-condition  =>  TRUE
[00:52:20.903]      // while "1"  (timeout="200")
[00:52:20.903]      // while-condition  =>  TRUE
[00:52:20.904]      // while "1"  (timeout="200")
[00:52:20.904]      // while-condition  =>  TRUE
[00:52:20.904]      // while "1"  (timeout="200")
[00:52:20.904]      // while-condition  =>  TRUE
[00:52:20.904]      // while "1"  (timeout="200")
[00:52:20.904]      // while-condition  =>  TRUE
[00:52:20.904]      // while "1"  (timeout="200")
[00:52:20.904]      // while-condition  =>  TRUE
[00:52:20.904]      // while "1"  (timeout="200")
[00:52:20.904]      // while-condition  =>  TRUE
[00:52:20.904]      // while "1"  (timeout="200")
[00:52:20.904]      // while-condition  =>  TRUE
[00:52:20.904]      // while "1"  (timeout="200")
[00:52:20.905]      // while-condition  =>  TRUE
[00:52:20.905]      // while "1"  (timeout="200")
[00:52:20.905]      // while-condition  =>  TRUE
[00:52:20.905]      // while "1"  (timeout="200")
[00:52:20.905]      // while-condition  =>  TRUE
[00:52:20.905]      // while "1"  (timeout="200")
[00:52:20.905]      // while-condition  =>  TRUE
[00:52:20.905]      // while "1"  (timeout="200")
[00:52:20.905]      // while-condition  =>  TRUE
[00:52:20.905]      // while "1"  (timeout="200")
[00:52:20.905]      // while-condition  =>  TRUE
[00:52:20.905]      // while "1"  (timeout="200")
[00:52:20.907]      // while-condition  =>  TRUE
[00:52:20.907]      // while "1"  (timeout="200")
[00:52:20.907]      // while  =>  TIMEOUT
[00:52:20.907]      // end while "1"
[00:52:20.907]    </control>
[00:52:20.907]    <control if="canReadPins" while="" timeout="0" info="">
[00:52:20.907]      // if-block "canReadPins"
[00:52:20.908]        // =>  TRUE
[00:52:20.908]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:52:20.908]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:52:20.909]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:52:20.909]        // while-condition  =>  FALSE
[00:52:20.909]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:52:20.909]      </control>
[00:52:20.909]      // end if-block "canReadPins"
[00:52:20.910]    </control>
[00:52:20.910]    <control if="!canReadPins" while="" timeout="0" info="">
[00:52:20.910]      // if-block "!canReadPins"
[00:52:20.910]        // =>  FALSE
[00:52:20.910]      // skip if-block "!canReadPins"
[00:52:20.910]    </control>
[00:52:20.910]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:52:20.910]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:52:20.911]        // =>  TRUE
[00:52:20.911]      <block atomic="false" info="">
[00:52:20.911]        WriteAP(0x00, 0x190008);
[00:52:20.913]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:52:20.913]        WriteAP(0xF0, 0x01);
[00:52:20.916]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:52:20.916]      </block>
[00:52:20.916]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:52:20.916]    </control>
[00:52:20.916]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:52:20.916]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:52:20.916]        // =>  FALSE
[00:52:20.916]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:52:20.916]    </control>
[00:52:20.916]    <block atomic="false" info="">
[00:52:20.916]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:52:20.919]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:52:20.919]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:52:20.919]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:52:20.922]      __ap = 0; //lets make sure we reset the access point selection
[00:52:20.922]        // -> [__ap <= 0x00000000]
[00:52:20.922]    </block>
[00:52:20.922]  </sequence>
[00:52:20.922]  
[00:52:20.941]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:52:20.941]  
[00:52:20.941]  <debugvars>
[00:52:20.941]    // Pre-defined
[00:52:20.942]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:52:20.942]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:52:20.942]    __dp=0x00000000
[00:52:20.942]    __ap=0x00000000
[00:52:20.942]    __traceout=0x00000000      (Trace Disabled)
[00:52:20.942]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:52:20.942]    __FlashAddr=0x00000000
[00:52:20.942]    __FlashLen=0x00000000
[00:52:20.942]    __FlashArg=0x00000000
[00:52:20.942]    __FlashOp=0x00000000
[00:52:20.942]    __Result=0x00000000
[00:52:20.942]  </debugvars>
[00:52:20.942]  
[00:52:20.942]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:52:20.942]    <block atomic="false" info="">
[00:52:20.943]      __var deviceID = 0;
[00:52:20.943]        // -> [deviceID <= 0x00000000]
[00:52:20.943]      __var version = 0;
[00:52:20.943]        // -> [version <= 0x00000000]
[00:52:20.943]      __var partNum = 0;
[00:52:20.943]        // -> [partNum <= 0x00000000]
[00:52:20.943]      __var manuf = 0;
[00:52:20.943]        // -> [manuf <= 0x00000000]
[00:52:20.943]      __var isMSPM0G1X0X_G3X0X = 0;
[00:52:20.943]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:52:20.943]      __var isProduction = 0;
[00:52:20.943]        // -> [isProduction <= 0x00000000]
[00:52:20.943]      __var continueId = 0;
[00:52:20.943]        // -> [continueId <= 0x00000000]
[00:52:20.943]      deviceID =   Read32(0x41C40004);
[00:52:20.948]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:52:20.948]        // -> [deviceID <= 0x2BB8802F]
[00:52:20.948]      version = deviceID >> 28;
[00:52:20.948]        // -> [version <= 0x00000002]
[00:52:20.948]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:52:20.948]        // -> [partNum <= 0x0000BB88]
[00:52:20.948]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:52:20.948]        // -> [manuf <= 0x00000017]
[00:52:20.948]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:52:20.950]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:52:20.950]      isProduction = (version > 0);
[00:52:20.951]        // -> [isProduction <= 0x00000001]
[00:52:20.951]    </block>
[00:52:20.951]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:52:20.951]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:52:20.951]        // =>  FALSE
[00:52:20.951]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:52:20.951]    </control>
[00:52:20.951]    <control if="continueId == 4" while="" timeout="0" info="">
[00:52:20.951]      // if-block "continueId == 4"
[00:52:20.951]        // =>  FALSE
[00:52:20.951]      // skip if-block "continueId == 4"
[00:52:20.951]    </control>
[00:52:20.951]    <control if="!isProduction" while="" timeout="0" info="">
[00:52:20.951]      // if-block "!isProduction"
[00:52:20.951]        // =>  FALSE
[00:52:20.951]      // skip if-block "!isProduction"
[00:52:20.951]    </control>
[00:52:20.951]  </sequence>
[00:52:20.951]  
[00:52:46.818]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:52:46.818]  
[00:52:46.826]  <debugvars>
[00:52:46.826]    // Pre-defined
[00:52:46.826]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:52:46.826]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:52:46.826]    __dp=0x00000000
[00:52:46.826]    __ap=0x00000000
[00:52:46.826]    __traceout=0x00000000      (Trace Disabled)
[00:52:46.826]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:52:46.826]    __FlashAddr=0x00000000
[00:52:46.826]    __FlashLen=0x00000000
[00:52:46.826]    __FlashArg=0x00000000
[00:52:46.826]    __FlashOp=0x00000000
[00:52:46.826]    __Result=0x00000000
[00:52:46.826]  </debugvars>
[00:52:46.826]  
[00:52:46.826]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:52:46.826]    <block atomic="false" info="">
[00:52:46.826]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:52:46.826]        // -> [isSWJ <= 0x00000001]
[00:52:46.829]      __var hasDormant = __protocol & 0x00020000;
[00:52:46.829]        // -> [hasDormant <= 0x00000000]
[00:52:46.829]      __var protType   = __protocol & 0x0000FFFF;
[00:52:46.829]        // -> [protType <= 0x00000002]
[00:52:46.829]    </block>
[00:52:46.829]    <control if="protType == 1" while="" timeout="0" info="">
[00:52:46.829]      // if-block "protType == 1"
[00:52:46.829]        // =>  FALSE
[00:52:46.829]      // skip if-block "protType == 1"
[00:52:46.829]    </control>
[00:52:46.829]    <control if="protType == 2" while="" timeout="0" info="">
[00:52:46.829]      // if-block "protType == 2"
[00:52:46.829]        // =>  TRUE
[00:52:46.829]      <control if="isSWJ" while="" timeout="0" info="">
[00:52:46.829]        // if-block "isSWJ"
[00:52:46.829]          // =>  TRUE
[00:52:46.829]        <control if="hasDormant" while="" timeout="0" info="">
[00:52:46.829]          // if-block "hasDormant"
[00:52:46.829]            // =>  FALSE
[00:52:46.829]          // skip if-block "hasDormant"
[00:52:46.829]        </control>
[00:52:46.829]        <control if="!hasDormant" while="" timeout="0" info="">
[00:52:46.829]          // if-block "!hasDormant"
[00:52:46.829]            // =>  TRUE
[00:52:46.829]          <block atomic="false" info="">
[00:52:46.829]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:52:46.829]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:52:46.829]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:52:46.829]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:52:46.829]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:52:46.837]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:52:46.837]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:52:46.838]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:52:46.838]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:52:46.839]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:52:46.839]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:52:46.839]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:52:46.839]          </block>
[00:52:46.839]          // end if-block "!hasDormant"
[00:52:46.839]        </control>
[00:52:46.839]        // end if-block "isSWJ"
[00:52:46.839]      </control>
[00:52:46.839]      <control if="!isSWJ" while="" timeout="0" info="">
[00:52:46.839]        // if-block "!isSWJ"
[00:52:46.839]          // =>  FALSE
[00:52:46.839]        // skip if-block "!isSWJ"
[00:52:46.839]      </control>
[00:52:46.839]      <block atomic="false" info="">
[00:52:46.839]        ReadDP(0x0);
[00:52:46.839]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:52:46.839]      </block>
[00:52:46.839]      // end if-block "protType == 2"
[00:52:46.839]    </control>
[00:52:46.839]  </sequence>
[00:52:46.839]  
[00:52:46.847]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:52:46.849]  
[00:52:46.849]  <debugvars>
[00:52:46.849]    // Pre-defined
[00:52:46.849]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:52:46.849]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:52:46.849]    __dp=0x00000000
[00:52:46.849]    __ap=0x00000000
[00:52:46.849]    __traceout=0x00000000      (Trace Disabled)
[00:52:46.849]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:52:46.849]    __FlashAddr=0x00000000
[00:52:46.849]    __FlashLen=0x00000000
[00:52:46.849]    __FlashArg=0x00000000
[00:52:46.849]    __FlashOp=0x00000000
[00:52:46.849]    __Result=0x00000000
[00:52:46.849]  </debugvars>
[00:52:46.849]  
[00:52:46.849]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:52:46.849]    <block atomic="false" info="">
[00:52:46.849]      __var SW_DP_ABORT       = 0x0;
[00:52:46.849]        // -> [SW_DP_ABORT <= 0x00000000]
[00:52:46.849]      __var DP_CTRL_STAT      = 0x4;
[00:52:46.849]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:52:46.849]      __var DP_SELECT         = 0x8;
[00:52:46.849]        // -> [DP_SELECT <= 0x00000008]
[00:52:46.849]      __var powered_down      = 0;
[00:52:46.849]        // -> [powered_down <= 0x00000000]
[00:52:46.849]      WriteDP(DP_SELECT, 0x00000000);
[00:52:46.849]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:52:46.849]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:52:46.849]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:52:46.849]        // -> [powered_down <= 0x00000001]
[00:52:46.849]    </block>
[00:52:46.849]    <control if="powered_down" while="" timeout="0" info="">
[00:52:46.849]      // if-block "powered_down"
[00:52:46.849]        // =>  TRUE
[00:52:46.849]      <block atomic="false" info="">
[00:52:46.849]        Message(0, "Debug/System power-up request sent");
[00:52:46.857]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:52:46.859]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:52:46.859]      </block>
[00:52:46.859]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:52:46.859]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:52:46.859]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:52:46.859]        // while-condition  =>  FALSE
[00:52:46.859]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:52:46.859]      </control>
[00:52:46.859]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:52:46.859]        // if-block "(__protocol & 0xFFFF) == 1"
[00:52:46.859]          // =>  FALSE
[00:52:46.859]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:52:46.859]      </control>
[00:52:46.859]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:52:46.859]        // if-block "(__protocol & 0xFFFF) == 2"
[00:52:46.859]          // =>  TRUE
[00:52:46.859]        <block atomic="false" info="">
[00:52:46.859]          Message(0, "executing SWD power up");
[00:52:46.859]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:52:46.867]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:52:46.867]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:52:46.869]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:52:46.869]        </block>
[00:52:46.869]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:52:46.869]      </control>
[00:52:46.869]      // end if-block "powered_down"
[00:52:46.869]    </control>
[00:52:46.869]    <block atomic="false" info="">
[00:52:46.869]      __var DEBUG_PORT_VAL    = 0;
[00:52:46.869]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:52:46.869]      __var ACCESS_POINT_VAL  = 0;
[00:52:46.869]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:52:46.869]      __ap = 1; 
[00:52:46.869]        // -> [__ap <= 0x00000001]
[00:52:46.869]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:52:46.869]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:52:46.869]      __ap = 4;
[00:52:46.869]        // -> [__ap <= 0x00000004]
[00:52:46.869]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:52:46.877]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:52:46.877]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:52:46.877]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:52:46.879]    </block>
[00:52:46.879]    <block atomic="false" info="">
[00:52:46.879]      __var nReset = 0x80;
[00:52:46.879]        // -> [nReset <= 0x00000080]
[00:52:46.879]      __var canReadPins = 0;
[00:52:46.879]        // -> [canReadPins <= 0x00000000]
[00:52:46.879]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:52:46.879]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:52:46.879]        // -> [canReadPins <= 0x00000001]
[00:52:46.879]    </block>
[00:52:46.879]    <control if="" while="1" timeout="200" info="">
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.879]      // while "1"  (timeout="200")
[00:52:46.879]      // while-condition  =>  TRUE
[00:52:46.887]      // while "1"  (timeout="200")
[00:52:46.887]      // while-condition  =>  TRUE
[00:52:46.887]      // while "1"  (timeout="200")
[00:52:46.887]      // while-condition  =>  TRUE
[00:52:46.887]      // while "1"  (timeout="200")
[00:52:46.887]      // while-condition  =>  TRUE
[00:52:46.887]      // while "1"  (timeout="200")
[00:52:46.887]      // while-condition  =>  TRUE
[00:52:46.887]      // while "1"  (timeout="200")
[00:52:46.887]      // while-condition  =>  TRUE
[00:52:46.887]      // while "1"  (timeout="200")
[00:52:46.887]      // while-condition  =>  TRUE
[00:52:46.887]      // while "1"  (timeout="200")
[00:52:46.887]      // while-condition  =>  TRUE
[00:52:46.887]      // while "1"  (timeout="200")
[00:52:46.887]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.889]      // while-condition  =>  TRUE
[00:52:46.889]      // while "1"  (timeout="200")
[00:52:46.897]      // while-condition  =>  TRUE
[00:52:46.897]      // while "1"  (timeout="200")
[00:52:46.897]      // while  =>  TIMEOUT
[00:52:46.897]      // end while "1"
[00:52:46.897]    </control>
[00:52:46.897]    <control if="canReadPins" while="" timeout="0" info="">
[00:52:46.897]      // if-block "canReadPins"
[00:52:46.897]        // =>  TRUE
[00:52:46.897]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:52:46.897]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:52:46.899]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:52:46.899]        // while-condition  =>  FALSE
[00:52:46.899]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:52:46.899]      </control>
[00:52:46.899]      // end if-block "canReadPins"
[00:52:46.899]    </control>
[00:52:46.899]    <control if="!canReadPins" while="" timeout="0" info="">
[00:52:46.899]      // if-block "!canReadPins"
[00:52:46.899]        // =>  FALSE
[00:52:46.899]      // skip if-block "!canReadPins"
[00:52:46.899]    </control>
[00:52:46.899]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:52:46.899]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:52:46.899]        // =>  TRUE
[00:52:46.899]      <block atomic="false" info="">
[00:52:46.899]        WriteAP(0x00, 0x190008);
[00:52:46.899]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:52:46.899]        WriteAP(0xF0, 0x01);
[00:52:46.899]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:52:46.899]      </block>
[00:52:46.899]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:52:46.899]    </control>
[00:52:46.908]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:52:46.908]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:52:46.908]        // =>  FALSE
[00:52:46.908]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:52:46.908]    </control>
[00:52:46.908]    <block atomic="false" info="">
[00:52:46.908]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:52:46.909]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:52:46.909]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:52:46.909]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:52:46.909]      __ap = 0; //lets make sure we reset the access point selection
[00:52:46.909]        // -> [__ap <= 0x00000000]
[00:52:46.909]    </block>
[00:52:46.909]  </sequence>
[00:52:46.909]  
[00:52:46.929]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:52:46.929]  
[00:52:46.929]  <debugvars>
[00:52:46.929]    // Pre-defined
[00:52:46.929]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:52:46.929]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:52:46.929]    __dp=0x00000000
[00:52:46.929]    __ap=0x00000000
[00:52:46.929]    __traceout=0x00000000      (Trace Disabled)
[00:52:46.929]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:52:46.929]    __FlashAddr=0x00000000
[00:52:46.929]    __FlashLen=0x00000000
[00:52:46.929]    __FlashArg=0x00000000
[00:52:46.929]    __FlashOp=0x00000000
[00:52:46.929]    __Result=0x00000000
[00:52:46.929]  </debugvars>
[00:52:46.929]  
[00:52:46.929]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:52:46.929]    <block atomic="false" info="">
[00:52:46.929]      __var deviceID = 0;
[00:52:46.929]        // -> [deviceID <= 0x00000000]
[00:52:46.929]      __var version = 0;
[00:52:46.929]        // -> [version <= 0x00000000]
[00:52:46.929]      __var partNum = 0;
[00:52:46.929]        // -> [partNum <= 0x00000000]
[00:52:46.929]      __var manuf = 0;
[00:52:46.929]        // -> [manuf <= 0x00000000]
[00:52:46.929]      __var isMSPM0G1X0X_G3X0X = 0;
[00:52:46.929]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:52:46.929]      __var isProduction = 0;
[00:52:46.929]        // -> [isProduction <= 0x00000000]
[00:52:46.929]      __var continueId = 0;
[00:52:46.939]        // -> [continueId <= 0x00000000]
[00:52:46.939]      deviceID =   Read32(0x41C40004);
[00:52:46.939]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:52:46.939]        // -> [deviceID <= 0x2BB8802F]
[00:52:46.939]      version = deviceID >> 28;
[00:52:46.939]        // -> [version <= 0x00000002]
[00:52:46.939]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:52:46.939]        // -> [partNum <= 0x0000BB88]
[00:52:46.939]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:52:46.939]        // -> [manuf <= 0x00000017]
[00:52:46.939]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:52:46.939]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:52:46.939]      isProduction = (version > 0);
[00:52:46.939]        // -> [isProduction <= 0x00000001]
[00:52:46.939]    </block>
[00:52:46.939]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:52:46.939]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:52:46.939]        // =>  FALSE
[00:52:46.939]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:52:46.939]    </control>
[00:52:46.939]    <control if="continueId == 4" while="" timeout="0" info="">
[00:52:46.939]      // if-block "continueId == 4"
[00:52:46.939]        // =>  FALSE
[00:52:46.939]      // skip if-block "continueId == 4"
[00:52:46.949]    </control>
[00:52:46.949]    <control if="!isProduction" while="" timeout="0" info="">
[00:52:46.949]      // if-block "!isProduction"
[00:52:46.949]        // =>  FALSE
[00:52:46.949]      // skip if-block "!isProduction"
[00:52:46.949]    </control>
[00:52:46.949]  </sequence>
[00:52:46.949]  
[00:53:22.281]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:53:22.281]  
[00:53:22.290]  <debugvars>
[00:53:22.290]    // Pre-defined
[00:53:22.290]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:53:22.290]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:53:22.290]    __dp=0x00000000
[00:53:22.290]    __ap=0x00000000
[00:53:22.290]    __traceout=0x00000000      (Trace Disabled)
[00:53:22.290]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:53:22.290]    __FlashAddr=0x00000000
[00:53:22.290]    __FlashLen=0x00000000
[00:53:22.290]    __FlashArg=0x00000000
[00:53:22.290]    __FlashOp=0x00000000
[00:53:22.290]    __Result=0x00000000
[00:53:22.290]  </debugvars>
[00:53:22.290]  
[00:53:22.290]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:53:22.290]    <block atomic="false" info="">
[00:53:22.290]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:53:22.290]        // -> [isSWJ <= 0x00000001]
[00:53:22.290]      __var hasDormant = __protocol & 0x00020000;
[00:53:22.290]        // -> [hasDormant <= 0x00000000]
[00:53:22.290]      __var protType   = __protocol & 0x0000FFFF;
[00:53:22.290]        // -> [protType <= 0x00000002]
[00:53:22.290]    </block>
[00:53:22.290]    <control if="protType == 1" while="" timeout="0" info="">
[00:53:22.290]      // if-block "protType == 1"
[00:53:22.290]        // =>  FALSE
[00:53:22.290]      // skip if-block "protType == 1"
[00:53:22.290]    </control>
[00:53:22.290]    <control if="protType == 2" while="" timeout="0" info="">
[00:53:22.290]      // if-block "protType == 2"
[00:53:22.290]        // =>  TRUE
[00:53:22.290]      <control if="isSWJ" while="" timeout="0" info="">
[00:53:22.290]        // if-block "isSWJ"
[00:53:22.290]          // =>  TRUE
[00:53:22.290]        <control if="hasDormant" while="" timeout="0" info="">
[00:53:22.290]          // if-block "hasDormant"
[00:53:22.290]            // =>  FALSE
[00:53:22.290]          // skip if-block "hasDormant"
[00:53:22.290]        </control>
[00:53:22.290]        <control if="!hasDormant" while="" timeout="0" info="">
[00:53:22.290]          // if-block "!hasDormant"
[00:53:22.290]            // =>  TRUE
[00:53:22.290]          <block atomic="false" info="">
[00:53:22.290]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:53:22.290]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:53:22.290]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:53:22.290]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:53:22.290]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:53:22.301]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:53:22.301]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:53:22.301]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:53:22.303]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:53:22.307]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:53:22.307]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:53:22.310]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:53:22.310]          </block>
[00:53:22.310]          // end if-block "!hasDormant"
[00:53:22.310]        </control>
[00:53:22.310]        // end if-block "isSWJ"
[00:53:22.310]      </control>
[00:53:22.310]      <control if="!isSWJ" while="" timeout="0" info="">
[00:53:22.310]        // if-block "!isSWJ"
[00:53:22.310]          // =>  FALSE
[00:53:22.310]        // skip if-block "!isSWJ"
[00:53:22.310]      </control>
[00:53:22.310]      <block atomic="false" info="">
[00:53:22.310]        ReadDP(0x0);
[00:53:22.310]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:53:22.310]      </block>
[00:53:22.310]      // end if-block "protType == 2"
[00:53:22.310]    </control>
[00:53:22.310]  </sequence>
[00:53:22.310]  
[00:53:22.310]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:53:22.310]  
[00:53:22.310]  <debugvars>
[00:53:22.310]    // Pre-defined
[00:53:22.310]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:53:22.310]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:53:22.310]    __dp=0x00000000
[00:53:22.310]    __ap=0x00000000
[00:53:22.310]    __traceout=0x00000000      (Trace Disabled)
[00:53:22.310]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:53:22.310]    __FlashAddr=0x00000000
[00:53:22.310]    __FlashLen=0x00000000
[00:53:22.310]    __FlashArg=0x00000000
[00:53:22.310]    __FlashOp=0x00000000
[00:53:22.310]    __Result=0x00000000
[00:53:22.310]  </debugvars>
[00:53:22.310]  
[00:53:22.310]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:53:22.317]    <block atomic="false" info="">
[00:53:22.317]      __var SW_DP_ABORT       = 0x0;
[00:53:22.317]        // -> [SW_DP_ABORT <= 0x00000000]
[00:53:22.317]      __var DP_CTRL_STAT      = 0x4;
[00:53:22.317]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:53:22.317]      __var DP_SELECT         = 0x8;
[00:53:22.317]        // -> [DP_SELECT <= 0x00000008]
[00:53:22.317]      __var powered_down      = 0;
[00:53:22.317]        // -> [powered_down <= 0x00000000]
[00:53:22.317]      WriteDP(DP_SELECT, 0x00000000);
[00:53:22.320]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:53:22.320]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:53:22.321]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:53:22.322]        // -> [powered_down <= 0x00000001]
[00:53:22.322]    </block>
[00:53:22.322]    <control if="powered_down" while="" timeout="0" info="">
[00:53:22.322]      // if-block "powered_down"
[00:53:22.322]        // =>  TRUE
[00:53:22.322]      <block atomic="false" info="">
[00:53:22.322]        Message(0, "Debug/System power-up request sent");
[00:53:22.322]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:53:22.322]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:53:22.322]      </block>
[00:53:22.322]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:53:22.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:53:22.330]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:53:22.330]        // while-condition  =>  FALSE
[00:53:22.330]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:53:22.330]      </control>
[00:53:22.330]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:53:22.330]        // if-block "(__protocol & 0xFFFF) == 1"
[00:53:22.331]          // =>  FALSE
[00:53:22.331]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:53:22.331]      </control>
[00:53:22.331]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:53:22.331]        // if-block "(__protocol & 0xFFFF) == 2"
[00:53:22.331]          // =>  TRUE
[00:53:22.331]        <block atomic="false" info="">
[00:53:22.332]          Message(0, "executing SWD power up");
[00:53:22.332]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:53:22.332]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:53:22.332]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:53:22.337]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:53:22.337]        </block>
[00:53:22.337]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:53:22.337]      </control>
[00:53:22.337]      // end if-block "powered_down"
[00:53:22.337]    </control>
[00:53:22.337]    <block atomic="false" info="">
[00:53:22.337]      __var DEBUG_PORT_VAL    = 0;
[00:53:22.337]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:53:22.337]      __var ACCESS_POINT_VAL  = 0;
[00:53:22.337]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:53:22.337]      __ap = 1; 
[00:53:22.337]        // -> [__ap <= 0x00000001]
[00:53:22.337]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:53:22.340]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:53:22.340]      __ap = 4;
[00:53:22.340]        // -> [__ap <= 0x00000004]
[00:53:22.340]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:53:22.340]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:53:22.340]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:53:22.347]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:53:22.347]    </block>
[00:53:22.347]    <block atomic="false" info="">
[00:53:22.347]      __var nReset = 0x80;
[00:53:22.347]        // -> [nReset <= 0x00000080]
[00:53:22.347]      __var canReadPins = 0;
[00:53:22.347]        // -> [canReadPins <= 0x00000000]
[00:53:22.347]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:53:22.350]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:53:22.350]        // -> [canReadPins <= 0x00000001]
[00:53:22.350]    </block>
[00:53:22.350]    <control if="" while="1" timeout="200" info="">
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.350]      // while-condition  =>  TRUE
[00:53:22.350]      // while "1"  (timeout="200")
[00:53:22.355]      // while-condition  =>  TRUE
[00:53:22.355]      // while "1"  (timeout="200")
[00:53:22.355]      // while-condition  =>  TRUE
[00:53:22.355]      // while "1"  (timeout="200")
[00:53:22.355]      // while-condition  =>  TRUE
[00:53:22.355]      // while "1"  (timeout="200")
[00:53:22.355]      // while-condition  =>  TRUE
[00:53:22.355]      // while "1"  (timeout="200")
[00:53:22.355]      // while-condition  =>  TRUE
[00:53:22.355]      // while "1"  (timeout="200")
[00:53:22.355]      // while-condition  =>  TRUE
[00:53:22.355]      // while "1"  (timeout="200")
[00:53:22.355]      // while-condition  =>  TRUE
[00:53:22.355]      // while "1"  (timeout="200")
[00:53:22.355]      // while-condition  =>  TRUE
[00:53:22.355]      // while "1"  (timeout="200")
[00:53:22.355]      // while-condition  =>  TRUE
[00:53:22.355]      // while "1"  (timeout="200")
[00:53:22.355]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.357]      // while-condition  =>  TRUE
[00:53:22.357]      // while "1"  (timeout="200")
[00:53:22.361]      // while-condition  =>  TRUE
[00:53:22.361]      // while "1"  (timeout="200")
[00:53:22.361]      // while  =>  TIMEOUT
[00:53:22.361]      // end while "1"
[00:53:22.361]    </control>
[00:53:22.361]    <control if="canReadPins" while="" timeout="0" info="">
[00:53:22.361]      // if-block "canReadPins"
[00:53:22.361]        // =>  TRUE
[00:53:22.362]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:53:22.362]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:53:22.362]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:53:22.362]        // while-condition  =>  FALSE
[00:53:22.362]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:53:22.362]      </control>
[00:53:22.362]      // end if-block "canReadPins"
[00:53:22.362]    </control>
[00:53:22.362]    <control if="!canReadPins" while="" timeout="0" info="">
[00:53:22.364]      // if-block "!canReadPins"
[00:53:22.364]        // =>  FALSE
[00:53:22.364]      // skip if-block "!canReadPins"
[00:53:22.364]    </control>
[00:53:22.364]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:53:22.364]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:53:22.364]        // =>  TRUE
[00:53:22.364]      <block atomic="false" info="">
[00:53:22.364]        WriteAP(0x00, 0x190008);
[00:53:22.371]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:53:22.371]        WriteAP(0xF0, 0x01);
[00:53:22.373]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:53:22.377]      </block>
[00:53:22.377]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:53:22.377]    </control>
[00:53:22.377]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:53:22.377]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:53:22.377]        // =>  FALSE
[00:53:22.377]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:53:22.377]    </control>
[00:53:22.377]    <block atomic="false" info="">
[00:53:22.377]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:53:22.383]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:53:22.383]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:53:22.383]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:53:22.383]      __ap = 0; //lets make sure we reset the access point selection
[00:53:22.383]        // -> [__ap <= 0x00000000]
[00:53:22.383]    </block>
[00:53:22.383]  </sequence>
[00:53:22.383]  
[00:53:22.414]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:53:22.414]  
[00:53:22.414]  <debugvars>
[00:53:22.414]    // Pre-defined
[00:53:22.414]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:53:22.414]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:53:22.414]    __dp=0x00000000
[00:53:22.414]    __ap=0x00000000
[00:53:22.414]    __traceout=0x00000000      (Trace Disabled)
[00:53:22.417]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:53:22.417]    __FlashAddr=0x00000000
[00:53:22.417]    __FlashLen=0x00000000
[00:53:22.417]    __FlashArg=0x00000000
[00:53:22.417]    __FlashOp=0x00000000
[00:53:22.417]    __Result=0x00000000
[00:53:22.417]  </debugvars>
[00:53:22.417]  
[00:53:22.417]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:53:22.417]    <block atomic="false" info="">
[00:53:22.417]      __var deviceID = 0;
[00:53:22.417]        // -> [deviceID <= 0x00000000]
[00:53:22.417]      __var version = 0;
[00:53:22.417]        // -> [version <= 0x00000000]
[00:53:22.417]      __var partNum = 0;
[00:53:22.417]        // -> [partNum <= 0x00000000]
[00:53:22.417]      __var manuf = 0;
[00:53:22.417]        // -> [manuf <= 0x00000000]
[00:53:22.417]      __var isMSPM0G1X0X_G3X0X = 0;
[00:53:22.417]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:53:22.417]      __var isProduction = 0;
[00:53:22.417]        // -> [isProduction <= 0x00000000]
[00:53:22.417]      __var continueId = 0;
[00:53:22.417]        // -> [continueId <= 0x00000000]
[00:53:22.417]      deviceID =   Read32(0x41C40004);
[00:53:22.424]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:53:22.424]        // -> [deviceID <= 0x2BB8802F]
[00:53:22.424]      version = deviceID >> 28;
[00:53:22.424]        // -> [version <= 0x00000002]
[00:53:22.424]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:53:22.424]        // -> [partNum <= 0x0000BB88]
[00:53:22.424]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:53:22.424]        // -> [manuf <= 0x00000017]
[00:53:22.424]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:53:22.424]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:53:22.424]      isProduction = (version > 0);
[00:53:22.424]        // -> [isProduction <= 0x00000001]
[00:53:22.424]    </block>
[00:53:22.424]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:53:22.424]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:53:22.424]        // =>  FALSE
[00:53:22.424]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:53:22.424]    </control>
[00:53:22.424]    <control if="continueId == 4" while="" timeout="0" info="">
[00:53:22.424]      // if-block "continueId == 4"
[00:53:22.424]        // =>  FALSE
[00:53:22.424]      // skip if-block "continueId == 4"
[00:53:22.424]    </control>
[00:53:22.424]    <control if="!isProduction" while="" timeout="0" info="">
[00:53:22.424]      // if-block "!isProduction"
[00:53:22.424]        // =>  FALSE
[00:53:22.424]      // skip if-block "!isProduction"
[00:53:22.427]    </control>
[00:53:22.427]  </sequence>
[00:53:22.427]  
[00:53:44.072]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:53:44.072]  
[00:53:44.083]  <debugvars>
[00:53:44.083]    // Pre-defined
[00:53:44.083]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:53:44.083]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:53:44.083]    __dp=0x00000000
[00:53:44.083]    __ap=0x00000000
[00:53:44.083]    __traceout=0x00000000      (Trace Disabled)
[00:53:44.083]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:53:44.083]    __FlashAddr=0x00000000
[00:53:44.083]    __FlashLen=0x00000000
[00:53:44.083]    __FlashArg=0x00000000
[00:53:44.083]    __FlashOp=0x00000000
[00:53:44.083]    __Result=0x00000000
[00:53:44.083]  </debugvars>
[00:53:44.083]  
[00:53:44.083]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:53:44.083]    <block atomic="false" info="">
[00:53:44.083]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:53:44.083]        // -> [isSWJ <= 0x00000001]
[00:53:44.083]      __var hasDormant = __protocol & 0x00020000;
[00:53:44.083]        // -> [hasDormant <= 0x00000000]
[00:53:44.083]      __var protType   = __protocol & 0x0000FFFF;
[00:53:44.083]        // -> [protType <= 0x00000002]
[00:53:44.083]    </block>
[00:53:44.083]    <control if="protType == 1" while="" timeout="0" info="">
[00:53:44.083]      // if-block "protType == 1"
[00:53:44.083]        // =>  FALSE
[00:53:44.083]      // skip if-block "protType == 1"
[00:53:44.083]    </control>
[00:53:44.083]    <control if="protType == 2" while="" timeout="0" info="">
[00:53:44.083]      // if-block "protType == 2"
[00:53:44.083]        // =>  TRUE
[00:53:44.083]      <control if="isSWJ" while="" timeout="0" info="">
[00:53:44.083]        // if-block "isSWJ"
[00:53:44.083]          // =>  TRUE
[00:53:44.083]        <control if="hasDormant" while="" timeout="0" info="">
[00:53:44.083]          // if-block "hasDormant"
[00:53:44.083]            // =>  FALSE
[00:53:44.083]          // skip if-block "hasDormant"
[00:53:44.083]        </control>
[00:53:44.087]        <control if="!hasDormant" while="" timeout="0" info="">
[00:53:44.087]          // if-block "!hasDormant"
[00:53:44.087]            // =>  TRUE
[00:53:44.087]          <block atomic="false" info="">
[00:53:44.087]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:53:44.090]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:53:44.090]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:53:44.090]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:53:44.090]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:53:44.090]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:53:44.090]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:53:44.090]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:53:44.090]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:53:44.090]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:53:44.097]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:53:44.097]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:53:44.097]          </block>
[00:53:44.097]          // end if-block "!hasDormant"
[00:53:44.097]        </control>
[00:53:44.097]        // end if-block "isSWJ"
[00:53:44.097]      </control>
[00:53:44.097]      <control if="!isSWJ" while="" timeout="0" info="">
[00:53:44.097]        // if-block "!isSWJ"
[00:53:44.097]          // =>  FALSE
[00:53:44.097]        // skip if-block "!isSWJ"
[00:53:44.097]      </control>
[00:53:44.097]      <block atomic="false" info="">
[00:53:44.097]        ReadDP(0x0);
[00:53:44.100]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:53:44.100]      </block>
[00:53:44.100]      // end if-block "protType == 2"
[00:53:44.100]    </control>
[00:53:44.100]  </sequence>
[00:53:44.100]  
[00:53:44.100]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:53:44.100]  
[00:53:44.100]  <debugvars>
[00:53:44.100]    // Pre-defined
[00:53:44.100]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:53:44.100]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:53:44.100]    __dp=0x00000000
[00:53:44.100]    __ap=0x00000000
[00:53:44.100]    __traceout=0x00000000      (Trace Disabled)
[00:53:44.100]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:53:44.100]    __FlashAddr=0x00000000
[00:53:44.100]    __FlashLen=0x00000000
[00:53:44.100]    __FlashArg=0x00000000
[00:53:44.100]    __FlashOp=0x00000000
[00:53:44.100]    __Result=0x00000000
[00:53:44.100]  </debugvars>
[00:53:44.100]  
[00:53:44.100]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:53:44.100]    <block atomic="false" info="">
[00:53:44.100]      __var SW_DP_ABORT       = 0x0;
[00:53:44.100]        // -> [SW_DP_ABORT <= 0x00000000]
[00:53:44.100]      __var DP_CTRL_STAT      = 0x4;
[00:53:44.100]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:53:44.100]      __var DP_SELECT         = 0x8;
[00:53:44.100]        // -> [DP_SELECT <= 0x00000008]
[00:53:44.100]      __var powered_down      = 0;
[00:53:44.100]        // -> [powered_down <= 0x00000000]
[00:53:44.100]      WriteDP(DP_SELECT, 0x00000000);
[00:53:44.107]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:53:44.107]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:53:44.111]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:53:44.111]        // -> [powered_down <= 0x00000001]
[00:53:44.111]    </block>
[00:53:44.111]    <control if="powered_down" while="" timeout="0" info="">
[00:53:44.111]      // if-block "powered_down"
[00:53:44.111]        // =>  TRUE
[00:53:44.111]      <block atomic="false" info="">
[00:53:44.111]        Message(0, "Debug/System power-up request sent");
[00:53:44.111]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:53:44.111]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:53:44.111]      </block>
[00:53:44.111]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:53:44.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:53:44.117]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:53:44.117]        // while-condition  =>  FALSE
[00:53:44.117]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:53:44.117]      </control>
[00:53:44.117]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:53:44.117]        // if-block "(__protocol & 0xFFFF) == 1"
[00:53:44.117]          // =>  FALSE
[00:53:44.117]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:53:44.117]      </control>
[00:53:44.117]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:53:44.117]        // if-block "(__protocol & 0xFFFF) == 2"
[00:53:44.117]          // =>  TRUE
[00:53:44.117]        <block atomic="false" info="">
[00:53:44.117]          Message(0, "executing SWD power up");
[00:53:44.121]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:53:44.121]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:53:44.121]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:53:44.121]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:53:44.121]        </block>
[00:53:44.121]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:53:44.121]      </control>
[00:53:44.121]      // end if-block "powered_down"
[00:53:44.121]    </control>
[00:53:44.121]    <block atomic="false" info="">
[00:53:44.121]      __var DEBUG_PORT_VAL    = 0;
[00:53:44.121]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:53:44.121]      __var ACCESS_POINT_VAL  = 0;
[00:53:44.121]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:53:44.121]      __ap = 1; 
[00:53:44.121]        // -> [__ap <= 0x00000001]
[00:53:44.121]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:53:44.127]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:53:44.127]      __ap = 4;
[00:53:44.127]        // -> [__ap <= 0x00000004]
[00:53:44.131]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:53:44.131]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:53:44.131]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:53:44.131]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:53:44.131]    </block>
[00:53:44.131]    <block atomic="false" info="">
[00:53:44.131]      __var nReset = 0x80;
[00:53:44.131]        // -> [nReset <= 0x00000080]
[00:53:44.131]      __var canReadPins = 0;
[00:53:44.131]        // -> [canReadPins <= 0x00000000]
[00:53:44.131]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:53:44.137]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:53:44.137]        // -> [canReadPins <= 0x00000001]
[00:53:44.137]    </block>
[00:53:44.137]    <control if="" while="1" timeout="200" info="">
[00:53:44.137]      // while "1"  (timeout="200")
[00:53:44.137]      // while-condition  =>  TRUE
[00:53:44.137]      // while "1"  (timeout="200")
[00:53:44.137]      // while-condition  =>  TRUE
[00:53:44.137]      // while "1"  (timeout="200")
[00:53:44.137]      // while-condition  =>  TRUE
[00:53:44.137]      // while "1"  (timeout="200")
[00:53:44.137]      // while-condition  =>  TRUE
[00:53:44.137]      // while "1"  (timeout="200")
[00:53:44.137]      // while-condition  =>  TRUE
[00:53:44.137]      // while "1"  (timeout="200")
[00:53:44.137]      // while-condition  =>  TRUE
[00:53:44.137]      // while "1"  (timeout="200")
[00:53:44.137]      // while-condition  =>  TRUE
[00:53:44.137]      // while "1"  (timeout="200")
[00:53:44.137]      // while-condition  =>  TRUE
[00:53:44.137]      // while "1"  (timeout="200")
[00:53:44.141]      // while-condition  =>  TRUE
[00:53:44.141]      // while "1"  (timeout="200")
[00:53:44.141]      // while  =>  TIMEOUT
[00:53:44.141]      // end while "1"
[00:53:44.141]    </control>
[00:53:44.141]    <control if="canReadPins" while="" timeout="0" info="">
[00:53:44.141]      // if-block "canReadPins"
[00:53:44.141]        // =>  TRUE
[00:53:44.141]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:53:44.141]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:53:44.141]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:53:44.141]        // while-condition  =>  FALSE
[00:53:44.141]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:53:44.141]      </control>
[00:53:44.141]      // end if-block "canReadPins"
[00:53:44.141]    </control>
[00:53:44.141]    <control if="!canReadPins" while="" timeout="0" info="">
[00:53:44.141]      // if-block "!canReadPins"
[00:53:44.141]        // =>  FALSE
[00:53:44.141]      // skip if-block "!canReadPins"
[00:53:44.141]    </control>
[00:53:44.141]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:53:44.141]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:53:44.141]        // =>  TRUE
[00:53:44.141]      <block atomic="false" info="">
[00:53:44.141]        WriteAP(0x00, 0x190008);
[00:53:44.141]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:53:44.141]        WriteAP(0xF0, 0x01);
[00:53:44.147]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:53:44.147]      </block>
[00:53:44.147]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:53:44.147]    </control>
[00:53:44.151]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:53:44.151]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:53:44.151]        // =>  FALSE
[00:53:44.151]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:53:44.151]    </control>
[00:53:44.151]    <block atomic="false" info="">
[00:53:44.151]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:53:44.151]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:53:44.151]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:53:44.151]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:53:44.157]      __ap = 0; //lets make sure we reset the access point selection
[00:53:44.157]        // -> [__ap <= 0x00000000]
[00:53:44.157]    </block>
[00:53:44.157]  </sequence>
[00:53:44.157]  
[00:53:44.171]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:53:44.171]  
[00:53:44.171]  <debugvars>
[00:53:44.171]    // Pre-defined
[00:53:44.171]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:53:44.171]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:53:44.171]    __dp=0x00000000
[00:53:44.171]    __ap=0x00000000
[00:53:44.177]    __traceout=0x00000000      (Trace Disabled)
[00:53:44.177]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:53:44.177]    __FlashAddr=0x00000000
[00:53:44.177]    __FlashLen=0x00000000
[00:53:44.177]    __FlashArg=0x00000000
[00:53:44.177]    __FlashOp=0x00000000
[00:53:44.177]    __Result=0x00000000
[00:53:44.178]  </debugvars>
[00:53:44.178]  
[00:53:44.178]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:53:44.178]    <block atomic="false" info="">
[00:53:44.178]      __var deviceID = 0;
[00:53:44.178]        // -> [deviceID <= 0x00000000]
[00:53:44.178]      __var version = 0;
[00:53:44.178]        // -> [version <= 0x00000000]
[00:53:44.178]      __var partNum = 0;
[00:53:44.178]        // -> [partNum <= 0x00000000]
[00:53:44.178]      __var manuf = 0;
[00:53:44.178]        // -> [manuf <= 0x00000000]
[00:53:44.178]      __var isMSPM0G1X0X_G3X0X = 0;
[00:53:44.178]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:53:44.178]      __var isProduction = 0;
[00:53:44.178]        // -> [isProduction <= 0x00000000]
[00:53:44.178]      __var continueId = 0;
[00:53:44.178]        // -> [continueId <= 0x00000000]
[00:53:44.178]      deviceID =   Read32(0x41C40004);
[00:53:44.182]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:53:44.182]        // -> [deviceID <= 0x2BB8802F]
[00:53:44.182]      version = deviceID >> 28;
[00:53:44.182]        // -> [version <= 0x00000002]
[00:53:44.182]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:53:44.182]        // -> [partNum <= 0x0000BB88]
[00:53:44.182]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:53:44.182]        // -> [manuf <= 0x00000017]
[00:53:44.182]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:53:44.182]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:53:44.182]      isProduction = (version > 0);
[00:53:44.182]        // -> [isProduction <= 0x00000001]
[00:53:44.182]    </block>
[00:53:44.182]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:53:44.182]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:53:44.182]        // =>  FALSE
[00:53:44.182]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:53:44.182]    </control>
[00:53:44.187]    <control if="continueId == 4" while="" timeout="0" info="">
[00:53:44.187]      // if-block "continueId == 4"
[00:53:44.187]        // =>  FALSE
[00:53:44.187]      // skip if-block "continueId == 4"
[00:53:44.187]    </control>
[00:53:44.187]    <control if="!isProduction" while="" timeout="0" info="">
[00:53:44.187]      // if-block "!isProduction"
[00:53:44.187]        // =>  FALSE
[00:53:44.187]      // skip if-block "!isProduction"
[00:53:44.187]    </control>
[00:53:44.187]  </sequence>
[00:53:44.187]  
[00:54:03.985]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:54:03.985]  
[00:54:03.985]  <debugvars>
[00:54:03.985]    // Pre-defined
[00:54:03.985]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:54:03.985]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:54:03.985]    __dp=0x00000000
[00:54:03.985]    __ap=0x00000000
[00:54:03.985]    __traceout=0x00000000      (Trace Disabled)
[00:54:03.985]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:54:03.985]    __FlashAddr=0x00000000
[00:54:03.985]    __FlashLen=0x00000000
[00:54:03.985]    __FlashArg=0x00000000
[00:54:03.985]    __FlashOp=0x00000000
[00:54:03.985]    __Result=0x00000000
[00:54:03.985]  </debugvars>
[00:54:03.985]  
[00:54:03.985]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:54:03.985]    <block atomic="false" info="">
[00:54:03.985]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:54:03.985]        // -> [isSWJ <= 0x00000001]
[00:54:03.985]      __var hasDormant = __protocol & 0x00020000;
[00:54:03.985]        // -> [hasDormant <= 0x00000000]
[00:54:03.985]      __var protType   = __protocol & 0x0000FFFF;
[00:54:03.985]        // -> [protType <= 0x00000002]
[00:54:03.985]    </block>
[00:54:03.985]    <control if="protType == 1" while="" timeout="0" info="">
[00:54:03.985]      // if-block "protType == 1"
[00:54:03.985]        // =>  FALSE
[00:54:03.985]      // skip if-block "protType == 1"
[00:54:03.985]    </control>
[00:54:03.985]    <control if="protType == 2" while="" timeout="0" info="">
[00:54:03.985]      // if-block "protType == 2"
[00:54:03.985]        // =>  TRUE
[00:54:03.985]      <control if="isSWJ" while="" timeout="0" info="">
[00:54:03.985]        // if-block "isSWJ"
[00:54:03.985]          // =>  TRUE
[00:54:03.985]        <control if="hasDormant" while="" timeout="0" info="">
[00:54:03.985]          // if-block "hasDormant"
[00:54:03.985]            // =>  FALSE
[00:54:03.985]          // skip if-block "hasDormant"
[00:54:03.985]        </control>
[00:54:03.985]        <control if="!hasDormant" while="" timeout="0" info="">
[00:54:03.985]          // if-block "!hasDormant"
[00:54:03.985]            // =>  TRUE
[00:54:03.985]          <block atomic="false" info="">
[00:54:03.985]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:54:03.994]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:54:03.994]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:54:03.995]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:54:03.995]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:54:03.996]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:54:03.996]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:54:03.996]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:54:03.996]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:54:03.996]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:54:03.996]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:54:03.996]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:54:03.996]          </block>
[00:54:03.996]          // end if-block "!hasDormant"
[00:54:03.996]        </control>
[00:54:03.996]        // end if-block "isSWJ"
[00:54:03.996]      </control>
[00:54:03.996]      <control if="!isSWJ" while="" timeout="0" info="">
[00:54:03.996]        // if-block "!isSWJ"
[00:54:03.996]          // =>  FALSE
[00:54:03.996]        // skip if-block "!isSWJ"
[00:54:03.996]      </control>
[00:54:03.996]      <block atomic="false" info="">
[00:54:03.996]        ReadDP(0x0);
[00:54:03.996]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:54:03.996]      </block>
[00:54:04.004]      // end if-block "protType == 2"
[00:54:04.004]    </control>
[00:54:04.004]  </sequence>
[00:54:04.004]  
[00:54:04.007]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:54:04.007]  
[00:54:04.007]  <debugvars>
[00:54:04.007]    // Pre-defined
[00:54:04.007]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:54:04.007]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:54:04.007]    __dp=0x00000000
[00:54:04.007]    __ap=0x00000000
[00:54:04.007]    __traceout=0x00000000      (Trace Disabled)
[00:54:04.007]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:54:04.007]    __FlashAddr=0x00000000
[00:54:04.007]    __FlashLen=0x00000000
[00:54:04.007]    __FlashArg=0x00000000
[00:54:04.008]    __FlashOp=0x00000000
[00:54:04.008]    __Result=0x00000000
[00:54:04.008]  </debugvars>
[00:54:04.008]  
[00:54:04.008]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:54:04.008]    <block atomic="false" info="">
[00:54:04.008]      __var SW_DP_ABORT       = 0x0;
[00:54:04.008]        // -> [SW_DP_ABORT <= 0x00000000]
[00:54:04.008]      __var DP_CTRL_STAT      = 0x4;
[00:54:04.008]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:54:04.008]      __var DP_SELECT         = 0x8;
[00:54:04.008]        // -> [DP_SELECT <= 0x00000008]
[00:54:04.008]      __var powered_down      = 0;
[00:54:04.008]        // -> [powered_down <= 0x00000000]
[00:54:04.008]      WriteDP(DP_SELECT, 0x00000000);
[00:54:04.008]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:54:04.008]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:54:04.008]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:54:04.008]        // -> [powered_down <= 0x00000001]
[00:54:04.008]    </block>
[00:54:04.008]    <control if="powered_down" while="" timeout="0" info="">
[00:54:04.008]      // if-block "powered_down"
[00:54:04.008]        // =>  TRUE
[00:54:04.008]      <block atomic="false" info="">
[00:54:04.008]        Message(0, "Debug/System power-up request sent");
[00:54:04.015]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:54:04.015]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:54:04.015]      </block>
[00:54:04.015]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:54:04.015]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:54:04.015]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:54:04.015]        // while-condition  =>  FALSE
[00:54:04.015]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:54:04.015]      </control>
[00:54:04.015]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:54:04.015]        // if-block "(__protocol & 0xFFFF) == 1"
[00:54:04.015]          // =>  FALSE
[00:54:04.015]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:54:04.015]      </control>
[00:54:04.015]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:54:04.015]        // if-block "(__protocol & 0xFFFF) == 2"
[00:54:04.015]          // =>  TRUE
[00:54:04.015]        <block atomic="false" info="">
[00:54:04.015]          Message(0, "executing SWD power up");
[00:54:04.015]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:54:04.025]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:54:04.025]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:54:04.027]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:54:04.027]        </block>
[00:54:04.027]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:54:04.027]      </control>
[00:54:04.027]      // end if-block "powered_down"
[00:54:04.027]    </control>
[00:54:04.027]    <block atomic="false" info="">
[00:54:04.027]      __var DEBUG_PORT_VAL    = 0;
[00:54:04.027]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:54:04.028]      __var ACCESS_POINT_VAL  = 0;
[00:54:04.028]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:54:04.028]      __ap = 1; 
[00:54:04.028]        // -> [__ap <= 0x00000001]
[00:54:04.028]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:54:04.031]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:54:04.031]      __ap = 4;
[00:54:04.031]        // -> [__ap <= 0x00000004]
[00:54:04.031]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:54:04.035]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:54:04.035]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:54:04.035]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:54:04.037]    </block>
[00:54:04.037]    <block atomic="false" info="">
[00:54:04.037]      __var nReset = 0x80;
[00:54:04.037]        // -> [nReset <= 0x00000080]
[00:54:04.037]      __var canReadPins = 0;
[00:54:04.037]        // -> [canReadPins <= 0x00000000]
[00:54:04.037]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:54:04.039]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:54:04.039]        // -> [canReadPins <= 0x00000001]
[00:54:04.039]    </block>
[00:54:04.039]    <control if="" while="1" timeout="200" info="">
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.039]      // while "1"  (timeout="200")
[00:54:04.039]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.045]      // while-condition  =>  TRUE
[00:54:04.045]      // while "1"  (timeout="200")
[00:54:04.055]      // while-condition  =>  TRUE
[00:54:04.055]      // while "1"  (timeout="200")
[00:54:04.055]      // while  =>  TIMEOUT
[00:54:04.055]      // end while "1"
[00:54:04.055]    </control>
[00:54:04.055]    <control if="canReadPins" while="" timeout="0" info="">
[00:54:04.055]      // if-block "canReadPins"
[00:54:04.055]        // =>  TRUE
[00:54:04.055]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:54:04.055]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:54:04.057]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:54:04.057]        // while-condition  =>  FALSE
[00:54:04.057]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:54:04.057]      </control>
[00:54:04.057]      // end if-block "canReadPins"
[00:54:04.057]    </control>
[00:54:04.057]    <control if="!canReadPins" while="" timeout="0" info="">
[00:54:04.057]      // if-block "!canReadPins"
[00:54:04.057]        // =>  FALSE
[00:54:04.057]      // skip if-block "!canReadPins"
[00:54:04.060]    </control>
[00:54:04.060]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:54:04.060]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:54:04.060]        // =>  TRUE
[00:54:04.060]      <block atomic="false" info="">
[00:54:04.060]        WriteAP(0x00, 0x190008);
[00:54:04.060]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:54:04.060]        WriteAP(0xF0, 0x01);
[00:54:04.065]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:54:04.065]      </block>
[00:54:04.065]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:54:04.065]    </control>
[00:54:04.065]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:54:04.065]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:54:04.065]        // =>  FALSE
[00:54:04.065]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:54:04.065]    </control>
[00:54:04.065]    <block atomic="false" info="">
[00:54:04.065]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:54:04.069]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:54:04.069]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:54:04.069]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:54:04.069]      __ap = 0; //lets make sure we reset the access point selection
[00:54:04.069]        // -> [__ap <= 0x00000000]
[00:54:04.069]    </block>
[00:54:04.069]  </sequence>
[00:54:04.069]  
[00:54:04.085]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:54:04.085]  
[00:54:04.085]  <debugvars>
[00:54:04.085]    // Pre-defined
[00:54:04.085]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:54:04.085]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:54:04.085]    __dp=0x00000000
[00:54:04.085]    __ap=0x00000000
[00:54:04.085]    __traceout=0x00000000      (Trace Disabled)
[00:54:04.085]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:54:04.085]    __FlashAddr=0x00000000
[00:54:04.085]    __FlashLen=0x00000000
[00:54:04.085]    __FlashArg=0x00000000
[00:54:04.085]    __FlashOp=0x00000000
[00:54:04.085]    __Result=0x00000000
[00:54:04.085]  </debugvars>
[00:54:04.085]  
[00:54:04.085]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:54:04.085]    <block atomic="false" info="">
[00:54:04.085]      __var deviceID = 0;
[00:54:04.085]        // -> [deviceID <= 0x00000000]
[00:54:04.095]      __var version = 0;
[00:54:04.095]        // -> [version <= 0x00000000]
[00:54:04.095]      __var partNum = 0;
[00:54:04.095]        // -> [partNum <= 0x00000000]
[00:54:04.095]      __var manuf = 0;
[00:54:04.095]        // -> [manuf <= 0x00000000]
[00:54:04.095]      __var isMSPM0G1X0X_G3X0X = 0;
[00:54:04.095]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:54:04.095]      __var isProduction = 0;
[00:54:04.095]        // -> [isProduction <= 0x00000000]
[00:54:04.095]      __var continueId = 0;
[00:54:04.095]        // -> [continueId <= 0x00000000]
[00:54:04.095]      deviceID =   Read32(0x41C40004);
[00:54:04.095]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:54:04.095]        // -> [deviceID <= 0x2BB8802F]
[00:54:04.095]      version = deviceID >> 28;
[00:54:04.095]        // -> [version <= 0x00000002]
[00:54:04.095]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:54:04.095]        // -> [partNum <= 0x0000BB88]
[00:54:04.095]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:54:04.095]        // -> [manuf <= 0x00000017]
[00:54:04.095]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:54:04.095]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:54:04.095]      isProduction = (version > 0);
[00:54:04.095]        // -> [isProduction <= 0x00000001]
[00:54:04.095]    </block>
[00:54:04.095]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:54:04.095]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:54:04.095]        // =>  FALSE
[00:54:04.095]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:54:04.095]    </control>
[00:54:04.095]    <control if="continueId == 4" while="" timeout="0" info="">
[00:54:04.095]      // if-block "continueId == 4"
[00:54:04.095]        // =>  FALSE
[00:54:04.095]      // skip if-block "continueId == 4"
[00:54:04.095]    </control>
[00:54:04.095]    <control if="!isProduction" while="" timeout="0" info="">
[00:54:04.095]      // if-block "!isProduction"
[00:54:04.095]        // =>  FALSE
[00:54:04.095]      // skip if-block "!isProduction"
[00:54:04.095]    </control>
[00:54:04.095]  </sequence>
[00:54:04.095]  
[00:54:32.322]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:54:32.322]  
[00:54:32.332]  <debugvars>
[00:54:32.332]    // Pre-defined
[00:54:32.332]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:54:32.332]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:54:32.332]    __dp=0x00000000
[00:54:32.332]    __ap=0x00000000
[00:54:32.332]    __traceout=0x00000000      (Trace Disabled)
[00:54:32.332]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:54:32.332]    __FlashAddr=0x00000000
[00:54:32.332]    __FlashLen=0x00000000
[00:54:32.332]    __FlashArg=0x00000000
[00:54:32.332]    __FlashOp=0x00000000
[00:54:32.333]    __Result=0x00000000
[00:54:32.333]  </debugvars>
[00:54:32.333]  
[00:54:32.333]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:54:32.333]    <block atomic="false" info="">
[00:54:32.333]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:54:32.333]        // -> [isSWJ <= 0x00000001]
[00:54:32.333]      __var hasDormant = __protocol & 0x00020000;
[00:54:32.333]        // -> [hasDormant <= 0x00000000]
[00:54:32.333]      __var protType   = __protocol & 0x0000FFFF;
[00:54:32.335]        // -> [protType <= 0x00000002]
[00:54:32.335]    </block>
[00:54:32.335]    <control if="protType == 1" while="" timeout="0" info="">
[00:54:32.335]      // if-block "protType == 1"
[00:54:32.335]        // =>  FALSE
[00:54:32.335]      // skip if-block "protType == 1"
[00:54:32.335]    </control>
[00:54:32.335]    <control if="protType == 2" while="" timeout="0" info="">
[00:54:32.335]      // if-block "protType == 2"
[00:54:32.335]        // =>  TRUE
[00:54:32.335]      <control if="isSWJ" while="" timeout="0" info="">
[00:54:32.335]        // if-block "isSWJ"
[00:54:32.336]          // =>  TRUE
[00:54:32.336]        <control if="hasDormant" while="" timeout="0" info="">
[00:54:32.336]          // if-block "hasDormant"
[00:54:32.336]            // =>  FALSE
[00:54:32.336]          // skip if-block "hasDormant"
[00:54:32.336]        </control>
[00:54:32.336]        <control if="!hasDormant" while="" timeout="0" info="">
[00:54:32.336]          // if-block "!hasDormant"
[00:54:32.336]            // =>  TRUE
[00:54:32.336]          <block atomic="false" info="">
[00:54:32.336]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:54:32.338]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:54:32.338]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:54:32.339]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:54:32.339]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:54:32.341]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:54:32.341]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:54:32.342]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:54:32.342]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:54:32.343]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:54:32.343]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:54:32.343]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:54:32.343]          </block>
[00:54:32.343]          // end if-block "!hasDormant"
[00:54:32.346]        </control>
[00:54:32.346]        // end if-block "isSWJ"
[00:54:32.346]      </control>
[00:54:32.346]      <control if="!isSWJ" while="" timeout="0" info="">
[00:54:32.346]        // if-block "!isSWJ"
[00:54:32.346]          // =>  FALSE
[00:54:32.346]        // skip if-block "!isSWJ"
[00:54:32.346]      </control>
[00:54:32.346]      <block atomic="false" info="">
[00:54:32.346]        ReadDP(0x0);
[00:54:32.348]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:54:32.348]      </block>
[00:54:32.348]      // end if-block "protType == 2"
[00:54:32.348]    </control>
[00:54:32.348]  </sequence>
[00:54:32.348]  
[00:54:32.349]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:54:32.349]  
[00:54:32.349]  <debugvars>
[00:54:32.352]    // Pre-defined
[00:54:32.352]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:54:32.352]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:54:32.352]    __dp=0x00000000
[00:54:32.352]    __ap=0x00000000
[00:54:32.352]    __traceout=0x00000000      (Trace Disabled)
[00:54:32.352]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:54:32.352]    __FlashAddr=0x00000000
[00:54:32.352]    __FlashLen=0x00000000
[00:54:32.352]    __FlashArg=0x00000000
[00:54:32.352]    __FlashOp=0x00000000
[00:54:32.353]    __Result=0x00000000
[00:54:32.353]  </debugvars>
[00:54:32.353]  
[00:54:32.353]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:54:32.353]    <block atomic="false" info="">
[00:54:32.353]      __var SW_DP_ABORT       = 0x0;
[00:54:32.353]        // -> [SW_DP_ABORT <= 0x00000000]
[00:54:32.353]      __var DP_CTRL_STAT      = 0x4;
[00:54:32.353]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:54:32.353]      __var DP_SELECT         = 0x8;
[00:54:32.353]        // -> [DP_SELECT <= 0x00000008]
[00:54:32.353]      __var powered_down      = 0;
[00:54:32.353]        // -> [powered_down <= 0x00000000]
[00:54:32.354]      WriteDP(DP_SELECT, 0x00000000);
[00:54:32.355]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:54:32.355]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:54:32.357]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:54:32.357]        // -> [powered_down <= 0x00000001]
[00:54:32.357]    </block>
[00:54:32.357]    <control if="powered_down" while="" timeout="0" info="">
[00:54:32.357]      // if-block "powered_down"
[00:54:32.357]        // =>  TRUE
[00:54:32.358]      <block atomic="false" info="">
[00:54:32.358]        Message(0, "Debug/System power-up request sent");
[00:54:32.360]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:54:32.362]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:54:32.362]      </block>
[00:54:32.362]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:54:32.362]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:54:32.363]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:54:32.363]        // while-condition  =>  FALSE
[00:54:32.363]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:54:32.365]      </control>
[00:54:32.365]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:54:32.365]        // if-block "(__protocol & 0xFFFF) == 1"
[00:54:32.365]          // =>  FALSE
[00:54:32.365]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:54:32.365]      </control>
[00:54:32.365]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:54:32.365]        // if-block "(__protocol & 0xFFFF) == 2"
[00:54:32.366]          // =>  TRUE
[00:54:32.366]        <block atomic="false" info="">
[00:54:32.366]          Message(0, "executing SWD power up");
[00:54:32.367]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:54:32.369]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:54:32.369]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:54:32.369]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:54:32.369]        </block>
[00:54:32.369]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:54:32.369]      </control>
[00:54:32.369]      // end if-block "powered_down"
[00:54:32.369]    </control>
[00:54:32.369]    <block atomic="false" info="">
[00:54:32.369]      __var DEBUG_PORT_VAL    = 0;
[00:54:32.369]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:54:32.369]      __var ACCESS_POINT_VAL  = 0;
[00:54:32.369]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:54:32.369]      __ap = 1; 
[00:54:32.369]        // -> [__ap <= 0x00000001]
[00:54:32.369]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:54:32.369]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:54:32.369]      __ap = 4;
[00:54:32.369]        // -> [__ap <= 0x00000004]
[00:54:32.369]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:54:32.380]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:54:32.380]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:54:32.380]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:54:32.380]    </block>
[00:54:32.380]    <block atomic="false" info="">
[00:54:32.380]      __var nReset = 0x80;
[00:54:32.380]        // -> [nReset <= 0x00000080]
[00:54:32.380]      __var canReadPins = 0;
[00:54:32.380]        // -> [canReadPins <= 0x00000000]
[00:54:32.380]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:54:32.388]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:54:32.388]        // -> [canReadPins <= 0x00000001]
[00:54:32.388]    </block>
[00:54:32.388]    <control if="" while="1" timeout="200" info="">
[00:54:32.388]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.390]      // while "1"  (timeout="200")
[00:54:32.390]      // while-condition  =>  TRUE
[00:54:32.393]      // while "1"  (timeout="200")
[00:54:32.393]      // while  =>  TIMEOUT
[00:54:32.393]      // end while "1"
[00:54:32.393]    </control>
[00:54:32.393]    <control if="canReadPins" while="" timeout="0" info="">
[00:54:32.393]      // if-block "canReadPins"
[00:54:32.393]        // =>  TRUE
[00:54:32.393]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:54:32.393]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:54:32.395]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:54:32.395]        // while-condition  =>  FALSE
[00:54:32.395]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:54:32.395]      </control>
[00:54:32.395]      // end if-block "canReadPins"
[00:54:32.395]    </control>
[00:54:32.395]    <control if="!canReadPins" while="" timeout="0" info="">
[00:54:32.395]      // if-block "!canReadPins"
[00:54:32.395]        // =>  FALSE
[00:54:32.395]      // skip if-block "!canReadPins"
[00:54:32.395]    </control>
[00:54:32.395]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:54:32.395]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:54:32.395]        // =>  TRUE
[00:54:32.395]      <block atomic="false" info="">
[00:54:32.395]        WriteAP(0x00, 0x190008);
[00:54:32.398]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:54:32.398]        WriteAP(0xF0, 0x01);
[00:54:32.401]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:54:32.401]      </block>
[00:54:32.401]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:54:32.401]    </control>
[00:54:32.401]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:54:32.401]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:54:32.401]        // =>  FALSE
[00:54:32.401]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:54:32.401]    </control>
[00:54:32.403]    <block atomic="false" info="">
[00:54:32.403]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:54:32.406]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:54:32.406]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:54:32.406]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:54:32.407]      __ap = 0; //lets make sure we reset the access point selection
[00:54:32.407]        // -> [__ap <= 0x00000000]
[00:54:32.408]    </block>
[00:54:32.408]  </sequence>
[00:54:32.408]  
[00:54:32.437]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:54:32.437]  
[00:54:32.437]  <debugvars>
[00:54:32.437]    // Pre-defined
[00:54:32.437]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:54:32.437]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:54:32.437]    __dp=0x00000000
[00:54:32.437]    __ap=0x00000000
[00:54:32.437]    __traceout=0x00000000      (Trace Disabled)
[00:54:32.437]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:54:32.437]    __FlashAddr=0x00000000
[00:54:32.438]    __FlashLen=0x00000000
[00:54:32.438]    __FlashArg=0x00000000
[00:54:32.438]    __FlashOp=0x00000000
[00:54:32.438]    __Result=0x00000000
[00:54:32.438]  </debugvars>
[00:54:32.438]  
[00:54:32.438]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:54:32.439]    <block atomic="false" info="">
[00:54:32.439]      __var deviceID = 0;
[00:54:32.439]        // -> [deviceID <= 0x00000000]
[00:54:32.439]      __var version = 0;
[00:54:32.439]        // -> [version <= 0x00000000]
[00:54:32.439]      __var partNum = 0;
[00:54:32.439]        // -> [partNum <= 0x00000000]
[00:54:32.439]      __var manuf = 0;
[00:54:32.439]        // -> [manuf <= 0x00000000]
[00:54:32.439]      __var isMSPM0G1X0X_G3X0X = 0;
[00:54:32.439]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:54:32.439]      __var isProduction = 0;
[00:54:32.439]        // -> [isProduction <= 0x00000000]
[00:54:32.439]      __var continueId = 0;
[00:54:32.439]        // -> [continueId <= 0x00000000]
[00:54:32.439]      deviceID =   Read32(0x41C40004);
[00:54:32.445]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:54:32.445]        // -> [deviceID <= 0x2BB8802F]
[00:54:32.445]      version = deviceID >> 28;
[00:54:32.445]        // -> [version <= 0x00000002]
[00:54:32.445]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:54:32.445]        // -> [partNum <= 0x0000BB88]
[00:54:32.446]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:54:32.446]        // -> [manuf <= 0x00000017]
[00:54:32.446]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:54:32.446]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:54:32.446]      isProduction = (version > 0);
[00:54:32.446]        // -> [isProduction <= 0x00000001]
[00:54:32.446]    </block>
[00:54:32.446]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:54:32.446]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:54:32.446]        // =>  FALSE
[00:54:32.446]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:54:32.446]    </control>
[00:54:32.447]    <control if="continueId == 4" while="" timeout="0" info="">
[00:54:32.447]      // if-block "continueId == 4"
[00:54:32.447]        // =>  FALSE
[00:54:32.447]      // skip if-block "continueId == 4"
[00:54:32.447]    </control>
[00:54:32.447]    <control if="!isProduction" while="" timeout="0" info="">
[00:54:32.447]      // if-block "!isProduction"
[00:54:32.447]        // =>  FALSE
[00:54:32.447]      // skip if-block "!isProduction"
[00:54:32.447]    </control>
[00:54:32.447]  </sequence>
[00:54:32.448]  
[00:54:58.188]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:54:58.188]  
[00:54:58.197]  <debugvars>
[00:54:58.197]    // Pre-defined
[00:54:58.197]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:54:58.197]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:54:58.197]    __dp=0x00000000
[00:54:58.197]    __ap=0x00000000
[00:54:58.197]    __traceout=0x00000000      (Trace Disabled)
[00:54:58.197]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:54:58.197]    __FlashAddr=0x00000000
[00:54:58.197]    __FlashLen=0x00000000
[00:54:58.197]    __FlashArg=0x00000000
[00:54:58.197]    __FlashOp=0x00000000
[00:54:58.197]    __Result=0x00000000
[00:54:58.197]  </debugvars>
[00:54:58.197]  
[00:54:58.197]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:54:58.197]    <block atomic="false" info="">
[00:54:58.197]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:54:58.197]        // -> [isSWJ <= 0x00000001]
[00:54:58.200]      __var hasDormant = __protocol & 0x00020000;
[00:54:58.200]        // -> [hasDormant <= 0x00000000]
[00:54:58.200]      __var protType   = __protocol & 0x0000FFFF;
[00:54:58.200]        // -> [protType <= 0x00000002]
[00:54:58.200]    </block>
[00:54:58.200]    <control if="protType == 1" while="" timeout="0" info="">
[00:54:58.200]      // if-block "protType == 1"
[00:54:58.200]        // =>  FALSE
[00:54:58.200]      // skip if-block "protType == 1"
[00:54:58.200]    </control>
[00:54:58.200]    <control if="protType == 2" while="" timeout="0" info="">
[00:54:58.200]      // if-block "protType == 2"
[00:54:58.200]        // =>  TRUE
[00:54:58.202]      <control if="isSWJ" while="" timeout="0" info="">
[00:54:58.202]        // if-block "isSWJ"
[00:54:58.202]          // =>  TRUE
[00:54:58.202]        <control if="hasDormant" while="" timeout="0" info="">
[00:54:58.202]          // if-block "hasDormant"
[00:54:58.202]            // =>  FALSE
[00:54:58.202]          // skip if-block "hasDormant"
[00:54:58.202]        </control>
[00:54:58.202]        <control if="!hasDormant" while="" timeout="0" info="">
[00:54:58.202]          // if-block "!hasDormant"
[00:54:58.202]            // =>  TRUE
[00:54:58.202]          <block atomic="false" info="">
[00:54:58.202]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:54:58.204]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:54:58.204]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:54:58.206]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:54:58.206]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:54:58.207]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:54:58.207]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:54:58.209]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:54:58.209]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:54:58.210]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:54:58.211]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:54:58.212]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:54:58.212]          </block>
[00:54:58.212]          // end if-block "!hasDormant"
[00:54:58.212]        </control>
[00:54:58.212]        // end if-block "isSWJ"
[00:54:58.212]      </control>
[00:54:58.212]      <control if="!isSWJ" while="" timeout="0" info="">
[00:54:58.212]        // if-block "!isSWJ"
[00:54:58.212]          // =>  FALSE
[00:54:58.212]        // skip if-block "!isSWJ"
[00:54:58.212]      </control>
[00:54:58.212]      <block atomic="false" info="">
[00:54:58.212]        ReadDP(0x0);
[00:54:58.215]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:54:58.215]      </block>
[00:54:58.215]      // end if-block "protType == 2"
[00:54:58.215]    </control>
[00:54:58.215]  </sequence>
[00:54:58.215]  
[00:54:58.218]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:54:58.218]  
[00:54:58.218]  <debugvars>
[00:54:58.218]    // Pre-defined
[00:54:58.218]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:54:58.218]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:54:58.218]    __dp=0x00000000
[00:54:58.218]    __ap=0x00000000
[00:54:58.219]    __traceout=0x00000000      (Trace Disabled)
[00:54:58.219]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:54:58.219]    __FlashAddr=0x00000000
[00:54:58.219]    __FlashLen=0x00000000
[00:54:58.219]    __FlashArg=0x00000000
[00:54:58.219]    __FlashOp=0x00000000
[00:54:58.219]    __Result=0x00000000
[00:54:58.219]  </debugvars>
[00:54:58.219]  
[00:54:58.219]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:54:58.219]    <block atomic="false" info="">
[00:54:58.219]      __var SW_DP_ABORT       = 0x0;
[00:54:58.219]        // -> [SW_DP_ABORT <= 0x00000000]
[00:54:58.219]      __var DP_CTRL_STAT      = 0x4;
[00:54:58.220]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:54:58.220]      __var DP_SELECT         = 0x8;
[00:54:58.220]        // -> [DP_SELECT <= 0x00000008]
[00:54:58.220]      __var powered_down      = 0;
[00:54:58.220]        // -> [powered_down <= 0x00000000]
[00:54:58.220]      WriteDP(DP_SELECT, 0x00000000);
[00:54:58.222]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:54:58.222]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:54:58.223]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:54:58.223]        // -> [powered_down <= 0x00000001]
[00:54:58.224]    </block>
[00:54:58.224]    <control if="powered_down" while="" timeout="0" info="">
[00:54:58.224]      // if-block "powered_down"
[00:54:58.224]        // =>  TRUE
[00:54:58.224]      <block atomic="false" info="">
[00:54:58.224]        Message(0, "Debug/System power-up request sent");
[00:54:58.226]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:54:58.228]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:54:58.228]      </block>
[00:54:58.230]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:54:58.230]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:54:58.231]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:54:58.231]        // while-condition  =>  FALSE
[00:54:58.231]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:54:58.231]      </control>
[00:54:58.231]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:54:58.231]        // if-block "(__protocol & 0xFFFF) == 1"
[00:54:58.231]          // =>  FALSE
[00:54:58.232]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:54:58.232]      </control>
[00:54:58.232]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:54:58.232]        // if-block "(__protocol & 0xFFFF) == 2"
[00:54:58.232]          // =>  TRUE
[00:54:58.232]        <block atomic="false" info="">
[00:54:58.232]          Message(0, "executing SWD power up");
[00:54:58.234]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:54:58.235]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:54:58.235]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:54:58.235]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:54:58.235]        </block>
[00:54:58.235]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:54:58.238]      </control>
[00:54:58.238]      // end if-block "powered_down"
[00:54:58.238]    </control>
[00:54:58.238]    <block atomic="false" info="">
[00:54:58.238]      __var DEBUG_PORT_VAL    = 0;
[00:54:58.238]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:54:58.238]      __var ACCESS_POINT_VAL  = 0;
[00:54:58.238]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:54:58.238]      __ap = 1; 
[00:54:58.238]        // -> [__ap <= 0x00000001]
[00:54:58.238]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:54:58.241]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:54:58.241]      __ap = 4;
[00:54:58.241]        // -> [__ap <= 0x00000004]
[00:54:58.241]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:54:58.245]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:54:58.246]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:54:58.246]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:54:58.248]    </block>
[00:54:58.248]    <block atomic="false" info="">
[00:54:58.248]      __var nReset = 0x80;
[00:54:58.248]        // -> [nReset <= 0x00000080]
[00:54:58.248]      __var canReadPins = 0;
[00:54:58.248]        // -> [canReadPins <= 0x00000000]
[00:54:58.248]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:54:58.249]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:54:58.249]        // -> [canReadPins <= 0x00000001]
[00:54:58.249]    </block>
[00:54:58.249]    <control if="" while="1" timeout="200" info="">
[00:54:58.249]      // while "1"  (timeout="200")
[00:54:58.249]      // while-condition  =>  TRUE
[00:54:58.249]      // while "1"  (timeout="200")
[00:54:58.249]      // while-condition  =>  TRUE
[00:54:58.251]      // while "1"  (timeout="200")
[00:54:58.251]      // while  =>  TIMEOUT
[00:54:58.251]      // end while "1"
[00:54:58.251]    </control>
[00:54:58.251]    <control if="canReadPins" while="" timeout="0" info="">
[00:54:58.251]      // if-block "canReadPins"
[00:54:58.251]        // =>  TRUE
[00:54:58.251]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:54:58.251]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:54:58.251]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:54:58.251]        // while-condition  =>  FALSE
[00:54:58.251]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:54:58.251]      </control>
[00:54:58.251]      // end if-block "canReadPins"
[00:54:58.251]    </control>
[00:54:58.251]    <control if="!canReadPins" while="" timeout="0" info="">
[00:54:58.251]      // if-block "!canReadPins"
[00:54:58.251]        // =>  FALSE
[00:54:58.251]      // skip if-block "!canReadPins"
[00:54:58.251]    </control>
[00:54:58.251]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:54:58.251]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:54:58.251]        // =>  TRUE
[00:54:58.251]      <block atomic="false" info="">
[00:54:58.251]        WriteAP(0x00, 0x190008);
[00:54:58.255]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:54:58.255]        WriteAP(0xF0, 0x01);
[00:54:58.259]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:54:58.259]      </block>
[00:54:58.259]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:54:58.259]    </control>
[00:54:58.260]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:54:58.260]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:54:58.260]        // =>  FALSE
[00:54:58.260]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:54:58.260]    </control>
[00:54:58.260]    <block atomic="false" info="">
[00:54:58.260]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:54:58.263]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:54:58.263]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:54:58.263]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:54:58.265]      __ap = 0; //lets make sure we reset the access point selection
[00:54:58.265]        // -> [__ap <= 0x00000000]
[00:54:58.265]    </block>
[00:54:58.265]  </sequence>
[00:54:58.265]  
[00:54:58.276]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:54:58.276]  
[00:54:58.276]  <debugvars>
[00:54:58.285]    // Pre-defined
[00:54:58.285]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:54:58.285]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:54:58.285]    __dp=0x00000000
[00:54:58.285]    __ap=0x00000000
[00:54:58.285]    __traceout=0x00000000      (Trace Disabled)
[00:54:58.285]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:54:58.285]    __FlashAddr=0x00000000
[00:54:58.285]    __FlashLen=0x00000000
[00:54:58.285]    __FlashArg=0x00000000
[00:54:58.286]    __FlashOp=0x00000000
[00:54:58.286]    __Result=0x00000000
[00:54:58.286]  </debugvars>
[00:54:58.286]  
[00:54:58.286]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:54:58.286]    <block atomic="false" info="">
[00:54:58.286]      __var deviceID = 0;
[00:54:58.286]        // -> [deviceID <= 0x00000000]
[00:54:58.286]      __var version = 0;
[00:54:58.286]        // -> [version <= 0x00000000]
[00:54:58.286]      __var partNum = 0;
[00:54:58.286]        // -> [partNum <= 0x00000000]
[00:54:58.286]      __var manuf = 0;
[00:54:58.286]        // -> [manuf <= 0x00000000]
[00:54:58.286]      __var isMSPM0G1X0X_G3X0X = 0;
[00:54:58.286]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:54:58.286]      __var isProduction = 0;
[00:54:58.286]        // -> [isProduction <= 0x00000000]
[00:54:58.286]      __var continueId = 0;
[00:54:58.286]        // -> [continueId <= 0x00000000]
[00:54:58.286]      deviceID =   Read32(0x41C40004);
[00:54:58.286]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:54:58.286]        // -> [deviceID <= 0x2BB8802F]
[00:54:58.286]      version = deviceID >> 28;
[00:54:58.286]        // -> [version <= 0x00000002]
[00:54:58.286]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:54:58.286]        // -> [partNum <= 0x0000BB88]
[00:54:58.286]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:54:58.286]        // -> [manuf <= 0x00000017]
[00:54:58.286]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:54:58.286]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:54:58.295]      isProduction = (version > 0);
[00:54:58.295]        // -> [isProduction <= 0x00000001]
[00:54:58.295]    </block>
[00:54:58.295]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:54:58.295]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:54:58.295]        // =>  FALSE
[00:54:58.295]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:54:58.295]    </control>
[00:54:58.295]    <control if="continueId == 4" while="" timeout="0" info="">
[00:54:58.295]      // if-block "continueId == 4"
[00:54:58.295]        // =>  FALSE
[00:54:58.295]      // skip if-block "continueId == 4"
[00:54:58.295]    </control>
[00:54:58.295]    <control if="!isProduction" while="" timeout="0" info="">
[00:54:58.295]      // if-block "!isProduction"
[00:54:58.295]        // =>  FALSE
[00:54:58.295]      // skip if-block "!isProduction"
[00:54:58.295]    </control>
[00:54:58.295]  </sequence>
[00:54:58.295]  
[00:55:25.232]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:55:25.232]  
[00:55:25.245]  <debugvars>
[00:55:25.245]    // Pre-defined
[00:55:25.245]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:55:25.245]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:55:25.245]    __dp=0x00000000
[00:55:25.245]    __ap=0x00000000
[00:55:25.245]    __traceout=0x00000000      (Trace Disabled)
[00:55:25.245]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:55:25.245]    __FlashAddr=0x00000000
[00:55:25.245]    __FlashLen=0x00000000
[00:55:25.245]    __FlashArg=0x00000000
[00:55:25.245]    __FlashOp=0x00000000
[00:55:25.246]    __Result=0x00000000
[00:55:25.246]  </debugvars>
[00:55:25.246]  
[00:55:25.246]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:55:25.246]    <block atomic="false" info="">
[00:55:25.246]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:55:25.246]        // -> [isSWJ <= 0x00000001]
[00:55:25.246]      __var hasDormant = __protocol & 0x00020000;
[00:55:25.246]        // -> [hasDormant <= 0x00000000]
[00:55:25.246]      __var protType   = __protocol & 0x0000FFFF;
[00:55:25.246]        // -> [protType <= 0x00000002]
[00:55:25.246]    </block>
[00:55:25.246]    <control if="protType == 1" while="" timeout="0" info="">
[00:55:25.246]      // if-block "protType == 1"
[00:55:25.248]        // =>  FALSE
[00:55:25.248]      // skip if-block "protType == 1"
[00:55:25.248]    </control>
[00:55:25.248]    <control if="protType == 2" while="" timeout="0" info="">
[00:55:25.248]      // if-block "protType == 2"
[00:55:25.248]        // =>  TRUE
[00:55:25.248]      <control if="isSWJ" while="" timeout="0" info="">
[00:55:25.248]        // if-block "isSWJ"
[00:55:25.248]          // =>  TRUE
[00:55:25.248]        <control if="hasDormant" while="" timeout="0" info="">
[00:55:25.248]          // if-block "hasDormant"
[00:55:25.248]            // =>  FALSE
[00:55:25.248]          // skip if-block "hasDormant"
[00:55:25.248]        </control>
[00:55:25.248]        <control if="!hasDormant" while="" timeout="0" info="">
[00:55:25.250]          // if-block "!hasDormant"
[00:55:25.250]            // =>  TRUE
[00:55:25.250]          <block atomic="false" info="">
[00:55:25.250]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:55:25.251]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:55:25.251]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:55:25.251]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:55:25.251]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:55:25.251]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:55:25.251]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:55:25.251]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:55:25.251]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:55:25.251]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:55:25.251]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:55:25.251]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:55:25.251]          </block>
[00:55:25.251]          // end if-block "!hasDormant"
[00:55:25.251]        </control>
[00:55:25.251]        // end if-block "isSWJ"
[00:55:25.251]      </control>
[00:55:25.251]      <control if="!isSWJ" while="" timeout="0" info="">
[00:55:25.251]        // if-block "!isSWJ"
[00:55:25.251]          // =>  FALSE
[00:55:25.251]        // skip if-block "!isSWJ"
[00:55:25.251]      </control>
[00:55:25.251]      <block atomic="false" info="">
[00:55:25.251]        ReadDP(0x0);
[00:55:25.261]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:55:25.261]      </block>
[00:55:25.261]      // end if-block "protType == 2"
[00:55:25.261]    </control>
[00:55:25.261]  </sequence>
[00:55:25.261]  
[00:55:25.261]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:55:25.261]  
[00:55:25.261]  <debugvars>
[00:55:25.261]    // Pre-defined
[00:55:25.261]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:55:25.261]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:55:25.261]    __dp=0x00000000
[00:55:25.261]    __ap=0x00000000
[00:55:25.261]    __traceout=0x00000000      (Trace Disabled)
[00:55:25.261]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:55:25.261]    __FlashAddr=0x00000000
[00:55:25.261]    __FlashLen=0x00000000
[00:55:25.261]    __FlashArg=0x00000000
[00:55:25.261]    __FlashOp=0x00000000
[00:55:25.261]    __Result=0x00000000
[00:55:25.261]  </debugvars>
[00:55:25.261]  
[00:55:25.261]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:55:25.261]    <block atomic="false" info="">
[00:55:25.261]      __var SW_DP_ABORT       = 0x0;
[00:55:25.261]        // -> [SW_DP_ABORT <= 0x00000000]
[00:55:25.261]      __var DP_CTRL_STAT      = 0x4;
[00:55:25.261]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:55:25.261]      __var DP_SELECT         = 0x8;
[00:55:25.261]        // -> [DP_SELECT <= 0x00000008]
[00:55:25.261]      __var powered_down      = 0;
[00:55:25.261]        // -> [powered_down <= 0x00000000]
[00:55:25.261]      WriteDP(DP_SELECT, 0x00000000);
[00:55:25.268]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:55:25.268]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:55:25.268]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:55:25.268]        // -> [powered_down <= 0x00000001]
[00:55:25.268]    </block>
[00:55:25.268]    <control if="powered_down" while="" timeout="0" info="">
[00:55:25.268]      // if-block "powered_down"
[00:55:25.268]        // =>  TRUE
[00:55:25.268]      <block atomic="false" info="">
[00:55:25.268]        Message(0, "Debug/System power-up request sent");
[00:55:25.274]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:55:25.274]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:55:25.274]      </block>
[00:55:25.274]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:55:25.274]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:55:25.274]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:55:25.274]        // while-condition  =>  FALSE
[00:55:25.274]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:55:25.274]      </control>
[00:55:25.274]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:55:25.274]        // if-block "(__protocol & 0xFFFF) == 1"
[00:55:25.278]          // =>  FALSE
[00:55:25.278]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:55:25.278]      </control>
[00:55:25.278]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:55:25.278]        // if-block "(__protocol & 0xFFFF) == 2"
[00:55:25.278]          // =>  TRUE
[00:55:25.278]        <block atomic="false" info="">
[00:55:25.278]          Message(0, "executing SWD power up");
[00:55:25.280]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:55:25.281]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:55:25.281]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:55:25.283]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:55:25.283]        </block>
[00:55:25.283]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:55:25.283]      </control>
[00:55:25.283]      // end if-block "powered_down"
[00:55:25.283]    </control>
[00:55:25.283]    <block atomic="false" info="">
[00:55:25.283]      __var DEBUG_PORT_VAL    = 0;
[00:55:25.283]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:55:25.283]      __var ACCESS_POINT_VAL  = 0;
[00:55:25.283]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:55:25.283]      __ap = 1; 
[00:55:25.283]        // -> [__ap <= 0x00000001]
[00:55:25.283]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:55:25.283]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:55:25.283]      __ap = 4;
[00:55:25.283]        // -> [__ap <= 0x00000004]
[00:55:25.283]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:55:25.292]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:55:25.292]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:55:25.292]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:55:25.294]    </block>
[00:55:25.294]    <block atomic="false" info="">
[00:55:25.294]      __var nReset = 0x80;
[00:55:25.294]        // -> [nReset <= 0x00000080]
[00:55:25.294]      __var canReadPins = 0;
[00:55:25.294]        // -> [canReadPins <= 0x00000000]
[00:55:25.294]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:55:25.295]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:55:25.295]        // -> [canReadPins <= 0x00000001]
[00:55:25.295]    </block>
[00:55:25.295]    <control if="" while="1" timeout="200" info="">
[00:55:25.295]      // while "1"  (timeout="200")
[00:55:25.295]      // while-condition  =>  TRUE
[00:55:25.295]      // while "1"  (timeout="200")
[00:55:25.295]      // while-condition  =>  TRUE
[00:55:25.295]      // while "1"  (timeout="200")
[00:55:25.295]      // while-condition  =>  TRUE
[00:55:25.295]      // while "1"  (timeout="200")
[00:55:25.295]      // while-condition  =>  TRUE
[00:55:25.295]      // while "1"  (timeout="200")
[00:55:25.295]      // while-condition  =>  TRUE
[00:55:25.295]      // while "1"  (timeout="200")
[00:55:25.295]      // while-condition  =>  TRUE
[00:55:25.295]      // while "1"  (timeout="200")
[00:55:25.295]      // while-condition  =>  TRUE
[00:55:25.295]      // while "1"  (timeout="200")
[00:55:25.295]      // while-condition  =>  TRUE
[00:55:25.298]      // while "1"  (timeout="200")
[00:55:25.298]      // while  =>  TIMEOUT
[00:55:25.298]      // end while "1"
[00:55:25.298]    </control>
[00:55:25.298]    <control if="canReadPins" while="" timeout="0" info="">
[00:55:25.298]      // if-block "canReadPins"
[00:55:25.298]        // =>  TRUE
[00:55:25.298]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:55:25.298]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:55:25.300]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:55:25.300]        // while-condition  =>  FALSE
[00:55:25.300]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:55:25.300]      </control>
[00:55:25.300]      // end if-block "canReadPins"
[00:55:25.300]    </control>
[00:55:25.300]    <control if="!canReadPins" while="" timeout="0" info="">
[00:55:25.300]      // if-block "!canReadPins"
[00:55:25.300]        // =>  FALSE
[00:55:25.300]      // skip if-block "!canReadPins"
[00:55:25.300]    </control>
[00:55:25.300]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:55:25.300]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:55:25.302]        // =>  TRUE
[00:55:25.302]      <block atomic="false" info="">
[00:55:25.302]        WriteAP(0x00, 0x190008);
[00:55:25.304]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:55:25.304]        WriteAP(0xF0, 0x01);
[00:55:25.304]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:55:25.304]      </block>
[00:55:25.304]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:55:25.304]    </control>
[00:55:25.304]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:55:25.304]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:55:25.304]        // =>  FALSE
[00:55:25.304]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:55:25.304]    </control>
[00:55:25.304]    <block atomic="false" info="">
[00:55:25.304]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:55:25.304]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:55:25.304]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:55:25.304]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:55:25.312]      __ap = 0; //lets make sure we reset the access point selection
[00:55:25.312]        // -> [__ap <= 0x00000000]
[00:55:25.312]    </block>
[00:55:25.312]  </sequence>
[00:55:25.312]  
[00:55:25.332]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:55:25.332]  
[00:55:25.332]  <debugvars>
[00:55:25.332]    // Pre-defined
[00:55:25.332]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:55:25.332]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:55:25.332]    __dp=0x00000000
[00:55:25.332]    __ap=0x00000000
[00:55:25.332]    __traceout=0x00000000      (Trace Disabled)
[00:55:25.332]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:55:25.332]    __FlashAddr=0x00000000
[00:55:25.332]    __FlashLen=0x00000000
[00:55:25.332]    __FlashArg=0x00000000
[00:55:25.332]    __FlashOp=0x00000000
[00:55:25.332]    __Result=0x00000000
[00:55:25.332]  </debugvars>
[00:55:25.332]  
[00:55:25.332]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:55:25.332]    <block atomic="false" info="">
[00:55:25.332]      __var deviceID = 0;
[00:55:25.332]        // -> [deviceID <= 0x00000000]
[00:55:25.332]      __var version = 0;
[00:55:25.332]        // -> [version <= 0x00000000]
[00:55:25.332]      __var partNum = 0;
[00:55:25.332]        // -> [partNum <= 0x00000000]
[00:55:25.332]      __var manuf = 0;
[00:55:25.332]        // -> [manuf <= 0x00000000]
[00:55:25.332]      __var isMSPM0G1X0X_G3X0X = 0;
[00:55:25.332]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:55:25.332]      __var isProduction = 0;
[00:55:25.332]        // -> [isProduction <= 0x00000000]
[00:55:25.332]      __var continueId = 0;
[00:55:25.332]        // -> [continueId <= 0x00000000]
[00:55:25.332]      deviceID =   Read32(0x41C40004);
[00:55:25.342]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:55:25.342]        // -> [deviceID <= 0x2BB8802F]
[00:55:25.342]      version = deviceID >> 28;
[00:55:25.342]        // -> [version <= 0x00000002]
[00:55:25.342]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:55:25.342]        // -> [partNum <= 0x0000BB88]
[00:55:25.342]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:55:25.342]        // -> [manuf <= 0x00000017]
[00:55:25.342]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:55:25.342]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:55:25.342]      isProduction = (version > 0);
[00:55:25.342]        // -> [isProduction <= 0x00000001]
[00:55:25.342]    </block>
[00:55:25.342]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:55:25.342]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:55:25.342]        // =>  FALSE
[00:55:25.342]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:55:25.342]    </control>
[00:55:25.342]    <control if="continueId == 4" while="" timeout="0" info="">
[00:55:25.342]      // if-block "continueId == 4"
[00:55:25.342]        // =>  FALSE
[00:55:25.342]      // skip if-block "continueId == 4"
[00:55:25.342]    </control>
[00:55:25.342]    <control if="!isProduction" while="" timeout="0" info="">
[00:55:25.342]      // if-block "!isProduction"
[00:55:25.342]        // =>  FALSE
[00:55:25.342]      // skip if-block "!isProduction"
[00:55:25.342]    </control>
[00:55:25.342]  </sequence>
[00:55:25.342]  
[00:56:19.011]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:56:19.011]  
[00:56:19.011]  <debugvars>
[00:56:19.011]    // Pre-defined
[00:56:19.011]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:19.021]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:19.021]    __dp=0x00000000
[00:56:19.021]    __ap=0x00000000
[00:56:19.021]    __traceout=0x00000000      (Trace Disabled)
[00:56:19.021]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:19.021]    __FlashAddr=0x00000000
[00:56:19.021]    __FlashLen=0x00000000
[00:56:19.021]    __FlashArg=0x00000000
[00:56:19.021]    __FlashOp=0x00000000
[00:56:19.021]    __Result=0x00000000
[00:56:19.021]  </debugvars>
[00:56:19.021]  
[00:56:19.021]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:56:19.021]    <block atomic="false" info="">
[00:56:19.021]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:56:19.023]        // -> [isSWJ <= 0x00000001]
[00:56:19.023]      __var hasDormant = __protocol & 0x00020000;
[00:56:19.023]        // -> [hasDormant <= 0x00000000]
[00:56:19.023]      __var protType   = __protocol & 0x0000FFFF;
[00:56:19.023]        // -> [protType <= 0x00000002]
[00:56:19.023]    </block>
[00:56:19.023]    <control if="protType == 1" while="" timeout="0" info="">
[00:56:19.023]      // if-block "protType == 1"
[00:56:19.023]        // =>  FALSE
[00:56:19.023]      // skip if-block "protType == 1"
[00:56:19.023]    </control>
[00:56:19.023]    <control if="protType == 2" while="" timeout="0" info="">
[00:56:19.023]      // if-block "protType == 2"
[00:56:19.024]        // =>  TRUE
[00:56:19.024]      <control if="isSWJ" while="" timeout="0" info="">
[00:56:19.024]        // if-block "isSWJ"
[00:56:19.024]          // =>  TRUE
[00:56:19.024]        <control if="hasDormant" while="" timeout="0" info="">
[00:56:19.024]          // if-block "hasDormant"
[00:56:19.024]            // =>  FALSE
[00:56:19.024]          // skip if-block "hasDormant"
[00:56:19.024]        </control>
[00:56:19.024]        <control if="!hasDormant" while="" timeout="0" info="">
[00:56:19.024]          // if-block "!hasDormant"
[00:56:19.026]            // =>  TRUE
[00:56:19.026]          <block atomic="false" info="">
[00:56:19.026]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:56:19.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:19.028]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:56:19.028]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:56:19.028]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:56:19.028]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:19.028]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:56:19.032]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:56:19.032]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:56:19.032]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:56:19.032]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:56:19.032]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:56:19.032]          </block>
[00:56:19.032]          // end if-block "!hasDormant"
[00:56:19.032]        </control>
[00:56:19.032]        // end if-block "isSWJ"
[00:56:19.032]      </control>
[00:56:19.032]      <control if="!isSWJ" while="" timeout="0" info="">
[00:56:19.032]        // if-block "!isSWJ"
[00:56:19.032]          // =>  FALSE
[00:56:19.032]        // skip if-block "!isSWJ"
[00:56:19.032]      </control>
[00:56:19.032]      <block atomic="false" info="">
[00:56:19.032]        ReadDP(0x0);
[00:56:19.032]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:56:19.032]      </block>
[00:56:19.032]      // end if-block "protType == 2"
[00:56:19.032]    </control>
[00:56:19.032]  </sequence>
[00:56:19.032]  
[00:56:19.032]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:56:19.032]  
[00:56:19.032]  <debugvars>
[00:56:19.032]    // Pre-defined
[00:56:19.032]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:19.032]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:19.032]    __dp=0x00000000
[00:56:19.042]    __ap=0x00000000
[00:56:19.042]    __traceout=0x00000000      (Trace Disabled)
[00:56:19.042]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:19.042]    __FlashAddr=0x00000000
[00:56:19.042]    __FlashLen=0x00000000
[00:56:19.042]    __FlashArg=0x00000000
[00:56:19.042]    __FlashOp=0x00000000
[00:56:19.043]    __Result=0x00000000
[00:56:19.043]  </debugvars>
[00:56:19.043]  
[00:56:19.043]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:56:19.043]    <block atomic="false" info="">
[00:56:19.043]      __var SW_DP_ABORT       = 0x0;
[00:56:19.043]        // -> [SW_DP_ABORT <= 0x00000000]
[00:56:19.043]      __var DP_CTRL_STAT      = 0x4;
[00:56:19.043]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:56:19.043]      __var DP_SELECT         = 0x8;
[00:56:19.043]        // -> [DP_SELECT <= 0x00000008]
[00:56:19.043]      __var powered_down      = 0;
[00:56:19.043]        // -> [powered_down <= 0x00000000]
[00:56:19.044]      WriteDP(DP_SELECT, 0x00000000);
[00:56:19.044]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:56:19.044]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:56:19.044]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:56:19.044]        // -> [powered_down <= 0x00000001]
[00:56:19.044]    </block>
[00:56:19.044]    <control if="powered_down" while="" timeout="0" info="">
[00:56:19.044]      // if-block "powered_down"
[00:56:19.044]        // =>  TRUE
[00:56:19.044]      <block atomic="false" info="">
[00:56:19.044]        Message(0, "Debug/System power-up request sent");
[00:56:19.044]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:56:19.044]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:56:19.052]      </block>
[00:56:19.052]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:56:19.052]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:56:19.052]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:56:19.052]        // while-condition  =>  FALSE
[00:56:19.052]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:56:19.052]      </control>
[00:56:19.052]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:56:19.052]        // if-block "(__protocol & 0xFFFF) == 1"
[00:56:19.052]          // =>  FALSE
[00:56:19.052]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:56:19.052]      </control>
[00:56:19.052]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:56:19.052]        // if-block "(__protocol & 0xFFFF) == 2"
[00:56:19.052]          // =>  TRUE
[00:56:19.052]        <block atomic="false" info="">
[00:56:19.052]          Message(0, "executing SWD power up");
[00:56:19.056]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:56:19.056]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:56:19.056]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:56:19.056]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:56:19.056]        </block>
[00:56:19.056]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:56:19.056]      </control>
[00:56:19.056]      // end if-block "powered_down"
[00:56:19.056]    </control>
[00:56:19.056]    <block atomic="false" info="">
[00:56:19.056]      __var DEBUG_PORT_VAL    = 0;
[00:56:19.056]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:56:19.056]      __var ACCESS_POINT_VAL  = 0;
[00:56:19.056]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:56:19.062]      __ap = 1; 
[00:56:19.062]        // -> [__ap <= 0x00000001]
[00:56:19.062]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:56:19.063]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:56:19.063]      __ap = 4;
[00:56:19.063]        // -> [__ap <= 0x00000004]
[00:56:19.063]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:56:19.063]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:56:19.063]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:56:19.063]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:56:19.063]    </block>
[00:56:19.063]    <block atomic="false" info="">
[00:56:19.063]      __var nReset = 0x80;
[00:56:19.063]        // -> [nReset <= 0x00000080]
[00:56:19.063]      __var canReadPins = 0;
[00:56:19.063]        // -> [canReadPins <= 0x00000000]
[00:56:19.063]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:56:19.072]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:56:19.073]        // -> [canReadPins <= 0x00000001]
[00:56:19.073]    </block>
[00:56:19.073]    <control if="" while="1" timeout="200" info="">
[00:56:19.073]      // while "1"  (timeout="200")
[00:56:19.073]      // while-condition  =>  TRUE
[00:56:19.073]      // while "1"  (timeout="200")
[00:56:19.073]      // while-condition  =>  TRUE
[00:56:19.073]      // while "1"  (timeout="200")
[00:56:19.073]      // while-condition  =>  TRUE
[00:56:19.073]      // while "1"  (timeout="200")
[00:56:19.073]      // while-condition  =>  TRUE
[00:56:19.073]      // while "1"  (timeout="200")
[00:56:19.073]      // while-condition  =>  TRUE
[00:56:19.073]      // while "1"  (timeout="200")
[00:56:19.073]      // while-condition  =>  TRUE
[00:56:19.073]      // while "1"  (timeout="200")
[00:56:19.075]      // while-condition  =>  TRUE
[00:56:19.075]      // while "1"  (timeout="200")
[00:56:19.075]      // while-condition  =>  TRUE
[00:56:19.075]      // while "1"  (timeout="200")
[00:56:19.075]      // while-condition  =>  TRUE
[00:56:19.075]      // while "1"  (timeout="200")
[00:56:19.075]      // while-condition  =>  TRUE
[00:56:19.075]      // while "1"  (timeout="200")
[00:56:19.075]      // while-condition  =>  TRUE
[00:56:19.075]      // while "1"  (timeout="200")
[00:56:19.075]      // while-condition  =>  TRUE
[00:56:19.075]      // while "1"  (timeout="200")
[00:56:19.075]      // while-condition  =>  TRUE
[00:56:19.076]      // while "1"  (timeout="200")
[00:56:19.076]      // while-condition  =>  TRUE
[00:56:19.076]      // while "1"  (timeout="200")
[00:56:19.076]      // while-condition  =>  TRUE
[00:56:19.076]      // while "1"  (timeout="200")
[00:56:19.076]      // while-condition  =>  TRUE
[00:56:19.076]      // while "1"  (timeout="200")
[00:56:19.076]      // while-condition  =>  TRUE
[00:56:19.076]      // while "1"  (timeout="200")
[00:56:19.076]      // while-condition  =>  TRUE
[00:56:19.076]      // while "1"  (timeout="200")
[00:56:19.076]      // while-condition  =>  TRUE
[00:56:19.076]      // while "1"  (timeout="200")
[00:56:19.076]      // while-condition  =>  TRUE
[00:56:19.076]      // while "1"  (timeout="200")
[00:56:19.076]      // while-condition  =>  TRUE
[00:56:19.076]      // while "1"  (timeout="200")
[00:56:19.076]      // while-condition  =>  TRUE
[00:56:19.076]      // while "1"  (timeout="200")
[00:56:19.076]      // while-condition  =>  TRUE
[00:56:19.076]      // while "1"  (timeout="200")
[00:56:19.076]      // while-condition  =>  TRUE
[00:56:19.076]      // while "1"  (timeout="200")
[00:56:19.076]      // while-condition  =>  TRUE
[00:56:19.076]      // while "1"  (timeout="200")
[00:56:19.076]      // while-condition  =>  TRUE
[00:56:19.079]      // while "1"  (timeout="200")
[00:56:19.079]      // while  =>  TIMEOUT
[00:56:19.079]      // end while "1"
[00:56:19.079]    </control>
[00:56:19.079]    <control if="canReadPins" while="" timeout="0" info="">
[00:56:19.079]      // if-block "canReadPins"
[00:56:19.079]        // =>  TRUE
[00:56:19.079]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:56:19.081]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:56:19.081]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:56:19.082]        // while-condition  =>  FALSE
[00:56:19.082]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:56:19.082]      </control>
[00:56:19.083]      // end if-block "canReadPins"
[00:56:19.083]    </control>
[00:56:19.083]    <control if="!canReadPins" while="" timeout="0" info="">
[00:56:19.083]      // if-block "!canReadPins"
[00:56:19.083]        // =>  FALSE
[00:56:19.083]      // skip if-block "!canReadPins"
[00:56:19.083]    </control>
[00:56:19.083]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:56:19.083]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:56:19.083]        // =>  TRUE
[00:56:19.083]      <block atomic="false" info="">
[00:56:19.083]        WriteAP(0x00, 0x190008);
[00:56:19.085]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:56:19.085]        WriteAP(0xF0, 0x01);
[00:56:19.090]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:56:19.090]      </block>
[00:56:19.090]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:56:19.090]    </control>
[00:56:19.090]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:56:19.090]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:56:19.091]        // =>  FALSE
[00:56:19.091]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:56:19.091]    </control>
[00:56:19.091]    <block atomic="false" info="">
[00:56:19.091]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:56:19.092]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:56:19.092]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:56:19.092]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:56:19.096]      __ap = 0; //lets make sure we reset the access point selection
[00:56:19.096]        // -> [__ap <= 0x00000000]
[00:56:19.096]    </block>
[00:56:19.096]  </sequence>
[00:56:19.096]  
[00:56:19.116]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:56:19.116]  
[00:56:19.116]  <debugvars>
[00:56:19.116]    // Pre-defined
[00:56:19.116]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:56:19.116]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:56:19.116]    __dp=0x00000000
[00:56:19.116]    __ap=0x00000000
[00:56:19.121]    __traceout=0x00000000      (Trace Disabled)
[00:56:19.121]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:56:19.121]    __FlashAddr=0x00000000
[00:56:19.121]    __FlashLen=0x00000000
[00:56:19.121]    __FlashArg=0x00000000
[00:56:19.121]    __FlashOp=0x00000000
[00:56:19.121]    __Result=0x00000000
[00:56:19.121]  </debugvars>
[00:56:19.121]  
[00:56:19.121]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:56:19.121]    <block atomic="false" info="">
[00:56:19.121]      __var deviceID = 0;
[00:56:19.121]        // -> [deviceID <= 0x00000000]
[00:56:19.121]      __var version = 0;
[00:56:19.121]        // -> [version <= 0x00000000]
[00:56:19.121]      __var partNum = 0;
[00:56:19.121]        // -> [partNum <= 0x00000000]
[00:56:19.121]      __var manuf = 0;
[00:56:19.121]        // -> [manuf <= 0x00000000]
[00:56:19.121]      __var isMSPM0G1X0X_G3X0X = 0;
[00:56:19.121]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:56:19.124]      __var isProduction = 0;
[00:56:19.124]        // -> [isProduction <= 0x00000000]
[00:56:19.124]      __var continueId = 0;
[00:56:19.124]        // -> [continueId <= 0x00000000]
[00:56:19.124]      deviceID =   Read32(0x41C40004);
[00:56:19.125]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:56:19.125]        // -> [deviceID <= 0x2BB8802F]
[00:56:19.125]      version = deviceID >> 28;
[00:56:19.125]        // -> [version <= 0x00000002]
[00:56:19.125]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:56:19.125]        // -> [partNum <= 0x0000BB88]
[00:56:19.125]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:56:19.125]        // -> [manuf <= 0x00000017]
[00:56:19.125]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:56:19.125]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:56:19.125]      isProduction = (version > 0);
[00:56:19.125]        // -> [isProduction <= 0x00000001]
[00:56:19.125]    </block>
[00:56:19.125]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:56:19.125]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:56:19.125]        // =>  FALSE
[00:56:19.125]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:56:19.125]    </control>
[00:56:19.125]    <control if="continueId == 4" while="" timeout="0" info="">
[00:56:19.125]      // if-block "continueId == 4"
[00:56:19.125]        // =>  FALSE
[00:56:19.125]      // skip if-block "continueId == 4"
[00:56:19.125]    </control>
[00:56:19.133]    <control if="!isProduction" while="" timeout="0" info="">
[00:56:19.133]      // if-block "!isProduction"
[00:56:19.133]        // =>  FALSE
[00:56:19.133]      // skip if-block "!isProduction"
[00:56:19.133]    </control>
[00:56:19.134]  </sequence>
[00:56:19.134]  
[00:57:00.349]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:57:00.349]  
[00:57:00.359]  <debugvars>
[00:57:00.359]    // Pre-defined
[00:57:00.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:00.359]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:00.359]    __dp=0x00000000
[00:57:00.359]    __ap=0x00000000
[00:57:00.359]    __traceout=0x00000000      (Trace Disabled)
[00:57:00.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:00.359]    __FlashAddr=0x00000000
[00:57:00.359]    __FlashLen=0x00000000
[00:57:00.359]    __FlashArg=0x00000000
[00:57:00.359]    __FlashOp=0x00000000
[00:57:00.359]    __Result=0x00000000
[00:57:00.359]  </debugvars>
[00:57:00.359]  
[00:57:00.359]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:57:00.359]    <block atomic="false" info="">
[00:57:00.359]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:57:00.359]        // -> [isSWJ <= 0x00000001]
[00:57:00.359]      __var hasDormant = __protocol & 0x00020000;
[00:57:00.359]        // -> [hasDormant <= 0x00000000]
[00:57:00.359]      __var protType   = __protocol & 0x0000FFFF;
[00:57:00.359]        // -> [protType <= 0x00000002]
[00:57:00.362]    </block>
[00:57:00.362]    <control if="protType == 1" while="" timeout="0" info="">
[00:57:00.362]      // if-block "protType == 1"
[00:57:00.362]        // =>  FALSE
[00:57:00.362]      // skip if-block "protType == 1"
[00:57:00.362]    </control>
[00:57:00.362]    <control if="protType == 2" while="" timeout="0" info="">
[00:57:00.362]      // if-block "protType == 2"
[00:57:00.362]        // =>  TRUE
[00:57:00.362]      <control if="isSWJ" while="" timeout="0" info="">
[00:57:00.362]        // if-block "isSWJ"
[00:57:00.362]          // =>  TRUE
[00:57:00.362]        <control if="hasDormant" while="" timeout="0" info="">
[00:57:00.362]          // if-block "hasDormant"
[00:57:00.362]            // =>  FALSE
[00:57:00.364]          // skip if-block "hasDormant"
[00:57:00.364]        </control>
[00:57:00.364]        <control if="!hasDormant" while="" timeout="0" info="">
[00:57:00.364]          // if-block "!hasDormant"
[00:57:00.364]            // =>  TRUE
[00:57:00.364]          <block atomic="false" info="">
[00:57:00.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:57:00.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:00.365]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:57:00.367]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:57:00.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:57:00.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:00.369]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:57:00.369]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:57:00.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:57:00.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:00.369]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:57:00.372]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:57:00.372]          </block>
[00:57:00.372]          // end if-block "!hasDormant"
[00:57:00.372]        </control>
[00:57:00.372]        // end if-block "isSWJ"
[00:57:00.372]      </control>
[00:57:00.372]      <control if="!isSWJ" while="" timeout="0" info="">
[00:57:00.372]        // if-block "!isSWJ"
[00:57:00.372]          // =>  FALSE
[00:57:00.372]        // skip if-block "!isSWJ"
[00:57:00.372]      </control>
[00:57:00.372]      <block atomic="false" info="">
[00:57:00.372]        ReadDP(0x0);
[00:57:00.372]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:57:00.372]      </block>
[00:57:00.372]      // end if-block "protType == 2"
[00:57:00.372]    </control>
[00:57:00.372]  </sequence>
[00:57:00.372]  
[00:57:00.379]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:57:00.379]  
[00:57:00.379]  <debugvars>
[00:57:00.379]    // Pre-defined
[00:57:00.379]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:00.379]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:00.379]    __dp=0x00000000
[00:57:00.379]    __ap=0x00000000
[00:57:00.379]    __traceout=0x00000000      (Trace Disabled)
[00:57:00.379]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:00.379]    __FlashAddr=0x00000000
[00:57:00.379]    __FlashLen=0x00000000
[00:57:00.379]    __FlashArg=0x00000000
[00:57:00.379]    __FlashOp=0x00000000
[00:57:00.379]    __Result=0x00000000
[00:57:00.379]  </debugvars>
[00:57:00.379]  
[00:57:00.379]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:57:00.379]    <block atomic="false" info="">
[00:57:00.382]      __var SW_DP_ABORT       = 0x0;
[00:57:00.382]        // -> [SW_DP_ABORT <= 0x00000000]
[00:57:00.382]      __var DP_CTRL_STAT      = 0x4;
[00:57:00.382]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:57:00.382]      __var DP_SELECT         = 0x8;
[00:57:00.382]        // -> [DP_SELECT <= 0x00000008]
[00:57:00.382]      __var powered_down      = 0;
[00:57:00.382]        // -> [powered_down <= 0x00000000]
[00:57:00.382]      WriteDP(DP_SELECT, 0x00000000);
[00:57:00.382]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:57:00.382]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:57:00.382]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:57:00.382]        // -> [powered_down <= 0x00000001]
[00:57:00.382]    </block>
[00:57:00.382]    <control if="powered_down" while="" timeout="0" info="">
[00:57:00.382]      // if-block "powered_down"
[00:57:00.382]        // =>  TRUE
[00:57:00.382]      <block atomic="false" info="">
[00:57:00.382]        Message(0, "Debug/System power-up request sent");
[00:57:00.389]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:57:00.392]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:57:00.393]      </block>
[00:57:00.393]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:57:00.393]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:57:00.395]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:57:00.395]        // while-condition  =>  FALSE
[00:57:00.395]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:57:00.395]      </control>
[00:57:00.395]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:57:00.395]        // if-block "(__protocol & 0xFFFF) == 1"
[00:57:00.396]          // =>  FALSE
[00:57:00.396]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:57:00.396]      </control>
[00:57:00.396]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:57:00.396]        // if-block "(__protocol & 0xFFFF) == 2"
[00:57:00.396]          // =>  TRUE
[00:57:00.396]        <block atomic="false" info="">
[00:57:00.396]          Message(0, "executing SWD power up");
[00:57:00.398]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:57:00.399]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:57:00.399]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:57:00.402]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:57:00.402]        </block>
[00:57:00.402]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:57:00.402]      </control>
[00:57:00.402]      // end if-block "powered_down"
[00:57:00.402]    </control>
[00:57:00.402]    <block atomic="false" info="">
[00:57:00.402]      __var DEBUG_PORT_VAL    = 0;
[00:57:00.402]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:57:00.402]      __var ACCESS_POINT_VAL  = 0;
[00:57:00.402]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:57:00.403]      __ap = 1; 
[00:57:00.403]        // -> [__ap <= 0x00000001]
[00:57:00.403]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:57:00.406]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:57:00.406]      __ap = 4;
[00:57:00.406]        // -> [__ap <= 0x00000004]
[00:57:00.408]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:57:00.411]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:57:00.411]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:57:00.411]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:57:00.412]    </block>
[00:57:00.412]    <block atomic="false" info="">
[00:57:00.412]      __var nReset = 0x80;
[00:57:00.412]        // -> [nReset <= 0x00000080]
[00:57:00.412]      __var canReadPins = 0;
[00:57:00.412]        // -> [canReadPins <= 0x00000000]
[00:57:00.412]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:57:00.415]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:57:00.415]        // -> [canReadPins <= 0x00000001]
[00:57:00.415]    </block>
[00:57:00.415]    <control if="" while="1" timeout="200" info="">
[00:57:00.415]      // while "1"  (timeout="200")
[00:57:00.415]      // while-condition  =>  TRUE
[00:57:00.415]      // while "1"  (timeout="200")
[00:57:00.415]      // while-condition  =>  TRUE
[00:57:00.415]      // while "1"  (timeout="200")
[00:57:00.415]      // while-condition  =>  TRUE
[00:57:00.415]      // while "1"  (timeout="200")
[00:57:00.415]      // while-condition  =>  TRUE
[00:57:00.415]      // while "1"  (timeout="200")
[00:57:00.415]      // while-condition  =>  TRUE
[00:57:00.415]      // while "1"  (timeout="200")
[00:57:00.415]      // while-condition  =>  TRUE
[00:57:00.415]      // while "1"  (timeout="200")
[00:57:00.415]      // while-condition  =>  TRUE
[00:57:00.415]      // while "1"  (timeout="200")
[00:57:00.415]      // while-condition  =>  TRUE
[00:57:00.415]      // while "1"  (timeout="200")
[00:57:00.415]      // while-condition  =>  TRUE
[00:57:00.415]      // while "1"  (timeout="200")
[00:57:00.415]      // while-condition  =>  TRUE
[00:57:00.415]      // while "1"  (timeout="200")
[00:57:00.417]      // while-condition  =>  TRUE
[00:57:00.417]      // while "1"  (timeout="200")
[00:57:00.417]      // while-condition  =>  TRUE
[00:57:00.417]      // while "1"  (timeout="200")
[00:57:00.417]      // while-condition  =>  TRUE
[00:57:00.417]      // while "1"  (timeout="200")
[00:57:00.417]      // while-condition  =>  TRUE
[00:57:00.417]      // while "1"  (timeout="200")
[00:57:00.417]      // while-condition  =>  TRUE
[00:57:00.417]      // while "1"  (timeout="200")
[00:57:00.417]      // while-condition  =>  TRUE
[00:57:00.417]      // while "1"  (timeout="200")
[00:57:00.417]      // while-condition  =>  TRUE
[00:57:00.417]      // while "1"  (timeout="200")
[00:57:00.417]      // while-condition  =>  TRUE
[00:57:00.417]      // while "1"  (timeout="200")
[00:57:00.417]      // while-condition  =>  TRUE
[00:57:00.417]      // while "1"  (timeout="200")
[00:57:00.419]      // while-condition  =>  TRUE
[00:57:00.419]      // while "1"  (timeout="200")
[00:57:00.419]      // while-condition  =>  TRUE
[00:57:00.419]      // while "1"  (timeout="200")
[00:57:00.419]      // while-condition  =>  TRUE
[00:57:00.419]      // while "1"  (timeout="200")
[00:57:00.419]      // while-condition  =>  TRUE
[00:57:00.419]      // while "1"  (timeout="200")
[00:57:00.420]      // while-condition  =>  TRUE
[00:57:00.420]      // while "1"  (timeout="200")
[00:57:00.420]      // while-condition  =>  TRUE
[00:57:00.420]      // while "1"  (timeout="200")
[00:57:00.420]      // while-condition  =>  TRUE
[00:57:00.420]      // while "1"  (timeout="200")
[00:57:00.420]      // while-condition  =>  TRUE
[00:57:00.420]      // while "1"  (timeout="200")
[00:57:00.420]      // while-condition  =>  TRUE
[00:57:00.420]      // while "1"  (timeout="200")
[00:57:00.420]      // while-condition  =>  TRUE
[00:57:00.420]      // while "1"  (timeout="200")
[00:57:00.420]      // while-condition  =>  TRUE
[00:57:00.420]      // while "1"  (timeout="200")
[00:57:00.420]      // while-condition  =>  TRUE
[00:57:00.420]      // while "1"  (timeout="200")
[00:57:00.420]      // while-condition  =>  TRUE
[00:57:00.420]      // while "1"  (timeout="200")
[00:57:00.420]      // while-condition  =>  TRUE
[00:57:00.420]      // while "1"  (timeout="200")
[00:57:00.420]      // while-condition  =>  TRUE
[00:57:00.420]      // while "1"  (timeout="200")
[00:57:00.420]      // while-condition  =>  TRUE
[00:57:00.420]      // while "1"  (timeout="200")
[00:57:00.423]      // while-condition  =>  TRUE
[00:57:00.423]      // while "1"  (timeout="200")
[00:57:00.423]      // while  =>  TIMEOUT
[00:57:00.423]      // end while "1"
[00:57:00.423]    </control>
[00:57:00.423]    <control if="canReadPins" while="" timeout="0" info="">
[00:57:00.423]      // if-block "canReadPins"
[00:57:00.423]        // =>  TRUE
[00:57:00.423]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:57:00.423]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:57:00.423]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:57:00.423]        // while-condition  =>  FALSE
[00:57:00.423]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:57:00.423]      </control>
[00:57:00.423]      // end if-block "canReadPins"
[00:57:00.423]    </control>
[00:57:00.423]    <control if="!canReadPins" while="" timeout="0" info="">
[00:57:00.426]      // if-block "!canReadPins"
[00:57:00.426]        // =>  FALSE
[00:57:00.426]      // skip if-block "!canReadPins"
[00:57:00.426]    </control>
[00:57:00.426]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:57:00.426]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:57:00.426]        // =>  TRUE
[00:57:00.426]      <block atomic="false" info="">
[00:57:00.426]        WriteAP(0x00, 0x190008);
[00:57:00.428]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:57:00.428]        WriteAP(0xF0, 0x01);
[00:57:00.431]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:57:00.431]      </block>
[00:57:00.431]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:57:00.431]    </control>
[00:57:00.431]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:57:00.431]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:57:00.431]        // =>  FALSE
[00:57:00.431]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:57:00.431]    </control>
[00:57:00.431]    <block atomic="false" info="">
[00:57:00.431]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:57:00.434]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:57:00.434]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:57:00.434]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:57:00.436]      __ap = 0; //lets make sure we reset the access point selection
[00:57:00.436]        // -> [__ap <= 0x00000000]
[00:57:00.436]    </block>
[00:57:00.436]  </sequence>
[00:57:00.436]  
[00:57:00.453]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:57:00.453]  
[00:57:00.453]  <debugvars>
[00:57:00.453]    // Pre-defined
[00:57:00.453]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:00.453]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:00.453]    __dp=0x00000000
[00:57:00.453]    __ap=0x00000000
[00:57:00.453]    __traceout=0x00000000      (Trace Disabled)
[00:57:00.453]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:00.453]    __FlashAddr=0x00000000
[00:57:00.453]    __FlashLen=0x00000000
[00:57:00.453]    __FlashArg=0x00000000
[00:57:00.453]    __FlashOp=0x00000000
[00:57:00.453]    __Result=0x00000000
[00:57:00.453]  </debugvars>
[00:57:00.453]  
[00:57:00.453]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:57:00.453]    <block atomic="false" info="">
[00:57:00.453]      __var deviceID = 0;
[00:57:00.453]        // -> [deviceID <= 0x00000000]
[00:57:00.453]      __var version = 0;
[00:57:00.453]        // -> [version <= 0x00000000]
[00:57:00.453]      __var partNum = 0;
[00:57:00.453]        // -> [partNum <= 0x00000000]
[00:57:00.453]      __var manuf = 0;
[00:57:00.453]        // -> [manuf <= 0x00000000]
[00:57:00.453]      __var isMSPM0G1X0X_G3X0X = 0;
[00:57:00.453]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:57:00.453]      __var isProduction = 0;
[00:57:00.453]        // -> [isProduction <= 0x00000000]
[00:57:00.453]      __var continueId = 0;
[00:57:00.453]        // -> [continueId <= 0x00000000]
[00:57:00.453]      deviceID =   Read32(0x41C40004);
[00:57:00.463]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:57:00.463]        // -> [deviceID <= 0x2BB8802F]
[00:57:00.463]      version = deviceID >> 28;
[00:57:00.463]        // -> [version <= 0x00000002]
[00:57:00.463]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:57:00.463]        // -> [partNum <= 0x0000BB88]
[00:57:00.463]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:57:00.463]        // -> [manuf <= 0x00000017]
[00:57:00.463]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:57:00.463]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:57:00.463]      isProduction = (version > 0);
[00:57:00.463]        // -> [isProduction <= 0x00000001]
[00:57:00.463]    </block>
[00:57:00.463]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:57:00.463]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:57:00.463]        // =>  FALSE
[00:57:00.463]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:57:00.463]    </control>
[00:57:00.463]    <control if="continueId == 4" while="" timeout="0" info="">
[00:57:00.463]      // if-block "continueId == 4"
[00:57:00.463]        // =>  FALSE
[00:57:00.463]      // skip if-block "continueId == 4"
[00:57:00.463]    </control>
[00:57:00.463]    <control if="!isProduction" while="" timeout="0" info="">
[00:57:00.463]      // if-block "!isProduction"
[00:57:00.463]        // =>  FALSE
[00:57:00.463]      // skip if-block "!isProduction"
[00:57:00.463]    </control>
[00:57:00.463]  </sequence>
[00:57:00.463]  
[00:57:29.455]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:57:29.455]  
[00:57:29.458]  <debugvars>
[00:57:29.458]    // Pre-defined
[00:57:29.458]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:29.458]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:29.458]    __dp=0x00000000
[00:57:29.458]    __ap=0x00000000
[00:57:29.458]    __traceout=0x00000000      (Trace Disabled)
[00:57:29.458]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:29.458]    __FlashAddr=0x00000000
[00:57:29.458]    __FlashLen=0x00000000
[00:57:29.458]    __FlashArg=0x00000000
[00:57:29.458]    __FlashOp=0x00000000
[00:57:29.458]    __Result=0x00000000
[00:57:29.458]  </debugvars>
[00:57:29.458]  
[00:57:29.458]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:57:29.458]    <block atomic="false" info="">
[00:57:29.458]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:57:29.458]        // -> [isSWJ <= 0x00000001]
[00:57:29.458]      __var hasDormant = __protocol & 0x00020000;
[00:57:29.458]        // -> [hasDormant <= 0x00000000]
[00:57:29.458]      __var protType   = __protocol & 0x0000FFFF;
[00:57:29.458]        // -> [protType <= 0x00000002]
[00:57:29.458]    </block>
[00:57:29.458]    <control if="protType == 1" while="" timeout="0" info="">
[00:57:29.458]      // if-block "protType == 1"
[00:57:29.458]        // =>  FALSE
[00:57:29.458]      // skip if-block "protType == 1"
[00:57:29.458]    </control>
[00:57:29.458]    <control if="protType == 2" while="" timeout="0" info="">
[00:57:29.458]      // if-block "protType == 2"
[00:57:29.458]        // =>  TRUE
[00:57:29.458]      <control if="isSWJ" while="" timeout="0" info="">
[00:57:29.458]        // if-block "isSWJ"
[00:57:29.458]          // =>  TRUE
[00:57:29.458]        <control if="hasDormant" while="" timeout="0" info="">
[00:57:29.458]          // if-block "hasDormant"
[00:57:29.458]            // =>  FALSE
[00:57:29.458]          // skip if-block "hasDormant"
[00:57:29.458]        </control>
[00:57:29.458]        <control if="!hasDormant" while="" timeout="0" info="">
[00:57:29.458]          // if-block "!hasDormant"
[00:57:29.458]            // =>  TRUE
[00:57:29.458]          <block atomic="false" info="">
[00:57:29.458]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:57:29.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:29.458]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:57:29.465]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:57:29.465]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:57:29.465]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:29.465]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:57:29.465]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:57:29.465]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:57:29.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:57:29.469]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:57:29.469]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:57:29.469]          </block>
[00:57:29.469]          // end if-block "!hasDormant"
[00:57:29.469]        </control>
[00:57:29.469]        // end if-block "isSWJ"
[00:57:29.469]      </control>
[00:57:29.469]      <control if="!isSWJ" while="" timeout="0" info="">
[00:57:29.469]        // if-block "!isSWJ"
[00:57:29.469]          // =>  FALSE
[00:57:29.469]        // skip if-block "!isSWJ"
[00:57:29.469]      </control>
[00:57:29.469]      <block atomic="false" info="">
[00:57:29.469]        ReadDP(0x0);
[00:57:29.469]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:57:29.469]      </block>
[00:57:29.469]      // end if-block "protType == 2"
[00:57:29.469]    </control>
[00:57:29.469]  </sequence>
[00:57:29.469]  
[00:57:29.475]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:57:29.475]  
[00:57:29.475]  <debugvars>
[00:57:29.479]    // Pre-defined
[00:57:29.479]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:29.479]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:29.479]    __dp=0x00000000
[00:57:29.479]    __ap=0x00000000
[00:57:29.479]    __traceout=0x00000000      (Trace Disabled)
[00:57:29.479]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:29.479]    __FlashAddr=0x00000000
[00:57:29.479]    __FlashLen=0x00000000
[00:57:29.479]    __FlashArg=0x00000000
[00:57:29.479]    __FlashOp=0x00000000
[00:57:29.479]    __Result=0x00000000
[00:57:29.479]  </debugvars>
[00:57:29.479]  
[00:57:29.479]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:57:29.479]    <block atomic="false" info="">
[00:57:29.479]      __var SW_DP_ABORT       = 0x0;
[00:57:29.479]        // -> [SW_DP_ABORT <= 0x00000000]
[00:57:29.479]      __var DP_CTRL_STAT      = 0x4;
[00:57:29.479]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:57:29.479]      __var DP_SELECT         = 0x8;
[00:57:29.479]        // -> [DP_SELECT <= 0x00000008]
[00:57:29.479]      __var powered_down      = 0;
[00:57:29.479]        // -> [powered_down <= 0x00000000]
[00:57:29.479]      WriteDP(DP_SELECT, 0x00000000);
[00:57:29.479]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:57:29.479]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:57:29.479]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:57:29.479]        // -> [powered_down <= 0x00000001]
[00:57:29.479]    </block>
[00:57:29.479]    <control if="powered_down" while="" timeout="0" info="">
[00:57:29.479]      // if-block "powered_down"
[00:57:29.479]        // =>  TRUE
[00:57:29.479]      <block atomic="false" info="">
[00:57:29.479]        Message(0, "Debug/System power-up request sent");
[00:57:29.489]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:57:29.489]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:57:29.489]      </block>
[00:57:29.489]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:57:29.489]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:57:29.489]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:57:29.489]        // while-condition  =>  FALSE
[00:57:29.489]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:57:29.489]      </control>
[00:57:29.489]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:57:29.489]        // if-block "(__protocol & 0xFFFF) == 1"
[00:57:29.489]          // =>  FALSE
[00:57:29.489]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:57:29.489]      </control>
[00:57:29.489]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:57:29.489]        // if-block "(__protocol & 0xFFFF) == 2"
[00:57:29.489]          // =>  TRUE
[00:57:29.489]        <block atomic="false" info="">
[00:57:29.489]          Message(0, "executing SWD power up");
[00:57:29.489]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:57:29.496]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:57:29.496]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:57:29.496]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:57:29.499]        </block>
[00:57:29.499]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:57:29.499]      </control>
[00:57:29.499]      // end if-block "powered_down"
[00:57:29.499]    </control>
[00:57:29.499]    <block atomic="false" info="">
[00:57:29.499]      __var DEBUG_PORT_VAL    = 0;
[00:57:29.499]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:57:29.499]      __var ACCESS_POINT_VAL  = 0;
[00:57:29.499]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:57:29.499]      __ap = 1; 
[00:57:29.499]        // -> [__ap <= 0x00000001]
[00:57:29.499]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:57:29.499]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:57:29.499]      __ap = 4;
[00:57:29.499]        // -> [__ap <= 0x00000004]
[00:57:29.499]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:57:29.506]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:57:29.506]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:57:29.506]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:57:29.509]    </block>
[00:57:29.509]    <block atomic="false" info="">
[00:57:29.509]      __var nReset = 0x80;
[00:57:29.509]        // -> [nReset <= 0x00000080]
[00:57:29.509]      __var canReadPins = 0;
[00:57:29.509]        // -> [canReadPins <= 0x00000000]
[00:57:29.509]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:57:29.509]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:57:29.509]        // -> [canReadPins <= 0x00000001]
[00:57:29.509]    </block>
[00:57:29.509]    <control if="" while="1" timeout="200" info="">
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.509]      // while-condition  =>  TRUE
[00:57:29.509]      // while "1"  (timeout="200")
[00:57:29.516]      // while-condition  =>  TRUE
[00:57:29.516]      // while "1"  (timeout="200")
[00:57:29.516]      // while  =>  TIMEOUT
[00:57:29.516]      // end while "1"
[00:57:29.516]    </control>
[00:57:29.516]    <control if="canReadPins" while="" timeout="0" info="">
[00:57:29.516]      // if-block "canReadPins"
[00:57:29.516]        // =>  TRUE
[00:57:29.516]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:57:29.516]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:57:29.518]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:57:29.518]        // while-condition  =>  FALSE
[00:57:29.518]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:57:29.518]      </control>
[00:57:29.518]      // end if-block "canReadPins"
[00:57:29.518]    </control>
[00:57:29.518]    <control if="!canReadPins" while="" timeout="0" info="">
[00:57:29.518]      // if-block "!canReadPins"
[00:57:29.518]        // =>  FALSE
[00:57:29.518]      // skip if-block "!canReadPins"
[00:57:29.518]    </control>
[00:57:29.518]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:57:29.518]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:57:29.518]        // =>  TRUE
[00:57:29.518]      <block atomic="false" info="">
[00:57:29.518]        WriteAP(0x00, 0x190008);
[00:57:29.518]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:57:29.518]        WriteAP(0xF0, 0x01);
[00:57:29.518]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:57:29.518]      </block>
[00:57:29.518]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:57:29.518]    </control>
[00:57:29.518]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:57:29.518]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:57:29.518]        // =>  FALSE
[00:57:29.518]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:57:29.518]    </control>
[00:57:29.527]    <block atomic="false" info="">
[00:57:29.527]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:57:29.529]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:57:29.529]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:57:29.529]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:57:29.529]      __ap = 0; //lets make sure we reset the access point selection
[00:57:29.529]        // -> [__ap <= 0x00000000]
[00:57:29.529]    </block>
[00:57:29.529]  </sequence>
[00:57:29.529]  
[00:57:29.551]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:57:29.551]  
[00:57:29.551]  <debugvars>
[00:57:29.551]    // Pre-defined
[00:57:29.551]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:57:29.551]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:57:29.551]    __dp=0x00000000
[00:57:29.551]    __ap=0x00000000
[00:57:29.551]    __traceout=0x00000000      (Trace Disabled)
[00:57:29.551]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:57:29.551]    __FlashAddr=0x00000000
[00:57:29.551]    __FlashLen=0x00000000
[00:57:29.551]    __FlashArg=0x00000000
[00:57:29.551]    __FlashOp=0x00000000
[00:57:29.551]    __Result=0x00000000
[00:57:29.551]  </debugvars>
[00:57:29.551]  
[00:57:29.551]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:57:29.551]    <block atomic="false" info="">
[00:57:29.551]      __var deviceID = 0;
[00:57:29.551]        // -> [deviceID <= 0x00000000]
[00:57:29.551]      __var version = 0;
[00:57:29.551]        // -> [version <= 0x00000000]
[00:57:29.551]      __var partNum = 0;
[00:57:29.551]        // -> [partNum <= 0x00000000]
[00:57:29.551]      __var manuf = 0;
[00:57:29.551]        // -> [manuf <= 0x00000000]
[00:57:29.551]      __var isMSPM0G1X0X_G3X0X = 0;
[00:57:29.551]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:57:29.551]      __var isProduction = 0;
[00:57:29.551]        // -> [isProduction <= 0x00000000]
[00:57:29.551]      __var continueId = 0;
[00:57:29.551]        // -> [continueId <= 0x00000000]
[00:57:29.551]      deviceID =   Read32(0x41C40004);
[00:57:29.559]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:57:29.559]        // -> [deviceID <= 0x2BB8802F]
[00:57:29.559]      version = deviceID >> 28;
[00:57:29.559]        // -> [version <= 0x00000002]
[00:57:29.559]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:57:29.559]        // -> [partNum <= 0x0000BB88]
[00:57:29.559]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:57:29.559]        // -> [manuf <= 0x00000017]
[00:57:29.559]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:57:29.559]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:57:29.559]      isProduction = (version > 0);
[00:57:29.559]        // -> [isProduction <= 0x00000001]
[00:57:29.559]    </block>
[00:57:29.559]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:57:29.559]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:57:29.559]        // =>  FALSE
[00:57:29.559]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:57:29.559]    </control>
[00:57:29.559]    <control if="continueId == 4" while="" timeout="0" info="">
[00:57:29.559]      // if-block "continueId == 4"
[00:57:29.559]        // =>  FALSE
[00:57:29.559]      // skip if-block "continueId == 4"
[00:57:29.559]    </control>
[00:57:29.559]    <control if="!isProduction" while="" timeout="0" info="">
[00:57:29.559]      // if-block "!isProduction"
[00:57:29.559]        // =>  FALSE
[00:57:29.559]      // skip if-block "!isProduction"
[00:57:29.559]    </control>
[00:57:29.559]  </sequence>
[00:57:29.559]  
[00:58:34.593]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:58:34.593]  
[00:58:34.593]  <debugvars>
[00:58:34.593]    // Pre-defined
[00:58:34.593]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:34.593]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:34.593]    __dp=0x00000000
[00:58:34.593]    __ap=0x00000000
[00:58:34.593]    __traceout=0x00000000      (Trace Disabled)
[00:58:34.593]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:34.593]    __FlashAddr=0x00000000
[00:58:34.593]    __FlashLen=0x00000000
[00:58:34.593]    __FlashArg=0x00000000
[00:58:34.593]    __FlashOp=0x00000000
[00:58:34.593]    __Result=0x00000000
[00:58:34.593]  </debugvars>
[00:58:34.593]  
[00:58:34.593]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:58:34.593]    <block atomic="false" info="">
[00:58:34.593]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:58:34.593]        // -> [isSWJ <= 0x00000001]
[00:58:34.593]      __var hasDormant = __protocol & 0x00020000;
[00:58:34.593]        // -> [hasDormant <= 0x00000000]
[00:58:34.593]      __var protType   = __protocol & 0x0000FFFF;
[00:58:34.593]        // -> [protType <= 0x00000002]
[00:58:34.593]    </block>
[00:58:34.593]    <control if="protType == 1" while="" timeout="0" info="">
[00:58:34.593]      // if-block "protType == 1"
[00:58:34.593]        // =>  FALSE
[00:58:34.593]      // skip if-block "protType == 1"
[00:58:34.593]    </control>
[00:58:34.593]    <control if="protType == 2" while="" timeout="0" info="">
[00:58:34.593]      // if-block "protType == 2"
[00:58:34.593]        // =>  TRUE
[00:58:34.593]      <control if="isSWJ" while="" timeout="0" info="">
[00:58:34.593]        // if-block "isSWJ"
[00:58:34.593]          // =>  TRUE
[00:58:34.593]        <control if="hasDormant" while="" timeout="0" info="">
[00:58:34.593]          // if-block "hasDormant"
[00:58:34.593]            // =>  FALSE
[00:58:34.593]          // skip if-block "hasDormant"
[00:58:34.593]        </control>
[00:58:34.593]        <control if="!hasDormant" while="" timeout="0" info="">
[00:58:34.593]          // if-block "!hasDormant"
[00:58:34.593]            // =>  TRUE
[00:58:34.593]          <block atomic="false" info="">
[00:58:34.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:58:34.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:34.603]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:58:34.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:58:34.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:58:34.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:34.603]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:58:34.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:58:34.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:58:34.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:58:34.603]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:58:34.603]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:58:34.603]          </block>
[00:58:34.603]          // end if-block "!hasDormant"
[00:58:34.603]        </control>
[00:58:34.603]        // end if-block "isSWJ"
[00:58:34.603]      </control>
[00:58:34.603]      <control if="!isSWJ" while="" timeout="0" info="">
[00:58:34.603]        // if-block "!isSWJ"
[00:58:34.603]          // =>  FALSE
[00:58:34.603]        // skip if-block "!isSWJ"
[00:58:34.603]      </control>
[00:58:34.603]      <block atomic="false" info="">
[00:58:34.613]        ReadDP(0x0);
[00:58:34.613]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:58:34.613]      </block>
[00:58:34.613]      // end if-block "protType == 2"
[00:58:34.613]    </control>
[00:58:34.613]  </sequence>
[00:58:34.613]  
[00:58:34.613]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:58:34.613]  
[00:58:34.613]  <debugvars>
[00:58:34.613]    // Pre-defined
[00:58:34.613]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:34.613]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:34.613]    __dp=0x00000000
[00:58:34.613]    __ap=0x00000000
[00:58:34.613]    __traceout=0x00000000      (Trace Disabled)
[00:58:34.613]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:34.613]    __FlashAddr=0x00000000
[00:58:34.613]    __FlashLen=0x00000000
[00:58:34.613]    __FlashArg=0x00000000
[00:58:34.613]    __FlashOp=0x00000000
[00:58:34.613]    __Result=0x00000000
[00:58:34.613]  </debugvars>
[00:58:34.613]  
[00:58:34.613]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:58:34.613]    <block atomic="false" info="">
[00:58:34.613]      __var SW_DP_ABORT       = 0x0;
[00:58:34.613]        // -> [SW_DP_ABORT <= 0x00000000]
[00:58:34.613]      __var DP_CTRL_STAT      = 0x4;
[00:58:34.613]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:58:34.613]      __var DP_SELECT         = 0x8;
[00:58:34.613]        // -> [DP_SELECT <= 0x00000008]
[00:58:34.613]      __var powered_down      = 0;
[00:58:34.613]        // -> [powered_down <= 0x00000000]
[00:58:34.613]      WriteDP(DP_SELECT, 0x00000000);
[00:58:34.613]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:58:34.613]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:58:34.623]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:58:34.623]        // -> [powered_down <= 0x00000001]
[00:58:34.623]    </block>
[00:58:34.623]    <control if="powered_down" while="" timeout="0" info="">
[00:58:34.623]      // if-block "powered_down"
[00:58:34.623]        // =>  TRUE
[00:58:34.623]      <block atomic="false" info="">
[00:58:34.623]        Message(0, "Debug/System power-up request sent");
[00:58:34.623]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:58:34.623]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:58:34.623]      </block>
[00:58:34.623]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:58:34.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:58:34.623]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:58:34.623]        // while-condition  =>  FALSE
[00:58:34.623]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:58:34.623]      </control>
[00:58:34.623]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:58:34.623]        // if-block "(__protocol & 0xFFFF) == 1"
[00:58:34.623]          // =>  FALSE
[00:58:34.623]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:58:34.623]      </control>
[00:58:34.623]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:58:34.623]        // if-block "(__protocol & 0xFFFF) == 2"
[00:58:34.623]          // =>  TRUE
[00:58:34.633]        <block atomic="false" info="">
[00:58:34.633]          Message(0, "executing SWD power up");
[00:58:34.633]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:58:34.633]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:58:34.633]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:58:34.633]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:58:34.633]        </block>
[00:58:34.633]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:58:34.633]      </control>
[00:58:34.633]      // end if-block "powered_down"
[00:58:34.633]    </control>
[00:58:34.633]    <block atomic="false" info="">
[00:58:34.633]      __var DEBUG_PORT_VAL    = 0;
[00:58:34.633]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:58:34.633]      __var ACCESS_POINT_VAL  = 0;
[00:58:34.633]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:58:34.633]      __ap = 1; 
[00:58:34.633]        // -> [__ap <= 0x00000001]
[00:58:34.633]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:58:34.643]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:58:34.643]      __ap = 4;
[00:58:34.643]        // -> [__ap <= 0x00000004]
[00:58:34.643]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:58:34.643]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:58:34.643]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:58:34.643]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:58:34.643]    </block>
[00:58:34.643]    <block atomic="false" info="">
[00:58:34.653]      __var nReset = 0x80;
[00:58:34.653]        // -> [nReset <= 0x00000080]
[00:58:34.653]      __var canReadPins = 0;
[00:58:34.653]        // -> [canReadPins <= 0x00000000]
[00:58:34.654]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:58:34.655]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:58:34.655]        // -> [canReadPins <= 0x00000001]
[00:58:34.655]    </block>
[00:58:34.655]    <control if="" while="1" timeout="200" info="">
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.655]      // while "1"  (timeout="200")
[00:58:34.655]      // while-condition  =>  TRUE
[00:58:34.661]      // while "1"  (timeout="200")
[00:58:34.661]      // while  =>  TIMEOUT
[00:58:34.661]      // end while "1"
[00:58:34.661]    </control>
[00:58:34.661]    <control if="canReadPins" while="" timeout="0" info="">
[00:58:34.661]      // if-block "canReadPins"
[00:58:34.661]        // =>  TRUE
[00:58:34.661]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:58:34.661]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:58:34.661]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:58:34.661]        // while-condition  =>  FALSE
[00:58:34.664]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:58:34.664]      </control>
[00:58:34.664]      // end if-block "canReadPins"
[00:58:34.664]    </control>
[00:58:34.664]    <control if="!canReadPins" while="" timeout="0" info="">
[00:58:34.664]      // if-block "!canReadPins"
[00:58:34.664]        // =>  FALSE
[00:58:34.664]      // skip if-block "!canReadPins"
[00:58:34.664]    </control>
[00:58:34.664]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:58:34.664]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:58:34.664]        // =>  TRUE
[00:58:34.664]      <block atomic="false" info="">
[00:58:34.664]        WriteAP(0x00, 0x190008);
[00:58:34.664]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:58:34.664]        WriteAP(0xF0, 0x01);
[00:58:34.664]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:58:34.664]      </block>
[00:58:34.664]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:58:34.664]    </control>
[00:58:34.664]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:58:34.664]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:58:34.664]        // =>  FALSE
[00:58:34.664]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:58:34.664]    </control>
[00:58:34.664]    <block atomic="false" info="">
[00:58:34.664]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:58:34.676]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:58:34.676]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:58:34.676]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:58:34.676]      __ap = 0; //lets make sure we reset the access point selection
[00:58:34.676]        // -> [__ap <= 0x00000000]
[00:58:34.676]    </block>
[00:58:34.676]  </sequence>
[00:58:34.676]  
[00:58:34.706]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:58:34.706]  
[00:58:34.706]  <debugvars>
[00:58:34.706]    // Pre-defined
[00:58:34.706]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:58:34.706]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:58:34.706]    __dp=0x00000000
[00:58:34.706]    __ap=0x00000000
[00:58:34.706]    __traceout=0x00000000      (Trace Disabled)
[00:58:34.706]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:58:34.706]    __FlashAddr=0x00000000
[00:58:34.706]    __FlashLen=0x00000000
[00:58:34.706]    __FlashArg=0x00000000
[00:58:34.706]    __FlashOp=0x00000000
[00:58:34.706]    __Result=0x00000000
[00:58:34.706]  </debugvars>
[00:58:34.706]  
[00:58:34.706]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:58:34.706]    <block atomic="false" info="">
[00:58:34.706]      __var deviceID = 0;
[00:58:34.706]        // -> [deviceID <= 0x00000000]
[00:58:34.706]      __var version = 0;
[00:58:34.706]        // -> [version <= 0x00000000]
[00:58:34.706]      __var partNum = 0;
[00:58:34.706]        // -> [partNum <= 0x00000000]
[00:58:34.706]      __var manuf = 0;
[00:58:34.706]        // -> [manuf <= 0x00000000]
[00:58:34.706]      __var isMSPM0G1X0X_G3X0X = 0;
[00:58:34.706]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:58:34.706]      __var isProduction = 0;
[00:58:34.706]        // -> [isProduction <= 0x00000000]
[00:58:34.706]      __var continueId = 0;
[00:58:34.706]        // -> [continueId <= 0x00000000]
[00:58:34.706]      deviceID =   Read32(0x41C40004);
[00:58:34.706]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:58:34.714]        // -> [deviceID <= 0x2BB8802F]
[00:58:34.714]      version = deviceID >> 28;
[00:58:34.714]        // -> [version <= 0x00000002]
[00:58:34.714]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:58:34.714]        // -> [partNum <= 0x0000BB88]
[00:58:34.714]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:58:34.714]        // -> [manuf <= 0x00000017]
[00:58:34.714]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:58:34.714]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:58:34.714]      isProduction = (version > 0);
[00:58:34.714]        // -> [isProduction <= 0x00000001]
[00:58:34.714]    </block>
[00:58:34.714]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:58:34.714]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:58:34.714]        // =>  FALSE
[00:58:34.714]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:58:34.714]    </control>
[00:58:34.714]    <control if="continueId == 4" while="" timeout="0" info="">
[00:58:34.714]      // if-block "continueId == 4"
[00:58:34.714]        // =>  FALSE
[00:58:34.714]      // skip if-block "continueId == 4"
[00:58:34.714]    </control>
[00:58:34.714]    <control if="!isProduction" while="" timeout="0" info="">
[00:58:34.714]      // if-block "!isProduction"
[00:58:34.714]        // =>  FALSE
[00:58:34.714]      // skip if-block "!isProduction"
[00:58:34.714]    </control>
[00:58:34.714]  </sequence>
[00:58:34.714]  
[01:00:16.988]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:00:16.988]  
[01:00:16.998]  <debugvars>
[01:00:16.998]    // Pre-defined
[01:00:16.998]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:16.998]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:16.998]    __dp=0x00000000
[01:00:16.998]    __ap=0x00000000
[01:00:16.998]    __traceout=0x00000000      (Trace Disabled)
[01:00:16.998]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:16.998]    __FlashAddr=0x00000000
[01:00:16.998]    __FlashLen=0x00000000
[01:00:16.998]    __FlashArg=0x00000000
[01:00:16.998]    __FlashOp=0x00000000
[01:00:16.998]    __Result=0x00000000
[01:00:16.998]  </debugvars>
[01:00:16.998]  
[01:00:16.998]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:00:16.998]    <block atomic="false" info="">
[01:00:16.998]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:00:16.998]        // -> [isSWJ <= 0x00000001]
[01:00:16.998]      __var hasDormant = __protocol & 0x00020000;
[01:00:16.998]        // -> [hasDormant <= 0x00000000]
[01:00:16.998]      __var protType   = __protocol & 0x0000FFFF;
[01:00:16.998]        // -> [protType <= 0x00000002]
[01:00:16.998]    </block>
[01:00:16.998]    <control if="protType == 1" while="" timeout="0" info="">
[01:00:16.998]      // if-block "protType == 1"
[01:00:16.998]        // =>  FALSE
[01:00:16.998]      // skip if-block "protType == 1"
[01:00:16.998]    </control>
[01:00:16.998]    <control if="protType == 2" while="" timeout="0" info="">
[01:00:16.998]      // if-block "protType == 2"
[01:00:16.998]        // =>  TRUE
[01:00:16.998]      <control if="isSWJ" while="" timeout="0" info="">
[01:00:16.998]        // if-block "isSWJ"
[01:00:16.998]          // =>  TRUE
[01:00:16.998]        <control if="hasDormant" while="" timeout="0" info="">
[01:00:16.998]          // if-block "hasDormant"
[01:00:16.998]            // =>  FALSE
[01:00:16.998]          // skip if-block "hasDormant"
[01:00:16.998]        </control>
[01:00:16.998]        <control if="!hasDormant" while="" timeout="0" info="">
[01:00:16.998]          // if-block "!hasDormant"
[01:00:16.998]            // =>  TRUE
[01:00:16.998]          <block atomic="false" info="">
[01:00:16.998]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:00:16.998]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:16.998]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:00:16.998]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:00:16.998]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:00:17.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:17.006]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:00:17.006]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:00:17.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:00:17.006]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:17.006]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:00:17.006]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:00:17.006]          </block>
[01:00:17.006]          // end if-block "!hasDormant"
[01:00:17.006]        </control>
[01:00:17.006]        // end if-block "isSWJ"
[01:00:17.006]      </control>
[01:00:17.006]      <control if="!isSWJ" while="" timeout="0" info="">
[01:00:17.006]        // if-block "!isSWJ"
[01:00:17.006]          // =>  FALSE
[01:00:17.006]        // skip if-block "!isSWJ"
[01:00:17.006]      </control>
[01:00:17.006]      <block atomic="false" info="">
[01:00:17.006]        ReadDP(0x0);
[01:00:17.006]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:00:17.006]      </block>
[01:00:17.006]      // end if-block "protType == 2"
[01:00:17.006]    </control>
[01:00:17.006]  </sequence>
[01:00:17.006]  
[01:00:17.018]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:00:17.018]  
[01:00:17.018]  <debugvars>
[01:00:17.018]    // Pre-defined
[01:00:17.018]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:17.018]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:17.018]    __dp=0x00000000
[01:00:17.018]    __ap=0x00000000
[01:00:17.018]    __traceout=0x00000000      (Trace Disabled)
[01:00:17.018]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:17.018]    __FlashAddr=0x00000000
[01:00:17.018]    __FlashLen=0x00000000
[01:00:17.018]    __FlashArg=0x00000000
[01:00:17.018]    __FlashOp=0x00000000
[01:00:17.018]    __Result=0x00000000
[01:00:17.018]  </debugvars>
[01:00:17.018]  
[01:00:17.018]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:00:17.018]    <block atomic="false" info="">
[01:00:17.018]      __var SW_DP_ABORT       = 0x0;
[01:00:17.018]        // -> [SW_DP_ABORT <= 0x00000000]
[01:00:17.018]      __var DP_CTRL_STAT      = 0x4;
[01:00:17.018]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:00:17.018]      __var DP_SELECT         = 0x8;
[01:00:17.018]        // -> [DP_SELECT <= 0x00000008]
[01:00:17.018]      __var powered_down      = 0;
[01:00:17.018]        // -> [powered_down <= 0x00000000]
[01:00:17.018]      WriteDP(DP_SELECT, 0x00000000);
[01:00:17.018]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:00:17.018]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:00:17.018]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:00:17.018]        // -> [powered_down <= 0x00000001]
[01:00:17.018]    </block>
[01:00:17.018]    <control if="powered_down" while="" timeout="0" info="">
[01:00:17.018]      // if-block "powered_down"
[01:00:17.018]        // =>  TRUE
[01:00:17.018]      <block atomic="false" info="">
[01:00:17.018]        Message(0, "Debug/System power-up request sent");
[01:00:17.027]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:00:17.027]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:00:17.027]      </block>
[01:00:17.027]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:00:17.027]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:00:17.027]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:00:17.027]        // while-condition  =>  FALSE
[01:00:17.027]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:00:17.027]      </control>
[01:00:17.027]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:00:17.027]        // if-block "(__protocol & 0xFFFF) == 1"
[01:00:17.027]          // =>  FALSE
[01:00:17.027]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:00:17.027]      </control>
[01:00:17.027]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:00:17.027]        // if-block "(__protocol & 0xFFFF) == 2"
[01:00:17.027]          // =>  TRUE
[01:00:17.027]        <block atomic="false" info="">
[01:00:17.027]          Message(0, "executing SWD power up");
[01:00:17.027]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:00:17.027]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:00:17.027]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:00:17.037]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:00:17.037]        </block>
[01:00:17.037]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:00:17.037]      </control>
[01:00:17.037]      // end if-block "powered_down"
[01:00:17.037]    </control>
[01:00:17.037]    <block atomic="false" info="">
[01:00:17.037]      __var DEBUG_PORT_VAL    = 0;
[01:00:17.037]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:00:17.037]      __var ACCESS_POINT_VAL  = 0;
[01:00:17.037]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:00:17.037]      __ap = 1; 
[01:00:17.037]        // -> [__ap <= 0x00000001]
[01:00:17.037]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:00:17.037]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:00:17.037]      __ap = 4;
[01:00:17.037]        // -> [__ap <= 0x00000004]
[01:00:17.037]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:00:17.037]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:00:17.037]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:00:17.037]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:00:17.047]    </block>
[01:00:17.048]    <block atomic="false" info="">
[01:00:17.048]      __var nReset = 0x80;
[01:00:17.048]        // -> [nReset <= 0x00000080]
[01:00:17.048]      __var canReadPins = 0;
[01:00:17.048]        // -> [canReadPins <= 0x00000000]
[01:00:17.048]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:00:17.049]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:00:17.049]        // -> [canReadPins <= 0x00000001]
[01:00:17.050]    </block>
[01:00:17.050]    <control if="" while="1" timeout="200" info="">
[01:00:17.050]      // while "1"  (timeout="200")
[01:00:17.050]      // while-condition  =>  TRUE
[01:00:17.050]      // while "1"  (timeout="200")
[01:00:17.050]      // while-condition  =>  TRUE
[01:00:17.050]      // while "1"  (timeout="200")
[01:00:17.050]      // while-condition  =>  TRUE
[01:00:17.051]      // while "1"  (timeout="200")
[01:00:17.051]      // while-condition  =>  TRUE
[01:00:17.051]      // while "1"  (timeout="200")
[01:00:17.051]      // while-condition  =>  TRUE
[01:00:17.051]      // while "1"  (timeout="200")
[01:00:17.051]      // while-condition  =>  TRUE
[01:00:17.051]      // while "1"  (timeout="200")
[01:00:17.051]      // while-condition  =>  TRUE
[01:00:17.051]      // while "1"  (timeout="200")
[01:00:17.051]      // while-condition  =>  TRUE
[01:00:17.052]      // while "1"  (timeout="200")
[01:00:17.052]      // while-condition  =>  TRUE
[01:00:17.052]      // while "1"  (timeout="200")
[01:00:17.052]      // while-condition  =>  TRUE
[01:00:17.052]      // while "1"  (timeout="200")
[01:00:17.052]      // while-condition  =>  TRUE
[01:00:17.052]      // while "1"  (timeout="200")
[01:00:17.052]      // while-condition  =>  TRUE
[01:00:17.052]      // while "1"  (timeout="200")
[01:00:17.052]      // while-condition  =>  TRUE
[01:00:17.052]      // while "1"  (timeout="200")
[01:00:17.052]      // while-condition  =>  TRUE
[01:00:17.053]      // while "1"  (timeout="200")
[01:00:17.053]      // while-condition  =>  TRUE
[01:00:17.053]      // while "1"  (timeout="200")
[01:00:17.053]      // while-condition  =>  TRUE
[01:00:17.053]      // while "1"  (timeout="200")
[01:00:17.053]      // while-condition  =>  TRUE
[01:00:17.053]      // while "1"  (timeout="200")
[01:00:17.053]      // while-condition  =>  TRUE
[01:00:17.053]      // while "1"  (timeout="200")
[01:00:17.055]      // while-condition  =>  TRUE
[01:00:17.055]      // while "1"  (timeout="200")
[01:00:17.055]      // while-condition  =>  TRUE
[01:00:17.055]      // while "1"  (timeout="200")
[01:00:17.055]      // while-condition  =>  TRUE
[01:00:17.055]      // while "1"  (timeout="200")
[01:00:17.055]      // while-condition  =>  TRUE
[01:00:17.055]      // while "1"  (timeout="200")
[01:00:17.055]      // while-condition  =>  TRUE
[01:00:17.055]      // while "1"  (timeout="200")
[01:00:17.055]      // while-condition  =>  TRUE
[01:00:17.056]      // while "1"  (timeout="200")
[01:00:17.056]      // while-condition  =>  TRUE
[01:00:17.056]      // while "1"  (timeout="200")
[01:00:17.056]      // while-condition  =>  TRUE
[01:00:17.056]      // while "1"  (timeout="200")
[01:00:17.056]      // while-condition  =>  TRUE
[01:00:17.056]      // while "1"  (timeout="200")
[01:00:17.056]      // while-condition  =>  TRUE
[01:00:17.056]      // while "1"  (timeout="200")
[01:00:17.056]      // while-condition  =>  TRUE
[01:00:17.056]      // while "1"  (timeout="200")
[01:00:17.056]      // while-condition  =>  TRUE
[01:00:17.056]      // while "1"  (timeout="200")
[01:00:17.056]      // while-condition  =>  TRUE
[01:00:17.057]      // while "1"  (timeout="200")
[01:00:17.057]      // while-condition  =>  TRUE
[01:00:17.057]      // while "1"  (timeout="200")
[01:00:17.057]      // while-condition  =>  TRUE
[01:00:17.057]      // while "1"  (timeout="200")
[01:00:17.057]      // while-condition  =>  TRUE
[01:00:17.057]      // while "1"  (timeout="200")
[01:00:17.057]      // while-condition  =>  TRUE
[01:00:17.058]      // while "1"  (timeout="200")
[01:00:17.058]      // while-condition  =>  TRUE
[01:00:17.058]      // while "1"  (timeout="200")
[01:00:17.058]      // while-condition  =>  TRUE
[01:00:17.058]      // while "1"  (timeout="200")
[01:00:17.058]      // while-condition  =>  TRUE
[01:00:17.058]      // while "1"  (timeout="200")
[01:00:17.058]      // while-condition  =>  TRUE
[01:00:17.058]      // while "1"  (timeout="200")
[01:00:17.058]      // while-condition  =>  TRUE
[01:00:17.058]      // while "1"  (timeout="200")
[01:00:17.058]      // while-condition  =>  TRUE
[01:00:17.058]      // while "1"  (timeout="200")
[01:00:17.060]      // while-condition  =>  TRUE
[01:00:17.060]      // while "1"  (timeout="200")
[01:00:17.060]      // while-condition  =>  TRUE
[01:00:17.060]      // while "1"  (timeout="200")
[01:00:17.060]      // while-condition  =>  TRUE
[01:00:17.060]      // while "1"  (timeout="200")
[01:00:17.060]      // while-condition  =>  TRUE
[01:00:17.060]      // while "1"  (timeout="200")
[01:00:17.060]      // while-condition  =>  TRUE
[01:00:17.061]      // while "1"  (timeout="200")
[01:00:17.061]      // while-condition  =>  TRUE
[01:00:17.061]      // while "1"  (timeout="200")
[01:00:17.061]      // while-condition  =>  TRUE
[01:00:17.061]      // while "1"  (timeout="200")
[01:00:17.061]      // while-condition  =>  TRUE
[01:00:17.061]      // while "1"  (timeout="200")
[01:00:17.061]      // while-condition  =>  TRUE
[01:00:17.061]      // while "1"  (timeout="200")
[01:00:17.061]      // while-condition  =>  TRUE
[01:00:17.061]      // while "1"  (timeout="200")
[01:00:17.061]      // while-condition  =>  TRUE
[01:00:17.062]      // while "1"  (timeout="200")
[01:00:17.062]      // while  =>  TIMEOUT
[01:00:17.062]      // end while "1"
[01:00:17.062]    </control>
[01:00:17.062]    <control if="canReadPins" while="" timeout="0" info="">
[01:00:17.062]      // if-block "canReadPins"
[01:00:17.062]        // =>  TRUE
[01:00:17.062]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:00:17.062]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:00:17.064]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:00:17.064]        // while-condition  =>  FALSE
[01:00:17.064]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:00:17.064]      </control>
[01:00:17.064]      // end if-block "canReadPins"
[01:00:17.064]    </control>
[01:00:17.064]    <control if="!canReadPins" while="" timeout="0" info="">
[01:00:17.064]      // if-block "!canReadPins"
[01:00:17.064]        // =>  FALSE
[01:00:17.064]      // skip if-block "!canReadPins"
[01:00:17.064]    </control>
[01:00:17.064]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:00:17.064]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:00:17.064]        // =>  TRUE
[01:00:17.064]      <block atomic="false" info="">
[01:00:17.064]        WriteAP(0x00, 0x190008);
[01:00:17.067]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:00:17.067]        WriteAP(0xF0, 0x01);
[01:00:17.070]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:00:17.070]      </block>
[01:00:17.070]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:00:17.070]    </control>
[01:00:17.070]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:00:17.070]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:00:17.070]        // =>  FALSE
[01:00:17.070]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:00:17.070]    </control>
[01:00:17.070]    <block atomic="false" info="">
[01:00:17.070]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:00:17.070]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:00:17.070]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:00:17.070]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:00:17.077]      __ap = 0; //lets make sure we reset the access point selection
[01:00:17.077]        // -> [__ap <= 0x00000000]
[01:00:17.077]    </block>
[01:00:17.077]  </sequence>
[01:00:17.077]  
[01:00:17.098]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:00:17.098]  
[01:00:17.098]  <debugvars>
[01:00:17.098]    // Pre-defined
[01:00:17.098]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:17.098]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:17.098]    __dp=0x00000000
[01:00:17.098]    __ap=0x00000000
[01:00:17.098]    __traceout=0x00000000      (Trace Disabled)
[01:00:17.098]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:17.098]    __FlashAddr=0x00000000
[01:00:17.098]    __FlashLen=0x00000000
[01:00:17.098]    __FlashArg=0x00000000
[01:00:17.098]    __FlashOp=0x00000000
[01:00:17.098]    __Result=0x00000000
[01:00:17.098]  </debugvars>
[01:00:17.100]  
[01:00:17.100]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:00:17.100]    <block atomic="false" info="">
[01:00:17.100]      __var deviceID = 0;
[01:00:17.100]        // -> [deviceID <= 0x00000000]
[01:00:17.100]      __var version = 0;
[01:00:17.100]        // -> [version <= 0x00000000]
[01:00:17.100]      __var partNum = 0;
[01:00:17.100]        // -> [partNum <= 0x00000000]
[01:00:17.100]      __var manuf = 0;
[01:00:17.100]        // -> [manuf <= 0x00000000]
[01:00:17.100]      __var isMSPM0G1X0X_G3X0X = 0;
[01:00:17.100]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:00:17.100]      __var isProduction = 0;
[01:00:17.101]        // -> [isProduction <= 0x00000000]
[01:00:17.101]      __var continueId = 0;
[01:00:17.101]        // -> [continueId <= 0x00000000]
[01:00:17.101]      deviceID =   Read32(0x41C40004);
[01:00:17.106]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:00:17.106]        // -> [deviceID <= 0x2BB8802F]
[01:00:17.106]      version = deviceID >> 28;
[01:00:17.106]        // -> [version <= 0x00000002]
[01:00:17.106]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:00:17.106]        // -> [partNum <= 0x0000BB88]
[01:00:17.106]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:00:17.106]        // -> [manuf <= 0x00000017]
[01:00:17.106]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:00:17.106]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:00:17.106]      isProduction = (version > 0);
[01:00:17.107]        // -> [isProduction <= 0x00000001]
[01:00:17.107]    </block>
[01:00:17.107]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:00:17.107]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:00:17.107]        // =>  FALSE
[01:00:17.107]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:00:17.107]    </control>
[01:00:17.107]    <control if="continueId == 4" while="" timeout="0" info="">
[01:00:17.107]      // if-block "continueId == 4"
[01:00:17.107]        // =>  FALSE
[01:00:17.107]      // skip if-block "continueId == 4"
[01:00:17.107]    </control>
[01:00:17.107]    <control if="!isProduction" while="" timeout="0" info="">
[01:00:17.107]      // if-block "!isProduction"
[01:00:17.107]        // =>  FALSE
[01:00:17.107]      // skip if-block "!isProduction"
[01:00:17.110]    </control>
[01:00:17.110]  </sequence>
[01:00:17.110]  
[01:00:59.256]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:00:59.256]  
[01:00:59.256]  <debugvars>
[01:00:59.256]    // Pre-defined
[01:00:59.256]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:59.256]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:59.256]    __dp=0x00000000
[01:00:59.256]    __ap=0x00000000
[01:00:59.256]    __traceout=0x00000000      (Trace Disabled)
[01:00:59.256]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:59.256]    __FlashAddr=0x00000000
[01:00:59.256]    __FlashLen=0x00000000
[01:00:59.256]    __FlashArg=0x00000000
[01:00:59.256]    __FlashOp=0x00000000
[01:00:59.256]    __Result=0x00000000
[01:00:59.256]  </debugvars>
[01:00:59.256]  
[01:00:59.256]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:00:59.256]    <block atomic="false" info="">
[01:00:59.256]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:00:59.256]        // -> [isSWJ <= 0x00000001]
[01:00:59.256]      __var hasDormant = __protocol & 0x00020000;
[01:00:59.256]        // -> [hasDormant <= 0x00000000]
[01:00:59.256]      __var protType   = __protocol & 0x0000FFFF;
[01:00:59.256]        // -> [protType <= 0x00000002]
[01:00:59.256]    </block>
[01:00:59.256]    <control if="protType == 1" while="" timeout="0" info="">
[01:00:59.256]      // if-block "protType == 1"
[01:00:59.256]        // =>  FALSE
[01:00:59.256]      // skip if-block "protType == 1"
[01:00:59.256]    </control>
[01:00:59.256]    <control if="protType == 2" while="" timeout="0" info="">
[01:00:59.256]      // if-block "protType == 2"
[01:00:59.256]        // =>  TRUE
[01:00:59.256]      <control if="isSWJ" while="" timeout="0" info="">
[01:00:59.256]        // if-block "isSWJ"
[01:00:59.256]          // =>  TRUE
[01:00:59.256]        <control if="hasDormant" while="" timeout="0" info="">
[01:00:59.256]          // if-block "hasDormant"
[01:00:59.256]            // =>  FALSE
[01:00:59.256]          // skip if-block "hasDormant"
[01:00:59.256]        </control>
[01:00:59.256]        <control if="!hasDormant" while="" timeout="0" info="">
[01:00:59.256]          // if-block "!hasDormant"
[01:00:59.256]            // =>  TRUE
[01:00:59.256]          <block atomic="false" info="">
[01:00:59.256]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:00:59.256]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:59.256]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:00:59.264]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:00:59.264]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:00:59.264]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:59.264]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:00:59.264]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:00:59.264]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:00:59.264]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:00:59.264]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:00:59.264]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:00:59.264]          </block>
[01:00:59.264]          // end if-block "!hasDormant"
[01:00:59.264]        </control>
[01:00:59.264]        // end if-block "isSWJ"
[01:00:59.264]      </control>
[01:00:59.264]      <control if="!isSWJ" while="" timeout="0" info="">
[01:00:59.264]        // if-block "!isSWJ"
[01:00:59.264]          // =>  FALSE
[01:00:59.264]        // skip if-block "!isSWJ"
[01:00:59.264]      </control>
[01:00:59.264]      <block atomic="false" info="">
[01:00:59.264]        ReadDP(0x0);
[01:00:59.264]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:00:59.274]      </block>
[01:00:59.274]      // end if-block "protType == 2"
[01:00:59.274]    </control>
[01:00:59.274]  </sequence>
[01:00:59.274]  
[01:00:59.274]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:00:59.274]  
[01:00:59.274]  <debugvars>
[01:00:59.274]    // Pre-defined
[01:00:59.274]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:59.274]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:59.274]    __dp=0x00000000
[01:00:59.274]    __ap=0x00000000
[01:00:59.274]    __traceout=0x00000000      (Trace Disabled)
[01:00:59.274]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:59.274]    __FlashAddr=0x00000000
[01:00:59.274]    __FlashLen=0x00000000
[01:00:59.274]    __FlashArg=0x00000000
[01:00:59.274]    __FlashOp=0x00000000
[01:00:59.274]    __Result=0x00000000
[01:00:59.274]  </debugvars>
[01:00:59.274]  
[01:00:59.274]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:00:59.274]    <block atomic="false" info="">
[01:00:59.274]      __var SW_DP_ABORT       = 0x0;
[01:00:59.274]        // -> [SW_DP_ABORT <= 0x00000000]
[01:00:59.274]      __var DP_CTRL_STAT      = 0x4;
[01:00:59.274]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:00:59.274]      __var DP_SELECT         = 0x8;
[01:00:59.274]        // -> [DP_SELECT <= 0x00000008]
[01:00:59.274]      __var powered_down      = 0;
[01:00:59.274]        // -> [powered_down <= 0x00000000]
[01:00:59.274]      WriteDP(DP_SELECT, 0x00000000);
[01:00:59.274]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:00:59.274]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:00:59.274]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:00:59.274]        // -> [powered_down <= 0x00000001]
[01:00:59.274]    </block>
[01:00:59.274]    <control if="powered_down" while="" timeout="0" info="">
[01:00:59.284]      // if-block "powered_down"
[01:00:59.285]        // =>  TRUE
[01:00:59.285]      <block atomic="false" info="">
[01:00:59.285]        Message(0, "Debug/System power-up request sent");
[01:00:59.286]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:00:59.286]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:00:59.286]      </block>
[01:00:59.286]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:00:59.286]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:00:59.286]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:00:59.286]        // while-condition  =>  FALSE
[01:00:59.286]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:00:59.286]      </control>
[01:00:59.286]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:00:59.286]        // if-block "(__protocol & 0xFFFF) == 1"
[01:00:59.286]          // =>  FALSE
[01:00:59.286]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:00:59.286]      </control>
[01:00:59.286]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:00:59.286]        // if-block "(__protocol & 0xFFFF) == 2"
[01:00:59.286]          // =>  TRUE
[01:00:59.286]        <block atomic="false" info="">
[01:00:59.286]          Message(0, "executing SWD power up");
[01:00:59.286]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:00:59.294]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:00:59.294]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:00:59.296]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:00:59.296]        </block>
[01:00:59.296]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:00:59.296]      </control>
[01:00:59.296]      // end if-block "powered_down"
[01:00:59.296]    </control>
[01:00:59.296]    <block atomic="false" info="">
[01:00:59.296]      __var DEBUG_PORT_VAL    = 0;
[01:00:59.296]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:00:59.296]      __var ACCESS_POINT_VAL  = 0;
[01:00:59.296]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:00:59.296]      __ap = 1; 
[01:00:59.296]        // -> [__ap <= 0x00000001]
[01:00:59.296]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:00:59.296]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:00:59.296]      __ap = 4;
[01:00:59.296]        // -> [__ap <= 0x00000004]
[01:00:59.296]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:00:59.304]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:00:59.304]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:00:59.304]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:00:59.304]    </block>
[01:00:59.304]    <block atomic="false" info="">
[01:00:59.304]      __var nReset = 0x80;
[01:00:59.304]        // -> [nReset <= 0x00000080]
[01:00:59.304]      __var canReadPins = 0;
[01:00:59.304]        // -> [canReadPins <= 0x00000000]
[01:00:59.304]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:00:59.304]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:00:59.304]        // -> [canReadPins <= 0x00000001]
[01:00:59.304]    </block>
[01:00:59.304]    <control if="" while="1" timeout="200" info="">
[01:00:59.304]      // while "1"  (timeout="200")
[01:00:59.304]      // while-condition  =>  TRUE
[01:00:59.304]      // while "1"  (timeout="200")
[01:00:59.304]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.311]      // while-condition  =>  TRUE
[01:00:59.311]      // while "1"  (timeout="200")
[01:00:59.314]      // while-condition  =>  TRUE
[01:00:59.314]      // while "1"  (timeout="200")
[01:00:59.314]      // while  =>  TIMEOUT
[01:00:59.314]      // end while "1"
[01:00:59.314]    </control>
[01:00:59.314]    <control if="canReadPins" while="" timeout="0" info="">
[01:00:59.314]      // if-block "canReadPins"
[01:00:59.314]        // =>  TRUE
[01:00:59.314]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:00:59.314]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:00:59.317]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:00:59.317]        // while-condition  =>  FALSE
[01:00:59.317]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:00:59.317]      </control>
[01:00:59.317]      // end if-block "canReadPins"
[01:00:59.317]    </control>
[01:00:59.317]    <control if="!canReadPins" while="" timeout="0" info="">
[01:00:59.317]      // if-block "!canReadPins"
[01:00:59.317]        // =>  FALSE
[01:00:59.317]      // skip if-block "!canReadPins"
[01:00:59.317]    </control>
[01:00:59.317]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:00:59.317]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:00:59.317]        // =>  TRUE
[01:00:59.317]      <block atomic="false" info="">
[01:00:59.317]        WriteAP(0x00, 0x190008);
[01:00:59.317]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:00:59.317]        WriteAP(0xF0, 0x01);
[01:00:59.317]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:00:59.317]      </block>
[01:00:59.317]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:00:59.317]    </control>
[01:00:59.324]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:00:59.324]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:00:59.325]        // =>  FALSE
[01:00:59.325]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:00:59.325]    </control>
[01:00:59.325]    <block atomic="false" info="">
[01:00:59.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:00:59.325]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:00:59.325]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:00:59.325]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:00:59.325]      __ap = 0; //lets make sure we reset the access point selection
[01:00:59.325]        // -> [__ap <= 0x00000000]
[01:00:59.325]    </block>
[01:00:59.325]  </sequence>
[01:00:59.325]  
[01:00:59.346]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:00:59.346]  
[01:00:59.346]  <debugvars>
[01:00:59.346]    // Pre-defined
[01:00:59.346]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:00:59.346]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:00:59.346]    __dp=0x00000000
[01:00:59.346]    __ap=0x00000000
[01:00:59.346]    __traceout=0x00000000      (Trace Disabled)
[01:00:59.346]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:00:59.346]    __FlashAddr=0x00000000
[01:00:59.346]    __FlashLen=0x00000000
[01:00:59.346]    __FlashArg=0x00000000
[01:00:59.346]    __FlashOp=0x00000000
[01:00:59.346]    __Result=0x00000000
[01:00:59.346]  </debugvars>
[01:00:59.354]  
[01:00:59.354]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:00:59.354]    <block atomic="false" info="">
[01:00:59.354]      __var deviceID = 0;
[01:00:59.354]        // -> [deviceID <= 0x00000000]
[01:00:59.354]      __var version = 0;
[01:00:59.354]        // -> [version <= 0x00000000]
[01:00:59.354]      __var partNum = 0;
[01:00:59.354]        // -> [partNum <= 0x00000000]
[01:00:59.354]      __var manuf = 0;
[01:00:59.354]        // -> [manuf <= 0x00000000]
[01:00:59.354]      __var isMSPM0G1X0X_G3X0X = 0;
[01:00:59.354]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:00:59.354]      __var isProduction = 0;
[01:00:59.354]        // -> [isProduction <= 0x00000000]
[01:00:59.354]      __var continueId = 0;
[01:00:59.354]        // -> [continueId <= 0x00000000]
[01:00:59.354]      deviceID =   Read32(0x41C40004);
[01:00:59.357]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:00:59.357]        // -> [deviceID <= 0x2BB8802F]
[01:00:59.357]      version = deviceID >> 28;
[01:00:59.357]        // -> [version <= 0x00000002]
[01:00:59.357]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:00:59.357]        // -> [partNum <= 0x0000BB88]
[01:00:59.357]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:00:59.357]        // -> [manuf <= 0x00000017]
[01:00:59.357]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:00:59.357]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:00:59.357]      isProduction = (version > 0);
[01:00:59.357]        // -> [isProduction <= 0x00000001]
[01:00:59.357]    </block>
[01:00:59.357]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:00:59.357]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:00:59.357]        // =>  FALSE
[01:00:59.357]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:00:59.357]    </control>
[01:00:59.357]    <control if="continueId == 4" while="" timeout="0" info="">
[01:00:59.357]      // if-block "continueId == 4"
[01:00:59.357]        // =>  FALSE
[01:00:59.357]      // skip if-block "continueId == 4"
[01:00:59.357]    </control>
[01:00:59.357]    <control if="!isProduction" while="" timeout="0" info="">
[01:00:59.357]      // if-block "!isProduction"
[01:00:59.357]        // =>  FALSE
[01:00:59.357]      // skip if-block "!isProduction"
[01:00:59.357]    </control>
[01:00:59.357]  </sequence>
[01:00:59.357]  
[01:06:33.714]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:06:33.714]  
[01:06:33.718]  <debugvars>
[01:06:33.718]    // Pre-defined
[01:06:33.718]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:06:33.718]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:06:33.718]    __dp=0x00000000
[01:06:33.718]    __ap=0x00000000
[01:06:33.719]    __traceout=0x00000000      (Trace Disabled)
[01:06:33.719]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:06:33.719]    __FlashAddr=0x00000000
[01:06:33.719]    __FlashLen=0x00000000
[01:06:33.719]    __FlashArg=0x00000000
[01:06:33.719]    __FlashOp=0x00000000
[01:06:33.719]    __Result=0x00000000
[01:06:33.719]  </debugvars>
[01:06:33.719]  
[01:06:33.719]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:06:33.720]    <block atomic="false" info="">
[01:06:33.720]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:06:33.720]        // -> [isSWJ <= 0x00000001]
[01:06:33.720]      __var hasDormant = __protocol & 0x00020000;
[01:06:33.721]        // -> [hasDormant <= 0x00000000]
[01:06:33.721]      __var protType   = __protocol & 0x0000FFFF;
[01:06:33.721]        // -> [protType <= 0x00000002]
[01:06:33.721]    </block>
[01:06:33.721]    <control if="protType == 1" while="" timeout="0" info="">
[01:06:33.721]      // if-block "protType == 1"
[01:06:33.721]        // =>  FALSE
[01:06:33.722]      // skip if-block "protType == 1"
[01:06:33.722]    </control>
[01:06:33.722]    <control if="protType == 2" while="" timeout="0" info="">
[01:06:33.722]      // if-block "protType == 2"
[01:06:33.722]        // =>  TRUE
[01:06:33.722]      <control if="isSWJ" while="" timeout="0" info="">
[01:06:33.723]        // if-block "isSWJ"
[01:06:33.723]          // =>  TRUE
[01:06:33.723]        <control if="hasDormant" while="" timeout="0" info="">
[01:06:33.723]          // if-block "hasDormant"
[01:06:33.723]            // =>  FALSE
[01:06:33.723]          // skip if-block "hasDormant"
[01:06:33.724]        </control>
[01:06:33.724]        <control if="!hasDormant" while="" timeout="0" info="">
[01:06:33.724]          // if-block "!hasDormant"
[01:06:33.724]            // =>  TRUE
[01:06:33.724]          <block atomic="false" info="">
[01:06:33.724]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:06:33.725]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:06:33.726]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:06:33.727]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:06:33.727]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:06:33.728]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:06:33.729]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:06:33.730]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:06:33.730]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:06:33.732]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:06:33.732]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:06:33.732]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:06:33.732]          </block>
[01:06:33.732]          // end if-block "!hasDormant"
[01:06:33.732]        </control>
[01:06:33.732]        // end if-block "isSWJ"
[01:06:33.732]      </control>
[01:06:33.732]      <control if="!isSWJ" while="" timeout="0" info="">
[01:06:33.732]        // if-block "!isSWJ"
[01:06:33.732]          // =>  FALSE
[01:06:33.732]        // skip if-block "!isSWJ"
[01:06:33.732]      </control>
[01:06:33.732]      <block atomic="false" info="">
[01:06:33.732]        ReadDP(0x0);
[01:06:33.732]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:06:33.732]      </block>
[01:06:33.732]      // end if-block "protType == 2"
[01:06:33.732]    </control>
[01:06:33.732]  </sequence>
[01:06:33.732]  
[01:06:33.732]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:06:33.732]  
[01:06:33.732]  <debugvars>
[01:06:33.732]    // Pre-defined
[01:06:33.732]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:06:33.732]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:06:33.732]    __dp=0x00000000
[01:06:33.732]    __ap=0x00000000
[01:06:33.732]    __traceout=0x00000000      (Trace Disabled)
[01:06:33.732]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:06:33.740]    __FlashAddr=0x00000000
[01:06:33.740]    __FlashLen=0x00000000
[01:06:33.740]    __FlashArg=0x00000000
[01:06:33.740]    __FlashOp=0x00000000
[01:06:33.740]    __Result=0x00000000
[01:06:33.740]  </debugvars>
[01:06:33.740]  
[01:06:33.740]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:06:33.740]    <block atomic="false" info="">
[01:06:33.740]      __var SW_DP_ABORT       = 0x0;
[01:06:33.740]        // -> [SW_DP_ABORT <= 0x00000000]
[01:06:33.740]      __var DP_CTRL_STAT      = 0x4;
[01:06:33.740]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:06:33.740]      __var DP_SELECT         = 0x8;
[01:06:33.740]        // -> [DP_SELECT <= 0x00000008]
[01:06:33.740]      __var powered_down      = 0;
[01:06:33.740]        // -> [powered_down <= 0x00000000]
[01:06:33.740]      WriteDP(DP_SELECT, 0x00000000);
[01:06:33.740]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:06:33.740]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:06:33.740]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:06:33.740]        // -> [powered_down <= 0x00000001]
[01:06:33.740]    </block>
[01:06:33.740]    <control if="powered_down" while="" timeout="0" info="">
[01:06:33.740]      // if-block "powered_down"
[01:06:33.740]        // =>  TRUE
[01:06:33.740]      <block atomic="false" info="">
[01:06:33.740]        Message(0, "Debug/System power-up request sent");
[01:06:33.750]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:06:33.750]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:06:33.750]      </block>
[01:06:33.750]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:06:33.750]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:06:33.750]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:06:33.750]        // while-condition  =>  FALSE
[01:06:33.750]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:06:33.750]      </control>
[01:06:33.750]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:06:33.750]        // if-block "(__protocol & 0xFFFF) == 1"
[01:06:33.750]          // =>  FALSE
[01:06:33.750]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:06:33.750]      </control>
[01:06:33.750]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:06:33.750]        // if-block "(__protocol & 0xFFFF) == 2"
[01:06:33.750]          // =>  TRUE
[01:06:33.750]        <block atomic="false" info="">
[01:06:33.750]          Message(0, "executing SWD power up");
[01:06:33.750]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:06:33.750]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:06:33.750]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:06:33.760]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:06:33.760]        </block>
[01:06:33.760]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:06:33.760]      </control>
[01:06:33.760]      // end if-block "powered_down"
[01:06:33.760]    </control>
[01:06:33.760]    <block atomic="false" info="">
[01:06:33.760]      __var DEBUG_PORT_VAL    = 0;
[01:06:33.760]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:06:33.760]      __var ACCESS_POINT_VAL  = 0;
[01:06:33.760]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:06:33.760]      __ap = 1; 
[01:06:33.760]        // -> [__ap <= 0x00000001]
[01:06:33.760]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:06:33.760]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:06:33.760]      __ap = 4;
[01:06:33.760]        // -> [__ap <= 0x00000004]
[01:06:33.760]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:06:33.760]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:06:33.760]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:06:33.770]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:06:33.770]    </block>
[01:06:33.770]    <block atomic="false" info="">
[01:06:33.770]      __var nReset = 0x80;
[01:06:33.770]        // -> [nReset <= 0x00000080]
[01:06:33.770]      __var canReadPins = 0;
[01:06:33.770]        // -> [canReadPins <= 0x00000000]
[01:06:33.770]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:06:33.770]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:06:33.770]        // -> [canReadPins <= 0x00000001]
[01:06:33.770]    </block>
[01:06:33.770]    <control if="" while="1" timeout="200" info="">
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.770]      // while "1"  (timeout="200")
[01:06:33.770]      // while-condition  =>  TRUE
[01:06:33.780]      // while "1"  (timeout="200")
[01:06:33.780]      // while-condition  =>  TRUE
[01:06:33.780]      // while "1"  (timeout="200")
[01:06:33.780]      // while-condition  =>  TRUE
[01:06:33.781]      // while "1"  (timeout="200")
[01:06:33.781]      // while  =>  TIMEOUT
[01:06:33.781]      // end while "1"
[01:06:33.781]    </control>
[01:06:33.781]    <control if="canReadPins" while="" timeout="0" info="">
[01:06:33.781]      // if-block "canReadPins"
[01:06:33.781]        // =>  TRUE
[01:06:33.781]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:06:33.781]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:06:33.781]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:06:33.781]        // while-condition  =>  FALSE
[01:06:33.781]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:06:33.781]      </control>
[01:06:33.781]      // end if-block "canReadPins"
[01:06:33.781]    </control>
[01:06:33.781]    <control if="!canReadPins" while="" timeout="0" info="">
[01:06:33.781]      // if-block "!canReadPins"
[01:06:33.781]        // =>  FALSE
[01:06:33.781]      // skip if-block "!canReadPins"
[01:06:33.781]    </control>
[01:06:33.781]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:06:33.781]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:06:33.781]        // =>  TRUE
[01:06:33.781]      <block atomic="false" info="">
[01:06:33.781]        WriteAP(0x00, 0x190008);
[01:06:33.781]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:06:33.781]        WriteAP(0xF0, 0x01);
[01:06:33.790]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:06:33.790]      </block>
[01:06:33.790]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:06:33.790]    </control>
[01:06:33.790]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:06:33.790]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:06:33.790]        // =>  FALSE
[01:06:33.790]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:06:33.790]    </control>
[01:06:33.790]    <block atomic="false" info="">
[01:06:33.790]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:06:33.790]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:06:33.790]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:06:33.790]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:06:33.790]      __ap = 0; //lets make sure we reset the access point selection
[01:06:33.790]        // -> [__ap <= 0x00000000]
[01:06:33.790]    </block>
[01:06:33.790]  </sequence>
[01:06:33.790]  
[01:06:33.811]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:06:33.811]  
[01:06:33.811]  <debugvars>
[01:06:33.811]    // Pre-defined
[01:06:33.811]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:06:33.811]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:06:33.811]    __dp=0x00000000
[01:06:33.811]    __ap=0x00000000
[01:06:33.811]    __traceout=0x00000000      (Trace Disabled)
[01:06:33.811]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:06:33.811]    __FlashAddr=0x00000000
[01:06:33.811]    __FlashLen=0x00000000
[01:06:33.811]    __FlashArg=0x00000000
[01:06:33.811]    __FlashOp=0x00000000
[01:06:33.811]    __Result=0x00000000
[01:06:33.811]  </debugvars>
[01:06:33.811]  
[01:06:33.811]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:06:33.811]    <block atomic="false" info="">
[01:06:33.811]      __var deviceID = 0;
[01:06:33.811]        // -> [deviceID <= 0x00000000]
[01:06:33.811]      __var version = 0;
[01:06:33.811]        // -> [version <= 0x00000000]
[01:06:33.811]      __var partNum = 0;
[01:06:33.811]        // -> [partNum <= 0x00000000]
[01:06:33.821]      __var manuf = 0;
[01:06:33.821]        // -> [manuf <= 0x00000000]
[01:06:33.821]      __var isMSPM0G1X0X_G3X0X = 0;
[01:06:33.821]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:06:33.821]      __var isProduction = 0;
[01:06:33.821]        // -> [isProduction <= 0x00000000]
[01:06:33.821]      __var continueId = 0;
[01:06:33.821]        // -> [continueId <= 0x00000000]
[01:06:33.821]      deviceID =   Read32(0x41C40004);
[01:06:33.821]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:06:33.821]        // -> [deviceID <= 0x2BB8802F]
[01:06:33.821]      version = deviceID >> 28;
[01:06:33.821]        // -> [version <= 0x00000002]
[01:06:33.821]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:06:33.821]        // -> [partNum <= 0x0000BB88]
[01:06:33.821]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:06:33.821]        // -> [manuf <= 0x00000017]
[01:06:33.821]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:06:33.821]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:06:33.821]      isProduction = (version > 0);
[01:06:33.821]        // -> [isProduction <= 0x00000001]
[01:06:33.821]    </block>
[01:06:33.821]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:06:33.821]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:06:33.821]        // =>  FALSE
[01:06:33.821]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:06:33.821]    </control>
[01:06:33.821]    <control if="continueId == 4" while="" timeout="0" info="">
[01:06:33.821]      // if-block "continueId == 4"
[01:06:33.821]        // =>  FALSE
[01:06:33.821]      // skip if-block "continueId == 4"
[01:06:33.821]    </control>
[01:06:33.821]    <control if="!isProduction" while="" timeout="0" info="">
[01:06:33.821]      // if-block "!isProduction"
[01:06:33.821]        // =>  FALSE
[01:06:33.821]      // skip if-block "!isProduction"
[01:06:33.821]    </control>
[01:06:33.821]  </sequence>
[01:06:33.821]  
[01:07:03.337]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:07:03.337]  
[01:07:03.349]  <debugvars>
[01:07:03.349]    // Pre-defined
[01:07:03.349]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:07:03.349]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:07:03.349]    __dp=0x00000000
[01:07:03.349]    __ap=0x00000000
[01:07:03.349]    __traceout=0x00000000      (Trace Disabled)
[01:07:03.349]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:07:03.349]    __FlashAddr=0x00000000
[01:07:03.349]    __FlashLen=0x00000000
[01:07:03.349]    __FlashArg=0x00000000
[01:07:03.349]    __FlashOp=0x00000000
[01:07:03.349]    __Result=0x00000000
[01:07:03.349]  </debugvars>
[01:07:03.349]  
[01:07:03.349]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:07:03.349]    <block atomic="false" info="">
[01:07:03.349]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:07:03.349]        // -> [isSWJ <= 0x00000001]
[01:07:03.349]      __var hasDormant = __protocol & 0x00020000;
[01:07:03.351]        // -> [hasDormant <= 0x00000000]
[01:07:03.351]      __var protType   = __protocol & 0x0000FFFF;
[01:07:03.351]        // -> [protType <= 0x00000002]
[01:07:03.351]    </block>
[01:07:03.351]    <control if="protType == 1" while="" timeout="0" info="">
[01:07:03.351]      // if-block "protType == 1"
[01:07:03.351]        // =>  FALSE
[01:07:03.351]      // skip if-block "protType == 1"
[01:07:03.351]    </control>
[01:07:03.352]    <control if="protType == 2" while="" timeout="0" info="">
[01:07:03.352]      // if-block "protType == 2"
[01:07:03.352]        // =>  TRUE
[01:07:03.352]      <control if="isSWJ" while="" timeout="0" info="">
[01:07:03.352]        // if-block "isSWJ"
[01:07:03.352]          // =>  TRUE
[01:07:03.352]        <control if="hasDormant" while="" timeout="0" info="">
[01:07:03.352]          // if-block "hasDormant"
[01:07:03.352]            // =>  FALSE
[01:07:03.352]          // skip if-block "hasDormant"
[01:07:03.353]        </control>
[01:07:03.353]        <control if="!hasDormant" while="" timeout="0" info="">
[01:07:03.353]          // if-block "!hasDormant"
[01:07:03.353]            // =>  TRUE
[01:07:03.353]          <block atomic="false" info="">
[01:07:03.353]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:07:03.354]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:07:03.354]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:07:03.356]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:07:03.356]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:07:03.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:07:03.358]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:07:03.359]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:07:03.359]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:07:03.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:07:03.361]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:07:03.361]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:07:03.361]          </block>
[01:07:03.362]          // end if-block "!hasDormant"
[01:07:03.362]        </control>
[01:07:03.362]        // end if-block "isSWJ"
[01:07:03.362]      </control>
[01:07:03.362]      <control if="!isSWJ" while="" timeout="0" info="">
[01:07:03.363]        // if-block "!isSWJ"
[01:07:03.363]          // =>  FALSE
[01:07:03.363]        // skip if-block "!isSWJ"
[01:07:03.363]      </control>
[01:07:03.363]      <block atomic="false" info="">
[01:07:03.363]        ReadDP(0x0);
[01:07:03.364]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:07:03.364]      </block>
[01:07:03.364]      // end if-block "protType == 2"
[01:07:03.364]    </control>
[01:07:03.365]  </sequence>
[01:07:03.365]  
[01:07:03.369]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:07:03.369]  
[01:07:03.369]  <debugvars>
[01:07:03.369]    // Pre-defined
[01:07:03.369]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:07:03.369]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:07:03.370]    __dp=0x00000000
[01:07:03.370]    __ap=0x00000000
[01:07:03.370]    __traceout=0x00000000      (Trace Disabled)
[01:07:03.370]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:07:03.370]    __FlashAddr=0x00000000
[01:07:03.370]    __FlashLen=0x00000000
[01:07:03.370]    __FlashArg=0x00000000
[01:07:03.370]    __FlashOp=0x00000000
[01:07:03.370]    __Result=0x00000000
[01:07:03.370]  </debugvars>
[01:07:03.370]  
[01:07:03.370]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:07:03.370]    <block atomic="false" info="">
[01:07:03.370]      __var SW_DP_ABORT       = 0x0;
[01:07:03.370]        // -> [SW_DP_ABORT <= 0x00000000]
[01:07:03.370]      __var DP_CTRL_STAT      = 0x4;
[01:07:03.370]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:07:03.370]      __var DP_SELECT         = 0x8;
[01:07:03.370]        // -> [DP_SELECT <= 0x00000008]
[01:07:03.370]      __var powered_down      = 0;
[01:07:03.372]        // -> [powered_down <= 0x00000000]
[01:07:03.372]      WriteDP(DP_SELECT, 0x00000000);
[01:07:03.373]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:07:03.373]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:07:03.373]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:07:03.373]        // -> [powered_down <= 0x00000001]
[01:07:03.373]    </block>
[01:07:03.373]    <control if="powered_down" while="" timeout="0" info="">
[01:07:03.373]      // if-block "powered_down"
[01:07:03.373]        // =>  TRUE
[01:07:03.373]      <block atomic="false" info="">
[01:07:03.373]        Message(0, "Debug/System power-up request sent");
[01:07:03.377]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:07:03.379]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:07:03.379]      </block>
[01:07:03.379]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:07:03.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:07:03.380]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:07:03.380]        // while-condition  =>  FALSE
[01:07:03.380]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:07:03.380]      </control>
[01:07:03.380]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:07:03.380]        // if-block "(__protocol & 0xFFFF) == 1"
[01:07:03.380]          // =>  FALSE
[01:07:03.380]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:07:03.382]      </control>
[01:07:03.382]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:07:03.382]        // if-block "(__protocol & 0xFFFF) == 2"
[01:07:03.382]          // =>  TRUE
[01:07:03.382]        <block atomic="false" info="">
[01:07:03.382]          Message(0, "executing SWD power up");
[01:07:03.383]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:07:03.385]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:07:03.385]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:07:03.387]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:07:03.387]        </block>
[01:07:03.387]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:07:03.387]      </control>
[01:07:03.387]      // end if-block "powered_down"
[01:07:03.387]    </control>
[01:07:03.387]    <block atomic="false" info="">
[01:07:03.388]      __var DEBUG_PORT_VAL    = 0;
[01:07:03.388]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:07:03.388]      __var ACCESS_POINT_VAL  = 0;
[01:07:03.388]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:07:03.388]      __ap = 1; 
[01:07:03.388]        // -> [__ap <= 0x00000001]
[01:07:03.388]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:07:03.391]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:07:03.391]      __ap = 4;
[01:07:03.391]        // -> [__ap <= 0x00000004]
[01:07:03.391]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:07:03.394]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:07:03.394]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:07:03.394]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:07:03.395]    </block>
[01:07:03.395]    <block atomic="false" info="">
[01:07:03.395]      __var nReset = 0x80;
[01:07:03.395]        // -> [nReset <= 0x00000080]
[01:07:03.395]      __var canReadPins = 0;
[01:07:03.395]        // -> [canReadPins <= 0x00000000]
[01:07:03.395]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:07:03.398]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:07:03.398]        // -> [canReadPins <= 0x00000001]
[01:07:03.398]    </block>
[01:07:03.398]    <control if="" while="1" timeout="200" info="">
[01:07:03.398]      // while "1"  (timeout="200")
[01:07:03.398]      // while-condition  =>  TRUE
[01:07:03.398]      // while "1"  (timeout="200")
[01:07:03.398]      // while-condition  =>  TRUE
[01:07:03.398]      // while "1"  (timeout="200")
[01:07:03.398]      // while-condition  =>  TRUE
[01:07:03.398]      // while "1"  (timeout="200")
[01:07:03.398]      // while-condition  =>  TRUE
[01:07:03.400]      // while "1"  (timeout="200")
[01:07:03.400]      // while-condition  =>  TRUE
[01:07:03.400]      // while "1"  (timeout="200")
[01:07:03.400]      // while-condition  =>  TRUE
[01:07:03.400]      // while "1"  (timeout="200")
[01:07:03.400]      // while-condition  =>  TRUE
[01:07:03.400]      // while "1"  (timeout="200")
[01:07:03.400]      // while-condition  =>  TRUE
[01:07:03.400]      // while "1"  (timeout="200")
[01:07:03.400]      // while-condition  =>  TRUE
[01:07:03.400]      // while "1"  (timeout="200")
[01:07:03.400]      // while-condition  =>  TRUE
[01:07:03.400]      // while "1"  (timeout="200")
[01:07:03.401]      // while-condition  =>  TRUE
[01:07:03.401]      // while "1"  (timeout="200")
[01:07:03.401]      // while-condition  =>  TRUE
[01:07:03.401]      // while "1"  (timeout="200")
[01:07:03.401]      // while-condition  =>  TRUE
[01:07:03.401]      // while "1"  (timeout="200")
[01:07:03.401]      // while-condition  =>  TRUE
[01:07:03.401]      // while "1"  (timeout="200")
[01:07:03.401]      // while-condition  =>  TRUE
[01:07:03.401]      // while "1"  (timeout="200")
[01:07:03.401]      // while-condition  =>  TRUE
[01:07:03.402]      // while "1"  (timeout="200")
[01:07:03.402]      // while-condition  =>  TRUE
[01:07:03.402]      // while "1"  (timeout="200")
[01:07:03.402]      // while-condition  =>  TRUE
[01:07:03.402]      // while "1"  (timeout="200")
[01:07:03.402]      // while-condition  =>  TRUE
[01:07:03.402]      // while "1"  (timeout="200")
[01:07:03.402]      // while-condition  =>  TRUE
[01:07:03.402]      // while "1"  (timeout="200")
[01:07:03.402]      // while-condition  =>  TRUE
[01:07:03.402]      // while "1"  (timeout="200")
[01:07:03.402]      // while-condition  =>  TRUE
[01:07:03.402]      // while "1"  (timeout="200")
[01:07:03.404]      // while-condition  =>  TRUE
[01:07:03.404]      // while "1"  (timeout="200")
[01:07:03.404]      // while-condition  =>  TRUE
[01:07:03.404]      // while "1"  (timeout="200")
[01:07:03.404]      // while-condition  =>  TRUE
[01:07:03.404]      // while "1"  (timeout="200")
[01:07:03.405]      // while-condition  =>  TRUE
[01:07:03.405]      // while "1"  (timeout="200")
[01:07:03.405]      // while-condition  =>  TRUE
[01:07:03.405]      // while "1"  (timeout="200")
[01:07:03.405]      // while-condition  =>  TRUE
[01:07:03.405]      // while "1"  (timeout="200")
[01:07:03.405]      // while-condition  =>  TRUE
[01:07:03.405]      // while "1"  (timeout="200")
[01:07:03.405]      // while-condition  =>  TRUE
[01:07:03.405]      // while "1"  (timeout="200")
[01:07:03.405]      // while-condition  =>  TRUE
[01:07:03.405]      // while "1"  (timeout="200")
[01:07:03.406]      // while-condition  =>  TRUE
[01:07:03.406]      // while "1"  (timeout="200")
[01:07:03.406]      // while  =>  TIMEOUT
[01:07:03.406]      // end while "1"
[01:07:03.406]    </control>
[01:07:03.406]    <control if="canReadPins" while="" timeout="0" info="">
[01:07:03.406]      // if-block "canReadPins"
[01:07:03.406]        // =>  TRUE
[01:07:03.406]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:07:03.406]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:07:03.408]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:07:03.408]        // while-condition  =>  FALSE
[01:07:03.409]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:07:03.409]      </control>
[01:07:03.409]      // end if-block "canReadPins"
[01:07:03.409]    </control>
[01:07:03.409]    <control if="!canReadPins" while="" timeout="0" info="">
[01:07:03.409]      // if-block "!canReadPins"
[01:07:03.409]        // =>  FALSE
[01:07:03.409]      // skip if-block "!canReadPins"
[01:07:03.410]    </control>
[01:07:03.410]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:07:03.410]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:07:03.410]        // =>  TRUE
[01:07:03.410]      <block atomic="false" info="">
[01:07:03.410]        WriteAP(0x00, 0x190008);
[01:07:03.411]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:07:03.412]        WriteAP(0xF0, 0x01);
[01:07:03.418]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:07:03.418]      </block>
[01:07:03.418]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:07:03.418]    </control>
[01:07:03.418]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:07:03.419]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:07:03.419]        // =>  FALSE
[01:07:03.419]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:07:03.419]    </control>
[01:07:03.419]    <block atomic="false" info="">
[01:07:03.419]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:07:03.422]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:07:03.422]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:07:03.422]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:07:03.422]      __ap = 0; //lets make sure we reset the access point selection
[01:07:03.422]        // -> [__ap <= 0x00000000]
[01:07:03.422]    </block>
[01:07:03.422]  </sequence>
[01:07:03.422]  
[01:07:03.442]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:07:03.442]  
[01:07:03.442]  <debugvars>
[01:07:03.442]    // Pre-defined
[01:07:03.442]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:07:03.442]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:07:03.442]    __dp=0x00000000
[01:07:03.442]    __ap=0x00000000
[01:07:03.442]    __traceout=0x00000000      (Trace Disabled)
[01:07:03.442]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:07:03.442]    __FlashAddr=0x00000000
[01:07:03.442]    __FlashLen=0x00000000
[01:07:03.442]    __FlashArg=0x00000000
[01:07:03.442]    __FlashOp=0x00000000
[01:07:03.442]    __Result=0x00000000
[01:07:03.442]  </debugvars>
[01:07:03.442]  
[01:07:03.442]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:07:03.442]    <block atomic="false" info="">
[01:07:03.442]      __var deviceID = 0;
[01:07:03.442]        // -> [deviceID <= 0x00000000]
[01:07:03.442]      __var version = 0;
[01:07:03.442]        // -> [version <= 0x00000000]
[01:07:03.442]      __var partNum = 0;
[01:07:03.442]        // -> [partNum <= 0x00000000]
[01:07:03.442]      __var manuf = 0;
[01:07:03.442]        // -> [manuf <= 0x00000000]
[01:07:03.442]      __var isMSPM0G1X0X_G3X0X = 0;
[01:07:03.442]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:07:03.442]      __var isProduction = 0;
[01:07:03.442]        // -> [isProduction <= 0x00000000]
[01:07:03.442]      __var continueId = 0;
[01:07:03.442]        // -> [continueId <= 0x00000000]
[01:07:03.442]      deviceID =   Read32(0x41C40004);
[01:07:03.452]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:07:03.452]        // -> [deviceID <= 0x2BB8802F]
[01:07:03.452]      version = deviceID >> 28;
[01:07:03.452]        // -> [version <= 0x00000002]
[01:07:03.452]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:07:03.452]        // -> [partNum <= 0x0000BB88]
[01:07:03.452]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:07:03.452]        // -> [manuf <= 0x00000017]
[01:07:03.452]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:07:03.452]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:07:03.452]      isProduction = (version > 0);
[01:07:03.452]        // -> [isProduction <= 0x00000001]
[01:07:03.452]    </block>
[01:07:03.452]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:07:03.452]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:07:03.452]        // =>  FALSE
[01:07:03.452]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:07:03.452]    </control>
[01:07:03.452]    <control if="continueId == 4" while="" timeout="0" info="">
[01:07:03.452]      // if-block "continueId == 4"
[01:07:03.452]        // =>  FALSE
[01:07:03.452]      // skip if-block "continueId == 4"
[01:07:03.452]    </control>
[01:07:03.452]    <control if="!isProduction" while="" timeout="0" info="">
[01:07:03.452]      // if-block "!isProduction"
[01:07:03.452]        // =>  FALSE
[01:07:03.452]      // skip if-block "!isProduction"
[01:07:03.452]    </control>
[01:07:03.452]  </sequence>
[01:07:03.452]  
[01:07:32.137]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:07:32.137]  
[01:07:32.137]  <debugvars>
[01:07:32.137]    // Pre-defined
[01:07:32.137]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:07:32.137]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:07:32.137]    __dp=0x00000000
[01:07:32.137]    __ap=0x00000000
[01:07:32.138]    __traceout=0x00000000      (Trace Disabled)
[01:07:32.138]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:07:32.138]    __FlashAddr=0x00000000
[01:07:32.138]    __FlashLen=0x00000000
[01:07:32.138]    __FlashArg=0x00000000
[01:07:32.138]    __FlashOp=0x00000000
[01:07:32.138]    __Result=0x00000000
[01:07:32.138]  </debugvars>
[01:07:32.138]  
[01:07:32.138]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:07:32.138]    <block atomic="false" info="">
[01:07:32.138]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:07:32.138]        // -> [isSWJ <= 0x00000001]
[01:07:32.140]      __var hasDormant = __protocol & 0x00020000;
[01:07:32.140]        // -> [hasDormant <= 0x00000000]
[01:07:32.140]      __var protType   = __protocol & 0x0000FFFF;
[01:07:32.140]        // -> [protType <= 0x00000002]
[01:07:32.140]    </block>
[01:07:32.140]    <control if="protType == 1" while="" timeout="0" info="">
[01:07:32.140]      // if-block "protType == 1"
[01:07:32.140]        // =>  FALSE
[01:07:32.140]      // skip if-block "protType == 1"
[01:07:32.140]    </control>
[01:07:32.140]    <control if="protType == 2" while="" timeout="0" info="">
[01:07:32.140]      // if-block "protType == 2"
[01:07:32.140]        // =>  TRUE
[01:07:32.141]      <control if="isSWJ" while="" timeout="0" info="">
[01:07:32.141]        // if-block "isSWJ"
[01:07:32.141]          // =>  TRUE
[01:07:32.141]        <control if="hasDormant" while="" timeout="0" info="">
[01:07:32.141]          // if-block "hasDormant"
[01:07:32.141]            // =>  FALSE
[01:07:32.141]          // skip if-block "hasDormant"
[01:07:32.141]        </control>
[01:07:32.141]        <control if="!hasDormant" while="" timeout="0" info="">
[01:07:32.141]          // if-block "!hasDormant"
[01:07:32.141]            // =>  TRUE
[01:07:32.143]          <block atomic="false" info="">
[01:07:32.143]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:07:32.144]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:07:32.144]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:07:32.145]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:07:32.145]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:07:32.147]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:07:32.147]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:07:32.147]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:07:32.147]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:07:32.150]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:07:32.150]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:07:32.152]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:07:32.152]          </block>
[01:07:32.152]          // end if-block "!hasDormant"
[01:07:32.152]        </control>
[01:07:32.152]        // end if-block "isSWJ"
[01:07:32.152]      </control>
[01:07:32.152]      <control if="!isSWJ" while="" timeout="0" info="">
[01:07:32.152]        // if-block "!isSWJ"
[01:07:32.152]          // =>  FALSE
[01:07:32.152]        // skip if-block "!isSWJ"
[01:07:32.152]      </control>
[01:07:32.152]      <block atomic="false" info="">
[01:07:32.152]        ReadDP(0x0);
[01:07:32.155]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:07:32.155]      </block>
[01:07:32.155]      // end if-block "protType == 2"
[01:07:32.155]    </control>
[01:07:32.155]  </sequence>
[01:07:32.155]  
[01:07:32.158]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:07:32.158]  
[01:07:32.158]  <debugvars>
[01:07:32.158]    // Pre-defined
[01:07:32.158]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:07:32.158]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:07:32.158]    __dp=0x00000000
[01:07:32.158]    __ap=0x00000000
[01:07:32.158]    __traceout=0x00000000      (Trace Disabled)
[01:07:32.158]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:07:32.158]    __FlashAddr=0x00000000
[01:07:32.158]    __FlashLen=0x00000000
[01:07:32.158]    __FlashArg=0x00000000
[01:07:32.159]    __FlashOp=0x00000000
[01:07:32.159]    __Result=0x00000000
[01:07:32.159]  </debugvars>
[01:07:32.159]  
[01:07:32.159]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:07:32.159]    <block atomic="false" info="">
[01:07:32.159]      __var SW_DP_ABORT       = 0x0;
[01:07:32.159]        // -> [SW_DP_ABORT <= 0x00000000]
[01:07:32.159]      __var DP_CTRL_STAT      = 0x4;
[01:07:32.159]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:07:32.159]      __var DP_SELECT         = 0x8;
[01:07:32.159]        // -> [DP_SELECT <= 0x00000008]
[01:07:32.159]      __var powered_down      = 0;
[01:07:32.159]        // -> [powered_down <= 0x00000000]
[01:07:32.159]      WriteDP(DP_SELECT, 0x00000000);
[01:07:32.162]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:07:32.162]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:07:32.164]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:07:32.164]        // -> [powered_down <= 0x00000001]
[01:07:32.164]    </block>
[01:07:32.164]    <control if="powered_down" while="" timeout="0" info="">
[01:07:32.164]      // if-block "powered_down"
[01:07:32.164]        // =>  TRUE
[01:07:32.164]      <block atomic="false" info="">
[01:07:32.165]        Message(0, "Debug/System power-up request sent");
[01:07:32.166]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:07:32.168]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:07:32.168]      </block>
[01:07:32.168]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:07:32.168]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:07:32.170]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:07:32.170]        // while-condition  =>  FALSE
[01:07:32.170]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:07:32.170]      </control>
[01:07:32.170]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:07:32.170]        // if-block "(__protocol & 0xFFFF) == 1"
[01:07:32.170]          // =>  FALSE
[01:07:32.170]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:07:32.170]      </control>
[01:07:32.170]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:07:32.171]        // if-block "(__protocol & 0xFFFF) == 2"
[01:07:32.171]          // =>  TRUE
[01:07:32.171]        <block atomic="false" info="">
[01:07:32.171]          Message(0, "executing SWD power up");
[01:07:32.172]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:07:32.174]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:07:32.174]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:07:32.176]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:07:32.176]        </block>
[01:07:32.176]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:07:32.176]      </control>
[01:07:32.176]      // end if-block "powered_down"
[01:07:32.176]    </control>
[01:07:32.176]    <block atomic="false" info="">
[01:07:32.177]      __var DEBUG_PORT_VAL    = 0;
[01:07:32.177]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:07:32.177]      __var ACCESS_POINT_VAL  = 0;
[01:07:32.177]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:07:32.177]      __ap = 1; 
[01:07:32.177]        // -> [__ap <= 0x00000001]
[01:07:32.177]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:07:32.181]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:07:32.181]      __ap = 4;
[01:07:32.181]        // -> [__ap <= 0x00000004]
[01:07:32.181]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:07:32.184]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:07:32.184]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:07:32.184]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:07:32.186]    </block>
[01:07:32.186]    <block atomic="false" info="">
[01:07:32.186]      __var nReset = 0x80;
[01:07:32.186]        // -> [nReset <= 0x00000080]
[01:07:32.186]      __var canReadPins = 0;
[01:07:32.186]        // -> [canReadPins <= 0x00000000]
[01:07:32.186]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:07:32.188]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:07:32.188]        // -> [canReadPins <= 0x00000001]
[01:07:32.188]    </block>
[01:07:32.188]    <control if="" while="1" timeout="200" info="">
[01:07:32.188]      // while "1"  (timeout="200")
[01:07:32.188]      // while-condition  =>  TRUE
[01:07:32.188]      // while "1"  (timeout="200")
[01:07:32.188]      // while-condition  =>  TRUE
[01:07:32.188]      // while "1"  (timeout="200")
[01:07:32.188]      // while-condition  =>  TRUE
[01:07:32.188]      // while "1"  (timeout="200")
[01:07:32.188]      // while-condition  =>  TRUE
[01:07:32.190]      // while "1"  (timeout="200")
[01:07:32.190]      // while-condition  =>  TRUE
[01:07:32.190]      // while "1"  (timeout="200")
[01:07:32.190]      // while-condition  =>  TRUE
[01:07:32.190]      // while "1"  (timeout="200")
[01:07:32.190]      // while-condition  =>  TRUE
[01:07:32.190]      // while "1"  (timeout="200")
[01:07:32.190]      // while-condition  =>  TRUE
[01:07:32.190]      // while "1"  (timeout="200")
[01:07:32.190]      // while-condition  =>  TRUE
[01:07:32.190]      // while "1"  (timeout="200")
[01:07:32.190]      // while-condition  =>  TRUE
[01:07:32.190]      // while "1"  (timeout="200")
[01:07:32.191]      // while-condition  =>  TRUE
[01:07:32.191]      // while "1"  (timeout="200")
[01:07:32.191]      // while-condition  =>  TRUE
[01:07:32.191]      // while "1"  (timeout="200")
[01:07:32.191]      // while-condition  =>  TRUE
[01:07:32.191]      // while "1"  (timeout="200")
[01:07:32.191]      // while-condition  =>  TRUE
[01:07:32.191]      // while "1"  (timeout="200")
[01:07:32.191]      // while-condition  =>  TRUE
[01:07:32.191]      // while "1"  (timeout="200")
[01:07:32.191]      // while-condition  =>  TRUE
[01:07:32.191]      // while "1"  (timeout="200")
[01:07:32.191]      // while-condition  =>  TRUE
[01:07:32.191]      // while "1"  (timeout="200")
[01:07:32.191]      // while-condition  =>  TRUE
[01:07:32.191]      // while "1"  (timeout="200")
[01:07:32.191]      // while-condition  =>  TRUE
[01:07:32.191]      // while "1"  (timeout="200")
[01:07:32.191]      // while-condition  =>  TRUE
[01:07:32.193]      // while "1"  (timeout="200")
[01:07:32.193]      // while-condition  =>  TRUE
[01:07:32.193]      // while "1"  (timeout="200")
[01:07:32.193]      // while-condition  =>  TRUE
[01:07:32.193]      // while "1"  (timeout="200")
[01:07:32.193]      // while-condition  =>  TRUE
[01:07:32.193]      // while "1"  (timeout="200")
[01:07:32.193]      // while-condition  =>  TRUE
[01:07:32.193]      // while "1"  (timeout="200")
[01:07:32.194]      // while-condition  =>  TRUE
[01:07:32.194]      // while "1"  (timeout="200")
[01:07:32.194]      // while-condition  =>  TRUE
[01:07:32.194]      // while "1"  (timeout="200")
[01:07:32.194]      // while-condition  =>  TRUE
[01:07:32.194]      // while "1"  (timeout="200")
[01:07:32.194]      // while-condition  =>  TRUE
[01:07:32.194]      // while "1"  (timeout="200")
[01:07:32.194]      // while-condition  =>  TRUE
[01:07:32.194]      // while "1"  (timeout="200")
[01:07:32.194]      // while-condition  =>  TRUE
[01:07:32.194]      // while "1"  (timeout="200")
[01:07:32.194]      // while-condition  =>  TRUE
[01:07:32.194]      // while "1"  (timeout="200")
[01:07:32.194]      // while-condition  =>  TRUE
[01:07:32.194]      // while "1"  (timeout="200")
[01:07:32.194]      // while-condition  =>  TRUE
[01:07:32.194]      // while "1"  (timeout="200")
[01:07:32.194]      // while-condition  =>  TRUE
[01:07:32.194]      // while "1"  (timeout="200")
[01:07:32.194]      // while-condition  =>  TRUE
[01:07:32.194]      // while "1"  (timeout="200")
[01:07:32.194]      // while-condition  =>  TRUE
[01:07:32.196]      // while "1"  (timeout="200")
[01:07:32.196]      // while-condition  =>  TRUE
[01:07:32.196]      // while "1"  (timeout="200")
[01:07:32.196]      // while-condition  =>  TRUE
[01:07:32.196]      // while "1"  (timeout="200")
[01:07:32.196]      // while-condition  =>  TRUE
[01:07:32.196]      // while "1"  (timeout="200")
[01:07:32.197]      // while-condition  =>  TRUE
[01:07:32.197]      // while "1"  (timeout="200")
[01:07:32.197]      // while-condition  =>  TRUE
[01:07:32.197]      // while "1"  (timeout="200")
[01:07:32.197]      // while-condition  =>  TRUE
[01:07:32.197]      // while "1"  (timeout="200")
[01:07:32.197]      // while-condition  =>  TRUE
[01:07:32.197]      // while "1"  (timeout="200")
[01:07:32.197]      // while-condition  =>  TRUE
[01:07:32.197]      // while "1"  (timeout="200")
[01:07:32.197]      // while-condition  =>  TRUE
[01:07:32.197]      // while "1"  (timeout="200")
[01:07:32.197]      // while-condition  =>  TRUE
[01:07:32.197]      // while "1"  (timeout="200")
[01:07:32.197]      // while-condition  =>  TRUE
[01:07:32.198]      // while "1"  (timeout="200")
[01:07:32.198]      // while-condition  =>  TRUE
[01:07:32.198]      // while "1"  (timeout="200")
[01:07:32.198]      // while-condition  =>  TRUE
[01:07:32.198]      // while "1"  (timeout="200")
[01:07:32.198]      // while-condition  =>  TRUE
[01:07:32.198]      // while "1"  (timeout="200")
[01:07:32.198]      // while-condition  =>  TRUE
[01:07:32.198]      // while "1"  (timeout="200")
[01:07:32.198]      // while-condition  =>  TRUE
[01:07:32.198]      // while "1"  (timeout="200")
[01:07:32.198]      // while-condition  =>  TRUE
[01:07:32.198]      // while "1"  (timeout="200")
[01:07:32.198]      // while-condition  =>  TRUE
[01:07:32.198]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.200]      // while-condition  =>  TRUE
[01:07:32.200]      // while "1"  (timeout="200")
[01:07:32.203]      // while-condition  =>  TRUE
[01:07:32.203]      // while "1"  (timeout="200")
[01:07:32.203]      // while  =>  TIMEOUT
[01:07:32.203]      // end while "1"
[01:07:32.203]    </control>
[01:07:32.203]    <control if="canReadPins" while="" timeout="0" info="">
[01:07:32.203]      // if-block "canReadPins"
[01:07:32.203]        // =>  TRUE
[01:07:32.203]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:07:32.203]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:07:32.205]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:07:32.205]        // while-condition  =>  FALSE
[01:07:32.205]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:07:32.205]      </control>
[01:07:32.205]      // end if-block "canReadPins"
[01:07:32.205]    </control>
[01:07:32.205]    <control if="!canReadPins" while="" timeout="0" info="">
[01:07:32.206]      // if-block "!canReadPins"
[01:07:32.206]        // =>  FALSE
[01:07:32.206]      // skip if-block "!canReadPins"
[01:07:32.206]    </control>
[01:07:32.206]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:07:32.206]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:07:32.206]        // =>  TRUE
[01:07:32.206]      <block atomic="false" info="">
[01:07:32.206]        WriteAP(0x00, 0x190008);
[01:07:32.208]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:07:32.208]        WriteAP(0xF0, 0x01);
[01:07:32.212]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:07:32.212]      </block>
[01:07:32.212]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:07:32.212]    </control>
[01:07:32.212]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:07:32.212]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:07:32.212]        // =>  FALSE
[01:07:32.212]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:07:32.212]    </control>
[01:07:32.212]    <block atomic="false" info="">
[01:07:32.212]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:07:32.217]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:07:32.217]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:07:32.217]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:07:32.218]      __ap = 0; //lets make sure we reset the access point selection
[01:07:32.218]        // -> [__ap <= 0x00000000]
[01:07:32.218]    </block>
[01:07:32.218]  </sequence>
[01:07:32.218]  
[01:07:32.238]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:07:32.238]  
[01:07:32.238]  <debugvars>
[01:07:32.238]    // Pre-defined
[01:07:32.238]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:07:32.238]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:07:32.238]    __dp=0x00000000
[01:07:32.238]    __ap=0x00000000
[01:07:32.239]    __traceout=0x00000000      (Trace Disabled)
[01:07:32.239]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:07:32.239]    __FlashAddr=0x00000000
[01:07:32.239]    __FlashLen=0x00000000
[01:07:32.239]    __FlashArg=0x00000000
[01:07:32.239]    __FlashOp=0x00000000
[01:07:32.239]    __Result=0x00000000
[01:07:32.239]  </debugvars>
[01:07:32.239]  
[01:07:32.239]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:07:32.239]    <block atomic="false" info="">
[01:07:32.239]      __var deviceID = 0;
[01:07:32.239]        // -> [deviceID <= 0x00000000]
[01:07:32.240]      __var version = 0;
[01:07:32.240]        // -> [version <= 0x00000000]
[01:07:32.240]      __var partNum = 0;
[01:07:32.240]        // -> [partNum <= 0x00000000]
[01:07:32.240]      __var manuf = 0;
[01:07:32.240]        // -> [manuf <= 0x00000000]
[01:07:32.240]      __var isMSPM0G1X0X_G3X0X = 0;
[01:07:32.240]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:07:32.240]      __var isProduction = 0;
[01:07:32.241]        // -> [isProduction <= 0x00000000]
[01:07:32.241]      __var continueId = 0;
[01:07:32.241]        // -> [continueId <= 0x00000000]
[01:07:32.241]      deviceID =   Read32(0x41C40004);
[01:07:32.246]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:07:32.246]        // -> [deviceID <= 0x2BB8802F]
[01:07:32.246]      version = deviceID >> 28;
[01:07:32.246]        // -> [version <= 0x00000002]
[01:07:32.246]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:07:32.246]        // -> [partNum <= 0x0000BB88]
[01:07:32.246]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:07:32.246]        // -> [manuf <= 0x00000017]
[01:07:32.246]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:07:32.246]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:07:32.246]      isProduction = (version > 0);
[01:07:32.246]        // -> [isProduction <= 0x00000001]
[01:07:32.246]    </block>
[01:07:32.246]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:07:32.246]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:07:32.246]        // =>  FALSE
[01:07:32.246]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:07:32.246]    </control>
[01:07:32.246]    <control if="continueId == 4" while="" timeout="0" info="">
[01:07:32.249]      // if-block "continueId == 4"
[01:07:32.249]        // =>  FALSE
[01:07:32.249]      // skip if-block "continueId == 4"
[01:07:32.249]    </control>
[01:07:32.249]    <control if="!isProduction" while="" timeout="0" info="">
[01:07:32.249]      // if-block "!isProduction"
[01:07:32.249]        // =>  FALSE
[01:07:32.249]      // skip if-block "!isProduction"
[01:07:32.249]    </control>
[01:07:32.249]  </sequence>
[01:07:32.249]  
[01:14:19.104]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:14:19.104]  
[01:14:19.104]  <debugvars>
[01:14:19.104]    // Pre-defined
[01:14:19.104]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:14:19.104]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:14:19.104]    __dp=0x00000000
[01:14:19.104]    __ap=0x00000000
[01:14:19.104]    __traceout=0x00000000      (Trace Disabled)
[01:14:19.104]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:14:19.104]    __FlashAddr=0x00000000
[01:14:19.104]    __FlashLen=0x00000000
[01:14:19.104]    __FlashArg=0x00000000
[01:14:19.104]    __FlashOp=0x00000000
[01:14:19.104]    __Result=0x00000000
[01:14:19.104]  </debugvars>
[01:14:19.104]  
[01:14:19.104]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:14:19.104]    <block atomic="false" info="">
[01:14:19.104]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:14:19.104]        // -> [isSWJ <= 0x00000001]
[01:14:19.104]      __var hasDormant = __protocol & 0x00020000;
[01:14:19.104]        // -> [hasDormant <= 0x00000000]
[01:14:19.104]      __var protType   = __protocol & 0x0000FFFF;
[01:14:19.104]        // -> [protType <= 0x00000002]
[01:14:19.104]    </block>
[01:14:19.108]    <control if="protType == 1" while="" timeout="0" info="">
[01:14:19.108]      // if-block "protType == 1"
[01:14:19.108]        // =>  FALSE
[01:14:19.108]      // skip if-block "protType == 1"
[01:14:19.108]    </control>
[01:14:19.108]    <control if="protType == 2" while="" timeout="0" info="">
[01:14:19.108]      // if-block "protType == 2"
[01:14:19.108]        // =>  TRUE
[01:14:19.108]      <control if="isSWJ" while="" timeout="0" info="">
[01:14:19.108]        // if-block "isSWJ"
[01:14:19.110]          // =>  TRUE
[01:14:19.110]        <control if="hasDormant" while="" timeout="0" info="">
[01:14:19.110]          // if-block "hasDormant"
[01:14:19.110]            // =>  FALSE
[01:14:19.110]          // skip if-block "hasDormant"
[01:14:19.110]        </control>
[01:14:19.110]        <control if="!hasDormant" while="" timeout="0" info="">
[01:14:19.110]          // if-block "!hasDormant"
[01:14:19.110]            // =>  TRUE
[01:14:19.110]          <block atomic="false" info="">
[01:14:19.110]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:14:19.112]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:14:19.112]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:14:19.112]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:14:19.112]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:14:19.115]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:14:19.115]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:14:19.116]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:14:19.116]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:14:19.116]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:14:19.116]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:14:19.116]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:14:19.116]          </block>
[01:14:19.116]          // end if-block "!hasDormant"
[01:14:19.116]        </control>
[01:14:19.116]        // end if-block "isSWJ"
[01:14:19.116]      </control>
[01:14:19.116]      <control if="!isSWJ" while="" timeout="0" info="">
[01:14:19.116]        // if-block "!isSWJ"
[01:14:19.116]          // =>  FALSE
[01:14:19.116]        // skip if-block "!isSWJ"
[01:14:19.116]      </control>
[01:14:19.116]      <block atomic="false" info="">
[01:14:19.116]        ReadDP(0x0);
[01:14:19.116]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:14:19.116]      </block>
[01:14:19.116]      // end if-block "protType == 2"
[01:14:19.116]    </control>
[01:14:19.116]  </sequence>
[01:14:19.116]  
[01:14:19.124]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:14:19.124]  
[01:14:19.124]  <debugvars>
[01:14:19.124]    // Pre-defined
[01:14:19.124]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:14:19.124]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:14:19.124]    __dp=0x00000000
[01:14:19.124]    __ap=0x00000000
[01:14:19.124]    __traceout=0x00000000      (Trace Disabled)
[01:14:19.124]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:14:19.124]    __FlashAddr=0x00000000
[01:14:19.124]    __FlashLen=0x00000000
[01:14:19.124]    __FlashArg=0x00000000
[01:14:19.124]    __FlashOp=0x00000000
[01:14:19.124]    __Result=0x00000000
[01:14:19.124]  </debugvars>
[01:14:19.124]  
[01:14:19.124]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:14:19.124]    <block atomic="false" info="">
[01:14:19.124]      __var SW_DP_ABORT       = 0x0;
[01:14:19.124]        // -> [SW_DP_ABORT <= 0x00000000]
[01:14:19.124]      __var DP_CTRL_STAT      = 0x4;
[01:14:19.124]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:14:19.124]      __var DP_SELECT         = 0x8;
[01:14:19.124]        // -> [DP_SELECT <= 0x00000008]
[01:14:19.124]      __var powered_down      = 0;
[01:14:19.124]        // -> [powered_down <= 0x00000000]
[01:14:19.124]      WriteDP(DP_SELECT, 0x00000000);
[01:14:19.124]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:14:19.124]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:14:19.124]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:14:19.124]        // -> [powered_down <= 0x00000001]
[01:14:19.124]    </block>
[01:14:19.124]    <control if="powered_down" while="" timeout="0" info="">
[01:14:19.124]      // if-block "powered_down"
[01:14:19.124]        // =>  TRUE
[01:14:19.124]      <block atomic="false" info="">
[01:14:19.124]        Message(0, "Debug/System power-up request sent");
[01:14:19.135]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:14:19.136]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:14:19.136]      </block>
[01:14:19.136]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:14:19.136]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:14:19.137]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:14:19.137]        // while-condition  =>  FALSE
[01:14:19.137]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:14:19.137]      </control>
[01:14:19.137]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:14:19.137]        // if-block "(__protocol & 0xFFFF) == 1"
[01:14:19.137]          // =>  FALSE
[01:14:19.137]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:14:19.137]      </control>
[01:14:19.137]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:14:19.137]        // if-block "(__protocol & 0xFFFF) == 2"
[01:14:19.137]          // =>  TRUE
[01:14:19.137]        <block atomic="false" info="">
[01:14:19.137]          Message(0, "executing SWD power up");
[01:14:19.140]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:14:19.140]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:14:19.140]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:14:19.140]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:14:19.144]        </block>
[01:14:19.144]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:14:19.144]      </control>
[01:14:19.144]      // end if-block "powered_down"
[01:14:19.144]    </control>
[01:14:19.144]    <block atomic="false" info="">
[01:14:19.144]      __var DEBUG_PORT_VAL    = 0;
[01:14:19.144]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:14:19.144]      __var ACCESS_POINT_VAL  = 0;
[01:14:19.146]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:14:19.146]      __ap = 1; 
[01:14:19.146]        // -> [__ap <= 0x00000001]
[01:14:19.146]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:14:19.147]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:14:19.147]      __ap = 4;
[01:14:19.147]        // -> [__ap <= 0x00000004]
[01:14:19.147]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:14:19.151]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:14:19.151]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:14:19.151]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:14:19.155]    </block>
[01:14:19.155]    <block atomic="false" info="">
[01:14:19.155]      __var nReset = 0x80;
[01:14:19.155]        // -> [nReset <= 0x00000080]
[01:14:19.155]      __var canReadPins = 0;
[01:14:19.155]        // -> [canReadPins <= 0x00000000]
[01:14:19.155]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:14:19.155]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:14:19.155]        // -> [canReadPins <= 0x00000001]
[01:14:19.155]    </block>
[01:14:19.155]    <control if="" while="1" timeout="200" info="">
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.155]      // while-condition  =>  TRUE
[01:14:19.155]      // while "1"  (timeout="200")
[01:14:19.165]      // while-condition  =>  TRUE
[01:14:19.165]      // while "1"  (timeout="200")
[01:14:19.165]      // while  =>  TIMEOUT
[01:14:19.165]      // end while "1"
[01:14:19.165]    </control>
[01:14:19.165]    <control if="canReadPins" while="" timeout="0" info="">
[01:14:19.165]      // if-block "canReadPins"
[01:14:19.165]        // =>  TRUE
[01:14:19.165]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:14:19.165]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:14:19.166]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:14:19.166]        // while-condition  =>  FALSE
[01:14:19.166]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:14:19.166]      </control>
[01:14:19.166]      // end if-block "canReadPins"
[01:14:19.166]    </control>
[01:14:19.166]    <control if="!canReadPins" while="" timeout="0" info="">
[01:14:19.166]      // if-block "!canReadPins"
[01:14:19.166]        // =>  FALSE
[01:14:19.166]      // skip if-block "!canReadPins"
[01:14:19.166]    </control>
[01:14:19.166]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:14:19.166]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:14:19.166]        // =>  TRUE
[01:14:19.166]      <block atomic="false" info="">
[01:14:19.166]        WriteAP(0x00, 0x190008);
[01:14:19.166]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:14:19.166]        WriteAP(0xF0, 0x01);
[01:14:19.166]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:14:19.166]      </block>
[01:14:19.166]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:14:19.166]    </control>
[01:14:19.166]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:14:19.166]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:14:19.166]        // =>  FALSE
[01:14:19.175]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:14:19.175]    </control>
[01:14:19.175]    <block atomic="false" info="">
[01:14:19.175]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:14:19.176]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:14:19.176]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:14:19.176]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:14:19.176]      __ap = 0; //lets make sure we reset the access point selection
[01:14:19.176]        // -> [__ap <= 0x00000000]
[01:14:19.176]    </block>
[01:14:19.176]  </sequence>
[01:14:19.176]  
[01:14:19.197]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:14:19.197]  
[01:14:19.197]  <debugvars>
[01:14:19.197]    // Pre-defined
[01:14:19.197]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:14:19.197]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:14:19.197]    __dp=0x00000000
[01:14:19.197]    __ap=0x00000000
[01:14:19.197]    __traceout=0x00000000      (Trace Disabled)
[01:14:19.197]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:14:19.197]    __FlashAddr=0x00000000
[01:14:19.197]    __FlashLen=0x00000000
[01:14:19.197]    __FlashArg=0x00000000
[01:14:19.197]    __FlashOp=0x00000000
[01:14:19.197]    __Result=0x00000000
[01:14:19.197]  </debugvars>
[01:14:19.197]  
[01:14:19.197]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:14:19.197]    <block atomic="false" info="">
[01:14:19.197]      __var deviceID = 0;
[01:14:19.197]        // -> [deviceID <= 0x00000000]
[01:14:19.197]      __var version = 0;
[01:14:19.197]        // -> [version <= 0x00000000]
[01:14:19.197]      __var partNum = 0;
[01:14:19.197]        // -> [partNum <= 0x00000000]
[01:14:19.197]      __var manuf = 0;
[01:14:19.197]        // -> [manuf <= 0x00000000]
[01:14:19.197]      __var isMSPM0G1X0X_G3X0X = 0;
[01:14:19.197]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:14:19.197]      __var isProduction = 0;
[01:14:19.197]        // -> [isProduction <= 0x00000000]
[01:14:19.197]      __var continueId = 0;
[01:14:19.197]        // -> [continueId <= 0x00000000]
[01:14:19.197]      deviceID =   Read32(0x41C40004);
[01:14:19.207]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:14:19.207]        // -> [deviceID <= 0x2BB8802F]
[01:14:19.207]      version = deviceID >> 28;
[01:14:19.207]        // -> [version <= 0x00000002]
[01:14:19.207]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:14:19.207]        // -> [partNum <= 0x0000BB88]
[01:14:19.207]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:14:19.207]        // -> [manuf <= 0x00000017]
[01:14:19.207]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:14:19.207]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:14:19.207]      isProduction = (version > 0);
[01:14:19.207]        // -> [isProduction <= 0x00000001]
[01:14:19.207]    </block>
[01:14:19.207]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:14:19.207]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:14:19.207]        // =>  FALSE
[01:14:19.207]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:14:19.207]    </control>
[01:14:19.207]    <control if="continueId == 4" while="" timeout="0" info="">
[01:14:19.207]      // if-block "continueId == 4"
[01:14:19.207]        // =>  FALSE
[01:14:19.207]      // skip if-block "continueId == 4"
[01:14:19.207]    </control>
[01:14:19.207]    <control if="!isProduction" while="" timeout="0" info="">
[01:14:19.207]      // if-block "!isProduction"
[01:14:19.207]        // =>  FALSE
[01:14:19.207]      // skip if-block "!isProduction"
[01:14:19.207]    </control>
[01:14:19.207]  </sequence>
[01:14:19.207]  
[01:17:02.631]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:17:02.631]  
[01:17:02.640]  <debugvars>
[01:17:02.640]    // Pre-defined
[01:17:02.640]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:02.640]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:02.640]    __dp=0x00000000
[01:17:02.640]    __ap=0x00000000
[01:17:02.640]    __traceout=0x00000000      (Trace Disabled)
[01:17:02.640]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:02.640]    __FlashAddr=0x00000000
[01:17:02.640]    __FlashLen=0x00000000
[01:17:02.640]    __FlashArg=0x00000000
[01:17:02.640]    __FlashOp=0x00000000
[01:17:02.640]    __Result=0x00000000
[01:17:02.640]  </debugvars>
[01:17:02.640]  
[01:17:02.640]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:17:02.640]    <block atomic="false" info="">
[01:17:02.640]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:17:02.640]        // -> [isSWJ <= 0x00000001]
[01:17:02.640]      __var hasDormant = __protocol & 0x00020000;
[01:17:02.640]        // -> [hasDormant <= 0x00000000]
[01:17:02.640]      __var protType   = __protocol & 0x0000FFFF;
[01:17:02.640]        // -> [protType <= 0x00000002]
[01:17:02.640]    </block>
[01:17:02.640]    <control if="protType == 1" while="" timeout="0" info="">
[01:17:02.640]      // if-block "protType == 1"
[01:17:02.645]        // =>  FALSE
[01:17:02.645]      // skip if-block "protType == 1"
[01:17:02.645]    </control>
[01:17:02.645]    <control if="protType == 2" while="" timeout="0" info="">
[01:17:02.645]      // if-block "protType == 2"
[01:17:02.645]        // =>  TRUE
[01:17:02.645]      <control if="isSWJ" while="" timeout="0" info="">
[01:17:02.645]        // if-block "isSWJ"
[01:17:02.645]          // =>  TRUE
[01:17:02.645]        <control if="hasDormant" while="" timeout="0" info="">
[01:17:02.645]          // if-block "hasDormant"
[01:17:02.645]            // =>  FALSE
[01:17:02.645]          // skip if-block "hasDormant"
[01:17:02.645]        </control>
[01:17:02.645]        <control if="!hasDormant" while="" timeout="0" info="">
[01:17:02.645]          // if-block "!hasDormant"
[01:17:02.645]            // =>  TRUE
[01:17:02.645]          <block atomic="false" info="">
[01:17:02.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:17:02.645]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:02.645]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:17:02.645]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:17:02.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:17:02.645]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:02.645]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:17:02.645]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:17:02.645]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:17:02.655]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:02.655]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:17:02.655]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:17:02.655]          </block>
[01:17:02.655]          // end if-block "!hasDormant"
[01:17:02.655]        </control>
[01:17:02.655]        // end if-block "isSWJ"
[01:17:02.655]      </control>
[01:17:02.655]      <control if="!isSWJ" while="" timeout="0" info="">
[01:17:02.655]        // if-block "!isSWJ"
[01:17:02.655]          // =>  FALSE
[01:17:02.655]        // skip if-block "!isSWJ"
[01:17:02.655]      </control>
[01:17:02.655]      <block atomic="false" info="">
[01:17:02.655]        ReadDP(0x0);
[01:17:02.659]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:17:02.659]      </block>
[01:17:02.659]      // end if-block "protType == 2"
[01:17:02.659]    </control>
[01:17:02.659]  </sequence>
[01:17:02.659]  
[01:17:02.662]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:17:02.662]  
[01:17:02.662]  <debugvars>
[01:17:02.662]    // Pre-defined
[01:17:02.662]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:02.662]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:02.662]    __dp=0x00000000
[01:17:02.662]    __ap=0x00000000
[01:17:02.662]    __traceout=0x00000000      (Trace Disabled)
[01:17:02.662]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:02.662]    __FlashAddr=0x00000000
[01:17:02.662]    __FlashLen=0x00000000
[01:17:02.662]    __FlashArg=0x00000000
[01:17:02.662]    __FlashOp=0x00000000
[01:17:02.662]    __Result=0x00000000
[01:17:02.662]  </debugvars>
[01:17:02.662]  
[01:17:02.662]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:17:02.662]    <block atomic="false" info="">
[01:17:02.662]      __var SW_DP_ABORT       = 0x0;
[01:17:02.662]        // -> [SW_DP_ABORT <= 0x00000000]
[01:17:02.662]      __var DP_CTRL_STAT      = 0x4;
[01:17:02.662]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:17:02.662]      __var DP_SELECT         = 0x8;
[01:17:02.662]        // -> [DP_SELECT <= 0x00000008]
[01:17:02.662]      __var powered_down      = 0;
[01:17:02.662]        // -> [powered_down <= 0x00000000]
[01:17:02.665]      WriteDP(DP_SELECT, 0x00000000);
[01:17:02.668]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:17:02.668]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:17:02.668]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:17:02.670]        // -> [powered_down <= 0x00000001]
[01:17:02.670]    </block>
[01:17:02.670]    <control if="powered_down" while="" timeout="0" info="">
[01:17:02.670]      // if-block "powered_down"
[01:17:02.670]        // =>  TRUE
[01:17:02.670]      <block atomic="false" info="">
[01:17:02.670]        Message(0, "Debug/System power-up request sent");
[01:17:02.672]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:17:02.674]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:17:02.674]      </block>
[01:17:02.674]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:17:02.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:17:02.676]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:17:02.676]        // while-condition  =>  FALSE
[01:17:02.676]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:17:02.676]      </control>
[01:17:02.676]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:17:02.676]        // if-block "(__protocol & 0xFFFF) == 1"
[01:17:02.676]          // =>  FALSE
[01:17:02.676]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:17:02.676]      </control>
[01:17:02.676]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:17:02.676]        // if-block "(__protocol & 0xFFFF) == 2"
[01:17:02.676]          // =>  TRUE
[01:17:02.676]        <block atomic="false" info="">
[01:17:02.676]          Message(0, "executing SWD power up");
[01:17:02.676]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:17:02.676]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:17:02.684]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:17:02.684]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:17:02.684]        </block>
[01:17:02.684]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:17:02.684]      </control>
[01:17:02.684]      // end if-block "powered_down"
[01:17:02.684]    </control>
[01:17:02.684]    <block atomic="false" info="">
[01:17:02.684]      __var DEBUG_PORT_VAL    = 0;
[01:17:02.686]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:17:02.686]      __var ACCESS_POINT_VAL  = 0;
[01:17:02.686]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:17:02.686]      __ap = 1; 
[01:17:02.686]        // -> [__ap <= 0x00000001]
[01:17:02.686]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:17:02.686]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:17:02.686]      __ap = 4;
[01:17:02.686]        // -> [__ap <= 0x00000004]
[01:17:02.686]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:17:02.692]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:17:02.692]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:17:02.692]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:17:02.692]    </block>
[01:17:02.696]    <block atomic="false" info="">
[01:17:02.696]      __var nReset = 0x80;
[01:17:02.696]        // -> [nReset <= 0x00000080]
[01:17:02.696]      __var canReadPins = 0;
[01:17:02.696]        // -> [canReadPins <= 0x00000000]
[01:17:02.696]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:17:02.696]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:17:02.696]        // -> [canReadPins <= 0x00000001]
[01:17:02.696]    </block>
[01:17:02.696]    <control if="" while="1" timeout="200" info="">
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.696]      // while "1"  (timeout="200")
[01:17:02.696]      // while-condition  =>  TRUE
[01:17:02.703]      // while "1"  (timeout="200")
[01:17:02.703]      // while  =>  TIMEOUT
[01:17:02.703]      // end while "1"
[01:17:02.703]    </control>
[01:17:02.703]    <control if="canReadPins" while="" timeout="0" info="">
[01:17:02.703]      // if-block "canReadPins"
[01:17:02.703]        // =>  TRUE
[01:17:02.703]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:17:02.705]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:17:02.705]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:17:02.705]        // while-condition  =>  FALSE
[01:17:02.705]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:17:02.707]      </control>
[01:17:02.707]      // end if-block "canReadPins"
[01:17:02.707]    </control>
[01:17:02.707]    <control if="!canReadPins" while="" timeout="0" info="">
[01:17:02.707]      // if-block "!canReadPins"
[01:17:02.707]        // =>  FALSE
[01:17:02.707]      // skip if-block "!canReadPins"
[01:17:02.707]    </control>
[01:17:02.707]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:17:02.707]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:17:02.707]        // =>  TRUE
[01:17:02.707]      <block atomic="false" info="">
[01:17:02.707]        WriteAP(0x00, 0x190008);
[01:17:02.710]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:17:02.710]        WriteAP(0xF0, 0x01);
[01:17:02.713]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:17:02.713]      </block>
[01:17:02.713]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:17:02.713]    </control>
[01:17:02.713]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:17:02.713]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:17:02.713]        // =>  FALSE
[01:17:02.713]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:17:02.713]    </control>
[01:17:02.713]    <block atomic="false" info="">
[01:17:02.713]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:17:02.717]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:17:02.717]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:17:02.717]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:17:02.720]      __ap = 0; //lets make sure we reset the access point selection
[01:17:02.720]        // -> [__ap <= 0x00000000]
[01:17:02.720]    </block>
[01:17:02.721]  </sequence>
[01:17:02.721]  
[01:17:02.739]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:17:02.739]  
[01:17:02.739]  <debugvars>
[01:17:02.740]    // Pre-defined
[01:17:02.740]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:02.740]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:02.740]    __dp=0x00000000
[01:17:02.741]    __ap=0x00000000
[01:17:02.741]    __traceout=0x00000000      (Trace Disabled)
[01:17:02.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:02.741]    __FlashAddr=0x00000000
[01:17:02.741]    __FlashLen=0x00000000
[01:17:02.741]    __FlashArg=0x00000000
[01:17:02.741]    __FlashOp=0x00000000
[01:17:02.741]    __Result=0x00000000
[01:17:02.741]  </debugvars>
[01:17:02.742]  
[01:17:02.742]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:17:02.742]    <block atomic="false" info="">
[01:17:02.742]      __var deviceID = 0;
[01:17:02.742]        // -> [deviceID <= 0x00000000]
[01:17:02.742]      __var version = 0;
[01:17:02.743]        // -> [version <= 0x00000000]
[01:17:02.743]      __var partNum = 0;
[01:17:02.743]        // -> [partNum <= 0x00000000]
[01:17:02.743]      __var manuf = 0;
[01:17:02.743]        // -> [manuf <= 0x00000000]
[01:17:02.743]      __var isMSPM0G1X0X_G3X0X = 0;
[01:17:02.743]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:17:02.743]      __var isProduction = 0;
[01:17:02.743]        // -> [isProduction <= 0x00000000]
[01:17:02.743]      __var continueId = 0;
[01:17:02.744]        // -> [continueId <= 0x00000000]
[01:17:02.744]      deviceID =   Read32(0x41C40004);
[01:17:02.749]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:17:02.749]        // -> [deviceID <= 0x2BB8802F]
[01:17:02.749]      version = deviceID >> 28;
[01:17:02.749]        // -> [version <= 0x00000002]
[01:17:02.749]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:17:02.749]        // -> [partNum <= 0x0000BB88]
[01:17:02.749]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:17:02.749]        // -> [manuf <= 0x00000017]
[01:17:02.750]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:17:02.750]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:17:02.750]      isProduction = (version > 0);
[01:17:02.750]        // -> [isProduction <= 0x00000001]
[01:17:02.750]    </block>
[01:17:02.750]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:17:02.751]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:17:02.751]        // =>  FALSE
[01:17:02.751]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:17:02.751]    </control>
[01:17:02.751]    <control if="continueId == 4" while="" timeout="0" info="">
[01:17:02.751]      // if-block "continueId == 4"
[01:17:02.751]        // =>  FALSE
[01:17:02.752]      // skip if-block "continueId == 4"
[01:17:02.752]    </control>
[01:17:02.752]    <control if="!isProduction" while="" timeout="0" info="">
[01:17:02.752]      // if-block "!isProduction"
[01:17:02.752]        // =>  FALSE
[01:17:02.752]      // skip if-block "!isProduction"
[01:17:02.752]    </control>
[01:17:02.752]  </sequence>
[01:17:02.752]  
[01:17:56.917]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:17:56.917]  
[01:17:56.927]  <debugvars>
[01:17:56.927]    // Pre-defined
[01:17:56.927]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:56.927]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:56.927]    __dp=0x00000000
[01:17:56.927]    __ap=0x00000000
[01:17:56.927]    __traceout=0x00000000      (Trace Disabled)
[01:17:56.927]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:56.927]    __FlashAddr=0x00000000
[01:17:56.927]    __FlashLen=0x00000000
[01:17:56.927]    __FlashArg=0x00000000
[01:17:56.927]    __FlashOp=0x00000000
[01:17:56.928]    __Result=0x00000000
[01:17:56.928]  </debugvars>
[01:17:56.928]  
[01:17:56.928]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:17:56.928]    <block atomic="false" info="">
[01:17:56.928]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:17:56.929]        // -> [isSWJ <= 0x00000001]
[01:17:56.929]      __var hasDormant = __protocol & 0x00020000;
[01:17:56.929]        // -> [hasDormant <= 0x00000000]
[01:17:56.929]      __var protType   = __protocol & 0x0000FFFF;
[01:17:56.929]        // -> [protType <= 0x00000002]
[01:17:56.929]    </block>
[01:17:56.929]    <control if="protType == 1" while="" timeout="0" info="">
[01:17:56.929]      // if-block "protType == 1"
[01:17:56.931]        // =>  FALSE
[01:17:56.931]      // skip if-block "protType == 1"
[01:17:56.931]    </control>
[01:17:56.931]    <control if="protType == 2" while="" timeout="0" info="">
[01:17:56.931]      // if-block "protType == 2"
[01:17:56.931]        // =>  TRUE
[01:17:56.931]      <control if="isSWJ" while="" timeout="0" info="">
[01:17:56.932]        // if-block "isSWJ"
[01:17:56.932]          // =>  TRUE
[01:17:56.932]        <control if="hasDormant" while="" timeout="0" info="">
[01:17:56.932]          // if-block "hasDormant"
[01:17:56.932]            // =>  FALSE
[01:17:56.932]          // skip if-block "hasDormant"
[01:17:56.932]        </control>
[01:17:56.932]        <control if="!hasDormant" while="" timeout="0" info="">
[01:17:56.932]          // if-block "!hasDormant"
[01:17:56.932]            // =>  TRUE
[01:17:56.932]          <block atomic="false" info="">
[01:17:56.932]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:17:56.934]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:56.934]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:17:56.935]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:17:56.935]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:17:56.937]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:56.937]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:17:56.938]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:17:56.938]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:17:56.941]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:17:56.941]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:17:56.942]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:17:56.942]          </block>
[01:17:56.942]          // end if-block "!hasDormant"
[01:17:56.942]        </control>
[01:17:56.942]        // end if-block "isSWJ"
[01:17:56.942]      </control>
[01:17:56.942]      <control if="!isSWJ" while="" timeout="0" info="">
[01:17:56.942]        // if-block "!isSWJ"
[01:17:56.942]          // =>  FALSE
[01:17:56.944]        // skip if-block "!isSWJ"
[01:17:56.944]      </control>
[01:17:56.944]      <block atomic="false" info="">
[01:17:56.944]        ReadDP(0x0);
[01:17:56.944]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:17:56.944]      </block>
[01:17:56.944]      // end if-block "protType == 2"
[01:17:56.944]    </control>
[01:17:56.944]  </sequence>
[01:17:56.944]  
[01:17:56.950]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:17:56.950]  
[01:17:56.950]  <debugvars>
[01:17:56.950]    // Pre-defined
[01:17:56.950]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:56.950]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:56.950]    __dp=0x00000000
[01:17:56.950]    __ap=0x00000000
[01:17:56.950]    __traceout=0x00000000      (Trace Disabled)
[01:17:56.950]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:56.950]    __FlashAddr=0x00000000
[01:17:56.950]    __FlashLen=0x00000000
[01:17:56.950]    __FlashArg=0x00000000
[01:17:56.950]    __FlashOp=0x00000000
[01:17:56.950]    __Result=0x00000000
[01:17:56.950]  </debugvars>
[01:17:56.950]  
[01:17:56.950]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:17:56.951]    <block atomic="false" info="">
[01:17:56.951]      __var SW_DP_ABORT       = 0x0;
[01:17:56.951]        // -> [SW_DP_ABORT <= 0x00000000]
[01:17:56.951]      __var DP_CTRL_STAT      = 0x4;
[01:17:56.951]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:17:56.951]      __var DP_SELECT         = 0x8;
[01:17:56.951]        // -> [DP_SELECT <= 0x00000008]
[01:17:56.951]      __var powered_down      = 0;
[01:17:56.951]        // -> [powered_down <= 0x00000000]
[01:17:56.951]      WriteDP(DP_SELECT, 0x00000000);
[01:17:56.953]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:17:56.953]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:17:56.956]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:17:56.956]        // -> [powered_down <= 0x00000001]
[01:17:56.956]    </block>
[01:17:56.956]    <control if="powered_down" while="" timeout="0" info="">
[01:17:56.956]      // if-block "powered_down"
[01:17:56.956]        // =>  TRUE
[01:17:56.956]      <block atomic="false" info="">
[01:17:56.956]        Message(0, "Debug/System power-up request sent");
[01:17:56.958]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:17:56.960]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:17:56.960]      </block>
[01:17:56.960]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:17:56.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:17:56.961]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:17:56.961]        // while-condition  =>  FALSE
[01:17:56.961]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:17:56.961]      </control>
[01:17:56.961]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:17:56.961]        // if-block "(__protocol & 0xFFFF) == 1"
[01:17:56.961]          // =>  FALSE
[01:17:56.961]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:17:56.961]      </control>
[01:17:56.961]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:17:56.961]        // if-block "(__protocol & 0xFFFF) == 2"
[01:17:56.961]          // =>  TRUE
[01:17:56.961]        <block atomic="false" info="">
[01:17:56.961]          Message(0, "executing SWD power up");
[01:17:56.964]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:17:56.966]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:17:56.967]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:17:56.968]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:17:56.968]        </block>
[01:17:56.968]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:17:56.968]      </control>
[01:17:56.968]      // end if-block "powered_down"
[01:17:56.968]    </control>
[01:17:56.968]    <block atomic="false" info="">
[01:17:56.968]      __var DEBUG_PORT_VAL    = 0;
[01:17:56.968]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:17:56.968]      __var ACCESS_POINT_VAL  = 0;
[01:17:56.968]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:17:56.968]      __ap = 1; 
[01:17:56.968]        // -> [__ap <= 0x00000001]
[01:17:56.971]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:17:56.973]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:17:56.973]      __ap = 4;
[01:17:56.973]        // -> [__ap <= 0x00000004]
[01:17:56.973]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:17:56.978]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:17:56.978]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:17:56.978]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:17:56.980]    </block>
[01:17:56.980]    <block atomic="false" info="">
[01:17:56.980]      __var nReset = 0x80;
[01:17:56.980]        // -> [nReset <= 0x00000080]
[01:17:56.980]      __var canReadPins = 0;
[01:17:56.982]        // -> [canReadPins <= 0x00000000]
[01:17:56.982]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:17:56.983]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:17:56.983]        // -> [canReadPins <= 0x00000001]
[01:17:56.983]    </block>
[01:17:56.983]    <control if="" while="1" timeout="200" info="">
[01:17:56.983]      // while "1"  (timeout="200")
[01:17:56.983]      // while-condition  =>  TRUE
[01:17:56.983]      // while "1"  (timeout="200")
[01:17:56.983]      // while-condition  =>  TRUE
[01:17:56.983]      // while "1"  (timeout="200")
[01:17:56.983]      // while-condition  =>  TRUE
[01:17:56.983]      // while "1"  (timeout="200")
[01:17:56.983]      // while-condition  =>  TRUE
[01:17:56.983]      // while "1"  (timeout="200")
[01:17:56.983]      // while-condition  =>  TRUE
[01:17:56.983]      // while "1"  (timeout="200")
[01:17:56.983]      // while-condition  =>  TRUE
[01:17:56.986]      // while "1"  (timeout="200")
[01:17:56.986]      // while  =>  TIMEOUT
[01:17:56.986]      // end while "1"
[01:17:56.986]    </control>
[01:17:56.986]    <control if="canReadPins" while="" timeout="0" info="">
[01:17:56.986]      // if-block "canReadPins"
[01:17:56.986]        // =>  TRUE
[01:17:56.986]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:17:56.986]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:17:56.988]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:17:56.988]        // while-condition  =>  FALSE
[01:17:56.988]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:17:56.988]      </control>
[01:17:56.988]      // end if-block "canReadPins"
[01:17:56.988]    </control>
[01:17:56.988]    <control if="!canReadPins" while="" timeout="0" info="">
[01:17:56.988]      // if-block "!canReadPins"
[01:17:56.988]        // =>  FALSE
[01:17:56.988]      // skip if-block "!canReadPins"
[01:17:56.988]    </control>
[01:17:56.990]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:17:56.990]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:17:56.990]        // =>  TRUE
[01:17:56.990]      <block atomic="false" info="">
[01:17:56.990]        WriteAP(0x00, 0x190008);
[01:17:56.992]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:17:56.992]        WriteAP(0xF0, 0x01);
[01:17:56.993]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:17:56.993]      </block>
[01:17:56.993]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:17:56.993]    </control>
[01:17:56.993]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:17:56.993]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:17:56.993]        // =>  FALSE
[01:17:56.993]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:17:56.993]    </control>
[01:17:56.993]    <block atomic="false" info="">
[01:17:56.993]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:17:56.998]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:17:56.998]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:17:56.998]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:17:57.001]      __ap = 0; //lets make sure we reset the access point selection
[01:17:57.002]        // -> [__ap <= 0x00000000]
[01:17:57.002]    </block>
[01:17:57.002]  </sequence>
[01:17:57.002]  
[01:17:57.021]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:17:57.021]  
[01:17:57.021]  <debugvars>
[01:17:57.023]    // Pre-defined
[01:17:57.023]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:17:57.023]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:17:57.023]    __dp=0x00000000
[01:17:57.023]    __ap=0x00000000
[01:17:57.023]    __traceout=0x00000000      (Trace Disabled)
[01:17:57.023]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:17:57.023]    __FlashAddr=0x00000000
[01:17:57.023]    __FlashLen=0x00000000
[01:17:57.023]    __FlashArg=0x00000000
[01:17:57.023]    __FlashOp=0x00000000
[01:17:57.023]    __Result=0x00000000
[01:17:57.023]  </debugvars>
[01:17:57.023]  
[01:17:57.023]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:17:57.023]    <block atomic="false" info="">
[01:17:57.023]      __var deviceID = 0;
[01:17:57.023]        // -> [deviceID <= 0x00000000]
[01:17:57.023]      __var version = 0;
[01:17:57.023]        // -> [version <= 0x00000000]
[01:17:57.023]      __var partNum = 0;
[01:17:57.023]        // -> [partNum <= 0x00000000]
[01:17:57.023]      __var manuf = 0;
[01:17:57.023]        // -> [manuf <= 0x00000000]
[01:17:57.023]      __var isMSPM0G1X0X_G3X0X = 0;
[01:17:57.023]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:17:57.023]      __var isProduction = 0;
[01:17:57.023]        // -> [isProduction <= 0x00000000]
[01:17:57.023]      __var continueId = 0;
[01:17:57.023]        // -> [continueId <= 0x00000000]
[01:17:57.023]      deviceID =   Read32(0x41C40004);
[01:17:57.030]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:17:57.030]        // -> [deviceID <= 0x2BB8802F]
[01:17:57.030]      version = deviceID >> 28;
[01:17:57.033]        // -> [version <= 0x00000002]
[01:17:57.033]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:17:57.033]        // -> [partNum <= 0x0000BB88]
[01:17:57.033]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:17:57.033]        // -> [manuf <= 0x00000017]
[01:17:57.033]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:17:57.033]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:17:57.033]      isProduction = (version > 0);
[01:17:57.033]        // -> [isProduction <= 0x00000001]
[01:17:57.033]    </block>
[01:17:57.033]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:17:57.033]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:17:57.033]        // =>  FALSE
[01:17:57.033]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:17:57.033]    </control>
[01:17:57.033]    <control if="continueId == 4" while="" timeout="0" info="">
[01:17:57.033]      // if-block "continueId == 4"
[01:17:57.033]        // =>  FALSE
[01:17:57.033]      // skip if-block "continueId == 4"
[01:17:57.033]    </control>
[01:17:57.033]    <control if="!isProduction" while="" timeout="0" info="">
[01:17:57.033]      // if-block "!isProduction"
[01:17:57.033]        // =>  FALSE
[01:17:57.033]      // skip if-block "!isProduction"
[01:17:57.033]    </control>
[01:17:57.033]  </sequence>
[01:17:57.033]  
[01:18:47.602]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:18:47.602]  
[01:18:47.611]  <debugvars>
[01:18:47.611]    // Pre-defined
[01:18:47.611]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:47.611]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:47.611]    __dp=0x00000000
[01:18:47.611]    __ap=0x00000000
[01:18:47.611]    __traceout=0x00000000      (Trace Disabled)
[01:18:47.612]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:47.612]    __FlashAddr=0x00000000
[01:18:47.612]    __FlashLen=0x00000000
[01:18:47.612]    __FlashArg=0x00000000
[01:18:47.612]    __FlashOp=0x00000000
[01:18:47.612]    __Result=0x00000000
[01:18:47.612]  </debugvars>
[01:18:47.612]  
[01:18:47.612]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:18:47.613]    <block atomic="false" info="">
[01:18:47.613]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:18:47.613]        // -> [isSWJ <= 0x00000001]
[01:18:47.613]      __var hasDormant = __protocol & 0x00020000;
[01:18:47.613]        // -> [hasDormant <= 0x00000000]
[01:18:47.613]      __var protType   = __protocol & 0x0000FFFF;
[01:18:47.613]        // -> [protType <= 0x00000002]
[01:18:47.613]    </block>
[01:18:47.614]    <control if="protType == 1" while="" timeout="0" info="">
[01:18:47.614]      // if-block "protType == 1"
[01:18:47.614]        // =>  FALSE
[01:18:47.614]      // skip if-block "protType == 1"
[01:18:47.614]    </control>
[01:18:47.614]    <control if="protType == 2" while="" timeout="0" info="">
[01:18:47.614]      // if-block "protType == 2"
[01:18:47.615]        // =>  TRUE
[01:18:47.615]      <control if="isSWJ" while="" timeout="0" info="">
[01:18:47.615]        // if-block "isSWJ"
[01:18:47.615]          // =>  TRUE
[01:18:47.615]        <control if="hasDormant" while="" timeout="0" info="">
[01:18:47.615]          // if-block "hasDormant"
[01:18:47.615]            // =>  FALSE
[01:18:47.616]          // skip if-block "hasDormant"
[01:18:47.616]        </control>
[01:18:47.616]        <control if="!hasDormant" while="" timeout="0" info="">
[01:18:47.616]          // if-block "!hasDormant"
[01:18:47.617]            // =>  TRUE
[01:18:47.617]          <block atomic="false" info="">
[01:18:47.617]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:18:47.618]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:47.618]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:18:47.620]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:18:47.620]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:18:47.621]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:47.621]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:18:47.622]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:18:47.623]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:18:47.625]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:18:47.625]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:18:47.626]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:18:47.626]          </block>
[01:18:47.626]          // end if-block "!hasDormant"
[01:18:47.626]        </control>
[01:18:47.627]        // end if-block "isSWJ"
[01:18:47.627]      </control>
[01:18:47.627]      <control if="!isSWJ" while="" timeout="0" info="">
[01:18:47.627]        // if-block "!isSWJ"
[01:18:47.627]          // =>  FALSE
[01:18:47.627]        // skip if-block "!isSWJ"
[01:18:47.627]      </control>
[01:18:47.627]      <block atomic="false" info="">
[01:18:47.627]        ReadDP(0x0);
[01:18:47.630]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:18:47.630]      </block>
[01:18:47.631]      // end if-block "protType == 2"
[01:18:47.631]    </control>
[01:18:47.631]  </sequence>
[01:18:47.631]  
[01:18:47.634]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:18:47.634]  
[01:18:47.634]  <debugvars>
[01:18:47.634]    // Pre-defined
[01:18:47.634]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:47.634]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:47.634]    __dp=0x00000000
[01:18:47.635]    __ap=0x00000000
[01:18:47.635]    __traceout=0x00000000      (Trace Disabled)
[01:18:47.635]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:47.635]    __FlashAddr=0x00000000
[01:18:47.635]    __FlashLen=0x00000000
[01:18:47.635]    __FlashArg=0x00000000
[01:18:47.635]    __FlashOp=0x00000000
[01:18:47.635]    __Result=0x00000000
[01:18:47.635]  </debugvars>
[01:18:47.635]  
[01:18:47.635]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:18:47.635]    <block atomic="false" info="">
[01:18:47.635]      __var SW_DP_ABORT       = 0x0;
[01:18:47.635]        // -> [SW_DP_ABORT <= 0x00000000]
[01:18:47.635]      __var DP_CTRL_STAT      = 0x4;
[01:18:47.635]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:18:47.635]      __var DP_SELECT         = 0x8;
[01:18:47.635]        // -> [DP_SELECT <= 0x00000008]
[01:18:47.635]      __var powered_down      = 0;
[01:18:47.635]        // -> [powered_down <= 0x00000000]
[01:18:47.635]      WriteDP(DP_SELECT, 0x00000000);
[01:18:47.638]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:18:47.638]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:18:47.638]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:18:47.638]        // -> [powered_down <= 0x00000001]
[01:18:47.638]    </block>
[01:18:47.638]    <control if="powered_down" while="" timeout="0" info="">
[01:18:47.638]      // if-block "powered_down"
[01:18:47.638]        // =>  TRUE
[01:18:47.638]      <block atomic="false" info="">
[01:18:47.638]        Message(0, "Debug/System power-up request sent");
[01:18:47.638]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:18:47.638]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:18:47.638]      </block>
[01:18:47.638]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:18:47.638]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:18:47.638]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:18:47.638]        // while-condition  =>  FALSE
[01:18:47.638]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:18:47.638]      </control>
[01:18:47.638]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:18:47.638]        // if-block "(__protocol & 0xFFFF) == 1"
[01:18:47.638]          // =>  FALSE
[01:18:47.638]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:18:47.638]      </control>
[01:18:47.648]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:18:47.648]        // if-block "(__protocol & 0xFFFF) == 2"
[01:18:47.648]          // =>  TRUE
[01:18:47.648]        <block atomic="false" info="">
[01:18:47.648]          Message(0, "executing SWD power up");
[01:18:47.648]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:18:47.648]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:18:47.648]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:18:47.648]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:18:47.648]        </block>
[01:18:47.648]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:18:47.648]      </control>
[01:18:47.648]      // end if-block "powered_down"
[01:18:47.648]    </control>
[01:18:47.648]    <block atomic="false" info="">
[01:18:47.648]      __var DEBUG_PORT_VAL    = 0;
[01:18:47.648]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:18:47.648]      __var ACCESS_POINT_VAL  = 0;
[01:18:47.648]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:18:47.648]      __ap = 1; 
[01:18:47.648]        // -> [__ap <= 0x00000001]
[01:18:47.648]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:18:47.658]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:18:47.658]      __ap = 4;
[01:18:47.658]        // -> [__ap <= 0x00000004]
[01:18:47.658]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:18:47.658]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:18:47.658]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:18:47.658]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:18:47.668]    </block>
[01:18:47.668]    <block atomic="false" info="">
[01:18:47.668]      __var nReset = 0x80;
[01:18:47.668]        // -> [nReset <= 0x00000080]
[01:18:47.668]      __var canReadPins = 0;
[01:18:47.668]        // -> [canReadPins <= 0x00000000]
[01:18:47.668]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:18:47.668]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:18:47.668]        // -> [canReadPins <= 0x00000001]
[01:18:47.668]    </block>
[01:18:47.668]    <control if="" while="1" timeout="200" info="">
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.668]      // while "1"  (timeout="200")
[01:18:47.668]      // while-condition  =>  TRUE
[01:18:47.678]      // while "1"  (timeout="200")
[01:18:47.678]      // while  =>  TIMEOUT
[01:18:47.678]      // end while "1"
[01:18:47.678]    </control>
[01:18:47.679]    <control if="canReadPins" while="" timeout="0" info="">
[01:18:47.679]      // if-block "canReadPins"
[01:18:47.679]        // =>  TRUE
[01:18:47.679]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:18:47.679]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:18:47.680]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:18:47.680]        // while-condition  =>  FALSE
[01:18:47.680]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:18:47.680]      </control>
[01:18:47.680]      // end if-block "canReadPins"
[01:18:47.680]    </control>
[01:18:47.680]    <control if="!canReadPins" while="" timeout="0" info="">
[01:18:47.680]      // if-block "!canReadPins"
[01:18:47.680]        // =>  FALSE
[01:18:47.680]      // skip if-block "!canReadPins"
[01:18:47.680]    </control>
[01:18:47.680]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:18:47.680]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:18:47.680]        // =>  TRUE
[01:18:47.680]      <block atomic="false" info="">
[01:18:47.680]        WriteAP(0x00, 0x190008);
[01:18:47.683]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:18:47.683]        WriteAP(0xF0, 0x01);
[01:18:47.685]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:18:47.685]      </block>
[01:18:47.685]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:18:47.688]    </control>
[01:18:47.688]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:18:47.689]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:18:47.689]        // =>  FALSE
[01:18:47.689]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:18:47.689]    </control>
[01:18:47.689]    <block atomic="false" info="">
[01:18:47.689]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:18:47.691]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:18:47.691]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:18:47.691]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:18:47.695]      __ap = 0; //lets make sure we reset the access point selection
[01:18:47.695]        // -> [__ap <= 0x00000000]
[01:18:47.695]    </block>
[01:18:47.695]  </sequence>
[01:18:47.695]  
[01:18:47.709]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:18:47.709]  
[01:18:47.709]  <debugvars>
[01:18:47.709]    // Pre-defined
[01:18:47.709]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:18:47.709]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:18:47.709]    __dp=0x00000000
[01:18:47.709]    __ap=0x00000000
[01:18:47.709]    __traceout=0x00000000      (Trace Disabled)
[01:18:47.709]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:18:47.716]    __FlashAddr=0x00000000
[01:18:47.716]    __FlashLen=0x00000000
[01:18:47.716]    __FlashArg=0x00000000
[01:18:47.716]    __FlashOp=0x00000000
[01:18:47.716]    __Result=0x00000000
[01:18:47.716]  </debugvars>
[01:18:47.716]  
[01:18:47.716]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:18:47.716]    <block atomic="false" info="">
[01:18:47.716]      __var deviceID = 0;
[01:18:47.716]        // -> [deviceID <= 0x00000000]
[01:18:47.716]      __var version = 0;
[01:18:47.716]        // -> [version <= 0x00000000]
[01:18:47.718]      __var partNum = 0;
[01:18:47.718]        // -> [partNum <= 0x00000000]
[01:18:47.718]      __var manuf = 0;
[01:18:47.718]        // -> [manuf <= 0x00000000]
[01:18:47.718]      __var isMSPM0G1X0X_G3X0X = 0;
[01:18:47.718]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:18:47.718]      __var isProduction = 0;
[01:18:47.718]        // -> [isProduction <= 0x00000000]
[01:18:47.718]      __var continueId = 0;
[01:18:47.719]        // -> [continueId <= 0x00000000]
[01:18:47.719]      deviceID =   Read32(0x41C40004);
[01:18:47.720]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:18:47.720]        // -> [deviceID <= 0x2BB8802F]
[01:18:47.720]      version = deviceID >> 28;
[01:18:47.720]        // -> [version <= 0x00000002]
[01:18:47.720]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:18:47.720]        // -> [partNum <= 0x0000BB88]
[01:18:47.720]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:18:47.720]        // -> [manuf <= 0x00000017]
[01:18:47.720]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:18:47.720]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:18:47.720]      isProduction = (version > 0);
[01:18:47.720]        // -> [isProduction <= 0x00000001]
[01:18:47.720]    </block>
[01:18:47.720]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:18:47.720]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:18:47.720]        // =>  FALSE
[01:18:47.720]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:18:47.720]    </control>
[01:18:47.720]    <control if="continueId == 4" while="" timeout="0" info="">
[01:18:47.720]      // if-block "continueId == 4"
[01:18:47.720]        // =>  FALSE
[01:18:47.720]      // skip if-block "continueId == 4"
[01:18:47.720]    </control>
[01:18:47.720]    <control if="!isProduction" while="" timeout="0" info="">
[01:18:47.720]      // if-block "!isProduction"
[01:18:47.720]        // =>  FALSE
[01:18:47.720]      // skip if-block "!isProduction"
[01:18:47.720]    </control>
[01:18:47.720]  </sequence>
[01:18:47.720]  
