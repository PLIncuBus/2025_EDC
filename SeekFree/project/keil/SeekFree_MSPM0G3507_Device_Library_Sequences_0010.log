/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025-EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0010.log
 *  Created     : 11:19:31 (31/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[11:19:31.637]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:19:31.637]  
[11:19:31.637]  <debugvars>
[11:19:31.637]    // Pre-defined
[11:19:31.637]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:19:31.637]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:19:31.637]    __dp=0x00000000
[11:19:31.637]    __ap=0x00000000
[11:19:31.637]    __traceout=0x00000000      (Trace Disabled)
[11:19:31.637]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:19:31.639]    __FlashAddr=0x00000000
[11:19:31.639]    __FlashLen=0x00000000
[11:19:31.639]    __FlashArg=0x00000000
[11:19:31.639]    __FlashOp=0x00000000
[11:19:31.639]    __Result=0x00000000
[11:19:31.639]  </debugvars>
[11:19:31.639]  
[11:19:31.639]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:19:31.639]    <block atomic="false" info="">
[11:19:31.639]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:19:31.639]        // -> [isSWJ <= 0x00000001]
[11:19:31.639]      __var hasDormant = __protocol & 0x00020000;
[11:19:31.639]        // -> [hasDormant <= 0x00000000]
[11:19:31.639]      __var protType   = __protocol & 0x0000FFFF;
[11:19:31.639]        // -> [protType <= 0x00000002]
[11:19:31.639]    </block>
[11:19:31.639]    <control if="protType == 1" while="" timeout="0" info="">
[11:19:31.639]      // if-block "protType == 1"
[11:19:31.639]        // =>  FALSE
[11:19:31.639]      // skip if-block "protType == 1"
[11:19:31.639]    </control>
[11:19:31.639]    <control if="protType == 2" while="" timeout="0" info="">
[11:19:31.639]      // if-block "protType == 2"
[11:19:31.639]        // =>  TRUE
[11:19:31.639]      <control if="isSWJ" while="" timeout="0" info="">
[11:19:31.639]        // if-block "isSWJ"
[11:19:31.639]          // =>  TRUE
[11:19:31.639]        <control if="hasDormant" while="" timeout="0" info="">
[11:19:31.639]          // if-block "hasDormant"
[11:19:31.639]            // =>  FALSE
[11:19:31.639]          // skip if-block "hasDormant"
[11:19:31.639]        </control>
[11:19:31.639]        <control if="!hasDormant" while="" timeout="0" info="">
[11:19:31.639]          // if-block "!hasDormant"
[11:19:31.639]            // =>  TRUE
[11:19:31.639]          <block atomic="false" info="">
[11:19:31.639]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:19:31.639]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:19:31.639]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:19:31.649]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:19:31.649]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:19:31.649]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:19:31.649]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:19:31.649]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:19:31.649]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:19:31.649]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:19:31.649]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:19:31.649]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:19:31.649]          </block>
[11:19:31.649]          // end if-block "!hasDormant"
[11:19:31.649]        </control>
[11:19:31.649]        // end if-block "isSWJ"
[11:19:31.649]      </control>
[11:19:31.649]      <control if="!isSWJ" while="" timeout="0" info="">
[11:19:31.649]        // if-block "!isSWJ"
[11:19:31.649]          // =>  FALSE
[11:19:31.649]        // skip if-block "!isSWJ"
[11:19:31.649]      </control>
[11:19:31.649]      <block atomic="false" info="">
[11:19:31.649]        ReadDP(0x0);
[11:19:31.661]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:19:31.661]      </block>
[11:19:31.661]      // end if-block "protType == 2"
[11:19:31.661]    </control>
[11:19:31.661]  </sequence>
[11:19:31.661]  
[11:19:31.669]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[11:19:31.669]  
[11:19:31.669]  <debugvars>
[11:19:31.669]    // Pre-defined
[11:19:31.669]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:19:31.669]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:19:31.669]    __dp=0x00000000
[11:19:31.669]    __ap=0x00000000
[11:19:31.669]    __traceout=0x00000000      (Trace Disabled)
[11:19:31.669]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:19:31.669]    __FlashAddr=0x00000000
[11:19:31.669]    __FlashLen=0x00000000
[11:19:31.669]    __FlashArg=0x00000000
[11:19:31.669]    __FlashOp=0x00000000
[11:19:31.669]    __Result=0x00000000
[11:19:31.669]  </debugvars>
[11:19:31.669]  
[11:19:31.669]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[11:19:31.669]    <block atomic="false" info="">
[11:19:31.669]      __var SW_DP_ABORT       = 0x0;
[11:19:31.669]        // -> [SW_DP_ABORT <= 0x00000000]
[11:19:31.669]      __var DP_CTRL_STAT      = 0x4;
[11:19:31.669]        // -> [DP_CTRL_STAT <= 0x00000004]
[11:19:31.669]      __var DP_SELECT         = 0x8;
[11:19:31.669]        // -> [DP_SELECT <= 0x00000008]
[11:19:31.669]      __var powered_down      = 0;
[11:19:31.669]        // -> [powered_down <= 0x00000000]
[11:19:31.669]      WriteDP(DP_SELECT, 0x00000000);
[11:19:31.669]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[11:19:31.669]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[11:19:31.669]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[11:19:31.669]        // -> [powered_down <= 0x00000001]
[11:19:31.669]    </block>
[11:19:31.669]    <control if="powered_down" while="" timeout="0" info="">
[11:19:31.679]      // if-block "powered_down"
[11:19:31.679]        // =>  TRUE
[11:19:31.679]      <block atomic="false" info="">
[11:19:31.679]        Message(0, "Debug/System power-up request sent");
[11:19:31.679]        WriteDP(DP_CTRL_STAT, 0x50000000);
[11:19:31.691]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[11:19:31.691]      </block>
[11:19:31.691]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[11:19:31.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[11:19:31.693]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[11:19:31.693]        // while-condition  =>  FALSE
[11:19:31.693]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[11:19:31.693]      </control>
[11:19:31.693]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[11:19:31.693]        // if-block "(__protocol & 0xFFFF) == 1"
[11:19:31.693]          // =>  FALSE
[11:19:31.693]        // skip if-block "(__protocol & 0xFFFF) == 1"
[11:19:31.693]      </control>
[11:19:31.693]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[11:19:31.693]        // if-block "(__protocol & 0xFFFF) == 2"
[11:19:31.693]          // =>  TRUE
[11:19:31.693]        <block atomic="false" info="">
[11:19:31.693]          Message(0, "executing SWD power up");
[11:19:31.697]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[11:19:31.697]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[11:19:31.697]          WriteDP(SW_DP_ABORT, 0x0000001E);
[11:19:31.700]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[11:19:31.700]        </block>
[11:19:31.700]        // end if-block "(__protocol & 0xFFFF) == 2"
[11:19:31.700]      </control>
[11:19:31.700]      // end if-block "powered_down"
[11:19:31.700]    </control>
[11:19:31.700]    <block atomic="false" info="">
[11:19:31.700]      __var DEBUG_PORT_VAL    = 0;
[11:19:31.700]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[11:19:31.700]      __var ACCESS_POINT_VAL  = 0;
[11:19:31.700]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[11:19:31.700]      __ap = 1; 
[11:19:31.700]        // -> [__ap <= 0x00000001]
[11:19:31.700]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[11:19:31.712]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[11:19:31.712]      __ap = 4;
[11:19:31.712]        // -> [__ap <= 0x00000004]
[11:19:31.712]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:19:31.718]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[11:19:31.718]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[11:19:31.718]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:19:31.719]    </block>
[11:19:31.719]    <block atomic="false" info="">
[11:19:31.720]      __var nReset = 0x80;
[11:19:31.720]        // -> [nReset <= 0x00000080]
[11:19:31.720]      __var canReadPins = 0;
[11:19:31.720]        // -> [canReadPins <= 0x00000000]
[11:19:31.720]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[11:19:31.722]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[11:19:31.722]        // -> [canReadPins <= 0x00000001]
[11:19:31.722]    </block>
[11:19:31.722]    <control if="" while="1" timeout="200" info="">
[11:19:31.722]      // while "1"  (timeout="200")
[11:19:31.723]      // while-condition  =>  TRUE
[11:19:31.723]      // while "1"  (timeout="200")
[11:19:31.723]      // while-condition  =>  TRUE
[11:19:31.723]      // while "1"  (timeout="200")
[11:19:31.723]      // while-condition  =>  TRUE
[11:19:31.723]      // while "1"  (timeout="200")
[11:19:31.723]      // while-condition  =>  TRUE
[11:19:31.723]      // while "1"  (timeout="200")
[11:19:31.723]      // while-condition  =>  TRUE
[11:19:31.723]      // while "1"  (timeout="200")
[11:19:31.723]      // while-condition  =>  TRUE
[11:19:31.724]      // while "1"  (timeout="200")
[11:19:31.724]      // while-condition  =>  TRUE
[11:19:31.724]      // while "1"  (timeout="200")
[11:19:31.724]      // while-condition  =>  TRUE
[11:19:31.724]      // while "1"  (timeout="200")
[11:19:31.724]      // while-condition  =>  TRUE
[11:19:31.724]      // while "1"  (timeout="200")
[11:19:31.724]      // while-condition  =>  TRUE
[11:19:31.724]      // while "1"  (timeout="200")
[11:19:31.724]      // while-condition  =>  TRUE
[11:19:31.724]      // while "1"  (timeout="200")
[11:19:31.724]      // while-condition  =>  TRUE
[11:19:31.724]      // while "1"  (timeout="200")
[11:19:31.724]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.725]      // while-condition  =>  TRUE
[11:19:31.725]      // while "1"  (timeout="200")
[11:19:31.729]      // while-condition  =>  TRUE
[11:19:31.729]      // while "1"  (timeout="200")
[11:19:31.729]      // while-condition  =>  TRUE
[11:19:31.729]      // while "1"  (timeout="200")
[11:19:31.729]      // while-condition  =>  TRUE
[11:19:31.729]      // while "1"  (timeout="200")
[11:19:31.729]      // while-condition  =>  TRUE
[11:19:31.729]      // while "1"  (timeout="200")
[11:19:31.729]      // while-condition  =>  TRUE
[11:19:31.729]      // while "1"  (timeout="200")
[11:19:31.729]      // while-condition  =>  TRUE
[11:19:31.729]      // while "1"  (timeout="200")
[11:19:31.729]      // while-condition  =>  TRUE
[11:19:31.729]      // while "1"  (timeout="200")
[11:19:31.731]      // while-condition  =>  TRUE
[11:19:31.731]      // while "1"  (timeout="200")
[11:19:31.731]      // while-condition  =>  TRUE
[11:19:31.731]      // while "1"  (timeout="200")
[11:19:31.731]      // while-condition  =>  TRUE
[11:19:31.731]      // while "1"  (timeout="200")
[11:19:31.731]      // while-condition  =>  TRUE
[11:19:31.732]      // while "1"  (timeout="200")
[11:19:31.732]      // while-condition  =>  TRUE
[11:19:31.732]      // while "1"  (timeout="200")
[11:19:31.732]      // while-condition  =>  TRUE
[11:19:31.732]      // while "1"  (timeout="200")
[11:19:31.732]      // while-condition  =>  TRUE
[11:19:31.732]      // while "1"  (timeout="200")
[11:19:31.732]      // while-condition  =>  TRUE
[11:19:31.732]      // while "1"  (timeout="200")
[11:19:31.732]      // while-condition  =>  TRUE
[11:19:31.732]      // while "1"  (timeout="200")
[11:19:31.732]      // while-condition  =>  TRUE
[11:19:31.733]      // while "1"  (timeout="200")
[11:19:31.733]      // while-condition  =>  TRUE
[11:19:31.733]      // while "1"  (timeout="200")
[11:19:31.733]      // while-condition  =>  TRUE
[11:19:31.733]      // while "1"  (timeout="200")
[11:19:31.733]      // while-condition  =>  TRUE
[11:19:31.733]      // while "1"  (timeout="200")
[11:19:31.733]      // while-condition  =>  TRUE
[11:19:31.733]      // while "1"  (timeout="200")
[11:19:31.733]      // while-condition  =>  TRUE
[11:19:31.733]      // while "1"  (timeout="200")
[11:19:31.735]      // while-condition  =>  TRUE
[11:19:31.735]      // while "1"  (timeout="200")
[11:19:31.735]      // while-condition  =>  TRUE
[11:19:31.735]      // while "1"  (timeout="200")
[11:19:31.735]      // while-condition  =>  TRUE
[11:19:31.735]      // while "1"  (timeout="200")
[11:19:31.735]      // while-condition  =>  TRUE
[11:19:31.735]      // while "1"  (timeout="200")
[11:19:31.735]      // while-condition  =>  TRUE
[11:19:31.735]      // while "1"  (timeout="200")
[11:19:31.735]      // while-condition  =>  TRUE
[11:19:31.735]      // while "1"  (timeout="200")
[11:19:31.735]      // while-condition  =>  TRUE
[11:19:31.735]      // while "1"  (timeout="200")
[11:19:31.735]      // while-condition  =>  TRUE
[11:19:31.735]      // while "1"  (timeout="200")
[11:19:31.735]      // while-condition  =>  TRUE
[11:19:31.735]      // while "1"  (timeout="200")
[11:19:31.736]      // while-condition  =>  TRUE
[11:19:31.736]      // while "1"  (timeout="200")
[11:19:31.736]      // while  =>  TIMEOUT
[11:19:31.736]      // end while "1"
[11:19:31.736]    </control>
[11:19:31.736]    <control if="canReadPins" while="" timeout="0" info="">
[11:19:31.736]      // if-block "canReadPins"
[11:19:31.736]        // =>  TRUE
[11:19:31.736]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[11:19:31.736]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[11:19:31.739]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[11:19:31.739]        // while-condition  =>  FALSE
[11:19:31.739]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[11:19:31.739]      </control>
[11:19:31.739]      // end if-block "canReadPins"
[11:19:31.739]    </control>
[11:19:31.739]    <control if="!canReadPins" while="" timeout="0" info="">
[11:19:31.741]      // if-block "!canReadPins"
[11:19:31.741]        // =>  FALSE
[11:19:31.741]      // skip if-block "!canReadPins"
[11:19:31.741]    </control>
[11:19:31.741]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[11:19:31.741]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:19:31.741]        // =>  TRUE
[11:19:31.741]      <block atomic="false" info="">
[11:19:31.741]        WriteAP(0x00, 0x190008);
[11:19:31.741]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[11:19:31.741]        WriteAP(0xF0, 0x01);
[11:19:31.747]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[11:19:31.747]      </block>
[11:19:31.747]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:19:31.747]    </control>
[11:19:31.747]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[11:19:31.747]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:19:31.747]        // =>  FALSE
[11:19:31.747]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:19:31.747]    </control>
[11:19:31.747]    <block atomic="false" info="">
[11:19:31.747]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:19:31.751]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[11:19:31.751]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[11:19:31.751]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:19:31.754]      __ap = 0; //lets make sure we reset the access point selection
[11:19:31.754]        // -> [__ap <= 0x00000000]
[11:19:31.754]    </block>
[11:19:31.754]  </sequence>
[11:19:31.754]  
[11:19:31.781]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:19:31.781]  
[11:19:31.781]  <debugvars>
[11:19:31.781]    // Pre-defined
[11:19:31.781]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:19:31.781]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:19:31.781]    __dp=0x00000000
[11:19:31.781]    __ap=0x00000000
[11:19:31.781]    __traceout=0x00000000      (Trace Disabled)
[11:19:31.781]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:19:31.781]    __FlashAddr=0x00000000
[11:19:31.781]    __FlashLen=0x00000000
[11:19:31.781]    __FlashArg=0x00000000
[11:19:31.781]    __FlashOp=0x00000000
[11:19:31.781]    __Result=0x00000000
[11:19:31.781]  </debugvars>
[11:19:31.781]  
[11:19:31.781]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:19:31.781]    <block atomic="false" info="">
[11:19:31.781]      __var deviceID = 0;
[11:19:31.781]        // -> [deviceID <= 0x00000000]
[11:19:31.781]      __var version = 0;
[11:19:31.781]        // -> [version <= 0x00000000]
[11:19:31.781]      __var partNum = 0;
[11:19:31.781]        // -> [partNum <= 0x00000000]
[11:19:31.781]      __var manuf = 0;
[11:19:31.781]        // -> [manuf <= 0x00000000]
[11:19:31.781]      __var isMSPM0G1X0X_G3X0X = 0;
[11:19:31.781]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[11:19:31.781]      __var isProduction = 0;
[11:19:31.781]        // -> [isProduction <= 0x00000000]
[11:19:31.781]      __var continueId = 0;
[11:19:31.781]        // -> [continueId <= 0x00000000]
[11:19:31.781]      deviceID =   Read32(0x41C40004);
[11:19:31.793]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[11:19:31.793]        // -> [deviceID <= 0x2BB8802F]
[11:19:31.793]      version = deviceID >> 28;
[11:19:31.793]        // -> [version <= 0x00000002]
[11:19:31.793]      partNum = (deviceID & 0x0FFFF000) >> 12;
[11:19:31.793]        // -> [partNum <= 0x0000BB88]
[11:19:31.793]      manuf = (deviceID & 0x00000FFE) >> 1;
[11:19:31.793]        // -> [manuf <= 0x00000017]
[11:19:31.793]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[11:19:31.793]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[11:19:31.793]      isProduction = (version > 0);
[11:19:31.793]        // -> [isProduction <= 0x00000001]
[11:19:31.793]    </block>
[11:19:31.793]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[11:19:31.793]      // if-block "!isMSPM0G1X0X_G3X0X"
[11:19:31.793]        // =>  FALSE
[11:19:31.793]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[11:19:31.793]    </control>
[11:19:31.793]    <control if="continueId == 4" while="" timeout="0" info="">
[11:19:31.793]      // if-block "continueId == 4"
[11:19:31.793]        // =>  FALSE
[11:19:31.793]      // skip if-block "continueId == 4"
[11:19:31.793]    </control>
[11:19:31.793]    <control if="!isProduction" while="" timeout="0" info="">
[11:19:31.793]      // if-block "!isProduction"
[11:19:31.793]        // =>  FALSE
[11:19:31.793]      // skip if-block "!isProduction"
[11:19:31.793]    </control>
[11:19:31.793]  </sequence>
[11:19:31.793]  
[11:20:10.739]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:20:10.739]  
[11:20:10.739]  <debugvars>
[11:20:10.739]    // Pre-defined
[11:20:10.739]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:20:10.739]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:20:10.739]    __dp=0x00000000
[11:20:10.739]    __ap=0x00000000
[11:20:10.739]    __traceout=0x00000000      (Trace Disabled)
[11:20:10.739]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:20:10.739]    __FlashAddr=0x00000000
[11:20:10.739]    __FlashLen=0x00000000
[11:20:10.739]    __FlashArg=0x00000000
[11:20:10.739]    __FlashOp=0x00000000
[11:20:10.739]    __Result=0x00000000
[11:20:10.739]  </debugvars>
[11:20:10.739]  
[11:20:10.739]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:20:10.739]    <block atomic="false" info="">
[11:20:10.739]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:20:10.739]        // -> [isSWJ <= 0x00000001]
[11:20:10.739]      __var hasDormant = __protocol & 0x00020000;
[11:20:10.739]        // -> [hasDormant <= 0x00000000]
[11:20:10.739]      __var protType   = __protocol & 0x0000FFFF;
[11:20:10.739]        // -> [protType <= 0x00000002]
[11:20:10.739]    </block>
[11:20:10.739]    <control if="protType == 1" while="" timeout="0" info="">
[11:20:10.739]      // if-block "protType == 1"
[11:20:10.739]        // =>  FALSE
[11:20:10.739]      // skip if-block "protType == 1"
[11:20:10.739]    </control>
[11:20:10.739]    <control if="protType == 2" while="" timeout="0" info="">
[11:20:10.739]      // if-block "protType == 2"
[11:20:10.739]        // =>  TRUE
[11:20:10.739]      <control if="isSWJ" while="" timeout="0" info="">
[11:20:10.739]        // if-block "isSWJ"
[11:20:10.739]          // =>  TRUE
[11:20:10.747]        <control if="hasDormant" while="" timeout="0" info="">
[11:20:10.747]          // if-block "hasDormant"
[11:20:10.747]            // =>  FALSE
[11:20:10.747]          // skip if-block "hasDormant"
[11:20:10.747]        </control>
[11:20:10.747]        <control if="!hasDormant" while="" timeout="0" info="">
[11:20:10.747]          // if-block "!hasDormant"
[11:20:10.747]            // =>  TRUE
[11:20:10.747]          <block atomic="false" info="">
[11:20:10.747]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:20:10.747]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:20:10.747]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:20:10.757]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:20:10.758]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:20:10.758]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:20:10.758]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:20:10.769]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:20:10.769]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:20:10.769]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:20:10.769]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:20:10.778]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:20:10.778]          </block>
[11:20:10.778]          // end if-block "!hasDormant"
[11:20:10.778]        </control>
[11:20:10.778]        // end if-block "isSWJ"
[11:20:10.778]      </control>
[11:20:10.778]      <control if="!isSWJ" while="" timeout="0" info="">
[11:20:10.778]        // if-block "!isSWJ"
[11:20:10.778]          // =>  FALSE
[11:20:10.778]        // skip if-block "!isSWJ"
[11:20:10.778]      </control>
[11:20:10.778]      <block atomic="false" info="">
[11:20:10.778]        ReadDP(0x0);
[11:20:10.778]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:20:10.778]      </block>
[11:20:10.778]      // end if-block "protType == 2"
[11:20:10.778]    </control>
[11:20:10.778]  </sequence>
[11:20:10.778]  
[11:20:10.790]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[11:20:10.790]  
[11:20:10.790]  <debugvars>
[11:20:10.790]    // Pre-defined
[11:20:10.790]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:20:10.790]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:20:10.790]    __dp=0x00000000
[11:20:10.790]    __ap=0x00000000
[11:20:10.790]    __traceout=0x00000000      (Trace Disabled)
[11:20:10.790]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:20:10.790]    __FlashAddr=0x00000000
[11:20:10.790]    __FlashLen=0x00000000
[11:20:10.790]    __FlashArg=0x00000000
[11:20:10.790]    __FlashOp=0x00000000
[11:20:10.790]    __Result=0x00000000
[11:20:10.790]  </debugvars>
[11:20:10.790]  
[11:20:10.790]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[11:20:10.790]    <block atomic="false" info="">
[11:20:10.790]      __var SW_DP_ABORT       = 0x0;
[11:20:10.790]        // -> [SW_DP_ABORT <= 0x00000000]
[11:20:10.790]      __var DP_CTRL_STAT      = 0x4;
[11:20:10.790]        // -> [DP_CTRL_STAT <= 0x00000004]
[11:20:10.790]      __var DP_SELECT         = 0x8;
[11:20:10.790]        // -> [DP_SELECT <= 0x00000008]
[11:20:10.790]      __var powered_down      = 0;
[11:20:10.790]        // -> [powered_down <= 0x00000000]
[11:20:10.790]      WriteDP(DP_SELECT, 0x00000000);
[11:20:10.790]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[11:20:10.790]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[11:20:10.790]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[11:20:10.790]        // -> [powered_down <= 0x00000001]
[11:20:10.790]    </block>
[11:20:10.790]    <control if="powered_down" while="" timeout="0" info="">
[11:20:10.790]      // if-block "powered_down"
[11:20:10.790]        // =>  TRUE
[11:20:10.790]      <block atomic="false" info="">
[11:20:10.790]        Message(0, "Debug/System power-up request sent");
[11:20:10.798]        WriteDP(DP_CTRL_STAT, 0x50000000);
[11:20:10.808]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[11:20:10.808]      </block>
[11:20:10.808]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[11:20:10.808]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[11:20:10.808]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[11:20:10.808]        // while-condition  =>  FALSE
[11:20:10.808]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[11:20:10.808]      </control>
[11:20:10.808]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[11:20:10.808]        // if-block "(__protocol & 0xFFFF) == 1"
[11:20:10.808]          // =>  FALSE
[11:20:10.808]        // skip if-block "(__protocol & 0xFFFF) == 1"
[11:20:10.808]      </control>
[11:20:10.808]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[11:20:10.808]        // if-block "(__protocol & 0xFFFF) == 2"
[11:20:10.808]          // =>  TRUE
[11:20:10.808]        <block atomic="false" info="">
[11:20:10.808]          Message(0, "executing SWD power up");
[11:20:10.808]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[11:20:10.818]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[11:20:10.818]          WriteDP(SW_DP_ABORT, 0x0000001E);
[11:20:10.820]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[11:20:10.820]        </block>
[11:20:10.820]        // end if-block "(__protocol & 0xFFFF) == 2"
[11:20:10.820]      </control>
[11:20:10.820]      // end if-block "powered_down"
[11:20:10.820]    </control>
[11:20:10.820]    <block atomic="false" info="">
[11:20:10.820]      __var DEBUG_PORT_VAL    = 0;
[11:20:10.820]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[11:20:10.820]      __var ACCESS_POINT_VAL  = 0;
[11:20:10.820]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[11:20:10.820]      __ap = 1; 
[11:20:10.820]        // -> [__ap <= 0x00000001]
[11:20:10.820]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[11:20:10.820]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[11:20:10.820]      __ap = 4;
[11:20:10.820]        // -> [__ap <= 0x00000004]
[11:20:10.820]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:20:10.840]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[11:20:10.840]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[11:20:10.840]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:20:10.840]    </block>
[11:20:10.840]    <block atomic="false" info="">
[11:20:10.840]      __var nReset = 0x80;
[11:20:10.840]        // -> [nReset <= 0x00000080]
[11:20:10.840]      __var canReadPins = 0;
[11:20:10.840]        // -> [canReadPins <= 0x00000000]
[11:20:10.840]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[11:20:10.840]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[11:20:10.840]        // -> [canReadPins <= 0x00000001]
[11:20:10.840]    </block>
[11:20:10.840]    <control if="" while="1" timeout="200" info="">
[11:20:10.840]      // while "1"  (timeout="200")
[11:20:10.840]      // while-condition  =>  TRUE
[11:20:10.840]      // while "1"  (timeout="200")
[11:20:10.840]      // while-condition  =>  TRUE
[11:20:10.840]      // while "1"  (timeout="200")
[11:20:10.840]      // while-condition  =>  TRUE
[11:20:10.840]      // while "1"  (timeout="200")
[11:20:10.849]      // while-condition  =>  TRUE
[11:20:10.849]      // while "1"  (timeout="200")
[11:20:10.849]      // while  =>  TIMEOUT
[11:20:10.849]      // end while "1"
[11:20:10.849]    </control>
[11:20:10.849]    <control if="canReadPins" while="" timeout="0" info="">
[11:20:10.849]      // if-block "canReadPins"
[11:20:10.849]        // =>  TRUE
[11:20:10.849]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[11:20:10.849]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[11:20:10.850]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[11:20:10.850]        // while-condition  =>  FALSE
[11:20:10.850]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[11:20:10.850]      </control>
[11:20:10.850]      // end if-block "canReadPins"
[11:20:10.850]    </control>
[11:20:10.850]    <control if="!canReadPins" while="" timeout="0" info="">
[11:20:10.850]      // if-block "!canReadPins"
[11:20:10.850]        // =>  FALSE
[11:20:10.850]      // skip if-block "!canReadPins"
[11:20:10.850]    </control>
[11:20:10.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[11:20:10.850]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:20:10.850]        // =>  TRUE
[11:20:10.850]      <block atomic="false" info="">
[11:20:10.850]        WriteAP(0x00, 0x190008);
[11:20:10.850]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[11:20:10.850]        WriteAP(0xF0, 0x01);
[11:20:10.850]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[11:20:10.850]      </block>
[11:20:10.850]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:20:10.850]    </control>
[11:20:10.850]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[11:20:10.850]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:20:10.850]        // =>  FALSE
[11:20:10.850]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:20:10.850]    </control>
[11:20:10.850]    <block atomic="false" info="">
[11:20:10.850]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:20:10.861]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[11:20:10.861]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[11:20:10.861]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:20:10.861]      __ap = 0; //lets make sure we reset the access point selection
[11:20:10.861]        // -> [__ap <= 0x00000000]
[11:20:10.861]    </block>
[11:20:10.861]  </sequence>
[11:20:10.861]  
[11:20:10.900]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:20:10.900]  
[11:20:10.900]  <debugvars>
[11:20:10.900]    // Pre-defined
[11:20:10.900]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:20:10.900]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:20:10.901]    __dp=0x00000000
[11:20:10.902]    __ap=0x00000000
[11:20:10.902]    __traceout=0x00000000      (Trace Disabled)
[11:20:10.902]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:20:10.902]    __FlashAddr=0x00000000
[11:20:10.902]    __FlashLen=0x00000000
[11:20:10.902]    __FlashArg=0x00000000
[11:20:10.902]    __FlashOp=0x00000000
[11:20:10.902]    __Result=0x00000000
[11:20:10.902]  </debugvars>
[11:20:10.902]  
[11:20:10.902]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:20:10.902]    <block atomic="false" info="">
[11:20:10.902]      __var deviceID = 0;
[11:20:10.902]        // -> [deviceID <= 0x00000000]
[11:20:10.902]      __var version = 0;
[11:20:10.902]        // -> [version <= 0x00000000]
[11:20:10.902]      __var partNum = 0;
[11:20:10.902]        // -> [partNum <= 0x00000000]
[11:20:10.902]      __var manuf = 0;
[11:20:10.902]        // -> [manuf <= 0x00000000]
[11:20:10.902]      __var isMSPM0G1X0X_G3X0X = 0;
[11:20:10.902]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[11:20:10.902]      __var isProduction = 0;
[11:20:10.902]        // -> [isProduction <= 0x00000000]
[11:20:10.902]      __var continueId = 0;
[11:20:10.902]        // -> [continueId <= 0x00000000]
[11:20:10.902]      deviceID =   Read32(0x41C40004);
[11:20:10.913]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[11:20:10.913]        // -> [deviceID <= 0x2BB8802F]
[11:20:10.913]      version = deviceID >> 28;
[11:20:10.913]        // -> [version <= 0x00000002]
[11:20:10.913]      partNum = (deviceID & 0x0FFFF000) >> 12;
[11:20:10.913]        // -> [partNum <= 0x0000BB88]
[11:20:10.913]      manuf = (deviceID & 0x00000FFE) >> 1;
[11:20:10.913]        // -> [manuf <= 0x00000017]
[11:20:10.913]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[11:20:10.913]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[11:20:10.913]      isProduction = (version > 0);
[11:20:10.913]        // -> [isProduction <= 0x00000001]
[11:20:10.913]    </block>
[11:20:10.913]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[11:20:10.913]      // if-block "!isMSPM0G1X0X_G3X0X"
[11:20:10.913]        // =>  FALSE
[11:20:10.913]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[11:20:10.913]    </control>
[11:20:10.913]    <control if="continueId == 4" while="" timeout="0" info="">
[11:20:10.913]      // if-block "continueId == 4"
[11:20:10.913]        // =>  FALSE
[11:20:10.913]      // skip if-block "continueId == 4"
[11:20:10.913]    </control>
[11:20:10.913]    <control if="!isProduction" while="" timeout="0" info="">
[11:20:10.913]      // if-block "!isProduction"
[11:20:10.913]        // =>  FALSE
[11:20:10.913]      // skip if-block "!isProduction"
[11:20:10.913]    </control>
[11:20:10.913]  </sequence>
[11:20:10.913]  
[11:27:20.359]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:27:20.359]  
[11:27:20.369]  <debugvars>
[11:27:20.369]    // Pre-defined
[11:27:20.369]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:27:20.369]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:27:20.369]    __dp=0x00000000
[11:27:20.369]    __ap=0x00000000
[11:27:20.369]    __traceout=0x00000000      (Trace Disabled)
[11:27:20.369]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:27:20.369]    __FlashAddr=0x00000000
[11:27:20.369]    __FlashLen=0x00000000
[11:27:20.369]    __FlashArg=0x00000000
[11:27:20.369]    __FlashOp=0x00000000
[11:27:20.369]    __Result=0x00000000
[11:27:20.369]  </debugvars>
[11:27:20.369]  
[11:27:20.372]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:27:20.372]    <block atomic="false" info="">
[11:27:20.372]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:27:20.372]        // -> [isSWJ <= 0x00000001]
[11:27:20.372]      __var hasDormant = __protocol & 0x00020000;
[11:27:20.372]        // -> [hasDormant <= 0x00000000]
[11:27:20.372]      __var protType   = __protocol & 0x0000FFFF;
[11:27:20.372]        // -> [protType <= 0x00000002]
[11:27:20.372]    </block>
[11:27:20.372]    <control if="protType == 1" while="" timeout="0" info="">
[11:27:20.372]      // if-block "protType == 1"
[11:27:20.372]        // =>  FALSE
[11:27:20.372]      // skip if-block "protType == 1"
[11:27:20.372]    </control>
[11:27:20.372]    <control if="protType == 2" while="" timeout="0" info="">
[11:27:20.372]      // if-block "protType == 2"
[11:27:20.372]        // =>  TRUE
[11:27:20.372]      <control if="isSWJ" while="" timeout="0" info="">
[11:27:20.372]        // if-block "isSWJ"
[11:27:20.372]          // =>  TRUE
[11:27:20.372]        <control if="hasDormant" while="" timeout="0" info="">
[11:27:20.372]          // if-block "hasDormant"
[11:27:20.372]            // =>  FALSE
[11:27:20.372]          // skip if-block "hasDormant"
[11:27:20.372]        </control>
[11:27:20.372]        <control if="!hasDormant" while="" timeout="0" info="">
[11:27:20.372]          // if-block "!hasDormant"
[11:27:20.372]            // =>  TRUE
[11:27:20.372]          <block atomic="false" info="">
[11:27:20.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:27:20.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:27:20.372]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:27:20.372]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:27:20.372]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:27:20.372]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:27:20.372]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:27:20.381]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:27:20.381]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:27:20.382]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:27:20.382]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:27:20.382]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:27:20.382]          </block>
[11:27:20.382]          // end if-block "!hasDormant"
[11:27:20.382]        </control>
[11:27:20.382]        // end if-block "isSWJ"
[11:27:20.382]      </control>
[11:27:20.382]      <control if="!isSWJ" while="" timeout="0" info="">
[11:27:20.382]        // if-block "!isSWJ"
[11:27:20.382]          // =>  FALSE
[11:27:20.382]        // skip if-block "!isSWJ"
[11:27:20.382]      </control>
[11:27:20.382]      <block atomic="false" info="">
[11:27:20.382]        ReadDP(0x0);
[11:27:20.390]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:27:20.390]      </block>
[11:27:20.390]      // end if-block "protType == 2"
[11:27:20.390]    </control>
[11:27:20.390]  </sequence>
[11:27:20.390]  
[11:27:20.390]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[11:27:20.390]  
[11:27:20.390]  <debugvars>
[11:27:20.390]    // Pre-defined
[11:27:20.390]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:27:20.390]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:27:20.390]    __dp=0x00000000
[11:27:20.390]    __ap=0x00000000
[11:27:20.390]    __traceout=0x00000000      (Trace Disabled)
[11:27:20.390]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:27:20.390]    __FlashAddr=0x00000000
[11:27:20.390]    __FlashLen=0x00000000
[11:27:20.390]    __FlashArg=0x00000000
[11:27:20.390]    __FlashOp=0x00000000
[11:27:20.390]    __Result=0x00000000
[11:27:20.390]  </debugvars>
[11:27:20.390]  
[11:27:20.390]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[11:27:20.390]    <block atomic="false" info="">
[11:27:20.390]      __var SW_DP_ABORT       = 0x0;
[11:27:20.390]        // -> [SW_DP_ABORT <= 0x00000000]
[11:27:20.390]      __var DP_CTRL_STAT      = 0x4;
[11:27:20.390]        // -> [DP_CTRL_STAT <= 0x00000004]
[11:27:20.390]      __var DP_SELECT         = 0x8;
[11:27:20.390]        // -> [DP_SELECT <= 0x00000008]
[11:27:20.390]      __var powered_down      = 0;
[11:27:20.390]        // -> [powered_down <= 0x00000000]
[11:27:20.390]      WriteDP(DP_SELECT, 0x00000000);
[11:27:20.400]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[11:27:20.400]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[11:27:20.400]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[11:27:20.400]        // -> [powered_down <= 0x00000001]
[11:27:20.400]    </block>
[11:27:20.400]    <control if="powered_down" while="" timeout="0" info="">
[11:27:20.400]      // if-block "powered_down"
[11:27:20.400]        // =>  TRUE
[11:27:20.400]      <block atomic="false" info="">
[11:27:20.400]        Message(0, "Debug/System power-up request sent");
[11:27:20.408]        WriteDP(DP_CTRL_STAT, 0x50000000);
[11:27:20.410]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[11:27:20.410]      </block>
[11:27:20.410]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[11:27:20.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[11:27:20.412]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[11:27:20.412]        // while-condition  =>  FALSE
[11:27:20.412]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[11:27:20.413]      </control>
[11:27:20.413]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[11:27:20.413]        // if-block "(__protocol & 0xFFFF) == 1"
[11:27:20.413]          // =>  FALSE
[11:27:20.413]        // skip if-block "(__protocol & 0xFFFF) == 1"
[11:27:20.413]      </control>
[11:27:20.413]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[11:27:20.413]        // if-block "(__protocol & 0xFFFF) == 2"
[11:27:20.413]          // =>  TRUE
[11:27:20.413]        <block atomic="false" info="">
[11:27:20.413]          Message(0, "executing SWD power up");
[11:27:20.415]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[11:27:20.415]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[11:27:20.415]          WriteDP(SW_DP_ABORT, 0x0000001E);
[11:27:20.421]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[11:27:20.421]        </block>
[11:27:20.421]        // end if-block "(__protocol & 0xFFFF) == 2"
[11:27:20.421]      </control>
[11:27:20.421]      // end if-block "powered_down"
[11:27:20.421]    </control>
[11:27:20.421]    <block atomic="false" info="">
[11:27:20.421]      __var DEBUG_PORT_VAL    = 0;
[11:27:20.421]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[11:27:20.421]      __var ACCESS_POINT_VAL  = 0;
[11:27:20.421]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[11:27:20.421]      __ap = 1; 
[11:27:20.421]        // -> [__ap <= 0x00000001]
[11:27:20.421]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[11:27:20.421]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[11:27:20.421]      __ap = 4;
[11:27:20.421]        // -> [__ap <= 0x00000004]
[11:27:20.421]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:27:20.430]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[11:27:20.430]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[11:27:20.430]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:27:20.432]    </block>
[11:27:20.432]    <block atomic="false" info="">
[11:27:20.432]      __var nReset = 0x80;
[11:27:20.432]        // -> [nReset <= 0x00000080]
[11:27:20.432]      __var canReadPins = 0;
[11:27:20.432]        // -> [canReadPins <= 0x00000000]
[11:27:20.432]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[11:27:20.434]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[11:27:20.434]        // -> [canReadPins <= 0x00000001]
[11:27:20.434]    </block>
[11:27:20.434]    <control if="" while="1" timeout="200" info="">
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.434]      // while "1"  (timeout="200")
[11:27:20.434]      // while-condition  =>  TRUE
[11:27:20.440]      // while "1"  (timeout="200")
[11:27:20.440]      // while  =>  TIMEOUT
[11:27:20.440]      // end while "1"
[11:27:20.440]    </control>
[11:27:20.441]    <control if="canReadPins" while="" timeout="0" info="">
[11:27:20.441]      // if-block "canReadPins"
[11:27:20.441]        // =>  TRUE
[11:27:20.441]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[11:27:20.441]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[11:27:20.442]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[11:27:20.442]        // while-condition  =>  FALSE
[11:27:20.442]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[11:27:20.442]      </control>
[11:27:20.442]      // end if-block "canReadPins"
[11:27:20.442]    </control>
[11:27:20.442]    <control if="!canReadPins" while="" timeout="0" info="">
[11:27:20.442]      // if-block "!canReadPins"
[11:27:20.442]        // =>  FALSE
[11:27:20.442]      // skip if-block "!canReadPins"
[11:27:20.442]    </control>
[11:27:20.442]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[11:27:20.442]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:27:20.442]        // =>  TRUE
[11:27:20.442]      <block atomic="false" info="">
[11:27:20.442]        WriteAP(0x00, 0x190008);
[11:27:20.442]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[11:27:20.442]        WriteAP(0xF0, 0x01);
[11:27:20.451]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[11:27:20.453]      </block>
[11:27:20.453]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:27:20.453]    </control>
[11:27:20.453]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[11:27:20.453]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:27:20.453]        // =>  FALSE
[11:27:20.453]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:27:20.453]    </control>
[11:27:20.453]    <block atomic="false" info="">
[11:27:20.453]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:27:20.453]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[11:27:20.453]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[11:27:20.453]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:27:20.453]      __ap = 0; //lets make sure we reset the access point selection
[11:27:20.453]        // -> [__ap <= 0x00000000]
[11:27:20.453]    </block>
[11:27:20.453]  </sequence>
[11:27:20.453]  
[11:27:20.493]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:27:20.493]  
[11:27:20.493]  <debugvars>
[11:27:20.493]    // Pre-defined
[11:27:20.493]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:27:20.493]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:27:20.493]    __dp=0x00000000
[11:27:20.493]    __ap=0x00000000
[11:27:20.493]    __traceout=0x00000000      (Trace Disabled)
[11:27:20.493]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:27:20.493]    __FlashAddr=0x00000000
[11:27:20.493]    __FlashLen=0x00000000
[11:27:20.493]    __FlashArg=0x00000000
[11:27:20.493]    __FlashOp=0x00000000
[11:27:20.493]    __Result=0x00000000
[11:27:20.493]  </debugvars>
[11:27:20.493]  
[11:27:20.493]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:27:20.493]    <block atomic="false" info="">
[11:27:20.493]      __var deviceID = 0;
[11:27:20.493]        // -> [deviceID <= 0x00000000]
[11:27:20.493]      __var version = 0;
[11:27:20.501]        // -> [version <= 0x00000000]
[11:27:20.501]      __var partNum = 0;
[11:27:20.501]        // -> [partNum <= 0x00000000]
[11:27:20.501]      __var manuf = 0;
[11:27:20.501]        // -> [manuf <= 0x00000000]
[11:27:20.501]      __var isMSPM0G1X0X_G3X0X = 0;
[11:27:20.501]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[11:27:20.501]      __var isProduction = 0;
[11:27:20.501]        // -> [isProduction <= 0x00000000]
[11:27:20.501]      __var continueId = 0;
[11:27:20.501]        // -> [continueId <= 0x00000000]
[11:27:20.501]      deviceID =   Read32(0x41C40004);
[11:27:20.512]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[11:27:20.512]        // -> [deviceID <= 0x2BB8802F]
[11:27:20.512]      version = deviceID >> 28;
[11:27:20.512]        // -> [version <= 0x00000002]
[11:27:20.512]      partNum = (deviceID & 0x0FFFF000) >> 12;
[11:27:20.512]        // -> [partNum <= 0x0000BB88]
[11:27:20.512]      manuf = (deviceID & 0x00000FFE) >> 1;
[11:27:20.512]        // -> [manuf <= 0x00000017]
[11:27:20.512]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[11:27:20.512]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[11:27:20.512]      isProduction = (version > 0);
[11:27:20.512]        // -> [isProduction <= 0x00000001]
[11:27:20.512]    </block>
[11:27:20.512]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[11:27:20.512]      // if-block "!isMSPM0G1X0X_G3X0X"
[11:27:20.512]        // =>  FALSE
[11:27:20.512]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[11:27:20.512]    </control>
[11:27:20.512]    <control if="continueId == 4" while="" timeout="0" info="">
[11:27:20.512]      // if-block "continueId == 4"
[11:27:20.512]        // =>  FALSE
[11:27:20.512]      // skip if-block "continueId == 4"
[11:27:20.512]    </control>
[11:27:20.512]    <control if="!isProduction" while="" timeout="0" info="">
[11:27:20.512]      // if-block "!isProduction"
[11:27:20.512]        // =>  FALSE
[11:27:20.512]      // skip if-block "!isProduction"
[11:27:20.512]    </control>
[11:27:20.512]  </sequence>
[11:27:20.512]  
[11:36:59.987]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:36:59.987]  
[11:36:59.996]  <debugvars>
[11:36:59.996]    // Pre-defined
[11:36:59.996]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:36:59.996]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:36:59.996]    __dp=0x00000000
[11:36:59.996]    __ap=0x00000000
[11:36:59.996]    __traceout=0x00000000      (Trace Disabled)
[11:36:59.996]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:36:59.996]    __FlashAddr=0x00000000
[11:36:59.996]    __FlashLen=0x00000000
[11:36:59.997]    __FlashArg=0x00000000
[11:36:59.997]    __FlashOp=0x00000000
[11:36:59.997]    __Result=0x00000000
[11:36:59.997]  </debugvars>
[11:36:59.997]  
[11:36:59.997]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:36:59.997]    <block atomic="false" info="">
[11:36:59.997]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:36:59.997]        // -> [isSWJ <= 0x00000001]
[11:36:59.997]      __var hasDormant = __protocol & 0x00020000;
[11:36:59.997]        // -> [hasDormant <= 0x00000000]
[11:36:59.997]      __var protType   = __protocol & 0x0000FFFF;
[11:36:59.997]        // -> [protType <= 0x00000002]
[11:36:59.997]    </block>
[11:36:59.997]    <control if="protType == 1" while="" timeout="0" info="">
[11:36:59.997]      // if-block "protType == 1"
[11:36:59.997]        // =>  FALSE
[11:36:59.997]      // skip if-block "protType == 1"
[11:36:59.997]    </control>
[11:36:59.997]    <control if="protType == 2" while="" timeout="0" info="">
[11:36:59.997]      // if-block "protType == 2"
[11:36:59.997]        // =>  TRUE
[11:36:59.997]      <control if="isSWJ" while="" timeout="0" info="">
[11:36:59.997]        // if-block "isSWJ"
[11:36:59.997]          // =>  TRUE
[11:36:59.997]        <control if="hasDormant" while="" timeout="0" info="">
[11:36:59.997]          // if-block "hasDormant"
[11:36:59.997]            // =>  FALSE
[11:36:59.997]          // skip if-block "hasDormant"
[11:36:59.997]        </control>
[11:36:59.997]        <control if="!hasDormant" while="" timeout="0" info="">
[11:36:59.997]          // if-block "!hasDormant"
[11:36:59.997]            // =>  TRUE
[11:36:59.997]          <block atomic="false" info="">
[11:36:59.997]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:36:59.997]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:36:59.997]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:37:00.007]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:37:00.007]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:37:00.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:37:00.007]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:37:00.007]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:37:00.007]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:37:00.017]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:37:00.017]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:37:00.017]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:37:00.017]          </block>
[11:37:00.017]          // end if-block "!hasDormant"
[11:37:00.017]        </control>
[11:37:00.017]        // end if-block "isSWJ"
[11:37:00.017]      </control>
[11:37:00.017]      <control if="!isSWJ" while="" timeout="0" info="">
[11:37:00.017]        // if-block "!isSWJ"
[11:37:00.017]          // =>  FALSE
[11:37:00.017]        // skip if-block "!isSWJ"
[11:37:00.017]      </control>
[11:37:00.017]      <block atomic="false" info="">
[11:37:00.017]        ReadDP(0x0);
[11:37:00.017]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:37:00.017]      </block>
[11:37:00.017]      // end if-block "protType == 2"
[11:37:00.017]    </control>
[11:37:00.017]  </sequence>
[11:37:00.017]  
[11:37:02.810]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:37:02.810]  
[11:37:02.810]  <debugvars>
[11:37:02.810]    // Pre-defined
[11:37:02.810]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:37:02.810]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:37:02.810]    __dp=0x00000000
[11:37:02.810]    __ap=0x00000000
[11:37:02.810]    __traceout=0x00000000      (Trace Disabled)
[11:37:02.810]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:37:02.810]    __FlashAddr=0x00000000
[11:37:02.810]    __FlashLen=0x00000000
[11:37:02.810]    __FlashArg=0x00000000
[11:37:02.810]    __FlashOp=0x00000000
[11:37:02.810]    __Result=0x00000000
[11:37:02.810]  </debugvars>
[11:37:02.810]  
[11:37:02.810]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:37:02.810]    <block atomic="false" info="">
[11:37:02.810]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:37:02.810]        // -> [isSWJ <= 0x00000001]
[11:37:02.820]      __var hasDormant = __protocol & 0x00020000;
[11:37:02.820]        // -> [hasDormant <= 0x00000000]
[11:37:02.820]      __var protType   = __protocol & 0x0000FFFF;
[11:37:02.820]        // -> [protType <= 0x00000002]
[11:37:02.820]    </block>
[11:37:02.820]    <control if="protType == 1" while="" timeout="0" info="">
[11:37:02.820]      // if-block "protType == 1"
[11:37:02.820]        // =>  FALSE
[11:37:02.820]      // skip if-block "protType == 1"
[11:37:02.820]    </control>
[11:37:02.820]    <control if="protType == 2" while="" timeout="0" info="">
[11:37:02.820]      // if-block "protType == 2"
[11:37:02.820]        // =>  TRUE
[11:37:02.820]      <control if="isSWJ" while="" timeout="0" info="">
[11:37:02.820]        // if-block "isSWJ"
[11:37:02.820]          // =>  TRUE
[11:37:02.820]        <control if="hasDormant" while="" timeout="0" info="">
[11:37:02.820]          // if-block "hasDormant"
[11:37:02.820]            // =>  FALSE
[11:37:02.820]          // skip if-block "hasDormant"
[11:37:02.820]        </control>
[11:37:02.820]        <control if="!hasDormant" while="" timeout="0" info="">
[11:37:02.820]          // if-block "!hasDormant"
[11:37:02.820]            // =>  TRUE
[11:37:02.820]          <block atomic="false" info="">
[11:37:02.820]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:37:02.820]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:37:02.820]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:37:02.820]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:37:02.820]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:37:02.820]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:37:02.820]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:37:02.831]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:37:02.831]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:37:02.832]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:37:02.832]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:37:02.832]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:37:02.832]          </block>
[11:37:02.832]          // end if-block "!hasDormant"
[11:37:02.832]        </control>
[11:37:02.832]        // end if-block "isSWJ"
[11:37:02.832]      </control>
[11:37:02.832]      <control if="!isSWJ" while="" timeout="0" info="">
[11:37:02.832]        // if-block "!isSWJ"
[11:37:02.832]          // =>  FALSE
[11:37:02.832]        // skip if-block "!isSWJ"
[11:37:02.832]      </control>
[11:37:02.832]      <block atomic="false" info="">
[11:37:02.832]        ReadDP(0x0);
[11:37:02.840]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:37:02.840]      </block>
[11:37:02.840]      // end if-block "protType == 2"
[11:37:02.840]    </control>
[11:37:02.840]  </sequence>
[11:37:02.840]  
[11:37:02.842]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[11:37:02.842]  
[11:37:02.842]  <debugvars>
[11:37:02.842]    // Pre-defined
[11:37:02.842]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:37:02.842]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:37:02.842]    __dp=0x00000000
[11:37:02.842]    __ap=0x00000000
[11:37:02.842]    __traceout=0x00000000      (Trace Disabled)
[11:37:02.842]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:37:02.842]    __FlashAddr=0x00000000
[11:37:02.842]    __FlashLen=0x00000000
[11:37:02.842]    __FlashArg=0x00000000
[11:37:02.842]    __FlashOp=0x00000000
[11:37:02.842]    __Result=0x00000000
[11:37:02.842]  </debugvars>
[11:37:02.842]  
[11:37:02.842]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[11:37:02.842]    <block atomic="false" info="">
[11:37:02.842]      __var SW_DP_ABORT       = 0x0;
[11:37:02.842]        // -> [SW_DP_ABORT <= 0x00000000]
[11:37:02.842]      __var DP_CTRL_STAT      = 0x4;
[11:37:02.842]        // -> [DP_CTRL_STAT <= 0x00000004]
[11:37:02.842]      __var DP_SELECT         = 0x8;
[11:37:02.842]        // -> [DP_SELECT <= 0x00000008]
[11:37:02.842]      __var powered_down      = 0;
[11:37:02.842]        // -> [powered_down <= 0x00000000]
[11:37:02.842]      WriteDP(DP_SELECT, 0x00000000);
[11:37:02.842]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[11:37:02.842]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[11:37:02.852]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[11:37:02.852]        // -> [powered_down <= 0x00000001]
[11:37:02.852]    </block>
[11:37:02.852]    <control if="powered_down" while="" timeout="0" info="">
[11:37:02.852]      // if-block "powered_down"
[11:37:02.852]        // =>  TRUE
[11:37:02.852]      <block atomic="false" info="">
[11:37:02.852]        Message(0, "Debug/System power-up request sent");
[11:37:02.854]        WriteDP(DP_CTRL_STAT, 0x50000000);
[11:37:02.854]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[11:37:02.854]      </block>
[11:37:02.854]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[11:37:02.854]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[11:37:02.854]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[11:37:02.854]        // while-condition  =>  FALSE
[11:37:02.854]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[11:37:02.854]      </control>
[11:37:02.860]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[11:37:02.860]        // if-block "(__protocol & 0xFFFF) == 1"
[11:37:02.860]          // =>  FALSE
[11:37:02.860]        // skip if-block "(__protocol & 0xFFFF) == 1"
[11:37:02.860]      </control>
[11:37:02.860]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[11:37:02.860]        // if-block "(__protocol & 0xFFFF) == 2"
[11:37:02.860]          // =>  TRUE
[11:37:02.860]        <block atomic="false" info="">
[11:37:02.860]          Message(0, "executing SWD power up");
[11:37:02.862]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[11:37:02.868]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[11:37:02.868]          WriteDP(SW_DP_ABORT, 0x0000001E);
[11:37:02.868]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[11:37:02.868]        </block>
[11:37:02.868]        // end if-block "(__protocol & 0xFFFF) == 2"
[11:37:02.868]      </control>
[11:37:02.868]      // end if-block "powered_down"
[11:37:02.871]    </control>
[11:37:02.871]    <block atomic="false" info="">
[11:37:02.872]      __var DEBUG_PORT_VAL    = 0;
[11:37:02.872]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[11:37:02.872]      __var ACCESS_POINT_VAL  = 0;
[11:37:02.872]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[11:37:02.872]      __ap = 1; 
[11:37:02.872]        // -> [__ap <= 0x00000001]
[11:37:02.872]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[11:37:02.873]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[11:37:02.873]      __ap = 4;
[11:37:02.873]        // -> [__ap <= 0x00000004]
[11:37:02.873]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:37:02.883]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[11:37:02.883]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[11:37:02.883]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:37:02.883]    </block>
[11:37:02.883]    <block atomic="false" info="">
[11:37:02.883]      __var nReset = 0x80;
[11:37:02.883]        // -> [nReset <= 0x00000080]
[11:37:02.883]      __var canReadPins = 0;
[11:37:02.883]        // -> [canReadPins <= 0x00000000]
[11:37:02.883]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[11:37:02.883]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[11:37:02.883]        // -> [canReadPins <= 0x00000001]
[11:37:02.883]    </block>
[11:37:02.883]    <control if="" while="1" timeout="200" info="">
[11:37:02.883]      // while "1"  (timeout="200")
[11:37:02.883]      // while-condition  =>  TRUE
[11:37:02.883]      // while "1"  (timeout="200")
[11:37:02.883]      // while-condition  =>  TRUE
[11:37:02.892]      // while "1"  (timeout="200")
[11:37:02.892]      // while  =>  TIMEOUT
[11:37:02.892]      // end while "1"
[11:37:02.892]    </control>
[11:37:02.892]    <control if="canReadPins" while="" timeout="0" info="">
[11:37:02.892]      // if-block "canReadPins"
[11:37:02.892]        // =>  TRUE
[11:37:02.892]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[11:37:02.893]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[11:37:02.896]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[11:37:02.896]        // while-condition  =>  FALSE
[11:37:02.896]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[11:37:02.896]      </control>
[11:37:02.896]      // end if-block "canReadPins"
[11:37:02.896]    </control>
[11:37:02.896]    <control if="!canReadPins" while="" timeout="0" info="">
[11:37:02.896]      // if-block "!canReadPins"
[11:37:02.896]        // =>  FALSE
[11:37:02.896]      // skip if-block "!canReadPins"
[11:37:02.896]    </control>
[11:37:02.896]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[11:37:02.896]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:37:02.896]        // =>  TRUE
[11:37:02.896]      <block atomic="false" info="">
[11:37:02.896]        WriteAP(0x00, 0x190008);
[11:37:02.902]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[11:37:02.902]        WriteAP(0xF0, 0x01);
[11:37:02.902]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[11:37:02.902]      </block>
[11:37:02.902]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:37:02.902]    </control>
[11:37:02.902]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[11:37:02.902]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:37:02.902]        // =>  FALSE
[11:37:02.902]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:37:02.902]    </control>
[11:37:02.902]    <block atomic="false" info="">
[11:37:02.902]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:37:02.912]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[11:37:02.914]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[11:37:02.914]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:37:02.915]      __ap = 0; //lets make sure we reset the access point selection
[11:37:02.915]        // -> [__ap <= 0x00000000]
[11:37:02.915]    </block>
[11:37:02.915]  </sequence>
[11:37:02.915]  
[11:37:02.943]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:37:02.943]  
[11:37:02.943]  <debugvars>
[11:37:02.943]    // Pre-defined
[11:37:02.943]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:37:02.943]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:37:02.943]    __dp=0x00000000
[11:37:02.943]    __ap=0x00000000
[11:37:02.943]    __traceout=0x00000000      (Trace Disabled)
[11:37:02.943]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:37:02.943]    __FlashAddr=0x00000000
[11:37:02.943]    __FlashLen=0x00000000
[11:37:02.943]    __FlashArg=0x00000000
[11:37:02.943]    __FlashOp=0x00000000
[11:37:02.943]    __Result=0x00000000
[11:37:02.943]  </debugvars>
[11:37:02.943]  
[11:37:02.943]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:37:02.943]    <block atomic="false" info="">
[11:37:02.943]      __var deviceID = 0;
[11:37:02.943]        // -> [deviceID <= 0x00000000]
[11:37:02.943]      __var version = 0;
[11:37:02.943]        // -> [version <= 0x00000000]
[11:37:02.943]      __var partNum = 0;
[11:37:02.943]        // -> [partNum <= 0x00000000]
[11:37:02.943]      __var manuf = 0;
[11:37:02.943]        // -> [manuf <= 0x00000000]
[11:37:02.943]      __var isMSPM0G1X0X_G3X0X = 0;
[11:37:02.943]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[11:37:02.943]      __var isProduction = 0;
[11:37:02.943]        // -> [isProduction <= 0x00000000]
[11:37:02.943]      __var continueId = 0;
[11:37:02.943]        // -> [continueId <= 0x00000000]
[11:37:02.943]      deviceID =   Read32(0x41C40004);
[11:37:02.953]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[11:37:02.953]        // -> [deviceID <= 0x2BB8802F]
[11:37:02.953]      version = deviceID >> 28;
[11:37:02.953]        // -> [version <= 0x00000002]
[11:37:02.953]      partNum = (deviceID & 0x0FFFF000) >> 12;
[11:37:02.953]        // -> [partNum <= 0x0000BB88]
[11:37:02.953]      manuf = (deviceID & 0x00000FFE) >> 1;
[11:37:02.953]        // -> [manuf <= 0x00000017]
[11:37:02.953]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[11:37:02.953]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[11:37:02.953]      isProduction = (version > 0);
[11:37:02.953]        // -> [isProduction <= 0x00000001]
[11:37:02.953]    </block>
[11:37:02.953]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[11:37:02.953]      // if-block "!isMSPM0G1X0X_G3X0X"
[11:37:02.953]        // =>  FALSE
[11:37:02.953]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[11:37:02.953]    </control>
[11:37:02.953]    <control if="continueId == 4" while="" timeout="0" info="">
[11:37:02.953]      // if-block "continueId == 4"
[11:37:02.953]        // =>  FALSE
[11:37:02.953]      // skip if-block "continueId == 4"
[11:37:02.953]    </control>
[11:37:02.953]    <control if="!isProduction" while="" timeout="0" info="">
[11:37:02.953]      // if-block "!isProduction"
[11:37:02.953]        // =>  FALSE
[11:37:02.953]      // skip if-block "!isProduction"
[11:37:02.953]    </control>
[11:37:02.953]  </sequence>
[11:37:02.953]  
[11:38:03.385]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:38:03.385]  
[11:38:03.395]  <debugvars>
[11:38:03.395]    // Pre-defined
[11:38:03.395]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:38:03.395]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:38:03.395]    __dp=0x00000000
[11:38:03.396]    __ap=0x00000000
[11:38:03.396]    __traceout=0x00000000      (Trace Disabled)
[11:38:03.396]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:38:03.396]    __FlashAddr=0x00000000
[11:38:03.396]    __FlashLen=0x00000000
[11:38:03.396]    __FlashArg=0x00000000
[11:38:03.396]    __FlashOp=0x00000000
[11:38:03.397]    __Result=0x00000000
[11:38:03.397]  </debugvars>
[11:38:03.397]  
[11:38:03.397]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:38:03.397]    <block atomic="false" info="">
[11:38:03.397]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:38:03.397]        // -> [isSWJ <= 0x00000001]
[11:38:03.397]      __var hasDormant = __protocol & 0x00020000;
[11:38:03.397]        // -> [hasDormant <= 0x00000000]
[11:38:03.397]      __var protType   = __protocol & 0x0000FFFF;
[11:38:03.398]        // -> [protType <= 0x00000002]
[11:38:03.398]    </block>
[11:38:03.398]    <control if="protType == 1" while="" timeout="0" info="">
[11:38:03.398]      // if-block "protType == 1"
[11:38:03.398]        // =>  FALSE
[11:38:03.398]      // skip if-block "protType == 1"
[11:38:03.398]    </control>
[11:38:03.398]    <control if="protType == 2" while="" timeout="0" info="">
[11:38:03.398]      // if-block "protType == 2"
[11:38:03.398]        // =>  TRUE
[11:38:03.398]      <control if="isSWJ" while="" timeout="0" info="">
[11:38:03.398]        // if-block "isSWJ"
[11:38:03.398]          // =>  TRUE
[11:38:03.398]        <control if="hasDormant" while="" timeout="0" info="">
[11:38:03.398]          // if-block "hasDormant"
[11:38:03.398]            // =>  FALSE
[11:38:03.398]          // skip if-block "hasDormant"
[11:38:03.398]        </control>
[11:38:03.398]        <control if="!hasDormant" while="" timeout="0" info="">
[11:38:03.398]          // if-block "!hasDormant"
[11:38:03.398]            // =>  TRUE
[11:38:03.398]          <block atomic="false" info="">
[11:38:03.398]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:38:03.405]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:38:03.405]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:38:03.405]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:38:03.405]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:38:03.405]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:38:03.405]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:38:03.405]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:38:03.405]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:38:03.405]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:38:03.405]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:38:03.415]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:38:03.415]          </block>
[11:38:03.415]          // end if-block "!hasDormant"
[11:38:03.415]        </control>
[11:38:03.415]        // end if-block "isSWJ"
[11:38:03.415]      </control>
[11:38:03.415]      <control if="!isSWJ" while="" timeout="0" info="">
[11:38:03.415]        // if-block "!isSWJ"
[11:38:03.415]          // =>  FALSE
[11:38:03.415]        // skip if-block "!isSWJ"
[11:38:03.415]      </control>
[11:38:03.415]      <block atomic="false" info="">
[11:38:03.415]        ReadDP(0x0);
[11:38:03.418]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:38:03.418]      </block>
[11:38:03.418]      // end if-block "protType == 2"
[11:38:03.418]    </control>
[11:38:03.418]  </sequence>
[11:38:03.418]  
[11:38:03.418]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[11:38:03.418]  
[11:38:03.418]  <debugvars>
[11:38:03.418]    // Pre-defined
[11:38:03.418]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:38:03.418]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:38:03.418]    __dp=0x00000000
[11:38:03.418]    __ap=0x00000000
[11:38:03.418]    __traceout=0x00000000      (Trace Disabled)
[11:38:03.418]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:38:03.418]    __FlashAddr=0x00000000
[11:38:03.418]    __FlashLen=0x00000000
[11:38:03.418]    __FlashArg=0x00000000
[11:38:03.418]    __FlashOp=0x00000000
[11:38:03.418]    __Result=0x00000000
[11:38:03.418]  </debugvars>
[11:38:03.418]  
[11:38:03.418]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[11:38:03.418]    <block atomic="false" info="">
[11:38:03.418]      __var SW_DP_ABORT       = 0x0;
[11:38:03.418]        // -> [SW_DP_ABORT <= 0x00000000]
[11:38:03.418]      __var DP_CTRL_STAT      = 0x4;
[11:38:03.418]        // -> [DP_CTRL_STAT <= 0x00000004]
[11:38:03.418]      __var DP_SELECT         = 0x8;
[11:38:03.418]        // -> [DP_SELECT <= 0x00000008]
[11:38:03.418]      __var powered_down      = 0;
[11:38:03.418]        // -> [powered_down <= 0x00000000]
[11:38:03.418]      WriteDP(DP_SELECT, 0x00000000);
[11:38:03.427]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[11:38:03.427]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[11:38:03.427]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[11:38:03.427]        // -> [powered_down <= 0x00000001]
[11:38:03.427]    </block>
[11:38:03.427]    <control if="powered_down" while="" timeout="0" info="">
[11:38:03.427]      // if-block "powered_down"
[11:38:03.427]        // =>  TRUE
[11:38:03.427]      <block atomic="false" info="">
[11:38:03.427]        Message(0, "Debug/System power-up request sent");
[11:38:03.432]        WriteDP(DP_CTRL_STAT, 0x50000000);
[11:38:03.434]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[11:38:03.434]      </block>
[11:38:03.434]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[11:38:03.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[11:38:03.436]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[11:38:03.436]        // while-condition  =>  FALSE
[11:38:03.436]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[11:38:03.436]      </control>
[11:38:03.436]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[11:38:03.436]        // if-block "(__protocol & 0xFFFF) == 1"
[11:38:03.436]          // =>  FALSE
[11:38:03.436]        // skip if-block "(__protocol & 0xFFFF) == 1"
[11:38:03.436]      </control>
[11:38:03.436]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[11:38:03.436]        // if-block "(__protocol & 0xFFFF) == 2"
[11:38:03.436]          // =>  TRUE
[11:38:03.436]        <block atomic="false" info="">
[11:38:03.439]          Message(0, "executing SWD power up");
[11:38:03.439]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[11:38:03.442]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[11:38:03.443]          WriteDP(SW_DP_ABORT, 0x0000001E);
[11:38:03.443]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[11:38:03.443]        </block>
[11:38:03.443]        // end if-block "(__protocol & 0xFFFF) == 2"
[11:38:03.443]      </control>
[11:38:03.443]      // end if-block "powered_down"
[11:38:03.443]    </control>
[11:38:03.443]    <block atomic="false" info="">
[11:38:03.443]      __var DEBUG_PORT_VAL    = 0;
[11:38:03.443]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[11:38:03.443]      __var ACCESS_POINT_VAL  = 0;
[11:38:03.443]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[11:38:03.443]      __ap = 1; 
[11:38:03.443]        // -> [__ap <= 0x00000001]
[11:38:03.447]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[11:38:03.448]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[11:38:03.448]      __ap = 4;
[11:38:03.450]        // -> [__ap <= 0x00000004]
[11:38:03.450]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:38:03.454]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[11:38:03.454]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[11:38:03.454]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:38:03.454]    </block>
[11:38:03.454]    <block atomic="false" info="">
[11:38:03.454]      __var nReset = 0x80;
[11:38:03.454]        // -> [nReset <= 0x00000080]
[11:38:03.457]      __var canReadPins = 0;
[11:38:03.457]        // -> [canReadPins <= 0x00000000]
[11:38:03.457]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[11:38:03.457]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[11:38:03.457]        // -> [canReadPins <= 0x00000001]
[11:38:03.457]    </block>
[11:38:03.457]    <control if="" while="1" timeout="200" info="">
[11:38:03.457]      // while "1"  (timeout="200")
[11:38:03.457]      // while-condition  =>  TRUE
[11:38:03.457]      // while "1"  (timeout="200")
[11:38:03.457]      // while-condition  =>  TRUE
[11:38:03.457]      // while "1"  (timeout="200")
[11:38:03.457]      // while-condition  =>  TRUE
[11:38:03.457]      // while "1"  (timeout="200")
[11:38:03.457]      // while-condition  =>  TRUE
[11:38:03.457]      // while "1"  (timeout="200")
[11:38:03.457]      // while-condition  =>  TRUE
[11:38:03.457]      // while "1"  (timeout="200")
[11:38:03.457]      // while-condition  =>  TRUE
[11:38:03.457]      // while "1"  (timeout="200")
[11:38:03.457]      // while-condition  =>  TRUE
[11:38:03.457]      // while "1"  (timeout="200")
[11:38:03.457]      // while-condition  =>  TRUE
[11:38:03.457]      // while "1"  (timeout="200")
[11:38:03.457]      // while-condition  =>  TRUE
[11:38:03.457]      // while "1"  (timeout="200")
[11:38:03.466]      // while-condition  =>  TRUE
[11:38:03.466]      // while "1"  (timeout="200")
[11:38:03.466]      // while-condition  =>  TRUE
[11:38:03.466]      // while "1"  (timeout="200")
[11:38:03.466]      // while-condition  =>  TRUE
[11:38:03.466]      // while "1"  (timeout="200")
[11:38:03.466]      // while-condition  =>  TRUE
[11:38:03.467]      // while "1"  (timeout="200")
[11:38:03.467]      // while-condition  =>  TRUE
[11:38:03.467]      // while "1"  (timeout="200")
[11:38:03.467]      // while-condition  =>  TRUE
[11:38:03.467]      // while "1"  (timeout="200")
[11:38:03.467]      // while-condition  =>  TRUE
[11:38:03.468]      // while "1"  (timeout="200")
[11:38:03.468]      // while-condition  =>  TRUE
[11:38:03.468]      // while "1"  (timeout="200")
[11:38:03.468]      // while-condition  =>  TRUE
[11:38:03.468]      // while "1"  (timeout="200")
[11:38:03.468]      // while-condition  =>  TRUE
[11:38:03.468]      // while "1"  (timeout="200")
[11:38:03.468]      // while-condition  =>  TRUE
[11:38:03.468]      // while "1"  (timeout="200")
[11:38:03.468]      // while-condition  =>  TRUE
[11:38:03.468]      // while "1"  (timeout="200")
[11:38:03.468]      // while-condition  =>  TRUE
[11:38:03.470]      // while "1"  (timeout="200")
[11:38:03.470]      // while  =>  TIMEOUT
[11:38:03.470]      // end while "1"
[11:38:03.470]    </control>
[11:38:03.470]    <control if="canReadPins" while="" timeout="0" info="">
[11:38:03.470]      // if-block "canReadPins"
[11:38:03.470]        // =>  TRUE
[11:38:03.470]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[11:38:03.470]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[11:38:03.471]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[11:38:03.471]        // while-condition  =>  FALSE
[11:38:03.471]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[11:38:03.471]      </control>
[11:38:03.471]      // end if-block "canReadPins"
[11:38:03.471]    </control>
[11:38:03.471]    <control if="!canReadPins" while="" timeout="0" info="">
[11:38:03.471]      // if-block "!canReadPins"
[11:38:03.471]        // =>  FALSE
[11:38:03.471]      // skip if-block "!canReadPins"
[11:38:03.471]    </control>
[11:38:03.471]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[11:38:03.477]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:38:03.477]        // =>  TRUE
[11:38:03.477]      <block atomic="false" info="">
[11:38:03.477]        WriteAP(0x00, 0x190008);
[11:38:03.477]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[11:38:03.477]        WriteAP(0xF0, 0x01);
[11:38:03.480]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[11:38:03.480]      </block>
[11:38:03.480]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:38:03.480]    </control>
[11:38:03.480]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[11:38:03.480]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:38:03.480]        // =>  FALSE
[11:38:03.480]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:38:03.480]    </control>
[11:38:03.480]    <block atomic="false" info="">
[11:38:03.480]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:38:03.499]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[11:38:03.499]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[11:38:03.499]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:38:03.499]      __ap = 0; //lets make sure we reset the access point selection
[11:38:03.499]        // -> [__ap <= 0x00000000]
[11:38:03.499]    </block>
[11:38:03.499]  </sequence>
[11:38:03.499]  
[11:38:03.528]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:38:03.528]  
[11:38:03.528]  <debugvars>
[11:38:03.528]    // Pre-defined
[11:38:03.528]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:38:03.528]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:38:03.528]    __dp=0x00000000
[11:38:03.528]    __ap=0x00000000
[11:38:03.528]    __traceout=0x00000000      (Trace Disabled)
[11:38:03.528]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:38:03.528]    __FlashAddr=0x00000000
[11:38:03.528]    __FlashLen=0x00000000
[11:38:03.528]    __FlashArg=0x00000000
[11:38:03.528]    __FlashOp=0x00000000
[11:38:03.528]    __Result=0x00000000
[11:38:03.528]  </debugvars>
[11:38:03.528]  
[11:38:03.528]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:38:03.528]    <block atomic="false" info="">
[11:38:03.528]      __var deviceID = 0;
[11:38:03.528]        // -> [deviceID <= 0x00000000]
[11:38:03.528]      __var version = 0;
[11:38:03.537]        // -> [version <= 0x00000000]
[11:38:03.537]      __var partNum = 0;
[11:38:03.537]        // -> [partNum <= 0x00000000]
[11:38:03.537]      __var manuf = 0;
[11:38:03.537]        // -> [manuf <= 0x00000000]
[11:38:03.537]      __var isMSPM0G1X0X_G3X0X = 0;
[11:38:03.538]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[11:38:03.538]      __var isProduction = 0;
[11:38:03.538]        // -> [isProduction <= 0x00000000]
[11:38:03.538]      __var continueId = 0;
[11:38:03.538]        // -> [continueId <= 0x00000000]
[11:38:03.538]      deviceID =   Read32(0x41C40004);
[11:38:03.541]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[11:38:03.541]        // -> [deviceID <= 0x2BB8802F]
[11:38:03.541]      version = deviceID >> 28;
[11:38:03.541]        // -> [version <= 0x00000002]
[11:38:03.541]      partNum = (deviceID & 0x0FFFF000) >> 12;
[11:38:03.541]        // -> [partNum <= 0x0000BB88]
[11:38:03.541]      manuf = (deviceID & 0x00000FFE) >> 1;
[11:38:03.541]        // -> [manuf <= 0x00000017]
[11:38:03.541]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[11:38:03.541]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[11:38:03.541]      isProduction = (version > 0);
[11:38:03.541]        // -> [isProduction <= 0x00000001]
[11:38:03.541]    </block>
[11:38:03.541]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[11:38:03.541]      // if-block "!isMSPM0G1X0X_G3X0X"
[11:38:03.541]        // =>  FALSE
[11:38:03.541]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[11:38:03.541]    </control>
[11:38:03.541]    <control if="continueId == 4" while="" timeout="0" info="">
[11:38:03.541]      // if-block "continueId == 4"
[11:38:03.541]        // =>  FALSE
[11:38:03.541]      // skip if-block "continueId == 4"
[11:38:03.541]    </control>
[11:38:03.541]    <control if="!isProduction" while="" timeout="0" info="">
[11:38:03.541]      // if-block "!isProduction"
[11:38:03.541]        // =>  FALSE
[11:38:03.541]      // skip if-block "!isProduction"
[11:38:03.541]    </control>
[11:38:03.547]  </sequence>
[11:38:03.547]  
[11:38:56.204]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:38:56.204]  
[11:38:56.205]  <debugvars>
[11:38:56.205]    // Pre-defined
[11:38:56.205]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:38:56.205]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:38:56.205]    __dp=0x00000000
[11:38:56.205]    __ap=0x00000000
[11:38:56.205]    __traceout=0x00000000      (Trace Disabled)
[11:38:56.205]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:38:56.205]    __FlashAddr=0x00000000
[11:38:56.207]    __FlashLen=0x00000000
[11:38:56.207]    __FlashArg=0x00000000
[11:38:56.207]    __FlashOp=0x00000000
[11:38:56.207]    __Result=0x00000000
[11:38:56.207]  </debugvars>
[11:38:56.207]  
[11:38:56.207]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:38:56.207]    <block atomic="false" info="">
[11:38:56.207]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:38:56.207]        // -> [isSWJ <= 0x00000001]
[11:38:56.207]      __var hasDormant = __protocol & 0x00020000;
[11:38:56.207]        // -> [hasDormant <= 0x00000000]
[11:38:56.207]      __var protType   = __protocol & 0x0000FFFF;
[11:38:56.207]        // -> [protType <= 0x00000002]
[11:38:56.207]    </block>
[11:38:56.207]    <control if="protType == 1" while="" timeout="0" info="">
[11:38:56.207]      // if-block "protType == 1"
[11:38:56.207]        // =>  FALSE
[11:38:56.210]      // skip if-block "protType == 1"
[11:38:56.210]    </control>
[11:38:56.210]    <control if="protType == 2" while="" timeout="0" info="">
[11:38:56.210]      // if-block "protType == 2"
[11:38:56.210]        // =>  TRUE
[11:38:56.210]      <control if="isSWJ" while="" timeout="0" info="">
[11:38:56.210]        // if-block "isSWJ"
[11:38:56.210]          // =>  TRUE
[11:38:56.210]        <control if="hasDormant" while="" timeout="0" info="">
[11:38:56.210]          // if-block "hasDormant"
[11:38:56.210]            // =>  FALSE
[11:38:56.210]          // skip if-block "hasDormant"
[11:38:56.210]        </control>
[11:38:56.210]        <control if="!hasDormant" while="" timeout="0" info="">
[11:38:56.210]          // if-block "!hasDormant"
[11:38:56.210]            // =>  TRUE
[11:38:56.210]          <block atomic="false" info="">
[11:38:56.210]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:38:56.212]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:38:56.212]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:38:56.214]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:38:56.214]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:38:56.214]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:38:56.214]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:38:56.214]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:38:56.214]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:38:56.214]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:38:56.214]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:38:56.214]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:38:56.214]          </block>
[11:38:56.214]          // end if-block "!hasDormant"
[11:38:56.214]        </control>
[11:38:56.214]        // end if-block "isSWJ"
[11:38:56.214]      </control>
[11:38:56.214]      <control if="!isSWJ" while="" timeout="0" info="">
[11:38:56.214]        // if-block "!isSWJ"
[11:38:56.214]          // =>  FALSE
[11:38:56.214]        // skip if-block "!isSWJ"
[11:38:56.214]      </control>
[11:38:56.214]      <block atomic="false" info="">
[11:38:56.214]        ReadDP(0x0);
[11:38:56.224]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:38:56.224]      </block>
[11:38:56.224]      // end if-block "protType == 2"
[11:38:56.224]    </control>
[11:38:56.224]  </sequence>
[11:38:56.224]  
[11:38:56.226]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[11:38:56.226]  
[11:38:56.226]  <debugvars>
[11:38:56.226]    // Pre-defined
[11:38:56.226]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:38:56.226]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:38:56.226]    __dp=0x00000000
[11:38:56.226]    __ap=0x00000000
[11:38:56.226]    __traceout=0x00000000      (Trace Disabled)
[11:38:56.226]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:38:56.226]    __FlashAddr=0x00000000
[11:38:56.226]    __FlashLen=0x00000000
[11:38:56.226]    __FlashArg=0x00000000
[11:38:56.226]    __FlashOp=0x00000000
[11:38:56.226]    __Result=0x00000000
[11:38:56.226]  </debugvars>
[11:38:56.226]  
[11:38:56.226]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[11:38:56.226]    <block atomic="false" info="">
[11:38:56.226]      __var SW_DP_ABORT       = 0x0;
[11:38:56.226]        // -> [SW_DP_ABORT <= 0x00000000]
[11:38:56.226]      __var DP_CTRL_STAT      = 0x4;
[11:38:56.226]        // -> [DP_CTRL_STAT <= 0x00000004]
[11:38:56.226]      __var DP_SELECT         = 0x8;
[11:38:56.226]        // -> [DP_SELECT <= 0x00000008]
[11:38:56.226]      __var powered_down      = 0;
[11:38:56.226]        // -> [powered_down <= 0x00000000]
[11:38:56.226]      WriteDP(DP_SELECT, 0x00000000);
[11:38:56.234]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[11:38:56.234]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[11:38:56.234]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[11:38:56.234]        // -> [powered_down <= 0x00000001]
[11:38:56.234]    </block>
[11:38:56.234]    <control if="powered_down" while="" timeout="0" info="">
[11:38:56.234]      // if-block "powered_down"
[11:38:56.234]        // =>  TRUE
[11:38:56.234]      <block atomic="false" info="">
[11:38:56.234]        Message(0, "Debug/System power-up request sent");
[11:38:56.234]        WriteDP(DP_CTRL_STAT, 0x50000000);
[11:38:56.234]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[11:38:56.234]      </block>
[11:38:56.234]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[11:38:56.234]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[11:38:56.244]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[11:38:56.244]        // while-condition  =>  FALSE
[11:38:56.244]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[11:38:56.244]      </control>
[11:38:56.244]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[11:38:56.244]        // if-block "(__protocol & 0xFFFF) == 1"
[11:38:56.244]          // =>  FALSE
[11:38:56.244]        // skip if-block "(__protocol & 0xFFFF) == 1"
[11:38:56.244]      </control>
[11:38:56.244]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[11:38:56.244]        // if-block "(__protocol & 0xFFFF) == 2"
[11:38:56.244]          // =>  TRUE
[11:38:56.244]        <block atomic="false" info="">
[11:38:56.244]          Message(0, "executing SWD power up");
[11:38:56.247]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[11:38:56.249]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[11:38:56.249]          WriteDP(SW_DP_ABORT, 0x0000001E);
[11:38:56.251]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[11:38:56.251]        </block>
[11:38:56.252]        // end if-block "(__protocol & 0xFFFF) == 2"
[11:38:56.252]      </control>
[11:38:56.252]      // end if-block "powered_down"
[11:38:56.252]    </control>
[11:38:56.252]    <block atomic="false" info="">
[11:38:56.252]      __var DEBUG_PORT_VAL    = 0;
[11:38:56.252]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[11:38:56.252]      __var ACCESS_POINT_VAL  = 0;
[11:38:56.252]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[11:38:56.252]      __ap = 1; 
[11:38:56.252]        // -> [__ap <= 0x00000001]
[11:38:56.252]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[11:38:56.254]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[11:38:56.254]      __ap = 4;
[11:38:56.254]        // -> [__ap <= 0x00000004]
[11:38:56.254]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:38:56.254]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[11:38:56.254]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[11:38:56.254]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:38:56.254]    </block>
[11:38:56.254]    <block atomic="false" info="">
[11:38:56.264]      __var nReset = 0x80;
[11:38:56.264]        // -> [nReset <= 0x00000080]
[11:38:56.264]      __var canReadPins = 0;
[11:38:56.264]        // -> [canReadPins <= 0x00000000]
[11:38:56.264]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[11:38:56.267]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[11:38:56.267]        // -> [canReadPins <= 0x00000001]
[11:38:56.267]    </block>
[11:38:56.267]    <control if="" while="1" timeout="200" info="">
[11:38:56.267]      // while "1"  (timeout="200")
[11:38:56.267]      // while-condition  =>  TRUE
[11:38:56.267]      // while "1"  (timeout="200")
[11:38:56.267]      // while-condition  =>  TRUE
[11:38:56.267]      // while "1"  (timeout="200")
[11:38:56.267]      // while-condition  =>  TRUE
[11:38:56.267]      // while "1"  (timeout="200")
[11:38:56.267]      // while-condition  =>  TRUE
[11:38:56.267]      // while "1"  (timeout="200")
[11:38:56.267]      // while-condition  =>  TRUE
[11:38:56.267]      // while "1"  (timeout="200")
[11:38:56.267]      // while-condition  =>  TRUE
[11:38:56.267]      // while "1"  (timeout="200")
[11:38:56.267]      // while-condition  =>  TRUE
[11:38:56.267]      // while "1"  (timeout="200")
[11:38:56.267]      // while-condition  =>  TRUE
[11:38:56.272]      // while "1"  (timeout="200")
[11:38:56.272]      // while-condition  =>  TRUE
[11:38:56.272]      // while "1"  (timeout="200")
[11:38:56.272]      // while-condition  =>  TRUE
[11:38:56.272]      // while "1"  (timeout="200")
[11:38:56.272]      // while-condition  =>  TRUE
[11:38:56.272]      // while "1"  (timeout="200")
[11:38:56.272]      // while-condition  =>  TRUE
[11:38:56.272]      // while "1"  (timeout="200")
[11:38:56.272]      // while-condition  =>  TRUE
[11:38:56.272]      // while "1"  (timeout="200")
[11:38:56.272]      // while-condition  =>  TRUE
[11:38:56.272]      // while "1"  (timeout="200")
[11:38:56.272]      // while-condition  =>  TRUE
[11:38:56.272]      // while "1"  (timeout="200")
[11:38:56.272]      // while-condition  =>  TRUE
[11:38:56.272]      // while "1"  (timeout="200")
[11:38:56.272]      // while-condition  =>  TRUE
[11:38:56.275]      // while "1"  (timeout="200")
[11:38:56.275]      // while-condition  =>  TRUE
[11:38:56.275]      // while "1"  (timeout="200")
[11:38:56.275]      // while-condition  =>  TRUE
[11:38:56.275]      // while "1"  (timeout="200")
[11:38:56.275]      // while-condition  =>  TRUE
[11:38:56.275]      // while "1"  (timeout="200")
[11:38:56.275]      // while-condition  =>  TRUE
[11:38:56.276]      // while "1"  (timeout="200")
[11:38:56.276]      // while-condition  =>  TRUE
[11:38:56.276]      // while "1"  (timeout="200")
[11:38:56.276]      // while-condition  =>  TRUE
[11:38:56.276]      // while "1"  (timeout="200")
[11:38:56.276]      // while-condition  =>  TRUE
[11:38:56.276]      // while "1"  (timeout="200")
[11:38:56.276]      // while-condition  =>  TRUE
[11:38:56.276]      // while "1"  (timeout="200")
[11:38:56.276]      // while-condition  =>  TRUE
[11:38:56.276]      // while "1"  (timeout="200")
[11:38:56.276]      // while-condition  =>  TRUE
[11:38:56.276]      // while "1"  (timeout="200")
[11:38:56.276]      // while-condition  =>  TRUE
[11:38:56.276]      // while "1"  (timeout="200")
[11:38:56.278]      // while-condition  =>  TRUE
[11:38:56.278]      // while "1"  (timeout="200")
[11:38:56.278]      // while-condition  =>  TRUE
[11:38:56.278]      // while "1"  (timeout="200")
[11:38:56.278]      // while-condition  =>  TRUE
[11:38:56.278]      // while "1"  (timeout="200")
[11:38:56.278]      // while-condition  =>  TRUE
[11:38:56.278]      // while "1"  (timeout="200")
[11:38:56.278]      // while-condition  =>  TRUE
[11:38:56.278]      // while "1"  (timeout="200")
[11:38:56.278]      // while-condition  =>  TRUE
[11:38:56.278]      // while "1"  (timeout="200")
[11:38:56.278]      // while-condition  =>  TRUE
[11:38:56.278]      // while "1"  (timeout="200")
[11:38:56.278]      // while-condition  =>  TRUE
[11:38:56.278]      // while "1"  (timeout="200")
[11:38:56.278]      // while-condition  =>  TRUE
[11:38:56.278]      // while "1"  (timeout="200")
[11:38:56.280]      // while-condition  =>  TRUE
[11:38:56.280]      // while "1"  (timeout="200")
[11:38:56.280]      // while-condition  =>  TRUE
[11:38:56.280]      // while "1"  (timeout="200")
[11:38:56.280]      // while-condition  =>  TRUE
[11:38:56.280]      // while "1"  (timeout="200")
[11:38:56.280]      // while-condition  =>  TRUE
[11:38:56.280]      // while "1"  (timeout="200")
[11:38:56.280]      // while-condition  =>  TRUE
[11:38:56.280]      // while "1"  (timeout="200")
[11:38:56.280]      // while-condition  =>  TRUE
[11:38:56.280]      // while "1"  (timeout="200")
[11:38:56.280]      // while-condition  =>  TRUE
[11:38:56.280]      // while "1"  (timeout="200")
[11:38:56.280]      // while-condition  =>  TRUE
[11:38:56.280]      // while "1"  (timeout="200")
[11:38:56.280]      // while-condition  =>  TRUE
[11:38:56.280]      // while "1"  (timeout="200")
[11:38:56.280]      // while-condition  =>  TRUE
[11:38:56.282]      // while "1"  (timeout="200")
[11:38:56.282]      // while-condition  =>  TRUE
[11:38:56.282]      // while "1"  (timeout="200")
[11:38:56.282]      // while-condition  =>  TRUE
[11:38:56.282]      // while "1"  (timeout="200")
[11:38:56.282]      // while-condition  =>  TRUE
[11:38:56.282]      // while "1"  (timeout="200")
[11:38:56.283]      // while-condition  =>  TRUE
[11:38:56.283]      // while "1"  (timeout="200")
[11:38:56.283]      // while  =>  TIMEOUT
[11:38:56.283]      // end while "1"
[11:38:56.283]    </control>
[11:38:56.283]    <control if="canReadPins" while="" timeout="0" info="">
[11:38:56.283]      // if-block "canReadPins"
[11:38:56.283]        // =>  TRUE
[11:38:56.283]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[11:38:56.283]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[11:38:56.286]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[11:38:56.286]        // while-condition  =>  FALSE
[11:38:56.286]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[11:38:56.286]      </control>
[11:38:56.286]      // end if-block "canReadPins"
[11:38:56.286]    </control>
[11:38:56.286]    <control if="!canReadPins" while="" timeout="0" info="">
[11:38:56.286]      // if-block "!canReadPins"
[11:38:56.286]        // =>  FALSE
[11:38:56.286]      // skip if-block "!canReadPins"
[11:38:56.286]    </control>
[11:38:56.286]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[11:38:56.286]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:38:56.286]        // =>  TRUE
[11:38:56.286]      <block atomic="false" info="">
[11:38:56.286]        WriteAP(0x00, 0x190008);
[11:38:56.288]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[11:38:56.288]        WriteAP(0xF0, 0x01);
[11:38:56.288]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[11:38:56.288]      </block>
[11:38:56.288]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:38:56.288]    </control>
[11:38:56.288]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[11:38:56.288]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:38:56.288]        // =>  FALSE
[11:38:56.295]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:38:56.295]    </control>
[11:38:56.295]    <block atomic="false" info="">
[11:38:56.295]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:38:56.297]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[11:38:56.297]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[11:38:56.297]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:38:56.297]      __ap = 0; //lets make sure we reset the access point selection
[11:38:56.297]        // -> [__ap <= 0x00000000]
[11:38:56.297]    </block>
[11:38:56.297]  </sequence>
[11:38:56.297]  
[11:38:56.339]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:38:56.339]  
[11:38:56.339]  <debugvars>
[11:38:56.339]    // Pre-defined
[11:38:56.339]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:38:56.339]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:38:56.339]    __dp=0x00000000
[11:38:56.339]    __ap=0x00000000
[11:38:56.339]    __traceout=0x00000000      (Trace Disabled)
[11:38:56.339]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:38:56.339]    __FlashAddr=0x00000000
[11:38:56.339]    __FlashLen=0x00000000
[11:38:56.339]    __FlashArg=0x00000000
[11:38:56.339]    __FlashOp=0x00000000
[11:38:56.339]    __Result=0x00000000
[11:38:56.339]  </debugvars>
[11:38:56.339]  
[11:38:56.339]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:38:56.339]    <block atomic="false" info="">
[11:38:56.339]      __var deviceID = 0;
[11:38:56.339]        // -> [deviceID <= 0x00000000]
[11:38:56.339]      __var version = 0;
[11:38:56.339]        // -> [version <= 0x00000000]
[11:38:56.339]      __var partNum = 0;
[11:38:56.339]        // -> [partNum <= 0x00000000]
[11:38:56.339]      __var manuf = 0;
[11:38:56.339]        // -> [manuf <= 0x00000000]
[11:38:56.339]      __var isMSPM0G1X0X_G3X0X = 0;
[11:38:56.339]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[11:38:56.339]      __var isProduction = 0;
[11:38:56.339]        // -> [isProduction <= 0x00000000]
[11:38:56.339]      __var continueId = 0;
[11:38:56.339]        // -> [continueId <= 0x00000000]
[11:38:56.339]      deviceID =   Read32(0x41C40004);
[11:38:56.346]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[11:38:56.346]        // -> [deviceID <= 0x2BB8802F]
[11:38:56.346]      version = deviceID >> 28;
[11:38:56.346]        // -> [version <= 0x00000002]
[11:38:56.346]      partNum = (deviceID & 0x0FFFF000) >> 12;
[11:38:56.346]        // -> [partNum <= 0x0000BB88]
[11:38:56.346]      manuf = (deviceID & 0x00000FFE) >> 1;
[11:38:56.346]        // -> [manuf <= 0x00000017]
[11:38:56.346]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[11:38:56.346]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[11:38:56.346]      isProduction = (version > 0);
[11:38:56.346]        // -> [isProduction <= 0x00000001]
[11:38:56.346]    </block>
[11:38:56.346]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[11:38:56.346]      // if-block "!isMSPM0G1X0X_G3X0X"
[11:38:56.346]        // =>  FALSE
[11:38:56.346]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[11:38:56.346]    </control>
[11:38:56.346]    <control if="continueId == 4" while="" timeout="0" info="">
[11:38:56.346]      // if-block "continueId == 4"
[11:38:56.346]        // =>  FALSE
[11:38:56.346]      // skip if-block "continueId == 4"
[11:38:56.346]    </control>
[11:38:56.346]    <control if="!isProduction" while="" timeout="0" info="">
[11:38:56.346]      // if-block "!isProduction"
[11:38:56.346]        // =>  FALSE
[11:38:56.346]      // skip if-block "!isProduction"
[11:38:56.346]    </control>
[11:38:56.346]  </sequence>
[11:38:56.346]  
[11:40:28.939]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:40:28.939]  
[11:40:28.948]  <debugvars>
[11:40:28.948]    // Pre-defined
[11:40:28.948]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:40:28.949]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:40:28.949]    __dp=0x00000000
[11:40:28.949]    __ap=0x00000000
[11:40:28.949]    __traceout=0x00000000      (Trace Disabled)
[11:40:28.949]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:40:28.949]    __FlashAddr=0x00000000
[11:40:28.949]    __FlashLen=0x00000000
[11:40:28.949]    __FlashArg=0x00000000
[11:40:28.949]    __FlashOp=0x00000000
[11:40:28.950]    __Result=0x00000000
[11:40:28.950]  </debugvars>
[11:40:28.950]  
[11:40:28.950]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:40:28.950]    <block atomic="false" info="">
[11:40:28.950]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:40:28.950]        // -> [isSWJ <= 0x00000001]
[11:40:28.950]      __var hasDormant = __protocol & 0x00020000;
[11:40:28.950]        // -> [hasDormant <= 0x00000000]
[11:40:28.950]      __var protType   = __protocol & 0x0000FFFF;
[11:40:28.951]        // -> [protType <= 0x00000002]
[11:40:28.951]    </block>
[11:40:28.951]    <control if="protType == 1" while="" timeout="0" info="">
[11:40:28.951]      // if-block "protType == 1"
[11:40:28.951]        // =>  FALSE
[11:40:28.951]      // skip if-block "protType == 1"
[11:40:28.951]    </control>
[11:40:28.952]    <control if="protType == 2" while="" timeout="0" info="">
[11:40:28.952]      // if-block "protType == 2"
[11:40:28.952]        // =>  TRUE
[11:40:28.952]      <control if="isSWJ" while="" timeout="0" info="">
[11:40:28.952]        // if-block "isSWJ"
[11:40:28.952]          // =>  TRUE
[11:40:28.952]        <control if="hasDormant" while="" timeout="0" info="">
[11:40:28.952]          // if-block "hasDormant"
[11:40:28.952]            // =>  FALSE
[11:40:28.952]          // skip if-block "hasDormant"
[11:40:28.953]        </control>
[11:40:28.953]        <control if="!hasDormant" while="" timeout="0" info="">
[11:40:28.953]          // if-block "!hasDormant"
[11:40:28.953]            // =>  TRUE
[11:40:28.953]          <block atomic="false" info="">
[11:40:28.953]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:40:28.954]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:40:28.954]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:40:28.956]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:40:28.956]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:40:28.960]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:40:28.960]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:40:28.970]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:40:28.970]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:40:28.973]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:40:28.973]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:40:28.973]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:40:28.973]          </block>
[11:40:28.973]          // end if-block "!hasDormant"
[11:40:28.973]        </control>
[11:40:28.973]        // end if-block "isSWJ"
[11:40:28.973]      </control>
[11:40:28.973]      <control if="!isSWJ" while="" timeout="0" info="">
[11:40:28.973]        // if-block "!isSWJ"
[11:40:28.973]          // =>  FALSE
[11:40:28.973]        // skip if-block "!isSWJ"
[11:40:28.973]      </control>
[11:40:28.973]      <block atomic="false" info="">
[11:40:28.973]        ReadDP(0x0);
[11:40:28.973]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:40:28.973]      </block>
[11:40:28.973]      // end if-block "protType == 2"
[11:40:28.973]    </control>
[11:40:28.973]  </sequence>
[11:40:28.973]  
[11:40:28.980]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[11:40:28.980]  
[11:40:28.980]  <debugvars>
[11:40:28.980]    // Pre-defined
[11:40:28.980]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:40:28.980]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:40:28.980]    __dp=0x00000000
[11:40:28.980]    __ap=0x00000000
[11:40:28.980]    __traceout=0x00000000      (Trace Disabled)
[11:40:28.980]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:40:28.980]    __FlashAddr=0x00000000
[11:40:28.980]    __FlashLen=0x00000000
[11:40:28.980]    __FlashArg=0x00000000
[11:40:28.980]    __FlashOp=0x00000000
[11:40:28.980]    __Result=0x00000000
[11:40:28.980]  </debugvars>
[11:40:28.980]  
[11:40:28.980]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[11:40:28.980]    <block atomic="false" info="">
[11:40:28.980]      __var SW_DP_ABORT       = 0x0;
[11:40:28.980]        // -> [SW_DP_ABORT <= 0x00000000]
[11:40:28.980]      __var DP_CTRL_STAT      = 0x4;
[11:40:28.980]        // -> [DP_CTRL_STAT <= 0x00000004]
[11:40:28.980]      __var DP_SELECT         = 0x8;
[11:40:28.980]        // -> [DP_SELECT <= 0x00000008]
[11:40:28.980]      __var powered_down      = 0;
[11:40:28.980]        // -> [powered_down <= 0x00000000]
[11:40:28.980]      WriteDP(DP_SELECT, 0x00000000);
[11:40:28.992]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[11:40:28.992]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[11:40:28.992]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[11:40:28.992]        // -> [powered_down <= 0x00000001]
[11:40:28.992]    </block>
[11:40:28.992]    <control if="powered_down" while="" timeout="0" info="">
[11:40:28.992]      // if-block "powered_down"
[11:40:28.992]        // =>  TRUE
[11:40:28.992]      <block atomic="false" info="">
[11:40:28.992]        Message(0, "Debug/System power-up request sent");
[11:40:28.992]        WriteDP(DP_CTRL_STAT, 0x50000000);
[11:40:28.998]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[11:40:28.998]      </block>
[11:40:28.998]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[11:40:28.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[11:40:29.000]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[11:40:29.000]        // while-condition  =>  FALSE
[11:40:29.000]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[11:40:29.000]      </control>
[11:40:29.000]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[11:40:29.000]        // if-block "(__protocol & 0xFFFF) == 1"
[11:40:29.000]          // =>  FALSE
[11:40:29.000]        // skip if-block "(__protocol & 0xFFFF) == 1"
[11:40:29.000]      </control>
[11:40:29.000]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[11:40:29.000]        // if-block "(__protocol & 0xFFFF) == 2"
[11:40:29.000]          // =>  TRUE
[11:40:29.000]        <block atomic="false" info="">
[11:40:29.000]          Message(0, "executing SWD power up");
[11:40:29.000]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[11:40:29.011]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[11:40:29.011]          WriteDP(SW_DP_ABORT, 0x0000001E);
[11:40:29.013]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[11:40:29.013]        </block>
[11:40:29.013]        // end if-block "(__protocol & 0xFFFF) == 2"
[11:40:29.013]      </control>
[11:40:29.013]      // end if-block "powered_down"
[11:40:29.013]    </control>
[11:40:29.013]    <block atomic="false" info="">
[11:40:29.013]      __var DEBUG_PORT_VAL    = 0;
[11:40:29.013]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[11:40:29.020]      __var ACCESS_POINT_VAL  = 0;
[11:40:29.020]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[11:40:29.020]      __ap = 1; 
[11:40:29.021]        // -> [__ap <= 0x00000001]
[11:40:29.021]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[11:40:29.021]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[11:40:29.021]      __ap = 4;
[11:40:29.021]        // -> [__ap <= 0x00000004]
[11:40:29.021]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:40:29.031]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[11:40:29.031]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[11:40:29.031]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:40:29.031]    </block>
[11:40:29.031]    <block atomic="false" info="">
[11:40:29.031]      __var nReset = 0x80;
[11:40:29.031]        // -> [nReset <= 0x00000080]
[11:40:29.031]      __var canReadPins = 0;
[11:40:29.031]        // -> [canReadPins <= 0x00000000]
[11:40:29.031]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[11:40:29.041]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[11:40:29.041]        // -> [canReadPins <= 0x00000001]
[11:40:29.041]    </block>
[11:40:29.041]    <control if="" while="1" timeout="200" info="">
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.041]      // while "1"  (timeout="200")
[11:40:29.041]      // while-condition  =>  TRUE
[11:40:29.046]      // while "1"  (timeout="200")
[11:40:29.046]      // while-condition  =>  TRUE
[11:40:29.046]      // while "1"  (timeout="200")
[11:40:29.046]      // while-condition  =>  TRUE
[11:40:29.046]      // while "1"  (timeout="200")
[11:40:29.046]      // while-condition  =>  TRUE
[11:40:29.046]      // while "1"  (timeout="200")
[11:40:29.046]      // while-condition  =>  TRUE
[11:40:29.046]      // while "1"  (timeout="200")
[11:40:29.046]      // while-condition  =>  TRUE
[11:40:29.046]      // while "1"  (timeout="200")
[11:40:29.046]      // while-condition  =>  TRUE
[11:40:29.046]      // while "1"  (timeout="200")
[11:40:29.046]      // while-condition  =>  TRUE
[11:40:29.046]      // while "1"  (timeout="200")
[11:40:29.046]      // while-condition  =>  TRUE
[11:40:29.046]      // while "1"  (timeout="200")
[11:40:29.047]      // while-condition  =>  TRUE
[11:40:29.047]      // while "1"  (timeout="200")
[11:40:29.047]      // while-condition  =>  TRUE
[11:40:29.047]      // while "1"  (timeout="200")
[11:40:29.047]      // while-condition  =>  TRUE
[11:40:29.047]      // while "1"  (timeout="200")
[11:40:29.047]      // while-condition  =>  TRUE
[11:40:29.047]      // while "1"  (timeout="200")
[11:40:29.047]      // while-condition  =>  TRUE
[11:40:29.047]      // while "1"  (timeout="200")
[11:40:29.047]      // while-condition  =>  TRUE
[11:40:29.047]      // while "1"  (timeout="200")
[11:40:29.047]      // while-condition  =>  TRUE
[11:40:29.047]      // while "1"  (timeout="200")
[11:40:29.047]      // while-condition  =>  TRUE
[11:40:29.047]      // while "1"  (timeout="200")
[11:40:29.047]      // while-condition  =>  TRUE
[11:40:29.047]      // while "1"  (timeout="200")
[11:40:29.047]      // while-condition  =>  TRUE
[11:40:29.047]      // while "1"  (timeout="200")
[11:40:29.047]      // while-condition  =>  TRUE
[11:40:29.047]      // while "1"  (timeout="200")
[11:40:29.047]      // while-condition  =>  TRUE
[11:40:29.047]      // while "1"  (timeout="200")
[11:40:29.047]      // while-condition  =>  TRUE
[11:40:29.047]      // while "1"  (timeout="200")
[11:40:29.050]      // while-condition  =>  TRUE
[11:40:29.050]      // while "1"  (timeout="200")
[11:40:29.050]      // while  =>  TIMEOUT
[11:40:29.050]      // end while "1"
[11:40:29.050]    </control>
[11:40:29.050]    <control if="canReadPins" while="" timeout="0" info="">
[11:40:29.050]      // if-block "canReadPins"
[11:40:29.050]        // =>  TRUE
[11:40:29.050]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[11:40:29.050]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[11:40:29.063]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[11:40:29.063]        // while-condition  =>  FALSE
[11:40:29.063]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[11:40:29.063]      </control>
[11:40:29.063]      // end if-block "canReadPins"
[11:40:29.063]    </control>
[11:40:29.063]    <control if="!canReadPins" while="" timeout="0" info="">
[11:40:29.063]      // if-block "!canReadPins"
[11:40:29.063]        // =>  FALSE
[11:40:29.063]      // skip if-block "!canReadPins"
[11:40:29.063]    </control>
[11:40:29.063]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[11:40:29.063]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:40:29.063]        // =>  TRUE
[11:40:29.063]      <block atomic="false" info="">
[11:40:29.063]        WriteAP(0x00, 0x190008);
[11:40:29.063]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[11:40:29.063]        WriteAP(0xF0, 0x01);
[11:40:29.072]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[11:40:29.072]      </block>
[11:40:29.072]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:40:29.072]    </control>
[11:40:29.072]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[11:40:29.072]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:40:29.072]        // =>  FALSE
[11:40:29.072]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:40:29.072]    </control>
[11:40:29.072]    <block atomic="false" info="">
[11:40:29.072]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:40:29.082]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[11:40:29.082]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[11:40:29.082]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:40:29.082]      __ap = 0; //lets make sure we reset the access point selection
[11:40:29.082]        // -> [__ap <= 0x00000000]
[11:40:29.082]    </block>
[11:40:29.082]  </sequence>
[11:40:29.082]  
[11:40:29.132]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:40:29.132]  
[11:40:29.132]  <debugvars>
[11:40:29.132]    // Pre-defined
[11:40:29.132]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:40:29.132]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:40:29.132]    __dp=0x00000000
[11:40:29.132]    __ap=0x00000000
[11:40:29.132]    __traceout=0x00000000      (Trace Disabled)
[11:40:29.132]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:40:29.132]    __FlashAddr=0x00000000
[11:40:29.132]    __FlashLen=0x00000000
[11:40:29.132]    __FlashArg=0x00000000
[11:40:29.132]    __FlashOp=0x00000000
[11:40:29.132]    __Result=0x00000000
[11:40:29.132]  </debugvars>
[11:40:29.132]  
[11:40:29.132]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:40:29.132]    <block atomic="false" info="">
[11:40:29.132]      __var deviceID = 0;
[11:40:29.132]        // -> [deviceID <= 0x00000000]
[11:40:29.132]      __var version = 0;
[11:40:29.142]        // -> [version <= 0x00000000]
[11:40:29.142]      __var partNum = 0;
[11:40:29.142]        // -> [partNum <= 0x00000000]
[11:40:29.142]      __var manuf = 0;
[11:40:29.142]        // -> [manuf <= 0x00000000]
[11:40:29.142]      __var isMSPM0G1X0X_G3X0X = 0;
[11:40:29.142]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[11:40:29.142]      __var isProduction = 0;
[11:40:29.142]        // -> [isProduction <= 0x00000000]
[11:40:29.142]      __var continueId = 0;
[11:40:29.142]        // -> [continueId <= 0x00000000]
[11:40:29.143]      deviceID =   Read32(0x41C40004);
[11:40:29.152]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[11:40:29.152]        // -> [deviceID <= 0x2BB8802F]
[11:40:29.152]      version = deviceID >> 28;
[11:40:29.152]        // -> [version <= 0x00000002]
[11:40:29.152]      partNum = (deviceID & 0x0FFFF000) >> 12;
[11:40:29.152]        // -> [partNum <= 0x0000BB88]
[11:40:29.152]      manuf = (deviceID & 0x00000FFE) >> 1;
[11:40:29.152]        // -> [manuf <= 0x00000017]
[11:40:29.152]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[11:40:29.152]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[11:40:29.152]      isProduction = (version > 0);
[11:40:29.152]        // -> [isProduction <= 0x00000001]
[11:40:29.152]    </block>
[11:40:29.152]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[11:40:29.152]      // if-block "!isMSPM0G1X0X_G3X0X"
[11:40:29.152]        // =>  FALSE
[11:40:29.152]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[11:40:29.152]    </control>
[11:40:29.152]    <control if="continueId == 4" while="" timeout="0" info="">
[11:40:29.152]      // if-block "continueId == 4"
[11:40:29.152]        // =>  FALSE
[11:40:29.152]      // skip if-block "continueId == 4"
[11:40:29.152]    </control>
[11:40:29.152]    <control if="!isProduction" while="" timeout="0" info="">
[11:40:29.152]      // if-block "!isProduction"
[11:40:29.152]        // =>  FALSE
[11:40:29.152]      // skip if-block "!isProduction"
[11:40:29.152]    </control>
[11:40:29.152]  </sequence>
[11:40:29.152]  
[11:41:08.511]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:41:08.511]  
[11:41:08.511]  <debugvars>
[11:41:08.511]    // Pre-defined
[11:41:08.511]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:41:08.511]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:41:08.511]    __dp=0x00000000
[11:41:08.511]    __ap=0x00000000
[11:41:08.511]    __traceout=0x00000000      (Trace Disabled)
[11:41:08.511]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:41:08.511]    __FlashAddr=0x00000000
[11:41:08.511]    __FlashLen=0x00000000
[11:41:08.511]    __FlashArg=0x00000000
[11:41:08.511]    __FlashOp=0x00000000
[11:41:08.511]    __Result=0x00000000
[11:41:08.513]  </debugvars>
[11:41:08.513]  
[11:41:08.513]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:41:08.513]    <block atomic="false" info="">
[11:41:08.513]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:41:08.513]        // -> [isSWJ <= 0x00000001]
[11:41:08.513]      __var hasDormant = __protocol & 0x00020000;
[11:41:08.513]        // -> [hasDormant <= 0x00000000]
[11:41:08.513]      __var protType   = __protocol & 0x0000FFFF;
[11:41:08.513]        // -> [protType <= 0x00000002]
[11:41:08.513]    </block>
[11:41:08.513]    <control if="protType == 1" while="" timeout="0" info="">
[11:41:08.513]      // if-block "protType == 1"
[11:41:08.513]        // =>  FALSE
[11:41:08.513]      // skip if-block "protType == 1"
[11:41:08.513]    </control>
[11:41:08.513]    <control if="protType == 2" while="" timeout="0" info="">
[11:41:08.515]      // if-block "protType == 2"
[11:41:08.515]        // =>  TRUE
[11:41:08.515]      <control if="isSWJ" while="" timeout="0" info="">
[11:41:08.515]        // if-block "isSWJ"
[11:41:08.515]          // =>  TRUE
[11:41:08.515]        <control if="hasDormant" while="" timeout="0" info="">
[11:41:08.515]          // if-block "hasDormant"
[11:41:08.515]            // =>  FALSE
[11:41:08.515]          // skip if-block "hasDormant"
[11:41:08.516]        </control>
[11:41:08.516]        <control if="!hasDormant" while="" timeout="0" info="">
[11:41:08.516]          // if-block "!hasDormant"
[11:41:08.516]            // =>  TRUE
[11:41:08.516]          <block atomic="false" info="">
[11:41:08.516]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:41:08.517]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:41:08.517]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:41:08.520]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:41:08.520]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:41:08.522]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:41:08.522]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:41:08.527]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:41:08.527]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:41:08.528]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:41:08.528]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:41:08.534]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:41:08.534]          </block>
[11:41:08.534]          // end if-block "!hasDormant"
[11:41:08.534]        </control>
[11:41:08.534]        // end if-block "isSWJ"
[11:41:08.534]      </control>
[11:41:08.534]      <control if="!isSWJ" while="" timeout="0" info="">
[11:41:08.534]        // if-block "!isSWJ"
[11:41:08.534]          // =>  FALSE
[11:41:08.534]        // skip if-block "!isSWJ"
[11:41:08.534]      </control>
[11:41:08.534]      <block atomic="false" info="">
[11:41:08.534]        ReadDP(0x0);
[11:41:08.534]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:41:08.534]      </block>
[11:41:08.534]      // end if-block "protType == 2"
[11:41:08.534]    </control>
[11:41:08.534]  </sequence>
[11:41:08.534]  
[11:41:08.540]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[11:41:08.540]  
[11:41:08.540]  <debugvars>
[11:41:08.540]    // Pre-defined
[11:41:08.540]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:41:08.540]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:41:08.540]    __dp=0x00000000
[11:41:08.540]    __ap=0x00000000
[11:41:08.542]    __traceout=0x00000000      (Trace Disabled)
[11:41:08.542]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:41:08.542]    __FlashAddr=0x00000000
[11:41:08.542]    __FlashLen=0x00000000
[11:41:08.542]    __FlashArg=0x00000000
[11:41:08.542]    __FlashOp=0x00000000
[11:41:08.542]    __Result=0x00000000
[11:41:08.543]  </debugvars>
[11:41:08.543]  
[11:41:08.543]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[11:41:08.543]    <block atomic="false" info="">
[11:41:08.543]      __var SW_DP_ABORT       = 0x0;
[11:41:08.543]        // -> [SW_DP_ABORT <= 0x00000000]
[11:41:08.543]      __var DP_CTRL_STAT      = 0x4;
[11:41:08.543]        // -> [DP_CTRL_STAT <= 0x00000004]
[11:41:08.543]      __var DP_SELECT         = 0x8;
[11:41:08.543]        // -> [DP_SELECT <= 0x00000008]
[11:41:08.544]      __var powered_down      = 0;
[11:41:08.544]        // -> [powered_down <= 0x00000000]
[11:41:08.544]      WriteDP(DP_SELECT, 0x00000000);
[11:41:08.552]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[11:41:08.552]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[11:41:08.561]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[11:41:08.561]        // -> [powered_down <= 0x00000001]
[11:41:08.561]    </block>
[11:41:08.561]    <control if="powered_down" while="" timeout="0" info="">
[11:41:08.561]      // if-block "powered_down"
[11:41:08.561]        // =>  TRUE
[11:41:08.561]      <block atomic="false" info="">
[11:41:08.561]        Message(0, "Debug/System power-up request sent");
[11:41:08.561]        WriteDP(DP_CTRL_STAT, 0x50000000);
[11:41:08.569]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[11:41:08.569]      </block>
[11:41:08.569]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[11:41:08.569]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[11:41:08.571]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[11:41:08.571]        // while-condition  =>  FALSE
[11:41:08.571]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[11:41:08.571]      </control>
[11:41:08.571]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[11:41:08.571]        // if-block "(__protocol & 0xFFFF) == 1"
[11:41:08.571]          // =>  FALSE
[11:41:08.571]        // skip if-block "(__protocol & 0xFFFF) == 1"
[11:41:08.571]      </control>
[11:41:08.571]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[11:41:08.571]        // if-block "(__protocol & 0xFFFF) == 2"
[11:41:08.571]          // =>  TRUE
[11:41:08.571]        <block atomic="false" info="">
[11:41:08.571]          Message(0, "executing SWD power up");
[11:41:08.577]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[11:41:08.591]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[11:41:08.591]          WriteDP(SW_DP_ABORT, 0x0000001E);
[11:41:08.591]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[11:41:08.591]        </block>
[11:41:08.591]        // end if-block "(__protocol & 0xFFFF) == 2"
[11:41:08.591]      </control>
[11:41:08.591]      // end if-block "powered_down"
[11:41:08.591]    </control>
[11:41:08.591]    <block atomic="false" info="">
[11:41:08.591]      __var DEBUG_PORT_VAL    = 0;
[11:41:08.591]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[11:41:08.591]      __var ACCESS_POINT_VAL  = 0;
[11:41:08.591]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[11:41:08.591]      __ap = 1; 
[11:41:08.591]        // -> [__ap <= 0x00000001]
[11:41:08.591]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[11:41:08.603]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[11:41:08.603]      __ap = 4;
[11:41:08.603]        // -> [__ap <= 0x00000004]
[11:41:08.603]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:41:08.614]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[11:41:08.614]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[11:41:08.614]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:41:08.614]    </block>
[11:41:08.614]    <block atomic="false" info="">
[11:41:08.614]      __var nReset = 0x80;
[11:41:08.614]        // -> [nReset <= 0x00000080]
[11:41:08.614]      __var canReadPins = 0;
[11:41:08.614]        // -> [canReadPins <= 0x00000000]
[11:41:08.614]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[11:41:08.622]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[11:41:08.622]        // -> [canReadPins <= 0x00000001]
[11:41:08.622]    </block>
[11:41:08.622]    <control if="" while="1" timeout="200" info="">
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.622]      // while-condition  =>  TRUE
[11:41:08.622]      // while "1"  (timeout="200")
[11:41:08.632]      // while-condition  =>  TRUE
[11:41:08.632]      // while "1"  (timeout="200")
[11:41:08.632]      // while  =>  TIMEOUT
[11:41:08.632]      // end while "1"
[11:41:08.632]    </control>
[11:41:08.632]    <control if="canReadPins" while="" timeout="0" info="">
[11:41:08.632]      // if-block "canReadPins"
[11:41:08.632]        // =>  TRUE
[11:41:08.634]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[11:41:08.634]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[11:41:08.634]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[11:41:08.634]        // while-condition  =>  FALSE
[11:41:08.634]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[11:41:08.634]      </control>
[11:41:08.634]      // end if-block "canReadPins"
[11:41:08.634]    </control>
[11:41:08.634]    <control if="!canReadPins" while="" timeout="0" info="">
[11:41:08.634]      // if-block "!canReadPins"
[11:41:08.634]        // =>  FALSE
[11:41:08.634]      // skip if-block "!canReadPins"
[11:41:08.634]    </control>
[11:41:08.634]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[11:41:08.634]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:41:08.634]        // =>  TRUE
[11:41:08.634]      <block atomic="false" info="">
[11:41:08.634]        WriteAP(0x00, 0x190008);
[11:41:08.634]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[11:41:08.634]        WriteAP(0xF0, 0x01);
[11:41:08.653]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[11:41:08.653]      </block>
[11:41:08.653]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:41:08.653]    </control>
[11:41:08.653]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[11:41:08.653]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:41:08.653]        // =>  FALSE
[11:41:08.653]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:41:08.653]    </control>
[11:41:08.653]    <block atomic="false" info="">
[11:41:08.653]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:41:08.653]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[11:41:08.653]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[11:41:08.653]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:41:08.653]      __ap = 0; //lets make sure we reset the access point selection
[11:41:08.653]        // -> [__ap <= 0x00000000]
[11:41:08.653]    </block>
[11:41:08.653]  </sequence>
[11:41:08.653]  
[11:41:08.776]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:41:08.776]  
[11:41:08.777]  <debugvars>
[11:41:08.777]    // Pre-defined
[11:41:08.777]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:41:08.777]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[11:41:08.777]    __dp=0x00000000
[11:41:08.778]    __ap=0x00000000
[11:41:08.778]    __traceout=0x00000000      (Trace Disabled)
[11:41:08.778]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:41:08.778]    __FlashAddr=0x00000000
[11:41:08.778]    __FlashLen=0x00000000
[11:41:08.778]    __FlashArg=0x00000000
[11:41:08.778]    __FlashOp=0x00000000
[11:41:08.778]    __Result=0x00000000
[11:41:08.778]  </debugvars>
[11:41:08.778]  
[11:41:08.778]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:41:08.778]    <block atomic="false" info="">
[11:41:08.778]      __var deviceID = 0;
[11:41:08.779]        // -> [deviceID <= 0x00000000]
[11:41:08.779]      __var version = 0;
[11:41:08.779]        // -> [version <= 0x00000000]
[11:41:08.779]      __var partNum = 0;
[11:41:08.779]        // -> [partNum <= 0x00000000]
[11:41:08.779]      __var manuf = 0;
[11:41:08.779]        // -> [manuf <= 0x00000000]
[11:41:08.779]      __var isMSPM0G1X0X_G3X0X = 0;
[11:41:08.779]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[11:41:08.779]      __var isProduction = 0;
[11:41:08.779]        // -> [isProduction <= 0x00000000]
[11:41:08.779]      __var continueId = 0;
[11:41:08.779]        // -> [continueId <= 0x00000000]
[11:41:08.779]      deviceID =   Read32(0x41C40004);
[11:41:08.786]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[11:41:08.786]        // -> [deviceID <= 0x2BB8802F]
[11:41:08.786]      version = deviceID >> 28;
[11:41:08.786]        // -> [version <= 0x00000002]
[11:41:08.786]      partNum = (deviceID & 0x0FFFF000) >> 12;
[11:41:08.786]        // -> [partNum <= 0x0000BB88]
[11:41:08.786]      manuf = (deviceID & 0x00000FFE) >> 1;
[11:41:08.786]        // -> [manuf <= 0x00000017]
[11:41:08.786]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[11:41:08.786]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[11:41:08.786]      isProduction = (version > 0);
[11:41:08.786]        // -> [isProduction <= 0x00000001]
[11:41:08.786]    </block>
[11:41:08.786]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[11:41:08.786]      // if-block "!isMSPM0G1X0X_G3X0X"
[11:41:08.786]        // =>  FALSE
[11:41:08.786]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[11:41:08.786]    </control>
[11:41:08.786]    <control if="continueId == 4" while="" timeout="0" info="">
[11:41:08.786]      // if-block "continueId == 4"
[11:41:08.786]        // =>  FALSE
[11:41:08.786]      // skip if-block "continueId == 4"
[11:41:08.786]    </control>
[11:41:08.786]    <control if="!isProduction" while="" timeout="0" info="">
[11:41:08.795]      // if-block "!isProduction"
[11:41:08.795]        // =>  FALSE
[11:41:08.795]      // skip if-block "!isProduction"
[11:41:08.795]    </control>
[11:41:08.795]  </sequence>
[11:41:08.795]  
[11:41:48.343]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:41:48.343]  
[11:41:48.352]  <debugvars>
[11:41:48.352]    // Pre-defined
[11:41:48.352]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:41:48.352]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:41:48.352]    __dp=0x00000000
[11:41:48.352]    __ap=0x00000000
[11:41:48.352]    __traceout=0x00000000      (Trace Disabled)
[11:41:48.352]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:41:48.352]    __FlashAddr=0x00000000
[11:41:48.352]    __FlashLen=0x00000000
[11:41:48.352]    __FlashArg=0x00000000
[11:41:48.352]    __FlashOp=0x00000000
[11:41:48.352]    __Result=0x00000000
[11:41:48.352]  </debugvars>
[11:41:48.352]  
[11:41:48.352]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:41:48.352]    <block atomic="false" info="">
[11:41:48.352]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:41:48.352]        // -> [isSWJ <= 0x00000001]
[11:41:48.352]      __var hasDormant = __protocol & 0x00020000;
[11:41:48.352]        // -> [hasDormant <= 0x00000000]
[11:41:48.352]      __var protType   = __protocol & 0x0000FFFF;
[11:41:48.352]        // -> [protType <= 0x00000002]
[11:41:48.352]    </block>
[11:41:48.352]    <control if="protType == 1" while="" timeout="0" info="">
[11:41:48.352]      // if-block "protType == 1"
[11:41:48.352]        // =>  FALSE
[11:41:48.352]      // skip if-block "protType == 1"
[11:41:48.352]    </control>
[11:41:48.352]    <control if="protType == 2" while="" timeout="0" info="">
[11:41:48.352]      // if-block "protType == 2"
[11:41:48.352]        // =>  TRUE
[11:41:48.352]      <control if="isSWJ" while="" timeout="0" info="">
[11:41:48.352]        // if-block "isSWJ"
[11:41:48.352]          // =>  TRUE
[11:41:48.352]        <control if="hasDormant" while="" timeout="0" info="">
[11:41:48.352]          // if-block "hasDormant"
[11:41:48.352]            // =>  FALSE
[11:41:48.352]          // skip if-block "hasDormant"
[11:41:48.352]        </control>
[11:41:48.352]        <control if="!hasDormant" while="" timeout="0" info="">
[11:41:48.352]          // if-block "!hasDormant"
[11:41:48.352]            // =>  TRUE
[11:41:48.352]          <block atomic="false" info="">
[11:41:48.352]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:41:48.357]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:41:48.357]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:41:48.361]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:41:48.361]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:41:48.362]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:41:48.362]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:41:48.362]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:41:48.362]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:41:48.362]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:41:48.362]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:41:48.371]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:41:48.371]          </block>
[11:41:48.371]          // end if-block "!hasDormant"
[11:41:48.372]        </control>
[11:41:48.372]        // end if-block "isSWJ"
[11:41:48.372]      </control>
[11:41:48.372]      <control if="!isSWJ" while="" timeout="0" info="">
[11:41:48.372]        // if-block "!isSWJ"
[11:41:48.372]          // =>  FALSE
[11:41:48.372]        // skip if-block "!isSWJ"
[11:41:48.372]      </control>
[11:41:48.372]      <block atomic="false" info="">
[11:41:48.372]        ReadDP(0x0);
[11:41:48.375]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:41:48.375]      </block>
[11:41:48.375]      // end if-block "protType == 2"
[11:41:48.375]    </control>
[11:41:48.375]  </sequence>
[11:41:48.375]  
[11:41:48.375]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[11:41:48.375]  
[11:41:48.375]  <debugvars>
[11:41:48.375]    // Pre-defined
[11:41:48.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:41:48.381]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:41:48.381]    __dp=0x00000000
[11:41:48.381]    __ap=0x00000000
[11:41:48.381]    __traceout=0x00000000      (Trace Disabled)
[11:41:48.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:41:48.382]    __FlashAddr=0x00000000
[11:41:48.382]    __FlashLen=0x00000000
[11:41:48.382]    __FlashArg=0x00000000
[11:41:48.382]    __FlashOp=0x00000000
[11:41:48.382]    __Result=0x00000000
[11:41:48.382]  </debugvars>
[11:41:48.382]  
[11:41:48.382]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[11:41:48.382]    <block atomic="false" info="">
[11:41:48.382]      __var SW_DP_ABORT       = 0x0;
[11:41:48.382]        // -> [SW_DP_ABORT <= 0x00000000]
[11:41:48.382]      __var DP_CTRL_STAT      = 0x4;
[11:41:48.382]        // -> [DP_CTRL_STAT <= 0x00000004]
[11:41:48.382]      __var DP_SELECT         = 0x8;
[11:41:48.382]        // -> [DP_SELECT <= 0x00000008]
[11:41:48.382]      __var powered_down      = 0;
[11:41:48.382]        // -> [powered_down <= 0x00000000]
[11:41:48.382]      WriteDP(DP_SELECT, 0x00000000);
[11:41:48.392]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[11:41:48.392]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[11:41:48.392]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[11:41:48.392]        // -> [powered_down <= 0x00000001]
[11:41:48.392]    </block>
[11:41:48.392]    <control if="powered_down" while="" timeout="0" info="">
[11:41:48.392]      // if-block "powered_down"
[11:41:48.392]        // =>  TRUE
[11:41:48.392]      <block atomic="false" info="">
[11:41:48.392]        Message(0, "Debug/System power-up request sent");
[11:41:48.392]        WriteDP(DP_CTRL_STAT, 0x50000000);
[11:41:48.402]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[11:41:48.402]      </block>
[11:41:48.402]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[11:41:48.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[11:41:48.402]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[11:41:48.402]        // while-condition  =>  FALSE
[11:41:48.402]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[11:41:48.402]      </control>
[11:41:48.402]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[11:41:48.402]        // if-block "(__protocol & 0xFFFF) == 1"
[11:41:48.402]          // =>  FALSE
[11:41:48.402]        // skip if-block "(__protocol & 0xFFFF) == 1"
[11:41:48.402]      </control>
[11:41:48.402]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[11:41:48.402]        // if-block "(__protocol & 0xFFFF) == 2"
[11:41:48.402]          // =>  TRUE
[11:41:48.402]        <block atomic="false" info="">
[11:41:48.402]          Message(0, "executing SWD power up");
[11:41:48.402]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[11:41:48.402]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[11:41:48.402]          WriteDP(SW_DP_ABORT, 0x0000001E);
[11:41:48.413]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[11:41:48.413]        </block>
[11:41:48.413]        // end if-block "(__protocol & 0xFFFF) == 2"
[11:41:48.413]      </control>
[11:41:48.413]      // end if-block "powered_down"
[11:41:48.413]    </control>
[11:41:48.413]    <block atomic="false" info="">
[11:41:48.413]      __var DEBUG_PORT_VAL    = 0;
[11:41:48.413]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[11:41:48.413]      __var ACCESS_POINT_VAL  = 0;
[11:41:48.413]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[11:41:48.413]      __ap = 1; 
[11:41:48.413]        // -> [__ap <= 0x00000001]
[11:41:48.413]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[11:41:48.413]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[11:41:48.413]      __ap = 4;
[11:41:48.413]        // -> [__ap <= 0x00000004]
[11:41:48.413]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:41:48.422]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[11:41:48.422]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[11:41:48.422]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:41:48.422]    </block>
[11:41:48.422]    <block atomic="false" info="">
[11:41:48.422]      __var nReset = 0x80;
[11:41:48.422]        // -> [nReset <= 0x00000080]
[11:41:48.422]      __var canReadPins = 0;
[11:41:48.422]        // -> [canReadPins <= 0x00000000]
[11:41:48.422]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[11:41:48.427]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[11:41:48.427]        // -> [canReadPins <= 0x00000001]
[11:41:48.427]    </block>
[11:41:48.427]    <control if="" while="1" timeout="200" info="">
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.427]      // while "1"  (timeout="200")
[11:41:48.427]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.432]      // while "1"  (timeout="200")
[11:41:48.432]      // while-condition  =>  TRUE
[11:41:48.442]      // while "1"  (timeout="200")
[11:41:48.442]      // while  =>  TIMEOUT
[11:41:48.442]      // end while "1"
[11:41:48.442]    </control>
[11:41:48.442]    <control if="canReadPins" while="" timeout="0" info="">
[11:41:48.442]      // if-block "canReadPins"
[11:41:48.442]        // =>  TRUE
[11:41:48.442]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[11:41:48.442]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[11:41:48.444]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[11:41:48.444]        // while-condition  =>  FALSE
[11:41:48.444]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[11:41:48.444]      </control>
[11:41:48.444]      // end if-block "canReadPins"
[11:41:48.444]    </control>
[11:41:48.444]    <control if="!canReadPins" while="" timeout="0" info="">
[11:41:48.446]      // if-block "!canReadPins"
[11:41:48.446]        // =>  FALSE
[11:41:48.446]      // skip if-block "!canReadPins"
[11:41:48.446]    </control>
[11:41:48.446]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[11:41:48.446]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:41:48.446]        // =>  TRUE
[11:41:48.446]      <block atomic="false" info="">
[11:41:48.446]        WriteAP(0x00, 0x190008);
[11:41:48.448]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[11:41:48.448]        WriteAP(0xF0, 0x01);
[11:41:48.453]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[11:41:48.453]      </block>
[11:41:48.453]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:41:48.454]    </control>
[11:41:48.454]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[11:41:48.455]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:41:48.455]        // =>  FALSE
[11:41:48.455]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:41:48.455]    </control>
[11:41:48.455]    <block atomic="false" info="">
[11:41:48.455]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:41:48.462]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[11:41:48.462]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[11:41:48.463]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:41:48.464]      __ap = 0; //lets make sure we reset the access point selection
[11:41:48.464]        // -> [__ap <= 0x00000000]
[11:41:48.464]    </block>
[11:41:48.464]  </sequence>
[11:41:48.464]  
[11:41:48.494]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:41:48.494]  
[11:41:48.494]  <debugvars>
[11:41:48.494]    // Pre-defined
[11:41:48.494]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:41:48.494]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:41:48.494]    __dp=0x00000000
[11:41:48.494]    __ap=0x00000000
[11:41:48.494]    __traceout=0x00000000      (Trace Disabled)
[11:41:48.494]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:41:48.494]    __FlashAddr=0x00000000
[11:41:48.494]    __FlashLen=0x00000000
[11:41:48.494]    __FlashArg=0x00000000
[11:41:48.494]    __FlashOp=0x00000000
[11:41:48.494]    __Result=0x00000000
[11:41:48.494]  </debugvars>
[11:41:48.494]  
[11:41:48.494]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:41:48.494]    <block atomic="false" info="">
[11:41:48.494]      __var deviceID = 0;
[11:41:48.494]        // -> [deviceID <= 0x00000000]
[11:41:48.494]      __var version = 0;
[11:41:48.494]        // -> [version <= 0x00000000]
[11:41:48.494]      __var partNum = 0;
[11:41:48.494]        // -> [partNum <= 0x00000000]
[11:41:48.494]      __var manuf = 0;
[11:41:48.494]        // -> [manuf <= 0x00000000]
[11:41:48.494]      __var isMSPM0G1X0X_G3X0X = 0;
[11:41:48.494]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[11:41:48.494]      __var isProduction = 0;
[11:41:48.494]        // -> [isProduction <= 0x00000000]
[11:41:48.494]      __var continueId = 0;
[11:41:48.494]        // -> [continueId <= 0x00000000]
[11:41:48.494]      deviceID =   Read32(0x41C40004);
[11:41:48.515]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[11:41:48.515]        // -> [deviceID <= 0x2BB8802F]
[11:41:48.515]      version = deviceID >> 28;
[11:41:48.515]        // -> [version <= 0x00000002]
[11:41:48.515]      partNum = (deviceID & 0x0FFFF000) >> 12;
[11:41:48.515]        // -> [partNum <= 0x0000BB88]
[11:41:48.515]      manuf = (deviceID & 0x00000FFE) >> 1;
[11:41:48.515]        // -> [manuf <= 0x00000017]
[11:41:48.515]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[11:41:48.515]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[11:41:48.515]      isProduction = (version > 0);
[11:41:48.515]        // -> [isProduction <= 0x00000001]
[11:41:48.515]    </block>
[11:41:48.515]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[11:41:48.515]      // if-block "!isMSPM0G1X0X_G3X0X"
[11:41:48.515]        // =>  FALSE
[11:41:48.515]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[11:41:48.515]    </control>
[11:41:48.515]    <control if="continueId == 4" while="" timeout="0" info="">
[11:41:48.515]      // if-block "continueId == 4"
[11:41:48.515]        // =>  FALSE
[11:41:48.515]      // skip if-block "continueId == 4"
[11:41:48.515]    </control>
[11:41:48.515]    <control if="!isProduction" while="" timeout="0" info="">
[11:41:48.515]      // if-block "!isProduction"
[11:41:48.515]        // =>  FALSE
[11:41:48.515]      // skip if-block "!isProduction"
[11:41:48.515]    </control>
[11:41:48.515]  </sequence>
[11:41:48.515]  
[11:43:09.786]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[11:43:09.786]  
[11:43:09.794]  <debugvars>
[11:43:09.794]    // Pre-defined
[11:43:09.794]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:43:09.794]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:43:09.794]    __dp=0x00000000
[11:43:09.794]    __ap=0x00000000
[11:43:09.794]    __traceout=0x00000000      (Trace Disabled)
[11:43:09.794]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:43:09.794]    __FlashAddr=0x00000000
[11:43:09.794]    __FlashLen=0x00000000
[11:43:09.794]    __FlashArg=0x00000000
[11:43:09.794]    __FlashOp=0x00000000
[11:43:09.794]    __Result=0x00000000
[11:43:09.794]  </debugvars>
[11:43:09.794]  
[11:43:09.794]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[11:43:09.794]    <block atomic="false" info="">
[11:43:09.794]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[11:43:09.794]        // -> [isSWJ <= 0x00000001]
[11:43:09.794]      __var hasDormant = __protocol & 0x00020000;
[11:43:09.794]        // -> [hasDormant <= 0x00000000]
[11:43:09.794]      __var protType   = __protocol & 0x0000FFFF;
[11:43:09.794]        // -> [protType <= 0x00000002]
[11:43:09.794]    </block>
[11:43:09.794]    <control if="protType == 1" while="" timeout="0" info="">
[11:43:09.794]      // if-block "protType == 1"
[11:43:09.794]        // =>  FALSE
[11:43:09.794]      // skip if-block "protType == 1"
[11:43:09.794]    </control>
[11:43:09.794]    <control if="protType == 2" while="" timeout="0" info="">
[11:43:09.794]      // if-block "protType == 2"
[11:43:09.794]        // =>  TRUE
[11:43:09.794]      <control if="isSWJ" while="" timeout="0" info="">
[11:43:09.794]        // if-block "isSWJ"
[11:43:09.794]          // =>  TRUE
[11:43:09.794]        <control if="hasDormant" while="" timeout="0" info="">
[11:43:09.794]          // if-block "hasDormant"
[11:43:09.794]            // =>  FALSE
[11:43:09.794]          // skip if-block "hasDormant"
[11:43:09.794]        </control>
[11:43:09.794]        <control if="!hasDormant" while="" timeout="0" info="">
[11:43:09.794]          // if-block "!hasDormant"
[11:43:09.794]            // =>  TRUE
[11:43:09.794]          <block atomic="false" info="">
[11:43:09.794]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[11:43:09.794]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:43:09.794]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[11:43:09.794]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[11:43:09.794]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[11:43:09.803]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:43:09.803]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[11:43:09.803]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[11:43:09.803]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[11:43:09.803]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[11:43:09.803]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[11:43:09.803]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[11:43:09.803]          </block>
[11:43:09.803]          // end if-block "!hasDormant"
[11:43:09.803]        </control>
[11:43:09.803]        // end if-block "isSWJ"
[11:43:09.803]      </control>
[11:43:09.803]      <control if="!isSWJ" while="" timeout="0" info="">
[11:43:09.803]        // if-block "!isSWJ"
[11:43:09.803]          // =>  FALSE
[11:43:09.803]        // skip if-block "!isSWJ"
[11:43:09.803]      </control>
[11:43:09.803]      <block atomic="false" info="">
[11:43:09.803]        ReadDP(0x0);
[11:43:09.803]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[11:43:09.803]      </block>
[11:43:09.803]      // end if-block "protType == 2"
[11:43:09.803]    </control>
[11:43:09.803]  </sequence>
[11:43:09.813]  
[11:43:09.813]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[11:43:09.813]  
[11:43:09.813]  <debugvars>
[11:43:09.813]    // Pre-defined
[11:43:09.813]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:43:09.813]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:43:09.813]    __dp=0x00000000
[11:43:09.813]    __ap=0x00000000
[11:43:09.813]    __traceout=0x00000000      (Trace Disabled)
[11:43:09.813]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:43:09.813]    __FlashAddr=0x00000000
[11:43:09.813]    __FlashLen=0x00000000
[11:43:09.813]    __FlashArg=0x00000000
[11:43:09.813]    __FlashOp=0x00000000
[11:43:09.813]    __Result=0x00000000
[11:43:09.813]  </debugvars>
[11:43:09.813]  
[11:43:09.813]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[11:43:09.813]    <block atomic="false" info="">
[11:43:09.813]      __var SW_DP_ABORT       = 0x0;
[11:43:09.813]        // -> [SW_DP_ABORT <= 0x00000000]
[11:43:09.813]      __var DP_CTRL_STAT      = 0x4;
[11:43:09.813]        // -> [DP_CTRL_STAT <= 0x00000004]
[11:43:09.813]      __var DP_SELECT         = 0x8;
[11:43:09.813]        // -> [DP_SELECT <= 0x00000008]
[11:43:09.813]      __var powered_down      = 0;
[11:43:09.813]        // -> [powered_down <= 0x00000000]
[11:43:09.813]      WriteDP(DP_SELECT, 0x00000000);
[11:43:09.813]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[11:43:09.813]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[11:43:09.823]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[11:43:09.823]        // -> [powered_down <= 0x00000001]
[11:43:09.823]    </block>
[11:43:09.823]    <control if="powered_down" while="" timeout="0" info="">
[11:43:09.823]      // if-block "powered_down"
[11:43:09.823]        // =>  TRUE
[11:43:09.823]      <block atomic="false" info="">
[11:43:09.823]        Message(0, "Debug/System power-up request sent");
[11:43:09.823]        WriteDP(DP_CTRL_STAT, 0x50000000);
[11:43:09.823]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[11:43:09.823]      </block>
[11:43:09.823]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[11:43:09.823]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[11:43:09.835]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[11:43:09.835]        // while-condition  =>  FALSE
[11:43:09.835]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[11:43:09.835]      </control>
[11:43:09.835]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[11:43:09.835]        // if-block "(__protocol & 0xFFFF) == 1"
[11:43:09.835]          // =>  FALSE
[11:43:09.835]        // skip if-block "(__protocol & 0xFFFF) == 1"
[11:43:09.835]      </control>
[11:43:09.835]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[11:43:09.835]        // if-block "(__protocol & 0xFFFF) == 2"
[11:43:09.835]          // =>  TRUE
[11:43:09.835]        <block atomic="false" info="">
[11:43:09.835]          Message(0, "executing SWD power up");
[11:43:09.835]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[11:43:09.835]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[11:43:09.844]          WriteDP(SW_DP_ABORT, 0x0000001E);
[11:43:09.844]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[11:43:09.844]        </block>
[11:43:09.844]        // end if-block "(__protocol & 0xFFFF) == 2"
[11:43:09.844]      </control>
[11:43:09.844]      // end if-block "powered_down"
[11:43:09.844]    </control>
[11:43:09.844]    <block atomic="false" info="">
[11:43:09.844]      __var DEBUG_PORT_VAL    = 0;
[11:43:09.844]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[11:43:09.844]      __var ACCESS_POINT_VAL  = 0;
[11:43:09.844]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[11:43:09.844]      __ap = 1; 
[11:43:09.844]        // -> [__ap <= 0x00000001]
[11:43:09.844]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[11:43:09.844]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[11:43:09.844]      __ap = 4;
[11:43:09.844]        // -> [__ap <= 0x00000004]
[11:43:09.854]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:43:09.856]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[11:43:09.856]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[11:43:09.856]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:43:09.856]    </block>
[11:43:09.856]    <block atomic="false" info="">
[11:43:09.856]      __var nReset = 0x80;
[11:43:09.856]        // -> [nReset <= 0x00000080]
[11:43:09.856]      __var canReadPins = 0;
[11:43:09.856]        // -> [canReadPins <= 0x00000000]
[11:43:09.856]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[11:43:09.856]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[11:43:09.856]        // -> [canReadPins <= 0x00000001]
[11:43:09.856]    </block>
[11:43:09.856]    <control if="" while="1" timeout="200" info="">
[11:43:09.856]      // while "1"  (timeout="200")
[11:43:09.856]      // while-condition  =>  TRUE
[11:43:09.856]      // while "1"  (timeout="200")
[11:43:09.856]      // while-condition  =>  TRUE
[11:43:09.864]      // while "1"  (timeout="200")
[11:43:09.864]      // while  =>  TIMEOUT
[11:43:09.864]      // end while "1"
[11:43:09.864]    </control>
[11:43:09.864]    <control if="canReadPins" while="" timeout="0" info="">
[11:43:09.864]      // if-block "canReadPins"
[11:43:09.864]        // =>  TRUE
[11:43:09.864]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[11:43:09.864]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[11:43:09.874]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[11:43:09.874]        // while-condition  =>  FALSE
[11:43:09.874]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[11:43:09.874]      </control>
[11:43:09.874]      // end if-block "canReadPins"
[11:43:09.874]    </control>
[11:43:09.874]    <control if="!canReadPins" while="" timeout="0" info="">
[11:43:09.874]      // if-block "!canReadPins"
[11:43:09.874]        // =>  FALSE
[11:43:09.874]      // skip if-block "!canReadPins"
[11:43:09.874]    </control>
[11:43:09.874]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[11:43:09.874]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:43:09.874]        // =>  TRUE
[11:43:09.874]      <block atomic="false" info="">
[11:43:09.874]        WriteAP(0x00, 0x190008);
[11:43:09.874]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[11:43:09.874]        WriteAP(0xF0, 0x01);
[11:43:09.874]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[11:43:09.874]      </block>
[11:43:09.874]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[11:43:09.874]    </control>
[11:43:09.884]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[11:43:09.885]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:43:09.885]        // =>  FALSE
[11:43:09.885]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[11:43:09.885]    </control>
[11:43:09.885]    <block atomic="false" info="">
[11:43:09.885]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[11:43:09.887]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[11:43:09.887]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[11:43:09.887]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[11:43:09.887]      __ap = 0; //lets make sure we reset the access point selection
[11:43:09.887]        // -> [__ap <= 0x00000000]
[11:43:09.887]    </block>
[11:43:09.887]  </sequence>
[11:43:09.887]  
[11:43:09.916]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[11:43:09.916]  
[11:43:09.916]  <debugvars>
[11:43:09.916]    // Pre-defined
[11:43:09.916]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[11:43:09.916]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[11:43:09.916]    __dp=0x00000000
[11:43:09.916]    __ap=0x00000000
[11:43:09.916]    __traceout=0x00000000      (Trace Disabled)
[11:43:09.916]    __errorcontrol=0x00000000  (Skip Errors="False")
[11:43:09.916]    __FlashAddr=0x00000000
[11:43:09.916]    __FlashLen=0x00000000
[11:43:09.916]    __FlashArg=0x00000000
[11:43:09.916]    __FlashOp=0x00000000
[11:43:09.916]    __Result=0x00000000
[11:43:09.916]  </debugvars>
[11:43:09.916]  
[11:43:09.916]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[11:43:09.916]    <block atomic="false" info="">
[11:43:09.916]      __var deviceID = 0;
[11:43:09.916]        // -> [deviceID <= 0x00000000]
[11:43:09.916]      __var version = 0;
[11:43:09.916]        // -> [version <= 0x00000000]
[11:43:09.916]      __var partNum = 0;
[11:43:09.916]        // -> [partNum <= 0x00000000]
[11:43:09.916]      __var manuf = 0;
[11:43:09.916]        // -> [manuf <= 0x00000000]
[11:43:09.916]      __var isMSPM0G1X0X_G3X0X = 0;
[11:43:09.916]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[11:43:09.916]      __var isProduction = 0;
[11:43:09.925]        // -> [isProduction <= 0x00000000]
[11:43:09.925]      __var continueId = 0;
[11:43:09.925]        // -> [continueId <= 0x00000000]
[11:43:09.925]      deviceID =   Read32(0x41C40004);
[11:43:09.927]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[11:43:09.927]        // -> [deviceID <= 0x2BB8802F]
[11:43:09.927]      version = deviceID >> 28;
[11:43:09.927]        // -> [version <= 0x00000002]
[11:43:09.927]      partNum = (deviceID & 0x0FFFF000) >> 12;
[11:43:09.927]        // -> [partNum <= 0x0000BB88]
[11:43:09.927]      manuf = (deviceID & 0x00000FFE) >> 1;
[11:43:09.927]        // -> [manuf <= 0x00000017]
[11:43:09.927]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[11:43:09.927]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[11:43:09.927]      isProduction = (version > 0);
[11:43:09.927]        // -> [isProduction <= 0x00000001]
[11:43:09.927]    </block>
[11:43:09.927]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[11:43:09.927]      // if-block "!isMSPM0G1X0X_G3X0X"
[11:43:09.927]        // =>  FALSE
[11:43:09.927]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[11:43:09.927]    </control>
[11:43:09.927]    <control if="continueId == 4" while="" timeout="0" info="">
[11:43:09.927]      // if-block "continueId == 4"
[11:43:09.927]        // =>  FALSE
[11:43:09.927]      // skip if-block "continueId == 4"
[11:43:09.927]    </control>
[11:43:09.927]    <control if="!isProduction" while="" timeout="0" info="">
[11:43:09.927]      // if-block "!isProduction"
[11:43:09.927]        // =>  FALSE
[11:43:09.927]      // skip if-block "!isProduction"
[11:43:09.927]    </control>
[11:43:09.927]  </sequence>
[11:43:09.927]  
[13:07:43.545]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:07:43.545]  
[13:07:43.545]  <debugvars>
[13:07:43.545]    // Pre-defined
[13:07:43.545]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:07:43.555]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:07:43.555]    __dp=0x00000000
[13:07:43.555]    __ap=0x00000000
[13:07:43.555]    __traceout=0x00000000      (Trace Disabled)
[13:07:43.556]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:07:43.556]    __FlashAddr=0x00000000
[13:07:43.556]    __FlashLen=0x00000000
[13:07:43.556]    __FlashArg=0x00000000
[13:07:43.556]    __FlashOp=0x00000000
[13:07:43.556]    __Result=0x00000000
[13:07:43.557]  </debugvars>
[13:07:43.557]  
[13:07:43.557]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:07:43.557]    <block atomic="false" info="">
[13:07:43.557]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:07:43.557]        // -> [isSWJ <= 0x00000001]
[13:07:43.557]      __var hasDormant = __protocol & 0x00020000;
[13:07:43.557]        // -> [hasDormant <= 0x00000000]
[13:07:43.557]      __var protType   = __protocol & 0x0000FFFF;
[13:07:43.557]        // -> [protType <= 0x00000002]
[13:07:43.557]    </block>
[13:07:43.557]    <control if="protType == 1" while="" timeout="0" info="">
[13:07:43.557]      // if-block "protType == 1"
[13:07:43.557]        // =>  FALSE
[13:07:43.557]      // skip if-block "protType == 1"
[13:07:43.557]    </control>
[13:07:43.557]    <control if="protType == 2" while="" timeout="0" info="">
[13:07:43.557]      // if-block "protType == 2"
[13:07:43.557]        // =>  TRUE
[13:07:43.557]      <control if="isSWJ" while="" timeout="0" info="">
[13:07:43.557]        // if-block "isSWJ"
[13:07:43.557]          // =>  TRUE
[13:07:43.557]        <control if="hasDormant" while="" timeout="0" info="">
[13:07:43.557]          // if-block "hasDormant"
[13:07:43.557]            // =>  FALSE
[13:07:43.557]          // skip if-block "hasDormant"
[13:07:43.557]        </control>
[13:07:43.557]        <control if="!hasDormant" while="" timeout="0" info="">
[13:07:43.557]          // if-block "!hasDormant"
[13:07:43.557]            // =>  TRUE
[13:07:43.557]          <block atomic="false" info="">
[13:07:43.557]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:07:43.557]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:07:43.557]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:07:43.566]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:07:43.566]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:07:43.566]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:07:43.566]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:07:43.566]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:07:43.566]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:07:43.566]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:07:43.566]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:07:43.566]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:07:43.566]          </block>
[13:07:43.566]          // end if-block "!hasDormant"
[13:07:43.566]        </control>
[13:07:43.566]        // end if-block "isSWJ"
[13:07:43.566]      </control>
[13:07:43.566]      <control if="!isSWJ" while="" timeout="0" info="">
[13:07:43.566]        // if-block "!isSWJ"
[13:07:43.566]          // =>  FALSE
[13:07:43.566]        // skip if-block "!isSWJ"
[13:07:43.566]      </control>
[13:07:43.566]      <block atomic="false" info="">
[13:07:43.566]        ReadDP(0x0);
[13:07:43.576]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:07:43.576]      </block>
[13:07:43.576]      // end if-block "protType == 2"
[13:07:43.576]    </control>
[13:07:43.576]  </sequence>
[13:07:43.576]  
[13:07:43.576]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:07:43.576]  
[13:07:43.576]  <debugvars>
[13:07:43.576]    // Pre-defined
[13:07:43.576]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:07:43.576]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:07:43.576]    __dp=0x00000000
[13:07:43.576]    __ap=0x00000000
[13:07:43.576]    __traceout=0x00000000      (Trace Disabled)
[13:07:43.576]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:07:43.576]    __FlashAddr=0x00000000
[13:07:43.576]    __FlashLen=0x00000000
[13:07:43.576]    __FlashArg=0x00000000
[13:07:43.576]    __FlashOp=0x00000000
[13:07:43.576]    __Result=0x00000000
[13:07:43.576]  </debugvars>
[13:07:43.576]  
[13:07:43.576]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:07:43.576]    <block atomic="false" info="">
[13:07:43.576]      __var SW_DP_ABORT       = 0x0;
[13:07:43.576]        // -> [SW_DP_ABORT <= 0x00000000]
[13:07:43.576]      __var DP_CTRL_STAT      = 0x4;
[13:07:43.576]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:07:43.576]      __var DP_SELECT         = 0x8;
[13:07:43.576]        // -> [DP_SELECT <= 0x00000008]
[13:07:43.576]      __var powered_down      = 0;
[13:07:43.576]        // -> [powered_down <= 0x00000000]
[13:07:43.576]      WriteDP(DP_SELECT, 0x00000000);
[13:07:43.576]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:07:43.576]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:07:43.586]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:07:43.586]        // -> [powered_down <= 0x00000001]
[13:07:43.586]    </block>
[13:07:43.586]    <control if="powered_down" while="" timeout="0" info="">
[13:07:43.587]      // if-block "powered_down"
[13:07:43.587]        // =>  TRUE
[13:07:43.587]      <block atomic="false" info="">
[13:07:43.587]        Message(0, "Debug/System power-up request sent");
[13:07:43.587]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:07:43.587]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:07:43.587]      </block>
[13:07:43.587]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:07:43.591]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:07:43.591]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:07:43.591]        // while-condition  =>  FALSE
[13:07:43.591]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:07:43.591]      </control>
[13:07:43.591]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:07:43.591]        // if-block "(__protocol & 0xFFFF) == 1"
[13:07:43.591]          // =>  FALSE
[13:07:43.594]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:07:43.594]      </control>
[13:07:43.594]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:07:43.594]        // if-block "(__protocol & 0xFFFF) == 2"
[13:07:43.594]          // =>  TRUE
[13:07:43.594]        <block atomic="false" info="">
[13:07:43.594]          Message(0, "executing SWD power up");
[13:07:43.596]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:07:43.596]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:07:43.596]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:07:43.596]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:07:43.596]        </block>
[13:07:43.596]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:07:43.596]      </control>
[13:07:43.596]      // end if-block "powered_down"
[13:07:43.596]    </control>
[13:07:43.596]    <block atomic="false" info="">
[13:07:43.596]      __var DEBUG_PORT_VAL    = 0;
[13:07:43.596]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:07:43.596]      __var ACCESS_POINT_VAL  = 0;
[13:07:43.596]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:07:43.596]      __ap = 1; 
[13:07:43.596]        // -> [__ap <= 0x00000001]
[13:07:43.596]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:07:43.607]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:07:43.607]      __ap = 4;
[13:07:43.608]        // -> [__ap <= 0x00000004]
[13:07:43.608]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:07:43.608]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:07:43.608]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:07:43.608]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:07:43.608]    </block>
[13:07:43.608]    <block atomic="false" info="">
[13:07:43.608]      __var nReset = 0x80;
[13:07:43.608]        // -> [nReset <= 0x00000080]
[13:07:43.608]      __var canReadPins = 0;
[13:07:43.608]        // -> [canReadPins <= 0x00000000]
[13:07:43.608]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:07:43.616]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:07:43.616]        // -> [canReadPins <= 0x00000001]
[13:07:43.616]    </block>
[13:07:43.616]    <control if="" while="1" timeout="200" info="">
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.616]      // while "1"  (timeout="200")
[13:07:43.616]      // while-condition  =>  TRUE
[13:07:43.626]      // while "1"  (timeout="200")
[13:07:43.626]      // while  =>  TIMEOUT
[13:07:43.626]      // end while "1"
[13:07:43.626]    </control>
[13:07:43.626]    <control if="canReadPins" while="" timeout="0" info="">
[13:07:43.626]      // if-block "canReadPins"
[13:07:43.626]        // =>  TRUE
[13:07:43.626]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:07:43.626]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:07:43.626]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:07:43.626]        // while-condition  =>  FALSE
[13:07:43.626]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:07:43.626]      </control>
[13:07:43.626]      // end if-block "canReadPins"
[13:07:43.626]    </control>
[13:07:43.626]    <control if="!canReadPins" while="" timeout="0" info="">
[13:07:43.626]      // if-block "!canReadPins"
[13:07:43.626]        // =>  FALSE
[13:07:43.626]      // skip if-block "!canReadPins"
[13:07:43.626]    </control>
[13:07:43.626]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:07:43.626]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:07:43.626]        // =>  TRUE
[13:07:43.626]      <block atomic="false" info="">
[13:07:43.626]        WriteAP(0x00, 0x190008);
[13:07:43.626]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:07:43.626]        WriteAP(0xF0, 0x01);
[13:07:43.626]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:07:43.636]      </block>
[13:07:43.636]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:07:43.636]    </control>
[13:07:43.636]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:07:43.636]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:07:43.636]        // =>  FALSE
[13:07:43.636]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:07:43.636]    </control>
[13:07:43.636]    <block atomic="false" info="">
[13:07:43.636]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:07:43.636]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:07:43.636]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:07:43.636]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:07:43.636]      __ap = 0; //lets make sure we reset the access point selection
[13:07:43.636]        // -> [__ap <= 0x00000000]
[13:07:43.636]    </block>
[13:07:43.636]  </sequence>
[13:07:43.636]  
[13:07:43.666]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:07:43.666]  
[13:07:43.666]  <debugvars>
[13:07:43.666]    // Pre-defined
[13:07:43.666]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:07:43.666]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:07:43.666]    __dp=0x00000000
[13:07:43.666]    __ap=0x00000000
[13:07:43.666]    __traceout=0x00000000      (Trace Disabled)
[13:07:43.666]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:07:43.666]    __FlashAddr=0x00000000
[13:07:43.666]    __FlashLen=0x00000000
[13:07:43.666]    __FlashArg=0x00000000
[13:07:43.666]    __FlashOp=0x00000000
[13:07:43.666]    __Result=0x00000000
[13:07:43.666]  </debugvars>
[13:07:43.666]  
[13:07:43.666]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:07:43.666]    <block atomic="false" info="">
[13:07:43.666]      __var deviceID = 0;
[13:07:43.666]        // -> [deviceID <= 0x00000000]
[13:07:43.666]      __var version = 0;
[13:07:43.666]        // -> [version <= 0x00000000]
[13:07:43.666]      __var partNum = 0;
[13:07:43.666]        // -> [partNum <= 0x00000000]
[13:07:43.666]      __var manuf = 0;
[13:07:43.666]        // -> [manuf <= 0x00000000]
[13:07:43.666]      __var isMSPM0G1X0X_G3X0X = 0;
[13:07:43.666]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:07:43.676]      __var isProduction = 0;
[13:07:43.676]        // -> [isProduction <= 0x00000000]
[13:07:43.676]      __var continueId = 0;
[13:07:43.676]        // -> [continueId <= 0x00000000]
[13:07:43.676]      deviceID =   Read32(0x41C40004);
[13:07:43.682]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:07:43.682]        // -> [deviceID <= 0x2BB8802F]
[13:07:43.682]      version = deviceID >> 28;
[13:07:43.682]        // -> [version <= 0x00000002]
[13:07:43.682]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:07:43.682]        // -> [partNum <= 0x0000BB88]
[13:07:43.682]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:07:43.682]        // -> [manuf <= 0x00000017]
[13:07:43.682]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:07:43.682]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:07:43.682]      isProduction = (version > 0);
[13:07:43.682]        // -> [isProduction <= 0x00000001]
[13:07:43.682]    </block>
[13:07:43.682]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:07:43.682]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:07:43.682]        // =>  FALSE
[13:07:43.685]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:07:43.685]    </control>
[13:07:43.685]    <control if="continueId == 4" while="" timeout="0" info="">
[13:07:43.685]      // if-block "continueId == 4"
[13:07:43.685]        // =>  FALSE
[13:07:43.685]      // skip if-block "continueId == 4"
[13:07:43.685]    </control>
[13:07:43.685]    <control if="!isProduction" while="" timeout="0" info="">
[13:07:43.685]      // if-block "!isProduction"
[13:07:43.685]        // =>  FALSE
[13:07:43.685]      // skip if-block "!isProduction"
[13:07:43.685]    </control>
[13:07:43.686]  </sequence>
[13:07:43.686]  
[13:09:16.307]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:09:16.307]  
[13:09:16.307]  <debugvars>
[13:09:16.307]    // Pre-defined
[13:09:16.307]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:09:16.307]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:09:16.307]    __dp=0x00000000
[13:09:16.307]    __ap=0x00000000
[13:09:16.307]    __traceout=0x00000000      (Trace Disabled)
[13:09:16.307]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:09:16.307]    __FlashAddr=0x00000000
[13:09:16.307]    __FlashLen=0x00000000
[13:09:16.307]    __FlashArg=0x00000000
[13:09:16.307]    __FlashOp=0x00000000
[13:09:16.307]    __Result=0x00000000
[13:09:16.307]  </debugvars>
[13:09:16.307]  
[13:09:16.307]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:09:16.307]    <block atomic="false" info="">
[13:09:16.307]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:09:16.307]        // -> [isSWJ <= 0x00000001]
[13:09:16.307]      __var hasDormant = __protocol & 0x00020000;
[13:09:16.307]        // -> [hasDormant <= 0x00000000]
[13:09:16.307]      __var protType   = __protocol & 0x0000FFFF;
[13:09:16.307]        // -> [protType <= 0x00000002]
[13:09:16.307]    </block>
[13:09:16.307]    <control if="protType == 1" while="" timeout="0" info="">
[13:09:16.307]      // if-block "protType == 1"
[13:09:16.307]        // =>  FALSE
[13:09:16.307]      // skip if-block "protType == 1"
[13:09:16.307]    </control>
[13:09:16.307]    <control if="protType == 2" while="" timeout="0" info="">
[13:09:16.307]      // if-block "protType == 2"
[13:09:16.307]        // =>  TRUE
[13:09:16.307]      <control if="isSWJ" while="" timeout="0" info="">
[13:09:16.307]        // if-block "isSWJ"
[13:09:16.307]          // =>  TRUE
[13:09:16.307]        <control if="hasDormant" while="" timeout="0" info="">
[13:09:16.307]          // if-block "hasDormant"
[13:09:16.307]            // =>  FALSE
[13:09:16.307]          // skip if-block "hasDormant"
[13:09:16.307]        </control>
[13:09:16.307]        <control if="!hasDormant" while="" timeout="0" info="">
[13:09:16.307]          // if-block "!hasDormant"
[13:09:16.307]            // =>  TRUE
[13:09:16.307]          <block atomic="false" info="">
[13:09:16.307]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:09:16.319]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:09:16.319]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:09:16.319]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:09:16.319]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:09:16.319]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:09:16.319]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:09:16.319]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:09:16.319]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:09:16.319]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:09:16.319]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:09:16.319]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:09:16.319]          </block>
[13:09:16.319]          // end if-block "!hasDormant"
[13:09:16.319]        </control>
[13:09:16.319]        // end if-block "isSWJ"
[13:09:16.319]      </control>
[13:09:16.319]      <control if="!isSWJ" while="" timeout="0" info="">
[13:09:16.319]        // if-block "!isSWJ"
[13:09:16.319]          // =>  FALSE
[13:09:16.328]        // skip if-block "!isSWJ"
[13:09:16.328]      </control>
[13:09:16.328]      <block atomic="false" info="">
[13:09:16.328]        ReadDP(0x0);
[13:09:16.328]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:09:16.328]      </block>
[13:09:16.328]      // end if-block "protType == 2"
[13:09:16.328]    </control>
[13:09:16.328]  </sequence>
[13:09:16.328]  
[13:09:16.328]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:09:16.328]  
[13:09:16.328]  <debugvars>
[13:09:16.328]    // Pre-defined
[13:09:16.328]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:09:16.328]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:09:16.328]    __dp=0x00000000
[13:09:16.328]    __ap=0x00000000
[13:09:16.328]    __traceout=0x00000000      (Trace Disabled)
[13:09:16.328]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:09:16.328]    __FlashAddr=0x00000000
[13:09:16.328]    __FlashLen=0x00000000
[13:09:16.328]    __FlashArg=0x00000000
[13:09:16.328]    __FlashOp=0x00000000
[13:09:16.328]    __Result=0x00000000
[13:09:16.328]  </debugvars>
[13:09:16.328]  
[13:09:16.328]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:09:16.328]    <block atomic="false" info="">
[13:09:16.328]      __var SW_DP_ABORT       = 0x0;
[13:09:16.328]        // -> [SW_DP_ABORT <= 0x00000000]
[13:09:16.328]      __var DP_CTRL_STAT      = 0x4;
[13:09:16.328]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:09:16.328]      __var DP_SELECT         = 0x8;
[13:09:16.328]        // -> [DP_SELECT <= 0x00000008]
[13:09:16.328]      __var powered_down      = 0;
[13:09:16.328]        // -> [powered_down <= 0x00000000]
[13:09:16.328]      WriteDP(DP_SELECT, 0x00000000);
[13:09:16.338]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:09:16.338]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:09:16.340]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:09:16.340]        // -> [powered_down <= 0x00000001]
[13:09:16.340]    </block>
[13:09:16.340]    <control if="powered_down" while="" timeout="0" info="">
[13:09:16.340]      // if-block "powered_down"
[13:09:16.340]        // =>  TRUE
[13:09:16.340]      <block atomic="false" info="">
[13:09:16.340]        Message(0, "Debug/System power-up request sent");
[13:09:16.340]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:09:16.346]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:09:16.346]      </block>
[13:09:16.346]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:09:16.346]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:09:16.348]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:09:16.348]        // while-condition  =>  FALSE
[13:09:16.348]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:09:16.348]      </control>
[13:09:16.348]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:09:16.348]        // if-block "(__protocol & 0xFFFF) == 1"
[13:09:16.348]          // =>  FALSE
[13:09:16.348]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:09:16.348]      </control>
[13:09:16.348]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:09:16.348]        // if-block "(__protocol & 0xFFFF) == 2"
[13:09:16.348]          // =>  TRUE
[13:09:16.348]        <block atomic="false" info="">
[13:09:16.348]          Message(0, "executing SWD power up");
[13:09:16.348]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:09:16.348]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:09:16.348]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:09:16.354]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:09:16.354]        </block>
[13:09:16.354]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:09:16.354]      </control>
[13:09:16.354]      // end if-block "powered_down"
[13:09:16.354]    </control>
[13:09:16.354]    <block atomic="false" info="">
[13:09:16.354]      __var DEBUG_PORT_VAL    = 0;
[13:09:16.354]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:09:16.354]      __var ACCESS_POINT_VAL  = 0;
[13:09:16.354]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:09:16.354]      __ap = 1; 
[13:09:16.354]        // -> [__ap <= 0x00000001]
[13:09:16.354]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:09:16.358]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:09:16.358]      __ap = 4;
[13:09:16.358]        // -> [__ap <= 0x00000004]
[13:09:16.358]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:09:16.358]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:09:16.358]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:09:16.358]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:09:16.358]    </block>
[13:09:16.358]    <block atomic="false" info="">
[13:09:16.358]      __var nReset = 0x80;
[13:09:16.358]        // -> [nReset <= 0x00000080]
[13:09:16.358]      __var canReadPins = 0;
[13:09:16.358]        // -> [canReadPins <= 0x00000000]
[13:09:16.358]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:09:16.370]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:09:16.370]        // -> [canReadPins <= 0x00000001]
[13:09:16.370]    </block>
[13:09:16.370]    <control if="" while="1" timeout="200" info="">
[13:09:16.370]      // while "1"  (timeout="200")
[13:09:16.370]      // while-condition  =>  TRUE
[13:09:16.370]      // while "1"  (timeout="200")
[13:09:16.370]      // while-condition  =>  TRUE
[13:09:16.370]      // while "1"  (timeout="200")
[13:09:16.370]      // while-condition  =>  TRUE
[13:09:16.370]      // while "1"  (timeout="200")
[13:09:16.371]      // while-condition  =>  TRUE
[13:09:16.371]      // while "1"  (timeout="200")
[13:09:16.371]      // while-condition  =>  TRUE
[13:09:16.371]      // while "1"  (timeout="200")
[13:09:16.371]      // while-condition  =>  TRUE
[13:09:16.371]      // while "1"  (timeout="200")
[13:09:16.371]      // while-condition  =>  TRUE
[13:09:16.371]      // while "1"  (timeout="200")
[13:09:16.371]      // while-condition  =>  TRUE
[13:09:16.371]      // while "1"  (timeout="200")
[13:09:16.371]      // while-condition  =>  TRUE
[13:09:16.371]      // while "1"  (timeout="200")
[13:09:16.371]      // while-condition  =>  TRUE
[13:09:16.371]      // while "1"  (timeout="200")
[13:09:16.371]      // while-condition  =>  TRUE
[13:09:16.371]      // while "1"  (timeout="200")
[13:09:16.371]      // while-condition  =>  TRUE
[13:09:16.372]      // while "1"  (timeout="200")
[13:09:16.372]      // while-condition  =>  TRUE
[13:09:16.372]      // while "1"  (timeout="200")
[13:09:16.372]      // while-condition  =>  TRUE
[13:09:16.372]      // while "1"  (timeout="200")
[13:09:16.372]      // while-condition  =>  TRUE
[13:09:16.372]      // while "1"  (timeout="200")
[13:09:16.372]      // while-condition  =>  TRUE
[13:09:16.372]      // while "1"  (timeout="200")
[13:09:16.372]      // while-condition  =>  TRUE
[13:09:16.372]      // while "1"  (timeout="200")
[13:09:16.372]      // while-condition  =>  TRUE
[13:09:16.372]      // while "1"  (timeout="200")
[13:09:16.372]      // while-condition  =>  TRUE
[13:09:16.372]      // while "1"  (timeout="200")
[13:09:16.372]      // while-condition  =>  TRUE
[13:09:16.372]      // while "1"  (timeout="200")
[13:09:16.374]      // while-condition  =>  TRUE
[13:09:16.374]      // while "1"  (timeout="200")
[13:09:16.374]      // while-condition  =>  TRUE
[13:09:16.374]      // while "1"  (timeout="200")
[13:09:16.374]      // while-condition  =>  TRUE
[13:09:16.374]      // while "1"  (timeout="200")
[13:09:16.374]      // while-condition  =>  TRUE
[13:09:16.374]      // while "1"  (timeout="200")
[13:09:16.374]      // while-condition  =>  TRUE
[13:09:16.374]      // while "1"  (timeout="200")
[13:09:16.374]      // while-condition  =>  TRUE
[13:09:16.374]      // while "1"  (timeout="200")
[13:09:16.374]      // while-condition  =>  TRUE
[13:09:16.374]      // while "1"  (timeout="200")
[13:09:16.374]      // while-condition  =>  TRUE
[13:09:16.374]      // while "1"  (timeout="200")
[13:09:16.374]      // while-condition  =>  TRUE
[13:09:16.374]      // while "1"  (timeout="200")
[13:09:16.374]      // while-condition  =>  TRUE
[13:09:16.374]      // while "1"  (timeout="200")
[13:09:16.374]      // while-condition  =>  TRUE
[13:09:16.376]      // while "1"  (timeout="200")
[13:09:16.376]      // while  =>  TIMEOUT
[13:09:16.376]      // end while "1"
[13:09:16.376]    </control>
[13:09:16.376]    <control if="canReadPins" while="" timeout="0" info="">
[13:09:16.376]      // if-block "canReadPins"
[13:09:16.376]        // =>  TRUE
[13:09:16.376]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:09:16.376]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:09:16.379]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:09:16.379]        // while-condition  =>  FALSE
[13:09:16.379]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:09:16.379]      </control>
[13:09:16.379]      // end if-block "canReadPins"
[13:09:16.380]    </control>
[13:09:16.380]    <control if="!canReadPins" while="" timeout="0" info="">
[13:09:16.380]      // if-block "!canReadPins"
[13:09:16.380]        // =>  FALSE
[13:09:16.380]      // skip if-block "!canReadPins"
[13:09:16.380]    </control>
[13:09:16.380]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:09:16.380]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:09:16.380]        // =>  TRUE
[13:09:16.380]      <block atomic="false" info="">
[13:09:16.381]        WriteAP(0x00, 0x190008);
[13:09:16.382]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:09:16.382]        WriteAP(0xF0, 0x01);
[13:09:16.386]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:09:16.386]      </block>
[13:09:16.386]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:09:16.386]    </control>
[13:09:16.386]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:09:16.386]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:09:16.386]        // =>  FALSE
[13:09:16.386]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:09:16.387]    </control>
[13:09:16.387]    <block atomic="false" info="">
[13:09:16.387]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:09:16.390]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:09:16.391]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:09:16.391]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:09:16.392]      __ap = 0; //lets make sure we reset the access point selection
[13:09:16.392]        // -> [__ap <= 0x00000000]
[13:09:16.392]    </block>
[13:09:16.392]  </sequence>
[13:09:16.392]  
[13:09:16.422]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:09:16.422]  
[13:09:16.422]  <debugvars>
[13:09:16.422]    // Pre-defined
[13:09:16.422]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:09:16.422]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:09:16.422]    __dp=0x00000000
[13:09:16.422]    __ap=0x00000000
[13:09:16.422]    __traceout=0x00000000      (Trace Disabled)
[13:09:16.422]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:09:16.422]    __FlashAddr=0x00000000
[13:09:16.422]    __FlashLen=0x00000000
[13:09:16.422]    __FlashArg=0x00000000
[13:09:16.422]    __FlashOp=0x00000000
[13:09:16.422]    __Result=0x00000000
[13:09:16.422]  </debugvars>
[13:09:16.422]  
[13:09:16.422]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:09:16.422]    <block atomic="false" info="">
[13:09:16.422]      __var deviceID = 0;
[13:09:16.422]        // -> [deviceID <= 0x00000000]
[13:09:16.422]      __var version = 0;
[13:09:16.422]        // -> [version <= 0x00000000]
[13:09:16.422]      __var partNum = 0;
[13:09:16.422]        // -> [partNum <= 0x00000000]
[13:09:16.422]      __var manuf = 0;
[13:09:16.422]        // -> [manuf <= 0x00000000]
[13:09:16.422]      __var isMSPM0G1X0X_G3X0X = 0;
[13:09:16.422]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:09:16.422]      __var isProduction = 0;
[13:09:16.422]        // -> [isProduction <= 0x00000000]
[13:09:16.422]      __var continueId = 0;
[13:09:16.422]        // -> [continueId <= 0x00000000]
[13:09:16.422]      deviceID =   Read32(0x41C40004);
[13:09:16.433]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:09:16.433]        // -> [deviceID <= 0x2BB8802F]
[13:09:16.433]      version = deviceID >> 28;
[13:09:16.433]        // -> [version <= 0x00000002]
[13:09:16.433]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:09:16.433]        // -> [partNum <= 0x0000BB88]
[13:09:16.433]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:09:16.433]        // -> [manuf <= 0x00000017]
[13:09:16.433]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:09:16.433]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:09:16.433]      isProduction = (version > 0);
[13:09:16.433]        // -> [isProduction <= 0x00000001]
[13:09:16.433]    </block>
[13:09:16.433]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:09:16.433]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:09:16.433]        // =>  FALSE
[13:09:16.433]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:09:16.433]    </control>
[13:09:16.433]    <control if="continueId == 4" while="" timeout="0" info="">
[13:09:16.433]      // if-block "continueId == 4"
[13:09:16.433]        // =>  FALSE
[13:09:16.433]      // skip if-block "continueId == 4"
[13:09:16.433]    </control>
[13:09:16.433]    <control if="!isProduction" while="" timeout="0" info="">
[13:09:16.433]      // if-block "!isProduction"
[13:09:16.433]        // =>  FALSE
[13:09:16.433]      // skip if-block "!isProduction"
[13:09:16.433]    </control>
[13:09:16.433]  </sequence>
[13:09:16.433]  
[13:24:07.904]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:24:07.904]  
[13:24:07.919]  <debugvars>
[13:24:07.919]    // Pre-defined
[13:24:07.919]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:24:07.919]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:24:07.919]    __dp=0x00000000
[13:24:07.919]    __ap=0x00000000
[13:24:07.919]    __traceout=0x00000000      (Trace Disabled)
[13:24:07.919]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:24:07.919]    __FlashAddr=0x00000000
[13:24:07.920]    __FlashLen=0x00000000
[13:24:07.920]    __FlashArg=0x00000000
[13:24:07.920]    __FlashOp=0x00000000
[13:24:07.920]    __Result=0x00000000
[13:24:07.920]  </debugvars>
[13:24:07.920]  
[13:24:07.921]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:24:07.921]    <block atomic="false" info="">
[13:24:07.921]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:24:07.921]        // -> [isSWJ <= 0x00000001]
[13:24:07.921]      __var hasDormant = __protocol & 0x00020000;
[13:24:07.921]        // -> [hasDormant <= 0x00000000]
[13:24:07.921]      __var protType   = __protocol & 0x0000FFFF;
[13:24:07.921]        // -> [protType <= 0x00000002]
[13:24:07.921]    </block>
[13:24:07.921]    <control if="protType == 1" while="" timeout="0" info="">
[13:24:07.921]      // if-block "protType == 1"
[13:24:07.921]        // =>  FALSE
[13:24:07.921]      // skip if-block "protType == 1"
[13:24:07.921]    </control>
[13:24:07.921]    <control if="protType == 2" while="" timeout="0" info="">
[13:24:07.921]      // if-block "protType == 2"
[13:24:07.921]        // =>  TRUE
[13:24:07.921]      <control if="isSWJ" while="" timeout="0" info="">
[13:24:07.921]        // if-block "isSWJ"
[13:24:07.921]          // =>  TRUE
[13:24:07.921]        <control if="hasDormant" while="" timeout="0" info="">
[13:24:07.921]          // if-block "hasDormant"
[13:24:07.921]            // =>  FALSE
[13:24:07.921]          // skip if-block "hasDormant"
[13:24:07.921]        </control>
[13:24:07.921]        <control if="!hasDormant" while="" timeout="0" info="">
[13:24:07.921]          // if-block "!hasDormant"
[13:24:07.924]            // =>  TRUE
[13:24:07.924]          <block atomic="false" info="">
[13:24:07.924]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:24:07.924]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:24:07.924]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:24:07.924]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:24:07.924]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:24:07.930]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:24:07.930]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:24:07.934]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:24:07.934]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:24:07.934]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:24:07.934]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:24:07.944]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:24:07.944]          </block>
[13:24:07.944]          // end if-block "!hasDormant"
[13:24:07.944]        </control>
[13:24:07.944]        // end if-block "isSWJ"
[13:24:07.944]      </control>
[13:24:07.944]      <control if="!isSWJ" while="" timeout="0" info="">
[13:24:07.944]        // if-block "!isSWJ"
[13:24:07.944]          // =>  FALSE
[13:24:07.944]        // skip if-block "!isSWJ"
[13:24:07.944]      </control>
[13:24:07.944]      <block atomic="false" info="">
[13:24:07.944]        ReadDP(0x0);
[13:24:07.944]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:24:07.944]      </block>
[13:24:07.944]      // end if-block "protType == 2"
[13:24:07.951]    </control>
[13:24:07.951]  </sequence>
[13:24:07.951]  
[13:24:07.954]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:24:07.954]  
[13:24:07.954]  <debugvars>
[13:24:07.954]    // Pre-defined
[13:24:07.954]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:24:07.954]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:24:07.954]    __dp=0x00000000
[13:24:07.954]    __ap=0x00000000
[13:24:07.954]    __traceout=0x00000000      (Trace Disabled)
[13:24:07.954]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:24:07.954]    __FlashAddr=0x00000000
[13:24:07.954]    __FlashLen=0x00000000
[13:24:07.954]    __FlashArg=0x00000000
[13:24:07.954]    __FlashOp=0x00000000
[13:24:07.954]    __Result=0x00000000
[13:24:07.954]  </debugvars>
[13:24:07.954]  
[13:24:07.954]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:24:07.954]    <block atomic="false" info="">
[13:24:07.954]      __var SW_DP_ABORT       = 0x0;
[13:24:07.954]        // -> [SW_DP_ABORT <= 0x00000000]
[13:24:07.954]      __var DP_CTRL_STAT      = 0x4;
[13:24:07.954]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:24:07.954]      __var DP_SELECT         = 0x8;
[13:24:07.954]        // -> [DP_SELECT <= 0x00000008]
[13:24:07.954]      __var powered_down      = 0;
[13:24:07.954]        // -> [powered_down <= 0x00000000]
[13:24:07.954]      WriteDP(DP_SELECT, 0x00000000);
[13:24:07.954]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:24:07.954]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:24:07.964]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:24:07.964]        // -> [powered_down <= 0x00000001]
[13:24:07.964]    </block>
[13:24:07.964]    <control if="powered_down" while="" timeout="0" info="">
[13:24:07.964]      // if-block "powered_down"
[13:24:07.964]        // =>  TRUE
[13:24:07.964]      <block atomic="false" info="">
[13:24:07.964]        Message(0, "Debug/System power-up request sent");
[13:24:07.964]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:24:07.974]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:24:07.977]      </block>
[13:24:07.977]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:24:07.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:24:07.977]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:24:07.977]        // while-condition  =>  FALSE
[13:24:07.977]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:24:07.977]      </control>
[13:24:07.977]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:24:07.977]        // if-block "(__protocol & 0xFFFF) == 1"
[13:24:07.977]          // =>  FALSE
[13:24:07.977]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:24:07.981]      </control>
[13:24:07.981]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:24:07.981]        // if-block "(__protocol & 0xFFFF) == 2"
[13:24:07.981]          // =>  TRUE
[13:24:07.981]        <block atomic="false" info="">
[13:24:07.981]          Message(0, "executing SWD power up");
[13:24:07.981]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:24:07.984]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:24:07.984]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:24:07.984]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:24:07.984]        </block>
[13:24:07.984]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:24:07.984]      </control>
[13:24:07.984]      // end if-block "powered_down"
[13:24:07.984]    </control>
[13:24:07.984]    <block atomic="false" info="">
[13:24:07.984]      __var DEBUG_PORT_VAL    = 0;
[13:24:07.984]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:24:07.984]      __var ACCESS_POINT_VAL  = 0;
[13:24:07.984]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:24:07.984]      __ap = 1; 
[13:24:07.984]        // -> [__ap <= 0x00000001]
[13:24:07.984]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:24:07.992]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:24:07.992]      __ap = 4;
[13:24:07.992]        // -> [__ap <= 0x00000004]
[13:24:07.992]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:24:07.994]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:24:07.994]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:24:07.994]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:24:07.994]    </block>
[13:24:07.994]    <block atomic="false" info="">
[13:24:07.994]      __var nReset = 0x80;
[13:24:07.994]        // -> [nReset <= 0x00000080]
[13:24:07.994]      __var canReadPins = 0;
[13:24:07.994]        // -> [canReadPins <= 0x00000000]
[13:24:07.994]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:24:08.004]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:24:08.004]        // -> [canReadPins <= 0x00000001]
[13:24:08.004]    </block>
[13:24:08.004]    <control if="" while="1" timeout="200" info="">
[13:24:08.004]      // while "1"  (timeout="200")
[13:24:08.004]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.005]      // while-condition  =>  TRUE
[13:24:08.005]      // while "1"  (timeout="200")
[13:24:08.012]      // while-condition  =>  TRUE
[13:24:08.012]      // while "1"  (timeout="200")
[13:24:08.012]      // while-condition  =>  TRUE
[13:24:08.012]      // while "1"  (timeout="200")
[13:24:08.012]      // while-condition  =>  TRUE
[13:24:08.012]      // while "1"  (timeout="200")
[13:24:08.012]      // while-condition  =>  TRUE
[13:24:08.012]      // while "1"  (timeout="200")
[13:24:08.012]      // while-condition  =>  TRUE
[13:24:08.012]      // while "1"  (timeout="200")
[13:24:08.012]      // while-condition  =>  TRUE
[13:24:08.012]      // while "1"  (timeout="200")
[13:24:08.012]      // while-condition  =>  TRUE
[13:24:08.012]      // while "1"  (timeout="200")
[13:24:08.012]      // while-condition  =>  TRUE
[13:24:08.012]      // while "1"  (timeout="200")
[13:24:08.012]      // while-condition  =>  TRUE
[13:24:08.012]      // while "1"  (timeout="200")
[13:24:08.012]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.014]      // while-condition  =>  TRUE
[13:24:08.014]      // while "1"  (timeout="200")
[13:24:08.022]      // while-condition  =>  TRUE
[13:24:08.022]      // while "1"  (timeout="200")
[13:24:08.022]      // while  =>  TIMEOUT
[13:24:08.022]      // end while "1"
[13:24:08.022]    </control>
[13:24:08.022]    <control if="canReadPins" while="" timeout="0" info="">
[13:24:08.022]      // if-block "canReadPins"
[13:24:08.022]        // =>  TRUE
[13:24:08.022]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:24:08.022]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:24:08.024]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:24:08.024]        // while-condition  =>  FALSE
[13:24:08.024]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:24:08.024]      </control>
[13:24:08.025]      // end if-block "canReadPins"
[13:24:08.025]    </control>
[13:24:08.025]    <control if="!canReadPins" while="" timeout="0" info="">
[13:24:08.025]      // if-block "!canReadPins"
[13:24:08.025]        // =>  FALSE
[13:24:08.025]      // skip if-block "!canReadPins"
[13:24:08.025]    </control>
[13:24:08.025]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:24:08.025]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:24:08.025]        // =>  TRUE
[13:24:08.025]      <block atomic="false" info="">
[13:24:08.025]        WriteAP(0x00, 0x190008);
[13:24:08.025]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:24:08.025]        WriteAP(0xF0, 0x01);
[13:24:08.034]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:24:08.034]      </block>
[13:24:08.034]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:24:08.034]    </control>
[13:24:08.034]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:24:08.034]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:24:08.034]        // =>  FALSE
[13:24:08.035]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:24:08.035]    </control>
[13:24:08.035]    <block atomic="false" info="">
[13:24:08.035]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:24:08.044]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:24:08.044]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:24:08.044]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:24:08.049]      __ap = 0; //lets make sure we reset the access point selection
[13:24:08.049]        // -> [__ap <= 0x00000000]
[13:24:08.049]    </block>
[13:24:08.049]  </sequence>
[13:24:08.049]  
[13:24:08.084]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:24:08.084]  
[13:24:08.084]  <debugvars>
[13:24:08.084]    // Pre-defined
[13:24:08.084]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:24:08.084]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:24:08.084]    __dp=0x00000000
[13:24:08.084]    __ap=0x00000000
[13:24:08.084]    __traceout=0x00000000      (Trace Disabled)
[13:24:08.084]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:24:08.084]    __FlashAddr=0x00000000
[13:24:08.084]    __FlashLen=0x00000000
[13:24:08.084]    __FlashArg=0x00000000
[13:24:08.084]    __FlashOp=0x00000000
[13:24:08.084]    __Result=0x00000000
[13:24:08.084]  </debugvars>
[13:24:08.084]  
[13:24:08.084]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:24:08.084]    <block atomic="false" info="">
[13:24:08.084]      __var deviceID = 0;
[13:24:08.084]        // -> [deviceID <= 0x00000000]
[13:24:08.084]      __var version = 0;
[13:24:08.084]        // -> [version <= 0x00000000]
[13:24:08.084]      __var partNum = 0;
[13:24:08.084]        // -> [partNum <= 0x00000000]
[13:24:08.084]      __var manuf = 0;
[13:24:08.084]        // -> [manuf <= 0x00000000]
[13:24:08.084]      __var isMSPM0G1X0X_G3X0X = 0;
[13:24:08.084]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:24:08.084]      __var isProduction = 0;
[13:24:08.084]        // -> [isProduction <= 0x00000000]
[13:24:08.084]      __var continueId = 0;
[13:24:08.084]        // -> [continueId <= 0x00000000]
[13:24:08.084]      deviceID =   Read32(0x41C40004);
[13:24:08.094]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:24:08.094]        // -> [deviceID <= 0x2BB8802F]
[13:24:08.094]      version = deviceID >> 28;
[13:24:08.094]        // -> [version <= 0x00000002]
[13:24:08.094]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:24:08.094]        // -> [partNum <= 0x0000BB88]
[13:24:08.094]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:24:08.094]        // -> [manuf <= 0x00000017]
[13:24:08.094]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:24:08.094]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:24:08.094]      isProduction = (version > 0);
[13:24:08.094]        // -> [isProduction <= 0x00000001]
[13:24:08.094]    </block>
[13:24:08.094]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:24:08.094]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:24:08.094]        // =>  FALSE
[13:24:08.094]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:24:08.094]    </control>
[13:24:08.094]    <control if="continueId == 4" while="" timeout="0" info="">
[13:24:08.094]      // if-block "continueId == 4"
[13:24:08.094]        // =>  FALSE
[13:24:08.094]      // skip if-block "continueId == 4"
[13:24:08.094]    </control>
[13:24:08.094]    <control if="!isProduction" while="" timeout="0" info="">
[13:24:08.094]      // if-block "!isProduction"
[13:24:08.094]        // =>  FALSE
[13:24:08.094]      // skip if-block "!isProduction"
[13:24:08.094]    </control>
[13:24:08.102]  </sequence>
[13:24:08.102]  
[13:28:32.322]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:28:32.322]  
[13:28:32.332]  <debugvars>
[13:28:32.332]    // Pre-defined
[13:28:32.332]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:28:32.332]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:28:32.332]    __dp=0x00000000
[13:28:32.332]    __ap=0x00000000
[13:28:32.332]    __traceout=0x00000000      (Trace Disabled)
[13:28:32.332]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:28:32.332]    __FlashAddr=0x00000000
[13:28:32.332]    __FlashLen=0x00000000
[13:28:32.332]    __FlashArg=0x00000000
[13:28:32.332]    __FlashOp=0x00000000
[13:28:32.332]    __Result=0x00000000
[13:28:32.332]  </debugvars>
[13:28:32.332]  
[13:28:32.332]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:28:32.332]    <block atomic="false" info="">
[13:28:32.332]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:28:32.332]        // -> [isSWJ <= 0x00000001]
[13:28:32.332]      __var hasDormant = __protocol & 0x00020000;
[13:28:32.332]        // -> [hasDormant <= 0x00000000]
[13:28:32.332]      __var protType   = __protocol & 0x0000FFFF;
[13:28:32.332]        // -> [protType <= 0x00000002]
[13:28:32.332]    </block>
[13:28:32.332]    <control if="protType == 1" while="" timeout="0" info="">
[13:28:32.335]      // if-block "protType == 1"
[13:28:32.335]        // =>  FALSE
[13:28:32.335]      // skip if-block "protType == 1"
[13:28:32.335]    </control>
[13:28:32.335]    <control if="protType == 2" while="" timeout="0" info="">
[13:28:32.335]      // if-block "protType == 2"
[13:28:32.335]        // =>  TRUE
[13:28:32.335]      <control if="isSWJ" while="" timeout="0" info="">
[13:28:32.335]        // if-block "isSWJ"
[13:28:32.335]          // =>  TRUE
[13:28:32.335]        <control if="hasDormant" while="" timeout="0" info="">
[13:28:32.335]          // if-block "hasDormant"
[13:28:32.335]            // =>  FALSE
[13:28:32.335]          // skip if-block "hasDormant"
[13:28:32.335]        </control>
[13:28:32.335]        <control if="!hasDormant" while="" timeout="0" info="">
[13:28:32.335]          // if-block "!hasDormant"
[13:28:32.335]            // =>  TRUE
[13:28:32.335]          <block atomic="false" info="">
[13:28:32.335]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:28:32.335]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:28:32.335]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:28:32.339]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:28:32.339]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:28:32.343]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:28:32.343]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:28:32.347]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:28:32.347]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:28:32.349]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:28:32.349]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:28:32.351]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:28:32.351]          </block>
[13:28:32.351]          // end if-block "!hasDormant"
[13:28:32.351]        </control>
[13:28:32.351]        // end if-block "isSWJ"
[13:28:32.351]      </control>
[13:28:32.351]      <control if="!isSWJ" while="" timeout="0" info="">
[13:28:32.351]        // if-block "!isSWJ"
[13:28:32.351]          // =>  FALSE
[13:28:32.351]        // skip if-block "!isSWJ"
[13:28:32.351]      </control>
[13:28:32.351]      <block atomic="false" info="">
[13:28:32.351]        ReadDP(0x0);
[13:28:32.355]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:28:32.355]      </block>
[13:28:32.355]      // end if-block "protType == 2"
[13:28:32.355]    </control>
[13:28:32.355]  </sequence>
[13:28:32.355]  
[13:28:32.369]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:28:32.369]  
[13:28:32.369]  <debugvars>
[13:28:32.369]    // Pre-defined
[13:28:32.369]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:28:32.369]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:28:32.369]    __dp=0x00000000
[13:28:32.369]    __ap=0x00000000
[13:28:32.369]    __traceout=0x00000000      (Trace Disabled)
[13:28:32.369]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:28:32.369]    __FlashAddr=0x00000000
[13:28:32.369]    __FlashLen=0x00000000
[13:28:32.369]    __FlashArg=0x00000000
[13:28:32.369]    __FlashOp=0x00000000
[13:28:32.372]    __Result=0x00000000
[13:28:32.372]  </debugvars>
[13:28:32.372]  
[13:28:32.372]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:28:32.372]    <block atomic="false" info="">
[13:28:32.372]      __var SW_DP_ABORT       = 0x0;
[13:28:32.372]        // -> [SW_DP_ABORT <= 0x00000000]
[13:28:32.372]      __var DP_CTRL_STAT      = 0x4;
[13:28:32.372]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:28:32.372]      __var DP_SELECT         = 0x8;
[13:28:32.372]        // -> [DP_SELECT <= 0x00000008]
[13:28:32.372]      __var powered_down      = 0;
[13:28:32.372]        // -> [powered_down <= 0x00000000]
[13:28:32.372]      WriteDP(DP_SELECT, 0x00000000);
[13:28:32.381]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:28:32.381]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:28:32.381]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:28:32.381]        // -> [powered_down <= 0x00000001]
[13:28:32.381]    </block>
[13:28:32.381]    <control if="powered_down" while="" timeout="0" info="">
[13:28:32.381]      // if-block "powered_down"
[13:28:32.381]        // =>  TRUE
[13:28:32.381]      <block atomic="false" info="">
[13:28:32.384]        Message(0, "Debug/System power-up request sent");
[13:28:32.385]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:28:32.385]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:28:32.385]      </block>
[13:28:32.385]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:28:32.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:28:32.388]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:28:32.388]        // while-condition  =>  FALSE
[13:28:32.388]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:28:32.388]      </control>
[13:28:32.389]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:28:32.389]        // if-block "(__protocol & 0xFFFF) == 1"
[13:28:32.389]          // =>  FALSE
[13:28:32.389]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:28:32.389]      </control>
[13:28:32.389]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:28:32.389]        // if-block "(__protocol & 0xFFFF) == 2"
[13:28:32.389]          // =>  TRUE
[13:28:32.389]        <block atomic="false" info="">
[13:28:32.389]          Message(0, "executing SWD power up");
[13:28:32.389]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:28:32.392]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:28:32.392]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:28:32.392]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:28:32.392]        </block>
[13:28:32.392]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:28:32.396]      </control>
[13:28:32.396]      // end if-block "powered_down"
[13:28:32.396]    </control>
[13:28:32.396]    <block atomic="false" info="">
[13:28:32.396]      __var DEBUG_PORT_VAL    = 0;
[13:28:32.396]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:28:32.396]      __var ACCESS_POINT_VAL  = 0;
[13:28:32.396]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:28:32.396]      __ap = 1; 
[13:28:32.396]        // -> [__ap <= 0x00000001]
[13:28:32.396]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:28:32.400]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:28:32.400]      __ap = 4;
[13:28:32.400]        // -> [__ap <= 0x00000004]
[13:28:32.404]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:28:32.404]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:28:32.404]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:28:32.404]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:28:32.409]    </block>
[13:28:32.409]    <block atomic="false" info="">
[13:28:32.409]      __var nReset = 0x80;
[13:28:32.409]        // -> [nReset <= 0x00000080]
[13:28:32.409]      __var canReadPins = 0;
[13:28:32.410]        // -> [canReadPins <= 0x00000000]
[13:28:32.410]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:28:32.412]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:28:32.412]        // -> [canReadPins <= 0x00000001]
[13:28:32.412]    </block>
[13:28:32.412]    <control if="" while="1" timeout="200" info="">
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.412]      // while-condition  =>  TRUE
[13:28:32.412]      // while "1"  (timeout="200")
[13:28:32.416]      // while-condition  =>  TRUE
[13:28:32.416]      // while "1"  (timeout="200")
[13:28:32.416]      // while-condition  =>  TRUE
[13:28:32.416]      // while "1"  (timeout="200")
[13:28:32.416]      // while-condition  =>  TRUE
[13:28:32.416]      // while "1"  (timeout="200")
[13:28:32.416]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.417]      // while "1"  (timeout="200")
[13:28:32.417]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.420]      // while "1"  (timeout="200")
[13:28:32.420]      // while-condition  =>  TRUE
[13:28:32.424]      // while "1"  (timeout="200")
[13:28:32.424]      // while  =>  TIMEOUT
[13:28:32.424]      // end while "1"
[13:28:32.424]    </control>
[13:28:32.424]    <control if="canReadPins" while="" timeout="0" info="">
[13:28:32.424]      // if-block "canReadPins"
[13:28:32.424]        // =>  TRUE
[13:28:32.424]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:28:32.424]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:28:32.426]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:28:32.426]        // while-condition  =>  FALSE
[13:28:32.426]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:28:32.426]      </control>
[13:28:32.426]      // end if-block "canReadPins"
[13:28:32.426]    </control>
[13:28:32.426]    <control if="!canReadPins" while="" timeout="0" info="">
[13:28:32.426]      // if-block "!canReadPins"
[13:28:32.426]        // =>  FALSE
[13:28:32.428]      // skip if-block "!canReadPins"
[13:28:32.428]    </control>
[13:28:32.428]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:28:32.428]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:28:32.428]        // =>  TRUE
[13:28:32.428]      <block atomic="false" info="">
[13:28:32.428]        WriteAP(0x00, 0x190008);
[13:28:32.430]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:28:32.430]        WriteAP(0xF0, 0x01);
[13:28:32.436]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:28:32.436]      </block>
[13:28:32.436]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:28:32.436]    </control>
[13:28:32.436]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:28:32.436]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:28:32.436]        // =>  FALSE
[13:28:32.436]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:28:32.436]    </control>
[13:28:32.436]    <block atomic="false" info="">
[13:28:32.436]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:28:32.449]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:28:32.449]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:28:32.449]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:28:32.449]      __ap = 0; //lets make sure we reset the access point selection
[13:28:32.449]        // -> [__ap <= 0x00000000]
[13:28:32.449]    </block>
[13:28:32.449]  </sequence>
[13:28:32.449]  
[13:28:32.500]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:28:32.500]  
[13:28:32.500]  <debugvars>
[13:28:32.500]    // Pre-defined
[13:28:32.502]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:28:32.502]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:28:32.502]    __dp=0x00000000
[13:28:32.502]    __ap=0x00000000
[13:28:32.502]    __traceout=0x00000000      (Trace Disabled)
[13:28:32.502]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:28:32.502]    __FlashAddr=0x00000000
[13:28:32.502]    __FlashLen=0x00000000
[13:28:32.502]    __FlashArg=0x00000000
[13:28:32.502]    __FlashOp=0x00000000
[13:28:32.502]    __Result=0x00000000
[13:28:32.502]  </debugvars>
[13:28:32.502]  
[13:28:32.502]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:28:32.502]    <block atomic="false" info="">
[13:28:32.502]      __var deviceID = 0;
[13:28:32.502]        // -> [deviceID <= 0x00000000]
[13:28:32.502]      __var version = 0;
[13:28:32.502]        // -> [version <= 0x00000000]
[13:28:32.502]      __var partNum = 0;
[13:28:32.502]        // -> [partNum <= 0x00000000]
[13:28:32.502]      __var manuf = 0;
[13:28:32.502]        // -> [manuf <= 0x00000000]
[13:28:32.502]      __var isMSPM0G1X0X_G3X0X = 0;
[13:28:32.502]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:28:32.502]      __var isProduction = 0;
[13:28:32.502]        // -> [isProduction <= 0x00000000]
[13:28:32.502]      __var continueId = 0;
[13:28:32.502]        // -> [continueId <= 0x00000000]
[13:28:32.502]      deviceID =   Read32(0x41C40004);
[13:28:32.514]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:28:32.514]        // -> [deviceID <= 0x2BB8802F]
[13:28:32.514]      version = deviceID >> 28;
[13:28:32.514]        // -> [version <= 0x00000002]
[13:28:32.514]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:28:32.514]        // -> [partNum <= 0x0000BB88]
[13:28:32.514]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:28:32.514]        // -> [manuf <= 0x00000017]
[13:28:32.514]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:28:32.514]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:28:32.514]      isProduction = (version > 0);
[13:28:32.514]        // -> [isProduction <= 0x00000001]
[13:28:32.514]    </block>
[13:28:32.514]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:28:32.514]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:28:32.514]        // =>  FALSE
[13:28:32.514]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:28:32.517]    </control>
[13:28:32.517]    <control if="continueId == 4" while="" timeout="0" info="">
[13:28:32.517]      // if-block "continueId == 4"
[13:28:32.517]        // =>  FALSE
[13:28:32.517]      // skip if-block "continueId == 4"
[13:28:32.517]    </control>
[13:28:32.517]    <control if="!isProduction" while="" timeout="0" info="">
[13:28:32.517]      // if-block "!isProduction"
[13:28:32.517]        // =>  FALSE
[13:28:32.517]      // skip if-block "!isProduction"
[13:28:32.517]    </control>
[13:28:32.517]  </sequence>
[13:28:32.517]  
[13:30:51.579]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[13:30:51.579]  
[13:30:51.587]  <debugvars>
[13:30:51.587]    // Pre-defined
[13:30:51.587]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:30:51.587]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:30:51.587]    __dp=0x00000000
[13:30:51.587]    __ap=0x00000000
[13:30:51.587]    __traceout=0x00000000      (Trace Disabled)
[13:30:51.587]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:30:51.587]    __FlashAddr=0x00000000
[13:30:51.587]    __FlashLen=0x00000000
[13:30:51.587]    __FlashArg=0x00000000
[13:30:51.587]    __FlashOp=0x00000000
[13:30:51.587]    __Result=0x00000000
[13:30:51.587]  </debugvars>
[13:30:51.587]  
[13:30:51.587]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:30:51.587]    <block atomic="false" info="">
[13:30:51.587]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:30:51.587]        // -> [isSWJ <= 0x00000001]
[13:30:51.587]      __var hasDormant = __protocol & 0x00020000;
[13:30:51.587]        // -> [hasDormant <= 0x00000000]
[13:30:51.587]      __var protType   = __protocol & 0x0000FFFF;
[13:30:51.587]        // -> [protType <= 0x00000002]
[13:30:51.587]    </block>
[13:30:51.587]    <control if="protType == 1" while="" timeout="0" info="">
[13:30:51.587]      // if-block "protType == 1"
[13:30:51.587]        // =>  FALSE
[13:30:51.587]      // skip if-block "protType == 1"
[13:30:51.587]    </control>
[13:30:51.587]    <control if="protType == 2" while="" timeout="0" info="">
[13:30:51.587]      // if-block "protType == 2"
[13:30:51.591]        // =>  TRUE
[13:30:51.591]      <control if="isSWJ" while="" timeout="0" info="">
[13:30:51.591]        // if-block "isSWJ"
[13:30:51.591]          // =>  TRUE
[13:30:51.591]        <control if="hasDormant" while="" timeout="0" info="">
[13:30:51.591]          // if-block "hasDormant"
[13:30:51.591]            // =>  FALSE
[13:30:51.591]          // skip if-block "hasDormant"
[13:30:51.592]        </control>
[13:30:51.592]        <control if="!hasDormant" while="" timeout="0" info="">
[13:30:51.592]          // if-block "!hasDormant"
[13:30:51.592]            // =>  TRUE
[13:30:51.592]          <block atomic="false" info="">
[13:30:51.592]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:30:52.595]  
[13:30:52.595]  !!! E320 : DAP access error
[13:30:52.595]  
[13:30:52.595]          </block>
[13:30:52.595]          // end if-block "!hasDormant"
[13:30:52.595]        </control>
[13:30:52.595]        // end if-block "isSWJ"
[13:30:52.595]      </control>
[13:30:52.595]      // end if-block "protType == 2"
[13:30:52.595]    </control>
[13:30:52.595]  </sequence>
[13:30:52.595]  
[13:30:52.650]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[13:30:52.650]  
[13:30:52.650]  <debugvars>
[13:30:52.650]    // Pre-defined
[13:30:52.650]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:30:52.650]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:30:52.650]    __dp=0x00000000
[13:30:52.650]    __ap=0x00000000
[13:30:52.650]    __traceout=0x00000000      (Trace Disabled)
[13:30:52.650]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:30:52.650]    __FlashAddr=0x00000000
[13:30:52.652]    __FlashLen=0x00000000
[13:30:52.652]    __FlashArg=0x00000000
[13:30:52.652]    __FlashOp=0x00000000
[13:30:52.652]    __Result=0x00000000
[13:30:52.652]  </debugvars>
[13:30:52.652]  
[13:30:52.652]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:30:52.652]    <block atomic="false" info="">
[13:30:52.652]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:30:52.652]        // -> [isSWJ <= 0x00000001]
[13:30:52.652]      __var hasDormant = __protocol & 0x00020000;
[13:30:52.652]        // -> [hasDormant <= 0x00000000]
[13:30:52.652]      __var protType   = __protocol & 0x0000FFFF;
[13:30:52.652]        // -> [protType <= 0x00000002]
[13:30:52.652]    </block>
[13:30:52.652]    <control if="protType == 1" while="" timeout="0" info="">
[13:30:52.652]      // if-block "protType == 1"
[13:30:52.652]        // =>  FALSE
[13:30:52.652]      // skip if-block "protType == 1"
[13:30:52.652]    </control>
[13:30:52.654]    <control if="protType == 2" while="" timeout="0" info="">
[13:30:52.654]      // if-block "protType == 2"
[13:30:52.654]        // =>  TRUE
[13:30:52.654]      <control if="isSWJ" while="" timeout="0" info="">
[13:30:52.654]        // if-block "isSWJ"
[13:30:52.654]          // =>  TRUE
[13:30:52.654]        <control if="hasDormant" while="" timeout="0" info="">
[13:30:52.654]          // if-block "hasDormant"
[13:30:52.654]            // =>  FALSE
[13:30:52.654]          // skip if-block "hasDormant"
[13:30:52.654]        </control>
[13:30:52.654]        <control if="!hasDormant" while="" timeout="0" info="">
[13:30:52.654]          // if-block "!hasDormant"
[13:30:52.654]            // =>  TRUE
[13:30:52.654]          <block atomic="false" info="">
[13:30:52.654]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:30:53.656]  
[13:30:53.656]  !!! E320 : DAP access error
[13:30:53.656]  
[13:30:53.665]          </block>
[13:30:53.665]          // end if-block "!hasDormant"
[13:30:53.665]        </control>
[13:30:53.665]        // end if-block "isSWJ"
[13:30:53.665]      </control>
[13:30:53.665]      // end if-block "protType == 2"
[13:30:53.665]    </control>
[13:30:53.665]  </sequence>
[13:30:53.665]  
[13:30:53.720]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[13:30:53.720]  
[13:30:53.720]  <debugvars>
[13:30:53.720]    // Pre-defined
[13:30:53.720]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:30:53.720]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:30:53.720]    __dp=0x00000000
[13:30:53.720]    __ap=0x00000000
[13:30:53.720]    __traceout=0x00000000      (Trace Disabled)
[13:30:53.720]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:30:53.722]    __FlashAddr=0x00000000
[13:30:53.722]    __FlashLen=0x00000000
[13:30:53.722]    __FlashArg=0x00000000
[13:30:53.722]    __FlashOp=0x00000000
[13:30:53.722]    __Result=0x00000000
[13:30:53.723]  </debugvars>
[13:30:53.723]  
[13:30:53.723]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:30:53.723]    <block atomic="false" info="">
[13:30:53.723]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:30:53.723]        // -> [isSWJ <= 0x00000001]
[13:30:53.723]      __var hasDormant = __protocol & 0x00020000;
[13:30:53.723]        // -> [hasDormant <= 0x00000000]
[13:30:53.723]      __var protType   = __protocol & 0x0000FFFF;
[13:30:53.723]        // -> [protType <= 0x00000002]
[13:30:53.723]    </block>
[13:30:53.723]    <control if="protType == 1" while="" timeout="0" info="">
[13:30:53.723]      // if-block "protType == 1"
[13:30:53.723]        // =>  FALSE
[13:30:53.723]      // skip if-block "protType == 1"
[13:30:53.723]    </control>
[13:30:53.723]    <control if="protType == 2" while="" timeout="0" info="">
[13:30:53.723]      // if-block "protType == 2"
[13:30:53.725]        // =>  TRUE
[13:30:53.725]      <control if="isSWJ" while="" timeout="0" info="">
[13:30:53.725]        // if-block "isSWJ"
[13:30:53.725]          // =>  TRUE
[13:30:53.725]        <control if="hasDormant" while="" timeout="0" info="">
[13:30:53.725]          // if-block "hasDormant"
[13:30:53.725]            // =>  FALSE
[13:30:53.725]          // skip if-block "hasDormant"
[13:30:53.725]        </control>
[13:30:53.725]        <control if="!hasDormant" while="" timeout="0" info="">
[13:30:53.725]          // if-block "!hasDormant"
[13:30:53.725]            // =>  TRUE
[13:30:53.725]          <block atomic="false" info="">
[13:30:53.725]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:30:54.726]  
[13:30:54.726]  !!! E320 : DAP access error
[13:30:54.726]  
[13:30:54.735]          </block>
[13:30:54.735]          // end if-block "!hasDormant"
[13:30:54.735]        </control>
[13:30:54.735]        // end if-block "isSWJ"
[13:30:54.735]      </control>
[13:30:54.735]      // end if-block "protType == 2"
[13:30:54.735]    </control>
[13:30:54.735]  </sequence>
[13:30:54.735]  
[13:30:54.786]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[13:30:54.786]  
[13:30:54.786]  <debugvars>
[13:30:54.787]    // Pre-defined
[13:30:54.787]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:30:54.787]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:30:54.787]    __dp=0x00000000
[13:30:54.787]    __ap=0x00000000
[13:30:54.787]    __traceout=0x00000000      (Trace Disabled)
[13:30:54.788]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:30:54.788]    __FlashAddr=0x00000000
[13:30:54.788]    __FlashLen=0x00000000
[13:30:54.788]    __FlashArg=0x00000000
[13:30:54.788]    __FlashOp=0x00000000
[13:30:54.788]    __Result=0x00000000
[13:30:54.788]  </debugvars>
[13:30:54.788]  
[13:30:54.788]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:30:54.788]    <block atomic="false" info="">
[13:30:54.788]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:30:54.788]        // -> [isSWJ <= 0x00000001]
[13:30:54.788]      __var hasDormant = __protocol & 0x00020000;
[13:30:54.788]        // -> [hasDormant <= 0x00000000]
[13:30:54.788]      __var protType   = __protocol & 0x0000FFFF;
[13:30:54.790]        // -> [protType <= 0x00000002]
[13:30:54.790]    </block>
[13:30:54.790]    <control if="protType == 1" while="" timeout="0" info="">
[13:30:54.790]      // if-block "protType == 1"
[13:30:54.790]        // =>  FALSE
[13:30:54.790]      // skip if-block "protType == 1"
[13:30:54.790]    </control>
[13:30:54.790]    <control if="protType == 2" while="" timeout="0" info="">
[13:30:54.790]      // if-block "protType == 2"
[13:30:54.790]        // =>  TRUE
[13:30:54.790]      <control if="isSWJ" while="" timeout="0" info="">
[13:30:54.790]        // if-block "isSWJ"
[13:30:54.790]          // =>  TRUE
[13:30:54.790]        <control if="hasDormant" while="" timeout="0" info="">
[13:30:54.790]          // if-block "hasDormant"
[13:30:54.790]            // =>  FALSE
[13:30:54.792]          // skip if-block "hasDormant"
[13:30:54.792]        </control>
[13:30:54.792]        <control if="!hasDormant" while="" timeout="0" info="">
[13:30:54.792]          // if-block "!hasDormant"
[13:30:54.792]            // =>  TRUE
[13:30:54.792]          <block atomic="false" info="">
[13:30:54.792]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:30:56.754]  
[13:30:56.754]  !!! E320 : DAP access error
[13:30:56.754]  
[13:30:56.754]          </block>
[13:30:56.754]          // end if-block "!hasDormant"
[13:30:56.754]        </control>
[13:30:56.754]        // end if-block "isSWJ"
[13:30:56.754]      </control>
[13:30:56.754]      // end if-block "protType == 2"
[13:30:56.754]    </control>
[13:30:56.754]  </sequence>
[13:30:56.754]  
[13:30:57.006]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[13:30:57.006]  
[13:30:57.006]  <debugvars>
[13:30:57.006]    // Pre-defined
[13:30:57.006]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:30:57.006]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:30:57.006]    __dp=0x00000000
[13:30:57.006]    __ap=0x00000000
[13:30:57.006]    __traceout=0x00000000      (Trace Disabled)
[13:30:57.006]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:30:57.006]    __FlashAddr=0x00000000
[13:30:57.006]    __FlashLen=0x00000000
[13:30:57.006]    __FlashArg=0x00000000
[13:30:57.006]    __FlashOp=0x00000000
[13:30:57.006]    __Result=0x00000000
[13:30:57.006]  </debugvars>
[13:30:57.006]  
[13:30:57.006]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:30:57.006]    <block atomic="false" info="">
[13:30:57.006]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:30:57.006]        // -> [isSWJ <= 0x00000001]
[13:30:57.006]      __var hasDormant = __protocol & 0x00020000;
[13:30:57.006]        // -> [hasDormant <= 0x00000000]
[13:30:57.006]      __var protType   = __protocol & 0x0000FFFF;
[13:30:57.006]        // -> [protType <= 0x00000002]
[13:30:57.010]    </block>
[13:30:57.010]    <control if="protType == 1" while="" timeout="0" info="">
[13:30:57.010]      // if-block "protType == 1"
[13:30:57.010]        // =>  FALSE
[13:30:57.010]      // skip if-block "protType == 1"
[13:30:57.010]    </control>
[13:30:57.010]    <control if="protType == 2" while="" timeout="0" info="">
[13:30:57.010]      // if-block "protType == 2"
[13:30:57.010]        // =>  TRUE
[13:30:57.010]      <control if="isSWJ" while="" timeout="0" info="">
[13:30:57.010]        // if-block "isSWJ"
[13:30:57.010]          // =>  TRUE
[13:30:57.010]        <control if="hasDormant" while="" timeout="0" info="">
[13:30:57.010]          // if-block "hasDormant"
[13:30:57.010]            // =>  FALSE
[13:30:57.010]          // skip if-block "hasDormant"
[13:30:57.010]        </control>
[13:30:57.010]        <control if="!hasDormant" while="" timeout="0" info="">
[13:30:57.010]          // if-block "!hasDormant"
[13:30:57.010]            // =>  TRUE
[13:30:57.010]          <block atomic="false" info="">
[13:30:57.010]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
