/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0010.log
 *  Created     : 21:28:51 (23/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[21:28:51.812]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:28:51.812]  
[21:28:51.813]  <debugvars>
[21:28:51.813]    // Pre-defined
[21:28:51.813]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:28:51.813]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:28:51.814]    __dp=0x00000000
[21:28:51.814]    __ap=0x00000000
[21:28:51.814]    __traceout=0x00000000      (Trace Disabled)
[21:28:51.814]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:28:51.814]    __FlashAddr=0x00000000
[21:28:51.814]    __FlashLen=0x00000000
[21:28:51.814]    __FlashArg=0x00000000
[21:28:51.814]    __FlashOp=0x00000000
[21:28:51.814]    __Result=0x00000000
[21:28:51.814]  </debugvars>
[21:28:51.815]  
[21:28:51.815]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:28:51.815]    <block atomic="false" info="">
[21:28:51.815]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:28:51.815]        // -> [isSWJ <= 0x00000001]
[21:28:51.816]      __var hasDormant = __protocol & 0x00020000;
[21:28:51.816]        // -> [hasDormant <= 0x00000000]
[21:28:51.816]      __var protType   = __protocol & 0x0000FFFF;
[21:28:51.816]        // -> [protType <= 0x00000002]
[21:28:51.816]    </block>
[21:28:51.816]    <control if="protType == 1" while="" timeout="0" info="">
[21:28:51.816]      // if-block "protType == 1"
[21:28:51.817]        // =>  FALSE
[21:28:51.817]      // skip if-block "protType == 1"
[21:28:51.817]    </control>
[21:28:51.817]    <control if="protType == 2" while="" timeout="0" info="">
[21:28:51.817]      // if-block "protType == 2"
[21:28:51.817]        // =>  TRUE
[21:28:51.817]      <control if="isSWJ" while="" timeout="0" info="">
[21:28:51.817]        // if-block "isSWJ"
[21:28:51.817]          // =>  TRUE
[21:28:51.818]        <control if="hasDormant" while="" timeout="0" info="">
[21:28:51.818]          // if-block "hasDormant"
[21:28:51.818]            // =>  FALSE
[21:28:51.818]          // skip if-block "hasDormant"
[21:28:51.818]        </control>
[21:28:51.818]        <control if="!hasDormant" while="" timeout="0" info="">
[21:28:51.818]          // if-block "!hasDormant"
[21:28:51.818]            // =>  TRUE
[21:28:51.818]          <block atomic="false" info="">
[21:28:51.818]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:28:51.819]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:51.819]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:28:51.819]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:28:51.819]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:28:51.820]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:51.820]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:28:51.820]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:28:51.820]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:28:51.821]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:51.821]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:28:51.821]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:28:51.821]          </block>
[21:28:51.821]          // end if-block "!hasDormant"
[21:28:51.821]        </control>
[21:28:51.821]        // end if-block "isSWJ"
[21:28:51.821]      </control>
[21:28:51.822]      <control if="!isSWJ" while="" timeout="0" info="">
[21:28:51.822]        // if-block "!isSWJ"
[21:28:51.822]          // =>  FALSE
[21:28:51.822]        // skip if-block "!isSWJ"
[21:28:51.822]      </control>
[21:28:51.823]      <block atomic="false" info="">
[21:28:51.823]        ReadDP(0x0);
[21:28:51.823]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:28:51.823]      </block>
[21:28:51.823]      // end if-block "protType == 2"
[21:28:51.823]    </control>
[21:28:51.824]  </sequence>
[21:28:51.824]  
[21:28:54.908]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:28:54.909]  
[21:28:54.909]  <debugvars>
[21:28:54.909]    // Pre-defined
[21:28:54.909]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:28:54.909]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:28:54.909]    __dp=0x00000000
[21:28:54.909]    __ap=0x00000000
[21:28:54.910]    __traceout=0x00000000      (Trace Disabled)
[21:28:54.910]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:28:54.910]    __FlashAddr=0x00000000
[21:28:54.910]    __FlashLen=0x00000000
[21:28:54.910]    __FlashArg=0x00000000
[21:28:54.910]    __FlashOp=0x00000000
[21:28:54.910]    __Result=0x00000000
[21:28:54.910]  </debugvars>
[21:28:54.911]  
[21:28:54.911]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:28:54.911]    <block atomic="false" info="">
[21:28:54.911]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:28:54.911]        // -> [isSWJ <= 0x00000001]
[21:28:54.911]      __var hasDormant = __protocol & 0x00020000;
[21:28:54.911]        // -> [hasDormant <= 0x00000000]
[21:28:54.911]      __var protType   = __protocol & 0x0000FFFF;
[21:28:54.911]        // -> [protType <= 0x00000002]
[21:28:54.911]    </block>
[21:28:54.911]    <control if="protType == 1" while="" timeout="0" info="">
[21:28:54.911]      // if-block "protType == 1"
[21:28:54.911]        // =>  FALSE
[21:28:54.911]      // skip if-block "protType == 1"
[21:28:54.911]    </control>
[21:28:54.912]    <control if="protType == 2" while="" timeout="0" info="">
[21:28:54.912]      // if-block "protType == 2"
[21:28:54.912]        // =>  TRUE
[21:28:54.912]      <control if="isSWJ" while="" timeout="0" info="">
[21:28:54.912]        // if-block "isSWJ"
[21:28:54.912]          // =>  TRUE
[21:28:54.912]        <control if="hasDormant" while="" timeout="0" info="">
[21:28:54.912]          // if-block "hasDormant"
[21:28:54.912]            // =>  FALSE
[21:28:54.913]          // skip if-block "hasDormant"
[21:28:54.913]        </control>
[21:28:54.913]        <control if="!hasDormant" while="" timeout="0" info="">
[21:28:54.913]          // if-block "!hasDormant"
[21:28:54.913]            // =>  TRUE
[21:28:54.914]          <block atomic="false" info="">
[21:28:54.914]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:28:54.915]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:54.915]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:28:54.915]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:28:54.915]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:28:54.916]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:54.916]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:28:54.916]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:28:54.917]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:28:54.917]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:54.917]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:28:54.917]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:28:54.917]          </block>
[21:28:54.917]          // end if-block "!hasDormant"
[21:28:54.919]        </control>
[21:28:54.919]        // end if-block "isSWJ"
[21:28:54.919]      </control>
[21:28:54.919]      <control if="!isSWJ" while="" timeout="0" info="">
[21:28:54.919]        // if-block "!isSWJ"
[21:28:54.919]          // =>  FALSE
[21:28:54.919]        // skip if-block "!isSWJ"
[21:28:54.919]      </control>
[21:28:54.920]      <block atomic="false" info="">
[21:28:54.920]        ReadDP(0x0);
[21:28:54.920]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:28:54.920]      </block>
[21:28:54.921]      // end if-block "protType == 2"
[21:28:54.921]    </control>
[21:28:54.921]  </sequence>
[21:28:54.921]  
[21:28:54.922]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:28:54.922]  
[21:28:54.922]  <debugvars>
[21:28:54.923]    // Pre-defined
[21:28:54.923]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:28:54.923]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:28:54.923]    __dp=0x00000000
[21:28:54.923]    __ap=0x00000000
[21:28:54.923]    __traceout=0x00000000      (Trace Disabled)
[21:28:54.923]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:28:54.923]    __FlashAddr=0x00000000
[21:28:54.923]    __FlashLen=0x00000000
[21:28:54.923]    __FlashArg=0x00000000
[21:28:54.923]    __FlashOp=0x00000000
[21:28:54.923]    __Result=0x00000000
[21:28:54.923]  </debugvars>
[21:28:54.923]  
[21:28:54.924]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:28:54.924]    <block atomic="false" info="">
[21:28:54.924]      __var SW_DP_ABORT       = 0x0;
[21:28:54.924]        // -> [SW_DP_ABORT <= 0x00000000]
[21:28:54.924]      __var DP_CTRL_STAT      = 0x4;
[21:28:54.924]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:28:54.924]      __var DP_SELECT         = 0x8;
[21:28:54.925]        // -> [DP_SELECT <= 0x00000008]
[21:28:54.925]      __var powered_down      = 0;
[21:28:54.925]        // -> [powered_down <= 0x00000000]
[21:28:54.925]      WriteDP(DP_SELECT, 0x00000000);
[21:28:54.926]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:28:54.926]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:28:54.927]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:28:54.927]        // -> [powered_down <= 0x00000001]
[21:28:54.927]    </block>
[21:28:54.927]    <control if="powered_down" while="" timeout="0" info="">
[21:28:54.927]      // if-block "powered_down"
[21:28:54.928]        // =>  TRUE
[21:28:54.928]      <block atomic="false" info="">
[21:28:54.928]        Message(0, "Debug/System power-up request sent");
[21:28:54.931]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:28:54.931]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:28:54.931]      </block>
[21:28:54.931]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:28:54.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:28:54.932]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:28:54.932]        // while-condition  =>  FALSE
[21:28:54.932]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:28:54.932]      </control>
[21:28:54.932]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:28:54.932]        // if-block "(__protocol & 0xFFFF) == 1"
[21:28:54.932]          // =>  FALSE
[21:28:54.932]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:28:54.932]      </control>
[21:28:54.933]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:28:54.933]        // if-block "(__protocol & 0xFFFF) == 2"
[21:28:54.933]          // =>  TRUE
[21:28:54.933]        <block atomic="false" info="">
[21:28:54.933]          Message(0, "executing SWD power up");
[21:28:54.937]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:28:54.937]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:28:54.938]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:28:54.938]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:28:54.938]        </block>
[21:28:54.939]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:28:54.939]      </control>
[21:28:54.940]      // end if-block "powered_down"
[21:28:54.940]    </control>
[21:28:54.940]    <block atomic="false" info="">
[21:28:54.940]      __var DEBUG_PORT_VAL    = 0;
[21:28:54.940]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:28:54.940]      __var ACCESS_POINT_VAL  = 0;
[21:28:54.940]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:28:54.940]      __ap = 1; 
[21:28:54.941]        // -> [__ap <= 0x00000001]
[21:28:54.941]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:28:54.941]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:28:54.942]      __ap = 4;
[21:28:54.942]        // -> [__ap <= 0x00000004]
[21:28:54.942]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:28:54.943]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:28:54.943]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:28:54.943]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:28:54.945]    </block>
[21:28:54.945]    <block atomic="false" info="">
[21:28:54.945]      __var nReset = 0x80;
[21:28:54.945]        // -> [nReset <= 0x00000080]
[21:28:54.945]      __var canReadPins = 0;
[21:28:54.945]        // -> [canReadPins <= 0x00000000]
[21:28:54.946]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:28:54.946]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:28:54.946]        // -> [canReadPins <= 0x00000001]
[21:28:54.946]    </block>
[21:28:54.946]    <control if="" while="1" timeout="200" info="">
[21:28:54.946]      // while "1"  (timeout="200")
[21:28:54.946]      // while-condition  =>  TRUE
[21:28:54.947]      // while "1"  (timeout="200")
[21:28:54.947]      // while-condition  =>  TRUE
[21:28:54.947]      // while "1"  (timeout="200")
[21:28:54.947]      // while-condition  =>  TRUE
[21:28:54.947]      // while "1"  (timeout="200")
[21:28:54.947]      // while-condition  =>  TRUE
[21:28:54.947]      // while "1"  (timeout="200")
[21:28:54.947]      // while-condition  =>  TRUE
[21:28:54.948]      // while "1"  (timeout="200")
[21:28:54.948]      // while-condition  =>  TRUE
[21:28:54.948]      // while "1"  (timeout="200")
[21:28:54.948]      // while-condition  =>  TRUE
[21:28:54.948]      // while "1"  (timeout="200")
[21:28:54.948]      // while-condition  =>  TRUE
[21:28:54.948]      // while "1"  (timeout="200")
[21:28:54.948]      // while-condition  =>  TRUE
[21:28:54.948]      // while "1"  (timeout="200")
[21:28:54.948]      // while-condition  =>  TRUE
[21:28:54.948]      // while "1"  (timeout="200")
[21:28:54.949]      // while-condition  =>  TRUE
[21:28:54.949]      // while "1"  (timeout="200")
[21:28:54.949]      // while-condition  =>  TRUE
[21:28:54.949]      // while "1"  (timeout="200")
[21:28:54.949]      // while-condition  =>  TRUE
[21:28:54.950]      // while "1"  (timeout="200")
[21:28:54.950]      // while-condition  =>  TRUE
[21:28:54.950]      // while "1"  (timeout="200")
[21:28:54.950]      // while-condition  =>  TRUE
[21:28:54.950]      // while "1"  (timeout="200")
[21:28:54.950]      // while-condition  =>  TRUE
[21:28:54.950]      // while "1"  (timeout="200")
[21:28:54.950]      // while-condition  =>  TRUE
[21:28:54.950]      // while "1"  (timeout="200")
[21:28:54.951]      // while-condition  =>  TRUE
[21:28:54.951]      // while "1"  (timeout="200")
[21:28:54.951]      // while-condition  =>  TRUE
[21:28:54.951]      // while "1"  (timeout="200")
[21:28:54.951]      // while-condition  =>  TRUE
[21:28:54.951]      // while "1"  (timeout="200")
[21:28:54.951]      // while-condition  =>  TRUE
[21:28:54.951]      // while "1"  (timeout="200")
[21:28:54.951]      // while-condition  =>  TRUE
[21:28:54.951]      // while "1"  (timeout="200")
[21:28:54.951]      // while-condition  =>  TRUE
[21:28:54.951]      // while "1"  (timeout="200")
[21:28:54.951]      // while-condition  =>  TRUE
[21:28:54.951]      // while "1"  (timeout="200")
[21:28:54.951]      // while-condition  =>  TRUE
[21:28:54.951]      // while "1"  (timeout="200")
[21:28:54.952]      // while-condition  =>  TRUE
[21:28:54.952]      // while "1"  (timeout="200")
[21:28:54.952]      // while-condition  =>  TRUE
[21:28:54.952]      // while "1"  (timeout="200")
[21:28:54.952]      // while-condition  =>  TRUE
[21:28:54.952]      // while "1"  (timeout="200")
[21:28:54.952]      // while-condition  =>  TRUE
[21:28:54.952]      // while "1"  (timeout="200")
[21:28:54.952]      // while-condition  =>  TRUE
[21:28:54.952]      // while "1"  (timeout="200")
[21:28:54.952]      // while-condition  =>  TRUE
[21:28:54.953]      // while "1"  (timeout="200")
[21:28:54.953]      // while-condition  =>  TRUE
[21:28:54.953]      // while "1"  (timeout="200")
[21:28:54.953]      // while-condition  =>  TRUE
[21:28:54.953]      // while "1"  (timeout="200")
[21:28:54.953]      // while-condition  =>  TRUE
[21:28:54.953]      // while "1"  (timeout="200")
[21:28:54.953]      // while-condition  =>  TRUE
[21:28:54.953]      // while "1"  (timeout="200")
[21:28:54.953]      // while-condition  =>  TRUE
[21:28:54.953]      // while "1"  (timeout="200")
[21:28:54.954]      // while-condition  =>  TRUE
[21:28:54.954]      // while "1"  (timeout="200")
[21:28:54.954]      // while-condition  =>  TRUE
[21:28:54.954]      // while "1"  (timeout="200")
[21:28:54.954]      // while-condition  =>  TRUE
[21:28:54.954]      // while "1"  (timeout="200")
[21:28:54.954]      // while-condition  =>  TRUE
[21:28:54.955]      // while "1"  (timeout="200")
[21:28:54.955]      // while-condition  =>  TRUE
[21:28:54.955]      // while "1"  (timeout="200")
[21:28:54.955]      // while-condition  =>  TRUE
[21:28:54.955]      // while "1"  (timeout="200")
[21:28:54.955]      // while-condition  =>  TRUE
[21:28:54.955]      // while "1"  (timeout="200")
[21:28:54.955]      // while-condition  =>  TRUE
[21:28:54.955]      // while "1"  (timeout="200")
[21:28:54.956]      // while-condition  =>  TRUE
[21:28:54.956]      // while "1"  (timeout="200")
[21:28:54.956]      // while-condition  =>  TRUE
[21:28:54.956]      // while "1"  (timeout="200")
[21:28:54.956]      // while-condition  =>  TRUE
[21:28:54.956]      // while "1"  (timeout="200")
[21:28:54.956]      // while-condition  =>  TRUE
[21:28:54.956]      // while "1"  (timeout="200")
[21:28:54.956]      // while-condition  =>  TRUE
[21:28:54.956]      // while "1"  (timeout="200")
[21:28:54.957]      // while-condition  =>  TRUE
[21:28:54.957]      // while "1"  (timeout="200")
[21:28:54.957]      // while-condition  =>  TRUE
[21:28:54.957]      // while "1"  (timeout="200")
[21:28:54.957]      // while-condition  =>  TRUE
[21:28:54.957]      // while "1"  (timeout="200")
[21:28:54.957]      // while-condition  =>  TRUE
[21:28:54.957]      // while "1"  (timeout="200")
[21:28:54.957]      // while-condition  =>  TRUE
[21:28:54.957]      // while "1"  (timeout="200")
[21:28:54.957]      // while-condition  =>  TRUE
[21:28:54.957]      // while "1"  (timeout="200")
[21:28:54.957]      // while-condition  =>  TRUE
[21:28:54.959]      // while "1"  (timeout="200")
[21:28:54.959]      // while  =>  TIMEOUT
[21:28:54.959]      // end while "1"
[21:28:54.959]    </control>
[21:28:54.959]    <control if="canReadPins" while="" timeout="0" info="">
[21:28:54.959]      // if-block "canReadPins"
[21:28:54.959]        // =>  TRUE
[21:28:54.959]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:28:54.959]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:28:54.960]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:28:54.960]        // while-condition  =>  FALSE
[21:28:54.960]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:28:54.960]      </control>
[21:28:54.960]      // end if-block "canReadPins"
[21:28:54.960]    </control>
[21:28:54.960]    <control if="!canReadPins" while="" timeout="0" info="">
[21:28:54.960]      // if-block "!canReadPins"
[21:28:54.960]        // =>  FALSE
[21:28:54.960]      // skip if-block "!canReadPins"
[21:28:54.960]    </control>
[21:28:54.960]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:28:54.961]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:28:54.961]        // =>  TRUE
[21:28:54.961]      <block atomic="false" info="">
[21:28:54.961]        WriteAP(0x00, 0x190008);
[21:28:54.962]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:28:54.962]        WriteAP(0xF0, 0x01);
[21:28:54.963]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:28:54.963]      </block>
[21:28:54.963]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:28:54.963]    </control>
[21:28:54.963]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:28:54.963]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:28:54.963]        // =>  FALSE
[21:28:54.964]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:28:54.964]    </control>
[21:28:54.964]    <block atomic="false" info="">
[21:28:54.964]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:28:54.965]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:28:54.966]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:28:54.966]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:28:54.967]      __ap = 0; //lets make sure we reset the access point selection
[21:28:54.967]        // -> [__ap <= 0x00000000]
[21:28:54.967]    </block>
[21:28:54.969]  </sequence>
[21:28:54.969]  
[21:28:54.974]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:28:54.974]  
[21:28:54.974]  <debugvars>
[21:28:54.975]    // Pre-defined
[21:28:54.975]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:28:54.975]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[21:28:54.975]    __dp=0x00000000
[21:28:54.975]    __ap=0x00000000
[21:28:54.975]    __traceout=0x00000000      (Trace Disabled)
[21:28:54.975]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:28:54.976]    __FlashAddr=0x00000000
[21:28:54.976]    __FlashLen=0x00000000
[21:28:54.976]    __FlashArg=0x00000000
[21:28:54.976]    __FlashOp=0x00000000
[21:28:54.976]    __Result=0x00000000
[21:28:54.976]  </debugvars>
[21:28:54.976]  
[21:28:54.976]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:28:54.976]    <block atomic="false" info="">
[21:28:54.976]      __var deviceID = 0;
[21:28:54.976]        // -> [deviceID <= 0x00000000]
[21:28:54.977]      __var version = 0;
[21:28:54.977]        // -> [version <= 0x00000000]
[21:28:54.977]      __var partNum = 0;
[21:28:54.977]        // -> [partNum <= 0x00000000]
[21:28:54.977]      __var manuf = 0;
[21:28:54.977]        // -> [manuf <= 0x00000000]
[21:28:54.977]      __var isMSPM0G1X0X_G3X0X = 0;
[21:28:54.977]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:28:54.977]      __var isProduction = 0;
[21:28:54.977]        // -> [isProduction <= 0x00000000]
[21:28:54.977]      __var continueId = 0;
[21:28:54.977]        // -> [continueId <= 0x00000000]
[21:28:54.977]      deviceID =   Read32(0x41C40004);
[21:28:54.980]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:28:54.980]        // -> [deviceID <= 0x2BB8802F]
[21:28:54.980]      version = deviceID >> 28;
[21:28:54.980]        // -> [version <= 0x00000002]
[21:28:54.980]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:28:54.980]        // -> [partNum <= 0x0000BB88]
[21:28:54.980]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:28:54.980]        // -> [manuf <= 0x00000017]
[21:28:54.980]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:28:54.980]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:28:54.980]      isProduction = (version > 0);
[21:28:54.981]        // -> [isProduction <= 0x00000001]
[21:28:54.981]    </block>
[21:28:54.981]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:28:54.981]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:28:54.981]        // =>  FALSE
[21:28:54.981]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:28:54.981]    </control>
[21:28:54.981]    <control if="continueId == 4" while="" timeout="0" info="">
[21:28:54.981]      // if-block "continueId == 4"
[21:28:54.981]        // =>  FALSE
[21:28:54.982]      // skip if-block "continueId == 4"
[21:28:54.982]    </control>
[21:28:54.982]    <control if="!isProduction" while="" timeout="0" info="">
[21:28:54.982]      // if-block "!isProduction"
[21:28:54.982]        // =>  FALSE
[21:28:54.982]      // skip if-block "!isProduction"
[21:28:54.982]    </control>
[21:28:54.983]  </sequence>
[21:28:54.983]  
[21:28:58.409]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:28:58.409]  
[21:28:58.417]  <debugvars>
[21:28:58.417]    // Pre-defined
[21:28:58.417]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:28:58.417]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:28:58.417]    __dp=0x00000000
[21:28:58.417]    __ap=0x00000000
[21:28:58.417]    __traceout=0x00000000      (Trace Disabled)
[21:28:58.417]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:28:58.417]    __FlashAddr=0x00000000
[21:28:58.417]    __FlashLen=0x00000000
[21:28:58.417]    __FlashArg=0x00000000
[21:28:58.417]    __FlashOp=0x00000000
[21:28:58.417]    __Result=0x00000000
[21:28:58.419]  </debugvars>
[21:28:58.419]  
[21:28:58.419]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:28:58.419]    <block atomic="false" info="">
[21:28:58.419]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:28:58.419]        // -> [isSWJ <= 0x00000001]
[21:28:58.419]      __var hasDormant = __protocol & 0x00020000;
[21:28:58.419]        // -> [hasDormant <= 0x00000000]
[21:28:58.419]      __var protType   = __protocol & 0x0000FFFF;
[21:28:58.420]        // -> [protType <= 0x00000002]
[21:28:58.420]    </block>
[21:28:58.420]    <control if="protType == 1" while="" timeout="0" info="">
[21:28:58.420]      // if-block "protType == 1"
[21:28:58.420]        // =>  FALSE
[21:28:58.421]      // skip if-block "protType == 1"
[21:28:58.421]    </control>
[21:28:58.421]    <control if="protType == 2" while="" timeout="0" info="">
[21:28:58.421]      // if-block "protType == 2"
[21:28:58.421]        // =>  TRUE
[21:28:58.421]      <control if="isSWJ" while="" timeout="0" info="">
[21:28:58.421]        // if-block "isSWJ"
[21:28:58.421]          // =>  TRUE
[21:28:58.421]        <control if="hasDormant" while="" timeout="0" info="">
[21:28:58.422]          // if-block "hasDormant"
[21:28:58.422]            // =>  FALSE
[21:28:58.422]          // skip if-block "hasDormant"
[21:28:58.422]        </control>
[21:28:58.422]        <control if="!hasDormant" while="" timeout="0" info="">
[21:28:58.422]          // if-block "!hasDormant"
[21:28:58.422]            // =>  TRUE
[21:28:58.422]          <block atomic="false" info="">
[21:28:58.423]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:28:58.423]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:58.423]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:28:58.424]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:28:58.424]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:28:58.424]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:58.424]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:28:58.424]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:28:58.425]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:28:58.425]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:28:58.425]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:28:58.425]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:28:58.426]          </block>
[21:28:58.426]          // end if-block "!hasDormant"
[21:28:58.426]        </control>
[21:28:58.426]        // end if-block "isSWJ"
[21:28:58.426]      </control>
[21:28:58.426]      <control if="!isSWJ" while="" timeout="0" info="">
[21:28:58.426]        // if-block "!isSWJ"
[21:28:58.426]          // =>  FALSE
[21:28:58.426]        // skip if-block "!isSWJ"
[21:28:58.426]      </control>
[21:28:58.427]      <block atomic="false" info="">
[21:28:58.427]        ReadDP(0x0);
[21:28:58.427]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:28:58.427]      </block>
[21:28:58.427]      // end if-block "protType == 2"
[21:28:58.427]    </control>
[21:28:58.427]  </sequence>
[21:28:58.428]  
[21:28:58.428]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:28:58.428]  
[21:28:58.428]  <debugvars>
[21:28:58.428]    // Pre-defined
[21:28:58.428]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:28:58.429]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:28:58.429]    __dp=0x00000000
[21:28:58.429]    __ap=0x00000000
[21:28:58.429]    __traceout=0x00000000      (Trace Disabled)
[21:28:58.429]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:28:58.429]    __FlashAddr=0x00000000
[21:28:58.429]    __FlashLen=0x00000000
[21:28:58.429]    __FlashArg=0x00000000
[21:28:58.430]    __FlashOp=0x00000000
[21:28:58.430]    __Result=0x00000000
[21:28:58.430]  </debugvars>
[21:28:58.430]  
[21:28:58.430]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:28:58.430]    <block atomic="false" info="">
[21:28:58.430]      __var SW_DP_ABORT       = 0x0;
[21:28:58.430]        // -> [SW_DP_ABORT <= 0x00000000]
[21:28:58.430]      __var DP_CTRL_STAT      = 0x4;
[21:28:58.430]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:28:58.430]      __var DP_SELECT         = 0x8;
[21:28:58.431]        // -> [DP_SELECT <= 0x00000008]
[21:28:58.431]      __var powered_down      = 0;
[21:28:58.431]        // -> [powered_down <= 0x00000000]
[21:28:58.431]      WriteDP(DP_SELECT, 0x00000000);
[21:28:58.431]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:28:58.431]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:28:58.432]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:28:58.432]        // -> [powered_down <= 0x00000001]
[21:28:58.432]    </block>
[21:28:58.432]    <control if="powered_down" while="" timeout="0" info="">
[21:28:58.432]      // if-block "powered_down"
[21:28:58.432]        // =>  TRUE
[21:28:58.432]      <block atomic="false" info="">
[21:28:58.432]        Message(0, "Debug/System power-up request sent");
[21:28:58.434]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:28:58.434]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:28:58.434]      </block>
[21:28:58.434]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:28:58.435]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:28:58.435]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:28:58.435]        // while-condition  =>  FALSE
[21:28:58.436]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:28:58.437]      </control>
[21:28:58.437]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:28:58.437]        // if-block "(__protocol & 0xFFFF) == 1"
[21:28:58.437]          // =>  FALSE
[21:28:58.437]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:28:58.437]      </control>
[21:28:58.437]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:28:58.437]        // if-block "(__protocol & 0xFFFF) == 2"
[21:28:58.437]          // =>  TRUE
[21:28:58.437]        <block atomic="false" info="">
[21:28:58.437]          Message(0, "executing SWD power up");
[21:28:58.439]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:28:58.440]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:28:58.440]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:28:58.440]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:28:58.441]        </block>
[21:28:58.441]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:28:58.441]      </control>
[21:28:58.441]      // end if-block "powered_down"
[21:28:58.441]    </control>
[21:28:58.442]    <block atomic="false" info="">
[21:28:58.442]      __var DEBUG_PORT_VAL    = 0;
[21:28:58.442]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:28:58.442]      __var ACCESS_POINT_VAL  = 0;
[21:28:58.442]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:28:58.442]      __ap = 1; 
[21:28:58.442]        // -> [__ap <= 0x00000001]
[21:28:58.442]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:28:58.444]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:28:58.444]      __ap = 4;
[21:28:58.444]        // -> [__ap <= 0x00000004]
[21:28:58.444]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:28:58.445]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:28:58.445]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:28:58.446]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:28:58.447]    </block>
[21:28:58.447]    <block atomic="false" info="">
[21:28:58.447]      __var nReset = 0x80;
[21:28:58.447]        // -> [nReset <= 0x00000080]
[21:28:58.448]      __var canReadPins = 0;
[21:28:58.448]        // -> [canReadPins <= 0x00000000]
[21:28:58.448]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:28:58.448]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:28:58.448]        // -> [canReadPins <= 0x00000001]
[21:28:58.448]    </block>
[21:28:58.448]    <control if="" while="1" timeout="200" info="">
[21:28:58.449]      // while "1"  (timeout="200")
[21:28:58.449]      // while-condition  =>  TRUE
[21:28:58.449]      // while "1"  (timeout="200")
[21:28:58.449]      // while-condition  =>  TRUE
[21:28:58.449]      // while "1"  (timeout="200")
[21:28:58.449]      // while-condition  =>  TRUE
[21:28:58.449]      // while "1"  (timeout="200")
[21:28:58.449]      // while-condition  =>  TRUE
[21:28:58.449]      // while "1"  (timeout="200")
[21:28:58.449]      // while-condition  =>  TRUE
[21:28:58.449]      // while "1"  (timeout="200")
[21:28:58.450]      // while-condition  =>  TRUE
[21:28:58.450]      // while "1"  (timeout="200")
[21:28:58.450]      // while-condition  =>  TRUE
[21:28:58.450]      // while "1"  (timeout="200")
[21:28:58.450]      // while-condition  =>  TRUE
[21:28:58.450]      // while "1"  (timeout="200")
[21:28:58.450]      // while-condition  =>  TRUE
[21:28:58.450]      // while "1"  (timeout="200")
[21:28:58.450]      // while-condition  =>  TRUE
[21:28:58.450]      // while "1"  (timeout="200")
[21:28:58.450]      // while-condition  =>  TRUE
[21:28:58.451]      // while "1"  (timeout="200")
[21:28:58.451]      // while-condition  =>  TRUE
[21:28:58.451]      // while "1"  (timeout="200")
[21:28:58.451]      // while-condition  =>  TRUE
[21:28:58.451]      // while "1"  (timeout="200")
[21:28:58.451]      // while-condition  =>  TRUE
[21:28:58.451]      // while "1"  (timeout="200")
[21:28:58.451]      // while-condition  =>  TRUE
[21:28:58.451]      // while "1"  (timeout="200")
[21:28:58.451]      // while-condition  =>  TRUE
[21:28:58.451]      // while "1"  (timeout="200")
[21:28:58.452]      // while-condition  =>  TRUE
[21:28:58.452]      // while "1"  (timeout="200")
[21:28:58.452]      // while-condition  =>  TRUE
[21:28:58.452]      // while "1"  (timeout="200")
[21:28:58.452]      // while-condition  =>  TRUE
[21:28:58.452]      // while "1"  (timeout="200")
[21:28:58.452]      // while-condition  =>  TRUE
[21:28:58.452]      // while "1"  (timeout="200")
[21:28:58.453]      // while-condition  =>  TRUE
[21:28:58.453]      // while "1"  (timeout="200")
[21:28:58.453]      // while-condition  =>  TRUE
[21:28:58.453]      // while "1"  (timeout="200")
[21:28:58.453]      // while-condition  =>  TRUE
[21:28:58.453]      // while "1"  (timeout="200")
[21:28:58.453]      // while-condition  =>  TRUE
[21:28:58.453]      // while "1"  (timeout="200")
[21:28:58.453]      // while-condition  =>  TRUE
[21:28:58.454]      // while "1"  (timeout="200")
[21:28:58.454]      // while-condition  =>  TRUE
[21:28:58.454]      // while "1"  (timeout="200")
[21:28:58.454]      // while-condition  =>  TRUE
[21:28:58.454]      // while "1"  (timeout="200")
[21:28:58.454]      // while-condition  =>  TRUE
[21:28:58.454]      // while "1"  (timeout="200")
[21:28:58.454]      // while-condition  =>  TRUE
[21:28:58.454]      // while "1"  (timeout="200")
[21:28:58.454]      // while-condition  =>  TRUE
[21:28:58.454]      // while "1"  (timeout="200")
[21:28:58.455]      // while-condition  =>  TRUE
[21:28:58.455]      // while "1"  (timeout="200")
[21:28:58.455]      // while-condition  =>  TRUE
[21:28:58.455]      // while "1"  (timeout="200")
[21:28:58.455]      // while-condition  =>  TRUE
[21:28:58.455]      // while "1"  (timeout="200")
[21:28:58.455]      // while-condition  =>  TRUE
[21:28:58.455]      // while "1"  (timeout="200")
[21:28:58.455]      // while-condition  =>  TRUE
[21:28:58.455]      // while "1"  (timeout="200")
[21:28:58.455]      // while-condition  =>  TRUE
[21:28:58.456]      // while "1"  (timeout="200")
[21:28:58.456]      // while-condition  =>  TRUE
[21:28:58.456]      // while "1"  (timeout="200")
[21:28:58.456]      // while-condition  =>  TRUE
[21:28:58.456]      // while "1"  (timeout="200")
[21:28:58.456]      // while-condition  =>  TRUE
[21:28:58.456]      // while "1"  (timeout="200")
[21:28:58.456]      // while-condition  =>  TRUE
[21:28:58.456]      // while "1"  (timeout="200")
[21:28:58.457]      // while-condition  =>  TRUE
[21:28:58.457]      // while "1"  (timeout="200")
[21:28:58.457]      // while-condition  =>  TRUE
[21:28:58.457]      // while "1"  (timeout="200")
[21:28:58.457]      // while-condition  =>  TRUE
[21:28:58.457]      // while "1"  (timeout="200")
[21:28:58.457]      // while-condition  =>  TRUE
[21:28:58.457]      // while "1"  (timeout="200")
[21:28:58.457]      // while-condition  =>  TRUE
[21:28:58.457]      // while "1"  (timeout="200")
[21:28:58.457]      // while-condition  =>  TRUE
[21:28:58.457]      // while "1"  (timeout="200")
[21:28:58.457]      // while-condition  =>  TRUE
[21:28:58.457]      // while "1"  (timeout="200")
[21:28:58.457]      // while-condition  =>  TRUE
[21:28:58.459]      // while "1"  (timeout="200")
[21:28:58.459]      // while  =>  TIMEOUT
[21:28:58.459]      // end while "1"
[21:28:58.459]    </control>
[21:28:58.459]    <control if="canReadPins" while="" timeout="0" info="">
[21:28:58.459]      // if-block "canReadPins"
[21:28:58.459]        // =>  TRUE
[21:28:58.459]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:28:58.459]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:28:58.460]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:28:58.460]        // while-condition  =>  FALSE
[21:28:58.460]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:28:58.461]      </control>
[21:28:58.461]      // end if-block "canReadPins"
[21:28:58.461]    </control>
[21:28:58.461]    <control if="!canReadPins" while="" timeout="0" info="">
[21:28:58.461]      // if-block "!canReadPins"
[21:28:58.461]        // =>  FALSE
[21:28:58.461]      // skip if-block "!canReadPins"
[21:28:58.461]    </control>
[21:28:58.461]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:28:58.461]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:28:58.461]        // =>  TRUE
[21:28:58.461]      <block atomic="false" info="">
[21:28:58.462]        WriteAP(0x00, 0x190008);
[21:28:58.463]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:28:58.463]        WriteAP(0xF0, 0x01);
[21:28:58.464]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:28:58.464]      </block>
[21:28:58.464]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:28:58.464]    </control>
[21:28:58.464]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:28:58.464]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:28:58.464]        // =>  FALSE
[21:28:58.464]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:28:58.464]    </control>
[21:28:58.464]    <block atomic="false" info="">
[21:28:58.465]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:28:58.466]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:28:58.466]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:28:58.466]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:28:58.467]      __ap = 0; //lets make sure we reset the access point selection
[21:28:58.467]        // -> [__ap <= 0x00000000]
[21:28:58.467]    </block>
[21:28:58.467]  </sequence>
[21:28:58.467]  
[21:28:58.475]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:28:58.475]  
[21:28:58.475]  <debugvars>
[21:28:58.475]    // Pre-defined
[21:28:58.475]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:28:58.476]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:28:58.476]    __dp=0x00000000
[21:28:58.476]    __ap=0x00000000
[21:28:58.476]    __traceout=0x00000000      (Trace Disabled)
[21:28:58.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:28:58.476]    __FlashAddr=0x00000000
[21:28:58.476]    __FlashLen=0x00000000
[21:28:58.476]    __FlashArg=0x00000000
[21:28:58.477]    __FlashOp=0x00000000
[21:28:58.477]    __Result=0x00000000
[21:28:58.477]  </debugvars>
[21:28:58.477]  
[21:28:58.477]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:28:58.477]    <block atomic="false" info="">
[21:28:58.477]      __var deviceID = 0;
[21:28:58.477]        // -> [deviceID <= 0x00000000]
[21:28:58.477]      __var version = 0;
[21:28:58.477]        // -> [version <= 0x00000000]
[21:28:58.478]      __var partNum = 0;
[21:28:58.478]        // -> [partNum <= 0x00000000]
[21:28:58.478]      __var manuf = 0;
[21:28:58.478]        // -> [manuf <= 0x00000000]
[21:28:58.478]      __var isMSPM0G1X0X_G3X0X = 0;
[21:28:58.478]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:28:58.478]      __var isProduction = 0;
[21:28:58.478]        // -> [isProduction <= 0x00000000]
[21:28:58.478]      __var continueId = 0;
[21:28:58.479]        // -> [continueId <= 0x00000000]
[21:28:58.479]      deviceID =   Read32(0x41C40004);
[21:28:58.480]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:28:58.480]        // -> [deviceID <= 0x2BB8802F]
[21:28:58.480]      version = deviceID >> 28;
[21:28:58.480]        // -> [version <= 0x00000002]
[21:28:58.481]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:28:58.481]        // -> [partNum <= 0x0000BB88]
[21:28:58.481]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:28:58.481]        // -> [manuf <= 0x00000017]
[21:28:58.481]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:28:58.481]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:28:58.482]      isProduction = (version > 0);
[21:28:58.482]        // -> [isProduction <= 0x00000001]
[21:28:58.482]    </block>
[21:28:58.482]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:28:58.482]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:28:58.482]        // =>  FALSE
[21:28:58.482]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:28:58.483]    </control>
[21:28:58.483]    <control if="continueId == 4" while="" timeout="0" info="">
[21:28:58.483]      // if-block "continueId == 4"
[21:28:58.483]        // =>  FALSE
[21:28:58.483]      // skip if-block "continueId == 4"
[21:28:58.483]    </control>
[21:28:58.483]    <control if="!isProduction" while="" timeout="0" info="">
[21:28:58.484]      // if-block "!isProduction"
[21:28:58.484]        // =>  FALSE
[21:28:58.484]      // skip if-block "!isProduction"
[21:28:58.484]    </control>
[21:28:58.484]  </sequence>
[21:28:58.484]  
[21:32:37.960]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[21:32:37.960]  
[21:32:37.969]  <debugvars>
[21:32:37.969]    // Pre-defined
[21:32:37.969]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:32:37.969]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:32:37.969]    __dp=0x00000000
[21:32:37.969]    __ap=0x00000000
[21:32:37.969]    __traceout=0x00000000      (Trace Disabled)
[21:32:37.969]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:32:37.970]    __FlashAddr=0x00000000
[21:32:37.970]    __FlashLen=0x00000000
[21:32:37.970]    __FlashArg=0x00000000
[21:32:37.970]    __FlashOp=0x00000000
[21:32:37.970]    __Result=0x00000000
[21:32:37.970]  </debugvars>
[21:32:37.970]  
[21:32:37.970]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[21:32:37.970]    <block atomic="false" info="">
[21:32:37.970]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[21:32:37.970]        // -> [isSWJ <= 0x00000001]
[21:32:37.970]      __var hasDormant = __protocol & 0x00020000;
[21:32:37.970]        // -> [hasDormant <= 0x00000000]
[21:32:37.971]      __var protType   = __protocol & 0x0000FFFF;
[21:32:37.971]        // -> [protType <= 0x00000002]
[21:32:37.971]    </block>
[21:32:37.971]    <control if="protType == 1" while="" timeout="0" info="">
[21:32:37.971]      // if-block "protType == 1"
[21:32:37.971]        // =>  FALSE
[21:32:37.972]      // skip if-block "protType == 1"
[21:32:37.972]    </control>
[21:32:37.972]    <control if="protType == 2" while="" timeout="0" info="">
[21:32:37.972]      // if-block "protType == 2"
[21:32:37.972]        // =>  TRUE
[21:32:37.972]      <control if="isSWJ" while="" timeout="0" info="">
[21:32:37.972]        // if-block "isSWJ"
[21:32:37.972]          // =>  TRUE
[21:32:37.972]        <control if="hasDormant" while="" timeout="0" info="">
[21:32:37.972]          // if-block "hasDormant"
[21:32:37.972]            // =>  FALSE
[21:32:37.973]          // skip if-block "hasDormant"
[21:32:37.973]        </control>
[21:32:37.973]        <control if="!hasDormant" while="" timeout="0" info="">
[21:32:37.973]          // if-block "!hasDormant"
[21:32:37.973]            // =>  TRUE
[21:32:37.973]          <block atomic="false" info="">
[21:32:37.973]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[21:32:37.974]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:32:37.974]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[21:32:37.974]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[21:32:37.974]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[21:32:37.975]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:32:37.975]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[21:32:37.975]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[21:32:37.975]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[21:32:37.976]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[21:32:37.976]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[21:32:37.976]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[21:32:37.976]          </block>
[21:32:37.976]          // end if-block "!hasDormant"
[21:32:37.977]        </control>
[21:32:37.977]        // end if-block "isSWJ"
[21:32:37.977]      </control>
[21:32:37.977]      <control if="!isSWJ" while="" timeout="0" info="">
[21:32:37.977]        // if-block "!isSWJ"
[21:32:37.977]          // =>  FALSE
[21:32:37.977]        // skip if-block "!isSWJ"
[21:32:37.977]      </control>
[21:32:37.977]      <block atomic="false" info="">
[21:32:37.977]        ReadDP(0x0);
[21:32:37.977]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[21:32:37.977]      </block>
[21:32:37.977]      // end if-block "protType == 2"
[21:32:37.977]    </control>
[21:32:37.979]  </sequence>
[21:32:37.979]  
[21:32:37.980]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[21:32:37.980]  
[21:32:37.980]  <debugvars>
[21:32:37.980]    // Pre-defined
[21:32:37.980]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:32:37.980]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:32:37.980]    __dp=0x00000000
[21:32:37.980]    __ap=0x00000000
[21:32:37.980]    __traceout=0x00000000      (Trace Disabled)
[21:32:37.980]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:32:37.980]    __FlashAddr=0x00000000
[21:32:37.981]    __FlashLen=0x00000000
[21:32:37.981]    __FlashArg=0x00000000
[21:32:37.981]    __FlashOp=0x00000000
[21:32:37.981]    __Result=0x00000000
[21:32:37.981]  </debugvars>
[21:32:37.981]  
[21:32:37.981]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[21:32:37.981]    <block atomic="false" info="">
[21:32:37.981]      __var SW_DP_ABORT       = 0x0;
[21:32:37.981]        // -> [SW_DP_ABORT <= 0x00000000]
[21:32:37.981]      __var DP_CTRL_STAT      = 0x4;
[21:32:37.982]        // -> [DP_CTRL_STAT <= 0x00000004]
[21:32:37.982]      __var DP_SELECT         = 0x8;
[21:32:37.982]        // -> [DP_SELECT <= 0x00000008]
[21:32:37.982]      __var powered_down      = 0;
[21:32:37.982]        // -> [powered_down <= 0x00000000]
[21:32:37.982]      WriteDP(DP_SELECT, 0x00000000);
[21:32:37.982]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[21:32:37.983]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[21:32:37.983]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[21:32:37.983]        // -> [powered_down <= 0x00000001]
[21:32:37.983]    </block>
[21:32:37.983]    <control if="powered_down" while="" timeout="0" info="">
[21:32:37.983]      // if-block "powered_down"
[21:32:37.983]        // =>  TRUE
[21:32:37.983]      <block atomic="false" info="">
[21:32:37.984]        Message(0, "Debug/System power-up request sent");
[21:32:37.985]        WriteDP(DP_CTRL_STAT, 0x50000000);
[21:32:37.987]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[21:32:37.987]      </block>
[21:32:37.987]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[21:32:37.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[21:32:37.987]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[21:32:37.987]        // while-condition  =>  FALSE
[21:32:37.988]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[21:32:37.988]      </control>
[21:32:37.988]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[21:32:37.988]        // if-block "(__protocol & 0xFFFF) == 1"
[21:32:37.988]          // =>  FALSE
[21:32:37.988]        // skip if-block "(__protocol & 0xFFFF) == 1"
[21:32:37.988]      </control>
[21:32:37.988]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[21:32:37.988]        // if-block "(__protocol & 0xFFFF) == 2"
[21:32:37.989]          // =>  TRUE
[21:32:37.989]        <block atomic="false" info="">
[21:32:37.989]          Message(0, "executing SWD power up");
[21:32:37.990]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[21:32:37.990]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[21:32:37.991]          WriteDP(SW_DP_ABORT, 0x0000001E);
[21:32:37.991]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[21:32:37.991]        </block>
[21:32:37.991]        // end if-block "(__protocol & 0xFFFF) == 2"
[21:32:37.991]      </control>
[21:32:37.992]      // end if-block "powered_down"
[21:32:37.992]    </control>
[21:32:37.992]    <block atomic="false" info="">
[21:32:37.992]      __var DEBUG_PORT_VAL    = 0;
[21:32:37.992]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[21:32:37.992]      __var ACCESS_POINT_VAL  = 0;
[21:32:37.992]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[21:32:37.992]      __ap = 1; 
[21:32:37.992]        // -> [__ap <= 0x00000001]
[21:32:37.992]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[21:32:37.993]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[21:32:37.994]      __ap = 4;
[21:32:37.994]        // -> [__ap <= 0x00000004]
[21:32:37.994]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:32:37.995]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[21:32:37.995]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[21:32:37.995]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:32:37.997]    </block>
[21:32:37.997]    <block atomic="false" info="">
[21:32:37.997]      __var nReset = 0x80;
[21:32:37.997]        // -> [nReset <= 0x00000080]
[21:32:37.997]      __var canReadPins = 0;
[21:32:37.997]        // -> [canReadPins <= 0x00000000]
[21:32:37.997]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[21:32:37.997]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[21:32:37.997]        // -> [canReadPins <= 0x00000001]
[21:32:37.997]    </block>
[21:32:37.999]    <control if="" while="1" timeout="200" info="">
[21:32:37.999]      // while "1"  (timeout="200")
[21:32:37.999]      // while-condition  =>  TRUE
[21:32:37.999]      // while "1"  (timeout="200")
[21:32:37.999]      // while-condition  =>  TRUE
[21:32:37.999]      // while "1"  (timeout="200")
[21:32:37.999]      // while-condition  =>  TRUE
[21:32:37.999]      // while "1"  (timeout="200")
[21:32:37.999]      // while-condition  =>  TRUE
[21:32:37.999]      // while "1"  (timeout="200")
[21:32:38.000]      // while-condition  =>  TRUE
[21:32:38.000]      // while "1"  (timeout="200")
[21:32:38.000]      // while-condition  =>  TRUE
[21:32:38.000]      // while "1"  (timeout="200")
[21:32:38.000]      // while-condition  =>  TRUE
[21:32:38.000]      // while "1"  (timeout="200")
[21:32:38.000]      // while-condition  =>  TRUE
[21:32:38.000]      // while "1"  (timeout="200")
[21:32:38.000]      // while-condition  =>  TRUE
[21:32:38.000]      // while "1"  (timeout="200")
[21:32:38.000]      // while-condition  =>  TRUE
[21:32:38.000]      // while "1"  (timeout="200")
[21:32:38.000]      // while-condition  =>  TRUE
[21:32:38.000]      // while "1"  (timeout="200")
[21:32:38.000]      // while-condition  =>  TRUE
[21:32:38.002]      // while "1"  (timeout="200")
[21:32:38.002]      // while-condition  =>  TRUE
[21:32:38.002]      // while "1"  (timeout="200")
[21:32:38.002]      // while-condition  =>  TRUE
[21:32:38.002]      // while "1"  (timeout="200")
[21:32:38.002]      // while-condition  =>  TRUE
[21:32:38.003]      // while "1"  (timeout="200")
[21:32:38.003]      // while-condition  =>  TRUE
[21:32:38.003]      // while "1"  (timeout="200")
[21:32:38.003]      // while-condition  =>  TRUE
[21:32:38.003]      // while "1"  (timeout="200")
[21:32:38.003]      // while-condition  =>  TRUE
[21:32:38.003]      // while "1"  (timeout="200")
[21:32:38.003]      // while-condition  =>  TRUE
[21:32:38.003]      // while "1"  (timeout="200")
[21:32:38.003]      // while-condition  =>  TRUE
[21:32:38.003]      // while "1"  (timeout="200")
[21:32:38.003]      // while-condition  =>  TRUE
[21:32:38.004]      // while "1"  (timeout="200")
[21:32:38.004]      // while-condition  =>  TRUE
[21:32:38.004]      // while "1"  (timeout="200")
[21:32:38.004]      // while-condition  =>  TRUE
[21:32:38.004]      // while "1"  (timeout="200")
[21:32:38.004]      // while-condition  =>  TRUE
[21:32:38.004]      // while "1"  (timeout="200")
[21:32:38.004]      // while-condition  =>  TRUE
[21:32:38.004]      // while "1"  (timeout="200")
[21:32:38.004]      // while-condition  =>  TRUE
[21:32:38.004]      // while "1"  (timeout="200")
[21:32:38.005]      // while-condition  =>  TRUE
[21:32:38.005]      // while "1"  (timeout="200")
[21:32:38.005]      // while-condition  =>  TRUE
[21:32:38.005]      // while "1"  (timeout="200")
[21:32:38.005]      // while-condition  =>  TRUE
[21:32:38.005]      // while "1"  (timeout="200")
[21:32:38.006]      // while-condition  =>  TRUE
[21:32:38.006]      // while "1"  (timeout="200")
[21:32:38.006]      // while  =>  TIMEOUT
[21:32:38.006]      // end while "1"
[21:32:38.006]    </control>
[21:32:38.006]    <control if="canReadPins" while="" timeout="0" info="">
[21:32:38.006]      // if-block "canReadPins"
[21:32:38.006]        // =>  TRUE
[21:32:38.007]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[21:32:38.007]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[21:32:38.007]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[21:32:38.007]        // while-condition  =>  FALSE
[21:32:38.007]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[21:32:38.007]      </control>
[21:32:38.007]      // end if-block "canReadPins"
[21:32:38.008]    </control>
[21:32:38.008]    <control if="!canReadPins" while="" timeout="0" info="">
[21:32:38.008]      // if-block "!canReadPins"
[21:32:38.008]        // =>  FALSE
[21:32:38.008]      // skip if-block "!canReadPins"
[21:32:38.008]    </control>
[21:32:38.008]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[21:32:38.008]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:32:38.008]        // =>  TRUE
[21:32:38.008]      <block atomic="false" info="">
[21:32:38.009]        WriteAP(0x00, 0x190008);
[21:32:38.009]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[21:32:38.009]        WriteAP(0xF0, 0x01);
[21:32:38.011]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[21:32:38.011]      </block>
[21:32:38.011]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[21:32:38.011]    </control>
[21:32:38.011]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[21:32:38.011]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:32:38.011]        // =>  FALSE
[21:32:38.011]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[21:32:38.011]    </control>
[21:32:38.011]    <block atomic="false" info="">
[21:32:38.011]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[21:32:38.013]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[21:32:38.013]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[21:32:38.013]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[21:32:38.014]      __ap = 0; //lets make sure we reset the access point selection
[21:32:38.014]        // -> [__ap <= 0x00000000]
[21:32:38.014]    </block>
[21:32:38.014]  </sequence>
[21:32:38.015]  
[21:32:38.021]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[21:32:38.021]  
[21:32:38.021]  <debugvars>
[21:32:38.021]    // Pre-defined
[21:32:38.021]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[21:32:38.021]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[21:32:38.021]    __dp=0x00000000
[21:32:38.021]    __ap=0x00000000
[21:32:38.021]    __traceout=0x00000000      (Trace Disabled)
[21:32:38.021]    __errorcontrol=0x00000000  (Skip Errors="False")
[21:32:38.021]    __FlashAddr=0x00000000
[21:32:38.022]    __FlashLen=0x00000000
[21:32:38.022]    __FlashArg=0x00000000
[21:32:38.022]    __FlashOp=0x00000000
[21:32:38.022]    __Result=0x00000000
[21:32:38.022]  </debugvars>
[21:32:38.022]  
[21:32:38.022]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[21:32:38.023]    <block atomic="false" info="">
[21:32:38.023]      __var deviceID = 0;
[21:32:38.023]        // -> [deviceID <= 0x00000000]
[21:32:38.023]      __var version = 0;
[21:32:38.024]        // -> [version <= 0x00000000]
[21:32:38.024]      __var partNum = 0;
[21:32:38.024]        // -> [partNum <= 0x00000000]
[21:32:38.024]      __var manuf = 0;
[21:32:38.024]        // -> [manuf <= 0x00000000]
[21:32:38.024]      __var isMSPM0G1X0X_G3X0X = 0;
[21:32:38.024]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[21:32:38.024]      __var isProduction = 0;
[21:32:38.024]        // -> [isProduction <= 0x00000000]
[21:32:38.024]      __var continueId = 0;
[21:32:38.024]        // -> [continueId <= 0x00000000]
[21:32:38.024]      deviceID =   Read32(0x41C40004);
[21:32:38.026]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[21:32:38.026]        // -> [deviceID <= 0x2BB8802F]
[21:32:38.026]      version = deviceID >> 28;
[21:32:38.026]        // -> [version <= 0x00000002]
[21:32:38.026]      partNum = (deviceID & 0x0FFFF000) >> 12;
[21:32:38.026]        // -> [partNum <= 0x0000BB88]
[21:32:38.026]      manuf = (deviceID & 0x00000FFE) >> 1;
[21:32:38.027]        // -> [manuf <= 0x00000017]
[21:32:38.027]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[21:32:38.027]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[21:32:38.027]      isProduction = (version > 0);
[21:32:38.027]        // -> [isProduction <= 0x00000001]
[21:32:38.028]    </block>
[21:32:38.028]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[21:32:38.028]      // if-block "!isMSPM0G1X0X_G3X0X"
[21:32:38.028]        // =>  FALSE
[21:32:38.028]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[21:32:38.028]    </control>
[21:32:38.028]    <control if="continueId == 4" while="" timeout="0" info="">
[21:32:38.028]      // if-block "continueId == 4"
[21:32:38.028]        // =>  FALSE
[21:32:38.028]      // skip if-block "continueId == 4"
[21:32:38.028]    </control>
[21:32:38.029]    <control if="!isProduction" while="" timeout="0" info="">
[21:32:38.029]      // if-block "!isProduction"
[21:32:38.029]        // =>  FALSE
[21:32:38.029]      // skip if-block "!isProduction"
[21:32:38.029]    </control>
[21:32:38.029]  </sequence>
[21:32:38.029]  
