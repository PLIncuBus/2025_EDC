/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0033.log
 *  Created     : 12:31:54 (29/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[12:31:54.545]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:31:54.545]  
[12:31:54.545]  <debugvars>
[12:31:54.545]    // Pre-defined
[12:31:54.545]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:31:54.545]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:31:54.545]    __dp=0x00000000
[12:31:54.545]    __ap=0x00000000
[12:31:54.545]    __traceout=0x00000000      (Trace Disabled)
[12:31:54.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:31:54.553]    __FlashAddr=0x00000000
[12:31:54.553]    __FlashLen=0x00000000
[12:31:54.553]    __FlashArg=0x00000000
[12:31:54.553]    __FlashOp=0x00000000
[12:31:54.553]    __Result=0x00000000
[12:31:54.553]  </debugvars>
[12:31:54.553]  
[12:31:54.553]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:31:54.553]    <block atomic="false" info="">
[12:31:54.553]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:31:54.553]        // -> [isSWJ <= 0x00000001]
[12:31:54.553]      __var hasDormant = __protocol & 0x00020000;
[12:31:54.553]        // -> [hasDormant <= 0x00000000]
[12:31:54.553]      __var protType   = __protocol & 0x0000FFFF;
[12:31:54.553]        // -> [protType <= 0x00000002]
[12:31:54.553]    </block>
[12:31:54.553]    <control if="protType == 1" while="" timeout="0" info="">
[12:31:54.553]      // if-block "protType == 1"
[12:31:54.553]        // =>  FALSE
[12:31:54.553]      // skip if-block "protType == 1"
[12:31:54.553]    </control>
[12:31:54.553]    <control if="protType == 2" while="" timeout="0" info="">
[12:31:54.553]      // if-block "protType == 2"
[12:31:54.553]        // =>  TRUE
[12:31:54.553]      <control if="isSWJ" while="" timeout="0" info="">
[12:31:54.553]        // if-block "isSWJ"
[12:31:54.553]          // =>  TRUE
[12:31:54.553]        <control if="hasDormant" while="" timeout="0" info="">
[12:31:54.553]          // if-block "hasDormant"
[12:31:54.553]            // =>  FALSE
[12:31:54.553]          // skip if-block "hasDormant"
[12:31:54.553]        </control>
[12:31:54.553]        <control if="!hasDormant" while="" timeout="0" info="">
[12:31:54.553]          // if-block "!hasDormant"
[12:31:54.553]            // =>  TRUE
[12:31:54.553]          <block atomic="false" info="">
[12:31:54.553]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:31:54.553]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:31:54.553]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:31:54.574]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:31:54.574]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:31:54.594]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:31:54.594]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:31:54.594]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:31:54.594]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:31:54.597]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:31:54.597]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:31:54.616]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:31:54.616]          </block>
[12:31:54.616]          // end if-block "!hasDormant"
[12:31:54.616]        </control>
[12:31:54.619]        // end if-block "isSWJ"
[12:31:54.619]      </control>
[12:31:54.619]      <control if="!isSWJ" while="" timeout="0" info="">
[12:31:54.619]        // if-block "!isSWJ"
[12:31:54.619]          // =>  FALSE
[12:31:54.619]        // skip if-block "!isSWJ"
[12:31:54.619]      </control>
[12:31:54.619]      <block atomic="false" info="">
[12:31:54.619]        ReadDP(0x0);
[12:31:54.620]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:31:54.620]      </block>
[12:31:54.622]      // end if-block "protType == 2"
[12:31:54.622]    </control>
[12:31:54.622]  </sequence>
[12:31:54.622]  
[12:31:54.654]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:31:54.654]  
[12:31:54.654]  <debugvars>
[12:31:54.654]    // Pre-defined
[12:31:54.654]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:31:54.654]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:31:54.654]    __dp=0x00000000
[12:31:54.654]    __ap=0x00000000
[12:31:54.654]    __traceout=0x00000000      (Trace Disabled)
[12:31:54.654]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:31:54.654]    __FlashAddr=0x00000000
[12:31:54.654]    __FlashLen=0x00000000
[12:31:54.654]    __FlashArg=0x00000000
[12:31:54.654]    __FlashOp=0x00000000
[12:31:54.654]    __Result=0x00000000
[12:31:54.664]  </debugvars>
[12:31:54.664]  
[12:31:54.664]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:31:54.664]    <block atomic="false" info="">
[12:31:54.664]      __var SW_DP_ABORT       = 0x0;
[12:31:54.664]        // -> [SW_DP_ABORT <= 0x00000000]
[12:31:54.664]      __var DP_CTRL_STAT      = 0x4;
[12:31:54.664]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:31:54.664]      __var DP_SELECT         = 0x8;
[12:31:54.664]        // -> [DP_SELECT <= 0x00000008]
[12:31:54.664]      __var powered_down      = 0;
[12:31:54.664]        // -> [powered_down <= 0x00000000]
[12:31:54.664]      WriteDP(DP_SELECT, 0x00000000);
[12:31:54.664]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:31:54.664]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:31:54.681]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:31:54.681]        // -> [powered_down <= 0x00000001]
[12:31:54.681]    </block>
[12:31:54.681]    <control if="powered_down" while="" timeout="0" info="">
[12:31:54.681]      // if-block "powered_down"
[12:31:54.681]        // =>  TRUE
[12:31:54.681]      <block atomic="false" info="">
[12:31:54.684]        Message(0, "Debug/System power-up request sent");
[12:31:54.684]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:31:54.696]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:31:54.696]      </block>
[12:31:54.696]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:31:54.696]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:31:54.696]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:31:54.696]        // while-condition  =>  FALSE
[12:31:54.696]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:31:54.696]      </control>
[12:31:54.696]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:31:54.696]        // if-block "(__protocol & 0xFFFF) == 1"
[12:31:54.696]          // =>  FALSE
[12:31:54.696]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:31:54.696]      </control>
[12:31:54.696]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:31:54.696]        // if-block "(__protocol & 0xFFFF) == 2"
[12:31:54.696]          // =>  TRUE
[12:31:54.696]        <block atomic="false" info="">
[12:31:54.696]          Message(0, "executing SWD power up");
[12:31:54.696]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:31:54.704]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:31:54.704]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:31:54.714]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:31:54.714]        </block>
[12:31:54.714]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:31:54.714]      </control>
[12:31:54.714]      // end if-block "powered_down"
[12:31:54.714]    </control>
[12:31:54.714]    <block atomic="false" info="">
[12:31:54.714]      __var DEBUG_PORT_VAL    = 0;
[12:31:54.714]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:31:54.714]      __var ACCESS_POINT_VAL  = 0;
[12:31:54.714]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:31:54.714]      __ap = 1; 
[12:31:54.714]        // -> [__ap <= 0x00000001]
[12:31:54.714]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:31:54.724]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:31:54.724]      __ap = 4;
[12:31:54.724]        // -> [__ap <= 0x00000004]
[12:31:54.724]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:31:54.734]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:31:54.734]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:31:54.734]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:31:54.734]    </block>
[12:31:54.734]    <block atomic="false" info="">
[12:31:54.734]      __var nReset = 0x80;
[12:31:54.734]        // -> [nReset <= 0x00000080]
[12:31:54.734]      __var canReadPins = 0;
[12:31:54.734]        // -> [canReadPins <= 0x00000000]
[12:31:54.734]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:31:54.744]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:31:54.744]        // -> [canReadPins <= 0x00000001]
[12:31:54.744]    </block>
[12:31:54.744]    <control if="" while="1" timeout="200" info="">
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.744]      // while "1"  (timeout="200")
[12:31:54.744]      // while-condition  =>  TRUE
[12:31:54.754]      // while "1"  (timeout="200")
[12:31:54.754]      // while  =>  TIMEOUT
[12:31:54.755]      // end while "1"
[12:31:54.755]    </control>
[12:31:54.755]    <control if="canReadPins" while="" timeout="0" info="">
[12:31:54.755]      // if-block "canReadPins"
[12:31:54.755]        // =>  TRUE
[12:31:54.755]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:31:54.755]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:31:54.756]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:31:54.756]        // while-condition  =>  FALSE
[12:31:54.756]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:31:54.756]      </control>
[12:31:54.756]      // end if-block "canReadPins"
[12:31:54.756]    </control>
[12:31:54.756]    <control if="!canReadPins" while="" timeout="0" info="">
[12:31:54.756]      // if-block "!canReadPins"
[12:31:54.756]        // =>  FALSE
[12:31:54.756]      // skip if-block "!canReadPins"
[12:31:54.756]    </control>
[12:31:54.756]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:31:54.756]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:31:54.756]        // =>  TRUE
[12:31:54.756]      <block atomic="false" info="">
[12:31:54.756]        WriteAP(0x00, 0x190008);
[12:31:54.775]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:31:54.775]        WriteAP(0xF0, 0x01);
[12:31:54.815]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:31:54.815]      </block>
[12:31:54.815]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:31:54.815]    </control>
[12:31:54.815]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:31:54.815]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:31:54.815]        // =>  FALSE
[12:31:54.815]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:31:54.815]    </control>
[12:31:54.815]    <block atomic="false" info="">
[12:31:54.815]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:31:54.845]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:31:54.845]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:31:54.845]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:31:54.845]      __ap = 0; //lets make sure we reset the access point selection
[12:31:54.845]        // -> [__ap <= 0x00000000]
[12:31:54.845]    </block>
[12:31:54.845]  </sequence>
[12:31:54.845]  
[12:31:55.135]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:31:55.135]  
[12:31:55.135]  <debugvars>
[12:31:55.135]    // Pre-defined
[12:31:55.135]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:31:55.135]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:31:55.135]    __dp=0x00000000
[12:31:55.135]    __ap=0x00000000
[12:31:55.135]    __traceout=0x00000000      (Trace Disabled)
[12:31:55.135]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:31:55.135]    __FlashAddr=0x00000000
[12:31:55.135]    __FlashLen=0x00000000
[12:31:55.135]    __FlashArg=0x00000000
[12:31:55.135]    __FlashOp=0x00000000
[12:31:55.135]    __Result=0x00000000
[12:31:55.135]  </debugvars>
[12:31:55.135]  
[12:31:55.135]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:31:55.145]    <block atomic="false" info="">
[12:31:55.145]      __var deviceID = 0;
[12:31:55.145]        // -> [deviceID <= 0x00000000]
[12:31:55.145]      __var version = 0;
[12:31:55.145]        // -> [version <= 0x00000000]
[12:31:55.145]      __var partNum = 0;
[12:31:55.145]        // -> [partNum <= 0x00000000]
[12:31:55.145]      __var manuf = 0;
[12:31:55.145]        // -> [manuf <= 0x00000000]
[12:31:55.145]      __var isMSPM0G1X0X_G3X0X = 0;
[12:31:55.145]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:31:55.145]      __var isProduction = 0;
[12:31:55.145]        // -> [isProduction <= 0x00000000]
[12:31:55.145]      __var continueId = 0;
[12:31:55.145]        // -> [continueId <= 0x00000000]
[12:31:55.145]      deviceID =   Read32(0x41C40004);
[12:31:55.181]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:31:55.181]        // -> [deviceID <= 0x2BB8802F]
[12:31:55.181]      version = deviceID >> 28;
[12:31:55.181]        // -> [version <= 0x00000002]
[12:31:55.181]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:31:55.181]        // -> [partNum <= 0x0000BB88]
[12:31:55.181]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:31:55.181]        // -> [manuf <= 0x00000017]
[12:31:55.181]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:31:55.181]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:31:55.181]      isProduction = (version > 0);
[12:31:55.181]        // -> [isProduction <= 0x00000001]
[12:31:55.181]    </block>
[12:31:55.186]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:31:55.186]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:31:55.186]        // =>  FALSE
[12:31:55.186]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:31:55.186]    </control>
[12:31:55.187]    <control if="continueId == 4" while="" timeout="0" info="">
[12:31:55.187]      // if-block "continueId == 4"
[12:31:55.187]        // =>  FALSE
[12:31:55.187]      // skip if-block "continueId == 4"
[12:31:55.187]    </control>
[12:31:55.187]    <control if="!isProduction" while="" timeout="0" info="">
[12:31:55.187]      // if-block "!isProduction"
[12:31:55.187]        // =>  FALSE
[12:31:55.187]      // skip if-block "!isProduction"
[12:31:55.187]    </control>
[12:31:55.187]  </sequence>
[12:31:55.188]  
[12:32:15.616]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:32:15.616]  
[12:32:15.631]  <debugvars>
[12:32:15.631]    // Pre-defined
[12:32:15.631]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:32:15.631]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:32:15.631]    __dp=0x00000000
[12:32:15.631]    __ap=0x00000000
[12:32:15.631]    __traceout=0x00000000      (Trace Disabled)
[12:32:15.631]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:32:15.631]    __FlashAddr=0x00000000
[12:32:15.631]    __FlashLen=0x00000000
[12:32:15.631]    __FlashArg=0x00000000
[12:32:15.631]    __FlashOp=0x00000000
[12:32:15.631]    __Result=0x00000000
[12:32:15.631]  </debugvars>
[12:32:15.631]  
[12:32:15.631]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:32:15.631]    <block atomic="false" info="">
[12:32:15.631]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:32:15.631]        // -> [isSWJ <= 0x00000001]
[12:32:15.631]      __var hasDormant = __protocol & 0x00020000;
[12:32:15.631]        // -> [hasDormant <= 0x00000000]
[12:32:15.631]      __var protType   = __protocol & 0x0000FFFF;
[12:32:15.631]        // -> [protType <= 0x00000002]
[12:32:15.631]    </block>
[12:32:15.631]    <control if="protType == 1" while="" timeout="0" info="">
[12:32:15.631]      // if-block "protType == 1"
[12:32:15.631]        // =>  FALSE
[12:32:15.631]      // skip if-block "protType == 1"
[12:32:15.631]    </control>
[12:32:15.631]    <control if="protType == 2" while="" timeout="0" info="">
[12:32:15.631]      // if-block "protType == 2"
[12:32:15.631]        // =>  TRUE
[12:32:15.631]      <control if="isSWJ" while="" timeout="0" info="">
[12:32:15.631]        // if-block "isSWJ"
[12:32:15.631]          // =>  TRUE
[12:32:15.631]        <control if="hasDormant" while="" timeout="0" info="">
[12:32:15.631]          // if-block "hasDormant"
[12:32:15.631]            // =>  FALSE
[12:32:15.631]          // skip if-block "hasDormant"
[12:32:15.631]        </control>
[12:32:15.631]        <control if="!hasDormant" while="" timeout="0" info="">
[12:32:15.631]          // if-block "!hasDormant"
[12:32:15.631]            // =>  TRUE
[12:32:15.631]          <block atomic="false" info="">
[12:32:15.631]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:32:15.656]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:32:15.656]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:32:15.676]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:32:15.676]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:32:15.696]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:32:15.696]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:32:15.716]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:32:15.716]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:32:15.756]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:32:15.756]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:32:15.796]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:32:15.796]          </block>
[12:32:15.796]          // end if-block "!hasDormant"
[12:32:15.796]        </control>
[12:32:15.796]        // end if-block "isSWJ"
[12:32:15.796]      </control>
[12:32:15.796]      <control if="!isSWJ" while="" timeout="0" info="">
[12:32:15.796]        // if-block "!isSWJ"
[12:32:15.796]          // =>  FALSE
[12:32:15.796]        // skip if-block "!isSWJ"
[12:32:15.796]      </control>
[12:32:15.796]      <block atomic="false" info="">
[12:32:15.796]        ReadDP(0x0);
[12:32:15.826]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:32:15.826]      </block>
[12:32:15.826]      // end if-block "protType == 2"
[12:32:15.826]    </control>
[12:32:15.826]  </sequence>
[12:32:15.826]  
[12:32:15.836]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:32:15.836]  
[12:32:15.836]  <debugvars>
[12:32:15.836]    // Pre-defined
[12:32:15.836]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:32:15.836]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:32:15.836]    __dp=0x00000000
[12:32:15.836]    __ap=0x00000000
[12:32:15.836]    __traceout=0x00000000      (Trace Disabled)
[12:32:15.836]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:32:15.836]    __FlashAddr=0x00000000
[12:32:15.836]    __FlashLen=0x00000000
[12:32:15.836]    __FlashArg=0x00000000
[12:32:15.836]    __FlashOp=0x00000000
[12:32:15.836]    __Result=0x00000000
[12:32:15.836]  </debugvars>
[12:32:15.836]  
[12:32:15.836]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:32:15.836]    <block atomic="false" info="">
[12:32:15.836]      __var SW_DP_ABORT       = 0x0;
[12:32:15.836]        // -> [SW_DP_ABORT <= 0x00000000]
[12:32:15.836]      __var DP_CTRL_STAT      = 0x4;
[12:32:15.836]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:32:15.836]      __var DP_SELECT         = 0x8;
[12:32:15.836]        // -> [DP_SELECT <= 0x00000008]
[12:32:15.836]      __var powered_down      = 0;
[12:32:15.836]        // -> [powered_down <= 0x00000000]
[12:32:15.836]      WriteDP(DP_SELECT, 0x00000000);
[12:32:15.856]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:32:15.856]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:32:15.896]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:32:15.896]        // -> [powered_down <= 0x00000001]
[12:32:15.896]    </block>
[12:32:15.896]    <control if="powered_down" while="" timeout="0" info="">
[12:32:15.896]      // if-block "powered_down"
[12:32:15.896]        // =>  TRUE
[12:32:15.896]      <block atomic="false" info="">
[12:32:15.896]        Message(0, "Debug/System power-up request sent");
[12:32:15.906]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:32:15.906]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:32:15.906]      </block>
[12:32:15.906]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:32:15.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:32:15.961]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:32:15.961]        // while-condition  =>  FALSE
[12:32:15.961]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:32:15.961]      </control>
[12:32:15.961]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:32:15.961]        // if-block "(__protocol & 0xFFFF) == 1"
[12:32:15.961]          // =>  FALSE
[12:32:15.961]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:32:15.961]      </control>
[12:32:15.961]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:32:15.961]        // if-block "(__protocol & 0xFFFF) == 2"
[12:32:15.961]          // =>  TRUE
[12:32:15.961]        <block atomic="false" info="">
[12:32:15.961]          Message(0, "executing SWD power up");
[12:32:15.967]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:32:15.977]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:32:15.977]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:32:15.997]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:32:15.997]        </block>
[12:32:15.997]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:32:15.997]      </control>
[12:32:15.997]      // end if-block "powered_down"
[12:32:15.997]    </control>
[12:32:15.997]    <block atomic="false" info="">
[12:32:15.997]      __var DEBUG_PORT_VAL    = 0;
[12:32:15.997]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:32:15.997]      __var ACCESS_POINT_VAL  = 0;
[12:32:15.997]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:32:15.997]      __ap = 1; 
[12:32:15.997]        // -> [__ap <= 0x00000001]
[12:32:15.997]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:32:16.007]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:32:16.007]      __ap = 4;
[12:32:16.007]        // -> [__ap <= 0x00000004]
[12:32:16.017]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:32:16.017]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:32:16.017]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:32:16.017]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:32:16.017]    </block>
[12:32:16.017]    <block atomic="false" info="">
[12:32:16.017]      __var nReset = 0x80;
[12:32:16.017]        // -> [nReset <= 0x00000080]
[12:32:16.017]      __var canReadPins = 0;
[12:32:16.017]        // -> [canReadPins <= 0x00000000]
[12:32:16.017]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:32:16.027]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:32:16.027]        // -> [canReadPins <= 0x00000001]
[12:32:16.027]    </block>
[12:32:16.027]    <control if="" while="1" timeout="200" info="">
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.027]      // while "1"  (timeout="200")
[12:32:16.027]      // while-condition  =>  TRUE
[12:32:16.037]      // while "1"  (timeout="200")
[12:32:16.037]      // while  =>  TIMEOUT
[12:32:16.037]      // end while "1"
[12:32:16.037]    </control>
[12:32:16.037]    <control if="canReadPins" while="" timeout="0" info="">
[12:32:16.037]      // if-block "canReadPins"
[12:32:16.037]        // =>  TRUE
[12:32:16.037]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:32:16.037]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:32:16.047]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:32:16.047]        // while-condition  =>  FALSE
[12:32:16.047]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:32:16.047]      </control>
[12:32:16.047]      // end if-block "canReadPins"
[12:32:16.047]    </control>
[12:32:16.053]    <control if="!canReadPins" while="" timeout="0" info="">
[12:32:16.053]      // if-block "!canReadPins"
[12:32:16.053]        // =>  FALSE
[12:32:16.053]      // skip if-block "!canReadPins"
[12:32:16.054]    </control>
[12:32:16.054]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:32:16.054]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:32:16.054]        // =>  TRUE
[12:32:16.054]      <block atomic="false" info="">
[12:32:16.054]        WriteAP(0x00, 0x190008);
[12:32:16.067]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:32:16.067]        WriteAP(0xF0, 0x01);
[12:32:16.097]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:32:16.097]      </block>
[12:32:16.097]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:32:16.097]    </control>
[12:32:16.097]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:32:16.097]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:32:16.097]        // =>  FALSE
[12:32:16.097]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:32:16.097]    </control>
[12:32:16.097]    <block atomic="false" info="">
[12:32:16.097]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:32:16.138]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:32:16.138]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:32:16.138]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:32:16.138]      __ap = 0; //lets make sure we reset the access point selection
[12:32:16.138]        // -> [__ap <= 0x00000000]
[12:32:16.138]    </block>
[12:32:16.138]  </sequence>
[12:32:16.138]  
[12:32:16.349]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:32:16.349]  
[12:32:16.361]  <debugvars>
[12:32:16.361]    // Pre-defined
[12:32:16.361]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:32:16.361]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:32:16.361]    __dp=0x00000000
[12:32:16.361]    __ap=0x00000000
[12:32:16.361]    __traceout=0x00000000      (Trace Disabled)
[12:32:16.361]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:32:16.361]    __FlashAddr=0x00000000
[12:32:16.361]    __FlashLen=0x00000000
[12:32:16.361]    __FlashArg=0x00000000
[12:32:16.361]    __FlashOp=0x00000000
[12:32:16.361]    __Result=0x00000000
[12:32:16.361]  </debugvars>
[12:32:16.361]  
[12:32:16.361]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:32:16.361]    <block atomic="false" info="">
[12:32:16.361]      __var deviceID = 0;
[12:32:16.361]        // -> [deviceID <= 0x00000000]
[12:32:16.361]      __var version = 0;
[12:32:16.361]        // -> [version <= 0x00000000]
[12:32:16.361]      __var partNum = 0;
[12:32:16.361]        // -> [partNum <= 0x00000000]
[12:32:16.361]      __var manuf = 0;
[12:32:16.361]        // -> [manuf <= 0x00000000]
[12:32:16.361]      __var isMSPM0G1X0X_G3X0X = 0;
[12:32:16.361]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:32:16.361]      __var isProduction = 0;
[12:32:16.361]        // -> [isProduction <= 0x00000000]
[12:32:16.361]      __var continueId = 0;
[12:32:16.361]        // -> [continueId <= 0x00000000]
[12:32:16.361]      deviceID =   Read32(0x41C40004);
[12:32:16.450]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:32:16.450]        // -> [deviceID <= 0x2BB8802F]
[12:32:16.450]      version = deviceID >> 28;
[12:32:16.450]        // -> [version <= 0x00000002]
[12:32:16.450]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:32:16.450]        // -> [partNum <= 0x0000BB88]
[12:32:16.450]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:32:16.450]        // -> [manuf <= 0x00000017]
[12:32:16.450]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:32:16.450]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:32:16.450]      isProduction = (version > 0);
[12:32:16.450]        // -> [isProduction <= 0x00000001]
[12:32:16.450]    </block>
[12:32:16.450]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:32:16.450]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:32:16.450]        // =>  FALSE
[12:32:16.450]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:32:16.450]    </control>
[12:32:16.450]    <control if="continueId == 4" while="" timeout="0" info="">
[12:32:16.450]      // if-block "continueId == 4"
[12:32:16.450]        // =>  FALSE
[12:32:16.450]      // skip if-block "continueId == 4"
[12:32:16.450]    </control>
[12:32:16.450]    <control if="!isProduction" while="" timeout="0" info="">
[12:32:16.450]      // if-block "!isProduction"
[12:32:16.450]        // =>  FALSE
[12:32:16.450]      // skip if-block "!isProduction"
[12:32:16.450]    </control>
[12:32:16.450]  </sequence>
[12:32:16.450]  
[12:34:09.039]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:34:09.039]  
[12:34:09.055]  <debugvars>
[12:34:09.055]    // Pre-defined
[12:34:09.055]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:34:09.055]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:34:09.055]    __dp=0x00000000
[12:34:09.055]    __ap=0x00000000
[12:34:09.055]    __traceout=0x00000000      (Trace Disabled)
[12:34:09.055]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:34:09.055]    __FlashAddr=0x00000000
[12:34:09.055]    __FlashLen=0x00000000
[12:34:09.055]    __FlashArg=0x00000000
[12:34:09.055]    __FlashOp=0x00000000
[12:34:09.055]    __Result=0x00000000
[12:34:09.055]  </debugvars>
[12:34:09.055]  
[12:34:09.055]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:34:09.055]    <block atomic="false" info="">
[12:34:09.055]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:34:09.057]        // -> [isSWJ <= 0x00000001]
[12:34:09.057]      __var hasDormant = __protocol & 0x00020000;
[12:34:09.057]        // -> [hasDormant <= 0x00000000]
[12:34:09.058]      __var protType   = __protocol & 0x0000FFFF;
[12:34:09.058]        // -> [protType <= 0x00000002]
[12:34:09.058]    </block>
[12:34:09.058]    <control if="protType == 1" while="" timeout="0" info="">
[12:34:09.058]      // if-block "protType == 1"
[12:34:09.058]        // =>  FALSE
[12:34:09.058]      // skip if-block "protType == 1"
[12:34:09.058]    </control>
[12:34:09.058]    <control if="protType == 2" while="" timeout="0" info="">
[12:34:09.058]      // if-block "protType == 2"
[12:34:09.058]        // =>  TRUE
[12:34:09.058]      <control if="isSWJ" while="" timeout="0" info="">
[12:34:09.058]        // if-block "isSWJ"
[12:34:09.058]          // =>  TRUE
[12:34:09.059]        <control if="hasDormant" while="" timeout="0" info="">
[12:34:09.059]          // if-block "hasDormant"
[12:34:09.059]            // =>  FALSE
[12:34:09.059]          // skip if-block "hasDormant"
[12:34:09.059]        </control>
[12:34:09.059]        <control if="!hasDormant" while="" timeout="0" info="">
[12:34:09.059]          // if-block "!hasDormant"
[12:34:09.059]            // =>  TRUE
[12:34:09.059]          <block atomic="false" info="">
[12:34:09.059]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:34:09.068]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:34:09.068]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:34:09.072]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:34:09.072]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:34:09.117]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:34:09.117]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:34:09.137]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:34:09.137]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:34:09.157]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:34:09.157]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:34:09.167]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:34:09.167]          </block>
[12:34:09.167]          // end if-block "!hasDormant"
[12:34:09.167]        </control>
[12:34:09.167]        // end if-block "isSWJ"
[12:34:09.167]      </control>
[12:34:09.167]      <control if="!isSWJ" while="" timeout="0" info="">
[12:34:09.167]        // if-block "!isSWJ"
[12:34:09.167]          // =>  FALSE
[12:34:09.167]        // skip if-block "!isSWJ"
[12:34:09.167]      </control>
[12:34:09.167]      <block atomic="false" info="">
[12:34:09.167]        ReadDP(0x0);
[12:34:09.187]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:34:09.187]      </block>
[12:34:09.187]      // end if-block "protType == 2"
[12:34:09.187]    </control>
[12:34:09.187]  </sequence>
[12:34:09.187]  
[12:34:09.218]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:34:09.218]  
[12:34:09.218]  <debugvars>
[12:34:09.218]    // Pre-defined
[12:34:09.218]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:34:09.218]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:34:09.218]    __dp=0x00000000
[12:34:09.218]    __ap=0x00000000
[12:34:09.218]    __traceout=0x00000000      (Trace Disabled)
[12:34:09.218]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:34:09.218]    __FlashAddr=0x00000000
[12:34:09.218]    __FlashLen=0x00000000
[12:34:09.218]    __FlashArg=0x00000000
[12:34:09.218]    __FlashOp=0x00000000
[12:34:09.218]    __Result=0x00000000
[12:34:09.218]  </debugvars>
[12:34:09.218]  
[12:34:09.218]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:34:09.218]    <block atomic="false" info="">
[12:34:09.218]      __var SW_DP_ABORT       = 0x0;
[12:34:09.218]        // -> [SW_DP_ABORT <= 0x00000000]
[12:34:09.218]      __var DP_CTRL_STAT      = 0x4;
[12:34:09.218]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:34:09.218]      __var DP_SELECT         = 0x8;
[12:34:09.218]        // -> [DP_SELECT <= 0x00000008]
[12:34:09.218]      __var powered_down      = 0;
[12:34:09.218]        // -> [powered_down <= 0x00000000]
[12:34:09.218]      WriteDP(DP_SELECT, 0x00000000);
[12:34:09.280]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:34:09.280]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:34:09.292]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:34:09.292]        // -> [powered_down <= 0x00000001]
[12:34:09.292]    </block>
[12:34:09.292]    <control if="powered_down" while="" timeout="0" info="">
[12:34:09.292]      // if-block "powered_down"
[12:34:09.293]        // =>  TRUE
[12:34:09.293]      <block atomic="false" info="">
[12:34:09.293]        Message(0, "Debug/System power-up request sent");
[12:34:09.293]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:34:09.310]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:34:09.310]      </block>
[12:34:09.310]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:34:09.310]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:34:09.341]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:34:09.341]        // while-condition  =>  FALSE
[12:34:09.341]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:34:09.341]      </control>
[12:34:09.341]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:34:09.341]        // if-block "(__protocol & 0xFFFF) == 1"
[12:34:09.341]          // =>  FALSE
[12:34:09.341]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:34:09.341]      </control>
[12:34:09.341]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:34:09.341]        // if-block "(__protocol & 0xFFFF) == 2"
[12:34:09.341]          // =>  TRUE
[12:34:09.341]        <block atomic="false" info="">
[12:34:09.341]          Message(0, "executing SWD power up");
[12:34:09.341]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:34:09.360]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:34:09.360]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:34:09.370]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:34:09.370]        </block>
[12:34:09.370]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:34:09.370]      </control>
[12:34:09.370]      // end if-block "powered_down"
[12:34:09.370]    </control>
[12:34:09.370]    <block atomic="false" info="">
[12:34:09.370]      __var DEBUG_PORT_VAL    = 0;
[12:34:09.370]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:34:09.370]      __var ACCESS_POINT_VAL  = 0;
[12:34:09.370]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:34:09.370]      __ap = 1; 
[12:34:09.370]        // -> [__ap <= 0x00000001]
[12:34:09.370]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:34:09.391]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:34:09.391]      __ap = 4;
[12:34:09.391]        // -> [__ap <= 0x00000004]
[12:34:09.391]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:34:09.451]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:34:09.451]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:34:09.451]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:34:09.451]    </block>
[12:34:09.451]    <block atomic="false" info="">
[12:34:09.451]      __var nReset = 0x80;
[12:34:09.451]        // -> [nReset <= 0x00000080]
[12:34:09.451]      __var canReadPins = 0;
[12:34:09.451]        // -> [canReadPins <= 0x00000000]
[12:34:09.451]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:34:09.471]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:34:09.471]        // -> [canReadPins <= 0x00000001]
[12:34:09.471]    </block>
[12:34:09.471]    <control if="" while="1" timeout="200" info="">
[12:34:09.471]      // while "1"  (timeout="200")
[12:34:09.471]      // while-condition  =>  TRUE
[12:34:09.471]      // while "1"  (timeout="200")
[12:34:09.471]      // while-condition  =>  TRUE
[12:34:09.471]      // while "1"  (timeout="200")
[12:34:09.471]      // while-condition  =>  TRUE
[12:34:09.471]      // while "1"  (timeout="200")
[12:34:09.471]      // while-condition  =>  TRUE
[12:34:09.471]      // while "1"  (timeout="200")
[12:34:09.471]      // while-condition  =>  TRUE
[12:34:09.471]      // while "1"  (timeout="200")
[12:34:09.471]      // while-condition  =>  TRUE
[12:34:09.471]      // while "1"  (timeout="200")
[12:34:09.471]      // while-condition  =>  TRUE
[12:34:09.471]      // while "1"  (timeout="200")
[12:34:09.471]      // while-condition  =>  TRUE
[12:34:09.471]      // while "1"  (timeout="200")
[12:34:09.471]      // while-condition  =>  TRUE
[12:34:09.471]      // while "1"  (timeout="200")
[12:34:09.471]      // while-condition  =>  TRUE
[12:34:09.471]      // while "1"  (timeout="200")
[12:34:09.471]      // while-condition  =>  TRUE
[12:34:09.471]      // while "1"  (timeout="200")
[12:34:09.481]      // while-condition  =>  TRUE
[12:34:09.481]      // while "1"  (timeout="200")
[12:34:09.481]      // while  =>  TIMEOUT
[12:34:09.481]      // end while "1"
[12:34:09.481]    </control>
[12:34:09.481]    <control if="canReadPins" while="" timeout="0" info="">
[12:34:09.481]      // if-block "canReadPins"
[12:34:09.481]        // =>  TRUE
[12:34:09.481]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:34:09.481]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:34:09.491]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:34:09.491]        // while-condition  =>  FALSE
[12:34:09.491]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:34:09.491]      </control>
[12:34:09.491]      // end if-block "canReadPins"
[12:34:09.491]    </control>
[12:34:09.491]    <control if="!canReadPins" while="" timeout="0" info="">
[12:34:09.491]      // if-block "!canReadPins"
[12:34:09.491]        // =>  FALSE
[12:34:09.491]      // skip if-block "!canReadPins"
[12:34:09.491]    </control>
[12:34:09.491]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:34:09.491]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:34:09.491]        // =>  TRUE
[12:34:09.491]      <block atomic="false" info="">
[12:34:09.491]        WriteAP(0x00, 0x190008);
[12:34:09.511]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:34:09.511]        WriteAP(0xF0, 0x01);
[12:34:09.542]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:34:09.542]      </block>
[12:34:09.542]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:34:09.542]    </control>
[12:34:09.542]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:34:09.542]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:34:09.542]        // =>  FALSE
[12:34:09.542]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:34:09.542]    </control>
[12:34:09.542]    <block atomic="false" info="">
[12:34:09.542]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:34:09.581]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:34:09.581]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:34:09.581]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:34:09.581]      __ap = 0; //lets make sure we reset the access point selection
[12:34:09.581]        // -> [__ap <= 0x00000000]
[12:34:09.581]    </block>
[12:34:09.581]  </sequence>
[12:34:09.581]  
[12:34:09.672]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:34:09.672]  
[12:34:09.672]  <debugvars>
[12:34:09.672]    // Pre-defined
[12:34:09.672]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:34:09.672]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[12:34:09.672]    __dp=0x00000000
[12:34:09.672]    __ap=0x00000000
[12:34:09.672]    __traceout=0x00000000      (Trace Disabled)
[12:34:09.672]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:34:09.672]    __FlashAddr=0x00000000
[12:34:09.672]    __FlashLen=0x00000000
[12:34:09.672]    __FlashArg=0x00000000
[12:34:09.672]    __FlashOp=0x00000000
[12:34:09.672]    __Result=0x00000000
[12:34:09.672]  </debugvars>
[12:34:09.672]  
[12:34:09.672]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:34:09.672]    <block atomic="false" info="">
[12:34:09.672]      __var deviceID = 0;
[12:34:09.672]        // -> [deviceID <= 0x00000000]
[12:34:09.672]      __var version = 0;
[12:34:09.672]        // -> [version <= 0x00000000]
[12:34:09.672]      __var partNum = 0;
[12:34:09.672]        // -> [partNum <= 0x00000000]
[12:34:09.672]      __var manuf = 0;
[12:34:09.672]        // -> [manuf <= 0x00000000]
[12:34:09.672]      __var isMSPM0G1X0X_G3X0X = 0;
[12:34:09.672]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:34:09.672]      __var isProduction = 0;
[12:34:09.672]        // -> [isProduction <= 0x00000000]
[12:34:09.672]      __var continueId = 0;
[12:34:09.672]        // -> [continueId <= 0x00000000]
[12:34:09.682]      deviceID =   Read32(0x41C40004);
[12:34:09.713]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:34:09.713]        // -> [deviceID <= 0x2BB8802F]
[12:34:09.713]      version = deviceID >> 28;
[12:34:09.713]        // -> [version <= 0x00000002]
[12:34:09.713]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:34:09.713]        // -> [partNum <= 0x0000BB88]
[12:34:09.713]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:34:09.713]        // -> [manuf <= 0x00000017]
[12:34:09.713]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:34:09.713]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:34:09.713]      isProduction = (version > 0);
[12:34:09.713]        // -> [isProduction <= 0x00000001]
[12:34:09.713]    </block>
[12:34:09.713]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:34:09.713]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:34:09.713]        // =>  FALSE
[12:34:09.713]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:34:09.713]    </control>
[12:34:09.713]    <control if="continueId == 4" while="" timeout="0" info="">
[12:34:09.713]      // if-block "continueId == 4"
[12:34:09.713]        // =>  FALSE
[12:34:09.713]      // skip if-block "continueId == 4"
[12:34:09.713]    </control>
[12:34:09.713]    <control if="!isProduction" while="" timeout="0" info="">
[12:34:09.713]      // if-block "!isProduction"
[12:34:09.713]        // =>  FALSE
[12:34:09.713]      // skip if-block "!isProduction"
[12:34:09.713]    </control>
[12:34:09.713]  </sequence>
[12:34:09.713]  
[12:34:28.487]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:34:28.487]  
[12:34:28.487]  <debugvars>
[12:34:28.487]    // Pre-defined
[12:34:28.487]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:34:28.487]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:34:28.487]    __dp=0x00000000
[12:34:28.487]    __ap=0x00000000
[12:34:28.487]    __traceout=0x00000000      (Trace Disabled)
[12:34:28.487]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:34:28.487]    __FlashAddr=0x00000000
[12:34:28.487]    __FlashLen=0x00000000
[12:34:28.497]    __FlashArg=0x00000000
[12:34:28.497]    __FlashOp=0x00000000
[12:34:28.497]    __Result=0x00000000
[12:34:28.497]  </debugvars>
[12:34:28.497]  
[12:34:28.497]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:34:28.497]    <block atomic="false" info="">
[12:34:28.497]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:34:28.497]        // -> [isSWJ <= 0x00000001]
[12:34:28.497]      __var hasDormant = __protocol & 0x00020000;
[12:34:28.497]        // -> [hasDormant <= 0x00000000]
[12:34:28.497]      __var protType   = __protocol & 0x0000FFFF;
[12:34:28.497]        // -> [protType <= 0x00000002]
[12:34:28.497]    </block>
[12:34:28.497]    <control if="protType == 1" while="" timeout="0" info="">
[12:34:28.497]      // if-block "protType == 1"
[12:34:28.497]        // =>  FALSE
[12:34:28.497]      // skip if-block "protType == 1"
[12:34:28.497]    </control>
[12:34:28.497]    <control if="protType == 2" while="" timeout="0" info="">
[12:34:28.497]      // if-block "protType == 2"
[12:34:28.497]        // =>  TRUE
[12:34:28.497]      <control if="isSWJ" while="" timeout="0" info="">
[12:34:28.497]        // if-block "isSWJ"
[12:34:28.497]          // =>  TRUE
[12:34:28.497]        <control if="hasDormant" while="" timeout="0" info="">
[12:34:28.497]          // if-block "hasDormant"
[12:34:28.497]            // =>  FALSE
[12:34:28.497]          // skip if-block "hasDormant"
[12:34:28.497]        </control>
[12:34:28.497]        <control if="!hasDormant" while="" timeout="0" info="">
[12:34:28.497]          // if-block "!hasDormant"
[12:34:28.497]            // =>  TRUE
[12:34:28.497]          <block atomic="false" info="">
[12:34:28.497]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:34:28.517]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:34:28.517]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:34:28.527]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:34:28.527]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:34:28.537]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:34:28.537]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:34:28.547]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:34:28.547]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:34:28.567]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:34:28.567]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:34:28.577]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:34:28.577]          </block>
[12:34:28.577]          // end if-block "!hasDormant"
[12:34:28.577]        </control>
[12:34:28.577]        // end if-block "isSWJ"
[12:34:28.577]      </control>
[12:34:28.577]      <control if="!isSWJ" while="" timeout="0" info="">
[12:34:28.577]        // if-block "!isSWJ"
[12:34:28.577]          // =>  FALSE
[12:34:28.577]        // skip if-block "!isSWJ"
[12:34:28.577]      </control>
[12:34:28.577]      <block atomic="false" info="">
[12:34:28.577]        ReadDP(0x0);
[12:34:28.597]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:34:28.597]      </block>
[12:34:28.597]      // end if-block "protType == 2"
[12:34:28.597]    </control>
[12:34:28.597]  </sequence>
[12:34:28.597]  
[12:34:28.597]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:34:28.597]  
[12:34:28.597]  <debugvars>
[12:34:28.597]    // Pre-defined
[12:34:28.597]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:34:28.607]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:34:28.607]    __dp=0x00000000
[12:34:28.607]    __ap=0x00000000
[12:34:28.607]    __traceout=0x00000000      (Trace Disabled)
[12:34:28.607]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:34:28.607]    __FlashAddr=0x00000000
[12:34:28.607]    __FlashLen=0x00000000
[12:34:28.607]    __FlashArg=0x00000000
[12:34:28.607]    __FlashOp=0x00000000
[12:34:28.607]    __Result=0x00000000
[12:34:28.607]  </debugvars>
[12:34:28.607]  
[12:34:28.607]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:34:28.607]    <block atomic="false" info="">
[12:34:28.607]      __var SW_DP_ABORT       = 0x0;
[12:34:28.607]        // -> [SW_DP_ABORT <= 0x00000000]
[12:34:28.607]      __var DP_CTRL_STAT      = 0x4;
[12:34:28.607]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:34:28.607]      __var DP_SELECT         = 0x8;
[12:34:28.607]        // -> [DP_SELECT <= 0x00000008]
[12:34:28.607]      __var powered_down      = 0;
[12:34:28.607]        // -> [powered_down <= 0x00000000]
[12:34:28.607]      WriteDP(DP_SELECT, 0x00000000);
[12:34:28.607]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:34:28.607]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:34:28.607]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:34:28.607]        // -> [powered_down <= 0x00000001]
[12:34:28.607]    </block>
[12:34:28.607]    <control if="powered_down" while="" timeout="0" info="">
[12:34:28.607]      // if-block "powered_down"
[12:34:28.607]        // =>  TRUE
[12:34:28.607]      <block atomic="false" info="">
[12:34:28.607]        Message(0, "Debug/System power-up request sent");
[12:34:28.607]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:34:28.628]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:34:28.628]      </block>
[12:34:28.628]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:34:28.628]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:34:28.628]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:34:28.628]        // while-condition  =>  FALSE
[12:34:28.628]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:34:28.628]      </control>
[12:34:28.628]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:34:28.628]        // if-block "(__protocol & 0xFFFF) == 1"
[12:34:28.628]          // =>  FALSE
[12:34:28.628]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:34:28.628]      </control>
[12:34:28.628]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:34:28.628]        // if-block "(__protocol & 0xFFFF) == 2"
[12:34:28.628]          // =>  TRUE
[12:34:28.628]        <block atomic="false" info="">
[12:34:28.628]          Message(0, "executing SWD power up");
[12:34:28.628]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:34:28.648]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:34:28.648]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:34:28.668]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:34:28.668]        </block>
[12:34:28.668]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:34:28.668]      </control>
[12:34:28.668]      // end if-block "powered_down"
[12:34:28.668]    </control>
[12:34:28.668]    <block atomic="false" info="">
[12:34:28.668]      __var DEBUG_PORT_VAL    = 0;
[12:34:28.668]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:34:28.668]      __var ACCESS_POINT_VAL  = 0;
[12:34:28.668]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:34:28.668]      __ap = 1; 
[12:34:28.668]        // -> [__ap <= 0x00000001]
[12:34:28.668]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:34:28.738]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:34:28.738]      __ap = 4;
[12:34:28.738]        // -> [__ap <= 0x00000004]
[12:34:28.738]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:34:28.778]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:34:28.778]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:34:28.778]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:34:28.778]    </block>
[12:34:28.778]    <block atomic="false" info="">
[12:34:28.778]      __var nReset = 0x80;
[12:34:28.778]        // -> [nReset <= 0x00000080]
[12:34:28.778]      __var canReadPins = 0;
[12:34:28.778]        // -> [canReadPins <= 0x00000000]
[12:34:28.778]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:34:28.788]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:34:28.788]        // -> [canReadPins <= 0x00000001]
[12:34:28.788]    </block>
[12:34:28.788]    <control if="" while="1" timeout="200" info="">
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.788]      // while "1"  (timeout="200")
[12:34:28.788]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.798]      // while-condition  =>  TRUE
[12:34:28.798]      // while "1"  (timeout="200")
[12:34:28.808]      // while-condition  =>  TRUE
[12:34:28.808]      // while "1"  (timeout="200")
[12:34:28.808]      // while  =>  TIMEOUT
[12:34:28.808]      // end while "1"
[12:34:28.808]    </control>
[12:34:28.808]    <control if="canReadPins" while="" timeout="0" info="">
[12:34:28.808]      // if-block "canReadPins"
[12:34:28.808]        // =>  TRUE
[12:34:28.808]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:34:28.808]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:34:28.808]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:34:28.808]        // while-condition  =>  FALSE
[12:34:28.808]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:34:28.808]      </control>
[12:34:28.808]      // end if-block "canReadPins"
[12:34:28.808]    </control>
[12:34:28.808]    <control if="!canReadPins" while="" timeout="0" info="">
[12:34:28.808]      // if-block "!canReadPins"
[12:34:28.808]        // =>  FALSE
[12:34:28.808]      // skip if-block "!canReadPins"
[12:34:28.808]    </control>
[12:34:28.808]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:34:28.808]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:34:28.808]        // =>  TRUE
[12:34:28.808]      <block atomic="false" info="">
[12:34:28.808]        WriteAP(0x00, 0x190008);
[12:34:28.838]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:34:28.838]        WriteAP(0xF0, 0x01);
[12:34:28.888]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:34:28.888]      </block>
[12:34:28.888]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:34:28.888]    </control>
[12:34:28.888]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:34:28.888]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:34:28.888]        // =>  FALSE
[12:34:28.888]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:34:28.888]    </control>
[12:34:28.888]    <block atomic="false" info="">
[12:34:28.888]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:34:28.938]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:34:28.938]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:34:28.938]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:34:28.938]      __ap = 0; //lets make sure we reset the access point selection
[12:34:28.938]        // -> [__ap <= 0x00000000]
[12:34:28.938]    </block>
[12:34:28.938]  </sequence>
[12:34:28.938]  
[12:34:29.158]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:34:29.158]  
[12:34:29.169]  <debugvars>
[12:34:29.169]    // Pre-defined
[12:34:29.169]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:34:29.169]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:34:29.169]    __dp=0x00000000
[12:34:29.169]    __ap=0x00000000
[12:34:29.169]    __traceout=0x00000000      (Trace Disabled)
[12:34:29.169]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:34:29.169]    __FlashAddr=0x00000000
[12:34:29.169]    __FlashLen=0x00000000
[12:34:29.169]    __FlashArg=0x00000000
[12:34:29.169]    __FlashOp=0x00000000
[12:34:29.169]    __Result=0x00000000
[12:34:29.169]  </debugvars>
[12:34:29.169]  
[12:34:29.169]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:34:29.169]    <block atomic="false" info="">
[12:34:29.169]      __var deviceID = 0;
[12:34:29.169]        // -> [deviceID <= 0x00000000]
[12:34:29.169]      __var version = 0;
[12:34:29.169]        // -> [version <= 0x00000000]
[12:34:29.169]      __var partNum = 0;
[12:34:29.169]        // -> [partNum <= 0x00000000]
[12:34:29.169]      __var manuf = 0;
[12:34:29.169]        // -> [manuf <= 0x00000000]
[12:34:29.169]      __var isMSPM0G1X0X_G3X0X = 0;
[12:34:29.169]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:34:29.169]      __var isProduction = 0;
[12:34:29.169]        // -> [isProduction <= 0x00000000]
[12:34:29.169]      __var continueId = 0;
[12:34:29.169]        // -> [continueId <= 0x00000000]
[12:34:29.169]      deviceID =   Read32(0x41C40004);
[12:34:29.188]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:34:29.188]        // -> [deviceID <= 0x2BB8802F]
[12:34:29.188]      version = deviceID >> 28;
[12:34:29.188]        // -> [version <= 0x00000002]
[12:34:29.188]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:34:29.188]        // -> [partNum <= 0x0000BB88]
[12:34:29.188]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:34:29.188]        // -> [manuf <= 0x00000017]
[12:34:29.188]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:34:29.188]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:34:29.188]      isProduction = (version > 0);
[12:34:29.188]        // -> [isProduction <= 0x00000001]
[12:34:29.188]    </block>
[12:34:29.188]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:34:29.188]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:34:29.188]        // =>  FALSE
[12:34:29.188]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:34:29.188]    </control>
[12:34:29.188]    <control if="continueId == 4" while="" timeout="0" info="">
[12:34:29.188]      // if-block "continueId == 4"
[12:34:29.188]        // =>  FALSE
[12:34:29.188]      // skip if-block "continueId == 4"
[12:34:29.188]    </control>
[12:34:29.188]    <control if="!isProduction" while="" timeout="0" info="">
[12:34:29.188]      // if-block "!isProduction"
[12:34:29.188]        // =>  FALSE
[12:34:29.188]      // skip if-block "!isProduction"
[12:34:29.188]    </control>
[12:34:29.188]  </sequence>
[12:34:29.188]  
[12:39:31.904]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[12:39:31.904]  
[12:39:31.913]  <debugvars>
[12:39:31.913]    // Pre-defined
[12:39:31.913]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:39:31.913]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:39:31.913]    __dp=0x00000000
[12:39:31.913]    __ap=0x00000000
[12:39:31.913]    __traceout=0x00000000      (Trace Disabled)
[12:39:31.913]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:39:31.913]    __FlashAddr=0x00000000
[12:39:31.914]    __FlashLen=0x00000000
[12:39:31.914]    __FlashArg=0x00000000
[12:39:31.914]    __FlashOp=0x00000000
[12:39:31.914]    __Result=0x00000000
[12:39:31.914]  </debugvars>
[12:39:31.914]  
[12:39:31.914]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[12:39:31.914]    <block atomic="false" info="">
[12:39:31.916]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[12:39:31.916]        // -> [isSWJ <= 0x00000001]
[12:39:31.916]      __var hasDormant = __protocol & 0x00020000;
[12:39:31.916]        // -> [hasDormant <= 0x00000000]
[12:39:31.916]      __var protType   = __protocol & 0x0000FFFF;
[12:39:31.916]        // -> [protType <= 0x00000002]
[12:39:31.916]    </block>
[12:39:31.916]    <control if="protType == 1" while="" timeout="0" info="">
[12:39:31.916]      // if-block "protType == 1"
[12:39:31.916]        // =>  FALSE
[12:39:31.916]      // skip if-block "protType == 1"
[12:39:31.917]    </control>
[12:39:31.917]    <control if="protType == 2" while="" timeout="0" info="">
[12:39:31.917]      // if-block "protType == 2"
[12:39:31.917]        // =>  TRUE
[12:39:31.917]      <control if="isSWJ" while="" timeout="0" info="">
[12:39:31.917]        // if-block "isSWJ"
[12:39:31.917]          // =>  TRUE
[12:39:31.917]        <control if="hasDormant" while="" timeout="0" info="">
[12:39:31.917]          // if-block "hasDormant"
[12:39:31.917]            // =>  FALSE
[12:39:31.917]          // skip if-block "hasDormant"
[12:39:31.917]        </control>
[12:39:31.917]        <control if="!hasDormant" while="" timeout="0" info="">
[12:39:31.917]          // if-block "!hasDormant"
[12:39:31.917]            // =>  TRUE
[12:39:31.917]          <block atomic="false" info="">
[12:39:31.919]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[12:39:31.944]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:39:31.944]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[12:39:31.954]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[12:39:31.954]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[12:39:31.995]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:39:31.995]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[12:39:31.995]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[12:39:31.995]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[12:39:32.015]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[12:39:32.015]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[12:39:32.071]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[12:39:32.075]          </block>
[12:39:32.075]          // end if-block "!hasDormant"
[12:39:32.075]        </control>
[12:39:32.075]        // end if-block "isSWJ"
[12:39:32.075]      </control>
[12:39:32.076]      <control if="!isSWJ" while="" timeout="0" info="">
[12:39:32.076]        // if-block "!isSWJ"
[12:39:32.076]          // =>  FALSE
[12:39:32.076]        // skip if-block "!isSWJ"
[12:39:32.076]      </control>
[12:39:32.076]      <block atomic="false" info="">
[12:39:32.076]        ReadDP(0x0);
[12:39:32.097]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[12:39:32.097]      </block>
[12:39:32.097]      // end if-block "protType == 2"
[12:39:32.097]    </control>
[12:39:32.097]  </sequence>
[12:39:32.097]  
[12:39:32.100]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[12:39:32.100]  
[12:39:32.100]  <debugvars>
[12:39:32.100]    // Pre-defined
[12:39:32.100]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:39:32.100]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:39:32.100]    __dp=0x00000000
[12:39:32.100]    __ap=0x00000000
[12:39:32.100]    __traceout=0x00000000      (Trace Disabled)
[12:39:32.100]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:39:32.100]    __FlashAddr=0x00000000
[12:39:32.100]    __FlashLen=0x00000000
[12:39:32.101]    __FlashArg=0x00000000
[12:39:32.101]    __FlashOp=0x00000000
[12:39:32.101]    __Result=0x00000000
[12:39:32.101]  </debugvars>
[12:39:32.101]  
[12:39:32.101]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[12:39:32.101]    <block atomic="false" info="">
[12:39:32.101]      __var SW_DP_ABORT       = 0x0;
[12:39:32.101]        // -> [SW_DP_ABORT <= 0x00000000]
[12:39:32.102]      __var DP_CTRL_STAT      = 0x4;
[12:39:32.102]        // -> [DP_CTRL_STAT <= 0x00000004]
[12:39:32.102]      __var DP_SELECT         = 0x8;
[12:39:32.102]        // -> [DP_SELECT <= 0x00000008]
[12:39:32.102]      __var powered_down      = 0;
[12:39:32.102]        // -> [powered_down <= 0x00000000]
[12:39:32.102]      WriteDP(DP_SELECT, 0x00000000);
[12:39:32.136]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[12:39:32.136]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[12:39:32.146]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[12:39:32.146]        // -> [powered_down <= 0x00000001]
[12:39:32.146]    </block>
[12:39:32.146]    <control if="powered_down" while="" timeout="0" info="">
[12:39:32.146]      // if-block "powered_down"
[12:39:32.146]        // =>  TRUE
[12:39:32.156]      <block atomic="false" info="">
[12:39:32.156]        Message(0, "Debug/System power-up request sent");
[12:39:32.156]        WriteDP(DP_CTRL_STAT, 0x50000000);
[12:39:32.176]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[12:39:32.176]      </block>
[12:39:32.176]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[12:39:32.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[12:39:32.186]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[12:39:32.186]        // while-condition  =>  FALSE
[12:39:32.186]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[12:39:32.186]      </control>
[12:39:32.186]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[12:39:32.186]        // if-block "(__protocol & 0xFFFF) == 1"
[12:39:32.186]          // =>  FALSE
[12:39:32.186]        // skip if-block "(__protocol & 0xFFFF) == 1"
[12:39:32.186]      </control>
[12:39:32.186]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[12:39:32.186]        // if-block "(__protocol & 0xFFFF) == 2"
[12:39:32.186]          // =>  TRUE
[12:39:32.186]        <block atomic="false" info="">
[12:39:32.186]          Message(0, "executing SWD power up");
[12:39:32.186]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[12:39:32.246]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[12:39:32.246]          WriteDP(SW_DP_ABORT, 0x0000001E);
[12:39:32.267]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[12:39:32.267]        </block>
[12:39:32.267]        // end if-block "(__protocol & 0xFFFF) == 2"
[12:39:32.267]      </control>
[12:39:32.267]      // end if-block "powered_down"
[12:39:32.267]    </control>
[12:39:32.267]    <block atomic="false" info="">
[12:39:32.267]      __var DEBUG_PORT_VAL    = 0;
[12:39:32.267]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[12:39:32.267]      __var ACCESS_POINT_VAL  = 0;
[12:39:32.267]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[12:39:32.267]      __ap = 1; 
[12:39:32.267]        // -> [__ap <= 0x00000001]
[12:39:32.267]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[12:39:32.287]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[12:39:32.287]      __ap = 4;
[12:39:32.287]        // -> [__ap <= 0x00000004]
[12:39:32.287]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:39:32.307]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[12:39:32.307]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[12:39:32.307]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:39:32.307]    </block>
[12:39:32.307]    <block atomic="false" info="">
[12:39:32.307]      __var nReset = 0x80;
[12:39:32.307]        // -> [nReset <= 0x00000080]
[12:39:32.307]      __var canReadPins = 0;
[12:39:32.307]        // -> [canReadPins <= 0x00000000]
[12:39:32.307]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[12:39:32.319]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[12:39:32.319]        // -> [canReadPins <= 0x00000001]
[12:39:32.319]    </block>
[12:39:32.319]    <control if="" while="1" timeout="200" info="">
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.319]      // while "1"  (timeout="200")
[12:39:32.319]      // while-condition  =>  TRUE
[12:39:32.323]      // while "1"  (timeout="200")
[12:39:32.323]      // while-condition  =>  TRUE
[12:39:32.324]      // while "1"  (timeout="200")
[12:39:32.324]      // while-condition  =>  TRUE
[12:39:32.324]      // while "1"  (timeout="200")
[12:39:32.324]      // while-condition  =>  TRUE
[12:39:32.324]      // while "1"  (timeout="200")
[12:39:32.324]      // while-condition  =>  TRUE
[12:39:32.324]      // while "1"  (timeout="200")
[12:39:32.324]      // while-condition  =>  TRUE
[12:39:32.324]      // while "1"  (timeout="200")
[12:39:32.324]      // while-condition  =>  TRUE
[12:39:32.324]      // while "1"  (timeout="200")
[12:39:32.324]      // while-condition  =>  TRUE
[12:39:32.324]      // while "1"  (timeout="200")
[12:39:32.324]      // while-condition  =>  TRUE
[12:39:32.324]      // while "1"  (timeout="200")
[12:39:32.324]      // while-condition  =>  TRUE
[12:39:32.324]      // while "1"  (timeout="200")
[12:39:32.324]      // while-condition  =>  TRUE
[12:39:32.324]      // while "1"  (timeout="200")
[12:39:32.324]      // while-condition  =>  TRUE
[12:39:32.324]      // while "1"  (timeout="200")
[12:39:32.324]      // while-condition  =>  TRUE
[12:39:32.324]      // while "1"  (timeout="200")
[12:39:32.327]      // while-condition  =>  TRUE
[12:39:32.327]      // while "1"  (timeout="200")
[12:39:32.328]      // while-condition  =>  TRUE
[12:39:32.328]      // while "1"  (timeout="200")
[12:39:32.328]      // while-condition  =>  TRUE
[12:39:32.328]      // while "1"  (timeout="200")
[12:39:32.328]      // while-condition  =>  TRUE
[12:39:32.328]      // while "1"  (timeout="200")
[12:39:32.328]      // while-condition  =>  TRUE
[12:39:32.328]      // while "1"  (timeout="200")
[12:39:32.328]      // while-condition  =>  TRUE
[12:39:32.328]      // while "1"  (timeout="200")
[12:39:32.328]      // while-condition  =>  TRUE
[12:39:32.328]      // while "1"  (timeout="200")
[12:39:32.329]      // while-condition  =>  TRUE
[12:39:32.329]      // while "1"  (timeout="200")
[12:39:32.329]      // while-condition  =>  TRUE
[12:39:32.329]      // while "1"  (timeout="200")
[12:39:32.329]      // while-condition  =>  TRUE
[12:39:32.329]      // while "1"  (timeout="200")
[12:39:32.329]      // while-condition  =>  TRUE
[12:39:32.329]      // while "1"  (timeout="200")
[12:39:32.329]      // while-condition  =>  TRUE
[12:39:32.329]      // while "1"  (timeout="200")
[12:39:32.330]      // while-condition  =>  TRUE
[12:39:32.330]      // while "1"  (timeout="200")
[12:39:32.330]      // while-condition  =>  TRUE
[12:39:32.330]      // while "1"  (timeout="200")
[12:39:32.330]      // while-condition  =>  TRUE
[12:39:32.330]      // while "1"  (timeout="200")
[12:39:32.330]      // while-condition  =>  TRUE
[12:39:32.330]      // while "1"  (timeout="200")
[12:39:32.330]      // while-condition  =>  TRUE
[12:39:32.331]      // while "1"  (timeout="200")
[12:39:32.331]      // while  =>  TIMEOUT
[12:39:32.331]      // end while "1"
[12:39:32.331]    </control>
[12:39:32.331]    <control if="canReadPins" while="" timeout="0" info="">
[12:39:32.331]      // if-block "canReadPins"
[12:39:32.331]        // =>  TRUE
[12:39:32.331]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[12:39:32.331]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[12:39:32.338]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[12:39:32.338]        // while-condition  =>  FALSE
[12:39:32.338]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[12:39:32.338]      </control>
[12:39:32.338]      // end if-block "canReadPins"
[12:39:32.338]    </control>
[12:39:32.338]    <control if="!canReadPins" while="" timeout="0" info="">
[12:39:32.340]      // if-block "!canReadPins"
[12:39:32.340]        // =>  FALSE
[12:39:32.340]      // skip if-block "!canReadPins"
[12:39:32.340]    </control>
[12:39:32.340]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[12:39:32.340]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:39:32.340]        // =>  TRUE
[12:39:32.340]      <block atomic="false" info="">
[12:39:32.340]        WriteAP(0x00, 0x190008);
[12:39:32.341]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[12:39:32.341]        WriteAP(0xF0, 0x01);
[12:39:32.347]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[12:39:32.347]      </block>
[12:39:32.347]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[12:39:32.347]    </control>
[12:39:32.347]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[12:39:32.347]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:39:32.347]        // =>  FALSE
[12:39:32.347]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[12:39:32.355]    </control>
[12:39:32.355]    <block atomic="false" info="">
[12:39:32.355]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[12:39:32.360]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[12:39:32.360]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[12:39:32.360]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[12:39:32.361]      __ap = 0; //lets make sure we reset the access point selection
[12:39:32.361]        // -> [__ap <= 0x00000000]
[12:39:32.361]    </block>
[12:39:32.361]  </sequence>
[12:39:32.361]  
[12:39:32.388]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[12:39:32.388]  
[12:39:32.388]  <debugvars>
[12:39:32.388]    // Pre-defined
[12:39:32.388]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[12:39:32.388]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[12:39:32.388]    __dp=0x00000000
[12:39:32.388]    __ap=0x00000000
[12:39:32.388]    __traceout=0x00000000      (Trace Disabled)
[12:39:32.388]    __errorcontrol=0x00000000  (Skip Errors="False")
[12:39:32.388]    __FlashAddr=0x00000000
[12:39:32.388]    __FlashLen=0x00000000
[12:39:32.388]    __FlashArg=0x00000000
[12:39:32.388]    __FlashOp=0x00000000
[12:39:32.388]    __Result=0x00000000
[12:39:32.388]  </debugvars>
[12:39:32.388]  
[12:39:32.388]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[12:39:32.388]    <block atomic="false" info="">
[12:39:32.388]      __var deviceID = 0;
[12:39:32.388]        // -> [deviceID <= 0x00000000]
[12:39:32.396]      __var version = 0;
[12:39:32.396]        // -> [version <= 0x00000000]
[12:39:32.396]      __var partNum = 0;
[12:39:32.396]        // -> [partNum <= 0x00000000]
[12:39:32.396]      __var manuf = 0;
[12:39:32.396]        // -> [manuf <= 0x00000000]
[12:39:32.396]      __var isMSPM0G1X0X_G3X0X = 0;
[12:39:32.396]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[12:39:32.396]      __var isProduction = 0;
[12:39:32.396]        // -> [isProduction <= 0x00000000]
[12:39:32.396]      __var continueId = 0;
[12:39:32.396]        // -> [continueId <= 0x00000000]
[12:39:32.396]      deviceID =   Read32(0x41C40004);
[12:39:32.401]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[12:39:32.401]        // -> [deviceID <= 0x2BB8802F]
[12:39:32.401]      version = deviceID >> 28;
[12:39:32.401]        // -> [version <= 0x00000002]
[12:39:32.401]      partNum = (deviceID & 0x0FFFF000) >> 12;
[12:39:32.401]        // -> [partNum <= 0x0000BB88]
[12:39:32.401]      manuf = (deviceID & 0x00000FFE) >> 1;
[12:39:32.401]        // -> [manuf <= 0x00000017]
[12:39:32.401]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[12:39:32.401]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[12:39:32.401]      isProduction = (version > 0);
[12:39:32.401]        // -> [isProduction <= 0x00000001]
[12:39:32.401]    </block>
[12:39:32.401]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[12:39:32.401]      // if-block "!isMSPM0G1X0X_G3X0X"
[12:39:32.401]        // =>  FALSE
[12:39:32.401]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[12:39:32.401]    </control>
[12:39:32.401]    <control if="continueId == 4" while="" timeout="0" info="">
[12:39:32.401]      // if-block "continueId == 4"
[12:39:32.401]        // =>  FALSE
[12:39:32.401]      // skip if-block "continueId == 4"
[12:39:32.401]    </control>
[12:39:32.401]    <control if="!isProduction" while="" timeout="0" info="">
[12:39:32.401]      // if-block "!isProduction"
[12:39:32.401]        // =>  FALSE
[12:39:32.401]      // skip if-block "!isProduction"
[12:39:32.401]    </control>
[12:39:32.401]  </sequence>
[12:39:32.401]  
