/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025-EDC\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0002.log
 *  Created     : 19:36:25 (30/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[19:36:25.766]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:36:25.766]  
[19:36:25.766]  <debugvars>
[19:36:25.766]    // Pre-defined
[19:36:25.766]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:36:25.766]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:36:25.766]    __dp=0x00000000
[19:36:25.766]    __ap=0x00000000
[19:36:25.768]    __traceout=0x00000000      (Trace Disabled)
[19:36:25.768]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:36:25.768]    __FlashAddr=0x00000000
[19:36:25.768]    __FlashLen=0x00000000
[19:36:25.768]    __FlashArg=0x00000000
[19:36:25.769]    __FlashOp=0x00000000
[19:36:25.769]    __Result=0x00000000
[19:36:25.769]  </debugvars>
[19:36:25.769]  
[19:36:25.769]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:36:25.769]    <block atomic="false" info="">
[19:36:25.769]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:36:25.769]        // -> [isSWJ <= 0x00000001]
[19:36:25.769]      __var hasDormant = __protocol & 0x00020000;
[19:36:25.769]        // -> [hasDormant <= 0x00000000]
[19:36:25.769]      __var protType   = __protocol & 0x0000FFFF;
[19:36:25.769]        // -> [protType <= 0x00000002]
[19:36:25.769]    </block>
[19:36:25.769]    <control if="protType == 1" while="" timeout="0" info="">
[19:36:25.769]      // if-block "protType == 1"
[19:36:25.769]        // =>  FALSE
[19:36:25.770]      // skip if-block "protType == 1"
[19:36:25.770]    </control>
[19:36:25.770]    <control if="protType == 2" while="" timeout="0" info="">
[19:36:25.770]      // if-block "protType == 2"
[19:36:25.770]        // =>  TRUE
[19:36:25.770]      <control if="isSWJ" while="" timeout="0" info="">
[19:36:25.770]        // if-block "isSWJ"
[19:36:25.770]          // =>  TRUE
[19:36:25.770]        <control if="hasDormant" while="" timeout="0" info="">
[19:36:25.771]          // if-block "hasDormant"
[19:36:25.771]            // =>  FALSE
[19:36:25.771]          // skip if-block "hasDormant"
[19:36:25.771]        </control>
[19:36:25.771]        <control if="!hasDormant" while="" timeout="0" info="">
[19:36:25.771]          // if-block "!hasDormant"
[19:36:25.771]            // =>  TRUE
[19:36:25.771]          <block atomic="false" info="">
[19:36:25.771]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:36:25.773]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:36:25.773]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:36:25.775]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:36:25.775]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:36:25.776]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:36:25.776]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:36:25.778]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:36:25.778]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:36:25.780]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:36:25.780]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:36:25.781]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:36:25.781]          </block>
[19:36:25.781]          // end if-block "!hasDormant"
[19:36:25.781]        </control>
[19:36:25.782]        // end if-block "isSWJ"
[19:36:25.782]      </control>
[19:36:25.782]      <control if="!isSWJ" while="" timeout="0" info="">
[19:36:25.782]        // if-block "!isSWJ"
[19:36:25.782]          // =>  FALSE
[19:36:25.782]        // skip if-block "!isSWJ"
[19:36:25.782]      </control>
[19:36:25.782]      <block atomic="false" info="">
[19:36:25.782]        ReadDP(0x0);
[19:36:25.784]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:36:25.784]      </block>
[19:36:25.784]      // end if-block "protType == 2"
[19:36:25.784]    </control>
[19:36:25.785]  </sequence>
[19:36:25.785]  
[19:36:25.787]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:36:25.787]  
[19:36:25.787]  <debugvars>
[19:36:25.787]    // Pre-defined
[19:36:25.788]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:36:25.788]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:36:25.788]    __dp=0x00000000
[19:36:25.788]    __ap=0x00000000
[19:36:25.788]    __traceout=0x00000000      (Trace Disabled)
[19:36:25.788]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:36:25.788]    __FlashAddr=0x00000000
[19:36:25.788]    __FlashLen=0x00000000
[19:36:25.789]    __FlashArg=0x00000000
[19:36:25.789]    __FlashOp=0x00000000
[19:36:25.789]    __Result=0x00000000
[19:36:25.789]  </debugvars>
[19:36:25.789]  
[19:36:25.789]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:36:25.789]    <block atomic="false" info="">
[19:36:25.789]      __var SW_DP_ABORT       = 0x0;
[19:36:25.789]        // -> [SW_DP_ABORT <= 0x00000000]
[19:36:25.789]      __var DP_CTRL_STAT      = 0x4;
[19:36:25.789]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:36:25.790]      __var DP_SELECT         = 0x8;
[19:36:25.790]        // -> [DP_SELECT <= 0x00000008]
[19:36:25.790]      __var powered_down      = 0;
[19:36:25.790]        // -> [powered_down <= 0x00000000]
[19:36:25.790]      WriteDP(DP_SELECT, 0x00000000);
[19:36:25.791]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:36:25.791]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:36:25.793]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:36:25.793]        // -> [powered_down <= 0x00000001]
[19:36:25.793]    </block>
[19:36:25.793]    <control if="powered_down" while="" timeout="0" info="">
[19:36:25.793]      // if-block "powered_down"
[19:36:25.793]        // =>  TRUE
[19:36:25.793]      <block atomic="false" info="">
[19:36:25.793]        Message(0, "Debug/System power-up request sent");
[19:36:25.797]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:36:25.799]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:36:25.799]      </block>
[19:36:25.799]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:36:25.799]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:36:25.801]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:36:25.801]        // while-condition  =>  FALSE
[19:36:25.801]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:36:25.801]      </control>
[19:36:25.801]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:36:25.802]        // if-block "(__protocol & 0xFFFF) == 1"
[19:36:25.802]          // =>  FALSE
[19:36:25.802]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:36:25.802]      </control>
[19:36:25.802]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:36:25.802]        // if-block "(__protocol & 0xFFFF) == 2"
[19:36:25.802]          // =>  TRUE
[19:36:25.803]        <block atomic="false" info="">
[19:36:25.803]          Message(0, "executing SWD power up");
[19:36:25.804]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:36:25.806]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:36:25.806]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:36:25.808]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:36:25.808]        </block>
[19:36:25.808]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:36:25.809]      </control>
[19:36:25.809]      // end if-block "powered_down"
[19:36:25.809]    </control>
[19:36:25.809]    <block atomic="false" info="">
[19:36:25.809]      __var DEBUG_PORT_VAL    = 0;
[19:36:25.809]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:36:25.809]      __var ACCESS_POINT_VAL  = 0;
[19:36:25.809]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:36:25.810]      __ap = 1; 
[19:36:25.810]        // -> [__ap <= 0x00000001]
[19:36:25.810]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:36:25.813]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:36:25.813]      __ap = 4;
[19:36:25.813]        // -> [__ap <= 0x00000004]
[19:36:25.813]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:36:25.817]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:36:25.818]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:36:25.818]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:36:25.821]    </block>
[19:36:25.821]    <block atomic="false" info="">
[19:36:25.821]      __var nReset = 0x80;
[19:36:25.821]        // -> [nReset <= 0x00000080]
[19:36:25.821]      __var canReadPins = 0;
[19:36:25.821]        // -> [canReadPins <= 0x00000000]
[19:36:25.821]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:36:25.823]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:36:25.823]        // -> [canReadPins <= 0x00000001]
[19:36:25.823]    </block>
[19:36:25.823]    <control if="" while="1" timeout="200" info="">
[19:36:25.823]      // while "1"  (timeout="200")
[19:36:25.823]      // while-condition  =>  TRUE
[19:36:25.823]      // while "1"  (timeout="200")
[19:36:25.823]      // while-condition  =>  TRUE
[19:36:25.823]      // while "1"  (timeout="200")
[19:36:25.823]      // while-condition  =>  TRUE
[19:36:25.823]      // while "1"  (timeout="200")
[19:36:25.824]      // while-condition  =>  TRUE
[19:36:25.824]      // while "1"  (timeout="200")
[19:36:25.824]      // while-condition  =>  TRUE
[19:36:25.824]      // while "1"  (timeout="200")
[19:36:25.824]      // while-condition  =>  TRUE
[19:36:25.824]      // while "1"  (timeout="200")
[19:36:25.824]      // while-condition  =>  TRUE
[19:36:25.824]      // while "1"  (timeout="200")
[19:36:25.824]      // while-condition  =>  TRUE
[19:36:25.824]      // while "1"  (timeout="200")
[19:36:25.825]      // while-condition  =>  TRUE
[19:36:25.825]      // while "1"  (timeout="200")
[19:36:25.825]      // while-condition  =>  TRUE
[19:36:25.825]      // while "1"  (timeout="200")
[19:36:25.825]      // while-condition  =>  TRUE
[19:36:25.825]      // while "1"  (timeout="200")
[19:36:25.825]      // while-condition  =>  TRUE
[19:36:25.825]      // while "1"  (timeout="200")
[19:36:25.825]      // while-condition  =>  TRUE
[19:36:25.825]      // while "1"  (timeout="200")
[19:36:25.825]      // while-condition  =>  TRUE
[19:36:25.826]      // while "1"  (timeout="200")
[19:36:25.826]      // while-condition  =>  TRUE
[19:36:25.826]      // while "1"  (timeout="200")
[19:36:25.826]      // while-condition  =>  TRUE
[19:36:25.826]      // while "1"  (timeout="200")
[19:36:25.826]      // while-condition  =>  TRUE
[19:36:25.827]      // while "1"  (timeout="200")
[19:36:25.827]      // while-condition  =>  TRUE
[19:36:25.827]      // while "1"  (timeout="200")
[19:36:25.827]      // while-condition  =>  TRUE
[19:36:25.827]      // while "1"  (timeout="200")
[19:36:25.827]      // while-condition  =>  TRUE
[19:36:25.827]      // while "1"  (timeout="200")
[19:36:25.827]      // while-condition  =>  TRUE
[19:36:25.827]      // while "1"  (timeout="200")
[19:36:25.827]      // while-condition  =>  TRUE
[19:36:25.828]      // while "1"  (timeout="200")
[19:36:25.828]      // while-condition  =>  TRUE
[19:36:25.828]      // while "1"  (timeout="200")
[19:36:25.828]      // while-condition  =>  TRUE
[19:36:25.828]      // while "1"  (timeout="200")
[19:36:25.828]      // while-condition  =>  TRUE
[19:36:25.828]      // while "1"  (timeout="200")
[19:36:25.828]      // while-condition  =>  TRUE
[19:36:25.828]      // while "1"  (timeout="200")
[19:36:25.829]      // while-condition  =>  TRUE
[19:36:25.829]      // while "1"  (timeout="200")
[19:36:25.829]      // while  =>  TIMEOUT
[19:36:25.829]      // end while "1"
[19:36:25.829]    </control>
[19:36:25.829]    <control if="canReadPins" while="" timeout="0" info="">
[19:36:25.829]      // if-block "canReadPins"
[19:36:25.829]        // =>  TRUE
[19:36:25.829]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:36:25.829]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:36:25.831]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:36:25.831]        // while-condition  =>  FALSE
[19:36:25.831]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:36:25.832]      </control>
[19:36:25.832]      // end if-block "canReadPins"
[19:36:25.832]    </control>
[19:36:25.832]    <control if="!canReadPins" while="" timeout="0" info="">
[19:36:25.832]      // if-block "!canReadPins"
[19:36:25.832]        // =>  FALSE
[19:36:25.832]      // skip if-block "!canReadPins"
[19:36:25.832]    </control>
[19:36:25.832]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:36:25.832]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:36:25.833]        // =>  TRUE
[19:36:25.833]      <block atomic="false" info="">
[19:36:25.833]        WriteAP(0x00, 0x190008);
[19:36:25.834]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:36:25.834]        WriteAP(0xF0, 0x01);
[19:36:25.838]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:36:25.838]      </block>
[19:36:25.838]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:36:25.838]    </control>
[19:36:25.838]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:36:25.838]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:36:25.838]        // =>  FALSE
[19:36:25.838]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:36:25.839]    </control>
[19:36:25.839]    <block atomic="false" info="">
[19:36:25.839]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:36:25.841]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:36:25.841]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:36:25.841]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:36:25.843]      __ap = 0; //lets make sure we reset the access point selection
[19:36:25.843]        // -> [__ap <= 0x00000000]
[19:36:25.843]    </block>
[19:36:25.843]  </sequence>
[19:36:25.843]  
[19:36:25.868]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:36:25.868]  
[19:36:25.868]  <debugvars>
[19:36:25.868]    // Pre-defined
[19:36:25.868]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:36:25.869]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:36:25.869]    __dp=0x00000000
[19:36:25.869]    __ap=0x00000000
[19:36:25.869]    __traceout=0x00000000      (Trace Disabled)
[19:36:25.869]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:36:25.869]    __FlashAddr=0x00000000
[19:36:25.869]    __FlashLen=0x00000000
[19:36:25.869]    __FlashArg=0x00000000
[19:36:25.869]    __FlashOp=0x00000000
[19:36:25.870]    __Result=0x00000000
[19:36:25.870]  </debugvars>
[19:36:25.870]  
[19:36:25.870]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:36:25.870]    <block atomic="false" info="">
[19:36:25.870]      __var deviceID = 0;
[19:36:25.870]        // -> [deviceID <= 0x00000000]
[19:36:25.871]      __var version = 0;
[19:36:25.871]        // -> [version <= 0x00000000]
[19:36:25.871]      __var partNum = 0;
[19:36:25.871]        // -> [partNum <= 0x00000000]
[19:36:25.871]      __var manuf = 0;
[19:36:25.871]        // -> [manuf <= 0x00000000]
[19:36:25.871]      __var isMSPM0G1X0X_G3X0X = 0;
[19:36:25.871]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:36:25.871]      __var isProduction = 0;
[19:36:25.871]        // -> [isProduction <= 0x00000000]
[19:36:25.871]      __var continueId = 0;
[19:36:25.872]        // -> [continueId <= 0x00000000]
[19:36:25.872]      deviceID =   Read32(0x41C40004);
[19:36:25.877]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:36:25.877]        // -> [deviceID <= 0x2BB8802F]
[19:36:25.877]      version = deviceID >> 28;
[19:36:25.877]        // -> [version <= 0x00000002]
[19:36:25.877]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:36:25.877]        // -> [partNum <= 0x0000BB88]
[19:36:25.877]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:36:25.877]        // -> [manuf <= 0x00000017]
[19:36:25.877]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:36:25.877]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:36:25.877]      isProduction = (version > 0);
[19:36:25.877]        // -> [isProduction <= 0x00000001]
[19:36:25.877]    </block>
[19:36:25.878]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:36:25.878]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:36:25.878]        // =>  FALSE
[19:36:25.878]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:36:25.878]    </control>
[19:36:25.878]    <control if="continueId == 4" while="" timeout="0" info="">
[19:36:25.878]      // if-block "continueId == 4"
[19:36:25.878]        // =>  FALSE
[19:36:25.878]      // skip if-block "continueId == 4"
[19:36:25.879]    </control>
[19:36:25.879]    <control if="!isProduction" while="" timeout="0" info="">
[19:36:25.879]      // if-block "!isProduction"
[19:36:25.879]        // =>  FALSE
[19:36:25.879]      // skip if-block "!isProduction"
[19:36:25.879]    </control>
[19:36:25.879]  </sequence>
[19:36:25.879]  
[19:46:03.372]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:46:03.372]  
[19:46:03.381]  <debugvars>
[19:46:03.381]    // Pre-defined
[19:46:03.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:46:03.381]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:46:03.381]    __dp=0x00000000
[19:46:03.381]    __ap=0x00000000
[19:46:03.381]    __traceout=0x00000000      (Trace Disabled)
[19:46:03.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:46:03.381]    __FlashAddr=0x00000000
[19:46:03.381]    __FlashLen=0x00000000
[19:46:03.382]    __FlashArg=0x00000000
[19:46:03.382]    __FlashOp=0x00000000
[19:46:03.382]    __Result=0x00000000
[19:46:03.382]  </debugvars>
[19:46:03.382]  
[19:46:03.382]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:46:03.382]    <block atomic="false" info="">
[19:46:03.382]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:46:03.382]        // -> [isSWJ <= 0x00000001]
[19:46:03.382]      __var hasDormant = __protocol & 0x00020000;
[19:46:03.382]        // -> [hasDormant <= 0x00000000]
[19:46:03.382]      __var protType   = __protocol & 0x0000FFFF;
[19:46:03.383]        // -> [protType <= 0x00000002]
[19:46:03.383]    </block>
[19:46:03.383]    <control if="protType == 1" while="" timeout="0" info="">
[19:46:03.383]      // if-block "protType == 1"
[19:46:03.383]        // =>  FALSE
[19:46:03.383]      // skip if-block "protType == 1"
[19:46:03.383]    </control>
[19:46:03.384]    <control if="protType == 2" while="" timeout="0" info="">
[19:46:03.384]      // if-block "protType == 2"
[19:46:03.384]        // =>  TRUE
[19:46:03.384]      <control if="isSWJ" while="" timeout="0" info="">
[19:46:03.384]        // if-block "isSWJ"
[19:46:03.384]          // =>  TRUE
[19:46:03.384]        <control if="hasDormant" while="" timeout="0" info="">
[19:46:03.384]          // if-block "hasDormant"
[19:46:03.384]            // =>  FALSE
[19:46:03.384]          // skip if-block "hasDormant"
[19:46:03.384]        </control>
[19:46:03.384]        <control if="!hasDormant" while="" timeout="0" info="">
[19:46:03.386]          // if-block "!hasDormant"
[19:46:03.386]            // =>  TRUE
[19:46:03.386]          <block atomic="false" info="">
[19:46:03.386]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:46:03.389]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:46:03.389]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:46:03.433]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:46:03.433]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:46:03.438]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:46:03.438]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:46:03.439]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:46:03.439]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:46:03.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:46:03.459]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:46:03.462]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:46:03.463]          </block>
[19:46:03.463]          // end if-block "!hasDormant"
[19:46:03.463]        </control>
[19:46:03.463]        // end if-block "isSWJ"
[19:46:03.463]      </control>
[19:46:03.463]      <control if="!isSWJ" while="" timeout="0" info="">
[19:46:03.463]        // if-block "!isSWJ"
[19:46:03.463]          // =>  FALSE
[19:46:03.463]        // skip if-block "!isSWJ"
[19:46:03.463]      </control>
[19:46:03.463]      <block atomic="false" info="">
[19:46:03.463]        ReadDP(0x0);
[19:46:03.465]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:46:03.465]      </block>
[19:46:03.465]      // end if-block "protType == 2"
[19:46:03.465]    </control>
[19:46:03.465]  </sequence>
[19:46:03.465]  
[19:46:03.511]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:46:03.511]  
[19:46:03.511]  <debugvars>
[19:46:03.511]    // Pre-defined
[19:46:03.511]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:46:03.511]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:46:03.511]    __dp=0x00000000
[19:46:03.512]    __ap=0x00000000
[19:46:03.512]    __traceout=0x00000000      (Trace Disabled)
[19:46:03.512]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:46:03.512]    __FlashAddr=0x00000000
[19:46:03.512]    __FlashLen=0x00000000
[19:46:03.512]    __FlashArg=0x00000000
[19:46:03.512]    __FlashOp=0x00000000
[19:46:03.512]    __Result=0x00000000
[19:46:03.512]  </debugvars>
[19:46:03.512]  
[19:46:03.513]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:46:03.513]    <block atomic="false" info="">
[19:46:03.513]      __var SW_DP_ABORT       = 0x0;
[19:46:03.513]        // -> [SW_DP_ABORT <= 0x00000000]
[19:46:03.513]      __var DP_CTRL_STAT      = 0x4;
[19:46:03.514]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:46:03.514]      __var DP_SELECT         = 0x8;
[19:46:03.514]        // -> [DP_SELECT <= 0x00000008]
[19:46:03.514]      __var powered_down      = 0;
[19:46:03.514]        // -> [powered_down <= 0x00000000]
[19:46:03.514]      WriteDP(DP_SELECT, 0x00000000);
[19:46:03.522]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:46:03.522]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:46:03.525]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:46:03.525]        // -> [powered_down <= 0x00000001]
[19:46:03.525]    </block>
[19:46:03.525]    <control if="powered_down" while="" timeout="0" info="">
[19:46:03.525]      // if-block "powered_down"
[19:46:03.525]        // =>  TRUE
[19:46:03.525]      <block atomic="false" info="">
[19:46:03.526]        Message(0, "Debug/System power-up request sent");
[19:46:03.527]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:46:03.530]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:46:03.530]      </block>
[19:46:03.530]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:46:03.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:46:03.532]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:46:03.532]        // while-condition  =>  FALSE
[19:46:03.532]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:46:03.532]      </control>
[19:46:03.532]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:46:03.533]        // if-block "(__protocol & 0xFFFF) == 1"
[19:46:03.533]          // =>  FALSE
[19:46:03.533]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:46:03.533]      </control>
[19:46:03.533]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:46:03.533]        // if-block "(__protocol & 0xFFFF) == 2"
[19:46:03.533]          // =>  TRUE
[19:46:03.533]        <block atomic="false" info="">
[19:46:03.533]          Message(0, "executing SWD power up");
[19:46:03.535]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:46:03.537]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:46:03.537]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:46:03.539]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:46:03.539]        </block>
[19:46:03.539]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:46:03.539]      </control>
[19:46:03.541]      // end if-block "powered_down"
[19:46:03.541]    </control>
[19:46:03.541]    <block atomic="false" info="">
[19:46:03.541]      __var DEBUG_PORT_VAL    = 0;
[19:46:03.541]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:46:03.541]      __var ACCESS_POINT_VAL  = 0;
[19:46:03.541]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:46:03.541]      __ap = 1; 
[19:46:03.541]        // -> [__ap <= 0x00000001]
[19:46:03.541]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:46:03.545]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:46:03.545]      __ap = 4;
[19:46:03.545]        // -> [__ap <= 0x00000004]
[19:46:03.545]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:46:03.563]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:46:03.563]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:46:03.563]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:46:03.565]    </block>
[19:46:03.565]    <block atomic="false" info="">
[19:46:03.565]      __var nReset = 0x80;
[19:46:03.565]        // -> [nReset <= 0x00000080]
[19:46:03.565]      __var canReadPins = 0;
[19:46:03.565]        // -> [canReadPins <= 0x00000000]
[19:46:03.565]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:46:03.577]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:46:03.577]        // -> [canReadPins <= 0x00000001]
[19:46:03.577]    </block>
[19:46:03.578]    <control if="" while="1" timeout="200" info="">
[19:46:03.578]      // while "1"  (timeout="200")
[19:46:03.578]      // while-condition  =>  TRUE
[19:46:03.578]      // while "1"  (timeout="200")
[19:46:03.578]      // while-condition  =>  TRUE
[19:46:03.578]      // while "1"  (timeout="200")
[19:46:03.578]      // while-condition  =>  TRUE
[19:46:03.578]      // while "1"  (timeout="200")
[19:46:03.578]      // while-condition  =>  TRUE
[19:46:03.578]      // while "1"  (timeout="200")
[19:46:03.579]      // while-condition  =>  TRUE
[19:46:03.579]      // while "1"  (timeout="200")
[19:46:03.579]      // while  =>  TIMEOUT
[19:46:03.579]      // end while "1"
[19:46:03.579]    </control>
[19:46:03.579]    <control if="canReadPins" while="" timeout="0" info="">
[19:46:03.579]      // if-block "canReadPins"
[19:46:03.579]        // =>  TRUE
[19:46:03.579]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:46:03.579]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:46:03.581]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:46:03.581]        // while-condition  =>  FALSE
[19:46:03.581]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:46:03.581]      </control>
[19:46:03.581]      // end if-block "canReadPins"
[19:46:03.581]    </control>
[19:46:03.581]    <control if="!canReadPins" while="" timeout="0" info="">
[19:46:03.581]      // if-block "!canReadPins"
[19:46:03.581]        // =>  FALSE
[19:46:03.581]      // skip if-block "!canReadPins"
[19:46:03.582]    </control>
[19:46:03.582]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:46:03.582]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:46:03.582]        // =>  TRUE
[19:46:03.582]      <block atomic="false" info="">
[19:46:03.582]        WriteAP(0x00, 0x190008);
[19:46:03.586]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:46:03.586]        WriteAP(0xF0, 0x01);
[19:46:03.596]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:46:03.597]      </block>
[19:46:03.597]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:46:03.597]    </control>
[19:46:03.597]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:46:03.597]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:46:03.597]        // =>  FALSE
[19:46:03.597]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:46:03.597]    </control>
[19:46:03.598]    <block atomic="false" info="">
[19:46:03.598]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:46:03.608]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:46:03.608]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:46:03.608]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:46:03.609]      __ap = 0; //lets make sure we reset the access point selection
[19:46:03.609]        // -> [__ap <= 0x00000000]
[19:46:03.609]    </block>
[19:46:03.611]  </sequence>
[19:46:03.611]  
[19:46:03.652]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:46:03.652]  
[19:46:03.652]  <debugvars>
[19:46:03.652]    // Pre-defined
[19:46:03.652]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:46:03.653]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:46:03.653]    __dp=0x00000000
[19:46:03.653]    __ap=0x00000000
[19:46:03.653]    __traceout=0x00000000      (Trace Disabled)
[19:46:03.653]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:46:03.653]    __FlashAddr=0x00000000
[19:46:03.654]    __FlashLen=0x00000000
[19:46:03.654]    __FlashArg=0x00000000
[19:46:03.654]    __FlashOp=0x00000000
[19:46:03.654]    __Result=0x00000000
[19:46:03.654]  </debugvars>
[19:46:03.654]  
[19:46:03.654]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:46:03.654]    <block atomic="false" info="">
[19:46:03.654]      __var deviceID = 0;
[19:46:03.654]        // -> [deviceID <= 0x00000000]
[19:46:03.655]      __var version = 0;
[19:46:03.655]        // -> [version <= 0x00000000]
[19:46:03.655]      __var partNum = 0;
[19:46:03.655]        // -> [partNum <= 0x00000000]
[19:46:03.655]      __var manuf = 0;
[19:46:03.655]        // -> [manuf <= 0x00000000]
[19:46:03.655]      __var isMSPM0G1X0X_G3X0X = 0;
[19:46:03.655]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:46:03.655]      __var isProduction = 0;
[19:46:03.655]        // -> [isProduction <= 0x00000000]
[19:46:03.656]      __var continueId = 0;
[19:46:03.656]        // -> [continueId <= 0x00000000]
[19:46:03.656]      deviceID =   Read32(0x41C40004);
[19:46:03.679]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:46:03.680]        // -> [deviceID <= 0x2BB8802F]
[19:46:03.680]      version = deviceID >> 28;
[19:46:03.680]        // -> [version <= 0x00000002]
[19:46:03.680]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:46:03.680]        // -> [partNum <= 0x0000BB88]
[19:46:03.680]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:46:03.680]        // -> [manuf <= 0x00000017]
[19:46:03.680]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:46:03.681]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:46:03.681]      isProduction = (version > 0);
[19:46:03.681]        // -> [isProduction <= 0x00000001]
[19:46:03.681]    </block>
[19:46:03.681]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:46:03.681]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:46:03.681]        // =>  FALSE
[19:46:03.681]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:46:03.681]    </control>
[19:46:03.681]    <control if="continueId == 4" while="" timeout="0" info="">
[19:46:03.682]      // if-block "continueId == 4"
[19:46:03.682]        // =>  FALSE
[19:46:03.682]      // skip if-block "continueId == 4"
[19:46:03.682]    </control>
[19:46:03.682]    <control if="!isProduction" while="" timeout="0" info="">
[19:46:03.682]      // if-block "!isProduction"
[19:46:03.682]        // =>  FALSE
[19:46:03.683]      // skip if-block "!isProduction"
[19:46:03.683]    </control>
[19:46:03.683]  </sequence>
[19:46:03.683]  
[19:46:11.857]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:46:11.857]  
[19:46:11.866]  <debugvars>
[19:46:11.866]    // Pre-defined
[19:46:11.866]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:46:11.866]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:46:11.866]    __dp=0x00000000
[19:46:11.866]    __ap=0x00000000
[19:46:11.866]    __traceout=0x00000000      (Trace Disabled)
[19:46:11.866]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:46:11.867]    __FlashAddr=0x00000000
[19:46:11.867]    __FlashLen=0x00000000
[19:46:11.867]    __FlashArg=0x00000000
[19:46:11.867]    __FlashOp=0x00000000
[19:46:11.867]    __Result=0x00000000
[19:46:11.867]  </debugvars>
[19:46:11.867]  
[19:46:11.867]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:46:11.867]    <block atomic="false" info="">
[19:46:11.867]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:46:11.867]        // -> [isSWJ <= 0x00000001]
[19:46:11.868]      __var hasDormant = __protocol & 0x00020000;
[19:46:11.868]        // -> [hasDormant <= 0x00000000]
[19:46:11.868]      __var protType   = __protocol & 0x0000FFFF;
[19:46:11.868]        // -> [protType <= 0x00000002]
[19:46:11.868]    </block>
[19:46:11.868]    <control if="protType == 1" while="" timeout="0" info="">
[19:46:11.868]      // if-block "protType == 1"
[19:46:11.868]        // =>  FALSE
[19:46:11.868]      // skip if-block "protType == 1"
[19:46:11.868]    </control>
[19:46:11.869]    <control if="protType == 2" while="" timeout="0" info="">
[19:46:11.869]      // if-block "protType == 2"
[19:46:11.869]        // =>  TRUE
[19:46:11.869]      <control if="isSWJ" while="" timeout="0" info="">
[19:46:11.869]        // if-block "isSWJ"
[19:46:11.869]          // =>  TRUE
[19:46:11.869]        <control if="hasDormant" while="" timeout="0" info="">
[19:46:11.869]          // if-block "hasDormant"
[19:46:11.869]            // =>  FALSE
[19:46:11.869]          // skip if-block "hasDormant"
[19:46:11.870]        </control>
[19:46:11.870]        <control if="!hasDormant" while="" timeout="0" info="">
[19:46:11.870]          // if-block "!hasDormant"
[19:46:11.870]            // =>  TRUE
[19:46:11.870]          <block atomic="false" info="">
[19:46:11.870]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:46:11.880]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:46:11.880]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:46:11.900]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:46:11.900]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:46:11.939]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:46:11.939]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:46:11.946]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:46:11.946]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:46:11.985]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:46:11.986]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:46:11.995]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:46:11.995]          </block>
[19:46:11.995]          // end if-block "!hasDormant"
[19:46:11.995]        </control>
[19:46:11.996]        // end if-block "isSWJ"
[19:46:11.996]      </control>
[19:46:11.996]      <control if="!isSWJ" while="" timeout="0" info="">
[19:46:11.996]        // if-block "!isSWJ"
[19:46:11.996]          // =>  FALSE
[19:46:11.996]        // skip if-block "!isSWJ"
[19:46:11.996]      </control>
[19:46:11.996]      <block atomic="false" info="">
[19:46:11.996]        ReadDP(0x0);
[19:46:12.019]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:46:12.019]      </block>
[19:46:12.019]      // end if-block "protType == 2"
[19:46:12.019]    </control>
[19:46:12.019]  </sequence>
[19:46:12.020]  
[19:46:12.091]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:46:12.091]  
[19:46:12.091]  <debugvars>
[19:46:12.092]    // Pre-defined
[19:46:12.092]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:46:12.092]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:46:12.092]    __dp=0x00000000
[19:46:12.092]    __ap=0x00000000
[19:46:12.092]    __traceout=0x00000000      (Trace Disabled)
[19:46:12.093]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:46:12.093]    __FlashAddr=0x00000000
[19:46:12.093]    __FlashLen=0x00000000
[19:46:12.093]    __FlashArg=0x00000000
[19:46:12.093]    __FlashOp=0x00000000
[19:46:12.093]    __Result=0x00000000
[19:46:12.094]  </debugvars>
[19:46:12.094]  
[19:46:12.094]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:46:12.094]    <block atomic="false" info="">
[19:46:12.094]      __var SW_DP_ABORT       = 0x0;
[19:46:12.094]        // -> [SW_DP_ABORT <= 0x00000000]
[19:46:12.094]      __var DP_CTRL_STAT      = 0x4;
[19:46:12.094]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:46:12.095]      __var DP_SELECT         = 0x8;
[19:46:12.095]        // -> [DP_SELECT <= 0x00000008]
[19:46:12.095]      __var powered_down      = 0;
[19:46:12.095]        // -> [powered_down <= 0x00000000]
[19:46:12.095]      WriteDP(DP_SELECT, 0x00000000);
[19:46:12.133]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:46:12.133]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:46:12.144]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:46:12.145]        // -> [powered_down <= 0x00000001]
[19:46:12.145]    </block>
[19:46:12.145]    <control if="powered_down" while="" timeout="0" info="">
[19:46:12.145]      // if-block "powered_down"
[19:46:12.145]        // =>  TRUE
[19:46:12.145]      <block atomic="false" info="">
[19:46:12.146]        Message(0, "Debug/System power-up request sent");
[19:46:12.148]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:46:12.175]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:46:12.175]      </block>
[19:46:12.176]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:46:12.176]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:46:12.189]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:46:12.189]        // while-condition  =>  FALSE
[19:46:12.189]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:46:12.189]      </control>
[19:46:12.189]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:46:12.189]        // if-block "(__protocol & 0xFFFF) == 1"
[19:46:12.189]          // =>  FALSE
[19:46:12.190]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:46:12.190]      </control>
[19:46:12.190]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:46:12.190]        // if-block "(__protocol & 0xFFFF) == 2"
[19:46:12.190]          // =>  TRUE
[19:46:12.190]        <block atomic="false" info="">
[19:46:12.190]          Message(0, "executing SWD power up");
[19:46:12.193]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:46:12.242]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:46:12.242]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:46:12.250]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:46:12.250]        </block>
[19:46:12.250]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:46:12.251]      </control>
[19:46:12.251]      // end if-block "powered_down"
[19:46:12.251]    </control>
[19:46:12.251]    <block atomic="false" info="">
[19:46:12.251]      __var DEBUG_PORT_VAL    = 0;
[19:46:12.251]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:46:12.251]      __var ACCESS_POINT_VAL  = 0;
[19:46:12.251]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:46:12.252]      __ap = 1; 
[19:46:12.252]        // -> [__ap <= 0x00000001]
[19:46:12.252]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:46:12.336]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:46:12.336]      __ap = 4;
[19:46:12.336]        // -> [__ap <= 0x00000004]
[19:46:12.336]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:46:12.395]        // -> [ReadAP(0x00000000) => 0x00080427]   (__dp=0x00000000, __ap=0x00000004)
[19:46:12.395]        // -> [ACCESS_POINT_VAL <= 0x00080427]
[19:46:12.395]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:46:12.397]    </block>
[19:46:12.397]    <block atomic="false" info="">
[19:46:12.397]      __var nReset = 0x80;
[19:46:12.397]        // -> [nReset <= 0x00000080]
[19:46:12.398]      __var canReadPins = 0;
[19:46:12.398]        // -> [canReadPins <= 0x00000000]
[19:46:12.398]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:46:12.400]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:46:12.400]        // -> [canReadPins <= 0x00000001]
[19:46:12.400]    </block>
[19:46:12.400]    <control if="" while="1" timeout="200" info="">
[19:46:12.401]      // while "1"  (timeout="200")
[19:46:12.401]      // while-condition  =>  TRUE
[19:46:12.401]      // while "1"  (timeout="200")
[19:46:12.401]      // while-condition  =>  TRUE
[19:46:12.401]      // while "1"  (timeout="200")
[19:46:12.403]      // while-condition  =>  TRUE
[19:46:12.403]      // while "1"  (timeout="200")
[19:46:12.403]      // while-condition  =>  TRUE
[19:46:12.403]      // while "1"  (timeout="200")
[19:46:12.403]      // while-condition  =>  TRUE
[19:46:12.403]      // while "1"  (timeout="200")
[19:46:12.403]      // while-condition  =>  TRUE
[19:46:12.403]      // while "1"  (timeout="200")
[19:46:12.403]      // while-condition  =>  TRUE
[19:46:12.403]      // while "1"  (timeout="200")
[19:46:12.403]      // while-condition  =>  TRUE
[19:46:12.403]      // while "1"  (timeout="200")
[19:46:12.403]      // while-condition  =>  TRUE
[19:46:12.404]      // while "1"  (timeout="200")
[19:46:12.404]      // while-condition  =>  TRUE
[19:46:12.404]      // while "1"  (timeout="200")
[19:46:12.404]      // while-condition  =>  TRUE
[19:46:12.404]      // while "1"  (timeout="200")
[19:46:12.404]      // while-condition  =>  TRUE
[19:46:12.404]      // while "1"  (timeout="200")
[19:46:12.404]      // while-condition  =>  TRUE
[19:46:12.404]      // while "1"  (timeout="200")
[19:46:12.404]      // while-condition  =>  TRUE
[19:46:12.405]      // while "1"  (timeout="200")
[19:46:12.405]      // while-condition  =>  TRUE
[19:46:12.405]      // while "1"  (timeout="200")
[19:46:12.405]      // while-condition  =>  TRUE
[19:46:12.405]      // while "1"  (timeout="200")
[19:46:12.405]      // while-condition  =>  TRUE
[19:46:12.405]      // while "1"  (timeout="200")
[19:46:12.405]      // while-condition  =>  TRUE
[19:46:12.405]      // while "1"  (timeout="200")
[19:46:12.405]      // while-condition  =>  TRUE
[19:46:12.406]      // while "1"  (timeout="200")
[19:46:12.406]      // while-condition  =>  TRUE
[19:46:12.406]      // while "1"  (timeout="200")
[19:46:12.406]      // while-condition  =>  TRUE
[19:46:12.406]      // while "1"  (timeout="200")
[19:46:12.406]      // while-condition  =>  TRUE
[19:46:12.406]      // while "1"  (timeout="200")
[19:46:12.406]      // while-condition  =>  TRUE
[19:46:12.406]      // while "1"  (timeout="200")
[19:46:12.406]      // while-condition  =>  TRUE
[19:46:12.407]      // while "1"  (timeout="200")
[19:46:12.407]      // while  =>  TIMEOUT
[19:46:12.407]      // end while "1"
[19:46:12.407]    </control>
[19:46:12.407]    <control if="canReadPins" while="" timeout="0" info="">
[19:46:12.407]      // if-block "canReadPins"
[19:46:12.407]        // =>  TRUE
[19:46:12.407]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:46:12.407]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:46:12.429]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:46:12.429]        // while-condition  =>  FALSE
[19:46:12.429]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:46:12.430]      </control>
[19:46:12.430]      // end if-block "canReadPins"
[19:46:12.430]    </control>
[19:46:12.430]    <control if="!canReadPins" while="" timeout="0" info="">
[19:46:12.430]      // if-block "!canReadPins"
[19:46:12.430]        // =>  FALSE
[19:46:12.430]      // skip if-block "!canReadPins"
[19:46:12.430]    </control>
[19:46:12.430]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:46:12.431]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:46:12.431]        // =>  TRUE
[19:46:12.431]      <block atomic="false" info="">
[19:46:12.431]        WriteAP(0x00, 0x190008);
[19:46:12.448]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:46:12.448]        WriteAP(0xF0, 0x01);
[19:46:12.554]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:46:12.554]      </block>
[19:46:12.554]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:46:12.554]    </control>
[19:46:12.554]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:46:12.554]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:46:12.555]        // =>  FALSE
[19:46:12.555]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:46:12.555]    </control>
[19:46:12.555]    <block atomic="false" info="">
[19:46:12.555]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:46:12.584]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[19:46:12.585]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[19:46:12.585]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:46:12.587]      __ap = 0; //lets make sure we reset the access point selection
[19:46:12.587]        // -> [__ap <= 0x00000000]
[19:46:12.587]    </block>
[19:46:12.588]  </sequence>
[19:46:12.588]  
[19:46:12.897]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:46:12.897]  
[19:46:12.907]  <debugvars>
[19:46:12.907]    // Pre-defined
[19:46:12.907]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:46:12.907]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:46:12.907]    __dp=0x00000000
[19:46:12.907]    __ap=0x00000000
[19:46:12.907]    __traceout=0x00000000      (Trace Disabled)
[19:46:12.907]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:46:12.907]    __FlashAddr=0x00000000
[19:46:12.907]    __FlashLen=0x00000000
[19:46:12.907]    __FlashArg=0x00000000
[19:46:12.907]    __FlashOp=0x00000000
[19:46:12.908]    __Result=0x00000000
[19:46:12.908]  </debugvars>
[19:46:12.908]  
[19:46:12.908]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:46:12.908]    <block atomic="false" info="">
[19:46:12.908]      __var deviceID = 0;
[19:46:12.909]        // -> [deviceID <= 0x00000000]
[19:46:12.909]      __var version = 0;
[19:46:12.909]        // -> [version <= 0x00000000]
[19:46:12.909]      __var partNum = 0;
[19:46:12.909]        // -> [partNum <= 0x00000000]
[19:46:12.909]      __var manuf = 0;
[19:46:12.910]        // -> [manuf <= 0x00000000]
[19:46:12.910]      __var isMSPM0G1X0X_G3X0X = 0;
[19:46:12.910]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:46:12.910]      __var isProduction = 0;
[19:46:12.910]        // -> [isProduction <= 0x00000000]
[19:46:12.911]      __var continueId = 0;
[19:46:12.911]        // -> [continueId <= 0x00000000]
[19:46:12.911]      deviceID =   Read32(0x41C40004);
[19:46:12.983]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:46:12.984]        // -> [deviceID <= 0x2BB8802F]
[19:46:12.984]      version = deviceID >> 28;
[19:46:12.984]        // -> [version <= 0x00000002]
[19:46:12.984]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:46:12.985]        // -> [partNum <= 0x0000BB88]
[19:46:12.985]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:46:12.985]        // -> [manuf <= 0x00000017]
[19:46:12.985]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:46:12.985]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:46:12.985]      isProduction = (version > 0);
[19:46:12.985]        // -> [isProduction <= 0x00000001]
[19:46:12.985]    </block>
[19:46:12.985]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:46:12.985]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:46:12.986]        // =>  FALSE
[19:46:12.986]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:46:12.986]    </control>
[19:46:12.986]    <control if="continueId == 4" while="" timeout="0" info="">
[19:46:12.986]      // if-block "continueId == 4"
[19:46:12.986]        // =>  FALSE
[19:46:12.986]      // skip if-block "continueId == 4"
[19:46:12.986]    </control>
[19:46:12.987]    <control if="!isProduction" while="" timeout="0" info="">
[19:46:12.987]      // if-block "!isProduction"
[19:46:12.987]        // =>  FALSE
[19:46:12.987]      // skip if-block "!isProduction"
[19:46:12.987]    </control>
[19:46:12.987]  </sequence>
[19:46:12.988]  
[19:46:41.964]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:46:41.964]  
[19:46:41.974]  <debugvars>
[19:46:41.974]    // Pre-defined
[19:46:41.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:46:41.974]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:46:41.974]    __dp=0x00000000
[19:46:41.975]    __ap=0x00000000
[19:46:41.975]    __traceout=0x00000000      (Trace Disabled)
[19:46:41.975]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:46:41.975]    __FlashAddr=0x00000000
[19:46:41.975]    __FlashLen=0x00000000
[19:46:41.975]    __FlashArg=0x00000000
[19:46:41.975]    __FlashOp=0x00000000
[19:46:41.975]    __Result=0x00000000
[19:46:41.975]  </debugvars>
[19:46:41.975]  
[19:46:41.975]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:46:41.975]    <block atomic="false" info="">
[19:46:41.976]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:46:41.976]        // -> [isSWJ <= 0x00000001]
[19:46:41.976]      __var hasDormant = __protocol & 0x00020000;
[19:46:41.976]        // -> [hasDormant <= 0x00000000]
[19:46:41.976]      __var protType   = __protocol & 0x0000FFFF;
[19:46:41.976]        // -> [protType <= 0x00000002]
[19:46:41.976]    </block>
[19:46:41.976]    <control if="protType == 1" while="" timeout="0" info="">
[19:46:41.976]      // if-block "protType == 1"
[19:46:41.976]        // =>  FALSE
[19:46:41.977]      // skip if-block "protType == 1"
[19:46:41.977]    </control>
[19:46:41.977]    <control if="protType == 2" while="" timeout="0" info="">
[19:46:41.977]      // if-block "protType == 2"
[19:46:41.977]        // =>  TRUE
[19:46:41.977]      <control if="isSWJ" while="" timeout="0" info="">
[19:46:41.977]        // if-block "isSWJ"
[19:46:41.977]          // =>  TRUE
[19:46:41.977]        <control if="hasDormant" while="" timeout="0" info="">
[19:46:41.977]          // if-block "hasDormant"
[19:46:41.977]            // =>  FALSE
[19:46:41.979]          // skip if-block "hasDormant"
[19:46:41.979]        </control>
[19:46:41.979]        <control if="!hasDormant" while="" timeout="0" info="">
[19:46:41.979]          // if-block "!hasDormant"
[19:46:41.979]            // =>  TRUE
[19:46:41.979]          <block atomic="false" info="">
[19:46:41.979]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:46:41.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:46:41.989]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:46:41.994]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:46:41.994]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:46:42.031]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:46:42.031]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:46:42.047]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:46:42.047]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:46:42.049]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:46:42.049]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:46:42.058]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:46:42.058]          </block>
[19:46:42.058]          // end if-block "!hasDormant"
[19:46:42.058]        </control>
[19:46:42.058]        // end if-block "isSWJ"
[19:46:42.058]      </control>
[19:46:42.058]      <control if="!isSWJ" while="" timeout="0" info="">
[19:46:42.058]        // if-block "!isSWJ"
[19:46:42.058]          // =>  FALSE
[19:46:42.058]        // skip if-block "!isSWJ"
[19:46:42.058]      </control>
[19:46:42.058]      <block atomic="false" info="">
[19:46:42.058]        ReadDP(0x0);
[19:46:42.066]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:46:42.066]      </block>
[19:46:42.066]      // end if-block "protType == 2"
[19:46:42.066]    </control>
[19:46:42.066]  </sequence>
[19:46:42.066]  
[19:46:42.089]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:46:42.089]  
[19:46:42.090]  <debugvars>
[19:46:42.090]    // Pre-defined
[19:46:42.090]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:46:42.090]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:46:42.090]    __dp=0x00000000
[19:46:42.090]    __ap=0x00000000
[19:46:42.090]    __traceout=0x00000000      (Trace Disabled)
[19:46:42.090]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:46:42.091]    __FlashAddr=0x00000000
[19:46:42.091]    __FlashLen=0x00000000
[19:46:42.091]    __FlashArg=0x00000000
[19:46:42.091]    __FlashOp=0x00000000
[19:46:42.091]    __Result=0x00000000
[19:46:42.091]  </debugvars>
[19:46:42.091]  
[19:46:42.091]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:46:42.091]    <block atomic="false" info="">
[19:46:42.091]      __var SW_DP_ABORT       = 0x0;
[19:46:42.092]        // -> [SW_DP_ABORT <= 0x00000000]
[19:46:42.092]      __var DP_CTRL_STAT      = 0x4;
[19:46:42.092]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:46:42.092]      __var DP_SELECT         = 0x8;
[19:46:42.092]        // -> [DP_SELECT <= 0x00000008]
[19:46:42.092]      __var powered_down      = 0;
[19:46:42.092]        // -> [powered_down <= 0x00000000]
[19:46:42.092]      WriteDP(DP_SELECT, 0x00000000);
[19:46:42.120]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:46:42.120]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:46:42.128]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:46:42.128]        // -> [powered_down <= 0x00000001]
[19:46:42.129]    </block>
[19:46:42.129]    <control if="powered_down" while="" timeout="0" info="">
[19:46:42.129]      // if-block "powered_down"
[19:46:42.129]        // =>  TRUE
[19:46:42.129]      <block atomic="false" info="">
[19:46:42.129]        Message(0, "Debug/System power-up request sent");
[19:46:42.132]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:46:42.138]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:46:42.138]      </block>
[19:46:42.139]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:46:42.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:46:42.140]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:46:42.140]        // while-condition  =>  FALSE
[19:46:42.140]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:46:42.140]      </control>
[19:46:42.140]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:46:42.140]        // if-block "(__protocol & 0xFFFF) == 1"
[19:46:42.142]          // =>  FALSE
[19:46:42.142]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:46:42.142]      </control>
[19:46:42.142]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:46:42.142]        // if-block "(__protocol & 0xFFFF) == 2"
[19:46:42.142]          // =>  TRUE
[19:46:42.142]        <block atomic="false" info="">
[19:46:42.142]          Message(0, "executing SWD power up");
[19:46:42.144]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:46:42.154]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:46:42.154]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:46:42.171]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:46:42.172]        </block>
[19:46:42.172]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:46:42.172]      </control>
[19:46:42.172]      // end if-block "powered_down"
[19:46:42.172]    </control>
[19:46:42.172]    <block atomic="false" info="">
[19:46:42.172]      __var DEBUG_PORT_VAL    = 0;
[19:46:42.172]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:46:42.172]      __var ACCESS_POINT_VAL  = 0;
[19:46:42.172]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:46:42.172]      __ap = 1; 
[19:46:42.173]        // -> [__ap <= 0x00000001]
[19:46:42.173]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:46:42.192]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:46:42.192]      __ap = 4;
[19:46:42.192]        // -> [__ap <= 0x00000004]
[19:46:42.193]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:46:42.203]        // -> [ReadAP(0x00000000) => 0x00080427]   (__dp=0x00000000, __ap=0x00000004)
[19:46:42.203]        // -> [ACCESS_POINT_VAL <= 0x00080427]
[19:46:42.203]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:46:42.205]    </block>
[19:46:42.206]    <block atomic="false" info="">
[19:46:42.206]      __var nReset = 0x80;
[19:46:42.206]        // -> [nReset <= 0x00000080]
[19:46:42.206]      __var canReadPins = 0;
[19:46:42.206]        // -> [canReadPins <= 0x00000000]
[19:46:42.206]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:46:42.219]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:46:42.219]        // -> [canReadPins <= 0x00000001]
[19:46:42.219]    </block>
[19:46:42.220]    <control if="" while="1" timeout="200" info="">
[19:46:42.220]      // while "1"  (timeout="200")
[19:46:42.220]      // while-condition  =>  TRUE
[19:46:42.220]      // while "1"  (timeout="200")
[19:46:42.220]      // while-condition  =>  TRUE
[19:46:42.220]      // while "1"  (timeout="200")
[19:46:42.220]      // while-condition  =>  TRUE
[19:46:42.221]      // while "1"  (timeout="200")
[19:46:42.221]      // while-condition  =>  TRUE
[19:46:42.221]      // while "1"  (timeout="200")
[19:46:42.221]      // while-condition  =>  TRUE
[19:46:42.221]      // while "1"  (timeout="200")
[19:46:42.221]      // while-condition  =>  TRUE
[19:46:42.221]      // while "1"  (timeout="200")
[19:46:42.221]      // while-condition  =>  TRUE
[19:46:42.221]      // while "1"  (timeout="200")
[19:46:42.221]      // while-condition  =>  TRUE
[19:46:42.222]      // while "1"  (timeout="200")
[19:46:42.222]      // while-condition  =>  TRUE
[19:46:42.222]      // while "1"  (timeout="200")
[19:46:42.222]      // while-condition  =>  TRUE
[19:46:42.222]      // while "1"  (timeout="200")
[19:46:42.222]      // while-condition  =>  TRUE
[19:46:42.222]      // while "1"  (timeout="200")
[19:46:42.222]      // while-condition  =>  TRUE
[19:46:42.222]      // while "1"  (timeout="200")
[19:46:42.222]      // while-condition  =>  TRUE
[19:46:42.223]      // while "1"  (timeout="200")
[19:46:42.223]      // while-condition  =>  TRUE
[19:46:42.223]      // while "1"  (timeout="200")
[19:46:42.223]      // while-condition  =>  TRUE
[19:46:42.223]      // while "1"  (timeout="200")
[19:46:42.223]      // while-condition  =>  TRUE
[19:46:42.223]      // while "1"  (timeout="200")
[19:46:42.224]      // while-condition  =>  TRUE
[19:46:42.224]      // while "1"  (timeout="200")
[19:46:42.224]      // while-condition  =>  TRUE
[19:46:42.224]      // while "1"  (timeout="200")
[19:46:42.224]      // while-condition  =>  TRUE
[19:46:42.224]      // while "1"  (timeout="200")
[19:46:42.224]      // while-condition  =>  TRUE
[19:46:42.224]      // while "1"  (timeout="200")
[19:46:42.224]      // while-condition  =>  TRUE
[19:46:42.224]      // while "1"  (timeout="200")
[19:46:42.225]      // while-condition  =>  TRUE
[19:46:42.225]      // while "1"  (timeout="200")
[19:46:42.225]      // while-condition  =>  TRUE
[19:46:42.225]      // while "1"  (timeout="200")
[19:46:42.225]      // while-condition  =>  TRUE
[19:46:42.225]      // while "1"  (timeout="200")
[19:46:42.225]      // while-condition  =>  TRUE
[19:46:42.225]      // while "1"  (timeout="200")
[19:46:42.225]      // while-condition  =>  TRUE
[19:46:42.225]      // while "1"  (timeout="200")
[19:46:42.226]      // while-condition  =>  TRUE
[19:46:42.226]      // while "1"  (timeout="200")
[19:46:42.226]      // while-condition  =>  TRUE
[19:46:42.226]      // while "1"  (timeout="200")
[19:46:42.226]      // while-condition  =>  TRUE
[19:46:42.226]      // while "1"  (timeout="200")
[19:46:42.226]      // while-condition  =>  TRUE
[19:46:42.226]      // while "1"  (timeout="200")
[19:46:42.226]      // while-condition  =>  TRUE
[19:46:42.226]      // while "1"  (timeout="200")
[19:46:42.227]      // while-condition  =>  TRUE
[19:46:42.227]      // while "1"  (timeout="200")
[19:46:42.227]      // while-condition  =>  TRUE
[19:46:42.227]      // while "1"  (timeout="200")
[19:46:42.227]      // while-condition  =>  TRUE
[19:46:42.227]      // while "1"  (timeout="200")
[19:46:42.227]      // while-condition  =>  TRUE
[19:46:42.228]      // while "1"  (timeout="200")
[19:46:42.228]      // while-condition  =>  TRUE
[19:46:42.228]      // while "1"  (timeout="200")
[19:46:42.228]      // while-condition  =>  TRUE
[19:46:42.228]      // while "1"  (timeout="200")
[19:46:42.228]      // while-condition  =>  TRUE
[19:46:42.228]      // while "1"  (timeout="200")
[19:46:42.229]      // while-condition  =>  TRUE
[19:46:42.229]      // while "1"  (timeout="200")
[19:46:42.229]      // while-condition  =>  TRUE
[19:46:42.229]      // while "1"  (timeout="200")
[19:46:42.229]      // while-condition  =>  TRUE
[19:46:42.229]      // while "1"  (timeout="200")
[19:46:42.229]      // while-condition  =>  TRUE
[19:46:42.230]      // while "1"  (timeout="200")
[19:46:42.230]      // while-condition  =>  TRUE
[19:46:42.230]      // while "1"  (timeout="200")
[19:46:42.230]      // while-condition  =>  TRUE
[19:46:42.230]      // while "1"  (timeout="200")
[19:46:42.230]      // while-condition  =>  TRUE
[19:46:42.230]      // while "1"  (timeout="200")
[19:46:42.231]      // while-condition  =>  TRUE
[19:46:42.231]      // while "1"  (timeout="200")
[19:46:42.231]      // while-condition  =>  TRUE
[19:46:42.231]      // while "1"  (timeout="200")
[19:46:42.231]      // while-condition  =>  TRUE
[19:46:42.231]      // while "1"  (timeout="200")
[19:46:42.231]      // while-condition  =>  TRUE
[19:46:42.231]      // while "1"  (timeout="200")
[19:46:42.231]      // while-condition  =>  TRUE
[19:46:42.231]      // while "1"  (timeout="200")
[19:46:42.231]      // while-condition  =>  TRUE
[19:46:42.231]      // while "1"  (timeout="200")
[19:46:42.231]      // while-condition  =>  TRUE
[19:46:42.232]      // while "1"  (timeout="200")
[19:46:42.232]      // while-condition  =>  TRUE
[19:46:42.232]      // while "1"  (timeout="200")
[19:46:42.232]      // while-condition  =>  TRUE
[19:46:42.232]      // while "1"  (timeout="200")
[19:46:42.232]      // while-condition  =>  TRUE
[19:46:42.232]      // while "1"  (timeout="200")
[19:46:42.232]      // while-condition  =>  TRUE
[19:46:42.232]      // while "1"  (timeout="200")
[19:46:42.233]      // while-condition  =>  TRUE
[19:46:42.233]      // while "1"  (timeout="200")
[19:46:42.233]      // while-condition  =>  TRUE
[19:46:42.233]      // while "1"  (timeout="200")
[19:46:42.233]      // while-condition  =>  TRUE
[19:46:42.233]      // while "1"  (timeout="200")
[19:46:42.234]      // while-condition  =>  TRUE
[19:46:42.234]      // while "1"  (timeout="200")
[19:46:42.234]      // while-condition  =>  TRUE
[19:46:42.234]      // while "1"  (timeout="200")
[19:46:42.234]      // while-condition  =>  TRUE
[19:46:42.234]      // while "1"  (timeout="200")
[19:46:42.234]      // while-condition  =>  TRUE
[19:46:42.234]      // while "1"  (timeout="200")
[19:46:42.234]      // while-condition  =>  TRUE
[19:46:42.234]      // while "1"  (timeout="200")
[19:46:42.235]      // while-condition  =>  TRUE
[19:46:42.235]      // while "1"  (timeout="200")
[19:46:42.235]      // while  =>  TIMEOUT
[19:46:42.235]      // end while "1"
[19:46:42.235]    </control>
[19:46:42.235]    <control if="canReadPins" while="" timeout="0" info="">
[19:46:42.235]      // if-block "canReadPins"
[19:46:42.235]        // =>  TRUE
[19:46:42.235]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:46:42.235]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:46:42.245]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:46:42.245]        // while-condition  =>  FALSE
[19:46:42.246]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:46:42.246]      </control>
[19:46:42.246]      // end if-block "canReadPins"
[19:46:42.246]    </control>
[19:46:42.246]    <control if="!canReadPins" while="" timeout="0" info="">
[19:46:42.246]      // if-block "!canReadPins"
[19:46:42.246]        // =>  FALSE
[19:46:42.246]      // skip if-block "!canReadPins"
[19:46:42.247]    </control>
[19:46:42.247]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:46:42.247]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:46:42.247]        // =>  TRUE
[19:46:42.247]      <block atomic="false" info="">
[19:46:42.247]        WriteAP(0x00, 0x190008);
[19:46:42.256]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:46:42.256]        WriteAP(0xF0, 0x01);
[19:46:42.283]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:46:42.283]      </block>
[19:46:42.284]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:46:42.284]    </control>
[19:46:42.284]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:46:42.284]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:46:42.284]        // =>  FALSE
[19:46:42.284]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:46:42.284]    </control>
[19:46:42.284]    <block atomic="false" info="">
[19:46:42.284]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:46:42.324]        // -> [ReadAP(0x00000000) => 0x0079042F]   (__dp=0x00000000, __ap=0x00000004)
[19:46:42.324]        // -> [ACCESS_POINT_VAL <= 0x0079042F]
[19:46:42.325]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:46:42.327]      __ap = 0; //lets make sure we reset the access point selection
[19:46:42.327]        // -> [__ap <= 0x00000000]
[19:46:42.327]    </block>
[19:46:42.328]  </sequence>
[19:46:42.328]  
[19:46:42.425]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:46:42.425]  
[19:46:42.425]  <debugvars>
[19:46:42.425]    // Pre-defined
[19:46:42.425]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:46:42.426]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:46:42.426]    __dp=0x00000000
[19:46:42.426]    __ap=0x00000000
[19:46:42.426]    __traceout=0x00000000      (Trace Disabled)
[19:46:42.426]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:46:42.426]    __FlashAddr=0x00000000
[19:46:42.426]    __FlashLen=0x00000000
[19:46:42.426]    __FlashArg=0x00000000
[19:46:42.426]    __FlashOp=0x00000000
[19:46:42.427]    __Result=0x00000000
[19:46:42.427]  </debugvars>
[19:46:42.427]  
[19:46:42.427]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:46:42.427]    <block atomic="false" info="">
[19:46:42.427]      __var deviceID = 0;
[19:46:42.427]        // -> [deviceID <= 0x00000000]
[19:46:42.427]      __var version = 0;
[19:46:42.427]        // -> [version <= 0x00000000]
[19:46:42.428]      __var partNum = 0;
[19:46:42.428]        // -> [partNum <= 0x00000000]
[19:46:42.428]      __var manuf = 0;
[19:46:42.428]        // -> [manuf <= 0x00000000]
[19:46:42.428]      __var isMSPM0G1X0X_G3X0X = 0;
[19:46:42.428]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:46:42.428]      __var isProduction = 0;
[19:46:42.428]        // -> [isProduction <= 0x00000000]
[19:46:42.428]      __var continueId = 0;
[19:46:42.430]        // -> [continueId <= 0x00000000]
[19:46:42.430]      deviceID =   Read32(0x41C40004);
[19:46:42.450]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:46:42.451]        // -> [deviceID <= 0x2BB8802F]
[19:46:42.451]      version = deviceID >> 28;
[19:46:42.451]        // -> [version <= 0x00000002]
[19:46:42.451]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:46:42.451]        // -> [partNum <= 0x0000BB88]
[19:46:42.451]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:46:42.451]        // -> [manuf <= 0x00000017]
[19:46:42.451]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:46:42.451]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:46:42.451]      isProduction = (version > 0);
[19:46:42.451]        // -> [isProduction <= 0x00000001]
[19:46:42.452]    </block>
[19:46:42.452]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:46:42.452]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:46:42.452]        // =>  FALSE
[19:46:42.452]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:46:42.452]    </control>
[19:46:42.453]    <control if="continueId == 4" while="" timeout="0" info="">
[19:46:42.453]      // if-block "continueId == 4"
[19:46:42.453]        // =>  FALSE
[19:46:42.453]      // skip if-block "continueId == 4"
[19:46:42.453]    </control>
[19:46:42.453]    <control if="!isProduction" while="" timeout="0" info="">
[19:46:42.453]      // if-block "!isProduction"
[19:46:42.453]        // =>  FALSE
[19:46:42.453]      // skip if-block "!isProduction"
[19:46:42.453]    </control>
[19:46:42.453]  </sequence>
[19:46:42.455]  
[19:51:14.593]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:51:14.593]  
[19:51:14.594]  <debugvars>
[19:51:14.594]    // Pre-defined
[19:51:14.594]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:51:14.594]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:51:14.594]    __dp=0x00000000
[19:51:14.594]    __ap=0x00000000
[19:51:14.594]    __traceout=0x00000000      (Trace Disabled)
[19:51:14.594]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:51:14.594]    __FlashAddr=0x00000000
[19:51:14.594]    __FlashLen=0x00000000
[19:51:14.594]    __FlashArg=0x00000000
[19:51:14.595]    __FlashOp=0x00000000
[19:51:14.595]    __Result=0x00000000
[19:51:14.595]  </debugvars>
[19:51:14.595]  
[19:51:14.595]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:51:14.595]    <block atomic="false" info="">
[19:51:14.595]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:51:14.595]        // -> [isSWJ <= 0x00000001]
[19:51:14.595]      __var hasDormant = __protocol & 0x00020000;
[19:51:14.595]        // -> [hasDormant <= 0x00000000]
[19:51:14.596]      __var protType   = __protocol & 0x0000FFFF;
[19:51:14.596]        // -> [protType <= 0x00000002]
[19:51:14.596]    </block>
[19:51:14.596]    <control if="protType == 1" while="" timeout="0" info="">
[19:51:14.596]      // if-block "protType == 1"
[19:51:14.596]        // =>  FALSE
[19:51:14.597]      // skip if-block "protType == 1"
[19:51:14.597]    </control>
[19:51:14.597]    <control if="protType == 2" while="" timeout="0" info="">
[19:51:14.597]      // if-block "protType == 2"
[19:51:14.597]        // =>  TRUE
[19:51:14.597]      <control if="isSWJ" while="" timeout="0" info="">
[19:51:14.597]        // if-block "isSWJ"
[19:51:14.597]          // =>  TRUE
[19:51:14.597]        <control if="hasDormant" while="" timeout="0" info="">
[19:51:14.597]          // if-block "hasDormant"
[19:51:14.597]            // =>  FALSE
[19:51:14.597]          // skip if-block "hasDormant"
[19:51:14.598]        </control>
[19:51:14.598]        <control if="!hasDormant" while="" timeout="0" info="">
[19:51:14.598]          // if-block "!hasDormant"
[19:51:14.598]            // =>  TRUE
[19:51:14.598]          <block atomic="false" info="">
[19:51:14.598]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:51:14.608]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:51:14.608]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:51:14.614]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:51:14.614]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:51:14.631]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:51:14.631]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:51:14.635]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:51:14.635]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:51:14.641]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:51:14.641]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:51:14.658]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:51:14.658]          </block>
[19:51:14.658]          // end if-block "!hasDormant"
[19:51:14.658]        </control>
[19:51:14.658]        // end if-block "isSWJ"
[19:51:14.658]      </control>
[19:51:14.658]      <control if="!isSWJ" while="" timeout="0" info="">
[19:51:14.659]        // if-block "!isSWJ"
[19:51:14.659]          // =>  FALSE
[19:51:14.659]        // skip if-block "!isSWJ"
[19:51:14.659]      </control>
[19:51:14.659]      <block atomic="false" info="">
[19:51:14.659]        ReadDP(0x0);
[19:51:14.661]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:51:14.661]      </block>
[19:51:14.661]      // end if-block "protType == 2"
[19:51:14.661]    </control>
[19:51:14.661]  </sequence>
[19:51:14.661]  
[19:51:14.666]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:51:14.666]  
[19:51:14.666]  <debugvars>
[19:51:14.666]    // Pre-defined
[19:51:14.666]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:51:14.666]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:51:14.666]    __dp=0x00000000
[19:51:14.666]    __ap=0x00000000
[19:51:14.667]    __traceout=0x00000000      (Trace Disabled)
[19:51:14.667]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:51:14.667]    __FlashAddr=0x00000000
[19:51:14.667]    __FlashLen=0x00000000
[19:51:14.667]    __FlashArg=0x00000000
[19:51:14.667]    __FlashOp=0x00000000
[19:51:14.667]    __Result=0x00000000
[19:51:14.667]  </debugvars>
[19:51:14.667]  
[19:51:14.667]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:51:14.667]    <block atomic="false" info="">
[19:51:14.667]      __var SW_DP_ABORT       = 0x0;
[19:51:14.668]        // -> [SW_DP_ABORT <= 0x00000000]
[19:51:14.668]      __var DP_CTRL_STAT      = 0x4;
[19:51:14.668]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:51:14.668]      __var DP_SELECT         = 0x8;
[19:51:14.669]        // -> [DP_SELECT <= 0x00000008]
[19:51:14.669]      __var powered_down      = 0;
[19:51:14.669]        // -> [powered_down <= 0x00000000]
[19:51:14.669]      WriteDP(DP_SELECT, 0x00000000);
[19:51:14.673]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:51:14.673]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:51:14.678]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:51:14.678]        // -> [powered_down <= 0x00000001]
[19:51:14.678]    </block>
[19:51:14.678]    <control if="powered_down" while="" timeout="0" info="">
[19:51:14.678]      // if-block "powered_down"
[19:51:14.678]        // =>  TRUE
[19:51:14.678]      <block atomic="false" info="">
[19:51:14.678]        Message(0, "Debug/System power-up request sent");
[19:51:14.682]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:51:14.688]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:51:14.688]      </block>
[19:51:14.688]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:51:14.688]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:51:14.692]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:51:14.692]        // while-condition  =>  FALSE
[19:51:14.692]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:51:14.692]      </control>
[19:51:14.692]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:51:14.692]        // if-block "(__protocol & 0xFFFF) == 1"
[19:51:14.693]          // =>  FALSE
[19:51:14.693]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:51:14.693]      </control>
[19:51:14.693]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:51:14.693]        // if-block "(__protocol & 0xFFFF) == 2"
[19:51:14.693]          // =>  TRUE
[19:51:14.693]        <block atomic="false" info="">
[19:51:14.693]          Message(0, "executing SWD power up");
[19:51:14.695]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:51:14.705]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:51:14.706]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:51:14.716]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:51:14.717]        </block>
[19:51:14.717]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:51:14.717]      </control>
[19:51:14.717]      // end if-block "powered_down"
[19:51:14.717]    </control>
[19:51:14.718]    <block atomic="false" info="">
[19:51:14.718]      __var DEBUG_PORT_VAL    = 0;
[19:51:14.718]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:51:14.718]      __var ACCESS_POINT_VAL  = 0;
[19:51:14.718]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:51:14.718]      __ap = 1; 
[19:51:14.718]        // -> [__ap <= 0x00000001]
[19:51:14.718]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:51:14.733]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:51:14.733]      __ap = 4;
[19:51:14.733]        // -> [__ap <= 0x00000004]
[19:51:14.733]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:51:14.742]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:51:14.742]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:51:14.743]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:51:14.744]    </block>
[19:51:14.745]    <block atomic="false" info="">
[19:51:14.745]      __var nReset = 0x80;
[19:51:14.745]        // -> [nReset <= 0x00000080]
[19:51:14.745]      __var canReadPins = 0;
[19:51:14.745]        // -> [canReadPins <= 0x00000000]
[19:51:14.745]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:51:14.763]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:51:14.763]        // -> [canReadPins <= 0x00000001]
[19:51:14.763]    </block>
[19:51:14.763]    <control if="" while="1" timeout="200" info="">
[19:51:14.763]      // while "1"  (timeout="200")
[19:51:14.763]      // while-condition  =>  TRUE
[19:51:14.763]      // while "1"  (timeout="200")
[19:51:14.763]      // while-condition  =>  TRUE
[19:51:14.763]      // while "1"  (timeout="200")
[19:51:14.763]      // while-condition  =>  TRUE
[19:51:14.764]      // while "1"  (timeout="200")
[19:51:14.764]      // while-condition  =>  TRUE
[19:51:14.764]      // while "1"  (timeout="200")
[19:51:14.764]      // while-condition  =>  TRUE
[19:51:14.764]      // while "1"  (timeout="200")
[19:51:14.764]      // while-condition  =>  TRUE
[19:51:14.764]      // while "1"  (timeout="200")
[19:51:14.764]      // while-condition  =>  TRUE
[19:51:14.764]      // while "1"  (timeout="200")
[19:51:14.764]      // while-condition  =>  TRUE
[19:51:14.764]      // while "1"  (timeout="200")
[19:51:14.765]      // while-condition  =>  TRUE
[19:51:14.765]      // while "1"  (timeout="200")
[19:51:14.765]      // while-condition  =>  TRUE
[19:51:14.765]      // while "1"  (timeout="200")
[19:51:14.765]      // while-condition  =>  TRUE
[19:51:14.765]      // while "1"  (timeout="200")
[19:51:14.765]      // while-condition  =>  TRUE
[19:51:14.765]      // while "1"  (timeout="200")
[19:51:14.765]      // while-condition  =>  TRUE
[19:51:14.765]      // while "1"  (timeout="200")
[19:51:14.765]      // while-condition  =>  TRUE
[19:51:14.765]      // while "1"  (timeout="200")
[19:51:14.766]      // while-condition  =>  TRUE
[19:51:14.766]      // while "1"  (timeout="200")
[19:51:14.766]      // while-condition  =>  TRUE
[19:51:14.766]      // while "1"  (timeout="200")
[19:51:14.766]      // while  =>  TIMEOUT
[19:51:14.766]      // end while "1"
[19:51:14.766]    </control>
[19:51:14.766]    <control if="canReadPins" while="" timeout="0" info="">
[19:51:14.766]      // if-block "canReadPins"
[19:51:14.766]        // =>  TRUE
[19:51:14.766]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:51:14.766]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:51:14.773]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:51:14.774]        // while-condition  =>  FALSE
[19:51:14.774]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:51:14.774]      </control>
[19:51:14.774]      // end if-block "canReadPins"
[19:51:14.774]    </control>
[19:51:14.775]    <control if="!canReadPins" while="" timeout="0" info="">
[19:51:14.775]      // if-block "!canReadPins"
[19:51:14.775]        // =>  FALSE
[19:51:14.775]      // skip if-block "!canReadPins"
[19:51:14.775]    </control>
[19:51:14.775]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:51:14.775]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:51:14.775]        // =>  TRUE
[19:51:14.776]      <block atomic="false" info="">
[19:51:14.776]        WriteAP(0x00, 0x190008);
[19:51:14.790]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:51:14.790]        WriteAP(0xF0, 0x01);
[19:51:14.798]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:51:14.798]      </block>
[19:51:14.798]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:51:14.798]    </control>
[19:51:14.798]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:51:14.798]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:51:14.798]        // =>  FALSE
[19:51:14.798]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:51:14.798]    </control>
[19:51:14.798]    <block atomic="false" info="">
[19:51:14.798]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:51:14.813]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:51:14.813]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:51:14.813]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:51:14.815]      __ap = 0; //lets make sure we reset the access point selection
[19:51:14.815]        // -> [__ap <= 0x00000000]
[19:51:14.815]    </block>
[19:51:14.816]  </sequence>
[19:51:14.816]  
[19:51:14.862]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:51:14.862]  
[19:51:14.862]  <debugvars>
[19:51:14.862]    // Pre-defined
[19:51:14.862]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:51:14.862]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:51:14.862]    __dp=0x00000000
[19:51:14.862]    __ap=0x00000000
[19:51:14.862]    __traceout=0x00000000      (Trace Disabled)
[19:51:14.862]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:51:14.863]    __FlashAddr=0x00000000
[19:51:14.863]    __FlashLen=0x00000000
[19:51:14.863]    __FlashArg=0x00000000
[19:51:14.863]    __FlashOp=0x00000000
[19:51:14.863]    __Result=0x00000000
[19:51:14.863]  </debugvars>
[19:51:14.863]  
[19:51:14.863]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:51:14.863]    <block atomic="false" info="">
[19:51:14.864]      __var deviceID = 0;
[19:51:14.864]        // -> [deviceID <= 0x00000000]
[19:51:14.864]      __var version = 0;
[19:51:14.864]        // -> [version <= 0x00000000]
[19:51:14.864]      __var partNum = 0;
[19:51:14.864]        // -> [partNum <= 0x00000000]
[19:51:14.864]      __var manuf = 0;
[19:51:14.864]        // -> [manuf <= 0x00000000]
[19:51:14.864]      __var isMSPM0G1X0X_G3X0X = 0;
[19:51:14.864]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:51:14.864]      __var isProduction = 0;
[19:51:14.865]        // -> [isProduction <= 0x00000000]
[19:51:14.865]      __var continueId = 0;
[19:51:14.865]        // -> [continueId <= 0x00000000]
[19:51:14.865]      deviceID =   Read32(0x41C40004);
[19:51:14.892]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:51:14.892]        // -> [deviceID <= 0x2BB8802F]
[19:51:14.892]      version = deviceID >> 28;
[19:51:14.892]        // -> [version <= 0x00000002]
[19:51:14.893]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:51:14.893]        // -> [partNum <= 0x0000BB88]
[19:51:14.893]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:51:14.893]        // -> [manuf <= 0x00000017]
[19:51:14.893]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:51:14.893]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:51:14.894]      isProduction = (version > 0);
[19:51:14.894]        // -> [isProduction <= 0x00000001]
[19:51:14.894]    </block>
[19:51:14.894]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:51:14.894]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:51:14.895]        // =>  FALSE
[19:51:14.895]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:51:14.895]    </control>
[19:51:14.895]    <control if="continueId == 4" while="" timeout="0" info="">
[19:51:14.895]      // if-block "continueId == 4"
[19:51:14.895]        // =>  FALSE
[19:51:14.895]      // skip if-block "continueId == 4"
[19:51:14.895]    </control>
[19:51:14.895]    <control if="!isProduction" while="" timeout="0" info="">
[19:51:14.895]      // if-block "!isProduction"
[19:51:14.895]        // =>  FALSE
[19:51:14.895]      // skip if-block "!isProduction"
[19:51:14.896]    </control>
[19:51:14.896]  </sequence>
[19:51:14.896]  
[19:54:33.741]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:54:33.741]  
[19:54:33.742]  <debugvars>
[19:54:33.742]    // Pre-defined
[19:54:33.742]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:54:33.742]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:54:33.742]    __dp=0x00000000
[19:54:33.742]    __ap=0x00000000
[19:54:33.742]    __traceout=0x00000000      (Trace Disabled)
[19:54:33.742]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:54:33.743]    __FlashAddr=0x00000000
[19:54:33.743]    __FlashLen=0x00000000
[19:54:33.743]    __FlashArg=0x00000000
[19:54:33.743]    __FlashOp=0x00000000
[19:54:33.744]    __Result=0x00000000
[19:54:33.744]  </debugvars>
[19:54:33.744]  
[19:54:33.744]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:54:33.744]    <block atomic="false" info="">
[19:54:33.744]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:54:33.744]        // -> [isSWJ <= 0x00000001]
[19:54:33.744]      __var hasDormant = __protocol & 0x00020000;
[19:54:33.744]        // -> [hasDormant <= 0x00000000]
[19:54:33.744]      __var protType   = __protocol & 0x0000FFFF;
[19:54:33.744]        // -> [protType <= 0x00000002]
[19:54:33.745]    </block>
[19:54:33.745]    <control if="protType == 1" while="" timeout="0" info="">
[19:54:33.745]      // if-block "protType == 1"
[19:54:33.745]        // =>  FALSE
[19:54:33.745]      // skip if-block "protType == 1"
[19:54:33.745]    </control>
[19:54:33.745]    <control if="protType == 2" while="" timeout="0" info="">
[19:54:33.745]      // if-block "protType == 2"
[19:54:33.745]        // =>  TRUE
[19:54:33.745]      <control if="isSWJ" while="" timeout="0" info="">
[19:54:33.746]        // if-block "isSWJ"
[19:54:33.746]          // =>  TRUE
[19:54:33.746]        <control if="hasDormant" while="" timeout="0" info="">
[19:54:33.746]          // if-block "hasDormant"
[19:54:33.746]            // =>  FALSE
[19:54:33.746]          // skip if-block "hasDormant"
[19:54:33.746]        </control>
[19:54:33.746]        <control if="!hasDormant" while="" timeout="0" info="">
[19:54:33.746]          // if-block "!hasDormant"
[19:54:33.747]            // =>  TRUE
[19:54:33.747]          <block atomic="false" info="">
[19:54:33.747]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:54:33.749]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:54:33.750]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:54:33.751]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:54:33.751]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:54:33.753]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:54:33.753]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:54:33.756]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:54:33.756]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:54:33.758]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:54:33.758]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:54:33.760]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:54:33.760]          </block>
[19:54:33.760]          // end if-block "!hasDormant"
[19:54:33.760]        </control>
[19:54:33.760]        // end if-block "isSWJ"
[19:54:33.760]      </control>
[19:54:33.760]      <control if="!isSWJ" while="" timeout="0" info="">
[19:54:33.760]        // if-block "!isSWJ"
[19:54:33.760]          // =>  FALSE
[19:54:33.761]        // skip if-block "!isSWJ"
[19:54:33.761]      </control>
[19:54:33.761]      <block atomic="false" info="">
[19:54:33.761]        ReadDP(0x0);
[19:54:33.762]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:54:33.762]      </block>
[19:54:33.762]      // end if-block "protType == 2"
[19:54:33.762]    </control>
[19:54:33.762]  </sequence>
[19:54:33.764]  
[19:54:33.766]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:54:33.766]  
[19:54:33.766]  <debugvars>
[19:54:33.766]    // Pre-defined
[19:54:33.766]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:54:33.766]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:54:33.766]    __dp=0x00000000
[19:54:33.766]    __ap=0x00000000
[19:54:33.766]    __traceout=0x00000000      (Trace Disabled)
[19:54:33.766]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:54:33.766]    __FlashAddr=0x00000000
[19:54:33.766]    __FlashLen=0x00000000
[19:54:33.768]    __FlashArg=0x00000000
[19:54:33.768]    __FlashOp=0x00000000
[19:54:33.768]    __Result=0x00000000
[19:54:33.768]  </debugvars>
[19:54:33.768]  
[19:54:33.768]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:54:33.768]    <block atomic="false" info="">
[19:54:33.769]      __var SW_DP_ABORT       = 0x0;
[19:54:33.769]        // -> [SW_DP_ABORT <= 0x00000000]
[19:54:33.769]      __var DP_CTRL_STAT      = 0x4;
[19:54:33.769]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:54:33.769]      __var DP_SELECT         = 0x8;
[19:54:33.769]        // -> [DP_SELECT <= 0x00000008]
[19:54:33.769]      __var powered_down      = 0;
[19:54:33.769]        // -> [powered_down <= 0x00000000]
[19:54:33.769]      WriteDP(DP_SELECT, 0x00000000);
[19:54:33.772]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:54:33.772]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:54:33.775]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:54:33.775]        // -> [powered_down <= 0x00000001]
[19:54:33.775]    </block>
[19:54:33.775]    <control if="powered_down" while="" timeout="0" info="">
[19:54:33.775]      // if-block "powered_down"
[19:54:33.776]        // =>  TRUE
[19:54:33.776]      <block atomic="false" info="">
[19:54:33.776]        Message(0, "Debug/System power-up request sent");
[19:54:33.780]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:54:33.783]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:54:33.783]      </block>
[19:54:33.783]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:54:33.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:54:33.785]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:54:33.785]        // while-condition  =>  FALSE
[19:54:33.786]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:54:33.786]      </control>
[19:54:33.786]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:54:33.786]        // if-block "(__protocol & 0xFFFF) == 1"
[19:54:33.786]          // =>  FALSE
[19:54:33.786]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:54:33.786]      </control>
[19:54:33.787]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:54:33.787]        // if-block "(__protocol & 0xFFFF) == 2"
[19:54:33.787]          // =>  TRUE
[19:54:33.787]        <block atomic="false" info="">
[19:54:33.787]          Message(0, "executing SWD power up");
[19:54:33.789]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:54:33.791]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:54:33.791]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:54:33.793]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:54:33.793]        </block>
[19:54:33.793]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:54:33.793]      </control>
[19:54:33.793]      // end if-block "powered_down"
[19:54:33.793]    </control>
[19:54:33.794]    <block atomic="false" info="">
[19:54:33.794]      __var DEBUG_PORT_VAL    = 0;
[19:54:33.794]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:54:33.794]      __var ACCESS_POINT_VAL  = 0;
[19:54:33.794]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:54:33.794]      __ap = 1; 
[19:54:33.794]        // -> [__ap <= 0x00000001]
[19:54:33.795]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:54:33.798]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:54:33.798]      __ap = 4;
[19:54:33.798]        // -> [__ap <= 0x00000004]
[19:54:33.798]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:54:33.805]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:54:33.805]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:54:33.805]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:54:33.807]    </block>
[19:54:33.807]    <block atomic="false" info="">
[19:54:33.807]      __var nReset = 0x80;
[19:54:33.808]        // -> [nReset <= 0x00000080]
[19:54:33.808]      __var canReadPins = 0;
[19:54:33.808]        // -> [canReadPins <= 0x00000000]
[19:54:33.808]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:54:33.810]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:54:33.810]        // -> [canReadPins <= 0x00000001]
[19:54:33.810]    </block>
[19:54:33.810]    <control if="" while="1" timeout="200" info="">
[19:54:33.810]      // while "1"  (timeout="200")
[19:54:33.810]      // while-condition  =>  TRUE
[19:54:33.810]      // while "1"  (timeout="200")
[19:54:33.811]      // while-condition  =>  TRUE
[19:54:33.811]      // while "1"  (timeout="200")
[19:54:33.812]      // while-condition  =>  TRUE
[19:54:33.812]      // while "1"  (timeout="200")
[19:54:33.812]      // while-condition  =>  TRUE
[19:54:33.812]      // while "1"  (timeout="200")
[19:54:33.812]      // while-condition  =>  TRUE
[19:54:33.812]      // while "1"  (timeout="200")
[19:54:33.812]      // while-condition  =>  TRUE
[19:54:33.812]      // while "1"  (timeout="200")
[19:54:33.812]      // while-condition  =>  TRUE
[19:54:33.812]      // while "1"  (timeout="200")
[19:54:33.812]      // while-condition  =>  TRUE
[19:54:33.812]      // while "1"  (timeout="200")
[19:54:33.813]      // while-condition  =>  TRUE
[19:54:33.813]      // while "1"  (timeout="200")
[19:54:33.813]      // while-condition  =>  TRUE
[19:54:33.813]      // while "1"  (timeout="200")
[19:54:33.813]      // while-condition  =>  TRUE
[19:54:33.813]      // while "1"  (timeout="200")
[19:54:33.813]      // while-condition  =>  TRUE
[19:54:33.813]      // while "1"  (timeout="200")
[19:54:33.813]      // while-condition  =>  TRUE
[19:54:33.813]      // while "1"  (timeout="200")
[19:54:33.814]      // while-condition  =>  TRUE
[19:54:33.814]      // while "1"  (timeout="200")
[19:54:33.814]      // while  =>  TIMEOUT
[19:54:33.814]      // end while "1"
[19:54:33.814]    </control>
[19:54:33.814]    <control if="canReadPins" while="" timeout="0" info="">
[19:54:33.814]      // if-block "canReadPins"
[19:54:33.814]        // =>  TRUE
[19:54:33.814]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:54:33.814]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:54:33.816]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:54:33.816]        // while-condition  =>  FALSE
[19:54:33.816]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:54:33.816]      </control>
[19:54:33.816]      // end if-block "canReadPins"
[19:54:33.816]    </control>
[19:54:33.816]    <control if="!canReadPins" while="" timeout="0" info="">
[19:54:33.816]      // if-block "!canReadPins"
[19:54:33.816]        // =>  FALSE
[19:54:33.816]      // skip if-block "!canReadPins"
[19:54:33.817]    </control>
[19:54:33.817]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:54:33.817]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:54:33.817]        // =>  TRUE
[19:54:33.817]      <block atomic="false" info="">
[19:54:33.817]        WriteAP(0x00, 0x190008);
[19:54:33.819]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:54:33.819]        WriteAP(0xF0, 0x01);
[19:54:33.827]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:54:33.827]      </block>
[19:54:33.827]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:54:33.827]    </control>
[19:54:33.827]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:54:33.827]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:54:33.827]        // =>  FALSE
[19:54:33.827]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:54:33.827]    </control>
[19:54:33.829]    <block atomic="false" info="">
[19:54:33.829]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:54:33.835]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:54:33.835]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:54:33.835]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:54:33.838]      __ap = 0; //lets make sure we reset the access point selection
[19:54:33.838]        // -> [__ap <= 0x00000000]
[19:54:33.838]    </block>
[19:54:33.838]  </sequence>
[19:54:33.838]  
[19:54:33.894]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:54:33.894]  
[19:54:33.894]  <debugvars>
[19:54:33.894]    // Pre-defined
[19:54:33.894]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:54:33.894]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:54:33.895]    __dp=0x00000000
[19:54:33.895]    __ap=0x00000000
[19:54:33.895]    __traceout=0x00000000      (Trace Disabled)
[19:54:33.895]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:54:33.895]    __FlashAddr=0x00000000
[19:54:33.895]    __FlashLen=0x00000000
[19:54:33.895]    __FlashArg=0x00000000
[19:54:33.895]    __FlashOp=0x00000000
[19:54:33.895]    __Result=0x00000000
[19:54:33.896]  </debugvars>
[19:54:33.896]  
[19:54:33.896]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:54:33.896]    <block atomic="false" info="">
[19:54:33.896]      __var deviceID = 0;
[19:54:33.896]        // -> [deviceID <= 0x00000000]
[19:54:33.896]      __var version = 0;
[19:54:33.896]        // -> [version <= 0x00000000]
[19:54:33.896]      __var partNum = 0;
[19:54:33.896]        // -> [partNum <= 0x00000000]
[19:54:33.896]      __var manuf = 0;
[19:54:33.896]        // -> [manuf <= 0x00000000]
[19:54:33.896]      __var isMSPM0G1X0X_G3X0X = 0;
[19:54:33.897]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:54:33.897]      __var isProduction = 0;
[19:54:33.897]        // -> [isProduction <= 0x00000000]
[19:54:33.897]      __var continueId = 0;
[19:54:33.897]        // -> [continueId <= 0x00000000]
[19:54:33.897]      deviceID =   Read32(0x41C40004);
[19:54:33.905]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:54:33.905]        // -> [deviceID <= 0x2BB8802F]
[19:54:33.906]      version = deviceID >> 28;
[19:54:33.906]        // -> [version <= 0x00000002]
[19:54:33.906]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:54:33.906]        // -> [partNum <= 0x0000BB88]
[19:54:33.906]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:54:33.906]        // -> [manuf <= 0x00000017]
[19:54:33.906]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:54:33.906]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:54:33.907]      isProduction = (version > 0);
[19:54:33.907]        // -> [isProduction <= 0x00000001]
[19:54:33.907]    </block>
[19:54:33.907]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:54:33.907]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:54:33.907]        // =>  FALSE
[19:54:33.907]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:54:33.907]    </control>
[19:54:33.907]    <control if="continueId == 4" while="" timeout="0" info="">
[19:54:33.907]      // if-block "continueId == 4"
[19:54:33.907]        // =>  FALSE
[19:54:33.908]      // skip if-block "continueId == 4"
[19:54:33.908]    </control>
[19:54:33.908]    <control if="!isProduction" while="" timeout="0" info="">
[19:54:33.908]      // if-block "!isProduction"
[19:54:33.908]        // =>  FALSE
[19:54:33.908]      // skip if-block "!isProduction"
[19:54:33.908]    </control>
[19:54:33.908]  </sequence>
[19:54:33.908]  
[19:57:17.953]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:57:17.953]  
[19:57:17.962]  <debugvars>
[19:57:17.963]    // Pre-defined
[19:57:17.963]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:57:17.963]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:57:17.963]    __dp=0x00000000
[19:57:17.963]    __ap=0x00000000
[19:57:17.963]    __traceout=0x00000000      (Trace Disabled)
[19:57:17.963]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:57:17.963]    __FlashAddr=0x00000000
[19:57:17.963]    __FlashLen=0x00000000
[19:57:17.963]    __FlashArg=0x00000000
[19:57:17.963]    __FlashOp=0x00000000
[19:57:17.964]    __Result=0x00000000
[19:57:17.964]  </debugvars>
[19:57:17.964]  
[19:57:17.964]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:57:17.964]    <block atomic="false" info="">
[19:57:17.964]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:57:17.964]        // -> [isSWJ <= 0x00000001]
[19:57:17.964]      __var hasDormant = __protocol & 0x00020000;
[19:57:17.964]        // -> [hasDormant <= 0x00000000]
[19:57:17.965]      __var protType   = __protocol & 0x0000FFFF;
[19:57:17.965]        // -> [protType <= 0x00000002]
[19:57:17.965]    </block>
[19:57:17.965]    <control if="protType == 1" while="" timeout="0" info="">
[19:57:17.965]      // if-block "protType == 1"
[19:57:17.965]        // =>  FALSE
[19:57:17.965]      // skip if-block "protType == 1"
[19:57:17.965]    </control>
[19:57:17.965]    <control if="protType == 2" while="" timeout="0" info="">
[19:57:17.966]      // if-block "protType == 2"
[19:57:17.966]        // =>  TRUE
[19:57:17.966]      <control if="isSWJ" while="" timeout="0" info="">
[19:57:17.966]        // if-block "isSWJ"
[19:57:17.966]          // =>  TRUE
[19:57:17.966]        <control if="hasDormant" while="" timeout="0" info="">
[19:57:17.966]          // if-block "hasDormant"
[19:57:17.966]            // =>  FALSE
[19:57:17.966]          // skip if-block "hasDormant"
[19:57:17.966]        </control>
[19:57:17.967]        <control if="!hasDormant" while="" timeout="0" info="">
[19:57:17.967]          // if-block "!hasDormant"
[19:57:17.967]            // =>  TRUE
[19:57:17.967]          <block atomic="false" info="">
[19:57:17.967]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:57:17.973]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:57:17.974]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:57:17.978]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:57:17.978]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:57:17.980]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:57:17.980]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:57:17.988]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:57:17.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:57:17.990]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:57:17.990]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:57:17.993]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:57:17.993]          </block>
[19:57:17.994]          // end if-block "!hasDormant"
[19:57:17.994]        </control>
[19:57:17.994]        // end if-block "isSWJ"
[19:57:17.994]      </control>
[19:57:17.994]      <control if="!isSWJ" while="" timeout="0" info="">
[19:57:17.994]        // if-block "!isSWJ"
[19:57:17.994]          // =>  FALSE
[19:57:17.994]        // skip if-block "!isSWJ"
[19:57:17.995]      </control>
[19:57:17.995]      <block atomic="false" info="">
[19:57:17.995]        ReadDP(0x0);
[19:57:17.996]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:57:17.997]      </block>
[19:57:17.997]      // end if-block "protType == 2"
[19:57:17.997]    </control>
[19:57:17.997]  </sequence>
[19:57:17.998]  
[19:57:17.999]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:57:17.999]  
[19:57:17.999]  <debugvars>
[19:57:18.000]    // Pre-defined
[19:57:18.000]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:57:18.000]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:57:18.000]    __dp=0x00000000
[19:57:18.000]    __ap=0x00000000
[19:57:18.000]    __traceout=0x00000000      (Trace Disabled)
[19:57:18.000]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:57:18.000]    __FlashAddr=0x00000000
[19:57:18.000]    __FlashLen=0x00000000
[19:57:18.001]    __FlashArg=0x00000000
[19:57:18.001]    __FlashOp=0x00000000
[19:57:18.001]    __Result=0x00000000
[19:57:18.001]  </debugvars>
[19:57:18.001]  
[19:57:18.001]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:57:18.001]    <block atomic="false" info="">
[19:57:18.001]      __var SW_DP_ABORT       = 0x0;
[19:57:18.001]        // -> [SW_DP_ABORT <= 0x00000000]
[19:57:18.001]      __var DP_CTRL_STAT      = 0x4;
[19:57:18.002]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:57:18.002]      __var DP_SELECT         = 0x8;
[19:57:18.002]        // -> [DP_SELECT <= 0x00000008]
[19:57:18.002]      __var powered_down      = 0;
[19:57:18.002]        // -> [powered_down <= 0x00000000]
[19:57:18.002]      WriteDP(DP_SELECT, 0x00000000);
[19:57:18.003]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:57:18.004]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:57:18.005]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:57:18.005]        // -> [powered_down <= 0x00000001]
[19:57:18.005]    </block>
[19:57:18.005]    <control if="powered_down" while="" timeout="0" info="">
[19:57:18.006]      // if-block "powered_down"
[19:57:18.006]        // =>  TRUE
[19:57:18.006]      <block atomic="false" info="">
[19:57:18.006]        Message(0, "Debug/System power-up request sent");
[19:57:18.009]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:57:18.016]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:57:18.016]      </block>
[19:57:18.017]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:57:18.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:57:18.022]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:57:18.022]        // while-condition  =>  FALSE
[19:57:18.022]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:57:18.023]      </control>
[19:57:18.023]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:57:18.023]        // if-block "(__protocol & 0xFFFF) == 1"
[19:57:18.023]          // =>  FALSE
[19:57:18.023]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:57:18.023]      </control>
[19:57:18.023]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:57:18.023]        // if-block "(__protocol & 0xFFFF) == 2"
[19:57:18.023]          // =>  TRUE
[19:57:18.023]        <block atomic="false" info="">
[19:57:18.024]          Message(0, "executing SWD power up");
[19:57:18.025]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:57:18.027]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:57:18.027]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:57:18.029]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:57:18.029]        </block>
[19:57:18.029]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:57:18.030]      </control>
[19:57:18.030]      // end if-block "powered_down"
[19:57:18.030]    </control>
[19:57:18.030]    <block atomic="false" info="">
[19:57:18.030]      __var DEBUG_PORT_VAL    = 0;
[19:57:18.030]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:57:18.030]      __var ACCESS_POINT_VAL  = 0;
[19:57:18.030]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:57:18.030]      __ap = 1; 
[19:57:18.030]        // -> [__ap <= 0x00000001]
[19:57:18.031]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:57:18.038]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:57:18.038]      __ap = 4;
[19:57:18.038]        // -> [__ap <= 0x00000004]
[19:57:18.038]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:57:18.045]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:57:18.046]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:57:18.046]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:57:18.048]    </block>
[19:57:18.048]    <block atomic="false" info="">
[19:57:18.048]      __var nReset = 0x80;
[19:57:18.048]        // -> [nReset <= 0x00000080]
[19:57:18.048]      __var canReadPins = 0;
[19:57:18.048]        // -> [canReadPins <= 0x00000000]
[19:57:18.049]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:57:18.050]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:57:18.050]        // -> [canReadPins <= 0x00000001]
[19:57:18.050]    </block>
[19:57:18.050]    <control if="" while="1" timeout="200" info="">
[19:57:18.050]      // while "1"  (timeout="200")
[19:57:18.051]      // while-condition  =>  TRUE
[19:57:18.051]      // while "1"  (timeout="200")
[19:57:18.051]      // while-condition  =>  TRUE
[19:57:18.051]      // while "1"  (timeout="200")
[19:57:18.051]      // while-condition  =>  TRUE
[19:57:18.051]      // while "1"  (timeout="200")
[19:57:18.051]      // while-condition  =>  TRUE
[19:57:18.052]      // while "1"  (timeout="200")
[19:57:18.052]      // while-condition  =>  TRUE
[19:57:18.052]      // while "1"  (timeout="200")
[19:57:18.052]      // while-condition  =>  TRUE
[19:57:18.052]      // while "1"  (timeout="200")
[19:57:18.052]      // while-condition  =>  TRUE
[19:57:18.052]      // while "1"  (timeout="200")
[19:57:18.052]      // while-condition  =>  TRUE
[19:57:18.052]      // while "1"  (timeout="200")
[19:57:18.053]      // while-condition  =>  TRUE
[19:57:18.053]      // while "1"  (timeout="200")
[19:57:18.053]      // while-condition  =>  TRUE
[19:57:18.053]      // while "1"  (timeout="200")
[19:57:18.053]      // while-condition  =>  TRUE
[19:57:18.053]      // while "1"  (timeout="200")
[19:57:18.053]      // while-condition  =>  TRUE
[19:57:18.053]      // while "1"  (timeout="200")
[19:57:18.053]      // while-condition  =>  TRUE
[19:57:18.053]      // while "1"  (timeout="200")
[19:57:18.053]      // while-condition  =>  TRUE
[19:57:18.054]      // while "1"  (timeout="200")
[19:57:18.054]      // while-condition  =>  TRUE
[19:57:18.054]      // while "1"  (timeout="200")
[19:57:18.054]      // while-condition  =>  TRUE
[19:57:18.054]      // while "1"  (timeout="200")
[19:57:18.054]      // while-condition  =>  TRUE
[19:57:18.054]      // while "1"  (timeout="200")
[19:57:18.054]      // while-condition  =>  TRUE
[19:57:18.054]      // while "1"  (timeout="200")
[19:57:18.054]      // while-condition  =>  TRUE
[19:57:18.055]      // while "1"  (timeout="200")
[19:57:18.056]      // while-condition  =>  TRUE
[19:57:18.056]      // while "1"  (timeout="200")
[19:57:18.056]      // while-condition  =>  TRUE
[19:57:18.056]      // while "1"  (timeout="200")
[19:57:18.056]      // while-condition  =>  TRUE
[19:57:18.056]      // while "1"  (timeout="200")
[19:57:18.056]      // while-condition  =>  TRUE
[19:57:18.056]      // while "1"  (timeout="200")
[19:57:18.056]      // while-condition  =>  TRUE
[19:57:18.056]      // while "1"  (timeout="200")
[19:57:18.057]      // while-condition  =>  TRUE
[19:57:18.057]      // while "1"  (timeout="200")
[19:57:18.057]      // while-condition  =>  TRUE
[19:57:18.057]      // while "1"  (timeout="200")
[19:57:18.057]      // while-condition  =>  TRUE
[19:57:18.057]      // while "1"  (timeout="200")
[19:57:18.057]      // while-condition  =>  TRUE
[19:57:18.057]      // while "1"  (timeout="200")
[19:57:18.057]      // while-condition  =>  TRUE
[19:57:18.057]      // while "1"  (timeout="200")
[19:57:18.057]      // while-condition  =>  TRUE
[19:57:18.058]      // while "1"  (timeout="200")
[19:57:18.058]      // while-condition  =>  TRUE
[19:57:18.058]      // while "1"  (timeout="200")
[19:57:18.058]      // while-condition  =>  TRUE
[19:57:18.058]      // while "1"  (timeout="200")
[19:57:18.059]      // while-condition  =>  TRUE
[19:57:18.059]      // while "1"  (timeout="200")
[19:57:18.059]      // while-condition  =>  TRUE
[19:57:18.059]      // while "1"  (timeout="200")
[19:57:18.059]      // while-condition  =>  TRUE
[19:57:18.059]      // while "1"  (timeout="200")
[19:57:18.059]      // while-condition  =>  TRUE
[19:57:18.059]      // while "1"  (timeout="200")
[19:57:18.059]      // while-condition  =>  TRUE
[19:57:18.059]      // while "1"  (timeout="200")
[19:57:18.059]      // while-condition  =>  TRUE
[19:57:18.059]      // while "1"  (timeout="200")
[19:57:18.060]      // while-condition  =>  TRUE
[19:57:18.060]      // while "1"  (timeout="200")
[19:57:18.060]      // while-condition  =>  TRUE
[19:57:18.060]      // while "1"  (timeout="200")
[19:57:18.060]      // while-condition  =>  TRUE
[19:57:18.060]      // while "1"  (timeout="200")
[19:57:18.060]      // while-condition  =>  TRUE
[19:57:18.060]      // while "1"  (timeout="200")
[19:57:18.060]      // while-condition  =>  TRUE
[19:57:18.060]      // while "1"  (timeout="200")
[19:57:18.060]      // while-condition  =>  TRUE
[19:57:18.060]      // while "1"  (timeout="200")
[19:57:18.060]      // while-condition  =>  TRUE
[19:57:18.060]      // while "1"  (timeout="200")
[19:57:18.060]      // while-condition  =>  TRUE
[19:57:18.061]      // while "1"  (timeout="200")
[19:57:18.061]      // while-condition  =>  TRUE
[19:57:18.061]      // while "1"  (timeout="200")
[19:57:18.061]      // while-condition  =>  TRUE
[19:57:18.061]      // while "1"  (timeout="200")
[19:57:18.061]      // while-condition  =>  TRUE
[19:57:18.061]      // while "1"  (timeout="200")
[19:57:18.061]      // while-condition  =>  TRUE
[19:57:18.063]      // while "1"  (timeout="200")
[19:57:18.063]      // while-condition  =>  TRUE
[19:57:18.063]      // while "1"  (timeout="200")
[19:57:18.063]      // while-condition  =>  TRUE
[19:57:18.063]      // while "1"  (timeout="200")
[19:57:18.063]      // while-condition  =>  TRUE
[19:57:18.063]      // while "1"  (timeout="200")
[19:57:18.063]      // while-condition  =>  TRUE
[19:57:18.063]      // while "1"  (timeout="200")
[19:57:18.063]      // while-condition  =>  TRUE
[19:57:18.063]      // while "1"  (timeout="200")
[19:57:18.063]      // while-condition  =>  TRUE
[19:57:18.063]      // while "1"  (timeout="200")
[19:57:18.063]      // while-condition  =>  TRUE
[19:57:18.064]      // while "1"  (timeout="200")
[19:57:18.064]      // while  =>  TIMEOUT
[19:57:18.064]      // end while "1"
[19:57:18.064]    </control>
[19:57:18.064]    <control if="canReadPins" while="" timeout="0" info="">
[19:57:18.064]      // if-block "canReadPins"
[19:57:18.064]        // =>  TRUE
[19:57:18.065]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:57:18.065]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:57:18.071]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:57:18.071]        // while-condition  =>  FALSE
[19:57:18.071]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:57:18.071]      </control>
[19:57:18.071]      // end if-block "canReadPins"
[19:57:18.071]    </control>
[19:57:18.071]    <control if="!canReadPins" while="" timeout="0" info="">
[19:57:18.071]      // if-block "!canReadPins"
[19:57:18.071]        // =>  FALSE
[19:57:18.071]      // skip if-block "!canReadPins"
[19:57:18.071]    </control>
[19:57:18.071]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:57:18.073]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:57:18.073]        // =>  TRUE
[19:57:18.073]      <block atomic="false" info="">
[19:57:18.073]        WriteAP(0x00, 0x190008);
[19:57:18.075]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:57:18.075]        WriteAP(0xF0, 0x01);
[19:57:18.079]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:57:18.079]      </block>
[19:57:18.080]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:57:18.080]    </control>
[19:57:18.080]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:57:18.080]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:57:18.080]        // =>  FALSE
[19:57:18.080]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:57:18.080]    </control>
[19:57:18.080]    <block atomic="false" info="">
[19:57:18.080]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:57:18.084]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:57:18.084]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:57:18.084]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:57:18.086]      __ap = 0; //lets make sure we reset the access point selection
[19:57:18.086]        // -> [__ap <= 0x00000000]
[19:57:18.086]    </block>
[19:57:18.086]  </sequence>
[19:57:18.086]  
[19:57:18.123]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:57:18.123]  
[19:57:18.123]  <debugvars>
[19:57:18.123]    // Pre-defined
[19:57:18.123]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:57:18.123]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:57:18.124]    __dp=0x00000000
[19:57:18.124]    __ap=0x00000000
[19:57:18.124]    __traceout=0x00000000      (Trace Disabled)
[19:57:18.124]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:57:18.124]    __FlashAddr=0x00000000
[19:57:18.124]    __FlashLen=0x00000000
[19:57:18.124]    __FlashArg=0x00000000
[19:57:18.124]    __FlashOp=0x00000000
[19:57:18.124]    __Result=0x00000000
[19:57:18.125]  </debugvars>
[19:57:18.125]  
[19:57:18.125]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:57:18.125]    <block atomic="false" info="">
[19:57:18.125]      __var deviceID = 0;
[19:57:18.125]        // -> [deviceID <= 0x00000000]
[19:57:18.125]      __var version = 0;
[19:57:18.125]        // -> [version <= 0x00000000]
[19:57:18.125]      __var partNum = 0;
[19:57:18.125]        // -> [partNum <= 0x00000000]
[19:57:18.126]      __var manuf = 0;
[19:57:18.126]        // -> [manuf <= 0x00000000]
[19:57:18.126]      __var isMSPM0G1X0X_G3X0X = 0;
[19:57:18.126]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:57:18.126]      __var isProduction = 0;
[19:57:18.126]        // -> [isProduction <= 0x00000000]
[19:57:18.127]      __var continueId = 0;
[19:57:18.127]        // -> [continueId <= 0x00000000]
[19:57:18.127]      deviceID =   Read32(0x41C40004);
[19:57:18.132]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:57:18.132]        // -> [deviceID <= 0x2BB8802F]
[19:57:18.132]      version = deviceID >> 28;
[19:57:18.132]        // -> [version <= 0x00000002]
[19:57:18.132]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:57:18.132]        // -> [partNum <= 0x0000BB88]
[19:57:18.132]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:57:18.132]        // -> [manuf <= 0x00000017]
[19:57:18.132]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:57:18.133]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:57:18.133]      isProduction = (version > 0);
[19:57:18.133]        // -> [isProduction <= 0x00000001]
[19:57:18.133]    </block>
[19:57:18.133]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:57:18.133]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:57:18.133]        // =>  FALSE
[19:57:18.133]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:57:18.133]    </control>
[19:57:18.133]    <control if="continueId == 4" while="" timeout="0" info="">
[19:57:18.134]      // if-block "continueId == 4"
[19:57:18.134]        // =>  FALSE
[19:57:18.134]      // skip if-block "continueId == 4"
[19:57:18.134]    </control>
[19:57:18.134]    <control if="!isProduction" while="" timeout="0" info="">
[19:57:18.134]      // if-block "!isProduction"
[19:57:18.134]        // =>  FALSE
[19:57:18.134]      // skip if-block "!isProduction"
[19:57:18.134]    </control>
[19:57:18.134]  </sequence>
[19:57:18.135]  
[19:58:06.219]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:58:06.219]  
[19:58:06.229]  <debugvars>
[19:58:06.229]    // Pre-defined
[19:58:06.229]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:58:06.229]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:58:06.229]    __dp=0x00000000
[19:58:06.229]    __ap=0x00000000
[19:58:06.229]    __traceout=0x00000000      (Trace Disabled)
[19:58:06.229]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:58:06.230]    __FlashAddr=0x00000000
[19:58:06.230]    __FlashLen=0x00000000
[19:58:06.230]    __FlashArg=0x00000000
[19:58:06.230]    __FlashOp=0x00000000
[19:58:06.230]    __Result=0x00000000
[19:58:06.230]  </debugvars>
[19:58:06.230]  
[19:58:06.230]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:58:06.231]    <block atomic="false" info="">
[19:58:06.231]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:58:06.231]        // -> [isSWJ <= 0x00000001]
[19:58:06.231]      __var hasDormant = __protocol & 0x00020000;
[19:58:06.231]        // -> [hasDormant <= 0x00000000]
[19:58:06.231]      __var protType   = __protocol & 0x0000FFFF;
[19:58:06.231]        // -> [protType <= 0x00000002]
[19:58:06.231]    </block>
[19:58:06.231]    <control if="protType == 1" while="" timeout="0" info="">
[19:58:06.232]      // if-block "protType == 1"
[19:58:06.232]        // =>  FALSE
[19:58:06.232]      // skip if-block "protType == 1"
[19:58:06.232]    </control>
[19:58:06.232]    <control if="protType == 2" while="" timeout="0" info="">
[19:58:06.232]      // if-block "protType == 2"
[19:58:06.232]        // =>  TRUE
[19:58:06.232]      <control if="isSWJ" while="" timeout="0" info="">
[19:58:06.232]        // if-block "isSWJ"
[19:58:06.232]          // =>  TRUE
[19:58:06.232]        <control if="hasDormant" while="" timeout="0" info="">
[19:58:06.233]          // if-block "hasDormant"
[19:58:06.233]            // =>  FALSE
[19:58:06.233]          // skip if-block "hasDormant"
[19:58:06.233]        </control>
[19:58:06.233]        <control if="!hasDormant" while="" timeout="0" info="">
[19:58:06.233]          // if-block "!hasDormant"
[19:58:06.234]            // =>  TRUE
[19:58:06.234]          <block atomic="false" info="">
[19:58:06.234]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:58:06.236]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:58:06.236]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:58:06.238]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:58:06.238]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:58:06.239]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:58:06.239]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:58:06.240]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:58:06.240]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:58:06.243]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:58:06.243]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:58:06.245]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:58:06.245]          </block>
[19:58:06.245]          // end if-block "!hasDormant"
[19:58:06.245]        </control>
[19:58:06.245]        // end if-block "isSWJ"
[19:58:06.245]      </control>
[19:58:06.245]      <control if="!isSWJ" while="" timeout="0" info="">
[19:58:06.246]        // if-block "!isSWJ"
[19:58:06.246]          // =>  FALSE
[19:58:06.246]        // skip if-block "!isSWJ"
[19:58:06.246]      </control>
[19:58:06.246]      <block atomic="false" info="">
[19:58:06.246]        ReadDP(0x0);
[19:58:06.247]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:58:06.247]      </block>
[19:58:06.247]      // end if-block "protType == 2"
[19:58:06.247]    </control>
[19:58:06.248]  </sequence>
[19:58:06.248]  
[19:58:06.250]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:58:06.250]  
[19:58:06.250]  <debugvars>
[19:58:06.250]    // Pre-defined
[19:58:06.250]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:58:06.250]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:58:06.250]    __dp=0x00000000
[19:58:06.251]    __ap=0x00000000
[19:58:06.251]    __traceout=0x00000000      (Trace Disabled)
[19:58:06.251]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:58:06.251]    __FlashAddr=0x00000000
[19:58:06.251]    __FlashLen=0x00000000
[19:58:06.251]    __FlashArg=0x00000000
[19:58:06.251]    __FlashOp=0x00000000
[19:58:06.251]    __Result=0x00000000
[19:58:06.251]  </debugvars>
[19:58:06.251]  
[19:58:06.251]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:58:06.251]    <block atomic="false" info="">
[19:58:06.251]      __var SW_DP_ABORT       = 0x0;
[19:58:06.251]        // -> [SW_DP_ABORT <= 0x00000000]
[19:58:06.251]      __var DP_CTRL_STAT      = 0x4;
[19:58:06.251]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:58:06.251]      __var DP_SELECT         = 0x8;
[19:58:06.253]        // -> [DP_SELECT <= 0x00000008]
[19:58:06.253]      __var powered_down      = 0;
[19:58:06.253]        // -> [powered_down <= 0x00000000]
[19:58:06.253]      WriteDP(DP_SELECT, 0x00000000);
[19:58:06.259]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:58:06.259]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:58:06.260]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:58:06.260]        // -> [powered_down <= 0x00000001]
[19:58:06.260]    </block>
[19:58:06.260]    <control if="powered_down" while="" timeout="0" info="">
[19:58:06.260]      // if-block "powered_down"
[19:58:06.260]        // =>  TRUE
[19:58:06.262]      <block atomic="false" info="">
[19:58:06.262]        Message(0, "Debug/System power-up request sent");
[19:58:06.264]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:58:06.267]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:58:06.267]      </block>
[19:58:06.267]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:58:06.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.268]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.268]        // while-condition  =>  TRUE
[19:58:06.268]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.270]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.270]        // while-condition  =>  TRUE
[19:58:06.271]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.272]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.272]        // while-condition  =>  TRUE
[19:58:06.272]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.274]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.274]        // while-condition  =>  TRUE
[19:58:06.274]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.276]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.276]        // while-condition  =>  TRUE
[19:58:06.276]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.277]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.277]        // while-condition  =>  TRUE
[19:58:06.277]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.279]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.279]        // while-condition  =>  TRUE
[19:58:06.279]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.282]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.282]        // while-condition  =>  TRUE
[19:58:06.282]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.283]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.283]        // while-condition  =>  TRUE
[19:58:06.283]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.285]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.285]        // while-condition  =>  TRUE
[19:58:06.285]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.287]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.287]        // while-condition  =>  TRUE
[19:58:06.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.289]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.289]        // while-condition  =>  TRUE
[19:58:06.290]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.291]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.292]        // while-condition  =>  TRUE
[19:58:06.292]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.295]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.296]        // while-condition  =>  TRUE
[19:58:06.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.297]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.297]        // while-condition  =>  TRUE
[19:58:06.297]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.299]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.299]        // while-condition  =>  TRUE
[19:58:06.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.301]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.301]        // while-condition  =>  TRUE
[19:58:06.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.302]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.302]        // while-condition  =>  TRUE
[19:58:06.303]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.307]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.307]        // while-condition  =>  TRUE
[19:58:06.307]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.309]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.309]        // while-condition  =>  TRUE
[19:58:06.309]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.311]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.311]        // while-condition  =>  TRUE
[19:58:06.311]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.313]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.313]        // while-condition  =>  TRUE
[19:58:06.314]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.315]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.315]        // while-condition  =>  TRUE
[19:58:06.316]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.317]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.318]        // while-condition  =>  TRUE
[19:58:06.318]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.319]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.320]        // while-condition  =>  TRUE
[19:58:06.320]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.324]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.324]        // while-condition  =>  TRUE
[19:58:06.324]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.327]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.327]        // while-condition  =>  TRUE
[19:58:06.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.335]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.336]        // while-condition  =>  TRUE
[19:58:06.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.337]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.337]        // while-condition  =>  TRUE
[19:58:06.337]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.338]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.338]        // while-condition  =>  TRUE
[19:58:06.338]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.341]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.341]        // while-condition  =>  TRUE
[19:58:06.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.342]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.342]        // while-condition  =>  TRUE
[19:58:06.343]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.344]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.344]        // while-condition  =>  TRUE
[19:58:06.344]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.346]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.346]        // while-condition  =>  TRUE
[19:58:06.346]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.348]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.348]        // while-condition  =>  TRUE
[19:58:06.348]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.352]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.352]        // while-condition  =>  TRUE
[19:58:06.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.354]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.354]        // while-condition  =>  TRUE
[19:58:06.354]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.355]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.355]        // while-condition  =>  TRUE
[19:58:06.355]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.357]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.357]        // while-condition  =>  TRUE
[19:58:06.357]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.359]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.359]        // while-condition  =>  TRUE
[19:58:06.360]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.361]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.361]        // while-condition  =>  TRUE
[19:58:06.361]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.363]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.363]        // while-condition  =>  TRUE
[19:58:06.363]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.366]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.366]        // while-condition  =>  TRUE
[19:58:06.367]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.368]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.368]        // while-condition  =>  TRUE
[19:58:06.368]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.369]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.370]        // while-condition  =>  TRUE
[19:58:06.370]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.372]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.372]        // while-condition  =>  TRUE
[19:58:06.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.373]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.373]        // while-condition  =>  TRUE
[19:58:06.373]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.375]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.375]        // while-condition  =>  TRUE
[19:58:06.375]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.377]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.377]        // while-condition  =>  TRUE
[19:58:06.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.379]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.379]        // while-condition  =>  TRUE
[19:58:06.379]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.381]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.381]        // while-condition  =>  TRUE
[19:58:06.381]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.383]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.383]        // while-condition  =>  TRUE
[19:58:06.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.384]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.385]        // while-condition  =>  TRUE
[19:58:06.385]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.386]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.386]        // while-condition  =>  TRUE
[19:58:06.387]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.388]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.388]        // while-condition  =>  TRUE
[19:58:06.388]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.389]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.389]        // while-condition  =>  TRUE
[19:58:06.390]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.395]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.395]        // while-condition  =>  TRUE
[19:58:06.395]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.398]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.398]        // while-condition  =>  TRUE
[19:58:06.398]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.400]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.400]        // while-condition  =>  TRUE
[19:58:06.400]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.401]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.402]        // while-condition  =>  TRUE
[19:58:06.402]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.403]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.403]        // while-condition  =>  TRUE
[19:58:06.404]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.405]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.405]        // while-condition  =>  TRUE
[19:58:06.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.410]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.410]        // while-condition  =>  TRUE
[19:58:06.410]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.411]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.411]        // while-condition  =>  TRUE
[19:58:06.412]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.413]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.413]        // while-condition  =>  TRUE
[19:58:06.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.415]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.415]        // while-condition  =>  TRUE
[19:58:06.415]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.417]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.417]        // while-condition  =>  TRUE
[19:58:06.418]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.418]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.419]        // while-condition  =>  TRUE
[19:58:06.419]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.421]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.421]        // while-condition  =>  TRUE
[19:58:06.421]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.422]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.423]        // while-condition  =>  TRUE
[19:58:06.423]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.424]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.424]        // while-condition  =>  TRUE
[19:58:06.424]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.429]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.429]        // while-condition  =>  TRUE
[19:58:06.429]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.431]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.431]        // while-condition  =>  TRUE
[19:58:06.431]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.434]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.434]        // while-condition  =>  TRUE
[19:58:06.434]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.436]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.437]        // while-condition  =>  TRUE
[19:58:06.437]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.441]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.442]        // while-condition  =>  TRUE
[19:58:06.442]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.447]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.447]        // while-condition  =>  TRUE
[19:58:06.447]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.449]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.449]        // while-condition  =>  TRUE
[19:58:06.449]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.450]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.450]        // while-condition  =>  TRUE
[19:58:06.450]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.452]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.452]        // while-condition  =>  TRUE
[19:58:06.452]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.453]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.453]        // while-condition  =>  TRUE
[19:58:06.454]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.455]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.455]        // while-condition  =>  TRUE
[19:58:06.456]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.459]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.459]        // while-condition  =>  TRUE
[19:58:06.459]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.460]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.460]        // while-condition  =>  TRUE
[19:58:06.460]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.462]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.462]        // while-condition  =>  TRUE
[19:58:06.462]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.464]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.464]        // while-condition  =>  TRUE
[19:58:06.464]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.466]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.466]        // while-condition  =>  TRUE
[19:58:06.466]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.469]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.469]        // while-condition  =>  TRUE
[19:58:06.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.470]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.471]        // while-condition  =>  TRUE
[19:58:06.471]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.473]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.474]        // while-condition  =>  TRUE
[19:58:06.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.481]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.482]        // while-condition  =>  TRUE
[19:58:06.482]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.487]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.487]        // while-condition  =>  TRUE
[19:58:06.488]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.493]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.493]        // while-condition  =>  TRUE
[19:58:06.493]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.494]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.494]        // while-condition  =>  TRUE
[19:58:06.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.497]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.497]        // while-condition  =>  TRUE
[19:58:06.497]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.500]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.500]        // while-condition  =>  TRUE
[19:58:06.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.504]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.504]        // while-condition  =>  TRUE
[19:58:06.505]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.506]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.506]        // while-condition  =>  TRUE
[19:58:06.506]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.508]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.508]        // while-condition  =>  TRUE
[19:58:06.508]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.510]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.510]        // while-condition  =>  TRUE
[19:58:06.510]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.513]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.513]        // while-condition  =>  TRUE
[19:58:06.513]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.515]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.515]        // while-condition  =>  TRUE
[19:58:06.515]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.516]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.517]        // while-condition  =>  TRUE
[19:58:06.517]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.522]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.523]        // while-condition  =>  TRUE
[19:58:06.523]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.524]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.524]        // while-condition  =>  TRUE
[19:58:06.525]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.526]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.526]        // while-condition  =>  TRUE
[19:58:06.527]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.530]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.530]        // while-condition  =>  TRUE
[19:58:06.530]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.532]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.532]        // while-condition  =>  TRUE
[19:58:06.533]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.535]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.535]        // while-condition  =>  TRUE
[19:58:06.535]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.538]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.538]        // while-condition  =>  TRUE
[19:58:06.539]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.539]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.539]        // while-condition  =>  TRUE
[19:58:06.540]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.546]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.546]        // while-condition  =>  TRUE
[19:58:06.546]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.547]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.547]        // while-condition  =>  TRUE
[19:58:06.548]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.549]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.549]        // while-condition  =>  TRUE
[19:58:06.549]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.552]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.552]        // while-condition  =>  TRUE
[19:58:06.552]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.560]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.560]        // while-condition  =>  TRUE
[19:58:06.560]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.567]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.567]        // while-condition  =>  TRUE
[19:58:06.567]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.568]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.568]        // while-condition  =>  TRUE
[19:58:06.568]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.571]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.571]        // while-condition  =>  TRUE
[19:58:06.571]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.574]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.574]        // while-condition  =>  TRUE
[19:58:06.574]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.575]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.575]        // while-condition  =>  TRUE
[19:58:06.575]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.579]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.579]        // while-condition  =>  TRUE
[19:58:06.579]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.581]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.581]        // while-condition  =>  TRUE
[19:58:06.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.588]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.588]        // while-condition  =>  TRUE
[19:58:06.588]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.594]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.594]        // while-condition  =>  TRUE
[19:58:06.594]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.597]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.597]        // while-condition  =>  TRUE
[19:58:06.597]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.600]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.600]        // while-condition  =>  TRUE
[19:58:06.600]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.603]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.603]        // while-condition  =>  TRUE
[19:58:06.603]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.605]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.605]        // while-condition  =>  TRUE
[19:58:06.605]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.607]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.608]        // while-condition  =>  TRUE
[19:58:06.608]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.610]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.610]        // while-condition  =>  TRUE
[19:58:06.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.612]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.612]        // while-condition  =>  TRUE
[19:58:06.613]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.617]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.617]        // while-condition  =>  TRUE
[19:58:06.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.619]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.619]        // while-condition  =>  TRUE
[19:58:06.619]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.622]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.622]        // while-condition  =>  TRUE
[19:58:06.622]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.623]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.623]        // while-condition  =>  TRUE
[19:58:06.623]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.626]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.626]        // while-condition  =>  TRUE
[19:58:06.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.628]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.628]        // while-condition  =>  TRUE
[19:58:06.628]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.632]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.632]        // while-condition  =>  TRUE
[19:58:06.632]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.634]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.634]        // while-condition  =>  TRUE
[19:58:06.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.636]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.636]        // while-condition  =>  TRUE
[19:58:06.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.638]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.638]        // while-condition  =>  TRUE
[19:58:06.638]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.640]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.640]        // while-condition  =>  TRUE
[19:58:06.641]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.642]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.642]        // while-condition  =>  TRUE
[19:58:06.642]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.644]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.644]        // while-condition  =>  TRUE
[19:58:06.644]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.647]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.647]        // while-condition  =>  TRUE
[19:58:06.647]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.651]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.651]        // while-condition  =>  TRUE
[19:58:06.651]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.653]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.653]        // while-condition  =>  TRUE
[19:58:06.653]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.655]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.655]        // while-condition  =>  TRUE
[19:58:06.655]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.656]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.656]        // while-condition  =>  TRUE
[19:58:06.656]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.659]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.659]        // while-condition  =>  TRUE
[19:58:06.659]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.664]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.664]        // while-condition  =>  TRUE
[19:58:06.664]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.666]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.666]        // while-condition  =>  TRUE
[19:58:06.667]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.672]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.672]        // while-condition  =>  TRUE
[19:58:06.672]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.673]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.674]        // while-condition  =>  TRUE
[19:58:06.674]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.675]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.675]        // while-condition  =>  TRUE
[19:58:06.676]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.679]        // while-condition  =>  TRUE
[19:58:06.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.679]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.679]        // while-condition  =>  TRUE
[19:58:06.679]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.684]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.684]        // while-condition  =>  TRUE
[19:58:06.684]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.686]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.686]        // while-condition  =>  TRUE
[19:58:06.686]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.688]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.688]        // while-condition  =>  TRUE
[19:58:06.688]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.689]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.689]        // while-condition  =>  TRUE
[19:58:06.689]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.691]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.691]        // while-condition  =>  TRUE
[19:58:06.691]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.696]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.696]        // while-condition  =>  TRUE
[19:58:06.697]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.699]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.699]        // while-condition  =>  TRUE
[19:58:06.699]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.701]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.701]        // while-condition  =>  TRUE
[19:58:06.702]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.705]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.705]        // while-condition  =>  TRUE
[19:58:06.705]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.710]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.711]        // while-condition  =>  TRUE
[19:58:06.711]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.712]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.712]        // while-condition  =>  TRUE
[19:58:06.713]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.715]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.715]        // while-condition  =>  TRUE
[19:58:06.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.717]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.717]        // while-condition  =>  TRUE
[19:58:06.717]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.721]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.721]        // while-condition  =>  TRUE
[19:58:06.721]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.723]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.723]        // while-condition  =>  TRUE
[19:58:06.723]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.725]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.725]        // while-condition  =>  TRUE
[19:58:06.725]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.729]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.729]        // while-condition  =>  TRUE
[19:58:06.729]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.730]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.730]        // while-condition  =>  TRUE
[19:58:06.730]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.733]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.734]        // while-condition  =>  TRUE
[19:58:06.734]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.736]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.736]        // while-condition  =>  TRUE
[19:58:06.736]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.739]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.741]        // while-condition  =>  TRUE
[19:58:06.741]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.743]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.743]        // while-condition  =>  TRUE
[19:58:06.743]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.747]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.747]        // while-condition  =>  TRUE
[19:58:06.748]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.749]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.749]        // while-condition  =>  TRUE
[19:58:06.749]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.752]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.752]        // while-condition  =>  TRUE
[19:58:06.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.754]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.754]        // while-condition  =>  TRUE
[19:58:06.754]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.758]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.758]        // while-condition  =>  TRUE
[19:58:06.758]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.761]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.761]        // while-condition  =>  TRUE
[19:58:06.761]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.763]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.763]        // while-condition  =>  TRUE
[19:58:06.763]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.764]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.764]        // while-condition  =>  TRUE
[19:58:06.764]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.766]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.766]        // while-condition  =>  TRUE
[19:58:06.766]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.768]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.768]        // while-condition  =>  TRUE
[19:58:06.769]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.771]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.772]        // while-condition  =>  TRUE
[19:58:06.772]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.773]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.773]        // while-condition  =>  TRUE
[19:58:06.773]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.775]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.775]        // while-condition  =>  TRUE
[19:58:06.775]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.779]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.779]        // while-condition  =>  TRUE
[19:58:06.779]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.781]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.781]        // while-condition  =>  TRUE
[19:58:06.781]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.783]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.783]        // while-condition  =>  TRUE
[19:58:06.783]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.794]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.794]        // while-condition  =>  TRUE
[19:58:06.794]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.795]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.796]        // while-condition  =>  TRUE
[19:58:06.796]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.797]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.797]        // while-condition  =>  TRUE
[19:58:06.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.798]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.799]        // while-condition  =>  TRUE
[19:58:06.799]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.800]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.800]        // while-condition  =>  TRUE
[19:58:06.800]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.802]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.802]        // while-condition  =>  TRUE
[19:58:06.803]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.804]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.805]        // while-condition  =>  TRUE
[19:58:06.805]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.809]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.809]        // while-condition  =>  TRUE
[19:58:06.809]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.811]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.811]        // while-condition  =>  TRUE
[19:58:06.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.816]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.816]        // while-condition  =>  TRUE
[19:58:06.817]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.818]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.818]        // while-condition  =>  TRUE
[19:58:06.818]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.821]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.822]        // while-condition  =>  TRUE
[19:58:06.822]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.824]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.824]        // while-condition  =>  TRUE
[19:58:06.824]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.825]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.825]        // while-condition  =>  TRUE
[19:58:06.825]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.828]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.828]        // while-condition  =>  TRUE
[19:58:06.828]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.830]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.830]        // while-condition  =>  TRUE
[19:58:06.830]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.832]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.832]        // while-condition  =>  TRUE
[19:58:06.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.834]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.834]        // while-condition  =>  TRUE
[19:58:06.834]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.835]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.835]        // while-condition  =>  TRUE
[19:58:06.835]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.837]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.838]        // while-condition  =>  TRUE
[19:58:06.838]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.840]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.840]        // while-condition  =>  TRUE
[19:58:06.840]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.841]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.841]        // while-condition  =>  TRUE
[19:58:06.841]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.843]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.843]        // while-condition  =>  TRUE
[19:58:06.843]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.846]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.846]        // while-condition  =>  TRUE
[19:58:06.846]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.850]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.850]        // while-condition  =>  TRUE
[19:58:06.850]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.855]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.855]        // while-condition  =>  TRUE
[19:58:06.855]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.861]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.861]        // while-condition  =>  TRUE
[19:58:06.862]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.864]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.865]        // while-condition  =>  TRUE
[19:58:06.865]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.867]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.867]        // while-condition  =>  TRUE
[19:58:06.867]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.868]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.869]        // while-condition  =>  TRUE
[19:58:06.869]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.870]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.872]        // while-condition  =>  TRUE
[19:58:06.872]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.873]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.873]        // while-condition  =>  TRUE
[19:58:06.873]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.876]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.876]        // while-condition  =>  TRUE
[19:58:06.876]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.879]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.879]        // while-condition  =>  TRUE
[19:58:06.880]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.886]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.886]        // while-condition  =>  TRUE
[19:58:06.886]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.897]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.897]        // while-condition  =>  TRUE
[19:58:06.897]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.901]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.902]        // while-condition  =>  TRUE
[19:58:06.902]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.904]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.904]        // while-condition  =>  TRUE
[19:58:06.904]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.905]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.905]        // while-condition  =>  TRUE
[19:58:06.906]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.907]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.908]        // while-condition  =>  TRUE
[19:58:06.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.909]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.909]        // while-condition  =>  TRUE
[19:58:06.909]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.911]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.911]        // while-condition  =>  TRUE
[19:58:06.911]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.912]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.912]        // while-condition  =>  TRUE
[19:58:06.913]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.918]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.919]        // while-condition  =>  TRUE
[19:58:06.919]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.921]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.921]        // while-condition  =>  TRUE
[19:58:06.921]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.924]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.924]        // while-condition  =>  TRUE
[19:58:06.924]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.926]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.926]        // while-condition  =>  TRUE
[19:58:06.926]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.930]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.930]        // while-condition  =>  TRUE
[19:58:06.931]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.934]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.934]        // while-condition  =>  TRUE
[19:58:06.934]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.936]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.937]        // while-condition  =>  TRUE
[19:58:06.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.942]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.942]        // while-condition  =>  TRUE
[19:58:06.942]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.944]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.944]        // while-condition  =>  TRUE
[19:58:06.944]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.947]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.947]        // while-condition  =>  TRUE
[19:58:06.947]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.949]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.949]        // while-condition  =>  TRUE
[19:58:06.949]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.954]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.954]        // while-condition  =>  TRUE
[19:58:06.954]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.956]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.957]        // while-condition  =>  TRUE
[19:58:06.957]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.958]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.958]        // while-condition  =>  TRUE
[19:58:06.958]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.960]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.960]        // while-condition  =>  TRUE
[19:58:06.960]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.961]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.961]        // while-condition  =>  TRUE
[19:58:06.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.963]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.963]        // while-condition  =>  TRUE
[19:58:06.963]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.965]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.965]        // while-condition  =>  TRUE
[19:58:06.965]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.967]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.967]        // while-condition  =>  TRUE
[19:58:06.967]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.969]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.969]        // while-condition  =>  TRUE
[19:58:06.969]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.971]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.972]        // while-condition  =>  TRUE
[19:58:06.972]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.974]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.974]        // while-condition  =>  TRUE
[19:58:06.974]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.976]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.976]        // while-condition  =>  TRUE
[19:58:06.976]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.977]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.977]        // while-condition  =>  TRUE
[19:58:06.977]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.979]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.980]        // while-condition  =>  TRUE
[19:58:06.980]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.983]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.983]        // while-condition  =>  TRUE
[19:58:06.983]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.985]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.985]        // while-condition  =>  TRUE
[19:58:06.985]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.987]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.987]        // while-condition  =>  TRUE
[19:58:06.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.989]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.989]        // while-condition  =>  TRUE
[19:58:06.989]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.990]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.991]        // while-condition  =>  TRUE
[19:58:06.991]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.992]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.992]        // while-condition  =>  TRUE
[19:58:06.993]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.995]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.995]        // while-condition  =>  TRUE
[19:58:06.995]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.997]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.997]        // while-condition  =>  TRUE
[19:58:06.997]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:06.999]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:06.999]        // while-condition  =>  TRUE
[19:58:06.999]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.001]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.001]        // while-condition  =>  TRUE
[19:58:07.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.007]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.007]        // while-condition  =>  TRUE
[19:58:07.007]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.010]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.010]        // while-condition  =>  TRUE
[19:58:07.011]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.012]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.012]        // while-condition  =>  TRUE
[19:58:07.012]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.014]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.014]        // while-condition  =>  TRUE
[19:58:07.014]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.017]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.017]        // while-condition  =>  TRUE
[19:58:07.017]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.018]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.018]        // while-condition  =>  TRUE
[19:58:07.018]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.026]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.026]        // while-condition  =>  TRUE
[19:58:07.026]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.031]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.031]        // while-condition  =>  TRUE
[19:58:07.032]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.034]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.034]        // while-condition  =>  TRUE
[19:58:07.034]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.036]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.036]        // while-condition  =>  TRUE
[19:58:07.036]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.038]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.038]        // while-condition  =>  TRUE
[19:58:07.038]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.042]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.043]        // while-condition  =>  TRUE
[19:58:07.043]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.045]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.046]        // while-condition  =>  TRUE
[19:58:07.046]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.048]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.048]        // while-condition  =>  TRUE
[19:58:07.049]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.050]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.050]        // while-condition  =>  TRUE
[19:58:07.051]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.053]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.053]        // while-condition  =>  TRUE
[19:58:07.053]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.054]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.055]        // while-condition  =>  TRUE
[19:58:07.055]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.060]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.060]        // while-condition  =>  TRUE
[19:58:07.060]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.061]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.061]        // while-condition  =>  TRUE
[19:58:07.062]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.063]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.063]        // while-condition  =>  TRUE
[19:58:07.063]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.065]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.065]        // while-condition  =>  TRUE
[19:58:07.065]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.071]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.071]        // while-condition  =>  TRUE
[19:58:07.071]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.073]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.073]        // while-condition  =>  TRUE
[19:58:07.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.079]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.079]        // while-condition  =>  TRUE
[19:58:07.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.082]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.082]        // while-condition  =>  TRUE
[19:58:07.082]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.085]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.085]        // while-condition  =>  TRUE
[19:58:07.086]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.087]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.088]        // while-condition  =>  TRUE
[19:58:07.088]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.090]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.090]        // while-condition  =>  TRUE
[19:58:07.091]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.093]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.093]        // while-condition  =>  TRUE
[19:58:07.093]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.095]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.095]        // while-condition  =>  TRUE
[19:58:07.095]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.097]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.097]        // while-condition  =>  TRUE
[19:58:07.097]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.100]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.101]        // while-condition  =>  TRUE
[19:58:07.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.106]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.107]        // while-condition  =>  TRUE
[19:58:07.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.108]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.108]        // while-condition  =>  TRUE
[19:58:07.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.110]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.111]        // while-condition  =>  TRUE
[19:58:07.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.113]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.113]        // while-condition  =>  TRUE
[19:58:07.113]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.115]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.115]        // while-condition  =>  TRUE
[19:58:07.115]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.118]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.118]        // while-condition  =>  TRUE
[19:58:07.119]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.120]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.120]        // while-condition  =>  TRUE
[19:58:07.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.121]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.121]        // while-condition  =>  TRUE
[19:58:07.121]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.123]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.123]        // while-condition  =>  TRUE
[19:58:07.123]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.129]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.129]        // while-condition  =>  TRUE
[19:58:07.129]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.133]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.134]        // while-condition  =>  TRUE
[19:58:07.134]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.138]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.139]        // while-condition  =>  TRUE
[19:58:07.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.140]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.140]        // while-condition  =>  TRUE
[19:58:07.141]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.143]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.143]        // while-condition  =>  TRUE
[19:58:07.143]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.145]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.145]        // while-condition  =>  TRUE
[19:58:07.145]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.147]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.147]        // while-condition  =>  TRUE
[19:58:07.148]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.149]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.149]        // while-condition  =>  TRUE
[19:58:07.149]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.150]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.150]        // while-condition  =>  TRUE
[19:58:07.151]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.153]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.154]        // while-condition  =>  TRUE
[19:58:07.154]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.155]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.155]        // while-condition  =>  TRUE
[19:58:07.156]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.157]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.157]        // while-condition  =>  TRUE
[19:58:07.157]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.160]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.160]        // while-condition  =>  TRUE
[19:58:07.160]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.161]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.161]        // while-condition  =>  TRUE
[19:58:07.161]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.164]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.164]        // while-condition  =>  TRUE
[19:58:07.164]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.167]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.167]        // while-condition  =>  TRUE
[19:58:07.167]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.170]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.170]        // while-condition  =>  TRUE
[19:58:07.170]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.172]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.172]        // while-condition  =>  TRUE
[19:58:07.172]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.174]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.174]        // while-condition  =>  TRUE
[19:58:07.174]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.178]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.179]        // while-condition  =>  TRUE
[19:58:07.179]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.181]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.181]        // while-condition  =>  TRUE
[19:58:07.181]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.182]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.182]        // while-condition  =>  TRUE
[19:58:07.183]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.185]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.185]        // while-condition  =>  TRUE
[19:58:07.185]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.187]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.187]        // while-condition  =>  TRUE
[19:58:07.187]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.192]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.192]        // while-condition  =>  TRUE
[19:58:07.192]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.198]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.198]        // while-condition  =>  TRUE
[19:58:07.198]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.201]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.201]        // while-condition  =>  TRUE
[19:58:07.202]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.203]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.203]        // while-condition  =>  TRUE
[19:58:07.203]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.205]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.205]        // while-condition  =>  TRUE
[19:58:07.205]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.206]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.206]        // while-condition  =>  TRUE
[19:58:07.207]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.210]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.210]        // while-condition  =>  TRUE
[19:58:07.210]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.212]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.212]        // while-condition  =>  TRUE
[19:58:07.212]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.214]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.214]        // while-condition  =>  TRUE
[19:58:07.214]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.215]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.215]        // while-condition  =>  TRUE
[19:58:07.216]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.218]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.218]        // while-condition  =>  TRUE
[19:58:07.219]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.221]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.221]        // while-condition  =>  TRUE
[19:58:07.221]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.222]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.222]        // while-condition  =>  TRUE
[19:58:07.223]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.224]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.224]        // while-condition  =>  TRUE
[19:58:07.224]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.226]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.226]        // while-condition  =>  TRUE
[19:58:07.226]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.231]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.231]        // while-condition  =>  TRUE
[19:58:07.231]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.233]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.233]        // while-condition  =>  TRUE
[19:58:07.233]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.235]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.236]        // while-condition  =>  TRUE
[19:58:07.236]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.238]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.238]        // while-condition  =>  TRUE
[19:58:07.238]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.240]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.240]        // while-condition  =>  TRUE
[19:58:07.240]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.242]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.242]        // while-condition  =>  TRUE
[19:58:07.242]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.243]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.243]        // while-condition  =>  TRUE
[19:58:07.244]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.246]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.247]        // while-condition  =>  TRUE
[19:58:07.247]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.248]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.248]        // while-condition  =>  TRUE
[19:58:07.248]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.250]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.250]        // while-condition  =>  TRUE
[19:58:07.250]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.252]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.252]        // while-condition  =>  TRUE
[19:58:07.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.255]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.255]        // while-condition  =>  TRUE
[19:58:07.255]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.259]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.259]        // while-condition  =>  TRUE
[19:58:07.259]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.261]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.261]        // while-condition  =>  TRUE
[19:58:07.261]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.265]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.265]        // while-condition  =>  TRUE
[19:58:07.265]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.267]          // -> [ReadDP(0x00000004) => 0x50000040]   (__dp=0x00000000)
[19:58:07.267]        // while-condition  =>  TRUE
[19:58:07.267]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:07.267]        // while  =>  TIMEOUT
[19:58:07.267]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:58:07.267]      </control>
[19:58:07.267]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:58:07.267]        // if-block "(__protocol & 0xFFFF) == 1"
[19:58:07.267]          // =>  FALSE
[19:58:07.267]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:58:07.267]      </control>
[19:58:07.267]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:58:07.267]        // if-block "(__protocol & 0xFFFF) == 2"
[19:58:07.268]          // =>  TRUE
[19:58:07.268]        <block atomic="false" info="">
[19:58:07.268]          Message(0, "executing SWD power up");
[19:58:07.269]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:58:07.271]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:58:07.271]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:58:07.273]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:58:07.273]        </block>
[19:58:07.273]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:58:07.273]      </control>
[19:58:07.273]      // end if-block "powered_down"
[19:58:07.274]    </control>
[19:58:07.274]    <block atomic="false" info="">
[19:58:07.274]      __var DEBUG_PORT_VAL    = 0;
[19:58:07.274]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:58:07.274]      __var ACCESS_POINT_VAL  = 0;
[19:58:07.274]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:58:07.274]      __ap = 1; 
[19:58:07.274]        // -> [__ap <= 0x00000001]
[19:58:07.274]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:58:07.292]  
[19:58:07.292]  !!! E310 : Debug access failed - cannot write value 0x00000004 to AP register 0x0000000C (AP '0x00000001'))
[19:58:07.292]  
[19:58:07.293]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:58:07.293]    </block>
[19:58:07.293]  </sequence>
[19:58:07.293]  
[19:58:15.256]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:58:15.256]  
[19:58:15.256]  <debugvars>
[19:58:15.256]    // Pre-defined
[19:58:15.256]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:58:15.256]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:58:15.256]    __dp=0x00000000
[19:58:15.256]    __ap=0x00000000
[19:58:15.256]    __traceout=0x00000000      (Trace Disabled)
[19:58:15.256]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:58:15.256]    __FlashAddr=0x00000000
[19:58:15.256]    __FlashLen=0x00000000
[19:58:15.256]    __FlashArg=0x00000000
[19:58:15.257]    __FlashOp=0x00000000
[19:58:15.257]    __Result=0x00000000
[19:58:15.257]  </debugvars>
[19:58:15.257]  
[19:58:15.257]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:58:15.257]    <block atomic="false" info="">
[19:58:15.257]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:58:15.257]        // -> [isSWJ <= 0x00000001]
[19:58:15.257]      __var hasDormant = __protocol & 0x00020000;
[19:58:15.257]        // -> [hasDormant <= 0x00000000]
[19:58:15.257]      __var protType   = __protocol & 0x0000FFFF;
[19:58:15.258]        // -> [protType <= 0x00000002]
[19:58:15.258]    </block>
[19:58:15.258]    <control if="protType == 1" while="" timeout="0" info="">
[19:58:15.258]      // if-block "protType == 1"
[19:58:15.258]        // =>  FALSE
[19:58:15.258]      // skip if-block "protType == 1"
[19:58:15.258]    </control>
[19:58:15.258]    <control if="protType == 2" while="" timeout="0" info="">
[19:58:15.258]      // if-block "protType == 2"
[19:58:15.258]        // =>  TRUE
[19:58:15.259]      <control if="isSWJ" while="" timeout="0" info="">
[19:58:15.259]        // if-block "isSWJ"
[19:58:15.259]          // =>  TRUE
[19:58:15.259]        <control if="hasDormant" while="" timeout="0" info="">
[19:58:15.259]          // if-block "hasDormant"
[19:58:15.259]            // =>  FALSE
[19:58:15.259]          // skip if-block "hasDormant"
[19:58:15.260]        </control>
[19:58:15.260]        <control if="!hasDormant" while="" timeout="0" info="">
[19:58:15.260]          // if-block "!hasDormant"
[19:58:15.260]            // =>  TRUE
[19:58:15.260]          <block atomic="false" info="">
[19:58:15.260]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:58:15.262]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:58:15.262]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:58:15.269]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:58:15.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:58:15.271]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:58:15.271]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:58:15.272]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:58:15.273]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:58:15.274]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:58:15.274]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:58:15.276]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:58:15.276]          </block>
[19:58:15.276]          // end if-block "!hasDormant"
[19:58:15.276]        </control>
[19:58:15.276]        // end if-block "isSWJ"
[19:58:15.276]      </control>
[19:58:15.276]      <control if="!isSWJ" while="" timeout="0" info="">
[19:58:15.277]        // if-block "!isSWJ"
[19:58:15.277]          // =>  FALSE
[19:58:15.277]        // skip if-block "!isSWJ"
[19:58:15.277]      </control>
[19:58:15.277]      <block atomic="false" info="">
[19:58:15.277]        ReadDP(0x0);
[19:58:15.284]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:58:15.285]      </block>
[19:58:15.285]      // end if-block "protType == 2"
[19:58:15.285]    </control>
[19:58:15.285]  </sequence>
[19:58:15.285]  
[19:58:15.288]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:58:15.288]  
[19:58:15.288]  <debugvars>
[19:58:15.288]    // Pre-defined
[19:58:15.288]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:58:15.288]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:58:15.288]    __dp=0x00000000
[19:58:15.288]    __ap=0x00000000
[19:58:15.288]    __traceout=0x00000000      (Trace Disabled)
[19:58:15.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:58:15.289]    __FlashAddr=0x00000000
[19:58:15.289]    __FlashLen=0x00000000
[19:58:15.289]    __FlashArg=0x00000000
[19:58:15.289]    __FlashOp=0x00000000
[19:58:15.289]    __Result=0x00000000
[19:58:15.289]  </debugvars>
[19:58:15.289]  
[19:58:15.289]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:58:15.290]    <block atomic="false" info="">
[19:58:15.290]      __var SW_DP_ABORT       = 0x0;
[19:58:15.290]        // -> [SW_DP_ABORT <= 0x00000000]
[19:58:15.290]      __var DP_CTRL_STAT      = 0x4;
[19:58:15.290]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:58:15.290]      __var DP_SELECT         = 0x8;
[19:58:15.290]        // -> [DP_SELECT <= 0x00000008]
[19:58:15.290]      __var powered_down      = 0;
[19:58:15.290]        // -> [powered_down <= 0x00000000]
[19:58:15.291]      WriteDP(DP_SELECT, 0x00000000);
[19:58:15.292]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:58:15.292]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:58:15.294]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:58:15.294]        // -> [powered_down <= 0x00000001]
[19:58:15.294]    </block>
[19:58:15.294]    <control if="powered_down" while="" timeout="0" info="">
[19:58:15.294]      // if-block "powered_down"
[19:58:15.294]        // =>  TRUE
[19:58:15.294]      <block atomic="false" info="">
[19:58:15.294]        Message(0, "Debug/System power-up request sent");
[19:58:15.297]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:58:15.299]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:58:15.299]      </block>
[19:58:15.299]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:58:15.299]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:58:15.301]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:58:15.301]        // while-condition  =>  FALSE
[19:58:15.301]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:58:15.301]      </control>
[19:58:15.301]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:58:15.301]        // if-block "(__protocol & 0xFFFF) == 1"
[19:58:15.301]          // =>  FALSE
[19:58:15.302]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:58:15.302]      </control>
[19:58:15.302]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:58:15.302]        // if-block "(__protocol & 0xFFFF) == 2"
[19:58:15.302]          // =>  TRUE
[19:58:15.302]        <block atomic="false" info="">
[19:58:15.302]          Message(0, "executing SWD power up");
[19:58:15.304]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:58:15.306]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:58:15.306]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:58:15.309]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:58:15.309]        </block>
[19:58:15.309]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:58:15.309]      </control>
[19:58:15.310]      // end if-block "powered_down"
[19:58:15.310]    </control>
[19:58:15.310]    <block atomic="false" info="">
[19:58:15.310]      __var DEBUG_PORT_VAL    = 0;
[19:58:15.310]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:58:15.310]      __var ACCESS_POINT_VAL  = 0;
[19:58:15.310]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:58:15.310]      __ap = 1; 
[19:58:15.310]        // -> [__ap <= 0x00000001]
[19:58:15.311]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:58:15.314]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:58:15.315]      __ap = 4;
[19:58:15.315]        // -> [__ap <= 0x00000004]
[19:58:15.315]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:58:15.322]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:58:15.322]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:58:15.322]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:58:15.325]    </block>
[19:58:15.325]    <block atomic="false" info="">
[19:58:15.325]      __var nReset = 0x80;
[19:58:15.325]        // -> [nReset <= 0x00000080]
[19:58:15.325]      __var canReadPins = 0;
[19:58:15.325]        // -> [canReadPins <= 0x00000000]
[19:58:15.325]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:58:15.327]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:58:15.327]        // -> [canReadPins <= 0x00000001]
[19:58:15.327]    </block>
[19:58:15.327]    <control if="" while="1" timeout="200" info="">
[19:58:15.327]      // while "1"  (timeout="200")
[19:58:15.327]      // while-condition  =>  TRUE
[19:58:15.327]      // while "1"  (timeout="200")
[19:58:15.327]      // while-condition  =>  TRUE
[19:58:15.327]      // while "1"  (timeout="200")
[19:58:15.328]      // while-condition  =>  TRUE
[19:58:15.328]      // while "1"  (timeout="200")
[19:58:15.328]      // while-condition  =>  TRUE
[19:58:15.328]      // while "1"  (timeout="200")
[19:58:15.328]      // while-condition  =>  TRUE
[19:58:15.328]      // while "1"  (timeout="200")
[19:58:15.328]      // while-condition  =>  TRUE
[19:58:15.328]      // while "1"  (timeout="200")
[19:58:15.328]      // while-condition  =>  TRUE
[19:58:15.328]      // while "1"  (timeout="200")
[19:58:15.328]      // while-condition  =>  TRUE
[19:58:15.329]      // while "1"  (timeout="200")
[19:58:15.329]      // while  =>  TIMEOUT
[19:58:15.329]      // end while "1"
[19:58:15.329]    </control>
[19:58:15.329]    <control if="canReadPins" while="" timeout="0" info="">
[19:58:15.329]      // if-block "canReadPins"
[19:58:15.329]        // =>  TRUE
[19:58:15.329]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:58:15.329]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:58:15.332]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:58:15.332]        // while-condition  =>  FALSE
[19:58:15.332]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:58:15.333]      </control>
[19:58:15.333]      // end if-block "canReadPins"
[19:58:15.333]    </control>
[19:58:15.333]    <control if="!canReadPins" while="" timeout="0" info="">
[19:58:15.333]      // if-block "!canReadPins"
[19:58:15.333]        // =>  FALSE
[19:58:15.333]      // skip if-block "!canReadPins"
[19:58:15.333]    </control>
[19:58:15.333]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:58:15.333]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:58:15.333]        // =>  TRUE
[19:58:15.333]      <block atomic="false" info="">
[19:58:15.333]        WriteAP(0x00, 0x190008);
[19:58:15.338]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:58:15.338]        WriteAP(0xF0, 0x01);
[19:58:15.341]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:58:15.341]      </block>
[19:58:15.341]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:58:15.341]    </control>
[19:58:15.342]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:58:15.342]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:58:15.342]        // =>  FALSE
[19:58:15.342]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:58:15.342]    </control>
[19:58:15.342]    <block atomic="false" info="">
[19:58:15.342]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:58:15.346]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:58:15.346]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:58:15.346]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:58:15.348]      __ap = 0; //lets make sure we reset the access point selection
[19:58:15.348]        // -> [__ap <= 0x00000000]
[19:58:15.348]    </block>
[19:58:15.348]  </sequence>
[19:58:15.348]  
[19:58:15.369]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:58:15.369]  
[19:58:15.370]  <debugvars>
[19:58:15.370]    // Pre-defined
[19:58:15.370]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:58:15.370]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:58:15.370]    __dp=0x00000000
[19:58:15.370]    __ap=0x00000000
[19:58:15.370]    __traceout=0x00000000      (Trace Disabled)
[19:58:15.370]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:58:15.370]    __FlashAddr=0x00000000
[19:58:15.370]    __FlashLen=0x00000000
[19:58:15.370]    __FlashArg=0x00000000
[19:58:15.371]    __FlashOp=0x00000000
[19:58:15.371]    __Result=0x00000000
[19:58:15.371]  </debugvars>
[19:58:15.371]  
[19:58:15.371]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:58:15.371]    <block atomic="false" info="">
[19:58:15.371]      __var deviceID = 0;
[19:58:15.371]        // -> [deviceID <= 0x00000000]
[19:58:15.371]      __var version = 0;
[19:58:15.371]        // -> [version <= 0x00000000]
[19:58:15.373]      __var partNum = 0;
[19:58:15.373]        // -> [partNum <= 0x00000000]
[19:58:15.373]      __var manuf = 0;
[19:58:15.373]        // -> [manuf <= 0x00000000]
[19:58:15.373]      __var isMSPM0G1X0X_G3X0X = 0;
[19:58:15.373]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:58:15.373]      __var isProduction = 0;
[19:58:15.373]        // -> [isProduction <= 0x00000000]
[19:58:15.373]      __var continueId = 0;
[19:58:15.374]        // -> [continueId <= 0x00000000]
[19:58:15.374]      deviceID =   Read32(0x41C40004);
[19:58:15.381]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:58:15.381]        // -> [deviceID <= 0x2BB8802F]
[19:58:15.381]      version = deviceID >> 28;
[19:58:15.382]        // -> [version <= 0x00000002]
[19:58:15.382]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:58:15.382]        // -> [partNum <= 0x0000BB88]
[19:58:15.382]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:58:15.382]        // -> [manuf <= 0x00000017]
[19:58:15.382]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:58:15.382]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:58:15.382]      isProduction = (version > 0);
[19:58:15.382]        // -> [isProduction <= 0x00000001]
[19:58:15.383]    </block>
[19:58:15.383]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:58:15.383]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:58:15.383]        // =>  FALSE
[19:58:15.383]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:58:15.383]    </control>
[19:58:15.383]    <control if="continueId == 4" while="" timeout="0" info="">
[19:58:15.383]      // if-block "continueId == 4"
[19:58:15.383]        // =>  FALSE
[19:58:15.384]      // skip if-block "continueId == 4"
[19:58:15.384]    </control>
[19:58:15.384]    <control if="!isProduction" while="" timeout="0" info="">
[19:58:15.384]      // if-block "!isProduction"
[19:58:15.384]        // =>  FALSE
[19:58:15.384]      // skip if-block "!isProduction"
[19:58:15.384]    </control>
[19:58:15.384]  </sequence>
[19:58:15.384]  
[20:03:31.873]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:03:31.873]  
[20:03:31.881]  <debugvars>
[20:03:31.881]    // Pre-defined
[20:03:31.881]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:03:31.881]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:03:31.881]    __dp=0x00000000
[20:03:31.881]    __ap=0x00000000
[20:03:31.881]    __traceout=0x00000000      (Trace Disabled)
[20:03:31.881]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:03:31.881]    __FlashAddr=0x00000000
[20:03:31.882]    __FlashLen=0x00000000
[20:03:31.882]    __FlashArg=0x00000000
[20:03:31.882]    __FlashOp=0x00000000
[20:03:31.882]    __Result=0x00000000
[20:03:31.882]  </debugvars>
[20:03:31.882]  
[20:03:31.882]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:03:31.882]    <block atomic="false" info="">
[20:03:31.882]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:03:31.882]        // -> [isSWJ <= 0x00000001]
[20:03:31.883]      __var hasDormant = __protocol & 0x00020000;
[20:03:31.883]        // -> [hasDormant <= 0x00000000]
[20:03:31.883]      __var protType   = __protocol & 0x0000FFFF;
[20:03:31.883]        // -> [protType <= 0x00000002]
[20:03:31.883]    </block>
[20:03:31.883]    <control if="protType == 1" while="" timeout="0" info="">
[20:03:31.883]      // if-block "protType == 1"
[20:03:31.883]        // =>  FALSE
[20:03:31.883]      // skip if-block "protType == 1"
[20:03:31.884]    </control>
[20:03:31.884]    <control if="protType == 2" while="" timeout="0" info="">
[20:03:31.884]      // if-block "protType == 2"
[20:03:31.884]        // =>  TRUE
[20:03:31.884]      <control if="isSWJ" while="" timeout="0" info="">
[20:03:31.884]        // if-block "isSWJ"
[20:03:31.884]          // =>  TRUE
[20:03:31.884]        <control if="hasDormant" while="" timeout="0" info="">
[20:03:31.885]          // if-block "hasDormant"
[20:03:31.885]            // =>  FALSE
[20:03:31.885]          // skip if-block "hasDormant"
[20:03:31.885]        </control>
[20:03:31.885]        <control if="!hasDormant" while="" timeout="0" info="">
[20:03:31.885]          // if-block "!hasDormant"
[20:03:31.885]            // =>  TRUE
[20:03:31.885]          <block atomic="false" info="">
[20:03:31.885]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:03:31.889]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:03:31.890]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:03:31.893]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:03:31.893]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:03:31.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:03:31.898]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:03:31.899]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:03:31.899]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:03:31.902]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:03:31.902]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:03:31.903]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:03:31.903]          </block>
[20:03:31.903]          // end if-block "!hasDormant"
[20:03:31.904]        </control>
[20:03:31.904]        // end if-block "isSWJ"
[20:03:31.904]      </control>
[20:03:31.904]      <control if="!isSWJ" while="" timeout="0" info="">
[20:03:31.904]        // if-block "!isSWJ"
[20:03:31.904]          // =>  FALSE
[20:03:31.904]        // skip if-block "!isSWJ"
[20:03:31.904]      </control>
[20:03:31.904]      <block atomic="false" info="">
[20:03:31.905]        ReadDP(0x0);
[20:03:31.908]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:03:31.908]      </block>
[20:03:31.908]      // end if-block "protType == 2"
[20:03:31.909]    </control>
[20:03:31.909]  </sequence>
[20:03:31.909]  
[20:03:31.914]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:03:31.914]  
[20:03:31.914]  <debugvars>
[20:03:31.914]    // Pre-defined
[20:03:31.915]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:03:31.915]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:03:31.915]    __dp=0x00000000
[20:03:31.915]    __ap=0x00000000
[20:03:31.915]    __traceout=0x00000000      (Trace Disabled)
[20:03:31.915]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:03:31.915]    __FlashAddr=0x00000000
[20:03:31.915]    __FlashLen=0x00000000
[20:03:31.915]    __FlashArg=0x00000000
[20:03:31.916]    __FlashOp=0x00000000
[20:03:31.916]    __Result=0x00000000
[20:03:31.916]  </debugvars>
[20:03:31.916]  
[20:03:31.916]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:03:31.916]    <block atomic="false" info="">
[20:03:31.917]      __var SW_DP_ABORT       = 0x0;
[20:03:31.917]        // -> [SW_DP_ABORT <= 0x00000000]
[20:03:31.917]      __var DP_CTRL_STAT      = 0x4;
[20:03:31.917]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:03:31.917]      __var DP_SELECT         = 0x8;
[20:03:31.917]        // -> [DP_SELECT <= 0x00000008]
[20:03:31.917]      __var powered_down      = 0;
[20:03:31.917]        // -> [powered_down <= 0x00000000]
[20:03:31.917]      WriteDP(DP_SELECT, 0x00000000);
[20:03:31.921]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:03:31.921]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:03:31.923]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:03:31.923]        // -> [powered_down <= 0x00000001]
[20:03:31.923]    </block>
[20:03:31.923]    <control if="powered_down" while="" timeout="0" info="">
[20:03:31.923]      // if-block "powered_down"
[20:03:31.923]        // =>  TRUE
[20:03:31.924]      <block atomic="false" info="">
[20:03:31.924]        Message(0, "Debug/System power-up request sent");
[20:03:31.926]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:03:31.929]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:03:31.929]      </block>
[20:03:31.930]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:03:31.930]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:03:31.931]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:03:31.932]        // while-condition  =>  FALSE
[20:03:31.932]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:03:31.932]      </control>
[20:03:31.932]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:03:31.932]        // if-block "(__protocol & 0xFFFF) == 1"
[20:03:31.932]          // =>  FALSE
[20:03:31.932]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:03:31.932]      </control>
[20:03:31.933]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:03:31.933]        // if-block "(__protocol & 0xFFFF) == 2"
[20:03:31.933]          // =>  TRUE
[20:03:31.933]        <block atomic="false" info="">
[20:03:31.933]          Message(0, "executing SWD power up");
[20:03:31.936]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:03:31.938]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:03:31.938]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:03:31.939]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:03:31.939]        </block>
[20:03:31.939]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:03:31.939]      </control>
[20:03:31.939]      // end if-block "powered_down"
[20:03:31.940]    </control>
[20:03:31.940]    <block atomic="false" info="">
[20:03:31.940]      __var DEBUG_PORT_VAL    = 0;
[20:03:31.940]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:03:31.940]      __var ACCESS_POINT_VAL  = 0;
[20:03:31.940]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:03:31.940]      __ap = 1; 
[20:03:31.940]        // -> [__ap <= 0x00000001]
[20:03:31.941]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:03:31.951]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:03:31.951]      __ap = 4;
[20:03:31.951]        // -> [__ap <= 0x00000004]
[20:03:31.951]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:03:31.956]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:03:31.956]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:03:31.956]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:03:31.958]    </block>
[20:03:31.958]    <block atomic="false" info="">
[20:03:31.959]      __var nReset = 0x80;
[20:03:31.959]        // -> [nReset <= 0x00000080]
[20:03:31.959]      __var canReadPins = 0;
[20:03:31.959]        // -> [canReadPins <= 0x00000000]
[20:03:31.959]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:03:31.961]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:03:31.961]        // -> [canReadPins <= 0x00000001]
[20:03:31.961]    </block>
[20:03:31.961]    <control if="" while="1" timeout="200" info="">
[20:03:31.961]      // while "1"  (timeout="200")
[20:03:31.962]      // while-condition  =>  TRUE
[20:03:31.962]      // while "1"  (timeout="200")
[20:03:31.962]      // while-condition  =>  TRUE
[20:03:31.962]      // while "1"  (timeout="200")
[20:03:31.963]      // while-condition  =>  TRUE
[20:03:31.963]      // while "1"  (timeout="200")
[20:03:31.963]      // while-condition  =>  TRUE
[20:03:31.963]      // while "1"  (timeout="200")
[20:03:31.963]      // while-condition  =>  TRUE
[20:03:31.963]      // while "1"  (timeout="200")
[20:03:31.963]      // while-condition  =>  TRUE
[20:03:31.964]      // while "1"  (timeout="200")
[20:03:31.964]      // while-condition  =>  TRUE
[20:03:31.964]      // while "1"  (timeout="200")
[20:03:31.964]      // while-condition  =>  TRUE
[20:03:31.964]      // while "1"  (timeout="200")
[20:03:31.964]      // while-condition  =>  TRUE
[20:03:31.965]      // while "1"  (timeout="200")
[20:03:31.965]      // while-condition  =>  TRUE
[20:03:31.965]      // while "1"  (timeout="200")
[20:03:31.965]      // while-condition  =>  TRUE
[20:03:31.965]      // while "1"  (timeout="200")
[20:03:31.965]      // while-condition  =>  TRUE
[20:03:31.965]      // while "1"  (timeout="200")
[20:03:31.965]      // while-condition  =>  TRUE
[20:03:31.965]      // while "1"  (timeout="200")
[20:03:31.966]      // while-condition  =>  TRUE
[20:03:31.966]      // while "1"  (timeout="200")
[20:03:31.966]      // while-condition  =>  TRUE
[20:03:31.966]      // while "1"  (timeout="200")
[20:03:31.966]      // while-condition  =>  TRUE
[20:03:31.966]      // while "1"  (timeout="200")
[20:03:31.966]      // while-condition  =>  TRUE
[20:03:31.966]      // while "1"  (timeout="200")
[20:03:31.966]      // while-condition  =>  TRUE
[20:03:31.967]      // while "1"  (timeout="200")
[20:03:31.967]      // while-condition  =>  TRUE
[20:03:31.967]      // while "1"  (timeout="200")
[20:03:31.967]      // while-condition  =>  TRUE
[20:03:31.967]      // while "1"  (timeout="200")
[20:03:31.967]      // while-condition  =>  TRUE
[20:03:31.967]      // while "1"  (timeout="200")
[20:03:31.967]      // while-condition  =>  TRUE
[20:03:31.967]      // while "1"  (timeout="200")
[20:03:31.968]      // while-condition  =>  TRUE
[20:03:31.968]      // while "1"  (timeout="200")
[20:03:31.968]      // while-condition  =>  TRUE
[20:03:31.968]      // while "1"  (timeout="200")
[20:03:31.968]      // while-condition  =>  TRUE
[20:03:31.968]      // while "1"  (timeout="200")
[20:03:31.968]      // while-condition  =>  TRUE
[20:03:31.968]      // while "1"  (timeout="200")
[20:03:31.968]      // while-condition  =>  TRUE
[20:03:31.968]      // while "1"  (timeout="200")
[20:03:31.969]      // while-condition  =>  TRUE
[20:03:31.969]      // while "1"  (timeout="200")
[20:03:31.969]      // while-condition  =>  TRUE
[20:03:31.969]      // while "1"  (timeout="200")
[20:03:31.969]      // while-condition  =>  TRUE
[20:03:31.969]      // while "1"  (timeout="200")
[20:03:31.969]      // while-condition  =>  TRUE
[20:03:31.969]      // while "1"  (timeout="200")
[20:03:31.970]      // while-condition  =>  TRUE
[20:03:31.970]      // while "1"  (timeout="200")
[20:03:31.970]      // while  =>  TIMEOUT
[20:03:31.970]      // end while "1"
[20:03:31.970]    </control>
[20:03:31.970]    <control if="canReadPins" while="" timeout="0" info="">
[20:03:31.970]      // if-block "canReadPins"
[20:03:31.970]        // =>  TRUE
[20:03:31.971]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:03:31.971]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:03:31.976]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:03:31.976]        // while-condition  =>  FALSE
[20:03:31.976]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:03:31.976]      </control>
[20:03:31.976]      // end if-block "canReadPins"
[20:03:31.976]    </control>
[20:03:31.976]    <control if="!canReadPins" while="" timeout="0" info="">
[20:03:31.976]      // if-block "!canReadPins"
[20:03:31.976]        // =>  FALSE
[20:03:31.976]      // skip if-block "!canReadPins"
[20:03:31.976]    </control>
[20:03:31.978]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:03:31.978]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:03:31.978]        // =>  TRUE
[20:03:31.978]      <block atomic="false" info="">
[20:03:31.978]        WriteAP(0x00, 0x190008);
[20:03:31.980]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:03:31.980]        WriteAP(0xF0, 0x01);
[20:03:31.984]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:03:31.984]      </block>
[20:03:31.984]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:03:31.984]    </control>
[20:03:31.984]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:03:31.984]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:03:31.984]        // =>  FALSE
[20:03:31.984]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:03:31.985]    </control>
[20:03:31.985]    <block atomic="false" info="">
[20:03:31.985]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:03:31.998]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:03:31.998]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:03:31.998]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:03:32.000]      __ap = 0; //lets make sure we reset the access point selection
[20:03:32.000]        // -> [__ap <= 0x00000000]
[20:03:32.000]    </block>
[20:03:32.000]  </sequence>
[20:03:32.000]  
[20:03:32.025]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:03:32.025]  
[20:03:32.026]  <debugvars>
[20:03:32.026]    // Pre-defined
[20:03:32.026]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:03:32.026]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:03:32.026]    __dp=0x00000000
[20:03:32.026]    __ap=0x00000000
[20:03:32.027]    __traceout=0x00000000      (Trace Disabled)
[20:03:32.027]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:03:32.027]    __FlashAddr=0x00000000
[20:03:32.027]    __FlashLen=0x00000000
[20:03:32.027]    __FlashArg=0x00000000
[20:03:32.027]    __FlashOp=0x00000000
[20:03:32.027]    __Result=0x00000000
[20:03:32.027]  </debugvars>
[20:03:32.027]  
[20:03:32.027]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:03:32.028]    <block atomic="false" info="">
[20:03:32.028]      __var deviceID = 0;
[20:03:32.028]        // -> [deviceID <= 0x00000000]
[20:03:32.028]      __var version = 0;
[20:03:32.028]        // -> [version <= 0x00000000]
[20:03:32.028]      __var partNum = 0;
[20:03:32.028]        // -> [partNum <= 0x00000000]
[20:03:32.028]      __var manuf = 0;
[20:03:32.029]        // -> [manuf <= 0x00000000]
[20:03:32.029]      __var isMSPM0G1X0X_G3X0X = 0;
[20:03:32.029]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:03:32.029]      __var isProduction = 0;
[20:03:32.029]        // -> [isProduction <= 0x00000000]
[20:03:32.030]      __var continueId = 0;
[20:03:32.030]        // -> [continueId <= 0x00000000]
[20:03:32.030]      deviceID =   Read32(0x41C40004);
[20:03:32.036]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:03:32.036]        // -> [deviceID <= 0x2BB8802F]
[20:03:32.037]      version = deviceID >> 28;
[20:03:32.037]        // -> [version <= 0x00000002]
[20:03:32.037]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:03:32.037]        // -> [partNum <= 0x0000BB88]
[20:03:32.038]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:03:32.038]        // -> [manuf <= 0x00000017]
[20:03:32.038]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:03:32.038]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:03:32.038]      isProduction = (version > 0);
[20:03:32.038]        // -> [isProduction <= 0x00000001]
[20:03:32.039]    </block>
[20:03:32.039]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:03:32.039]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:03:32.039]        // =>  FALSE
[20:03:32.039]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:03:32.039]    </control>
[20:03:32.040]    <control if="continueId == 4" while="" timeout="0" info="">
[20:03:32.040]      // if-block "continueId == 4"
[20:03:32.040]        // =>  FALSE
[20:03:32.040]      // skip if-block "continueId == 4"
[20:03:32.040]    </control>
[20:03:32.041]    <control if="!isProduction" while="" timeout="0" info="">
[20:03:32.041]      // if-block "!isProduction"
[20:03:32.041]        // =>  FALSE
[20:03:32.041]      // skip if-block "!isProduction"
[20:03:32.041]    </control>
[20:03:32.041]  </sequence>
[20:03:32.041]  
[20:05:52.770]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:05:52.770]  
[20:05:52.779]  <debugvars>
[20:05:52.779]    // Pre-defined
[20:05:52.779]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:05:52.779]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:05:52.779]    __dp=0x00000000
[20:05:52.779]    __ap=0x00000000
[20:05:52.779]    __traceout=0x00000000      (Trace Disabled)
[20:05:52.779]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:05:52.779]    __FlashAddr=0x00000000
[20:05:52.779]    __FlashLen=0x00000000
[20:05:52.779]    __FlashArg=0x00000000
[20:05:52.779]    __FlashOp=0x00000000
[20:05:52.779]    __Result=0x00000000
[20:05:52.780]  </debugvars>
[20:05:52.780]  
[20:05:52.780]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:05:52.780]    <block atomic="false" info="">
[20:05:52.780]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:05:52.780]        // -> [isSWJ <= 0x00000001]
[20:05:52.780]      __var hasDormant = __protocol & 0x00020000;
[20:05:52.780]        // -> [hasDormant <= 0x00000000]
[20:05:52.780]      __var protType   = __protocol & 0x0000FFFF;
[20:05:52.780]        // -> [protType <= 0x00000002]
[20:05:52.780]    </block>
[20:05:52.780]    <control if="protType == 1" while="" timeout="0" info="">
[20:05:52.781]      // if-block "protType == 1"
[20:05:52.781]        // =>  FALSE
[20:05:52.781]      // skip if-block "protType == 1"
[20:05:52.781]    </control>
[20:05:52.781]    <control if="protType == 2" while="" timeout="0" info="">
[20:05:52.781]      // if-block "protType == 2"
[20:05:52.781]        // =>  TRUE
[20:05:52.781]      <control if="isSWJ" while="" timeout="0" info="">
[20:05:52.781]        // if-block "isSWJ"
[20:05:52.781]          // =>  TRUE
[20:05:52.781]        <control if="hasDormant" while="" timeout="0" info="">
[20:05:52.782]          // if-block "hasDormant"
[20:05:52.782]            // =>  FALSE
[20:05:52.782]          // skip if-block "hasDormant"
[20:05:52.782]        </control>
[20:05:52.782]        <control if="!hasDormant" while="" timeout="0" info="">
[20:05:52.783]          // if-block "!hasDormant"
[20:05:52.783]            // =>  TRUE
[20:05:52.783]          <block atomic="false" info="">
[20:05:52.783]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:05:52.785]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:05:52.785]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:05:52.786]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:05:52.786]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:05:52.788]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:05:52.788]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:05:52.789]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:05:52.789]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:05:52.790]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:05:52.790]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:05:52.793]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:05:52.793]          </block>
[20:05:52.793]          // end if-block "!hasDormant"
[20:05:52.793]        </control>
[20:05:52.793]        // end if-block "isSWJ"
[20:05:52.793]      </control>
[20:05:52.794]      <control if="!isSWJ" while="" timeout="0" info="">
[20:05:52.794]        // if-block "!isSWJ"
[20:05:52.794]          // =>  FALSE
[20:05:52.794]        // skip if-block "!isSWJ"
[20:05:52.794]      </control>
[20:05:52.795]      <block atomic="false" info="">
[20:05:52.795]        ReadDP(0x0);
[20:05:52.798]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:05:52.798]      </block>
[20:05:52.798]      // end if-block "protType == 2"
[20:05:52.798]    </control>
[20:05:52.798]  </sequence>
[20:05:52.799]  
[20:05:52.801]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:05:52.801]  
[20:05:52.801]  <debugvars>
[20:05:52.801]    // Pre-defined
[20:05:52.801]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:05:52.801]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:05:52.801]    __dp=0x00000000
[20:05:52.802]    __ap=0x00000000
[20:05:52.802]    __traceout=0x00000000      (Trace Disabled)
[20:05:52.802]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:05:52.802]    __FlashAddr=0x00000000
[20:05:52.802]    __FlashLen=0x00000000
[20:05:52.802]    __FlashArg=0x00000000
[20:05:52.802]    __FlashOp=0x00000000
[20:05:52.802]    __Result=0x00000000
[20:05:52.803]  </debugvars>
[20:05:52.803]  
[20:05:52.803]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:05:52.803]    <block atomic="false" info="">
[20:05:52.803]      __var SW_DP_ABORT       = 0x0;
[20:05:52.803]        // -> [SW_DP_ABORT <= 0x00000000]
[20:05:52.803]      __var DP_CTRL_STAT      = 0x4;
[20:05:52.803]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:05:52.803]      __var DP_SELECT         = 0x8;
[20:05:52.803]        // -> [DP_SELECT <= 0x00000008]
[20:05:52.803]      __var powered_down      = 0;
[20:05:52.803]        // -> [powered_down <= 0x00000000]
[20:05:52.804]      WriteDP(DP_SELECT, 0x00000000);
[20:05:52.806]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:05:52.806]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:05:52.807]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:05:52.807]        // -> [powered_down <= 0x00000001]
[20:05:52.808]    </block>
[20:05:52.808]    <control if="powered_down" while="" timeout="0" info="">
[20:05:52.808]      // if-block "powered_down"
[20:05:52.808]        // =>  TRUE
[20:05:52.808]      <block atomic="false" info="">
[20:05:52.808]        Message(0, "Debug/System power-up request sent");
[20:05:52.810]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:05:52.812]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:05:52.812]      </block>
[20:05:52.812]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:05:52.812]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:05:52.815]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:05:52.815]        // while-condition  =>  FALSE
[20:05:52.817]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:05:52.817]      </control>
[20:05:52.817]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:05:52.817]        // if-block "(__protocol & 0xFFFF) == 1"
[20:05:52.817]          // =>  FALSE
[20:05:52.818]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:05:52.818]      </control>
[20:05:52.818]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:05:52.818]        // if-block "(__protocol & 0xFFFF) == 2"
[20:05:52.818]          // =>  TRUE
[20:05:52.818]        <block atomic="false" info="">
[20:05:52.818]          Message(0, "executing SWD power up");
[20:05:52.820]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:05:52.822]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:05:52.822]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:05:52.829]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:05:52.829]        </block>
[20:05:52.830]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:05:52.830]      </control>
[20:05:52.830]      // end if-block "powered_down"
[20:05:52.830]    </control>
[20:05:52.830]    <block atomic="false" info="">
[20:05:52.830]      __var DEBUG_PORT_VAL    = 0;
[20:05:52.830]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:05:52.830]      __var ACCESS_POINT_VAL  = 0;
[20:05:52.830]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:05:52.830]      __ap = 1; 
[20:05:52.830]        // -> [__ap <= 0x00000001]
[20:05:52.830]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:05:52.836]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:05:52.836]      __ap = 4;
[20:05:52.837]        // -> [__ap <= 0x00000004]
[20:05:52.837]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:05:52.843]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:05:52.843]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:05:52.843]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:05:52.845]    </block>
[20:05:52.845]    <block atomic="false" info="">
[20:05:52.845]      __var nReset = 0x80;
[20:05:52.845]        // -> [nReset <= 0x00000080]
[20:05:52.846]      __var canReadPins = 0;
[20:05:52.846]        // -> [canReadPins <= 0x00000000]
[20:05:52.846]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:05:52.850]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:05:52.850]        // -> [canReadPins <= 0x00000001]
[20:05:52.851]    </block>
[20:05:52.851]    <control if="" while="1" timeout="200" info="">
[20:05:52.851]      // while "1"  (timeout="200")
[20:05:52.851]      // while-condition  =>  TRUE
[20:05:52.851]      // while "1"  (timeout="200")
[20:05:52.851]      // while-condition  =>  TRUE
[20:05:52.851]      // while "1"  (timeout="200")
[20:05:52.851]      // while-condition  =>  TRUE
[20:05:52.851]      // while "1"  (timeout="200")
[20:05:52.851]      // while-condition  =>  TRUE
[20:05:52.851]      // while "1"  (timeout="200")
[20:05:52.851]      // while-condition  =>  TRUE
[20:05:52.851]      // while "1"  (timeout="200")
[20:05:52.852]      // while-condition  =>  TRUE
[20:05:52.852]      // while "1"  (timeout="200")
[20:05:52.852]      // while-condition  =>  TRUE
[20:05:52.852]      // while "1"  (timeout="200")
[20:05:52.852]      // while-condition  =>  TRUE
[20:05:52.852]      // while "1"  (timeout="200")
[20:05:52.852]      // while-condition  =>  TRUE
[20:05:52.852]      // while "1"  (timeout="200")
[20:05:52.853]      // while-condition  =>  TRUE
[20:05:52.853]      // while "1"  (timeout="200")
[20:05:52.853]      // while-condition  =>  TRUE
[20:05:52.853]      // while "1"  (timeout="200")
[20:05:52.853]      // while-condition  =>  TRUE
[20:05:52.853]      // while "1"  (timeout="200")
[20:05:52.853]      // while-condition  =>  TRUE
[20:05:52.853]      // while "1"  (timeout="200")
[20:05:52.854]      // while-condition  =>  TRUE
[20:05:52.854]      // while "1"  (timeout="200")
[20:05:52.854]      // while-condition  =>  TRUE
[20:05:52.854]      // while "1"  (timeout="200")
[20:05:52.854]      // while-condition  =>  TRUE
[20:05:52.854]      // while "1"  (timeout="200")
[20:05:52.854]      // while-condition  =>  TRUE
[20:05:52.854]      // while "1"  (timeout="200")
[20:05:52.854]      // while-condition  =>  TRUE
[20:05:52.854]      // while "1"  (timeout="200")
[20:05:52.855]      // while-condition  =>  TRUE
[20:05:52.855]      // while "1"  (timeout="200")
[20:05:52.855]      // while-condition  =>  TRUE
[20:05:52.855]      // while "1"  (timeout="200")
[20:05:52.855]      // while-condition  =>  TRUE
[20:05:52.855]      // while "1"  (timeout="200")
[20:05:52.855]      // while-condition  =>  TRUE
[20:05:52.855]      // while "1"  (timeout="200")
[20:05:52.855]      // while-condition  =>  TRUE
[20:05:52.855]      // while "1"  (timeout="200")
[20:05:52.855]      // while-condition  =>  TRUE
[20:05:52.855]      // while "1"  (timeout="200")
[20:05:52.855]      // while-condition  =>  TRUE
[20:05:52.855]      // while "1"  (timeout="200")
[20:05:52.855]      // while-condition  =>  TRUE
[20:05:52.855]      // while "1"  (timeout="200")
[20:05:52.857]      // while-condition  =>  TRUE
[20:05:52.857]      // while "1"  (timeout="200")
[20:05:52.857]      // while-condition  =>  TRUE
[20:05:52.857]      // while "1"  (timeout="200")
[20:05:52.857]      // while-condition  =>  TRUE
[20:05:52.857]      // while "1"  (timeout="200")
[20:05:52.857]      // while-condition  =>  TRUE
[20:05:52.858]      // while "1"  (timeout="200")
[20:05:52.858]      // while-condition  =>  TRUE
[20:05:52.858]      // while "1"  (timeout="200")
[20:05:52.858]      // while-condition  =>  TRUE
[20:05:52.858]      // while "1"  (timeout="200")
[20:05:52.858]      // while-condition  =>  TRUE
[20:05:52.858]      // while "1"  (timeout="200")
[20:05:52.858]      // while-condition  =>  TRUE
[20:05:52.858]      // while "1"  (timeout="200")
[20:05:52.858]      // while-condition  =>  TRUE
[20:05:52.858]      // while "1"  (timeout="200")
[20:05:52.858]      // while-condition  =>  TRUE
[20:05:52.858]      // while "1"  (timeout="200")
[20:05:52.858]      // while-condition  =>  TRUE
[20:05:52.858]      // while "1"  (timeout="200")
[20:05:52.858]      // while-condition  =>  TRUE
[20:05:52.858]      // while "1"  (timeout="200")
[20:05:52.859]      // while-condition  =>  TRUE
[20:05:52.859]      // while "1"  (timeout="200")
[20:05:52.859]      // while-condition  =>  TRUE
[20:05:52.859]      // while "1"  (timeout="200")
[20:05:52.859]      // while-condition  =>  TRUE
[20:05:52.859]      // while "1"  (timeout="200")
[20:05:52.859]      // while-condition  =>  TRUE
[20:05:52.859]      // while "1"  (timeout="200")
[20:05:52.859]      // while-condition  =>  TRUE
[20:05:52.859]      // while "1"  (timeout="200")
[20:05:52.859]      // while-condition  =>  TRUE
[20:05:52.860]      // while "1"  (timeout="200")
[20:05:52.860]      // while  =>  TIMEOUT
[20:05:52.860]      // end while "1"
[20:05:52.860]    </control>
[20:05:52.860]    <control if="canReadPins" while="" timeout="0" info="">
[20:05:52.860]      // if-block "canReadPins"
[20:05:52.860]        // =>  TRUE
[20:05:52.860]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:05:52.860]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:05:52.863]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:05:52.863]        // while-condition  =>  FALSE
[20:05:52.863]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:05:52.863]      </control>
[20:05:52.863]      // end if-block "canReadPins"
[20:05:52.863]    </control>
[20:05:52.864]    <control if="!canReadPins" while="" timeout="0" info="">
[20:05:52.864]      // if-block "!canReadPins"
[20:05:52.864]        // =>  FALSE
[20:05:52.864]      // skip if-block "!canReadPins"
[20:05:52.864]    </control>
[20:05:52.864]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:05:52.864]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:05:52.864]        // =>  TRUE
[20:05:52.864]      <block atomic="false" info="">
[20:05:52.865]        WriteAP(0x00, 0x190008);
[20:05:52.869]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:05:52.869]        WriteAP(0xF0, 0x01);
[20:05:52.873]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:05:52.873]      </block>
[20:05:52.873]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:05:52.873]    </control>
[20:05:52.873]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:05:52.873]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:05:52.873]        // =>  FALSE
[20:05:52.873]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:05:52.873]    </control>
[20:05:52.873]    <block atomic="false" info="">
[20:05:52.873]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:05:52.877]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:05:52.878]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:05:52.878]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:05:52.879]      __ap = 0; //lets make sure we reset the access point selection
[20:05:52.880]        // -> [__ap <= 0x00000000]
[20:05:52.880]    </block>
[20:05:52.880]  </sequence>
[20:05:52.880]  
[20:05:52.903]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:05:52.903]  
[20:05:52.903]  <debugvars>
[20:05:52.903]    // Pre-defined
[20:05:52.903]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:05:52.903]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:05:52.903]    __dp=0x00000000
[20:05:52.903]    __ap=0x00000000
[20:05:52.903]    __traceout=0x00000000      (Trace Disabled)
[20:05:52.903]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:05:52.903]    __FlashAddr=0x00000000
[20:05:52.903]    __FlashLen=0x00000000
[20:05:52.904]    __FlashArg=0x00000000
[20:05:52.904]    __FlashOp=0x00000000
[20:05:52.904]    __Result=0x00000000
[20:05:52.904]  </debugvars>
[20:05:52.904]  
[20:05:52.904]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:05:52.904]    <block atomic="false" info="">
[20:05:52.904]      __var deviceID = 0;
[20:05:52.904]        // -> [deviceID <= 0x00000000]
[20:05:52.904]      __var version = 0;
[20:05:52.904]        // -> [version <= 0x00000000]
[20:05:52.904]      __var partNum = 0;
[20:05:52.905]        // -> [partNum <= 0x00000000]
[20:05:52.905]      __var manuf = 0;
[20:05:52.905]        // -> [manuf <= 0x00000000]
[20:05:52.905]      __var isMSPM0G1X0X_G3X0X = 0;
[20:05:52.905]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:05:52.905]      __var isProduction = 0;
[20:05:52.905]        // -> [isProduction <= 0x00000000]
[20:05:52.905]      __var continueId = 0;
[20:05:52.905]        // -> [continueId <= 0x00000000]
[20:05:52.905]      deviceID =   Read32(0x41C40004);
[20:05:52.911]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:05:52.912]        // -> [deviceID <= 0x2BB8802F]
[20:05:52.912]      version = deviceID >> 28;
[20:05:52.912]        // -> [version <= 0x00000002]
[20:05:52.912]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:05:52.912]        // -> [partNum <= 0x0000BB88]
[20:05:52.912]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:05:52.912]        // -> [manuf <= 0x00000017]
[20:05:52.912]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:05:52.912]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:05:52.912]      isProduction = (version > 0);
[20:05:52.913]        // -> [isProduction <= 0x00000001]
[20:05:52.913]    </block>
[20:05:52.913]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:05:52.913]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:05:52.913]        // =>  FALSE
[20:05:52.913]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:05:52.913]    </control>
[20:05:52.913]    <control if="continueId == 4" while="" timeout="0" info="">
[20:05:52.913]      // if-block "continueId == 4"
[20:05:52.913]        // =>  FALSE
[20:05:52.913]      // skip if-block "continueId == 4"
[20:05:52.914]    </control>
[20:05:52.914]    <control if="!isProduction" while="" timeout="0" info="">
[20:05:52.914]      // if-block "!isProduction"
[20:05:52.914]        // =>  FALSE
[20:05:52.914]      // skip if-block "!isProduction"
[20:05:52.914]    </control>
[20:05:52.914]  </sequence>
[20:05:52.914]  
[20:07:01.467]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:07:01.467]  
[20:07:01.475]  <debugvars>
[20:07:01.475]    // Pre-defined
[20:07:01.475]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:07:01.475]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:07:01.476]    __dp=0x00000000
[20:07:01.476]    __ap=0x00000000
[20:07:01.476]    __traceout=0x00000000      (Trace Disabled)
[20:07:01.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:07:01.476]    __FlashAddr=0x00000000
[20:07:01.476]    __FlashLen=0x00000000
[20:07:01.476]    __FlashArg=0x00000000
[20:07:01.476]    __FlashOp=0x00000000
[20:07:01.476]    __Result=0x00000000
[20:07:01.476]  </debugvars>
[20:07:01.477]  
[20:07:01.477]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:07:01.477]    <block atomic="false" info="">
[20:07:01.477]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:07:01.478]        // -> [isSWJ <= 0x00000001]
[20:07:01.478]      __var hasDormant = __protocol & 0x00020000;
[20:07:01.478]        // -> [hasDormant <= 0x00000000]
[20:07:01.478]      __var protType   = __protocol & 0x0000FFFF;
[20:07:01.478]        // -> [protType <= 0x00000002]
[20:07:01.478]    </block>
[20:07:01.478]    <control if="protType == 1" while="" timeout="0" info="">
[20:07:01.479]      // if-block "protType == 1"
[20:07:01.479]        // =>  FALSE
[20:07:01.479]      // skip if-block "protType == 1"
[20:07:01.480]    </control>
[20:07:01.480]    <control if="protType == 2" while="" timeout="0" info="">
[20:07:01.480]      // if-block "protType == 2"
[20:07:01.480]        // =>  TRUE
[20:07:01.480]      <control if="isSWJ" while="" timeout="0" info="">
[20:07:01.480]        // if-block "isSWJ"
[20:07:01.480]          // =>  TRUE
[20:07:01.481]        <control if="hasDormant" while="" timeout="0" info="">
[20:07:01.481]          // if-block "hasDormant"
[20:07:01.481]            // =>  FALSE
[20:07:01.481]          // skip if-block "hasDormant"
[20:07:01.481]        </control>
[20:07:01.481]        <control if="!hasDormant" while="" timeout="0" info="">
[20:07:01.482]          // if-block "!hasDormant"
[20:07:01.482]            // =>  TRUE
[20:07:01.482]          <block atomic="false" info="">
[20:07:01.482]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:07:01.483]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:07:01.483]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:07:01.486]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:07:01.486]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:07:01.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:07:01.489]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:07:01.490]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:07:01.490]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:07:01.493]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:07:01.493]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:07:01.497]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:07:01.497]          </block>
[20:07:01.498]          // end if-block "!hasDormant"
[20:07:01.498]        </control>
[20:07:01.498]        // end if-block "isSWJ"
[20:07:01.498]      </control>
[20:07:01.498]      <control if="!isSWJ" while="" timeout="0" info="">
[20:07:01.498]        // if-block "!isSWJ"
[20:07:01.498]          // =>  FALSE
[20:07:01.498]        // skip if-block "!isSWJ"
[20:07:01.498]      </control>
[20:07:01.498]      <block atomic="false" info="">
[20:07:01.498]        ReadDP(0x0);
[20:07:01.503]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:07:01.503]      </block>
[20:07:01.503]      // end if-block "protType == 2"
[20:07:01.505]    </control>
[20:07:01.505]  </sequence>
[20:07:01.505]  
[20:07:01.511]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:07:01.511]  
[20:07:01.511]  <debugvars>
[20:07:01.511]    // Pre-defined
[20:07:01.511]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:07:01.512]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:07:01.512]    __dp=0x00000000
[20:07:01.512]    __ap=0x00000000
[20:07:01.512]    __traceout=0x00000000      (Trace Disabled)
[20:07:01.512]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:07:01.512]    __FlashAddr=0x00000000
[20:07:01.512]    __FlashLen=0x00000000
[20:07:01.512]    __FlashArg=0x00000000
[20:07:01.512]    __FlashOp=0x00000000
[20:07:01.513]    __Result=0x00000000
[20:07:01.513]  </debugvars>
[20:07:01.513]  
[20:07:01.513]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:07:01.513]    <block atomic="false" info="">
[20:07:01.513]      __var SW_DP_ABORT       = 0x0;
[20:07:01.513]        // -> [SW_DP_ABORT <= 0x00000000]
[20:07:01.513]      __var DP_CTRL_STAT      = 0x4;
[20:07:01.513]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:07:01.513]      __var DP_SELECT         = 0x8;
[20:07:01.513]        // -> [DP_SELECT <= 0x00000008]
[20:07:01.513]      __var powered_down      = 0;
[20:07:01.513]        // -> [powered_down <= 0x00000000]
[20:07:01.513]      WriteDP(DP_SELECT, 0x00000000);
[20:07:01.519]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:07:01.519]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:07:01.520]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:07:01.521]        // -> [powered_down <= 0x00000001]
[20:07:01.521]    </block>
[20:07:01.521]    <control if="powered_down" while="" timeout="0" info="">
[20:07:01.521]      // if-block "powered_down"
[20:07:01.521]        // =>  TRUE
[20:07:01.521]      <block atomic="false" info="">
[20:07:01.521]        Message(0, "Debug/System power-up request sent");
[20:07:01.523]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:07:01.528]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:07:01.528]      </block>
[20:07:01.528]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:07:01.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:07:01.530]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:07:01.530]        // while-condition  =>  FALSE
[20:07:01.530]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:07:01.530]      </control>
[20:07:01.530]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:07:01.530]        // if-block "(__protocol & 0xFFFF) == 1"
[20:07:01.531]          // =>  FALSE
[20:07:01.531]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:07:01.531]      </control>
[20:07:01.531]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:07:01.531]        // if-block "(__protocol & 0xFFFF) == 2"
[20:07:01.531]          // =>  TRUE
[20:07:01.532]        <block atomic="false" info="">
[20:07:01.532]          Message(0, "executing SWD power up");
[20:07:01.533]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:07:01.535]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:07:01.535]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:07:01.537]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:07:01.538]        </block>
[20:07:01.538]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:07:01.538]      </control>
[20:07:01.538]      // end if-block "powered_down"
[20:07:01.538]    </control>
[20:07:01.538]    <block atomic="false" info="">
[20:07:01.538]      __var DEBUG_PORT_VAL    = 0;
[20:07:01.538]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:07:01.538]      __var ACCESS_POINT_VAL  = 0;
[20:07:01.538]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:07:01.538]      __ap = 1; 
[20:07:01.539]        // -> [__ap <= 0x00000001]
[20:07:01.539]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:07:01.543]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:07:01.544]      __ap = 4;
[20:07:01.544]        // -> [__ap <= 0x00000004]
[20:07:01.544]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:07:01.548]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:07:01.549]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:07:01.549]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:07:01.550]    </block>
[20:07:01.550]    <block atomic="false" info="">
[20:07:01.550]      __var nReset = 0x80;
[20:07:01.550]        // -> [nReset <= 0x00000080]
[20:07:01.550]      __var canReadPins = 0;
[20:07:01.550]        // -> [canReadPins <= 0x00000000]
[20:07:01.550]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:07:01.551]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:07:01.553]        // -> [canReadPins <= 0x00000001]
[20:07:01.553]    </block>
[20:07:01.553]    <control if="" while="1" timeout="200" info="">
[20:07:01.553]      // while "1"  (timeout="200")
[20:07:01.553]      // while-condition  =>  TRUE
[20:07:01.553]      // while "1"  (timeout="200")
[20:07:01.553]      // while-condition  =>  TRUE
[20:07:01.553]      // while "1"  (timeout="200")
[20:07:01.554]      // while-condition  =>  TRUE
[20:07:01.554]      // while "1"  (timeout="200")
[20:07:01.554]      // while-condition  =>  TRUE
[20:07:01.554]      // while "1"  (timeout="200")
[20:07:01.554]      // while-condition  =>  TRUE
[20:07:01.554]      // while "1"  (timeout="200")
[20:07:01.554]      // while-condition  =>  TRUE
[20:07:01.554]      // while "1"  (timeout="200")
[20:07:01.554]      // while-condition  =>  TRUE
[20:07:01.554]      // while "1"  (timeout="200")
[20:07:01.554]      // while-condition  =>  TRUE
[20:07:01.554]      // while "1"  (timeout="200")
[20:07:01.555]      // while-condition  =>  TRUE
[20:07:01.555]      // while "1"  (timeout="200")
[20:07:01.555]      // while-condition  =>  TRUE
[20:07:01.556]      // while "1"  (timeout="200")
[20:07:01.556]      // while-condition  =>  TRUE
[20:07:01.556]      // while "1"  (timeout="200")
[20:07:01.556]      // while-condition  =>  TRUE
[20:07:01.556]      // while "1"  (timeout="200")
[20:07:01.556]      // while-condition  =>  TRUE
[20:07:01.557]      // while "1"  (timeout="200")
[20:07:01.557]      // while-condition  =>  TRUE
[20:07:01.557]      // while "1"  (timeout="200")
[20:07:01.557]      // while-condition  =>  TRUE
[20:07:01.557]      // while "1"  (timeout="200")
[20:07:01.557]      // while-condition  =>  TRUE
[20:07:01.557]      // while "1"  (timeout="200")
[20:07:01.557]      // while-condition  =>  TRUE
[20:07:01.557]      // while "1"  (timeout="200")
[20:07:01.557]      // while-condition  =>  TRUE
[20:07:01.558]      // while "1"  (timeout="200")
[20:07:01.558]      // while-condition  =>  TRUE
[20:07:01.558]      // while "1"  (timeout="200")
[20:07:01.559]      // while-condition  =>  TRUE
[20:07:01.559]      // while "1"  (timeout="200")
[20:07:01.559]      // while-condition  =>  TRUE
[20:07:01.559]      // while "1"  (timeout="200")
[20:07:01.559]      // while-condition  =>  TRUE
[20:07:01.559]      // while "1"  (timeout="200")
[20:07:01.559]      // while-condition  =>  TRUE
[20:07:01.559]      // while "1"  (timeout="200")
[20:07:01.559]      // while-condition  =>  TRUE
[20:07:01.560]      // while "1"  (timeout="200")
[20:07:01.560]      // while-condition  =>  TRUE
[20:07:01.560]      // while "1"  (timeout="200")
[20:07:01.560]      // while-condition  =>  TRUE
[20:07:01.560]      // while "1"  (timeout="200")
[20:07:01.560]      // while-condition  =>  TRUE
[20:07:01.560]      // while "1"  (timeout="200")
[20:07:01.560]      // while-condition  =>  TRUE
[20:07:01.560]      // while "1"  (timeout="200")
[20:07:01.560]      // while-condition  =>  TRUE
[20:07:01.561]      // while "1"  (timeout="200")
[20:07:01.561]      // while-condition  =>  TRUE
[20:07:01.561]      // while "1"  (timeout="200")
[20:07:01.561]      // while-condition  =>  TRUE
[20:07:01.561]      // while "1"  (timeout="200")
[20:07:01.561]      // while-condition  =>  TRUE
[20:07:01.561]      // while "1"  (timeout="200")
[20:07:01.561]      // while-condition  =>  TRUE
[20:07:01.561]      // while "1"  (timeout="200")
[20:07:01.562]      // while-condition  =>  TRUE
[20:07:01.562]      // while "1"  (timeout="200")
[20:07:01.562]      // while-condition  =>  TRUE
[20:07:01.562]      // while "1"  (timeout="200")
[20:07:01.562]      // while-condition  =>  TRUE
[20:07:01.562]      // while "1"  (timeout="200")
[20:07:01.562]      // while-condition  =>  TRUE
[20:07:01.563]      // while "1"  (timeout="200")
[20:07:01.563]      // while-condition  =>  TRUE
[20:07:01.563]      // while "1"  (timeout="200")
[20:07:01.563]      // while-condition  =>  TRUE
[20:07:01.563]      // while "1"  (timeout="200")
[20:07:01.563]      // while-condition  =>  TRUE
[20:07:01.563]      // while "1"  (timeout="200")
[20:07:01.563]      // while-condition  =>  TRUE
[20:07:01.563]      // while "1"  (timeout="200")
[20:07:01.563]      // while-condition  =>  TRUE
[20:07:01.563]      // while "1"  (timeout="200")
[20:07:01.563]      // while-condition  =>  TRUE
[20:07:01.563]      // while "1"  (timeout="200")
[20:07:01.563]      // while-condition  =>  TRUE
[20:07:01.563]      // while "1"  (timeout="200")
[20:07:01.563]      // while-condition  =>  TRUE
[20:07:01.563]      // while "1"  (timeout="200")
[20:07:01.565]      // while-condition  =>  TRUE
[20:07:01.565]      // while "1"  (timeout="200")
[20:07:01.565]      // while  =>  TIMEOUT
[20:07:01.565]      // end while "1"
[20:07:01.565]    </control>
[20:07:01.565]    <control if="canReadPins" while="" timeout="0" info="">
[20:07:01.565]      // if-block "canReadPins"
[20:07:01.565]        // =>  TRUE
[20:07:01.565]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:07:01.566]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:07:01.569]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:07:01.569]        // while-condition  =>  FALSE
[20:07:01.569]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:07:01.569]      </control>
[20:07:01.570]      // end if-block "canReadPins"
[20:07:01.570]    </control>
[20:07:01.570]    <control if="!canReadPins" while="" timeout="0" info="">
[20:07:01.570]      // if-block "!canReadPins"
[20:07:01.570]        // =>  FALSE
[20:07:01.570]      // skip if-block "!canReadPins"
[20:07:01.570]    </control>
[20:07:01.570]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:07:01.570]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:07:01.571]        // =>  TRUE
[20:07:01.571]      <block atomic="false" info="">
[20:07:01.571]        WriteAP(0x00, 0x190008);
[20:07:01.580]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:07:01.581]        WriteAP(0xF0, 0x01);
[20:07:01.587]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:07:01.587]      </block>
[20:07:01.587]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:07:01.587]    </control>
[20:07:01.587]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:07:01.587]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:07:01.587]        // =>  FALSE
[20:07:01.587]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:07:01.588]    </control>
[20:07:01.588]    <block atomic="false" info="">
[20:07:01.588]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:07:01.591]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:07:01.593]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:07:01.593]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:07:01.594]      __ap = 0; //lets make sure we reset the access point selection
[20:07:01.594]        // -> [__ap <= 0x00000000]
[20:07:01.594]    </block>
[20:07:01.594]  </sequence>
[20:07:01.594]  
[20:07:01.648]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:07:01.648]  
[20:07:01.649]  <debugvars>
[20:07:01.649]    // Pre-defined
[20:07:01.649]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:07:01.649]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:07:01.649]    __dp=0x00000000
[20:07:01.650]    __ap=0x00000000
[20:07:01.650]    __traceout=0x00000000      (Trace Disabled)
[20:07:01.650]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:07:01.650]    __FlashAddr=0x00000000
[20:07:01.650]    __FlashLen=0x00000000
[20:07:01.650]    __FlashArg=0x00000000
[20:07:01.650]    __FlashOp=0x00000000
[20:07:01.650]    __Result=0x00000000
[20:07:01.651]  </debugvars>
[20:07:01.651]  
[20:07:01.651]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:07:01.651]    <block atomic="false" info="">
[20:07:01.651]      __var deviceID = 0;
[20:07:01.651]        // -> [deviceID <= 0x00000000]
[20:07:01.651]      __var version = 0;
[20:07:01.652]        // -> [version <= 0x00000000]
[20:07:01.652]      __var partNum = 0;
[20:07:01.652]        // -> [partNum <= 0x00000000]
[20:07:01.652]      __var manuf = 0;
[20:07:01.652]        // -> [manuf <= 0x00000000]
[20:07:01.652]      __var isMSPM0G1X0X_G3X0X = 0;
[20:07:01.652]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:07:01.652]      __var isProduction = 0;
[20:07:01.652]        // -> [isProduction <= 0x00000000]
[20:07:01.652]      __var continueId = 0;
[20:07:01.652]        // -> [continueId <= 0x00000000]
[20:07:01.653]      deviceID =   Read32(0x41C40004);
[20:07:01.663]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:07:01.663]        // -> [deviceID <= 0x2BB8802F]
[20:07:01.663]      version = deviceID >> 28;
[20:07:01.663]        // -> [version <= 0x00000002]
[20:07:01.663]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:07:01.663]        // -> [partNum <= 0x0000BB88]
[20:07:01.663]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:07:01.665]        // -> [manuf <= 0x00000017]
[20:07:01.665]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:07:01.665]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:07:01.665]      isProduction = (version > 0);
[20:07:01.665]        // -> [isProduction <= 0x00000001]
[20:07:01.665]    </block>
[20:07:01.665]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:07:01.665]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:07:01.665]        // =>  FALSE
[20:07:01.665]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:07:01.665]    </control>
[20:07:01.665]    <control if="continueId == 4" while="" timeout="0" info="">
[20:07:01.665]      // if-block "continueId == 4"
[20:07:01.665]        // =>  FALSE
[20:07:01.666]      // skip if-block "continueId == 4"
[20:07:01.666]    </control>
[20:07:01.666]    <control if="!isProduction" while="" timeout="0" info="">
[20:07:01.666]      // if-block "!isProduction"
[20:07:01.666]        // =>  FALSE
[20:07:01.666]      // skip if-block "!isProduction"
[20:07:01.666]    </control>
[20:07:01.666]  </sequence>
[20:07:01.666]  
[20:09:19.910]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:09:19.910]  
[20:09:19.919]  <debugvars>
[20:09:19.919]    // Pre-defined
[20:09:19.919]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:09:19.919]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:09:19.920]    __dp=0x00000000
[20:09:19.920]    __ap=0x00000000
[20:09:19.920]    __traceout=0x00000000      (Trace Disabled)
[20:09:19.920]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:09:19.920]    __FlashAddr=0x00000000
[20:09:19.920]    __FlashLen=0x00000000
[20:09:19.920]    __FlashArg=0x00000000
[20:09:19.920]    __FlashOp=0x00000000
[20:09:19.920]    __Result=0x00000000
[20:09:19.920]  </debugvars>
[20:09:19.920]  
[20:09:19.921]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:09:19.921]    <block atomic="false" info="">
[20:09:19.921]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:09:19.921]        // -> [isSWJ <= 0x00000001]
[20:09:19.921]      __var hasDormant = __protocol & 0x00020000;
[20:09:19.921]        // -> [hasDormant <= 0x00000000]
[20:09:19.921]      __var protType   = __protocol & 0x0000FFFF;
[20:09:19.921]        // -> [protType <= 0x00000002]
[20:09:19.921]    </block>
[20:09:19.921]    <control if="protType == 1" while="" timeout="0" info="">
[20:09:19.921]      // if-block "protType == 1"
[20:09:19.922]        // =>  FALSE
[20:09:19.922]      // skip if-block "protType == 1"
[20:09:19.922]    </control>
[20:09:19.922]    <control if="protType == 2" while="" timeout="0" info="">
[20:09:19.922]      // if-block "protType == 2"
[20:09:19.922]        // =>  TRUE
[20:09:19.922]      <control if="isSWJ" while="" timeout="0" info="">
[20:09:19.922]        // if-block "isSWJ"
[20:09:19.922]          // =>  TRUE
[20:09:19.922]        <control if="hasDormant" while="" timeout="0" info="">
[20:09:19.922]          // if-block "hasDormant"
[20:09:19.922]            // =>  FALSE
[20:09:19.922]          // skip if-block "hasDormant"
[20:09:19.922]        </control>
[20:09:19.923]        <control if="!hasDormant" while="" timeout="0" info="">
[20:09:19.923]          // if-block "!hasDormant"
[20:09:19.923]            // =>  TRUE
[20:09:19.923]          <block atomic="false" info="">
[20:09:19.923]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:09:19.926]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:09:19.926]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:09:19.929]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:09:19.929]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:09:19.932]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:09:19.932]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:09:19.934]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:09:19.934]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:09:19.936]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:09:19.936]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:09:19.938]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:09:19.938]          </block>
[20:09:19.938]          // end if-block "!hasDormant"
[20:09:19.938]        </control>
[20:09:19.938]        // end if-block "isSWJ"
[20:09:19.938]      </control>
[20:09:19.938]      <control if="!isSWJ" while="" timeout="0" info="">
[20:09:19.938]        // if-block "!isSWJ"
[20:09:19.939]          // =>  FALSE
[20:09:19.939]        // skip if-block "!isSWJ"
[20:09:19.939]      </control>
[20:09:19.939]      <block atomic="false" info="">
[20:09:19.939]        ReadDP(0x0);
[20:09:19.942]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:09:19.942]      </block>
[20:09:19.942]      // end if-block "protType == 2"
[20:09:19.943]    </control>
[20:09:19.943]  </sequence>
[20:09:19.943]  
[20:09:19.948]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:09:19.948]  
[20:09:19.948]  <debugvars>
[20:09:19.948]    // Pre-defined
[20:09:19.948]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:09:19.948]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:09:19.948]    __dp=0x00000000
[20:09:19.948]    __ap=0x00000000
[20:09:19.948]    __traceout=0x00000000      (Trace Disabled)
[20:09:19.948]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:09:19.948]    __FlashAddr=0x00000000
[20:09:19.949]    __FlashLen=0x00000000
[20:09:19.949]    __FlashArg=0x00000000
[20:09:19.949]    __FlashOp=0x00000000
[20:09:19.949]    __Result=0x00000000
[20:09:19.949]  </debugvars>
[20:09:19.949]  
[20:09:19.949]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:09:19.949]    <block atomic="false" info="">
[20:09:19.949]      __var SW_DP_ABORT       = 0x0;
[20:09:19.950]        // -> [SW_DP_ABORT <= 0x00000000]
[20:09:19.950]      __var DP_CTRL_STAT      = 0x4;
[20:09:19.950]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:09:19.950]      __var DP_SELECT         = 0x8;
[20:09:19.950]        // -> [DP_SELECT <= 0x00000008]
[20:09:19.950]      __var powered_down      = 0;
[20:09:19.950]        // -> [powered_down <= 0x00000000]
[20:09:19.950]      WriteDP(DP_SELECT, 0x00000000);
[20:09:19.953]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:09:19.953]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:09:19.954]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:09:19.955]        // -> [powered_down <= 0x00000001]
[20:09:19.955]    </block>
[20:09:19.955]    <control if="powered_down" while="" timeout="0" info="">
[20:09:19.955]      // if-block "powered_down"
[20:09:19.955]        // =>  TRUE
[20:09:19.955]      <block atomic="false" info="">
[20:09:19.955]        Message(0, "Debug/System power-up request sent");
[20:09:19.958]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:09:19.961]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:09:19.961]      </block>
[20:09:19.961]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:09:19.961]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:09:19.962]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:09:19.962]        // while-condition  =>  FALSE
[20:09:19.962]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:09:19.963]      </control>
[20:09:19.963]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:09:19.963]        // if-block "(__protocol & 0xFFFF) == 1"
[20:09:19.963]          // =>  FALSE
[20:09:19.963]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:09:19.963]      </control>
[20:09:19.963]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:09:19.963]        // if-block "(__protocol & 0xFFFF) == 2"
[20:09:19.963]          // =>  TRUE
[20:09:19.963]        <block atomic="false" info="">
[20:09:19.964]          Message(0, "executing SWD power up");
[20:09:19.965]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:09:19.966]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:09:19.967]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:09:19.970]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:09:19.971]        </block>
[20:09:19.971]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:09:19.971]      </control>
[20:09:19.971]      // end if-block "powered_down"
[20:09:19.971]    </control>
[20:09:19.971]    <block atomic="false" info="">
[20:09:19.971]      __var DEBUG_PORT_VAL    = 0;
[20:09:19.971]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:09:19.971]      __var ACCESS_POINT_VAL  = 0;
[20:09:19.971]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:09:19.971]      __ap = 1; 
[20:09:19.971]        // -> [__ap <= 0x00000001]
[20:09:19.973]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:09:19.976]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:09:19.976]      __ap = 4;
[20:09:19.976]        // -> [__ap <= 0x00000004]
[20:09:19.976]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:09:19.980]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:09:19.980]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:09:19.980]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:09:19.981]    </block>
[20:09:19.982]    <block atomic="false" info="">
[20:09:19.983]      __var nReset = 0x80;
[20:09:19.983]        // -> [nReset <= 0x00000080]
[20:09:19.983]      __var canReadPins = 0;
[20:09:19.983]        // -> [canReadPins <= 0x00000000]
[20:09:19.983]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:09:19.984]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:09:19.984]        // -> [canReadPins <= 0x00000001]
[20:09:19.984]    </block>
[20:09:19.984]    <control if="" while="1" timeout="200" info="">
[20:09:19.984]      // while "1"  (timeout="200")
[20:09:19.984]      // while-condition  =>  TRUE
[20:09:19.985]      // while "1"  (timeout="200")
[20:09:19.985]      // while-condition  =>  TRUE
[20:09:19.985]      // while "1"  (timeout="200")
[20:09:19.985]      // while-condition  =>  TRUE
[20:09:19.985]      // while "1"  (timeout="200")
[20:09:19.985]      // while-condition  =>  TRUE
[20:09:19.985]      // while "1"  (timeout="200")
[20:09:19.985]      // while-condition  =>  TRUE
[20:09:19.985]      // while "1"  (timeout="200")
[20:09:19.986]      // while-condition  =>  TRUE
[20:09:19.986]      // while "1"  (timeout="200")
[20:09:19.986]      // while  =>  TIMEOUT
[20:09:19.986]      // end while "1"
[20:09:19.986]    </control>
[20:09:19.986]    <control if="canReadPins" while="" timeout="0" info="">
[20:09:19.986]      // if-block "canReadPins"
[20:09:19.987]        // =>  TRUE
[20:09:19.987]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:09:19.987]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:09:19.993]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:09:19.993]        // while-condition  =>  FALSE
[20:09:19.993]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:09:19.993]      </control>
[20:09:19.993]      // end if-block "canReadPins"
[20:09:19.993]    </control>
[20:09:19.993]    <control if="!canReadPins" while="" timeout="0" info="">
[20:09:19.993]      // if-block "!canReadPins"
[20:09:19.994]        // =>  FALSE
[20:09:19.994]      // skip if-block "!canReadPins"
[20:09:19.994]    </control>
[20:09:19.994]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:09:19.994]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:09:19.994]        // =>  TRUE
[20:09:19.994]      <block atomic="false" info="">
[20:09:19.995]        WriteAP(0x00, 0x190008);
[20:09:19.997]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:09:19.997]        WriteAP(0xF0, 0x01);
[20:09:19.999]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:09:19.999]      </block>
[20:09:19.999]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:09:19.999]    </control>
[20:09:20.000]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:09:20.000]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:09:20.000]        // =>  FALSE
[20:09:20.000]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:09:20.000]    </control>
[20:09:20.000]    <block atomic="false" info="">
[20:09:20.000]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:09:20.004]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:09:20.004]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:09:20.004]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:09:20.005]      __ap = 0; //lets make sure we reset the access point selection
[20:09:20.006]        // -> [__ap <= 0x00000000]
[20:09:20.006]    </block>
[20:09:20.006]  </sequence>
[20:09:20.006]  
[20:09:20.048]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:09:20.048]  
[20:09:20.048]  <debugvars>
[20:09:20.048]    // Pre-defined
[20:09:20.048]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:09:20.048]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:09:20.048]    __dp=0x00000000
[20:09:20.048]    __ap=0x00000000
[20:09:20.048]    __traceout=0x00000000      (Trace Disabled)
[20:09:20.048]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:09:20.048]    __FlashAddr=0x00000000
[20:09:20.050]    __FlashLen=0x00000000
[20:09:20.050]    __FlashArg=0x00000000
[20:09:20.050]    __FlashOp=0x00000000
[20:09:20.050]    __Result=0x00000000
[20:09:20.050]  </debugvars>
[20:09:20.050]  
[20:09:20.050]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:09:20.050]    <block atomic="false" info="">
[20:09:20.050]      __var deviceID = 0;
[20:09:20.051]        // -> [deviceID <= 0x00000000]
[20:09:20.051]      __var version = 0;
[20:09:20.051]        // -> [version <= 0x00000000]
[20:09:20.051]      __var partNum = 0;
[20:09:20.051]        // -> [partNum <= 0x00000000]
[20:09:20.051]      __var manuf = 0;
[20:09:20.051]        // -> [manuf <= 0x00000000]
[20:09:20.051]      __var isMSPM0G1X0X_G3X0X = 0;
[20:09:20.052]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:09:20.052]      __var isProduction = 0;
[20:09:20.052]        // -> [isProduction <= 0x00000000]
[20:09:20.052]      __var continueId = 0;
[20:09:20.052]        // -> [continueId <= 0x00000000]
[20:09:20.052]      deviceID =   Read32(0x41C40004);
[20:09:20.058]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:09:20.058]        // -> [deviceID <= 0x2BB8802F]
[20:09:20.058]      version = deviceID >> 28;
[20:09:20.058]        // -> [version <= 0x00000002]
[20:09:20.058]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:09:20.058]        // -> [partNum <= 0x0000BB88]
[20:09:20.059]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:09:20.059]        // -> [manuf <= 0x00000017]
[20:09:20.059]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:09:20.059]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:09:20.059]      isProduction = (version > 0);
[20:09:20.059]        // -> [isProduction <= 0x00000001]
[20:09:20.059]    </block>
[20:09:20.059]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:09:20.059]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:09:20.059]        // =>  FALSE
[20:09:20.059]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:09:20.060]    </control>
[20:09:20.060]    <control if="continueId == 4" while="" timeout="0" info="">
[20:09:20.060]      // if-block "continueId == 4"
[20:09:20.060]        // =>  FALSE
[20:09:20.060]      // skip if-block "continueId == 4"
[20:09:20.060]    </control>
[20:09:20.060]    <control if="!isProduction" while="" timeout="0" info="">
[20:09:20.060]      // if-block "!isProduction"
[20:09:20.061]        // =>  FALSE
[20:09:20.061]      // skip if-block "!isProduction"
[20:09:20.061]    </control>
[20:09:20.061]  </sequence>
[20:09:20.061]  
[20:21:28.692]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:21:28.692]  
[20:21:28.700]  <debugvars>
[20:21:28.700]    // Pre-defined
[20:21:28.700]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:21:28.700]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:21:28.700]    __dp=0x00000000
[20:21:28.700]    __ap=0x00000000
[20:21:28.700]    __traceout=0x00000000      (Trace Disabled)
[20:21:28.700]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:21:28.700]    __FlashAddr=0x00000000
[20:21:28.700]    __FlashLen=0x00000000
[20:21:28.700]    __FlashArg=0x00000000
[20:21:28.701]    __FlashOp=0x00000000
[20:21:28.701]    __Result=0x00000000
[20:21:28.701]  </debugvars>
[20:21:28.701]  
[20:21:28.701]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:21:28.701]    <block atomic="false" info="">
[20:21:28.701]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:21:28.701]        // -> [isSWJ <= 0x00000001]
[20:21:28.701]      __var hasDormant = __protocol & 0x00020000;
[20:21:28.701]        // -> [hasDormant <= 0x00000000]
[20:21:28.703]      __var protType   = __protocol & 0x0000FFFF;
[20:21:28.703]        // -> [protType <= 0x00000002]
[20:21:28.703]    </block>
[20:21:28.703]    <control if="protType == 1" while="" timeout="0" info="">
[20:21:28.703]      // if-block "protType == 1"
[20:21:28.703]        // =>  FALSE
[20:21:28.703]      // skip if-block "protType == 1"
[20:21:28.703]    </control>
[20:21:28.703]    <control if="protType == 2" while="" timeout="0" info="">
[20:21:28.703]      // if-block "protType == 2"
[20:21:28.703]        // =>  TRUE
[20:21:28.703]      <control if="isSWJ" while="" timeout="0" info="">
[20:21:28.704]        // if-block "isSWJ"
[20:21:28.704]          // =>  TRUE
[20:21:28.704]        <control if="hasDormant" while="" timeout="0" info="">
[20:21:28.704]          // if-block "hasDormant"
[20:21:28.704]            // =>  FALSE
[20:21:28.704]          // skip if-block "hasDormant"
[20:21:28.704]        </control>
[20:21:28.704]        <control if="!hasDormant" while="" timeout="0" info="">
[20:21:28.704]          // if-block "!hasDormant"
[20:21:28.705]            // =>  TRUE
[20:21:28.705]          <block atomic="false" info="">
[20:21:28.705]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:21:28.708]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:21:28.708]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:21:28.709]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:21:28.709]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:21:28.714]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:21:28.714]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:21:28.722]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:21:28.722]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:21:28.725]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:21:28.725]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:21:28.726]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:21:28.726]          </block>
[20:21:28.726]          // end if-block "!hasDormant"
[20:21:28.726]        </control>
[20:21:28.726]        // end if-block "isSWJ"
[20:21:28.726]      </control>
[20:21:28.726]      <control if="!isSWJ" while="" timeout="0" info="">
[20:21:28.726]        // if-block "!isSWJ"
[20:21:28.726]          // =>  FALSE
[20:21:28.726]        // skip if-block "!isSWJ"
[20:21:28.726]      </control>
[20:21:28.726]      <block atomic="false" info="">
[20:21:28.726]        ReadDP(0x0);
[20:21:28.728]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:21:28.728]      </block>
[20:21:28.728]      // end if-block "protType == 2"
[20:21:28.729]    </control>
[20:21:28.729]  </sequence>
[20:21:28.729]  
[20:21:28.732]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:21:28.732]  
[20:21:28.732]  <debugvars>
[20:21:28.732]    // Pre-defined
[20:21:28.732]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:21:28.732]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:21:28.732]    __dp=0x00000000
[20:21:28.732]    __ap=0x00000000
[20:21:28.732]    __traceout=0x00000000      (Trace Disabled)
[20:21:28.732]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:21:28.732]    __FlashAddr=0x00000000
[20:21:28.733]    __FlashLen=0x00000000
[20:21:28.733]    __FlashArg=0x00000000
[20:21:28.733]    __FlashOp=0x00000000
[20:21:28.733]    __Result=0x00000000
[20:21:28.733]  </debugvars>
[20:21:28.733]  
[20:21:28.733]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:21:28.733]    <block atomic="false" info="">
[20:21:28.733]      __var SW_DP_ABORT       = 0x0;
[20:21:28.733]        // -> [SW_DP_ABORT <= 0x00000000]
[20:21:28.733]      __var DP_CTRL_STAT      = 0x4;
[20:21:28.733]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:21:28.733]      __var DP_SELECT         = 0x8;
[20:21:28.734]        // -> [DP_SELECT <= 0x00000008]
[20:21:28.734]      __var powered_down      = 0;
[20:21:28.734]        // -> [powered_down <= 0x00000000]
[20:21:28.734]      WriteDP(DP_SELECT, 0x00000000);
[20:21:28.735]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:21:28.735]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:21:28.742]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:21:28.742]        // -> [powered_down <= 0x00000001]
[20:21:28.743]    </block>
[20:21:28.743]    <control if="powered_down" while="" timeout="0" info="">
[20:21:28.743]      // if-block "powered_down"
[20:21:28.743]        // =>  TRUE
[20:21:28.743]      <block atomic="false" info="">
[20:21:28.743]        Message(0, "Debug/System power-up request sent");
[20:21:28.745]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:21:28.751]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:21:28.751]      </block>
[20:21:28.752]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:21:28.752]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:21:28.754]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:21:28.755]        // while-condition  =>  FALSE
[20:21:28.755]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:21:28.755]      </control>
[20:21:28.755]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:21:28.755]        // if-block "(__protocol & 0xFFFF) == 1"
[20:21:28.755]          // =>  FALSE
[20:21:28.755]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:21:28.756]      </control>
[20:21:28.756]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:21:28.756]        // if-block "(__protocol & 0xFFFF) == 2"
[20:21:28.756]          // =>  TRUE
[20:21:28.756]        <block atomic="false" info="">
[20:21:28.756]          Message(0, "executing SWD power up");
[20:21:28.758]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:21:28.760]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:21:28.760]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:21:28.762]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:21:28.762]        </block>
[20:21:28.762]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:21:28.762]      </control>
[20:21:28.762]      // end if-block "powered_down"
[20:21:28.762]    </control>
[20:21:28.762]    <block atomic="false" info="">
[20:21:28.763]      __var DEBUG_PORT_VAL    = 0;
[20:21:28.763]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:21:28.763]      __var ACCESS_POINT_VAL  = 0;
[20:21:28.763]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:21:28.763]      __ap = 1; 
[20:21:28.763]        // -> [__ap <= 0x00000001]
[20:21:28.763]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:21:28.768]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:21:28.768]      __ap = 4;
[20:21:28.768]        // -> [__ap <= 0x00000004]
[20:21:28.768]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:21:28.772]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:21:28.772]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:21:28.772]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:21:28.774]    </block>
[20:21:28.774]    <block atomic="false" info="">
[20:21:28.774]      __var nReset = 0x80;
[20:21:28.774]        // -> [nReset <= 0x00000080]
[20:21:28.774]      __var canReadPins = 0;
[20:21:28.774]        // -> [canReadPins <= 0x00000000]
[20:21:28.774]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:21:28.780]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:21:28.780]        // -> [canReadPins <= 0x00000001]
[20:21:28.781]    </block>
[20:21:28.781]    <control if="" while="1" timeout="200" info="">
[20:21:28.781]      // while "1"  (timeout="200")
[20:21:28.781]      // while-condition  =>  TRUE
[20:21:28.781]      // while "1"  (timeout="200")
[20:21:28.781]      // while-condition  =>  TRUE
[20:21:28.782]      // while "1"  (timeout="200")
[20:21:28.782]      // while  =>  TIMEOUT
[20:21:28.782]      // end while "1"
[20:21:28.782]    </control>
[20:21:28.782]    <control if="canReadPins" while="" timeout="0" info="">
[20:21:28.782]      // if-block "canReadPins"
[20:21:28.782]        // =>  TRUE
[20:21:28.782]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:21:28.782]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:21:28.785]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:21:28.785]        // while-condition  =>  FALSE
[20:21:28.785]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:21:28.785]      </control>
[20:21:28.785]      // end if-block "canReadPins"
[20:21:28.785]    </control>
[20:21:28.785]    <control if="!canReadPins" while="" timeout="0" info="">
[20:21:28.785]      // if-block "!canReadPins"
[20:21:28.786]        // =>  FALSE
[20:21:28.786]      // skip if-block "!canReadPins"
[20:21:28.786]    </control>
[20:21:28.786]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:21:28.786]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:21:28.786]        // =>  TRUE
[20:21:28.786]      <block atomic="false" info="">
[20:21:28.786]        WriteAP(0x00, 0x190008);
[20:21:28.787]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:21:28.787]        WriteAP(0xF0, 0x01);
[20:21:28.791]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:21:28.791]      </block>
[20:21:28.791]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:21:28.791]    </control>
[20:21:28.791]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:21:28.791]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:21:28.791]        // =>  FALSE
[20:21:28.791]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:21:28.791]    </control>
[20:21:28.791]    <block atomic="false" info="">
[20:21:28.791]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:21:28.797]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:21:28.797]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:21:28.797]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:21:28.799]      __ap = 0; //lets make sure we reset the access point selection
[20:21:28.799]        // -> [__ap <= 0x00000000]
[20:21:28.799]    </block>
[20:21:28.799]  </sequence>
[20:21:28.799]  
[20:21:28.827]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:21:28.827]  
[20:21:28.827]  <debugvars>
[20:21:28.827]    // Pre-defined
[20:21:28.827]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:21:28.827]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:21:28.827]    __dp=0x00000000
[20:21:28.829]    __ap=0x00000000
[20:21:28.829]    __traceout=0x00000000      (Trace Disabled)
[20:21:28.829]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:21:28.829]    __FlashAddr=0x00000000
[20:21:28.829]    __FlashLen=0x00000000
[20:21:28.829]    __FlashArg=0x00000000
[20:21:28.829]    __FlashOp=0x00000000
[20:21:28.829]    __Result=0x00000000
[20:21:28.829]  </debugvars>
[20:21:28.829]  
[20:21:28.830]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:21:28.830]    <block atomic="false" info="">
[20:21:28.830]      __var deviceID = 0;
[20:21:28.830]        // -> [deviceID <= 0x00000000]
[20:21:28.830]      __var version = 0;
[20:21:28.830]        // -> [version <= 0x00000000]
[20:21:28.830]      __var partNum = 0;
[20:21:28.831]        // -> [partNum <= 0x00000000]
[20:21:28.831]      __var manuf = 0;
[20:21:28.831]        // -> [manuf <= 0x00000000]
[20:21:28.831]      __var isMSPM0G1X0X_G3X0X = 0;
[20:21:28.831]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:21:28.831]      __var isProduction = 0;
[20:21:28.831]        // -> [isProduction <= 0x00000000]
[20:21:28.831]      __var continueId = 0;
[20:21:28.831]        // -> [continueId <= 0x00000000]
[20:21:28.831]      deviceID =   Read32(0x41C40004);
[20:21:28.838]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:21:28.838]        // -> [deviceID <= 0x2BB8802F]
[20:21:28.838]      version = deviceID >> 28;
[20:21:28.838]        // -> [version <= 0x00000002]
[20:21:28.838]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:21:28.838]        // -> [partNum <= 0x0000BB88]
[20:21:28.838]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:21:28.838]        // -> [manuf <= 0x00000017]
[20:21:28.839]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:21:28.839]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:21:28.839]      isProduction = (version > 0);
[20:21:28.839]        // -> [isProduction <= 0x00000001]
[20:21:28.839]    </block>
[20:21:28.839]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:21:28.839]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:21:28.839]        // =>  FALSE
[20:21:28.839]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:21:28.840]    </control>
[20:21:28.840]    <control if="continueId == 4" while="" timeout="0" info="">
[20:21:28.840]      // if-block "continueId == 4"
[20:21:28.840]        // =>  FALSE
[20:21:28.840]      // skip if-block "continueId == 4"
[20:21:28.840]    </control>
[20:21:28.840]    <control if="!isProduction" while="" timeout="0" info="">
[20:21:28.840]      // if-block "!isProduction"
[20:21:28.840]        // =>  FALSE
[20:21:28.840]      // skip if-block "!isProduction"
[20:21:28.840]    </control>
[20:21:28.841]  </sequence>
[20:21:28.841]  
[20:24:41.052]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:24:41.052]  
[20:24:41.061]  <debugvars>
[20:24:41.061]    // Pre-defined
[20:24:41.061]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:24:41.061]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:24:41.061]    __dp=0x00000000
[20:24:41.061]    __ap=0x00000000
[20:24:41.061]    __traceout=0x00000000      (Trace Disabled)
[20:24:41.062]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:24:41.062]    __FlashAddr=0x00000000
[20:24:41.062]    __FlashLen=0x00000000
[20:24:41.062]    __FlashArg=0x00000000
[20:24:41.062]    __FlashOp=0x00000000
[20:24:41.062]    __Result=0x00000000
[20:24:41.063]  </debugvars>
[20:24:41.063]  
[20:24:41.063]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:24:41.063]    <block atomic="false" info="">
[20:24:41.063]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:24:41.063]        // -> [isSWJ <= 0x00000001]
[20:24:41.063]      __var hasDormant = __protocol & 0x00020000;
[20:24:41.063]        // -> [hasDormant <= 0x00000000]
[20:24:41.063]      __var protType   = __protocol & 0x0000FFFF;
[20:24:41.063]        // -> [protType <= 0x00000002]
[20:24:41.064]    </block>
[20:24:41.064]    <control if="protType == 1" while="" timeout="0" info="">
[20:24:41.064]      // if-block "protType == 1"
[20:24:41.064]        // =>  FALSE
[20:24:41.064]      // skip if-block "protType == 1"
[20:24:41.064]    </control>
[20:24:41.064]    <control if="protType == 2" while="" timeout="0" info="">
[20:24:41.064]      // if-block "protType == 2"
[20:24:41.064]        // =>  TRUE
[20:24:41.064]      <control if="isSWJ" while="" timeout="0" info="">
[20:24:41.066]        // if-block "isSWJ"
[20:24:41.066]          // =>  TRUE
[20:24:41.066]        <control if="hasDormant" while="" timeout="0" info="">
[20:24:41.066]          // if-block "hasDormant"
[20:24:41.066]            // =>  FALSE
[20:24:41.066]          // skip if-block "hasDormant"
[20:24:41.066]        </control>
[20:24:41.066]        <control if="!hasDormant" while="" timeout="0" info="">
[20:24:41.066]          // if-block "!hasDormant"
[20:24:41.066]            // =>  TRUE
[20:24:41.066]          <block atomic="false" info="">
[20:24:41.066]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:24:41.068]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:24:41.068]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:24:41.071]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:24:41.071]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:24:41.074]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:24:41.074]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:24:41.075]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:24:41.075]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:24:41.077]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:24:41.077]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:24:41.079]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:24:41.079]          </block>
[20:24:41.079]          // end if-block "!hasDormant"
[20:24:41.079]        </control>
[20:24:41.079]        // end if-block "isSWJ"
[20:24:41.079]      </control>
[20:24:41.079]      <control if="!isSWJ" while="" timeout="0" info="">
[20:24:41.079]        // if-block "!isSWJ"
[20:24:41.079]          // =>  FALSE
[20:24:41.079]        // skip if-block "!isSWJ"
[20:24:41.079]      </control>
[20:24:41.080]      <block atomic="false" info="">
[20:24:41.080]        ReadDP(0x0);
[20:24:41.085]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:24:41.085]      </block>
[20:24:41.085]      // end if-block "protType == 2"
[20:24:41.085]    </control>
[20:24:41.086]  </sequence>
[20:24:41.086]  
[20:24:41.088]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:24:41.088]  
[20:24:41.088]  <debugvars>
[20:24:41.089]    // Pre-defined
[20:24:41.089]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:24:41.089]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:24:41.089]    __dp=0x00000000
[20:24:41.089]    __ap=0x00000000
[20:24:41.089]    __traceout=0x00000000      (Trace Disabled)
[20:24:41.089]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:24:41.090]    __FlashAddr=0x00000000
[20:24:41.090]    __FlashLen=0x00000000
[20:24:41.090]    __FlashArg=0x00000000
[20:24:41.090]    __FlashOp=0x00000000
[20:24:41.090]    __Result=0x00000000
[20:24:41.090]  </debugvars>
[20:24:41.090]  
[20:24:41.090]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:24:41.090]    <block atomic="false" info="">
[20:24:41.090]      __var SW_DP_ABORT       = 0x0;
[20:24:41.091]        // -> [SW_DP_ABORT <= 0x00000000]
[20:24:41.091]      __var DP_CTRL_STAT      = 0x4;
[20:24:41.091]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:24:41.091]      __var DP_SELECT         = 0x8;
[20:24:41.091]        // -> [DP_SELECT <= 0x00000008]
[20:24:41.091]      __var powered_down      = 0;
[20:24:41.092]        // -> [powered_down <= 0x00000000]
[20:24:41.092]      WriteDP(DP_SELECT, 0x00000000);
[20:24:41.094]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:24:41.094]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:24:41.096]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:24:41.096]        // -> [powered_down <= 0x00000001]
[20:24:41.096]    </block>
[20:24:41.096]    <control if="powered_down" while="" timeout="0" info="">
[20:24:41.096]      // if-block "powered_down"
[20:24:41.096]        // =>  TRUE
[20:24:41.096]      <block atomic="false" info="">
[20:24:41.097]        Message(0, "Debug/System power-up request sent");
[20:24:41.098]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:24:41.100]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:24:41.100]      </block>
[20:24:41.100]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:24:41.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:24:41.106]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:24:41.106]        // while-condition  =>  FALSE
[20:24:41.106]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:24:41.106]      </control>
[20:24:41.106]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:24:41.106]        // if-block "(__protocol & 0xFFFF) == 1"
[20:24:41.107]          // =>  FALSE
[20:24:41.107]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:24:41.107]      </control>
[20:24:41.107]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:24:41.107]        // if-block "(__protocol & 0xFFFF) == 2"
[20:24:41.107]          // =>  TRUE
[20:24:41.107]        <block atomic="false" info="">
[20:24:41.107]          Message(0, "executing SWD power up");
[20:24:41.110]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:24:41.114]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:24:41.114]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:24:41.116]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:24:41.116]        </block>
[20:24:41.116]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:24:41.116]      </control>
[20:24:41.116]      // end if-block "powered_down"
[20:24:41.116]    </control>
[20:24:41.117]    <block atomic="false" info="">
[20:24:41.117]      __var DEBUG_PORT_VAL    = 0;
[20:24:41.117]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:24:41.117]      __var ACCESS_POINT_VAL  = 0;
[20:24:41.117]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:24:41.117]      __ap = 1; 
[20:24:41.117]        // -> [__ap <= 0x00000001]
[20:24:41.117]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:24:41.121]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:24:41.121]      __ap = 4;
[20:24:41.121]        // -> [__ap <= 0x00000004]
[20:24:41.121]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:24:41.127]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:24:41.127]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:24:41.127]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:24:41.129]    </block>
[20:24:41.129]    <block atomic="false" info="">
[20:24:41.130]      __var nReset = 0x80;
[20:24:41.130]        // -> [nReset <= 0x00000080]
[20:24:41.130]      __var canReadPins = 0;
[20:24:41.130]        // -> [canReadPins <= 0x00000000]
[20:24:41.130]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:24:41.132]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:24:41.132]        // -> [canReadPins <= 0x00000001]
[20:24:41.132]    </block>
[20:24:41.132]    <control if="" while="1" timeout="200" info="">
[20:24:41.132]      // while "1"  (timeout="200")
[20:24:41.132]      // while-condition  =>  TRUE
[20:24:41.132]      // while "1"  (timeout="200")
[20:24:41.132]      // while-condition  =>  TRUE
[20:24:41.132]      // while "1"  (timeout="200")
[20:24:41.132]      // while-condition  =>  TRUE
[20:24:41.132]      // while "1"  (timeout="200")
[20:24:41.133]      // while-condition  =>  TRUE
[20:24:41.133]      // while "1"  (timeout="200")
[20:24:41.133]      // while-condition  =>  TRUE
[20:24:41.133]      // while "1"  (timeout="200")
[20:24:41.133]      // while-condition  =>  TRUE
[20:24:41.133]      // while "1"  (timeout="200")
[20:24:41.133]      // while-condition  =>  TRUE
[20:24:41.133]      // while "1"  (timeout="200")
[20:24:41.133]      // while-condition  =>  TRUE
[20:24:41.133]      // while "1"  (timeout="200")
[20:24:41.133]      // while-condition  =>  TRUE
[20:24:41.134]      // while "1"  (timeout="200")
[20:24:41.134]      // while-condition  =>  TRUE
[20:24:41.134]      // while "1"  (timeout="200")
[20:24:41.134]      // while-condition  =>  TRUE
[20:24:41.134]      // while "1"  (timeout="200")
[20:24:41.134]      // while-condition  =>  TRUE
[20:24:41.134]      // while "1"  (timeout="200")
[20:24:41.134]      // while-condition  =>  TRUE
[20:24:41.134]      // while "1"  (timeout="200")
[20:24:41.135]      // while-condition  =>  TRUE
[20:24:41.135]      // while "1"  (timeout="200")
[20:24:41.135]      // while-condition  =>  TRUE
[20:24:41.135]      // while "1"  (timeout="200")
[20:24:41.135]      // while-condition  =>  TRUE
[20:24:41.135]      // while "1"  (timeout="200")
[20:24:41.135]      // while-condition  =>  TRUE
[20:24:41.135]      // while "1"  (timeout="200")
[20:24:41.135]      // while-condition  =>  TRUE
[20:24:41.135]      // while "1"  (timeout="200")
[20:24:41.136]      // while-condition  =>  TRUE
[20:24:41.136]      // while "1"  (timeout="200")
[20:24:41.136]      // while-condition  =>  TRUE
[20:24:41.136]      // while "1"  (timeout="200")
[20:24:41.136]      // while-condition  =>  TRUE
[20:24:41.136]      // while "1"  (timeout="200")
[20:24:41.136]      // while-condition  =>  TRUE
[20:24:41.136]      // while "1"  (timeout="200")
[20:24:41.136]      // while-condition  =>  TRUE
[20:24:41.136]      // while "1"  (timeout="200")
[20:24:41.136]      // while-condition  =>  TRUE
[20:24:41.136]      // while "1"  (timeout="200")
[20:24:41.136]      // while-condition  =>  TRUE
[20:24:41.137]      // while "1"  (timeout="200")
[20:24:41.137]      // while-condition  =>  TRUE
[20:24:41.137]      // while "1"  (timeout="200")
[20:24:41.137]      // while-condition  =>  TRUE
[20:24:41.137]      // while "1"  (timeout="200")
[20:24:41.137]      // while-condition  =>  TRUE
[20:24:41.137]      // while "1"  (timeout="200")
[20:24:41.137]      // while-condition  =>  TRUE
[20:24:41.138]      // while "1"  (timeout="200")
[20:24:41.138]      // while-condition  =>  TRUE
[20:24:41.138]      // while "1"  (timeout="200")
[20:24:41.138]      // while-condition  =>  TRUE
[20:24:41.138]      // while "1"  (timeout="200")
[20:24:41.138]      // while-condition  =>  TRUE
[20:24:41.138]      // while "1"  (timeout="200")
[20:24:41.138]      // while-condition  =>  TRUE
[20:24:41.138]      // while "1"  (timeout="200")
[20:24:41.138]      // while-condition  =>  TRUE
[20:24:41.139]      // while "1"  (timeout="200")
[20:24:41.139]      // while-condition  =>  TRUE
[20:24:41.139]      // while "1"  (timeout="200")
[20:24:41.139]      // while-condition  =>  TRUE
[20:24:41.139]      // while "1"  (timeout="200")
[20:24:41.139]      // while-condition  =>  TRUE
[20:24:41.139]      // while "1"  (timeout="200")
[20:24:41.139]      // while-condition  =>  TRUE
[20:24:41.141]      // while "1"  (timeout="200")
[20:24:41.141]      // while-condition  =>  TRUE
[20:24:41.141]      // while "1"  (timeout="200")
[20:24:41.141]      // while-condition  =>  TRUE
[20:24:41.141]      // while "1"  (timeout="200")
[20:24:41.141]      // while-condition  =>  TRUE
[20:24:41.141]      // while "1"  (timeout="200")
[20:24:41.141]      // while-condition  =>  TRUE
[20:24:41.141]      // while "1"  (timeout="200")
[20:24:41.142]      // while-condition  =>  TRUE
[20:24:41.142]      // while "1"  (timeout="200")
[20:24:41.142]      // while  =>  TIMEOUT
[20:24:41.142]      // end while "1"
[20:24:41.142]    </control>
[20:24:41.142]    <control if="canReadPins" while="" timeout="0" info="">
[20:24:41.142]      // if-block "canReadPins"
[20:24:41.142]        // =>  TRUE
[20:24:41.142]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:24:41.142]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:24:41.143]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:24:41.145]        // while-condition  =>  FALSE
[20:24:41.145]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:24:41.145]      </control>
[20:24:41.145]      // end if-block "canReadPins"
[20:24:41.145]    </control>
[20:24:41.145]    <control if="!canReadPins" while="" timeout="0" info="">
[20:24:41.145]      // if-block "!canReadPins"
[20:24:41.145]        // =>  FALSE
[20:24:41.145]      // skip if-block "!canReadPins"
[20:24:41.145]    </control>
[20:24:41.146]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:24:41.146]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:24:41.146]        // =>  TRUE
[20:24:41.146]      <block atomic="false" info="">
[20:24:41.146]        WriteAP(0x00, 0x190008);
[20:24:41.148]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:24:41.148]        WriteAP(0xF0, 0x01);
[20:24:41.158]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:24:41.158]      </block>
[20:24:41.159]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:24:41.159]    </control>
[20:24:41.159]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:24:41.159]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:24:41.159]        // =>  FALSE
[20:24:41.159]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:24:41.159]    </control>
[20:24:41.159]    <block atomic="false" info="">
[20:24:41.160]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:24:41.164]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:24:41.164]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:24:41.164]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:24:41.166]      __ap = 0; //lets make sure we reset the access point selection
[20:24:41.166]        // -> [__ap <= 0x00000000]
[20:24:41.166]    </block>
[20:24:41.166]  </sequence>
[20:24:41.167]  
[20:24:41.202]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:24:41.202]  
[20:24:41.203]  <debugvars>
[20:24:41.203]    // Pre-defined
[20:24:41.203]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:24:41.203]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:24:41.203]    __dp=0x00000000
[20:24:41.203]    __ap=0x00000000
[20:24:41.204]    __traceout=0x00000000      (Trace Disabled)
[20:24:41.204]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:24:41.204]    __FlashAddr=0x00000000
[20:24:41.204]    __FlashLen=0x00000000
[20:24:41.204]    __FlashArg=0x00000000
[20:24:41.204]    __FlashOp=0x00000000
[20:24:41.204]    __Result=0x00000000
[20:24:41.204]  </debugvars>
[20:24:41.204]  
[20:24:41.204]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:24:41.204]    <block atomic="false" info="">
[20:24:41.204]      __var deviceID = 0;
[20:24:41.205]        // -> [deviceID <= 0x00000000]
[20:24:41.205]      __var version = 0;
[20:24:41.205]        // -> [version <= 0x00000000]
[20:24:41.205]      __var partNum = 0;
[20:24:41.205]        // -> [partNum <= 0x00000000]
[20:24:41.205]      __var manuf = 0;
[20:24:41.205]        // -> [manuf <= 0x00000000]
[20:24:41.205]      __var isMSPM0G1X0X_G3X0X = 0;
[20:24:41.205]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:24:41.205]      __var isProduction = 0;
[20:24:41.206]        // -> [isProduction <= 0x00000000]
[20:24:41.206]      __var continueId = 0;
[20:24:41.206]        // -> [continueId <= 0x00000000]
[20:24:41.206]      deviceID =   Read32(0x41C40004);
[20:24:41.215]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:24:41.215]        // -> [deviceID <= 0x2BB8802F]
[20:24:41.215]      version = deviceID >> 28;
[20:24:41.215]        // -> [version <= 0x00000002]
[20:24:41.215]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:24:41.215]        // -> [partNum <= 0x0000BB88]
[20:24:41.215]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:24:41.216]        // -> [manuf <= 0x00000017]
[20:24:41.216]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:24:41.216]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:24:41.216]      isProduction = (version > 0);
[20:24:41.216]        // -> [isProduction <= 0x00000001]
[20:24:41.216]    </block>
[20:24:41.216]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:24:41.216]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:24:41.217]        // =>  FALSE
[20:24:41.217]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:24:41.217]    </control>
[20:24:41.217]    <control if="continueId == 4" while="" timeout="0" info="">
[20:24:41.217]      // if-block "continueId == 4"
[20:24:41.217]        // =>  FALSE
[20:24:41.217]      // skip if-block "continueId == 4"
[20:24:41.217]    </control>
[20:24:41.217]    <control if="!isProduction" while="" timeout="0" info="">
[20:24:41.218]      // if-block "!isProduction"
[20:24:41.218]        // =>  FALSE
[20:24:41.218]      // skip if-block "!isProduction"
[20:24:41.218]    </control>
[20:24:41.218]  </sequence>
[20:24:41.218]  
[20:26:16.243]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:26:16.243]  
[20:26:16.252]  <debugvars>
[20:26:16.252]    // Pre-defined
[20:26:16.252]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:26:16.252]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:26:16.252]    __dp=0x00000000
[20:26:16.252]    __ap=0x00000000
[20:26:16.252]    __traceout=0x00000000      (Trace Disabled)
[20:26:16.252]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:26:16.252]    __FlashAddr=0x00000000
[20:26:16.252]    __FlashLen=0x00000000
[20:26:16.253]    __FlashArg=0x00000000
[20:26:16.253]    __FlashOp=0x00000000
[20:26:16.253]    __Result=0x00000000
[20:26:16.253]  </debugvars>
[20:26:16.253]  
[20:26:16.253]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:26:16.253]    <block atomic="false" info="">
[20:26:16.253]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:26:16.253]        // -> [isSWJ <= 0x00000001]
[20:26:16.254]      __var hasDormant = __protocol & 0x00020000;
[20:26:16.254]        // -> [hasDormant <= 0x00000000]
[20:26:16.254]      __var protType   = __protocol & 0x0000FFFF;
[20:26:16.254]        // -> [protType <= 0x00000002]
[20:26:16.254]    </block>
[20:26:16.254]    <control if="protType == 1" while="" timeout="0" info="">
[20:26:16.254]      // if-block "protType == 1"
[20:26:16.254]        // =>  FALSE
[20:26:16.255]      // skip if-block "protType == 1"
[20:26:16.255]    </control>
[20:26:16.255]    <control if="protType == 2" while="" timeout="0" info="">
[20:26:16.255]      // if-block "protType == 2"
[20:26:16.255]        // =>  TRUE
[20:26:16.255]      <control if="isSWJ" while="" timeout="0" info="">
[20:26:16.255]        // if-block "isSWJ"
[20:26:16.255]          // =>  TRUE
[20:26:16.255]        <control if="hasDormant" while="" timeout="0" info="">
[20:26:16.256]          // if-block "hasDormant"
[20:26:16.256]            // =>  FALSE
[20:26:16.256]          // skip if-block "hasDormant"
[20:26:16.256]        </control>
[20:26:16.256]        <control if="!hasDormant" while="" timeout="0" info="">
[20:26:16.256]          // if-block "!hasDormant"
[20:26:16.257]            // =>  TRUE
[20:26:16.257]          <block atomic="false" info="">
[20:26:16.257]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:26:16.258]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:26:16.258]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:26:16.260]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:26:16.260]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:26:16.261]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:26:16.261]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:26:16.269]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:26:16.269]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:26:16.271]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:26:16.271]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:26:16.273]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:26:16.273]          </block>
[20:26:16.273]          // end if-block "!hasDormant"
[20:26:16.273]        </control>
[20:26:16.274]        // end if-block "isSWJ"
[20:26:16.274]      </control>
[20:26:16.274]      <control if="!isSWJ" while="" timeout="0" info="">
[20:26:16.274]        // if-block "!isSWJ"
[20:26:16.274]          // =>  FALSE
[20:26:16.274]        // skip if-block "!isSWJ"
[20:26:16.274]      </control>
[20:26:16.274]      <block atomic="false" info="">
[20:26:16.274]        ReadDP(0x0);
[20:26:16.277]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:26:16.277]      </block>
[20:26:16.277]      // end if-block "protType == 2"
[20:26:16.279]    </control>
[20:26:16.279]  </sequence>
[20:26:16.279]  
[20:26:16.281]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:26:16.281]  
[20:26:16.281]  <debugvars>
[20:26:16.281]    // Pre-defined
[20:26:16.282]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:26:16.282]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:26:16.282]    __dp=0x00000000
[20:26:16.282]    __ap=0x00000000
[20:26:16.282]    __traceout=0x00000000      (Trace Disabled)
[20:26:16.282]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:26:16.282]    __FlashAddr=0x00000000
[20:26:16.283]    __FlashLen=0x00000000
[20:26:16.283]    __FlashArg=0x00000000
[20:26:16.283]    __FlashOp=0x00000000
[20:26:16.283]    __Result=0x00000000
[20:26:16.283]  </debugvars>
[20:26:16.283]  
[20:26:16.283]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:26:16.283]    <block atomic="false" info="">
[20:26:16.283]      __var SW_DP_ABORT       = 0x0;
[20:26:16.283]        // -> [SW_DP_ABORT <= 0x00000000]
[20:26:16.284]      __var DP_CTRL_STAT      = 0x4;
[20:26:16.284]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:26:16.284]      __var DP_SELECT         = 0x8;
[20:26:16.284]        // -> [DP_SELECT <= 0x00000008]
[20:26:16.284]      __var powered_down      = 0;
[20:26:16.284]        // -> [powered_down <= 0x00000000]
[20:26:16.284]      WriteDP(DP_SELECT, 0x00000000);
[20:26:16.286]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:26:16.286]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:26:16.288]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:26:16.288]        // -> [powered_down <= 0x00000001]
[20:26:16.289]    </block>
[20:26:16.289]    <control if="powered_down" while="" timeout="0" info="">
[20:26:16.289]      // if-block "powered_down"
[20:26:16.289]        // =>  TRUE
[20:26:16.289]      <block atomic="false" info="">
[20:26:16.289]        Message(0, "Debug/System power-up request sent");
[20:26:16.290]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:26:16.295]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:26:16.295]      </block>
[20:26:16.295]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:26:16.295]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:26:16.297]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:26:16.297]        // while-condition  =>  FALSE
[20:26:16.297]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:26:16.297]      </control>
[20:26:16.297]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:26:16.297]        // if-block "(__protocol & 0xFFFF) == 1"
[20:26:16.298]          // =>  FALSE
[20:26:16.298]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:26:16.298]      </control>
[20:26:16.298]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:26:16.298]        // if-block "(__protocol & 0xFFFF) == 2"
[20:26:16.298]          // =>  TRUE
[20:26:16.298]        <block atomic="false" info="">
[20:26:16.298]          Message(0, "executing SWD power up");
[20:26:16.300]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:26:16.301]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:26:16.301]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:26:16.306]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:26:16.306]        </block>
[20:26:16.306]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:26:16.307]      </control>
[20:26:16.307]      // end if-block "powered_down"
[20:26:16.307]    </control>
[20:26:16.307]    <block atomic="false" info="">
[20:26:16.307]      __var DEBUG_PORT_VAL    = 0;
[20:26:16.307]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:26:16.307]      __var ACCESS_POINT_VAL  = 0;
[20:26:16.307]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:26:16.307]      __ap = 1; 
[20:26:16.308]        // -> [__ap <= 0x00000001]
[20:26:16.308]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:26:16.315]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:26:16.315]      __ap = 4;
[20:26:16.315]        // -> [__ap <= 0x00000004]
[20:26:16.315]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:26:16.319]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:26:16.320]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:26:16.320]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:26:16.321]    </block>
[20:26:16.321]    <block atomic="false" info="">
[20:26:16.322]      __var nReset = 0x80;
[20:26:16.322]        // -> [nReset <= 0x00000080]
[20:26:16.322]      __var canReadPins = 0;
[20:26:16.322]        // -> [canReadPins <= 0x00000000]
[20:26:16.323]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:26:16.325]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:26:16.325]        // -> [canReadPins <= 0x00000001]
[20:26:16.325]    </block>
[20:26:16.325]    <control if="" while="1" timeout="200" info="">
[20:26:16.326]      // while "1"  (timeout="200")
[20:26:16.326]      // while-condition  =>  TRUE
[20:26:16.326]      // while "1"  (timeout="200")
[20:26:16.326]      // while-condition  =>  TRUE
[20:26:16.326]      // while "1"  (timeout="200")
[20:26:16.326]      // while-condition  =>  TRUE
[20:26:16.326]      // while "1"  (timeout="200")
[20:26:16.326]      // while-condition  =>  TRUE
[20:26:16.326]      // while "1"  (timeout="200")
[20:26:16.327]      // while-condition  =>  TRUE
[20:26:16.327]      // while "1"  (timeout="200")
[20:26:16.327]      // while-condition  =>  TRUE
[20:26:16.327]      // while "1"  (timeout="200")
[20:26:16.327]      // while-condition  =>  TRUE
[20:26:16.328]      // while "1"  (timeout="200")
[20:26:16.328]      // while-condition  =>  TRUE
[20:26:16.328]      // while "1"  (timeout="200")
[20:26:16.328]      // while-condition  =>  TRUE
[20:26:16.328]      // while "1"  (timeout="200")
[20:26:16.328]      // while-condition  =>  TRUE
[20:26:16.328]      // while "1"  (timeout="200")
[20:26:16.328]      // while-condition  =>  TRUE
[20:26:16.329]      // while "1"  (timeout="200")
[20:26:16.329]      // while  =>  TIMEOUT
[20:26:16.329]      // end while "1"
[20:26:16.329]    </control>
[20:26:16.329]    <control if="canReadPins" while="" timeout="0" info="">
[20:26:16.329]      // if-block "canReadPins"
[20:26:16.329]        // =>  TRUE
[20:26:16.329]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:26:16.329]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:26:16.330]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:26:16.330]        // while-condition  =>  FALSE
[20:26:16.331]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:26:16.331]      </control>
[20:26:16.331]      // end if-block "canReadPins"
[20:26:16.331]    </control>
[20:26:16.331]    <control if="!canReadPins" while="" timeout="0" info="">
[20:26:16.331]      // if-block "!canReadPins"
[20:26:16.331]        // =>  FALSE
[20:26:16.332]      // skip if-block "!canReadPins"
[20:26:16.332]    </control>
[20:26:16.332]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:26:16.332]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:26:16.332]        // =>  TRUE
[20:26:16.332]      <block atomic="false" info="">
[20:26:16.332]        WriteAP(0x00, 0x190008);
[20:26:16.334]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:26:16.334]        WriteAP(0xF0, 0x01);
[20:26:16.337]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:26:16.338]      </block>
[20:26:16.338]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:26:16.338]    </control>
[20:26:16.338]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:26:16.338]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:26:16.338]        // =>  FALSE
[20:26:16.338]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:26:16.338]    </control>
[20:26:16.338]    <block atomic="false" info="">
[20:26:16.339]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:26:16.346]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:26:16.346]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:26:16.346]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:26:16.347]      __ap = 0; //lets make sure we reset the access point selection
[20:26:16.347]        // -> [__ap <= 0x00000000]
[20:26:16.348]    </block>
[20:26:16.348]  </sequence>
[20:26:16.348]  
[20:26:16.376]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:26:16.376]  
[20:26:16.376]  <debugvars>
[20:26:16.377]    // Pre-defined
[20:26:16.377]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:26:16.377]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:26:16.377]    __dp=0x00000000
[20:26:16.377]    __ap=0x00000000
[20:26:16.377]    __traceout=0x00000000      (Trace Disabled)
[20:26:16.377]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:26:16.377]    __FlashAddr=0x00000000
[20:26:16.377]    __FlashLen=0x00000000
[20:26:16.377]    __FlashArg=0x00000000
[20:26:16.378]    __FlashOp=0x00000000
[20:26:16.378]    __Result=0x00000000
[20:26:16.378]  </debugvars>
[20:26:16.378]  
[20:26:16.378]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:26:16.378]    <block atomic="false" info="">
[20:26:16.379]      __var deviceID = 0;
[20:26:16.379]        // -> [deviceID <= 0x00000000]
[20:26:16.379]      __var version = 0;
[20:26:16.379]        // -> [version <= 0x00000000]
[20:26:16.379]      __var partNum = 0;
[20:26:16.379]        // -> [partNum <= 0x00000000]
[20:26:16.379]      __var manuf = 0;
[20:26:16.379]        // -> [manuf <= 0x00000000]
[20:26:16.379]      __var isMSPM0G1X0X_G3X0X = 0;
[20:26:16.379]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:26:16.379]      __var isProduction = 0;
[20:26:16.380]        // -> [isProduction <= 0x00000000]
[20:26:16.380]      __var continueId = 0;
[20:26:16.380]        // -> [continueId <= 0x00000000]
[20:26:16.380]      deviceID =   Read32(0x41C40004);
[20:26:16.386]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:26:16.386]        // -> [deviceID <= 0x2BB8802F]
[20:26:16.386]      version = deviceID >> 28;
[20:26:16.386]        // -> [version <= 0x00000002]
[20:26:16.387]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:26:16.387]        // -> [partNum <= 0x0000BB88]
[20:26:16.387]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:26:16.387]        // -> [manuf <= 0x00000017]
[20:26:16.387]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:26:16.387]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:26:16.387]      isProduction = (version > 0);
[20:26:16.387]        // -> [isProduction <= 0x00000001]
[20:26:16.388]    </block>
[20:26:16.388]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:26:16.388]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:26:16.388]        // =>  FALSE
[20:26:16.388]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:26:16.388]    </control>
[20:26:16.389]    <control if="continueId == 4" while="" timeout="0" info="">
[20:26:16.389]      // if-block "continueId == 4"
[20:26:16.389]        // =>  FALSE
[20:26:16.389]      // skip if-block "continueId == 4"
[20:26:16.389]    </control>
[20:26:16.389]    <control if="!isProduction" while="" timeout="0" info="">
[20:26:16.389]      // if-block "!isProduction"
[20:26:16.389]        // =>  FALSE
[20:26:16.389]      // skip if-block "!isProduction"
[20:26:16.390]    </control>
[20:26:16.390]  </sequence>
[20:26:16.390]  
[20:28:34.514]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:28:34.514]  
[20:28:34.514]  <debugvars>
[20:28:34.514]    // Pre-defined
[20:28:34.514]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:28:34.514]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:28:34.514]    __dp=0x00000000
[20:28:34.515]    __ap=0x00000000
[20:28:34.515]    __traceout=0x00000000      (Trace Disabled)
[20:28:34.515]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:28:34.515]    __FlashAddr=0x00000000
[20:28:34.515]    __FlashLen=0x00000000
[20:28:34.515]    __FlashArg=0x00000000
[20:28:34.515]    __FlashOp=0x00000000
[20:28:34.516]    __Result=0x00000000
[20:28:34.516]  </debugvars>
[20:28:34.516]  
[20:28:34.516]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:28:34.516]    <block atomic="false" info="">
[20:28:34.516]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:28:34.516]        // -> [isSWJ <= 0x00000001]
[20:28:34.516]      __var hasDormant = __protocol & 0x00020000;
[20:28:34.517]        // -> [hasDormant <= 0x00000000]
[20:28:34.517]      __var protType   = __protocol & 0x0000FFFF;
[20:28:34.517]        // -> [protType <= 0x00000002]
[20:28:34.517]    </block>
[20:28:34.517]    <control if="protType == 1" while="" timeout="0" info="">
[20:28:34.517]      // if-block "protType == 1"
[20:28:34.517]        // =>  FALSE
[20:28:34.517]      // skip if-block "protType == 1"
[20:28:34.517]    </control>
[20:28:34.517]    <control if="protType == 2" while="" timeout="0" info="">
[20:28:34.517]      // if-block "protType == 2"
[20:28:34.518]        // =>  TRUE
[20:28:34.518]      <control if="isSWJ" while="" timeout="0" info="">
[20:28:34.518]        // if-block "isSWJ"
[20:28:34.518]          // =>  TRUE
[20:28:34.518]        <control if="hasDormant" while="" timeout="0" info="">
[20:28:34.518]          // if-block "hasDormant"
[20:28:34.519]            // =>  FALSE
[20:28:34.519]          // skip if-block "hasDormant"
[20:28:34.519]        </control>
[20:28:34.519]        <control if="!hasDormant" while="" timeout="0" info="">
[20:28:34.519]          // if-block "!hasDormant"
[20:28:34.519]            // =>  TRUE
[20:28:34.519]          <block atomic="false" info="">
[20:28:34.519]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:28:34.524]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:28:34.525]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:28:34.526]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:28:34.526]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:28:34.528]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:28:34.528]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:28:34.532]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:28:34.533]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:28:34.534]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:28:34.534]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:28:34.536]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:28:34.536]          </block>
[20:28:34.536]          // end if-block "!hasDormant"
[20:28:34.536]        </control>
[20:28:34.536]        // end if-block "isSWJ"
[20:28:34.536]      </control>
[20:28:34.536]      <control if="!isSWJ" while="" timeout="0" info="">
[20:28:34.536]        // if-block "!isSWJ"
[20:28:34.536]          // =>  FALSE
[20:28:34.536]        // skip if-block "!isSWJ"
[20:28:34.536]      </control>
[20:28:34.537]      <block atomic="false" info="">
[20:28:34.537]        ReadDP(0x0);
[20:28:34.545]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:28:34.545]      </block>
[20:28:34.545]      // end if-block "protType == 2"
[20:28:34.545]    </control>
[20:28:34.545]  </sequence>
[20:28:34.545]  
[20:28:34.548]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:28:34.548]  
[20:28:34.549]  <debugvars>
[20:28:34.549]    // Pre-defined
[20:28:34.549]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:28:34.549]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:28:34.549]    __dp=0x00000000
[20:28:34.549]    __ap=0x00000000
[20:28:34.549]    __traceout=0x00000000      (Trace Disabled)
[20:28:34.549]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:28:34.549]    __FlashAddr=0x00000000
[20:28:34.549]    __FlashLen=0x00000000
[20:28:34.550]    __FlashArg=0x00000000
[20:28:34.550]    __FlashOp=0x00000000
[20:28:34.550]    __Result=0x00000000
[20:28:34.550]  </debugvars>
[20:28:34.550]  
[20:28:34.550]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:28:34.550]    <block atomic="false" info="">
[20:28:34.550]      __var SW_DP_ABORT       = 0x0;
[20:28:34.550]        // -> [SW_DP_ABORT <= 0x00000000]
[20:28:34.550]      __var DP_CTRL_STAT      = 0x4;
[20:28:34.550]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:28:34.551]      __var DP_SELECT         = 0x8;
[20:28:34.551]        // -> [DP_SELECT <= 0x00000008]
[20:28:34.551]      __var powered_down      = 0;
[20:28:34.551]        // -> [powered_down <= 0x00000000]
[20:28:34.551]      WriteDP(DP_SELECT, 0x00000000);
[20:28:34.552]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:28:34.552]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:28:34.559]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:28:34.559]        // -> [powered_down <= 0x00000001]
[20:28:34.559]    </block>
[20:28:34.559]    <control if="powered_down" while="" timeout="0" info="">
[20:28:34.559]      // if-block "powered_down"
[20:28:34.559]        // =>  TRUE
[20:28:34.559]      <block atomic="false" info="">
[20:28:34.559]        Message(0, "Debug/System power-up request sent");
[20:28:34.561]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:28:34.563]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:28:34.563]      </block>
[20:28:34.563]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:28:34.563]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:28:34.564]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:28:34.565]        // while-condition  =>  FALSE
[20:28:34.565]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:28:34.565]      </control>
[20:28:34.565]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:28:34.565]        // if-block "(__protocol & 0xFFFF) == 1"
[20:28:34.565]          // =>  FALSE
[20:28:34.565]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:28:34.566]      </control>
[20:28:34.566]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:28:34.566]        // if-block "(__protocol & 0xFFFF) == 2"
[20:28:34.566]          // =>  TRUE
[20:28:34.566]        <block atomic="false" info="">
[20:28:34.566]          Message(0, "executing SWD power up");
[20:28:34.569]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:28:34.570]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:28:34.570]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:28:34.576]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:28:34.576]        </block>
[20:28:34.576]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:28:34.576]      </control>
[20:28:34.576]      // end if-block "powered_down"
[20:28:34.577]    </control>
[20:28:34.577]    <block atomic="false" info="">
[20:28:34.577]      __var DEBUG_PORT_VAL    = 0;
[20:28:34.577]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:28:34.577]      __var ACCESS_POINT_VAL  = 0;
[20:28:34.577]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:28:34.577]      __ap = 1; 
[20:28:34.577]        // -> [__ap <= 0x00000001]
[20:28:34.577]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:28:34.580]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:28:34.581]      __ap = 4;
[20:28:34.581]        // -> [__ap <= 0x00000004]
[20:28:34.581]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:28:34.584]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:28:34.584]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:28:34.584]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:28:34.586]    </block>
[20:28:34.586]    <block atomic="false" info="">
[20:28:34.586]      __var nReset = 0x80;
[20:28:34.586]        // -> [nReset <= 0x00000080]
[20:28:34.587]      __var canReadPins = 0;
[20:28:34.587]        // -> [canReadPins <= 0x00000000]
[20:28:34.587]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:28:34.588]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:28:34.589]        // -> [canReadPins <= 0x00000001]
[20:28:34.589]    </block>
[20:28:34.589]    <control if="" while="1" timeout="200" info="">
[20:28:34.589]      // while "1"  (timeout="200")
[20:28:34.589]      // while-condition  =>  TRUE
[20:28:34.589]      // while "1"  (timeout="200")
[20:28:34.590]      // while-condition  =>  TRUE
[20:28:34.590]      // while "1"  (timeout="200")
[20:28:34.590]      // while-condition  =>  TRUE
[20:28:34.590]      // while "1"  (timeout="200")
[20:28:34.590]      // while-condition  =>  TRUE
[20:28:34.590]      // while "1"  (timeout="200")
[20:28:34.590]      // while-condition  =>  TRUE
[20:28:34.591]      // while "1"  (timeout="200")
[20:28:34.591]      // while-condition  =>  TRUE
[20:28:34.591]      // while "1"  (timeout="200")
[20:28:34.591]      // while-condition  =>  TRUE
[20:28:34.591]      // while "1"  (timeout="200")
[20:28:34.591]      // while-condition  =>  TRUE
[20:28:34.591]      // while "1"  (timeout="200")
[20:28:34.591]      // while-condition  =>  TRUE
[20:28:34.591]      // while "1"  (timeout="200")
[20:28:34.591]      // while-condition  =>  TRUE
[20:28:34.592]      // while "1"  (timeout="200")
[20:28:34.592]      // while-condition  =>  TRUE
[20:28:34.593]      // while "1"  (timeout="200")
[20:28:34.593]      // while-condition  =>  TRUE
[20:28:34.593]      // while "1"  (timeout="200")
[20:28:34.593]      // while-condition  =>  TRUE
[20:28:34.593]      // while "1"  (timeout="200")
[20:28:34.593]      // while-condition  =>  TRUE
[20:28:34.593]      // while "1"  (timeout="200")
[20:28:34.593]      // while-condition  =>  TRUE
[20:28:34.593]      // while "1"  (timeout="200")
[20:28:34.593]      // while-condition  =>  TRUE
[20:28:34.593]      // while "1"  (timeout="200")
[20:28:34.593]      // while-condition  =>  TRUE
[20:28:34.593]      // while "1"  (timeout="200")
[20:28:34.593]      // while-condition  =>  TRUE
[20:28:34.593]      // while "1"  (timeout="200")
[20:28:34.593]      // while-condition  =>  TRUE
[20:28:34.594]      // while "1"  (timeout="200")
[20:28:34.594]      // while-condition  =>  TRUE
[20:28:34.594]      // while "1"  (timeout="200")
[20:28:34.594]      // while-condition  =>  TRUE
[20:28:34.594]      // while "1"  (timeout="200")
[20:28:34.594]      // while-condition  =>  TRUE
[20:28:34.594]      // while "1"  (timeout="200")
[20:28:34.594]      // while-condition  =>  TRUE
[20:28:34.594]      // while "1"  (timeout="200")
[20:28:34.594]      // while-condition  =>  TRUE
[20:28:34.596]      // while "1"  (timeout="200")
[20:28:34.596]      // while  =>  TIMEOUT
[20:28:34.596]      // end while "1"
[20:28:34.596]    </control>
[20:28:34.596]    <control if="canReadPins" while="" timeout="0" info="">
[20:28:34.596]      // if-block "canReadPins"
[20:28:34.596]        // =>  TRUE
[20:28:34.596]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:28:34.596]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:28:34.598]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:28:34.598]        // while-condition  =>  FALSE
[20:28:34.598]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:28:34.598]      </control>
[20:28:34.598]      // end if-block "canReadPins"
[20:28:34.598]    </control>
[20:28:34.598]    <control if="!canReadPins" while="" timeout="0" info="">
[20:28:34.599]      // if-block "!canReadPins"
[20:28:34.599]        // =>  FALSE
[20:28:34.599]      // skip if-block "!canReadPins"
[20:28:34.599]    </control>
[20:28:34.599]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:28:34.599]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:28:34.599]        // =>  TRUE
[20:28:34.599]      <block atomic="false" info="">
[20:28:34.599]        WriteAP(0x00, 0x190008);
[20:28:34.601]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:28:34.601]        WriteAP(0xF0, 0x01);
[20:28:34.604]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:28:34.604]      </block>
[20:28:34.604]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:28:34.604]    </control>
[20:28:34.605]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:28:34.605]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:28:34.605]        // =>  FALSE
[20:28:34.605]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:28:34.605]    </control>
[20:28:34.605]    <block atomic="false" info="">
[20:28:34.605]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:28:34.612]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:28:34.612]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:28:34.613]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:28:34.615]      __ap = 0; //lets make sure we reset the access point selection
[20:28:34.615]        // -> [__ap <= 0x00000000]
[20:28:34.616]    </block>
[20:28:34.616]  </sequence>
[20:28:34.616]  
[20:28:34.643]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:28:34.643]  
[20:28:34.643]  <debugvars>
[20:28:34.643]    // Pre-defined
[20:28:34.643]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:28:34.643]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:28:34.643]    __dp=0x00000000
[20:28:34.645]    __ap=0x00000000
[20:28:34.645]    __traceout=0x00000000      (Trace Disabled)
[20:28:34.645]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:28:34.645]    __FlashAddr=0x00000000
[20:28:34.645]    __FlashLen=0x00000000
[20:28:34.645]    __FlashArg=0x00000000
[20:28:34.645]    __FlashOp=0x00000000
[20:28:34.645]    __Result=0x00000000
[20:28:34.646]  </debugvars>
[20:28:34.646]  
[20:28:34.646]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:28:34.646]    <block atomic="false" info="">
[20:28:34.646]      __var deviceID = 0;
[20:28:34.646]        // -> [deviceID <= 0x00000000]
[20:28:34.646]      __var version = 0;
[20:28:34.646]        // -> [version <= 0x00000000]
[20:28:34.646]      __var partNum = 0;
[20:28:34.647]        // -> [partNum <= 0x00000000]
[20:28:34.647]      __var manuf = 0;
[20:28:34.647]        // -> [manuf <= 0x00000000]
[20:28:34.647]      __var isMSPM0G1X0X_G3X0X = 0;
[20:28:34.647]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:28:34.647]      __var isProduction = 0;
[20:28:34.647]        // -> [isProduction <= 0x00000000]
[20:28:34.647]      __var continueId = 0;
[20:28:34.647]        // -> [continueId <= 0x00000000]
[20:28:34.647]      deviceID =   Read32(0x41C40004);
[20:28:34.651]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:28:34.652]        // -> [deviceID <= 0x2BB8802F]
[20:28:34.652]      version = deviceID >> 28;
[20:28:34.652]        // -> [version <= 0x00000002]
[20:28:34.652]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:28:34.652]        // -> [partNum <= 0x0000BB88]
[20:28:34.652]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:28:34.653]        // -> [manuf <= 0x00000017]
[20:28:34.653]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:28:34.653]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:28:34.653]      isProduction = (version > 0);
[20:28:34.653]        // -> [isProduction <= 0x00000001]
[20:28:34.653]    </block>
[20:28:34.653]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:28:34.653]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:28:34.653]        // =>  FALSE
[20:28:34.653]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:28:34.654]    </control>
[20:28:34.654]    <control if="continueId == 4" while="" timeout="0" info="">
[20:28:34.654]      // if-block "continueId == 4"
[20:28:34.654]        // =>  FALSE
[20:28:34.654]      // skip if-block "continueId == 4"
[20:28:34.654]    </control>
[20:28:34.654]    <control if="!isProduction" while="" timeout="0" info="">
[20:28:34.654]      // if-block "!isProduction"
[20:28:34.655]        // =>  FALSE
[20:28:34.655]      // skip if-block "!isProduction"
[20:28:34.655]    </control>
[20:28:34.655]  </sequence>
[20:28:34.655]  
[20:30:49.756]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:30:49.756]  
[20:30:49.764]  <debugvars>
[20:30:49.764]    // Pre-defined
[20:30:49.765]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:30:49.765]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:30:49.765]    __dp=0x00000000
[20:30:49.765]    __ap=0x00000000
[20:30:49.765]    __traceout=0x00000000      (Trace Disabled)
[20:30:49.765]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:30:49.765]    __FlashAddr=0x00000000
[20:30:49.766]    __FlashLen=0x00000000
[20:30:49.766]    __FlashArg=0x00000000
[20:30:49.766]    __FlashOp=0x00000000
[20:30:49.766]    __Result=0x00000000
[20:30:49.766]  </debugvars>
[20:30:49.766]  
[20:30:49.766]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:30:49.766]    <block atomic="false" info="">
[20:30:49.766]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:30:49.766]        // -> [isSWJ <= 0x00000001]
[20:30:49.767]      __var hasDormant = __protocol & 0x00020000;
[20:30:49.767]        // -> [hasDormant <= 0x00000000]
[20:30:49.767]      __var protType   = __protocol & 0x0000FFFF;
[20:30:49.767]        // -> [protType <= 0x00000002]
[20:30:49.767]    </block>
[20:30:49.767]    <control if="protType == 1" while="" timeout="0" info="">
[20:30:49.768]      // if-block "protType == 1"
[20:30:49.768]        // =>  FALSE
[20:30:49.768]      // skip if-block "protType == 1"
[20:30:49.768]    </control>
[20:30:49.768]    <control if="protType == 2" while="" timeout="0" info="">
[20:30:49.768]      // if-block "protType == 2"
[20:30:49.768]        // =>  TRUE
[20:30:49.769]      <control if="isSWJ" while="" timeout="0" info="">
[20:30:49.769]        // if-block "isSWJ"
[20:30:49.769]          // =>  TRUE
[20:30:49.769]        <control if="hasDormant" while="" timeout="0" info="">
[20:30:49.769]          // if-block "hasDormant"
[20:30:49.769]            // =>  FALSE
[20:30:49.769]          // skip if-block "hasDormant"
[20:30:49.769]        </control>
[20:30:49.770]        <control if="!hasDormant" while="" timeout="0" info="">
[20:30:49.770]          // if-block "!hasDormant"
[20:30:49.770]            // =>  TRUE
[20:30:49.770]          <block atomic="false" info="">
[20:30:49.770]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:30:49.776]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:30:49.776]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:30:49.777]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:30:49.778]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:30:49.791]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:30:49.792]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:30:49.794]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:30:49.794]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:30:49.796]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:30:49.796]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:30:49.803]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:30:49.803]          </block>
[20:30:49.803]          // end if-block "!hasDormant"
[20:30:49.803]        </control>
[20:30:49.803]        // end if-block "isSWJ"
[20:30:49.804]      </control>
[20:30:49.804]      <control if="!isSWJ" while="" timeout="0" info="">
[20:30:49.804]        // if-block "!isSWJ"
[20:30:49.804]          // =>  FALSE
[20:30:49.804]        // skip if-block "!isSWJ"
[20:30:49.804]      </control>
[20:30:49.804]      <block atomic="false" info="">
[20:30:49.804]        ReadDP(0x0);
[20:30:49.806]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:30:49.806]      </block>
[20:30:49.806]      // end if-block "protType == 2"
[20:30:49.807]    </control>
[20:30:49.807]  </sequence>
[20:30:49.807]  
[20:30:49.822]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:30:49.822]  
[20:30:49.822]  <debugvars>
[20:30:49.822]    // Pre-defined
[20:30:49.823]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:30:49.823]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:30:49.823]    __dp=0x00000000
[20:30:49.823]    __ap=0x00000000
[20:30:49.823]    __traceout=0x00000000      (Trace Disabled)
[20:30:49.823]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:30:49.823]    __FlashAddr=0x00000000
[20:30:49.823]    __FlashLen=0x00000000
[20:30:49.823]    __FlashArg=0x00000000
[20:30:49.824]    __FlashOp=0x00000000
[20:30:49.824]    __Result=0x00000000
[20:30:49.824]  </debugvars>
[20:30:49.824]  
[20:30:49.824]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:30:49.824]    <block atomic="false" info="">
[20:30:49.824]      __var SW_DP_ABORT       = 0x0;
[20:30:49.824]        // -> [SW_DP_ABORT <= 0x00000000]
[20:30:49.824]      __var DP_CTRL_STAT      = 0x4;
[20:30:49.824]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:30:49.825]      __var DP_SELECT         = 0x8;
[20:30:49.825]        // -> [DP_SELECT <= 0x00000008]
[20:30:49.825]      __var powered_down      = 0;
[20:30:49.825]        // -> [powered_down <= 0x00000000]
[20:30:49.825]      WriteDP(DP_SELECT, 0x00000000);
[20:30:49.844]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:30:49.845]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:30:49.854]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:30:49.854]        // -> [powered_down <= 0x00000001]
[20:30:49.854]    </block>
[20:30:49.854]    <control if="powered_down" while="" timeout="0" info="">
[20:30:49.855]      // if-block "powered_down"
[20:30:49.855]        // =>  TRUE
[20:30:49.855]      <block atomic="false" info="">
[20:30:49.855]        Message(0, "Debug/System power-up request sent");
[20:30:49.857]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:30:49.860]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:30:49.860]      </block>
[20:30:49.861]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:30:49.861]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:30:49.877]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:30:49.877]        // while-condition  =>  FALSE
[20:30:49.877]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:30:49.877]      </control>
[20:30:49.879]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:30:49.879]        // if-block "(__protocol & 0xFFFF) == 1"
[20:30:49.879]          // =>  FALSE
[20:30:49.879]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:30:49.879]      </control>
[20:30:49.879]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:30:49.879]        // if-block "(__protocol & 0xFFFF) == 2"
[20:30:49.879]          // =>  TRUE
[20:30:49.879]        <block atomic="false" info="">
[20:30:49.880]          Message(0, "executing SWD power up");
[20:30:49.881]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:30:49.888]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:30:49.888]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:30:49.890]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:30:49.890]        </block>
[20:30:49.890]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:30:49.891]      </control>
[20:30:49.891]      // end if-block "powered_down"
[20:30:49.891]    </control>
[20:30:49.891]    <block atomic="false" info="">
[20:30:49.891]      __var DEBUG_PORT_VAL    = 0;
[20:30:49.891]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:30:49.891]      __var ACCESS_POINT_VAL  = 0;
[20:30:49.891]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:30:49.891]      __ap = 1; 
[20:30:49.892]        // -> [__ap <= 0x00000001]
[20:30:49.892]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:30:49.909]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:30:49.910]      __ap = 4;
[20:30:49.910]        // -> [__ap <= 0x00000004]
[20:30:49.910]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:30:49.919]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:30:49.919]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:30:49.919]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:30:49.921]    </block>
[20:30:49.922]    <block atomic="false" info="">
[20:30:49.922]      __var nReset = 0x80;
[20:30:49.922]        // -> [nReset <= 0x00000080]
[20:30:49.922]      __var canReadPins = 0;
[20:30:49.922]        // -> [canReadPins <= 0x00000000]
[20:30:49.922]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:30:49.927]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:30:49.928]        // -> [canReadPins <= 0x00000001]
[20:30:49.928]    </block>
[20:30:49.928]    <control if="" while="1" timeout="200" info="">
[20:30:49.928]      // while "1"  (timeout="200")
[20:30:49.928]      // while-condition  =>  TRUE
[20:30:49.928]      // while "1"  (timeout="200")
[20:30:49.928]      // while-condition  =>  TRUE
[20:30:49.928]      // while "1"  (timeout="200")
[20:30:49.929]      // while-condition  =>  TRUE
[20:30:49.929]      // while "1"  (timeout="200")
[20:30:49.929]      // while-condition  =>  TRUE
[20:30:49.929]      // while "1"  (timeout="200")
[20:30:49.929]      // while-condition  =>  TRUE
[20:30:49.929]      // while "1"  (timeout="200")
[20:30:49.929]      // while-condition  =>  TRUE
[20:30:49.929]      // while "1"  (timeout="200")
[20:30:49.929]      // while-condition  =>  TRUE
[20:30:49.929]      // while "1"  (timeout="200")
[20:30:49.929]      // while-condition  =>  TRUE
[20:30:49.930]      // while "1"  (timeout="200")
[20:30:49.930]      // while-condition  =>  TRUE
[20:30:49.930]      // while "1"  (timeout="200")
[20:30:49.930]      // while-condition  =>  TRUE
[20:30:49.930]      // while "1"  (timeout="200")
[20:30:49.930]      // while-condition  =>  TRUE
[20:30:49.930]      // while "1"  (timeout="200")
[20:30:49.930]      // while-condition  =>  TRUE
[20:30:49.930]      // while "1"  (timeout="200")
[20:30:49.931]      // while-condition  =>  TRUE
[20:30:49.931]      // while "1"  (timeout="200")
[20:30:49.931]      // while-condition  =>  TRUE
[20:30:49.931]      // while "1"  (timeout="200")
[20:30:49.931]      // while-condition  =>  TRUE
[20:30:49.931]      // while "1"  (timeout="200")
[20:30:49.931]      // while-condition  =>  TRUE
[20:30:49.931]      // while "1"  (timeout="200")
[20:30:49.931]      // while-condition  =>  TRUE
[20:30:49.931]      // while "1"  (timeout="200")
[20:30:49.932]      // while-condition  =>  TRUE
[20:30:49.932]      // while "1"  (timeout="200")
[20:30:49.932]      // while-condition  =>  TRUE
[20:30:49.932]      // while "1"  (timeout="200")
[20:30:49.932]      // while-condition  =>  TRUE
[20:30:49.932]      // while "1"  (timeout="200")
[20:30:49.932]      // while-condition  =>  TRUE
[20:30:49.932]      // while "1"  (timeout="200")
[20:30:49.933]      // while-condition  =>  TRUE
[20:30:49.933]      // while "1"  (timeout="200")
[20:30:49.933]      // while-condition  =>  TRUE
[20:30:49.933]      // while "1"  (timeout="200")
[20:30:49.933]      // while-condition  =>  TRUE
[20:30:49.933]      // while "1"  (timeout="200")
[20:30:49.933]      // while-condition  =>  TRUE
[20:30:49.933]      // while "1"  (timeout="200")
[20:30:49.934]      // while-condition  =>  TRUE
[20:30:49.934]      // while "1"  (timeout="200")
[20:30:49.934]      // while-condition  =>  TRUE
[20:30:49.934]      // while "1"  (timeout="200")
[20:30:49.934]      // while-condition  =>  TRUE
[20:30:49.934]      // while "1"  (timeout="200")
[20:30:49.935]      // while-condition  =>  TRUE
[20:30:49.935]      // while "1"  (timeout="200")
[20:30:49.935]      // while-condition  =>  TRUE
[20:30:49.935]      // while "1"  (timeout="200")
[20:30:49.935]      // while-condition  =>  TRUE
[20:30:49.935]      // while "1"  (timeout="200")
[20:30:49.935]      // while-condition  =>  TRUE
[20:30:49.935]      // while "1"  (timeout="200")
[20:30:49.935]      // while-condition  =>  TRUE
[20:30:49.935]      // while "1"  (timeout="200")
[20:30:49.935]      // while-condition  =>  TRUE
[20:30:49.936]      // while "1"  (timeout="200")
[20:30:49.936]      // while-condition  =>  TRUE
[20:30:49.936]      // while "1"  (timeout="200")
[20:30:49.936]      // while-condition  =>  TRUE
[20:30:49.936]      // while "1"  (timeout="200")
[20:30:49.936]      // while-condition  =>  TRUE
[20:30:49.936]      // while "1"  (timeout="200")
[20:30:49.936]      // while-condition  =>  TRUE
[20:30:49.936]      // while "1"  (timeout="200")
[20:30:49.936]      // while-condition  =>  TRUE
[20:30:49.936]      // while "1"  (timeout="200")
[20:30:49.936]      // while-condition  =>  TRUE
[20:30:49.936]      // while "1"  (timeout="200")
[20:30:49.936]      // while-condition  =>  TRUE
[20:30:49.938]      // while "1"  (timeout="200")
[20:30:49.938]      // while-condition  =>  TRUE
[20:30:49.938]      // while "1"  (timeout="200")
[20:30:49.938]      // while-condition  =>  TRUE
[20:30:49.938]      // while "1"  (timeout="200")
[20:30:49.938]      // while-condition  =>  TRUE
[20:30:49.938]      // while "1"  (timeout="200")
[20:30:49.938]      // while-condition  =>  TRUE
[20:30:49.938]      // while "1"  (timeout="200")
[20:30:49.938]      // while-condition  =>  TRUE
[20:30:49.938]      // while "1"  (timeout="200")
[20:30:49.938]      // while-condition  =>  TRUE
[20:30:49.939]      // while "1"  (timeout="200")
[20:30:49.939]      // while  =>  TIMEOUT
[20:30:49.939]      // end while "1"
[20:30:49.939]    </control>
[20:30:49.939]    <control if="canReadPins" while="" timeout="0" info="">
[20:30:49.939]      // if-block "canReadPins"
[20:30:49.939]        // =>  TRUE
[20:30:49.939]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:30:49.939]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:30:49.971]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:30:49.971]        // while-condition  =>  FALSE
[20:30:49.971]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:30:49.972]      </control>
[20:30:49.972]      // end if-block "canReadPins"
[20:30:49.972]    </control>
[20:30:49.972]    <control if="!canReadPins" while="" timeout="0" info="">
[20:30:49.972]      // if-block "!canReadPins"
[20:30:49.972]        // =>  FALSE
[20:30:49.972]      // skip if-block "!canReadPins"
[20:30:49.972]    </control>
[20:30:49.973]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:30:49.973]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:30:49.973]        // =>  TRUE
[20:30:49.973]      <block atomic="false" info="">
[20:30:49.973]        WriteAP(0x00, 0x190008);
[20:30:49.980]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:30:49.980]        WriteAP(0xF0, 0x01);
[20:30:50.003]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:30:50.003]      </block>
[20:30:50.003]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:30:50.003]    </control>
[20:30:50.003]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:30:50.003]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:30:50.003]        // =>  FALSE
[20:30:50.003]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:30:50.003]    </control>
[20:30:50.004]    <block atomic="false" info="">
[20:30:50.004]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:30:50.008]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:30:50.008]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:30:50.008]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:30:50.010]      __ap = 0; //lets make sure we reset the access point selection
[20:30:50.010]        // -> [__ap <= 0x00000000]
[20:30:50.010]    </block>
[20:30:50.010]  </sequence>
[20:30:50.010]  
[20:30:50.100]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:30:50.100]  
[20:30:50.100]  <debugvars>
[20:30:50.100]    // Pre-defined
[20:30:50.101]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:30:50.101]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:30:50.101]    __dp=0x00000000
[20:30:50.101]    __ap=0x00000000
[20:30:50.101]    __traceout=0x00000000      (Trace Disabled)
[20:30:50.101]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:30:50.101]    __FlashAddr=0x00000000
[20:30:50.101]    __FlashLen=0x00000000
[20:30:50.102]    __FlashArg=0x00000000
[20:30:50.102]    __FlashOp=0x00000000
[20:30:50.102]    __Result=0x00000000
[20:30:50.102]  </debugvars>
[20:30:50.102]  
[20:30:50.102]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:30:50.102]    <block atomic="false" info="">
[20:30:50.103]      __var deviceID = 0;
[20:30:50.103]        // -> [deviceID <= 0x00000000]
[20:30:50.103]      __var version = 0;
[20:30:50.103]        // -> [version <= 0x00000000]
[20:30:50.103]      __var partNum = 0;
[20:30:50.103]        // -> [partNum <= 0x00000000]
[20:30:50.103]      __var manuf = 0;
[20:30:50.103]        // -> [manuf <= 0x00000000]
[20:30:50.105]      __var isMSPM0G1X0X_G3X0X = 0;
[20:30:50.105]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:30:50.105]      __var isProduction = 0;
[20:30:50.105]        // -> [isProduction <= 0x00000000]
[20:30:50.105]      __var continueId = 0;
[20:30:50.105]        // -> [continueId <= 0x00000000]
[20:30:50.105]      deviceID =   Read32(0x41C40004);
[20:30:50.117]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:30:50.118]        // -> [deviceID <= 0x2BB8802F]
[20:30:50.118]      version = deviceID >> 28;
[20:30:50.118]        // -> [version <= 0x00000002]
[20:30:50.118]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:30:50.118]        // -> [partNum <= 0x0000BB88]
[20:30:50.118]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:30:50.118]        // -> [manuf <= 0x00000017]
[20:30:50.118]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:30:50.118]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:30:50.118]      isProduction = (version > 0);
[20:30:50.120]        // -> [isProduction <= 0x00000001]
[20:30:50.120]    </block>
[20:30:50.120]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:30:50.120]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:30:50.120]        // =>  FALSE
[20:30:50.120]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:30:50.120]    </control>
[20:30:50.120]    <control if="continueId == 4" while="" timeout="0" info="">
[20:30:50.120]      // if-block "continueId == 4"
[20:30:50.120]        // =>  FALSE
[20:30:50.120]      // skip if-block "continueId == 4"
[20:30:50.121]    </control>
[20:30:50.121]    <control if="!isProduction" while="" timeout="0" info="">
[20:30:50.121]      // if-block "!isProduction"
[20:30:50.121]        // =>  FALSE
[20:30:50.121]      // skip if-block "!isProduction"
[20:30:50.121]    </control>
[20:30:50.121]  </sequence>
[20:30:50.121]  
[20:46:53.676]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:46:53.676]  
[20:46:53.685]  <debugvars>
[20:46:53.685]    // Pre-defined
[20:46:53.686]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:46:53.686]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:46:53.686]    __dp=0x00000000
[20:46:53.686]    __ap=0x00000000
[20:46:53.686]    __traceout=0x00000000      (Trace Disabled)
[20:46:53.686]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:46:53.686]    __FlashAddr=0x00000000
[20:46:53.686]    __FlashLen=0x00000000
[20:46:53.686]    __FlashArg=0x00000000
[20:46:53.686]    __FlashOp=0x00000000
[20:46:53.686]    __Result=0x00000000
[20:46:53.686]  </debugvars>
[20:46:53.686]  
[20:46:53.686]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:46:53.686]    <block atomic="false" info="">
[20:46:53.687]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:46:53.687]        // -> [isSWJ <= 0x00000001]
[20:46:53.687]      __var hasDormant = __protocol & 0x00020000;
[20:46:53.687]        // -> [hasDormant <= 0x00000000]
[20:46:53.687]      __var protType   = __protocol & 0x0000FFFF;
[20:46:53.687]        // -> [protType <= 0x00000002]
[20:46:53.688]    </block>
[20:46:53.688]    <control if="protType == 1" while="" timeout="0" info="">
[20:46:53.688]      // if-block "protType == 1"
[20:46:53.688]        // =>  FALSE
[20:46:53.688]      // skip if-block "protType == 1"
[20:46:53.688]    </control>
[20:46:53.688]    <control if="protType == 2" while="" timeout="0" info="">
[20:46:53.689]      // if-block "protType == 2"
[20:46:53.689]        // =>  TRUE
[20:46:53.689]      <control if="isSWJ" while="" timeout="0" info="">
[20:46:53.689]        // if-block "isSWJ"
[20:46:53.689]          // =>  TRUE
[20:46:53.689]        <control if="hasDormant" while="" timeout="0" info="">
[20:46:53.689]          // if-block "hasDormant"
[20:46:53.689]            // =>  FALSE
[20:46:53.689]          // skip if-block "hasDormant"
[20:46:53.689]        </control>
[20:46:53.689]        <control if="!hasDormant" while="" timeout="0" info="">
[20:46:53.690]          // if-block "!hasDormant"
[20:46:53.690]            // =>  TRUE
[20:46:53.690]          <block atomic="false" info="">
[20:46:53.690]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:46:53.692]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:46:53.692]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:46:53.697]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:46:53.697]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:46:53.699]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:46:53.699]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:46:53.700]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:46:53.701]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:46:53.702]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:46:53.702]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:46:53.704]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:46:53.704]          </block>
[20:46:53.704]          // end if-block "!hasDormant"
[20:46:53.704]        </control>
[20:46:53.704]        // end if-block "isSWJ"
[20:46:53.704]      </control>
[20:46:53.704]      <control if="!isSWJ" while="" timeout="0" info="">
[20:46:53.704]        // if-block "!isSWJ"
[20:46:53.704]          // =>  FALSE
[20:46:53.704]        // skip if-block "!isSWJ"
[20:46:53.704]      </control>
[20:46:53.705]      <block atomic="false" info="">
[20:46:53.705]        ReadDP(0x0);
[20:46:53.706]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:46:53.706]      </block>
[20:46:53.706]      // end if-block "protType == 2"
[20:46:53.706]    </control>
[20:46:53.706]  </sequence>
[20:46:53.706]  
[20:46:53.709]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:46:53.709]  
[20:46:53.709]  <debugvars>
[20:46:53.709]    // Pre-defined
[20:46:53.709]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:46:53.709]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:46:53.709]    __dp=0x00000000
[20:46:53.709]    __ap=0x00000000
[20:46:53.709]    __traceout=0x00000000      (Trace Disabled)
[20:46:53.709]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:46:53.710]    __FlashAddr=0x00000000
[20:46:53.710]    __FlashLen=0x00000000
[20:46:53.710]    __FlashArg=0x00000000
[20:46:53.710]    __FlashOp=0x00000000
[20:46:53.710]    __Result=0x00000000
[20:46:53.710]  </debugvars>
[20:46:53.710]  
[20:46:53.710]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:46:53.710]    <block atomic="false" info="">
[20:46:53.710]      __var SW_DP_ABORT       = 0x0;
[20:46:53.710]        // -> [SW_DP_ABORT <= 0x00000000]
[20:46:53.711]      __var DP_CTRL_STAT      = 0x4;
[20:46:53.711]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:46:53.711]      __var DP_SELECT         = 0x8;
[20:46:53.711]        // -> [DP_SELECT <= 0x00000008]
[20:46:53.711]      __var powered_down      = 0;
[20:46:53.711]        // -> [powered_down <= 0x00000000]
[20:46:53.711]      WriteDP(DP_SELECT, 0x00000000);
[20:46:53.717]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:46:53.717]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:46:53.719]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:46:53.719]        // -> [powered_down <= 0x00000001]
[20:46:53.719]    </block>
[20:46:53.719]    <control if="powered_down" while="" timeout="0" info="">
[20:46:53.719]      // if-block "powered_down"
[20:46:53.719]        // =>  TRUE
[20:46:53.719]      <block atomic="false" info="">
[20:46:53.719]        Message(0, "Debug/System power-up request sent");
[20:46:53.721]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:46:53.724]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:46:53.724]      </block>
[20:46:53.724]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:46:53.724]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:46:53.726]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:46:53.726]        // while-condition  =>  FALSE
[20:46:53.726]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:46:53.726]      </control>
[20:46:53.726]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:46:53.726]        // if-block "(__protocol & 0xFFFF) == 1"
[20:46:53.726]          // =>  FALSE
[20:46:53.727]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:46:53.727]      </control>
[20:46:53.727]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:46:53.727]        // if-block "(__protocol & 0xFFFF) == 2"
[20:46:53.727]          // =>  TRUE
[20:46:53.727]        <block atomic="false" info="">
[20:46:53.727]          Message(0, "executing SWD power up");
[20:46:53.728]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:46:53.735]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:46:53.736]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:46:53.738]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:46:53.738]        </block>
[20:46:53.738]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:46:53.738]      </control>
[20:46:53.738]      // end if-block "powered_down"
[20:46:53.738]    </control>
[20:46:53.738]    <block atomic="false" info="">
[20:46:53.738]      __var DEBUG_PORT_VAL    = 0;
[20:46:53.738]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:46:53.738]      __var ACCESS_POINT_VAL  = 0;
[20:46:53.738]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:46:53.738]      __ap = 1; 
[20:46:53.739]        // -> [__ap <= 0x00000001]
[20:46:53.739]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:46:53.744]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:46:53.744]      __ap = 4;
[20:46:53.744]        // -> [__ap <= 0x00000004]
[20:46:53.744]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:46:53.747]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:46:53.747]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:46:53.748]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:46:53.749]    </block>
[20:46:53.749]    <block atomic="false" info="">
[20:46:53.749]      __var nReset = 0x80;
[20:46:53.749]        // -> [nReset <= 0x00000080]
[20:46:53.749]      __var canReadPins = 0;
[20:46:53.749]        // -> [canReadPins <= 0x00000000]
[20:46:53.750]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:46:53.750]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:46:53.752]        // -> [canReadPins <= 0x00000001]
[20:46:53.752]    </block>
[20:46:53.752]    <control if="" while="1" timeout="200" info="">
[20:46:53.752]      // while "1"  (timeout="200")
[20:46:53.752]      // while-condition  =>  TRUE
[20:46:53.752]      // while "1"  (timeout="200")
[20:46:53.752]      // while-condition  =>  TRUE
[20:46:53.752]      // while "1"  (timeout="200")
[20:46:53.752]      // while-condition  =>  TRUE
[20:46:53.752]      // while "1"  (timeout="200")
[20:46:53.753]      // while-condition  =>  TRUE
[20:46:53.753]      // while "1"  (timeout="200")
[20:46:53.753]      // while-condition  =>  TRUE
[20:46:53.753]      // while "1"  (timeout="200")
[20:46:53.753]      // while-condition  =>  TRUE
[20:46:53.753]      // while "1"  (timeout="200")
[20:46:53.753]      // while-condition  =>  TRUE
[20:46:53.753]      // while "1"  (timeout="200")
[20:46:53.754]      // while-condition  =>  TRUE
[20:46:53.754]      // while "1"  (timeout="200")
[20:46:53.754]      // while-condition  =>  TRUE
[20:46:53.754]      // while "1"  (timeout="200")
[20:46:53.754]      // while-condition  =>  TRUE
[20:46:53.754]      // while "1"  (timeout="200")
[20:46:53.754]      // while-condition  =>  TRUE
[20:46:53.754]      // while "1"  (timeout="200")
[20:46:53.754]      // while-condition  =>  TRUE
[20:46:53.756]      // while "1"  (timeout="200")
[20:46:53.756]      // while-condition  =>  TRUE
[20:46:53.756]      // while "1"  (timeout="200")
[20:46:53.756]      // while-condition  =>  TRUE
[20:46:53.756]      // while "1"  (timeout="200")
[20:46:53.756]      // while-condition  =>  TRUE
[20:46:53.756]      // while "1"  (timeout="200")
[20:46:53.756]      // while-condition  =>  TRUE
[20:46:53.756]      // while "1"  (timeout="200")
[20:46:53.756]      // while-condition  =>  TRUE
[20:46:53.756]      // while "1"  (timeout="200")
[20:46:53.756]      // while-condition  =>  TRUE
[20:46:53.757]      // while "1"  (timeout="200")
[20:46:53.757]      // while-condition  =>  TRUE
[20:46:53.757]      // while "1"  (timeout="200")
[20:46:53.757]      // while-condition  =>  TRUE
[20:46:53.757]      // while "1"  (timeout="200")
[20:46:53.757]      // while-condition  =>  TRUE
[20:46:53.757]      // while "1"  (timeout="200")
[20:46:53.757]      // while-condition  =>  TRUE
[20:46:53.757]      // while "1"  (timeout="200")
[20:46:53.757]      // while-condition  =>  TRUE
[20:46:53.757]      // while "1"  (timeout="200")
[20:46:53.757]      // while-condition  =>  TRUE
[20:46:53.758]      // while "1"  (timeout="200")
[20:46:53.758]      // while-condition  =>  TRUE
[20:46:53.758]      // while "1"  (timeout="200")
[20:46:53.758]      // while-condition  =>  TRUE
[20:46:53.758]      // while "1"  (timeout="200")
[20:46:53.758]      // while-condition  =>  TRUE
[20:46:53.758]      // while "1"  (timeout="200")
[20:46:53.758]      // while-condition  =>  TRUE
[20:46:53.759]      // while "1"  (timeout="200")
[20:46:53.759]      // while-condition  =>  TRUE
[20:46:53.759]      // while "1"  (timeout="200")
[20:46:53.759]      // while-condition  =>  TRUE
[20:46:53.759]      // while "1"  (timeout="200")
[20:46:53.759]      // while-condition  =>  TRUE
[20:46:53.759]      // while "1"  (timeout="200")
[20:46:53.759]      // while-condition  =>  TRUE
[20:46:53.760]      // while "1"  (timeout="200")
[20:46:53.760]      // while-condition  =>  TRUE
[20:46:53.760]      // while "1"  (timeout="200")
[20:46:53.760]      // while-condition  =>  TRUE
[20:46:53.760]      // while "1"  (timeout="200")
[20:46:53.760]      // while-condition  =>  TRUE
[20:46:53.760]      // while "1"  (timeout="200")
[20:46:53.760]      // while-condition  =>  TRUE
[20:46:53.761]      // while "1"  (timeout="200")
[20:46:53.761]      // while-condition  =>  TRUE
[20:46:53.761]      // while "1"  (timeout="200")
[20:46:53.761]      // while-condition  =>  TRUE
[20:46:53.761]      // while "1"  (timeout="200")
[20:46:53.761]      // while-condition  =>  TRUE
[20:46:53.761]      // while "1"  (timeout="200")
[20:46:53.761]      // while-condition  =>  TRUE
[20:46:53.761]      // while "1"  (timeout="200")
[20:46:53.761]      // while-condition  =>  TRUE
[20:46:53.761]      // while "1"  (timeout="200")
[20:46:53.762]      // while-condition  =>  TRUE
[20:46:53.762]      // while "1"  (timeout="200")
[20:46:53.762]      // while-condition  =>  TRUE
[20:46:53.762]      // while "1"  (timeout="200")
[20:46:53.762]      // while-condition  =>  TRUE
[20:46:53.762]      // while "1"  (timeout="200")
[20:46:53.762]      // while-condition  =>  TRUE
[20:46:53.762]      // while "1"  (timeout="200")
[20:46:53.762]      // while-condition  =>  TRUE
[20:46:53.762]      // while "1"  (timeout="200")
[20:46:53.762]      // while-condition  =>  TRUE
[20:46:53.762]      // while "1"  (timeout="200")
[20:46:53.762]      // while-condition  =>  TRUE
[20:46:53.763]      // while "1"  (timeout="200")
[20:46:53.763]      // while-condition  =>  TRUE
[20:46:53.763]      // while "1"  (timeout="200")
[20:46:53.763]      // while-condition  =>  TRUE
[20:46:53.763]      // while "1"  (timeout="200")
[20:46:53.763]      // while-condition  =>  TRUE
[20:46:53.763]      // while "1"  (timeout="200")
[20:46:53.763]      // while-condition  =>  TRUE
[20:46:53.763]      // while "1"  (timeout="200")
[20:46:53.763]      // while-condition  =>  TRUE
[20:46:53.763]      // while "1"  (timeout="200")
[20:46:53.763]      // while-condition  =>  TRUE
[20:46:53.763]      // while "1"  (timeout="200")
[20:46:53.763]      // while-condition  =>  TRUE
[20:46:53.763]      // while "1"  (timeout="200")
[20:46:53.765]      // while-condition  =>  TRUE
[20:46:53.765]      // while "1"  (timeout="200")
[20:46:53.765]      // while-condition  =>  TRUE
[20:46:53.765]      // while "1"  (timeout="200")
[20:46:53.765]      // while-condition  =>  TRUE
[20:46:53.765]      // while "1"  (timeout="200")
[20:46:53.765]      // while-condition  =>  TRUE
[20:46:53.765]      // while "1"  (timeout="200")
[20:46:53.765]      // while-condition  =>  TRUE
[20:46:53.765]      // while "1"  (timeout="200")
[20:46:53.765]      // while-condition  =>  TRUE
[20:46:53.765]      // while "1"  (timeout="200")
[20:46:53.765]      // while-condition  =>  TRUE
[20:46:53.766]      // while "1"  (timeout="200")
[20:46:53.766]      // while-condition  =>  TRUE
[20:46:53.766]      // while "1"  (timeout="200")
[20:46:53.766]      // while-condition  =>  TRUE
[20:46:53.766]      // while "1"  (timeout="200")
[20:46:53.766]      // while-condition  =>  TRUE
[20:46:53.766]      // while "1"  (timeout="200")
[20:46:53.766]      // while-condition  =>  TRUE
[20:46:53.766]      // while "1"  (timeout="200")
[20:46:53.767]      // while-condition  =>  TRUE
[20:46:53.767]      // while "1"  (timeout="200")
[20:46:53.767]      // while  =>  TIMEOUT
[20:46:53.767]      // end while "1"
[20:46:53.767]    </control>
[20:46:53.767]    <control if="canReadPins" while="" timeout="0" info="">
[20:46:53.767]      // if-block "canReadPins"
[20:46:53.767]        // =>  TRUE
[20:46:53.767]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:46:53.767]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:46:53.769]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:46:53.769]        // while-condition  =>  FALSE
[20:46:53.769]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:46:53.769]      </control>
[20:46:53.769]      // end if-block "canReadPins"
[20:46:53.769]    </control>
[20:46:53.769]    <control if="!canReadPins" while="" timeout="0" info="">
[20:46:53.769]      // if-block "!canReadPins"
[20:46:53.769]        // =>  FALSE
[20:46:53.769]      // skip if-block "!canReadPins"
[20:46:53.769]    </control>
[20:46:53.769]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:46:53.771]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:46:53.771]        // =>  TRUE
[20:46:53.771]      <block atomic="false" info="">
[20:46:53.771]        WriteAP(0x00, 0x190008);
[20:46:53.773]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:46:53.773]        WriteAP(0xF0, 0x01);
[20:46:53.776]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:46:53.776]      </block>
[20:46:53.776]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:46:53.777]    </control>
[20:46:53.777]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:46:53.777]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:46:53.777]        // =>  FALSE
[20:46:53.777]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:46:53.777]    </control>
[20:46:53.777]    <block atomic="false" info="">
[20:46:53.777]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:46:53.780]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:46:53.780]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:46:53.781]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:46:53.782]      __ap = 0; //lets make sure we reset the access point selection
[20:46:53.782]        // -> [__ap <= 0x00000000]
[20:46:53.782]    </block>
[20:46:53.782]  </sequence>
[20:46:53.782]  
[20:46:53.822]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:46:53.822]  
[20:46:53.822]  <debugvars>
[20:46:53.822]    // Pre-defined
[20:46:53.822]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:46:53.822]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:46:53.822]    __dp=0x00000000
[20:46:53.822]    __ap=0x00000000
[20:46:53.822]    __traceout=0x00000000      (Trace Disabled)
[20:46:53.823]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:46:53.823]    __FlashAddr=0x00000000
[20:46:53.823]    __FlashLen=0x00000000
[20:46:53.823]    __FlashArg=0x00000000
[20:46:53.823]    __FlashOp=0x00000000
[20:46:53.823]    __Result=0x00000000
[20:46:53.823]  </debugvars>
[20:46:53.823]  
[20:46:53.823]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:46:53.823]    <block atomic="false" info="">
[20:46:53.824]      __var deviceID = 0;
[20:46:53.824]        // -> [deviceID <= 0x00000000]
[20:46:53.824]      __var version = 0;
[20:46:53.824]        // -> [version <= 0x00000000]
[20:46:53.824]      __var partNum = 0;
[20:46:53.824]        // -> [partNum <= 0x00000000]
[20:46:53.824]      __var manuf = 0;
[20:46:53.824]        // -> [manuf <= 0x00000000]
[20:46:53.824]      __var isMSPM0G1X0X_G3X0X = 0;
[20:46:53.824]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:46:53.825]      __var isProduction = 0;
[20:46:53.825]        // -> [isProduction <= 0x00000000]
[20:46:53.825]      __var continueId = 0;
[20:46:53.825]        // -> [continueId <= 0x00000000]
[20:46:53.825]      deviceID =   Read32(0x41C40004);
[20:46:53.834]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:46:53.834]        // -> [deviceID <= 0x2BB8802F]
[20:46:53.834]      version = deviceID >> 28;
[20:46:53.834]        // -> [version <= 0x00000002]
[20:46:53.834]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:46:53.834]        // -> [partNum <= 0x0000BB88]
[20:46:53.834]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:46:53.834]        // -> [manuf <= 0x00000017]
[20:46:53.834]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:46:53.834]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:46:53.835]      isProduction = (version > 0);
[20:46:53.835]        // -> [isProduction <= 0x00000001]
[20:46:53.835]    </block>
[20:46:53.836]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:46:53.836]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:46:53.836]        // =>  FALSE
[20:46:53.836]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:46:53.836]    </control>
[20:46:53.836]    <control if="continueId == 4" while="" timeout="0" info="">
[20:46:53.836]      // if-block "continueId == 4"
[20:46:53.836]        // =>  FALSE
[20:46:53.836]      // skip if-block "continueId == 4"
[20:46:53.837]    </control>
[20:46:53.837]    <control if="!isProduction" while="" timeout="0" info="">
[20:46:53.837]      // if-block "!isProduction"
[20:46:53.837]        // =>  FALSE
[20:46:53.837]      // skip if-block "!isProduction"
[20:46:53.837]    </control>
[20:46:53.838]  </sequence>
[20:46:53.838]  
[20:48:03.213]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:48:03.213]  
[20:48:03.222]  <debugvars>
[20:48:03.222]    // Pre-defined
[20:48:03.222]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:48:03.222]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:48:03.222]    __dp=0x00000000
[20:48:03.222]    __ap=0x00000000
[20:48:03.222]    __traceout=0x00000000      (Trace Disabled)
[20:48:03.222]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:48:03.222]    __FlashAddr=0x00000000
[20:48:03.224]    __FlashLen=0x00000000
[20:48:03.224]    __FlashArg=0x00000000
[20:48:03.224]    __FlashOp=0x00000000
[20:48:03.224]    __Result=0x00000000
[20:48:03.224]  </debugvars>
[20:48:03.224]  
[20:48:03.224]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:48:03.224]    <block atomic="false" info="">
[20:48:03.224]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:48:03.224]        // -> [isSWJ <= 0x00000001]
[20:48:03.224]      __var hasDormant = __protocol & 0x00020000;
[20:48:03.225]        // -> [hasDormant <= 0x00000000]
[20:48:03.225]      __var protType   = __protocol & 0x0000FFFF;
[20:48:03.225]        // -> [protType <= 0x00000002]
[20:48:03.225]    </block>
[20:48:03.225]    <control if="protType == 1" while="" timeout="0" info="">
[20:48:03.225]      // if-block "protType == 1"
[20:48:03.225]        // =>  FALSE
[20:48:03.225]      // skip if-block "protType == 1"
[20:48:03.225]    </control>
[20:48:03.225]    <control if="protType == 2" while="" timeout="0" info="">
[20:48:03.225]      // if-block "protType == 2"
[20:48:03.225]        // =>  TRUE
[20:48:03.225]      <control if="isSWJ" while="" timeout="0" info="">
[20:48:03.225]        // if-block "isSWJ"
[20:48:03.225]          // =>  TRUE
[20:48:03.225]        <control if="hasDormant" while="" timeout="0" info="">
[20:48:03.226]          // if-block "hasDormant"
[20:48:03.226]            // =>  FALSE
[20:48:03.226]          // skip if-block "hasDormant"
[20:48:03.226]        </control>
[20:48:03.226]        <control if="!hasDormant" while="" timeout="0" info="">
[20:48:03.226]          // if-block "!hasDormant"
[20:48:03.226]            // =>  TRUE
[20:48:03.226]          <block atomic="false" info="">
[20:48:03.226]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:48:03.235]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:48:03.235]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:48:03.236]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:48:03.236]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:48:03.241]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:48:03.241]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:48:03.242]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:48:03.243]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:48:03.251]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:48:03.251]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:48:03.252]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:48:03.252]          </block>
[20:48:03.252]          // end if-block "!hasDormant"
[20:48:03.253]        </control>
[20:48:03.253]        // end if-block "isSWJ"
[20:48:03.253]      </control>
[20:48:03.253]      <control if="!isSWJ" while="" timeout="0" info="">
[20:48:03.253]        // if-block "!isSWJ"
[20:48:03.253]          // =>  FALSE
[20:48:03.253]        // skip if-block "!isSWJ"
[20:48:03.253]      </control>
[20:48:03.253]      <block atomic="false" info="">
[20:48:03.253]        ReadDP(0x0);
[20:48:03.256]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:48:03.257]      </block>
[20:48:03.257]      // end if-block "protType == 2"
[20:48:03.257]    </control>
[20:48:03.257]  </sequence>
[20:48:03.257]  
[20:48:03.265]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:48:03.265]  
[20:48:03.265]  <debugvars>
[20:48:03.265]    // Pre-defined
[20:48:03.266]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:48:03.266]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:48:03.266]    __dp=0x00000000
[20:48:03.266]    __ap=0x00000000
[20:48:03.266]    __traceout=0x00000000      (Trace Disabled)
[20:48:03.266]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:48:03.266]    __FlashAddr=0x00000000
[20:48:03.266]    __FlashLen=0x00000000
[20:48:03.266]    __FlashArg=0x00000000
[20:48:03.267]    __FlashOp=0x00000000
[20:48:03.267]    __Result=0x00000000
[20:48:03.267]  </debugvars>
[20:48:03.267]  
[20:48:03.267]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:48:03.267]    <block atomic="false" info="">
[20:48:03.267]      __var SW_DP_ABORT       = 0x0;
[20:48:03.267]        // -> [SW_DP_ABORT <= 0x00000000]
[20:48:03.267]      __var DP_CTRL_STAT      = 0x4;
[20:48:03.267]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:48:03.267]      __var DP_SELECT         = 0x8;
[20:48:03.267]        // -> [DP_SELECT <= 0x00000008]
[20:48:03.268]      __var powered_down      = 0;
[20:48:03.268]        // -> [powered_down <= 0x00000000]
[20:48:03.268]      WriteDP(DP_SELECT, 0x00000000);
[20:48:03.275]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:48:03.276]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:48:03.280]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:48:03.280]        // -> [powered_down <= 0x00000001]
[20:48:03.281]    </block>
[20:48:03.281]    <control if="powered_down" while="" timeout="0" info="">
[20:48:03.281]      // if-block "powered_down"
[20:48:03.281]        // =>  TRUE
[20:48:03.281]      <block atomic="false" info="">
[20:48:03.281]        Message(0, "Debug/System power-up request sent");
[20:48:03.283]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:48:03.296]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:48:03.296]      </block>
[20:48:03.296]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:48:03.296]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:48:03.305]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:48:03.305]        // while-condition  =>  FALSE
[20:48:03.305]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:48:03.305]      </control>
[20:48:03.305]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:48:03.306]        // if-block "(__protocol & 0xFFFF) == 1"
[20:48:03.306]          // =>  FALSE
[20:48:03.306]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:48:03.306]      </control>
[20:48:03.307]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:48:03.307]        // if-block "(__protocol & 0xFFFF) == 2"
[20:48:03.307]          // =>  TRUE
[20:48:03.307]        <block atomic="false" info="">
[20:48:03.307]          Message(0, "executing SWD power up");
[20:48:03.310]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:48:03.314]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:48:03.314]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:48:03.318]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:48:03.318]        </block>
[20:48:03.318]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:48:03.318]      </control>
[20:48:03.318]      // end if-block "powered_down"
[20:48:03.318]    </control>
[20:48:03.318]    <block atomic="false" info="">
[20:48:03.318]      __var DEBUG_PORT_VAL    = 0;
[20:48:03.318]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:48:03.318]      __var ACCESS_POINT_VAL  = 0;
[20:48:03.318]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:48:03.318]      __ap = 1; 
[20:48:03.319]        // -> [__ap <= 0x00000001]
[20:48:03.319]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:48:03.325]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:48:03.326]      __ap = 4;
[20:48:03.326]        // -> [__ap <= 0x00000004]
[20:48:03.326]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:48:03.340]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:48:03.340]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:48:03.340]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:48:03.341]    </block>
[20:48:03.341]    <block atomic="false" info="">
[20:48:03.341]      __var nReset = 0x80;
[20:48:03.341]        // -> [nReset <= 0x00000080]
[20:48:03.341]      __var canReadPins = 0;
[20:48:03.342]        // -> [canReadPins <= 0x00000000]
[20:48:03.342]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:48:03.348]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:48:03.348]        // -> [canReadPins <= 0x00000001]
[20:48:03.348]    </block>
[20:48:03.348]    <control if="" while="1" timeout="200" info="">
[20:48:03.348]      // while "1"  (timeout="200")
[20:48:03.348]      // while-condition  =>  TRUE
[20:48:03.348]      // while "1"  (timeout="200")
[20:48:03.348]      // while-condition  =>  TRUE
[20:48:03.348]      // while "1"  (timeout="200")
[20:48:03.348]      // while-condition  =>  TRUE
[20:48:03.349]      // while "1"  (timeout="200")
[20:48:03.349]      // while-condition  =>  TRUE
[20:48:03.349]      // while "1"  (timeout="200")
[20:48:03.349]      // while-condition  =>  TRUE
[20:48:03.349]      // while "1"  (timeout="200")
[20:48:03.349]      // while-condition  =>  TRUE
[20:48:03.349]      // while "1"  (timeout="200")
[20:48:03.349]      // while-condition  =>  TRUE
[20:48:03.349]      // while "1"  (timeout="200")
[20:48:03.349]      // while-condition  =>  TRUE
[20:48:03.349]      // while "1"  (timeout="200")
[20:48:03.350]      // while-condition  =>  TRUE
[20:48:03.350]      // while "1"  (timeout="200")
[20:48:03.350]      // while-condition  =>  TRUE
[20:48:03.350]      // while "1"  (timeout="200")
[20:48:03.350]      // while-condition  =>  TRUE
[20:48:03.350]      // while "1"  (timeout="200")
[20:48:03.350]      // while-condition  =>  TRUE
[20:48:03.350]      // while "1"  (timeout="200")
[20:48:03.350]      // while-condition  =>  TRUE
[20:48:03.350]      // while "1"  (timeout="200")
[20:48:03.350]      // while-condition  =>  TRUE
[20:48:03.350]      // while "1"  (timeout="200")
[20:48:03.351]      // while-condition  =>  TRUE
[20:48:03.351]      // while "1"  (timeout="200")
[20:48:03.351]      // while-condition  =>  TRUE
[20:48:03.351]      // while "1"  (timeout="200")
[20:48:03.351]      // while-condition  =>  TRUE
[20:48:03.351]      // while "1"  (timeout="200")
[20:48:03.351]      // while-condition  =>  TRUE
[20:48:03.351]      // while "1"  (timeout="200")
[20:48:03.351]      // while-condition  =>  TRUE
[20:48:03.352]      // while "1"  (timeout="200")
[20:48:03.352]      // while-condition  =>  TRUE
[20:48:03.352]      // while "1"  (timeout="200")
[20:48:03.352]      // while-condition  =>  TRUE
[20:48:03.352]      // while "1"  (timeout="200")
[20:48:03.352]      // while-condition  =>  TRUE
[20:48:03.352]      // while "1"  (timeout="200")
[20:48:03.352]      // while-condition  =>  TRUE
[20:48:03.352]      // while "1"  (timeout="200")
[20:48:03.352]      // while-condition  =>  TRUE
[20:48:03.352]      // while "1"  (timeout="200")
[20:48:03.352]      // while-condition  =>  TRUE
[20:48:03.352]      // while "1"  (timeout="200")
[20:48:03.352]      // while-condition  =>  TRUE
[20:48:03.353]      // while "1"  (timeout="200")
[20:48:03.353]      // while-condition  =>  TRUE
[20:48:03.353]      // while "1"  (timeout="200")
[20:48:03.353]      // while-condition  =>  TRUE
[20:48:03.353]      // while "1"  (timeout="200")
[20:48:03.353]      // while-condition  =>  TRUE
[20:48:03.353]      // while "1"  (timeout="200")
[20:48:03.353]      // while-condition  =>  TRUE
[20:48:03.354]      // while "1"  (timeout="200")
[20:48:03.354]      // while-condition  =>  TRUE
[20:48:03.354]      // while "1"  (timeout="200")
[20:48:03.354]      // while-condition  =>  TRUE
[20:48:03.354]      // while "1"  (timeout="200")
[20:48:03.354]      // while-condition  =>  TRUE
[20:48:03.354]      // while "1"  (timeout="200")
[20:48:03.355]      // while-condition  =>  TRUE
[20:48:03.355]      // while "1"  (timeout="200")
[20:48:03.355]      // while-condition  =>  TRUE
[20:48:03.355]      // while "1"  (timeout="200")
[20:48:03.355]      // while-condition  =>  TRUE
[20:48:03.355]      // while "1"  (timeout="200")
[20:48:03.355]      // while-condition  =>  TRUE
[20:48:03.355]      // while "1"  (timeout="200")
[20:48:03.355]      // while-condition  =>  TRUE
[20:48:03.355]      // while "1"  (timeout="200")
[20:48:03.355]      // while-condition  =>  TRUE
[20:48:03.355]      // while "1"  (timeout="200")
[20:48:03.355]      // while-condition  =>  TRUE
[20:48:03.355]      // while "1"  (timeout="200")
[20:48:03.355]      // while-condition  =>  TRUE
[20:48:03.355]      // while "1"  (timeout="200")
[20:48:03.356]      // while-condition  =>  TRUE
[20:48:03.356]      // while "1"  (timeout="200")
[20:48:03.356]      // while-condition  =>  TRUE
[20:48:03.356]      // while "1"  (timeout="200")
[20:48:03.356]      // while-condition  =>  TRUE
[20:48:03.356]      // while "1"  (timeout="200")
[20:48:03.356]      // while-condition  =>  TRUE
[20:48:03.356]      // while "1"  (timeout="200")
[20:48:03.356]      // while-condition  =>  TRUE
[20:48:03.356]      // while "1"  (timeout="200")
[20:48:03.356]      // while-condition  =>  TRUE
[20:48:03.356]      // while "1"  (timeout="200")
[20:48:03.357]      // while-condition  =>  TRUE
[20:48:03.357]      // while "1"  (timeout="200")
[20:48:03.357]      // while-condition  =>  TRUE
[20:48:03.357]      // while "1"  (timeout="200")
[20:48:03.357]      // while-condition  =>  TRUE
[20:48:03.357]      // while "1"  (timeout="200")
[20:48:03.357]      // while-condition  =>  TRUE
[20:48:03.357]      // while "1"  (timeout="200")
[20:48:03.357]      // while-condition  =>  TRUE
[20:48:03.357]      // while "1"  (timeout="200")
[20:48:03.357]      // while-condition  =>  TRUE
[20:48:03.357]      // while "1"  (timeout="200")
[20:48:03.358]      // while-condition  =>  TRUE
[20:48:03.358]      // while "1"  (timeout="200")
[20:48:03.358]      // while-condition  =>  TRUE
[20:48:03.358]      // while "1"  (timeout="200")
[20:48:03.358]      // while-condition  =>  TRUE
[20:48:03.358]      // while "1"  (timeout="200")
[20:48:03.358]      // while-condition  =>  TRUE
[20:48:03.358]      // while "1"  (timeout="200")
[20:48:03.358]      // while-condition  =>  TRUE
[20:48:03.359]      // while "1"  (timeout="200")
[20:48:03.359]      // while-condition  =>  TRUE
[20:48:03.359]      // while "1"  (timeout="200")
[20:48:03.359]      // while-condition  =>  TRUE
[20:48:03.359]      // while "1"  (timeout="200")
[20:48:03.359]      // while-condition  =>  TRUE
[20:48:03.359]      // while "1"  (timeout="200")
[20:48:03.360]      // while-condition  =>  TRUE
[20:48:03.360]      // while "1"  (timeout="200")
[20:48:03.360]      // while  =>  TIMEOUT
[20:48:03.360]      // end while "1"
[20:48:03.360]    </control>
[20:48:03.360]    <control if="canReadPins" while="" timeout="0" info="">
[20:48:03.360]      // if-block "canReadPins"
[20:48:03.360]        // =>  TRUE
[20:48:03.360]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:48:03.360]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:48:03.377]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:48:03.378]        // while-condition  =>  FALSE
[20:48:03.378]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:48:03.378]      </control>
[20:48:03.378]      // end if-block "canReadPins"
[20:48:03.378]    </control>
[20:48:03.378]    <control if="!canReadPins" while="" timeout="0" info="">
[20:48:03.378]      // if-block "!canReadPins"
[20:48:03.378]        // =>  FALSE
[20:48:03.378]      // skip if-block "!canReadPins"
[20:48:03.379]    </control>
[20:48:03.379]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:48:03.379]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:48:03.379]        // =>  TRUE
[20:48:03.379]      <block atomic="false" info="">
[20:48:03.379]        WriteAP(0x00, 0x190008);
[20:48:03.384]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:48:03.384]        WriteAP(0xF0, 0x01);
[20:48:03.389]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:48:03.390]      </block>
[20:48:03.390]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:48:03.390]    </control>
[20:48:03.390]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:48:03.390]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:48:03.390]        // =>  FALSE
[20:48:03.390]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:48:03.390]    </control>
[20:48:03.390]    <block atomic="false" info="">
[20:48:03.390]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:48:03.398]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:48:03.398]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:48:03.398]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:48:03.400]      __ap = 0; //lets make sure we reset the access point selection
[20:48:03.400]        // -> [__ap <= 0x00000000]
[20:48:03.400]    </block>
[20:48:03.400]  </sequence>
[20:48:03.400]  
[20:48:03.448]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:48:03.448]  
[20:48:03.448]  <debugvars>
[20:48:03.448]    // Pre-defined
[20:48:03.448]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:48:03.448]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:48:03.448]    __dp=0x00000000
[20:48:03.448]    __ap=0x00000000
[20:48:03.448]    __traceout=0x00000000      (Trace Disabled)
[20:48:03.448]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:48:03.448]    __FlashAddr=0x00000000
[20:48:03.449]    __FlashLen=0x00000000
[20:48:03.449]    __FlashArg=0x00000000
[20:48:03.449]    __FlashOp=0x00000000
[20:48:03.449]    __Result=0x00000000
[20:48:03.449]  </debugvars>
[20:48:03.449]  
[20:48:03.449]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:48:03.449]    <block atomic="false" info="">
[20:48:03.449]      __var deviceID = 0;
[20:48:03.449]        // -> [deviceID <= 0x00000000]
[20:48:03.449]      __var version = 0;
[20:48:03.450]        // -> [version <= 0x00000000]
[20:48:03.450]      __var partNum = 0;
[20:48:03.450]        // -> [partNum <= 0x00000000]
[20:48:03.450]      __var manuf = 0;
[20:48:03.450]        // -> [manuf <= 0x00000000]
[20:48:03.450]      __var isMSPM0G1X0X_G3X0X = 0;
[20:48:03.450]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:48:03.450]      __var isProduction = 0;
[20:48:03.450]        // -> [isProduction <= 0x00000000]
[20:48:03.450]      __var continueId = 0;
[20:48:03.450]        // -> [continueId <= 0x00000000]
[20:48:03.450]      deviceID =   Read32(0x41C40004);
[20:48:03.467]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:48:03.467]        // -> [deviceID <= 0x2BB8802F]
[20:48:03.467]      version = deviceID >> 28;
[20:48:03.467]        // -> [version <= 0x00000002]
[20:48:03.467]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:48:03.468]        // -> [partNum <= 0x0000BB88]
[20:48:03.468]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:48:03.468]        // -> [manuf <= 0x00000017]
[20:48:03.468]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:48:03.468]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:48:03.468]      isProduction = (version > 0);
[20:48:03.468]        // -> [isProduction <= 0x00000001]
[20:48:03.468]    </block>
[20:48:03.468]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:48:03.468]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:48:03.468]        // =>  FALSE
[20:48:03.468]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:48:03.468]    </control>
[20:48:03.469]    <control if="continueId == 4" while="" timeout="0" info="">
[20:48:03.469]      // if-block "continueId == 4"
[20:48:03.469]        // =>  FALSE
[20:48:03.469]      // skip if-block "continueId == 4"
[20:48:03.469]    </control>
[20:48:03.469]    <control if="!isProduction" while="" timeout="0" info="">
[20:48:03.469]      // if-block "!isProduction"
[20:48:03.469]        // =>  FALSE
[20:48:03.469]      // skip if-block "!isProduction"
[20:48:03.470]    </control>
[20:48:03.470]  </sequence>
[20:48:03.470]  
[20:48:49.044]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:48:49.044]  
[20:48:49.053]  <debugvars>
[20:48:49.054]    // Pre-defined
[20:48:49.054]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:48:49.054]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:48:49.054]    __dp=0x00000000
[20:48:49.054]    __ap=0x00000000
[20:48:49.054]    __traceout=0x00000000      (Trace Disabled)
[20:48:49.054]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:48:49.054]    __FlashAddr=0x00000000
[20:48:49.055]    __FlashLen=0x00000000
[20:48:49.055]    __FlashArg=0x00000000
[20:48:49.055]    __FlashOp=0x00000000
[20:48:49.055]    __Result=0x00000000
[20:48:49.055]  </debugvars>
[20:48:49.055]  
[20:48:49.055]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:48:49.055]    <block atomic="false" info="">
[20:48:49.055]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:48:49.055]        // -> [isSWJ <= 0x00000001]
[20:48:49.055]      __var hasDormant = __protocol & 0x00020000;
[20:48:49.056]        // -> [hasDormant <= 0x00000000]
[20:48:49.056]      __var protType   = __protocol & 0x0000FFFF;
[20:48:49.056]        // -> [protType <= 0x00000002]
[20:48:49.056]    </block>
[20:48:49.056]    <control if="protType == 1" while="" timeout="0" info="">
[20:48:49.056]      // if-block "protType == 1"
[20:48:49.056]        // =>  FALSE
[20:48:49.056]      // skip if-block "protType == 1"
[20:48:49.057]    </control>
[20:48:49.057]    <control if="protType == 2" while="" timeout="0" info="">
[20:48:49.057]      // if-block "protType == 2"
[20:48:49.057]        // =>  TRUE
[20:48:49.057]      <control if="isSWJ" while="" timeout="0" info="">
[20:48:49.057]        // if-block "isSWJ"
[20:48:49.057]          // =>  TRUE
[20:48:49.057]        <control if="hasDormant" while="" timeout="0" info="">
[20:48:49.057]          // if-block "hasDormant"
[20:48:49.057]            // =>  FALSE
[20:48:49.058]          // skip if-block "hasDormant"
[20:48:49.058]        </control>
[20:48:49.058]        <control if="!hasDormant" while="" timeout="0" info="">
[20:48:49.058]          // if-block "!hasDormant"
[20:48:49.058]            // =>  TRUE
[20:48:49.058]          <block atomic="false" info="">
[20:48:49.058]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:48:49.059]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:48:49.059]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:48:49.060]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:48:49.061]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:48:49.063]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:48:49.063]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:48:49.072]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:48:49.073]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:48:49.074]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:48:49.074]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:48:49.077]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:48:49.077]          </block>
[20:48:49.077]          // end if-block "!hasDormant"
[20:48:49.077]        </control>
[20:48:49.077]        // end if-block "isSWJ"
[20:48:49.077]      </control>
[20:48:49.078]      <control if="!isSWJ" while="" timeout="0" info="">
[20:48:49.078]        // if-block "!isSWJ"
[20:48:49.078]          // =>  FALSE
[20:48:49.078]        // skip if-block "!isSWJ"
[20:48:49.078]      </control>
[20:48:49.078]      <block atomic="false" info="">
[20:48:49.078]        ReadDP(0x0);
[20:48:49.079]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:48:49.079]      </block>
[20:48:49.079]      // end if-block "protType == 2"
[20:48:49.079]    </control>
[20:48:49.080]  </sequence>
[20:48:49.080]  
[20:48:49.085]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:48:49.085]  
[20:48:49.085]  <debugvars>
[20:48:49.085]    // Pre-defined
[20:48:49.085]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:48:49.086]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:48:49.087]    __dp=0x00000000
[20:48:49.087]    __ap=0x00000000
[20:48:49.087]    __traceout=0x00000000      (Trace Disabled)
[20:48:49.087]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:48:49.087]    __FlashAddr=0x00000000
[20:48:49.087]    __FlashLen=0x00000000
[20:48:49.087]    __FlashArg=0x00000000
[20:48:49.087]    __FlashOp=0x00000000
[20:48:49.087]    __Result=0x00000000
[20:48:49.087]  </debugvars>
[20:48:49.087]  
[20:48:49.088]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:48:49.088]    <block atomic="false" info="">
[20:48:49.088]      __var SW_DP_ABORT       = 0x0;
[20:48:49.088]        // -> [SW_DP_ABORT <= 0x00000000]
[20:48:49.088]      __var DP_CTRL_STAT      = 0x4;
[20:48:49.088]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:48:49.088]      __var DP_SELECT         = 0x8;
[20:48:49.088]        // -> [DP_SELECT <= 0x00000008]
[20:48:49.088]      __var powered_down      = 0;
[20:48:49.088]        // -> [powered_down <= 0x00000000]
[20:48:49.088]      WriteDP(DP_SELECT, 0x00000000);
[20:48:49.091]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:48:49.091]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:48:49.095]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:48:49.095]        // -> [powered_down <= 0x00000001]
[20:48:49.095]    </block>
[20:48:49.095]    <control if="powered_down" while="" timeout="0" info="">
[20:48:49.095]      // if-block "powered_down"
[20:48:49.095]        // =>  TRUE
[20:48:49.095]      <block atomic="false" info="">
[20:48:49.095]        Message(0, "Debug/System power-up request sent");
[20:48:49.098]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:48:49.101]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:48:49.101]      </block>
[20:48:49.101]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:48:49.101]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:48:49.110]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:48:49.110]        // while-condition  =>  FALSE
[20:48:49.110]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:48:49.110]      </control>
[20:48:49.110]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:48:49.110]        // if-block "(__protocol & 0xFFFF) == 1"
[20:48:49.110]          // =>  FALSE
[20:48:49.111]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:48:49.111]      </control>
[20:48:49.111]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:48:49.111]        // if-block "(__protocol & 0xFFFF) == 2"
[20:48:49.111]          // =>  TRUE
[20:48:49.111]        <block atomic="false" info="">
[20:48:49.111]          Message(0, "executing SWD power up");
[20:48:49.112]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:48:49.118]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:48:49.118]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:48:49.125]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:48:49.125]        </block>
[20:48:49.125]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:48:49.125]      </control>
[20:48:49.126]      // end if-block "powered_down"
[20:48:49.126]    </control>
[20:48:49.127]    <block atomic="false" info="">
[20:48:49.127]      __var DEBUG_PORT_VAL    = 0;
[20:48:49.127]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:48:49.127]      __var ACCESS_POINT_VAL  = 0;
[20:48:49.127]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:48:49.127]      __ap = 1; 
[20:48:49.127]        // -> [__ap <= 0x00000001]
[20:48:49.127]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:48:49.132]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:48:49.132]      __ap = 4;
[20:48:49.132]        // -> [__ap <= 0x00000004]
[20:48:49.132]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:48:49.140]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:48:49.140]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:48:49.140]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:48:49.142]    </block>
[20:48:49.143]    <block atomic="false" info="">
[20:48:49.143]      __var nReset = 0x80;
[20:48:49.143]        // -> [nReset <= 0x00000080]
[20:48:49.143]      __var canReadPins = 0;
[20:48:49.143]        // -> [canReadPins <= 0x00000000]
[20:48:49.143]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:48:49.146]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:48:49.146]        // -> [canReadPins <= 0x00000001]
[20:48:49.146]    </block>
[20:48:49.146]    <control if="" while="1" timeout="200" info="">
[20:48:49.146]      // while "1"  (timeout="200")
[20:48:49.146]      // while-condition  =>  TRUE
[20:48:49.146]      // while "1"  (timeout="200")
[20:48:49.147]      // while-condition  =>  TRUE
[20:48:49.147]      // while "1"  (timeout="200")
[20:48:49.147]      // while-condition  =>  TRUE
[20:48:49.147]      // while "1"  (timeout="200")
[20:48:49.147]      // while-condition  =>  TRUE
[20:48:49.147]      // while "1"  (timeout="200")
[20:48:49.147]      // while-condition  =>  TRUE
[20:48:49.147]      // while "1"  (timeout="200")
[20:48:49.147]      // while-condition  =>  TRUE
[20:48:49.148]      // while "1"  (timeout="200")
[20:48:49.148]      // while-condition  =>  TRUE
[20:48:49.148]      // while "1"  (timeout="200")
[20:48:49.148]      // while-condition  =>  TRUE
[20:48:49.148]      // while "1"  (timeout="200")
[20:48:49.148]      // while-condition  =>  TRUE
[20:48:49.148]      // while "1"  (timeout="200")
[20:48:49.148]      // while-condition  =>  TRUE
[20:48:49.148]      // while "1"  (timeout="200")
[20:48:49.148]      // while-condition  =>  TRUE
[20:48:49.148]      // while "1"  (timeout="200")
[20:48:49.148]      // while-condition  =>  TRUE
[20:48:49.148]      // while "1"  (timeout="200")
[20:48:49.148]      // while-condition  =>  TRUE
[20:48:49.148]      // while "1"  (timeout="200")
[20:48:49.148]      // while-condition  =>  TRUE
[20:48:49.148]      // while "1"  (timeout="200")
[20:48:49.150]      // while-condition  =>  TRUE
[20:48:49.150]      // while "1"  (timeout="200")
[20:48:49.150]      // while-condition  =>  TRUE
[20:48:49.150]      // while "1"  (timeout="200")
[20:48:49.150]      // while-condition  =>  TRUE
[20:48:49.150]      // while "1"  (timeout="200")
[20:48:49.150]      // while-condition  =>  TRUE
[20:48:49.150]      // while "1"  (timeout="200")
[20:48:49.150]      // while-condition  =>  TRUE
[20:48:49.151]      // while "1"  (timeout="200")
[20:48:49.151]      // while-condition  =>  TRUE
[20:48:49.151]      // while "1"  (timeout="200")
[20:48:49.151]      // while-condition  =>  TRUE
[20:48:49.151]      // while "1"  (timeout="200")
[20:48:49.152]      // while-condition  =>  TRUE
[20:48:49.152]      // while "1"  (timeout="200")
[20:48:49.152]      // while-condition  =>  TRUE
[20:48:49.152]      // while "1"  (timeout="200")
[20:48:49.152]      // while-condition  =>  TRUE
[20:48:49.152]      // while "1"  (timeout="200")
[20:48:49.152]      // while-condition  =>  TRUE
[20:48:49.152]      // while "1"  (timeout="200")
[20:48:49.152]      // while-condition  =>  TRUE
[20:48:49.152]      // while "1"  (timeout="200")
[20:48:49.152]      // while-condition  =>  TRUE
[20:48:49.152]      // while "1"  (timeout="200")
[20:48:49.152]      // while-condition  =>  TRUE
[20:48:49.153]      // while "1"  (timeout="200")
[20:48:49.153]      // while-condition  =>  TRUE
[20:48:49.153]      // while "1"  (timeout="200")
[20:48:49.153]      // while-condition  =>  TRUE
[20:48:49.153]      // while "1"  (timeout="200")
[20:48:49.153]      // while-condition  =>  TRUE
[20:48:49.153]      // while "1"  (timeout="200")
[20:48:49.154]      // while-condition  =>  TRUE
[20:48:49.154]      // while "1"  (timeout="200")
[20:48:49.154]      // while-condition  =>  TRUE
[20:48:49.154]      // while "1"  (timeout="200")
[20:48:49.154]      // while-condition  =>  TRUE
[20:48:49.154]      // while "1"  (timeout="200")
[20:48:49.154]      // while-condition  =>  TRUE
[20:48:49.154]      // while "1"  (timeout="200")
[20:48:49.154]      // while-condition  =>  TRUE
[20:48:49.154]      // while "1"  (timeout="200")
[20:48:49.154]      // while-condition  =>  TRUE
[20:48:49.154]      // while "1"  (timeout="200")
[20:48:49.155]      // while-condition  =>  TRUE
[20:48:49.155]      // while "1"  (timeout="200")
[20:48:49.155]      // while-condition  =>  TRUE
[20:48:49.155]      // while "1"  (timeout="200")
[20:48:49.155]      // while-condition  =>  TRUE
[20:48:49.155]      // while "1"  (timeout="200")
[20:48:49.155]      // while-condition  =>  TRUE
[20:48:49.155]      // while "1"  (timeout="200")
[20:48:49.155]      // while-condition  =>  TRUE
[20:48:49.155]      // while "1"  (timeout="200")
[20:48:49.155]      // while-condition  =>  TRUE
[20:48:49.155]      // while "1"  (timeout="200")
[20:48:49.155]      // while-condition  =>  TRUE
[20:48:49.155]      // while "1"  (timeout="200")
[20:48:49.155]      // while-condition  =>  TRUE
[20:48:49.155]      // while "1"  (timeout="200")
[20:48:49.155]      // while-condition  =>  TRUE
[20:48:49.156]      // while "1"  (timeout="200")
[20:48:49.156]      // while-condition  =>  TRUE
[20:48:49.156]      // while "1"  (timeout="200")
[20:48:49.156]      // while-condition  =>  TRUE
[20:48:49.156]      // while "1"  (timeout="200")
[20:48:49.156]      // while-condition  =>  TRUE
[20:48:49.156]      // while "1"  (timeout="200")
[20:48:49.156]      // while-condition  =>  TRUE
[20:48:49.156]      // while "1"  (timeout="200")
[20:48:49.156]      // while-condition  =>  TRUE
[20:48:49.156]      // while "1"  (timeout="200")
[20:48:49.156]      // while-condition  =>  TRUE
[20:48:49.157]      // while "1"  (timeout="200")
[20:48:49.157]      // while  =>  TIMEOUT
[20:48:49.157]      // end while "1"
[20:48:49.157]    </control>
[20:48:49.157]    <control if="canReadPins" while="" timeout="0" info="">
[20:48:49.157]      // if-block "canReadPins"
[20:48:49.157]        // =>  TRUE
[20:48:49.157]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:48:49.157]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:48:49.162]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:48:49.162]        // while-condition  =>  FALSE
[20:48:49.162]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:48:49.162]      </control>
[20:48:49.162]      // end if-block "canReadPins"
[20:48:49.163]    </control>
[20:48:49.163]    <control if="!canReadPins" while="" timeout="0" info="">
[20:48:49.163]      // if-block "!canReadPins"
[20:48:49.163]        // =>  FALSE
[20:48:49.163]      // skip if-block "!canReadPins"
[20:48:49.163]    </control>
[20:48:49.163]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:48:49.163]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:48:49.163]        // =>  TRUE
[20:48:49.164]      <block atomic="false" info="">
[20:48:49.164]        WriteAP(0x00, 0x190008);
[20:48:49.167]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:48:49.167]        WriteAP(0xF0, 0x01);
[20:48:49.188]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:48:49.188]      </block>
[20:48:49.188]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:48:49.189]    </control>
[20:48:49.189]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:48:49.190]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:48:49.190]        // =>  FALSE
[20:48:49.190]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:48:49.190]    </control>
[20:48:49.190]    <block atomic="false" info="">
[20:48:49.190]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:48:49.194]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:48:49.194]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:48:49.194]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:48:49.196]      __ap = 0; //lets make sure we reset the access point selection
[20:48:49.197]        // -> [__ap <= 0x00000000]
[20:48:49.197]    </block>
[20:48:49.197]  </sequence>
[20:48:49.197]  
[20:48:49.231]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:48:49.231]  
[20:48:49.231]  <debugvars>
[20:48:49.231]    // Pre-defined
[20:48:49.231]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:48:49.231]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:48:49.231]    __dp=0x00000000
[20:48:49.231]    __ap=0x00000000
[20:48:49.231]    __traceout=0x00000000      (Trace Disabled)
[20:48:49.231]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:48:49.231]    __FlashAddr=0x00000000
[20:48:49.231]    __FlashLen=0x00000000
[20:48:49.231]    __FlashArg=0x00000000
[20:48:49.231]    __FlashOp=0x00000000
[20:48:49.231]    __Result=0x00000000
[20:48:49.231]  </debugvars>
[20:48:49.232]  
[20:48:49.232]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:48:49.232]    <block atomic="false" info="">
[20:48:49.232]      __var deviceID = 0;
[20:48:49.232]        // -> [deviceID <= 0x00000000]
[20:48:49.233]      __var version = 0;
[20:48:49.233]        // -> [version <= 0x00000000]
[20:48:49.233]      __var partNum = 0;
[20:48:49.233]        // -> [partNum <= 0x00000000]
[20:48:49.233]      __var manuf = 0;
[20:48:49.233]        // -> [manuf <= 0x00000000]
[20:48:49.233]      __var isMSPM0G1X0X_G3X0X = 0;
[20:48:49.234]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:48:49.234]      __var isProduction = 0;
[20:48:49.234]        // -> [isProduction <= 0x00000000]
[20:48:49.234]      __var continueId = 0;
[20:48:49.234]        // -> [continueId <= 0x00000000]
[20:48:49.234]      deviceID =   Read32(0x41C40004);
[20:48:49.245]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:48:49.245]        // -> [deviceID <= 0x2BB8802F]
[20:48:49.245]      version = deviceID >> 28;
[20:48:49.245]        // -> [version <= 0x00000002]
[20:48:49.245]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:48:49.245]        // -> [partNum <= 0x0000BB88]
[20:48:49.245]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:48:49.245]        // -> [manuf <= 0x00000017]
[20:48:49.245]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:48:49.245]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:48:49.247]      isProduction = (version > 0);
[20:48:49.247]        // -> [isProduction <= 0x00000001]
[20:48:49.247]    </block>
[20:48:49.247]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:48:49.247]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:48:49.247]        // =>  FALSE
[20:48:49.247]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:48:49.247]    </control>
[20:48:49.247]    <control if="continueId == 4" while="" timeout="0" info="">
[20:48:49.247]      // if-block "continueId == 4"
[20:48:49.247]        // =>  FALSE
[20:48:49.247]      // skip if-block "continueId == 4"
[20:48:49.247]    </control>
[20:48:49.248]    <control if="!isProduction" while="" timeout="0" info="">
[20:48:49.248]      // if-block "!isProduction"
[20:48:49.248]        // =>  FALSE
[20:48:49.248]      // skip if-block "!isProduction"
[20:48:49.248]    </control>
[20:48:49.248]  </sequence>
[20:48:49.248]  
[20:50:36.591]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:50:36.591]  
[20:50:36.592]  <debugvars>
[20:50:36.592]    // Pre-defined
[20:50:36.592]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:36.592]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:36.592]    __dp=0x00000000
[20:50:36.592]    __ap=0x00000000
[20:50:36.592]    __traceout=0x00000000      (Trace Disabled)
[20:50:36.592]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:36.593]    __FlashAddr=0x00000000
[20:50:36.593]    __FlashLen=0x00000000
[20:50:36.593]    __FlashArg=0x00000000
[20:50:36.593]    __FlashOp=0x00000000
[20:50:36.593]    __Result=0x00000000
[20:50:36.593]  </debugvars>
[20:50:36.593]  
[20:50:36.593]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:50:36.593]    <block atomic="false" info="">
[20:50:36.593]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:50:36.593]        // -> [isSWJ <= 0x00000001]
[20:50:36.594]      __var hasDormant = __protocol & 0x00020000;
[20:50:36.594]        // -> [hasDormant <= 0x00000000]
[20:50:36.594]      __var protType   = __protocol & 0x0000FFFF;
[20:50:36.594]        // -> [protType <= 0x00000002]
[20:50:36.594]    </block>
[20:50:36.594]    <control if="protType == 1" while="" timeout="0" info="">
[20:50:36.594]      // if-block "protType == 1"
[20:50:36.594]        // =>  FALSE
[20:50:36.594]      // skip if-block "protType == 1"
[20:50:36.594]    </control>
[20:50:36.594]    <control if="protType == 2" while="" timeout="0" info="">
[20:50:36.594]      // if-block "protType == 2"
[20:50:36.595]        // =>  TRUE
[20:50:36.595]      <control if="isSWJ" while="" timeout="0" info="">
[20:50:36.595]        // if-block "isSWJ"
[20:50:36.595]          // =>  TRUE
[20:50:36.595]        <control if="hasDormant" while="" timeout="0" info="">
[20:50:36.595]          // if-block "hasDormant"
[20:50:36.595]            // =>  FALSE
[20:50:36.595]          // skip if-block "hasDormant"
[20:50:36.595]        </control>
[20:50:36.595]        <control if="!hasDormant" while="" timeout="0" info="">
[20:50:36.595]          // if-block "!hasDormant"
[20:50:36.596]            // =>  TRUE
[20:50:36.596]          <block atomic="false" info="">
[20:50:36.596]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:50:36.598]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:36.598]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:50:36.600]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:50:36.600]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:50:36.601]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:36.601]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:50:36.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:50:36.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:50:36.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:50:36.609]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:50:36.612]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:50:36.612]          </block>
[20:50:36.612]          // end if-block "!hasDormant"
[20:50:36.612]        </control>
[20:50:36.612]        // end if-block "isSWJ"
[20:50:36.613]      </control>
[20:50:36.613]      <control if="!isSWJ" while="" timeout="0" info="">
[20:50:36.613]        // if-block "!isSWJ"
[20:50:36.613]          // =>  FALSE
[20:50:36.613]        // skip if-block "!isSWJ"
[20:50:36.613]      </control>
[20:50:36.613]      <block atomic="false" info="">
[20:50:36.613]        ReadDP(0x0);
[20:50:36.615]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:50:36.615]      </block>
[20:50:36.615]      // end if-block "protType == 2"
[20:50:36.615]    </control>
[20:50:36.615]  </sequence>
[20:50:36.616]  
[20:50:36.627]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:50:36.627]  
[20:50:36.627]  <debugvars>
[20:50:36.627]    // Pre-defined
[20:50:36.627]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:36.627]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:36.628]    __dp=0x00000000
[20:50:36.628]    __ap=0x00000000
[20:50:36.628]    __traceout=0x00000000      (Trace Disabled)
[20:50:36.628]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:36.628]    __FlashAddr=0x00000000
[20:50:36.628]    __FlashLen=0x00000000
[20:50:36.628]    __FlashArg=0x00000000
[20:50:36.628]    __FlashOp=0x00000000
[20:50:36.628]    __Result=0x00000000
[20:50:36.628]  </debugvars>
[20:50:36.628]  
[20:50:36.628]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:50:36.628]    <block atomic="false" info="">
[20:50:36.628]      __var SW_DP_ABORT       = 0x0;
[20:50:36.628]        // -> [SW_DP_ABORT <= 0x00000000]
[20:50:36.628]      __var DP_CTRL_STAT      = 0x4;
[20:50:36.628]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:50:36.629]      __var DP_SELECT         = 0x8;
[20:50:36.629]        // -> [DP_SELECT <= 0x00000008]
[20:50:36.629]      __var powered_down      = 0;
[20:50:36.629]        // -> [powered_down <= 0x00000000]
[20:50:36.629]      WriteDP(DP_SELECT, 0x00000000);
[20:50:36.630]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:50:36.630]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:50:36.632]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:50:36.632]        // -> [powered_down <= 0x00000001]
[20:50:36.632]    </block>
[20:50:36.632]    <control if="powered_down" while="" timeout="0" info="">
[20:50:36.632]      // if-block "powered_down"
[20:50:36.633]        // =>  TRUE
[20:50:36.633]      <block atomic="false" info="">
[20:50:36.633]        Message(0, "Debug/System power-up request sent");
[20:50:36.635]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:50:36.636]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:50:36.636]      </block>
[20:50:36.636]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:50:36.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:50:36.640]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:50:36.640]        // while-condition  =>  FALSE
[20:50:36.641]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:50:36.641]      </control>
[20:50:36.641]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:50:36.641]        // if-block "(__protocol & 0xFFFF) == 1"
[20:50:36.641]          // =>  FALSE
[20:50:36.641]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:50:36.641]      </control>
[20:50:36.641]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:50:36.641]        // if-block "(__protocol & 0xFFFF) == 2"
[20:50:36.642]          // =>  TRUE
[20:50:36.642]        <block atomic="false" info="">
[20:50:36.642]          Message(0, "executing SWD power up");
[20:50:36.643]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:50:36.646]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:50:36.646]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:50:36.648]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:50:36.648]        </block>
[20:50:36.648]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:50:36.648]      </control>
[20:50:36.648]      // end if-block "powered_down"
[20:50:36.648]    </control>
[20:50:36.648]    <block atomic="false" info="">
[20:50:36.648]      __var DEBUG_PORT_VAL    = 0;
[20:50:36.648]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:50:36.648]      __var ACCESS_POINT_VAL  = 0;
[20:50:36.650]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:50:36.650]      __ap = 1; 
[20:50:36.650]        // -> [__ap <= 0x00000001]
[20:50:36.650]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:50:36.655]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:50:36.655]      __ap = 4;
[20:50:36.655]        // -> [__ap <= 0x00000004]
[20:50:36.655]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:50:36.666]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:50:36.666]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:50:36.666]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:50:36.668]    </block>
[20:50:36.668]    <block atomic="false" info="">
[20:50:36.668]      __var nReset = 0x80;
[20:50:36.668]        // -> [nReset <= 0x00000080]
[20:50:36.668]      __var canReadPins = 0;
[20:50:36.668]        // -> [canReadPins <= 0x00000000]
[20:50:36.669]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:50:36.672]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:50:36.672]        // -> [canReadPins <= 0x00000001]
[20:50:36.672]    </block>
[20:50:36.673]    <control if="" while="1" timeout="200" info="">
[20:50:36.673]      // while "1"  (timeout="200")
[20:50:36.673]      // while-condition  =>  TRUE
[20:50:36.673]      // while "1"  (timeout="200")
[20:50:36.673]      // while-condition  =>  TRUE
[20:50:36.673]      // while "1"  (timeout="200")
[20:50:36.673]      // while-condition  =>  TRUE
[20:50:36.673]      // while "1"  (timeout="200")
[20:50:36.673]      // while-condition  =>  TRUE
[20:50:36.673]      // while "1"  (timeout="200")
[20:50:36.673]      // while-condition  =>  TRUE
[20:50:36.673]      // while "1"  (timeout="200")
[20:50:36.674]      // while-condition  =>  TRUE
[20:50:36.674]      // while "1"  (timeout="200")
[20:50:36.674]      // while-condition  =>  TRUE
[20:50:36.674]      // while "1"  (timeout="200")
[20:50:36.674]      // while-condition  =>  TRUE
[20:50:36.674]      // while "1"  (timeout="200")
[20:50:36.674]      // while-condition  =>  TRUE
[20:50:36.674]      // while "1"  (timeout="200")
[20:50:36.674]      // while-condition  =>  TRUE
[20:50:36.675]      // while "1"  (timeout="200")
[20:50:36.675]      // while-condition  =>  TRUE
[20:50:36.675]      // while "1"  (timeout="200")
[20:50:36.675]      // while-condition  =>  TRUE
[20:50:36.675]      // while "1"  (timeout="200")
[20:50:36.675]      // while-condition  =>  TRUE
[20:50:36.675]      // while "1"  (timeout="200")
[20:50:36.675]      // while-condition  =>  TRUE
[20:50:36.675]      // while "1"  (timeout="200")
[20:50:36.675]      // while-condition  =>  TRUE
[20:50:36.675]      // while "1"  (timeout="200")
[20:50:36.676]      // while-condition  =>  TRUE
[20:50:36.676]      // while "1"  (timeout="200")
[20:50:36.676]      // while-condition  =>  TRUE
[20:50:36.676]      // while "1"  (timeout="200")
[20:50:36.676]      // while-condition  =>  TRUE
[20:50:36.676]      // while "1"  (timeout="200")
[20:50:36.676]      // while-condition  =>  TRUE
[20:50:36.676]      // while "1"  (timeout="200")
[20:50:36.676]      // while-condition  =>  TRUE
[20:50:36.676]      // while "1"  (timeout="200")
[20:50:36.676]      // while-condition  =>  TRUE
[20:50:36.676]      // while "1"  (timeout="200")
[20:50:36.677]      // while-condition  =>  TRUE
[20:50:36.677]      // while "1"  (timeout="200")
[20:50:36.677]      // while-condition  =>  TRUE
[20:50:36.677]      // while "1"  (timeout="200")
[20:50:36.677]      // while-condition  =>  TRUE
[20:50:36.677]      // while "1"  (timeout="200")
[20:50:36.677]      // while-condition  =>  TRUE
[20:50:36.677]      // while "1"  (timeout="200")
[20:50:36.677]      // while-condition  =>  TRUE
[20:50:36.677]      // while "1"  (timeout="200")
[20:50:36.677]      // while-condition  =>  TRUE
[20:50:36.677]      // while "1"  (timeout="200")
[20:50:36.677]      // while-condition  =>  TRUE
[20:50:36.677]      // while "1"  (timeout="200")
[20:50:36.677]      // while-condition  =>  TRUE
[20:50:36.677]      // while "1"  (timeout="200")
[20:50:36.677]      // while-condition  =>  TRUE
[20:50:36.677]      // while "1"  (timeout="200")
[20:50:36.678]      // while-condition  =>  TRUE
[20:50:36.678]      // while "1"  (timeout="200")
[20:50:36.678]      // while-condition  =>  TRUE
[20:50:36.678]      // while "1"  (timeout="200")
[20:50:36.678]      // while-condition  =>  TRUE
[20:50:36.678]      // while "1"  (timeout="200")
[20:50:36.678]      // while-condition  =>  TRUE
[20:50:36.678]      // while "1"  (timeout="200")
[20:50:36.678]      // while-condition  =>  TRUE
[20:50:36.678]      // while "1"  (timeout="200")
[20:50:36.679]      // while-condition  =>  TRUE
[20:50:36.679]      // while "1"  (timeout="200")
[20:50:36.679]      // while-condition  =>  TRUE
[20:50:36.679]      // while "1"  (timeout="200")
[20:50:36.679]      // while-condition  =>  TRUE
[20:50:36.679]      // while "1"  (timeout="200")
[20:50:36.679]      // while-condition  =>  TRUE
[20:50:36.679]      // while "1"  (timeout="200")
[20:50:36.679]      // while-condition  =>  TRUE
[20:50:36.679]      // while "1"  (timeout="200")
[20:50:36.680]      // while-condition  =>  TRUE
[20:50:36.680]      // while "1"  (timeout="200")
[20:50:36.680]      // while-condition  =>  TRUE
[20:50:36.680]      // while "1"  (timeout="200")
[20:50:36.680]      // while-condition  =>  TRUE
[20:50:36.680]      // while "1"  (timeout="200")
[20:50:36.680]      // while-condition  =>  TRUE
[20:50:36.681]      // while "1"  (timeout="200")
[20:50:36.681]      // while-condition  =>  TRUE
[20:50:36.681]      // while "1"  (timeout="200")
[20:50:36.681]      // while-condition  =>  TRUE
[20:50:36.681]      // while "1"  (timeout="200")
[20:50:36.681]      // while-condition  =>  TRUE
[20:50:36.681]      // while "1"  (timeout="200")
[20:50:36.681]      // while-condition  =>  TRUE
[20:50:36.681]      // while "1"  (timeout="200")
[20:50:36.681]      // while-condition  =>  TRUE
[20:50:36.681]      // while "1"  (timeout="200")
[20:50:36.681]      // while-condition  =>  TRUE
[20:50:36.682]      // while "1"  (timeout="200")
[20:50:36.682]      // while-condition  =>  TRUE
[20:50:36.682]      // while "1"  (timeout="200")
[20:50:36.682]      // while-condition  =>  TRUE
[20:50:36.682]      // while "1"  (timeout="200")
[20:50:36.682]      // while-condition  =>  TRUE
[20:50:36.682]      // while "1"  (timeout="200")
[20:50:36.682]      // while-condition  =>  TRUE
[20:50:36.682]      // while "1"  (timeout="200")
[20:50:36.682]      // while-condition  =>  TRUE
[20:50:36.682]      // while "1"  (timeout="200")
[20:50:36.683]      // while-condition  =>  TRUE
[20:50:36.683]      // while "1"  (timeout="200")
[20:50:36.683]      // while-condition  =>  TRUE
[20:50:36.683]      // while "1"  (timeout="200")
[20:50:36.683]      // while-condition  =>  TRUE
[20:50:36.683]      // while "1"  (timeout="200")
[20:50:36.683]      // while-condition  =>  TRUE
[20:50:36.683]      // while "1"  (timeout="200")
[20:50:36.683]      // while-condition  =>  TRUE
[20:50:36.683]      // while "1"  (timeout="200")
[20:50:36.683]      // while-condition  =>  TRUE
[20:50:36.683]      // while "1"  (timeout="200")
[20:50:36.684]      // while-condition  =>  TRUE
[20:50:36.684]      // while "1"  (timeout="200")
[20:50:36.684]      // while-condition  =>  TRUE
[20:50:36.684]      // while "1"  (timeout="200")
[20:50:36.684]      // while-condition  =>  TRUE
[20:50:36.684]      // while "1"  (timeout="200")
[20:50:36.684]      // while-condition  =>  TRUE
[20:50:36.684]      // while "1"  (timeout="200")
[20:50:36.684]      // while-condition  =>  TRUE
[20:50:36.684]      // while "1"  (timeout="200")
[20:50:36.684]      // while-condition  =>  TRUE
[20:50:36.685]      // while "1"  (timeout="200")
[20:50:36.685]      // while-condition  =>  TRUE
[20:50:36.685]      // while "1"  (timeout="200")
[20:50:36.685]      // while-condition  =>  TRUE
[20:50:36.685]      // while "1"  (timeout="200")
[20:50:36.685]      // while-condition  =>  TRUE
[20:50:36.685]      // while "1"  (timeout="200")
[20:50:36.685]      // while-condition  =>  TRUE
[20:50:36.685]      // while "1"  (timeout="200")
[20:50:36.685]      // while-condition  =>  TRUE
[20:50:36.685]      // while "1"  (timeout="200")
[20:50:36.685]      // while-condition  =>  TRUE
[20:50:36.686]      // while "1"  (timeout="200")
[20:50:36.686]      // while-condition  =>  TRUE
[20:50:36.686]      // while "1"  (timeout="200")
[20:50:36.686]      // while-condition  =>  TRUE
[20:50:36.686]      // while "1"  (timeout="200")
[20:50:36.686]      // while-condition  =>  TRUE
[20:50:36.686]      // while "1"  (timeout="200")
[20:50:36.686]      // while-condition  =>  TRUE
[20:50:36.686]      // while "1"  (timeout="200")
[20:50:36.686]      // while-condition  =>  TRUE
[20:50:36.686]      // while "1"  (timeout="200")
[20:50:36.686]      // while-condition  =>  TRUE
[20:50:36.687]      // while "1"  (timeout="200")
[20:50:36.687]      // while-condition  =>  TRUE
[20:50:36.687]      // while "1"  (timeout="200")
[20:50:36.687]      // while-condition  =>  TRUE
[20:50:36.687]      // while "1"  (timeout="200")
[20:50:36.687]      // while-condition  =>  TRUE
[20:50:36.687]      // while "1"  (timeout="200")
[20:50:36.687]      // while-condition  =>  TRUE
[20:50:36.687]      // while "1"  (timeout="200")
[20:50:36.687]      // while-condition  =>  TRUE
[20:50:36.687]      // while "1"  (timeout="200")
[20:50:36.688]      // while-condition  =>  TRUE
[20:50:36.688]      // while "1"  (timeout="200")
[20:50:36.688]      // while-condition  =>  TRUE
[20:50:36.688]      // while "1"  (timeout="200")
[20:50:36.688]      // while-condition  =>  TRUE
[20:50:36.688]      // while "1"  (timeout="200")
[20:50:36.689]      // while-condition  =>  TRUE
[20:50:36.689]      // while "1"  (timeout="200")
[20:50:36.689]      // while  =>  TIMEOUT
[20:50:36.689]      // end while "1"
[20:50:36.689]    </control>
[20:50:36.689]    <control if="canReadPins" while="" timeout="0" info="">
[20:50:36.689]      // if-block "canReadPins"
[20:50:36.689]        // =>  TRUE
[20:50:36.689]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:50:36.689]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:50:36.693]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:50:36.693]        // while-condition  =>  FALSE
[20:50:36.693]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:50:36.693]      </control>
[20:50:36.693]      // end if-block "canReadPins"
[20:50:36.693]    </control>
[20:50:36.694]    <control if="!canReadPins" while="" timeout="0" info="">
[20:50:36.694]      // if-block "!canReadPins"
[20:50:36.694]        // =>  FALSE
[20:50:36.694]      // skip if-block "!canReadPins"
[20:50:36.694]    </control>
[20:50:36.694]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:50:36.694]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:50:36.694]        // =>  TRUE
[20:50:36.694]      <block atomic="false" info="">
[20:50:36.694]        WriteAP(0x00, 0x190008);
[20:50:36.696]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:50:36.696]        WriteAP(0xF0, 0x01);
[20:50:36.704]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:50:36.705]      </block>
[20:50:36.705]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:50:36.705]    </control>
[20:50:36.705]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:50:36.705]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:50:36.705]        // =>  FALSE
[20:50:36.705]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:50:36.706]    </control>
[20:50:36.706]    <block atomic="false" info="">
[20:50:36.706]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:50:36.730]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:50:36.730]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:50:36.730]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:50:36.731]      __ap = 0; //lets make sure we reset the access point selection
[20:50:36.731]        // -> [__ap <= 0x00000000]
[20:50:36.732]    </block>
[20:50:36.732]  </sequence>
[20:50:36.732]  
[20:50:36.777]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:50:36.777]  
[20:50:36.777]  <debugvars>
[20:50:36.777]    // Pre-defined
[20:50:36.777]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:50:36.777]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:50:36.777]    __dp=0x00000000
[20:50:36.777]    __ap=0x00000000
[20:50:36.777]    __traceout=0x00000000      (Trace Disabled)
[20:50:36.777]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:50:36.777]    __FlashAddr=0x00000000
[20:50:36.777]    __FlashLen=0x00000000
[20:50:36.777]    __FlashArg=0x00000000
[20:50:36.777]    __FlashOp=0x00000000
[20:50:36.777]    __Result=0x00000000
[20:50:36.778]  </debugvars>
[20:50:36.778]  
[20:50:36.778]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:50:36.778]    <block atomic="false" info="">
[20:50:36.778]      __var deviceID = 0;
[20:50:36.778]        // -> [deviceID <= 0x00000000]
[20:50:36.778]      __var version = 0;
[20:50:36.778]        // -> [version <= 0x00000000]
[20:50:36.779]      __var partNum = 0;
[20:50:36.779]        // -> [partNum <= 0x00000000]
[20:50:36.779]      __var manuf = 0;
[20:50:36.779]        // -> [manuf <= 0x00000000]
[20:50:36.779]      __var isMSPM0G1X0X_G3X0X = 0;
[20:50:36.779]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:50:36.779]      __var isProduction = 0;
[20:50:36.779]        // -> [isProduction <= 0x00000000]
[20:50:36.780]      __var continueId = 0;
[20:50:36.780]        // -> [continueId <= 0x00000000]
[20:50:36.780]      deviceID =   Read32(0x41C40004);
[20:50:36.789]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:50:36.789]        // -> [deviceID <= 0x2BB8802F]
[20:50:36.789]      version = deviceID >> 28;
[20:50:36.789]        // -> [version <= 0x00000002]
[20:50:36.789]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:50:36.790]        // -> [partNum <= 0x0000BB88]
[20:50:36.790]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:50:36.790]        // -> [manuf <= 0x00000017]
[20:50:36.790]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:50:36.790]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:50:36.790]      isProduction = (version > 0);
[20:50:36.790]        // -> [isProduction <= 0x00000001]
[20:50:36.790]    </block>
[20:50:36.790]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:50:36.790]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:50:36.790]        // =>  FALSE
[20:50:36.790]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:50:36.791]    </control>
[20:50:36.791]    <control if="continueId == 4" while="" timeout="0" info="">
[20:50:36.791]      // if-block "continueId == 4"
[20:50:36.791]        // =>  FALSE
[20:50:36.791]      // skip if-block "continueId == 4"
[20:50:36.791]    </control>
[20:50:36.791]    <control if="!isProduction" while="" timeout="0" info="">
[20:50:36.791]      // if-block "!isProduction"
[20:50:36.791]        // =>  FALSE
[20:50:36.791]      // skip if-block "!isProduction"
[20:50:36.791]    </control>
[20:50:36.791]  </sequence>
[20:50:36.792]  
[20:53:28.088]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:53:28.088]  
[20:53:28.096]  <debugvars>
[20:53:28.096]    // Pre-defined
[20:53:28.096]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:53:28.097]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:53:28.097]    __dp=0x00000000
[20:53:28.097]    __ap=0x00000000
[20:53:28.097]    __traceout=0x00000000      (Trace Disabled)
[20:53:28.097]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:53:28.097]    __FlashAddr=0x00000000
[20:53:28.097]    __FlashLen=0x00000000
[20:53:28.097]    __FlashArg=0x00000000
[20:53:28.097]    __FlashOp=0x00000000
[20:53:28.097]    __Result=0x00000000
[20:53:28.097]  </debugvars>
[20:53:28.097]  
[20:53:28.098]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:53:28.098]    <block atomic="false" info="">
[20:53:28.098]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:53:28.098]        // -> [isSWJ <= 0x00000001]
[20:53:28.098]      __var hasDormant = __protocol & 0x00020000;
[20:53:28.098]        // -> [hasDormant <= 0x00000000]
[20:53:28.098]      __var protType   = __protocol & 0x0000FFFF;
[20:53:28.098]        // -> [protType <= 0x00000002]
[20:53:28.098]    </block>
[20:53:28.099]    <control if="protType == 1" while="" timeout="0" info="">
[20:53:28.099]      // if-block "protType == 1"
[20:53:28.099]        // =>  FALSE
[20:53:28.099]      // skip if-block "protType == 1"
[20:53:28.099]    </control>
[20:53:28.099]    <control if="protType == 2" while="" timeout="0" info="">
[20:53:28.099]      // if-block "protType == 2"
[20:53:28.100]        // =>  TRUE
[20:53:28.100]      <control if="isSWJ" while="" timeout="0" info="">
[20:53:28.100]        // if-block "isSWJ"
[20:53:28.100]          // =>  TRUE
[20:53:28.100]        <control if="hasDormant" while="" timeout="0" info="">
[20:53:28.100]          // if-block "hasDormant"
[20:53:28.100]            // =>  FALSE
[20:53:28.100]          // skip if-block "hasDormant"
[20:53:28.100]        </control>
[20:53:28.100]        <control if="!hasDormant" while="" timeout="0" info="">
[20:53:28.100]          // if-block "!hasDormant"
[20:53:28.100]            // =>  TRUE
[20:53:28.101]          <block atomic="false" info="">
[20:53:28.101]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:53:28.103]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:53:28.103]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:53:28.109]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:53:28.110]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:53:28.111]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:53:28.111]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:53:28.113]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:53:28.113]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:53:28.120]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:53:28.120]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:53:28.121]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:53:28.121]          </block>
[20:53:28.121]          // end if-block "!hasDormant"
[20:53:28.121]        </control>
[20:53:28.121]        // end if-block "isSWJ"
[20:53:28.121]      </control>
[20:53:28.121]      <control if="!isSWJ" while="" timeout="0" info="">
[20:53:28.121]        // if-block "!isSWJ"
[20:53:28.121]          // =>  FALSE
[20:53:28.122]        // skip if-block "!isSWJ"
[20:53:28.122]      </control>
[20:53:28.122]      <block atomic="false" info="">
[20:53:28.122]        ReadDP(0x0);
[20:53:28.127]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:53:28.128]      </block>
[20:53:28.128]      // end if-block "protType == 2"
[20:53:28.128]    </control>
[20:53:28.128]  </sequence>
[20:53:28.128]  
[20:53:28.130]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:53:28.130]  
[20:53:28.130]  <debugvars>
[20:53:28.131]    // Pre-defined
[20:53:28.131]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:53:28.131]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:53:28.131]    __dp=0x00000000
[20:53:28.131]    __ap=0x00000000
[20:53:28.131]    __traceout=0x00000000      (Trace Disabled)
[20:53:28.131]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:53:28.131]    __FlashAddr=0x00000000
[20:53:28.131]    __FlashLen=0x00000000
[20:53:28.131]    __FlashArg=0x00000000
[20:53:28.131]    __FlashOp=0x00000000
[20:53:28.132]    __Result=0x00000000
[20:53:28.132]  </debugvars>
[20:53:28.132]  
[20:53:28.132]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:53:28.132]    <block atomic="false" info="">
[20:53:28.132]      __var SW_DP_ABORT       = 0x0;
[20:53:28.132]        // -> [SW_DP_ABORT <= 0x00000000]
[20:53:28.132]      __var DP_CTRL_STAT      = 0x4;
[20:53:28.132]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:53:28.133]      __var DP_SELECT         = 0x8;
[20:53:28.133]        // -> [DP_SELECT <= 0x00000008]
[20:53:28.133]      __var powered_down      = 0;
[20:53:28.133]        // -> [powered_down <= 0x00000000]
[20:53:28.133]      WriteDP(DP_SELECT, 0x00000000);
[20:53:28.138]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:53:28.138]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:53:28.140]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:53:28.140]        // -> [powered_down <= 0x00000001]
[20:53:28.140]    </block>
[20:53:28.140]    <control if="powered_down" while="" timeout="0" info="">
[20:53:28.140]      // if-block "powered_down"
[20:53:28.140]        // =>  TRUE
[20:53:28.140]      <block atomic="false" info="">
[20:53:28.140]        Message(0, "Debug/System power-up request sent");
[20:53:28.142]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:53:28.145]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:53:28.145]      </block>
[20:53:28.145]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:53:28.146]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:53:28.148]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:53:28.148]        // while-condition  =>  FALSE
[20:53:28.148]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:53:28.148]      </control>
[20:53:28.149]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:53:28.149]        // if-block "(__protocol & 0xFFFF) == 1"
[20:53:28.149]          // =>  FALSE
[20:53:28.149]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:53:28.149]      </control>
[20:53:28.149]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:53:28.149]        // if-block "(__protocol & 0xFFFF) == 2"
[20:53:28.149]          // =>  TRUE
[20:53:28.149]        <block atomic="false" info="">
[20:53:28.149]          Message(0, "executing SWD power up");
[20:53:28.152]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:53:28.153]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:53:28.153]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:53:28.155]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:53:28.155]        </block>
[20:53:28.155]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:53:28.155]      </control>
[20:53:28.155]      // end if-block "powered_down"
[20:53:28.155]    </control>
[20:53:28.155]    <block atomic="false" info="">
[20:53:28.155]      __var DEBUG_PORT_VAL    = 0;
[20:53:28.156]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:53:28.156]      __var ACCESS_POINT_VAL  = 0;
[20:53:28.156]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:53:28.156]      __ap = 1; 
[20:53:28.156]        // -> [__ap <= 0x00000001]
[20:53:28.156]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:53:28.159]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:53:28.159]      __ap = 4;
[20:53:28.159]        // -> [__ap <= 0x00000004]
[20:53:28.159]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:53:28.164]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:53:28.164]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:53:28.164]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:53:28.167]    </block>
[20:53:28.167]    <block atomic="false" info="">
[20:53:28.167]      __var nReset = 0x80;
[20:53:28.167]        // -> [nReset <= 0x00000080]
[20:53:28.168]      __var canReadPins = 0;
[20:53:28.168]        // -> [canReadPins <= 0x00000000]
[20:53:28.168]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:53:28.169]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:53:28.169]        // -> [canReadPins <= 0x00000001]
[20:53:28.169]    </block>
[20:53:28.169]    <control if="" while="1" timeout="200" info="">
[20:53:28.169]      // while "1"  (timeout="200")
[20:53:28.170]      // while-condition  =>  TRUE
[20:53:28.170]      // while "1"  (timeout="200")
[20:53:28.170]      // while-condition  =>  TRUE
[20:53:28.170]      // while "1"  (timeout="200")
[20:53:28.170]      // while-condition  =>  TRUE
[20:53:28.170]      // while "1"  (timeout="200")
[20:53:28.170]      // while-condition  =>  TRUE
[20:53:28.172]      // while "1"  (timeout="200")
[20:53:28.172]      // while-condition  =>  TRUE
[20:53:28.172]      // while "1"  (timeout="200")
[20:53:28.172]      // while-condition  =>  TRUE
[20:53:28.172]      // while "1"  (timeout="200")
[20:53:28.172]      // while-condition  =>  TRUE
[20:53:28.172]      // while "1"  (timeout="200")
[20:53:28.172]      // while-condition  =>  TRUE
[20:53:28.172]      // while "1"  (timeout="200")
[20:53:28.172]      // while-condition  =>  TRUE
[20:53:28.172]      // while "1"  (timeout="200")
[20:53:28.172]      // while-condition  =>  TRUE
[20:53:28.173]      // while "1"  (timeout="200")
[20:53:28.173]      // while  =>  TIMEOUT
[20:53:28.173]      // end while "1"
[20:53:28.173]    </control>
[20:53:28.173]    <control if="canReadPins" while="" timeout="0" info="">
[20:53:28.173]      // if-block "canReadPins"
[20:53:28.173]        // =>  TRUE
[20:53:28.173]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:53:28.173]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:53:28.184]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:53:28.184]        // while-condition  =>  FALSE
[20:53:28.184]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:53:28.184]      </control>
[20:53:28.185]      // end if-block "canReadPins"
[20:53:28.185]    </control>
[20:53:28.185]    <control if="!canReadPins" while="" timeout="0" info="">
[20:53:28.185]      // if-block "!canReadPins"
[20:53:28.185]        // =>  FALSE
[20:53:28.185]      // skip if-block "!canReadPins"
[20:53:28.185]    </control>
[20:53:28.185]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:53:28.185]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:53:28.186]        // =>  TRUE
[20:53:28.186]      <block atomic="false" info="">
[20:53:28.186]        WriteAP(0x00, 0x190008);
[20:53:28.191]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:53:28.191]        WriteAP(0xF0, 0x01);
[20:53:28.197]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:53:28.197]      </block>
[20:53:28.197]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:53:28.197]    </control>
[20:53:28.197]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:53:28.197]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:53:28.197]        // =>  FALSE
[20:53:28.197]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:53:28.197]    </control>
[20:53:28.198]    <block atomic="false" info="">
[20:53:28.198]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:53:28.214]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:53:28.214]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:53:28.214]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:53:28.217]      __ap = 0; //lets make sure we reset the access point selection
[20:53:28.217]        // -> [__ap <= 0x00000000]
[20:53:28.217]    </block>
[20:53:28.217]  </sequence>
[20:53:28.217]  
[20:53:28.259]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:53:28.259]  
[20:53:28.259]  <debugvars>
[20:53:28.259]    // Pre-defined
[20:53:28.259]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:53:28.259]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:53:28.259]    __dp=0x00000000
[20:53:28.259]    __ap=0x00000000
[20:53:28.259]    __traceout=0x00000000      (Trace Disabled)
[20:53:28.259]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:53:28.259]    __FlashAddr=0x00000000
[20:53:28.259]    __FlashLen=0x00000000
[20:53:28.259]    __FlashArg=0x00000000
[20:53:28.259]    __FlashOp=0x00000000
[20:53:28.259]    __Result=0x00000000
[20:53:28.261]  </debugvars>
[20:53:28.261]  
[20:53:28.261]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:53:28.261]    <block atomic="false" info="">
[20:53:28.261]      __var deviceID = 0;
[20:53:28.261]        // -> [deviceID <= 0x00000000]
[20:53:28.261]      __var version = 0;
[20:53:28.261]        // -> [version <= 0x00000000]
[20:53:28.261]      __var partNum = 0;
[20:53:28.261]        // -> [partNum <= 0x00000000]
[20:53:28.261]      __var manuf = 0;
[20:53:28.261]        // -> [manuf <= 0x00000000]
[20:53:28.261]      __var isMSPM0G1X0X_G3X0X = 0;
[20:53:28.262]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:53:28.262]      __var isProduction = 0;
[20:53:28.262]        // -> [isProduction <= 0x00000000]
[20:53:28.262]      __var continueId = 0;
[20:53:28.262]        // -> [continueId <= 0x00000000]
[20:53:28.262]      deviceID =   Read32(0x41C40004);
[20:53:28.274]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:53:28.274]        // -> [deviceID <= 0x2BB8802F]
[20:53:28.274]      version = deviceID >> 28;
[20:53:28.274]        // -> [version <= 0x00000002]
[20:53:28.274]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:53:28.274]        // -> [partNum <= 0x0000BB88]
[20:53:28.274]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:53:28.274]        // -> [manuf <= 0x00000017]
[20:53:28.276]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:53:28.276]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:53:28.276]      isProduction = (version > 0);
[20:53:28.276]        // -> [isProduction <= 0x00000001]
[20:53:28.276]    </block>
[20:53:28.276]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:53:28.276]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:53:28.276]        // =>  FALSE
[20:53:28.276]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:53:28.276]    </control>
[20:53:28.277]    <control if="continueId == 4" while="" timeout="0" info="">
[20:53:28.277]      // if-block "continueId == 4"
[20:53:28.277]        // =>  FALSE
[20:53:28.277]      // skip if-block "continueId == 4"
[20:53:28.277]    </control>
[20:53:28.277]    <control if="!isProduction" while="" timeout="0" info="">
[20:53:28.277]      // if-block "!isProduction"
[20:53:28.277]        // =>  FALSE
[20:53:28.277]      // skip if-block "!isProduction"
[20:53:28.277]    </control>
[20:53:28.277]  </sequence>
[20:53:28.277]  
[20:55:22.419]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:55:22.419]  
[20:55:22.428]  <debugvars>
[20:55:22.428]    // Pre-defined
[20:55:22.428]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:22.428]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:22.428]    __dp=0x00000000
[20:55:22.429]    __ap=0x00000000
[20:55:22.429]    __traceout=0x00000000      (Trace Disabled)
[20:55:22.429]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:22.429]    __FlashAddr=0x00000000
[20:55:22.429]    __FlashLen=0x00000000
[20:55:22.429]    __FlashArg=0x00000000
[20:55:22.429]    __FlashOp=0x00000000
[20:55:22.429]    __Result=0x00000000
[20:55:22.429]  </debugvars>
[20:55:22.429]  
[20:55:22.429]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:55:22.429]    <block atomic="false" info="">
[20:55:22.429]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:55:22.430]        // -> [isSWJ <= 0x00000001]
[20:55:22.430]      __var hasDormant = __protocol & 0x00020000;
[20:55:22.430]        // -> [hasDormant <= 0x00000000]
[20:55:22.430]      __var protType   = __protocol & 0x0000FFFF;
[20:55:22.430]        // -> [protType <= 0x00000002]
[20:55:22.430]    </block>
[20:55:22.430]    <control if="protType == 1" while="" timeout="0" info="">
[20:55:22.430]      // if-block "protType == 1"
[20:55:22.430]        // =>  FALSE
[20:55:22.431]      // skip if-block "protType == 1"
[20:55:22.431]    </control>
[20:55:22.431]    <control if="protType == 2" while="" timeout="0" info="">
[20:55:22.431]      // if-block "protType == 2"
[20:55:22.431]        // =>  TRUE
[20:55:22.431]      <control if="isSWJ" while="" timeout="0" info="">
[20:55:22.431]        // if-block "isSWJ"
[20:55:22.431]          // =>  TRUE
[20:55:22.431]        <control if="hasDormant" while="" timeout="0" info="">
[20:55:22.431]          // if-block "hasDormant"
[20:55:22.431]            // =>  FALSE
[20:55:22.431]          // skip if-block "hasDormant"
[20:55:22.432]        </control>
[20:55:22.432]        <control if="!hasDormant" while="" timeout="0" info="">
[20:55:22.432]          // if-block "!hasDormant"
[20:55:22.432]            // =>  TRUE
[20:55:22.432]          <block atomic="false" info="">
[20:55:22.432]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:55:22.434]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:22.434]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:55:22.440]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:55:22.440]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:55:22.446]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:22.446]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:55:22.468]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:55:22.468]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:55:22.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:55:22.469]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:55:22.475]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:55:22.475]          </block>
[20:55:22.475]          // end if-block "!hasDormant"
[20:55:22.475]        </control>
[20:55:22.475]        // end if-block "isSWJ"
[20:55:22.475]      </control>
[20:55:22.475]      <control if="!isSWJ" while="" timeout="0" info="">
[20:55:22.475]        // if-block "!isSWJ"
[20:55:22.475]          // =>  FALSE
[20:55:22.475]        // skip if-block "!isSWJ"
[20:55:22.475]      </control>
[20:55:22.475]      <block atomic="false" info="">
[20:55:22.476]        ReadDP(0x0);
[20:55:22.492]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:55:22.492]      </block>
[20:55:22.492]      // end if-block "protType == 2"
[20:55:22.492]    </control>
[20:55:22.492]  </sequence>
[20:55:22.492]  
[20:55:22.502]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:55:22.502]  
[20:55:22.502]  <debugvars>
[20:55:22.502]    // Pre-defined
[20:55:22.502]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:22.502]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:22.502]    __dp=0x00000000
[20:55:22.502]    __ap=0x00000000
[20:55:22.503]    __traceout=0x00000000      (Trace Disabled)
[20:55:22.503]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:22.503]    __FlashAddr=0x00000000
[20:55:22.503]    __FlashLen=0x00000000
[20:55:22.503]    __FlashArg=0x00000000
[20:55:22.503]    __FlashOp=0x00000000
[20:55:22.503]    __Result=0x00000000
[20:55:22.503]  </debugvars>
[20:55:22.503]  
[20:55:22.503]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:55:22.503]    <block atomic="false" info="">
[20:55:22.503]      __var SW_DP_ABORT       = 0x0;
[20:55:22.504]        // -> [SW_DP_ABORT <= 0x00000000]
[20:55:22.504]      __var DP_CTRL_STAT      = 0x4;
[20:55:22.504]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:55:22.504]      __var DP_SELECT         = 0x8;
[20:55:22.504]        // -> [DP_SELECT <= 0x00000008]
[20:55:22.504]      __var powered_down      = 0;
[20:55:22.504]        // -> [powered_down <= 0x00000000]
[20:55:22.504]      WriteDP(DP_SELECT, 0x00000000);
[20:55:22.508]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:55:22.508]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:55:22.516]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:55:22.516]        // -> [powered_down <= 0x00000001]
[20:55:22.516]    </block>
[20:55:22.516]    <control if="powered_down" while="" timeout="0" info="">
[20:55:22.516]      // if-block "powered_down"
[20:55:22.516]        // =>  TRUE
[20:55:22.517]      <block atomic="false" info="">
[20:55:22.517]        Message(0, "Debug/System power-up request sent");
[20:55:22.519]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:55:22.527]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:55:22.528]      </block>
[20:55:22.528]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:55:22.528]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:55:22.534]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:55:22.534]        // while-condition  =>  FALSE
[20:55:22.534]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:55:22.534]      </control>
[20:55:22.534]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:55:22.534]        // if-block "(__protocol & 0xFFFF) == 1"
[20:55:22.534]          // =>  FALSE
[20:55:22.534]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:55:22.534]      </control>
[20:55:22.536]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:55:22.536]        // if-block "(__protocol & 0xFFFF) == 2"
[20:55:22.536]          // =>  TRUE
[20:55:22.536]        <block atomic="false" info="">
[20:55:22.536]          Message(0, "executing SWD power up");
[20:55:22.538]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:55:22.548]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:55:22.548]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:55:22.551]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:55:22.551]        </block>
[20:55:22.551]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:55:22.551]      </control>
[20:55:22.551]      // end if-block "powered_down"
[20:55:22.551]    </control>
[20:55:22.551]    <block atomic="false" info="">
[20:55:22.552]      __var DEBUG_PORT_VAL    = 0;
[20:55:22.552]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:55:22.552]      __var ACCESS_POINT_VAL  = 0;
[20:55:22.552]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:55:22.552]      __ap = 1; 
[20:55:22.552]        // -> [__ap <= 0x00000001]
[20:55:22.552]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:55:22.560]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:55:22.560]      __ap = 4;
[20:55:22.560]        // -> [__ap <= 0x00000004]
[20:55:22.560]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:55:22.568]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:55:22.568]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:55:22.568]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:55:22.571]    </block>
[20:55:22.571]    <block atomic="false" info="">
[20:55:22.571]      __var nReset = 0x80;
[20:55:22.571]        // -> [nReset <= 0x00000080]
[20:55:22.571]      __var canReadPins = 0;
[20:55:22.571]        // -> [canReadPins <= 0x00000000]
[20:55:22.571]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:55:22.574]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:55:22.574]        // -> [canReadPins <= 0x00000001]
[20:55:22.574]    </block>
[20:55:22.576]    <control if="" while="1" timeout="200" info="">
[20:55:22.576]      // while "1"  (timeout="200")
[20:55:22.576]      // while-condition  =>  TRUE
[20:55:22.576]      // while "1"  (timeout="200")
[20:55:22.576]      // while-condition  =>  TRUE
[20:55:22.576]      // while "1"  (timeout="200")
[20:55:22.576]      // while-condition  =>  TRUE
[20:55:22.576]      // while "1"  (timeout="200")
[20:55:22.576]      // while-condition  =>  TRUE
[20:55:22.576]      // while "1"  (timeout="200")
[20:55:22.577]      // while-condition  =>  TRUE
[20:55:22.577]      // while "1"  (timeout="200")
[20:55:22.577]      // while-condition  =>  TRUE
[20:55:22.577]      // while "1"  (timeout="200")
[20:55:22.577]      // while-condition  =>  TRUE
[20:55:22.577]      // while "1"  (timeout="200")
[20:55:22.577]      // while-condition  =>  TRUE
[20:55:22.577]      // while "1"  (timeout="200")
[20:55:22.577]      // while-condition  =>  TRUE
[20:55:22.577]      // while "1"  (timeout="200")
[20:55:22.577]      // while-condition  =>  TRUE
[20:55:22.577]      // while "1"  (timeout="200")
[20:55:22.578]      // while-condition  =>  TRUE
[20:55:22.578]      // while "1"  (timeout="200")
[20:55:22.578]      // while-condition  =>  TRUE
[20:55:22.578]      // while "1"  (timeout="200")
[20:55:22.578]      // while-condition  =>  TRUE
[20:55:22.578]      // while "1"  (timeout="200")
[20:55:22.578]      // while-condition  =>  TRUE
[20:55:22.578]      // while "1"  (timeout="200")
[20:55:22.578]      // while-condition  =>  TRUE
[20:55:22.578]      // while "1"  (timeout="200")
[20:55:22.578]      // while-condition  =>  TRUE
[20:55:22.579]      // while "1"  (timeout="200")
[20:55:22.579]      // while  =>  TIMEOUT
[20:55:22.579]      // end while "1"
[20:55:22.579]    </control>
[20:55:22.579]    <control if="canReadPins" while="" timeout="0" info="">
[20:55:22.579]      // if-block "canReadPins"
[20:55:22.579]        // =>  TRUE
[20:55:22.580]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:55:22.580]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:55:22.582]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:55:22.582]        // while-condition  =>  FALSE
[20:55:22.582]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:55:22.582]      </control>
[20:55:22.582]      // end if-block "canReadPins"
[20:55:22.582]    </control>
[20:55:22.582]    <control if="!canReadPins" while="" timeout="0" info="">
[20:55:22.582]      // if-block "!canReadPins"
[20:55:22.583]        // =>  FALSE
[20:55:22.583]      // skip if-block "!canReadPins"
[20:55:22.583]    </control>
[20:55:22.583]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:55:22.583]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:55:22.583]        // =>  TRUE
[20:55:22.584]      <block atomic="false" info="">
[20:55:22.584]        WriteAP(0x00, 0x190008);
[20:55:22.589]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:55:22.589]        WriteAP(0xF0, 0x01);
[20:55:22.610]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:55:22.611]      </block>
[20:55:22.611]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:55:22.611]    </control>
[20:55:22.611]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:55:22.612]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:55:22.612]        // =>  FALSE
[20:55:22.612]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:55:22.612]    </control>
[20:55:22.612]    <block atomic="false" info="">
[20:55:22.612]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:55:22.626]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:55:22.626]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:55:22.626]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:55:22.628]      __ap = 0; //lets make sure we reset the access point selection
[20:55:22.628]        // -> [__ap <= 0x00000000]
[20:55:22.628]    </block>
[20:55:22.628]  </sequence>
[20:55:22.628]  
[20:55:22.689]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:55:22.689]  
[20:55:22.691]  <debugvars>
[20:55:22.691]    // Pre-defined
[20:55:22.691]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:55:22.691]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:55:22.691]    __dp=0x00000000
[20:55:22.691]    __ap=0x00000000
[20:55:22.691]    __traceout=0x00000000      (Trace Disabled)
[20:55:22.691]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:55:22.691]    __FlashAddr=0x00000000
[20:55:22.691]    __FlashLen=0x00000000
[20:55:22.691]    __FlashArg=0x00000000
[20:55:22.691]    __FlashOp=0x00000000
[20:55:22.691]    __Result=0x00000000
[20:55:22.692]  </debugvars>
[20:55:22.692]  
[20:55:22.692]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:55:22.692]    <block atomic="false" info="">
[20:55:22.692]      __var deviceID = 0;
[20:55:22.692]        // -> [deviceID <= 0x00000000]
[20:55:22.692]      __var version = 0;
[20:55:22.692]        // -> [version <= 0x00000000]
[20:55:22.692]      __var partNum = 0;
[20:55:22.692]        // -> [partNum <= 0x00000000]
[20:55:22.692]      __var manuf = 0;
[20:55:22.692]        // -> [manuf <= 0x00000000]
[20:55:22.692]      __var isMSPM0G1X0X_G3X0X = 0;
[20:55:22.693]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:55:22.693]      __var isProduction = 0;
[20:55:22.693]        // -> [isProduction <= 0x00000000]
[20:55:22.693]      __var continueId = 0;
[20:55:22.693]        // -> [continueId <= 0x00000000]
[20:55:22.693]      deviceID =   Read32(0x41C40004);
[20:55:22.718]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:55:22.718]        // -> [deviceID <= 0x2BB8802F]
[20:55:22.718]      version = deviceID >> 28;
[20:55:22.718]        // -> [version <= 0x00000002]
[20:55:22.718]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:55:22.719]        // -> [partNum <= 0x0000BB88]
[20:55:22.719]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:55:22.719]        // -> [manuf <= 0x00000017]
[20:55:22.719]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:55:22.719]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:55:22.719]      isProduction = (version > 0);
[20:55:22.719]        // -> [isProduction <= 0x00000001]
[20:55:22.720]    </block>
[20:55:22.720]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:55:22.720]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:55:22.720]        // =>  FALSE
[20:55:22.720]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:55:22.720]    </control>
[20:55:22.720]    <control if="continueId == 4" while="" timeout="0" info="">
[20:55:22.720]      // if-block "continueId == 4"
[20:55:22.720]        // =>  FALSE
[20:55:22.720]      // skip if-block "continueId == 4"
[20:55:22.721]    </control>
[20:55:22.721]    <control if="!isProduction" while="" timeout="0" info="">
[20:55:22.721]      // if-block "!isProduction"
[20:55:22.721]        // =>  FALSE
[20:55:22.721]      // skip if-block "!isProduction"
[20:55:22.721]    </control>
[20:55:22.721]  </sequence>
[20:55:22.721]  
[01:13:46.761]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:13:46.761]  
[01:13:46.770]  <debugvars>
[01:13:46.770]    // Pre-defined
[01:13:46.770]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:13:46.770]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:13:46.770]    __dp=0x00000000
[01:13:46.770]    __ap=0x00000000
[01:13:46.770]    __traceout=0x00000000      (Trace Disabled)
[01:13:46.770]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:13:46.770]    __FlashAddr=0x00000000
[01:13:46.770]    __FlashLen=0x00000000
[01:13:46.770]    __FlashArg=0x00000000
[01:13:46.770]    __FlashOp=0x00000000
[01:13:46.770]    __Result=0x00000000
[01:13:46.770]  </debugvars>
[01:13:46.770]  
[01:13:46.770]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:13:46.770]    <block atomic="false" info="">
[01:13:46.770]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:13:46.770]        // -> [isSWJ <= 0x00000001]
[01:13:46.770]      __var hasDormant = __protocol & 0x00020000;
[01:13:46.770]        // -> [hasDormant <= 0x00000000]
[01:13:46.770]      __var protType   = __protocol & 0x0000FFFF;
[01:13:46.770]        // -> [protType <= 0x00000002]
[01:13:46.770]    </block>
[01:13:46.770]    <control if="protType == 1" while="" timeout="0" info="">
[01:13:46.770]      // if-block "protType == 1"
[01:13:46.770]        // =>  FALSE
[01:13:46.770]      // skip if-block "protType == 1"
[01:13:46.770]    </control>
[01:13:46.770]    <control if="protType == 2" while="" timeout="0" info="">
[01:13:46.770]      // if-block "protType == 2"
[01:13:46.770]        // =>  TRUE
[01:13:46.770]      <control if="isSWJ" while="" timeout="0" info="">
[01:13:46.770]        // if-block "isSWJ"
[01:13:46.770]          // =>  TRUE
[01:13:46.770]        <control if="hasDormant" while="" timeout="0" info="">
[01:13:46.770]          // if-block "hasDormant"
[01:13:46.770]            // =>  FALSE
[01:13:46.770]          // skip if-block "hasDormant"
[01:13:46.770]        </control>
[01:13:46.770]        <control if="!hasDormant" while="" timeout="0" info="">
[01:13:46.774]          // if-block "!hasDormant"
[01:13:46.774]            // =>  TRUE
[01:13:46.774]          <block atomic="false" info="">
[01:13:46.774]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:13:46.775]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:13:46.775]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:13:46.775]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:13:46.778]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:13:46.778]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:13:46.778]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:13:46.778]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:13:46.778]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:13:46.782]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:13:46.782]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:13:46.782]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:13:46.782]          </block>
[01:13:46.782]          // end if-block "!hasDormant"
[01:13:46.782]        </control>
[01:13:46.782]        // end if-block "isSWJ"
[01:13:46.782]      </control>
[01:13:46.782]      <control if="!isSWJ" while="" timeout="0" info="">
[01:13:46.782]        // if-block "!isSWJ"
[01:13:46.782]          // =>  FALSE
[01:13:46.782]        // skip if-block "!isSWJ"
[01:13:46.782]      </control>
[01:13:46.786]      <block atomic="false" info="">
[01:13:46.786]        ReadDP(0x0);
[01:13:46.786]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:13:46.786]      </block>
[01:13:46.786]      // end if-block "protType == 2"
[01:13:46.786]    </control>
[01:13:46.786]  </sequence>
[01:13:46.786]  
[01:13:46.794]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:13:46.794]  
[01:13:46.794]  <debugvars>
[01:13:46.798]    // Pre-defined
[01:13:46.798]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:13:46.798]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:13:46.798]    __dp=0x00000000
[01:13:46.798]    __ap=0x00000000
[01:13:46.798]    __traceout=0x00000000      (Trace Disabled)
[01:13:46.798]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:13:46.798]    __FlashAddr=0x00000000
[01:13:46.798]    __FlashLen=0x00000000
[01:13:46.798]    __FlashArg=0x00000000
[01:13:46.798]    __FlashOp=0x00000000
[01:13:46.798]    __Result=0x00000000
[01:13:46.798]  </debugvars>
[01:13:46.799]  
[01:13:46.799]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:13:46.799]    <block atomic="false" info="">
[01:13:46.799]      __var SW_DP_ABORT       = 0x0;
[01:13:46.799]        // -> [SW_DP_ABORT <= 0x00000000]
[01:13:46.799]      __var DP_CTRL_STAT      = 0x4;
[01:13:46.799]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:13:46.799]      __var DP_SELECT         = 0x8;
[01:13:46.799]        // -> [DP_SELECT <= 0x00000008]
[01:13:46.799]      __var powered_down      = 0;
[01:13:46.799]        // -> [powered_down <= 0x00000000]
[01:13:46.799]      WriteDP(DP_SELECT, 0x00000000);
[01:13:46.802]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:13:46.802]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:13:46.802]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:13:46.802]        // -> [powered_down <= 0x00000001]
[01:13:46.802]    </block>
[01:13:46.802]    <control if="powered_down" while="" timeout="0" info="">
[01:13:46.802]      // if-block "powered_down"
[01:13:46.806]        // =>  TRUE
[01:13:46.806]      <block atomic="false" info="">
[01:13:46.806]        Message(0, "Debug/System power-up request sent");
[01:13:46.806]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:13:46.806]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:13:46.806]      </block>
[01:13:46.810]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:13:46.810]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:13:46.814]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:13:46.814]        // while-condition  =>  FALSE
[01:13:46.814]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:13:46.814]      </control>
[01:13:46.814]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:13:46.814]        // if-block "(__protocol & 0xFFFF) == 1"
[01:13:46.814]          // =>  FALSE
[01:13:46.814]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:13:46.814]      </control>
[01:13:46.814]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:13:46.814]        // if-block "(__protocol & 0xFFFF) == 2"
[01:13:46.814]          // =>  TRUE
[01:13:46.814]        <block atomic="false" info="">
[01:13:46.814]          Message(0, "executing SWD power up");
[01:13:46.818]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:13:46.818]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:13:46.818]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:13:46.822]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:13:46.822]        </block>
[01:13:46.822]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:13:46.822]      </control>
[01:13:46.822]      // end if-block "powered_down"
[01:13:46.822]    </control>
[01:13:46.822]    <block atomic="false" info="">
[01:13:46.822]      __var DEBUG_PORT_VAL    = 0;
[01:13:46.822]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:13:46.822]      __var ACCESS_POINT_VAL  = 0;
[01:13:46.822]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:13:46.822]      __ap = 1; 
[01:13:46.822]        // -> [__ap <= 0x00000001]
[01:13:46.822]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:13:46.826]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:13:46.826]      __ap = 4;
[01:13:46.826]        // -> [__ap <= 0x00000004]
[01:13:46.826]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:13:46.830]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:13:46.830]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:13:46.830]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:13:46.830]    </block>
[01:13:46.830]    <block atomic="false" info="">
[01:13:46.830]      __var nReset = 0x80;
[01:13:46.830]        // -> [nReset <= 0x00000080]
[01:13:46.830]      __var canReadPins = 0;
[01:13:46.830]        // -> [canReadPins <= 0x00000000]
[01:13:46.830]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:13:46.834]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:13:46.834]        // -> [canReadPins <= 0x00000001]
[01:13:46.834]    </block>
[01:13:46.834]    <control if="" while="1" timeout="200" info="">
[01:13:46.834]      // while "1"  (timeout="200")
[01:13:46.836]      // while-condition  =>  TRUE
[01:13:46.836]      // while "1"  (timeout="200")
[01:13:46.836]      // while-condition  =>  TRUE
[01:13:46.836]      // while "1"  (timeout="200")
[01:13:46.836]      // while-condition  =>  TRUE
[01:13:46.836]      // while "1"  (timeout="200")
[01:13:46.836]      // while-condition  =>  TRUE
[01:13:46.836]      // while "1"  (timeout="200")
[01:13:46.836]      // while-condition  =>  TRUE
[01:13:46.836]      // while "1"  (timeout="200")
[01:13:46.836]      // while-condition  =>  TRUE
[01:13:46.836]      // while "1"  (timeout="200")
[01:13:46.837]      // while-condition  =>  TRUE
[01:13:46.837]      // while "1"  (timeout="200")
[01:13:46.837]      // while-condition  =>  TRUE
[01:13:46.837]      // while "1"  (timeout="200")
[01:13:46.837]      // while-condition  =>  TRUE
[01:13:46.837]      // while "1"  (timeout="200")
[01:13:46.837]      // while-condition  =>  TRUE
[01:13:46.837]      // while "1"  (timeout="200")
[01:13:46.837]      // while-condition  =>  TRUE
[01:13:46.837]      // while "1"  (timeout="200")
[01:13:46.837]      // while-condition  =>  TRUE
[01:13:46.837]      // while "1"  (timeout="200")
[01:13:46.837]      // while-condition  =>  TRUE
[01:13:46.837]      // while "1"  (timeout="200")
[01:13:46.837]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.838]      // while "1"  (timeout="200")
[01:13:46.838]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.842]      // while "1"  (timeout="200")
[01:13:46.842]      // while-condition  =>  TRUE
[01:13:46.846]      // while "1"  (timeout="200")
[01:13:46.846]      // while  =>  TIMEOUT
[01:13:46.846]      // end while "1"
[01:13:46.846]    </control>
[01:13:46.846]    <control if="canReadPins" while="" timeout="0" info="">
[01:13:46.846]      // if-block "canReadPins"
[01:13:46.846]        // =>  TRUE
[01:13:46.846]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:13:46.846]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:13:46.851]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:13:46.851]        // while-condition  =>  FALSE
[01:13:46.851]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:13:46.851]      </control>
[01:13:46.851]      // end if-block "canReadPins"
[01:13:46.851]    </control>
[01:13:46.851]    <control if="!canReadPins" while="" timeout="0" info="">
[01:13:46.851]      // if-block "!canReadPins"
[01:13:46.851]        // =>  FALSE
[01:13:46.851]      // skip if-block "!canReadPins"
[01:13:46.851]    </control>
[01:13:46.851]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:13:46.851]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:13:46.851]        // =>  TRUE
[01:13:46.851]      <block atomic="false" info="">
[01:13:46.851]        WriteAP(0x00, 0x190008);
[01:13:46.855]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:13:46.855]        WriteAP(0xF0, 0x01);
[01:13:46.859]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:13:46.859]      </block>
[01:13:46.859]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:13:46.859]    </control>
[01:13:46.859]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:13:46.859]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:13:46.859]        // =>  FALSE
[01:13:46.859]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:13:46.859]    </control>
[01:13:46.859]    <block atomic="false" info="">
[01:13:46.859]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:13:46.863]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:13:46.863]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:13:46.863]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:13:46.867]      __ap = 0; //lets make sure we reset the access point selection
[01:13:46.867]        // -> [__ap <= 0x00000000]
[01:13:46.867]    </block>
[01:13:46.867]  </sequence>
[01:13:46.867]  
[01:13:46.899]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:13:46.899]  
[01:13:46.899]  <debugvars>
[01:13:46.899]    // Pre-defined
[01:13:46.899]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:13:46.899]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:13:46.899]    __dp=0x00000000
[01:13:46.899]    __ap=0x00000000
[01:13:46.899]    __traceout=0x00000000      (Trace Disabled)
[01:13:46.899]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:13:46.899]    __FlashAddr=0x00000000
[01:13:46.899]    __FlashLen=0x00000000
[01:13:46.899]    __FlashArg=0x00000000
[01:13:46.899]    __FlashOp=0x00000000
[01:13:46.899]    __Result=0x00000000
[01:13:46.899]  </debugvars>
[01:13:46.899]  
[01:13:46.899]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:13:46.899]    <block atomic="false" info="">
[01:13:46.899]      __var deviceID = 0;
[01:13:46.899]        // -> [deviceID <= 0x00000000]
[01:13:46.899]      __var version = 0;
[01:13:46.899]        // -> [version <= 0x00000000]
[01:13:46.899]      __var partNum = 0;
[01:13:46.899]        // -> [partNum <= 0x00000000]
[01:13:46.899]      __var manuf = 0;
[01:13:46.899]        // -> [manuf <= 0x00000000]
[01:13:46.899]      __var isMSPM0G1X0X_G3X0X = 0;
[01:13:46.899]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:13:46.903]      __var isProduction = 0;
[01:13:46.903]        // -> [isProduction <= 0x00000000]
[01:13:46.903]      __var continueId = 0;
[01:13:46.903]        // -> [continueId <= 0x00000000]
[01:13:46.903]      deviceID =   Read32(0x41C40004);
[01:13:46.911]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:13:46.911]        // -> [deviceID <= 0x2BB8802F]
[01:13:46.911]      version = deviceID >> 28;
[01:13:46.911]        // -> [version <= 0x00000002]
[01:13:46.911]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:13:46.911]        // -> [partNum <= 0x0000BB88]
[01:13:46.911]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:13:46.911]        // -> [manuf <= 0x00000017]
[01:13:46.911]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:13:46.911]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:13:46.911]      isProduction = (version > 0);
[01:13:46.911]        // -> [isProduction <= 0x00000001]
[01:13:46.911]    </block>
[01:13:46.911]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:13:46.911]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:13:46.911]        // =>  FALSE
[01:13:46.911]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:13:46.911]    </control>
[01:13:46.911]    <control if="continueId == 4" while="" timeout="0" info="">
[01:13:46.911]      // if-block "continueId == 4"
[01:13:46.911]        // =>  FALSE
[01:13:46.911]      // skip if-block "continueId == 4"
[01:13:46.911]    </control>
[01:13:46.911]    <control if="!isProduction" while="" timeout="0" info="">
[01:13:46.911]      // if-block "!isProduction"
[01:13:46.911]        // =>  FALSE
[01:13:46.911]      // skip if-block "!isProduction"
[01:13:46.911]    </control>
[01:13:46.911]  </sequence>
[01:13:46.911]  
[01:14:59.468]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:14:59.468]  
[01:14:59.468]  <debugvars>
[01:14:59.468]    // Pre-defined
[01:14:59.468]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:14:59.468]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:14:59.468]    __dp=0x00000000
[01:14:59.468]    __ap=0x00000000
[01:14:59.468]    __traceout=0x00000000      (Trace Disabled)
[01:14:59.468]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:14:59.468]    __FlashAddr=0x00000000
[01:14:59.468]    __FlashLen=0x00000000
[01:14:59.468]    __FlashArg=0x00000000
[01:14:59.468]    __FlashOp=0x00000000
[01:14:59.468]    __Result=0x00000000
[01:14:59.470]  </debugvars>
[01:14:59.470]  
[01:14:59.470]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:14:59.470]    <block atomic="false" info="">
[01:14:59.470]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:14:59.470]        // -> [isSWJ <= 0x00000001]
[01:14:59.470]      __var hasDormant = __protocol & 0x00020000;
[01:14:59.470]        // -> [hasDormant <= 0x00000000]
[01:14:59.470]      __var protType   = __protocol & 0x0000FFFF;
[01:14:59.470]        // -> [protType <= 0x00000002]
[01:14:59.470]    </block>
[01:14:59.470]    <control if="protType == 1" while="" timeout="0" info="">
[01:14:59.470]      // if-block "protType == 1"
[01:14:59.470]        // =>  FALSE
[01:14:59.470]      // skip if-block "protType == 1"
[01:14:59.470]    </control>
[01:14:59.470]    <control if="protType == 2" while="" timeout="0" info="">
[01:14:59.470]      // if-block "protType == 2"
[01:14:59.470]        // =>  TRUE
[01:14:59.470]      <control if="isSWJ" while="" timeout="0" info="">
[01:14:59.470]        // if-block "isSWJ"
[01:14:59.470]          // =>  TRUE
[01:14:59.470]        <control if="hasDormant" while="" timeout="0" info="">
[01:14:59.472]          // if-block "hasDormant"
[01:14:59.472]            // =>  FALSE
[01:14:59.472]          // skip if-block "hasDormant"
[01:14:59.472]        </control>
[01:14:59.472]        <control if="!hasDormant" while="" timeout="0" info="">
[01:14:59.472]          // if-block "!hasDormant"
[01:14:59.472]            // =>  TRUE
[01:14:59.472]          <block atomic="false" info="">
[01:14:59.472]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:14:59.474]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:14:59.477]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:14:59.478]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:14:59.478]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:14:59.480]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:14:59.480]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:14:59.484]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:14:59.484]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:14:59.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:14:59.488]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:14:59.488]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:14:59.488]          </block>
[01:14:59.488]          // end if-block "!hasDormant"
[01:14:59.488]        </control>
[01:14:59.488]        // end if-block "isSWJ"
[01:14:59.488]      </control>
[01:14:59.488]      <control if="!isSWJ" while="" timeout="0" info="">
[01:14:59.488]        // if-block "!isSWJ"
[01:14:59.488]          // =>  FALSE
[01:14:59.488]        // skip if-block "!isSWJ"
[01:14:59.488]      </control>
[01:14:59.488]      <block atomic="false" info="">
[01:14:59.488]        ReadDP(0x0);
[01:14:59.492]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:14:59.492]      </block>
[01:14:59.492]      // end if-block "protType == 2"
[01:14:59.492]    </control>
[01:14:59.492]  </sequence>
[01:14:59.492]  
[01:14:59.497]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:14:59.497]  
[01:14:59.497]  <debugvars>
[01:14:59.497]    // Pre-defined
[01:14:59.497]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:14:59.497]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:14:59.497]    __dp=0x00000000
[01:14:59.497]    __ap=0x00000000
[01:14:59.497]    __traceout=0x00000000      (Trace Disabled)
[01:14:59.497]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:14:59.497]    __FlashAddr=0x00000000
[01:14:59.497]    __FlashLen=0x00000000
[01:14:59.497]    __FlashArg=0x00000000
[01:14:59.497]    __FlashOp=0x00000000
[01:14:59.497]    __Result=0x00000000
[01:14:59.497]  </debugvars>
[01:14:59.497]  
[01:14:59.497]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:14:59.497]    <block atomic="false" info="">
[01:14:59.497]      __var SW_DP_ABORT       = 0x0;
[01:14:59.497]        // -> [SW_DP_ABORT <= 0x00000000]
[01:14:59.497]      __var DP_CTRL_STAT      = 0x4;
[01:14:59.497]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:14:59.497]      __var DP_SELECT         = 0x8;
[01:14:59.497]        // -> [DP_SELECT <= 0x00000008]
[01:14:59.497]      __var powered_down      = 0;
[01:14:59.497]        // -> [powered_down <= 0x00000000]
[01:14:59.497]      WriteDP(DP_SELECT, 0x00000000);
[01:14:59.503]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:14:59.503]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:14:59.504]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:14:59.505]        // -> [powered_down <= 0x00000001]
[01:14:59.505]    </block>
[01:14:59.505]    <control if="powered_down" while="" timeout="0" info="">
[01:14:59.505]      // if-block "powered_down"
[01:14:59.505]        // =>  TRUE
[01:14:59.505]      <block atomic="false" info="">
[01:14:59.505]        Message(0, "Debug/System power-up request sent");
[01:14:59.507]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:14:59.509]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:14:59.509]      </block>
[01:14:59.509]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:14:59.509]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:14:59.513]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:14:59.513]        // while-condition  =>  FALSE
[01:14:59.513]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:14:59.513]      </control>
[01:14:59.513]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:14:59.513]        // if-block "(__protocol & 0xFFFF) == 1"
[01:14:59.513]          // =>  FALSE
[01:14:59.513]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:14:59.514]      </control>
[01:14:59.514]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:14:59.514]        // if-block "(__protocol & 0xFFFF) == 2"
[01:14:59.514]          // =>  TRUE
[01:14:59.514]        <block atomic="false" info="">
[01:14:59.514]          Message(0, "executing SWD power up");
[01:14:59.515]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:14:59.519]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:14:59.519]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:14:59.520]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:14:59.520]        </block>
[01:14:59.520]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:14:59.520]      </control>
[01:14:59.522]      // end if-block "powered_down"
[01:14:59.522]    </control>
[01:14:59.522]    <block atomic="false" info="">
[01:14:59.522]      __var DEBUG_PORT_VAL    = 0;
[01:14:59.522]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:14:59.522]      __var ACCESS_POINT_VAL  = 0;
[01:14:59.523]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:14:59.523]      __ap = 1; 
[01:14:59.523]        // -> [__ap <= 0x00000001]
[01:14:59.523]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:14:59.526]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:14:59.526]      __ap = 4;
[01:14:59.526]        // -> [__ap <= 0x00000004]
[01:14:59.526]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:14:59.530]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:14:59.530]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:14:59.530]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:14:59.530]    </block>
[01:14:59.534]    <block atomic="false" info="">
[01:14:59.534]      __var nReset = 0x80;
[01:14:59.534]        // -> [nReset <= 0x00000080]
[01:14:59.534]      __var canReadPins = 0;
[01:14:59.534]        // -> [canReadPins <= 0x00000000]
[01:14:59.534]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:14:59.535]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:14:59.535]        // -> [canReadPins <= 0x00000001]
[01:14:59.535]    </block>
[01:14:59.535]    <control if="" while="1" timeout="200" info="">
[01:14:59.535]      // while "1"  (timeout="200")
[01:14:59.535]      // while-condition  =>  TRUE
[01:14:59.535]      // while "1"  (timeout="200")
[01:14:59.535]      // while-condition  =>  TRUE
[01:14:59.535]      // while "1"  (timeout="200")
[01:14:59.535]      // while-condition  =>  TRUE
[01:14:59.535]      // while "1"  (timeout="200")
[01:14:59.535]      // while-condition  =>  TRUE
[01:14:59.535]      // while "1"  (timeout="200")
[01:14:59.535]      // while-condition  =>  TRUE
[01:14:59.535]      // while "1"  (timeout="200")
[01:14:59.538]      // while-condition  =>  TRUE
[01:14:59.538]      // while "1"  (timeout="200")
[01:14:59.538]      // while-condition  =>  TRUE
[01:14:59.539]      // while "1"  (timeout="200")
[01:14:59.539]      // while-condition  =>  TRUE
[01:14:59.539]      // while "1"  (timeout="200")
[01:14:59.539]      // while-condition  =>  TRUE
[01:14:59.539]      // while "1"  (timeout="200")
[01:14:59.539]      // while-condition  =>  TRUE
[01:14:59.539]      // while "1"  (timeout="200")
[01:14:59.539]      // while-condition  =>  TRUE
[01:14:59.539]      // while "1"  (timeout="200")
[01:14:59.540]      // while-condition  =>  TRUE
[01:14:59.540]      // while "1"  (timeout="200")
[01:14:59.540]      // while-condition  =>  TRUE
[01:14:59.540]      // while "1"  (timeout="200")
[01:14:59.540]      // while-condition  =>  TRUE
[01:14:59.540]      // while "1"  (timeout="200")
[01:14:59.540]      // while-condition  =>  TRUE
[01:14:59.540]      // while "1"  (timeout="200")
[01:14:59.540]      // while-condition  =>  TRUE
[01:14:59.540]      // while "1"  (timeout="200")
[01:14:59.540]      // while-condition  =>  TRUE
[01:14:59.540]      // while "1"  (timeout="200")
[01:14:59.540]      // while-condition  =>  TRUE
[01:14:59.540]      // while "1"  (timeout="200")
[01:14:59.540]      // while-condition  =>  TRUE
[01:14:59.540]      // while "1"  (timeout="200")
[01:14:59.540]      // while-condition  =>  TRUE
[01:14:59.540]      // while "1"  (timeout="200")
[01:14:59.540]      // while-condition  =>  TRUE
[01:14:59.540]      // while "1"  (timeout="200")
[01:14:59.540]      // while-condition  =>  TRUE
[01:14:59.541]      // while "1"  (timeout="200")
[01:14:59.541]      // while-condition  =>  TRUE
[01:14:59.541]      // while "1"  (timeout="200")
[01:14:59.541]      // while-condition  =>  TRUE
[01:14:59.541]      // while "1"  (timeout="200")
[01:14:59.541]      // while-condition  =>  TRUE
[01:14:59.541]      // while "1"  (timeout="200")
[01:14:59.541]      // while-condition  =>  TRUE
[01:14:59.542]      // while "1"  (timeout="200")
[01:14:59.542]      // while-condition  =>  TRUE
[01:14:59.542]      // while "1"  (timeout="200")
[01:14:59.542]      // while-condition  =>  TRUE
[01:14:59.542]      // while "1"  (timeout="200")
[01:14:59.542]      // while-condition  =>  TRUE
[01:14:59.542]      // while "1"  (timeout="200")
[01:14:59.542]      // while-condition  =>  TRUE
[01:14:59.542]      // while "1"  (timeout="200")
[01:14:59.542]      // while-condition  =>  TRUE
[01:14:59.542]      // while "1"  (timeout="200")
[01:14:59.542]      // while-condition  =>  TRUE
[01:14:59.542]      // while "1"  (timeout="200")
[01:14:59.542]      // while-condition  =>  TRUE
[01:14:59.542]      // while "1"  (timeout="200")
[01:14:59.542]      // while-condition  =>  TRUE
[01:14:59.542]      // while "1"  (timeout="200")
[01:14:59.542]      // while-condition  =>  TRUE
[01:14:59.542]      // while "1"  (timeout="200")
[01:14:59.542]      // while-condition  =>  TRUE
[01:14:59.545]      // while "1"  (timeout="200")
[01:14:59.545]      // while-condition  =>  TRUE
[01:14:59.545]      // while "1"  (timeout="200")
[01:14:59.545]      // while-condition  =>  TRUE
[01:14:59.545]      // while "1"  (timeout="200")
[01:14:59.545]      // while-condition  =>  TRUE
[01:14:59.545]      // while "1"  (timeout="200")
[01:14:59.546]      // while-condition  =>  TRUE
[01:14:59.546]      // while "1"  (timeout="200")
[01:14:59.546]      // while-condition  =>  TRUE
[01:14:59.546]      // while "1"  (timeout="200")
[01:14:59.546]      // while-condition  =>  TRUE
[01:14:59.546]      // while "1"  (timeout="200")
[01:14:59.546]      // while-condition  =>  TRUE
[01:14:59.546]      // while "1"  (timeout="200")
[01:14:59.546]      // while-condition  =>  TRUE
[01:14:59.546]      // while "1"  (timeout="200")
[01:14:59.546]      // while-condition  =>  TRUE
[01:14:59.546]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.547]      // while-condition  =>  TRUE
[01:14:59.547]      // while "1"  (timeout="200")
[01:14:59.551]      // while-condition  =>  TRUE
[01:14:59.551]      // while "1"  (timeout="200")
[01:14:59.551]      // while  =>  TIMEOUT
[01:14:59.551]      // end while "1"
[01:14:59.551]    </control>
[01:14:59.551]    <control if="canReadPins" while="" timeout="0" info="">
[01:14:59.551]      // if-block "canReadPins"
[01:14:59.551]        // =>  TRUE
[01:14:59.551]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:14:59.551]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:14:59.554]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:14:59.554]        // while-condition  =>  FALSE
[01:14:59.554]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:14:59.554]      </control>
[01:14:59.554]      // end if-block "canReadPins"
[01:14:59.554]    </control>
[01:14:59.554]    <control if="!canReadPins" while="" timeout="0" info="">
[01:14:59.554]      // if-block "!canReadPins"
[01:14:59.554]        // =>  FALSE
[01:14:59.554]      // skip if-block "!canReadPins"
[01:14:59.554]    </control>
[01:14:59.554]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:14:59.555]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:14:59.555]        // =>  TRUE
[01:14:59.555]      <block atomic="false" info="">
[01:14:59.555]        WriteAP(0x00, 0x190008);
[01:14:59.557]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:14:59.557]        WriteAP(0xF0, 0x01);
[01:14:59.563]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:14:59.563]      </block>
[01:14:59.564]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:14:59.564]    </control>
[01:14:59.564]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:14:59.564]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:14:59.564]        // =>  FALSE
[01:14:59.564]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:14:59.564]    </control>
[01:14:59.564]    <block atomic="false" info="">
[01:14:59.565]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:14:59.572]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:14:59.572]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:14:59.572]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:14:59.576]      __ap = 0; //lets make sure we reset the access point selection
[01:14:59.576]        // -> [__ap <= 0x00000000]
[01:14:59.576]    </block>
[01:14:59.576]  </sequence>
[01:14:59.576]  
[01:14:59.608]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:14:59.608]  
[01:14:59.608]  <debugvars>
[01:14:59.608]    // Pre-defined
[01:14:59.608]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:14:59.608]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:14:59.608]    __dp=0x00000000
[01:14:59.608]    __ap=0x00000000
[01:14:59.608]    __traceout=0x00000000      (Trace Disabled)
[01:14:59.609]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:14:59.609]    __FlashAddr=0x00000000
[01:14:59.609]    __FlashLen=0x00000000
[01:14:59.609]    __FlashArg=0x00000000
[01:14:59.609]    __FlashOp=0x00000000
[01:14:59.609]    __Result=0x00000000
[01:14:59.609]  </debugvars>
[01:14:59.609]  
[01:14:59.609]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:14:59.609]    <block atomic="false" info="">
[01:14:59.609]      __var deviceID = 0;
[01:14:59.609]        // -> [deviceID <= 0x00000000]
[01:14:59.609]      __var version = 0;
[01:14:59.609]        // -> [version <= 0x00000000]
[01:14:59.609]      __var partNum = 0;
[01:14:59.609]        // -> [partNum <= 0x00000000]
[01:14:59.609]      __var manuf = 0;
[01:14:59.609]        // -> [manuf <= 0x00000000]
[01:14:59.611]      __var isMSPM0G1X0X_G3X0X = 0;
[01:14:59.611]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:14:59.611]      __var isProduction = 0;
[01:14:59.611]        // -> [isProduction <= 0x00000000]
[01:14:59.611]      __var continueId = 0;
[01:14:59.611]        // -> [continueId <= 0x00000000]
[01:14:59.611]      deviceID =   Read32(0x41C40004);
[01:14:59.626]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:14:59.626]        // -> [deviceID <= 0x2BB8802F]
[01:14:59.627]      version = deviceID >> 28;
[01:14:59.627]        // -> [version <= 0x00000002]
[01:14:59.627]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:14:59.627]        // -> [partNum <= 0x0000BB88]
[01:14:59.627]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:14:59.627]        // -> [manuf <= 0x00000017]
[01:14:59.627]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:14:59.627]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:14:59.628]      isProduction = (version > 0);
[01:14:59.628]        // -> [isProduction <= 0x00000001]
[01:14:59.628]    </block>
[01:14:59.628]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:14:59.628]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:14:59.628]        // =>  FALSE
[01:14:59.628]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:14:59.628]    </control>
[01:14:59.628]    <control if="continueId == 4" while="" timeout="0" info="">
[01:14:59.628]      // if-block "continueId == 4"
[01:14:59.628]        // =>  FALSE
[01:14:59.628]      // skip if-block "continueId == 4"
[01:14:59.628]    </control>
[01:14:59.628]    <control if="!isProduction" while="" timeout="0" info="">
[01:14:59.628]      // if-block "!isProduction"
[01:14:59.628]        // =>  FALSE
[01:14:59.628]      // skip if-block "!isProduction"
[01:14:59.628]    </control>
[01:14:59.628]  </sequence>
[01:14:59.628]  
[01:16:09.204]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:16:09.204]  
[01:16:09.213]  <debugvars>
[01:16:09.213]    // Pre-defined
[01:16:09.213]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:09.213]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:16:09.213]    __dp=0x00000000
[01:16:09.213]    __ap=0x00000000
[01:16:09.213]    __traceout=0x00000000      (Trace Disabled)
[01:16:09.213]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:09.213]    __FlashAddr=0x00000000
[01:16:09.213]    __FlashLen=0x00000000
[01:16:09.213]    __FlashArg=0x00000000
[01:16:09.213]    __FlashOp=0x00000000
[01:16:09.213]    __Result=0x00000000
[01:16:09.213]  </debugvars>
[01:16:09.213]  
[01:16:09.213]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:16:09.213]    <block atomic="false" info="">
[01:16:09.213]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:16:09.213]        // -> [isSWJ <= 0x00000001]
[01:16:09.213]      __var hasDormant = __protocol & 0x00020000;
[01:16:09.213]        // -> [hasDormant <= 0x00000000]
[01:16:09.213]      __var protType   = __protocol & 0x0000FFFF;
[01:16:09.213]        // -> [protType <= 0x00000002]
[01:16:09.213]    </block>
[01:16:09.213]    <control if="protType == 1" while="" timeout="0" info="">
[01:16:09.213]      // if-block "protType == 1"
[01:16:09.213]        // =>  FALSE
[01:16:09.213]      // skip if-block "protType == 1"
[01:16:09.213]    </control>
[01:16:09.213]    <control if="protType == 2" while="" timeout="0" info="">
[01:16:09.213]      // if-block "protType == 2"
[01:16:09.213]        // =>  TRUE
[01:16:09.213]      <control if="isSWJ" while="" timeout="0" info="">
[01:16:09.213]        // if-block "isSWJ"
[01:16:09.213]          // =>  TRUE
[01:16:09.217]        <control if="hasDormant" while="" timeout="0" info="">
[01:16:09.217]          // if-block "hasDormant"
[01:16:09.217]            // =>  FALSE
[01:16:09.217]          // skip if-block "hasDormant"
[01:16:09.217]        </control>
[01:16:09.217]        <control if="!hasDormant" while="" timeout="0" info="">
[01:16:09.217]          // if-block "!hasDormant"
[01:16:09.217]            // =>  TRUE
[01:16:09.217]          <block atomic="false" info="">
[01:16:09.217]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:16:09.219]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:09.219]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:16:09.219]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:16:09.219]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:16:09.221]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:09.221]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:16:09.223]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:16:09.223]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:16:09.225]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:16:09.225]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:16:09.229]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:16:09.229]          </block>
[01:16:09.229]          // end if-block "!hasDormant"
[01:16:09.229]        </control>
[01:16:09.229]        // end if-block "isSWJ"
[01:16:09.229]      </control>
[01:16:09.229]      <control if="!isSWJ" while="" timeout="0" info="">
[01:16:09.233]        // if-block "!isSWJ"
[01:16:09.233]          // =>  FALSE
[01:16:09.233]        // skip if-block "!isSWJ"
[01:16:09.233]      </control>
[01:16:09.233]      <block atomic="false" info="">
[01:16:09.233]        ReadDP(0x0);
[01:16:09.235]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:16:09.235]      </block>
[01:16:09.235]      // end if-block "protType == 2"
[01:16:09.235]    </control>
[01:16:09.235]  </sequence>
[01:16:09.235]  
[01:16:09.238]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:16:09.238]  
[01:16:09.238]  <debugvars>
[01:16:09.238]    // Pre-defined
[01:16:09.238]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:09.238]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:16:09.238]    __dp=0x00000000
[01:16:09.238]    __ap=0x00000000
[01:16:09.238]    __traceout=0x00000000      (Trace Disabled)
[01:16:09.238]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:09.238]    __FlashAddr=0x00000000
[01:16:09.238]    __FlashLen=0x00000000
[01:16:09.238]    __FlashArg=0x00000000
[01:16:09.238]    __FlashOp=0x00000000
[01:16:09.238]    __Result=0x00000000
[01:16:09.241]  </debugvars>
[01:16:09.241]  
[01:16:09.241]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:16:09.241]    <block atomic="false" info="">
[01:16:09.241]      __var SW_DP_ABORT       = 0x0;
[01:16:09.241]        // -> [SW_DP_ABORT <= 0x00000000]
[01:16:09.241]      __var DP_CTRL_STAT      = 0x4;
[01:16:09.241]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:16:09.241]      __var DP_SELECT         = 0x8;
[01:16:09.241]        // -> [DP_SELECT <= 0x00000008]
[01:16:09.241]      __var powered_down      = 0;
[01:16:09.241]        // -> [powered_down <= 0x00000000]
[01:16:09.242]      WriteDP(DP_SELECT, 0x00000000);
[01:16:09.242]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:16:09.242]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:16:09.245]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:16:09.245]        // -> [powered_down <= 0x00000001]
[01:16:09.245]    </block>
[01:16:09.245]    <control if="powered_down" while="" timeout="0" info="">
[01:16:09.245]      // if-block "powered_down"
[01:16:09.245]        // =>  TRUE
[01:16:09.247]      <block atomic="false" info="">
[01:16:09.247]        Message(0, "Debug/System power-up request sent");
[01:16:09.249]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:16:09.252]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:16:09.252]      </block>
[01:16:09.252]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:16:09.252]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:16:09.253]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:16:09.253]        // while-condition  =>  FALSE
[01:16:09.253]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:16:09.253]      </control>
[01:16:09.253]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:16:09.253]        // if-block "(__protocol & 0xFFFF) == 1"
[01:16:09.253]          // =>  FALSE
[01:16:09.253]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:16:09.255]      </control>
[01:16:09.255]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:16:09.255]        // if-block "(__protocol & 0xFFFF) == 2"
[01:16:09.255]          // =>  TRUE
[01:16:09.255]        <block atomic="false" info="">
[01:16:09.255]          Message(0, "executing SWD power up");
[01:16:09.257]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:16:09.261]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:16:09.261]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:16:09.261]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:16:09.265]        </block>
[01:16:09.265]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:16:09.265]      </control>
[01:16:09.265]      // end if-block "powered_down"
[01:16:09.265]    </control>
[01:16:09.265]    <block atomic="false" info="">
[01:16:09.265]      __var DEBUG_PORT_VAL    = 0;
[01:16:09.265]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:16:09.265]      __var ACCESS_POINT_VAL  = 0;
[01:16:09.265]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:16:09.265]      __ap = 1; 
[01:16:09.265]        // -> [__ap <= 0x00000001]
[01:16:09.265]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:16:09.273]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:16:09.273]      __ap = 4;
[01:16:09.273]        // -> [__ap <= 0x00000004]
[01:16:09.273]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:16:09.277]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:16:09.277]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:16:09.277]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:16:09.281]    </block>
[01:16:09.281]    <block atomic="false" info="">
[01:16:09.281]      __var nReset = 0x80;
[01:16:09.281]        // -> [nReset <= 0x00000080]
[01:16:09.281]      __var canReadPins = 0;
[01:16:09.281]        // -> [canReadPins <= 0x00000000]
[01:16:09.281]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:16:09.281]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:16:09.281]        // -> [canReadPins <= 0x00000001]
[01:16:09.281]    </block>
[01:16:09.281]    <control if="" while="1" timeout="200" info="">
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.285]      // while-condition  =>  TRUE
[01:16:09.285]      // while "1"  (timeout="200")
[01:16:09.289]      // while-condition  =>  TRUE
[01:16:09.289]      // while "1"  (timeout="200")
[01:16:09.289]      // while-condition  =>  TRUE
[01:16:09.289]      // while "1"  (timeout="200")
[01:16:09.289]      // while-condition  =>  TRUE
[01:16:09.289]      // while "1"  (timeout="200")
[01:16:09.289]      // while-condition  =>  TRUE
[01:16:09.289]      // while "1"  (timeout="200")
[01:16:09.289]      // while-condition  =>  TRUE
[01:16:09.289]      // while "1"  (timeout="200")
[01:16:09.289]      // while-condition  =>  TRUE
[01:16:09.289]      // while "1"  (timeout="200")
[01:16:09.289]      // while-condition  =>  TRUE
[01:16:09.289]      // while "1"  (timeout="200")
[01:16:09.289]      // while-condition  =>  TRUE
[01:16:09.289]      // while "1"  (timeout="200")
[01:16:09.289]      // while-condition  =>  TRUE
[01:16:09.289]      // while "1"  (timeout="200")
[01:16:09.289]      // while-condition  =>  TRUE
[01:16:09.289]      // while "1"  (timeout="200")
[01:16:09.289]      // while-condition  =>  TRUE
[01:16:09.289]      // while "1"  (timeout="200")
[01:16:09.289]      // while-condition  =>  TRUE
[01:16:09.289]      // while "1"  (timeout="200")
[01:16:09.289]      // while-condition  =>  TRUE
[01:16:09.292]      // while "1"  (timeout="200")
[01:16:09.292]      // while-condition  =>  TRUE
[01:16:09.292]      // while "1"  (timeout="200")
[01:16:09.292]      // while-condition  =>  TRUE
[01:16:09.292]      // while "1"  (timeout="200")
[01:16:09.292]      // while-condition  =>  TRUE
[01:16:09.292]      // while "1"  (timeout="200")
[01:16:09.292]      // while-condition  =>  TRUE
[01:16:09.292]      // while "1"  (timeout="200")
[01:16:09.292]      // while-condition  =>  TRUE
[01:16:09.292]      // while "1"  (timeout="200")
[01:16:09.292]      // while-condition  =>  TRUE
[01:16:09.292]      // while "1"  (timeout="200")
[01:16:09.292]      // while-condition  =>  TRUE
[01:16:09.292]      // while "1"  (timeout="200")
[01:16:09.292]      // while-condition  =>  TRUE
[01:16:09.292]      // while "1"  (timeout="200")
[01:16:09.292]      // while-condition  =>  TRUE
[01:16:09.292]      // while "1"  (timeout="200")
[01:16:09.292]      // while-condition  =>  TRUE
[01:16:09.292]      // while "1"  (timeout="200")
[01:16:09.292]      // while-condition  =>  TRUE
[01:16:09.292]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.294]      // while "1"  (timeout="200")
[01:16:09.294]      // while-condition  =>  TRUE
[01:16:09.298]      // while "1"  (timeout="200")
[01:16:09.298]      // while  =>  TIMEOUT
[01:16:09.298]      // end while "1"
[01:16:09.298]    </control>
[01:16:09.298]    <control if="canReadPins" while="" timeout="0" info="">
[01:16:09.298]      // if-block "canReadPins"
[01:16:09.298]        // =>  TRUE
[01:16:09.298]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:16:09.298]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:16:09.302]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:16:09.302]        // while-condition  =>  FALSE
[01:16:09.302]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:16:09.302]      </control>
[01:16:09.302]      // end if-block "canReadPins"
[01:16:09.302]    </control>
[01:16:09.302]    <control if="!canReadPins" while="" timeout="0" info="">
[01:16:09.302]      // if-block "!canReadPins"
[01:16:09.302]        // =>  FALSE
[01:16:09.302]      // skip if-block "!canReadPins"
[01:16:09.302]    </control>
[01:16:09.302]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:16:09.302]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:16:09.302]        // =>  TRUE
[01:16:09.302]      <block atomic="false" info="">
[01:16:09.302]        WriteAP(0x00, 0x190008);
[01:16:09.302]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:16:09.302]        WriteAP(0xF0, 0x01);
[01:16:09.311]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:16:09.311]      </block>
[01:16:09.311]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:16:09.311]    </control>
[01:16:09.311]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:16:09.311]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:16:09.311]        // =>  FALSE
[01:16:09.311]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:16:09.311]    </control>
[01:16:09.311]    <block atomic="false" info="">
[01:16:09.311]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:16:09.314]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:16:09.314]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:16:09.314]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:16:09.318]      __ap = 0; //lets make sure we reset the access point selection
[01:16:09.318]        // -> [__ap <= 0x00000000]
[01:16:09.318]    </block>
[01:16:09.318]  </sequence>
[01:16:09.318]  
[01:16:09.342]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:16:09.342]  
[01:16:09.342]  <debugvars>
[01:16:09.342]    // Pre-defined
[01:16:09.342]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:16:09.342]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:16:09.342]    __dp=0x00000000
[01:16:09.342]    __ap=0x00000000
[01:16:09.342]    __traceout=0x00000000      (Trace Disabled)
[01:16:09.346]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:16:09.346]    __FlashAddr=0x00000000
[01:16:09.346]    __FlashLen=0x00000000
[01:16:09.346]    __FlashArg=0x00000000
[01:16:09.346]    __FlashOp=0x00000000
[01:16:09.346]    __Result=0x00000000
[01:16:09.346]  </debugvars>
[01:16:09.346]  
[01:16:09.346]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:16:09.346]    <block atomic="false" info="">
[01:16:09.346]      __var deviceID = 0;
[01:16:09.346]        // -> [deviceID <= 0x00000000]
[01:16:09.346]      __var version = 0;
[01:16:09.346]        // -> [version <= 0x00000000]
[01:16:09.346]      __var partNum = 0;
[01:16:09.346]        // -> [partNum <= 0x00000000]
[01:16:09.346]      __var manuf = 0;
[01:16:09.346]        // -> [manuf <= 0x00000000]
[01:16:09.346]      __var isMSPM0G1X0X_G3X0X = 0;
[01:16:09.346]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:16:09.346]      __var isProduction = 0;
[01:16:09.346]        // -> [isProduction <= 0x00000000]
[01:16:09.346]      __var continueId = 0;
[01:16:09.346]        // -> [continueId <= 0x00000000]
[01:16:09.346]      deviceID =   Read32(0x41C40004);
[01:16:09.350]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:16:09.350]        // -> [deviceID <= 0x2BB8802F]
[01:16:09.350]      version = deviceID >> 28;
[01:16:09.350]        // -> [version <= 0x00000002]
[01:16:09.350]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:16:09.350]        // -> [partNum <= 0x0000BB88]
[01:16:09.350]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:16:09.350]        // -> [manuf <= 0x00000017]
[01:16:09.354]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:16:09.354]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:16:09.354]      isProduction = (version > 0);
[01:16:09.354]        // -> [isProduction <= 0x00000001]
[01:16:09.354]    </block>
[01:16:09.354]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:16:09.354]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:16:09.354]        // =>  FALSE
[01:16:09.354]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:16:09.354]    </control>
[01:16:09.354]    <control if="continueId == 4" while="" timeout="0" info="">
[01:16:09.356]      // if-block "continueId == 4"
[01:16:09.356]        // =>  FALSE
[01:16:09.356]      // skip if-block "continueId == 4"
[01:16:09.356]    </control>
[01:16:09.356]    <control if="!isProduction" while="" timeout="0" info="">
[01:16:09.356]      // if-block "!isProduction"
[01:16:09.356]        // =>  FALSE
[01:16:09.356]      // skip if-block "!isProduction"
[01:16:09.356]    </control>
[01:16:09.356]  </sequence>
[01:16:09.356]  
[01:23:28.068]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:23:28.068]  
[01:23:28.079]  <debugvars>
[01:23:28.079]    // Pre-defined
[01:23:28.079]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:28.079]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:23:28.079]    __dp=0x00000000
[01:23:28.079]    __ap=0x00000000
[01:23:28.079]    __traceout=0x00000000      (Trace Disabled)
[01:23:28.079]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:28.079]    __FlashAddr=0x00000000
[01:23:28.079]    __FlashLen=0x00000000
[01:23:28.079]    __FlashArg=0x00000000
[01:23:28.080]    __FlashOp=0x00000000
[01:23:28.080]    __Result=0x00000000
[01:23:28.080]  </debugvars>
[01:23:28.080]  
[01:23:28.080]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:23:28.080]    <block atomic="false" info="">
[01:23:28.080]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:23:28.080]        // -> [isSWJ <= 0x00000001]
[01:23:28.080]      __var hasDormant = __protocol & 0x00020000;
[01:23:28.080]        // -> [hasDormant <= 0x00000000]
[01:23:28.080]      __var protType   = __protocol & 0x0000FFFF;
[01:23:28.080]        // -> [protType <= 0x00000002]
[01:23:28.080]    </block>
[01:23:28.080]    <control if="protType == 1" while="" timeout="0" info="">
[01:23:28.080]      // if-block "protType == 1"
[01:23:28.082]        // =>  FALSE
[01:23:28.082]      // skip if-block "protType == 1"
[01:23:28.082]    </control>
[01:23:28.082]    <control if="protType == 2" while="" timeout="0" info="">
[01:23:28.082]      // if-block "protType == 2"
[01:23:28.082]        // =>  TRUE
[01:23:28.082]      <control if="isSWJ" while="" timeout="0" info="">
[01:23:28.082]        // if-block "isSWJ"
[01:23:28.082]          // =>  TRUE
[01:23:28.082]        <control if="hasDormant" while="" timeout="0" info="">
[01:23:28.082]          // if-block "hasDormant"
[01:23:28.082]            // =>  FALSE
[01:23:28.082]          // skip if-block "hasDormant"
[01:23:28.082]        </control>
[01:23:28.082]        <control if="!hasDormant" while="" timeout="0" info="">
[01:23:28.082]          // if-block "!hasDormant"
[01:23:28.082]            // =>  TRUE
[01:23:28.082]          <block atomic="false" info="">
[01:23:28.082]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:23:28.086]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:23:28.086]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:23:28.093]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:23:28.093]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:23:28.097]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:23:28.097]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:23:28.097]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:23:28.097]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:23:28.097]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:23:28.097]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:23:28.101]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:23:28.102]          </block>
[01:23:28.102]          // end if-block "!hasDormant"
[01:23:28.102]        </control>
[01:23:28.102]        // end if-block "isSWJ"
[01:23:28.102]      </control>
[01:23:28.102]      <control if="!isSWJ" while="" timeout="0" info="">
[01:23:28.102]        // if-block "!isSWJ"
[01:23:28.102]          // =>  FALSE
[01:23:28.102]        // skip if-block "!isSWJ"
[01:23:28.102]      </control>
[01:23:28.102]      <block atomic="false" info="">
[01:23:28.102]        ReadDP(0x0);
[01:23:28.102]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:23:28.102]      </block>
[01:23:28.102]      // end if-block "protType == 2"
[01:23:28.102]    </control>
[01:23:28.102]  </sequence>
[01:23:28.102]  
[01:23:28.109]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:23:28.109]  
[01:23:28.109]  <debugvars>
[01:23:28.109]    // Pre-defined
[01:23:28.109]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:28.109]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:23:28.109]    __dp=0x00000000
[01:23:28.109]    __ap=0x00000000
[01:23:28.109]    __traceout=0x00000000      (Trace Disabled)
[01:23:28.109]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:28.109]    __FlashAddr=0x00000000
[01:23:28.109]    __FlashLen=0x00000000
[01:23:28.109]    __FlashArg=0x00000000
[01:23:28.109]    __FlashOp=0x00000000
[01:23:28.109]    __Result=0x00000000
[01:23:28.109]  </debugvars>
[01:23:28.109]  
[01:23:28.109]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:23:28.109]    <block atomic="false" info="">
[01:23:28.109]      __var SW_DP_ABORT       = 0x0;
[01:23:28.109]        // -> [SW_DP_ABORT <= 0x00000000]
[01:23:28.109]      __var DP_CTRL_STAT      = 0x4;
[01:23:28.109]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:23:28.109]      __var DP_SELECT         = 0x8;
[01:23:28.109]        // -> [DP_SELECT <= 0x00000008]
[01:23:28.109]      __var powered_down      = 0;
[01:23:28.109]        // -> [powered_down <= 0x00000000]
[01:23:28.112]      WriteDP(DP_SELECT, 0x00000000);
[01:23:28.117]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:23:28.117]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:23:28.121]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:23:28.121]        // -> [powered_down <= 0x00000001]
[01:23:28.121]    </block>
[01:23:28.121]    <control if="powered_down" while="" timeout="0" info="">
[01:23:28.121]      // if-block "powered_down"
[01:23:28.121]        // =>  TRUE
[01:23:28.121]      <block atomic="false" info="">
[01:23:28.121]        Message(0, "Debug/System power-up request sent");
[01:23:28.125]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:23:28.127]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:23:28.127]      </block>
[01:23:28.127]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:23:28.127]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:23:28.127]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:23:28.127]        // while-condition  =>  FALSE
[01:23:28.127]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:23:28.130]      </control>
[01:23:28.130]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:23:28.130]        // if-block "(__protocol & 0xFFFF) == 1"
[01:23:28.130]          // =>  FALSE
[01:23:28.130]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:23:28.130]      </control>
[01:23:28.130]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:23:28.130]        // if-block "(__protocol & 0xFFFF) == 2"
[01:23:28.130]          // =>  TRUE
[01:23:28.130]        <block atomic="false" info="">
[01:23:28.130]          Message(0, "executing SWD power up");
[01:23:28.132]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:23:28.134]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:23:28.134]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:23:28.134]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:23:28.134]        </block>
[01:23:28.134]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:23:28.134]      </control>
[01:23:28.134]      // end if-block "powered_down"
[01:23:28.134]    </control>
[01:23:28.134]    <block atomic="false" info="">
[01:23:28.134]      __var DEBUG_PORT_VAL    = 0;
[01:23:28.134]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:23:28.134]      __var ACCESS_POINT_VAL  = 0;
[01:23:28.134]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:23:28.134]      __ap = 1; 
[01:23:28.134]        // -> [__ap <= 0x00000001]
[01:23:28.134]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:23:28.139]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:23:28.142]      __ap = 4;
[01:23:28.142]        // -> [__ap <= 0x00000004]
[01:23:28.142]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:23:28.147]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:23:28.147]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:23:28.147]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:23:28.150]    </block>
[01:23:28.150]    <block atomic="false" info="">
[01:23:28.150]      __var nReset = 0x80;
[01:23:28.150]        // -> [nReset <= 0x00000080]
[01:23:28.150]      __var canReadPins = 0;
[01:23:28.150]        // -> [canReadPins <= 0x00000000]
[01:23:28.150]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:23:28.154]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:23:28.154]        // -> [canReadPins <= 0x00000001]
[01:23:28.154]    </block>
[01:23:28.154]    <control if="" while="1" timeout="200" info="">
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.154]      // while-condition  =>  TRUE
[01:23:28.154]      // while "1"  (timeout="200")
[01:23:28.158]      // while-condition  =>  TRUE
[01:23:28.158]      // while "1"  (timeout="200")
[01:23:28.158]      // while  =>  TIMEOUT
[01:23:28.158]      // end while "1"
[01:23:28.158]    </control>
[01:23:28.158]    <control if="canReadPins" while="" timeout="0" info="">
[01:23:28.158]      // if-block "canReadPins"
[01:23:28.158]        // =>  TRUE
[01:23:28.158]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:23:28.158]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:23:28.158]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:23:28.158]        // while-condition  =>  FALSE
[01:23:28.158]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:23:28.158]      </control>
[01:23:28.158]      // end if-block "canReadPins"
[01:23:28.161]    </control>
[01:23:28.161]    <control if="!canReadPins" while="" timeout="0" info="">
[01:23:28.161]      // if-block "!canReadPins"
[01:23:28.161]        // =>  FALSE
[01:23:28.161]      // skip if-block "!canReadPins"
[01:23:28.161]    </control>
[01:23:28.161]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:23:28.161]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:23:28.162]        // =>  TRUE
[01:23:28.162]      <block atomic="false" info="">
[01:23:28.162]        WriteAP(0x00, 0x190008);
[01:23:28.162]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:23:28.162]        WriteAP(0xF0, 0x01);
[01:23:28.167]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:23:28.167]      </block>
[01:23:28.167]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:23:28.167]    </control>
[01:23:28.167]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:23:28.167]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:23:28.167]        // =>  FALSE
[01:23:28.167]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:23:28.167]    </control>
[01:23:28.167]    <block atomic="false" info="">
[01:23:28.167]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:23:28.171]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:23:28.171]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:23:28.171]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:23:28.174]      __ap = 0; //lets make sure we reset the access point selection
[01:23:28.174]        // -> [__ap <= 0x00000000]
[01:23:28.174]    </block>
[01:23:28.174]  </sequence>
[01:23:28.174]  
[01:23:28.210]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:23:28.210]  
[01:23:28.210]  <debugvars>
[01:23:28.210]    // Pre-defined
[01:23:28.210]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:23:28.210]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:23:28.210]    __dp=0x00000000
[01:23:28.210]    __ap=0x00000000
[01:23:28.210]    __traceout=0x00000000      (Trace Disabled)
[01:23:28.210]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:23:28.210]    __FlashAddr=0x00000000
[01:23:28.210]    __FlashLen=0x00000000
[01:23:28.210]    __FlashArg=0x00000000
[01:23:28.210]    __FlashOp=0x00000000
[01:23:28.210]    __Result=0x00000000
[01:23:28.210]  </debugvars>
[01:23:28.210]  
[01:23:28.210]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:23:28.210]    <block atomic="false" info="">
[01:23:28.210]      __var deviceID = 0;
[01:23:28.210]        // -> [deviceID <= 0x00000000]
[01:23:28.210]      __var version = 0;
[01:23:28.210]        // -> [version <= 0x00000000]
[01:23:28.210]      __var partNum = 0;
[01:23:28.210]        // -> [partNum <= 0x00000000]
[01:23:28.210]      __var manuf = 0;
[01:23:28.210]        // -> [manuf <= 0x00000000]
[01:23:28.210]      __var isMSPM0G1X0X_G3X0X = 0;
[01:23:28.210]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:23:28.210]      __var isProduction = 0;
[01:23:28.210]        // -> [isProduction <= 0x00000000]
[01:23:28.210]      __var continueId = 0;
[01:23:28.210]        // -> [continueId <= 0x00000000]
[01:23:28.210]      deviceID =   Read32(0x41C40004);
[01:23:28.227]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:23:28.227]        // -> [deviceID <= 0x2BB8802F]
[01:23:28.227]      version = deviceID >> 28;
[01:23:28.227]        // -> [version <= 0x00000002]
[01:23:28.227]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:23:28.227]        // -> [partNum <= 0x0000BB88]
[01:23:28.227]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:23:28.227]        // -> [manuf <= 0x00000017]
[01:23:28.227]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:23:28.227]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:23:28.227]      isProduction = (version > 0);
[01:23:28.227]        // -> [isProduction <= 0x00000001]
[01:23:28.227]    </block>
[01:23:28.227]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:23:28.227]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:23:28.227]        // =>  FALSE
[01:23:28.227]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:23:28.227]    </control>
[01:23:28.227]    <control if="continueId == 4" while="" timeout="0" info="">
[01:23:28.227]      // if-block "continueId == 4"
[01:23:28.227]        // =>  FALSE
[01:23:28.227]      // skip if-block "continueId == 4"
[01:23:28.227]    </control>
[01:23:28.227]    <control if="!isProduction" while="" timeout="0" info="">
[01:23:28.229]      // if-block "!isProduction"
[01:23:28.229]        // =>  FALSE
[01:23:28.229]      // skip if-block "!isProduction"
[01:23:28.229]    </control>
[01:23:28.229]  </sequence>
[01:23:28.229]  
[01:27:50.562]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:27:50.562]  
[01:27:50.573]  <debugvars>
[01:27:50.573]    // Pre-defined
[01:27:50.573]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:27:50.573]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:27:50.573]    __dp=0x00000000
[01:27:50.573]    __ap=0x00000000
[01:27:50.574]    __traceout=0x00000000      (Trace Disabled)
[01:27:50.574]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:27:50.574]    __FlashAddr=0x00000000
[01:27:50.574]    __FlashLen=0x00000000
[01:27:50.574]    __FlashArg=0x00000000
[01:27:50.574]    __FlashOp=0x00000000
[01:27:50.574]    __Result=0x00000000
[01:27:50.574]  </debugvars>
[01:27:50.574]  
[01:27:50.574]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:27:50.574]    <block atomic="false" info="">
[01:27:50.574]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:27:50.574]        // -> [isSWJ <= 0x00000001]
[01:27:50.574]      __var hasDormant = __protocol & 0x00020000;
[01:27:50.574]        // -> [hasDormant <= 0x00000000]
[01:27:50.574]      __var protType   = __protocol & 0x0000FFFF;
[01:27:50.574]        // -> [protType <= 0x00000002]
[01:27:50.574]    </block>
[01:27:50.577]    <control if="protType == 1" while="" timeout="0" info="">
[01:27:50.577]      // if-block "protType == 1"
[01:27:50.577]        // =>  FALSE
[01:27:50.577]      // skip if-block "protType == 1"
[01:27:50.577]    </control>
[01:27:50.577]    <control if="protType == 2" while="" timeout="0" info="">
[01:27:50.577]      // if-block "protType == 2"
[01:27:50.577]        // =>  TRUE
[01:27:50.577]      <control if="isSWJ" while="" timeout="0" info="">
[01:27:50.577]        // if-block "isSWJ"
[01:27:50.578]          // =>  TRUE
[01:27:50.578]        <control if="hasDormant" while="" timeout="0" info="">
[01:27:50.578]          // if-block "hasDormant"
[01:27:50.578]            // =>  FALSE
[01:27:50.578]          // skip if-block "hasDormant"
[01:27:50.578]        </control>
[01:27:50.578]        <control if="!hasDormant" while="" timeout="0" info="">
[01:27:50.578]          // if-block "!hasDormant"
[01:27:50.578]            // =>  TRUE
[01:27:50.578]          <block atomic="false" info="">
[01:27:50.580]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:27:50.583]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:27:50.583]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:27:50.583]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:27:50.583]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:27:50.591]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:27:50.592]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:27:50.593]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:27:50.593]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:27:50.595]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:27:50.595]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:27:50.595]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:27:50.595]          </block>
[01:27:50.595]          // end if-block "!hasDormant"
[01:27:50.595]        </control>
[01:27:50.595]        // end if-block "isSWJ"
[01:27:50.595]      </control>
[01:27:50.595]      <control if="!isSWJ" while="" timeout="0" info="">
[01:27:50.595]        // if-block "!isSWJ"
[01:27:50.595]          // =>  FALSE
[01:27:50.595]        // skip if-block "!isSWJ"
[01:27:50.595]      </control>
[01:27:50.595]      <block atomic="false" info="">
[01:27:50.595]        ReadDP(0x0);
[01:27:50.599]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:27:50.599]      </block>
[01:27:50.599]      // end if-block "protType == 2"
[01:27:50.599]    </control>
[01:27:50.603]  </sequence>
[01:27:50.603]  
[01:27:50.611]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:27:50.611]  
[01:27:50.611]  <debugvars>
[01:27:50.611]    // Pre-defined
[01:27:50.611]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:27:50.611]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:27:50.611]    __dp=0x00000000
[01:27:50.611]    __ap=0x00000000
[01:27:50.611]    __traceout=0x00000000      (Trace Disabled)
[01:27:50.611]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:27:50.615]    __FlashAddr=0x00000000
[01:27:50.615]    __FlashLen=0x00000000
[01:27:50.615]    __FlashArg=0x00000000
[01:27:50.615]    __FlashOp=0x00000000
[01:27:50.615]    __Result=0x00000000
[01:27:50.615]  </debugvars>
[01:27:50.615]  
[01:27:50.615]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:27:50.615]    <block atomic="false" info="">
[01:27:50.615]      __var SW_DP_ABORT       = 0x0;
[01:27:50.615]        // -> [SW_DP_ABORT <= 0x00000000]
[01:27:50.615]      __var DP_CTRL_STAT      = 0x4;
[01:27:50.615]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:27:50.615]      __var DP_SELECT         = 0x8;
[01:27:50.615]        // -> [DP_SELECT <= 0x00000008]
[01:27:50.615]      __var powered_down      = 0;
[01:27:50.615]        // -> [powered_down <= 0x00000000]
[01:27:50.615]      WriteDP(DP_SELECT, 0x00000000);
[01:27:50.615]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:27:50.619]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:27:50.619]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:27:50.619]        // -> [powered_down <= 0x00000001]
[01:27:50.619]    </block>
[01:27:50.619]    <control if="powered_down" while="" timeout="0" info="">
[01:27:50.619]      // if-block "powered_down"
[01:27:50.619]        // =>  TRUE
[01:27:50.623]      <block atomic="false" info="">
[01:27:50.623]        Message(0, "Debug/System power-up request sent");
[01:27:50.623]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:27:50.627]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:27:50.627]      </block>
[01:27:50.628]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:27:50.628]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:27:50.628]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:27:50.628]        // while-condition  =>  FALSE
[01:27:50.628]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:27:50.628]      </control>
[01:27:50.628]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:27:50.628]        // if-block "(__protocol & 0xFFFF) == 1"
[01:27:50.628]          // =>  FALSE
[01:27:50.631]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:27:50.631]      </control>
[01:27:50.631]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:27:50.631]        // if-block "(__protocol & 0xFFFF) == 2"
[01:27:50.631]          // =>  TRUE
[01:27:50.631]        <block atomic="false" info="">
[01:27:50.631]          Message(0, "executing SWD power up");
[01:27:50.631]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:27:50.635]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:27:50.635]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:27:50.635]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:27:50.635]        </block>
[01:27:50.639]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:27:50.639]      </control>
[01:27:50.639]      // end if-block "powered_down"
[01:27:50.640]    </control>
[01:27:50.640]    <block atomic="false" info="">
[01:27:50.640]      __var DEBUG_PORT_VAL    = 0;
[01:27:50.640]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:27:50.641]      __var ACCESS_POINT_VAL  = 0;
[01:27:50.641]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:27:50.641]      __ap = 1; 
[01:27:50.641]        // -> [__ap <= 0x00000001]
[01:27:50.641]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:27:50.648]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:27:50.649]      __ap = 4;
[01:27:50.649]        // -> [__ap <= 0x00000004]
[01:27:50.649]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:27:50.654]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:27:50.654]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:27:50.654]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:27:50.656]    </block>
[01:27:50.656]    <block atomic="false" info="">
[01:27:50.656]      __var nReset = 0x80;
[01:27:50.656]        // -> [nReset <= 0x00000080]
[01:27:50.656]      __var canReadPins = 0;
[01:27:50.656]        // -> [canReadPins <= 0x00000000]
[01:27:50.656]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:27:50.657]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:27:50.657]        // -> [canReadPins <= 0x00000001]
[01:27:50.657]    </block>
[01:27:50.657]    <control if="" while="1" timeout="200" info="">
[01:27:50.657]      // while "1"  (timeout="200")
[01:27:50.657]      // while-condition  =>  TRUE
[01:27:50.657]      // while "1"  (timeout="200")
[01:27:50.661]      // while-condition  =>  TRUE
[01:27:50.661]      // while "1"  (timeout="200")
[01:27:50.661]      // while-condition  =>  TRUE
[01:27:50.661]      // while "1"  (timeout="200")
[01:27:50.661]      // while-condition  =>  TRUE
[01:27:50.661]      // while "1"  (timeout="200")
[01:27:50.661]      // while-condition  =>  TRUE
[01:27:50.661]      // while "1"  (timeout="200")
[01:27:50.661]      // while-condition  =>  TRUE
[01:27:50.661]      // while "1"  (timeout="200")
[01:27:50.661]      // while-condition  =>  TRUE
[01:27:50.661]      // while "1"  (timeout="200")
[01:27:50.662]      // while-condition  =>  TRUE
[01:27:50.662]      // while "1"  (timeout="200")
[01:27:50.662]      // while-condition  =>  TRUE
[01:27:50.662]      // while "1"  (timeout="200")
[01:27:50.662]      // while-condition  =>  TRUE
[01:27:50.662]      // while "1"  (timeout="200")
[01:27:50.662]      // while-condition  =>  TRUE
[01:27:50.662]      // while "1"  (timeout="200")
[01:27:50.662]      // while-condition  =>  TRUE
[01:27:50.662]      // while "1"  (timeout="200")
[01:27:50.662]      // while-condition  =>  TRUE
[01:27:50.662]      // while "1"  (timeout="200")
[01:27:50.662]      // while-condition  =>  TRUE
[01:27:50.662]      // while "1"  (timeout="200")
[01:27:50.662]      // while-condition  =>  TRUE
[01:27:50.662]      // while "1"  (timeout="200")
[01:27:50.662]      // while-condition  =>  TRUE
[01:27:50.662]      // while "1"  (timeout="200")
[01:27:50.662]      // while-condition  =>  TRUE
[01:27:50.665]      // while "1"  (timeout="200")
[01:27:50.665]      // while-condition  =>  TRUE
[01:27:50.665]      // while "1"  (timeout="200")
[01:27:50.665]      // while-condition  =>  TRUE
[01:27:50.665]      // while "1"  (timeout="200")
[01:27:50.665]      // while-condition  =>  TRUE
[01:27:50.665]      // while "1"  (timeout="200")
[01:27:50.665]      // while-condition  =>  TRUE
[01:27:50.665]      // while "1"  (timeout="200")
[01:27:50.665]      // while-condition  =>  TRUE
[01:27:50.665]      // while "1"  (timeout="200")
[01:27:50.667]      // while-condition  =>  TRUE
[01:27:50.667]      // while "1"  (timeout="200")
[01:27:50.667]      // while-condition  =>  TRUE
[01:27:50.667]      // while "1"  (timeout="200")
[01:27:50.667]      // while-condition  =>  TRUE
[01:27:50.667]      // while "1"  (timeout="200")
[01:27:50.667]      // while-condition  =>  TRUE
[01:27:50.667]      // while "1"  (timeout="200")
[01:27:50.667]      // while-condition  =>  TRUE
[01:27:50.667]      // while "1"  (timeout="200")
[01:27:50.667]      // while-condition  =>  TRUE
[01:27:50.667]      // while "1"  (timeout="200")
[01:27:50.667]      // while-condition  =>  TRUE
[01:27:50.667]      // while "1"  (timeout="200")
[01:27:50.667]      // while-condition  =>  TRUE
[01:27:50.667]      // while "1"  (timeout="200")
[01:27:50.667]      // while-condition  =>  TRUE
[01:27:50.667]      // while "1"  (timeout="200")
[01:27:50.667]      // while-condition  =>  TRUE
[01:27:50.667]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.669]      // while-condition  =>  TRUE
[01:27:50.669]      // while "1"  (timeout="200")
[01:27:50.673]      // while-condition  =>  TRUE
[01:27:50.673]      // while "1"  (timeout="200")
[01:27:50.673]      // while  =>  TIMEOUT
[01:27:50.673]      // end while "1"
[01:27:50.673]    </control>
[01:27:50.673]    <control if="canReadPins" while="" timeout="0" info="">
[01:27:50.673]      // if-block "canReadPins"
[01:27:50.673]        // =>  TRUE
[01:27:50.673]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:27:50.673]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:27:50.673]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:27:50.673]        // while-condition  =>  FALSE
[01:27:50.673]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:27:50.677]      </control>
[01:27:50.677]      // end if-block "canReadPins"
[01:27:50.677]    </control>
[01:27:50.677]    <control if="!canReadPins" while="" timeout="0" info="">
[01:27:50.677]      // if-block "!canReadPins"
[01:27:50.677]        // =>  FALSE
[01:27:50.677]      // skip if-block "!canReadPins"
[01:27:50.677]    </control>
[01:27:50.677]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:27:50.677]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:27:50.677]        // =>  TRUE
[01:27:50.677]      <block atomic="false" info="">
[01:27:50.677]        WriteAP(0x00, 0x190008);
[01:27:50.682]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:27:50.682]        WriteAP(0xF0, 0x01);
[01:27:50.685]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:27:50.686]      </block>
[01:27:50.686]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:27:50.686]    </control>
[01:27:50.686]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:27:50.686]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:27:50.686]        // =>  FALSE
[01:27:50.686]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:27:50.686]    </control>
[01:27:50.686]    <block atomic="false" info="">
[01:27:50.686]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:27:50.695]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:27:50.695]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:27:50.695]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:27:50.697]      __ap = 0; //lets make sure we reset the access point selection
[01:27:50.697]        // -> [__ap <= 0x00000000]
[01:27:50.697]    </block>
[01:27:50.698]  </sequence>
[01:27:50.698]  
[01:27:50.723]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:27:50.723]  
[01:27:50.723]  <debugvars>
[01:27:50.723]    // Pre-defined
[01:27:50.723]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:27:50.727]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:27:50.727]    __dp=0x00000000
[01:27:50.727]    __ap=0x00000000
[01:27:50.727]    __traceout=0x00000000      (Trace Disabled)
[01:27:50.727]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:27:50.727]    __FlashAddr=0x00000000
[01:27:50.728]    __FlashLen=0x00000000
[01:27:50.728]    __FlashArg=0x00000000
[01:27:50.728]    __FlashOp=0x00000000
[01:27:50.728]    __Result=0x00000000
[01:27:50.728]  </debugvars>
[01:27:50.728]  
[01:27:50.728]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:27:50.728]    <block atomic="false" info="">
[01:27:50.728]      __var deviceID = 0;
[01:27:50.728]        // -> [deviceID <= 0x00000000]
[01:27:50.728]      __var version = 0;
[01:27:50.729]        // -> [version <= 0x00000000]
[01:27:50.729]      __var partNum = 0;
[01:27:50.729]        // -> [partNum <= 0x00000000]
[01:27:50.729]      __var manuf = 0;
[01:27:50.729]        // -> [manuf <= 0x00000000]
[01:27:50.729]      __var isMSPM0G1X0X_G3X0X = 0;
[01:27:50.729]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:27:50.729]      __var isProduction = 0;
[01:27:50.729]        // -> [isProduction <= 0x00000000]
[01:27:50.729]      __var continueId = 0;
[01:27:50.729]        // -> [continueId <= 0x00000000]
[01:27:50.729]      deviceID =   Read32(0x41C40004);
[01:27:50.736]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:27:50.736]        // -> [deviceID <= 0x2BB8802F]
[01:27:50.736]      version = deviceID >> 28;
[01:27:50.736]        // -> [version <= 0x00000002]
[01:27:50.736]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:27:50.736]        // -> [partNum <= 0x0000BB88]
[01:27:50.736]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:27:50.736]        // -> [manuf <= 0x00000017]
[01:27:50.740]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:27:50.740]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:27:50.740]      isProduction = (version > 0);
[01:27:50.740]        // -> [isProduction <= 0x00000001]
[01:27:50.740]    </block>
[01:27:50.740]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:27:50.740]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:27:50.740]        // =>  FALSE
[01:27:50.740]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:27:50.740]    </control>
[01:27:50.741]    <control if="continueId == 4" while="" timeout="0" info="">
[01:27:50.741]      // if-block "continueId == 4"
[01:27:50.741]        // =>  FALSE
[01:27:50.741]      // skip if-block "continueId == 4"
[01:27:50.741]    </control>
[01:27:50.741]    <control if="!isProduction" while="" timeout="0" info="">
[01:27:50.741]      // if-block "!isProduction"
[01:27:50.741]        // =>  FALSE
[01:27:50.741]      // skip if-block "!isProduction"
[01:27:50.741]    </control>
[01:27:50.741]  </sequence>
[01:27:50.741]  
[01:28:15.230]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:28:15.230]  
[01:28:15.230]  <debugvars>
[01:28:15.230]    // Pre-defined
[01:28:15.230]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:28:15.230]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:28:15.230]    __dp=0x00000000
[01:28:15.230]    __ap=0x00000000
[01:28:15.230]    __traceout=0x00000000      (Trace Disabled)
[01:28:15.230]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:28:15.230]    __FlashAddr=0x00000000
[01:28:15.230]    __FlashLen=0x00000000
[01:28:15.230]    __FlashArg=0x00000000
[01:28:15.230]    __FlashOp=0x00000000
[01:28:15.230]    __Result=0x00000000
[01:28:15.230]  </debugvars>
[01:28:15.230]  
[01:28:15.230]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:28:15.230]    <block atomic="false" info="">
[01:28:15.230]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:28:15.234]        // -> [isSWJ <= 0x00000001]
[01:28:15.234]      __var hasDormant = __protocol & 0x00020000;
[01:28:15.234]        // -> [hasDormant <= 0x00000000]
[01:28:15.234]      __var protType   = __protocol & 0x0000FFFF;
[01:28:15.234]        // -> [protType <= 0x00000002]
[01:28:15.234]    </block>
[01:28:15.234]    <control if="protType == 1" while="" timeout="0" info="">
[01:28:15.234]      // if-block "protType == 1"
[01:28:15.234]        // =>  FALSE
[01:28:15.234]      // skip if-block "protType == 1"
[01:28:15.234]    </control>
[01:28:15.234]    <control if="protType == 2" while="" timeout="0" info="">
[01:28:15.234]      // if-block "protType == 2"
[01:28:15.234]        // =>  TRUE
[01:28:15.234]      <control if="isSWJ" while="" timeout="0" info="">
[01:28:15.234]        // if-block "isSWJ"
[01:28:15.234]          // =>  TRUE
[01:28:15.234]        <control if="hasDormant" while="" timeout="0" info="">
[01:28:15.234]          // if-block "hasDormant"
[01:28:15.234]            // =>  FALSE
[01:28:15.234]          // skip if-block "hasDormant"
[01:28:15.234]        </control>
[01:28:15.234]        <control if="!hasDormant" while="" timeout="0" info="">
[01:28:15.234]          // if-block "!hasDormant"
[01:28:15.234]            // =>  TRUE
[01:28:15.234]          <block atomic="false" info="">
[01:28:15.234]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:28:15.238]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:28:15.238]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:28:15.238]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:28:15.238]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:28:15.238]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:28:15.238]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:28:15.242]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:28:15.242]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:28:15.242]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:28:15.242]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:28:15.250]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:28:15.250]          </block>
[01:28:15.250]          // end if-block "!hasDormant"
[01:28:15.250]        </control>
[01:28:15.250]        // end if-block "isSWJ"
[01:28:15.250]      </control>
[01:28:15.250]      <control if="!isSWJ" while="" timeout="0" info="">
[01:28:15.250]        // if-block "!isSWJ"
[01:28:15.250]          // =>  FALSE
[01:28:15.250]        // skip if-block "!isSWJ"
[01:28:15.250]      </control>
[01:28:15.250]      <block atomic="false" info="">
[01:28:15.250]        ReadDP(0x0);
[01:28:15.250]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:28:15.250]      </block>
[01:28:15.250]      // end if-block "protType == 2"
[01:28:15.250]    </control>
[01:28:15.250]  </sequence>
[01:28:15.250]  
[01:28:15.254]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:28:15.254]  
[01:28:15.254]  <debugvars>
[01:28:15.254]    // Pre-defined
[01:28:15.254]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:28:15.254]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:28:15.254]    __dp=0x00000000
[01:28:15.254]    __ap=0x00000000
[01:28:15.258]    __traceout=0x00000000      (Trace Disabled)
[01:28:15.258]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:28:15.258]    __FlashAddr=0x00000000
[01:28:15.258]    __FlashLen=0x00000000
[01:28:15.258]    __FlashArg=0x00000000
[01:28:15.258]    __FlashOp=0x00000000
[01:28:15.258]    __Result=0x00000000
[01:28:15.258]  </debugvars>
[01:28:15.258]  
[01:28:15.259]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:28:15.259]    <block atomic="false" info="">
[01:28:15.259]      __var SW_DP_ABORT       = 0x0;
[01:28:15.259]        // -> [SW_DP_ABORT <= 0x00000000]
[01:28:15.259]      __var DP_CTRL_STAT      = 0x4;
[01:28:15.259]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:28:15.259]      __var DP_SELECT         = 0x8;
[01:28:15.259]        // -> [DP_SELECT <= 0x00000008]
[01:28:15.259]      __var powered_down      = 0;
[01:28:15.259]        // -> [powered_down <= 0x00000000]
[01:28:15.259]      WriteDP(DP_SELECT, 0x00000000);
[01:28:15.262]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:28:15.262]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:28:15.262]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:28:15.262]        // -> [powered_down <= 0x00000001]
[01:28:15.266]    </block>
[01:28:15.266]    <control if="powered_down" while="" timeout="0" info="">
[01:28:15.266]      // if-block "powered_down"
[01:28:15.266]        // =>  TRUE
[01:28:15.266]      <block atomic="false" info="">
[01:28:15.266]        Message(0, "Debug/System power-up request sent");
[01:28:15.268]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:28:15.272]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:28:15.272]      </block>
[01:28:15.272]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:28:15.272]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:28:15.275]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:28:15.275]        // while-condition  =>  FALSE
[01:28:15.276]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:28:15.276]      </control>
[01:28:15.276]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:28:15.276]        // if-block "(__protocol & 0xFFFF) == 1"
[01:28:15.276]          // =>  FALSE
[01:28:15.276]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:28:15.276]      </control>
[01:28:15.276]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:28:15.276]        // if-block "(__protocol & 0xFFFF) == 2"
[01:28:15.276]          // =>  TRUE
[01:28:15.276]        <block atomic="false" info="">
[01:28:15.276]          Message(0, "executing SWD power up");
[01:28:15.278]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:28:15.282]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:28:15.282]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:28:15.282]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:28:15.282]        </block>
[01:28:15.282]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:28:15.282]      </control>
[01:28:15.282]      // end if-block "powered_down"
[01:28:15.282]    </control>
[01:28:15.282]    <block atomic="false" info="">
[01:28:15.282]      __var DEBUG_PORT_VAL    = 0;
[01:28:15.282]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:28:15.282]      __var ACCESS_POINT_VAL  = 0;
[01:28:15.282]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:28:15.282]      __ap = 1; 
[01:28:15.282]        // -> [__ap <= 0x00000001]
[01:28:15.286]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:28:15.294]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:28:15.294]      __ap = 4;
[01:28:15.294]        // -> [__ap <= 0x00000004]
[01:28:15.294]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:28:15.303]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:28:15.303]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:28:15.303]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:28:15.304]    </block>
[01:28:15.304]    <block atomic="false" info="">
[01:28:15.304]      __var nReset = 0x80;
[01:28:15.304]        // -> [nReset <= 0x00000080]
[01:28:15.304]      __var canReadPins = 0;
[01:28:15.306]        // -> [canReadPins <= 0x00000000]
[01:28:15.306]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:28:15.308]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:28:15.308]        // -> [canReadPins <= 0x00000001]
[01:28:15.308]    </block>
[01:28:15.308]    <control if="" while="1" timeout="200" info="">
[01:28:15.308]      // while "1"  (timeout="200")
[01:28:15.308]      // while-condition  =>  TRUE
[01:28:15.308]      // while "1"  (timeout="200")
[01:28:15.308]      // while-condition  =>  TRUE
[01:28:15.308]      // while "1"  (timeout="200")
[01:28:15.308]      // while-condition  =>  TRUE
[01:28:15.308]      // while "1"  (timeout="200")
[01:28:15.308]      // while-condition  =>  TRUE
[01:28:15.308]      // while "1"  (timeout="200")
[01:28:15.308]      // while-condition  =>  TRUE
[01:28:15.308]      // while "1"  (timeout="200")
[01:28:15.308]      // while-condition  =>  TRUE
[01:28:15.308]      // while "1"  (timeout="200")
[01:28:15.308]      // while-condition  =>  TRUE
[01:28:15.308]      // while "1"  (timeout="200")
[01:28:15.308]      // while-condition  =>  TRUE
[01:28:15.308]      // while "1"  (timeout="200")
[01:28:15.308]      // while-condition  =>  TRUE
[01:28:15.308]      // while "1"  (timeout="200")
[01:28:15.310]      // while-condition  =>  TRUE
[01:28:15.310]      // while "1"  (timeout="200")
[01:28:15.310]      // while-condition  =>  TRUE
[01:28:15.310]      // while "1"  (timeout="200")
[01:28:15.310]      // while-condition  =>  TRUE
[01:28:15.310]      // while "1"  (timeout="200")
[01:28:15.310]      // while-condition  =>  TRUE
[01:28:15.310]      // while "1"  (timeout="200")
[01:28:15.310]      // while-condition  =>  TRUE
[01:28:15.310]      // while "1"  (timeout="200")
[01:28:15.310]      // while-condition  =>  TRUE
[01:28:15.310]      // while "1"  (timeout="200")
[01:28:15.310]      // while-condition  =>  TRUE
[01:28:15.310]      // while "1"  (timeout="200")
[01:28:15.310]      // while-condition  =>  TRUE
[01:28:15.310]      // while "1"  (timeout="200")
[01:28:15.310]      // while-condition  =>  TRUE
[01:28:15.312]      // while "1"  (timeout="200")
[01:28:15.312]      // while-condition  =>  TRUE
[01:28:15.312]      // while "1"  (timeout="200")
[01:28:15.312]      // while-condition  =>  TRUE
[01:28:15.312]      // while "1"  (timeout="200")
[01:28:15.312]      // while-condition  =>  TRUE
[01:28:15.312]      // while "1"  (timeout="200")
[01:28:15.312]      // while-condition  =>  TRUE
[01:28:15.312]      // while "1"  (timeout="200")
[01:28:15.312]      // while-condition  =>  TRUE
[01:28:15.312]      // while "1"  (timeout="200")
[01:28:15.312]      // while-condition  =>  TRUE
[01:28:15.313]      // while "1"  (timeout="200")
[01:28:15.313]      // while-condition  =>  TRUE
[01:28:15.313]      // while "1"  (timeout="200")
[01:28:15.313]      // while-condition  =>  TRUE
[01:28:15.313]      // while "1"  (timeout="200")
[01:28:15.313]      // while-condition  =>  TRUE
[01:28:15.313]      // while "1"  (timeout="200")
[01:28:15.313]      // while-condition  =>  TRUE
[01:28:15.313]      // while "1"  (timeout="200")
[01:28:15.313]      // while-condition  =>  TRUE
[01:28:15.313]      // while "1"  (timeout="200")
[01:28:15.313]      // while-condition  =>  TRUE
[01:28:15.313]      // while "1"  (timeout="200")
[01:28:15.313]      // while-condition  =>  TRUE
[01:28:15.313]      // while "1"  (timeout="200")
[01:28:15.314]      // while-condition  =>  TRUE
[01:28:15.314]      // while "1"  (timeout="200")
[01:28:15.314]      // while  =>  TIMEOUT
[01:28:15.314]      // end while "1"
[01:28:15.314]    </control>
[01:28:15.314]    <control if="canReadPins" while="" timeout="0" info="">
[01:28:15.314]      // if-block "canReadPins"
[01:28:15.314]        // =>  TRUE
[01:28:15.314]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:28:15.314]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:28:15.316]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:28:15.316]        // while-condition  =>  FALSE
[01:28:15.316]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:28:15.316]      </control>
[01:28:15.316]      // end if-block "canReadPins"
[01:28:15.316]    </control>
[01:28:15.316]    <control if="!canReadPins" while="" timeout="0" info="">
[01:28:15.316]      // if-block "!canReadPins"
[01:28:15.316]        // =>  FALSE
[01:28:15.316]      // skip if-block "!canReadPins"
[01:28:15.316]    </control>
[01:28:15.316]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:28:15.316]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:28:15.318]        // =>  TRUE
[01:28:15.318]      <block atomic="false" info="">
[01:28:15.318]        WriteAP(0x00, 0x190008);
[01:28:15.321]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:28:15.321]        WriteAP(0xF0, 0x01);
[01:28:15.325]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:28:15.325]      </block>
[01:28:15.325]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:28:15.325]    </control>
[01:28:15.325]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:28:15.325]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:28:15.325]        // =>  FALSE
[01:28:15.325]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:28:15.325]    </control>
[01:28:15.325]    <block atomic="false" info="">
[01:28:15.325]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:28:15.337]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:28:15.337]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:28:15.337]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:28:15.339]      __ap = 0; //lets make sure we reset the access point selection
[01:28:15.339]        // -> [__ap <= 0x00000000]
[01:28:15.339]    </block>
[01:28:15.339]  </sequence>
[01:28:15.339]  
[01:28:15.370]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:28:15.370]  
[01:28:15.370]  <debugvars>
[01:28:15.370]    // Pre-defined
[01:28:15.370]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:28:15.374]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:28:15.374]    __dp=0x00000000
[01:28:15.374]    __ap=0x00000000
[01:28:15.374]    __traceout=0x00000000      (Trace Disabled)
[01:28:15.374]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:28:15.374]    __FlashAddr=0x00000000
[01:28:15.374]    __FlashLen=0x00000000
[01:28:15.374]    __FlashArg=0x00000000
[01:28:15.374]    __FlashOp=0x00000000
[01:28:15.374]    __Result=0x00000000
[01:28:15.374]  </debugvars>
[01:28:15.374]  
[01:28:15.374]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:28:15.374]    <block atomic="false" info="">
[01:28:15.374]      __var deviceID = 0;
[01:28:15.374]        // -> [deviceID <= 0x00000000]
[01:28:15.374]      __var version = 0;
[01:28:15.374]        // -> [version <= 0x00000000]
[01:28:15.374]      __var partNum = 0;
[01:28:15.374]        // -> [partNum <= 0x00000000]
[01:28:15.374]      __var manuf = 0;
[01:28:15.374]        // -> [manuf <= 0x00000000]
[01:28:15.374]      __var isMSPM0G1X0X_G3X0X = 0;
[01:28:15.374]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:28:15.374]      __var isProduction = 0;
[01:28:15.376]        // -> [isProduction <= 0x00000000]
[01:28:15.376]      __var continueId = 0;
[01:28:15.376]        // -> [continueId <= 0x00000000]
[01:28:15.376]      deviceID =   Read32(0x41C40004);
[01:28:15.386]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:28:15.386]        // -> [deviceID <= 0x2BB8802F]
[01:28:15.386]      version = deviceID >> 28;
[01:28:15.386]        // -> [version <= 0x00000002]
[01:28:15.386]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:28:15.386]        // -> [partNum <= 0x0000BB88]
[01:28:15.386]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:28:15.386]        // -> [manuf <= 0x00000017]
[01:28:15.386]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:28:15.386]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:28:15.386]      isProduction = (version > 0);
[01:28:15.386]        // -> [isProduction <= 0x00000001]
[01:28:15.386]    </block>
[01:28:15.386]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:28:15.386]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:28:15.386]        // =>  FALSE
[01:28:15.386]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:28:15.390]    </control>
[01:28:15.390]    <control if="continueId == 4" while="" timeout="0" info="">
[01:28:15.391]      // if-block "continueId == 4"
[01:28:15.391]        // =>  FALSE
[01:28:15.391]      // skip if-block "continueId == 4"
[01:28:15.391]    </control>
[01:28:15.391]    <control if="!isProduction" while="" timeout="0" info="">
[01:28:15.391]      // if-block "!isProduction"
[01:28:15.391]        // =>  FALSE
[01:28:15.391]      // skip if-block "!isProduction"
[01:28:15.391]    </control>
[01:28:15.391]  </sequence>
[01:28:15.391]  
[01:29:10.642]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:29:10.642]  
[01:29:10.651]  <debugvars>
[01:29:10.652]    // Pre-defined
[01:29:10.652]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:10.652]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:29:10.652]    __dp=0x00000000
[01:29:10.652]    __ap=0x00000000
[01:29:10.652]    __traceout=0x00000000      (Trace Disabled)
[01:29:10.652]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:10.653]    __FlashAddr=0x00000000
[01:29:10.653]    __FlashLen=0x00000000
[01:29:10.653]    __FlashArg=0x00000000
[01:29:10.653]    __FlashOp=0x00000000
[01:29:10.653]    __Result=0x00000000
[01:29:10.653]  </debugvars>
[01:29:10.653]  
[01:29:10.653]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:29:10.653]    <block atomic="false" info="">
[01:29:10.654]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:29:10.654]        // -> [isSWJ <= 0x00000001]
[01:29:10.654]      __var hasDormant = __protocol & 0x00020000;
[01:29:10.654]        // -> [hasDormant <= 0x00000000]
[01:29:10.654]      __var protType   = __protocol & 0x0000FFFF;
[01:29:10.654]        // -> [protType <= 0x00000002]
[01:29:10.655]    </block>
[01:29:10.655]    <control if="protType == 1" while="" timeout="0" info="">
[01:29:10.655]      // if-block "protType == 1"
[01:29:10.655]        // =>  FALSE
[01:29:10.655]      // skip if-block "protType == 1"
[01:29:10.655]    </control>
[01:29:10.655]    <control if="protType == 2" while="" timeout="0" info="">
[01:29:10.655]      // if-block "protType == 2"
[01:29:10.655]        // =>  TRUE
[01:29:10.655]      <control if="isSWJ" while="" timeout="0" info="">
[01:29:10.655]        // if-block "isSWJ"
[01:29:10.656]          // =>  TRUE
[01:29:10.656]        <control if="hasDormant" while="" timeout="0" info="">
[01:29:10.656]          // if-block "hasDormant"
[01:29:10.656]            // =>  FALSE
[01:29:10.656]          // skip if-block "hasDormant"
[01:29:10.656]        </control>
[01:29:10.656]        <control if="!hasDormant" while="" timeout="0" info="">
[01:29:10.656]          // if-block "!hasDormant"
[01:29:10.656]            // =>  TRUE
[01:29:10.656]          <block atomic="false" info="">
[01:29:10.656]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:29:10.658]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:10.658]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:29:10.660]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:29:10.660]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:29:10.661]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:10.661]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:29:10.663]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:29:10.663]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:29:10.666]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:10.666]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:29:10.678]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:29:10.678]          </block>
[01:29:10.678]          // end if-block "!hasDormant"
[01:29:10.678]        </control>
[01:29:10.678]        // end if-block "isSWJ"
[01:29:10.678]      </control>
[01:29:10.678]      <control if="!isSWJ" while="" timeout="0" info="">
[01:29:10.678]        // if-block "!isSWJ"
[01:29:10.678]          // =>  FALSE
[01:29:10.678]        // skip if-block "!isSWJ"
[01:29:10.678]      </control>
[01:29:10.678]      <block atomic="false" info="">
[01:29:10.680]        ReadDP(0x0);
[01:29:10.680]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:29:10.680]      </block>
[01:29:10.680]      // end if-block "protType == 2"
[01:29:10.680]    </control>
[01:29:10.680]  </sequence>
[01:29:10.682]  
[01:29:10.684]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:29:10.684]  
[01:29:10.684]  <debugvars>
[01:29:10.684]    // Pre-defined
[01:29:10.686]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:10.686]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:29:10.686]    __dp=0x00000000
[01:29:10.686]    __ap=0x00000000
[01:29:10.686]    __traceout=0x00000000      (Trace Disabled)
[01:29:10.686]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:10.686]    __FlashAddr=0x00000000
[01:29:10.686]    __FlashLen=0x00000000
[01:29:10.686]    __FlashArg=0x00000000
[01:29:10.686]    __FlashOp=0x00000000
[01:29:10.686]    __Result=0x00000000
[01:29:10.686]  </debugvars>
[01:29:10.688]  
[01:29:10.688]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:29:10.688]    <block atomic="false" info="">
[01:29:10.688]      __var SW_DP_ABORT       = 0x0;
[01:29:10.688]        // -> [SW_DP_ABORT <= 0x00000000]
[01:29:10.688]      __var DP_CTRL_STAT      = 0x4;
[01:29:10.688]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:29:10.688]      __var DP_SELECT         = 0x8;
[01:29:10.688]        // -> [DP_SELECT <= 0x00000008]
[01:29:10.688]      __var powered_down      = 0;
[01:29:10.688]        // -> [powered_down <= 0x00000000]
[01:29:10.688]      WriteDP(DP_SELECT, 0x00000000);
[01:29:10.691]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:29:10.691]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:29:10.694]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:29:10.694]        // -> [powered_down <= 0x00000001]
[01:29:10.694]    </block>
[01:29:10.694]    <control if="powered_down" while="" timeout="0" info="">
[01:29:10.694]      // if-block "powered_down"
[01:29:10.694]        // =>  TRUE
[01:29:10.694]      <block atomic="false" info="">
[01:29:10.696]        Message(0, "Debug/System power-up request sent");
[01:29:10.697]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:29:10.703]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:29:10.703]      </block>
[01:29:10.703]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:29:10.703]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:29:10.707]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:29:10.707]        // while-condition  =>  FALSE
[01:29:10.707]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:29:10.707]      </control>
[01:29:10.707]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:29:10.707]        // if-block "(__protocol & 0xFFFF) == 1"
[01:29:10.707]          // =>  FALSE
[01:29:10.707]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:29:10.707]      </control>
[01:29:10.707]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:29:10.709]        // if-block "(__protocol & 0xFFFF) == 2"
[01:29:10.709]          // =>  TRUE
[01:29:10.709]        <block atomic="false" info="">
[01:29:10.709]          Message(0, "executing SWD power up");
[01:29:10.710]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:29:10.712]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:29:10.715]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:29:10.715]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:29:10.715]        </block>
[01:29:10.715]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:29:10.715]      </control>
[01:29:10.715]      // end if-block "powered_down"
[01:29:10.715]    </control>
[01:29:10.715]    <block atomic="false" info="">
[01:29:10.715]      __var DEBUG_PORT_VAL    = 0;
[01:29:10.715]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:29:10.715]      __var ACCESS_POINT_VAL  = 0;
[01:29:10.715]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:29:10.715]      __ap = 1; 
[01:29:10.719]        // -> [__ap <= 0x00000001]
[01:29:10.720]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:29:10.721]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:29:10.721]      __ap = 4;
[01:29:10.723]        // -> [__ap <= 0x00000004]
[01:29:10.723]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:10.723]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:29:10.727]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:29:10.727]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:10.730]    </block>
[01:29:10.730]    <block atomic="false" info="">
[01:29:10.730]      __var nReset = 0x80;
[01:29:10.730]        // -> [nReset <= 0x00000080]
[01:29:10.730]      __var canReadPins = 0;
[01:29:10.730]        // -> [canReadPins <= 0x00000000]
[01:29:10.730]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:29:10.732]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:29:10.732]        // -> [canReadPins <= 0x00000001]
[01:29:10.732]    </block>
[01:29:10.732]    <control if="" while="1" timeout="200" info="">
[01:29:10.732]      // while "1"  (timeout="200")
[01:29:10.732]      // while-condition  =>  TRUE
[01:29:10.732]      // while "1"  (timeout="200")
[01:29:10.732]      // while-condition  =>  TRUE
[01:29:10.732]      // while "1"  (timeout="200")
[01:29:10.732]      // while-condition  =>  TRUE
[01:29:10.732]      // while "1"  (timeout="200")
[01:29:10.732]      // while-condition  =>  TRUE
[01:29:10.732]      // while "1"  (timeout="200")
[01:29:10.732]      // while-condition  =>  TRUE
[01:29:10.732]      // while "1"  (timeout="200")
[01:29:10.732]      // while-condition  =>  TRUE
[01:29:10.732]      // while "1"  (timeout="200")
[01:29:10.732]      // while-condition  =>  TRUE
[01:29:10.732]      // while "1"  (timeout="200")
[01:29:10.732]      // while-condition  =>  TRUE
[01:29:10.735]      // while "1"  (timeout="200")
[01:29:10.735]      // while-condition  =>  TRUE
[01:29:10.735]      // while "1"  (timeout="200")
[01:29:10.735]      // while-condition  =>  TRUE
[01:29:10.735]      // while "1"  (timeout="200")
[01:29:10.735]      // while-condition  =>  TRUE
[01:29:10.735]      // while "1"  (timeout="200")
[01:29:10.735]      // while-condition  =>  TRUE
[01:29:10.735]      // while "1"  (timeout="200")
[01:29:10.736]      // while-condition  =>  TRUE
[01:29:10.736]      // while "1"  (timeout="200")
[01:29:10.736]      // while  =>  TIMEOUT
[01:29:10.736]      // end while "1"
[01:29:10.736]    </control>
[01:29:10.736]    <control if="canReadPins" while="" timeout="0" info="">
[01:29:10.736]      // if-block "canReadPins"
[01:29:10.736]        // =>  TRUE
[01:29:10.736]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:29:10.736]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:29:10.736]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:29:10.736]        // while-condition  =>  FALSE
[01:29:10.736]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:29:10.736]      </control>
[01:29:10.736]      // end if-block "canReadPins"
[01:29:10.736]    </control>
[01:29:10.736]    <control if="!canReadPins" while="" timeout="0" info="">
[01:29:10.736]      // if-block "!canReadPins"
[01:29:10.736]        // =>  FALSE
[01:29:10.736]      // skip if-block "!canReadPins"
[01:29:10.736]    </control>
[01:29:10.736]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:29:10.736]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:10.736]        // =>  TRUE
[01:29:10.736]      <block atomic="false" info="">
[01:29:10.736]        WriteAP(0x00, 0x190008);
[01:29:10.741]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:10.741]        WriteAP(0xF0, 0x01);
[01:29:10.745]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:10.745]      </block>
[01:29:10.745]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:10.745]    </control>
[01:29:10.745]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:29:10.745]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:10.745]        // =>  FALSE
[01:29:10.745]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:10.745]    </control>
[01:29:10.745]    <block atomic="false" info="">
[01:29:10.745]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:10.749]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:29:10.749]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:29:10.749]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:10.749]      __ap = 0; //lets make sure we reset the access point selection
[01:29:10.753]        // -> [__ap <= 0x00000000]
[01:29:10.753]    </block>
[01:29:10.753]  </sequence>
[01:29:10.753]  
[01:29:10.785]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:29:10.785]  
[01:29:10.785]  <debugvars>
[01:29:10.785]    // Pre-defined
[01:29:10.785]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:10.785]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:29:10.785]    __dp=0x00000000
[01:29:10.785]    __ap=0x00000000
[01:29:10.785]    __traceout=0x00000000      (Trace Disabled)
[01:29:10.785]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:10.785]    __FlashAddr=0x00000000
[01:29:10.785]    __FlashLen=0x00000000
[01:29:10.785]    __FlashArg=0x00000000
[01:29:10.785]    __FlashOp=0x00000000
[01:29:10.785]    __Result=0x00000000
[01:29:10.785]  </debugvars>
[01:29:10.785]  
[01:29:10.785]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:29:10.785]    <block atomic="false" info="">
[01:29:10.785]      __var deviceID = 0;
[01:29:10.785]        // -> [deviceID <= 0x00000000]
[01:29:10.785]      __var version = 0;
[01:29:10.785]        // -> [version <= 0x00000000]
[01:29:10.785]      __var partNum = 0;
[01:29:10.785]        // -> [partNum <= 0x00000000]
[01:29:10.785]      __var manuf = 0;
[01:29:10.785]        // -> [manuf <= 0x00000000]
[01:29:10.785]      __var isMSPM0G1X0X_G3X0X = 0;
[01:29:10.785]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:29:10.785]      __var isProduction = 0;
[01:29:10.789]        // -> [isProduction <= 0x00000000]
[01:29:10.789]      __var continueId = 0;
[01:29:10.789]        // -> [continueId <= 0x00000000]
[01:29:10.789]      deviceID =   Read32(0x41C40004);
[01:29:10.793]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:29:10.793]        // -> [deviceID <= 0x2BB8802F]
[01:29:10.793]      version = deviceID >> 28;
[01:29:10.797]        // -> [version <= 0x00000002]
[01:29:10.797]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:29:10.797]        // -> [partNum <= 0x0000BB88]
[01:29:10.797]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:29:10.797]        // -> [manuf <= 0x00000017]
[01:29:10.797]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:29:10.797]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:29:10.797]      isProduction = (version > 0);
[01:29:10.797]        // -> [isProduction <= 0x00000001]
[01:29:10.797]    </block>
[01:29:10.797]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:29:10.797]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:29:10.797]        // =>  FALSE
[01:29:10.797]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:29:10.797]    </control>
[01:29:10.797]    <control if="continueId == 4" while="" timeout="0" info="">
[01:29:10.797]      // if-block "continueId == 4"
[01:29:10.797]        // =>  FALSE
[01:29:10.797]      // skip if-block "continueId == 4"
[01:29:10.797]    </control>
[01:29:10.797]    <control if="!isProduction" while="" timeout="0" info="">
[01:29:10.797]      // if-block "!isProduction"
[01:29:10.797]        // =>  FALSE
[01:29:10.797]      // skip if-block "!isProduction"
[01:29:10.797]    </control>
[01:29:10.797]  </sequence>
[01:29:10.797]  
[01:29:17.530]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:29:17.530]  
[01:29:17.542]  <debugvars>
[01:29:17.542]    // Pre-defined
[01:29:17.542]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:17.542]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:29:17.542]    __dp=0x00000000
[01:29:17.542]    __ap=0x00000000
[01:29:17.542]    __traceout=0x00000000      (Trace Disabled)
[01:29:17.542]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:17.542]    __FlashAddr=0x00000000
[01:29:17.542]    __FlashLen=0x00000000
[01:29:17.542]    __FlashArg=0x00000000
[01:29:17.542]    __FlashOp=0x00000000
[01:29:17.542]    __Result=0x00000000
[01:29:17.542]  </debugvars>
[01:29:17.542]  
[01:29:17.542]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:29:17.542]    <block atomic="false" info="">
[01:29:17.542]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:29:17.542]        // -> [isSWJ <= 0x00000001]
[01:29:17.542]      __var hasDormant = __protocol & 0x00020000;
[01:29:17.542]        // -> [hasDormant <= 0x00000000]
[01:29:17.542]      __var protType   = __protocol & 0x0000FFFF;
[01:29:17.542]        // -> [protType <= 0x00000002]
[01:29:17.542]    </block>
[01:29:17.542]    <control if="protType == 1" while="" timeout="0" info="">
[01:29:17.542]      // if-block "protType == 1"
[01:29:17.546]        // =>  FALSE
[01:29:17.546]      // skip if-block "protType == 1"
[01:29:17.546]    </control>
[01:29:17.546]    <control if="protType == 2" while="" timeout="0" info="">
[01:29:17.546]      // if-block "protType == 2"
[01:29:17.546]        // =>  TRUE
[01:29:17.546]      <control if="isSWJ" while="" timeout="0" info="">
[01:29:17.546]        // if-block "isSWJ"
[01:29:17.546]          // =>  TRUE
[01:29:17.546]        <control if="hasDormant" while="" timeout="0" info="">
[01:29:17.546]          // if-block "hasDormant"
[01:29:17.546]            // =>  FALSE
[01:29:17.546]          // skip if-block "hasDormant"
[01:29:17.546]        </control>
[01:29:17.546]        <control if="!hasDormant" while="" timeout="0" info="">
[01:29:17.546]          // if-block "!hasDormant"
[01:29:17.546]            // =>  TRUE
[01:29:17.546]          <block atomic="false" info="">
[01:29:17.546]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:29:17.550]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:17.550]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:29:17.550]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:29:17.550]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:29:17.554]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:17.554]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:29:17.554]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:29:17.554]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:29:17.558]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:29:17.558]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:29:17.558]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:29:17.558]          </block>
[01:29:17.558]          // end if-block "!hasDormant"
[01:29:17.558]        </control>
[01:29:17.558]        // end if-block "isSWJ"
[01:29:17.558]      </control>
[01:29:17.558]      <control if="!isSWJ" while="" timeout="0" info="">
[01:29:17.558]        // if-block "!isSWJ"
[01:29:17.558]          // =>  FALSE
[01:29:17.558]        // skip if-block "!isSWJ"
[01:29:17.558]      </control>
[01:29:17.558]      <block atomic="false" info="">
[01:29:17.558]        ReadDP(0x0);
[01:29:17.562]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:29:17.562]      </block>
[01:29:17.562]      // end if-block "protType == 2"
[01:29:17.562]    </control>
[01:29:17.562]  </sequence>
[01:29:17.562]  
[01:29:17.566]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:29:17.566]  
[01:29:17.566]  <debugvars>
[01:29:17.566]    // Pre-defined
[01:29:17.566]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:17.566]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:29:17.566]    __dp=0x00000000
[01:29:17.566]    __ap=0x00000000
[01:29:17.566]    __traceout=0x00000000      (Trace Disabled)
[01:29:17.566]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:17.566]    __FlashAddr=0x00000000
[01:29:17.566]    __FlashLen=0x00000000
[01:29:17.566]    __FlashArg=0x00000000
[01:29:17.566]    __FlashOp=0x00000000
[01:29:17.566]    __Result=0x00000000
[01:29:17.566]  </debugvars>
[01:29:17.566]  
[01:29:17.566]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:29:17.566]    <block atomic="false" info="">
[01:29:17.566]      __var SW_DP_ABORT       = 0x0;
[01:29:17.566]        // -> [SW_DP_ABORT <= 0x00000000]
[01:29:17.566]      __var DP_CTRL_STAT      = 0x4;
[01:29:17.566]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:29:17.570]      __var DP_SELECT         = 0x8;
[01:29:17.570]        // -> [DP_SELECT <= 0x00000008]
[01:29:17.570]      __var powered_down      = 0;
[01:29:17.570]        // -> [powered_down <= 0x00000000]
[01:29:17.570]      WriteDP(DP_SELECT, 0x00000000);
[01:29:17.570]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:29:17.570]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:29:17.574]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:29:17.574]        // -> [powered_down <= 0x00000001]
[01:29:17.574]    </block>
[01:29:17.575]    <control if="powered_down" while="" timeout="0" info="">
[01:29:17.575]      // if-block "powered_down"
[01:29:17.575]        // =>  TRUE
[01:29:17.575]      <block atomic="false" info="">
[01:29:17.575]        Message(0, "Debug/System power-up request sent");
[01:29:17.575]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:29:17.582]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:29:17.582]      </block>
[01:29:17.582]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:29:17.582]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:29:17.582]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:29:17.582]        // while-condition  =>  FALSE
[01:29:17.582]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:29:17.582]      </control>
[01:29:17.582]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:29:17.582]        // if-block "(__protocol & 0xFFFF) == 1"
[01:29:17.582]          // =>  FALSE
[01:29:17.582]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:29:17.582]      </control>
[01:29:17.582]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:29:17.586]        // if-block "(__protocol & 0xFFFF) == 2"
[01:29:17.586]          // =>  TRUE
[01:29:17.586]        <block atomic="false" info="">
[01:29:17.586]          Message(0, "executing SWD power up");
[01:29:17.586]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:29:17.590]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:29:17.590]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:29:17.590]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:29:17.590]        </block>
[01:29:17.590]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:29:17.590]      </control>
[01:29:17.590]      // end if-block "powered_down"
[01:29:17.590]    </control>
[01:29:17.590]    <block atomic="false" info="">
[01:29:17.590]      __var DEBUG_PORT_VAL    = 0;
[01:29:17.594]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:29:17.594]      __var ACCESS_POINT_VAL  = 0;
[01:29:17.594]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:29:17.594]      __ap = 1; 
[01:29:17.594]        // -> [__ap <= 0x00000001]
[01:29:17.594]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:29:17.598]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:29:17.598]      __ap = 4;
[01:29:17.598]        // -> [__ap <= 0x00000004]
[01:29:17.602]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:17.606]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:29:17.606]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:29:17.606]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:17.610]    </block>
[01:29:17.610]    <block atomic="false" info="">
[01:29:17.610]      __var nReset = 0x80;
[01:29:17.610]        // -> [nReset <= 0x00000080]
[01:29:17.610]      __var canReadPins = 0;
[01:29:17.610]        // -> [canReadPins <= 0x00000000]
[01:29:17.610]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:29:17.618]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:29:17.618]        // -> [canReadPins <= 0x00000001]
[01:29:17.618]    </block>
[01:29:17.618]    <control if="" while="1" timeout="200" info="">
[01:29:17.618]      // while "1"  (timeout="200")
[01:29:17.618]      // while-condition  =>  TRUE
[01:29:17.618]      // while "1"  (timeout="200")
[01:29:17.618]      // while-condition  =>  TRUE
[01:29:17.618]      // while "1"  (timeout="200")
[01:29:17.618]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.622]      // while-condition  =>  TRUE
[01:29:17.622]      // while "1"  (timeout="200")
[01:29:17.626]      // while-condition  =>  TRUE
[01:29:17.626]      // while "1"  (timeout="200")
[01:29:17.626]      // while  =>  TIMEOUT
[01:29:17.626]      // end while "1"
[01:29:17.626]    </control>
[01:29:17.626]    <control if="canReadPins" while="" timeout="0" info="">
[01:29:17.626]      // if-block "canReadPins"
[01:29:17.626]        // =>  TRUE
[01:29:17.626]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:29:17.626]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:29:17.626]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:29:17.626]        // while-condition  =>  FALSE
[01:29:17.626]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:29:17.626]      </control>
[01:29:17.626]      // end if-block "canReadPins"
[01:29:17.626]    </control>
[01:29:17.626]    <control if="!canReadPins" while="" timeout="0" info="">
[01:29:17.626]      // if-block "!canReadPins"
[01:29:17.626]        // =>  FALSE
[01:29:17.626]      // skip if-block "!canReadPins"
[01:29:17.630]    </control>
[01:29:17.630]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:29:17.630]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:17.630]        // =>  TRUE
[01:29:17.630]      <block atomic="false" info="">
[01:29:17.630]        WriteAP(0x00, 0x190008);
[01:29:17.630]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:17.630]        WriteAP(0xF0, 0x01);
[01:29:17.638]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:29:17.638]      </block>
[01:29:17.638]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:29:17.638]    </control>
[01:29:17.638]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:29:17.642]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:17.642]        // =>  FALSE
[01:29:17.642]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:29:17.642]    </control>
[01:29:17.642]    <block atomic="false" info="">
[01:29:17.642]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:29:17.650]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:29:17.650]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:29:17.650]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:29:17.650]      __ap = 0; //lets make sure we reset the access point selection
[01:29:17.650]        // -> [__ap <= 0x00000000]
[01:29:17.650]    </block>
[01:29:17.650]  </sequence>
[01:29:17.650]  
[01:29:17.684]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:29:17.684]  
[01:29:17.684]  <debugvars>
[01:29:17.684]    // Pre-defined
[01:29:17.684]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:29:17.684]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:29:17.684]    __dp=0x00000000
[01:29:17.684]    __ap=0x00000000
[01:29:17.687]    __traceout=0x00000000      (Trace Disabled)
[01:29:17.687]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:29:17.687]    __FlashAddr=0x00000000
[01:29:17.687]    __FlashLen=0x00000000
[01:29:17.687]    __FlashArg=0x00000000
[01:29:17.687]    __FlashOp=0x00000000
[01:29:17.687]    __Result=0x00000000
[01:29:17.687]  </debugvars>
[01:29:17.687]  
[01:29:17.687]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:29:17.687]    <block atomic="false" info="">
[01:29:17.687]      __var deviceID = 0;
[01:29:17.687]        // -> [deviceID <= 0x00000000]
[01:29:17.687]      __var version = 0;
[01:29:17.687]        // -> [version <= 0x00000000]
[01:29:17.687]      __var partNum = 0;
[01:29:17.687]        // -> [partNum <= 0x00000000]
[01:29:17.687]      __var manuf = 0;
[01:29:17.687]        // -> [manuf <= 0x00000000]
[01:29:17.687]      __var isMSPM0G1X0X_G3X0X = 0;
[01:29:17.687]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:29:17.687]      __var isProduction = 0;
[01:29:17.687]        // -> [isProduction <= 0x00000000]
[01:29:17.687]      __var continueId = 0;
[01:29:17.687]        // -> [continueId <= 0x00000000]
[01:29:17.687]      deviceID =   Read32(0x41C40004);
[01:29:17.695]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:29:17.695]        // -> [deviceID <= 0x2BB8802F]
[01:29:17.695]      version = deviceID >> 28;
[01:29:17.695]        // -> [version <= 0x00000002]
[01:29:17.695]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:29:17.695]        // -> [partNum <= 0x0000BB88]
[01:29:17.695]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:29:17.695]        // -> [manuf <= 0x00000017]
[01:29:17.695]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:29:17.695]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:29:17.695]      isProduction = (version > 0);
[01:29:17.695]        // -> [isProduction <= 0x00000001]
[01:29:17.695]    </block>
[01:29:17.695]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:29:17.695]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:29:17.695]        // =>  FALSE
[01:29:17.695]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:29:17.695]    </control>
[01:29:17.695]    <control if="continueId == 4" while="" timeout="0" info="">
[01:29:17.695]      // if-block "continueId == 4"
[01:29:17.695]        // =>  FALSE
[01:29:17.695]      // skip if-block "continueId == 4"
[01:29:17.695]    </control>
[01:29:17.695]    <control if="!isProduction" while="" timeout="0" info="">
[01:29:17.695]      // if-block "!isProduction"
[01:29:17.699]        // =>  FALSE
[01:29:17.699]      // skip if-block "!isProduction"
[01:29:17.699]    </control>
[01:29:17.699]  </sequence>
[01:29:17.699]  
[01:31:27.158]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:31:27.158]  
[01:31:27.158]  <debugvars>
[01:31:27.158]    // Pre-defined
[01:31:27.158]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:27.158]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:31:27.158]    __dp=0x00000000
[01:31:27.158]    __ap=0x00000000
[01:31:27.158]    __traceout=0x00000000      (Trace Disabled)
[01:31:27.158]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:27.158]    __FlashAddr=0x00000000
[01:31:27.158]    __FlashLen=0x00000000
[01:31:27.158]    __FlashArg=0x00000000
[01:31:27.158]    __FlashOp=0x00000000
[01:31:27.158]    __Result=0x00000000
[01:31:27.158]  </debugvars>
[01:31:27.158]  
[01:31:27.158]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:31:27.158]    <block atomic="false" info="">
[01:31:27.158]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:31:27.158]        // -> [isSWJ <= 0x00000001]
[01:31:27.158]      __var hasDormant = __protocol & 0x00020000;
[01:31:27.158]        // -> [hasDormant <= 0x00000000]
[01:31:27.158]      __var protType   = __protocol & 0x0000FFFF;
[01:31:27.158]        // -> [protType <= 0x00000002]
[01:31:27.158]    </block>
[01:31:27.158]    <control if="protType == 1" while="" timeout="0" info="">
[01:31:27.158]      // if-block "protType == 1"
[01:31:27.158]        // =>  FALSE
[01:31:27.158]      // skip if-block "protType == 1"
[01:31:27.158]    </control>
[01:31:27.158]    <control if="protType == 2" while="" timeout="0" info="">
[01:31:27.158]      // if-block "protType == 2"
[01:31:27.158]        // =>  TRUE
[01:31:27.158]      <control if="isSWJ" while="" timeout="0" info="">
[01:31:27.163]        // if-block "isSWJ"
[01:31:27.163]          // =>  TRUE
[01:31:27.163]        <control if="hasDormant" while="" timeout="0" info="">
[01:31:27.163]          // if-block "hasDormant"
[01:31:27.163]            // =>  FALSE
[01:31:27.163]          // skip if-block "hasDormant"
[01:31:27.163]        </control>
[01:31:27.163]        <control if="!hasDormant" while="" timeout="0" info="">
[01:31:27.163]          // if-block "!hasDormant"
[01:31:27.163]            // =>  TRUE
[01:31:27.163]          <block atomic="false" info="">
[01:31:27.163]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:31:27.164]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:27.164]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:31:27.167]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:31:27.167]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:31:27.167]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:27.167]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:31:27.171]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:31:27.171]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:31:27.171]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:27.171]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:31:27.175]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:31:27.175]          </block>
[01:31:27.175]          // end if-block "!hasDormant"
[01:31:27.175]        </control>
[01:31:27.175]        // end if-block "isSWJ"
[01:31:27.175]      </control>
[01:31:27.175]      <control if="!isSWJ" while="" timeout="0" info="">
[01:31:27.175]        // if-block "!isSWJ"
[01:31:27.175]          // =>  FALSE
[01:31:27.175]        // skip if-block "!isSWJ"
[01:31:27.175]      </control>
[01:31:27.175]      <block atomic="false" info="">
[01:31:27.175]        ReadDP(0x0);
[01:31:27.179]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:31:27.179]      </block>
[01:31:27.179]      // end if-block "protType == 2"
[01:31:27.179]    </control>
[01:31:27.179]  </sequence>
[01:31:27.179]  
[01:31:27.187]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:31:27.187]  
[01:31:27.187]  <debugvars>
[01:31:27.187]    // Pre-defined
[01:31:27.187]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:27.187]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:31:27.187]    __dp=0x00000000
[01:31:27.187]    __ap=0x00000000
[01:31:27.187]    __traceout=0x00000000      (Trace Disabled)
[01:31:27.187]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:27.187]    __FlashAddr=0x00000000
[01:31:27.187]    __FlashLen=0x00000000
[01:31:27.187]    __FlashArg=0x00000000
[01:31:27.187]    __FlashOp=0x00000000
[01:31:27.187]    __Result=0x00000000
[01:31:27.187]  </debugvars>
[01:31:27.187]  
[01:31:27.187]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:31:27.187]    <block atomic="false" info="">
[01:31:27.187]      __var SW_DP_ABORT       = 0x0;
[01:31:27.187]        // -> [SW_DP_ABORT <= 0x00000000]
[01:31:27.187]      __var DP_CTRL_STAT      = 0x4;
[01:31:27.187]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:31:27.187]      __var DP_SELECT         = 0x8;
[01:31:27.187]        // -> [DP_SELECT <= 0x00000008]
[01:31:27.187]      __var powered_down      = 0;
[01:31:27.191]        // -> [powered_down <= 0x00000000]
[01:31:27.191]      WriteDP(DP_SELECT, 0x00000000);
[01:31:27.191]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:31:27.191]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:31:27.195]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:31:27.195]        // -> [powered_down <= 0x00000001]
[01:31:27.195]    </block>
[01:31:27.195]    <control if="powered_down" while="" timeout="0" info="">
[01:31:27.195]      // if-block "powered_down"
[01:31:27.195]        // =>  TRUE
[01:31:27.195]      <block atomic="false" info="">
[01:31:27.195]        Message(0, "Debug/System power-up request sent");
[01:31:27.198]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:31:27.200]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:31:27.200]      </block>
[01:31:27.200]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:31:27.200]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:31:27.207]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:31:27.207]        // while-condition  =>  FALSE
[01:31:27.207]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:31:27.207]      </control>
[01:31:27.207]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:31:27.207]        // if-block "(__protocol & 0xFFFF) == 1"
[01:31:27.207]          // =>  FALSE
[01:31:27.207]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:31:27.207]      </control>
[01:31:27.207]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:31:27.207]        // if-block "(__protocol & 0xFFFF) == 2"
[01:31:27.207]          // =>  TRUE
[01:31:27.207]        <block atomic="false" info="">
[01:31:27.207]          Message(0, "executing SWD power up");
[01:31:27.207]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:31:27.213]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:31:27.213]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:31:27.213]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:31:27.213]        </block>
[01:31:27.215]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:31:27.215]      </control>
[01:31:27.215]      // end if-block "powered_down"
[01:31:27.215]    </control>
[01:31:27.215]    <block atomic="false" info="">
[01:31:27.215]      __var DEBUG_PORT_VAL    = 0;
[01:31:27.215]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:31:27.215]      __var ACCESS_POINT_VAL  = 0;
[01:31:27.215]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:31:27.215]      __ap = 1; 
[01:31:27.215]        // -> [__ap <= 0x00000001]
[01:31:27.215]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:31:27.223]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:31:27.223]      __ap = 4;
[01:31:27.223]        // -> [__ap <= 0x00000004]
[01:31:27.223]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:31:27.233]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:31:27.233]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:31:27.233]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:31:27.235]    </block>
[01:31:27.235]    <block atomic="false" info="">
[01:31:27.235]      __var nReset = 0x80;
[01:31:27.235]        // -> [nReset <= 0x00000080]
[01:31:27.235]      __var canReadPins = 0;
[01:31:27.235]        // -> [canReadPins <= 0x00000000]
[01:31:27.235]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:31:27.235]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:31:27.235]        // -> [canReadPins <= 0x00000001]
[01:31:27.235]    </block>
[01:31:27.235]    <control if="" while="1" timeout="200" info="">
[01:31:27.235]      // while "1"  (timeout="200")
[01:31:27.235]      // while-condition  =>  TRUE
[01:31:27.235]      // while "1"  (timeout="200")
[01:31:27.235]      // while-condition  =>  TRUE
[01:31:27.235]      // while "1"  (timeout="200")
[01:31:27.235]      // while-condition  =>  TRUE
[01:31:27.235]      // while "1"  (timeout="200")
[01:31:27.235]      // while-condition  =>  TRUE
[01:31:27.235]      // while "1"  (timeout="200")
[01:31:27.235]      // while-condition  =>  TRUE
[01:31:27.239]      // while "1"  (timeout="200")
[01:31:27.239]      // while-condition  =>  TRUE
[01:31:27.239]      // while "1"  (timeout="200")
[01:31:27.239]      // while-condition  =>  TRUE
[01:31:27.239]      // while "1"  (timeout="200")
[01:31:27.239]      // while-condition  =>  TRUE
[01:31:27.239]      // while "1"  (timeout="200")
[01:31:27.239]      // while-condition  =>  TRUE
[01:31:27.239]      // while "1"  (timeout="200")
[01:31:27.239]      // while-condition  =>  TRUE
[01:31:27.239]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.241]      // while "1"  (timeout="200")
[01:31:27.241]      // while-condition  =>  TRUE
[01:31:27.244]      // while "1"  (timeout="200")
[01:31:27.244]      // while-condition  =>  TRUE
[01:31:27.244]      // while "1"  (timeout="200")
[01:31:27.244]      // while-condition  =>  TRUE
[01:31:27.244]      // while "1"  (timeout="200")
[01:31:27.244]      // while-condition  =>  TRUE
[01:31:27.244]      // while "1"  (timeout="200")
[01:31:27.244]      // while-condition  =>  TRUE
[01:31:27.244]      // while "1"  (timeout="200")
[01:31:27.244]      // while-condition  =>  TRUE
[01:31:27.244]      // while "1"  (timeout="200")
[01:31:27.244]      // while-condition  =>  TRUE
[01:31:27.244]      // while "1"  (timeout="200")
[01:31:27.244]      // while-condition  =>  TRUE
[01:31:27.244]      // while "1"  (timeout="200")
[01:31:27.245]      // while-condition  =>  TRUE
[01:31:27.245]      // while "1"  (timeout="200")
[01:31:27.245]      // while-condition  =>  TRUE
[01:31:27.245]      // while "1"  (timeout="200")
[01:31:27.245]      // while-condition  =>  TRUE
[01:31:27.245]      // while "1"  (timeout="200")
[01:31:27.246]      // while-condition  =>  TRUE
[01:31:27.246]      // while "1"  (timeout="200")
[01:31:27.246]      // while-condition  =>  TRUE
[01:31:27.246]      // while "1"  (timeout="200")
[01:31:27.246]      // while-condition  =>  TRUE
[01:31:27.246]      // while "1"  (timeout="200")
[01:31:27.246]      // while-condition  =>  TRUE
[01:31:27.246]      // while "1"  (timeout="200")
[01:31:27.246]      // while-condition  =>  TRUE
[01:31:27.246]      // while "1"  (timeout="200")
[01:31:27.246]      // while-condition  =>  TRUE
[01:31:27.246]      // while "1"  (timeout="200")
[01:31:27.246]      // while-condition  =>  TRUE
[01:31:27.246]      // while "1"  (timeout="200")
[01:31:27.246]      // while-condition  =>  TRUE
[01:31:27.246]      // while "1"  (timeout="200")
[01:31:27.246]      // while-condition  =>  TRUE
[01:31:27.246]      // while "1"  (timeout="200")
[01:31:27.246]      // while-condition  =>  TRUE
[01:31:27.246]      // while "1"  (timeout="200")
[01:31:27.246]      // while-condition  =>  TRUE
[01:31:27.246]      // while "1"  (timeout="200")
[01:31:27.246]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.248]      // while "1"  (timeout="200")
[01:31:27.248]      // while-condition  =>  TRUE
[01:31:27.251]      // while "1"  (timeout="200")
[01:31:27.251]      // while  =>  TIMEOUT
[01:31:27.251]      // end while "1"
[01:31:27.251]    </control>
[01:31:27.251]    <control if="canReadPins" while="" timeout="0" info="">
[01:31:27.251]      // if-block "canReadPins"
[01:31:27.251]        // =>  TRUE
[01:31:27.251]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:31:27.251]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:31:27.254]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:31:27.254]        // while-condition  =>  FALSE
[01:31:27.254]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:31:27.254]      </control>
[01:31:27.254]      // end if-block "canReadPins"
[01:31:27.254]    </control>
[01:31:27.254]    <control if="!canReadPins" while="" timeout="0" info="">
[01:31:27.254]      // if-block "!canReadPins"
[01:31:27.254]        // =>  FALSE
[01:31:27.254]      // skip if-block "!canReadPins"
[01:31:27.254]    </control>
[01:31:27.254]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:31:27.254]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:31:27.254]        // =>  TRUE
[01:31:27.254]      <block atomic="false" info="">
[01:31:27.254]        WriteAP(0x00, 0x190008);
[01:31:27.256]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:31:27.256]        WriteAP(0xF0, 0x01);
[01:31:27.260]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:31:27.260]      </block>
[01:31:27.260]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:31:27.260]    </control>
[01:31:27.260]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:31:27.260]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:31:27.260]        // =>  FALSE
[01:31:27.260]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:31:27.260]    </control>
[01:31:27.260]    <block atomic="false" info="">
[01:31:27.260]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:31:27.264]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:31:27.264]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:31:27.264]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:31:27.268]      __ap = 0; //lets make sure we reset the access point selection
[01:31:27.268]        // -> [__ap <= 0x00000000]
[01:31:27.268]    </block>
[01:31:27.268]  </sequence>
[01:31:27.268]  
[01:31:27.300]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:31:27.300]  
[01:31:27.300]  <debugvars>
[01:31:27.300]    // Pre-defined
[01:31:27.300]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:27.300]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:31:27.300]    __dp=0x00000000
[01:31:27.300]    __ap=0x00000000
[01:31:27.300]    __traceout=0x00000000      (Trace Disabled)
[01:31:27.300]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:27.304]    __FlashAddr=0x00000000
[01:31:27.304]    __FlashLen=0x00000000
[01:31:27.304]    __FlashArg=0x00000000
[01:31:27.304]    __FlashOp=0x00000000
[01:31:27.304]    __Result=0x00000000
[01:31:27.304]  </debugvars>
[01:31:27.304]  
[01:31:27.304]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:31:27.304]    <block atomic="false" info="">
[01:31:27.304]      __var deviceID = 0;
[01:31:27.304]        // -> [deviceID <= 0x00000000]
[01:31:27.304]      __var version = 0;
[01:31:27.304]        // -> [version <= 0x00000000]
[01:31:27.304]      __var partNum = 0;
[01:31:27.304]        // -> [partNum <= 0x00000000]
[01:31:27.304]      __var manuf = 0;
[01:31:27.304]        // -> [manuf <= 0x00000000]
[01:31:27.304]      __var isMSPM0G1X0X_G3X0X = 0;
[01:31:27.306]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:31:27.306]      __var isProduction = 0;
[01:31:27.306]        // -> [isProduction <= 0x00000000]
[01:31:27.306]      __var continueId = 0;
[01:31:27.306]        // -> [continueId <= 0x00000000]
[01:31:27.306]      deviceID =   Read32(0x41C40004);
[01:31:27.312]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:31:27.312]        // -> [deviceID <= 0x2BB8802F]
[01:31:27.312]      version = deviceID >> 28;
[01:31:27.312]        // -> [version <= 0x00000002]
[01:31:27.312]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:31:27.312]        // -> [partNum <= 0x0000BB88]
[01:31:27.312]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:31:27.312]        // -> [manuf <= 0x00000017]
[01:31:27.312]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:31:27.312]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:31:27.312]      isProduction = (version > 0);
[01:31:27.312]        // -> [isProduction <= 0x00000001]
[01:31:27.312]    </block>
[01:31:27.312]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:31:27.312]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:31:27.312]        // =>  FALSE
[01:31:27.312]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:31:27.312]    </control>
[01:31:27.312]    <control if="continueId == 4" while="" timeout="0" info="">
[01:31:27.312]      // if-block "continueId == 4"
[01:31:27.312]        // =>  FALSE
[01:31:27.312]      // skip if-block "continueId == 4"
[01:31:27.312]    </control>
[01:31:27.312]    <control if="!isProduction" while="" timeout="0" info="">
[01:31:27.316]      // if-block "!isProduction"
[01:31:27.316]        // =>  FALSE
[01:31:27.316]      // skip if-block "!isProduction"
[01:31:27.316]    </control>
[01:31:27.316]  </sequence>
[01:31:27.316]  
[01:31:33.285]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:31:33.285]  
[01:31:33.296]  <debugvars>
[01:31:33.296]    // Pre-defined
[01:31:33.296]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:33.296]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:31:33.296]    __dp=0x00000000
[01:31:33.296]    __ap=0x00000000
[01:31:33.296]    __traceout=0x00000000      (Trace Disabled)
[01:31:33.296]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:33.296]    __FlashAddr=0x00000000
[01:31:33.296]    __FlashLen=0x00000000
[01:31:33.296]    __FlashArg=0x00000000
[01:31:33.297]    __FlashOp=0x00000000
[01:31:33.297]    __Result=0x00000000
[01:31:33.297]  </debugvars>
[01:31:33.297]  
[01:31:33.297]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:31:33.297]    <block atomic="false" info="">
[01:31:33.297]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:31:33.297]        // -> [isSWJ <= 0x00000001]
[01:31:33.297]      __var hasDormant = __protocol & 0x00020000;
[01:31:33.297]        // -> [hasDormant <= 0x00000000]
[01:31:33.297]      __var protType   = __protocol & 0x0000FFFF;
[01:31:33.297]        // -> [protType <= 0x00000002]
[01:31:33.297]    </block>
[01:31:33.297]    <control if="protType == 1" while="" timeout="0" info="">
[01:31:33.297]      // if-block "protType == 1"
[01:31:33.297]        // =>  FALSE
[01:31:33.297]      // skip if-block "protType == 1"
[01:31:33.297]    </control>
[01:31:33.297]    <control if="protType == 2" while="" timeout="0" info="">
[01:31:33.297]      // if-block "protType == 2"
[01:31:33.297]        // =>  TRUE
[01:31:33.297]      <control if="isSWJ" while="" timeout="0" info="">
[01:31:33.297]        // if-block "isSWJ"
[01:31:33.297]          // =>  TRUE
[01:31:33.297]        <control if="hasDormant" while="" timeout="0" info="">
[01:31:33.297]          // if-block "hasDormant"
[01:31:33.297]            // =>  FALSE
[01:31:33.297]          // skip if-block "hasDormant"
[01:31:33.297]        </control>
[01:31:33.297]        <control if="!hasDormant" while="" timeout="0" info="">
[01:31:33.297]          // if-block "!hasDormant"
[01:31:33.297]            // =>  TRUE
[01:31:33.297]          <block atomic="false" info="">
[01:31:33.297]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:31:33.301]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:33.305]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:31:33.305]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:31:33.305]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:31:33.309]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:33.309]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:31:33.313]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:31:33.313]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:31:33.313]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:31:33.313]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:31:33.317]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:31:33.317]          </block>
[01:31:33.317]          // end if-block "!hasDormant"
[01:31:33.317]        </control>
[01:31:33.317]        // end if-block "isSWJ"
[01:31:33.317]      </control>
[01:31:33.317]      <control if="!isSWJ" while="" timeout="0" info="">
[01:31:33.317]        // if-block "!isSWJ"
[01:31:33.317]          // =>  FALSE
[01:31:33.317]        // skip if-block "!isSWJ"
[01:31:33.317]      </control>
[01:31:33.317]      <block atomic="false" info="">
[01:31:33.317]        ReadDP(0x0);
[01:31:33.317]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:31:33.317]      </block>
[01:31:33.317]      // end if-block "protType == 2"
[01:31:33.317]    </control>
[01:31:33.321]  </sequence>
[01:31:33.321]  
[01:31:33.325]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:31:33.325]  
[01:31:33.325]  <debugvars>
[01:31:33.325]    // Pre-defined
[01:31:33.325]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:33.325]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:31:33.325]    __dp=0x00000000
[01:31:33.325]    __ap=0x00000000
[01:31:33.325]    __traceout=0x00000000      (Trace Disabled)
[01:31:33.325]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:33.325]    __FlashAddr=0x00000000
[01:31:33.325]    __FlashLen=0x00000000
[01:31:33.325]    __FlashArg=0x00000000
[01:31:33.325]    __FlashOp=0x00000000
[01:31:33.325]    __Result=0x00000000
[01:31:33.325]  </debugvars>
[01:31:33.325]  
[01:31:33.325]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:31:33.325]    <block atomic="false" info="">
[01:31:33.325]      __var SW_DP_ABORT       = 0x0;
[01:31:33.325]        // -> [SW_DP_ABORT <= 0x00000000]
[01:31:33.325]      __var DP_CTRL_STAT      = 0x4;
[01:31:33.325]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:31:33.325]      __var DP_SELECT         = 0x8;
[01:31:33.325]        // -> [DP_SELECT <= 0x00000008]
[01:31:33.325]      __var powered_down      = 0;
[01:31:33.325]        // -> [powered_down <= 0x00000000]
[01:31:33.325]      WriteDP(DP_SELECT, 0x00000000);
[01:31:33.333]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:31:33.333]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:31:33.333]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:31:33.333]        // -> [powered_down <= 0x00000001]
[01:31:33.333]    </block>
[01:31:33.333]    <control if="powered_down" while="" timeout="0" info="">
[01:31:33.333]      // if-block "powered_down"
[01:31:33.333]        // =>  TRUE
[01:31:33.333]      <block atomic="false" info="">
[01:31:33.333]        Message(0, "Debug/System power-up request sent");
[01:31:33.337]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:31:33.341]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:31:33.341]      </block>
[01:31:33.341]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:31:33.341]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:31:33.345]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:31:33.345]        // while-condition  =>  FALSE
[01:31:33.345]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:31:33.345]      </control>
[01:31:33.345]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:31:33.345]        // if-block "(__protocol & 0xFFFF) == 1"
[01:31:33.345]          // =>  FALSE
[01:31:33.345]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:31:33.345]      </control>
[01:31:33.345]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:31:33.345]        // if-block "(__protocol & 0xFFFF) == 2"
[01:31:33.345]          // =>  TRUE
[01:31:33.345]        <block atomic="false" info="">
[01:31:33.345]          Message(0, "executing SWD power up");
[01:31:33.345]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:31:33.350]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:31:33.350]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:31:33.353]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:31:33.353]        </block>
[01:31:33.353]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:31:33.357]      </control>
[01:31:33.357]      // end if-block "powered_down"
[01:31:33.357]    </control>
[01:31:33.357]    <block atomic="false" info="">
[01:31:33.357]      __var DEBUG_PORT_VAL    = 0;
[01:31:33.357]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:31:33.357]      __var ACCESS_POINT_VAL  = 0;
[01:31:33.357]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:31:33.357]      __ap = 1; 
[01:31:33.357]        // -> [__ap <= 0x00000001]
[01:31:33.357]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:31:33.362]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:31:33.362]      __ap = 4;
[01:31:33.362]        // -> [__ap <= 0x00000004]
[01:31:33.362]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:31:33.370]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:31:33.370]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:31:33.370]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:31:33.373]    </block>
[01:31:33.373]    <block atomic="false" info="">
[01:31:33.373]      __var nReset = 0x80;
[01:31:33.373]        // -> [nReset <= 0x00000080]
[01:31:33.373]      __var canReadPins = 0;
[01:31:33.373]        // -> [canReadPins <= 0x00000000]
[01:31:33.373]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:31:33.378]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:31:33.378]        // -> [canReadPins <= 0x00000001]
[01:31:33.378]    </block>
[01:31:33.378]    <control if="" while="1" timeout="200" info="">
[01:31:33.378]      // while "1"  (timeout="200")
[01:31:33.378]      // while-condition  =>  TRUE
[01:31:33.378]      // while "1"  (timeout="200")
[01:31:33.378]      // while-condition  =>  TRUE
[01:31:33.378]      // while "1"  (timeout="200")
[01:31:33.378]      // while-condition  =>  TRUE
[01:31:33.378]      // while "1"  (timeout="200")
[01:31:33.378]      // while-condition  =>  TRUE
[01:31:33.378]      // while "1"  (timeout="200")
[01:31:33.378]      // while-condition  =>  TRUE
[01:31:33.378]      // while "1"  (timeout="200")
[01:31:33.378]      // while-condition  =>  TRUE
[01:31:33.378]      // while "1"  (timeout="200")
[01:31:33.378]      // while-condition  =>  TRUE
[01:31:33.378]      // while "1"  (timeout="200")
[01:31:33.378]      // while-condition  =>  TRUE
[01:31:33.378]      // while "1"  (timeout="200")
[01:31:33.378]      // while-condition  =>  TRUE
[01:31:33.378]      // while "1"  (timeout="200")
[01:31:33.378]      // while-condition  =>  TRUE
[01:31:33.378]      // while "1"  (timeout="200")
[01:31:33.378]      // while-condition  =>  TRUE
[01:31:33.381]      // while "1"  (timeout="200")
[01:31:33.381]      // while-condition  =>  TRUE
[01:31:33.381]      // while "1"  (timeout="200")
[01:31:33.381]      // while-condition  =>  TRUE
[01:31:33.381]      // while "1"  (timeout="200")
[01:31:33.381]      // while-condition  =>  TRUE
[01:31:33.381]      // while "1"  (timeout="200")
[01:31:33.381]      // while-condition  =>  TRUE
[01:31:33.381]      // while "1"  (timeout="200")
[01:31:33.381]      // while-condition  =>  TRUE
[01:31:33.381]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.382]      // while "1"  (timeout="200")
[01:31:33.382]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.387]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.387]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.387]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.387]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.387]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.387]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.387]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.387]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.387]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.387]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.387]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.387]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.387]      // while-condition  =>  TRUE
[01:31:33.387]      // while "1"  (timeout="200")
[01:31:33.389]      // while-condition  =>  TRUE
[01:31:33.389]      // while "1"  (timeout="200")
[01:31:33.389]      // while-condition  =>  TRUE
[01:31:33.389]      // while "1"  (timeout="200")
[01:31:33.389]      // while-condition  =>  TRUE
[01:31:33.389]      // while "1"  (timeout="200")
[01:31:33.389]      // while-condition  =>  TRUE
[01:31:33.389]      // while "1"  (timeout="200")
[01:31:33.389]      // while-condition  =>  TRUE
[01:31:33.389]      // while "1"  (timeout="200")
[01:31:33.389]      // while-condition  =>  TRUE
[01:31:33.389]      // while "1"  (timeout="200")
[01:31:33.390]      // while-condition  =>  TRUE
[01:31:33.390]      // while "1"  (timeout="200")
[01:31:33.390]      // while-condition  =>  TRUE
[01:31:33.390]      // while "1"  (timeout="200")
[01:31:33.390]      // while-condition  =>  TRUE
[01:31:33.390]      // while "1"  (timeout="200")
[01:31:33.390]      // while-condition  =>  TRUE
[01:31:33.391]      // while "1"  (timeout="200")
[01:31:33.391]      // while-condition  =>  TRUE
[01:31:33.391]      // while "1"  (timeout="200")
[01:31:33.391]      // while-condition  =>  TRUE
[01:31:33.391]      // while "1"  (timeout="200")
[01:31:33.391]      // while-condition  =>  TRUE
[01:31:33.391]      // while "1"  (timeout="200")
[01:31:33.391]      // while-condition  =>  TRUE
[01:31:33.391]      // while "1"  (timeout="200")
[01:31:33.391]      // while-condition  =>  TRUE
[01:31:33.391]      // while "1"  (timeout="200")
[01:31:33.391]      // while-condition  =>  TRUE
[01:31:33.391]      // while "1"  (timeout="200")
[01:31:33.391]      // while-condition  =>  TRUE
[01:31:33.393]      // while "1"  (timeout="200")
[01:31:33.393]      // while  =>  TIMEOUT
[01:31:33.393]      // end while "1"
[01:31:33.393]    </control>
[01:31:33.393]    <control if="canReadPins" while="" timeout="0" info="">
[01:31:33.393]      // if-block "canReadPins"
[01:31:33.393]        // =>  TRUE
[01:31:33.393]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:31:33.393]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:31:33.394]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:31:33.395]        // while-condition  =>  FALSE
[01:31:33.395]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:31:33.395]      </control>
[01:31:33.395]      // end if-block "canReadPins"
[01:31:33.395]    </control>
[01:31:33.395]    <control if="!canReadPins" while="" timeout="0" info="">
[01:31:33.395]      // if-block "!canReadPins"
[01:31:33.395]        // =>  FALSE
[01:31:33.395]      // skip if-block "!canReadPins"
[01:31:33.397]    </control>
[01:31:33.397]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:31:33.397]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:31:33.397]        // =>  TRUE
[01:31:33.397]      <block atomic="false" info="">
[01:31:33.397]        WriteAP(0x00, 0x190008);
[01:31:33.404]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:31:33.404]        WriteAP(0xF0, 0x01);
[01:31:33.408]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:31:33.408]      </block>
[01:31:33.408]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:31:33.408]    </control>
[01:31:33.408]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:31:33.408]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:31:33.408]        // =>  FALSE
[01:31:33.408]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:31:33.408]    </control>
[01:31:33.408]    <block atomic="false" info="">
[01:31:33.408]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:31:33.412]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:31:33.413]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:31:33.413]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:31:33.414]      __ap = 0; //lets make sure we reset the access point selection
[01:31:33.414]        // -> [__ap <= 0x00000000]
[01:31:33.414]    </block>
[01:31:33.414]  </sequence>
[01:31:33.414]  
[01:31:33.434]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:31:33.434]  
[01:31:33.434]  <debugvars>
[01:31:33.434]    // Pre-defined
[01:31:33.434]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:31:33.434]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:31:33.434]    __dp=0x00000000
[01:31:33.434]    __ap=0x00000000
[01:31:33.434]    __traceout=0x00000000      (Trace Disabled)
[01:31:33.434]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:31:33.437]    __FlashAddr=0x00000000
[01:31:33.437]    __FlashLen=0x00000000
[01:31:33.437]    __FlashArg=0x00000000
[01:31:33.437]    __FlashOp=0x00000000
[01:31:33.437]    __Result=0x00000000
[01:31:33.437]  </debugvars>
[01:31:33.437]  
[01:31:33.437]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:31:33.437]    <block atomic="false" info="">
[01:31:33.438]      __var deviceID = 0;
[01:31:33.438]        // -> [deviceID <= 0x00000000]
[01:31:33.438]      __var version = 0;
[01:31:33.438]        // -> [version <= 0x00000000]
[01:31:33.438]      __var partNum = 0;
[01:31:33.438]        // -> [partNum <= 0x00000000]
[01:31:33.438]      __var manuf = 0;
[01:31:33.438]        // -> [manuf <= 0x00000000]
[01:31:33.438]      __var isMSPM0G1X0X_G3X0X = 0;
[01:31:33.438]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:31:33.438]      __var isProduction = 0;
[01:31:33.438]        // -> [isProduction <= 0x00000000]
[01:31:33.438]      __var continueId = 0;
[01:31:33.438]        // -> [continueId <= 0x00000000]
[01:31:33.438]      deviceID =   Read32(0x41C40004);
[01:31:33.445]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:31:33.445]        // -> [deviceID <= 0x2BB8802F]
[01:31:33.445]      version = deviceID >> 28;
[01:31:33.445]        // -> [version <= 0x00000002]
[01:31:33.445]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:31:33.445]        // -> [partNum <= 0x0000BB88]
[01:31:33.445]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:31:33.445]        // -> [manuf <= 0x00000017]
[01:31:33.445]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:31:33.445]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:31:33.445]      isProduction = (version > 0);
[01:31:33.445]        // -> [isProduction <= 0x00000001]
[01:31:33.445]    </block>
[01:31:33.445]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:31:33.445]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:31:33.445]        // =>  FALSE
[01:31:33.447]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:31:33.447]    </control>
[01:31:33.447]    <control if="continueId == 4" while="" timeout="0" info="">
[01:31:33.447]      // if-block "continueId == 4"
[01:31:33.447]        // =>  FALSE
[01:31:33.447]      // skip if-block "continueId == 4"
[01:31:33.447]    </control>
[01:31:33.447]    <control if="!isProduction" while="" timeout="0" info="">
[01:31:33.447]      // if-block "!isProduction"
[01:31:33.447]        // =>  FALSE
[01:31:33.447]      // skip if-block "!isProduction"
[01:31:33.448]    </control>
[01:31:33.448]  </sequence>
[01:31:33.448]  
[01:32:31.084]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:32:31.085]  
[01:32:31.094]  <debugvars>
[01:32:31.094]    // Pre-defined
[01:32:31.094]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:32:31.094]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:32:31.094]    __dp=0x00000000
[01:32:31.094]    __ap=0x00000000
[01:32:31.095]    __traceout=0x00000000      (Trace Disabled)
[01:32:31.095]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:32:31.095]    __FlashAddr=0x00000000
[01:32:31.095]    __FlashLen=0x00000000
[01:32:31.095]    __FlashArg=0x00000000
[01:32:31.095]    __FlashOp=0x00000000
[01:32:31.095]    __Result=0x00000000
[01:32:31.095]  </debugvars>
[01:32:31.095]  
[01:32:31.095]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:32:31.095]    <block atomic="false" info="">
[01:32:31.095]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:32:31.096]        // -> [isSWJ <= 0x00000001]
[01:32:31.096]      __var hasDormant = __protocol & 0x00020000;
[01:32:31.096]        // -> [hasDormant <= 0x00000000]
[01:32:31.096]      __var protType   = __protocol & 0x0000FFFF;
[01:32:31.096]        // -> [protType <= 0x00000002]
[01:32:31.096]    </block>
[01:32:31.096]    <control if="protType == 1" while="" timeout="0" info="">
[01:32:31.097]      // if-block "protType == 1"
[01:32:31.097]        // =>  FALSE
[01:32:31.097]      // skip if-block "protType == 1"
[01:32:31.097]    </control>
[01:32:31.097]    <control if="protType == 2" while="" timeout="0" info="">
[01:32:31.097]      // if-block "protType == 2"
[01:32:31.097]        // =>  TRUE
[01:32:31.097]      <control if="isSWJ" while="" timeout="0" info="">
[01:32:31.097]        // if-block "isSWJ"
[01:32:31.097]          // =>  TRUE
[01:32:31.097]        <control if="hasDormant" while="" timeout="0" info="">
[01:32:31.098]          // if-block "hasDormant"
[01:32:31.098]            // =>  FALSE
[01:32:31.098]          // skip if-block "hasDormant"
[01:32:31.098]        </control>
[01:32:31.098]        <control if="!hasDormant" while="" timeout="0" info="">
[01:32:31.098]          // if-block "!hasDormant"
[01:32:31.098]            // =>  TRUE
[01:32:31.098]          <block atomic="false" info="">
[01:32:31.098]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:32:31.099]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:32:31.100]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:32:31.102]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:32:31.102]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:32:31.104]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:32:31.104]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:32:31.113]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:32:31.113]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:32:31.116]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:32:31.116]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:32:31.117]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:32:31.117]          </block>
[01:32:31.117]          // end if-block "!hasDormant"
[01:32:31.117]        </control>
[01:32:31.117]        // end if-block "isSWJ"
[01:32:31.117]      </control>
[01:32:31.117]      <control if="!isSWJ" while="" timeout="0" info="">
[01:32:31.117]        // if-block "!isSWJ"
[01:32:31.117]          // =>  FALSE
[01:32:31.117]        // skip if-block "!isSWJ"
[01:32:31.117]      </control>
[01:32:31.117]      <block atomic="false" info="">
[01:32:31.117]        ReadDP(0x0);
[01:32:31.121]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:32:31.121]      </block>
[01:32:31.122]      // end if-block "protType == 2"
[01:32:31.122]    </control>
[01:32:31.122]  </sequence>
[01:32:31.122]  
[01:32:31.125]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:32:31.125]  
[01:32:31.125]  <debugvars>
[01:32:31.125]    // Pre-defined
[01:32:31.125]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:32:31.125]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:32:31.125]    __dp=0x00000000
[01:32:31.125]    __ap=0x00000000
[01:32:31.125]    __traceout=0x00000000      (Trace Disabled)
[01:32:31.125]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:32:31.125]    __FlashAddr=0x00000000
[01:32:31.125]    __FlashLen=0x00000000
[01:32:31.125]    __FlashArg=0x00000000
[01:32:31.126]    __FlashOp=0x00000000
[01:32:31.126]    __Result=0x00000000
[01:32:31.126]  </debugvars>
[01:32:31.126]  
[01:32:31.126]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:32:31.126]    <block atomic="false" info="">
[01:32:31.126]      __var SW_DP_ABORT       = 0x0;
[01:32:31.126]        // -> [SW_DP_ABORT <= 0x00000000]
[01:32:31.126]      __var DP_CTRL_STAT      = 0x4;
[01:32:31.126]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:32:31.126]      __var DP_SELECT         = 0x8;
[01:32:31.127]        // -> [DP_SELECT <= 0x00000008]
[01:32:31.127]      __var powered_down      = 0;
[01:32:31.127]        // -> [powered_down <= 0x00000000]
[01:32:31.127]      WriteDP(DP_SELECT, 0x00000000);
[01:32:31.130]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:32:31.134]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:32:31.134]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:32:31.134]        // -> [powered_down <= 0x00000001]
[01:32:31.134]    </block>
[01:32:31.134]    <control if="powered_down" while="" timeout="0" info="">
[01:32:31.134]      // if-block "powered_down"
[01:32:31.134]        // =>  TRUE
[01:32:31.134]      <block atomic="false" info="">
[01:32:31.134]        Message(0, "Debug/System power-up request sent");
[01:32:31.139]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:32:31.141]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:32:31.141]      </block>
[01:32:31.141]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:32:31.141]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:32:31.142]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:32:31.142]        // while-condition  =>  FALSE
[01:32:31.142]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:32:31.142]      </control>
[01:32:31.142]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:32:31.142]        // if-block "(__protocol & 0xFFFF) == 1"
[01:32:31.142]          // =>  FALSE
[01:32:31.142]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:32:31.142]      </control>
[01:32:31.142]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:32:31.142]        // if-block "(__protocol & 0xFFFF) == 2"
[01:32:31.142]          // =>  TRUE
[01:32:31.142]        <block atomic="false" info="">
[01:32:31.142]          Message(0, "executing SWD power up");
[01:32:31.145]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:32:31.148]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:32:31.148]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:32:31.150]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:32:31.150]        </block>
[01:32:31.150]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:32:31.150]      </control>
[01:32:31.150]      // end if-block "powered_down"
[01:32:31.150]    </control>
[01:32:31.150]    <block atomic="false" info="">
[01:32:31.150]      __var DEBUG_PORT_VAL    = 0;
[01:32:31.150]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:32:31.150]      __var ACCESS_POINT_VAL  = 0;
[01:32:31.150]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:32:31.150]      __ap = 1; 
[01:32:31.150]        // -> [__ap <= 0x00000001]
[01:32:31.150]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:32:31.162]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:32:31.162]      __ap = 4;
[01:32:31.162]        // -> [__ap <= 0x00000004]
[01:32:31.162]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:32:31.166]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:32:31.166]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:32:31.166]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:32:31.166]    </block>
[01:32:31.166]    <block atomic="false" info="">
[01:32:31.166]      __var nReset = 0x80;
[01:32:31.166]        // -> [nReset <= 0x00000080]
[01:32:31.166]      __var canReadPins = 0;
[01:32:31.166]        // -> [canReadPins <= 0x00000000]
[01:32:31.166]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:32:31.172]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:32:31.172]        // -> [canReadPins <= 0x00000001]
[01:32:31.172]    </block>
[01:32:31.172]    <control if="" while="1" timeout="200" info="">
[01:32:31.172]      // while "1"  (timeout="200")
[01:32:31.172]      // while-condition  =>  TRUE
[01:32:31.172]      // while "1"  (timeout="200")
[01:32:31.172]      // while-condition  =>  TRUE
[01:32:31.172]      // while "1"  (timeout="200")
[01:32:31.172]      // while-condition  =>  TRUE
[01:32:31.172]      // while "1"  (timeout="200")
[01:32:31.172]      // while-condition  =>  TRUE
[01:32:31.172]      // while "1"  (timeout="200")
[01:32:31.172]      // while-condition  =>  TRUE
[01:32:31.172]      // while "1"  (timeout="200")
[01:32:31.172]      // while-condition  =>  TRUE
[01:32:31.172]      // while "1"  (timeout="200")
[01:32:31.172]      // while-condition  =>  TRUE
[01:32:31.172]      // while "1"  (timeout="200")
[01:32:31.172]      // while-condition  =>  TRUE
[01:32:31.172]      // while "1"  (timeout="200")
[01:32:31.172]      // while-condition  =>  TRUE
[01:32:31.172]      // while "1"  (timeout="200")
[01:32:31.172]      // while-condition  =>  TRUE
[01:32:31.172]      // while "1"  (timeout="200")
[01:32:31.172]      // while-condition  =>  TRUE
[01:32:31.172]      // while "1"  (timeout="200")
[01:32:31.172]      // while-condition  =>  TRUE
[01:32:31.172]      // while "1"  (timeout="200")
[01:32:31.175]      // while-condition  =>  TRUE
[01:32:31.175]      // while "1"  (timeout="200")
[01:32:31.175]      // while  =>  TIMEOUT
[01:32:31.175]      // end while "1"
[01:32:31.175]    </control>
[01:32:31.175]    <control if="canReadPins" while="" timeout="0" info="">
[01:32:31.175]      // if-block "canReadPins"
[01:32:31.175]        // =>  TRUE
[01:32:31.175]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:32:31.175]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:32:31.179]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:32:31.179]        // while-condition  =>  FALSE
[01:32:31.179]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:32:31.179]      </control>
[01:32:31.179]      // end if-block "canReadPins"
[01:32:31.179]    </control>
[01:32:31.179]    <control if="!canReadPins" while="" timeout="0" info="">
[01:32:31.179]      // if-block "!canReadPins"
[01:32:31.179]        // =>  FALSE
[01:32:31.179]      // skip if-block "!canReadPins"
[01:32:31.179]    </control>
[01:32:31.183]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:32:31.183]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:32:31.183]        // =>  TRUE
[01:32:31.183]      <block atomic="false" info="">
[01:32:31.183]        WriteAP(0x00, 0x190008);
[01:32:31.183]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:32:31.183]        WriteAP(0xF0, 0x01);
[01:32:31.187]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:32:31.187]      </block>
[01:32:31.187]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:32:31.187]    </control>
[01:32:31.187]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:32:31.187]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:32:31.187]        // =>  FALSE
[01:32:31.187]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:32:31.187]    </control>
[01:32:31.191]    <block atomic="false" info="">
[01:32:31.191]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:32:31.195]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:32:31.195]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:32:31.195]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:32:31.199]      __ap = 0; //lets make sure we reset the access point selection
[01:32:31.199]        // -> [__ap <= 0x00000000]
[01:32:31.199]    </block>
[01:32:31.199]  </sequence>
[01:32:31.199]  
[01:32:31.220]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:32:31.220]  
[01:32:31.220]  <debugvars>
[01:32:31.220]    // Pre-defined
[01:32:31.220]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:32:31.224]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:32:31.224]    __dp=0x00000000
[01:32:31.224]    __ap=0x00000000
[01:32:31.224]    __traceout=0x00000000      (Trace Disabled)
[01:32:31.224]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:32:31.224]    __FlashAddr=0x00000000
[01:32:31.224]    __FlashLen=0x00000000
[01:32:31.224]    __FlashArg=0x00000000
[01:32:31.224]    __FlashOp=0x00000000
[01:32:31.224]    __Result=0x00000000
[01:32:31.224]  </debugvars>
[01:32:31.224]  
[01:32:31.224]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:32:31.224]    <block atomic="false" info="">
[01:32:31.224]      __var deviceID = 0;
[01:32:31.224]        // -> [deviceID <= 0x00000000]
[01:32:31.224]      __var version = 0;
[01:32:31.224]        // -> [version <= 0x00000000]
[01:32:31.224]      __var partNum = 0;
[01:32:31.224]        // -> [partNum <= 0x00000000]
[01:32:31.224]      __var manuf = 0;
[01:32:31.224]        // -> [manuf <= 0x00000000]
[01:32:31.224]      __var isMSPM0G1X0X_G3X0X = 0;
[01:32:31.224]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:32:31.224]      __var isProduction = 0;
[01:32:31.224]        // -> [isProduction <= 0x00000000]
[01:32:31.224]      __var continueId = 0;
[01:32:31.226]        // -> [continueId <= 0x00000000]
[01:32:31.226]      deviceID =   Read32(0x41C40004);
[01:32:31.228]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:32:31.228]        // -> [deviceID <= 0x2BB8802F]
[01:32:31.228]      version = deviceID >> 28;
[01:32:31.228]        // -> [version <= 0x00000002]
[01:32:31.228]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:32:31.232]        // -> [partNum <= 0x0000BB88]
[01:32:31.232]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:32:31.232]        // -> [manuf <= 0x00000017]
[01:32:31.232]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:32:31.232]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:32:31.232]      isProduction = (version > 0);
[01:32:31.232]        // -> [isProduction <= 0x00000001]
[01:32:31.232]    </block>
[01:32:31.232]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:32:31.232]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:32:31.232]        // =>  FALSE
[01:32:31.232]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:32:31.232]    </control>
[01:32:31.232]    <control if="continueId == 4" while="" timeout="0" info="">
[01:32:31.232]      // if-block "continueId == 4"
[01:32:31.232]        // =>  FALSE
[01:32:31.232]      // skip if-block "continueId == 4"
[01:32:31.232]    </control>
[01:32:31.232]    <control if="!isProduction" while="" timeout="0" info="">
[01:32:31.232]      // if-block "!isProduction"
[01:32:31.234]        // =>  FALSE
[01:32:31.234]      // skip if-block "!isProduction"
[01:32:31.234]    </control>
[01:32:31.234]  </sequence>
[01:32:31.234]  
[01:32:38.050]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:32:38.050]  
[01:32:38.062]  <debugvars>
[01:32:38.062]    // Pre-defined
[01:32:38.062]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:32:38.062]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:32:38.062]    __dp=0x00000000
[01:32:38.062]    __ap=0x00000000
[01:32:38.062]    __traceout=0x00000000      (Trace Disabled)
[01:32:38.062]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:32:38.062]    __FlashAddr=0x00000000
[01:32:38.062]    __FlashLen=0x00000000
[01:32:38.062]    __FlashArg=0x00000000
[01:32:38.062]    __FlashOp=0x00000000
[01:32:38.062]    __Result=0x00000000
[01:32:38.062]  </debugvars>
[01:32:38.062]  
[01:32:38.064]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:32:38.064]    <block atomic="false" info="">
[01:32:38.064]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:32:38.064]        // -> [isSWJ <= 0x00000001]
[01:32:38.064]      __var hasDormant = __protocol & 0x00020000;
[01:32:38.064]        // -> [hasDormant <= 0x00000000]
[01:32:38.064]      __var protType   = __protocol & 0x0000FFFF;
[01:32:38.064]        // -> [protType <= 0x00000002]
[01:32:38.064]    </block>
[01:32:38.064]    <control if="protType == 1" while="" timeout="0" info="">
[01:32:38.064]      // if-block "protType == 1"
[01:32:38.064]        // =>  FALSE
[01:32:38.064]      // skip if-block "protType == 1"
[01:32:38.064]    </control>
[01:32:38.064]    <control if="protType == 2" while="" timeout="0" info="">
[01:32:38.064]      // if-block "protType == 2"
[01:32:38.064]        // =>  TRUE
[01:32:38.064]      <control if="isSWJ" while="" timeout="0" info="">
[01:32:38.064]        // if-block "isSWJ"
[01:32:38.064]          // =>  TRUE
[01:32:38.066]        <control if="hasDormant" while="" timeout="0" info="">
[01:32:38.066]          // if-block "hasDormant"
[01:32:38.066]            // =>  FALSE
[01:32:38.066]          // skip if-block "hasDormant"
[01:32:38.066]        </control>
[01:32:38.066]        <control if="!hasDormant" while="" timeout="0" info="">
[01:32:38.066]          // if-block "!hasDormant"
[01:32:38.066]            // =>  TRUE
[01:32:38.066]          <block atomic="false" info="">
[01:32:38.066]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:32:38.066]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:32:38.066]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:32:38.066]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:32:38.070]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:32:38.070]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:32:38.070]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:32:38.070]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:32:38.070]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:32:38.074]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:32:38.074]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:32:38.074]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:32:38.074]          </block>
[01:32:38.074]          // end if-block "!hasDormant"
[01:32:38.074]        </control>
[01:32:38.078]        // end if-block "isSWJ"
[01:32:38.078]      </control>
[01:32:38.078]      <control if="!isSWJ" while="" timeout="0" info="">
[01:32:38.078]        // if-block "!isSWJ"
[01:32:38.078]          // =>  FALSE
[01:32:38.078]        // skip if-block "!isSWJ"
[01:32:38.078]      </control>
[01:32:38.078]      <block atomic="false" info="">
[01:32:38.078]        ReadDP(0x0);
[01:32:38.078]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:32:38.078]      </block>
[01:32:38.078]      // end if-block "protType == 2"
[01:32:38.078]    </control>
[01:32:38.078]  </sequence>
[01:32:38.078]  
[01:32:38.091]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:32:38.091]  
[01:32:38.091]  <debugvars>
[01:32:38.091]    // Pre-defined
[01:32:38.091]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:32:38.091]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:32:38.091]    __dp=0x00000000
[01:32:38.091]    __ap=0x00000000
[01:32:38.091]    __traceout=0x00000000      (Trace Disabled)
[01:32:38.091]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:32:38.091]    __FlashAddr=0x00000000
[01:32:38.091]    __FlashLen=0x00000000
[01:32:38.091]    __FlashArg=0x00000000
[01:32:38.091]    __FlashOp=0x00000000
[01:32:38.091]    __Result=0x00000000
[01:32:38.091]  </debugvars>
[01:32:38.091]  
[01:32:38.091]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:32:38.091]    <block atomic="false" info="">
[01:32:38.091]      __var SW_DP_ABORT       = 0x0;
[01:32:38.093]        // -> [SW_DP_ABORT <= 0x00000000]
[01:32:38.093]      __var DP_CTRL_STAT      = 0x4;
[01:32:38.093]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:32:38.093]      __var DP_SELECT         = 0x8;
[01:32:38.093]        // -> [DP_SELECT <= 0x00000008]
[01:32:38.093]      __var powered_down      = 0;
[01:32:38.093]        // -> [powered_down <= 0x00000000]
[01:32:38.093]      WriteDP(DP_SELECT, 0x00000000);
[01:32:38.095]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:32:38.095]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:32:38.103]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:32:38.103]        // -> [powered_down <= 0x00000001]
[01:32:38.103]    </block>
[01:32:38.103]    <control if="powered_down" while="" timeout="0" info="">
[01:32:38.103]      // if-block "powered_down"
[01:32:38.103]        // =>  TRUE
[01:32:38.103]      <block atomic="false" info="">
[01:32:38.103]        Message(0, "Debug/System power-up request sent");
[01:32:38.107]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:32:38.108]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:32:38.108]      </block>
[01:32:38.108]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:32:38.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:32:38.112]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:32:38.112]        // while-condition  =>  FALSE
[01:32:38.112]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:32:38.112]      </control>
[01:32:38.112]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:32:38.112]        // if-block "(__protocol & 0xFFFF) == 1"
[01:32:38.112]          // =>  FALSE
[01:32:38.112]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:32:38.112]      </control>
[01:32:38.112]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:32:38.112]        // if-block "(__protocol & 0xFFFF) == 2"
[01:32:38.112]          // =>  TRUE
[01:32:38.112]        <block atomic="false" info="">
[01:32:38.112]          Message(0, "executing SWD power up");
[01:32:38.115]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:32:38.116]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:32:38.116]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:32:38.116]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:32:38.116]        </block>
[01:32:38.116]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:32:38.116]      </control>
[01:32:38.116]      // end if-block "powered_down"
[01:32:38.116]    </control>
[01:32:38.116]    <block atomic="false" info="">
[01:32:38.116]      __var DEBUG_PORT_VAL    = 0;
[01:32:38.120]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:32:38.120]      __var ACCESS_POINT_VAL  = 0;
[01:32:38.120]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:32:38.121]      __ap = 1; 
[01:32:38.121]        // -> [__ap <= 0x00000001]
[01:32:38.121]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:32:38.128]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:32:38.128]      __ap = 4;
[01:32:38.128]        // -> [__ap <= 0x00000004]
[01:32:38.128]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:32:38.133]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:32:38.133]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:32:38.136]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:32:38.138]    </block>
[01:32:38.138]    <block atomic="false" info="">
[01:32:38.138]      __var nReset = 0x80;
[01:32:38.138]        // -> [nReset <= 0x00000080]
[01:32:38.138]      __var canReadPins = 0;
[01:32:38.138]        // -> [canReadPins <= 0x00000000]
[01:32:38.138]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:32:38.141]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:32:38.141]        // -> [canReadPins <= 0x00000001]
[01:32:38.141]    </block>
[01:32:38.142]    <control if="" while="1" timeout="200" info="">
[01:32:38.142]      // while "1"  (timeout="200")
[01:32:38.142]      // while-condition  =>  TRUE
[01:32:38.142]      // while "1"  (timeout="200")
[01:32:38.142]      // while-condition  =>  TRUE
[01:32:38.142]      // while "1"  (timeout="200")
[01:32:38.142]      // while-condition  =>  TRUE
[01:32:38.142]      // while "1"  (timeout="200")
[01:32:38.142]      // while-condition  =>  TRUE
[01:32:38.142]      // while "1"  (timeout="200")
[01:32:38.142]      // while-condition  =>  TRUE
[01:32:38.142]      // while "1"  (timeout="200")
[01:32:38.142]      // while-condition  =>  TRUE
[01:32:38.142]      // while "1"  (timeout="200")
[01:32:38.142]      // while-condition  =>  TRUE
[01:32:38.144]      // while "1"  (timeout="200")
[01:32:38.144]      // while-condition  =>  TRUE
[01:32:38.144]      // while "1"  (timeout="200")
[01:32:38.145]      // while-condition  =>  TRUE
[01:32:38.145]      // while "1"  (timeout="200")
[01:32:38.145]      // while-condition  =>  TRUE
[01:32:38.145]      // while "1"  (timeout="200")
[01:32:38.145]      // while-condition  =>  TRUE
[01:32:38.145]      // while "1"  (timeout="200")
[01:32:38.145]      // while-condition  =>  TRUE
[01:32:38.145]      // while "1"  (timeout="200")
[01:32:38.145]      // while-condition  =>  TRUE
[01:32:38.145]      // while "1"  (timeout="200")
[01:32:38.145]      // while-condition  =>  TRUE
[01:32:38.145]      // while "1"  (timeout="200")
[01:32:38.145]      // while-condition  =>  TRUE
[01:32:38.145]      // while "1"  (timeout="200")
[01:32:38.145]      // while-condition  =>  TRUE
[01:32:38.145]      // while "1"  (timeout="200")
[01:32:38.145]      // while-condition  =>  TRUE
[01:32:38.145]      // while "1"  (timeout="200")
[01:32:38.149]      // while-condition  =>  TRUE
[01:32:38.149]      // while "1"  (timeout="200")
[01:32:38.149]      // while-condition  =>  TRUE
[01:32:38.149]      // while "1"  (timeout="200")
[01:32:38.149]      // while-condition  =>  TRUE
[01:32:38.149]      // while "1"  (timeout="200")
[01:32:38.149]      // while-condition  =>  TRUE
[01:32:38.149]      // while "1"  (timeout="200")
[01:32:38.149]      // while-condition  =>  TRUE
[01:32:38.149]      // while "1"  (timeout="200")
[01:32:38.149]      // while-condition  =>  TRUE
[01:32:38.149]      // while "1"  (timeout="200")
[01:32:38.149]      // while-condition  =>  TRUE
[01:32:38.149]      // while "1"  (timeout="200")
[01:32:38.151]      // while-condition  =>  TRUE
[01:32:38.151]      // while "1"  (timeout="200")
[01:32:38.151]      // while-condition  =>  TRUE
[01:32:38.151]      // while "1"  (timeout="200")
[01:32:38.151]      // while-condition  =>  TRUE
[01:32:38.151]      // while "1"  (timeout="200")
[01:32:38.151]      // while-condition  =>  TRUE
[01:32:38.151]      // while "1"  (timeout="200")
[01:32:38.152]      // while-condition  =>  TRUE
[01:32:38.152]      // while "1"  (timeout="200")
[01:32:38.152]      // while-condition  =>  TRUE
[01:32:38.152]      // while "1"  (timeout="200")
[01:32:38.152]      // while-condition  =>  TRUE
[01:32:38.152]      // while "1"  (timeout="200")
[01:32:38.152]      // while-condition  =>  TRUE
[01:32:38.152]      // while "1"  (timeout="200")
[01:32:38.152]      // while-condition  =>  TRUE
[01:32:38.152]      // while "1"  (timeout="200")
[01:32:38.152]      // while-condition  =>  TRUE
[01:32:38.152]      // while "1"  (timeout="200")
[01:32:38.153]      // while-condition  =>  TRUE
[01:32:38.153]      // while "1"  (timeout="200")
[01:32:38.153]      // while-condition  =>  TRUE
[01:32:38.153]      // while "1"  (timeout="200")
[01:32:38.153]      // while-condition  =>  TRUE
[01:32:38.153]      // while "1"  (timeout="200")
[01:32:38.153]      // while-condition  =>  TRUE
[01:32:38.153]      // while "1"  (timeout="200")
[01:32:38.153]      // while-condition  =>  TRUE
[01:32:38.154]      // while "1"  (timeout="200")
[01:32:38.154]      // while-condition  =>  TRUE
[01:32:38.154]      // while "1"  (timeout="200")
[01:32:38.154]      // while-condition  =>  TRUE
[01:32:38.154]      // while "1"  (timeout="200")
[01:32:38.154]      // while-condition  =>  TRUE
[01:32:38.154]      // while "1"  (timeout="200")
[01:32:38.154]      // while-condition  =>  TRUE
[01:32:38.154]      // while "1"  (timeout="200")
[01:32:38.154]      // while-condition  =>  TRUE
[01:32:38.154]      // while "1"  (timeout="200")
[01:32:38.154]      // while-condition  =>  TRUE
[01:32:38.156]      // while "1"  (timeout="200")
[01:32:38.156]      // while-condition  =>  TRUE
[01:32:38.156]      // while "1"  (timeout="200")
[01:32:38.156]      // while-condition  =>  TRUE
[01:32:38.156]      // while "1"  (timeout="200")
[01:32:38.156]      // while-condition  =>  TRUE
[01:32:38.156]      // while "1"  (timeout="200")
[01:32:38.156]      // while-condition  =>  TRUE
[01:32:38.156]      // while "1"  (timeout="200")
[01:32:38.156]      // while-condition  =>  TRUE
[01:32:38.156]      // while "1"  (timeout="200")
[01:32:38.156]      // while-condition  =>  TRUE
[01:32:38.156]      // while "1"  (timeout="200")
[01:32:38.156]      // while-condition  =>  TRUE
[01:32:38.156]      // while "1"  (timeout="200")
[01:32:38.158]      // while-condition  =>  TRUE
[01:32:38.158]      // while "1"  (timeout="200")
[01:32:38.158]      // while  =>  TIMEOUT
[01:32:38.158]      // end while "1"
[01:32:38.158]    </control>
[01:32:38.158]    <control if="canReadPins" while="" timeout="0" info="">
[01:32:38.158]      // if-block "canReadPins"
[01:32:38.158]        // =>  TRUE
[01:32:38.158]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:32:38.158]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:32:38.160]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:32:38.160]        // while-condition  =>  FALSE
[01:32:38.160]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:32:38.160]      </control>
[01:32:38.160]      // end if-block "canReadPins"
[01:32:38.160]    </control>
[01:32:38.160]    <control if="!canReadPins" while="" timeout="0" info="">
[01:32:38.160]      // if-block "!canReadPins"
[01:32:38.160]        // =>  FALSE
[01:32:38.160]      // skip if-block "!canReadPins"
[01:32:38.160]    </control>
[01:32:38.160]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:32:38.160]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:32:38.162]        // =>  TRUE
[01:32:38.162]      <block atomic="false" info="">
[01:32:38.162]        WriteAP(0x00, 0x190008);
[01:32:38.164]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:32:38.164]        WriteAP(0xF0, 0x01);
[01:32:38.170]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:32:38.170]      </block>
[01:32:38.170]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:32:38.170]    </control>
[01:32:38.170]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:32:38.170]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:32:38.170]        // =>  FALSE
[01:32:38.170]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:32:38.170]    </control>
[01:32:38.170]    <block atomic="false" info="">
[01:32:38.170]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:32:38.174]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:32:38.174]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:32:38.174]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:32:38.178]      __ap = 0; //lets make sure we reset the access point selection
[01:32:38.178]        // -> [__ap <= 0x00000000]
[01:32:38.178]    </block>
[01:32:38.178]  </sequence>
[01:32:38.178]  
[01:32:38.203]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:32:38.203]  
[01:32:38.203]  <debugvars>
[01:32:38.203]    // Pre-defined
[01:32:38.203]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:32:38.203]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:32:38.203]    __dp=0x00000000
[01:32:38.203]    __ap=0x00000000
[01:32:38.203]    __traceout=0x00000000      (Trace Disabled)
[01:32:38.203]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:32:38.203]    __FlashAddr=0x00000000
[01:32:38.203]    __FlashLen=0x00000000
[01:32:38.203]    __FlashArg=0x00000000
[01:32:38.203]    __FlashOp=0x00000000
[01:32:38.203]    __Result=0x00000000
[01:32:38.203]  </debugvars>
[01:32:38.203]  
[01:32:38.203]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:32:38.203]    <block atomic="false" info="">
[01:32:38.203]      __var deviceID = 0;
[01:32:38.203]        // -> [deviceID <= 0x00000000]
[01:32:38.203]      __var version = 0;
[01:32:38.203]        // -> [version <= 0x00000000]
[01:32:38.203]      __var partNum = 0;
[01:32:38.203]        // -> [partNum <= 0x00000000]
[01:32:38.207]      __var manuf = 0;
[01:32:38.207]        // -> [manuf <= 0x00000000]
[01:32:38.207]      __var isMSPM0G1X0X_G3X0X = 0;
[01:32:38.207]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:32:38.207]      __var isProduction = 0;
[01:32:38.207]        // -> [isProduction <= 0x00000000]
[01:32:38.207]      __var continueId = 0;
[01:32:38.207]        // -> [continueId <= 0x00000000]
[01:32:38.207]      deviceID =   Read32(0x41C40004);
[01:32:38.213]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:32:38.213]        // -> [deviceID <= 0x2BB8802F]
[01:32:38.213]      version = deviceID >> 28;
[01:32:38.213]        // -> [version <= 0x00000002]
[01:32:38.213]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:32:38.213]        // -> [partNum <= 0x0000BB88]
[01:32:38.213]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:32:38.213]        // -> [manuf <= 0x00000017]
[01:32:38.213]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:32:38.213]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:32:38.215]      isProduction = (version > 0);
[01:32:38.215]        // -> [isProduction <= 0x00000001]
[01:32:38.215]    </block>
[01:32:38.215]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:32:38.215]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:32:38.215]        // =>  FALSE
[01:32:38.215]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:32:38.215]    </control>
[01:32:38.215]    <control if="continueId == 4" while="" timeout="0" info="">
[01:32:38.215]      // if-block "continueId == 4"
[01:32:38.215]        // =>  FALSE
[01:32:38.215]      // skip if-block "continueId == 4"
[01:32:38.215]    </control>
[01:32:38.215]    <control if="!isProduction" while="" timeout="0" info="">
[01:32:38.215]      // if-block "!isProduction"
[01:32:38.215]        // =>  FALSE
[01:32:38.215]      // skip if-block "!isProduction"
[01:32:38.215]    </control>
[01:32:38.215]  </sequence>
[01:32:38.215]  
[01:36:41.689]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:36:41.689]  
[01:36:41.689]  <debugvars>
[01:36:41.689]    // Pre-defined
[01:36:41.689]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:41.689]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:36:41.691]    __dp=0x00000000
[01:36:41.691]    __ap=0x00000000
[01:36:41.691]    __traceout=0x00000000      (Trace Disabled)
[01:36:41.691]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:41.691]    __FlashAddr=0x00000000
[01:36:41.691]    __FlashLen=0x00000000
[01:36:41.692]    __FlashArg=0x00000000
[01:36:41.692]    __FlashOp=0x00000000
[01:36:41.692]    __Result=0x00000000
[01:36:41.692]  </debugvars>
[01:36:41.692]  
[01:36:41.692]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:36:41.692]    <block atomic="false" info="">
[01:36:41.692]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:36:41.692]        // -> [isSWJ <= 0x00000001]
[01:36:41.692]      __var hasDormant = __protocol & 0x00020000;
[01:36:41.692]        // -> [hasDormant <= 0x00000000]
[01:36:41.692]      __var protType   = __protocol & 0x0000FFFF;
[01:36:41.692]        // -> [protType <= 0x00000002]
[01:36:41.692]    </block>
[01:36:41.693]    <control if="protType == 1" while="" timeout="0" info="">
[01:36:41.693]      // if-block "protType == 1"
[01:36:41.693]        // =>  FALSE
[01:36:41.693]      // skip if-block "protType == 1"
[01:36:41.693]    </control>
[01:36:41.693]    <control if="protType == 2" while="" timeout="0" info="">
[01:36:41.693]      // if-block "protType == 2"
[01:36:41.693]        // =>  TRUE
[01:36:41.693]      <control if="isSWJ" while="" timeout="0" info="">
[01:36:41.693]        // if-block "isSWJ"
[01:36:41.693]          // =>  TRUE
[01:36:41.695]        <control if="hasDormant" while="" timeout="0" info="">
[01:36:41.695]          // if-block "hasDormant"
[01:36:41.695]            // =>  FALSE
[01:36:41.695]          // skip if-block "hasDormant"
[01:36:41.695]        </control>
[01:36:41.695]        <control if="!hasDormant" while="" timeout="0" info="">
[01:36:41.695]          // if-block "!hasDormant"
[01:36:41.695]            // =>  TRUE
[01:36:41.695]          <block atomic="false" info="">
[01:36:41.696]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:36:41.697]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:41.697]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:36:41.699]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:36:41.699]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:36:41.703]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:41.703]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:36:41.703]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:36:41.703]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:36:41.707]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:41.707]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:36:41.707]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:36:41.707]          </block>
[01:36:41.707]          // end if-block "!hasDormant"
[01:36:41.707]        </control>
[01:36:41.707]        // end if-block "isSWJ"
[01:36:41.707]      </control>
[01:36:41.707]      <control if="!isSWJ" while="" timeout="0" info="">
[01:36:41.707]        // if-block "!isSWJ"
[01:36:41.707]          // =>  FALSE
[01:36:41.707]        // skip if-block "!isSWJ"
[01:36:41.707]      </control>
[01:36:41.707]      <block atomic="false" info="">
[01:36:41.707]        ReadDP(0x0);
[01:36:41.711]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:36:41.711]      </block>
[01:36:41.711]      // end if-block "protType == 2"
[01:36:41.711]    </control>
[01:36:41.711]  </sequence>
[01:36:41.711]  
[01:36:41.715]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:36:41.715]  
[01:36:41.715]  <debugvars>
[01:36:41.715]    // Pre-defined
[01:36:41.719]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:41.719]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:36:41.719]    __dp=0x00000000
[01:36:41.719]    __ap=0x00000000
[01:36:41.719]    __traceout=0x00000000      (Trace Disabled)
[01:36:41.719]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:41.719]    __FlashAddr=0x00000000
[01:36:41.719]    __FlashLen=0x00000000
[01:36:41.719]    __FlashArg=0x00000000
[01:36:41.719]    __FlashOp=0x00000000
[01:36:41.719]    __Result=0x00000000
[01:36:41.719]  </debugvars>
[01:36:41.719]  
[01:36:41.719]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:36:41.719]    <block atomic="false" info="">
[01:36:41.719]      __var SW_DP_ABORT       = 0x0;
[01:36:41.719]        // -> [SW_DP_ABORT <= 0x00000000]
[01:36:41.721]      __var DP_CTRL_STAT      = 0x4;
[01:36:41.721]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:36:41.721]      __var DP_SELECT         = 0x8;
[01:36:41.721]        // -> [DP_SELECT <= 0x00000008]
[01:36:41.721]      __var powered_down      = 0;
[01:36:41.721]        // -> [powered_down <= 0x00000000]
[01:36:41.721]      WriteDP(DP_SELECT, 0x00000000);
[01:36:41.723]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:36:41.723]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:36:41.725]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:36:41.725]        // -> [powered_down <= 0x00000001]
[01:36:41.725]    </block>
[01:36:41.725]    <control if="powered_down" while="" timeout="0" info="">
[01:36:41.725]      // if-block "powered_down"
[01:36:41.725]        // =>  TRUE
[01:36:41.725]      <block atomic="false" info="">
[01:36:41.725]        Message(0, "Debug/System power-up request sent");
[01:36:41.727]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:36:41.731]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:36:41.731]      </block>
[01:36:41.731]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:36:41.731]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:36:41.734]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:36:41.734]        // while-condition  =>  FALSE
[01:36:41.734]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:36:41.736]      </control>
[01:36:41.736]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:36:41.736]        // if-block "(__protocol & 0xFFFF) == 1"
[01:36:41.736]          // =>  FALSE
[01:36:41.736]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:36:41.736]      </control>
[01:36:41.736]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:36:41.736]        // if-block "(__protocol & 0xFFFF) == 2"
[01:36:41.736]          // =>  TRUE
[01:36:41.736]        <block atomic="false" info="">
[01:36:41.738]          Message(0, "executing SWD power up");
[01:36:41.739]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:36:41.741]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:36:41.741]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:36:41.742]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:36:41.744]        </block>
[01:36:41.744]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:36:41.744]      </control>
[01:36:41.744]      // end if-block "powered_down"
[01:36:41.744]    </control>
[01:36:41.744]    <block atomic="false" info="">
[01:36:41.744]      __var DEBUG_PORT_VAL    = 0;
[01:36:41.744]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:36:41.744]      __var ACCESS_POINT_VAL  = 0;
[01:36:41.744]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:36:41.745]      __ap = 1; 
[01:36:41.745]        // -> [__ap <= 0x00000001]
[01:36:41.745]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:36:41.748]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:36:41.748]      __ap = 4;
[01:36:41.748]        // -> [__ap <= 0x00000004]
[01:36:41.748]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:36:41.752]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:36:41.752]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:36:41.752]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:36:41.756]    </block>
[01:36:41.756]    <block atomic="false" info="">
[01:36:41.756]      __var nReset = 0x80;
[01:36:41.756]        // -> [nReset <= 0x00000080]
[01:36:41.756]      __var canReadPins = 0;
[01:36:41.756]        // -> [canReadPins <= 0x00000000]
[01:36:41.756]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:36:41.759]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:36:41.759]        // -> [canReadPins <= 0x00000001]
[01:36:41.759]    </block>
[01:36:41.759]    <control if="" while="1" timeout="200" info="">
[01:36:41.759]      // while "1"  (timeout="200")
[01:36:41.759]      // while-condition  =>  TRUE
[01:36:41.759]      // while "1"  (timeout="200")
[01:36:41.759]      // while-condition  =>  TRUE
[01:36:41.761]      // while "1"  (timeout="200")
[01:36:41.761]      // while-condition  =>  TRUE
[01:36:41.761]      // while "1"  (timeout="200")
[01:36:41.761]      // while-condition  =>  TRUE
[01:36:41.761]      // while "1"  (timeout="200")
[01:36:41.761]      // while-condition  =>  TRUE
[01:36:41.761]      // while "1"  (timeout="200")
[01:36:41.761]      // while-condition  =>  TRUE
[01:36:41.761]      // while "1"  (timeout="200")
[01:36:41.761]      // while-condition  =>  TRUE
[01:36:41.761]      // while "1"  (timeout="200")
[01:36:41.761]      // while-condition  =>  TRUE
[01:36:41.761]      // while "1"  (timeout="200")
[01:36:41.761]      // while-condition  =>  TRUE
[01:36:41.761]      // while "1"  (timeout="200")
[01:36:41.761]      // while-condition  =>  TRUE
[01:36:41.761]      // while "1"  (timeout="200")
[01:36:41.761]      // while-condition  =>  TRUE
[01:36:41.761]      // while "1"  (timeout="200")
[01:36:41.761]      // while-condition  =>  TRUE
[01:36:41.761]      // while "1"  (timeout="200")
[01:36:41.761]      // while-condition  =>  TRUE
[01:36:41.761]      // while "1"  (timeout="200")
[01:36:41.763]      // while-condition  =>  TRUE
[01:36:41.763]      // while "1"  (timeout="200")
[01:36:41.763]      // while-condition  =>  TRUE
[01:36:41.763]      // while "1"  (timeout="200")
[01:36:41.763]      // while-condition  =>  TRUE
[01:36:41.763]      // while "1"  (timeout="200")
[01:36:41.763]      // while-condition  =>  TRUE
[01:36:41.763]      // while "1"  (timeout="200")
[01:36:41.763]      // while-condition  =>  TRUE
[01:36:41.763]      // while "1"  (timeout="200")
[01:36:41.763]      // while-condition  =>  TRUE
[01:36:41.763]      // while "1"  (timeout="200")
[01:36:41.763]      // while-condition  =>  TRUE
[01:36:41.765]      // while "1"  (timeout="200")
[01:36:41.765]      // while-condition  =>  TRUE
[01:36:41.765]      // while "1"  (timeout="200")
[01:36:41.765]      // while-condition  =>  TRUE
[01:36:41.765]      // while "1"  (timeout="200")
[01:36:41.765]      // while-condition  =>  TRUE
[01:36:41.765]      // while "1"  (timeout="200")
[01:36:41.765]      // while-condition  =>  TRUE
[01:36:41.765]      // while "1"  (timeout="200")
[01:36:41.765]      // while-condition  =>  TRUE
[01:36:41.767]      // while "1"  (timeout="200")
[01:36:41.767]      // while  =>  TIMEOUT
[01:36:41.767]      // end while "1"
[01:36:41.767]    </control>
[01:36:41.767]    <control if="canReadPins" while="" timeout="0" info="">
[01:36:41.767]      // if-block "canReadPins"
[01:36:41.767]        // =>  TRUE
[01:36:41.767]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:36:41.767]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:36:41.770]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:36:41.770]        // while-condition  =>  FALSE
[01:36:41.770]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:36:41.770]      </control>
[01:36:41.770]      // end if-block "canReadPins"
[01:36:41.770]    </control>
[01:36:41.770]    <control if="!canReadPins" while="" timeout="0" info="">
[01:36:41.770]      // if-block "!canReadPins"
[01:36:41.770]        // =>  FALSE
[01:36:41.770]      // skip if-block "!canReadPins"
[01:36:41.770]    </control>
[01:36:41.770]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:36:41.770]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:36:41.770]        // =>  TRUE
[01:36:41.772]      <block atomic="false" info="">
[01:36:41.772]        WriteAP(0x00, 0x190008);
[01:36:41.775]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:36:41.775]        WriteAP(0xF0, 0x01);
[01:36:41.778]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:36:41.778]      </block>
[01:36:41.778]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:36:41.778]    </control>
[01:36:41.778]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:36:41.778]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:36:41.778]        // =>  FALSE
[01:36:41.780]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:36:41.780]    </control>
[01:36:41.780]    <block atomic="false" info="">
[01:36:41.780]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:36:41.787]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:36:41.787]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:36:41.787]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:36:41.787]      __ap = 0; //lets make sure we reset the access point selection
[01:36:41.787]        // -> [__ap <= 0x00000000]
[01:36:41.787]    </block>
[01:36:41.787]  </sequence>
[01:36:41.787]  
[01:36:41.819]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:36:41.819]  
[01:36:41.819]  <debugvars>
[01:36:41.819]    // Pre-defined
[01:36:41.819]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:41.819]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:36:41.819]    __dp=0x00000000
[01:36:41.819]    __ap=0x00000000
[01:36:41.819]    __traceout=0x00000000      (Trace Disabled)
[01:36:41.819]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:41.819]    __FlashAddr=0x00000000
[01:36:41.819]    __FlashLen=0x00000000
[01:36:41.819]    __FlashArg=0x00000000
[01:36:41.823]    __FlashOp=0x00000000
[01:36:41.823]    __Result=0x00000000
[01:36:41.823]  </debugvars>
[01:36:41.823]  
[01:36:41.823]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:36:41.823]    <block atomic="false" info="">
[01:36:41.823]      __var deviceID = 0;
[01:36:41.823]        // -> [deviceID <= 0x00000000]
[01:36:41.823]      __var version = 0;
[01:36:41.823]        // -> [version <= 0x00000000]
[01:36:41.823]      __var partNum = 0;
[01:36:41.823]        // -> [partNum <= 0x00000000]
[01:36:41.823]      __var manuf = 0;
[01:36:41.823]        // -> [manuf <= 0x00000000]
[01:36:41.823]      __var isMSPM0G1X0X_G3X0X = 0;
[01:36:41.823]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:36:41.823]      __var isProduction = 0;
[01:36:41.823]        // -> [isProduction <= 0x00000000]
[01:36:41.823]      __var continueId = 0;
[01:36:41.823]        // -> [continueId <= 0x00000000]
[01:36:41.823]      deviceID =   Read32(0x41C40004);
[01:36:41.827]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:36:41.827]        // -> [deviceID <= 0x2BB8802F]
[01:36:41.827]      version = deviceID >> 28;
[01:36:41.831]        // -> [version <= 0x00000002]
[01:36:41.831]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:36:41.831]        // -> [partNum <= 0x0000BB88]
[01:36:41.831]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:36:41.831]        // -> [manuf <= 0x00000017]
[01:36:41.831]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:36:41.831]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:36:41.831]      isProduction = (version > 0);
[01:36:41.831]        // -> [isProduction <= 0x00000001]
[01:36:41.831]    </block>
[01:36:41.831]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:36:41.831]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:36:41.831]        // =>  FALSE
[01:36:41.831]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:36:41.831]    </control>
[01:36:41.831]    <control if="continueId == 4" while="" timeout="0" info="">
[01:36:41.831]      // if-block "continueId == 4"
[01:36:41.831]        // =>  FALSE
[01:36:41.831]      // skip if-block "continueId == 4"
[01:36:41.831]    </control>
[01:36:41.831]    <control if="!isProduction" while="" timeout="0" info="">
[01:36:41.831]      // if-block "!isProduction"
[01:36:41.831]        // =>  FALSE
[01:36:41.831]      // skip if-block "!isProduction"
[01:36:41.831]    </control>
[01:36:41.831]  </sequence>
[01:36:41.831]  
[01:36:48.561]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:36:48.561]  
[01:36:48.572]  <debugvars>
[01:36:48.572]    // Pre-defined
[01:36:48.572]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:48.572]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:36:48.572]    __dp=0x00000000
[01:36:48.572]    __ap=0x00000000
[01:36:48.572]    __traceout=0x00000000      (Trace Disabled)
[01:36:48.572]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:48.572]    __FlashAddr=0x00000000
[01:36:48.573]    __FlashLen=0x00000000
[01:36:48.573]    __FlashArg=0x00000000
[01:36:48.573]    __FlashOp=0x00000000
[01:36:48.573]    __Result=0x00000000
[01:36:48.573]  </debugvars>
[01:36:48.573]  
[01:36:48.573]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:36:48.573]    <block atomic="false" info="">
[01:36:48.573]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:36:48.573]        // -> [isSWJ <= 0x00000001]
[01:36:48.573]      __var hasDormant = __protocol & 0x00020000;
[01:36:48.573]        // -> [hasDormant <= 0x00000000]
[01:36:48.573]      __var protType   = __protocol & 0x0000FFFF;
[01:36:48.573]        // -> [protType <= 0x00000002]
[01:36:48.573]    </block>
[01:36:48.573]    <control if="protType == 1" while="" timeout="0" info="">
[01:36:48.573]      // if-block "protType == 1"
[01:36:48.573]        // =>  FALSE
[01:36:48.573]      // skip if-block "protType == 1"
[01:36:48.573]    </control>
[01:36:48.573]    <control if="protType == 2" while="" timeout="0" info="">
[01:36:48.573]      // if-block "protType == 2"
[01:36:48.573]        // =>  TRUE
[01:36:48.573]      <control if="isSWJ" while="" timeout="0" info="">
[01:36:48.573]        // if-block "isSWJ"
[01:36:48.573]          // =>  TRUE
[01:36:48.573]        <control if="hasDormant" while="" timeout="0" info="">
[01:36:48.573]          // if-block "hasDormant"
[01:36:48.573]            // =>  FALSE
[01:36:48.573]          // skip if-block "hasDormant"
[01:36:48.573]        </control>
[01:36:48.577]        <control if="!hasDormant" while="" timeout="0" info="">
[01:36:48.577]          // if-block "!hasDormant"
[01:36:48.577]            // =>  TRUE
[01:36:48.577]          <block atomic="false" info="">
[01:36:48.577]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:36:48.579]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:48.579]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:36:48.587]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:36:48.587]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:36:48.590]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:48.590]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:36:48.590]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:36:48.590]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:36:48.594]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:36:48.594]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:36:48.594]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:36:48.594]          </block>
[01:36:48.594]          // end if-block "!hasDormant"
[01:36:48.594]        </control>
[01:36:48.594]        // end if-block "isSWJ"
[01:36:48.598]      </control>
[01:36:48.598]      <control if="!isSWJ" while="" timeout="0" info="">
[01:36:48.598]        // if-block "!isSWJ"
[01:36:48.598]          // =>  FALSE
[01:36:48.598]        // skip if-block "!isSWJ"
[01:36:48.598]      </control>
[01:36:48.599]      <block atomic="false" info="">
[01:36:48.599]        ReadDP(0x0);
[01:36:48.599]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:36:48.599]      </block>
[01:36:48.599]      // end if-block "protType == 2"
[01:36:48.599]    </control>
[01:36:48.599]  </sequence>
[01:36:48.599]  
[01:36:48.606]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:36:48.606]  
[01:36:48.606]  <debugvars>
[01:36:48.606]    // Pre-defined
[01:36:48.606]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:48.606]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:36:48.606]    __dp=0x00000000
[01:36:48.606]    __ap=0x00000000
[01:36:48.606]    __traceout=0x00000000      (Trace Disabled)
[01:36:48.606]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:48.606]    __FlashAddr=0x00000000
[01:36:48.606]    __FlashLen=0x00000000
[01:36:48.606]    __FlashArg=0x00000000
[01:36:48.606]    __FlashOp=0x00000000
[01:36:48.606]    __Result=0x00000000
[01:36:48.606]  </debugvars>
[01:36:48.606]  
[01:36:48.606]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:36:48.606]    <block atomic="false" info="">
[01:36:48.606]      __var SW_DP_ABORT       = 0x0;
[01:36:48.606]        // -> [SW_DP_ABORT <= 0x00000000]
[01:36:48.610]      __var DP_CTRL_STAT      = 0x4;
[01:36:48.610]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:36:48.610]      __var DP_SELECT         = 0x8;
[01:36:48.610]        // -> [DP_SELECT <= 0x00000008]
[01:36:48.610]      __var powered_down      = 0;
[01:36:48.610]        // -> [powered_down <= 0x00000000]
[01:36:48.610]      WriteDP(DP_SELECT, 0x00000000);
[01:36:48.612]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:36:48.612]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:36:48.618]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:36:48.618]        // -> [powered_down <= 0x00000001]
[01:36:48.622]    </block>
[01:36:48.622]    <control if="powered_down" while="" timeout="0" info="">
[01:36:48.622]      // if-block "powered_down"
[01:36:48.622]        // =>  TRUE
[01:36:48.622]      <block atomic="false" info="">
[01:36:48.622]        Message(0, "Debug/System power-up request sent");
[01:36:48.624]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:36:48.627]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:36:48.627]      </block>
[01:36:48.627]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:36:48.627]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:36:48.627]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:36:48.627]        // while-condition  =>  FALSE
[01:36:48.627]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:36:48.627]      </control>
[01:36:48.627]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:36:48.627]        // if-block "(__protocol & 0xFFFF) == 1"
[01:36:48.627]          // =>  FALSE
[01:36:48.627]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:36:48.627]      </control>
[01:36:48.627]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:36:48.627]        // if-block "(__protocol & 0xFFFF) == 2"
[01:36:48.627]          // =>  TRUE
[01:36:48.631]        <block atomic="false" info="">
[01:36:48.631]          Message(0, "executing SWD power up");
[01:36:48.631]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:36:48.635]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:36:48.635]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:36:48.637]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:36:48.637]        </block>
[01:36:48.637]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:36:48.637]      </control>
[01:36:48.637]      // end if-block "powered_down"
[01:36:48.637]    </control>
[01:36:48.637]    <block atomic="false" info="">
[01:36:48.637]      __var DEBUG_PORT_VAL    = 0;
[01:36:48.637]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:36:48.637]      __var ACCESS_POINT_VAL  = 0;
[01:36:48.637]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:36:48.637]      __ap = 1; 
[01:36:48.637]        // -> [__ap <= 0x00000001]
[01:36:48.637]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:36:48.639]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:36:48.639]      __ap = 4;
[01:36:48.639]        // -> [__ap <= 0x00000004]
[01:36:48.639]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:36:48.643]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:36:48.643]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:36:48.643]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:36:48.647]    </block>
[01:36:48.647]    <block atomic="false" info="">
[01:36:48.647]      __var nReset = 0x80;
[01:36:48.647]        // -> [nReset <= 0x00000080]
[01:36:48.647]      __var canReadPins = 0;
[01:36:48.647]        // -> [canReadPins <= 0x00000000]
[01:36:48.648]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:36:48.651]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:36:48.651]        // -> [canReadPins <= 0x00000001]
[01:36:48.651]    </block>
[01:36:48.651]    <control if="" while="1" timeout="200" info="">
[01:36:48.651]      // while "1"  (timeout="200")
[01:36:48.651]      // while-condition  =>  TRUE
[01:36:48.651]      // while "1"  (timeout="200")
[01:36:48.651]      // while-condition  =>  TRUE
[01:36:48.651]      // while "1"  (timeout="200")
[01:36:48.651]      // while-condition  =>  TRUE
[01:36:48.651]      // while "1"  (timeout="200")
[01:36:48.651]      // while-condition  =>  TRUE
[01:36:48.651]      // while "1"  (timeout="200")
[01:36:48.651]      // while-condition  =>  TRUE
[01:36:48.651]      // while "1"  (timeout="200")
[01:36:48.651]      // while-condition  =>  TRUE
[01:36:48.651]      // while "1"  (timeout="200")
[01:36:48.653]      // while-condition  =>  TRUE
[01:36:48.653]      // while "1"  (timeout="200")
[01:36:48.653]      // while-condition  =>  TRUE
[01:36:48.653]      // while "1"  (timeout="200")
[01:36:48.653]      // while-condition  =>  TRUE
[01:36:48.653]      // while "1"  (timeout="200")
[01:36:48.653]      // while-condition  =>  TRUE
[01:36:48.653]      // while "1"  (timeout="200")
[01:36:48.653]      // while-condition  =>  TRUE
[01:36:48.653]      // while "1"  (timeout="200")
[01:36:48.654]      // while-condition  =>  TRUE
[01:36:48.654]      // while "1"  (timeout="200")
[01:36:48.654]      // while-condition  =>  TRUE
[01:36:48.654]      // while "1"  (timeout="200")
[01:36:48.654]      // while-condition  =>  TRUE
[01:36:48.654]      // while "1"  (timeout="200")
[01:36:48.654]      // while-condition  =>  TRUE
[01:36:48.654]      // while "1"  (timeout="200")
[01:36:48.654]      // while-condition  =>  TRUE
[01:36:48.654]      // while "1"  (timeout="200")
[01:36:48.654]      // while-condition  =>  TRUE
[01:36:48.654]      // while "1"  (timeout="200")
[01:36:48.654]      // while-condition  =>  TRUE
[01:36:48.654]      // while "1"  (timeout="200")
[01:36:48.656]      // while-condition  =>  TRUE
[01:36:48.656]      // while "1"  (timeout="200")
[01:36:48.656]      // while-condition  =>  TRUE
[01:36:48.656]      // while "1"  (timeout="200")
[01:36:48.656]      // while-condition  =>  TRUE
[01:36:48.656]      // while "1"  (timeout="200")
[01:36:48.656]      // while-condition  =>  TRUE
[01:36:48.656]      // while "1"  (timeout="200")
[01:36:48.657]      // while-condition  =>  TRUE
[01:36:48.657]      // while "1"  (timeout="200")
[01:36:48.657]      // while-condition  =>  TRUE
[01:36:48.657]      // while "1"  (timeout="200")
[01:36:48.657]      // while-condition  =>  TRUE
[01:36:48.657]      // while "1"  (timeout="200")
[01:36:48.657]      // while-condition  =>  TRUE
[01:36:48.657]      // while "1"  (timeout="200")
[01:36:48.657]      // while-condition  =>  TRUE
[01:36:48.657]      // while "1"  (timeout="200")
[01:36:48.657]      // while-condition  =>  TRUE
[01:36:48.658]      // while "1"  (timeout="200")
[01:36:48.658]      // while  =>  TIMEOUT
[01:36:48.658]      // end while "1"
[01:36:48.658]    </control>
[01:36:48.658]    <control if="canReadPins" while="" timeout="0" info="">
[01:36:48.658]      // if-block "canReadPins"
[01:36:48.658]        // =>  TRUE
[01:36:48.658]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:36:48.658]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:36:48.660]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:36:48.660]        // while-condition  =>  FALSE
[01:36:48.660]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:36:48.660]      </control>
[01:36:48.660]      // end if-block "canReadPins"
[01:36:48.660]    </control>
[01:36:48.660]    <control if="!canReadPins" while="" timeout="0" info="">
[01:36:48.660]      // if-block "!canReadPins"
[01:36:48.660]        // =>  FALSE
[01:36:48.662]      // skip if-block "!canReadPins"
[01:36:48.662]    </control>
[01:36:48.662]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:36:48.662]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:36:48.662]        // =>  TRUE
[01:36:48.662]      <block atomic="false" info="">
[01:36:48.662]        WriteAP(0x00, 0x190008);
[01:36:48.668]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:36:48.668]        WriteAP(0xF0, 0x01);
[01:36:48.672]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:36:48.676]      </block>
[01:36:48.676]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:36:48.676]    </control>
[01:36:48.676]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:36:48.676]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:36:48.676]        // =>  FALSE
[01:36:48.676]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:36:48.676]    </control>
[01:36:48.676]    <block atomic="false" info="">
[01:36:48.676]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:36:48.681]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:36:48.681]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:36:48.681]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:36:48.685]      __ap = 0; //lets make sure we reset the access point selection
[01:36:48.685]        // -> [__ap <= 0x00000000]
[01:36:48.685]    </block>
[01:36:48.685]  </sequence>
[01:36:48.686]  
[01:36:48.713]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:36:48.713]  
[01:36:48.713]  <debugvars>
[01:36:48.713]    // Pre-defined
[01:36:48.713]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:36:48.713]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:36:48.713]    __dp=0x00000000
[01:36:48.713]    __ap=0x00000000
[01:36:48.713]    __traceout=0x00000000      (Trace Disabled)
[01:36:48.713]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:36:48.713]    __FlashAddr=0x00000000
[01:36:48.713]    __FlashLen=0x00000000
[01:36:48.713]    __FlashArg=0x00000000
[01:36:48.713]    __FlashOp=0x00000000
[01:36:48.713]    __Result=0x00000000
[01:36:48.713]  </debugvars>
[01:36:48.713]  
[01:36:48.713]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:36:48.717]    <block atomic="false" info="">
[01:36:48.718]      __var deviceID = 0;
[01:36:48.718]        // -> [deviceID <= 0x00000000]
[01:36:48.718]      __var version = 0;
[01:36:48.718]        // -> [version <= 0x00000000]
[01:36:48.718]      __var partNum = 0;
[01:36:48.718]        // -> [partNum <= 0x00000000]
[01:36:48.718]      __var manuf = 0;
[01:36:48.718]        // -> [manuf <= 0x00000000]
[01:36:48.718]      __var isMSPM0G1X0X_G3X0X = 0;
[01:36:48.718]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:36:48.718]      __var isProduction = 0;
[01:36:48.718]        // -> [isProduction <= 0x00000000]
[01:36:48.718]      __var continueId = 0;
[01:36:48.719]        // -> [continueId <= 0x00000000]
[01:36:48.719]      deviceID =   Read32(0x41C40004);
[01:36:48.733]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:36:48.733]        // -> [deviceID <= 0x2BB8802F]
[01:36:48.733]      version = deviceID >> 28;
[01:36:48.733]        // -> [version <= 0x00000002]
[01:36:48.733]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:36:48.733]        // -> [partNum <= 0x0000BB88]
[01:36:48.733]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:36:48.733]        // -> [manuf <= 0x00000017]
[01:36:48.733]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:36:48.733]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:36:48.733]      isProduction = (version > 0);
[01:36:48.736]        // -> [isProduction <= 0x00000001]
[01:36:48.736]    </block>
[01:36:48.736]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:36:48.736]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:36:48.736]        // =>  FALSE
[01:36:48.736]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:36:48.736]    </control>
[01:36:48.736]    <control if="continueId == 4" while="" timeout="0" info="">
[01:36:48.736]      // if-block "continueId == 4"
[01:36:48.736]        // =>  FALSE
[01:36:48.737]      // skip if-block "continueId == 4"
[01:36:48.737]    </control>
[01:36:48.737]    <control if="!isProduction" while="" timeout="0" info="">
[01:36:48.737]      // if-block "!isProduction"
[01:36:48.737]        // =>  FALSE
[01:36:48.737]      // skip if-block "!isProduction"
[01:36:48.737]    </control>
[01:36:48.737]  </sequence>
[01:36:48.739]  
[01:37:51.290]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:37:51.290]  
[01:37:51.290]  <debugvars>
[01:37:51.290]    // Pre-defined
[01:37:51.290]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:37:51.290]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:37:51.290]    __dp=0x00000000
[01:37:51.294]    __ap=0x00000000
[01:37:51.294]    __traceout=0x00000000      (Trace Disabled)
[01:37:51.294]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:37:51.294]    __FlashAddr=0x00000000
[01:37:51.294]    __FlashLen=0x00000000
[01:37:51.294]    __FlashArg=0x00000000
[01:37:51.295]    __FlashOp=0x00000000
[01:37:51.295]    __Result=0x00000000
[01:37:51.295]  </debugvars>
[01:37:51.295]  
[01:37:51.295]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:37:51.295]    <block atomic="false" info="">
[01:37:51.295]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:37:51.295]        // -> [isSWJ <= 0x00000001]
[01:37:51.295]      __var hasDormant = __protocol & 0x00020000;
[01:37:51.295]        // -> [hasDormant <= 0x00000000]
[01:37:51.295]      __var protType   = __protocol & 0x0000FFFF;
[01:37:51.295]        // -> [protType <= 0x00000002]
[01:37:51.295]    </block>
[01:37:51.295]    <control if="protType == 1" while="" timeout="0" info="">
[01:37:51.295]      // if-block "protType == 1"
[01:37:51.295]        // =>  FALSE
[01:37:51.295]      // skip if-block "protType == 1"
[01:37:51.295]    </control>
[01:37:51.295]    <control if="protType == 2" while="" timeout="0" info="">
[01:37:51.295]      // if-block "protType == 2"
[01:37:51.295]        // =>  TRUE
[01:37:51.295]      <control if="isSWJ" while="" timeout="0" info="">
[01:37:51.295]        // if-block "isSWJ"
[01:37:51.295]          // =>  TRUE
[01:37:51.295]        <control if="hasDormant" while="" timeout="0" info="">
[01:37:51.295]          // if-block "hasDormant"
[01:37:51.295]            // =>  FALSE
[01:37:51.295]          // skip if-block "hasDormant"
[01:37:51.295]        </control>
[01:37:51.298]        <control if="!hasDormant" while="" timeout="0" info="">
[01:37:51.298]          // if-block "!hasDormant"
[01:37:51.298]            // =>  TRUE
[01:37:51.298]          <block atomic="false" info="">
[01:37:51.298]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:37:51.302]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:37:51.302]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:37:51.302]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:37:51.302]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:37:51.306]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:37:51.306]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:37:51.306]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:37:51.306]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:37:51.310]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:37:51.310]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:37:51.312]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:37:51.312]          </block>
[01:37:51.312]          // end if-block "!hasDormant"
[01:37:51.312]        </control>
[01:37:51.312]        // end if-block "isSWJ"
[01:37:51.312]      </control>
[01:37:51.312]      <control if="!isSWJ" while="" timeout="0" info="">
[01:37:51.312]        // if-block "!isSWJ"
[01:37:51.312]          // =>  FALSE
[01:37:51.312]        // skip if-block "!isSWJ"
[01:37:51.314]      </control>
[01:37:51.314]      <block atomic="false" info="">
[01:37:51.314]        ReadDP(0x0);
[01:37:51.314]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:37:51.314]      </block>
[01:37:51.314]      // end if-block "protType == 2"
[01:37:51.314]    </control>
[01:37:51.314]  </sequence>
[01:37:51.314]  
[01:37:51.318]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:37:51.318]  
[01:37:51.318]  <debugvars>
[01:37:51.318]    // Pre-defined
[01:37:51.318]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:37:51.318]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:37:51.318]    __dp=0x00000000
[01:37:51.318]    __ap=0x00000000
[01:37:51.318]    __traceout=0x00000000      (Trace Disabled)
[01:37:51.319]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:37:51.319]    __FlashAddr=0x00000000
[01:37:51.319]    __FlashLen=0x00000000
[01:37:51.319]    __FlashArg=0x00000000
[01:37:51.319]    __FlashOp=0x00000000
[01:37:51.319]    __Result=0x00000000
[01:37:51.319]  </debugvars>
[01:37:51.319]  
[01:37:51.319]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:37:51.319]    <block atomic="false" info="">
[01:37:51.319]      __var SW_DP_ABORT       = 0x0;
[01:37:51.319]        // -> [SW_DP_ABORT <= 0x00000000]
[01:37:51.319]      __var DP_CTRL_STAT      = 0x4;
[01:37:51.319]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:37:51.319]      __var DP_SELECT         = 0x8;
[01:37:51.319]        // -> [DP_SELECT <= 0x00000008]
[01:37:51.319]      __var powered_down      = 0;
[01:37:51.319]        // -> [powered_down <= 0x00000000]
[01:37:51.319]      WriteDP(DP_SELECT, 0x00000000);
[01:37:51.325]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:37:51.325]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:37:51.326]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:37:51.326]        // -> [powered_down <= 0x00000001]
[01:37:51.326]    </block>
[01:37:51.326]    <control if="powered_down" while="" timeout="0" info="">
[01:37:51.326]      // if-block "powered_down"
[01:37:51.326]        // =>  TRUE
[01:37:51.326]      <block atomic="false" info="">
[01:37:51.326]        Message(0, "Debug/System power-up request sent");
[01:37:51.330]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:37:51.336]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:37:51.336]      </block>
[01:37:51.336]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:37:51.336]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:37:51.344]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:37:51.344]        // while-condition  =>  FALSE
[01:37:51.344]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:37:51.344]      </control>
[01:37:51.344]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:37:51.344]        // if-block "(__protocol & 0xFFFF) == 1"
[01:37:51.344]          // =>  FALSE
[01:37:51.344]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:37:51.344]      </control>
[01:37:51.344]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:37:51.344]        // if-block "(__protocol & 0xFFFF) == 2"
[01:37:51.346]          // =>  TRUE
[01:37:51.346]        <block atomic="false" info="">
[01:37:51.346]          Message(0, "executing SWD power up");
[01:37:51.346]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:37:51.350]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:37:51.350]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:37:51.350]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:37:51.350]        </block>
[01:37:51.350]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:37:51.350]      </control>
[01:37:51.350]      // end if-block "powered_down"
[01:37:51.350]    </control>
[01:37:51.350]    <block atomic="false" info="">
[01:37:51.350]      __var DEBUG_PORT_VAL    = 0;
[01:37:51.350]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:37:51.350]      __var ACCESS_POINT_VAL  = 0;
[01:37:51.350]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:37:51.352]      __ap = 1; 
[01:37:51.352]        // -> [__ap <= 0x00000001]
[01:37:51.352]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:37:51.354]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:37:51.354]      __ap = 4;
[01:37:51.354]        // -> [__ap <= 0x00000004]
[01:37:51.354]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:37:51.359]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:37:51.359]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:37:51.359]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:37:51.361]    </block>
[01:37:51.361]    <block atomic="false" info="">
[01:37:51.361]      __var nReset = 0x80;
[01:37:51.361]        // -> [nReset <= 0x00000080]
[01:37:51.361]      __var canReadPins = 0;
[01:37:51.361]        // -> [canReadPins <= 0x00000000]
[01:37:51.361]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:37:51.362]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:37:51.362]        // -> [canReadPins <= 0x00000001]
[01:37:51.362]    </block>
[01:37:51.362]    <control if="" while="1" timeout="200" info="">
[01:37:51.365]      // while "1"  (timeout="200")
[01:37:51.365]      // while-condition  =>  TRUE
[01:37:51.365]      // while "1"  (timeout="200")
[01:37:51.365]      // while-condition  =>  TRUE
[01:37:51.365]      // while "1"  (timeout="200")
[01:37:51.365]      // while-condition  =>  TRUE
[01:37:51.365]      // while "1"  (timeout="200")
[01:37:51.365]      // while-condition  =>  TRUE
[01:37:51.365]      // while "1"  (timeout="200")
[01:37:51.365]      // while-condition  =>  TRUE
[01:37:51.365]      // while "1"  (timeout="200")
[01:37:51.365]      // while-condition  =>  TRUE
[01:37:51.366]      // while "1"  (timeout="200")
[01:37:51.366]      // while-condition  =>  TRUE
[01:37:51.366]      // while "1"  (timeout="200")
[01:37:51.366]      // while-condition  =>  TRUE
[01:37:51.366]      // while "1"  (timeout="200")
[01:37:51.366]      // while-condition  =>  TRUE
[01:37:51.366]      // while "1"  (timeout="200")
[01:37:51.366]      // while-condition  =>  TRUE
[01:37:51.366]      // while "1"  (timeout="200")
[01:37:51.366]      // while-condition  =>  TRUE
[01:37:51.366]      // while "1"  (timeout="200")
[01:37:51.366]      // while-condition  =>  TRUE
[01:37:51.366]      // while "1"  (timeout="200")
[01:37:51.366]      // while-condition  =>  TRUE
[01:37:51.366]      // while "1"  (timeout="200")
[01:37:51.366]      // while-condition  =>  TRUE
[01:37:51.366]      // while "1"  (timeout="200")
[01:37:51.368]      // while-condition  =>  TRUE
[01:37:51.368]      // while "1"  (timeout="200")
[01:37:51.368]      // while-condition  =>  TRUE
[01:37:51.368]      // while "1"  (timeout="200")
[01:37:51.368]      // while-condition  =>  TRUE
[01:37:51.368]      // while "1"  (timeout="200")
[01:37:51.368]      // while-condition  =>  TRUE
[01:37:51.368]      // while "1"  (timeout="200")
[01:37:51.368]      // while-condition  =>  TRUE
[01:37:51.368]      // while "1"  (timeout="200")
[01:37:51.368]      // while-condition  =>  TRUE
[01:37:51.368]      // while "1"  (timeout="200")
[01:37:51.370]      // while-condition  =>  TRUE
[01:37:51.370]      // while "1"  (timeout="200")
[01:37:51.370]      // while-condition  =>  TRUE
[01:37:51.370]      // while "1"  (timeout="200")
[01:37:51.370]      // while-condition  =>  TRUE
[01:37:51.370]      // while "1"  (timeout="200")
[01:37:51.370]      // while-condition  =>  TRUE
[01:37:51.370]      // while "1"  (timeout="200")
[01:37:51.370]      // while-condition  =>  TRUE
[01:37:51.370]      // while "1"  (timeout="200")
[01:37:51.370]      // while-condition  =>  TRUE
[01:37:51.370]      // while "1"  (timeout="200")
[01:37:51.370]      // while-condition  =>  TRUE
[01:37:51.370]      // while "1"  (timeout="200")
[01:37:51.370]      // while-condition  =>  TRUE
[01:37:51.370]      // while "1"  (timeout="200")
[01:37:51.371]      // while-condition  =>  TRUE
[01:37:51.371]      // while "1"  (timeout="200")
[01:37:51.371]      // while-condition  =>  TRUE
[01:37:51.371]      // while "1"  (timeout="200")
[01:37:51.371]      // while-condition  =>  TRUE
[01:37:51.371]      // while "1"  (timeout="200")
[01:37:51.371]      // while-condition  =>  TRUE
[01:37:51.371]      // while "1"  (timeout="200")
[01:37:51.371]      // while-condition  =>  TRUE
[01:37:51.371]      // while "1"  (timeout="200")
[01:37:51.371]      // while-condition  =>  TRUE
[01:37:51.371]      // while "1"  (timeout="200")
[01:37:51.372]      // while-condition  =>  TRUE
[01:37:51.372]      // while "1"  (timeout="200")
[01:37:51.372]      // while-condition  =>  TRUE
[01:37:51.372]      // while "1"  (timeout="200")
[01:37:51.372]      // while-condition  =>  TRUE
[01:37:51.372]      // while "1"  (timeout="200")
[01:37:51.372]      // while-condition  =>  TRUE
[01:37:51.372]      // while "1"  (timeout="200")
[01:37:51.372]      // while-condition  =>  TRUE
[01:37:51.372]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.374]      // while "1"  (timeout="200")
[01:37:51.374]      // while-condition  =>  TRUE
[01:37:51.378]      // while "1"  (timeout="200")
[01:37:51.378]      // while  =>  TIMEOUT
[01:37:51.378]      // end while "1"
[01:37:51.378]    </control>
[01:37:51.378]    <control if="canReadPins" while="" timeout="0" info="">
[01:37:51.378]      // if-block "canReadPins"
[01:37:51.378]        // =>  TRUE
[01:37:51.378]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:37:51.378]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:37:51.378]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:37:51.378]        // while-condition  =>  FALSE
[01:37:51.378]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:37:51.378]      </control>
[01:37:51.378]      // end if-block "canReadPins"
[01:37:51.378]    </control>
[01:37:51.378]    <control if="!canReadPins" while="" timeout="0" info="">
[01:37:51.378]      // if-block "!canReadPins"
[01:37:51.378]        // =>  FALSE
[01:37:51.378]      // skip if-block "!canReadPins"
[01:37:51.378]    </control>
[01:37:51.378]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:37:51.378]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:37:51.381]        // =>  TRUE
[01:37:51.381]      <block atomic="false" info="">
[01:37:51.381]        WriteAP(0x00, 0x190008);
[01:37:51.383]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:37:51.383]        WriteAP(0xF0, 0x01);
[01:37:51.398]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:37:51.398]      </block>
[01:37:51.398]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:37:51.398]    </control>
[01:37:51.398]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:37:51.398]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:37:51.398]        // =>  FALSE
[01:37:51.398]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:37:51.398]    </control>
[01:37:51.398]    <block atomic="false" info="">
[01:37:51.398]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:37:51.414]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:37:51.414]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:37:51.414]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:37:51.414]      __ap = 0; //lets make sure we reset the access point selection
[01:37:51.414]        // -> [__ap <= 0x00000000]
[01:37:51.414]    </block>
[01:37:51.414]  </sequence>
[01:37:51.414]  
[01:37:51.459]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:37:51.459]  
[01:37:51.459]  <debugvars>
[01:37:51.463]    // Pre-defined
[01:37:51.463]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:37:51.463]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:37:51.463]    __dp=0x00000000
[01:37:51.463]    __ap=0x00000000
[01:37:51.463]    __traceout=0x00000000      (Trace Disabled)
[01:37:51.463]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:37:51.463]    __FlashAddr=0x00000000
[01:37:51.463]    __FlashLen=0x00000000
[01:37:51.463]    __FlashArg=0x00000000
[01:37:51.463]    __FlashOp=0x00000000
[01:37:51.463]    __Result=0x00000000
[01:37:51.463]  </debugvars>
[01:37:51.463]  
[01:37:51.463]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:37:51.463]    <block atomic="false" info="">
[01:37:51.463]      __var deviceID = 0;
[01:37:51.463]        // -> [deviceID <= 0x00000000]
[01:37:51.463]      __var version = 0;
[01:37:51.463]        // -> [version <= 0x00000000]
[01:37:51.463]      __var partNum = 0;
[01:37:51.463]        // -> [partNum <= 0x00000000]
[01:37:51.463]      __var manuf = 0;
[01:37:51.463]        // -> [manuf <= 0x00000000]
[01:37:51.463]      __var isMSPM0G1X0X_G3X0X = 0;
[01:37:51.463]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:37:51.463]      __var isProduction = 0;
[01:37:51.463]        // -> [isProduction <= 0x00000000]
[01:37:51.463]      __var continueId = 0;
[01:37:51.463]        // -> [continueId <= 0x00000000]
[01:37:51.463]      deviceID =   Read32(0x41C40004);
[01:37:51.467]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:37:51.471]        // -> [deviceID <= 0x2BB8802F]
[01:37:51.471]      version = deviceID >> 28;
[01:37:51.471]        // -> [version <= 0x00000002]
[01:37:51.471]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:37:51.471]        // -> [partNum <= 0x0000BB88]
[01:37:51.471]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:37:51.471]        // -> [manuf <= 0x00000017]
[01:37:51.471]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:37:51.471]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:37:51.471]      isProduction = (version > 0);
[01:37:51.471]        // -> [isProduction <= 0x00000001]
[01:37:51.471]    </block>
[01:37:51.471]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:37:51.471]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:37:51.471]        // =>  FALSE
[01:37:51.471]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:37:51.471]    </control>
[01:37:51.471]    <control if="continueId == 4" while="" timeout="0" info="">
[01:37:51.471]      // if-block "continueId == 4"
[01:37:51.471]        // =>  FALSE
[01:37:51.471]      // skip if-block "continueId == 4"
[01:37:51.471]    </control>
[01:37:51.471]    <control if="!isProduction" while="" timeout="0" info="">
[01:37:51.471]      // if-block "!isProduction"
[01:37:51.471]        // =>  FALSE
[01:37:51.471]      // skip if-block "!isProduction"
[01:37:51.471]    </control>
[01:37:51.471]  </sequence>
[01:37:51.471]  
[01:40:58.655]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:40:58.655]  
[01:40:58.655]  <debugvars>
[01:40:58.655]    // Pre-defined
[01:40:58.657]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:40:58.657]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:40:58.657]    __dp=0x00000000
[01:40:58.657]    __ap=0x00000000
[01:40:58.657]    __traceout=0x00000000      (Trace Disabled)
[01:40:58.657]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:40:58.657]    __FlashAddr=0x00000000
[01:40:58.657]    __FlashLen=0x00000000
[01:40:58.657]    __FlashArg=0x00000000
[01:40:58.657]    __FlashOp=0x00000000
[01:40:58.657]    __Result=0x00000000
[01:40:58.657]  </debugvars>
[01:40:58.657]  
[01:40:58.657]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:40:58.659]    <block atomic="false" info="">
[01:40:58.659]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:40:58.659]        // -> [isSWJ <= 0x00000001]
[01:40:58.659]      __var hasDormant = __protocol & 0x00020000;
[01:40:58.659]        // -> [hasDormant <= 0x00000000]
[01:40:58.659]      __var protType   = __protocol & 0x0000FFFF;
[01:40:58.659]        // -> [protType <= 0x00000002]
[01:40:58.659]    </block>
[01:40:58.659]    <control if="protType == 1" while="" timeout="0" info="">
[01:40:58.659]      // if-block "protType == 1"
[01:40:58.659]        // =>  FALSE
[01:40:58.659]      // skip if-block "protType == 1"
[01:40:58.659]    </control>
[01:40:58.659]    <control if="protType == 2" while="" timeout="0" info="">
[01:40:58.659]      // if-block "protType == 2"
[01:40:58.659]        // =>  TRUE
[01:40:58.659]      <control if="isSWJ" while="" timeout="0" info="">
[01:40:58.659]        // if-block "isSWJ"
[01:40:58.659]          // =>  TRUE
[01:40:58.659]        <control if="hasDormant" while="" timeout="0" info="">
[01:40:58.659]          // if-block "hasDormant"
[01:40:58.659]            // =>  FALSE
[01:40:58.659]          // skip if-block "hasDormant"
[01:40:58.659]        </control>
[01:40:58.659]        <control if="!hasDormant" while="" timeout="0" info="">
[01:40:58.659]          // if-block "!hasDormant"
[01:40:58.659]            // =>  TRUE
[01:40:58.659]          <block atomic="false" info="">
[01:40:58.659]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:40:58.663]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:40:58.663]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:40:58.663]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:40:58.663]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:40:58.663]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:40:58.663]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:40:58.667]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:40:58.667]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:40:58.671]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:40:58.671]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:40:58.671]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:40:58.671]          </block>
[01:40:58.671]          // end if-block "!hasDormant"
[01:40:58.675]        </control>
[01:40:58.675]        // end if-block "isSWJ"
[01:40:58.675]      </control>
[01:40:58.675]      <control if="!isSWJ" while="" timeout="0" info="">
[01:40:58.675]        // if-block "!isSWJ"
[01:40:58.675]          // =>  FALSE
[01:40:58.675]        // skip if-block "!isSWJ"
[01:40:58.675]      </control>
[01:40:58.675]      <block atomic="false" info="">
[01:40:58.675]        ReadDP(0x0);
[01:40:58.679]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:40:58.679]      </block>
[01:40:58.679]      // end if-block "protType == 2"
[01:40:58.679]    </control>
[01:40:58.679]  </sequence>
[01:40:58.679]  
[01:41:01.142]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:41:01.142]  
[01:41:01.152]  <debugvars>
[01:41:01.152]    // Pre-defined
[01:41:01.152]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:41:01.152]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:41:01.152]    __dp=0x00000000
[01:41:01.152]    __ap=0x00000000
[01:41:01.152]    __traceout=0x00000000      (Trace Disabled)
[01:41:01.152]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:41:01.152]    __FlashAddr=0x00000000
[01:41:01.152]    __FlashLen=0x00000000
[01:41:01.152]    __FlashArg=0x00000000
[01:41:01.152]    __FlashOp=0x00000000
[01:41:01.152]    __Result=0x00000000
[01:41:01.152]  </debugvars>
[01:41:01.152]  
[01:41:01.152]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:41:01.152]    <block atomic="false" info="">
[01:41:01.152]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:41:01.152]        // -> [isSWJ <= 0x00000001]
[01:41:01.154]      __var hasDormant = __protocol & 0x00020000;
[01:41:01.154]        // -> [hasDormant <= 0x00000000]
[01:41:01.154]      __var protType   = __protocol & 0x0000FFFF;
[01:41:01.154]        // -> [protType <= 0x00000002]
[01:41:01.154]    </block>
[01:41:01.154]    <control if="protType == 1" while="" timeout="0" info="">
[01:41:01.154]      // if-block "protType == 1"
[01:41:01.154]        // =>  FALSE
[01:41:01.154]      // skip if-block "protType == 1"
[01:41:01.154]    </control>
[01:41:01.154]    <control if="protType == 2" while="" timeout="0" info="">
[01:41:01.154]      // if-block "protType == 2"
[01:41:01.154]        // =>  TRUE
[01:41:01.154]      <control if="isSWJ" while="" timeout="0" info="">
[01:41:01.154]        // if-block "isSWJ"
[01:41:01.154]          // =>  TRUE
[01:41:01.154]        <control if="hasDormant" while="" timeout="0" info="">
[01:41:01.154]          // if-block "hasDormant"
[01:41:01.154]            // =>  FALSE
[01:41:01.154]          // skip if-block "hasDormant"
[01:41:01.154]        </control>
[01:41:01.154]        <control if="!hasDormant" while="" timeout="0" info="">
[01:41:01.154]          // if-block "!hasDormant"
[01:41:01.154]            // =>  TRUE
[01:41:01.154]          <block atomic="false" info="">
[01:41:01.154]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:41:01.158]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:41:01.158]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:41:01.158]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:41:01.158]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:41:01.162]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:41:01.162]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:41:01.162]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:41:01.162]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:41:01.166]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:41:01.166]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:41:01.174]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:41:01.174]          </block>
[01:41:01.174]          // end if-block "!hasDormant"
[01:41:01.174]        </control>
[01:41:01.174]        // end if-block "isSWJ"
[01:41:01.178]      </control>
[01:41:01.178]      <control if="!isSWJ" while="" timeout="0" info="">
[01:41:01.178]        // if-block "!isSWJ"
[01:41:01.178]          // =>  FALSE
[01:41:01.178]        // skip if-block "!isSWJ"
[01:41:01.178]      </control>
[01:41:01.178]      <block atomic="false" info="">
[01:41:01.178]        ReadDP(0x0);
[01:41:01.178]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:41:01.178]      </block>
[01:41:01.178]      // end if-block "protType == 2"
[01:41:01.178]    </control>
[01:41:01.178]  </sequence>
[01:41:01.178]  
[01:41:01.186]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:41:01.186]  
[01:41:01.186]  <debugvars>
[01:41:01.186]    // Pre-defined
[01:41:01.186]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:41:01.186]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:41:01.186]    __dp=0x00000000
[01:41:01.186]    __ap=0x00000000
[01:41:01.186]    __traceout=0x00000000      (Trace Disabled)
[01:41:01.186]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:41:01.186]    __FlashAddr=0x00000000
[01:41:01.186]    __FlashLen=0x00000000
[01:41:01.186]    __FlashArg=0x00000000
[01:41:01.186]    __FlashOp=0x00000000
[01:41:01.186]    __Result=0x00000000
[01:41:01.186]  </debugvars>
[01:41:01.190]  
[01:41:01.190]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:41:01.190]    <block atomic="false" info="">
[01:41:01.191]      __var SW_DP_ABORT       = 0x0;
[01:41:01.191]        // -> [SW_DP_ABORT <= 0x00000000]
[01:41:01.191]      __var DP_CTRL_STAT      = 0x4;
[01:41:01.191]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:41:01.191]      __var DP_SELECT         = 0x8;
[01:41:01.191]        // -> [DP_SELECT <= 0x00000008]
[01:41:01.191]      __var powered_down      = 0;
[01:41:01.191]        // -> [powered_down <= 0x00000000]
[01:41:01.191]      WriteDP(DP_SELECT, 0x00000000);
[01:41:01.195]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:41:01.195]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:41:01.195]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:41:01.195]        // -> [powered_down <= 0x00000001]
[01:41:01.195]    </block>
[01:41:01.195]    <control if="powered_down" while="" timeout="0" info="">
[01:41:01.195]      // if-block "powered_down"
[01:41:01.195]        // =>  TRUE
[01:41:01.195]      <block atomic="false" info="">
[01:41:01.195]        Message(0, "Debug/System power-up request sent");
[01:41:01.199]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:41:01.199]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:41:01.199]      </block>
[01:41:01.199]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:41:01.199]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:41:01.203]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:41:01.203]        // while-condition  =>  FALSE
[01:41:01.203]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:41:01.203]      </control>
[01:41:01.203]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:41:01.203]        // if-block "(__protocol & 0xFFFF) == 1"
[01:41:01.203]          // =>  FALSE
[01:41:01.203]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:41:01.203]      </control>
[01:41:01.203]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:41:01.203]        // if-block "(__protocol & 0xFFFF) == 2"
[01:41:01.203]          // =>  TRUE
[01:41:01.203]        <block atomic="false" info="">
[01:41:01.203]          Message(0, "executing SWD power up");
[01:41:01.203]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:41:01.211]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:41:01.211]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:41:01.215]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:41:01.215]        </block>
[01:41:01.215]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:41:01.215]      </control>
[01:41:01.215]      // end if-block "powered_down"
[01:41:01.215]    </control>
[01:41:01.215]    <block atomic="false" info="">
[01:41:01.215]      __var DEBUG_PORT_VAL    = 0;
[01:41:01.215]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:41:01.215]      __var ACCESS_POINT_VAL  = 0;
[01:41:01.215]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:41:01.215]      __ap = 1; 
[01:41:01.215]        // -> [__ap <= 0x00000001]
[01:41:01.215]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:41:01.219]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:41:01.219]      __ap = 4;
[01:41:01.219]        // -> [__ap <= 0x00000004]
[01:41:01.219]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:41:01.223]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:41:01.223]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:41:01.223]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:41:01.223]    </block>
[01:41:01.223]    <block atomic="false" info="">
[01:41:01.227]      __var nReset = 0x80;
[01:41:01.227]        // -> [nReset <= 0x00000080]
[01:41:01.227]      __var canReadPins = 0;
[01:41:01.227]        // -> [canReadPins <= 0x00000000]
[01:41:01.227]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:41:01.227]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:41:01.227]        // -> [canReadPins <= 0x00000001]
[01:41:01.227]    </block>
[01:41:01.227]    <control if="" while="1" timeout="200" info="">
[01:41:01.227]      // while "1"  (timeout="200")
[01:41:01.227]      // while-condition  =>  TRUE
[01:41:01.227]      // while "1"  (timeout="200")
[01:41:01.227]      // while-condition  =>  TRUE
[01:41:01.227]      // while "1"  (timeout="200")
[01:41:01.227]      // while-condition  =>  TRUE
[01:41:01.227]      // while "1"  (timeout="200")
[01:41:01.227]      // while-condition  =>  TRUE
[01:41:01.227]      // while "1"  (timeout="200")
[01:41:01.227]      // while-condition  =>  TRUE
[01:41:01.227]      // while "1"  (timeout="200")
[01:41:01.227]      // while-condition  =>  TRUE
[01:41:01.227]      // while "1"  (timeout="200")
[01:41:01.227]      // while-condition  =>  TRUE
[01:41:01.227]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.231]      // while "1"  (timeout="200")
[01:41:01.231]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.235]      // while "1"  (timeout="200")
[01:41:01.235]      // while-condition  =>  TRUE
[01:41:01.239]      // while "1"  (timeout="200")
[01:41:01.239]      // while  =>  TIMEOUT
[01:41:01.239]      // end while "1"
[01:41:01.239]    </control>
[01:41:01.239]    <control if="canReadPins" while="" timeout="0" info="">
[01:41:01.239]      // if-block "canReadPins"
[01:41:01.239]        // =>  TRUE
[01:41:01.239]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:41:01.239]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:41:01.239]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:41:01.239]        // while-condition  =>  FALSE
[01:41:01.239]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:41:01.239]      </control>
[01:41:01.239]      // end if-block "canReadPins"
[01:41:01.239]    </control>
[01:41:01.239]    <control if="!canReadPins" while="" timeout="0" info="">
[01:41:01.239]      // if-block "!canReadPins"
[01:41:01.243]        // =>  FALSE
[01:41:01.243]      // skip if-block "!canReadPins"
[01:41:01.243]    </control>
[01:41:01.243]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:41:01.243]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:41:01.243]        // =>  TRUE
[01:41:01.243]      <block atomic="false" info="">
[01:41:01.243]        WriteAP(0x00, 0x190008);
[01:41:01.243]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:41:01.243]        WriteAP(0xF0, 0x01);
[01:41:01.247]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:41:01.247]      </block>
[01:41:01.247]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:41:01.247]    </control>
[01:41:01.247]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:41:01.247]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:41:01.247]        // =>  FALSE
[01:41:01.247]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:41:01.247]    </control>
[01:41:01.247]    <block atomic="false" info="">
[01:41:01.247]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:41:01.251]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:41:01.251]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:41:01.251]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:41:01.255]      __ap = 0; //lets make sure we reset the access point selection
[01:41:01.255]        // -> [__ap <= 0x00000000]
[01:41:01.255]    </block>
[01:41:01.255]  </sequence>
[01:41:01.255]  
[01:41:01.295]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:41:01.295]  
[01:41:01.295]  <debugvars>
[01:41:01.295]    // Pre-defined
[01:41:01.295]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:41:01.295]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:41:01.295]    __dp=0x00000000
[01:41:01.295]    __ap=0x00000000
[01:41:01.295]    __traceout=0x00000000      (Trace Disabled)
[01:41:01.295]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:41:01.295]    __FlashAddr=0x00000000
[01:41:01.295]    __FlashLen=0x00000000
[01:41:01.295]    __FlashArg=0x00000000
[01:41:01.295]    __FlashOp=0x00000000
[01:41:01.295]    __Result=0x00000000
[01:41:01.295]  </debugvars>
[01:41:01.295]  
[01:41:01.295]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:41:01.295]    <block atomic="false" info="">
[01:41:01.295]      __var deviceID = 0;
[01:41:01.295]        // -> [deviceID <= 0x00000000]
[01:41:01.295]      __var version = 0;
[01:41:01.295]        // -> [version <= 0x00000000]
[01:41:01.295]      __var partNum = 0;
[01:41:01.295]        // -> [partNum <= 0x00000000]
[01:41:01.295]      __var manuf = 0;
[01:41:01.295]        // -> [manuf <= 0x00000000]
[01:41:01.295]      __var isMSPM0G1X0X_G3X0X = 0;
[01:41:01.295]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:41:01.295]      __var isProduction = 0;
[01:41:01.295]        // -> [isProduction <= 0x00000000]
[01:41:01.295]      __var continueId = 0;
[01:41:01.299]        // -> [continueId <= 0x00000000]
[01:41:01.299]      deviceID =   Read32(0x41C40004);
[01:41:01.303]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:41:01.303]        // -> [deviceID <= 0x2BB8802F]
[01:41:01.303]      version = deviceID >> 28;
[01:41:01.303]        // -> [version <= 0x00000002]
[01:41:01.303]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:41:01.303]        // -> [partNum <= 0x0000BB88]
[01:41:01.303]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:41:01.303]        // -> [manuf <= 0x00000017]
[01:41:01.303]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:41:01.303]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:41:01.303]      isProduction = (version > 0);
[01:41:01.303]        // -> [isProduction <= 0x00000001]
[01:41:01.303]    </block>
[01:41:01.303]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:41:01.303]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:41:01.303]        // =>  FALSE
[01:41:01.303]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:41:01.303]    </control>
[01:41:01.303]    <control if="continueId == 4" while="" timeout="0" info="">
[01:41:01.303]      // if-block "continueId == 4"
[01:41:01.303]        // =>  FALSE
[01:41:01.303]      // skip if-block "continueId == 4"
[01:41:01.303]    </control>
[01:41:01.303]    <control if="!isProduction" while="" timeout="0" info="">
[01:41:01.303]      // if-block "!isProduction"
[01:41:01.303]        // =>  FALSE
[01:41:01.303]      // skip if-block "!isProduction"
[01:41:01.303]    </control>
[01:41:01.303]  </sequence>
[01:41:01.307]  
[01:41:45.609]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:41:45.609]  
[01:41:45.619]  <debugvars>
[01:41:45.619]    // Pre-defined
[01:41:45.619]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:41:45.619]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:41:45.619]    __dp=0x00000000
[01:41:45.619]    __ap=0x00000000
[01:41:45.620]    __traceout=0x00000000      (Trace Disabled)
[01:41:45.620]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:41:45.620]    __FlashAddr=0x00000000
[01:41:45.620]    __FlashLen=0x00000000
[01:41:45.620]    __FlashArg=0x00000000
[01:41:45.620]    __FlashOp=0x00000000
[01:41:45.620]    __Result=0x00000000
[01:41:45.620]  </debugvars>
[01:41:45.620]  
[01:41:45.620]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:41:45.620]    <block atomic="false" info="">
[01:41:45.620]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:41:45.620]        // -> [isSWJ <= 0x00000001]
[01:41:45.622]      __var hasDormant = __protocol & 0x00020000;
[01:41:45.622]        // -> [hasDormant <= 0x00000000]
[01:41:45.622]      __var protType   = __protocol & 0x0000FFFF;
[01:41:45.622]        // -> [protType <= 0x00000002]
[01:41:45.622]    </block>
[01:41:45.622]    <control if="protType == 1" while="" timeout="0" info="">
[01:41:45.622]      // if-block "protType == 1"
[01:41:45.622]        // =>  FALSE
[01:41:45.622]      // skip if-block "protType == 1"
[01:41:45.622]    </control>
[01:41:45.622]    <control if="protType == 2" while="" timeout="0" info="">
[01:41:45.622]      // if-block "protType == 2"
[01:41:45.622]        // =>  TRUE
[01:41:45.622]      <control if="isSWJ" while="" timeout="0" info="">
[01:41:45.622]        // if-block "isSWJ"
[01:41:45.622]          // =>  TRUE
[01:41:45.622]        <control if="hasDormant" while="" timeout="0" info="">
[01:41:45.622]          // if-block "hasDormant"
[01:41:45.622]            // =>  FALSE
[01:41:45.622]          // skip if-block "hasDormant"
[01:41:45.622]        </control>
[01:41:45.622]        <control if="!hasDormant" while="" timeout="0" info="">
[01:41:45.622]          // if-block "!hasDormant"
[01:41:45.622]            // =>  TRUE
[01:41:45.622]          <block atomic="false" info="">
[01:41:45.622]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:41:45.626]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:41:45.626]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:41:45.642]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:41:45.642]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:41:45.643]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:41:45.643]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:41:45.655]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:41:45.655]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:41:45.663]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:41:45.663]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:41:45.667]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:41:45.667]          </block>
[01:41:45.667]          // end if-block "!hasDormant"
[01:41:45.667]        </control>
[01:41:45.667]        // end if-block "isSWJ"
[01:41:45.667]      </control>
[01:41:45.667]      <control if="!isSWJ" while="" timeout="0" info="">
[01:41:45.667]        // if-block "!isSWJ"
[01:41:45.667]          // =>  FALSE
[01:41:45.667]        // skip if-block "!isSWJ"
[01:41:45.667]      </control>
[01:41:45.667]      <block atomic="false" info="">
[01:41:45.667]        ReadDP(0x0);
[01:41:45.684]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:41:45.684]      </block>
[01:41:45.684]      // end if-block "protType == 2"
[01:41:45.686]    </control>
[01:41:45.686]  </sequence>
[01:41:45.686]  
[01:41:45.690]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:41:45.690]  
[01:41:45.690]  <debugvars>
[01:41:45.690]    // Pre-defined
[01:41:45.690]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:41:45.690]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:41:45.690]    __dp=0x00000000
[01:41:45.692]    __ap=0x00000000
[01:41:45.692]    __traceout=0x00000000      (Trace Disabled)
[01:41:45.692]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:41:45.692]    __FlashAddr=0x00000000
[01:41:45.692]    __FlashLen=0x00000000
[01:41:45.692]    __FlashArg=0x00000000
[01:41:45.692]    __FlashOp=0x00000000
[01:41:45.692]    __Result=0x00000000
[01:41:45.692]  </debugvars>
[01:41:45.692]  
[01:41:45.692]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:41:45.692]    <block atomic="false" info="">
[01:41:45.692]      __var SW_DP_ABORT       = 0x0;
[01:41:45.692]        // -> [SW_DP_ABORT <= 0x00000000]
[01:41:45.692]      __var DP_CTRL_STAT      = 0x4;
[01:41:45.692]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:41:45.692]      __var DP_SELECT         = 0x8;
[01:41:45.692]        // -> [DP_SELECT <= 0x00000008]
[01:41:45.692]      __var powered_down      = 0;
[01:41:45.692]        // -> [powered_down <= 0x00000000]
[01:41:45.694]      WriteDP(DP_SELECT, 0x00000000);
[01:41:45.694]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:41:45.694]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:41:45.700]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:41:45.700]        // -> [powered_down <= 0x00000001]
[01:41:45.700]    </block>
[01:41:45.700]    <control if="powered_down" while="" timeout="0" info="">
[01:41:45.700]      // if-block "powered_down"
[01:41:45.700]        // =>  TRUE
[01:41:45.700]      <block atomic="false" info="">
[01:41:45.700]        Message(0, "Debug/System power-up request sent");
[01:41:45.703]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:41:45.712]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:41:45.715]      </block>
[01:41:45.715]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:41:45.715]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:41:45.715]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:41:45.715]        // while-condition  =>  FALSE
[01:41:45.715]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:41:45.715]      </control>
[01:41:45.715]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:41:45.715]        // if-block "(__protocol & 0xFFFF) == 1"
[01:41:45.715]          // =>  FALSE
[01:41:45.715]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:41:45.719]      </control>
[01:41:45.719]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:41:45.719]        // if-block "(__protocol & 0xFFFF) == 2"
[01:41:45.719]          // =>  TRUE
[01:41:45.719]        <block atomic="false" info="">
[01:41:45.719]          Message(0, "executing SWD power up");
[01:41:45.719]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:41:45.725]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:41:45.725]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:41:45.727]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:41:45.727]        </block>
[01:41:45.727]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:41:45.727]      </control>
[01:41:45.727]      // end if-block "powered_down"
[01:41:45.727]    </control>
[01:41:45.727]    <block atomic="false" info="">
[01:41:45.727]      __var DEBUG_PORT_VAL    = 0;
[01:41:45.727]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:41:45.727]      __var ACCESS_POINT_VAL  = 0;
[01:41:45.727]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:41:45.727]      __ap = 1; 
[01:41:45.727]        // -> [__ap <= 0x00000001]
[01:41:45.727]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:41:45.734]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:41:45.734]      __ap = 4;
[01:41:45.734]        // -> [__ap <= 0x00000004]
[01:41:45.734]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:41:45.752]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:41:45.752]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:41:45.752]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:41:45.756]    </block>
[01:41:45.757]    <block atomic="false" info="">
[01:41:45.757]      __var nReset = 0x80;
[01:41:45.757]        // -> [nReset <= 0x00000080]
[01:41:45.757]      __var canReadPins = 0;
[01:41:45.758]        // -> [canReadPins <= 0x00000000]
[01:41:45.758]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:41:45.768]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:41:45.769]        // -> [canReadPins <= 0x00000001]
[01:41:45.769]    </block>
[01:41:45.769]    <control if="" while="1" timeout="200" info="">
[01:41:45.769]      // while "1"  (timeout="200")
[01:41:45.769]      // while-condition  =>  TRUE
[01:41:45.769]      // while "1"  (timeout="200")
[01:41:45.769]      // while-condition  =>  TRUE
[01:41:45.769]      // while "1"  (timeout="200")
[01:41:45.769]      // while-condition  =>  TRUE
[01:41:45.769]      // while "1"  (timeout="200")
[01:41:45.769]      // while-condition  =>  TRUE
[01:41:45.769]      // while "1"  (timeout="200")
[01:41:45.769]      // while-condition  =>  TRUE
[01:41:45.769]      // while "1"  (timeout="200")
[01:41:45.769]      // while-condition  =>  TRUE
[01:41:45.769]      // while "1"  (timeout="200")
[01:41:45.769]      // while-condition  =>  TRUE
[01:41:45.769]      // while "1"  (timeout="200")
[01:41:45.769]      // while-condition  =>  TRUE
[01:41:45.769]      // while "1"  (timeout="200")
[01:41:45.771]      // while-condition  =>  TRUE
[01:41:45.771]      // while "1"  (timeout="200")
[01:41:45.771]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.772]      // while-condition  =>  TRUE
[01:41:45.772]      // while "1"  (timeout="200")
[01:41:45.776]      // while-condition  =>  TRUE
[01:41:45.776]      // while "1"  (timeout="200")
[01:41:45.776]      // while-condition  =>  TRUE
[01:41:45.776]      // while "1"  (timeout="200")
[01:41:45.776]      // while-condition  =>  TRUE
[01:41:45.776]      // while "1"  (timeout="200")
[01:41:45.776]      // while-condition  =>  TRUE
[01:41:45.776]      // while "1"  (timeout="200")
[01:41:45.776]      // while-condition  =>  TRUE
[01:41:45.776]      // while "1"  (timeout="200")
[01:41:45.776]      // while-condition  =>  TRUE
[01:41:45.776]      // while "1"  (timeout="200")
[01:41:45.776]      // while-condition  =>  TRUE
[01:41:45.776]      // while "1"  (timeout="200")
[01:41:45.776]      // while-condition  =>  TRUE
[01:41:45.776]      // while "1"  (timeout="200")
[01:41:45.776]      // while-condition  =>  TRUE
[01:41:45.776]      // while "1"  (timeout="200")
[01:41:45.776]      // while-condition  =>  TRUE
[01:41:45.778]      // while "1"  (timeout="200")
[01:41:45.778]      // while-condition  =>  TRUE
[01:41:45.778]      // while "1"  (timeout="200")
[01:41:45.778]      // while-condition  =>  TRUE
[01:41:45.778]      // while "1"  (timeout="200")
[01:41:45.778]      // while-condition  =>  TRUE
[01:41:45.778]      // while "1"  (timeout="200")
[01:41:45.778]      // while-condition  =>  TRUE
[01:41:45.778]      // while "1"  (timeout="200")
[01:41:45.778]      // while-condition  =>  TRUE
[01:41:45.778]      // while "1"  (timeout="200")
[01:41:45.780]      // while-condition  =>  TRUE
[01:41:45.780]      // while "1"  (timeout="200")
[01:41:45.780]      // while-condition  =>  TRUE
[01:41:45.780]      // while "1"  (timeout="200")
[01:41:45.780]      // while-condition  =>  TRUE
[01:41:45.780]      // while "1"  (timeout="200")
[01:41:45.780]      // while-condition  =>  TRUE
[01:41:45.780]      // while "1"  (timeout="200")
[01:41:45.780]      // while-condition  =>  TRUE
[01:41:45.780]      // while "1"  (timeout="200")
[01:41:45.781]      // while-condition  =>  TRUE
[01:41:45.781]      // while "1"  (timeout="200")
[01:41:45.781]      // while-condition  =>  TRUE
[01:41:45.781]      // while "1"  (timeout="200")
[01:41:45.781]      // while-condition  =>  TRUE
[01:41:45.781]      // while "1"  (timeout="200")
[01:41:45.781]      // while-condition  =>  TRUE
[01:41:45.781]      // while "1"  (timeout="200")
[01:41:45.781]      // while-condition  =>  TRUE
[01:41:45.781]      // while "1"  (timeout="200")
[01:41:45.781]      // while-condition  =>  TRUE
[01:41:45.781]      // while "1"  (timeout="200")
[01:41:45.782]      // while-condition  =>  TRUE
[01:41:45.782]      // while "1"  (timeout="200")
[01:41:45.782]      // while-condition  =>  TRUE
[01:41:45.782]      // while "1"  (timeout="200")
[01:41:45.782]      // while-condition  =>  TRUE
[01:41:45.782]      // while "1"  (timeout="200")
[01:41:45.782]      // while-condition  =>  TRUE
[01:41:45.782]      // while "1"  (timeout="200")
[01:41:45.782]      // while-condition  =>  TRUE
[01:41:45.782]      // while "1"  (timeout="200")
[01:41:45.783]      // while-condition  =>  TRUE
[01:41:45.783]      // while "1"  (timeout="200")
[01:41:45.783]      // while  =>  TIMEOUT
[01:41:45.783]      // end while "1"
[01:41:45.783]    </control>
[01:41:45.783]    <control if="canReadPins" while="" timeout="0" info="">
[01:41:45.783]      // if-block "canReadPins"
[01:41:45.783]        // =>  TRUE
[01:41:45.783]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:41:45.783]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:41:45.792]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:41:45.792]        // while-condition  =>  FALSE
[01:41:45.792]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:41:45.792]      </control>
[01:41:45.792]      // end if-block "canReadPins"
[01:41:45.792]    </control>
[01:41:45.792]    <control if="!canReadPins" while="" timeout="0" info="">
[01:41:45.792]      // if-block "!canReadPins"
[01:41:45.792]        // =>  FALSE
[01:41:45.792]      // skip if-block "!canReadPins"
[01:41:45.792]    </control>
[01:41:45.792]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:41:45.792]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:41:45.792]        // =>  TRUE
[01:41:45.792]      <block atomic="false" info="">
[01:41:45.792]        WriteAP(0x00, 0x190008);
[01:41:45.797]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:41:45.800]        WriteAP(0xF0, 0x01);
[01:41:45.808]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:41:45.808]      </block>
[01:41:45.808]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:41:45.808]    </control>
[01:41:45.808]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:41:45.808]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:41:45.808]        // =>  FALSE
[01:41:45.808]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:41:45.808]    </control>
[01:41:45.808]    <block atomic="false" info="">
[01:41:45.810]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:41:45.820]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:41:45.820]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:41:45.822]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:41:45.822]      __ap = 0; //lets make sure we reset the access point selection
[01:41:45.822]        // -> [__ap <= 0x00000000]
[01:41:45.822]    </block>
[01:41:45.822]  </sequence>
[01:41:45.822]  
[01:41:45.862]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:41:45.862]  
[01:41:45.862]  <debugvars>
[01:41:45.862]    // Pre-defined
[01:41:45.862]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:41:45.862]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:41:45.863]    __dp=0x00000000
[01:41:45.863]    __ap=0x00000000
[01:41:45.863]    __traceout=0x00000000      (Trace Disabled)
[01:41:45.863]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:41:45.863]    __FlashAddr=0x00000000
[01:41:45.863]    __FlashLen=0x00000000
[01:41:45.863]    __FlashArg=0x00000000
[01:41:45.863]    __FlashOp=0x00000000
[01:41:45.863]    __Result=0x00000000
[01:41:45.863]  </debugvars>
[01:41:45.863]  
[01:41:45.863]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:41:45.863]    <block atomic="false" info="">
[01:41:45.863]      __var deviceID = 0;
[01:41:45.863]        // -> [deviceID <= 0x00000000]
[01:41:45.863]      __var version = 0;
[01:41:45.865]        // -> [version <= 0x00000000]
[01:41:45.865]      __var partNum = 0;
[01:41:45.865]        // -> [partNum <= 0x00000000]
[01:41:45.865]      __var manuf = 0;
[01:41:45.865]        // -> [manuf <= 0x00000000]
[01:41:45.865]      __var isMSPM0G1X0X_G3X0X = 0;
[01:41:45.865]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:41:45.865]      __var isProduction = 0;
[01:41:45.865]        // -> [isProduction <= 0x00000000]
[01:41:45.865]      __var continueId = 0;
[01:41:45.865]        // -> [continueId <= 0x00000000]
[01:41:45.865]      deviceID =   Read32(0x41C40004);
[01:41:45.877]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:41:45.877]        // -> [deviceID <= 0x2BB8802F]
[01:41:45.877]      version = deviceID >> 28;
[01:41:45.877]        // -> [version <= 0x00000002]
[01:41:45.877]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:41:45.877]        // -> [partNum <= 0x0000BB88]
[01:41:45.877]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:41:45.877]        // -> [manuf <= 0x00000017]
[01:41:45.877]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:41:45.877]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:41:45.878]      isProduction = (version > 0);
[01:41:45.878]        // -> [isProduction <= 0x00000001]
[01:41:45.878]    </block>
[01:41:45.878]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:41:45.878]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:41:45.878]        // =>  FALSE
[01:41:45.878]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:41:45.878]    </control>
[01:41:45.878]    <control if="continueId == 4" while="" timeout="0" info="">
[01:41:45.878]      // if-block "continueId == 4"
[01:41:45.878]        // =>  FALSE
[01:41:45.879]      // skip if-block "continueId == 4"
[01:41:45.879]    </control>
[01:41:45.879]    <control if="!isProduction" while="" timeout="0" info="">
[01:41:45.879]      // if-block "!isProduction"
[01:41:45.879]        // =>  FALSE
[01:41:45.879]      // skip if-block "!isProduction"
[01:41:45.879]    </control>
[01:41:45.879]  </sequence>
[01:41:45.879]  
[01:54:24.238]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:54:24.238]  
[01:54:24.238]  <debugvars>
[01:54:24.239]    // Pre-defined
[01:54:24.239]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:24.239]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:54:24.239]    __dp=0x00000000
[01:54:24.239]    __ap=0x00000000
[01:54:24.239]    __traceout=0x00000000      (Trace Disabled)
[01:54:24.239]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:24.239]    __FlashAddr=0x00000000
[01:54:24.239]    __FlashLen=0x00000000
[01:54:24.239]    __FlashArg=0x00000000
[01:54:24.239]    __FlashOp=0x00000000
[01:54:24.239]    __Result=0x00000000
[01:54:24.239]  </debugvars>
[01:54:24.239]  
[01:54:24.239]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:54:24.239]    <block atomic="false" info="">
[01:54:24.239]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:54:24.239]        // -> [isSWJ <= 0x00000001]
[01:54:24.239]      __var hasDormant = __protocol & 0x00020000;
[01:54:24.239]        // -> [hasDormant <= 0x00000000]
[01:54:24.239]      __var protType   = __protocol & 0x0000FFFF;
[01:54:24.239]        // -> [protType <= 0x00000002]
[01:54:24.239]    </block>
[01:54:24.239]    <control if="protType == 1" while="" timeout="0" info="">
[01:54:24.239]      // if-block "protType == 1"
[01:54:24.242]        // =>  FALSE
[01:54:24.242]      // skip if-block "protType == 1"
[01:54:24.242]    </control>
[01:54:24.242]    <control if="protType == 2" while="" timeout="0" info="">
[01:54:24.242]      // if-block "protType == 2"
[01:54:24.242]        // =>  TRUE
[01:54:24.242]      <control if="isSWJ" while="" timeout="0" info="">
[01:54:24.242]        // if-block "isSWJ"
[01:54:24.242]          // =>  TRUE
[01:54:24.242]        <control if="hasDormant" while="" timeout="0" info="">
[01:54:24.242]          // if-block "hasDormant"
[01:54:24.242]            // =>  FALSE
[01:54:24.242]          // skip if-block "hasDormant"
[01:54:24.242]        </control>
[01:54:24.242]        <control if="!hasDormant" while="" timeout="0" info="">
[01:54:24.242]          // if-block "!hasDormant"
[01:54:24.242]            // =>  TRUE
[01:54:24.242]          <block atomic="false" info="">
[01:54:24.242]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:54:24.242]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:24.242]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:54:24.246]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:54:24.246]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:54:24.246]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:24.246]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:54:24.250]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:54:24.250]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:54:24.251]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:24.252]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:54:24.253]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:54:24.253]          </block>
[01:54:24.253]          // end if-block "!hasDormant"
[01:54:24.253]        </control>
[01:54:24.253]        // end if-block "isSWJ"
[01:54:24.253]      </control>
[01:54:24.253]      <control if="!isSWJ" while="" timeout="0" info="">
[01:54:24.253]        // if-block "!isSWJ"
[01:54:24.253]          // =>  FALSE
[01:54:24.253]        // skip if-block "!isSWJ"
[01:54:24.253]      </control>
[01:54:24.253]      <block atomic="false" info="">
[01:54:24.253]        ReadDP(0x0);
[01:54:24.255]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:54:24.255]      </block>
[01:54:24.255]      // end if-block "protType == 2"
[01:54:24.255]    </control>
[01:54:24.255]  </sequence>
[01:54:24.255]  
[01:54:24.259]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:54:24.259]  
[01:54:24.259]  <debugvars>
[01:54:24.261]    // Pre-defined
[01:54:24.261]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:24.261]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:54:24.261]    __dp=0x00000000
[01:54:24.261]    __ap=0x00000000
[01:54:24.261]    __traceout=0x00000000      (Trace Disabled)
[01:54:24.261]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:24.261]    __FlashAddr=0x00000000
[01:54:24.261]    __FlashLen=0x00000000
[01:54:24.261]    __FlashArg=0x00000000
[01:54:24.261]    __FlashOp=0x00000000
[01:54:24.261]    __Result=0x00000000
[01:54:24.261]  </debugvars>
[01:54:24.261]  
[01:54:24.261]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:54:24.261]    <block atomic="false" info="">
[01:54:24.261]      __var SW_DP_ABORT       = 0x0;
[01:54:24.261]        // -> [SW_DP_ABORT <= 0x00000000]
[01:54:24.261]      __var DP_CTRL_STAT      = 0x4;
[01:54:24.261]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:54:24.261]      __var DP_SELECT         = 0x8;
[01:54:24.261]        // -> [DP_SELECT <= 0x00000008]
[01:54:24.261]      __var powered_down      = 0;
[01:54:24.261]        // -> [powered_down <= 0x00000000]
[01:54:24.261]      WriteDP(DP_SELECT, 0x00000000);
[01:54:24.265]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:54:24.265]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:54:24.267]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:54:24.267]        // -> [powered_down <= 0x00000001]
[01:54:24.267]    </block>
[01:54:24.267]    <control if="powered_down" while="" timeout="0" info="">
[01:54:24.267]      // if-block "powered_down"
[01:54:24.267]        // =>  TRUE
[01:54:24.267]      <block atomic="false" info="">
[01:54:24.267]        Message(0, "Debug/System power-up request sent");
[01:54:24.269]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:54:24.273]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:54:24.273]      </block>
[01:54:24.273]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:54:24.273]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:54:24.277]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:54:24.277]        // while-condition  =>  FALSE
[01:54:24.277]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:54:24.278]      </control>
[01:54:24.278]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:54:24.278]        // if-block "(__protocol & 0xFFFF) == 1"
[01:54:24.278]          // =>  FALSE
[01:54:24.278]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:54:24.278]      </control>
[01:54:24.278]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:54:24.278]        // if-block "(__protocol & 0xFFFF) == 2"
[01:54:24.278]          // =>  TRUE
[01:54:24.278]        <block atomic="false" info="">
[01:54:24.278]          Message(0, "executing SWD power up");
[01:54:24.281]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:54:24.284]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:54:24.284]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:54:24.287]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:54:24.287]        </block>
[01:54:24.287]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:54:24.287]      </control>
[01:54:24.287]      // end if-block "powered_down"
[01:54:24.287]    </control>
[01:54:24.287]    <block atomic="false" info="">
[01:54:24.287]      __var DEBUG_PORT_VAL    = 0;
[01:54:24.287]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:54:24.287]      __var ACCESS_POINT_VAL  = 0;
[01:54:24.287]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:54:24.287]      __ap = 1; 
[01:54:24.287]        // -> [__ap <= 0x00000001]
[01:54:24.287]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:54:24.292]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:54:24.292]      __ap = 4;
[01:54:24.292]        // -> [__ap <= 0x00000004]
[01:54:24.292]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:54:24.297]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:54:24.297]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:54:24.297]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:54:24.301]    </block>
[01:54:24.301]    <block atomic="false" info="">
[01:54:24.301]      __var nReset = 0x80;
[01:54:24.301]        // -> [nReset <= 0x00000080]
[01:54:24.301]      __var canReadPins = 0;
[01:54:24.301]        // -> [canReadPins <= 0x00000000]
[01:54:24.301]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:54:24.306]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:54:24.306]        // -> [canReadPins <= 0x00000001]
[01:54:24.306]    </block>
[01:54:24.306]    <control if="" while="1" timeout="200" info="">
[01:54:24.306]      // while "1"  (timeout="200")
[01:54:24.306]      // while-condition  =>  TRUE
[01:54:24.306]      // while "1"  (timeout="200")
[01:54:24.306]      // while-condition  =>  TRUE
[01:54:24.306]      // while "1"  (timeout="200")
[01:54:24.306]      // while-condition  =>  TRUE
[01:54:24.308]      // while "1"  (timeout="200")
[01:54:24.308]      // while-condition  =>  TRUE
[01:54:24.308]      // while "1"  (timeout="200")
[01:54:24.308]      // while-condition  =>  TRUE
[01:54:24.308]      // while "1"  (timeout="200")
[01:54:24.308]      // while-condition  =>  TRUE
[01:54:24.308]      // while "1"  (timeout="200")
[01:54:24.308]      // while-condition  =>  TRUE
[01:54:24.308]      // while "1"  (timeout="200")
[01:54:24.308]      // while-condition  =>  TRUE
[01:54:24.308]      // while "1"  (timeout="200")
[01:54:24.308]      // while-condition  =>  TRUE
[01:54:24.308]      // while "1"  (timeout="200")
[01:54:24.308]      // while-condition  =>  TRUE
[01:54:24.308]      // while "1"  (timeout="200")
[01:54:24.308]      // while-condition  =>  TRUE
[01:54:24.310]      // while "1"  (timeout="200")
[01:54:24.310]      // while-condition  =>  TRUE
[01:54:24.310]      // while "1"  (timeout="200")
[01:54:24.310]      // while-condition  =>  TRUE
[01:54:24.310]      // while "1"  (timeout="200")
[01:54:24.310]      // while-condition  =>  TRUE
[01:54:24.310]      // while "1"  (timeout="200")
[01:54:24.310]      // while-condition  =>  TRUE
[01:54:24.310]      // while "1"  (timeout="200")
[01:54:24.310]      // while-condition  =>  TRUE
[01:54:24.310]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.311]      // while-condition  =>  TRUE
[01:54:24.311]      // while "1"  (timeout="200")
[01:54:24.314]      // while-condition  =>  TRUE
[01:54:24.314]      // while "1"  (timeout="200")
[01:54:24.314]      // while  =>  TIMEOUT
[01:54:24.314]      // end while "1"
[01:54:24.314]    </control>
[01:54:24.314]    <control if="canReadPins" while="" timeout="0" info="">
[01:54:24.314]      // if-block "canReadPins"
[01:54:24.314]        // =>  TRUE
[01:54:24.314]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:54:24.314]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:54:24.317]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:54:24.317]        // while-condition  =>  FALSE
[01:54:24.317]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:54:24.317]      </control>
[01:54:24.317]      // end if-block "canReadPins"
[01:54:24.317]    </control>
[01:54:24.317]    <control if="!canReadPins" while="" timeout="0" info="">
[01:54:24.317]      // if-block "!canReadPins"
[01:54:24.317]        // =>  FALSE
[01:54:24.317]      // skip if-block "!canReadPins"
[01:54:24.317]    </control>
[01:54:24.317]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:54:24.317]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:54:24.317]        // =>  TRUE
[01:54:24.317]      <block atomic="false" info="">
[01:54:24.318]        WriteAP(0x00, 0x190008);
[01:54:24.318]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:54:24.318]        WriteAP(0xF0, 0x01);
[01:54:24.322]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:54:24.322]      </block>
[01:54:24.322]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:54:24.322]    </control>
[01:54:24.322]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:54:24.322]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:54:24.322]        // =>  FALSE
[01:54:24.322]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:54:24.322]    </control>
[01:54:24.322]    <block atomic="false" info="">
[01:54:24.322]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:54:24.327]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:54:24.327]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:54:24.327]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:54:24.327]      __ap = 0; //lets make sure we reset the access point selection
[01:54:24.330]        // -> [__ap <= 0x00000000]
[01:54:24.330]    </block>
[01:54:24.330]  </sequence>
[01:54:24.330]  
[01:54:24.362]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:54:24.362]  
[01:54:24.362]  <debugvars>
[01:54:24.362]    // Pre-defined
[01:54:24.362]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:24.362]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[01:54:24.362]    __dp=0x00000000
[01:54:24.366]    __ap=0x00000000
[01:54:24.366]    __traceout=0x00000000      (Trace Disabled)
[01:54:24.366]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:24.366]    __FlashAddr=0x00000000
[01:54:24.366]    __FlashLen=0x00000000
[01:54:24.366]    __FlashArg=0x00000000
[01:54:24.366]    __FlashOp=0x00000000
[01:54:24.366]    __Result=0x00000000
[01:54:24.366]  </debugvars>
[01:54:24.366]  
[01:54:24.366]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:54:24.366]    <block atomic="false" info="">
[01:54:24.366]      __var deviceID = 0;
[01:54:24.366]        // -> [deviceID <= 0x00000000]
[01:54:24.366]      __var version = 0;
[01:54:24.366]        // -> [version <= 0x00000000]
[01:54:24.366]      __var partNum = 0;
[01:54:24.366]        // -> [partNum <= 0x00000000]
[01:54:24.366]      __var manuf = 0;
[01:54:24.366]        // -> [manuf <= 0x00000000]
[01:54:24.366]      __var isMSPM0G1X0X_G3X0X = 0;
[01:54:24.366]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:54:24.366]      __var isProduction = 0;
[01:54:24.366]        // -> [isProduction <= 0x00000000]
[01:54:24.366]      __var continueId = 0;
[01:54:24.366]        // -> [continueId <= 0x00000000]
[01:54:24.366]      deviceID =   Read32(0x41C40004);
[01:54:24.374]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:54:24.374]        // -> [deviceID <= 0x2BB8802F]
[01:54:24.374]      version = deviceID >> 28;
[01:54:24.374]        // -> [version <= 0x00000002]
[01:54:24.374]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:54:24.374]        // -> [partNum <= 0x0000BB88]
[01:54:24.374]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:54:24.374]        // -> [manuf <= 0x00000017]
[01:54:24.374]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:54:24.376]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:54:24.376]      isProduction = (version > 0);
[01:54:24.376]        // -> [isProduction <= 0x00000001]
[01:54:24.376]    </block>
[01:54:24.376]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:54:24.376]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:54:24.376]        // =>  FALSE
[01:54:24.376]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:54:24.376]    </control>
[01:54:24.376]    <control if="continueId == 4" while="" timeout="0" info="">
[01:54:24.376]      // if-block "continueId == 4"
[01:54:24.376]        // =>  FALSE
[01:54:24.376]      // skip if-block "continueId == 4"
[01:54:24.376]    </control>
[01:54:24.376]    <control if="!isProduction" while="" timeout="0" info="">
[01:54:24.378]      // if-block "!isProduction"
[01:54:24.378]        // =>  FALSE
[01:54:24.378]      // skip if-block "!isProduction"
[01:54:24.378]    </control>
[01:54:24.378]  </sequence>
[01:54:24.378]  
[01:54:30.704]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[01:54:30.704]  
[01:54:30.714]  <debugvars>
[01:54:30.714]    // Pre-defined
[01:54:30.714]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:30.714]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:54:30.714]    __dp=0x00000000
[01:54:30.714]    __ap=0x00000000
[01:54:30.714]    __traceout=0x00000000      (Trace Disabled)
[01:54:30.714]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:30.714]    __FlashAddr=0x00000000
[01:54:30.714]    __FlashLen=0x00000000
[01:54:30.715]    __FlashArg=0x00000000
[01:54:30.715]    __FlashOp=0x00000000
[01:54:30.715]    __Result=0x00000000
[01:54:30.715]  </debugvars>
[01:54:30.715]  
[01:54:30.715]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[01:54:30.715]    <block atomic="false" info="">
[01:54:30.715]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[01:54:30.715]        // -> [isSWJ <= 0x00000001]
[01:54:30.715]      __var hasDormant = __protocol & 0x00020000;
[01:54:30.715]        // -> [hasDormant <= 0x00000000]
[01:54:30.715]      __var protType   = __protocol & 0x0000FFFF;
[01:54:30.715]        // -> [protType <= 0x00000002]
[01:54:30.715]    </block>
[01:54:30.715]    <control if="protType == 1" while="" timeout="0" info="">
[01:54:30.715]      // if-block "protType == 1"
[01:54:30.717]        // =>  FALSE
[01:54:30.717]      // skip if-block "protType == 1"
[01:54:30.717]    </control>
[01:54:30.717]    <control if="protType == 2" while="" timeout="0" info="">
[01:54:30.717]      // if-block "protType == 2"
[01:54:30.717]        // =>  TRUE
[01:54:30.717]      <control if="isSWJ" while="" timeout="0" info="">
[01:54:30.717]        // if-block "isSWJ"
[01:54:30.717]          // =>  TRUE
[01:54:30.717]        <control if="hasDormant" while="" timeout="0" info="">
[01:54:30.717]          // if-block "hasDormant"
[01:54:30.717]            // =>  FALSE
[01:54:30.717]          // skip if-block "hasDormant"
[01:54:30.719]        </control>
[01:54:30.719]        <control if="!hasDormant" while="" timeout="0" info="">
[01:54:30.719]          // if-block "!hasDormant"
[01:54:30.719]            // =>  TRUE
[01:54:30.719]          <block atomic="false" info="">
[01:54:30.719]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[01:54:30.722]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:30.722]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[01:54:30.723]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[01:54:30.723]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[01:54:30.723]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:30.723]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[01:54:30.725]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[01:54:30.725]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[01:54:30.729]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[01:54:30.729]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[01:54:30.729]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[01:54:30.729]          </block>
[01:54:30.729]          // end if-block "!hasDormant"
[01:54:30.729]        </control>
[01:54:30.729]        // end if-block "isSWJ"
[01:54:30.729]      </control>
[01:54:30.729]      <control if="!isSWJ" while="" timeout="0" info="">
[01:54:30.729]        // if-block "!isSWJ"
[01:54:30.729]          // =>  FALSE
[01:54:30.729]        // skip if-block "!isSWJ"
[01:54:30.729]      </control>
[01:54:30.729]      <block atomic="false" info="">
[01:54:30.733]        ReadDP(0x0);
[01:54:30.733]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[01:54:30.733]      </block>
[01:54:30.733]      // end if-block "protType == 2"
[01:54:30.733]    </control>
[01:54:30.733]  </sequence>
[01:54:30.733]  
[01:54:30.737]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[01:54:30.737]  
[01:54:30.737]  <debugvars>
[01:54:30.737]    // Pre-defined
[01:54:30.737]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:30.741]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:54:30.741]    __dp=0x00000000
[01:54:30.741]    __ap=0x00000000
[01:54:30.741]    __traceout=0x00000000      (Trace Disabled)
[01:54:30.741]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:30.741]    __FlashAddr=0x00000000
[01:54:30.741]    __FlashLen=0x00000000
[01:54:30.741]    __FlashArg=0x00000000
[01:54:30.741]    __FlashOp=0x00000000
[01:54:30.741]    __Result=0x00000000
[01:54:30.741]  </debugvars>
[01:54:30.741]  
[01:54:30.741]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[01:54:30.741]    <block atomic="false" info="">
[01:54:30.741]      __var SW_DP_ABORT       = 0x0;
[01:54:30.741]        // -> [SW_DP_ABORT <= 0x00000000]
[01:54:30.741]      __var DP_CTRL_STAT      = 0x4;
[01:54:30.741]        // -> [DP_CTRL_STAT <= 0x00000004]
[01:54:30.741]      __var DP_SELECT         = 0x8;
[01:54:30.741]        // -> [DP_SELECT <= 0x00000008]
[01:54:30.741]      __var powered_down      = 0;
[01:54:30.741]        // -> [powered_down <= 0x00000000]
[01:54:30.741]      WriteDP(DP_SELECT, 0x00000000);
[01:54:30.748]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[01:54:30.748]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[01:54:30.750]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[01:54:30.750]        // -> [powered_down <= 0x00000001]
[01:54:30.750]    </block>
[01:54:30.750]    <control if="powered_down" while="" timeout="0" info="">
[01:54:30.750]      // if-block "powered_down"
[01:54:30.750]        // =>  TRUE
[01:54:30.750]      <block atomic="false" info="">
[01:54:30.750]        Message(0, "Debug/System power-up request sent");
[01:54:30.754]        WriteDP(DP_CTRL_STAT, 0x50000000);
[01:54:30.754]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[01:54:30.758]      </block>
[01:54:30.758]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[01:54:30.758]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[01:54:30.758]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[01:54:30.758]        // while-condition  =>  FALSE
[01:54:30.758]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[01:54:30.758]      </control>
[01:54:30.758]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[01:54:30.758]        // if-block "(__protocol & 0xFFFF) == 1"
[01:54:30.758]          // =>  FALSE
[01:54:30.758]        // skip if-block "(__protocol & 0xFFFF) == 1"
[01:54:30.758]      </control>
[01:54:30.758]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[01:54:30.758]        // if-block "(__protocol & 0xFFFF) == 2"
[01:54:30.758]          // =>  TRUE
[01:54:30.758]        <block atomic="false" info="">
[01:54:30.758]          Message(0, "executing SWD power up");
[01:54:30.762]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[01:54:30.762]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[01:54:30.762]          WriteDP(SW_DP_ABORT, 0x0000001E);
[01:54:30.766]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[01:54:30.766]        </block>
[01:54:30.766]        // end if-block "(__protocol & 0xFFFF) == 2"
[01:54:30.766]      </control>
[01:54:30.766]      // end if-block "powered_down"
[01:54:30.766]    </control>
[01:54:30.766]    <block atomic="false" info="">
[01:54:30.766]      __var DEBUG_PORT_VAL    = 0;
[01:54:30.766]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[01:54:30.766]      __var ACCESS_POINT_VAL  = 0;
[01:54:30.766]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[01:54:30.766]      __ap = 1; 
[01:54:30.766]        // -> [__ap <= 0x00000001]
[01:54:30.766]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[01:54:30.772]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[01:54:30.772]      __ap = 4;
[01:54:30.772]        // -> [__ap <= 0x00000004]
[01:54:30.772]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:54:30.774]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[01:54:30.774]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[01:54:30.774]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:54:30.778]    </block>
[01:54:30.778]    <block atomic="false" info="">
[01:54:30.778]      __var nReset = 0x80;
[01:54:30.778]        // -> [nReset <= 0x00000080]
[01:54:30.778]      __var canReadPins = 0;
[01:54:30.778]        // -> [canReadPins <= 0x00000000]
[01:54:30.778]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[01:54:30.786]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[01:54:30.786]        // -> [canReadPins <= 0x00000001]
[01:54:30.786]    </block>
[01:54:30.786]    <control if="" while="1" timeout="200" info="">
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.786]      // while "1"  (timeout="200")
[01:54:30.786]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.791]      // while-condition  =>  TRUE
[01:54:30.791]      // while "1"  (timeout="200")
[01:54:30.795]      // while-condition  =>  TRUE
[01:54:30.795]      // while "1"  (timeout="200")
[01:54:30.795]      // while-condition  =>  TRUE
[01:54:30.795]      // while "1"  (timeout="200")
[01:54:30.795]      // while-condition  =>  TRUE
[01:54:30.795]      // while "1"  (timeout="200")
[01:54:30.795]      // while-condition  =>  TRUE
[01:54:30.795]      // while "1"  (timeout="200")
[01:54:30.795]      // while-condition  =>  TRUE
[01:54:30.795]      // while "1"  (timeout="200")
[01:54:30.795]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.796]      // while "1"  (timeout="200")
[01:54:30.796]      // while-condition  =>  TRUE
[01:54:30.799]      // while "1"  (timeout="200")
[01:54:30.799]      // while  =>  TIMEOUT
[01:54:30.800]      // end while "1"
[01:54:30.800]    </control>
[01:54:30.800]    <control if="canReadPins" while="" timeout="0" info="">
[01:54:30.800]      // if-block "canReadPins"
[01:54:30.800]        // =>  TRUE
[01:54:30.800]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[01:54:30.800]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[01:54:30.802]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[01:54:30.802]        // while-condition  =>  FALSE
[01:54:30.802]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[01:54:30.802]      </control>
[01:54:30.802]      // end if-block "canReadPins"
[01:54:30.802]    </control>
[01:54:30.802]    <control if="!canReadPins" while="" timeout="0" info="">
[01:54:30.802]      // if-block "!canReadPins"
[01:54:30.803]        // =>  FALSE
[01:54:30.803]      // skip if-block "!canReadPins"
[01:54:30.803]    </control>
[01:54:30.803]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[01:54:30.803]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:54:30.803]        // =>  TRUE
[01:54:30.803]      <block atomic="false" info="">
[01:54:30.803]        WriteAP(0x00, 0x190008);
[01:54:30.805]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[01:54:30.805]        WriteAP(0xF0, 0x01);
[01:54:30.809]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[01:54:30.809]      </block>
[01:54:30.809]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[01:54:30.809]    </control>
[01:54:30.809]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[01:54:30.809]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:54:30.809]        // =>  FALSE
[01:54:30.809]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[01:54:30.809]    </control>
[01:54:30.809]    <block atomic="false" info="">
[01:54:30.809]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[01:54:30.812]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[01:54:30.812]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[01:54:30.816]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[01:54:30.817]      __ap = 0; //lets make sure we reset the access point selection
[01:54:30.817]        // -> [__ap <= 0x00000000]
[01:54:30.817]    </block>
[01:54:30.817]  </sequence>
[01:54:30.817]  
[01:54:30.837]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[01:54:30.837]  
[01:54:30.837]  <debugvars>
[01:54:30.837]    // Pre-defined
[01:54:30.837]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[01:54:30.837]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[01:54:30.837]    __dp=0x00000000
[01:54:30.837]    __ap=0x00000000
[01:54:30.837]    __traceout=0x00000000      (Trace Disabled)
[01:54:30.837]    __errorcontrol=0x00000000  (Skip Errors="False")
[01:54:30.837]    __FlashAddr=0x00000000
[01:54:30.837]    __FlashLen=0x00000000
[01:54:30.837]    __FlashArg=0x00000000
[01:54:30.837]    __FlashOp=0x00000000
[01:54:30.837]    __Result=0x00000000
[01:54:30.837]  </debugvars>
[01:54:30.837]  
[01:54:30.837]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[01:54:30.837]    <block atomic="false" info="">
[01:54:30.837]      __var deviceID = 0;
[01:54:30.837]        // -> [deviceID <= 0x00000000]
[01:54:30.837]      __var version = 0;
[01:54:30.837]        // -> [version <= 0x00000000]
[01:54:30.837]      __var partNum = 0;
[01:54:30.837]        // -> [partNum <= 0x00000000]
[01:54:30.837]      __var manuf = 0;
[01:54:30.837]        // -> [manuf <= 0x00000000]
[01:54:30.837]      __var isMSPM0G1X0X_G3X0X = 0;
[01:54:30.837]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[01:54:30.837]      __var isProduction = 0;
[01:54:30.837]        // -> [isProduction <= 0x00000000]
[01:54:30.841]      __var continueId = 0;
[01:54:30.841]        // -> [continueId <= 0x00000000]
[01:54:30.842]      deviceID =   Read32(0x41C40004);
[01:54:30.846]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[01:54:30.846]        // -> [deviceID <= 0x2BB8802F]
[01:54:30.846]      version = deviceID >> 28;
[01:54:30.846]        // -> [version <= 0x00000002]
[01:54:30.846]      partNum = (deviceID & 0x0FFFF000) >> 12;
[01:54:30.846]        // -> [partNum <= 0x0000BB88]
[01:54:30.846]      manuf = (deviceID & 0x00000FFE) >> 1;
[01:54:30.846]        // -> [manuf <= 0x00000017]
[01:54:30.846]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[01:54:30.846]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[01:54:30.846]      isProduction = (version > 0);
[01:54:30.847]        // -> [isProduction <= 0x00000001]
[01:54:30.847]    </block>
[01:54:30.847]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[01:54:30.847]      // if-block "!isMSPM0G1X0X_G3X0X"
[01:54:30.847]        // =>  FALSE
[01:54:30.847]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[01:54:30.847]    </control>
[01:54:30.847]    <control if="continueId == 4" while="" timeout="0" info="">
[01:54:30.847]      // if-block "continueId == 4"
[01:54:30.847]        // =>  FALSE
[01:54:30.847]      // skip if-block "continueId == 4"
[01:54:30.847]    </control>
[01:54:30.847]    <control if="!isProduction" while="" timeout="0" info="">
[01:54:30.849]      // if-block "!isProduction"
[01:54:30.849]        // =>  FALSE
[01:54:30.849]      // skip if-block "!isProduction"
[01:54:30.849]    </control>
[01:54:30.849]  </sequence>
[01:54:30.849]  
[02:01:14.272]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:01:14.272]  
[02:01:14.272]  <debugvars>
[02:01:14.272]    // Pre-defined
[02:01:14.272]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:01:14.272]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:01:14.272]    __dp=0x00000000
[02:01:14.272]    __ap=0x00000000
[02:01:14.272]    __traceout=0x00000000      (Trace Disabled)
[02:01:14.272]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:01:14.272]    __FlashAddr=0x00000000
[02:01:14.272]    __FlashLen=0x00000000
[02:01:14.272]    __FlashArg=0x00000000
[02:01:14.272]    __FlashOp=0x00000000
[02:01:14.272]    __Result=0x00000000
[02:01:14.272]  </debugvars>
[02:01:14.272]  
[02:01:14.272]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:01:14.272]    <block atomic="false" info="">
[02:01:14.272]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:01:14.272]        // -> [isSWJ <= 0x00000001]
[02:01:14.272]      __var hasDormant = __protocol & 0x00020000;
[02:01:14.272]        // -> [hasDormant <= 0x00000000]
[02:01:14.272]      __var protType   = __protocol & 0x0000FFFF;
[02:01:14.272]        // -> [protType <= 0x00000002]
[02:01:14.272]    </block>
[02:01:14.272]    <control if="protType == 1" while="" timeout="0" info="">
[02:01:14.276]      // if-block "protType == 1"
[02:01:14.276]        // =>  FALSE
[02:01:14.276]      // skip if-block "protType == 1"
[02:01:14.276]    </control>
[02:01:14.276]    <control if="protType == 2" while="" timeout="0" info="">
[02:01:14.276]      // if-block "protType == 2"
[02:01:14.276]        // =>  TRUE
[02:01:14.276]      <control if="isSWJ" while="" timeout="0" info="">
[02:01:14.276]        // if-block "isSWJ"
[02:01:14.276]          // =>  TRUE
[02:01:14.276]        <control if="hasDormant" while="" timeout="0" info="">
[02:01:14.276]          // if-block "hasDormant"
[02:01:14.276]            // =>  FALSE
[02:01:14.276]          // skip if-block "hasDormant"
[02:01:14.276]        </control>
[02:01:14.276]        <control if="!hasDormant" while="" timeout="0" info="">
[02:01:14.276]          // if-block "!hasDormant"
[02:01:14.276]            // =>  TRUE
[02:01:14.276]          <block atomic="false" info="">
[02:01:14.276]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:01:14.276]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:01:14.276]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:01:14.280]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:01:14.280]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:01:14.280]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:01:14.280]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:01:14.284]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:01:14.284]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:01:14.284]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:01:14.284]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:01:14.288]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:01:14.288]          </block>
[02:01:14.288]          // end if-block "!hasDormant"
[02:01:14.288]        </control>
[02:01:14.288]        // end if-block "isSWJ"
[02:01:14.288]      </control>
[02:01:14.288]      <control if="!isSWJ" while="" timeout="0" info="">
[02:01:14.288]        // if-block "!isSWJ"
[02:01:14.288]          // =>  FALSE
[02:01:14.288]        // skip if-block "!isSWJ"
[02:01:14.288]      </control>
[02:01:14.288]      <block atomic="false" info="">
[02:01:14.288]        ReadDP(0x0);
[02:01:14.288]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:01:14.288]      </block>
[02:01:14.288]      // end if-block "protType == 2"
[02:01:14.288]    </control>
[02:01:14.292]  </sequence>
[02:01:14.292]  
[02:01:14.292]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:01:14.292]  
[02:01:14.292]  <debugvars>
[02:01:14.292]    // Pre-defined
[02:01:14.292]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:01:14.292]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:01:14.292]    __dp=0x00000000
[02:01:14.292]    __ap=0x00000000
[02:01:14.292]    __traceout=0x00000000      (Trace Disabled)
[02:01:14.292]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:01:14.292]    __FlashAddr=0x00000000
[02:01:14.292]    __FlashLen=0x00000000
[02:01:14.292]    __FlashArg=0x00000000
[02:01:14.292]    __FlashOp=0x00000000
[02:01:14.292]    __Result=0x00000000
[02:01:14.292]  </debugvars>
[02:01:14.292]  
[02:01:14.292]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:01:14.292]    <block atomic="false" info="">
[02:01:14.296]      __var SW_DP_ABORT       = 0x0;
[02:01:14.296]        // -> [SW_DP_ABORT <= 0x00000000]
[02:01:14.296]      __var DP_CTRL_STAT      = 0x4;
[02:01:14.296]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:01:14.296]      __var DP_SELECT         = 0x8;
[02:01:14.296]        // -> [DP_SELECT <= 0x00000008]
[02:01:14.296]      __var powered_down      = 0;
[02:01:14.296]        // -> [powered_down <= 0x00000000]
[02:01:14.296]      WriteDP(DP_SELECT, 0x00000000);
[02:01:14.296]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:01:14.296]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:01:14.300]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:01:14.300]        // -> [powered_down <= 0x00000001]
[02:01:14.300]    </block>
[02:01:14.300]    <control if="powered_down" while="" timeout="0" info="">
[02:01:14.300]      // if-block "powered_down"
[02:01:14.300]        // =>  TRUE
[02:01:14.300]      <block atomic="false" info="">
[02:01:14.300]        Message(0, "Debug/System power-up request sent");
[02:01:14.304]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:01:14.304]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:01:14.304]      </block>
[02:01:14.304]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:01:14.304]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:01:14.308]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:01:14.308]        // while-condition  =>  FALSE
[02:01:14.308]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:01:14.308]      </control>
[02:01:14.308]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:01:14.308]        // if-block "(__protocol & 0xFFFF) == 1"
[02:01:14.308]          // =>  FALSE
[02:01:14.308]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:01:14.308]      </control>
[02:01:14.308]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:01:14.308]        // if-block "(__protocol & 0xFFFF) == 2"
[02:01:14.308]          // =>  TRUE
[02:01:14.312]        <block atomic="false" info="">
[02:01:14.312]          Message(0, "executing SWD power up");
[02:01:14.312]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:01:14.312]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:01:14.312]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:01:14.316]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:01:14.316]        </block>
[02:01:14.316]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:01:14.316]      </control>
[02:01:14.316]      // end if-block "powered_down"
[02:01:14.316]    </control>
[02:01:14.316]    <block atomic="false" info="">
[02:01:14.316]      __var DEBUG_PORT_VAL    = 0;
[02:01:14.316]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:01:14.316]      __var ACCESS_POINT_VAL  = 0;
[02:01:14.316]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:01:14.316]      __ap = 1; 
[02:01:14.316]        // -> [__ap <= 0x00000001]
[02:01:14.316]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:01:14.324]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:01:14.324]      __ap = 4;
[02:01:14.324]        // -> [__ap <= 0x00000004]
[02:01:14.324]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:01:14.332]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:01:14.332]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:01:14.332]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:01:14.332]    </block>
[02:01:14.332]    <block atomic="false" info="">
[02:01:14.332]      __var nReset = 0x80;
[02:01:14.332]        // -> [nReset <= 0x00000080]
[02:01:14.332]      __var canReadPins = 0;
[02:01:14.332]        // -> [canReadPins <= 0x00000000]
[02:01:14.332]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:01:14.336]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:01:14.336]        // -> [canReadPins <= 0x00000001]
[02:01:14.336]    </block>
[02:01:14.336]    <control if="" while="1" timeout="200" info="">
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.336]      // while-condition  =>  TRUE
[02:01:14.336]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.340]      // while "1"  (timeout="200")
[02:01:14.340]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.344]      // while-condition  =>  TRUE
[02:01:14.344]      // while "1"  (timeout="200")
[02:01:14.348]      // while-condition  =>  TRUE
[02:01:14.348]      // while "1"  (timeout="200")
[02:01:14.348]      // while  =>  TIMEOUT
[02:01:14.348]      // end while "1"
[02:01:14.348]    </control>
[02:01:14.348]    <control if="canReadPins" while="" timeout="0" info="">
[02:01:14.348]      // if-block "canReadPins"
[02:01:14.348]        // =>  TRUE
[02:01:14.348]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:01:14.348]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:01:14.352]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:01:14.352]        // while-condition  =>  FALSE
[02:01:14.352]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:01:14.352]      </control>
[02:01:14.352]      // end if-block "canReadPins"
[02:01:14.352]    </control>
[02:01:14.352]    <control if="!canReadPins" while="" timeout="0" info="">
[02:01:14.352]      // if-block "!canReadPins"
[02:01:14.352]        // =>  FALSE
[02:01:14.352]      // skip if-block "!canReadPins"
[02:01:14.352]    </control>
[02:01:14.352]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:01:14.352]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:01:14.352]        // =>  TRUE
[02:01:14.352]      <block atomic="false" info="">
[02:01:14.356]        WriteAP(0x00, 0x190008);
[02:01:14.357]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:01:14.357]        WriteAP(0xF0, 0x01);
[02:01:14.360]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:01:14.360]      </block>
[02:01:14.362]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:01:14.362]    </control>
[02:01:14.362]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:01:14.362]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:01:14.362]        // =>  FALSE
[02:01:14.362]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:01:14.362]    </control>
[02:01:14.362]    <block atomic="false" info="">
[02:01:14.362]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:01:14.364]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:01:14.365]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:01:14.365]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:01:14.367]      __ap = 0; //lets make sure we reset the access point selection
[02:01:14.367]        // -> [__ap <= 0x00000000]
[02:01:14.367]    </block>
[02:01:14.367]  </sequence>
[02:01:14.367]  
[02:01:14.392]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:01:14.392]  
[02:01:14.392]  <debugvars>
[02:01:14.392]    // Pre-defined
[02:01:14.392]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:01:14.392]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:01:14.392]    __dp=0x00000000
[02:01:14.392]    __ap=0x00000000
[02:01:14.392]    __traceout=0x00000000      (Trace Disabled)
[02:01:14.392]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:01:14.392]    __FlashAddr=0x00000000
[02:01:14.392]    __FlashLen=0x00000000
[02:01:14.392]    __FlashArg=0x00000000
[02:01:14.392]    __FlashOp=0x00000000
[02:01:14.392]    __Result=0x00000000
[02:01:14.392]  </debugvars>
[02:01:14.392]  
[02:01:14.392]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:01:14.392]    <block atomic="false" info="">
[02:01:14.392]      __var deviceID = 0;
[02:01:14.392]        // -> [deviceID <= 0x00000000]
[02:01:14.392]      __var version = 0;
[02:01:14.392]        // -> [version <= 0x00000000]
[02:01:14.392]      __var partNum = 0;
[02:01:14.392]        // -> [partNum <= 0x00000000]
[02:01:14.392]      __var manuf = 0;
[02:01:14.392]        // -> [manuf <= 0x00000000]
[02:01:14.392]      __var isMSPM0G1X0X_G3X0X = 0;
[02:01:14.392]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:01:14.392]      __var isProduction = 0;
[02:01:14.392]        // -> [isProduction <= 0x00000000]
[02:01:14.396]      __var continueId = 0;
[02:01:14.396]        // -> [continueId <= 0x00000000]
[02:01:14.396]      deviceID =   Read32(0x41C40004);
[02:01:14.400]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:01:14.400]        // -> [deviceID <= 0x2BB8802F]
[02:01:14.400]      version = deviceID >> 28;
[02:01:14.400]        // -> [version <= 0x00000002]
[02:01:14.400]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:01:14.400]        // -> [partNum <= 0x0000BB88]
[02:01:14.400]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:01:14.400]        // -> [manuf <= 0x00000017]
[02:01:14.400]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:01:14.400]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:01:14.400]      isProduction = (version > 0);
[02:01:14.400]        // -> [isProduction <= 0x00000001]
[02:01:14.400]    </block>
[02:01:14.400]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:01:14.400]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:01:14.400]        // =>  FALSE
[02:01:14.400]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:01:14.400]    </control>
[02:01:14.400]    <control if="continueId == 4" while="" timeout="0" info="">
[02:01:14.400]      // if-block "continueId == 4"
[02:01:14.400]        // =>  FALSE
[02:01:14.404]      // skip if-block "continueId == 4"
[02:01:14.404]    </control>
[02:01:14.404]    <control if="!isProduction" while="" timeout="0" info="">
[02:01:14.404]      // if-block "!isProduction"
[02:01:14.404]        // =>  FALSE
[02:01:14.404]      // skip if-block "!isProduction"
[02:01:14.404]    </control>
[02:01:14.404]  </sequence>
[02:01:14.404]  
[02:01:19.871]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:01:19.871]  
[02:01:19.871]  <debugvars>
[02:01:19.871]    // Pre-defined
[02:01:19.871]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:01:19.871]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:01:19.871]    __dp=0x00000000
[02:01:19.871]    __ap=0x00000000
[02:01:19.871]    __traceout=0x00000000      (Trace Disabled)
[02:01:19.871]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:01:19.871]    __FlashAddr=0x00000000
[02:01:19.871]    __FlashLen=0x00000000
[02:01:19.871]    __FlashArg=0x00000000
[02:01:19.871]    __FlashOp=0x00000000
[02:01:19.871]    __Result=0x00000000
[02:01:19.871]  </debugvars>
[02:01:19.871]  
[02:01:19.871]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:01:19.871]    <block atomic="false" info="">
[02:01:19.871]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:01:19.871]        // -> [isSWJ <= 0x00000001]
[02:01:19.871]      __var hasDormant = __protocol & 0x00020000;
[02:01:19.871]        // -> [hasDormant <= 0x00000000]
[02:01:19.871]      __var protType   = __protocol & 0x0000FFFF;
[02:01:19.871]        // -> [protType <= 0x00000002]
[02:01:19.871]    </block>
[02:01:19.871]    <control if="protType == 1" while="" timeout="0" info="">
[02:01:19.871]      // if-block "protType == 1"
[02:01:19.875]        // =>  FALSE
[02:01:19.875]      // skip if-block "protType == 1"
[02:01:19.875]    </control>
[02:01:19.875]    <control if="protType == 2" while="" timeout="0" info="">
[02:01:19.875]      // if-block "protType == 2"
[02:01:19.875]        // =>  TRUE
[02:01:19.875]      <control if="isSWJ" while="" timeout="0" info="">
[02:01:19.875]        // if-block "isSWJ"
[02:01:19.875]          // =>  TRUE
[02:01:19.875]        <control if="hasDormant" while="" timeout="0" info="">
[02:01:19.875]          // if-block "hasDormant"
[02:01:19.875]            // =>  FALSE
[02:01:19.875]          // skip if-block "hasDormant"
[02:01:19.875]        </control>
[02:01:19.875]        <control if="!hasDormant" while="" timeout="0" info="">
[02:01:19.875]          // if-block "!hasDormant"
[02:01:19.875]            // =>  TRUE
[02:01:19.875]          <block atomic="false" info="">
[02:01:19.875]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:01:19.875]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:01:19.875]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:01:19.879]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:01:19.879]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:01:19.883]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:01:19.883]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:01:19.887]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:01:19.887]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:01:19.887]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:01:19.887]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:01:19.891]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:01:19.891]          </block>
[02:01:19.891]          // end if-block "!hasDormant"
[02:01:19.891]        </control>
[02:01:19.891]        // end if-block "isSWJ"
[02:01:19.891]      </control>
[02:01:19.891]      <control if="!isSWJ" while="" timeout="0" info="">
[02:01:19.891]        // if-block "!isSWJ"
[02:01:19.891]          // =>  FALSE
[02:01:19.891]        // skip if-block "!isSWJ"
[02:01:19.891]      </control>
[02:01:19.891]      <block atomic="false" info="">
[02:01:19.891]        ReadDP(0x0);
[02:01:19.891]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:01:19.891]      </block>
[02:01:19.891]      // end if-block "protType == 2"
[02:01:19.891]    </control>
[02:01:19.891]  </sequence>
[02:01:19.895]  
[02:01:19.895]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:01:19.895]  
[02:01:19.895]  <debugvars>
[02:01:19.895]    // Pre-defined
[02:01:19.895]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:01:19.895]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:01:19.895]    __dp=0x00000000
[02:01:19.895]    __ap=0x00000000
[02:01:19.895]    __traceout=0x00000000      (Trace Disabled)
[02:01:19.895]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:01:19.895]    __FlashAddr=0x00000000
[02:01:19.895]    __FlashLen=0x00000000
[02:01:19.895]    __FlashArg=0x00000000
[02:01:19.895]    __FlashOp=0x00000000
[02:01:19.895]    __Result=0x00000000
[02:01:19.895]  </debugvars>
[02:01:19.895]  
[02:01:19.899]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:01:19.899]    <block atomic="false" info="">
[02:01:19.899]      __var SW_DP_ABORT       = 0x0;
[02:01:19.899]        // -> [SW_DP_ABORT <= 0x00000000]
[02:01:19.899]      __var DP_CTRL_STAT      = 0x4;
[02:01:19.899]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:01:19.899]      __var DP_SELECT         = 0x8;
[02:01:19.899]        // -> [DP_SELECT <= 0x00000008]
[02:01:19.899]      __var powered_down      = 0;
[02:01:19.899]        // -> [powered_down <= 0x00000000]
[02:01:19.899]      WriteDP(DP_SELECT, 0x00000000);
[02:01:19.899]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:01:19.899]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:01:19.903]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:01:19.903]        // -> [powered_down <= 0x00000001]
[02:01:19.903]    </block>
[02:01:19.903]    <control if="powered_down" while="" timeout="0" info="">
[02:01:19.903]      // if-block "powered_down"
[02:01:19.903]        // =>  TRUE
[02:01:19.903]      <block atomic="false" info="">
[02:01:19.903]        Message(0, "Debug/System power-up request sent");
[02:01:19.903]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:01:19.907]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:01:19.907]      </block>
[02:01:19.907]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:01:19.907]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:01:19.907]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:01:19.907]        // while-condition  =>  FALSE
[02:01:19.907]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:01:19.907]      </control>
[02:01:19.907]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:01:19.907]        // if-block "(__protocol & 0xFFFF) == 1"
[02:01:19.907]          // =>  FALSE
[02:01:19.907]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:01:19.907]      </control>
[02:01:19.907]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:01:19.907]        // if-block "(__protocol & 0xFFFF) == 2"
[02:01:19.907]          // =>  TRUE
[02:01:19.907]        <block atomic="false" info="">
[02:01:19.907]          Message(0, "executing SWD power up");
[02:01:19.911]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:01:19.911]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:01:19.911]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:01:19.915]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:01:19.915]        </block>
[02:01:19.915]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:01:19.915]      </control>
[02:01:19.915]      // end if-block "powered_down"
[02:01:19.915]    </control>
[02:01:19.915]    <block atomic="false" info="">
[02:01:19.915]      __var DEBUG_PORT_VAL    = 0;
[02:01:19.915]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:01:19.915]      __var ACCESS_POINT_VAL  = 0;
[02:01:19.915]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:01:19.915]      __ap = 1; 
[02:01:19.915]        // -> [__ap <= 0x00000001]
[02:01:19.915]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:01:19.919]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:01:19.919]      __ap = 4;
[02:01:19.919]        // -> [__ap <= 0x00000004]
[02:01:19.919]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:01:19.923]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:01:19.923]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:01:19.923]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:01:19.923]    </block>
[02:01:19.927]    <block atomic="false" info="">
[02:01:19.927]      __var nReset = 0x80;
[02:01:19.927]        // -> [nReset <= 0x00000080]
[02:01:19.927]      __var canReadPins = 0;
[02:01:19.927]        // -> [canReadPins <= 0x00000000]
[02:01:19.927]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:01:19.927]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:01:19.927]        // -> [canReadPins <= 0x00000001]
[02:01:19.927]    </block>
[02:01:19.927]    <control if="" while="1" timeout="200" info="">
[02:01:19.927]      // while "1"  (timeout="200")
[02:01:19.927]      // while-condition  =>  TRUE
[02:01:19.927]      // while "1"  (timeout="200")
[02:01:19.927]      // while-condition  =>  TRUE
[02:01:19.927]      // while "1"  (timeout="200")
[02:01:19.927]      // while-condition  =>  TRUE
[02:01:19.927]      // while "1"  (timeout="200")
[02:01:19.927]      // while-condition  =>  TRUE
[02:01:19.927]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.931]      // while "1"  (timeout="200")
[02:01:19.931]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.935]      // while "1"  (timeout="200")
[02:01:19.935]      // while-condition  =>  TRUE
[02:01:19.939]      // while "1"  (timeout="200")
[02:01:19.939]      // while  =>  TIMEOUT
[02:01:19.939]      // end while "1"
[02:01:19.939]    </control>
[02:01:19.939]    <control if="canReadPins" while="" timeout="0" info="">
[02:01:19.939]      // if-block "canReadPins"
[02:01:19.939]        // =>  TRUE
[02:01:19.939]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:01:19.939]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:01:19.941]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:01:19.941]        // while-condition  =>  FALSE
[02:01:19.941]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:01:19.941]      </control>
[02:01:19.941]      // end if-block "canReadPins"
[02:01:19.941]    </control>
[02:01:19.941]    <control if="!canReadPins" while="" timeout="0" info="">
[02:01:19.941]      // if-block "!canReadPins"
[02:01:19.941]        // =>  FALSE
[02:01:19.941]      // skip if-block "!canReadPins"
[02:01:19.941]    </control>
[02:01:19.943]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:01:19.943]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:01:19.943]        // =>  TRUE
[02:01:19.943]      <block atomic="false" info="">
[02:01:19.943]        WriteAP(0x00, 0x190008);
[02:01:19.943]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:01:19.943]        WriteAP(0xF0, 0x01);
[02:01:19.947]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:01:19.947]      </block>
[02:01:19.947]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:01:19.947]    </control>
[02:01:19.947]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:01:19.947]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:01:19.947]        // =>  FALSE
[02:01:19.947]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:01:19.947]    </control>
[02:01:19.947]    <block atomic="false" info="">
[02:01:19.947]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:01:19.955]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:01:19.955]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:01:19.955]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:01:19.955]      __ap = 0; //lets make sure we reset the access point selection
[02:01:19.955]        // -> [__ap <= 0x00000000]
[02:01:19.955]    </block>
[02:01:19.959]  </sequence>
[02:01:19.959]  
[02:01:19.983]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:01:19.983]  
[02:01:19.983]  <debugvars>
[02:01:19.983]    // Pre-defined
[02:01:19.983]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:01:19.983]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:01:19.983]    __dp=0x00000000
[02:01:19.983]    __ap=0x00000000
[02:01:19.983]    __traceout=0x00000000      (Trace Disabled)
[02:01:19.983]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:01:19.983]    __FlashAddr=0x00000000
[02:01:19.983]    __FlashLen=0x00000000
[02:01:19.983]    __FlashArg=0x00000000
[02:01:19.983]    __FlashOp=0x00000000
[02:01:19.983]    __Result=0x00000000
[02:01:19.983]  </debugvars>
[02:01:19.983]  
[02:01:19.983]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:01:19.983]    <block atomic="false" info="">
[02:01:19.983]      __var deviceID = 0;
[02:01:19.983]        // -> [deviceID <= 0x00000000]
[02:01:19.983]      __var version = 0;
[02:01:19.983]        // -> [version <= 0x00000000]
[02:01:19.983]      __var partNum = 0;
[02:01:19.983]        // -> [partNum <= 0x00000000]
[02:01:19.983]      __var manuf = 0;
[02:01:19.983]        // -> [manuf <= 0x00000000]
[02:01:19.983]      __var isMSPM0G1X0X_G3X0X = 0;
[02:01:19.983]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:01:19.983]      __var isProduction = 0;
[02:01:19.987]        // -> [isProduction <= 0x00000000]
[02:01:19.987]      __var continueId = 0;
[02:01:19.987]        // -> [continueId <= 0x00000000]
[02:01:19.987]      deviceID =   Read32(0x41C40004);
[02:01:19.991]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:01:19.991]        // -> [deviceID <= 0x2BB8802F]
[02:01:19.991]      version = deviceID >> 28;
[02:01:19.991]        // -> [version <= 0x00000002]
[02:01:19.991]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:01:19.991]        // -> [partNum <= 0x0000BB88]
[02:01:19.991]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:01:19.991]        // -> [manuf <= 0x00000017]
[02:01:19.991]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:01:19.991]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:01:19.991]      isProduction = (version > 0);
[02:01:19.991]        // -> [isProduction <= 0x00000001]
[02:01:19.991]    </block>
[02:01:19.991]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:01:19.991]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:01:19.991]        // =>  FALSE
[02:01:19.991]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:01:19.991]    </control>
[02:01:19.995]    <control if="continueId == 4" while="" timeout="0" info="">
[02:01:19.995]      // if-block "continueId == 4"
[02:01:19.995]        // =>  FALSE
[02:01:19.995]      // skip if-block "continueId == 4"
[02:01:19.995]    </control>
[02:01:19.995]    <control if="!isProduction" while="" timeout="0" info="">
[02:01:19.995]      // if-block "!isProduction"
[02:01:19.995]        // =>  FALSE
[02:01:19.995]      // skip if-block "!isProduction"
[02:01:19.995]    </control>
[02:01:19.995]  </sequence>
[02:01:19.995]  
[02:03:34.727]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:03:34.727]  
[02:03:34.727]  <debugvars>
[02:03:34.727]    // Pre-defined
[02:03:34.727]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:34.727]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:03:34.727]    __dp=0x00000000
[02:03:34.729]    __ap=0x00000000
[02:03:34.729]    __traceout=0x00000000      (Trace Disabled)
[02:03:34.729]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:34.729]    __FlashAddr=0x00000000
[02:03:34.729]    __FlashLen=0x00000000
[02:03:34.729]    __FlashArg=0x00000000
[02:03:34.729]    __FlashOp=0x00000000
[02:03:34.729]    __Result=0x00000000
[02:03:34.729]  </debugvars>
[02:03:34.729]  
[02:03:34.730]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:03:34.730]    <block atomic="false" info="">
[02:03:34.730]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:03:34.730]        // -> [isSWJ <= 0x00000001]
[02:03:34.730]      __var hasDormant = __protocol & 0x00020000;
[02:03:34.730]        // -> [hasDormant <= 0x00000000]
[02:03:34.731]      __var protType   = __protocol & 0x0000FFFF;
[02:03:34.731]        // -> [protType <= 0x00000002]
[02:03:34.731]    </block>
[02:03:34.731]    <control if="protType == 1" while="" timeout="0" info="">
[02:03:34.731]      // if-block "protType == 1"
[02:03:34.731]        // =>  FALSE
[02:03:34.731]      // skip if-block "protType == 1"
[02:03:34.731]    </control>
[02:03:34.731]    <control if="protType == 2" while="" timeout="0" info="">
[02:03:34.731]      // if-block "protType == 2"
[02:03:34.731]        // =>  TRUE
[02:03:34.731]      <control if="isSWJ" while="" timeout="0" info="">
[02:03:34.731]        // if-block "isSWJ"
[02:03:34.731]          // =>  TRUE
[02:03:34.731]        <control if="hasDormant" while="" timeout="0" info="">
[02:03:34.731]          // if-block "hasDormant"
[02:03:34.731]            // =>  FALSE
[02:03:34.731]          // skip if-block "hasDormant"
[02:03:34.731]        </control>
[02:03:34.731]        <control if="!hasDormant" while="" timeout="0" info="">
[02:03:34.731]          // if-block "!hasDormant"
[02:03:34.731]            // =>  TRUE
[02:03:34.731]          <block atomic="false" info="">
[02:03:34.733]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:03:34.735]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:34.735]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:03:34.738]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:03:34.738]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:03:34.740]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:34.740]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:03:34.742]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:03:34.742]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:03:34.742]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:34.742]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:03:34.746]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:03:34.746]          </block>
[02:03:34.746]          // end if-block "!hasDormant"
[02:03:34.746]        </control>
[02:03:34.746]        // end if-block "isSWJ"
[02:03:34.746]      </control>
[02:03:34.746]      <control if="!isSWJ" while="" timeout="0" info="">
[02:03:34.746]        // if-block "!isSWJ"
[02:03:34.746]          // =>  FALSE
[02:03:34.747]        // skip if-block "!isSWJ"
[02:03:34.747]      </control>
[02:03:34.747]      <block atomic="false" info="">
[02:03:34.747]        ReadDP(0x0);
[02:03:34.747]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:03:34.747]      </block>
[02:03:34.747]      // end if-block "protType == 2"
[02:03:34.747]    </control>
[02:03:34.747]  </sequence>
[02:03:34.747]  
[02:03:34.750]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:03:34.750]  
[02:03:34.750]  <debugvars>
[02:03:34.750]    // Pre-defined
[02:03:34.750]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:34.750]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:03:34.750]    __dp=0x00000000
[02:03:34.750]    __ap=0x00000000
[02:03:34.750]    __traceout=0x00000000      (Trace Disabled)
[02:03:34.750]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:34.750]    __FlashAddr=0x00000000
[02:03:34.750]    __FlashLen=0x00000000
[02:03:34.750]    __FlashArg=0x00000000
[02:03:34.750]    __FlashOp=0x00000000
[02:03:34.750]    __Result=0x00000000
[02:03:34.750]  </debugvars>
[02:03:34.750]  
[02:03:34.750]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:03:34.750]    <block atomic="false" info="">
[02:03:34.750]      __var SW_DP_ABORT       = 0x0;
[02:03:34.754]        // -> [SW_DP_ABORT <= 0x00000000]
[02:03:34.754]      __var DP_CTRL_STAT      = 0x4;
[02:03:34.754]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:03:34.754]      __var DP_SELECT         = 0x8;
[02:03:34.754]        // -> [DP_SELECT <= 0x00000008]
[02:03:34.754]      __var powered_down      = 0;
[02:03:34.754]        // -> [powered_down <= 0x00000000]
[02:03:34.754]      WriteDP(DP_SELECT, 0x00000000);
[02:03:34.754]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:03:34.754]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:03:34.758]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:03:34.758]        // -> [powered_down <= 0x00000001]
[02:03:34.758]    </block>
[02:03:34.758]    <control if="powered_down" while="" timeout="0" info="">
[02:03:34.758]      // if-block "powered_down"
[02:03:34.758]        // =>  TRUE
[02:03:34.758]      <block atomic="false" info="">
[02:03:34.758]        Message(0, "Debug/System power-up request sent");
[02:03:34.761]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:03:34.763]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:03:34.763]      </block>
[02:03:34.763]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:03:34.763]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:03:34.765]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:03:34.767]        // while-condition  =>  FALSE
[02:03:34.767]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:03:34.767]      </control>
[02:03:34.767]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:03:34.767]        // if-block "(__protocol & 0xFFFF) == 1"
[02:03:34.767]          // =>  FALSE
[02:03:34.767]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:03:34.767]      </control>
[02:03:34.767]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:03:34.767]        // if-block "(__protocol & 0xFFFF) == 2"
[02:03:34.767]          // =>  TRUE
[02:03:34.767]        <block atomic="false" info="">
[02:03:34.767]          Message(0, "executing SWD power up");
[02:03:34.767]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:03:34.771]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:03:34.771]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:03:34.771]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:03:34.775]        </block>
[02:03:34.775]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:03:34.775]      </control>
[02:03:34.775]      // end if-block "powered_down"
[02:03:34.775]    </control>
[02:03:34.775]    <block atomic="false" info="">
[02:03:34.775]      __var DEBUG_PORT_VAL    = 0;
[02:03:34.776]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:03:34.776]      __var ACCESS_POINT_VAL  = 0;
[02:03:34.776]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:03:34.776]      __ap = 1; 
[02:03:34.776]        // -> [__ap <= 0x00000001]
[02:03:34.776]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:03:34.782]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:03:34.782]      __ap = 4;
[02:03:34.782]        // -> [__ap <= 0x00000004]
[02:03:34.782]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:03:34.785]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:03:34.785]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:03:34.785]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:03:34.785]    </block>
[02:03:34.785]    <block atomic="false" info="">
[02:03:34.785]      __var nReset = 0x80;
[02:03:34.785]        // -> [nReset <= 0x00000080]
[02:03:34.785]      __var canReadPins = 0;
[02:03:34.785]        // -> [canReadPins <= 0x00000000]
[02:03:34.785]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:03:34.788]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:03:34.788]        // -> [canReadPins <= 0x00000001]
[02:03:34.788]    </block>
[02:03:34.788]    <control if="" while="1" timeout="200" info="">
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.788]      // while-condition  =>  TRUE
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.788]      // while-condition  =>  TRUE
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.788]      // while-condition  =>  TRUE
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.788]      // while-condition  =>  TRUE
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.788]      // while-condition  =>  TRUE
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.788]      // while-condition  =>  TRUE
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.788]      // while-condition  =>  TRUE
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.788]      // while-condition  =>  TRUE
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.788]      // while-condition  =>  TRUE
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.788]      // while-condition  =>  TRUE
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.788]      // while-condition  =>  TRUE
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.788]      // while-condition  =>  TRUE
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.788]      // while-condition  =>  TRUE
[02:03:34.788]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.792]      // while-condition  =>  TRUE
[02:03:34.792]      // while "1"  (timeout="200")
[02:03:34.796]      // while-condition  =>  TRUE
[02:03:34.796]      // while "1"  (timeout="200")
[02:03:34.796]      // while-condition  =>  TRUE
[02:03:34.796]      // while "1"  (timeout="200")
[02:03:34.796]      // while-condition  =>  TRUE
[02:03:34.796]      // while "1"  (timeout="200")
[02:03:34.796]      // while-condition  =>  TRUE
[02:03:34.796]      // while "1"  (timeout="200")
[02:03:34.796]      // while-condition  =>  TRUE
[02:03:34.796]      // while "1"  (timeout="200")
[02:03:34.796]      // while-condition  =>  TRUE
[02:03:34.797]      // while "1"  (timeout="200")
[02:03:34.797]      // while-condition  =>  TRUE
[02:03:34.797]      // while "1"  (timeout="200")
[02:03:34.797]      // while-condition  =>  TRUE
[02:03:34.797]      // while "1"  (timeout="200")
[02:03:34.797]      // while-condition  =>  TRUE
[02:03:34.797]      // while "1"  (timeout="200")
[02:03:34.797]      // while-condition  =>  TRUE
[02:03:34.797]      // while "1"  (timeout="200")
[02:03:34.797]      // while-condition  =>  TRUE
[02:03:34.797]      // while "1"  (timeout="200")
[02:03:34.797]      // while-condition  =>  TRUE
[02:03:34.797]      // while "1"  (timeout="200")
[02:03:34.797]      // while-condition  =>  TRUE
[02:03:34.798]      // while "1"  (timeout="200")
[02:03:34.798]      // while  =>  TIMEOUT
[02:03:34.798]      // end while "1"
[02:03:34.798]    </control>
[02:03:34.798]    <control if="canReadPins" while="" timeout="0" info="">
[02:03:34.798]      // if-block "canReadPins"
[02:03:34.798]        // =>  TRUE
[02:03:34.798]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:03:34.798]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:03:34.802]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:03:34.802]        // while-condition  =>  FALSE
[02:03:34.802]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:03:34.802]      </control>
[02:03:34.802]      // end if-block "canReadPins"
[02:03:34.802]    </control>
[02:03:34.802]    <control if="!canReadPins" while="" timeout="0" info="">
[02:03:34.802]      // if-block "!canReadPins"
[02:03:34.802]        // =>  FALSE
[02:03:34.802]      // skip if-block "!canReadPins"
[02:03:34.802]    </control>
[02:03:34.804]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:03:34.804]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:03:34.804]        // =>  TRUE
[02:03:34.804]      <block atomic="false" info="">
[02:03:34.804]        WriteAP(0x00, 0x190008);
[02:03:34.814]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:03:34.814]        WriteAP(0xF0, 0x01);
[02:03:34.821]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:03:34.822]      </block>
[02:03:34.823]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:03:34.823]    </control>
[02:03:34.823]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:03:34.823]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:03:34.823]        // =>  FALSE
[02:03:34.823]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:03:34.823]    </control>
[02:03:34.823]    <block atomic="false" info="">
[02:03:34.823]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:03:34.825]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:03:34.825]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:03:34.825]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:03:34.829]      __ap = 0; //lets make sure we reset the access point selection
[02:03:34.829]        // -> [__ap <= 0x00000000]
[02:03:34.829]    </block>
[02:03:34.829]  </sequence>
[02:03:34.829]  
[02:03:34.849]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:03:34.849]  
[02:03:34.849]  <debugvars>
[02:03:34.849]    // Pre-defined
[02:03:34.851]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:34.851]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:03:34.851]    __dp=0x00000000
[02:03:34.851]    __ap=0x00000000
[02:03:34.851]    __traceout=0x00000000      (Trace Disabled)
[02:03:34.851]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:34.851]    __FlashAddr=0x00000000
[02:03:34.851]    __FlashLen=0x00000000
[02:03:34.851]    __FlashArg=0x00000000
[02:03:34.851]    __FlashOp=0x00000000
[02:03:34.851]    __Result=0x00000000
[02:03:34.851]  </debugvars>
[02:03:34.851]  
[02:03:34.851]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:03:34.851]    <block atomic="false" info="">
[02:03:34.851]      __var deviceID = 0;
[02:03:34.851]        // -> [deviceID <= 0x00000000]
[02:03:34.851]      __var version = 0;
[02:03:34.851]        // -> [version <= 0x00000000]
[02:03:34.851]      __var partNum = 0;
[02:03:34.851]        // -> [partNum <= 0x00000000]
[02:03:34.851]      __var manuf = 0;
[02:03:34.854]        // -> [manuf <= 0x00000000]
[02:03:34.854]      __var isMSPM0G1X0X_G3X0X = 0;
[02:03:34.854]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:03:34.854]      __var isProduction = 0;
[02:03:34.854]        // -> [isProduction <= 0x00000000]
[02:03:34.854]      __var continueId = 0;
[02:03:34.854]        // -> [continueId <= 0x00000000]
[02:03:34.854]      deviceID =   Read32(0x41C40004);
[02:03:34.861]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:03:34.861]        // -> [deviceID <= 0x2BB8802F]
[02:03:34.861]      version = deviceID >> 28;
[02:03:34.861]        // -> [version <= 0x00000002]
[02:03:34.861]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:03:34.861]        // -> [partNum <= 0x0000BB88]
[02:03:34.861]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:03:34.861]        // -> [manuf <= 0x00000017]
[02:03:34.861]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:03:34.861]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:03:34.861]      isProduction = (version > 0);
[02:03:34.861]        // -> [isProduction <= 0x00000001]
[02:03:34.861]    </block>
[02:03:34.861]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:03:34.861]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:03:34.862]        // =>  FALSE
[02:03:34.862]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:03:34.862]    </control>
[02:03:34.862]    <control if="continueId == 4" while="" timeout="0" info="">
[02:03:34.862]      // if-block "continueId == 4"
[02:03:34.862]        // =>  FALSE
[02:03:34.862]      // skip if-block "continueId == 4"
[02:03:34.862]    </control>
[02:03:34.862]    <control if="!isProduction" while="" timeout="0" info="">
[02:03:34.862]      // if-block "!isProduction"
[02:03:34.862]        // =>  FALSE
[02:03:34.862]      // skip if-block "!isProduction"
[02:03:34.862]    </control>
[02:03:34.862]  </sequence>
[02:03:34.862]  
[02:03:39.484]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:03:39.484]  
[02:03:39.493]  <debugvars>
[02:03:39.493]    // Pre-defined
[02:03:39.493]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:39.493]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:03:39.493]    __dp=0x00000000
[02:03:39.493]    __ap=0x00000000
[02:03:39.493]    __traceout=0x00000000      (Trace Disabled)
[02:03:39.493]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:39.493]    __FlashAddr=0x00000000
[02:03:39.493]    __FlashLen=0x00000000
[02:03:39.493]    __FlashArg=0x00000000
[02:03:39.493]    __FlashOp=0x00000000
[02:03:39.493]    __Result=0x00000000
[02:03:39.493]  </debugvars>
[02:03:39.493]  
[02:03:39.495]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:03:39.495]    <block atomic="false" info="">
[02:03:39.495]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:03:39.495]        // -> [isSWJ <= 0x00000001]
[02:03:39.495]      __var hasDormant = __protocol & 0x00020000;
[02:03:39.495]        // -> [hasDormant <= 0x00000000]
[02:03:39.496]      __var protType   = __protocol & 0x0000FFFF;
[02:03:39.496]        // -> [protType <= 0x00000002]
[02:03:39.496]    </block>
[02:03:39.496]    <control if="protType == 1" while="" timeout="0" info="">
[02:03:39.496]      // if-block "protType == 1"
[02:03:39.496]        // =>  FALSE
[02:03:39.496]      // skip if-block "protType == 1"
[02:03:39.496]    </control>
[02:03:39.496]    <control if="protType == 2" while="" timeout="0" info="">
[02:03:39.496]      // if-block "protType == 2"
[02:03:39.497]        // =>  TRUE
[02:03:39.497]      <control if="isSWJ" while="" timeout="0" info="">
[02:03:39.497]        // if-block "isSWJ"
[02:03:39.497]          // =>  TRUE
[02:03:39.497]        <control if="hasDormant" while="" timeout="0" info="">
[02:03:39.497]          // if-block "hasDormant"
[02:03:39.497]            // =>  FALSE
[02:03:39.497]          // skip if-block "hasDormant"
[02:03:39.497]        </control>
[02:03:39.497]        <control if="!hasDormant" while="" timeout="0" info="">
[02:03:39.497]          // if-block "!hasDormant"
[02:03:39.497]            // =>  TRUE
[02:03:39.497]          <block atomic="false" info="">
[02:03:39.497]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:03:39.501]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:39.501]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:03:39.502]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:03:39.502]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:03:39.505]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:39.505]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:03:39.505]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:03:39.505]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:03:39.508]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:39.508]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:03:39.511]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:03:39.511]          </block>
[02:03:39.511]          // end if-block "!hasDormant"
[02:03:39.511]        </control>
[02:03:39.511]        // end if-block "isSWJ"
[02:03:39.511]      </control>
[02:03:39.511]      <control if="!isSWJ" while="" timeout="0" info="">
[02:03:39.511]        // if-block "!isSWJ"
[02:03:39.511]          // =>  FALSE
[02:03:39.511]        // skip if-block "!isSWJ"
[02:03:39.511]      </control>
[02:03:39.511]      <block atomic="false" info="">
[02:03:39.512]        ReadDP(0x0);
[02:03:39.515]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:03:39.515]      </block>
[02:03:39.515]      // end if-block "protType == 2"
[02:03:39.515]    </control>
[02:03:39.515]  </sequence>
[02:03:39.515]  
[02:03:39.519]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:03:39.519]  
[02:03:39.519]  <debugvars>
[02:03:39.519]    // Pre-defined
[02:03:39.519]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:39.519]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:03:39.519]    __dp=0x00000000
[02:03:39.519]    __ap=0x00000000
[02:03:39.519]    __traceout=0x00000000      (Trace Disabled)
[02:03:39.519]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:39.519]    __FlashAddr=0x00000000
[02:03:39.519]    __FlashLen=0x00000000
[02:03:39.519]    __FlashArg=0x00000000
[02:03:39.519]    __FlashOp=0x00000000
[02:03:39.521]    __Result=0x00000000
[02:03:39.521]  </debugvars>
[02:03:39.521]  
[02:03:39.521]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:03:39.521]    <block atomic="false" info="">
[02:03:39.521]      __var SW_DP_ABORT       = 0x0;
[02:03:39.521]        // -> [SW_DP_ABORT <= 0x00000000]
[02:03:39.521]      __var DP_CTRL_STAT      = 0x4;
[02:03:39.522]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:03:39.522]      __var DP_SELECT         = 0x8;
[02:03:39.522]        // -> [DP_SELECT <= 0x00000008]
[02:03:39.522]      __var powered_down      = 0;
[02:03:39.522]        // -> [powered_down <= 0x00000000]
[02:03:39.522]      WriteDP(DP_SELECT, 0x00000000);
[02:03:39.522]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:03:39.522]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:03:39.525]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:03:39.525]        // -> [powered_down <= 0x00000001]
[02:03:39.525]    </block>
[02:03:39.525]    <control if="powered_down" while="" timeout="0" info="">
[02:03:39.525]      // if-block "powered_down"
[02:03:39.525]        // =>  TRUE
[02:03:39.525]      <block atomic="false" info="">
[02:03:39.525]        Message(0, "Debug/System power-up request sent");
[02:03:39.528]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:03:39.532]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:03:39.532]      </block>
[02:03:39.532]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:03:39.532]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:03:39.533]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:03:39.533]        // while-condition  =>  FALSE
[02:03:39.533]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:03:39.533]      </control>
[02:03:39.533]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:03:39.533]        // if-block "(__protocol & 0xFFFF) == 1"
[02:03:39.533]          // =>  FALSE
[02:03:39.535]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:03:39.535]      </control>
[02:03:39.535]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:03:39.535]        // if-block "(__protocol & 0xFFFF) == 2"
[02:03:39.535]          // =>  TRUE
[02:03:39.535]        <block atomic="false" info="">
[02:03:39.535]          Message(0, "executing SWD power up");
[02:03:39.535]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:03:39.540]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:03:39.540]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:03:39.542]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:03:39.542]        </block>
[02:03:39.542]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:03:39.542]      </control>
[02:03:39.542]      // end if-block "powered_down"
[02:03:39.542]    </control>
[02:03:39.542]    <block atomic="false" info="">
[02:03:39.544]      __var DEBUG_PORT_VAL    = 0;
[02:03:39.544]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:03:39.544]      __var ACCESS_POINT_VAL  = 0;
[02:03:39.544]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:03:39.544]      __ap = 1; 
[02:03:39.544]        // -> [__ap <= 0x00000001]
[02:03:39.544]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:03:39.547]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:03:39.547]      __ap = 4;
[02:03:39.547]        // -> [__ap <= 0x00000004]
[02:03:39.547]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:03:39.551]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:03:39.551]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:03:39.551]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:03:39.554]    </block>
[02:03:39.554]    <block atomic="false" info="">
[02:03:39.554]      __var nReset = 0x80;
[02:03:39.554]        // -> [nReset <= 0x00000080]
[02:03:39.554]      __var canReadPins = 0;
[02:03:39.554]        // -> [canReadPins <= 0x00000000]
[02:03:39.554]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:03:39.554]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:03:39.554]        // -> [canReadPins <= 0x00000001]
[02:03:39.554]    </block>
[02:03:39.554]    <control if="" while="1" timeout="200" info="">
[02:03:39.554]      // while "1"  (timeout="200")
[02:03:39.554]      // while-condition  =>  TRUE
[02:03:39.554]      // while "1"  (timeout="200")
[02:03:39.554]      // while-condition  =>  TRUE
[02:03:39.554]      // while "1"  (timeout="200")
[02:03:39.558]      // while-condition  =>  TRUE
[02:03:39.558]      // while "1"  (timeout="200")
[02:03:39.558]      // while-condition  =>  TRUE
[02:03:39.558]      // while "1"  (timeout="200")
[02:03:39.558]      // while-condition  =>  TRUE
[02:03:39.558]      // while "1"  (timeout="200")
[02:03:39.558]      // while-condition  =>  TRUE
[02:03:39.558]      // while "1"  (timeout="200")
[02:03:39.558]      // while-condition  =>  TRUE
[02:03:39.558]      // while "1"  (timeout="200")
[02:03:39.558]      // while-condition  =>  TRUE
[02:03:39.558]      // while "1"  (timeout="200")
[02:03:39.558]      // while-condition  =>  TRUE
[02:03:39.560]      // while "1"  (timeout="200")
[02:03:39.560]      // while-condition  =>  TRUE
[02:03:39.560]      // while "1"  (timeout="200")
[02:03:39.560]      // while-condition  =>  TRUE
[02:03:39.560]      // while "1"  (timeout="200")
[02:03:39.560]      // while-condition  =>  TRUE
[02:03:39.560]      // while "1"  (timeout="200")
[02:03:39.560]      // while-condition  =>  TRUE
[02:03:39.560]      // while "1"  (timeout="200")
[02:03:39.560]      // while-condition  =>  TRUE
[02:03:39.560]      // while "1"  (timeout="200")
[02:03:39.560]      // while-condition  =>  TRUE
[02:03:39.560]      // while "1"  (timeout="200")
[02:03:39.560]      // while-condition  =>  TRUE
[02:03:39.560]      // while "1"  (timeout="200")
[02:03:39.560]      // while-condition  =>  TRUE
[02:03:39.560]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.562]      // while "1"  (timeout="200")
[02:03:39.562]      // while-condition  =>  TRUE
[02:03:39.566]      // while "1"  (timeout="200")
[02:03:39.566]      // while  =>  TIMEOUT
[02:03:39.566]      // end while "1"
[02:03:39.566]    </control>
[02:03:39.566]    <control if="canReadPins" while="" timeout="0" info="">
[02:03:39.566]      // if-block "canReadPins"
[02:03:39.566]        // =>  TRUE
[02:03:39.566]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:03:39.566]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:03:39.566]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:03:39.566]        // while-condition  =>  FALSE
[02:03:39.566]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:03:39.566]      </control>
[02:03:39.566]      // end if-block "canReadPins"
[02:03:39.566]    </control>
[02:03:39.566]    <control if="!canReadPins" while="" timeout="0" info="">
[02:03:39.566]      // if-block "!canReadPins"
[02:03:39.566]        // =>  FALSE
[02:03:39.566]      // skip if-block "!canReadPins"
[02:03:39.570]    </control>
[02:03:39.570]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:03:39.570]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:03:39.570]        // =>  TRUE
[02:03:39.570]      <block atomic="false" info="">
[02:03:39.570]        WriteAP(0x00, 0x190008);
[02:03:39.570]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:03:39.570]        WriteAP(0xF0, 0x01);
[02:03:39.574]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:03:39.574]      </block>
[02:03:39.574]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:03:39.574]    </control>
[02:03:39.574]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:03:39.574]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:03:39.574]        // =>  FALSE
[02:03:39.574]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:03:39.574]    </control>
[02:03:39.574]    <block atomic="false" info="">
[02:03:39.574]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:03:39.583]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:03:39.583]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:03:39.583]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:03:39.586]      __ap = 0; //lets make sure we reset the access point selection
[02:03:39.586]        // -> [__ap <= 0x00000000]
[02:03:39.586]    </block>
[02:03:39.586]  </sequence>
[02:03:39.586]  
[02:03:39.610]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:03:39.610]  
[02:03:39.610]  <debugvars>
[02:03:39.610]    // Pre-defined
[02:03:39.611]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:39.611]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:03:39.611]    __dp=0x00000000
[02:03:39.611]    __ap=0x00000000
[02:03:39.611]    __traceout=0x00000000      (Trace Disabled)
[02:03:39.611]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:39.611]    __FlashAddr=0x00000000
[02:03:39.611]    __FlashLen=0x00000000
[02:03:39.611]    __FlashArg=0x00000000
[02:03:39.611]    __FlashOp=0x00000000
[02:03:39.611]    __Result=0x00000000
[02:03:39.611]  </debugvars>
[02:03:39.611]  
[02:03:39.611]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:03:39.611]    <block atomic="false" info="">
[02:03:39.611]      __var deviceID = 0;
[02:03:39.611]        // -> [deviceID <= 0x00000000]
[02:03:39.611]      __var version = 0;
[02:03:39.611]        // -> [version <= 0x00000000]
[02:03:39.614]      __var partNum = 0;
[02:03:39.614]        // -> [partNum <= 0x00000000]
[02:03:39.614]      __var manuf = 0;
[02:03:39.614]        // -> [manuf <= 0x00000000]
[02:03:39.614]      __var isMSPM0G1X0X_G3X0X = 0;
[02:03:39.614]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:03:39.614]      __var isProduction = 0;
[02:03:39.614]        // -> [isProduction <= 0x00000000]
[02:03:39.614]      __var continueId = 0;
[02:03:39.614]        // -> [continueId <= 0x00000000]
[02:03:39.616]      deviceID =   Read32(0x41C40004);
[02:03:39.620]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:03:39.620]        // -> [deviceID <= 0x2BB8802F]
[02:03:39.620]      version = deviceID >> 28;
[02:03:39.620]        // -> [version <= 0x00000002]
[02:03:39.620]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:03:39.620]        // -> [partNum <= 0x0000BB88]
[02:03:39.622]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:03:39.622]        // -> [manuf <= 0x00000017]
[02:03:39.622]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:03:39.622]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:03:39.622]      isProduction = (version > 0);
[02:03:39.622]        // -> [isProduction <= 0x00000001]
[02:03:39.622]    </block>
[02:03:39.622]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:03:39.622]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:03:39.622]        // =>  FALSE
[02:03:39.623]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:03:39.623]    </control>
[02:03:39.623]    <control if="continueId == 4" while="" timeout="0" info="">
[02:03:39.623]      // if-block "continueId == 4"
[02:03:39.623]        // =>  FALSE
[02:03:39.623]      // skip if-block "continueId == 4"
[02:03:39.623]    </control>
[02:03:39.623]    <control if="!isProduction" while="" timeout="0" info="">
[02:03:39.623]      // if-block "!isProduction"
[02:03:39.623]        // =>  FALSE
[02:03:39.624]      // skip if-block "!isProduction"
[02:03:39.624]    </control>
[02:03:39.624]  </sequence>
[02:03:39.624]  
[02:03:58.028]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:03:58.028]  
[02:03:58.036]  <debugvars>
[02:03:58.036]    // Pre-defined
[02:03:58.036]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:58.036]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:03:58.036]    __dp=0x00000000
[02:03:58.036]    __ap=0x00000000
[02:03:58.036]    __traceout=0x00000000      (Trace Disabled)
[02:03:58.036]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:58.036]    __FlashAddr=0x00000000
[02:03:58.036]    __FlashLen=0x00000000
[02:03:58.036]    __FlashArg=0x00000000
[02:03:58.036]    __FlashOp=0x00000000
[02:03:58.036]    __Result=0x00000000
[02:03:58.036]  </debugvars>
[02:03:58.036]  
[02:03:58.036]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:03:58.036]    <block atomic="false" info="">
[02:03:58.036]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:03:58.036]        // -> [isSWJ <= 0x00000001]
[02:03:58.036]      __var hasDormant = __protocol & 0x00020000;
[02:03:58.036]        // -> [hasDormant <= 0x00000000]
[02:03:58.036]      __var protType   = __protocol & 0x0000FFFF;
[02:03:58.036]        // -> [protType <= 0x00000002]
[02:03:58.036]    </block>
[02:03:58.036]    <control if="protType == 1" while="" timeout="0" info="">
[02:03:58.036]      // if-block "protType == 1"
[02:03:58.036]        // =>  FALSE
[02:03:58.036]      // skip if-block "protType == 1"
[02:03:58.036]    </control>
[02:03:58.036]    <control if="protType == 2" while="" timeout="0" info="">
[02:03:58.036]      // if-block "protType == 2"
[02:03:58.036]        // =>  TRUE
[02:03:58.036]      <control if="isSWJ" while="" timeout="0" info="">
[02:03:58.036]        // if-block "isSWJ"
[02:03:58.036]          // =>  TRUE
[02:03:58.036]        <control if="hasDormant" while="" timeout="0" info="">
[02:03:58.036]          // if-block "hasDormant"
[02:03:58.036]            // =>  FALSE
[02:03:58.036]          // skip if-block "hasDormant"
[02:03:58.040]        </control>
[02:03:58.040]        <control if="!hasDormant" while="" timeout="0" info="">
[02:03:58.040]          // if-block "!hasDormant"
[02:03:58.040]            // =>  TRUE
[02:03:58.040]          <block atomic="false" info="">
[02:03:58.040]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:03:58.043]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:58.043]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:03:58.045]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:03:58.045]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:03:58.045]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:58.045]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:03:58.049]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:03:58.049]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:03:58.049]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:03:58.049]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:03:58.053]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:03:58.053]          </block>
[02:03:58.053]          // end if-block "!hasDormant"
[02:03:58.053]        </control>
[02:03:58.053]        // end if-block "isSWJ"
[02:03:58.053]      </control>
[02:03:58.053]      <control if="!isSWJ" while="" timeout="0" info="">
[02:03:58.053]        // if-block "!isSWJ"
[02:03:58.053]          // =>  FALSE
[02:03:58.053]        // skip if-block "!isSWJ"
[02:03:58.053]      </control>
[02:03:58.053]      <block atomic="false" info="">
[02:03:58.053]        ReadDP(0x0);
[02:03:58.057]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:03:58.057]      </block>
[02:03:58.057]      // end if-block "protType == 2"
[02:03:58.057]    </control>
[02:03:58.057]  </sequence>
[02:03:58.057]  
[02:03:58.061]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:03:58.061]  
[02:03:58.061]  <debugvars>
[02:03:58.061]    // Pre-defined
[02:03:58.061]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:58.061]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:03:58.061]    __dp=0x00000000
[02:03:58.061]    __ap=0x00000000
[02:03:58.061]    __traceout=0x00000000      (Trace Disabled)
[02:03:58.061]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:58.061]    __FlashAddr=0x00000000
[02:03:58.061]    __FlashLen=0x00000000
[02:03:58.061]    __FlashArg=0x00000000
[02:03:58.061]    __FlashOp=0x00000000
[02:03:58.061]    __Result=0x00000000
[02:03:58.061]  </debugvars>
[02:03:58.061]  
[02:03:58.061]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:03:58.061]    <block atomic="false" info="">
[02:03:58.061]      __var SW_DP_ABORT       = 0x0;
[02:03:58.061]        // -> [SW_DP_ABORT <= 0x00000000]
[02:03:58.061]      __var DP_CTRL_STAT      = 0x4;
[02:03:58.061]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:03:58.061]      __var DP_SELECT         = 0x8;
[02:03:58.061]        // -> [DP_SELECT <= 0x00000008]
[02:03:58.061]      __var powered_down      = 0;
[02:03:58.061]        // -> [powered_down <= 0x00000000]
[02:03:58.061]      WriteDP(DP_SELECT, 0x00000000);
[02:03:58.066]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:03:58.066]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:03:58.069]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:03:58.069]        // -> [powered_down <= 0x00000001]
[02:03:58.069]    </block>
[02:03:58.069]    <control if="powered_down" while="" timeout="0" info="">
[02:03:58.069]      // if-block "powered_down"
[02:03:58.069]        // =>  TRUE
[02:03:58.073]      <block atomic="false" info="">
[02:03:58.073]        Message(0, "Debug/System power-up request sent");
[02:03:58.073]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:03:58.073]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:03:58.073]      </block>
[02:03:58.073]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:03:58.073]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:03:58.077]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:03:58.077]        // while-condition  =>  FALSE
[02:03:58.077]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:03:58.077]      </control>
[02:03:58.077]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:03:58.077]        // if-block "(__protocol & 0xFFFF) == 1"
[02:03:58.077]          // =>  FALSE
[02:03:58.077]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:03:58.077]      </control>
[02:03:58.077]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:03:58.077]        // if-block "(__protocol & 0xFFFF) == 2"
[02:03:58.077]          // =>  TRUE
[02:03:58.077]        <block atomic="false" info="">
[02:03:58.077]          Message(0, "executing SWD power up");
[02:03:58.081]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:03:58.081]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:03:58.081]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:03:58.085]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:03:58.085]        </block>
[02:03:58.085]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:03:58.085]      </control>
[02:03:58.085]      // end if-block "powered_down"
[02:03:58.085]    </control>
[02:03:58.085]    <block atomic="false" info="">
[02:03:58.085]      __var DEBUG_PORT_VAL    = 0;
[02:03:58.085]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:03:58.085]      __var ACCESS_POINT_VAL  = 0;
[02:03:58.085]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:03:58.085]      __ap = 1; 
[02:03:58.085]        // -> [__ap <= 0x00000001]
[02:03:58.085]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:03:58.089]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:03:58.089]      __ap = 4;
[02:03:58.089]        // -> [__ap <= 0x00000004]
[02:03:58.089]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:03:58.093]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:03:58.093]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:03:58.093]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:03:58.093]    </block>
[02:03:58.093]    <block atomic="false" info="">
[02:03:58.093]      __var nReset = 0x80;
[02:03:58.093]        // -> [nReset <= 0x00000080]
[02:03:58.097]      __var canReadPins = 0;
[02:03:58.097]        // -> [canReadPins <= 0x00000000]
[02:03:58.097]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:03:58.102]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:03:58.102]        // -> [canReadPins <= 0x00000001]
[02:03:58.102]    </block>
[02:03:58.102]    <control if="" while="1" timeout="200" info="">
[02:03:58.102]      // while "1"  (timeout="200")
[02:03:58.102]      // while-condition  =>  TRUE
[02:03:58.102]      // while "1"  (timeout="200")
[02:03:58.102]      // while-condition  =>  TRUE
[02:03:58.102]      // while "1"  (timeout="200")
[02:03:58.102]      // while-condition  =>  TRUE
[02:03:58.102]      // while "1"  (timeout="200")
[02:03:58.102]      // while-condition  =>  TRUE
[02:03:58.102]      // while "1"  (timeout="200")
[02:03:58.102]      // while-condition  =>  TRUE
[02:03:58.102]      // while "1"  (timeout="200")
[02:03:58.102]      // while-condition  =>  TRUE
[02:03:58.102]      // while "1"  (timeout="200")
[02:03:58.102]      // while-condition  =>  TRUE
[02:03:58.102]      // while "1"  (timeout="200")
[02:03:58.102]      // while-condition  =>  TRUE
[02:03:58.102]      // while "1"  (timeout="200")
[02:03:58.102]      // while-condition  =>  TRUE
[02:03:58.102]      // while "1"  (timeout="200")
[02:03:58.104]      // while-condition  =>  TRUE
[02:03:58.104]      // while "1"  (timeout="200")
[02:03:58.104]      // while-condition  =>  TRUE
[02:03:58.104]      // while "1"  (timeout="200")
[02:03:58.104]      // while-condition  =>  TRUE
[02:03:58.104]      // while "1"  (timeout="200")
[02:03:58.104]      // while-condition  =>  TRUE
[02:03:58.104]      // while "1"  (timeout="200")
[02:03:58.104]      // while-condition  =>  TRUE
[02:03:58.104]      // while "1"  (timeout="200")
[02:03:58.104]      // while-condition  =>  TRUE
[02:03:58.105]      // while "1"  (timeout="200")
[02:03:58.105]      // while-condition  =>  TRUE
[02:03:58.105]      // while "1"  (timeout="200")
[02:03:58.105]      // while-condition  =>  TRUE
[02:03:58.105]      // while "1"  (timeout="200")
[02:03:58.105]      // while-condition  =>  TRUE
[02:03:58.105]      // while "1"  (timeout="200")
[02:03:58.105]      // while-condition  =>  TRUE
[02:03:58.105]      // while "1"  (timeout="200")
[02:03:58.105]      // while-condition  =>  TRUE
[02:03:58.105]      // while "1"  (timeout="200")
[02:03:58.105]      // while-condition  =>  TRUE
[02:03:58.105]      // while "1"  (timeout="200")
[02:03:58.105]      // while-condition  =>  TRUE
[02:03:58.105]      // while "1"  (timeout="200")
[02:03:58.105]      // while-condition  =>  TRUE
[02:03:58.105]      // while "1"  (timeout="200")
[02:03:58.105]      // while-condition  =>  TRUE
[02:03:58.107]      // while "1"  (timeout="200")
[02:03:58.107]      // while-condition  =>  TRUE
[02:03:58.107]      // while "1"  (timeout="200")
[02:03:58.107]      // while-condition  =>  TRUE
[02:03:58.107]      // while "1"  (timeout="200")
[02:03:58.107]      // while-condition  =>  TRUE
[02:03:58.107]      // while "1"  (timeout="200")
[02:03:58.107]      // while-condition  =>  TRUE
[02:03:58.107]      // while "1"  (timeout="200")
[02:03:58.108]      // while-condition  =>  TRUE
[02:03:58.108]      // while "1"  (timeout="200")
[02:03:58.108]      // while-condition  =>  TRUE
[02:03:58.108]      // while "1"  (timeout="200")
[02:03:58.108]      // while-condition  =>  TRUE
[02:03:58.108]      // while "1"  (timeout="200")
[02:03:58.108]      // while-condition  =>  TRUE
[02:03:58.108]      // while "1"  (timeout="200")
[02:03:58.108]      // while-condition  =>  TRUE
[02:03:58.108]      // while "1"  (timeout="200")
[02:03:58.109]      // while-condition  =>  TRUE
[02:03:58.109]      // while "1"  (timeout="200")
[02:03:58.109]      // while-condition  =>  TRUE
[02:03:58.109]      // while "1"  (timeout="200")
[02:03:58.109]      // while-condition  =>  TRUE
[02:03:58.109]      // while "1"  (timeout="200")
[02:03:58.109]      // while-condition  =>  TRUE
[02:03:58.109]      // while "1"  (timeout="200")
[02:03:58.109]      // while-condition  =>  TRUE
[02:03:58.109]      // while "1"  (timeout="200")
[02:03:58.109]      // while-condition  =>  TRUE
[02:03:58.109]      // while "1"  (timeout="200")
[02:03:58.109]      // while-condition  =>  TRUE
[02:03:58.109]      // while "1"  (timeout="200")
[02:03:58.109]      // while-condition  =>  TRUE
[02:03:58.109]      // while "1"  (timeout="200")
[02:03:58.109]      // while-condition  =>  TRUE
[02:03:58.109]      // while "1"  (timeout="200")
[02:03:58.109]      // while-condition  =>  TRUE
[02:03:58.109]      // while "1"  (timeout="200")
[02:03:58.109]      // while-condition  =>  TRUE
[02:03:58.109]      // while "1"  (timeout="200")
[02:03:58.111]      // while-condition  =>  TRUE
[02:03:58.111]      // while "1"  (timeout="200")
[02:03:58.111]      // while  =>  TIMEOUT
[02:03:58.111]      // end while "1"
[02:03:58.111]    </control>
[02:03:58.111]    <control if="canReadPins" while="" timeout="0" info="">
[02:03:58.111]      // if-block "canReadPins"
[02:03:58.111]        // =>  TRUE
[02:03:58.111]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:03:58.111]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:03:58.120]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:03:58.120]        // while-condition  =>  FALSE
[02:03:58.120]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:03:58.120]      </control>
[02:03:58.120]      // end if-block "canReadPins"
[02:03:58.120]    </control>
[02:03:58.120]    <control if="!canReadPins" while="" timeout="0" info="">
[02:03:58.120]      // if-block "!canReadPins"
[02:03:58.120]        // =>  FALSE
[02:03:58.122]      // skip if-block "!canReadPins"
[02:03:58.122]    </control>
[02:03:58.122]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:03:58.122]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:03:58.122]        // =>  TRUE
[02:03:58.122]      <block atomic="false" info="">
[02:03:58.122]        WriteAP(0x00, 0x190008);
[02:03:58.123]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:03:58.124]        WriteAP(0xF0, 0x01);
[02:03:58.126]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:03:58.126]      </block>
[02:03:58.126]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:03:58.126]    </control>
[02:03:58.126]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:03:58.126]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:03:58.126]        // =>  FALSE
[02:03:58.126]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:03:58.126]    </control>
[02:03:58.126]    <block atomic="false" info="">
[02:03:58.126]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:03:58.131]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:03:58.132]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:03:58.132]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:03:58.133]      __ap = 0; //lets make sure we reset the access point selection
[02:03:58.133]        // -> [__ap <= 0x00000000]
[02:03:58.134]    </block>
[02:03:58.134]  </sequence>
[02:03:58.134]  
[02:03:58.162]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:03:58.162]  
[02:03:58.162]  <debugvars>
[02:03:58.162]    // Pre-defined
[02:03:58.162]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:03:58.162]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:03:58.162]    __dp=0x00000000
[02:03:58.162]    __ap=0x00000000
[02:03:58.162]    __traceout=0x00000000      (Trace Disabled)
[02:03:58.162]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:03:58.164]    __FlashAddr=0x00000000
[02:03:58.164]    __FlashLen=0x00000000
[02:03:58.164]    __FlashArg=0x00000000
[02:03:58.164]    __FlashOp=0x00000000
[02:03:58.164]    __Result=0x00000000
[02:03:58.164]  </debugvars>
[02:03:58.164]  
[02:03:58.164]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:03:58.166]    <block atomic="false" info="">
[02:03:58.166]      __var deviceID = 0;
[02:03:58.166]        // -> [deviceID <= 0x00000000]
[02:03:58.166]      __var version = 0;
[02:03:58.166]        // -> [version <= 0x00000000]
[02:03:58.166]      __var partNum = 0;
[02:03:58.166]        // -> [partNum <= 0x00000000]
[02:03:58.166]      __var manuf = 0;
[02:03:58.166]        // -> [manuf <= 0x00000000]
[02:03:58.167]      __var isMSPM0G1X0X_G3X0X = 0;
[02:03:58.167]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:03:58.167]      __var isProduction = 0;
[02:03:58.167]        // -> [isProduction <= 0x00000000]
[02:03:58.167]      __var continueId = 0;
[02:03:58.167]        // -> [continueId <= 0x00000000]
[02:03:58.167]      deviceID =   Read32(0x41C40004);
[02:03:58.173]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:03:58.173]        // -> [deviceID <= 0x2BB8802F]
[02:03:58.173]      version = deviceID >> 28;
[02:03:58.173]        // -> [version <= 0x00000002]
[02:03:58.173]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:03:58.173]        // -> [partNum <= 0x0000BB88]
[02:03:58.173]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:03:58.173]        // -> [manuf <= 0x00000017]
[02:03:58.173]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:03:58.173]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:03:58.173]      isProduction = (version > 0);
[02:03:58.173]        // -> [isProduction <= 0x00000001]
[02:03:58.173]    </block>
[02:03:58.173]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:03:58.173]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:03:58.173]        // =>  FALSE
[02:03:58.173]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:03:58.173]    </control>
[02:03:58.173]    <control if="continueId == 4" while="" timeout="0" info="">
[02:03:58.173]      // if-block "continueId == 4"
[02:03:58.173]        // =>  FALSE
[02:03:58.173]      // skip if-block "continueId == 4"
[02:03:58.177]    </control>
[02:03:58.177]    <control if="!isProduction" while="" timeout="0" info="">
[02:03:58.177]      // if-block "!isProduction"
[02:03:58.177]        // =>  FALSE
[02:03:58.177]      // skip if-block "!isProduction"
[02:03:58.178]    </control>
[02:03:58.178]  </sequence>
[02:03:58.178]  
[02:05:29.786]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:05:29.786]  
[02:05:29.794]  <debugvars>
[02:05:29.794]    // Pre-defined
[02:05:29.794]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:05:29.794]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:05:29.794]    __dp=0x00000000
[02:05:29.794]    __ap=0x00000000
[02:05:29.794]    __traceout=0x00000000      (Trace Disabled)
[02:05:29.794]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:05:29.794]    __FlashAddr=0x00000000
[02:05:29.794]    __FlashLen=0x00000000
[02:05:29.794]    __FlashArg=0x00000000
[02:05:29.794]    __FlashOp=0x00000000
[02:05:29.794]    __Result=0x00000000
[02:05:29.794]  </debugvars>
[02:05:29.794]  
[02:05:29.794]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:05:29.794]    <block atomic="false" info="">
[02:05:29.796]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:05:29.796]        // -> [isSWJ <= 0x00000001]
[02:05:29.796]      __var hasDormant = __protocol & 0x00020000;
[02:05:29.796]        // -> [hasDormant <= 0x00000000]
[02:05:29.796]      __var protType   = __protocol & 0x0000FFFF;
[02:05:29.796]        // -> [protType <= 0x00000002]
[02:05:29.796]    </block>
[02:05:29.796]    <control if="protType == 1" while="" timeout="0" info="">
[02:05:29.796]      // if-block "protType == 1"
[02:05:29.796]        // =>  FALSE
[02:05:29.796]      // skip if-block "protType == 1"
[02:05:29.796]    </control>
[02:05:29.796]    <control if="protType == 2" while="" timeout="0" info="">
[02:05:29.796]      // if-block "protType == 2"
[02:05:29.798]        // =>  TRUE
[02:05:29.798]      <control if="isSWJ" while="" timeout="0" info="">
[02:05:29.798]        // if-block "isSWJ"
[02:05:29.798]          // =>  TRUE
[02:05:29.798]        <control if="hasDormant" while="" timeout="0" info="">
[02:05:29.798]          // if-block "hasDormant"
[02:05:29.798]            // =>  FALSE
[02:05:29.798]          // skip if-block "hasDormant"
[02:05:29.798]        </control>
[02:05:29.798]        <control if="!hasDormant" while="" timeout="0" info="">
[02:05:29.799]          // if-block "!hasDormant"
[02:05:29.799]            // =>  TRUE
[02:05:29.799]          <block atomic="false" info="">
[02:05:29.799]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:05:29.802]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:05:29.802]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:05:29.802]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:05:29.802]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:05:29.806]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:05:29.806]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:05:29.808]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:05:29.808]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:05:29.810]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:05:29.810]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:05:29.811]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:05:29.811]          </block>
[02:05:29.811]          // end if-block "!hasDormant"
[02:05:29.811]        </control>
[02:05:29.811]        // end if-block "isSWJ"
[02:05:29.811]      </control>
[02:05:29.811]      <control if="!isSWJ" while="" timeout="0" info="">
[02:05:29.811]        // if-block "!isSWJ"
[02:05:29.811]          // =>  FALSE
[02:05:29.811]        // skip if-block "!isSWJ"
[02:05:29.811]      </control>
[02:05:29.811]      <block atomic="false" info="">
[02:05:29.811]        ReadDP(0x0);
[02:05:29.814]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:05:29.814]      </block>
[02:05:29.814]      // end if-block "protType == 2"
[02:05:29.814]    </control>
[02:05:29.814]  </sequence>
[02:05:29.814]  
[02:05:29.818]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:05:29.818]  
[02:05:29.819]  <debugvars>
[02:05:29.819]    // Pre-defined
[02:05:29.819]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:05:29.819]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:05:29.819]    __dp=0x00000000
[02:05:29.819]    __ap=0x00000000
[02:05:29.819]    __traceout=0x00000000      (Trace Disabled)
[02:05:29.819]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:05:29.819]    __FlashAddr=0x00000000
[02:05:29.820]    __FlashLen=0x00000000
[02:05:29.820]    __FlashArg=0x00000000
[02:05:29.820]    __FlashOp=0x00000000
[02:05:29.820]    __Result=0x00000000
[02:05:29.820]  </debugvars>
[02:05:29.820]  
[02:05:29.820]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:05:29.820]    <block atomic="false" info="">
[02:05:29.820]      __var SW_DP_ABORT       = 0x0;
[02:05:29.820]        // -> [SW_DP_ABORT <= 0x00000000]
[02:05:29.820]      __var DP_CTRL_STAT      = 0x4;
[02:05:29.820]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:05:29.820]      __var DP_SELECT         = 0x8;
[02:05:29.822]        // -> [DP_SELECT <= 0x00000008]
[02:05:29.822]      __var powered_down      = 0;
[02:05:29.822]        // -> [powered_down <= 0x00000000]
[02:05:29.822]      WriteDP(DP_SELECT, 0x00000000);
[02:05:29.823]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:05:29.823]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:05:29.826]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:05:29.826]        // -> [powered_down <= 0x00000001]
[02:05:29.826]    </block>
[02:05:29.826]    <control if="powered_down" while="" timeout="0" info="">
[02:05:29.826]      // if-block "powered_down"
[02:05:29.826]        // =>  TRUE
[02:05:29.826]      <block atomic="false" info="">
[02:05:29.826]        Message(0, "Debug/System power-up request sent");
[02:05:29.830]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:05:29.832]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:05:29.832]      </block>
[02:05:29.832]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:05:29.832]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:05:29.835]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:05:29.835]        // while-condition  =>  FALSE
[02:05:29.835]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:05:29.835]      </control>
[02:05:29.835]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:05:29.835]        // if-block "(__protocol & 0xFFFF) == 1"
[02:05:29.835]          // =>  FALSE
[02:05:29.835]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:05:29.835]      </control>
[02:05:29.835]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:05:29.835]        // if-block "(__protocol & 0xFFFF) == 2"
[02:05:29.835]          // =>  TRUE
[02:05:29.835]        <block atomic="false" info="">
[02:05:29.835]          Message(0, "executing SWD power up");
[02:05:29.839]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:05:29.842]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:05:29.842]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:05:29.844]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:05:29.844]        </block>
[02:05:29.844]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:05:29.844]      </control>
[02:05:29.844]      // end if-block "powered_down"
[02:05:29.844]    </control>
[02:05:29.844]    <block atomic="false" info="">
[02:05:29.844]      __var DEBUG_PORT_VAL    = 0;
[02:05:29.846]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:05:29.846]      __var ACCESS_POINT_VAL  = 0;
[02:05:29.846]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:05:29.846]      __ap = 1; 
[02:05:29.846]        // -> [__ap <= 0x00000001]
[02:05:29.846]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:05:29.851]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:05:29.851]      __ap = 4;
[02:05:29.851]        // -> [__ap <= 0x00000004]
[02:05:29.851]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:05:29.854]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:05:29.854]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:05:29.855]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:05:29.856]    </block>
[02:05:29.857]    <block atomic="false" info="">
[02:05:29.858]      __var nReset = 0x80;
[02:05:29.858]        // -> [nReset <= 0x00000080]
[02:05:29.858]      __var canReadPins = 0;
[02:05:29.858]        // -> [canReadPins <= 0x00000000]
[02:05:29.858]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:05:29.858]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:05:29.858]        // -> [canReadPins <= 0x00000001]
[02:05:29.858]    </block>
[02:05:29.858]    <control if="" while="1" timeout="200" info="">
[02:05:29.860]      // while "1"  (timeout="200")
[02:05:29.860]      // while-condition  =>  TRUE
[02:05:29.860]      // while "1"  (timeout="200")
[02:05:29.860]      // while-condition  =>  TRUE
[02:05:29.860]      // while "1"  (timeout="200")
[02:05:29.860]      // while-condition  =>  TRUE
[02:05:29.860]      // while "1"  (timeout="200")
[02:05:29.860]      // while-condition  =>  TRUE
[02:05:29.860]      // while "1"  (timeout="200")
[02:05:29.860]      // while-condition  =>  TRUE
[02:05:29.860]      // while "1"  (timeout="200")
[02:05:29.860]      // while-condition  =>  TRUE
[02:05:29.862]      // while "1"  (timeout="200")
[02:05:29.862]      // while-condition  =>  TRUE
[02:05:29.862]      // while "1"  (timeout="200")
[02:05:29.862]      // while-condition  =>  TRUE
[02:05:29.862]      // while "1"  (timeout="200")
[02:05:29.862]      // while-condition  =>  TRUE
[02:05:29.862]      // while "1"  (timeout="200")
[02:05:29.863]      // while-condition  =>  TRUE
[02:05:29.863]      // while "1"  (timeout="200")
[02:05:29.863]      // while-condition  =>  TRUE
[02:05:29.863]      // while "1"  (timeout="200")
[02:05:29.863]      // while-condition  =>  TRUE
[02:05:29.863]      // while "1"  (timeout="200")
[02:05:29.863]      // while-condition  =>  TRUE
[02:05:29.863]      // while "1"  (timeout="200")
[02:05:29.863]      // while-condition  =>  TRUE
[02:05:29.863]      // while "1"  (timeout="200")
[02:05:29.863]      // while-condition  =>  TRUE
[02:05:29.865]      // while "1"  (timeout="200")
[02:05:29.865]      // while-condition  =>  TRUE
[02:05:29.865]      // while "1"  (timeout="200")
[02:05:29.865]      // while-condition  =>  TRUE
[02:05:29.865]      // while "1"  (timeout="200")
[02:05:29.865]      // while-condition  =>  TRUE
[02:05:29.865]      // while "1"  (timeout="200")
[02:05:29.865]      // while-condition  =>  TRUE
[02:05:29.865]      // while "1"  (timeout="200")
[02:05:29.865]      // while-condition  =>  TRUE
[02:05:29.865]      // while "1"  (timeout="200")
[02:05:29.865]      // while-condition  =>  TRUE
[02:05:29.865]      // while "1"  (timeout="200")
[02:05:29.865]      // while-condition  =>  TRUE
[02:05:29.865]      // while "1"  (timeout="200")
[02:05:29.867]      // while-condition  =>  TRUE
[02:05:29.867]      // while "1"  (timeout="200")
[02:05:29.867]      // while-condition  =>  TRUE
[02:05:29.867]      // while "1"  (timeout="200")
[02:05:29.867]      // while-condition  =>  TRUE
[02:05:29.867]      // while "1"  (timeout="200")
[02:05:29.867]      // while-condition  =>  TRUE
[02:05:29.867]      // while "1"  (timeout="200")
[02:05:29.867]      // while-condition  =>  TRUE
[02:05:29.867]      // while "1"  (timeout="200")
[02:05:29.867]      // while-condition  =>  TRUE
[02:05:29.867]      // while "1"  (timeout="200")
[02:05:29.867]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.869]      // while "1"  (timeout="200")
[02:05:29.869]      // while-condition  =>  TRUE
[02:05:29.873]      // while "1"  (timeout="200")
[02:05:29.873]      // while-condition  =>  TRUE
[02:05:29.873]      // while "1"  (timeout="200")
[02:05:29.873]      // while-condition  =>  TRUE
[02:05:29.873]      // while "1"  (timeout="200")
[02:05:29.873]      // while-condition  =>  TRUE
[02:05:29.873]      // while "1"  (timeout="200")
[02:05:29.873]      // while-condition  =>  TRUE
[02:05:29.873]      // while "1"  (timeout="200")
[02:05:29.873]      // while-condition  =>  TRUE
[02:05:29.873]      // while "1"  (timeout="200")
[02:05:29.873]      // while-condition  =>  TRUE
[02:05:29.873]      // while "1"  (timeout="200")
[02:05:29.873]      // while-condition  =>  TRUE
[02:05:29.873]      // while "1"  (timeout="200")
[02:05:29.873]      // while-condition  =>  TRUE
[02:05:29.873]      // while "1"  (timeout="200")
[02:05:29.873]      // while-condition  =>  TRUE
[02:05:29.875]      // while "1"  (timeout="200")
[02:05:29.875]      // while-condition  =>  TRUE
[02:05:29.875]      // while "1"  (timeout="200")
[02:05:29.875]      // while-condition  =>  TRUE
[02:05:29.875]      // while "1"  (timeout="200")
[02:05:29.875]      // while-condition  =>  TRUE
[02:05:29.875]      // while "1"  (timeout="200")
[02:05:29.875]      // while-condition  =>  TRUE
[02:05:29.875]      // while "1"  (timeout="200")
[02:05:29.875]      // while-condition  =>  TRUE
[02:05:29.875]      // while "1"  (timeout="200")
[02:05:29.875]      // while-condition  =>  TRUE
[02:05:29.875]      // while "1"  (timeout="200")
[02:05:29.875]      // while-condition  =>  TRUE
[02:05:29.877]      // while "1"  (timeout="200")
[02:05:29.877]      // while  =>  TIMEOUT
[02:05:29.877]      // end while "1"
[02:05:29.877]    </control>
[02:05:29.877]    <control if="canReadPins" while="" timeout="0" info="">
[02:05:29.877]      // if-block "canReadPins"
[02:05:29.878]        // =>  TRUE
[02:05:29.878]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:05:29.878]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:05:29.880]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:05:29.880]        // while-condition  =>  FALSE
[02:05:29.880]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:05:29.880]      </control>
[02:05:29.880]      // end if-block "canReadPins"
[02:05:29.880]    </control>
[02:05:29.880]    <control if="!canReadPins" while="" timeout="0" info="">
[02:05:29.880]      // if-block "!canReadPins"
[02:05:29.882]        // =>  FALSE
[02:05:29.882]      // skip if-block "!canReadPins"
[02:05:29.882]    </control>
[02:05:29.882]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:05:29.882]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:05:29.882]        // =>  TRUE
[02:05:29.882]      <block atomic="false" info="">
[02:05:29.882]        WriteAP(0x00, 0x190008);
[02:05:29.883]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:05:29.883]        WriteAP(0xF0, 0x01);
[02:05:29.886]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:05:29.886]      </block>
[02:05:29.886]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:05:29.886]    </control>
[02:05:29.886]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:05:29.886]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:05:29.886]        // =>  FALSE
[02:05:29.886]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:05:29.886]    </control>
[02:05:29.886]    <block atomic="false" info="">
[02:05:29.886]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:05:29.894]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:05:29.894]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:05:29.894]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:05:29.897]      __ap = 0; //lets make sure we reset the access point selection
[02:05:29.897]        // -> [__ap <= 0x00000000]
[02:05:29.897]    </block>
[02:05:29.897]  </sequence>
[02:05:29.897]  
[02:05:29.920]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:05:29.920]  
[02:05:29.921]  <debugvars>
[02:05:29.921]    // Pre-defined
[02:05:29.921]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:05:29.921]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:05:29.921]    __dp=0x00000000
[02:05:29.921]    __ap=0x00000000
[02:05:29.921]    __traceout=0x00000000      (Trace Disabled)
[02:05:29.921]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:05:29.921]    __FlashAddr=0x00000000
[02:05:29.921]    __FlashLen=0x00000000
[02:05:29.921]    __FlashArg=0x00000000
[02:05:29.921]    __FlashOp=0x00000000
[02:05:29.921]    __Result=0x00000000
[02:05:29.923]  </debugvars>
[02:05:29.923]  
[02:05:29.923]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:05:29.923]    <block atomic="false" info="">
[02:05:29.923]      __var deviceID = 0;
[02:05:29.923]        // -> [deviceID <= 0x00000000]
[02:05:29.923]      __var version = 0;
[02:05:29.923]        // -> [version <= 0x00000000]
[02:05:29.923]      __var partNum = 0;
[02:05:29.923]        // -> [partNum <= 0x00000000]
[02:05:29.924]      __var manuf = 0;
[02:05:29.924]        // -> [manuf <= 0x00000000]
[02:05:29.924]      __var isMSPM0G1X0X_G3X0X = 0;
[02:05:29.924]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:05:29.924]      __var isProduction = 0;
[02:05:29.924]        // -> [isProduction <= 0x00000000]
[02:05:29.924]      __var continueId = 0;
[02:05:29.924]        // -> [continueId <= 0x00000000]
[02:05:29.924]      deviceID =   Read32(0x41C40004);
[02:05:29.930]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:05:29.930]        // -> [deviceID <= 0x2BB8802F]
[02:05:29.930]      version = deviceID >> 28;
[02:05:29.930]        // -> [version <= 0x00000002]
[02:05:29.930]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:05:29.930]        // -> [partNum <= 0x0000BB88]
[02:05:29.930]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:05:29.930]        // -> [manuf <= 0x00000017]
[02:05:29.930]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:05:29.931]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:05:29.931]      isProduction = (version > 0);
[02:05:29.931]        // -> [isProduction <= 0x00000001]
[02:05:29.931]    </block>
[02:05:29.931]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:05:29.931]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:05:29.931]        // =>  FALSE
[02:05:29.931]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:05:29.931]    </control>
[02:05:29.931]    <control if="continueId == 4" while="" timeout="0" info="">
[02:05:29.931]      // if-block "continueId == 4"
[02:05:29.931]        // =>  FALSE
[02:05:29.931]      // skip if-block "continueId == 4"
[02:05:29.933]    </control>
[02:05:29.933]    <control if="!isProduction" while="" timeout="0" info="">
[02:05:29.933]      // if-block "!isProduction"
[02:05:29.933]        // =>  FALSE
[02:05:29.933]      // skip if-block "!isProduction"
[02:05:29.933]    </control>
[02:05:29.933]  </sequence>
[02:05:29.933]  
[02:05:35.937]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:05:35.937]  
[02:05:35.947]  <debugvars>
[02:05:35.947]    // Pre-defined
[02:05:35.947]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:05:35.947]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:05:35.947]    __dp=0x00000000
[02:05:35.947]    __ap=0x00000000
[02:05:35.947]    __traceout=0x00000000      (Trace Disabled)
[02:05:35.947]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:05:35.947]    __FlashAddr=0x00000000
[02:05:35.947]    __FlashLen=0x00000000
[02:05:35.947]    __FlashArg=0x00000000
[02:05:35.947]    __FlashOp=0x00000000
[02:05:35.947]    __Result=0x00000000
[02:05:35.947]  </debugvars>
[02:05:35.947]  
[02:05:35.947]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:05:35.947]    <block atomic="false" info="">
[02:05:35.947]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:05:35.949]        // -> [isSWJ <= 0x00000001]
[02:05:35.949]      __var hasDormant = __protocol & 0x00020000;
[02:05:35.949]        // -> [hasDormant <= 0x00000000]
[02:05:35.949]      __var protType   = __protocol & 0x0000FFFF;
[02:05:35.949]        // -> [protType <= 0x00000002]
[02:05:35.949]    </block>
[02:05:35.949]    <control if="protType == 1" while="" timeout="0" info="">
[02:05:35.949]      // if-block "protType == 1"
[02:05:35.949]        // =>  FALSE
[02:05:35.949]      // skip if-block "protType == 1"
[02:05:35.949]    </control>
[02:05:35.949]    <control if="protType == 2" while="" timeout="0" info="">
[02:05:35.949]      // if-block "protType == 2"
[02:05:35.949]        // =>  TRUE
[02:05:35.949]      <control if="isSWJ" while="" timeout="0" info="">
[02:05:35.949]        // if-block "isSWJ"
[02:05:35.949]          // =>  TRUE
[02:05:35.949]        <control if="hasDormant" while="" timeout="0" info="">
[02:05:35.949]          // if-block "hasDormant"
[02:05:35.949]            // =>  FALSE
[02:05:35.949]          // skip if-block "hasDormant"
[02:05:35.949]        </control>
[02:05:35.949]        <control if="!hasDormant" while="" timeout="0" info="">
[02:05:35.949]          // if-block "!hasDormant"
[02:05:35.953]            // =>  TRUE
[02:05:35.953]          <block atomic="false" info="">
[02:05:35.953]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:05:35.953]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:05:35.953]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:05:35.961]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:05:35.961]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:05:35.961]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:05:35.961]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:05:35.961]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:05:35.961]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:05:35.965]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:05:35.965]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:05:35.970]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:05:35.970]          </block>
[02:05:35.970]          // end if-block "!hasDormant"
[02:05:35.970]        </control>
[02:05:35.970]        // end if-block "isSWJ"
[02:05:35.970]      </control>
[02:05:35.970]      <control if="!isSWJ" while="" timeout="0" info="">
[02:05:35.970]        // if-block "!isSWJ"
[02:05:35.971]          // =>  FALSE
[02:05:35.971]        // skip if-block "!isSWJ"
[02:05:35.971]      </control>
[02:05:35.971]      <block atomic="false" info="">
[02:05:35.972]        ReadDP(0x0);
[02:05:35.972]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:05:35.972]      </block>
[02:05:35.972]      // end if-block "protType == 2"
[02:05:35.972]    </control>
[02:05:35.974]  </sequence>
[02:05:35.974]  
[02:05:35.974]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:05:35.974]  
[02:05:35.974]  <debugvars>
[02:05:35.974]    // Pre-defined
[02:05:35.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:05:35.974]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:05:35.974]    __dp=0x00000000
[02:05:35.974]    __ap=0x00000000
[02:05:35.974]    __traceout=0x00000000      (Trace Disabled)
[02:05:35.974]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:05:35.974]    __FlashAddr=0x00000000
[02:05:35.978]    __FlashLen=0x00000000
[02:05:35.978]    __FlashArg=0x00000000
[02:05:35.978]    __FlashOp=0x00000000
[02:05:35.978]    __Result=0x00000000
[02:05:35.978]  </debugvars>
[02:05:35.978]  
[02:05:35.978]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:05:35.978]    <block atomic="false" info="">
[02:05:35.978]      __var SW_DP_ABORT       = 0x0;
[02:05:35.978]        // -> [SW_DP_ABORT <= 0x00000000]
[02:05:35.978]      __var DP_CTRL_STAT      = 0x4;
[02:05:35.978]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:05:35.978]      __var DP_SELECT         = 0x8;
[02:05:35.978]        // -> [DP_SELECT <= 0x00000008]
[02:05:35.978]      __var powered_down      = 0;
[02:05:35.978]        // -> [powered_down <= 0x00000000]
[02:05:35.978]      WriteDP(DP_SELECT, 0x00000000);
[02:05:35.978]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:05:35.978]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:05:35.982]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:05:35.982]        // -> [powered_down <= 0x00000001]
[02:05:35.982]    </block>
[02:05:35.982]    <control if="powered_down" while="" timeout="0" info="">
[02:05:35.982]      // if-block "powered_down"
[02:05:35.982]        // =>  TRUE
[02:05:35.982]      <block atomic="false" info="">
[02:05:35.982]        Message(0, "Debug/System power-up request sent");
[02:05:35.982]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:05:35.986]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:05:35.986]      </block>
[02:05:35.986]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:05:35.986]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:05:35.989]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:05:35.989]        // while-condition  =>  FALSE
[02:05:35.989]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:05:35.989]      </control>
[02:05:35.989]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:05:35.989]        // if-block "(__protocol & 0xFFFF) == 1"
[02:05:35.989]          // =>  FALSE
[02:05:35.990]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:05:35.990]      </control>
[02:05:35.991]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:05:35.991]        // if-block "(__protocol & 0xFFFF) == 2"
[02:05:35.991]          // =>  TRUE
[02:05:35.991]        <block atomic="false" info="">
[02:05:35.991]          Message(0, "executing SWD power up");
[02:05:35.992]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:05:35.994]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:05:35.994]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:05:35.994]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:05:35.994]        </block>
[02:05:35.994]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:05:35.994]      </control>
[02:05:35.994]      // end if-block "powered_down"
[02:05:35.994]    </control>
[02:05:35.994]    <block atomic="false" info="">
[02:05:35.994]      __var DEBUG_PORT_VAL    = 0;
[02:05:35.994]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:05:35.994]      __var ACCESS_POINT_VAL  = 0;
[02:05:35.994]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:05:35.998]      __ap = 1; 
[02:05:35.998]        // -> [__ap <= 0x00000001]
[02:05:35.998]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:05:36.001]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:05:36.001]      __ap = 4;
[02:05:36.001]        // -> [__ap <= 0x00000004]
[02:05:36.001]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:05:36.003]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:05:36.003]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:05:36.003]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:05:36.006]    </block>
[02:05:36.006]    <block atomic="false" info="">
[02:05:36.006]      __var nReset = 0x80;
[02:05:36.006]        // -> [nReset <= 0x00000080]
[02:05:36.006]      __var canReadPins = 0;
[02:05:36.006]        // -> [canReadPins <= 0x00000000]
[02:05:36.006]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:05:36.008]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:05:36.008]        // -> [canReadPins <= 0x00000001]
[02:05:36.008]    </block>
[02:05:36.010]    <control if="" while="1" timeout="200" info="">
[02:05:36.010]      // while "1"  (timeout="200")
[02:05:36.010]      // while-condition  =>  TRUE
[02:05:36.010]      // while "1"  (timeout="200")
[02:05:36.010]      // while-condition  =>  TRUE
[02:05:36.010]      // while "1"  (timeout="200")
[02:05:36.010]      // while-condition  =>  TRUE
[02:05:36.010]      // while "1"  (timeout="200")
[02:05:36.010]      // while-condition  =>  TRUE
[02:05:36.010]      // while "1"  (timeout="200")
[02:05:36.010]      // while-condition  =>  TRUE
[02:05:36.010]      // while "1"  (timeout="200")
[02:05:36.010]      // while-condition  =>  TRUE
[02:05:36.010]      // while "1"  (timeout="200")
[02:05:36.010]      // while-condition  =>  TRUE
[02:05:36.010]      // while "1"  (timeout="200")
[02:05:36.010]      // while-condition  =>  TRUE
[02:05:36.012]      // while "1"  (timeout="200")
[02:05:36.012]      // while-condition  =>  TRUE
[02:05:36.012]      // while "1"  (timeout="200")
[02:05:36.012]      // while-condition  =>  TRUE
[02:05:36.013]      // while "1"  (timeout="200")
[02:05:36.013]      // while-condition  =>  TRUE
[02:05:36.013]      // while "1"  (timeout="200")
[02:05:36.013]      // while-condition  =>  TRUE
[02:05:36.013]      // while "1"  (timeout="200")
[02:05:36.013]      // while-condition  =>  TRUE
[02:05:36.013]      // while "1"  (timeout="200")
[02:05:36.013]      // while-condition  =>  TRUE
[02:05:36.013]      // while "1"  (timeout="200")
[02:05:36.013]      // while-condition  =>  TRUE
[02:05:36.014]      // while "1"  (timeout="200")
[02:05:36.014]      // while-condition  =>  TRUE
[02:05:36.014]      // while "1"  (timeout="200")
[02:05:36.014]      // while-condition  =>  TRUE
[02:05:36.014]      // while "1"  (timeout="200")
[02:05:36.014]      // while-condition  =>  TRUE
[02:05:36.014]      // while "1"  (timeout="200")
[02:05:36.014]      // while-condition  =>  TRUE
[02:05:36.014]      // while "1"  (timeout="200")
[02:05:36.014]      // while-condition  =>  TRUE
[02:05:36.014]      // while "1"  (timeout="200")
[02:05:36.014]      // while-condition  =>  TRUE
[02:05:36.016]      // while "1"  (timeout="200")
[02:05:36.016]      // while-condition  =>  TRUE
[02:05:36.016]      // while "1"  (timeout="200")
[02:05:36.016]      // while-condition  =>  TRUE
[02:05:36.016]      // while "1"  (timeout="200")
[02:05:36.016]      // while-condition  =>  TRUE
[02:05:36.016]      // while "1"  (timeout="200")
[02:05:36.016]      // while-condition  =>  TRUE
[02:05:36.016]      // while "1"  (timeout="200")
[02:05:36.016]      // while-condition  =>  TRUE
[02:05:36.016]      // while "1"  (timeout="200")
[02:05:36.016]      // while-condition  =>  TRUE
[02:05:36.016]      // while "1"  (timeout="200")
[02:05:36.016]      // while-condition  =>  TRUE
[02:05:36.017]      // while "1"  (timeout="200")
[02:05:36.017]      // while  =>  TIMEOUT
[02:05:36.017]      // end while "1"
[02:05:36.017]    </control>
[02:05:36.017]    <control if="canReadPins" while="" timeout="0" info="">
[02:05:36.018]      // if-block "canReadPins"
[02:05:36.018]        // =>  TRUE
[02:05:36.018]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:05:36.018]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:05:36.018]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:05:36.018]        // while-condition  =>  FALSE
[02:05:36.018]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:05:36.018]      </control>
[02:05:36.018]      // end if-block "canReadPins"
[02:05:36.018]    </control>
[02:05:36.018]    <control if="!canReadPins" while="" timeout="0" info="">
[02:05:36.018]      // if-block "!canReadPins"
[02:05:36.018]        // =>  FALSE
[02:05:36.018]      // skip if-block "!canReadPins"
[02:05:36.018]    </control>
[02:05:36.018]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:05:36.022]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:05:36.022]        // =>  TRUE
[02:05:36.022]      <block atomic="false" info="">
[02:05:36.022]        WriteAP(0x00, 0x190008);
[02:05:36.023]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:05:36.023]        WriteAP(0xF0, 0x01);
[02:05:36.026]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:05:36.026]      </block>
[02:05:36.026]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:05:36.026]    </control>
[02:05:36.026]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:05:36.026]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:05:36.030]        // =>  FALSE
[02:05:36.030]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:05:36.030]    </control>
[02:05:36.030]    <block atomic="false" info="">
[02:05:36.030]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:05:36.030]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:05:36.030]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:05:36.030]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:05:36.036]      __ap = 0; //lets make sure we reset the access point selection
[02:05:36.036]        // -> [__ap <= 0x00000000]
[02:05:36.036]    </block>
[02:05:36.036]  </sequence>
[02:05:36.036]  
[02:05:36.055]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:05:36.055]  
[02:05:36.055]  <debugvars>
[02:05:36.059]    // Pre-defined
[02:05:36.059]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:05:36.059]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:05:36.059]    __dp=0x00000000
[02:05:36.059]    __ap=0x00000000
[02:05:36.059]    __traceout=0x00000000      (Trace Disabled)
[02:05:36.059]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:05:36.060]    __FlashAddr=0x00000000
[02:05:36.060]    __FlashLen=0x00000000
[02:05:36.060]    __FlashArg=0x00000000
[02:05:36.060]    __FlashOp=0x00000000
[02:05:36.060]    __Result=0x00000000
[02:05:36.060]  </debugvars>
[02:05:36.060]  
[02:05:36.060]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:05:36.060]    <block atomic="false" info="">
[02:05:36.060]      __var deviceID = 0;
[02:05:36.060]        // -> [deviceID <= 0x00000000]
[02:05:36.060]      __var version = 0;
[02:05:36.061]        // -> [version <= 0x00000000]
[02:05:36.061]      __var partNum = 0;
[02:05:36.061]        // -> [partNum <= 0x00000000]
[02:05:36.061]      __var manuf = 0;
[02:05:36.061]        // -> [manuf <= 0x00000000]
[02:05:36.061]      __var isMSPM0G1X0X_G3X0X = 0;
[02:05:36.061]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:05:36.061]      __var isProduction = 0;
[02:05:36.061]        // -> [isProduction <= 0x00000000]
[02:05:36.062]      __var continueId = 0;
[02:05:36.062]        // -> [continueId <= 0x00000000]
[02:05:36.063]      deviceID =   Read32(0x41C40004);
[02:05:36.067]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:05:36.071]        // -> [deviceID <= 0x2BB8802F]
[02:05:36.071]      version = deviceID >> 28;
[02:05:36.071]        // -> [version <= 0x00000002]
[02:05:36.071]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:05:36.071]        // -> [partNum <= 0x0000BB88]
[02:05:36.071]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:05:36.071]        // -> [manuf <= 0x00000017]
[02:05:36.071]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:05:36.072]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:05:36.072]      isProduction = (version > 0);
[02:05:36.072]        // -> [isProduction <= 0x00000001]
[02:05:36.072]    </block>
[02:05:36.072]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:05:36.072]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:05:36.072]        // =>  FALSE
[02:05:36.072]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:05:36.072]    </control>
[02:05:36.072]    <control if="continueId == 4" while="" timeout="0" info="">
[02:05:36.072]      // if-block "continueId == 4"
[02:05:36.072]        // =>  FALSE
[02:05:36.073]      // skip if-block "continueId == 4"
[02:05:36.073]    </control>
[02:05:36.073]    <control if="!isProduction" while="" timeout="0" info="">
[02:05:36.073]      // if-block "!isProduction"
[02:05:36.073]        // =>  FALSE
[02:05:36.073]      // skip if-block "!isProduction"
[02:05:36.073]    </control>
[02:05:36.073]  </sequence>
[02:05:36.073]  
[02:06:19.087]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:06:19.087]  
[02:06:19.095]  <debugvars>
[02:06:19.095]    // Pre-defined
[02:06:19.095]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:06:19.095]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:06:19.095]    __dp=0x00000000
[02:06:19.095]    __ap=0x00000000
[02:06:19.095]    __traceout=0x00000000      (Trace Disabled)
[02:06:19.095]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:06:19.095]    __FlashAddr=0x00000000
[02:06:19.095]    __FlashLen=0x00000000
[02:06:19.095]    __FlashArg=0x00000000
[02:06:19.095]    __FlashOp=0x00000000
[02:06:19.095]    __Result=0x00000000
[02:06:19.095]  </debugvars>
[02:06:19.095]  
[02:06:19.095]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:06:19.095]    <block atomic="false" info="">
[02:06:19.095]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:06:19.095]        // -> [isSWJ <= 0x00000001]
[02:06:19.095]      __var hasDormant = __protocol & 0x00020000;
[02:06:19.095]        // -> [hasDormant <= 0x00000000]
[02:06:19.095]      __var protType   = __protocol & 0x0000FFFF;
[02:06:19.095]        // -> [protType <= 0x00000002]
[02:06:19.095]    </block>
[02:06:19.095]    <control if="protType == 1" while="" timeout="0" info="">
[02:06:19.095]      // if-block "protType == 1"
[02:06:19.095]        // =>  FALSE
[02:06:19.095]      // skip if-block "protType == 1"
[02:06:19.095]    </control>
[02:06:19.095]    <control if="protType == 2" while="" timeout="0" info="">
[02:06:19.095]      // if-block "protType == 2"
[02:06:19.095]        // =>  TRUE
[02:06:19.095]      <control if="isSWJ" while="" timeout="0" info="">
[02:06:19.095]        // if-block "isSWJ"
[02:06:19.095]          // =>  TRUE
[02:06:19.095]        <control if="hasDormant" while="" timeout="0" info="">
[02:06:19.095]          // if-block "hasDormant"
[02:06:19.095]            // =>  FALSE
[02:06:19.099]          // skip if-block "hasDormant"
[02:06:19.099]        </control>
[02:06:19.099]        <control if="!hasDormant" while="" timeout="0" info="">
[02:06:19.099]          // if-block "!hasDormant"
[02:06:19.099]            // =>  TRUE
[02:06:19.099]          <block atomic="false" info="">
[02:06:19.099]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:06:19.103]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:06:19.103]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:06:19.107]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:06:19.111]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:06:19.115]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:06:19.115]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:06:19.115]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:06:19.115]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:06:19.115]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:06:19.115]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:06:19.119]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:06:19.119]          </block>
[02:06:19.119]          // end if-block "!hasDormant"
[02:06:19.119]        </control>
[02:06:19.119]        // end if-block "isSWJ"
[02:06:19.119]      </control>
[02:06:19.119]      <control if="!isSWJ" while="" timeout="0" info="">
[02:06:19.119]        // if-block "!isSWJ"
[02:06:19.119]          // =>  FALSE
[02:06:19.119]        // skip if-block "!isSWJ"
[02:06:19.119]      </control>
[02:06:19.119]      <block atomic="false" info="">
[02:06:19.119]        ReadDP(0x0);
[02:06:19.119]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:06:19.119]      </block>
[02:06:19.119]      // end if-block "protType == 2"
[02:06:19.119]    </control>
[02:06:19.119]  </sequence>
[02:06:19.119]  
[02:06:19.123]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:06:19.123]  
[02:06:19.123]  <debugvars>
[02:06:19.123]    // Pre-defined
[02:06:19.123]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:06:19.123]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:06:19.123]    __dp=0x00000000
[02:06:19.123]    __ap=0x00000000
[02:06:19.123]    __traceout=0x00000000      (Trace Disabled)
[02:06:19.123]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:06:19.123]    __FlashAddr=0x00000000
[02:06:19.123]    __FlashLen=0x00000000
[02:06:19.123]    __FlashArg=0x00000000
[02:06:19.123]    __FlashOp=0x00000000
[02:06:19.123]    __Result=0x00000000
[02:06:19.123]  </debugvars>
[02:06:19.123]  
[02:06:19.123]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:06:19.123]    <block atomic="false" info="">
[02:06:19.123]      __var SW_DP_ABORT       = 0x0;
[02:06:19.123]        // -> [SW_DP_ABORT <= 0x00000000]
[02:06:19.123]      __var DP_CTRL_STAT      = 0x4;
[02:06:19.123]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:06:19.127]      __var DP_SELECT         = 0x8;
[02:06:19.127]        // -> [DP_SELECT <= 0x00000008]
[02:06:19.127]      __var powered_down      = 0;
[02:06:19.127]        // -> [powered_down <= 0x00000000]
[02:06:19.127]      WriteDP(DP_SELECT, 0x00000000);
[02:06:19.131]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:06:19.131]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:06:19.131]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:06:19.131]        // -> [powered_down <= 0x00000001]
[02:06:19.131]    </block>
[02:06:19.131]    <control if="powered_down" while="" timeout="0" info="">
[02:06:19.131]      // if-block "powered_down"
[02:06:19.131]        // =>  TRUE
[02:06:19.131]      <block atomic="false" info="">
[02:06:19.131]        Message(0, "Debug/System power-up request sent");
[02:06:19.135]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:06:19.139]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:06:19.139]      </block>
[02:06:19.139]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:06:19.139]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:06:19.139]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:06:19.139]        // while-condition  =>  FALSE
[02:06:19.139]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:06:19.139]      </control>
[02:06:19.139]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:06:19.139]        // if-block "(__protocol & 0xFFFF) == 1"
[02:06:19.139]          // =>  FALSE
[02:06:19.143]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:06:19.143]      </control>
[02:06:19.143]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:06:19.143]        // if-block "(__protocol & 0xFFFF) == 2"
[02:06:19.143]          // =>  TRUE
[02:06:19.143]        <block atomic="false" info="">
[02:06:19.143]          Message(0, "executing SWD power up");
[02:06:19.143]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:06:19.143]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:06:19.147]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:06:19.148]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:06:19.148]        </block>
[02:06:19.148]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:06:19.148]      </control>
[02:06:19.148]      // end if-block "powered_down"
[02:06:19.148]    </control>
[02:06:19.148]    <block atomic="false" info="">
[02:06:19.148]      __var DEBUG_PORT_VAL    = 0;
[02:06:19.148]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:06:19.148]      __var ACCESS_POINT_VAL  = 0;
[02:06:19.148]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:06:19.148]      __ap = 1; 
[02:06:19.148]        // -> [__ap <= 0x00000001]
[02:06:19.148]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:06:19.152]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:06:19.152]      __ap = 4;
[02:06:19.152]        // -> [__ap <= 0x00000004]
[02:06:19.152]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:06:19.156]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:06:19.156]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:06:19.156]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:06:19.162]    </block>
[02:06:19.162]    <block atomic="false" info="">
[02:06:19.162]      __var nReset = 0x80;
[02:06:19.162]        // -> [nReset <= 0x00000080]
[02:06:19.162]      __var canReadPins = 0;
[02:06:19.162]        // -> [canReadPins <= 0x00000000]
[02:06:19.162]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:06:19.162]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:06:19.164]        // -> [canReadPins <= 0x00000001]
[02:06:19.164]    </block>
[02:06:19.164]    <control if="" while="1" timeout="200" info="">
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.164]      // while "1"  (timeout="200")
[02:06:19.164]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.168]      // while "1"  (timeout="200")
[02:06:19.168]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.172]      // while-condition  =>  TRUE
[02:06:19.172]      // while "1"  (timeout="200")
[02:06:19.176]      // while-condition  =>  TRUE
[02:06:19.176]      // while "1"  (timeout="200")
[02:06:19.176]      // while  =>  TIMEOUT
[02:06:19.176]      // end while "1"
[02:06:19.176]    </control>
[02:06:19.176]    <control if="canReadPins" while="" timeout="0" info="">
[02:06:19.176]      // if-block "canReadPins"
[02:06:19.176]        // =>  TRUE
[02:06:19.176]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:06:19.176]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:06:19.176]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:06:19.176]        // while-condition  =>  FALSE
[02:06:19.176]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:06:19.176]      </control>
[02:06:19.176]      // end if-block "canReadPins"
[02:06:19.176]    </control>
[02:06:19.176]    <control if="!canReadPins" while="" timeout="0" info="">
[02:06:19.176]      // if-block "!canReadPins"
[02:06:19.176]        // =>  FALSE
[02:06:19.176]      // skip if-block "!canReadPins"
[02:06:19.176]    </control>
[02:06:19.176]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:06:19.176]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:06:19.176]        // =>  TRUE
[02:06:19.176]      <block atomic="false" info="">
[02:06:19.180]        WriteAP(0x00, 0x190008);
[02:06:19.180]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:06:19.180]        WriteAP(0xF0, 0x01);
[02:06:19.185]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:06:19.185]      </block>
[02:06:19.185]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:06:19.185]    </control>
[02:06:19.185]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:06:19.185]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:06:19.185]        // =>  FALSE
[02:06:19.185]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:06:19.185]    </control>
[02:06:19.185]    <block atomic="false" info="">
[02:06:19.185]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:06:19.192]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:06:19.192]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:06:19.192]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:06:19.196]      __ap = 0; //lets make sure we reset the access point selection
[02:06:19.196]        // -> [__ap <= 0x00000000]
[02:06:19.196]    </block>
[02:06:19.196]  </sequence>
[02:06:19.196]  
[02:06:19.228]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:06:19.228]  
[02:06:19.228]  <debugvars>
[02:06:19.228]    // Pre-defined
[02:06:19.228]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:06:19.228]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:06:19.228]    __dp=0x00000000
[02:06:19.228]    __ap=0x00000000
[02:06:19.228]    __traceout=0x00000000      (Trace Disabled)
[02:06:19.228]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:06:19.228]    __FlashAddr=0x00000000
[02:06:19.228]    __FlashLen=0x00000000
[02:06:19.228]    __FlashArg=0x00000000
[02:06:19.228]    __FlashOp=0x00000000
[02:06:19.228]    __Result=0x00000000
[02:06:19.228]  </debugvars>
[02:06:19.228]  
[02:06:19.228]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:06:19.228]    <block atomic="false" info="">
[02:06:19.228]      __var deviceID = 0;
[02:06:19.228]        // -> [deviceID <= 0x00000000]
[02:06:19.228]      __var version = 0;
[02:06:19.228]        // -> [version <= 0x00000000]
[02:06:19.228]      __var partNum = 0;
[02:06:19.228]        // -> [partNum <= 0x00000000]
[02:06:19.228]      __var manuf = 0;
[02:06:19.228]        // -> [manuf <= 0x00000000]
[02:06:19.228]      __var isMSPM0G1X0X_G3X0X = 0;
[02:06:19.228]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:06:19.228]      __var isProduction = 0;
[02:06:19.228]        // -> [isProduction <= 0x00000000]
[02:06:19.228]      __var continueId = 0;
[02:06:19.228]        // -> [continueId <= 0x00000000]
[02:06:19.228]      deviceID =   Read32(0x41C40004);
[02:06:19.240]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:06:19.240]        // -> [deviceID <= 0x2BB8802F]
[02:06:19.240]      version = deviceID >> 28;
[02:06:19.240]        // -> [version <= 0x00000002]
[02:06:19.240]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:06:19.244]        // -> [partNum <= 0x0000BB88]
[02:06:19.244]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:06:19.244]        // -> [manuf <= 0x00000017]
[02:06:19.244]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:06:19.244]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:06:19.244]      isProduction = (version > 0);
[02:06:19.244]        // -> [isProduction <= 0x00000001]
[02:06:19.244]    </block>
[02:06:19.244]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:06:19.244]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:06:19.244]        // =>  FALSE
[02:06:19.244]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:06:19.244]    </control>
[02:06:19.244]    <control if="continueId == 4" while="" timeout="0" info="">
[02:06:19.244]      // if-block "continueId == 4"
[02:06:19.244]        // =>  FALSE
[02:06:19.244]      // skip if-block "continueId == 4"
[02:06:19.244]    </control>
[02:06:19.244]    <control if="!isProduction" while="" timeout="0" info="">
[02:06:19.244]      // if-block "!isProduction"
[02:06:19.244]        // =>  FALSE
[02:06:19.244]      // skip if-block "!isProduction"
[02:06:19.244]    </control>
[02:06:19.244]  </sequence>
[02:06:19.244]  
[02:06:42.942]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:06:42.942]  
[02:06:42.952]  <debugvars>
[02:06:42.952]    // Pre-defined
[02:06:42.952]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:06:42.952]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:06:42.952]    __dp=0x00000000
[02:06:42.952]    __ap=0x00000000
[02:06:42.952]    __traceout=0x00000000      (Trace Disabled)
[02:06:42.952]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:06:42.952]    __FlashAddr=0x00000000
[02:06:42.952]    __FlashLen=0x00000000
[02:06:42.952]    __FlashArg=0x00000000
[02:06:42.952]    __FlashOp=0x00000000
[02:06:42.952]    __Result=0x00000000
[02:06:42.952]  </debugvars>
[02:06:42.952]  
[02:06:42.952]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:06:42.952]    <block atomic="false" info="">
[02:06:42.952]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:06:42.952]        // -> [isSWJ <= 0x00000001]
[02:06:42.952]      __var hasDormant = __protocol & 0x00020000;
[02:06:42.954]        // -> [hasDormant <= 0x00000000]
[02:06:42.954]      __var protType   = __protocol & 0x0000FFFF;
[02:06:42.954]        // -> [protType <= 0x00000002]
[02:06:42.954]    </block>
[02:06:42.954]    <control if="protType == 1" while="" timeout="0" info="">
[02:06:42.954]      // if-block "protType == 1"
[02:06:42.954]        // =>  FALSE
[02:06:42.954]      // skip if-block "protType == 1"
[02:06:42.954]    </control>
[02:06:42.954]    <control if="protType == 2" while="" timeout="0" info="">
[02:06:42.954]      // if-block "protType == 2"
[02:06:42.954]        // =>  TRUE
[02:06:42.954]      <control if="isSWJ" while="" timeout="0" info="">
[02:06:42.954]        // if-block "isSWJ"
[02:06:42.954]          // =>  TRUE
[02:06:42.954]        <control if="hasDormant" while="" timeout="0" info="">
[02:06:42.954]          // if-block "hasDormant"
[02:06:42.954]            // =>  FALSE
[02:06:42.954]          // skip if-block "hasDormant"
[02:06:42.954]        </control>
[02:06:42.954]        <control if="!hasDormant" while="" timeout="0" info="">
[02:06:42.954]          // if-block "!hasDormant"
[02:06:42.954]            // =>  TRUE
[02:06:42.954]          <block atomic="false" info="">
[02:06:42.954]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:06:42.957]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:06:42.957]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:06:42.959]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:06:42.959]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:06:42.962]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:06:42.962]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:06:42.962]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:06:42.962]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:06:42.966]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:06:42.966]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:06:42.966]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:06:42.966]          </block>
[02:06:42.966]          // end if-block "!hasDormant"
[02:06:42.966]        </control>
[02:06:42.966]        // end if-block "isSWJ"
[02:06:42.966]      </control>
[02:06:42.966]      <control if="!isSWJ" while="" timeout="0" info="">
[02:06:42.966]        // if-block "!isSWJ"
[02:06:42.966]          // =>  FALSE
[02:06:42.966]        // skip if-block "!isSWJ"
[02:06:42.966]      </control>
[02:06:42.966]      <block atomic="false" info="">
[02:06:42.970]        ReadDP(0x0);
[02:06:42.970]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:06:42.970]      </block>
[02:06:42.970]      // end if-block "protType == 2"
[02:06:42.970]    </control>
[02:06:42.970]  </sequence>
[02:06:42.970]  
[02:06:42.974]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:06:42.974]  
[02:06:42.974]  <debugvars>
[02:06:42.974]    // Pre-defined
[02:06:42.974]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:06:42.974]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:06:42.974]    __dp=0x00000000
[02:06:42.974]    __ap=0x00000000
[02:06:42.974]    __traceout=0x00000000      (Trace Disabled)
[02:06:42.974]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:06:42.974]    __FlashAddr=0x00000000
[02:06:42.974]    __FlashLen=0x00000000
[02:06:42.974]    __FlashArg=0x00000000
[02:06:42.974]    __FlashOp=0x00000000
[02:06:42.974]    __Result=0x00000000
[02:06:42.974]  </debugvars>
[02:06:42.974]  
[02:06:42.974]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:06:42.974]    <block atomic="false" info="">
[02:06:42.974]      __var SW_DP_ABORT       = 0x0;
[02:06:42.974]        // -> [SW_DP_ABORT <= 0x00000000]
[02:06:42.974]      __var DP_CTRL_STAT      = 0x4;
[02:06:42.974]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:06:42.974]      __var DP_SELECT         = 0x8;
[02:06:42.974]        // -> [DP_SELECT <= 0x00000008]
[02:06:42.974]      __var powered_down      = 0;
[02:06:42.974]        // -> [powered_down <= 0x00000000]
[02:06:42.974]      WriteDP(DP_SELECT, 0x00000000);
[02:06:42.978]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:06:42.978]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:06:42.978]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:06:42.978]        // -> [powered_down <= 0x00000001]
[02:06:42.978]    </block>
[02:06:42.978]    <control if="powered_down" while="" timeout="0" info="">
[02:06:42.982]      // if-block "powered_down"
[02:06:42.982]        // =>  TRUE
[02:06:42.982]      <block atomic="false" info="">
[02:06:42.982]        Message(0, "Debug/System power-up request sent");
[02:06:42.982]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:06:42.982]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:06:42.986]      </block>
[02:06:42.986]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:06:42.986]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:06:42.987]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:06:42.987]        // while-condition  =>  FALSE
[02:06:42.987]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:06:42.987]      </control>
[02:06:42.987]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:06:42.987]        // if-block "(__protocol & 0xFFFF) == 1"
[02:06:42.987]          // =>  FALSE
[02:06:42.987]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:06:42.987]      </control>
[02:06:42.987]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:06:42.987]        // if-block "(__protocol & 0xFFFF) == 2"
[02:06:42.987]          // =>  TRUE
[02:06:42.987]        <block atomic="false" info="">
[02:06:42.987]          Message(0, "executing SWD power up");
[02:06:42.990]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:06:42.992]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:06:42.992]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:06:42.994]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:06:42.994]        </block>
[02:06:42.994]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:06:42.994]      </control>
[02:06:42.994]      // end if-block "powered_down"
[02:06:42.994]    </control>
[02:06:42.994]    <block atomic="false" info="">
[02:06:42.995]      __var DEBUG_PORT_VAL    = 0;
[02:06:42.995]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:06:42.995]      __var ACCESS_POINT_VAL  = 0;
[02:06:42.995]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:06:42.995]      __ap = 1; 
[02:06:42.995]        // -> [__ap <= 0x00000001]
[02:06:42.995]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:06:43.002]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:06:43.002]      __ap = 4;
[02:06:43.002]        // -> [__ap <= 0x00000004]
[02:06:43.002]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:06:43.005]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:06:43.005]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:06:43.005]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:06:43.007]    </block>
[02:06:43.007]    <block atomic="false" info="">
[02:06:43.007]      __var nReset = 0x80;
[02:06:43.007]        // -> [nReset <= 0x00000080]
[02:06:43.007]      __var canReadPins = 0;
[02:06:43.007]        // -> [canReadPins <= 0x00000000]
[02:06:43.007]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:06:43.010]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:06:43.010]        // -> [canReadPins <= 0x00000001]
[02:06:43.010]    </block>
[02:06:43.010]    <control if="" while="1" timeout="200" info="">
[02:06:43.010]      // while "1"  (timeout="200")
[02:06:43.010]      // while-condition  =>  TRUE
[02:06:43.010]      // while "1"  (timeout="200")
[02:06:43.010]      // while-condition  =>  TRUE
[02:06:43.010]      // while "1"  (timeout="200")
[02:06:43.010]      // while-condition  =>  TRUE
[02:06:43.010]      // while "1"  (timeout="200")
[02:06:43.010]      // while-condition  =>  TRUE
[02:06:43.010]      // while "1"  (timeout="200")
[02:06:43.010]      // while-condition  =>  TRUE
[02:06:43.010]      // while "1"  (timeout="200")
[02:06:43.010]      // while-condition  =>  TRUE
[02:06:43.010]      // while "1"  (timeout="200")
[02:06:43.012]      // while-condition  =>  TRUE
[02:06:43.012]      // while "1"  (timeout="200")
[02:06:43.012]      // while-condition  =>  TRUE
[02:06:43.012]      // while "1"  (timeout="200")
[02:06:43.012]      // while-condition  =>  TRUE
[02:06:43.012]      // while "1"  (timeout="200")
[02:06:43.012]      // while-condition  =>  TRUE
[02:06:43.012]      // while "1"  (timeout="200")
[02:06:43.012]      // while-condition  =>  TRUE
[02:06:43.012]      // while "1"  (timeout="200")
[02:06:43.012]      // while-condition  =>  TRUE
[02:06:43.012]      // while "1"  (timeout="200")
[02:06:43.012]      // while-condition  =>  TRUE
[02:06:43.012]      // while "1"  (timeout="200")
[02:06:43.012]      // while-condition  =>  TRUE
[02:06:43.012]      // while "1"  (timeout="200")
[02:06:43.014]      // while-condition  =>  TRUE
[02:06:43.014]      // while "1"  (timeout="200")
[02:06:43.014]      // while-condition  =>  TRUE
[02:06:43.014]      // while "1"  (timeout="200")
[02:06:43.014]      // while-condition  =>  TRUE
[02:06:43.014]      // while "1"  (timeout="200")
[02:06:43.014]      // while-condition  =>  TRUE
[02:06:43.014]      // while "1"  (timeout="200")
[02:06:43.014]      // while-condition  =>  TRUE
[02:06:43.014]      // while "1"  (timeout="200")
[02:06:43.014]      // while-condition  =>  TRUE
[02:06:43.014]      // while "1"  (timeout="200")
[02:06:43.014]      // while-condition  =>  TRUE
[02:06:43.014]      // while "1"  (timeout="200")
[02:06:43.014]      // while-condition  =>  TRUE
[02:06:43.014]      // while "1"  (timeout="200")
[02:06:43.014]      // while-condition  =>  TRUE
[02:06:43.014]      // while "1"  (timeout="200")
[02:06:43.014]      // while-condition  =>  TRUE
[02:06:43.014]      // while "1"  (timeout="200")
[02:06:43.014]      // while-condition  =>  TRUE
[02:06:43.014]      // while "1"  (timeout="200")
[02:06:43.014]      // while-condition  =>  TRUE
[02:06:43.014]      // while "1"  (timeout="200")
[02:06:43.017]      // while-condition  =>  TRUE
[02:06:43.017]      // while "1"  (timeout="200")
[02:06:43.017]      // while  =>  TIMEOUT
[02:06:43.017]      // end while "1"
[02:06:43.017]    </control>
[02:06:43.017]    <control if="canReadPins" while="" timeout="0" info="">
[02:06:43.017]      // if-block "canReadPins"
[02:06:43.017]        // =>  TRUE
[02:06:43.017]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:06:43.017]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:06:43.019]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:06:43.019]        // while-condition  =>  FALSE
[02:06:43.019]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:06:43.019]      </control>
[02:06:43.019]      // end if-block "canReadPins"
[02:06:43.019]    </control>
[02:06:43.019]    <control if="!canReadPins" while="" timeout="0" info="">
[02:06:43.021]      // if-block "!canReadPins"
[02:06:43.021]        // =>  FALSE
[02:06:43.021]      // skip if-block "!canReadPins"
[02:06:43.021]    </control>
[02:06:43.021]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:06:43.021]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:06:43.021]        // =>  TRUE
[02:06:43.021]      <block atomic="false" info="">
[02:06:43.021]        WriteAP(0x00, 0x190008);
[02:06:43.023]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:06:43.023]        WriteAP(0xF0, 0x01);
[02:06:43.026]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:06:43.026]      </block>
[02:06:43.026]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:06:43.026]    </control>
[02:06:43.026]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:06:43.026]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:06:43.029]        // =>  FALSE
[02:06:43.029]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:06:43.029]    </control>
[02:06:43.029]    <block atomic="false" info="">
[02:06:43.029]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:06:43.033]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:06:43.033]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:06:43.033]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:06:43.034]      __ap = 0; //lets make sure we reset the access point selection
[02:06:43.034]        // -> [__ap <= 0x00000000]
[02:06:43.034]    </block>
[02:06:43.034]  </sequence>
[02:06:43.035]  
[02:06:43.068]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:06:43.068]  
[02:06:43.068]  <debugvars>
[02:06:43.068]    // Pre-defined
[02:06:43.068]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:06:43.069]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:06:43.069]    __dp=0x00000000
[02:06:43.069]    __ap=0x00000000
[02:06:43.069]    __traceout=0x00000000      (Trace Disabled)
[02:06:43.069]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:06:43.069]    __FlashAddr=0x00000000
[02:06:43.069]    __FlashLen=0x00000000
[02:06:43.069]    __FlashArg=0x00000000
[02:06:43.069]    __FlashOp=0x00000000
[02:06:43.069]    __Result=0x00000000
[02:06:43.069]  </debugvars>
[02:06:43.069]  
[02:06:43.070]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:06:43.070]    <block atomic="false" info="">
[02:06:43.070]      __var deviceID = 0;
[02:06:43.070]        // -> [deviceID <= 0x00000000]
[02:06:43.070]      __var version = 0;
[02:06:43.070]        // -> [version <= 0x00000000]
[02:06:43.070]      __var partNum = 0;
[02:06:43.070]        // -> [partNum <= 0x00000000]
[02:06:43.070]      __var manuf = 0;
[02:06:43.070]        // -> [manuf <= 0x00000000]
[02:06:43.070]      __var isMSPM0G1X0X_G3X0X = 0;
[02:06:43.070]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:06:43.070]      __var isProduction = 0;
[02:06:43.070]        // -> [isProduction <= 0x00000000]
[02:06:43.072]      __var continueId = 0;
[02:06:43.072]        // -> [continueId <= 0x00000000]
[02:06:43.072]      deviceID =   Read32(0x41C40004);
[02:06:43.076]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:06:43.076]        // -> [deviceID <= 0x2BB8802F]
[02:06:43.077]      version = deviceID >> 28;
[02:06:43.077]        // -> [version <= 0x00000002]
[02:06:43.077]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:06:43.077]        // -> [partNum <= 0x0000BB88]
[02:06:43.077]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:06:43.077]        // -> [manuf <= 0x00000017]
[02:06:43.077]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:06:43.077]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:06:43.077]      isProduction = (version > 0);
[02:06:43.077]        // -> [isProduction <= 0x00000001]
[02:06:43.077]    </block>
[02:06:43.077]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:06:43.077]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:06:43.077]        // =>  FALSE
[02:06:43.077]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:06:43.077]    </control>
[02:06:43.077]    <control if="continueId == 4" while="" timeout="0" info="">
[02:06:43.077]      // if-block "continueId == 4"
[02:06:43.077]        // =>  FALSE
[02:06:43.077]      // skip if-block "continueId == 4"
[02:06:43.079]    </control>
[02:06:43.079]    <control if="!isProduction" while="" timeout="0" info="">
[02:06:43.079]      // if-block "!isProduction"
[02:06:43.079]        // =>  FALSE
[02:06:43.079]      // skip if-block "!isProduction"
[02:06:43.079]    </control>
[02:06:43.079]  </sequence>
[02:06:43.080]  
[02:08:03.372]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:08:03.372]  
[02:08:03.381]  <debugvars>
[02:08:03.381]    // Pre-defined
[02:08:03.381]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:08:03.381]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:08:03.381]    __dp=0x00000000
[02:08:03.381]    __ap=0x00000000
[02:08:03.381]    __traceout=0x00000000      (Trace Disabled)
[02:08:03.381]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:08:03.381]    __FlashAddr=0x00000000
[02:08:03.381]    __FlashLen=0x00000000
[02:08:03.381]    __FlashArg=0x00000000
[02:08:03.381]    __FlashOp=0x00000000
[02:08:03.381]    __Result=0x00000000
[02:08:03.381]  </debugvars>
[02:08:03.381]  
[02:08:03.381]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:08:03.381]    <block atomic="false" info="">
[02:08:03.381]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:08:03.381]        // -> [isSWJ <= 0x00000001]
[02:08:03.381]      __var hasDormant = __protocol & 0x00020000;
[02:08:03.381]        // -> [hasDormant <= 0x00000000]
[02:08:03.381]      __var protType   = __protocol & 0x0000FFFF;
[02:08:03.381]        // -> [protType <= 0x00000002]
[02:08:03.381]    </block>
[02:08:03.381]    <control if="protType == 1" while="" timeout="0" info="">
[02:08:03.381]      // if-block "protType == 1"
[02:08:03.381]        // =>  FALSE
[02:08:03.381]      // skip if-block "protType == 1"
[02:08:03.381]    </control>
[02:08:03.381]    <control if="protType == 2" while="" timeout="0" info="">
[02:08:03.381]      // if-block "protType == 2"
[02:08:03.381]        // =>  TRUE
[02:08:03.381]      <control if="isSWJ" while="" timeout="0" info="">
[02:08:03.381]        // if-block "isSWJ"
[02:08:03.381]          // =>  TRUE
[02:08:03.381]        <control if="hasDormant" while="" timeout="0" info="">
[02:08:03.381]          // if-block "hasDormant"
[02:08:03.381]            // =>  FALSE
[02:08:03.381]          // skip if-block "hasDormant"
[02:08:03.381]        </control>
[02:08:03.385]        <control if="!hasDormant" while="" timeout="0" info="">
[02:08:03.385]          // if-block "!hasDormant"
[02:08:03.385]            // =>  TRUE
[02:08:03.385]          <block atomic="false" info="">
[02:08:03.385]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:08:03.385]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:08:03.385]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:08:03.389]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:08:03.389]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:08:03.389]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:08:03.389]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:08:03.389]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:08:03.389]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:08:03.393]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:08:03.393]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:08:03.393]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:08:03.393]          </block>
[02:08:03.393]          // end if-block "!hasDormant"
[02:08:03.393]        </control>
[02:08:03.393]        // end if-block "isSWJ"
[02:08:03.397]      </control>
[02:08:03.397]      <control if="!isSWJ" while="" timeout="0" info="">
[02:08:03.397]        // if-block "!isSWJ"
[02:08:03.397]          // =>  FALSE
[02:08:03.397]        // skip if-block "!isSWJ"
[02:08:03.397]      </control>
[02:08:03.397]      <block atomic="false" info="">
[02:08:03.397]        ReadDP(0x0);
[02:08:03.397]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:08:03.397]      </block>
[02:08:03.397]      // end if-block "protType == 2"
[02:08:03.397]    </control>
[02:08:03.397]  </sequence>
[02:08:03.397]  
[02:08:03.405]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:08:03.405]  
[02:08:03.405]  <debugvars>
[02:08:03.405]    // Pre-defined
[02:08:03.405]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:08:03.405]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:08:03.405]    __dp=0x00000000
[02:08:03.405]    __ap=0x00000000
[02:08:03.405]    __traceout=0x00000000      (Trace Disabled)
[02:08:03.405]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:08:03.405]    __FlashAddr=0x00000000
[02:08:03.405]    __FlashLen=0x00000000
[02:08:03.405]    __FlashArg=0x00000000
[02:08:03.405]    __FlashOp=0x00000000
[02:08:03.405]    __Result=0x00000000
[02:08:03.405]  </debugvars>
[02:08:03.405]  
[02:08:03.405]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:08:03.405]    <block atomic="false" info="">
[02:08:03.405]      __var SW_DP_ABORT       = 0x0;
[02:08:03.405]        // -> [SW_DP_ABORT <= 0x00000000]
[02:08:03.405]      __var DP_CTRL_STAT      = 0x4;
[02:08:03.405]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:08:03.405]      __var DP_SELECT         = 0x8;
[02:08:03.409]        // -> [DP_SELECT <= 0x00000008]
[02:08:03.409]      __var powered_down      = 0;
[02:08:03.409]        // -> [powered_down <= 0x00000000]
[02:08:03.409]      WriteDP(DP_SELECT, 0x00000000);
[02:08:03.409]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:08:03.409]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:08:03.409]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:08:03.409]        // -> [powered_down <= 0x00000001]
[02:08:03.409]    </block>
[02:08:03.413]    <control if="powered_down" while="" timeout="0" info="">
[02:08:03.413]      // if-block "powered_down"
[02:08:03.413]        // =>  TRUE
[02:08:03.413]      <block atomic="false" info="">
[02:08:03.413]        Message(0, "Debug/System power-up request sent");
[02:08:03.413]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:08:03.417]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:08:03.417]      </block>
[02:08:03.417]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:08:03.417]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:08:03.417]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:08:03.417]        // while-condition  =>  FALSE
[02:08:03.417]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:08:03.417]      </control>
[02:08:03.417]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:08:03.417]        // if-block "(__protocol & 0xFFFF) == 1"
[02:08:03.417]          // =>  FALSE
[02:08:03.417]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:08:03.417]      </control>
[02:08:03.417]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:08:03.417]        // if-block "(__protocol & 0xFFFF) == 2"
[02:08:03.417]          // =>  TRUE
[02:08:03.417]        <block atomic="false" info="">
[02:08:03.421]          Message(0, "executing SWD power up");
[02:08:03.421]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:08:03.421]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:08:03.421]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:08:03.426]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:08:03.426]        </block>
[02:08:03.426]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:08:03.426]      </control>
[02:08:03.426]      // end if-block "powered_down"
[02:08:03.426]    </control>
[02:08:03.426]    <block atomic="false" info="">
[02:08:03.426]      __var DEBUG_PORT_VAL    = 0;
[02:08:03.426]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:08:03.427]      __var ACCESS_POINT_VAL  = 0;
[02:08:03.427]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:08:03.427]      __ap = 1; 
[02:08:03.427]        // -> [__ap <= 0x00000001]
[02:08:03.427]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:08:03.429]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:08:03.429]      __ap = 4;
[02:08:03.429]        // -> [__ap <= 0x00000004]
[02:08:03.429]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:08:03.434]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:08:03.434]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:08:03.434]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:08:03.437]    </block>
[02:08:03.437]    <block atomic="false" info="">
[02:08:03.437]      __var nReset = 0x80;
[02:08:03.437]        // -> [nReset <= 0x00000080]
[02:08:03.437]      __var canReadPins = 0;
[02:08:03.437]        // -> [canReadPins <= 0x00000000]
[02:08:03.437]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:08:03.437]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:08:03.437]        // -> [canReadPins <= 0x00000001]
[02:08:03.437]    </block>
[02:08:03.437]    <control if="" while="1" timeout="200" info="">
[02:08:03.437]      // while "1"  (timeout="200")
[02:08:03.437]      // while-condition  =>  TRUE
[02:08:03.437]      // while "1"  (timeout="200")
[02:08:03.441]      // while-condition  =>  TRUE
[02:08:03.441]      // while "1"  (timeout="200")
[02:08:03.441]      // while  =>  TIMEOUT
[02:08:03.441]      // end while "1"
[02:08:03.441]    </control>
[02:08:03.441]    <control if="canReadPins" while="" timeout="0" info="">
[02:08:03.441]      // if-block "canReadPins"
[02:08:03.442]        // =>  TRUE
[02:08:03.442]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:08:03.442]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:08:03.442]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:08:03.442]        // while-condition  =>  FALSE
[02:08:03.442]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:08:03.442]      </control>
[02:08:03.442]      // end if-block "canReadPins"
[02:08:03.442]    </control>
[02:08:03.442]    <control if="!canReadPins" while="" timeout="0" info="">
[02:08:03.442]      // if-block "!canReadPins"
[02:08:03.442]        // =>  FALSE
[02:08:03.442]      // skip if-block "!canReadPins"
[02:08:03.442]    </control>
[02:08:03.442]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:08:03.442]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:08:03.445]        // =>  TRUE
[02:08:03.445]      <block atomic="false" info="">
[02:08:03.445]        WriteAP(0x00, 0x190008);
[02:08:03.445]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:08:03.445]        WriteAP(0xF0, 0x01);
[02:08:03.449]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:08:03.449]      </block>
[02:08:03.449]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:08:03.449]    </control>
[02:08:03.449]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:08:03.449]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:08:03.449]        // =>  FALSE
[02:08:03.449]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:08:03.449]    </control>
[02:08:03.449]    <block atomic="false" info="">
[02:08:03.449]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:08:03.453]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:08:03.453]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:08:03.453]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:08:03.457]      __ap = 0; //lets make sure we reset the access point selection
[02:08:03.457]        // -> [__ap <= 0x00000000]
[02:08:03.457]    </block>
[02:08:03.457]  </sequence>
[02:08:03.457]  
[02:08:03.485]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:08:03.485]  
[02:08:03.485]  <debugvars>
[02:08:03.485]    // Pre-defined
[02:08:03.485]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:08:03.485]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:08:03.485]    __dp=0x00000000
[02:08:03.485]    __ap=0x00000000
[02:08:03.485]    __traceout=0x00000000      (Trace Disabled)
[02:08:03.485]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:08:03.485]    __FlashAddr=0x00000000
[02:08:03.485]    __FlashLen=0x00000000
[02:08:03.485]    __FlashArg=0x00000000
[02:08:03.485]    __FlashOp=0x00000000
[02:08:03.485]    __Result=0x00000000
[02:08:03.485]  </debugvars>
[02:08:03.485]  
[02:08:03.489]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:08:03.489]    <block atomic="false" info="">
[02:08:03.489]      __var deviceID = 0;
[02:08:03.489]        // -> [deviceID <= 0x00000000]
[02:08:03.489]      __var version = 0;
[02:08:03.489]        // -> [version <= 0x00000000]
[02:08:03.489]      __var partNum = 0;
[02:08:03.489]        // -> [partNum <= 0x00000000]
[02:08:03.489]      __var manuf = 0;
[02:08:03.489]        // -> [manuf <= 0x00000000]
[02:08:03.489]      __var isMSPM0G1X0X_G3X0X = 0;
[02:08:03.489]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:08:03.489]      __var isProduction = 0;
[02:08:03.489]        // -> [isProduction <= 0x00000000]
[02:08:03.489]      __var continueId = 0;
[02:08:03.489]        // -> [continueId <= 0x00000000]
[02:08:03.491]      deviceID =   Read32(0x41C40004);
[02:08:03.493]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:08:03.493]        // -> [deviceID <= 0x2BB8802F]
[02:08:03.497]      version = deviceID >> 28;
[02:08:03.497]        // -> [version <= 0x00000002]
[02:08:03.497]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:08:03.497]        // -> [partNum <= 0x0000BB88]
[02:08:03.497]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:08:03.497]        // -> [manuf <= 0x00000017]
[02:08:03.497]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:08:03.497]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:08:03.497]      isProduction = (version > 0);
[02:08:03.497]        // -> [isProduction <= 0x00000001]
[02:08:03.497]    </block>
[02:08:03.497]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:08:03.497]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:08:03.497]        // =>  FALSE
[02:08:03.497]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:08:03.497]    </control>
[02:08:03.497]    <control if="continueId == 4" while="" timeout="0" info="">
[02:08:03.497]      // if-block "continueId == 4"
[02:08:03.497]        // =>  FALSE
[02:08:03.497]      // skip if-block "continueId == 4"
[02:08:03.497]    </control>
[02:08:03.497]    <control if="!isProduction" while="" timeout="0" info="">
[02:08:03.497]      // if-block "!isProduction"
[02:08:03.497]        // =>  FALSE
[02:08:03.497]      // skip if-block "!isProduction"
[02:08:03.497]    </control>
[02:08:03.497]  </sequence>
[02:08:03.497]  
[02:08:08.831]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:08:08.831]  
[02:08:08.842]  <debugvars>
[02:08:08.843]    // Pre-defined
[02:08:08.843]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:08:08.843]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:08:08.843]    __dp=0x00000000
[02:08:08.843]    __ap=0x00000000
[02:08:08.843]    __traceout=0x00000000      (Trace Disabled)
[02:08:08.843]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:08:08.843]    __FlashAddr=0x00000000
[02:08:08.843]    __FlashLen=0x00000000
[02:08:08.843]    __FlashArg=0x00000000
[02:08:08.843]    __FlashOp=0x00000000
[02:08:08.843]    __Result=0x00000000
[02:08:08.843]  </debugvars>
[02:08:08.843]  
[02:08:08.843]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:08:08.843]    <block atomic="false" info="">
[02:08:08.844]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:08:08.844]        // -> [isSWJ <= 0x00000001]
[02:08:08.844]      __var hasDormant = __protocol & 0x00020000;
[02:08:08.844]        // -> [hasDormant <= 0x00000000]
[02:08:08.844]      __var protType   = __protocol & 0x0000FFFF;
[02:08:08.844]        // -> [protType <= 0x00000002]
[02:08:08.844]    </block>
[02:08:08.844]    <control if="protType == 1" while="" timeout="0" info="">
[02:08:08.844]      // if-block "protType == 1"
[02:08:08.844]        // =>  FALSE
[02:08:08.844]      // skip if-block "protType == 1"
[02:08:08.844]    </control>
[02:08:08.844]    <control if="protType == 2" while="" timeout="0" info="">
[02:08:08.844]      // if-block "protType == 2"
[02:08:08.844]        // =>  TRUE
[02:08:08.844]      <control if="isSWJ" while="" timeout="0" info="">
[02:08:08.844]        // if-block "isSWJ"
[02:08:08.847]          // =>  TRUE
[02:08:08.847]        <control if="hasDormant" while="" timeout="0" info="">
[02:08:08.847]          // if-block "hasDormant"
[02:08:08.847]            // =>  FALSE
[02:08:08.847]          // skip if-block "hasDormant"
[02:08:08.847]        </control>
[02:08:08.847]        <control if="!hasDormant" while="" timeout="0" info="">
[02:08:08.847]          // if-block "!hasDormant"
[02:08:08.847]            // =>  TRUE
[02:08:08.848]          <block atomic="false" info="">
[02:08:08.848]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:08:08.850]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:08:08.850]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:08:08.851]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:08:08.852]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:08:08.854]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:08:08.854]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:08:08.854]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:08:08.855]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:08:08.860]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:08:08.860]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:08:08.861]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:08:08.861]          </block>
[02:08:08.861]          // end if-block "!hasDormant"
[02:08:08.861]        </control>
[02:08:08.861]        // end if-block "isSWJ"
[02:08:08.861]      </control>
[02:08:08.861]      <control if="!isSWJ" while="" timeout="0" info="">
[02:08:08.862]        // if-block "!isSWJ"
[02:08:08.862]          // =>  FALSE
[02:08:08.862]        // skip if-block "!isSWJ"
[02:08:08.862]      </control>
[02:08:08.862]      <block atomic="false" info="">
[02:08:08.862]        ReadDP(0x0);
[02:08:08.864]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:08:08.864]      </block>
[02:08:08.864]      // end if-block "protType == 2"
[02:08:08.864]    </control>
[02:08:08.865]  </sequence>
[02:08:08.865]  
[02:08:08.867]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:08:08.867]  
[02:08:08.867]  <debugvars>
[02:08:08.867]    // Pre-defined
[02:08:08.867]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:08:08.867]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:08:08.867]    __dp=0x00000000
[02:08:08.867]    __ap=0x00000000
[02:08:08.867]    __traceout=0x00000000      (Trace Disabled)
[02:08:08.868]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:08:08.868]    __FlashAddr=0x00000000
[02:08:08.868]    __FlashLen=0x00000000
[02:08:08.868]    __FlashArg=0x00000000
[02:08:08.868]    __FlashOp=0x00000000
[02:08:08.868]    __Result=0x00000000
[02:08:08.868]  </debugvars>
[02:08:08.868]  
[02:08:08.868]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:08:08.868]    <block atomic="false" info="">
[02:08:08.869]      __var SW_DP_ABORT       = 0x0;
[02:08:08.869]        // -> [SW_DP_ABORT <= 0x00000000]
[02:08:08.869]      __var DP_CTRL_STAT      = 0x4;
[02:08:08.869]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:08:08.869]      __var DP_SELECT         = 0x8;
[02:08:08.869]        // -> [DP_SELECT <= 0x00000008]
[02:08:08.869]      __var powered_down      = 0;
[02:08:08.869]        // -> [powered_down <= 0x00000000]
[02:08:08.869]      WriteDP(DP_SELECT, 0x00000000);
[02:08:08.871]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:08:08.871]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:08:08.874]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:08:08.874]        // -> [powered_down <= 0x00000001]
[02:08:08.874]    </block>
[02:08:08.874]    <control if="powered_down" while="" timeout="0" info="">
[02:08:08.874]      // if-block "powered_down"
[02:08:08.874]        // =>  TRUE
[02:08:08.874]      <block atomic="false" info="">
[02:08:08.874]        Message(0, "Debug/System power-up request sent");
[02:08:08.876]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:08:08.878]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:08:08.878]      </block>
[02:08:08.878]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:08:08.878]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:08:08.881]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:08:08.881]        // while-condition  =>  FALSE
[02:08:08.881]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:08:08.881]      </control>
[02:08:08.881]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:08:08.881]        // if-block "(__protocol & 0xFFFF) == 1"
[02:08:08.881]          // =>  FALSE
[02:08:08.881]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:08:08.881]      </control>
[02:08:08.881]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:08:08.881]        // if-block "(__protocol & 0xFFFF) == 2"
[02:08:08.881]          // =>  TRUE
[02:08:08.881]        <block atomic="false" info="">
[02:08:08.881]          Message(0, "executing SWD power up");
[02:08:08.883]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:08:08.891]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:08:08.891]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:08:08.893]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:08:08.893]        </block>
[02:08:08.893]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:08:08.894]      </control>
[02:08:08.894]      // end if-block "powered_down"
[02:08:08.894]    </control>
[02:08:08.894]    <block atomic="false" info="">
[02:08:08.894]      __var DEBUG_PORT_VAL    = 0;
[02:08:08.894]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:08:08.894]      __var ACCESS_POINT_VAL  = 0;
[02:08:08.894]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:08:08.894]      __ap = 1; 
[02:08:08.894]        // -> [__ap <= 0x00000001]
[02:08:08.894]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:08:08.897]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:08:08.897]      __ap = 4;
[02:08:08.897]        // -> [__ap <= 0x00000004]
[02:08:08.897]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:08:08.905]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:08:08.905]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:08:08.905]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:08:08.909]    </block>
[02:08:08.909]    <block atomic="false" info="">
[02:08:08.909]      __var nReset = 0x80;
[02:08:08.909]        // -> [nReset <= 0x00000080]
[02:08:08.909]      __var canReadPins = 0;
[02:08:08.909]        // -> [canReadPins <= 0x00000000]
[02:08:08.909]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:08:08.912]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:08:08.912]        // -> [canReadPins <= 0x00000001]
[02:08:08.912]    </block>
[02:08:08.913]    <control if="" while="1" timeout="200" info="">
[02:08:08.913]      // while "1"  (timeout="200")
[02:08:08.913]      // while-condition  =>  TRUE
[02:08:08.913]      // while "1"  (timeout="200")
[02:08:08.913]      // while-condition  =>  TRUE
[02:08:08.913]      // while "1"  (timeout="200")
[02:08:08.913]      // while-condition  =>  TRUE
[02:08:08.913]      // while "1"  (timeout="200")
[02:08:08.913]      // while-condition  =>  TRUE
[02:08:08.913]      // while "1"  (timeout="200")
[02:08:08.913]      // while-condition  =>  TRUE
[02:08:08.913]      // while "1"  (timeout="200")
[02:08:08.913]      // while-condition  =>  TRUE
[02:08:08.913]      // while "1"  (timeout="200")
[02:08:08.913]      // while-condition  =>  TRUE
[02:08:08.913]      // while "1"  (timeout="200")
[02:08:08.913]      // while-condition  =>  TRUE
[02:08:08.913]      // while "1"  (timeout="200")
[02:08:08.913]      // while-condition  =>  TRUE
[02:08:08.913]      // while "1"  (timeout="200")
[02:08:08.913]      // while-condition  =>  TRUE
[02:08:08.913]      // while "1"  (timeout="200")
[02:08:08.913]      // while-condition  =>  TRUE
[02:08:08.913]      // while "1"  (timeout="200")
[02:08:08.916]      // while-condition  =>  TRUE
[02:08:08.916]      // while "1"  (timeout="200")
[02:08:08.916]      // while-condition  =>  TRUE
[02:08:08.916]      // while "1"  (timeout="200")
[02:08:08.916]      // while-condition  =>  TRUE
[02:08:08.916]      // while "1"  (timeout="200")
[02:08:08.916]      // while-condition  =>  TRUE
[02:08:08.916]      // while "1"  (timeout="200")
[02:08:08.916]      // while-condition  =>  TRUE
[02:08:08.916]      // while "1"  (timeout="200")
[02:08:08.916]      // while-condition  =>  TRUE
[02:08:08.916]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.917]      // while "1"  (timeout="200")
[02:08:08.917]      // while-condition  =>  TRUE
[02:08:08.921]      // while "1"  (timeout="200")
[02:08:08.921]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.922]      // while "1"  (timeout="200")
[02:08:08.922]      // while-condition  =>  TRUE
[02:08:08.925]      // while "1"  (timeout="200")
[02:08:08.925]      // while  =>  TIMEOUT
[02:08:08.925]      // end while "1"
[02:08:08.925]    </control>
[02:08:08.925]    <control if="canReadPins" while="" timeout="0" info="">
[02:08:08.925]      // if-block "canReadPins"
[02:08:08.925]        // =>  TRUE
[02:08:08.925]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:08:08.925]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:08:08.926]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:08:08.926]        // while-condition  =>  FALSE
[02:08:08.926]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:08:08.926]      </control>
[02:08:08.928]      // end if-block "canReadPins"
[02:08:08.928]    </control>
[02:08:08.928]    <control if="!canReadPins" while="" timeout="0" info="">
[02:08:08.928]      // if-block "!canReadPins"
[02:08:08.928]        // =>  FALSE
[02:08:08.929]      // skip if-block "!canReadPins"
[02:08:08.929]    </control>
[02:08:08.929]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:08:08.929]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:08:08.929]        // =>  TRUE
[02:08:08.929]      <block atomic="false" info="">
[02:08:08.929]        WriteAP(0x00, 0x190008);
[02:08:08.932]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:08:08.932]        WriteAP(0xF0, 0x01);
[02:08:08.935]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:08:08.935]      </block>
[02:08:08.935]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:08:08.936]    </control>
[02:08:08.936]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:08:08.936]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:08:08.936]        // =>  FALSE
[02:08:08.936]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:08:08.936]    </control>
[02:08:08.936]    <block atomic="false" info="">
[02:08:08.936]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:08:08.942]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:08:08.942]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:08:08.942]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:08:08.942]      __ap = 0; //lets make sure we reset the access point selection
[02:08:08.944]        // -> [__ap <= 0x00000000]
[02:08:08.944]    </block>
[02:08:08.944]  </sequence>
[02:08:08.944]  
[02:08:08.970]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:08:08.970]  
[02:08:08.970]  <debugvars>
[02:08:08.970]    // Pre-defined
[02:08:08.970]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:08:08.970]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:08:08.970]    __dp=0x00000000
[02:08:08.970]    __ap=0x00000000
[02:08:08.970]    __traceout=0x00000000      (Trace Disabled)
[02:08:08.970]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:08:08.970]    __FlashAddr=0x00000000
[02:08:08.971]    __FlashLen=0x00000000
[02:08:08.971]    __FlashArg=0x00000000
[02:08:08.971]    __FlashOp=0x00000000
[02:08:08.971]    __Result=0x00000000
[02:08:08.971]  </debugvars>
[02:08:08.971]  
[02:08:08.971]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:08:08.971]    <block atomic="false" info="">
[02:08:08.971]      __var deviceID = 0;
[02:08:08.971]        // -> [deviceID <= 0x00000000]
[02:08:08.971]      __var version = 0;
[02:08:08.971]        // -> [version <= 0x00000000]
[02:08:08.971]      __var partNum = 0;
[02:08:08.971]        // -> [partNum <= 0x00000000]
[02:08:08.971]      __var manuf = 0;
[02:08:08.971]        // -> [manuf <= 0x00000000]
[02:08:08.971]      __var isMSPM0G1X0X_G3X0X = 0;
[02:08:08.971]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:08:08.971]      __var isProduction = 0;
[02:08:08.971]        // -> [isProduction <= 0x00000000]
[02:08:08.971]      __var continueId = 0;
[02:08:08.971]        // -> [continueId <= 0x00000000]
[02:08:08.971]      deviceID =   Read32(0x41C40004);
[02:08:08.983]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:08:08.983]        // -> [deviceID <= 0x2BB8802F]
[02:08:08.983]      version = deviceID >> 28;
[02:08:08.983]        // -> [version <= 0x00000002]
[02:08:08.983]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:08:08.983]        // -> [partNum <= 0x0000BB88]
[02:08:08.983]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:08:08.983]        // -> [manuf <= 0x00000017]
[02:08:08.983]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:08:08.983]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:08:08.983]      isProduction = (version > 0);
[02:08:08.983]        // -> [isProduction <= 0x00000001]
[02:08:08.983]    </block>
[02:08:08.983]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:08:08.983]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:08:08.983]        // =>  FALSE
[02:08:08.983]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:08:08.983]    </control>
[02:08:08.985]    <control if="continueId == 4" while="" timeout="0" info="">
[02:08:08.985]      // if-block "continueId == 4"
[02:08:08.985]        // =>  FALSE
[02:08:08.985]      // skip if-block "continueId == 4"
[02:08:08.985]    </control>
[02:08:08.985]    <control if="!isProduction" while="" timeout="0" info="">
[02:08:08.985]      // if-block "!isProduction"
[02:08:08.985]        // =>  FALSE
[02:08:08.985]      // skip if-block "!isProduction"
[02:08:08.985]    </control>
[02:08:08.986]  </sequence>
[02:08:08.986]  
[02:09:26.562]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:09:26.562]  
[02:09:26.565]  <debugvars>
[02:09:26.565]    // Pre-defined
[02:09:26.565]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:09:26.565]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:09:26.566]    __dp=0x00000000
[02:09:26.566]    __ap=0x00000000
[02:09:26.566]    __traceout=0x00000000      (Trace Disabled)
[02:09:26.566]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:09:26.566]    __FlashAddr=0x00000000
[02:09:26.566]    __FlashLen=0x00000000
[02:09:26.566]    __FlashArg=0x00000000
[02:09:26.566]    __FlashOp=0x00000000
[02:09:26.566]    __Result=0x00000000
[02:09:26.566]  </debugvars>
[02:09:26.566]  
[02:09:26.567]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:09:26.567]    <block atomic="false" info="">
[02:09:26.567]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:09:26.567]        // -> [isSWJ <= 0x00000001]
[02:09:26.567]      __var hasDormant = __protocol & 0x00020000;
[02:09:26.567]        // -> [hasDormant <= 0x00000000]
[02:09:26.567]      __var protType   = __protocol & 0x0000FFFF;
[02:09:26.567]        // -> [protType <= 0x00000002]
[02:09:26.567]    </block>
[02:09:26.567]    <control if="protType == 1" while="" timeout="0" info="">
[02:09:26.567]      // if-block "protType == 1"
[02:09:26.567]        // =>  FALSE
[02:09:26.567]      // skip if-block "protType == 1"
[02:09:26.567]    </control>
[02:09:26.569]    <control if="protType == 2" while="" timeout="0" info="">
[02:09:26.569]      // if-block "protType == 2"
[02:09:26.569]        // =>  TRUE
[02:09:26.569]      <control if="isSWJ" while="" timeout="0" info="">
[02:09:26.569]        // if-block "isSWJ"
[02:09:26.569]          // =>  TRUE
[02:09:26.569]        <control if="hasDormant" while="" timeout="0" info="">
[02:09:26.569]          // if-block "hasDormant"
[02:09:26.569]            // =>  FALSE
[02:09:26.569]          // skip if-block "hasDormant"
[02:09:26.569]        </control>
[02:09:26.569]        <control if="!hasDormant" while="" timeout="0" info="">
[02:09:26.569]          // if-block "!hasDormant"
[02:09:26.570]            // =>  TRUE
[02:09:26.570]          <block atomic="false" info="">
[02:09:26.570]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:09:26.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:09:26.572]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:09:26.575]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:09:26.575]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:09:26.577]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:09:26.577]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:09:26.583]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:09:26.583]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:09:26.583]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:09:26.583]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:09:26.587]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:09:26.587]          </block>
[02:09:26.587]          // end if-block "!hasDormant"
[02:09:26.587]        </control>
[02:09:26.587]        // end if-block "isSWJ"
[02:09:26.587]      </control>
[02:09:26.587]      <control if="!isSWJ" while="" timeout="0" info="">
[02:09:26.587]        // if-block "!isSWJ"
[02:09:26.587]          // =>  FALSE
[02:09:26.587]        // skip if-block "!isSWJ"
[02:09:26.587]      </control>
[02:09:26.587]      <block atomic="false" info="">
[02:09:26.587]        ReadDP(0x0);
[02:09:26.590]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:09:26.590]      </block>
[02:09:26.590]      // end if-block "protType == 2"
[02:09:26.590]    </control>
[02:09:26.590]  </sequence>
[02:09:26.590]  
[02:09:26.595]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:09:26.595]  
[02:09:26.595]  <debugvars>
[02:09:26.595]    // Pre-defined
[02:09:26.595]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:09:26.595]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:09:26.595]    __dp=0x00000000
[02:09:26.595]    __ap=0x00000000
[02:09:26.595]    __traceout=0x00000000      (Trace Disabled)
[02:09:26.595]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:09:26.597]    __FlashAddr=0x00000000
[02:09:26.597]    __FlashLen=0x00000000
[02:09:26.597]    __FlashArg=0x00000000
[02:09:26.597]    __FlashOp=0x00000000
[02:09:26.597]    __Result=0x00000000
[02:09:26.597]  </debugvars>
[02:09:26.597]  
[02:09:26.597]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:09:26.597]    <block atomic="false" info="">
[02:09:26.597]      __var SW_DP_ABORT       = 0x0;
[02:09:26.597]        // -> [SW_DP_ABORT <= 0x00000000]
[02:09:26.597]      __var DP_CTRL_STAT      = 0x4;
[02:09:26.597]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:09:26.597]      __var DP_SELECT         = 0x8;
[02:09:26.597]        // -> [DP_SELECT <= 0x00000008]
[02:09:26.597]      __var powered_down      = 0;
[02:09:26.597]        // -> [powered_down <= 0x00000000]
[02:09:26.597]      WriteDP(DP_SELECT, 0x00000000);
[02:09:26.600]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:09:26.600]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:09:26.600]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:09:26.600]        // -> [powered_down <= 0x00000001]
[02:09:26.600]    </block>
[02:09:26.600]    <control if="powered_down" while="" timeout="0" info="">
[02:09:26.600]      // if-block "powered_down"
[02:09:26.600]        // =>  TRUE
[02:09:26.600]      <block atomic="false" info="">
[02:09:26.600]        Message(0, "Debug/System power-up request sent");
[02:09:26.604]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:09:26.604]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:09:26.604]      </block>
[02:09:26.604]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:09:26.604]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:09:26.609]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:09:26.609]        // while-condition  =>  FALSE
[02:09:26.609]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:09:26.609]      </control>
[02:09:26.609]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:09:26.609]        // if-block "(__protocol & 0xFFFF) == 1"
[02:09:26.609]          // =>  FALSE
[02:09:26.609]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:09:26.609]      </control>
[02:09:26.609]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:09:26.609]        // if-block "(__protocol & 0xFFFF) == 2"
[02:09:26.609]          // =>  TRUE
[02:09:26.609]        <block atomic="false" info="">
[02:09:26.609]          Message(0, "executing SWD power up");
[02:09:26.611]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:09:26.614]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:09:26.614]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:09:26.617]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:09:26.617]        </block>
[02:09:26.617]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:09:26.617]      </control>
[02:09:26.621]      // end if-block "powered_down"
[02:09:26.621]    </control>
[02:09:26.621]    <block atomic="false" info="">
[02:09:26.621]      __var DEBUG_PORT_VAL    = 0;
[02:09:26.621]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:09:26.621]      __var ACCESS_POINT_VAL  = 0;
[02:09:26.621]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:09:26.621]      __ap = 1; 
[02:09:26.621]        // -> [__ap <= 0x00000001]
[02:09:26.621]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:09:26.625]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:09:26.625]      __ap = 4;
[02:09:26.625]        // -> [__ap <= 0x00000004]
[02:09:26.625]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:09:26.628]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:09:26.628]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:09:26.628]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:09:26.629]    </block>
[02:09:26.629]    <block atomic="false" info="">
[02:09:26.629]      __var nReset = 0x80;
[02:09:26.629]        // -> [nReset <= 0x00000080]
[02:09:26.629]      __var canReadPins = 0;
[02:09:26.629]        // -> [canReadPins <= 0x00000000]
[02:09:26.629]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:09:26.633]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:09:26.633]        // -> [canReadPins <= 0x00000001]
[02:09:26.633]    </block>
[02:09:26.633]    <control if="" while="1" timeout="200" info="">
[02:09:26.633]      // while "1"  (timeout="200")
[02:09:26.633]      // while-condition  =>  TRUE
[02:09:26.633]      // while "1"  (timeout="200")
[02:09:26.633]      // while-condition  =>  TRUE
[02:09:26.633]      // while "1"  (timeout="200")
[02:09:26.633]      // while-condition  =>  TRUE
[02:09:26.633]      // while "1"  (timeout="200")
[02:09:26.637]      // while-condition  =>  TRUE
[02:09:26.637]      // while "1"  (timeout="200")
[02:09:26.637]      // while-condition  =>  TRUE
[02:09:26.637]      // while "1"  (timeout="200")
[02:09:26.637]      // while-condition  =>  TRUE
[02:09:26.637]      // while "1"  (timeout="200")
[02:09:26.637]      // while-condition  =>  TRUE
[02:09:26.637]      // while "1"  (timeout="200")
[02:09:26.637]      // while-condition  =>  TRUE
[02:09:26.637]      // while "1"  (timeout="200")
[02:09:26.637]      // while-condition  =>  TRUE
[02:09:26.637]      // while "1"  (timeout="200")
[02:09:26.637]      // while-condition  =>  TRUE
[02:09:26.637]      // while "1"  (timeout="200")
[02:09:26.637]      // while-condition  =>  TRUE
[02:09:26.637]      // while "1"  (timeout="200")
[02:09:26.637]      // while-condition  =>  TRUE
[02:09:26.637]      // while "1"  (timeout="200")
[02:09:26.639]      // while-condition  =>  TRUE
[02:09:26.639]      // while "1"  (timeout="200")
[02:09:26.639]      // while-condition  =>  TRUE
[02:09:26.639]      // while "1"  (timeout="200")
[02:09:26.639]      // while-condition  =>  TRUE
[02:09:26.639]      // while "1"  (timeout="200")
[02:09:26.639]      // while-condition  =>  TRUE
[02:09:26.639]      // while "1"  (timeout="200")
[02:09:26.639]      // while-condition  =>  TRUE
[02:09:26.639]      // while "1"  (timeout="200")
[02:09:26.639]      // while-condition  =>  TRUE
[02:09:26.639]      // while "1"  (timeout="200")
[02:09:26.639]      // while-condition  =>  TRUE
[02:09:26.639]      // while "1"  (timeout="200")
[02:09:26.640]      // while-condition  =>  TRUE
[02:09:26.640]      // while "1"  (timeout="200")
[02:09:26.640]      // while-condition  =>  TRUE
[02:09:26.640]      // while "1"  (timeout="200")
[02:09:26.640]      // while-condition  =>  TRUE
[02:09:26.640]      // while "1"  (timeout="200")
[02:09:26.640]      // while-condition  =>  TRUE
[02:09:26.641]      // while "1"  (timeout="200")
[02:09:26.641]      // while  =>  TIMEOUT
[02:09:26.641]      // end while "1"
[02:09:26.641]    </control>
[02:09:26.641]    <control if="canReadPins" while="" timeout="0" info="">
[02:09:26.641]      // if-block "canReadPins"
[02:09:26.641]        // =>  TRUE
[02:09:26.641]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:09:26.641]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:09:26.643]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:09:26.643]        // while-condition  =>  FALSE
[02:09:26.643]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:09:26.643]      </control>
[02:09:26.643]      // end if-block "canReadPins"
[02:09:26.643]    </control>
[02:09:26.643]    <control if="!canReadPins" while="" timeout="0" info="">
[02:09:26.643]      // if-block "!canReadPins"
[02:09:26.643]        // =>  FALSE
[02:09:26.643]      // skip if-block "!canReadPins"
[02:09:26.643]    </control>
[02:09:26.643]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:09:26.643]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:09:26.643]        // =>  TRUE
[02:09:26.643]      <block atomic="false" info="">
[02:09:26.643]        WriteAP(0x00, 0x190008);
[02:09:26.646]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:09:26.646]        WriteAP(0xF0, 0x01);
[02:09:26.651]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:09:26.651]      </block>
[02:09:26.651]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:09:26.651]    </control>
[02:09:26.651]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:09:26.651]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:09:26.651]        // =>  FALSE
[02:09:26.651]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:09:26.651]    </control>
[02:09:26.651]    <block atomic="false" info="">
[02:09:26.651]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:09:26.656]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:09:26.656]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:09:26.656]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:09:26.658]      __ap = 0; //lets make sure we reset the access point selection
[02:09:26.658]        // -> [__ap <= 0x00000000]
[02:09:26.658]    </block>
[02:09:26.658]  </sequence>
[02:09:26.658]  
[02:09:26.685]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:09:26.685]  
[02:09:26.687]  <debugvars>
[02:09:26.687]    // Pre-defined
[02:09:26.688]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:09:26.688]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[02:09:26.688]    __dp=0x00000000
[02:09:26.688]    __ap=0x00000000
[02:09:26.688]    __traceout=0x00000000      (Trace Disabled)
[02:09:26.688]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:09:26.688]    __FlashAddr=0x00000000
[02:09:26.688]    __FlashLen=0x00000000
[02:09:26.688]    __FlashArg=0x00000000
[02:09:26.688]    __FlashOp=0x00000000
[02:09:26.688]    __Result=0x00000000
[02:09:26.689]  </debugvars>
[02:09:26.689]  
[02:09:26.689]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:09:26.689]    <block atomic="false" info="">
[02:09:26.689]      __var deviceID = 0;
[02:09:26.689]        // -> [deviceID <= 0x00000000]
[02:09:26.689]      __var version = 0;
[02:09:26.689]        // -> [version <= 0x00000000]
[02:09:26.689]      __var partNum = 0;
[02:09:26.689]        // -> [partNum <= 0x00000000]
[02:09:26.689]      __var manuf = 0;
[02:09:26.689]        // -> [manuf <= 0x00000000]
[02:09:26.689]      __var isMSPM0G1X0X_G3X0X = 0;
[02:09:26.689]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:09:26.689]      __var isProduction = 0;
[02:09:26.690]        // -> [isProduction <= 0x00000000]
[02:09:26.690]      __var continueId = 0;
[02:09:26.690]        // -> [continueId <= 0x00000000]
[02:09:26.690]      deviceID =   Read32(0x41C40004);
[02:09:26.693]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:09:26.693]        // -> [deviceID <= 0x2BB8802F]
[02:09:26.693]      version = deviceID >> 28;
[02:09:26.693]        // -> [version <= 0x00000002]
[02:09:26.693]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:09:26.693]        // -> [partNum <= 0x0000BB88]
[02:09:26.693]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:09:26.696]        // -> [manuf <= 0x00000017]
[02:09:26.696]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:09:26.696]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:09:26.696]      isProduction = (version > 0);
[02:09:26.696]        // -> [isProduction <= 0x00000001]
[02:09:26.696]    </block>
[02:09:26.696]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:09:26.696]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:09:26.696]        // =>  FALSE
[02:09:26.696]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:09:26.696]    </control>
[02:09:26.696]    <control if="continueId == 4" while="" timeout="0" info="">
[02:09:26.696]      // if-block "continueId == 4"
[02:09:26.696]        // =>  FALSE
[02:09:26.696]      // skip if-block "continueId == 4"
[02:09:26.696]    </control>
[02:09:26.696]    <control if="!isProduction" while="" timeout="0" info="">
[02:09:26.696]      // if-block "!isProduction"
[02:09:26.696]        // =>  FALSE
[02:09:26.696]      // skip if-block "!isProduction"
[02:09:26.696]    </control>
[02:09:26.698]  </sequence>
[02:09:26.698]  
[02:09:32.308]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[02:09:32.308]  
[02:09:32.316]  <debugvars>
[02:09:32.316]    // Pre-defined
[02:09:32.316]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:09:32.316]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:09:32.316]    __dp=0x00000000
[02:09:32.316]    __ap=0x00000000
[02:09:32.316]    __traceout=0x00000000      (Trace Disabled)
[02:09:32.316]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:09:32.316]    __FlashAddr=0x00000000
[02:09:32.316]    __FlashLen=0x00000000
[02:09:32.316]    __FlashArg=0x00000000
[02:09:32.316]    __FlashOp=0x00000000
[02:09:32.316]    __Result=0x00000000
[02:09:32.316]  </debugvars>
[02:09:32.316]  
[02:09:32.316]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[02:09:32.316]    <block atomic="false" info="">
[02:09:32.316]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[02:09:32.316]        // -> [isSWJ <= 0x00000001]
[02:09:32.316]      __var hasDormant = __protocol & 0x00020000;
[02:09:32.316]        // -> [hasDormant <= 0x00000000]
[02:09:32.316]      __var protType   = __protocol & 0x0000FFFF;
[02:09:32.316]        // -> [protType <= 0x00000002]
[02:09:32.316]    </block>
[02:09:32.316]    <control if="protType == 1" while="" timeout="0" info="">
[02:09:32.316]      // if-block "protType == 1"
[02:09:32.316]        // =>  FALSE
[02:09:32.316]      // skip if-block "protType == 1"
[02:09:32.316]    </control>
[02:09:32.316]    <control if="protType == 2" while="" timeout="0" info="">
[02:09:32.316]      // if-block "protType == 2"
[02:09:32.316]        // =>  TRUE
[02:09:32.320]      <control if="isSWJ" while="" timeout="0" info="">
[02:09:32.320]        // if-block "isSWJ"
[02:09:32.320]          // =>  TRUE
[02:09:32.320]        <control if="hasDormant" while="" timeout="0" info="">
[02:09:32.320]          // if-block "hasDormant"
[02:09:32.320]            // =>  FALSE
[02:09:32.320]          // skip if-block "hasDormant"
[02:09:32.320]        </control>
[02:09:32.320]        <control if="!hasDormant" while="" timeout="0" info="">
[02:09:32.320]          // if-block "!hasDormant"
[02:09:32.320]            // =>  TRUE
[02:09:32.320]          <block atomic="false" info="">
[02:09:32.320]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[02:09:32.320]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:09:32.320]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[02:09:32.324]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[02:09:32.324]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[02:09:32.328]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:09:32.328]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[02:09:32.328]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[02:09:32.328]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[02:09:32.332]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[02:09:32.332]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[02:09:32.336]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[02:09:32.336]          </block>
[02:09:32.336]          // end if-block "!hasDormant"
[02:09:32.336]        </control>
[02:09:32.336]        // end if-block "isSWJ"
[02:09:32.336]      </control>
[02:09:32.336]      <control if="!isSWJ" while="" timeout="0" info="">
[02:09:32.336]        // if-block "!isSWJ"
[02:09:32.336]          // =>  FALSE
[02:09:32.336]        // skip if-block "!isSWJ"
[02:09:32.336]      </control>
[02:09:32.336]      <block atomic="false" info="">
[02:09:32.336]        ReadDP(0x0);
[02:09:32.340]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[02:09:32.340]      </block>
[02:09:32.340]      // end if-block "protType == 2"
[02:09:32.340]    </control>
[02:09:32.340]  </sequence>
[02:09:32.340]  
[02:09:32.340]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[02:09:32.340]  
[02:09:32.340]  <debugvars>
[02:09:32.340]    // Pre-defined
[02:09:32.340]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:09:32.340]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:09:32.344]    __dp=0x00000000
[02:09:32.344]    __ap=0x00000000
[02:09:32.344]    __traceout=0x00000000      (Trace Disabled)
[02:09:32.344]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:09:32.344]    __FlashAddr=0x00000000
[02:09:32.344]    __FlashLen=0x00000000
[02:09:32.344]    __FlashArg=0x00000000
[02:09:32.344]    __FlashOp=0x00000000
[02:09:32.344]    __Result=0x00000000
[02:09:32.344]  </debugvars>
[02:09:32.344]  
[02:09:32.344]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[02:09:32.344]    <block atomic="false" info="">
[02:09:32.344]      __var SW_DP_ABORT       = 0x0;
[02:09:32.344]        // -> [SW_DP_ABORT <= 0x00000000]
[02:09:32.344]      __var DP_CTRL_STAT      = 0x4;
[02:09:32.344]        // -> [DP_CTRL_STAT <= 0x00000004]
[02:09:32.344]      __var DP_SELECT         = 0x8;
[02:09:32.344]        // -> [DP_SELECT <= 0x00000008]
[02:09:32.344]      __var powered_down      = 0;
[02:09:32.344]        // -> [powered_down <= 0x00000000]
[02:09:32.344]      WriteDP(DP_SELECT, 0x00000000);
[02:09:32.344]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[02:09:32.348]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[02:09:32.348]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[02:09:32.348]        // -> [powered_down <= 0x00000001]
[02:09:32.348]    </block>
[02:09:32.348]    <control if="powered_down" while="" timeout="0" info="">
[02:09:32.348]      // if-block "powered_down"
[02:09:32.348]        // =>  TRUE
[02:09:32.348]      <block atomic="false" info="">
[02:09:32.348]        Message(0, "Debug/System power-up request sent");
[02:09:32.352]        WriteDP(DP_CTRL_STAT, 0x50000000);
[02:09:32.352]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[02:09:32.352]      </block>
[02:09:32.352]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[02:09:32.352]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[02:09:32.356]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[02:09:32.356]        // while-condition  =>  FALSE
[02:09:32.356]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[02:09:32.356]      </control>
[02:09:32.356]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[02:09:32.356]        // if-block "(__protocol & 0xFFFF) == 1"
[02:09:32.356]          // =>  FALSE
[02:09:32.356]        // skip if-block "(__protocol & 0xFFFF) == 1"
[02:09:32.356]      </control>
[02:09:32.356]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[02:09:32.356]        // if-block "(__protocol & 0xFFFF) == 2"
[02:09:32.356]          // =>  TRUE
[02:09:32.356]        <block atomic="false" info="">
[02:09:32.356]          Message(0, "executing SWD power up");
[02:09:32.356]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[02:09:32.360]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[02:09:32.360]          WriteDP(SW_DP_ABORT, 0x0000001E);
[02:09:32.360]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[02:09:32.360]        </block>
[02:09:32.360]        // end if-block "(__protocol & 0xFFFF) == 2"
[02:09:32.360]      </control>
[02:09:32.360]      // end if-block "powered_down"
[02:09:32.364]    </control>
[02:09:32.364]    <block atomic="false" info="">
[02:09:32.364]      __var DEBUG_PORT_VAL    = 0;
[02:09:32.364]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[02:09:32.364]      __var ACCESS_POINT_VAL  = 0;
[02:09:32.364]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[02:09:32.364]      __ap = 1; 
[02:09:32.364]        // -> [__ap <= 0x00000001]
[02:09:32.364]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[02:09:32.368]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[02:09:32.368]      __ap = 4;
[02:09:32.368]        // -> [__ap <= 0x00000004]
[02:09:32.368]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:09:32.372]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[02:09:32.372]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[02:09:32.372]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:09:32.372]    </block>
[02:09:32.372]    <block atomic="false" info="">
[02:09:32.372]      __var nReset = 0x80;
[02:09:32.372]        // -> [nReset <= 0x00000080]
[02:09:32.372]      __var canReadPins = 0;
[02:09:32.376]        // -> [canReadPins <= 0x00000000]
[02:09:32.376]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[02:09:32.376]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[02:09:32.376]        // -> [canReadPins <= 0x00000001]
[02:09:32.376]    </block>
[02:09:32.376]    <control if="" while="1" timeout="200" info="">
[02:09:32.376]      // while "1"  (timeout="200")
[02:09:32.376]      // while-condition  =>  TRUE
[02:09:32.376]      // while "1"  (timeout="200")
[02:09:32.376]      // while-condition  =>  TRUE
[02:09:32.376]      // while "1"  (timeout="200")
[02:09:32.376]      // while-condition  =>  TRUE
[02:09:32.376]      // while "1"  (timeout="200")
[02:09:32.376]      // while-condition  =>  TRUE
[02:09:32.376]      // while "1"  (timeout="200")
[02:09:32.376]      // while-condition  =>  TRUE
[02:09:32.376]      // while "1"  (timeout="200")
[02:09:32.376]      // while-condition  =>  TRUE
[02:09:32.376]      // while "1"  (timeout="200")
[02:09:32.376]      // while-condition  =>  TRUE
[02:09:32.376]      // while "1"  (timeout="200")
[02:09:32.376]      // while-condition  =>  TRUE
[02:09:32.376]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.380]      // while "1"  (timeout="200")
[02:09:32.380]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.384]      // while "1"  (timeout="200")
[02:09:32.384]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.388]      // while-condition  =>  TRUE
[02:09:32.388]      // while "1"  (timeout="200")
[02:09:32.392]      // while-condition  =>  TRUE
[02:09:32.392]      // while "1"  (timeout="200")
[02:09:32.392]      // while  =>  TIMEOUT
[02:09:32.392]      // end while "1"
[02:09:32.392]    </control>
[02:09:32.392]    <control if="canReadPins" while="" timeout="0" info="">
[02:09:32.392]      // if-block "canReadPins"
[02:09:32.392]        // =>  TRUE
[02:09:32.392]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[02:09:32.392]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[02:09:32.392]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[02:09:32.392]        // while-condition  =>  FALSE
[02:09:32.392]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[02:09:32.392]      </control>
[02:09:32.392]      // end if-block "canReadPins"
[02:09:32.392]    </control>
[02:09:32.392]    <control if="!canReadPins" while="" timeout="0" info="">
[02:09:32.392]      // if-block "!canReadPins"
[02:09:32.392]        // =>  FALSE
[02:09:32.392]      // skip if-block "!canReadPins"
[02:09:32.392]    </control>
[02:09:32.392]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[02:09:32.396]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:09:32.396]        // =>  TRUE
[02:09:32.396]      <block atomic="false" info="">
[02:09:32.396]        WriteAP(0x00, 0x190008);
[02:09:32.396]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[02:09:32.396]        WriteAP(0xF0, 0x01);
[02:09:32.400]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[02:09:32.400]      </block>
[02:09:32.400]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[02:09:32.400]    </control>
[02:09:32.400]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[02:09:32.400]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:09:32.400]        // =>  FALSE
[02:09:32.400]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[02:09:32.400]    </control>
[02:09:32.400]    <block atomic="false" info="">
[02:09:32.400]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[02:09:32.404]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[02:09:32.408]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[02:09:32.408]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[02:09:32.408]      __ap = 0; //lets make sure we reset the access point selection
[02:09:32.408]        // -> [__ap <= 0x00000000]
[02:09:32.408]    </block>
[02:09:32.408]  </sequence>
[02:09:32.408]  
[02:09:32.433]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[02:09:32.433]  
[02:09:32.433]  <debugvars>
[02:09:32.433]    // Pre-defined
[02:09:32.433]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[02:09:32.433]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[02:09:32.433]    __dp=0x00000000
[02:09:32.433]    __ap=0x00000000
[02:09:32.433]    __traceout=0x00000000      (Trace Disabled)
[02:09:32.437]    __errorcontrol=0x00000000  (Skip Errors="False")
[02:09:32.437]    __FlashAddr=0x00000000
[02:09:32.437]    __FlashLen=0x00000000
[02:09:32.437]    __FlashArg=0x00000000
[02:09:32.437]    __FlashOp=0x00000000
[02:09:32.437]    __Result=0x00000000
[02:09:32.437]  </debugvars>
[02:09:32.437]  
[02:09:32.437]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[02:09:32.437]    <block atomic="false" info="">
[02:09:32.437]      __var deviceID = 0;
[02:09:32.437]        // -> [deviceID <= 0x00000000]
[02:09:32.437]      __var version = 0;
[02:09:32.437]        // -> [version <= 0x00000000]
[02:09:32.437]      __var partNum = 0;
[02:09:32.437]        // -> [partNum <= 0x00000000]
[02:09:32.437]      __var manuf = 0;
[02:09:32.437]        // -> [manuf <= 0x00000000]
[02:09:32.437]      __var isMSPM0G1X0X_G3X0X = 0;
[02:09:32.437]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[02:09:32.437]      __var isProduction = 0;
[02:09:32.437]        // -> [isProduction <= 0x00000000]
[02:09:32.437]      __var continueId = 0;
[02:09:32.437]        // -> [continueId <= 0x00000000]
[02:09:32.437]      deviceID =   Read32(0x41C40004);
[02:09:32.441]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[02:09:32.441]        // -> [deviceID <= 0x2BB8802F]
[02:09:32.441]      version = deviceID >> 28;
[02:09:32.441]        // -> [version <= 0x00000002]
[02:09:32.441]      partNum = (deviceID & 0x0FFFF000) >> 12;
[02:09:32.441]        // -> [partNum <= 0x0000BB88]
[02:09:32.441]      manuf = (deviceID & 0x00000FFE) >> 1;
[02:09:32.441]        // -> [manuf <= 0x00000017]
[02:09:32.445]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[02:09:32.445]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[02:09:32.445]      isProduction = (version > 0);
[02:09:32.445]        // -> [isProduction <= 0x00000001]
[02:09:32.445]    </block>
[02:09:32.445]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[02:09:32.445]      // if-block "!isMSPM0G1X0X_G3X0X"
[02:09:32.445]        // =>  FALSE
[02:09:32.445]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[02:09:32.445]    </control>
[02:09:32.445]    <control if="continueId == 4" while="" timeout="0" info="">
[02:09:32.445]      // if-block "continueId == 4"
[02:09:32.445]        // =>  FALSE
[02:09:32.445]      // skip if-block "continueId == 4"
[02:09:32.445]    </control>
[02:09:32.445]    <control if="!isProduction" while="" timeout="0" info="">
[02:09:32.445]      // if-block "!isProduction"
[02:09:32.445]        // =>  FALSE
[02:09:32.445]      // skip if-block "!isProduction"
[02:09:32.445]    </control>
[02:09:32.445]  </sequence>
[02:09:32.445]  
