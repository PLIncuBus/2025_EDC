/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0002.log
 *  Created     : 13:20:32 (22/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[13:20:32.864]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:20:32.864]  
[13:20:32.865]  <debugvars>
[13:20:32.865]    // Pre-defined
[13:20:32.865]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:20:32.865]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:20:32.865]    __dp=0x00000000
[13:20:32.865]    __ap=0x00000000
[13:20:32.865]    __traceout=0x00000000      (Trace Disabled)
[13:20:32.865]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:20:32.866]    __FlashAddr=0x00000000
[13:20:32.866]    __FlashLen=0x00000000
[13:20:32.866]    __FlashArg=0x00000000
[13:20:32.866]    __FlashOp=0x00000000
[13:20:32.866]    __Result=0x00000000
[13:20:32.866]  </debugvars>
[13:20:32.866]  
[13:20:32.866]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:20:32.866]    <block atomic="false" info="">
[13:20:32.867]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:20:32.867]        // -> [isSWJ <= 0x00000001]
[13:20:32.867]      __var hasDormant = __protocol & 0x00020000;
[13:20:32.867]        // -> [hasDormant <= 0x00000000]
[13:20:32.867]      __var protType   = __protocol & 0x0000FFFF;
[13:20:32.867]        // -> [protType <= 0x00000002]
[13:20:32.867]    </block>
[13:20:32.867]    <control if="protType == 1" while="" timeout="0" info="">
[13:20:32.867]      // if-block "protType == 1"
[13:20:32.867]        // =>  FALSE
[13:20:32.868]      // skip if-block "protType == 1"
[13:20:32.868]    </control>
[13:20:32.868]    <control if="protType == 2" while="" timeout="0" info="">
[13:20:32.868]      // if-block "protType == 2"
[13:20:32.868]        // =>  TRUE
[13:20:32.868]      <control if="isSWJ" while="" timeout="0" info="">
[13:20:32.868]        // if-block "isSWJ"
[13:20:32.868]          // =>  TRUE
[13:20:32.869]        <control if="hasDormant" while="" timeout="0" info="">
[13:20:32.869]          // if-block "hasDormant"
[13:20:32.869]            // =>  FALSE
[13:20:32.869]          // skip if-block "hasDormant"
[13:20:32.869]        </control>
[13:20:32.870]        <control if="!hasDormant" while="" timeout="0" info="">
[13:20:32.870]          // if-block "!hasDormant"
[13:20:32.870]            // =>  TRUE
[13:20:32.871]          <block atomic="false" info="">
[13:20:32.871]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:20:32.871]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:20:32.871]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:20:32.871]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:20:32.872]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:20:32.872]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:20:32.872]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:20:32.872]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:20:32.873]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:20:32.873]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:20:32.873]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:20:32.873]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:20:32.873]          </block>
[13:20:32.873]          // end if-block "!hasDormant"
[13:20:32.874]        </control>
[13:20:32.874]        // end if-block "isSWJ"
[13:20:32.874]      </control>
[13:20:32.874]      <control if="!isSWJ" while="" timeout="0" info="">
[13:20:32.874]        // if-block "!isSWJ"
[13:20:32.874]          // =>  FALSE
[13:20:32.874]        // skip if-block "!isSWJ"
[13:20:32.875]      </control>
[13:20:32.875]      <block atomic="false" info="">
[13:20:32.875]        ReadDP(0x0);
[13:20:32.875]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:20:32.876]      </block>
[13:20:32.876]      // end if-block "protType == 2"
[13:20:32.876]    </control>
[13:20:32.876]  </sequence>
[13:20:32.876]  
[13:20:32.877]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:20:32.877]  
[13:20:32.877]  <debugvars>
[13:20:32.877]    // Pre-defined
[13:20:32.877]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:20:32.877]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:20:32.877]    __dp=0x00000000
[13:20:32.878]    __ap=0x00000000
[13:20:32.878]    __traceout=0x00000000      (Trace Disabled)
[13:20:32.878]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:20:32.878]    __FlashAddr=0x00000000
[13:20:32.878]    __FlashLen=0x00000000
[13:20:32.878]    __FlashArg=0x00000000
[13:20:32.878]    __FlashOp=0x00000000
[13:20:32.878]    __Result=0x00000000
[13:20:32.878]  </debugvars>
[13:20:32.879]  
[13:20:32.879]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:20:32.879]    <block atomic="false" info="">
[13:20:32.879]      __var SW_DP_ABORT       = 0x0;
[13:20:32.879]        // -> [SW_DP_ABORT <= 0x00000000]
[13:20:32.879]      __var DP_CTRL_STAT      = 0x4;
[13:20:32.879]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:20:32.879]      __var DP_SELECT         = 0x8;
[13:20:32.879]        // -> [DP_SELECT <= 0x00000008]
[13:20:32.879]      __var powered_down      = 0;
[13:20:32.880]        // -> [powered_down <= 0x00000000]
[13:20:32.880]      WriteDP(DP_SELECT, 0x00000000);
[13:20:32.880]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:20:32.880]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:20:32.881]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:20:32.881]        // -> [powered_down <= 0x00000001]
[13:20:32.881]    </block>
[13:20:32.881]    <control if="powered_down" while="" timeout="0" info="">
[13:20:32.881]      // if-block "powered_down"
[13:20:32.881]        // =>  TRUE
[13:20:32.881]      <block atomic="false" info="">
[13:20:32.881]        Message(0, "Debug/System power-up request sent");
[13:20:32.887]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:20:32.888]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:20:32.888]      </block>
[13:20:32.888]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:20:32.888]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:20:32.889]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:20:32.889]        // while-condition  =>  FALSE
[13:20:32.889]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:20:32.889]      </control>
[13:20:32.889]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:20:32.889]        // if-block "(__protocol & 0xFFFF) == 1"
[13:20:32.889]          // =>  FALSE
[13:20:32.889]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:20:32.889]      </control>
[13:20:32.890]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:20:32.890]        // if-block "(__protocol & 0xFFFF) == 2"
[13:20:32.890]          // =>  TRUE
[13:20:32.890]        <block atomic="false" info="">
[13:20:32.890]          Message(0, "executing SWD power up");
[13:20:32.892]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:20:32.893]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:20:32.893]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:20:32.894]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:20:32.894]        </block>
[13:20:32.894]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:20:32.894]      </control>
[13:20:32.894]      // end if-block "powered_down"
[13:20:32.894]    </control>
[13:20:32.894]    <block atomic="false" info="">
[13:20:32.894]      __var DEBUG_PORT_VAL    = 0;
[13:20:32.894]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:20:32.894]      __var ACCESS_POINT_VAL  = 0;
[13:20:32.895]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:20:32.895]      __ap = 1; 
[13:20:32.895]        // -> [__ap <= 0x00000001]
[13:20:32.895]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:20:32.896]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:20:32.896]      __ap = 4;
[13:20:32.896]        // -> [__ap <= 0x00000004]
[13:20:32.896]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:20:32.897]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:20:32.897]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:20:32.898]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:20:32.900]    </block>
[13:20:32.900]    <block atomic="false" info="">
[13:20:32.900]      __var nReset = 0x80;
[13:20:32.900]        // -> [nReset <= 0x00000080]
[13:20:32.900]      __var canReadPins = 0;
[13:20:32.900]        // -> [canReadPins <= 0x00000000]
[13:20:32.901]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:20:32.901]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:20:32.901]        // -> [canReadPins <= 0x00000001]
[13:20:32.901]    </block>
[13:20:32.901]    <control if="" while="1" timeout="200" info="">
[13:20:32.902]      // while "1"  (timeout="200")
[13:20:32.902]      // while-condition  =>  TRUE
[13:20:32.902]      // while "1"  (timeout="200")
[13:20:32.902]      // while-condition  =>  TRUE
[13:20:32.902]      // while "1"  (timeout="200")
[13:20:32.903]      // while-condition  =>  TRUE
[13:20:32.903]      // while "1"  (timeout="200")
[13:20:32.903]      // while-condition  =>  TRUE
[13:20:32.903]      // while "1"  (timeout="200")
[13:20:32.903]      // while-condition  =>  TRUE
[13:20:32.903]      // while "1"  (timeout="200")
[13:20:32.903]      // while-condition  =>  TRUE
[13:20:32.903]      // while "1"  (timeout="200")
[13:20:32.904]      // while-condition  =>  TRUE
[13:20:32.904]      // while "1"  (timeout="200")
[13:20:32.904]      // while-condition  =>  TRUE
[13:20:32.905]      // while "1"  (timeout="200")
[13:20:32.905]      // while-condition  =>  TRUE
[13:20:32.905]      // while "1"  (timeout="200")
[13:20:32.905]      // while-condition  =>  TRUE
[13:20:32.905]      // while "1"  (timeout="200")
[13:20:32.905]      // while-condition  =>  TRUE
[13:20:32.905]      // while "1"  (timeout="200")
[13:20:32.905]      // while-condition  =>  TRUE
[13:20:32.906]      // while "1"  (timeout="200")
[13:20:32.906]      // while-condition  =>  TRUE
[13:20:32.906]      // while "1"  (timeout="200")
[13:20:32.906]      // while-condition  =>  TRUE
[13:20:32.906]      // while "1"  (timeout="200")
[13:20:32.906]      // while-condition  =>  TRUE
[13:20:32.907]      // while "1"  (timeout="200")
[13:20:32.907]      // while-condition  =>  TRUE
[13:20:32.907]      // while "1"  (timeout="200")
[13:20:32.907]      // while-condition  =>  TRUE
[13:20:32.907]      // while "1"  (timeout="200")
[13:20:32.907]      // while-condition  =>  TRUE
[13:20:32.907]      // while "1"  (timeout="200")
[13:20:32.907]      // while-condition  =>  TRUE
[13:20:32.907]      // while "1"  (timeout="200")
[13:20:32.907]      // while-condition  =>  TRUE
[13:20:32.907]      // while "1"  (timeout="200")
[13:20:32.907]      // while-condition  =>  TRUE
[13:20:32.907]      // while "1"  (timeout="200")
[13:20:32.907]      // while-condition  =>  TRUE
[13:20:32.908]      // while "1"  (timeout="200")
[13:20:32.908]      // while-condition  =>  TRUE
[13:20:32.908]      // while "1"  (timeout="200")
[13:20:32.908]      // while-condition  =>  TRUE
[13:20:32.908]      // while "1"  (timeout="200")
[13:20:32.909]      // while-condition  =>  TRUE
[13:20:32.909]      // while "1"  (timeout="200")
[13:20:32.909]      // while-condition  =>  TRUE
[13:20:32.909]      // while "1"  (timeout="200")
[13:20:32.909]      // while-condition  =>  TRUE
[13:20:32.909]      // while "1"  (timeout="200")
[13:20:32.909]      // while-condition  =>  TRUE
[13:20:32.909]      // while "1"  (timeout="200")
[13:20:32.909]      // while-condition  =>  TRUE
[13:20:32.909]      // while "1"  (timeout="200")
[13:20:32.909]      // while-condition  =>  TRUE
[13:20:32.910]      // while "1"  (timeout="200")
[13:20:32.910]      // while  =>  TIMEOUT
[13:20:32.911]      // end while "1"
[13:20:32.911]    </control>
[13:20:32.911]    <control if="canReadPins" while="" timeout="0" info="">
[13:20:32.911]      // if-block "canReadPins"
[13:20:32.911]        // =>  TRUE
[13:20:32.911]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:20:32.911]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:20:32.912]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:20:32.912]        // while-condition  =>  FALSE
[13:20:32.912]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:20:32.912]      </control>
[13:20:32.912]      // end if-block "canReadPins"
[13:20:32.912]    </control>
[13:20:32.912]    <control if="!canReadPins" while="" timeout="0" info="">
[13:20:32.912]      // if-block "!canReadPins"
[13:20:32.912]        // =>  FALSE
[13:20:32.912]      // skip if-block "!canReadPins"
[13:20:32.912]    </control>
[13:20:32.912]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:20:32.912]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:20:32.912]        // =>  TRUE
[13:20:32.912]      <block atomic="false" info="">
[13:20:32.914]        WriteAP(0x00, 0x190008);
[13:20:32.914]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:20:32.914]        WriteAP(0xF0, 0x01);
[13:20:32.915]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:20:32.915]      </block>
[13:20:32.915]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:20:32.916]    </control>
[13:20:32.916]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:20:32.916]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:20:32.916]        // =>  FALSE
[13:20:32.916]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:20:32.916]    </control>
[13:20:32.916]    <block atomic="false" info="">
[13:20:32.916]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:20:32.917]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:20:32.917]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:20:32.917]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:20:32.921]      __ap = 0; //lets make sure we reset the access point selection
[13:20:32.921]        // -> [__ap <= 0x00000000]
[13:20:32.921]    </block>
[13:20:32.921]  </sequence>
[13:20:32.921]  
[13:20:32.926]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:20:32.926]  
[13:20:32.927]  <debugvars>
[13:20:32.927]    // Pre-defined
[13:20:32.927]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:20:32.927]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:20:32.927]    __dp=0x00000000
[13:20:32.927]    __ap=0x00000000
[13:20:32.927]    __traceout=0x00000000      (Trace Disabled)
[13:20:32.927]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:20:32.927]    __FlashAddr=0x00000000
[13:20:32.927]    __FlashLen=0x00000000
[13:20:32.927]    __FlashArg=0x00000000
[13:20:32.929]    __FlashOp=0x00000000
[13:20:32.929]    __Result=0x00000000
[13:20:32.929]  </debugvars>
[13:20:32.929]  
[13:20:32.929]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:20:32.929]    <block atomic="false" info="">
[13:20:32.929]      __var deviceID = 0;
[13:20:32.929]        // -> [deviceID <= 0x00000000]
[13:20:32.930]      __var version = 0;
[13:20:32.930]        // -> [version <= 0x00000000]
[13:20:32.930]      __var partNum = 0;
[13:20:32.930]        // -> [partNum <= 0x00000000]
[13:20:32.930]      __var manuf = 0;
[13:20:32.930]        // -> [manuf <= 0x00000000]
[13:20:32.930]      __var isMSPM0G1X0X_G3X0X = 0;
[13:20:32.930]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:20:32.930]      __var isProduction = 0;
[13:20:32.931]        // -> [isProduction <= 0x00000000]
[13:20:32.931]      __var continueId = 0;
[13:20:32.931]        // -> [continueId <= 0x00000000]
[13:20:32.931]      deviceID =   Read32(0x41C40004);
[13:20:32.932]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:20:32.933]        // -> [deviceID <= 0x2BB8802F]
[13:20:32.933]      version = deviceID >> 28;
[13:20:32.933]        // -> [version <= 0x00000002]
[13:20:32.933]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:20:32.933]        // -> [partNum <= 0x0000BB88]
[13:20:32.933]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:20:32.933]        // -> [manuf <= 0x00000017]
[13:20:32.933]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:20:32.933]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:20:32.933]      isProduction = (version > 0);
[13:20:32.933]        // -> [isProduction <= 0x00000001]
[13:20:32.934]    </block>
[13:20:32.934]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:20:32.934]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:20:32.934]        // =>  FALSE
[13:20:32.934]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:20:32.934]    </control>
[13:20:32.934]    <control if="continueId == 4" while="" timeout="0" info="">
[13:20:32.934]      // if-block "continueId == 4"
[13:20:32.934]        // =>  FALSE
[13:20:32.934]      // skip if-block "continueId == 4"
[13:20:32.934]    </control>
[13:20:32.936]    <control if="!isProduction" while="" timeout="0" info="">
[13:20:32.936]      // if-block "!isProduction"
[13:20:32.936]        // =>  FALSE
[13:20:32.936]      // skip if-block "!isProduction"
[13:20:32.936]    </control>
[13:20:32.936]  </sequence>
[13:20:32.936]  
[13:25:04.260]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:25:04.260]  
[13:25:04.269]  <debugvars>
[13:25:04.269]    // Pre-defined
[13:25:04.269]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:25:04.269]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:25:04.269]    __dp=0x00000000
[13:25:04.269]    __ap=0x00000000
[13:25:04.269]    __traceout=0x00000000      (Trace Disabled)
[13:25:04.270]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:25:04.270]    __FlashAddr=0x00000000
[13:25:04.270]    __FlashLen=0x00000000
[13:25:04.270]    __FlashArg=0x00000000
[13:25:04.270]    __FlashOp=0x00000000
[13:25:04.270]    __Result=0x00000000
[13:25:04.270]  </debugvars>
[13:25:04.270]  
[13:25:04.271]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:25:04.271]    <block atomic="false" info="">
[13:25:04.271]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:25:04.271]        // -> [isSWJ <= 0x00000001]
[13:25:04.271]      __var hasDormant = __protocol & 0x00020000;
[13:25:04.271]        // -> [hasDormant <= 0x00000000]
[13:25:04.271]      __var protType   = __protocol & 0x0000FFFF;
[13:25:04.271]        // -> [protType <= 0x00000002]
[13:25:04.271]    </block>
[13:25:04.271]    <control if="protType == 1" while="" timeout="0" info="">
[13:25:04.272]      // if-block "protType == 1"
[13:25:04.272]        // =>  FALSE
[13:25:04.272]      // skip if-block "protType == 1"
[13:25:04.272]    </control>
[13:25:04.272]    <control if="protType == 2" while="" timeout="0" info="">
[13:25:04.272]      // if-block "protType == 2"
[13:25:04.272]        // =>  TRUE
[13:25:04.272]      <control if="isSWJ" while="" timeout="0" info="">
[13:25:04.272]        // if-block "isSWJ"
[13:25:04.272]          // =>  TRUE
[13:25:04.272]        <control if="hasDormant" while="" timeout="0" info="">
[13:25:04.273]          // if-block "hasDormant"
[13:25:04.273]            // =>  FALSE
[13:25:04.273]          // skip if-block "hasDormant"
[13:25:04.273]        </control>
[13:25:04.273]        <control if="!hasDormant" while="" timeout="0" info="">
[13:25:04.273]          // if-block "!hasDormant"
[13:25:04.273]            // =>  TRUE
[13:25:04.273]          <block atomic="false" info="">
[13:25:04.273]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:25:04.274]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:25:04.274]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:25:04.274]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:25:04.274]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:25:04.275]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:25:04.275]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:25:04.275]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:25:04.275]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:25:04.275]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:25:04.276]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:25:04.276]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:25:04.277]          </block>
[13:25:04.277]          // end if-block "!hasDormant"
[13:25:04.277]        </control>
[13:25:04.277]        // end if-block "isSWJ"
[13:25:04.277]      </control>
[13:25:04.277]      <control if="!isSWJ" while="" timeout="0" info="">
[13:25:04.277]        // if-block "!isSWJ"
[13:25:04.277]          // =>  FALSE
[13:25:04.277]        // skip if-block "!isSWJ"
[13:25:04.278]      </control>
[13:25:04.278]      <block atomic="false" info="">
[13:25:04.278]        ReadDP(0x0);
[13:25:04.278]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:25:04.278]      </block>
[13:25:04.279]      // end if-block "protType == 2"
[13:25:04.279]    </control>
[13:25:04.279]  </sequence>
[13:25:04.279]  
[13:25:04.279]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:25:04.279]  
[13:25:04.280]  <debugvars>
[13:25:04.280]    // Pre-defined
[13:25:04.280]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:25:04.280]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:25:04.280]    __dp=0x00000000
[13:25:04.280]    __ap=0x00000000
[13:25:04.280]    __traceout=0x00000000      (Trace Disabled)
[13:25:04.280]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:25:04.280]    __FlashAddr=0x00000000
[13:25:04.280]    __FlashLen=0x00000000
[13:25:04.280]    __FlashArg=0x00000000
[13:25:04.280]    __FlashOp=0x00000000
[13:25:04.281]    __Result=0x00000000
[13:25:04.281]  </debugvars>
[13:25:04.281]  
[13:25:04.281]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:25:04.281]    <block atomic="false" info="">
[13:25:04.281]      __var SW_DP_ABORT       = 0x0;
[13:25:04.281]        // -> [SW_DP_ABORT <= 0x00000000]
[13:25:04.282]      __var DP_CTRL_STAT      = 0x4;
[13:25:04.282]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:25:04.282]      __var DP_SELECT         = 0x8;
[13:25:04.282]        // -> [DP_SELECT <= 0x00000008]
[13:25:04.282]      __var powered_down      = 0;
[13:25:04.282]        // -> [powered_down <= 0x00000000]
[13:25:04.282]      WriteDP(DP_SELECT, 0x00000000);
[13:25:04.283]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:25:04.283]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:25:04.284]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:25:04.284]        // -> [powered_down <= 0x00000001]
[13:25:04.284]    </block>
[13:25:04.284]    <control if="powered_down" while="" timeout="0" info="">
[13:25:04.284]      // if-block "powered_down"
[13:25:04.284]        // =>  TRUE
[13:25:04.285]      <block atomic="false" info="">
[13:25:04.285]        Message(0, "Debug/System power-up request sent");
[13:25:04.287]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:25:04.287]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:25:04.287]      </block>
[13:25:04.287]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:25:04.287]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:25:04.288]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:25:04.288]        // while-condition  =>  FALSE
[13:25:04.288]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:25:04.288]      </control>
[13:25:04.288]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:25:04.289]        // if-block "(__protocol & 0xFFFF) == 1"
[13:25:04.289]          // =>  FALSE
[13:25:04.289]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:25:04.289]      </control>
[13:25:04.289]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:25:04.289]        // if-block "(__protocol & 0xFFFF) == 2"
[13:25:04.289]          // =>  TRUE
[13:25:04.289]        <block atomic="false" info="">
[13:25:04.290]          Message(0, "executing SWD power up");
[13:25:04.292]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:25:04.293]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:25:04.293]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:25:04.294]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:25:04.294]        </block>
[13:25:04.294]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:25:04.294]      </control>
[13:25:04.294]      // end if-block "powered_down"
[13:25:04.294]    </control>
[13:25:04.294]    <block atomic="false" info="">
[13:25:04.294]      __var DEBUG_PORT_VAL    = 0;
[13:25:04.294]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:25:04.294]      __var ACCESS_POINT_VAL  = 0;
[13:25:04.294]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:25:04.294]      __ap = 1; 
[13:25:04.296]        // -> [__ap <= 0x00000001]
[13:25:04.296]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:25:04.297]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:25:04.297]      __ap = 4;
[13:25:04.297]        // -> [__ap <= 0x00000004]
[13:25:04.297]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:25:04.299]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:25:04.299]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:25:04.299]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:25:04.301]    </block>
[13:25:04.301]    <block atomic="false" info="">
[13:25:04.301]      __var nReset = 0x80;
[13:25:04.301]        // -> [nReset <= 0x00000080]
[13:25:04.301]      __var canReadPins = 0;
[13:25:04.302]        // -> [canReadPins <= 0x00000000]
[13:25:04.302]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:25:04.302]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:25:04.302]        // -> [canReadPins <= 0x00000001]
[13:25:04.302]    </block>
[13:25:04.302]    <control if="" while="1" timeout="200" info="">
[13:25:04.302]      // while "1"  (timeout="200")
[13:25:04.302]      // while-condition  =>  TRUE
[13:25:04.303]      // while "1"  (timeout="200")
[13:25:04.303]      // while-condition  =>  TRUE
[13:25:04.303]      // while "1"  (timeout="200")
[13:25:04.303]      // while-condition  =>  TRUE
[13:25:04.303]      // while "1"  (timeout="200")
[13:25:04.303]      // while-condition  =>  TRUE
[13:25:04.303]      // while "1"  (timeout="200")
[13:25:04.303]      // while-condition  =>  TRUE
[13:25:04.303]      // while "1"  (timeout="200")
[13:25:04.303]      // while-condition  =>  TRUE
[13:25:04.303]      // while "1"  (timeout="200")
[13:25:04.304]      // while-condition  =>  TRUE
[13:25:04.304]      // while "1"  (timeout="200")
[13:25:04.304]      // while-condition  =>  TRUE
[13:25:04.305]      // while "1"  (timeout="200")
[13:25:04.305]      // while-condition  =>  TRUE
[13:25:04.305]      // while "1"  (timeout="200")
[13:25:04.305]      // while-condition  =>  TRUE
[13:25:04.305]      // while "1"  (timeout="200")
[13:25:04.305]      // while-condition  =>  TRUE
[13:25:04.305]      // while "1"  (timeout="200")
[13:25:04.305]      // while-condition  =>  TRUE
[13:25:04.305]      // while "1"  (timeout="200")
[13:25:04.305]      // while-condition  =>  TRUE
[13:25:04.305]      // while "1"  (timeout="200")
[13:25:04.305]      // while-condition  =>  TRUE
[13:25:04.306]      // while "1"  (timeout="200")
[13:25:04.306]      // while-condition  =>  TRUE
[13:25:04.306]      // while "1"  (timeout="200")
[13:25:04.306]      // while-condition  =>  TRUE
[13:25:04.306]      // while "1"  (timeout="200")
[13:25:04.306]      // while-condition  =>  TRUE
[13:25:04.306]      // while "1"  (timeout="200")
[13:25:04.306]      // while-condition  =>  TRUE
[13:25:04.306]      // while "1"  (timeout="200")
[13:25:04.306]      // while-condition  =>  TRUE
[13:25:04.306]      // while "1"  (timeout="200")
[13:25:04.306]      // while-condition  =>  TRUE
[13:25:04.307]      // while "1"  (timeout="200")
[13:25:04.307]      // while-condition  =>  TRUE
[13:25:04.307]      // while "1"  (timeout="200")
[13:25:04.307]      // while-condition  =>  TRUE
[13:25:04.307]      // while "1"  (timeout="200")
[13:25:04.308]      // while-condition  =>  TRUE
[13:25:04.308]      // while "1"  (timeout="200")
[13:25:04.308]      // while-condition  =>  TRUE
[13:25:04.308]      // while "1"  (timeout="200")
[13:25:04.308]      // while-condition  =>  TRUE
[13:25:04.308]      // while "1"  (timeout="200")
[13:25:04.308]      // while-condition  =>  TRUE
[13:25:04.308]      // while "1"  (timeout="200")
[13:25:04.308]      // while-condition  =>  TRUE
[13:25:04.308]      // while "1"  (timeout="200")
[13:25:04.308]      // while-condition  =>  TRUE
[13:25:04.309]      // while "1"  (timeout="200")
[13:25:04.309]      // while-condition  =>  TRUE
[13:25:04.309]      // while "1"  (timeout="200")
[13:25:04.309]      // while-condition  =>  TRUE
[13:25:04.309]      // while "1"  (timeout="200")
[13:25:04.309]      // while-condition  =>  TRUE
[13:25:04.309]      // while "1"  (timeout="200")
[13:25:04.309]      // while-condition  =>  TRUE
[13:25:04.309]      // while "1"  (timeout="200")
[13:25:04.309]      // while-condition  =>  TRUE
[13:25:04.309]      // while "1"  (timeout="200")
[13:25:04.310]      // while-condition  =>  TRUE
[13:25:04.310]      // while "1"  (timeout="200")
[13:25:04.310]      // while-condition  =>  TRUE
[13:25:04.310]      // while "1"  (timeout="200")
[13:25:04.310]      // while-condition  =>  TRUE
[13:25:04.310]      // while "1"  (timeout="200")
[13:25:04.310]      // while-condition  =>  TRUE
[13:25:04.310]      // while "1"  (timeout="200")
[13:25:04.310]      // while-condition  =>  TRUE
[13:25:04.310]      // while "1"  (timeout="200")
[13:25:04.310]      // while-condition  =>  TRUE
[13:25:04.311]      // while "1"  (timeout="200")
[13:25:04.311]      // while-condition  =>  TRUE
[13:25:04.311]      // while "1"  (timeout="200")
[13:25:04.312]      // while-condition  =>  TRUE
[13:25:04.312]      // while "1"  (timeout="200")
[13:25:04.312]      // while-condition  =>  TRUE
[13:25:04.312]      // while "1"  (timeout="200")
[13:25:04.312]      // while-condition  =>  TRUE
[13:25:04.312]      // while "1"  (timeout="200")
[13:25:04.312]      // while-condition  =>  TRUE
[13:25:04.312]      // while "1"  (timeout="200")
[13:25:04.312]      // while-condition  =>  TRUE
[13:25:04.312]      // while "1"  (timeout="200")
[13:25:04.312]      // while-condition  =>  TRUE
[13:25:04.312]      // while "1"  (timeout="200")
[13:25:04.312]      // while-condition  =>  TRUE
[13:25:04.312]      // while "1"  (timeout="200")
[13:25:04.312]      // while-condition  =>  TRUE
[13:25:04.313]      // while "1"  (timeout="200")
[13:25:04.313]      // while-condition  =>  TRUE
[13:25:04.313]      // while "1"  (timeout="200")
[13:25:04.313]      // while-condition  =>  TRUE
[13:25:04.313]      // while "1"  (timeout="200")
[13:25:04.313]      // while-condition  =>  TRUE
[13:25:04.313]      // while "1"  (timeout="200")
[13:25:04.313]      // while-condition  =>  TRUE
[13:25:04.313]      // while "1"  (timeout="200")
[13:25:04.313]      // while-condition  =>  TRUE
[13:25:04.313]      // while "1"  (timeout="200")
[13:25:04.314]      // while-condition  =>  TRUE
[13:25:04.314]      // while "1"  (timeout="200")
[13:25:04.314]      // while-condition  =>  TRUE
[13:25:04.314]      // while "1"  (timeout="200")
[13:25:04.314]      // while-condition  =>  TRUE
[13:25:04.314]      // while "1"  (timeout="200")
[13:25:04.315]      // while-condition  =>  TRUE
[13:25:04.315]      // while "1"  (timeout="200")
[13:25:04.315]      // while-condition  =>  TRUE
[13:25:04.315]      // while "1"  (timeout="200")
[13:25:04.315]      // while-condition  =>  TRUE
[13:25:04.315]      // while "1"  (timeout="200")
[13:25:04.315]      // while-condition  =>  TRUE
[13:25:04.315]      // while "1"  (timeout="200")
[13:25:04.315]      // while-condition  =>  TRUE
[13:25:04.315]      // while "1"  (timeout="200")
[13:25:04.315]      // while-condition  =>  TRUE
[13:25:04.315]      // while "1"  (timeout="200")
[13:25:04.315]      // while-condition  =>  TRUE
[13:25:04.315]      // while "1"  (timeout="200")
[13:25:04.315]      // while-condition  =>  TRUE
[13:25:04.315]      // while "1"  (timeout="200")
[13:25:04.316]      // while-condition  =>  TRUE
[13:25:04.316]      // while "1"  (timeout="200")
[13:25:04.316]      // while  =>  TIMEOUT
[13:25:04.316]      // end while "1"
[13:25:04.316]    </control>
[13:25:04.316]    <control if="canReadPins" while="" timeout="0" info="">
[13:25:04.316]      // if-block "canReadPins"
[13:25:04.316]        // =>  TRUE
[13:25:04.316]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:25:04.316]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:25:04.316]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:25:04.318]        // while-condition  =>  FALSE
[13:25:04.318]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:25:04.318]      </control>
[13:25:04.318]      // end if-block "canReadPins"
[13:25:04.319]    </control>
[13:25:04.319]    <control if="!canReadPins" while="" timeout="0" info="">
[13:25:04.319]      // if-block "!canReadPins"
[13:25:04.319]        // =>  FALSE
[13:25:04.319]      // skip if-block "!canReadPins"
[13:25:04.319]    </control>
[13:25:04.319]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:25:04.319]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:25:04.319]        // =>  TRUE
[13:25:04.320]      <block atomic="false" info="">
[13:25:04.320]        WriteAP(0x00, 0x190008);
[13:25:04.320]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:25:04.320]        WriteAP(0xF0, 0x01);
[13:25:04.321]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:25:04.322]      </block>
[13:25:04.322]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:25:04.322]    </control>
[13:25:04.322]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:25:04.322]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:25:04.322]        // =>  FALSE
[13:25:04.322]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:25:04.322]    </control>
[13:25:04.322]    <block atomic="false" info="">
[13:25:04.322]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:25:04.324]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:25:04.324]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:25:04.324]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:25:04.325]      __ap = 0; //lets make sure we reset the access point selection
[13:25:04.326]        // -> [__ap <= 0x00000000]
[13:25:04.326]    </block>
[13:25:04.326]  </sequence>
[13:25:04.326]  
[13:25:04.333]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:25:04.333]  
[13:25:04.333]  <debugvars>
[13:25:04.333]    // Pre-defined
[13:25:04.333]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:25:04.333]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:25:04.333]    __dp=0x00000000
[13:25:04.334]    __ap=0x00000000
[13:25:04.334]    __traceout=0x00000000      (Trace Disabled)
[13:25:04.334]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:25:04.334]    __FlashAddr=0x00000000
[13:25:04.334]    __FlashLen=0x00000000
[13:25:04.334]    __FlashArg=0x00000000
[13:25:04.334]    __FlashOp=0x00000000
[13:25:04.334]    __Result=0x00000000
[13:25:04.334]  </debugvars>
[13:25:04.334]  
[13:25:04.334]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:25:04.335]    <block atomic="false" info="">
[13:25:04.335]      __var deviceID = 0;
[13:25:04.335]        // -> [deviceID <= 0x00000000]
[13:25:04.335]      __var version = 0;
[13:25:04.335]        // -> [version <= 0x00000000]
[13:25:04.335]      __var partNum = 0;
[13:25:04.335]        // -> [partNum <= 0x00000000]
[13:25:04.335]      __var manuf = 0;
[13:25:04.335]        // -> [manuf <= 0x00000000]
[13:25:04.335]      __var isMSPM0G1X0X_G3X0X = 0;
[13:25:04.336]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:25:04.336]      __var isProduction = 0;
[13:25:04.336]        // -> [isProduction <= 0x00000000]
[13:25:04.336]      __var continueId = 0;
[13:25:04.336]        // -> [continueId <= 0x00000000]
[13:25:04.336]      deviceID =   Read32(0x41C40004);
[13:25:04.337]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:25:04.338]        // -> [deviceID <= 0x2BB8802F]
[13:25:04.338]      version = deviceID >> 28;
[13:25:04.338]        // -> [version <= 0x00000002]
[13:25:04.338]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:25:04.338]        // -> [partNum <= 0x0000BB88]
[13:25:04.338]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:25:04.338]        // -> [manuf <= 0x00000017]
[13:25:04.338]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:25:04.338]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:25:04.338]      isProduction = (version > 0);
[13:25:04.339]        // -> [isProduction <= 0x00000001]
[13:25:04.339]    </block>
[13:25:04.339]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:25:04.339]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:25:04.339]        // =>  FALSE
[13:25:04.339]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:25:04.339]    </control>
[13:25:04.340]    <control if="continueId == 4" while="" timeout="0" info="">
[13:25:04.340]      // if-block "continueId == 4"
[13:25:04.340]        // =>  FALSE
[13:25:04.340]      // skip if-block "continueId == 4"
[13:25:04.340]    </control>
[13:25:04.340]    <control if="!isProduction" while="" timeout="0" info="">
[13:25:04.340]      // if-block "!isProduction"
[13:25:04.340]        // =>  FALSE
[13:25:04.340]      // skip if-block "!isProduction"
[13:25:04.340]    </control>
[13:25:04.340]  </sequence>
[13:25:04.340]  
[13:29:28.482]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:29:28.482]  
[13:29:28.482]  <debugvars>
[13:29:28.482]    // Pre-defined
[13:29:28.483]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:29:28.483]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:29:28.483]    __dp=0x00000000
[13:29:28.483]    __ap=0x00000000
[13:29:28.483]    __traceout=0x00000000      (Trace Disabled)
[13:29:28.483]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:29:28.483]    __FlashAddr=0x00000000
[13:29:28.483]    __FlashLen=0x00000000
[13:29:28.483]    __FlashArg=0x00000000
[13:29:28.484]    __FlashOp=0x00000000
[13:29:28.484]    __Result=0x00000000
[13:29:28.484]  </debugvars>
[13:29:28.484]  
[13:29:28.485]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:29:28.485]    <block atomic="false" info="">
[13:29:28.485]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:29:28.485]        // -> [isSWJ <= 0x00000001]
[13:29:28.485]      __var hasDormant = __protocol & 0x00020000;
[13:29:28.485]        // -> [hasDormant <= 0x00000000]
[13:29:28.485]      __var protType   = __protocol & 0x0000FFFF;
[13:29:28.485]        // -> [protType <= 0x00000002]
[13:29:28.485]    </block>
[13:29:28.486]    <control if="protType == 1" while="" timeout="0" info="">
[13:29:28.486]      // if-block "protType == 1"
[13:29:28.486]        // =>  FALSE
[13:29:28.486]      // skip if-block "protType == 1"
[13:29:28.486]    </control>
[13:29:28.486]    <control if="protType == 2" while="" timeout="0" info="">
[13:29:28.486]      // if-block "protType == 2"
[13:29:28.487]        // =>  TRUE
[13:29:28.487]      <control if="isSWJ" while="" timeout="0" info="">
[13:29:28.487]        // if-block "isSWJ"
[13:29:28.487]          // =>  TRUE
[13:29:28.487]        <control if="hasDormant" while="" timeout="0" info="">
[13:29:28.487]          // if-block "hasDormant"
[13:29:28.487]            // =>  FALSE
[13:29:28.487]          // skip if-block "hasDormant"
[13:29:28.487]        </control>
[13:29:28.487]        <control if="!hasDormant" while="" timeout="0" info="">
[13:29:28.488]          // if-block "!hasDormant"
[13:29:28.488]            // =>  TRUE
[13:29:28.488]          <block atomic="false" info="">
[13:29:28.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:29:28.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:29:28.489]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:29:28.489]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:29:28.489]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:29:28.489]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:29:28.489]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:29:28.490]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:29:28.490]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:29:28.490]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:29:28.490]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:29:28.491]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:29:28.491]          </block>
[13:29:28.491]          // end if-block "!hasDormant"
[13:29:28.491]        </control>
[13:29:28.491]        // end if-block "isSWJ"
[13:29:28.492]      </control>
[13:29:28.492]      <control if="!isSWJ" while="" timeout="0" info="">
[13:29:28.492]        // if-block "!isSWJ"
[13:29:28.492]          // =>  FALSE
[13:29:28.492]        // skip if-block "!isSWJ"
[13:29:28.492]      </control>
[13:29:28.492]      <block atomic="false" info="">
[13:29:28.492]        ReadDP(0x0);
[13:29:28.493]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:29:28.493]      </block>
[13:29:28.493]      // end if-block "protType == 2"
[13:29:28.493]    </control>
[13:29:28.493]  </sequence>
[13:29:28.493]  
[13:29:28.494]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:29:28.494]  
[13:29:28.494]  <debugvars>
[13:29:28.494]    // Pre-defined
[13:29:28.494]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:29:28.494]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:29:28.495]    __dp=0x00000000
[13:29:28.495]    __ap=0x00000000
[13:29:28.495]    __traceout=0x00000000      (Trace Disabled)
[13:29:28.495]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:29:28.495]    __FlashAddr=0x00000000
[13:29:28.495]    __FlashLen=0x00000000
[13:29:28.495]    __FlashArg=0x00000000
[13:29:28.496]    __FlashOp=0x00000000
[13:29:28.496]    __Result=0x00000000
[13:29:28.496]  </debugvars>
[13:29:28.496]  
[13:29:28.496]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:29:28.496]    <block atomic="false" info="">
[13:29:28.496]      __var SW_DP_ABORT       = 0x0;
[13:29:28.496]        // -> [SW_DP_ABORT <= 0x00000000]
[13:29:28.496]      __var DP_CTRL_STAT      = 0x4;
[13:29:28.496]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:29:28.496]      __var DP_SELECT         = 0x8;
[13:29:28.496]        // -> [DP_SELECT <= 0x00000008]
[13:29:28.496]      __var powered_down      = 0;
[13:29:28.497]        // -> [powered_down <= 0x00000000]
[13:29:28.497]      WriteDP(DP_SELECT, 0x00000000);
[13:29:28.497]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:29:28.497]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:29:28.498]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:29:28.498]        // -> [powered_down <= 0x00000001]
[13:29:28.498]    </block>
[13:29:28.498]    <control if="powered_down" while="" timeout="0" info="">
[13:29:28.498]      // if-block "powered_down"
[13:29:28.498]        // =>  TRUE
[13:29:28.498]      <block atomic="false" info="">
[13:29:28.498]        Message(0, "Debug/System power-up request sent");
[13:29:28.499]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:29:28.500]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:29:28.500]      </block>
[13:29:28.500]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:29:28.500]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:29:28.501]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:29:28.501]        // while-condition  =>  FALSE
[13:29:28.501]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:29:28.501]      </control>
[13:29:28.501]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:29:28.502]        // if-block "(__protocol & 0xFFFF) == 1"
[13:29:28.502]          // =>  FALSE
[13:29:28.502]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:29:28.502]      </control>
[13:29:28.502]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:29:28.502]        // if-block "(__protocol & 0xFFFF) == 2"
[13:29:28.502]          // =>  TRUE
[13:29:28.502]        <block atomic="false" info="">
[13:29:28.503]          Message(0, "executing SWD power up");
[13:29:28.503]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:29:28.504]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:29:28.504]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:29:28.504]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:29:28.505]        </block>
[13:29:28.505]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:29:28.505]      </control>
[13:29:28.505]      // end if-block "powered_down"
[13:29:28.505]    </control>
[13:29:28.505]    <block atomic="false" info="">
[13:29:28.505]      __var DEBUG_PORT_VAL    = 0;
[13:29:28.505]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:29:28.505]      __var ACCESS_POINT_VAL  = 0;
[13:29:28.505]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:29:28.505]      __ap = 1; 
[13:29:28.506]        // -> [__ap <= 0x00000001]
[13:29:28.506]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:29:28.507]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:29:28.507]      __ap = 4;
[13:29:28.507]        // -> [__ap <= 0x00000004]
[13:29:28.507]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:29:28.508]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:29:28.508]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:29:28.509]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:29:28.509]    </block>
[13:29:28.509]    <block atomic="false" info="">
[13:29:28.509]      __var nReset = 0x80;
[13:29:28.509]        // -> [nReset <= 0x00000080]
[13:29:28.510]      __var canReadPins = 0;
[13:29:28.510]        // -> [canReadPins <= 0x00000000]
[13:29:28.510]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:29:28.510]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:29:28.510]        // -> [canReadPins <= 0x00000001]
[13:29:28.510]    </block>
[13:29:28.510]    <control if="" while="1" timeout="200" info="">
[13:29:28.510]      // while "1"  (timeout="200")
[13:29:28.510]      // while-condition  =>  TRUE
[13:29:28.510]      // while "1"  (timeout="200")
[13:29:28.510]      // while-condition  =>  TRUE
[13:29:28.510]      // while "1"  (timeout="200")
[13:29:28.510]      // while-condition  =>  TRUE
[13:29:28.510]      // while "1"  (timeout="200")
[13:29:28.510]      // while-condition  =>  TRUE
[13:29:28.510]      // while "1"  (timeout="200")
[13:29:28.512]      // while-condition  =>  TRUE
[13:29:28.512]      // while "1"  (timeout="200")
[13:29:28.512]      // while-condition  =>  TRUE
[13:29:28.512]      // while "1"  (timeout="200")
[13:29:28.512]      // while-condition  =>  TRUE
[13:29:28.512]      // while "1"  (timeout="200")
[13:29:28.512]      // while-condition  =>  TRUE
[13:29:28.512]      // while "1"  (timeout="200")
[13:29:28.512]      // while-condition  =>  TRUE
[13:29:28.512]      // while "1"  (timeout="200")
[13:29:28.512]      // while-condition  =>  TRUE
[13:29:28.512]      // while "1"  (timeout="200")
[13:29:28.512]      // while-condition  =>  TRUE
[13:29:28.513]      // while "1"  (timeout="200")
[13:29:28.513]      // while-condition  =>  TRUE
[13:29:28.513]      // while "1"  (timeout="200")
[13:29:28.513]      // while-condition  =>  TRUE
[13:29:28.513]      // while "1"  (timeout="200")
[13:29:28.513]      // while-condition  =>  TRUE
[13:29:28.514]      // while "1"  (timeout="200")
[13:29:28.514]      // while-condition  =>  TRUE
[13:29:28.514]      // while "1"  (timeout="200")
[13:29:28.514]      // while-condition  =>  TRUE
[13:29:28.514]      // while "1"  (timeout="200")
[13:29:28.514]      // while-condition  =>  TRUE
[13:29:28.515]      // while "1"  (timeout="200")
[13:29:28.515]      // while-condition  =>  TRUE
[13:29:28.515]      // while "1"  (timeout="200")
[13:29:28.515]      // while-condition  =>  TRUE
[13:29:28.515]      // while "1"  (timeout="200")
[13:29:28.515]      // while-condition  =>  TRUE
[13:29:28.515]      // while "1"  (timeout="200")
[13:29:28.515]      // while-condition  =>  TRUE
[13:29:28.516]      // while "1"  (timeout="200")
[13:29:28.516]      // while-condition  =>  TRUE
[13:29:28.516]      // while "1"  (timeout="200")
[13:29:28.516]      // while-condition  =>  TRUE
[13:29:28.517]      // while "1"  (timeout="200")
[13:29:28.517]      // while-condition  =>  TRUE
[13:29:28.517]      // while "1"  (timeout="200")
[13:29:28.517]      // while-condition  =>  TRUE
[13:29:28.517]      // while "1"  (timeout="200")
[13:29:28.517]      // while-condition  =>  TRUE
[13:29:28.517]      // while "1"  (timeout="200")
[13:29:28.517]      // while-condition  =>  TRUE
[13:29:28.517]      // while "1"  (timeout="200")
[13:29:28.518]      // while-condition  =>  TRUE
[13:29:28.518]      // while "1"  (timeout="200")
[13:29:28.518]      // while-condition  =>  TRUE
[13:29:28.518]      // while "1"  (timeout="200")
[13:29:28.518]      // while-condition  =>  TRUE
[13:29:28.518]      // while "1"  (timeout="200")
[13:29:28.518]      // while-condition  =>  TRUE
[13:29:28.518]      // while "1"  (timeout="200")
[13:29:28.518]      // while-condition  =>  TRUE
[13:29:28.518]      // while "1"  (timeout="200")
[13:29:28.518]      // while-condition  =>  TRUE
[13:29:28.518]      // while "1"  (timeout="200")
[13:29:28.519]      // while-condition  =>  TRUE
[13:29:28.519]      // while "1"  (timeout="200")
[13:29:28.519]      // while-condition  =>  TRUE
[13:29:28.519]      // while "1"  (timeout="200")
[13:29:28.519]      // while-condition  =>  TRUE
[13:29:28.519]      // while "1"  (timeout="200")
[13:29:28.519]      // while-condition  =>  TRUE
[13:29:28.519]      // while "1"  (timeout="200")
[13:29:28.519]      // while-condition  =>  TRUE
[13:29:28.519]      // while "1"  (timeout="200")
[13:29:28.519]      // while-condition  =>  TRUE
[13:29:28.519]      // while "1"  (timeout="200")
[13:29:28.520]      // while-condition  =>  TRUE
[13:29:28.520]      // while "1"  (timeout="200")
[13:29:28.520]      // while  =>  TIMEOUT
[13:29:28.520]      // end while "1"
[13:29:28.520]    </control>
[13:29:28.520]    <control if="canReadPins" while="" timeout="0" info="">
[13:29:28.520]      // if-block "canReadPins"
[13:29:28.520]        // =>  TRUE
[13:29:28.521]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:29:28.521]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:29:28.521]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:29:28.521]        // while-condition  =>  FALSE
[13:29:28.521]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:29:28.521]      </control>
[13:29:28.521]      // end if-block "canReadPins"
[13:29:28.521]    </control>
[13:29:28.521]    <control if="!canReadPins" while="" timeout="0" info="">
[13:29:28.522]      // if-block "!canReadPins"
[13:29:28.522]        // =>  FALSE
[13:29:28.522]      // skip if-block "!canReadPins"
[13:29:28.522]    </control>
[13:29:28.522]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:29:28.522]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:29:28.522]        // =>  TRUE
[13:29:28.522]      <block atomic="false" info="">
[13:29:28.522]        WriteAP(0x00, 0x190008);
[13:29:28.523]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:29:28.524]        WriteAP(0xF0, 0x01);
[13:29:28.525]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:29:28.525]      </block>
[13:29:28.525]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:29:28.525]    </control>
[13:29:28.525]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:29:28.525]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:29:28.525]        // =>  FALSE
[13:29:28.525]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:29:28.525]    </control>
[13:29:28.526]    <block atomic="false" info="">
[13:29:28.526]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:29:28.527]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:29:28.527]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:29:28.527]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:29:28.527]      __ap = 0; //lets make sure we reset the access point selection
[13:29:28.528]        // -> [__ap <= 0x00000000]
[13:29:28.528]    </block>
[13:29:28.528]  </sequence>
[13:29:28.528]  
[13:29:28.534]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:29:28.534]  
[13:29:28.534]  <debugvars>
[13:29:28.534]    // Pre-defined
[13:29:28.534]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:29:28.534]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:29:28.534]    __dp=0x00000000
[13:29:28.535]    __ap=0x00000000
[13:29:28.535]    __traceout=0x00000000      (Trace Disabled)
[13:29:28.535]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:29:28.535]    __FlashAddr=0x00000000
[13:29:28.535]    __FlashLen=0x00000000
[13:29:28.535]    __FlashArg=0x00000000
[13:29:28.535]    __FlashOp=0x00000000
[13:29:28.535]    __Result=0x00000000
[13:29:28.535]  </debugvars>
[13:29:28.535]  
[13:29:28.535]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:29:28.535]    <block atomic="false" info="">
[13:29:28.535]      __var deviceID = 0;
[13:29:28.536]        // -> [deviceID <= 0x00000000]
[13:29:28.536]      __var version = 0;
[13:29:28.536]        // -> [version <= 0x00000000]
[13:29:28.536]      __var partNum = 0;
[13:29:28.536]        // -> [partNum <= 0x00000000]
[13:29:28.536]      __var manuf = 0;
[13:29:28.536]        // -> [manuf <= 0x00000000]
[13:29:28.537]      __var isMSPM0G1X0X_G3X0X = 0;
[13:29:28.537]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:29:28.537]      __var isProduction = 0;
[13:29:28.537]        // -> [isProduction <= 0x00000000]
[13:29:28.537]      __var continueId = 0;
[13:29:28.537]        // -> [continueId <= 0x00000000]
[13:29:28.537]      deviceID =   Read32(0x41C40004);
[13:29:28.538]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:29:28.538]        // -> [deviceID <= 0x2BB8802F]
[13:29:28.538]      version = deviceID >> 28;
[13:29:28.539]        // -> [version <= 0x00000002]
[13:29:28.539]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:29:28.539]        // -> [partNum <= 0x0000BB88]
[13:29:28.539]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:29:28.539]        // -> [manuf <= 0x00000017]
[13:29:28.539]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:29:28.539]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:29:28.539]      isProduction = (version > 0);
[13:29:28.539]        // -> [isProduction <= 0x00000001]
[13:29:28.539]    </block>
[13:29:28.540]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:29:28.540]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:29:28.540]        // =>  FALSE
[13:29:28.540]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:29:28.540]    </control>
[13:29:28.540]    <control if="continueId == 4" while="" timeout="0" info="">
[13:29:28.540]      // if-block "continueId == 4"
[13:29:28.540]        // =>  FALSE
[13:29:28.540]      // skip if-block "continueId == 4"
[13:29:28.540]    </control>
[13:29:28.542]    <control if="!isProduction" while="" timeout="0" info="">
[13:29:28.542]      // if-block "!isProduction"
[13:29:28.542]        // =>  FALSE
[13:29:28.542]      // skip if-block "!isProduction"
[13:29:28.542]    </control>
[13:29:28.542]  </sequence>
[13:29:28.542]  
[13:40:38.778]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:40:38.778]  
[13:40:38.778]  <debugvars>
[13:40:38.782]    // Pre-defined
[13:40:38.782]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:40:38.782]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:40:38.782]    __dp=0x00000000
[13:40:38.782]    __ap=0x00000000
[13:40:38.782]    __traceout=0x00000000      (Trace Disabled)
[13:40:38.782]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:40:38.782]    __FlashAddr=0x00000000
[13:40:38.782]    __FlashLen=0x00000000
[13:40:38.782]    __FlashArg=0x00000000
[13:40:38.782]    __FlashOp=0x00000000
[13:40:38.782]    __Result=0x00000000
[13:40:38.782]  </debugvars>
[13:40:38.782]  
[13:40:38.782]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:40:38.782]    <block atomic="false" info="">
[13:40:38.782]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:40:38.782]        // -> [isSWJ <= 0x00000001]
[13:40:38.782]      __var hasDormant = __protocol & 0x00020000;
[13:40:38.782]        // -> [hasDormant <= 0x00000000]
[13:40:38.782]      __var protType   = __protocol & 0x0000FFFF;
[13:40:38.782]        // -> [protType <= 0x00000002]
[13:40:38.782]    </block>
[13:40:38.782]    <control if="protType == 1" while="" timeout="0" info="">
[13:40:38.782]      // if-block "protType == 1"
[13:40:38.782]        // =>  FALSE
[13:40:38.782]      // skip if-block "protType == 1"
[13:40:38.782]    </control>
[13:40:38.782]    <control if="protType == 2" while="" timeout="0" info="">
[13:40:38.782]      // if-block "protType == 2"
[13:40:38.782]        // =>  TRUE
[13:40:38.782]      <control if="isSWJ" while="" timeout="0" info="">
[13:40:38.782]        // if-block "isSWJ"
[13:40:38.782]          // =>  TRUE
[13:40:38.782]        <control if="hasDormant" while="" timeout="0" info="">
[13:40:38.786]          // if-block "hasDormant"
[13:40:38.786]            // =>  FALSE
[13:40:38.786]          // skip if-block "hasDormant"
[13:40:38.786]        </control>
[13:40:38.786]        <control if="!hasDormant" while="" timeout="0" info="">
[13:40:38.786]          // if-block "!hasDormant"
[13:40:38.786]            // =>  TRUE
[13:40:38.786]          <block atomic="false" info="">
[13:40:38.786]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:40:38.786]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:40:38.786]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:40:38.786]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:40:38.786]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:40:38.786]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:40:38.786]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:40:38.786]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:40:38.786]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:40:38.786]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:40:38.786]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:40:38.790]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:40:38.790]          </block>
[13:40:38.790]          // end if-block "!hasDormant"
[13:40:38.790]        </control>
[13:40:38.790]        // end if-block "isSWJ"
[13:40:38.790]      </control>
[13:40:38.790]      <control if="!isSWJ" while="" timeout="0" info="">
[13:40:38.790]        // if-block "!isSWJ"
[13:40:38.790]          // =>  FALSE
[13:40:38.790]        // skip if-block "!isSWJ"
[13:40:38.790]      </control>
[13:40:38.790]      <block atomic="false" info="">
[13:40:38.790]        ReadDP(0x0);
[13:40:38.790]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:40:38.790]      </block>
[13:40:38.790]      // end if-block "protType == 2"
[13:40:38.790]    </control>
[13:40:38.790]  </sequence>
[13:40:38.790]  
[13:40:38.790]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:40:38.790]  
[13:40:38.790]  <debugvars>
[13:40:38.790]    // Pre-defined
[13:40:38.790]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:40:38.790]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:40:38.790]    __dp=0x00000000
[13:40:38.790]    __ap=0x00000000
[13:40:38.794]    __traceout=0x00000000      (Trace Disabled)
[13:40:38.794]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:40:38.794]    __FlashAddr=0x00000000
[13:40:38.794]    __FlashLen=0x00000000
[13:40:38.794]    __FlashArg=0x00000000
[13:40:38.794]    __FlashOp=0x00000000
[13:40:38.794]    __Result=0x00000000
[13:40:38.794]  </debugvars>
[13:40:38.794]  
[13:40:38.794]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:40:38.794]    <block atomic="false" info="">
[13:40:38.794]      __var SW_DP_ABORT       = 0x0;
[13:40:38.794]        // -> [SW_DP_ABORT <= 0x00000000]
[13:40:38.794]      __var DP_CTRL_STAT      = 0x4;
[13:40:38.794]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:40:38.794]      __var DP_SELECT         = 0x8;
[13:40:38.794]        // -> [DP_SELECT <= 0x00000008]
[13:40:38.794]      __var powered_down      = 0;
[13:40:38.794]        // -> [powered_down <= 0x00000000]
[13:40:38.794]      WriteDP(DP_SELECT, 0x00000000);
[13:40:38.794]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:40:38.794]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:40:38.794]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:40:38.794]        // -> [powered_down <= 0x00000001]
[13:40:38.794]    </block>
[13:40:38.794]    <control if="powered_down" while="" timeout="0" info="">
[13:40:38.798]      // if-block "powered_down"
[13:40:38.798]        // =>  TRUE
[13:40:38.798]      <block atomic="false" info="">
[13:40:38.798]        Message(0, "Debug/System power-up request sent");
[13:40:38.798]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:40:38.798]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:40:38.798]      </block>
[13:40:38.798]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:40:38.798]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:40:38.798]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:40:38.798]        // while-condition  =>  FALSE
[13:40:38.798]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:40:38.798]      </control>
[13:40:38.798]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:40:38.802]        // if-block "(__protocol & 0xFFFF) == 1"
[13:40:38.802]          // =>  FALSE
[13:40:38.802]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:40:38.802]      </control>
[13:40:38.802]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:40:38.802]        // if-block "(__protocol & 0xFFFF) == 2"
[13:40:38.802]          // =>  TRUE
[13:40:38.802]        <block atomic="false" info="">
[13:40:38.802]          Message(0, "executing SWD power up");
[13:40:38.802]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:40:38.806]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:40:38.806]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:40:38.806]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:40:38.806]        </block>
[13:40:38.806]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:40:38.806]      </control>
[13:40:38.806]      // end if-block "powered_down"
[13:40:38.806]    </control>
[13:40:38.806]    <block atomic="false" info="">
[13:40:38.806]      __var DEBUG_PORT_VAL    = 0;
[13:40:38.806]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:40:38.806]      __var ACCESS_POINT_VAL  = 0;
[13:40:38.806]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:40:38.806]      __ap = 1; 
[13:40:38.806]        // -> [__ap <= 0x00000001]
[13:40:38.806]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:40:38.806]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:40:38.806]      __ap = 4;
[13:40:38.806]        // -> [__ap <= 0x00000004]
[13:40:38.806]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:40:38.810]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:40:38.810]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:40:38.810]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:40:38.810]    </block>
[13:40:38.810]    <block atomic="false" info="">
[13:40:38.810]      __var nReset = 0x80;
[13:40:38.810]        // -> [nReset <= 0x00000080]
[13:40:38.810]      __var canReadPins = 0;
[13:40:38.810]        // -> [canReadPins <= 0x00000000]
[13:40:38.810]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:40:38.814]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:40:38.814]        // -> [canReadPins <= 0x00000001]
[13:40:38.814]    </block>
[13:40:38.814]    <control if="" while="1" timeout="200" info="">
[13:40:38.814]      // while "1"  (timeout="200")
[13:40:38.814]      // while-condition  =>  TRUE
[13:40:38.814]      // while "1"  (timeout="200")
[13:40:38.814]      // while-condition  =>  TRUE
[13:40:38.814]      // while "1"  (timeout="200")
[13:40:38.814]      // while-condition  =>  TRUE
[13:40:38.814]      // while "1"  (timeout="200")
[13:40:38.814]      // while-condition  =>  TRUE
[13:40:38.814]      // while "1"  (timeout="200")
[13:40:38.814]      // while-condition  =>  TRUE
[13:40:38.814]      // while "1"  (timeout="200")
[13:40:38.814]      // while-condition  =>  TRUE
[13:40:38.814]      // while "1"  (timeout="200")
[13:40:38.814]      // while-condition  =>  TRUE
[13:40:38.814]      // while "1"  (timeout="200")
[13:40:38.814]      // while-condition  =>  TRUE
[13:40:38.814]      // while "1"  (timeout="200")
[13:40:38.814]      // while-condition  =>  TRUE
[13:40:38.814]      // while "1"  (timeout="200")
[13:40:38.814]      // while-condition  =>  TRUE
[13:40:38.814]      // while "1"  (timeout="200")
[13:40:38.814]      // while-condition  =>  TRUE
[13:40:38.814]      // while "1"  (timeout="200")
[13:40:38.814]      // while-condition  =>  TRUE
[13:40:38.814]      // while "1"  (timeout="200")
[13:40:38.814]      // while-condition  =>  TRUE
[13:40:38.818]      // while "1"  (timeout="200")
[13:40:38.818]      // while  =>  TIMEOUT
[13:40:38.818]      // end while "1"
[13:40:38.818]    </control>
[13:40:38.818]    <control if="canReadPins" while="" timeout="0" info="">
[13:40:38.818]      // if-block "canReadPins"
[13:40:38.818]        // =>  TRUE
[13:40:38.818]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:40:38.818]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:40:38.818]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:40:38.818]        // while-condition  =>  FALSE
[13:40:38.818]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:40:38.818]      </control>
[13:40:38.818]      // end if-block "canReadPins"
[13:40:38.818]    </control>
[13:40:38.818]    <control if="!canReadPins" while="" timeout="0" info="">
[13:40:38.818]      // if-block "!canReadPins"
[13:40:38.818]        // =>  FALSE
[13:40:38.818]      // skip if-block "!canReadPins"
[13:40:38.818]    </control>
[13:40:38.818]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:40:38.818]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:40:38.818]        // =>  TRUE
[13:40:38.818]      <block atomic="false" info="">
[13:40:38.818]        WriteAP(0x00, 0x190008);
[13:40:38.822]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:40:38.822]        WriteAP(0xF0, 0x01);
[13:40:38.822]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:40:38.824]      </block>
[13:40:38.824]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:40:38.824]    </control>
[13:40:38.824]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:40:38.824]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:40:38.824]        // =>  FALSE
[13:40:38.824]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:40:38.824]    </control>
[13:40:38.824]    <block atomic="false" info="">
[13:40:38.824]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:40:38.824]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:40:38.824]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:40:38.824]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:40:38.827]      __ap = 0; //lets make sure we reset the access point selection
[13:40:38.827]        // -> [__ap <= 0x00000000]
[13:40:38.827]    </block>
[13:40:38.827]  </sequence>
[13:40:38.827]  
[13:40:38.831]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:40:38.831]  
[13:40:38.835]  <debugvars>
[13:40:38.835]    // Pre-defined
[13:40:38.835]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:40:38.835]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:40:38.835]    __dp=0x00000000
[13:40:38.835]    __ap=0x00000000
[13:40:38.835]    __traceout=0x00000000      (Trace Disabled)
[13:40:38.835]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:40:38.835]    __FlashAddr=0x00000000
[13:40:38.835]    __FlashLen=0x00000000
[13:40:38.835]    __FlashArg=0x00000000
[13:40:38.835]    __FlashOp=0x00000000
[13:40:38.835]    __Result=0x00000000
[13:40:38.835]  </debugvars>
[13:40:38.835]  
[13:40:38.835]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:40:38.835]    <block atomic="false" info="">
[13:40:38.835]      __var deviceID = 0;
[13:40:38.835]        // -> [deviceID <= 0x00000000]
[13:40:38.835]      __var version = 0;
[13:40:38.835]        // -> [version <= 0x00000000]
[13:40:38.835]      __var partNum = 0;
[13:40:38.835]        // -> [partNum <= 0x00000000]
[13:40:38.835]      __var manuf = 0;
[13:40:38.835]        // -> [manuf <= 0x00000000]
[13:40:38.835]      __var isMSPM0G1X0X_G3X0X = 0;
[13:40:38.835]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:40:38.835]      __var isProduction = 0;
[13:40:38.835]        // -> [isProduction <= 0x00000000]
[13:40:38.835]      __var continueId = 0;
[13:40:38.835]        // -> [continueId <= 0x00000000]
[13:40:38.835]      deviceID =   Read32(0x41C40004);
[13:40:38.839]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:40:38.839]        // -> [deviceID <= 0x2BB8802F]
[13:40:38.839]      version = deviceID >> 28;
[13:40:38.839]        // -> [version <= 0x00000002]
[13:40:38.839]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:40:38.839]        // -> [partNum <= 0x0000BB88]
[13:40:38.839]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:40:38.839]        // -> [manuf <= 0x00000017]
[13:40:38.839]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:40:38.839]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:40:38.839]      isProduction = (version > 0);
[13:40:38.839]        // -> [isProduction <= 0x00000001]
[13:40:38.839]    </block>
[13:40:38.839]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:40:38.839]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:40:38.839]        // =>  FALSE
[13:40:38.839]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:40:38.839]    </control>
[13:40:38.839]    <control if="continueId == 4" while="" timeout="0" info="">
[13:40:38.839]      // if-block "continueId == 4"
[13:40:38.839]        // =>  FALSE
[13:40:38.843]      // skip if-block "continueId == 4"
[13:40:38.843]    </control>
[13:40:38.843]    <control if="!isProduction" while="" timeout="0" info="">
[13:40:38.843]      // if-block "!isProduction"
[13:40:38.843]        // =>  FALSE
[13:40:38.843]      // skip if-block "!isProduction"
[13:40:38.843]    </control>
[13:40:38.843]  </sequence>
[13:40:38.843]  
[13:42:47.082]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:42:47.085]  
[13:42:47.092]  <debugvars>
[13:42:47.092]    // Pre-defined
[13:42:47.092]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:42:47.092]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:42:47.092]    __dp=0x00000000
[13:42:47.092]    __ap=0x00000000
[13:42:47.092]    __traceout=0x00000000      (Trace Disabled)
[13:42:47.092]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:42:47.092]    __FlashAddr=0x00000000
[13:42:47.092]    __FlashLen=0x00000000
[13:42:47.092]    __FlashArg=0x00000000
[13:42:47.092]    __FlashOp=0x00000000
[13:42:47.092]    __Result=0x00000000
[13:42:47.092]  </debugvars>
[13:42:47.092]  
[13:42:47.092]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:42:47.094]    <block atomic="false" info="">
[13:42:47.094]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:42:47.094]        // -> [isSWJ <= 0x00000001]
[13:42:47.094]      __var hasDormant = __protocol & 0x00020000;
[13:42:47.094]        // -> [hasDormant <= 0x00000000]
[13:42:47.095]      __var protType   = __protocol & 0x0000FFFF;
[13:42:47.095]        // -> [protType <= 0x00000002]
[13:42:47.095]    </block>
[13:42:47.095]    <control if="protType == 1" while="" timeout="0" info="">
[13:42:47.095]      // if-block "protType == 1"
[13:42:47.095]        // =>  FALSE
[13:42:47.095]      // skip if-block "protType == 1"
[13:42:47.095]    </control>
[13:42:47.095]    <control if="protType == 2" while="" timeout="0" info="">
[13:42:47.095]      // if-block "protType == 2"
[13:42:47.095]        // =>  TRUE
[13:42:47.095]      <control if="isSWJ" while="" timeout="0" info="">
[13:42:47.095]        // if-block "isSWJ"
[13:42:47.095]          // =>  TRUE
[13:42:47.095]        <control if="hasDormant" while="" timeout="0" info="">
[13:42:47.095]          // if-block "hasDormant"
[13:42:47.095]            // =>  FALSE
[13:42:47.095]          // skip if-block "hasDormant"
[13:42:47.096]        </control>
[13:42:47.096]        <control if="!hasDormant" while="" timeout="0" info="">
[13:42:47.096]          // if-block "!hasDormant"
[13:42:47.096]            // =>  TRUE
[13:42:47.096]          <block atomic="false" info="">
[13:42:47.096]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:42:47.096]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:42:47.097]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:42:47.097]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:42:47.097]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:42:47.097]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:42:47.097]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:42:47.098]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:42:47.098]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:42:47.098]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:42:47.098]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:42:47.098]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:42:47.098]          </block>
[13:42:47.098]          // end if-block "!hasDormant"
[13:42:47.098]        </control>
[13:42:47.098]        // end if-block "isSWJ"
[13:42:47.098]      </control>
[13:42:47.098]      <control if="!isSWJ" while="" timeout="0" info="">
[13:42:47.098]        // if-block "!isSWJ"
[13:42:47.098]          // =>  FALSE
[13:42:47.098]        // skip if-block "!isSWJ"
[13:42:47.098]      </control>
[13:42:47.101]      <block atomic="false" info="">
[13:42:47.101]        ReadDP(0x0);
[13:42:47.101]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:42:47.101]      </block>
[13:42:47.101]      // end if-block "protType == 2"
[13:42:47.101]    </control>
[13:42:47.101]  </sequence>
[13:42:47.101]  
[13:42:47.102]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:42:47.102]  
[13:42:47.102]  <debugvars>
[13:42:47.102]    // Pre-defined
[13:42:47.102]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:42:47.102]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:42:47.102]    __dp=0x00000000
[13:42:47.102]    __ap=0x00000000
[13:42:47.103]    __traceout=0x00000000      (Trace Disabled)
[13:42:47.103]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:42:47.103]    __FlashAddr=0x00000000
[13:42:47.103]    __FlashLen=0x00000000
[13:42:47.103]    __FlashArg=0x00000000
[13:42:47.103]    __FlashOp=0x00000000
[13:42:47.103]    __Result=0x00000000
[13:42:47.103]  </debugvars>
[13:42:47.103]  
[13:42:47.103]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:42:47.103]    <block atomic="false" info="">
[13:42:47.103]      __var SW_DP_ABORT       = 0x0;
[13:42:47.103]        // -> [SW_DP_ABORT <= 0x00000000]
[13:42:47.103]      __var DP_CTRL_STAT      = 0x4;
[13:42:47.104]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:42:47.104]      __var DP_SELECT         = 0x8;
[13:42:47.104]        // -> [DP_SELECT <= 0x00000008]
[13:42:47.104]      __var powered_down      = 0;
[13:42:47.104]        // -> [powered_down <= 0x00000000]
[13:42:47.104]      WriteDP(DP_SELECT, 0x00000000);
[13:42:47.104]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:42:47.104]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:42:47.104]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:42:47.106]        // -> [powered_down <= 0x00000001]
[13:42:47.107]    </block>
[13:42:47.107]    <control if="powered_down" while="" timeout="0" info="">
[13:42:47.107]      // if-block "powered_down"
[13:42:47.107]        // =>  TRUE
[13:42:47.107]      <block atomic="false" info="">
[13:42:47.107]        Message(0, "Debug/System power-up request sent");
[13:42:47.107]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:42:47.107]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:42:47.107]      </block>
[13:42:47.107]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:42:47.107]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:42:47.111]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:42:47.111]        // while-condition  =>  FALSE
[13:42:47.111]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:42:47.111]      </control>
[13:42:47.111]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:42:47.111]        // if-block "(__protocol & 0xFFFF) == 1"
[13:42:47.111]          // =>  FALSE
[13:42:47.111]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:42:47.111]      </control>
[13:42:47.111]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:42:47.112]        // if-block "(__protocol & 0xFFFF) == 2"
[13:42:47.112]          // =>  TRUE
[13:42:47.112]        <block atomic="false" info="">
[13:42:47.112]          Message(0, "executing SWD power up");
[13:42:47.112]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:42:47.112]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:42:47.112]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:42:47.115]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:42:47.115]        </block>
[13:42:47.115]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:42:47.115]      </control>
[13:42:47.115]      // end if-block "powered_down"
[13:42:47.115]    </control>
[13:42:47.115]    <block atomic="false" info="">
[13:42:47.115]      __var DEBUG_PORT_VAL    = 0;
[13:42:47.115]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:42:47.117]      __var ACCESS_POINT_VAL  = 0;
[13:42:47.117]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:42:47.117]      __ap = 1; 
[13:42:47.117]        // -> [__ap <= 0x00000001]
[13:42:47.117]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:42:47.117]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:42:47.117]      __ap = 4;
[13:42:47.117]        // -> [__ap <= 0x00000004]
[13:42:47.119]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:42:47.120]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:42:47.120]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:42:47.120]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:42:47.120]    </block>
[13:42:47.120]    <block atomic="false" info="">
[13:42:47.120]      __var nReset = 0x80;
[13:42:47.120]        // -> [nReset <= 0x00000080]
[13:42:47.120]      __var canReadPins = 0;
[13:42:47.120]        // -> [canReadPins <= 0x00000000]
[13:42:47.120]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:42:47.120]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:42:47.123]        // -> [canReadPins <= 0x00000001]
[13:42:47.123]    </block>
[13:42:47.123]    <control if="" while="1" timeout="200" info="">
[13:42:47.123]      // while "1"  (timeout="200")
[13:42:47.123]      // while-condition  =>  TRUE
[13:42:47.123]      // while "1"  (timeout="200")
[13:42:47.123]      // while-condition  =>  TRUE
[13:42:47.123]      // while "1"  (timeout="200")
[13:42:47.123]      // while-condition  =>  TRUE
[13:42:47.123]      // while "1"  (timeout="200")
[13:42:47.123]      // while-condition  =>  TRUE
[13:42:47.125]      // while "1"  (timeout="200")
[13:42:47.125]      // while-condition  =>  TRUE
[13:42:47.125]      // while "1"  (timeout="200")
[13:42:47.125]      // while-condition  =>  TRUE
[13:42:47.125]      // while "1"  (timeout="200")
[13:42:47.125]      // while-condition  =>  TRUE
[13:42:47.125]      // while "1"  (timeout="200")
[13:42:47.125]      // while-condition  =>  TRUE
[13:42:47.125]      // while "1"  (timeout="200")
[13:42:47.125]      // while-condition  =>  TRUE
[13:42:47.125]      // while "1"  (timeout="200")
[13:42:47.125]      // while-condition  =>  TRUE
[13:42:47.125]      // while "1"  (timeout="200")
[13:42:47.125]      // while-condition  =>  TRUE
[13:42:47.125]      // while "1"  (timeout="200")
[13:42:47.125]      // while-condition  =>  TRUE
[13:42:47.125]      // while "1"  (timeout="200")
[13:42:47.125]      // while-condition  =>  TRUE
[13:42:47.125]      // while "1"  (timeout="200")
[13:42:47.125]      // while-condition  =>  TRUE
[13:42:47.125]      // while "1"  (timeout="200")
[13:42:47.125]      // while-condition  =>  TRUE
[13:42:47.125]      // while "1"  (timeout="200")
[13:42:47.125]      // while-condition  =>  TRUE
[13:42:47.127]      // while "1"  (timeout="200")
[13:42:47.127]      // while-condition  =>  TRUE
[13:42:47.127]      // while "1"  (timeout="200")
[13:42:47.127]      // while-condition  =>  TRUE
[13:42:47.127]      // while "1"  (timeout="200")
[13:42:47.127]      // while-condition  =>  TRUE
[13:42:47.127]      // while "1"  (timeout="200")
[13:42:47.127]      // while-condition  =>  TRUE
[13:42:47.127]      // while "1"  (timeout="200")
[13:42:47.127]      // while-condition  =>  TRUE
[13:42:47.127]      // while "1"  (timeout="200")
[13:42:47.127]      // while-condition  =>  TRUE
[13:42:47.127]      // while "1"  (timeout="200")
[13:42:47.128]      // while-condition  =>  TRUE
[13:42:47.128]      // while "1"  (timeout="200")
[13:42:47.128]      // while-condition  =>  TRUE
[13:42:47.128]      // while "1"  (timeout="200")
[13:42:47.128]      // while-condition  =>  TRUE
[13:42:47.128]      // while "1"  (timeout="200")
[13:42:47.128]      // while-condition  =>  TRUE
[13:42:47.128]      // while "1"  (timeout="200")
[13:42:47.128]      // while-condition  =>  TRUE
[13:42:47.128]      // while "1"  (timeout="200")
[13:42:47.130]      // while-condition  =>  TRUE
[13:42:47.130]      // while "1"  (timeout="200")
[13:42:47.130]      // while  =>  TIMEOUT
[13:42:47.130]      // end while "1"
[13:42:47.130]    </control>
[13:42:47.130]    <control if="canReadPins" while="" timeout="0" info="">
[13:42:47.130]      // if-block "canReadPins"
[13:42:47.130]        // =>  TRUE
[13:42:47.130]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:42:47.130]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:42:47.130]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:42:47.130]        // while-condition  =>  FALSE
[13:42:47.130]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:42:47.130]      </control>
[13:42:47.130]      // end if-block "canReadPins"
[13:42:47.131]    </control>
[13:42:47.131]    <control if="!canReadPins" while="" timeout="0" info="">
[13:42:47.131]      // if-block "!canReadPins"
[13:42:47.131]        // =>  FALSE
[13:42:47.131]      // skip if-block "!canReadPins"
[13:42:47.131]    </control>
[13:42:47.131]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:42:47.131]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:42:47.131]        // =>  TRUE
[13:42:47.131]      <block atomic="false" info="">
[13:42:47.132]        WriteAP(0x00, 0x190008);
[13:42:47.132]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:42:47.132]        WriteAP(0xF0, 0x01);
[13:42:47.132]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:42:47.135]      </block>
[13:42:47.135]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:42:47.135]    </control>
[13:42:47.135]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:42:47.135]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:42:47.135]        // =>  FALSE
[13:42:47.135]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:42:47.135]    </control>
[13:42:47.135]    <block atomic="false" info="">
[13:42:47.135]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:42:47.136]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:42:47.136]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:42:47.136]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:42:47.138]      __ap = 0; //lets make sure we reset the access point selection
[13:42:47.138]        // -> [__ap <= 0x00000000]
[13:42:47.138]    </block>
[13:42:47.138]  </sequence>
[13:42:47.138]  
[13:42:47.144]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:42:47.144]  
[13:42:47.144]  <debugvars>
[13:42:47.145]    // Pre-defined
[13:42:47.145]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:42:47.145]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:42:47.145]    __dp=0x00000000
[13:42:47.145]    __ap=0x00000000
[13:42:47.145]    __traceout=0x00000000      (Trace Disabled)
[13:42:47.145]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:42:47.145]    __FlashAddr=0x00000000
[13:42:47.145]    __FlashLen=0x00000000
[13:42:47.145]    __FlashArg=0x00000000
[13:42:47.145]    __FlashOp=0x00000000
[13:42:47.145]    __Result=0x00000000
[13:42:47.145]  </debugvars>
[13:42:47.145]  
[13:42:47.145]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:42:47.145]    <block atomic="false" info="">
[13:42:47.145]      __var deviceID = 0;
[13:42:47.145]        // -> [deviceID <= 0x00000000]
[13:42:47.145]      __var version = 0;
[13:42:47.145]        // -> [version <= 0x00000000]
[13:42:47.145]      __var partNum = 0;
[13:42:47.145]        // -> [partNum <= 0x00000000]
[13:42:47.145]      __var manuf = 0;
[13:42:47.145]        // -> [manuf <= 0x00000000]
[13:42:47.145]      __var isMSPM0G1X0X_G3X0X = 0;
[13:42:47.145]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:42:47.145]      __var isProduction = 0;
[13:42:47.145]        // -> [isProduction <= 0x00000000]
[13:42:47.148]      __var continueId = 0;
[13:42:47.148]        // -> [continueId <= 0x00000000]
[13:42:47.148]      deviceID =   Read32(0x41C40004);
[13:42:47.148]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:42:47.148]        // -> [deviceID <= 0x2BB8802F]
[13:42:47.148]      version = deviceID >> 28;
[13:42:47.148]        // -> [version <= 0x00000002]
[13:42:47.148]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:42:47.148]        // -> [partNum <= 0x0000BB88]
[13:42:47.148]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:42:47.148]        // -> [manuf <= 0x00000017]
[13:42:47.148]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:42:47.148]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:42:47.148]      isProduction = (version > 0);
[13:42:47.148]        // -> [isProduction <= 0x00000001]
[13:42:47.148]    </block>
[13:42:47.148]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:42:47.148]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:42:47.148]        // =>  FALSE
[13:42:47.148]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:42:47.148]    </control>
[13:42:47.148]    <control if="continueId == 4" while="" timeout="0" info="">
[13:42:47.148]      // if-block "continueId == 4"
[13:42:47.148]        // =>  FALSE
[13:42:47.148]      // skip if-block "continueId == 4"
[13:42:47.152]    </control>
[13:42:47.152]    <control if="!isProduction" while="" timeout="0" info="">
[13:42:47.152]      // if-block "!isProduction"
[13:42:47.152]        // =>  FALSE
[13:42:47.152]      // skip if-block "!isProduction"
[13:42:47.152]    </control>
[13:42:47.152]  </sequence>
[13:42:47.152]  
[13:43:21.343]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:43:21.343]  
[13:43:21.352]  <debugvars>
[13:43:21.352]    // Pre-defined
[13:43:21.352]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:43:21.352]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:43:21.352]    __dp=0x00000000
[13:43:21.352]    __ap=0x00000000
[13:43:21.352]    __traceout=0x00000000      (Trace Disabled)
[13:43:21.352]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:43:21.352]    __FlashAddr=0x00000000
[13:43:21.352]    __FlashLen=0x00000000
[13:43:21.352]    __FlashArg=0x00000000
[13:43:21.352]    __FlashOp=0x00000000
[13:43:21.352]    __Result=0x00000000
[13:43:21.352]  </debugvars>
[13:43:21.352]  
[13:43:21.352]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:43:21.352]    <block atomic="false" info="">
[13:43:21.352]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:43:21.352]        // -> [isSWJ <= 0x00000001]
[13:43:21.352]      __var hasDormant = __protocol & 0x00020000;
[13:43:21.352]        // -> [hasDormant <= 0x00000000]
[13:43:21.352]      __var protType   = __protocol & 0x0000FFFF;
[13:43:21.352]        // -> [protType <= 0x00000002]
[13:43:21.355]    </block>
[13:43:21.355]    <control if="protType == 1" while="" timeout="0" info="">
[13:43:21.355]      // if-block "protType == 1"
[13:43:21.355]        // =>  FALSE
[13:43:21.355]      // skip if-block "protType == 1"
[13:43:21.355]    </control>
[13:43:21.355]    <control if="protType == 2" while="" timeout="0" info="">
[13:43:21.355]      // if-block "protType == 2"
[13:43:21.355]        // =>  TRUE
[13:43:21.355]      <control if="isSWJ" while="" timeout="0" info="">
[13:43:21.355]        // if-block "isSWJ"
[13:43:21.355]          // =>  TRUE
[13:43:21.355]        <control if="hasDormant" while="" timeout="0" info="">
[13:43:21.355]          // if-block "hasDormant"
[13:43:21.355]            // =>  FALSE
[13:43:21.355]          // skip if-block "hasDormant"
[13:43:21.355]        </control>
[13:43:21.355]        <control if="!hasDormant" while="" timeout="0" info="">
[13:43:21.355]          // if-block "!hasDormant"
[13:43:21.355]            // =>  TRUE
[13:43:21.355]          <block atomic="false" info="">
[13:43:21.355]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:43:21.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:43:21.358]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:43:21.358]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:43:21.358]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:43:21.358]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:43:21.359]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:43:21.359]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:43:21.359]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:43:21.360]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:43:21.360]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:43:21.360]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:43:21.360]          </block>
[13:43:21.360]          // end if-block "!hasDormant"
[13:43:21.360]        </control>
[13:43:21.360]        // end if-block "isSWJ"
[13:43:21.360]      </control>
[13:43:21.360]      <control if="!isSWJ" while="" timeout="0" info="">
[13:43:21.360]        // if-block "!isSWJ"
[13:43:21.360]          // =>  FALSE
[13:43:21.360]        // skip if-block "!isSWJ"
[13:43:21.360]      </control>
[13:43:21.360]      <block atomic="false" info="">
[13:43:21.360]        ReadDP(0x0);
[13:43:21.362]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:43:21.362]      </block>
[13:43:21.362]      // end if-block "protType == 2"
[13:43:21.362]    </control>
[13:43:21.362]  </sequence>
[13:43:21.362]  
[13:43:21.364]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:43:21.364]  
[13:43:21.364]  <debugvars>
[13:43:21.364]    // Pre-defined
[13:43:21.364]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:43:21.364]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:43:21.364]    __dp=0x00000000
[13:43:21.364]    __ap=0x00000000
[13:43:21.364]    __traceout=0x00000000      (Trace Disabled)
[13:43:21.364]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:43:21.364]    __FlashAddr=0x00000000
[13:43:21.365]    __FlashLen=0x00000000
[13:43:21.365]    __FlashArg=0x00000000
[13:43:21.365]    __FlashOp=0x00000000
[13:43:21.365]    __Result=0x00000000
[13:43:21.365]  </debugvars>
[13:43:21.365]  
[13:43:21.365]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:43:21.365]    <block atomic="false" info="">
[13:43:21.365]      __var SW_DP_ABORT       = 0x0;
[13:43:21.365]        // -> [SW_DP_ABORT <= 0x00000000]
[13:43:21.365]      __var DP_CTRL_STAT      = 0x4;
[13:43:21.365]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:43:21.365]      __var DP_SELECT         = 0x8;
[13:43:21.365]        // -> [DP_SELECT <= 0x00000008]
[13:43:21.366]      __var powered_down      = 0;
[13:43:21.366]        // -> [powered_down <= 0x00000000]
[13:43:21.366]      WriteDP(DP_SELECT, 0x00000000);
[13:43:21.366]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:43:21.366]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:43:21.368]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:43:21.368]        // -> [powered_down <= 0x00000001]
[13:43:21.368]    </block>
[13:43:21.368]    <control if="powered_down" while="" timeout="0" info="">
[13:43:21.368]      // if-block "powered_down"
[13:43:21.368]        // =>  TRUE
[13:43:21.368]      <block atomic="false" info="">
[13:43:21.368]        Message(0, "Debug/System power-up request sent");
[13:43:21.369]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:43:21.372]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:43:21.372]      </block>
[13:43:21.372]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:43:21.372]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:43:21.372]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:43:21.372]        // while-condition  =>  FALSE
[13:43:21.372]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:43:21.372]      </control>
[13:43:21.372]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:43:21.372]        // if-block "(__protocol & 0xFFFF) == 1"
[13:43:21.372]          // =>  FALSE
[13:43:21.372]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:43:21.372]      </control>
[13:43:21.372]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:43:21.372]        // if-block "(__protocol & 0xFFFF) == 2"
[13:43:21.372]          // =>  TRUE
[13:43:21.372]        <block atomic="false" info="">
[13:43:21.374]          Message(0, "executing SWD power up");
[13:43:21.374]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:43:21.376]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:43:21.376]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:43:21.376]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:43:21.376]        </block>
[13:43:21.376]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:43:21.376]      </control>
[13:43:21.376]      // end if-block "powered_down"
[13:43:21.376]    </control>
[13:43:21.376]    <block atomic="false" info="">
[13:43:21.376]      __var DEBUG_PORT_VAL    = 0;
[13:43:21.376]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:43:21.376]      __var ACCESS_POINT_VAL  = 0;
[13:43:21.376]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:43:21.376]      __ap = 1; 
[13:43:21.376]        // -> [__ap <= 0x00000001]
[13:43:21.376]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:43:21.379]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:43:21.379]      __ap = 4;
[13:43:21.379]        // -> [__ap <= 0x00000004]
[13:43:21.379]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:43:21.381]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:43:21.381]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:43:21.381]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:43:21.381]    </block>
[13:43:21.381]    <block atomic="false" info="">
[13:43:21.381]      __var nReset = 0x80;
[13:43:21.381]        // -> [nReset <= 0x00000080]
[13:43:21.381]      __var canReadPins = 0;
[13:43:21.381]        // -> [canReadPins <= 0x00000000]
[13:43:21.381]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:43:21.384]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:43:21.384]        // -> [canReadPins <= 0x00000001]
[13:43:21.384]    </block>
[13:43:21.384]    <control if="" while="1" timeout="200" info="">
[13:43:21.384]      // while "1"  (timeout="200")
[13:43:21.384]      // while-condition  =>  TRUE
[13:43:21.384]      // while "1"  (timeout="200")
[13:43:21.384]      // while-condition  =>  TRUE
[13:43:21.384]      // while "1"  (timeout="200")
[13:43:21.385]      // while-condition  =>  TRUE
[13:43:21.385]      // while "1"  (timeout="200")
[13:43:21.385]      // while-condition  =>  TRUE
[13:43:21.385]      // while "1"  (timeout="200")
[13:43:21.385]      // while-condition  =>  TRUE
[13:43:21.386]      // while "1"  (timeout="200")
[13:43:21.386]      // while-condition  =>  TRUE
[13:43:21.386]      // while "1"  (timeout="200")
[13:43:21.386]      // while-condition  =>  TRUE
[13:43:21.386]      // while "1"  (timeout="200")
[13:43:21.386]      // while-condition  =>  TRUE
[13:43:21.386]      // while "1"  (timeout="200")
[13:43:21.386]      // while-condition  =>  TRUE
[13:43:21.386]      // while "1"  (timeout="200")
[13:43:21.386]      // while-condition  =>  TRUE
[13:43:21.386]      // while "1"  (timeout="200")
[13:43:21.387]      // while-condition  =>  TRUE
[13:43:21.387]      // while "1"  (timeout="200")
[13:43:21.387]      // while-condition  =>  TRUE
[13:43:21.387]      // while "1"  (timeout="200")
[13:43:21.387]      // while-condition  =>  TRUE
[13:43:21.387]      // while "1"  (timeout="200")
[13:43:21.387]      // while-condition  =>  TRUE
[13:43:21.387]      // while "1"  (timeout="200")
[13:43:21.387]      // while-condition  =>  TRUE
[13:43:21.387]      // while "1"  (timeout="200")
[13:43:21.387]      // while-condition  =>  TRUE
[13:43:21.387]      // while "1"  (timeout="200")
[13:43:21.388]      // while-condition  =>  TRUE
[13:43:21.388]      // while "1"  (timeout="200")
[13:43:21.388]      // while-condition  =>  TRUE
[13:43:21.388]      // while "1"  (timeout="200")
[13:43:21.388]      // while-condition  =>  TRUE
[13:43:21.388]      // while "1"  (timeout="200")
[13:43:21.388]      // while-condition  =>  TRUE
[13:43:21.388]      // while "1"  (timeout="200")
[13:43:21.388]      // while-condition  =>  TRUE
[13:43:21.388]      // while "1"  (timeout="200")
[13:43:21.388]      // while-condition  =>  TRUE
[13:43:21.390]      // while "1"  (timeout="200")
[13:43:21.390]      // while-condition  =>  TRUE
[13:43:21.390]      // while "1"  (timeout="200")
[13:43:21.390]      // while-condition  =>  TRUE
[13:43:21.390]      // while "1"  (timeout="200")
[13:43:21.390]      // while-condition  =>  TRUE
[13:43:21.390]      // while "1"  (timeout="200")
[13:43:21.390]      // while-condition  =>  TRUE
[13:43:21.390]      // while "1"  (timeout="200")
[13:43:21.390]      // while-condition  =>  TRUE
[13:43:21.390]      // while "1"  (timeout="200")
[13:43:21.390]      // while-condition  =>  TRUE
[13:43:21.391]      // while "1"  (timeout="200")
[13:43:21.391]      // while-condition  =>  TRUE
[13:43:21.391]      // while "1"  (timeout="200")
[13:43:21.391]      // while-condition  =>  TRUE
[13:43:21.391]      // while "1"  (timeout="200")
[13:43:21.391]      // while-condition  =>  TRUE
[13:43:21.391]      // while "1"  (timeout="200")
[13:43:21.391]      // while-condition  =>  TRUE
[13:43:21.391]      // while "1"  (timeout="200")
[13:43:21.391]      // while-condition  =>  TRUE
[13:43:21.391]      // while "1"  (timeout="200")
[13:43:21.392]      // while-condition  =>  TRUE
[13:43:21.392]      // while "1"  (timeout="200")
[13:43:21.392]      // while-condition  =>  TRUE
[13:43:21.392]      // while "1"  (timeout="200")
[13:43:21.392]      // while-condition  =>  TRUE
[13:43:21.392]      // while "1"  (timeout="200")
[13:43:21.392]      // while-condition  =>  TRUE
[13:43:21.392]      // while "1"  (timeout="200")
[13:43:21.392]      // while-condition  =>  TRUE
[13:43:21.392]      // while "1"  (timeout="200")
[13:43:21.392]      // while-condition  =>  TRUE
[13:43:21.392]      // while "1"  (timeout="200")
[13:43:21.394]      // while-condition  =>  TRUE
[13:43:21.394]      // while "1"  (timeout="200")
[13:43:21.394]      // while-condition  =>  TRUE
[13:43:21.394]      // while "1"  (timeout="200")
[13:43:21.394]      // while-condition  =>  TRUE
[13:43:21.394]      // while "1"  (timeout="200")
[13:43:21.394]      // while-condition  =>  TRUE
[13:43:21.394]      // while "1"  (timeout="200")
[13:43:21.394]      // while-condition  =>  TRUE
[13:43:21.395]      // while "1"  (timeout="200")
[13:43:21.395]      // while  =>  TIMEOUT
[13:43:21.395]      // end while "1"
[13:43:21.395]    </control>
[13:43:21.395]    <control if="canReadPins" while="" timeout="0" info="">
[13:43:21.395]      // if-block "canReadPins"
[13:43:21.395]        // =>  TRUE
[13:43:21.395]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:43:21.395]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:43:21.395]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:43:21.395]        // while-condition  =>  FALSE
[13:43:21.395]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:43:21.395]      </control>
[13:43:21.395]      // end if-block "canReadPins"
[13:43:21.395]    </control>
[13:43:21.395]    <control if="!canReadPins" while="" timeout="0" info="">
[13:43:21.395]      // if-block "!canReadPins"
[13:43:21.395]        // =>  FALSE
[13:43:21.395]      // skip if-block "!canReadPins"
[13:43:21.395]    </control>
[13:43:21.395]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:43:21.395]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:43:21.395]        // =>  TRUE
[13:43:21.395]      <block atomic="false" info="">
[13:43:21.398]        WriteAP(0x00, 0x190008);
[13:43:21.398]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:43:21.398]        WriteAP(0xF0, 0x01);
[13:43:21.400]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:43:21.400]      </block>
[13:43:21.400]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:43:21.400]    </control>
[13:43:21.400]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:43:21.400]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:43:21.400]        // =>  FALSE
[13:43:21.400]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:43:21.400]    </control>
[13:43:21.400]    <block atomic="false" info="">
[13:43:21.400]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:43:21.402]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:43:21.402]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:43:21.402]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:43:21.404]      __ap = 0; //lets make sure we reset the access point selection
[13:43:21.404]        // -> [__ap <= 0x00000000]
[13:43:21.404]    </block>
[13:43:21.404]  </sequence>
[13:43:21.404]  
[13:43:21.410]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:43:21.410]  
[13:43:21.410]  <debugvars>
[13:43:21.410]    // Pre-defined
[13:43:21.410]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:43:21.410]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[13:43:21.410]    __dp=0x00000000
[13:43:21.410]    __ap=0x00000000
[13:43:21.410]    __traceout=0x00000000      (Trace Disabled)
[13:43:21.410]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:43:21.410]    __FlashAddr=0x00000000
[13:43:21.410]    __FlashLen=0x00000000
[13:43:21.410]    __FlashArg=0x00000000
[13:43:21.410]    __FlashOp=0x00000000
[13:43:21.410]    __Result=0x00000000
[13:43:21.410]  </debugvars>
[13:43:21.410]  
[13:43:21.410]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:43:21.410]    <block atomic="false" info="">
[13:43:21.410]      __var deviceID = 0;
[13:43:21.410]        // -> [deviceID <= 0x00000000]
[13:43:21.410]      __var version = 0;
[13:43:21.410]        // -> [version <= 0x00000000]
[13:43:21.410]      __var partNum = 0;
[13:43:21.410]        // -> [partNum <= 0x00000000]
[13:43:21.414]      __var manuf = 0;
[13:43:21.414]        // -> [manuf <= 0x00000000]
[13:43:21.414]      __var isMSPM0G1X0X_G3X0X = 0;
[13:43:21.414]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:43:21.414]      __var isProduction = 0;
[13:43:21.414]        // -> [isProduction <= 0x00000000]
[13:43:21.414]      __var continueId = 0;
[13:43:21.414]        // -> [continueId <= 0x00000000]
[13:43:21.414]      deviceID =   Read32(0x41C40004);
[13:43:21.414]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:43:21.414]        // -> [deviceID <= 0x2BB8802F]
[13:43:21.414]      version = deviceID >> 28;
[13:43:21.414]        // -> [version <= 0x00000002]
[13:43:21.414]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:43:21.414]        // -> [partNum <= 0x0000BB88]
[13:43:21.414]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:43:21.414]        // -> [manuf <= 0x00000017]
[13:43:21.414]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:43:21.414]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:43:21.414]      isProduction = (version > 0);
[13:43:21.414]        // -> [isProduction <= 0x00000001]
[13:43:21.418]    </block>
[13:43:21.418]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:43:21.418]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:43:21.418]        // =>  FALSE
[13:43:21.418]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:43:21.418]    </control>
[13:43:21.418]    <control if="continueId == 4" while="" timeout="0" info="">
[13:43:21.418]      // if-block "continueId == 4"
[13:43:21.418]        // =>  FALSE
[13:43:21.418]      // skip if-block "continueId == 4"
[13:43:21.418]    </control>
[13:43:21.420]    <control if="!isProduction" while="" timeout="0" info="">
[13:43:21.420]      // if-block "!isProduction"
[13:43:21.420]        // =>  FALSE
[13:43:21.420]      // skip if-block "!isProduction"
[13:43:21.420]    </control>
[13:43:21.420]  </sequence>
[13:43:21.420]  
[13:44:54.376]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:44:54.376]  
[13:44:54.386]  <debugvars>
[13:44:54.386]    // Pre-defined
[13:44:54.386]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:44:54.386]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:44:54.386]    __dp=0x00000000
[13:44:54.386]    __ap=0x00000000
[13:44:54.386]    __traceout=0x00000000      (Trace Disabled)
[13:44:54.386]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:44:54.386]    __FlashAddr=0x00000000
[13:44:54.386]    __FlashLen=0x00000000
[13:44:54.386]    __FlashArg=0x00000000
[13:44:54.386]    __FlashOp=0x00000000
[13:44:54.386]    __Result=0x00000000
[13:44:54.386]  </debugvars>
[13:44:54.386]  
[13:44:54.386]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:44:54.388]    <block atomic="false" info="">
[13:44:54.388]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:44:54.388]        // -> [isSWJ <= 0x00000001]
[13:44:54.389]      __var hasDormant = __protocol & 0x00020000;
[13:44:54.389]        // -> [hasDormant <= 0x00000000]
[13:44:54.389]      __var protType   = __protocol & 0x0000FFFF;
[13:44:54.389]        // -> [protType <= 0x00000002]
[13:44:54.389]    </block>
[13:44:54.389]    <control if="protType == 1" while="" timeout="0" info="">
[13:44:54.389]      // if-block "protType == 1"
[13:44:54.389]        // =>  FALSE
[13:44:54.389]      // skip if-block "protType == 1"
[13:44:54.389]    </control>
[13:44:54.389]    <control if="protType == 2" while="" timeout="0" info="">
[13:44:54.389]      // if-block "protType == 2"
[13:44:54.389]        // =>  TRUE
[13:44:54.389]      <control if="isSWJ" while="" timeout="0" info="">
[13:44:54.389]        // if-block "isSWJ"
[13:44:54.389]          // =>  TRUE
[13:44:54.389]        <control if="hasDormant" while="" timeout="0" info="">
[13:44:54.389]          // if-block "hasDormant"
[13:44:54.389]            // =>  FALSE
[13:44:54.389]          // skip if-block "hasDormant"
[13:44:54.389]        </control>
[13:44:54.389]        <control if="!hasDormant" while="" timeout="0" info="">
[13:44:54.389]          // if-block "!hasDormant"
[13:44:54.389]            // =>  TRUE
[13:44:54.389]          <block atomic="false" info="">
[13:44:54.389]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:44:54.389]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:44:54.389]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:44:54.389]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:44:54.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:44:54.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:44:54.392]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:44:54.392]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:44:54.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:44:54.392]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:44:54.392]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:44:54.392]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:44:54.392]          </block>
[13:44:54.392]          // end if-block "!hasDormant"
[13:44:54.392]        </control>
[13:44:54.392]        // end if-block "isSWJ"
[13:44:54.392]      </control>
[13:44:54.392]      <control if="!isSWJ" while="" timeout="0" info="">
[13:44:54.392]        // if-block "!isSWJ"
[13:44:54.392]          // =>  FALSE
[13:44:54.392]        // skip if-block "!isSWJ"
[13:44:54.392]      </control>
[13:44:54.392]      <block atomic="false" info="">
[13:44:54.392]        ReadDP(0x0);
[13:44:54.392]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:44:54.392]      </block>
[13:44:54.392]      // end if-block "protType == 2"
[13:44:54.392]    </control>
[13:44:54.392]  </sequence>
[13:44:54.392]  
[13:44:54.396]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:44:54.396]  
[13:44:54.396]  <debugvars>
[13:44:54.396]    // Pre-defined
[13:44:54.396]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:44:54.396]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:44:54.396]    __dp=0x00000000
[13:44:54.396]    __ap=0x00000000
[13:44:54.396]    __traceout=0x00000000      (Trace Disabled)
[13:44:54.396]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:44:54.396]    __FlashAddr=0x00000000
[13:44:54.396]    __FlashLen=0x00000000
[13:44:54.396]    __FlashArg=0x00000000
[13:44:54.398]    __FlashOp=0x00000000
[13:44:54.398]    __Result=0x00000000
[13:44:54.398]  </debugvars>
[13:44:54.398]  
[13:44:54.398]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:44:54.398]    <block atomic="false" info="">
[13:44:54.398]      __var SW_DP_ABORT       = 0x0;
[13:44:54.399]        // -> [SW_DP_ABORT <= 0x00000000]
[13:44:54.399]      __var DP_CTRL_STAT      = 0x4;
[13:44:54.399]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:44:54.399]      __var DP_SELECT         = 0x8;
[13:44:54.399]        // -> [DP_SELECT <= 0x00000008]
[13:44:54.399]      __var powered_down      = 0;
[13:44:54.399]        // -> [powered_down <= 0x00000000]
[13:44:54.399]      WriteDP(DP_SELECT, 0x00000000);
[13:44:54.401]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:44:54.401]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:44:54.401]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:44:54.401]        // -> [powered_down <= 0x00000001]
[13:44:54.401]    </block>
[13:44:54.401]    <control if="powered_down" while="" timeout="0" info="">
[13:44:54.401]      // if-block "powered_down"
[13:44:54.401]        // =>  TRUE
[13:44:54.401]      <block atomic="false" info="">
[13:44:54.401]        Message(0, "Debug/System power-up request sent");
[13:44:54.404]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:44:54.405]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:44:54.405]      </block>
[13:44:54.405]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:44:54.405]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:44:54.405]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:44:54.405]        // while-condition  =>  FALSE
[13:44:54.405]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:44:54.405]      </control>
[13:44:54.405]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:44:54.405]        // if-block "(__protocol & 0xFFFF) == 1"
[13:44:54.405]          // =>  FALSE
[13:44:54.405]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:44:54.405]      </control>
[13:44:54.405]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:44:54.405]        // if-block "(__protocol & 0xFFFF) == 2"
[13:44:54.405]          // =>  TRUE
[13:44:54.405]        <block atomic="false" info="">
[13:44:54.405]          Message(0, "executing SWD power up");
[13:44:54.408]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:44:54.408]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:44:54.408]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:44:54.408]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:44:54.408]        </block>
[13:44:54.408]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:44:54.408]      </control>
[13:44:54.408]      // end if-block "powered_down"
[13:44:54.408]    </control>
[13:44:54.408]    <block atomic="false" info="">
[13:44:54.408]      __var DEBUG_PORT_VAL    = 0;
[13:44:54.408]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:44:54.408]      __var ACCESS_POINT_VAL  = 0;
[13:44:54.408]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:44:54.408]      __ap = 1; 
[13:44:54.408]        // -> [__ap <= 0x00000001]
[13:44:54.408]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:44:54.408]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:44:54.408]      __ap = 4;
[13:44:54.408]        // -> [__ap <= 0x00000004]
[13:44:54.408]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:44:54.413]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:44:54.413]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:44:54.413]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:44:54.413]    </block>
[13:44:54.413]    <block atomic="false" info="">
[13:44:54.413]      __var nReset = 0x80;
[13:44:54.413]        // -> [nReset <= 0x00000080]
[13:44:54.413]      __var canReadPins = 0;
[13:44:54.413]        // -> [canReadPins <= 0x00000000]
[13:44:54.413]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:44:54.413]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:44:54.413]        // -> [canReadPins <= 0x00000001]
[13:44:54.413]    </block>
[13:44:54.417]    <control if="" while="1" timeout="200" info="">
[13:44:54.417]      // while "1"  (timeout="200")
[13:44:54.417]      // while-condition  =>  TRUE
[13:44:54.417]      // while "1"  (timeout="200")
[13:44:54.417]      // while-condition  =>  TRUE
[13:44:54.417]      // while "1"  (timeout="200")
[13:44:54.417]      // while-condition  =>  TRUE
[13:44:54.417]      // while "1"  (timeout="200")
[13:44:54.417]      // while-condition  =>  TRUE
[13:44:54.417]      // while "1"  (timeout="200")
[13:44:54.418]      // while-condition  =>  TRUE
[13:44:54.418]      // while "1"  (timeout="200")
[13:44:54.418]      // while-condition  =>  TRUE
[13:44:54.418]      // while "1"  (timeout="200")
[13:44:54.418]      // while-condition  =>  TRUE
[13:44:54.418]      // while "1"  (timeout="200")
[13:44:54.418]      // while-condition  =>  TRUE
[13:44:54.418]      // while "1"  (timeout="200")
[13:44:54.418]      // while-condition  =>  TRUE
[13:44:54.418]      // while "1"  (timeout="200")
[13:44:54.418]      // while-condition  =>  TRUE
[13:44:54.419]      // while "1"  (timeout="200")
[13:44:54.419]      // while-condition  =>  TRUE
[13:44:54.419]      // while "1"  (timeout="200")
[13:44:54.419]      // while-condition  =>  TRUE
[13:44:54.419]      // while "1"  (timeout="200")
[13:44:54.419]      // while-condition  =>  TRUE
[13:44:54.419]      // while "1"  (timeout="200")
[13:44:54.419]      // while-condition  =>  TRUE
[13:44:54.419]      // while "1"  (timeout="200")
[13:44:54.419]      // while-condition  =>  TRUE
[13:44:54.419]      // while "1"  (timeout="200")
[13:44:54.419]      // while-condition  =>  TRUE
[13:44:54.419]      // while "1"  (timeout="200")
[13:44:54.419]      // while-condition  =>  TRUE
[13:44:54.419]      // while "1"  (timeout="200")
[13:44:54.419]      // while-condition  =>  TRUE
[13:44:54.419]      // while "1"  (timeout="200")
[13:44:54.419]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.421]      // while "1"  (timeout="200")
[13:44:54.421]      // while-condition  =>  TRUE
[13:44:54.425]      // while "1"  (timeout="200")
[13:44:54.425]      // while-condition  =>  TRUE
[13:44:54.425]      // while "1"  (timeout="200")
[13:44:54.425]      // while-condition  =>  TRUE
[13:44:54.425]      // while "1"  (timeout="200")
[13:44:54.425]      // while-condition  =>  TRUE
[13:44:54.425]      // while "1"  (timeout="200")
[13:44:54.425]      // while-condition  =>  TRUE
[13:44:54.425]      // while "1"  (timeout="200")
[13:44:54.425]      // while-condition  =>  TRUE
[13:44:54.425]      // while "1"  (timeout="200")
[13:44:54.425]      // while-condition  =>  TRUE
[13:44:54.425]      // while "1"  (timeout="200")
[13:44:54.425]      // while-condition  =>  TRUE
[13:44:54.425]      // while "1"  (timeout="200")
[13:44:54.425]      // while-condition  =>  TRUE
[13:44:54.425]      // while "1"  (timeout="200")
[13:44:54.425]      // while-condition  =>  TRUE
[13:44:54.425]      // while "1"  (timeout="200")
[13:44:54.425]      // while-condition  =>  TRUE
[13:44:54.425]      // while "1"  (timeout="200")
[13:44:54.425]      // while-condition  =>  TRUE
[13:44:54.425]      // while "1"  (timeout="200")
[13:44:54.427]      // while-condition  =>  TRUE
[13:44:54.427]      // while "1"  (timeout="200")
[13:44:54.427]      // while  =>  TIMEOUT
[13:44:54.427]      // end while "1"
[13:44:54.427]    </control>
[13:44:54.427]    <control if="canReadPins" while="" timeout="0" info="">
[13:44:54.427]      // if-block "canReadPins"
[13:44:54.427]        // =>  TRUE
[13:44:54.428]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:44:54.428]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:44:54.428]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:44:54.428]        // while-condition  =>  FALSE
[13:44:54.428]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:44:54.428]      </control>
[13:44:54.428]      // end if-block "canReadPins"
[13:44:54.428]    </control>
[13:44:54.428]    <control if="!canReadPins" while="" timeout="0" info="">
[13:44:54.428]      // if-block "!canReadPins"
[13:44:54.428]        // =>  FALSE
[13:44:54.428]      // skip if-block "!canReadPins"
[13:44:54.428]    </control>
[13:44:54.428]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:44:54.428]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:44:54.428]        // =>  TRUE
[13:44:54.428]      <block atomic="false" info="">
[13:44:54.428]        WriteAP(0x00, 0x190008);
[13:44:54.428]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:44:54.428]        WriteAP(0xF0, 0x01);
[13:44:54.428]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:44:54.428]      </block>
[13:44:54.428]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:44:54.433]    </control>
[13:44:54.433]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:44:54.433]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:44:54.433]        // =>  FALSE
[13:44:54.433]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:44:54.433]    </control>
[13:44:54.433]    <block atomic="false" info="">
[13:44:54.433]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:44:54.434]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:44:54.434]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:44:54.434]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:44:54.434]      __ap = 0; //lets make sure we reset the access point selection
[13:44:54.434]        // -> [__ap <= 0x00000000]
[13:44:54.434]    </block>
[13:44:54.434]  </sequence>
[13:44:54.434]  
[13:44:54.443]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:44:54.443]  
[13:44:54.443]  <debugvars>
[13:44:54.443]    // Pre-defined
[13:44:54.443]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:44:54.443]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:44:54.444]    __dp=0x00000000
[13:44:54.444]    __ap=0x00000000
[13:44:54.444]    __traceout=0x00000000      (Trace Disabled)
[13:44:54.444]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:44:54.444]    __FlashAddr=0x00000000
[13:44:54.444]    __FlashLen=0x00000000
[13:44:54.444]    __FlashArg=0x00000000
[13:44:54.444]    __FlashOp=0x00000000
[13:44:54.445]    __Result=0x00000000
[13:44:54.445]  </debugvars>
[13:44:54.445]  
[13:44:54.445]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:44:54.445]    <block atomic="false" info="">
[13:44:54.445]      __var deviceID = 0;
[13:44:54.445]        // -> [deviceID <= 0x00000000]
[13:44:54.445]      __var version = 0;
[13:44:54.445]        // -> [version <= 0x00000000]
[13:44:54.445]      __var partNum = 0;
[13:44:54.445]        // -> [partNum <= 0x00000000]
[13:44:54.445]      __var manuf = 0;
[13:44:54.445]        // -> [manuf <= 0x00000000]
[13:44:54.445]      __var isMSPM0G1X0X_G3X0X = 0;
[13:44:54.445]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:44:54.445]      __var isProduction = 0;
[13:44:54.445]        // -> [isProduction <= 0x00000000]
[13:44:54.445]      __var continueId = 0;
[13:44:54.445]        // -> [continueId <= 0x00000000]
[13:44:54.445]      deviceID =   Read32(0x41C40004);
[13:44:54.448]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:44:54.448]        // -> [deviceID <= 0x2BB8802F]
[13:44:54.448]      version = deviceID >> 28;
[13:44:54.448]        // -> [version <= 0x00000002]
[13:44:54.450]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:44:54.450]        // -> [partNum <= 0x0000BB88]
[13:44:54.450]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:44:54.450]        // -> [manuf <= 0x00000017]
[13:44:54.450]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:44:54.450]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:44:54.450]      isProduction = (version > 0);
[13:44:54.450]        // -> [isProduction <= 0x00000001]
[13:44:54.450]    </block>
[13:44:54.450]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:44:54.450]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:44:54.450]        // =>  FALSE
[13:44:54.450]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:44:54.450]    </control>
[13:44:54.452]    <control if="continueId == 4" while="" timeout="0" info="">
[13:44:54.452]      // if-block "continueId == 4"
[13:44:54.452]        // =>  FALSE
[13:44:54.452]      // skip if-block "continueId == 4"
[13:44:54.452]    </control>
[13:44:54.452]    <control if="!isProduction" while="" timeout="0" info="">
[13:44:54.452]      // if-block "!isProduction"
[13:44:54.452]        // =>  FALSE
[13:44:54.452]      // skip if-block "!isProduction"
[13:44:54.452]    </control>
[13:44:54.452]  </sequence>
[13:44:54.452]  
[13:45:36.665]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:45:36.665]  
[13:45:36.676]  <debugvars>
[13:45:36.676]    // Pre-defined
[13:45:36.676]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:45:36.676]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:45:36.676]    __dp=0x00000000
[13:45:36.676]    __ap=0x00000000
[13:45:36.676]    __traceout=0x00000000      (Trace Disabled)
[13:45:36.676]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:45:36.676]    __FlashAddr=0x00000000
[13:45:36.676]    __FlashLen=0x00000000
[13:45:36.676]    __FlashArg=0x00000000
[13:45:36.676]    __FlashOp=0x00000000
[13:45:36.677]    __Result=0x00000000
[13:45:36.677]  </debugvars>
[13:45:36.677]  
[13:45:36.677]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:45:36.677]    <block atomic="false" info="">
[13:45:36.677]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:45:36.677]        // -> [isSWJ <= 0x00000001]
[13:45:36.677]      __var hasDormant = __protocol & 0x00020000;
[13:45:36.677]        // -> [hasDormant <= 0x00000000]
[13:45:36.677]      __var protType   = __protocol & 0x0000FFFF;
[13:45:36.677]        // -> [protType <= 0x00000002]
[13:45:36.678]    </block>
[13:45:36.678]    <control if="protType == 1" while="" timeout="0" info="">
[13:45:36.678]      // if-block "protType == 1"
[13:45:36.678]        // =>  FALSE
[13:45:36.678]      // skip if-block "protType == 1"
[13:45:36.678]    </control>
[13:45:36.678]    <control if="protType == 2" while="" timeout="0" info="">
[13:45:36.678]      // if-block "protType == 2"
[13:45:36.678]        // =>  TRUE
[13:45:36.678]      <control if="isSWJ" while="" timeout="0" info="">
[13:45:36.678]        // if-block "isSWJ"
[13:45:36.678]          // =>  TRUE
[13:45:36.678]        <control if="hasDormant" while="" timeout="0" info="">
[13:45:36.678]          // if-block "hasDormant"
[13:45:36.678]            // =>  FALSE
[13:45:36.680]          // skip if-block "hasDormant"
[13:45:36.680]        </control>
[13:45:36.680]        <control if="!hasDormant" while="" timeout="0" info="">
[13:45:36.680]          // if-block "!hasDormant"
[13:45:36.680]            // =>  TRUE
[13:45:36.680]          <block atomic="false" info="">
[13:45:36.680]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:45:36.681]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:45:36.681]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:45:36.681]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:45:36.681]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:45:36.681]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:45:36.681]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:45:36.682]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:45:36.682]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:45:36.682]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:45:36.682]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:45:36.682]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:45:36.682]          </block>
[13:45:36.682]          // end if-block "!hasDormant"
[13:45:36.682]        </control>
[13:45:36.682]        // end if-block "isSWJ"
[13:45:36.682]      </control>
[13:45:36.682]      <control if="!isSWJ" while="" timeout="0" info="">
[13:45:36.682]        // if-block "!isSWJ"
[13:45:36.682]          // =>  FALSE
[13:45:36.682]        // skip if-block "!isSWJ"
[13:45:36.684]      </control>
[13:45:36.684]      <block atomic="false" info="">
[13:45:36.684]        ReadDP(0x0);
[13:45:36.684]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:45:36.684]      </block>
[13:45:36.684]      // end if-block "protType == 2"
[13:45:36.684]    </control>
[13:45:36.684]  </sequence>
[13:45:36.684]  
[13:45:36.686]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:45:36.686]  
[13:45:36.686]  <debugvars>
[13:45:36.686]    // Pre-defined
[13:45:36.686]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:45:36.686]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:45:36.686]    __dp=0x00000000
[13:45:36.686]    __ap=0x00000000
[13:45:36.686]    __traceout=0x00000000      (Trace Disabled)
[13:45:36.686]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:45:36.686]    __FlashAddr=0x00000000
[13:45:36.686]    __FlashLen=0x00000000
[13:45:36.686]    __FlashArg=0x00000000
[13:45:36.687]    __FlashOp=0x00000000
[13:45:36.687]    __Result=0x00000000
[13:45:36.687]  </debugvars>
[13:45:36.687]  
[13:45:36.687]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:45:36.687]    <block atomic="false" info="">
[13:45:36.687]      __var SW_DP_ABORT       = 0x0;
[13:45:36.687]        // -> [SW_DP_ABORT <= 0x00000000]
[13:45:36.687]      __var DP_CTRL_STAT      = 0x4;
[13:45:36.687]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:45:36.687]      __var DP_SELECT         = 0x8;
[13:45:36.688]        // -> [DP_SELECT <= 0x00000008]
[13:45:36.688]      __var powered_down      = 0;
[13:45:36.688]        // -> [powered_down <= 0x00000000]
[13:45:36.688]      WriteDP(DP_SELECT, 0x00000000);
[13:45:36.688]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:45:36.688]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:45:36.690]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:45:36.690]        // -> [powered_down <= 0x00000001]
[13:45:36.690]    </block>
[13:45:36.690]    <control if="powered_down" while="" timeout="0" info="">
[13:45:36.690]      // if-block "powered_down"
[13:45:36.690]        // =>  TRUE
[13:45:36.690]      <block atomic="false" info="">
[13:45:36.690]        Message(0, "Debug/System power-up request sent");
[13:45:36.693]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:45:36.693]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:45:36.693]      </block>
[13:45:36.693]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:45:36.693]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:45:36.696]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:45:36.696]        // while-condition  =>  FALSE
[13:45:36.696]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:45:36.696]      </control>
[13:45:36.696]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:45:36.696]        // if-block "(__protocol & 0xFFFF) == 1"
[13:45:36.696]          // =>  FALSE
[13:45:36.696]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:45:36.696]      </control>
[13:45:36.696]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:45:36.696]        // if-block "(__protocol & 0xFFFF) == 2"
[13:45:36.696]          // =>  TRUE
[13:45:36.697]        <block atomic="false" info="">
[13:45:36.697]          Message(0, "executing SWD power up");
[13:45:36.697]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:45:36.699]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:45:36.699]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:45:36.699]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:45:36.699]        </block>
[13:45:36.699]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:45:36.700]      </control>
[13:45:36.700]      // end if-block "powered_down"
[13:45:36.700]    </control>
[13:45:36.700]    <block atomic="false" info="">
[13:45:36.700]      __var DEBUG_PORT_VAL    = 0;
[13:45:36.700]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:45:36.700]      __var ACCESS_POINT_VAL  = 0;
[13:45:36.700]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:45:36.700]      __ap = 1; 
[13:45:36.700]        // -> [__ap <= 0x00000001]
[13:45:36.700]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:45:36.701]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:45:36.702]      __ap = 4;
[13:45:36.702]        // -> [__ap <= 0x00000004]
[13:45:36.702]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:45:36.702]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:45:36.702]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:45:36.702]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:45:36.705]    </block>
[13:45:36.705]    <block atomic="false" info="">
[13:45:36.705]      __var nReset = 0x80;
[13:45:36.705]        // -> [nReset <= 0x00000080]
[13:45:36.705]      __var canReadPins = 0;
[13:45:36.705]        // -> [canReadPins <= 0x00000000]
[13:45:36.705]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:45:36.705]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:45:36.705]        // -> [canReadPins <= 0x00000001]
[13:45:36.706]    </block>
[13:45:36.706]    <control if="" while="1" timeout="200" info="">
[13:45:36.706]      // while "1"  (timeout="200")
[13:45:36.706]      // while-condition  =>  TRUE
[13:45:36.706]      // while "1"  (timeout="200")
[13:45:36.706]      // while-condition  =>  TRUE
[13:45:36.707]      // while "1"  (timeout="200")
[13:45:36.707]      // while-condition  =>  TRUE
[13:45:36.707]      // while "1"  (timeout="200")
[13:45:36.707]      // while-condition  =>  TRUE
[13:45:36.707]      // while "1"  (timeout="200")
[13:45:36.707]      // while-condition  =>  TRUE
[13:45:36.707]      // while "1"  (timeout="200")
[13:45:36.707]      // while-condition  =>  TRUE
[13:45:36.707]      // while "1"  (timeout="200")
[13:45:36.707]      // while-condition  =>  TRUE
[13:45:36.707]      // while "1"  (timeout="200")
[13:45:36.707]      // while-condition  =>  TRUE
[13:45:36.707]      // while "1"  (timeout="200")
[13:45:36.707]      // while-condition  =>  TRUE
[13:45:36.707]      // while "1"  (timeout="200")
[13:45:36.707]      // while-condition  =>  TRUE
[13:45:36.707]      // while "1"  (timeout="200")
[13:45:36.707]      // while-condition  =>  TRUE
[13:45:36.707]      // while "1"  (timeout="200")
[13:45:36.707]      // while-condition  =>  TRUE
[13:45:36.709]      // while "1"  (timeout="200")
[13:45:36.709]      // while  =>  TIMEOUT
[13:45:36.709]      // end while "1"
[13:45:36.709]    </control>
[13:45:36.709]    <control if="canReadPins" while="" timeout="0" info="">
[13:45:36.709]      // if-block "canReadPins"
[13:45:36.709]        // =>  TRUE
[13:45:36.709]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:45:36.709]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:45:36.710]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:45:36.710]        // while-condition  =>  FALSE
[13:45:36.710]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:45:36.710]      </control>
[13:45:36.710]      // end if-block "canReadPins"
[13:45:36.710]    </control>
[13:45:36.710]    <control if="!canReadPins" while="" timeout="0" info="">
[13:45:36.710]      // if-block "!canReadPins"
[13:45:36.710]        // =>  FALSE
[13:45:36.710]      // skip if-block "!canReadPins"
[13:45:36.710]    </control>
[13:45:36.710]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:45:36.710]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:45:36.710]        // =>  TRUE
[13:45:36.710]      <block atomic="false" info="">
[13:45:36.710]        WriteAP(0x00, 0x190008);
[13:45:36.710]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:45:36.710]        WriteAP(0xF0, 0x01);
[13:45:36.712]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:45:36.712]      </block>
[13:45:36.712]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:45:36.712]    </control>
[13:45:36.712]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:45:36.712]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:45:36.712]        // =>  FALSE
[13:45:36.712]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:45:36.712]    </control>
[13:45:36.712]    <block atomic="false" info="">
[13:45:36.712]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:45:36.716]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:45:36.716]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:45:36.716]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:45:36.717]      __ap = 0; //lets make sure we reset the access point selection
[13:45:36.717]        // -> [__ap <= 0x00000000]
[13:45:36.717]    </block>
[13:45:36.717]  </sequence>
[13:45:36.719]  
[13:45:36.724]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:45:36.724]  
[13:45:36.724]  <debugvars>
[13:45:36.724]    // Pre-defined
[13:45:36.724]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:45:36.724]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:45:36.724]    __dp=0x00000000
[13:45:36.724]    __ap=0x00000000
[13:45:36.724]    __traceout=0x00000000      (Trace Disabled)
[13:45:36.724]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:45:36.724]    __FlashAddr=0x00000000
[13:45:36.724]    __FlashLen=0x00000000
[13:45:36.724]    __FlashArg=0x00000000
[13:45:36.724]    __FlashOp=0x00000000
[13:45:36.724]    __Result=0x00000000
[13:45:36.724]  </debugvars>
[13:45:36.724]  
[13:45:36.724]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:45:36.724]    <block atomic="false" info="">
[13:45:36.724]      __var deviceID = 0;
[13:45:36.727]        // -> [deviceID <= 0x00000000]
[13:45:36.727]      __var version = 0;
[13:45:36.727]        // -> [version <= 0x00000000]
[13:45:36.727]      __var partNum = 0;
[13:45:36.727]        // -> [partNum <= 0x00000000]
[13:45:36.727]      __var manuf = 0;
[13:45:36.727]        // -> [manuf <= 0x00000000]
[13:45:36.727]      __var isMSPM0G1X0X_G3X0X = 0;
[13:45:36.727]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:45:36.727]      __var isProduction = 0;
[13:45:36.727]        // -> [isProduction <= 0x00000000]
[13:45:36.727]      __var continueId = 0;
[13:45:36.727]        // -> [continueId <= 0x00000000]
[13:45:36.727]      deviceID =   Read32(0x41C40004);
[13:45:36.729]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:45:36.729]        // -> [deviceID <= 0x2BB8802F]
[13:45:36.729]      version = deviceID >> 28;
[13:45:36.729]        // -> [version <= 0x00000002]
[13:45:36.729]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:45:36.729]        // -> [partNum <= 0x0000BB88]
[13:45:36.729]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:45:36.729]        // -> [manuf <= 0x00000017]
[13:45:36.729]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:45:36.729]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:45:36.729]      isProduction = (version > 0);
[13:45:36.729]        // -> [isProduction <= 0x00000001]
[13:45:36.729]    </block>
[13:45:36.729]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:45:36.729]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:45:36.729]        // =>  FALSE
[13:45:36.729]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:45:36.729]    </control>
[13:45:36.729]    <control if="continueId == 4" while="" timeout="0" info="">
[13:45:36.729]      // if-block "continueId == 4"
[13:45:36.729]        // =>  FALSE
[13:45:36.729]      // skip if-block "continueId == 4"
[13:45:36.729]    </control>
[13:45:36.729]    <control if="!isProduction" while="" timeout="0" info="">
[13:45:36.729]      // if-block "!isProduction"
[13:45:36.733]        // =>  FALSE
[13:45:36.733]      // skip if-block "!isProduction"
[13:45:36.733]    </control>
[13:45:36.733]  </sequence>
[13:45:36.733]  
[13:48:40.384]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:48:40.384]  
[13:48:40.394]  <debugvars>
[13:48:40.394]    // Pre-defined
[13:48:40.394]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:48:40.394]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:48:40.394]    __dp=0x00000000
[13:48:40.394]    __ap=0x00000000
[13:48:40.394]    __traceout=0x00000000      (Trace Disabled)
[13:48:40.394]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:48:40.395]    __FlashAddr=0x00000000
[13:48:40.395]    __FlashLen=0x00000000
[13:48:40.396]    __FlashArg=0x00000000
[13:48:40.396]    __FlashOp=0x00000000
[13:48:40.396]    __Result=0x00000000
[13:48:40.396]  </debugvars>
[13:48:40.396]  
[13:48:40.396]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:48:40.396]    <block atomic="false" info="">
[13:48:40.396]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:48:40.396]        // -> [isSWJ <= 0x00000001]
[13:48:40.396]      __var hasDormant = __protocol & 0x00020000;
[13:48:40.396]        // -> [hasDormant <= 0x00000000]
[13:48:40.396]      __var protType   = __protocol & 0x0000FFFF;
[13:48:40.397]        // -> [protType <= 0x00000002]
[13:48:40.397]    </block>
[13:48:40.397]    <control if="protType == 1" while="" timeout="0" info="">
[13:48:40.397]      // if-block "protType == 1"
[13:48:40.397]        // =>  FALSE
[13:48:40.397]      // skip if-block "protType == 1"
[13:48:40.398]    </control>
[13:48:40.398]    <control if="protType == 2" while="" timeout="0" info="">
[13:48:40.398]      // if-block "protType == 2"
[13:48:40.398]        // =>  TRUE
[13:48:40.398]      <control if="isSWJ" while="" timeout="0" info="">
[13:48:40.398]        // if-block "isSWJ"
[13:48:40.398]          // =>  TRUE
[13:48:40.398]        <control if="hasDormant" while="" timeout="0" info="">
[13:48:40.398]          // if-block "hasDormant"
[13:48:40.398]            // =>  FALSE
[13:48:40.398]          // skip if-block "hasDormant"
[13:48:40.399]        </control>
[13:48:40.399]        <control if="!hasDormant" while="" timeout="0" info="">
[13:48:40.399]          // if-block "!hasDormant"
[13:48:40.399]            // =>  TRUE
[13:48:40.399]          <block atomic="false" info="">
[13:48:40.399]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:48:40.399]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:48:40.400]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:48:40.400]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:48:40.400]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:48:40.400]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:48:40.400]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:48:40.401]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:48:40.401]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:48:40.401]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:48:40.401]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:48:40.402]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:48:40.402]          </block>
[13:48:40.402]          // end if-block "!hasDormant"
[13:48:40.402]        </control>
[13:48:40.402]        // end if-block "isSWJ"
[13:48:40.402]      </control>
[13:48:40.402]      <control if="!isSWJ" while="" timeout="0" info="">
[13:48:40.402]        // if-block "!isSWJ"
[13:48:40.402]          // =>  FALSE
[13:48:40.402]        // skip if-block "!isSWJ"
[13:48:40.403]      </control>
[13:48:40.403]      <block atomic="false" info="">
[13:48:40.403]        ReadDP(0x0);
[13:48:40.403]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:48:40.403]      </block>
[13:48:40.403]      // end if-block "protType == 2"
[13:48:40.403]    </control>
[13:48:40.404]  </sequence>
[13:48:40.404]  
[13:48:40.404]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:48:40.404]  
[13:48:40.404]  <debugvars>
[13:48:40.404]    // Pre-defined
[13:48:40.404]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:48:40.404]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:48:40.405]    __dp=0x00000000
[13:48:40.405]    __ap=0x00000000
[13:48:40.405]    __traceout=0x00000000      (Trace Disabled)
[13:48:40.405]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:48:40.405]    __FlashAddr=0x00000000
[13:48:40.405]    __FlashLen=0x00000000
[13:48:40.405]    __FlashArg=0x00000000
[13:48:40.405]    __FlashOp=0x00000000
[13:48:40.405]    __Result=0x00000000
[13:48:40.405]  </debugvars>
[13:48:40.405]  
[13:48:40.406]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:48:40.406]    <block atomic="false" info="">
[13:48:40.406]      __var SW_DP_ABORT       = 0x0;
[13:48:40.406]        // -> [SW_DP_ABORT <= 0x00000000]
[13:48:40.406]      __var DP_CTRL_STAT      = 0x4;
[13:48:40.406]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:48:40.406]      __var DP_SELECT         = 0x8;
[13:48:40.407]        // -> [DP_SELECT <= 0x00000008]
[13:48:40.407]      __var powered_down      = 0;
[13:48:40.408]        // -> [powered_down <= 0x00000000]
[13:48:40.408]      WriteDP(DP_SELECT, 0x00000000);
[13:48:40.408]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:48:40.408]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:48:40.409]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:48:40.409]        // -> [powered_down <= 0x00000001]
[13:48:40.409]    </block>
[13:48:40.409]    <control if="powered_down" while="" timeout="0" info="">
[13:48:40.409]      // if-block "powered_down"
[13:48:40.409]        // =>  TRUE
[13:48:40.409]      <block atomic="false" info="">
[13:48:40.409]        Message(0, "Debug/System power-up request sent");
[13:48:40.412]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:48:40.412]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:48:40.413]      </block>
[13:48:40.413]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:48:40.413]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:48:40.413]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:48:40.413]        // while-condition  =>  FALSE
[13:48:40.413]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:48:40.413]      </control>
[13:48:40.413]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:48:40.413]        // if-block "(__protocol & 0xFFFF) == 1"
[13:48:40.414]          // =>  FALSE
[13:48:40.414]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:48:40.414]      </control>
[13:48:40.414]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:48:40.414]        // if-block "(__protocol & 0xFFFF) == 2"
[13:48:40.415]          // =>  TRUE
[13:48:40.415]        <block atomic="false" info="">
[13:48:40.415]          Message(0, "executing SWD power up");
[13:48:40.416]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:48:40.417]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:48:40.417]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:48:40.418]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:48:40.418]        </block>
[13:48:40.418]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:48:40.418]      </control>
[13:48:40.418]      // end if-block "powered_down"
[13:48:40.419]    </control>
[13:48:40.419]    <block atomic="false" info="">
[13:48:40.419]      __var DEBUG_PORT_VAL    = 0;
[13:48:40.419]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:48:40.419]      __var ACCESS_POINT_VAL  = 0;
[13:48:40.419]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:48:40.419]      __ap = 1; 
[13:48:40.419]        // -> [__ap <= 0x00000001]
[13:48:40.420]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:48:40.421]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:48:40.422]      __ap = 4;
[13:48:40.422]        // -> [__ap <= 0x00000004]
[13:48:40.422]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:48:40.423]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:48:40.423]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:48:40.423]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:48:40.424]    </block>
[13:48:40.424]    <block atomic="false" info="">
[13:48:40.424]      __var nReset = 0x80;
[13:48:40.424]        // -> [nReset <= 0x00000080]
[13:48:40.425]      __var canReadPins = 0;
[13:48:40.425]        // -> [canReadPins <= 0x00000000]
[13:48:40.425]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:48:40.425]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:48:40.425]        // -> [canReadPins <= 0x00000001]
[13:48:40.425]    </block>
[13:48:40.425]    <control if="" while="1" timeout="200" info="">
[13:48:40.425]      // while "1"  (timeout="200")
[13:48:40.426]      // while-condition  =>  TRUE
[13:48:40.426]      // while "1"  (timeout="200")
[13:48:40.426]      // while  =>  TIMEOUT
[13:48:40.426]      // end while "1"
[13:48:40.426]    </control>
[13:48:40.426]    <control if="canReadPins" while="" timeout="0" info="">
[13:48:40.426]      // if-block "canReadPins"
[13:48:40.426]        // =>  TRUE
[13:48:40.426]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:48:40.426]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:48:40.427]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:48:40.427]        // while-condition  =>  FALSE
[13:48:40.427]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:48:40.427]      </control>
[13:48:40.427]      // end if-block "canReadPins"
[13:48:40.428]    </control>
[13:48:40.429]    <control if="!canReadPins" while="" timeout="0" info="">
[13:48:40.429]      // if-block "!canReadPins"
[13:48:40.429]        // =>  FALSE
[13:48:40.429]      // skip if-block "!canReadPins"
[13:48:40.429]    </control>
[13:48:40.429]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:48:40.429]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:48:40.429]        // =>  TRUE
[13:48:40.429]      <block atomic="false" info="">
[13:48:40.429]        WriteAP(0x00, 0x190008);
[13:48:40.430]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:48:40.430]        WriteAP(0xF0, 0x01);
[13:48:40.431]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:48:40.431]      </block>
[13:48:40.431]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:48:40.431]    </control>
[13:48:40.431]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:48:40.431]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:48:40.431]        // =>  FALSE
[13:48:40.433]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:48:40.433]    </control>
[13:48:40.433]    <block atomic="false" info="">
[13:48:40.433]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:48:40.434]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:48:40.434]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:48:40.434]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:48:40.436]      __ap = 0; //lets make sure we reset the access point selection
[13:48:40.436]        // -> [__ap <= 0x00000000]
[13:48:40.436]    </block>
[13:48:40.436]  </sequence>
[13:48:40.436]  
[13:48:40.443]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:48:40.443]  
[13:48:40.443]  <debugvars>
[13:48:40.443]    // Pre-defined
[13:48:40.443]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:48:40.443]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:48:40.443]    __dp=0x00000000
[13:48:40.443]    __ap=0x00000000
[13:48:40.443]    __traceout=0x00000000      (Trace Disabled)
[13:48:40.443]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:48:40.443]    __FlashAddr=0x00000000
[13:48:40.443]    __FlashLen=0x00000000
[13:48:40.444]    __FlashArg=0x00000000
[13:48:40.444]    __FlashOp=0x00000000
[13:48:40.444]    __Result=0x00000000
[13:48:40.444]  </debugvars>
[13:48:40.444]  
[13:48:40.444]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:48:40.444]    <block atomic="false" info="">
[13:48:40.444]      __var deviceID = 0;
[13:48:40.444]        // -> [deviceID <= 0x00000000]
[13:48:40.444]      __var version = 0;
[13:48:40.444]        // -> [version <= 0x00000000]
[13:48:40.444]      __var partNum = 0;
[13:48:40.445]        // -> [partNum <= 0x00000000]
[13:48:40.445]      __var manuf = 0;
[13:48:40.445]        // -> [manuf <= 0x00000000]
[13:48:40.445]      __var isMSPM0G1X0X_G3X0X = 0;
[13:48:40.445]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:48:40.445]      __var isProduction = 0;
[13:48:40.445]        // -> [isProduction <= 0x00000000]
[13:48:40.445]      __var continueId = 0;
[13:48:40.445]        // -> [continueId <= 0x00000000]
[13:48:40.445]      deviceID =   Read32(0x41C40004);
[13:48:40.447]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:48:40.447]        // -> [deviceID <= 0x2BB8802F]
[13:48:40.447]      version = deviceID >> 28;
[13:48:40.447]        // -> [version <= 0x00000002]
[13:48:40.447]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:48:40.447]        // -> [partNum <= 0x0000BB88]
[13:48:40.447]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:48:40.447]        // -> [manuf <= 0x00000017]
[13:48:40.447]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:48:40.448]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:48:40.448]      isProduction = (version > 0);
[13:48:40.448]        // -> [isProduction <= 0x00000001]
[13:48:40.449]    </block>
[13:48:40.449]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:48:40.449]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:48:40.449]        // =>  FALSE
[13:48:40.449]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:48:40.449]    </control>
[13:48:40.449]    <control if="continueId == 4" while="" timeout="0" info="">
[13:48:40.449]      // if-block "continueId == 4"
[13:48:40.449]        // =>  FALSE
[13:48:40.449]      // skip if-block "continueId == 4"
[13:48:40.450]    </control>
[13:48:40.450]    <control if="!isProduction" while="" timeout="0" info="">
[13:48:40.450]      // if-block "!isProduction"
[13:48:40.450]        // =>  FALSE
[13:48:40.450]      // skip if-block "!isProduction"
[13:48:40.450]    </control>
[13:48:40.450]  </sequence>
[13:48:40.450]  
[13:49:48.682]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[13:49:48.682]  
[13:49:48.690]  <debugvars>
[13:49:48.690]    // Pre-defined
[13:49:48.690]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:49:48.690]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:49:48.690]    __dp=0x00000000
[13:49:48.690]    __ap=0x00000000
[13:49:48.691]    __traceout=0x00000000      (Trace Disabled)
[13:49:48.691]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:49:48.691]    __FlashAddr=0x00000000
[13:49:48.691]    __FlashLen=0x00000000
[13:49:48.691]    __FlashArg=0x00000000
[13:49:48.691]    __FlashOp=0x00000000
[13:49:48.691]    __Result=0x00000000
[13:49:48.691]  </debugvars>
[13:49:48.691]  
[13:49:48.691]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[13:49:48.691]    <block atomic="false" info="">
[13:49:48.691]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[13:49:48.692]        // -> [isSWJ <= 0x00000001]
[13:49:48.692]      __var hasDormant = __protocol & 0x00020000;
[13:49:48.692]        // -> [hasDormant <= 0x00000000]
[13:49:48.692]      __var protType   = __protocol & 0x0000FFFF;
[13:49:48.692]        // -> [protType <= 0x00000002]
[13:49:48.692]    </block>
[13:49:48.692]    <control if="protType == 1" while="" timeout="0" info="">
[13:49:48.692]      // if-block "protType == 1"
[13:49:48.692]        // =>  FALSE
[13:49:48.692]      // skip if-block "protType == 1"
[13:49:48.693]    </control>
[13:49:48.693]    <control if="protType == 2" while="" timeout="0" info="">
[13:49:48.693]      // if-block "protType == 2"
[13:49:48.693]        // =>  TRUE
[13:49:48.693]      <control if="isSWJ" while="" timeout="0" info="">
[13:49:48.693]        // if-block "isSWJ"
[13:49:48.693]          // =>  TRUE
[13:49:48.693]        <control if="hasDormant" while="" timeout="0" info="">
[13:49:48.694]          // if-block "hasDormant"
[13:49:48.694]            // =>  FALSE
[13:49:48.694]          // skip if-block "hasDormant"
[13:49:48.694]        </control>
[13:49:48.694]        <control if="!hasDormant" while="" timeout="0" info="">
[13:49:48.694]          // if-block "!hasDormant"
[13:49:48.694]            // =>  TRUE
[13:49:48.694]          <block atomic="false" info="">
[13:49:48.694]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[13:49:48.695]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:49:48.695]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[13:49:48.696]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[13:49:48.696]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[13:49:48.696]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:49:48.696]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[13:49:48.696]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[13:49:48.696]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[13:49:48.696]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[13:49:48.698]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[13:49:48.698]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[13:49:48.698]          </block>
[13:49:48.698]          // end if-block "!hasDormant"
[13:49:48.699]        </control>
[13:49:48.699]        // end if-block "isSWJ"
[13:49:48.699]      </control>
[13:49:48.699]      <control if="!isSWJ" while="" timeout="0" info="">
[13:49:48.699]        // if-block "!isSWJ"
[13:49:48.699]          // =>  FALSE
[13:49:48.699]        // skip if-block "!isSWJ"
[13:49:48.700]      </control>
[13:49:48.700]      <block atomic="false" info="">
[13:49:48.700]        ReadDP(0x0);
[13:49:48.700]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[13:49:48.700]      </block>
[13:49:48.700]      // end if-block "protType == 2"
[13:49:48.701]    </control>
[13:49:48.701]  </sequence>
[13:49:48.701]  
[13:49:48.701]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[13:49:48.701]  
[13:49:48.701]  <debugvars>
[13:49:48.701]    // Pre-defined
[13:49:48.701]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:49:48.701]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:49:48.701]    __dp=0x00000000
[13:49:48.701]    __ap=0x00000000
[13:49:48.701]    __traceout=0x00000000      (Trace Disabled)
[13:49:48.701]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:49:48.702]    __FlashAddr=0x00000000
[13:49:48.702]    __FlashLen=0x00000000
[13:49:48.702]    __FlashArg=0x00000000
[13:49:48.702]    __FlashOp=0x00000000
[13:49:48.702]    __Result=0x00000000
[13:49:48.702]  </debugvars>
[13:49:48.702]  
[13:49:48.702]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[13:49:48.702]    <block atomic="false" info="">
[13:49:48.702]      __var SW_DP_ABORT       = 0x0;
[13:49:48.702]        // -> [SW_DP_ABORT <= 0x00000000]
[13:49:48.702]      __var DP_CTRL_STAT      = 0x4;
[13:49:48.703]        // -> [DP_CTRL_STAT <= 0x00000004]
[13:49:48.703]      __var DP_SELECT         = 0x8;
[13:49:48.703]        // -> [DP_SELECT <= 0x00000008]
[13:49:48.703]      __var powered_down      = 0;
[13:49:48.703]        // -> [powered_down <= 0x00000000]
[13:49:48.703]      WriteDP(DP_SELECT, 0x00000000);
[13:49:48.704]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[13:49:48.704]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[13:49:48.704]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[13:49:48.705]        // -> [powered_down <= 0x00000001]
[13:49:48.705]    </block>
[13:49:48.705]    <control if="powered_down" while="" timeout="0" info="">
[13:49:48.705]      // if-block "powered_down"
[13:49:48.705]        // =>  TRUE
[13:49:48.705]      <block atomic="false" info="">
[13:49:48.705]        Message(0, "Debug/System power-up request sent");
[13:49:48.708]        WriteDP(DP_CTRL_STAT, 0x50000000);
[13:49:48.708]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[13:49:48.708]      </block>
[13:49:48.708]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[13:49:48.708]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[13:49:48.708]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[13:49:48.710]        // while-condition  =>  FALSE
[13:49:48.710]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[13:49:48.710]      </control>
[13:49:48.710]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[13:49:48.710]        // if-block "(__protocol & 0xFFFF) == 1"
[13:49:48.710]          // =>  FALSE
[13:49:48.710]        // skip if-block "(__protocol & 0xFFFF) == 1"
[13:49:48.710]      </control>
[13:49:48.710]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[13:49:48.710]        // if-block "(__protocol & 0xFFFF) == 2"
[13:49:48.710]          // =>  TRUE
[13:49:48.711]        <block atomic="false" info="">
[13:49:48.711]          Message(0, "executing SWD power up");
[13:49:48.712]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[13:49:48.713]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[13:49:48.713]          WriteDP(SW_DP_ABORT, 0x0000001E);
[13:49:48.713]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[13:49:48.713]        </block>
[13:49:48.713]        // end if-block "(__protocol & 0xFFFF) == 2"
[13:49:48.714]      </control>
[13:49:48.714]      // end if-block "powered_down"
[13:49:48.714]    </control>
[13:49:48.714]    <block atomic="false" info="">
[13:49:48.714]      __var DEBUG_PORT_VAL    = 0;
[13:49:48.714]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[13:49:48.714]      __var ACCESS_POINT_VAL  = 0;
[13:49:48.714]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[13:49:48.714]      __ap = 1; 
[13:49:48.715]        // -> [__ap <= 0x00000001]
[13:49:48.715]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[13:49:48.716]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[13:49:48.716]      __ap = 4;
[13:49:48.716]        // -> [__ap <= 0x00000004]
[13:49:48.716]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:49:48.718]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[13:49:48.718]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[13:49:48.718]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:49:48.719]    </block>
[13:49:48.719]    <block atomic="false" info="">
[13:49:48.720]      __var nReset = 0x80;
[13:49:48.720]        // -> [nReset <= 0x00000080]
[13:49:48.720]      __var canReadPins = 0;
[13:49:48.720]        // -> [canReadPins <= 0x00000000]
[13:49:48.720]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[13:49:48.720]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[13:49:48.720]        // -> [canReadPins <= 0x00000001]
[13:49:48.721]    </block>
[13:49:48.721]    <control if="" while="1" timeout="200" info="">
[13:49:48.721]      // while "1"  (timeout="200")
[13:49:48.721]      // while-condition  =>  TRUE
[13:49:48.721]      // while "1"  (timeout="200")
[13:49:48.721]      // while-condition  =>  TRUE
[13:49:48.721]      // while "1"  (timeout="200")
[13:49:48.721]      // while-condition  =>  TRUE
[13:49:48.721]      // while "1"  (timeout="200")
[13:49:48.721]      // while-condition  =>  TRUE
[13:49:48.721]      // while "1"  (timeout="200")
[13:49:48.721]      // while-condition  =>  TRUE
[13:49:48.723]      // while "1"  (timeout="200")
[13:49:48.723]      // while-condition  =>  TRUE
[13:49:48.723]      // while "1"  (timeout="200")
[13:49:48.723]      // while-condition  =>  TRUE
[13:49:48.723]      // while "1"  (timeout="200")
[13:49:48.723]      // while-condition  =>  TRUE
[13:49:48.723]      // while "1"  (timeout="200")
[13:49:48.723]      // while-condition  =>  TRUE
[13:49:48.723]      // while "1"  (timeout="200")
[13:49:48.723]      // while-condition  =>  TRUE
[13:49:48.723]      // while "1"  (timeout="200")
[13:49:48.723]      // while-condition  =>  TRUE
[13:49:48.724]      // while "1"  (timeout="200")
[13:49:48.724]      // while  =>  TIMEOUT
[13:49:48.724]      // end while "1"
[13:49:48.724]    </control>
[13:49:48.724]    <control if="canReadPins" while="" timeout="0" info="">
[13:49:48.724]      // if-block "canReadPins"
[13:49:48.724]        // =>  TRUE
[13:49:48.724]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[13:49:48.724]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[13:49:48.725]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[13:49:48.725]        // while-condition  =>  FALSE
[13:49:48.725]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[13:49:48.725]      </control>
[13:49:48.725]      // end if-block "canReadPins"
[13:49:48.725]    </control>
[13:49:48.725]    <control if="!canReadPins" while="" timeout="0" info="">
[13:49:48.726]      // if-block "!canReadPins"
[13:49:48.726]        // =>  FALSE
[13:49:48.726]      // skip if-block "!canReadPins"
[13:49:48.726]    </control>
[13:49:48.726]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[13:49:48.726]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:49:48.726]        // =>  TRUE
[13:49:48.726]      <block atomic="false" info="">
[13:49:48.726]        WriteAP(0x00, 0x190008);
[13:49:48.726]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[13:49:48.727]        WriteAP(0xF0, 0x01);
[13:49:48.728]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[13:49:48.728]      </block>
[13:49:48.729]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[13:49:48.729]    </control>
[13:49:48.729]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[13:49:48.729]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:49:48.729]        // =>  FALSE
[13:49:48.729]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[13:49:48.729]    </control>
[13:49:48.729]    <block atomic="false" info="">
[13:49:48.729]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[13:49:48.731]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[13:49:48.731]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[13:49:48.731]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[13:49:48.732]      __ap = 0; //lets make sure we reset the access point selection
[13:49:48.732]        // -> [__ap <= 0x00000000]
[13:49:48.732]    </block>
[13:49:48.732]  </sequence>
[13:49:48.732]  
[13:49:48.738]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[13:49:48.738]  
[13:49:48.739]  <debugvars>
[13:49:48.739]    // Pre-defined
[13:49:48.739]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[13:49:48.739]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[13:49:48.739]    __dp=0x00000000
[13:49:48.739]    __ap=0x00000000
[13:49:48.739]    __traceout=0x00000000      (Trace Disabled)
[13:49:48.740]    __errorcontrol=0x00000000  (Skip Errors="False")
[13:49:48.740]    __FlashAddr=0x00000000
[13:49:48.740]    __FlashLen=0x00000000
[13:49:48.740]    __FlashArg=0x00000000
[13:49:48.740]    __FlashOp=0x00000000
[13:49:48.740]    __Result=0x00000000
[13:49:48.740]  </debugvars>
[13:49:48.740]  
[13:49:48.740]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[13:49:48.740]    <block atomic="false" info="">
[13:49:48.740]      __var deviceID = 0;
[13:49:48.741]        // -> [deviceID <= 0x00000000]
[13:49:48.742]      __var version = 0;
[13:49:48.742]        // -> [version <= 0x00000000]
[13:49:48.742]      __var partNum = 0;
[13:49:48.742]        // -> [partNum <= 0x00000000]
[13:49:48.742]      __var manuf = 0;
[13:49:48.742]        // -> [manuf <= 0x00000000]
[13:49:48.742]      __var isMSPM0G1X0X_G3X0X = 0;
[13:49:48.742]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[13:49:48.742]      __var isProduction = 0;
[13:49:48.742]        // -> [isProduction <= 0x00000000]
[13:49:48.742]      __var continueId = 0;
[13:49:48.742]        // -> [continueId <= 0x00000000]
[13:49:48.742]      deviceID =   Read32(0x41C40004);
[13:49:48.744]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[13:49:48.744]        // -> [deviceID <= 0x2BB8802F]
[13:49:48.744]      version = deviceID >> 28;
[13:49:48.744]        // -> [version <= 0x00000002]
[13:49:48.744]      partNum = (deviceID & 0x0FFFF000) >> 12;
[13:49:48.744]        // -> [partNum <= 0x0000BB88]
[13:49:48.744]      manuf = (deviceID & 0x00000FFE) >> 1;
[13:49:48.744]        // -> [manuf <= 0x00000017]
[13:49:48.745]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[13:49:48.745]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[13:49:48.745]      isProduction = (version > 0);
[13:49:48.745]        // -> [isProduction <= 0x00000001]
[13:49:48.745]    </block>
[13:49:48.745]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[13:49:48.745]      // if-block "!isMSPM0G1X0X_G3X0X"
[13:49:48.745]        // =>  FALSE
[13:49:48.745]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[13:49:48.745]    </control>
[13:49:48.746]    <control if="continueId == 4" while="" timeout="0" info="">
[13:49:48.746]      // if-block "continueId == 4"
[13:49:48.746]        // =>  FALSE
[13:49:48.746]      // skip if-block "continueId == 4"
[13:49:48.746]    </control>
[13:49:48.746]    <control if="!isProduction" while="" timeout="0" info="">
[13:49:48.746]      // if-block "!isProduction"
[13:49:48.746]        // =>  FALSE
[13:49:48.746]      // skip if-block "!isProduction"
[13:49:48.746]    </control>
[13:49:48.746]  </sequence>
[13:49:48.746]  
[14:16:09.199]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:16:09.199]  
[14:16:09.211]  <debugvars>
[14:16:09.211]    // Pre-defined
[14:16:09.211]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:16:09.211]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:16:09.211]    __dp=0x00000000
[14:16:09.211]    __ap=0x00000000
[14:16:09.212]    __traceout=0x00000000      (Trace Disabled)
[14:16:09.212]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:16:09.212]    __FlashAddr=0x00000000
[14:16:09.212]    __FlashLen=0x00000000
[14:16:09.212]    __FlashArg=0x00000000
[14:16:09.212]    __FlashOp=0x00000000
[14:16:09.212]    __Result=0x00000000
[14:16:09.212]  </debugvars>
[14:16:09.212]  
[14:16:09.212]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:16:09.212]    <block atomic="false" info="">
[14:16:09.212]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:16:09.212]        // -> [isSWJ <= 0x00000001]
[14:16:09.212]      __var hasDormant = __protocol & 0x00020000;
[14:16:09.212]        // -> [hasDormant <= 0x00000000]
[14:16:09.212]      __var protType   = __protocol & 0x0000FFFF;
[14:16:09.212]        // -> [protType <= 0x00000002]
[14:16:09.212]    </block>
[14:16:09.212]    <control if="protType == 1" while="" timeout="0" info="">
[14:16:09.212]      // if-block "protType == 1"
[14:16:09.212]        // =>  FALSE
[14:16:09.212]      // skip if-block "protType == 1"
[14:16:09.212]    </control>
[14:16:09.212]    <control if="protType == 2" while="" timeout="0" info="">
[14:16:09.212]      // if-block "protType == 2"
[14:16:09.212]        // =>  TRUE
[14:16:09.212]      <control if="isSWJ" while="" timeout="0" info="">
[14:16:09.212]        // if-block "isSWJ"
[14:16:09.212]          // =>  TRUE
[14:16:09.212]        <control if="hasDormant" while="" timeout="0" info="">
[14:16:09.212]          // if-block "hasDormant"
[14:16:09.212]            // =>  FALSE
[14:16:09.212]          // skip if-block "hasDormant"
[14:16:09.212]        </control>
[14:16:09.216]        <control if="!hasDormant" while="" timeout="0" info="">
[14:16:09.216]          // if-block "!hasDormant"
[14:16:09.216]            // =>  TRUE
[14:16:09.216]          <block atomic="false" info="">
[14:16:09.216]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:16:09.216]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:16:09.216]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:16:09.216]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:16:09.216]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:16:09.216]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:16:09.216]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:16:09.216]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:16:09.216]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:16:09.216]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:16:09.216]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:16:09.216]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:16:09.216]          </block>
[14:16:09.220]          // end if-block "!hasDormant"
[14:16:09.220]        </control>
[14:16:09.220]        // end if-block "isSWJ"
[14:16:09.220]      </control>
[14:16:09.220]      <control if="!isSWJ" while="" timeout="0" info="">
[14:16:09.220]        // if-block "!isSWJ"
[14:16:09.220]          // =>  FALSE
[14:16:09.220]        // skip if-block "!isSWJ"
[14:16:09.220]      </control>
[14:16:09.220]      <block atomic="false" info="">
[14:16:09.220]        ReadDP(0x0);
[14:16:09.220]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:16:09.220]      </block>
[14:16:09.220]      // end if-block "protType == 2"
[14:16:09.220]    </control>
[14:16:09.220]  </sequence>
[14:16:09.220]  
[14:16:09.220]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:16:09.220]  
[14:16:09.220]  <debugvars>
[14:16:09.220]    // Pre-defined
[14:16:09.220]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:16:09.220]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:16:09.220]    __dp=0x00000000
[14:16:09.220]    __ap=0x00000000
[14:16:09.220]    __traceout=0x00000000      (Trace Disabled)
[14:16:09.220]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:16:09.220]    __FlashAddr=0x00000000
[14:16:09.220]    __FlashLen=0x00000000
[14:16:09.220]    __FlashArg=0x00000000
[14:16:09.220]    __FlashOp=0x00000000
[14:16:09.220]    __Result=0x00000000
[14:16:09.220]  </debugvars>
[14:16:09.220]  
[14:16:09.224]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:16:09.224]    <block atomic="false" info="">
[14:16:09.224]      __var SW_DP_ABORT       = 0x0;
[14:16:09.224]        // -> [SW_DP_ABORT <= 0x00000000]
[14:16:09.224]      __var DP_CTRL_STAT      = 0x4;
[14:16:09.224]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:16:09.224]      __var DP_SELECT         = 0x8;
[14:16:09.224]        // -> [DP_SELECT <= 0x00000008]
[14:16:09.224]      __var powered_down      = 0;
[14:16:09.224]        // -> [powered_down <= 0x00000000]
[14:16:09.224]      WriteDP(DP_SELECT, 0x00000000);
[14:16:09.224]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:16:09.224]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:16:09.224]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:16:09.224]        // -> [powered_down <= 0x00000001]
[14:16:09.224]    </block>
[14:16:09.224]    <control if="powered_down" while="" timeout="0" info="">
[14:16:09.224]      // if-block "powered_down"
[14:16:09.224]        // =>  TRUE
[14:16:09.224]      <block atomic="false" info="">
[14:16:09.224]        Message(0, "Debug/System power-up request sent");
[14:16:09.230]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:16:09.230]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:16:09.230]      </block>
[14:16:09.230]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:16:09.232]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:16:09.232]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:16:09.232]        // while-condition  =>  FALSE
[14:16:09.232]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:16:09.232]      </control>
[14:16:09.232]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:16:09.232]        // if-block "(__protocol & 0xFFFF) == 1"
[14:16:09.232]          // =>  FALSE
[14:16:09.232]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:16:09.232]      </control>
[14:16:09.232]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:16:09.232]        // if-block "(__protocol & 0xFFFF) == 2"
[14:16:09.232]          // =>  TRUE
[14:16:09.232]        <block atomic="false" info="">
[14:16:09.232]          Message(0, "executing SWD power up");
[14:16:09.232]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:16:09.236]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:16:09.236]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:16:09.236]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:16:09.236]        </block>
[14:16:09.236]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:16:09.236]      </control>
[14:16:09.236]      // end if-block "powered_down"
[14:16:09.236]    </control>
[14:16:09.236]    <block atomic="false" info="">
[14:16:09.236]      __var DEBUG_PORT_VAL    = 0;
[14:16:09.236]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:16:09.236]      __var ACCESS_POINT_VAL  = 0;
[14:16:09.236]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:16:09.236]      __ap = 1; 
[14:16:09.236]        // -> [__ap <= 0x00000001]
[14:16:09.236]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:16:09.236]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:16:09.236]      __ap = 4;
[14:16:09.236]        // -> [__ap <= 0x00000004]
[14:16:09.240]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:16:09.241]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:16:09.241]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:16:09.241]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:16:09.242]    </block>
[14:16:09.242]    <block atomic="false" info="">
[14:16:09.242]      __var nReset = 0x80;
[14:16:09.242]        // -> [nReset <= 0x00000080]
[14:16:09.242]      __var canReadPins = 0;
[14:16:09.242]        // -> [canReadPins <= 0x00000000]
[14:16:09.242]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:16:09.244]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:16:09.244]        // -> [canReadPins <= 0x00000001]
[14:16:09.244]    </block>
[14:16:09.245]    <control if="" while="1" timeout="200" info="">
[14:16:09.245]      // while "1"  (timeout="200")
[14:16:09.245]      // while-condition  =>  TRUE
[14:16:09.245]      // while "1"  (timeout="200")
[14:16:09.245]      // while-condition  =>  TRUE
[14:16:09.245]      // while "1"  (timeout="200")
[14:16:09.245]      // while-condition  =>  TRUE
[14:16:09.245]      // while "1"  (timeout="200")
[14:16:09.245]      // while-condition  =>  TRUE
[14:16:09.245]      // while "1"  (timeout="200")
[14:16:09.245]      // while-condition  =>  TRUE
[14:16:09.246]      // while "1"  (timeout="200")
[14:16:09.246]      // while-condition  =>  TRUE
[14:16:09.246]      // while "1"  (timeout="200")
[14:16:09.246]      // while-condition  =>  TRUE
[14:16:09.246]      // while "1"  (timeout="200")
[14:16:09.246]      // while-condition  =>  TRUE
[14:16:09.246]      // while "1"  (timeout="200")
[14:16:09.246]      // while-condition  =>  TRUE
[14:16:09.246]      // while "1"  (timeout="200")
[14:16:09.246]      // while-condition  =>  TRUE
[14:16:09.246]      // while "1"  (timeout="200")
[14:16:09.246]      // while-condition  =>  TRUE
[14:16:09.246]      // while "1"  (timeout="200")
[14:16:09.246]      // while-condition  =>  TRUE
[14:16:09.246]      // while "1"  (timeout="200")
[14:16:09.246]      // while-condition  =>  TRUE
[14:16:09.246]      // while "1"  (timeout="200")
[14:16:09.246]      // while-condition  =>  TRUE
[14:16:09.246]      // while "1"  (timeout="200")
[14:16:09.246]      // while-condition  =>  TRUE
[14:16:09.246]      // while "1"  (timeout="200")
[14:16:09.246]      // while-condition  =>  TRUE
[14:16:09.248]      // while "1"  (timeout="200")
[14:16:09.248]      // while-condition  =>  TRUE
[14:16:09.248]      // while "1"  (timeout="200")
[14:16:09.248]      // while-condition  =>  TRUE
[14:16:09.248]      // while "1"  (timeout="200")
[14:16:09.248]      // while-condition  =>  TRUE
[14:16:09.248]      // while "1"  (timeout="200")
[14:16:09.248]      // while-condition  =>  TRUE
[14:16:09.248]      // while "1"  (timeout="200")
[14:16:09.248]      // while-condition  =>  TRUE
[14:16:09.248]      // while "1"  (timeout="200")
[14:16:09.248]      // while-condition  =>  TRUE
[14:16:09.248]      // while "1"  (timeout="200")
[14:16:09.248]      // while-condition  =>  TRUE
[14:16:09.248]      // while "1"  (timeout="200")
[14:16:09.248]      // while-condition  =>  TRUE
[14:16:09.250]      // while "1"  (timeout="200")
[14:16:09.250]      // while-condition  =>  TRUE
[14:16:09.250]      // while "1"  (timeout="200")
[14:16:09.250]      // while-condition  =>  TRUE
[14:16:09.250]      // while "1"  (timeout="200")
[14:16:09.250]      // while-condition  =>  TRUE
[14:16:09.250]      // while "1"  (timeout="200")
[14:16:09.250]      // while-condition  =>  TRUE
[14:16:09.250]      // while "1"  (timeout="200")
[14:16:09.250]      // while-condition  =>  TRUE
[14:16:09.251]      // while "1"  (timeout="200")
[14:16:09.251]      // while-condition  =>  TRUE
[14:16:09.251]      // while "1"  (timeout="200")
[14:16:09.251]      // while-condition  =>  TRUE
[14:16:09.251]      // while "1"  (timeout="200")
[14:16:09.251]      // while-condition  =>  TRUE
[14:16:09.251]      // while "1"  (timeout="200")
[14:16:09.251]      // while-condition  =>  TRUE
[14:16:09.251]      // while "1"  (timeout="200")
[14:16:09.251]      // while-condition  =>  TRUE
[14:16:09.252]      // while "1"  (timeout="200")
[14:16:09.252]      // while-condition  =>  TRUE
[14:16:09.252]      // while "1"  (timeout="200")
[14:16:09.252]      // while-condition  =>  TRUE
[14:16:09.252]      // while "1"  (timeout="200")
[14:16:09.252]      // while-condition  =>  TRUE
[14:16:09.252]      // while "1"  (timeout="200")
[14:16:09.253]      // while-condition  =>  TRUE
[14:16:09.253]      // while "1"  (timeout="200")
[14:16:09.253]      // while-condition  =>  TRUE
[14:16:09.253]      // while "1"  (timeout="200")
[14:16:09.253]      // while-condition  =>  TRUE
[14:16:09.253]      // while "1"  (timeout="200")
[14:16:09.253]      // while-condition  =>  TRUE
[14:16:09.254]      // while "1"  (timeout="200")
[14:16:09.254]      // while  =>  TIMEOUT
[14:16:09.254]      // end while "1"
[14:16:09.254]    </control>
[14:16:09.254]    <control if="canReadPins" while="" timeout="0" info="">
[14:16:09.254]      // if-block "canReadPins"
[14:16:09.254]        // =>  TRUE
[14:16:09.254]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:16:09.254]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:16:09.256]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:16:09.256]        // while-condition  =>  FALSE
[14:16:09.256]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:16:09.256]      </control>
[14:16:09.256]      // end if-block "canReadPins"
[14:16:09.256]    </control>
[14:16:09.256]    <control if="!canReadPins" while="" timeout="0" info="">
[14:16:09.256]      // if-block "!canReadPins"
[14:16:09.256]        // =>  FALSE
[14:16:09.256]      // skip if-block "!canReadPins"
[14:16:09.256]    </control>
[14:16:09.257]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:16:09.257]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:16:09.257]        // =>  TRUE
[14:16:09.257]      <block atomic="false" info="">
[14:16:09.257]        WriteAP(0x00, 0x190008);
[14:16:09.258]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:16:09.258]        WriteAP(0xF0, 0x01);
[14:16:09.259]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:16:09.259]      </block>
[14:16:09.259]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:16:09.259]    </control>
[14:16:09.259]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:16:09.260]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:16:09.260]        // =>  FALSE
[14:16:09.260]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:16:09.260]    </control>
[14:16:09.260]    <block atomic="false" info="">
[14:16:09.260]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:16:09.262]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:16:09.262]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:16:09.262]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:16:09.263]      __ap = 0; //lets make sure we reset the access point selection
[14:16:09.263]        // -> [__ap <= 0x00000000]
[14:16:09.263]    </block>
[14:16:09.263]  </sequence>
[14:16:09.263]  
[14:16:09.270]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:16:09.270]  
[14:16:09.270]  <debugvars>
[14:16:09.270]    // Pre-defined
[14:16:09.270]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:16:09.271]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:16:09.271]    __dp=0x00000000
[14:16:09.271]    __ap=0x00000000
[14:16:09.271]    __traceout=0x00000000      (Trace Disabled)
[14:16:09.271]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:16:09.271]    __FlashAddr=0x00000000
[14:16:09.271]    __FlashLen=0x00000000
[14:16:09.271]    __FlashArg=0x00000000
[14:16:09.271]    __FlashOp=0x00000000
[14:16:09.271]    __Result=0x00000000
[14:16:09.271]  </debugvars>
[14:16:09.271]  
[14:16:09.273]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:16:09.273]    <block atomic="false" info="">
[14:16:09.273]      __var deviceID = 0;
[14:16:09.273]        // -> [deviceID <= 0x00000000]
[14:16:09.273]      __var version = 0;
[14:16:09.273]        // -> [version <= 0x00000000]
[14:16:09.273]      __var partNum = 0;
[14:16:09.273]        // -> [partNum <= 0x00000000]
[14:16:09.273]      __var manuf = 0;
[14:16:09.273]        // -> [manuf <= 0x00000000]
[14:16:09.273]      __var isMSPM0G1X0X_G3X0X = 0;
[14:16:09.273]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:16:09.273]      __var isProduction = 0;
[14:16:09.274]        // -> [isProduction <= 0x00000000]
[14:16:09.274]      __var continueId = 0;
[14:16:09.274]        // -> [continueId <= 0x00000000]
[14:16:09.274]      deviceID =   Read32(0x41C40004);
[14:16:09.274]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:16:09.274]        // -> [deviceID <= 0x2BB8802F]
[14:16:09.276]      version = deviceID >> 28;
[14:16:09.276]        // -> [version <= 0x00000002]
[14:16:09.276]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:16:09.276]        // -> [partNum <= 0x0000BB88]
[14:16:09.276]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:16:09.276]        // -> [manuf <= 0x00000017]
[14:16:09.276]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:16:09.276]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:16:09.276]      isProduction = (version > 0);
[14:16:09.276]        // -> [isProduction <= 0x00000001]
[14:16:09.277]    </block>
[14:16:09.277]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:16:09.277]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:16:09.277]        // =>  FALSE
[14:16:09.277]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:16:09.277]    </control>
[14:16:09.277]    <control if="continueId == 4" while="" timeout="0" info="">
[14:16:09.277]      // if-block "continueId == 4"
[14:16:09.277]        // =>  FALSE
[14:16:09.279]      // skip if-block "continueId == 4"
[14:16:09.279]    </control>
[14:16:09.279]    <control if="!isProduction" while="" timeout="0" info="">
[14:16:09.279]      // if-block "!isProduction"
[14:16:09.279]        // =>  FALSE
[14:16:09.279]      // skip if-block "!isProduction"
[14:16:09.279]    </control>
[14:16:09.279]  </sequence>
[14:16:09.279]  
[14:21:31.455]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:21:31.455]  
[14:21:31.464]  <debugvars>
[14:21:31.464]    // Pre-defined
[14:21:31.464]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:21:31.464]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:21:31.464]    __dp=0x00000000
[14:21:31.464]    __ap=0x00000000
[14:21:31.464]    __traceout=0x00000000      (Trace Disabled)
[14:21:31.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:21:31.464]    __FlashAddr=0x00000000
[14:21:31.465]    __FlashLen=0x00000000
[14:21:31.465]    __FlashArg=0x00000000
[14:21:31.465]    __FlashOp=0x00000000
[14:21:31.465]    __Result=0x00000000
[14:21:31.465]  </debugvars>
[14:21:31.465]  
[14:21:31.465]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:21:31.465]    <block atomic="false" info="">
[14:21:31.465]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:21:31.465]        // -> [isSWJ <= 0x00000001]
[14:21:31.465]      __var hasDormant = __protocol & 0x00020000;
[14:21:31.465]        // -> [hasDormant <= 0x00000000]
[14:21:31.465]      __var protType   = __protocol & 0x0000FFFF;
[14:21:31.465]        // -> [protType <= 0x00000002]
[14:21:31.465]    </block>
[14:21:31.465]    <control if="protType == 1" while="" timeout="0" info="">
[14:21:31.465]      // if-block "protType == 1"
[14:21:31.467]        // =>  FALSE
[14:21:31.467]      // skip if-block "protType == 1"
[14:21:31.467]    </control>
[14:21:31.467]    <control if="protType == 2" while="" timeout="0" info="">
[14:21:31.467]      // if-block "protType == 2"
[14:21:31.467]        // =>  TRUE
[14:21:31.467]      <control if="isSWJ" while="" timeout="0" info="">
[14:21:31.467]        // if-block "isSWJ"
[14:21:31.467]          // =>  TRUE
[14:21:31.467]        <control if="hasDormant" while="" timeout="0" info="">
[14:21:31.467]          // if-block "hasDormant"
[14:21:31.467]            // =>  FALSE
[14:21:31.467]          // skip if-block "hasDormant"
[14:21:31.467]        </control>
[14:21:31.467]        <control if="!hasDormant" while="" timeout="0" info="">
[14:21:31.467]          // if-block "!hasDormant"
[14:21:31.467]            // =>  TRUE
[14:21:31.469]          <block atomic="false" info="">
[14:21:31.469]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:21:31.469]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:21:31.469]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:21:31.471]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:21:31.471]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:21:31.471]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:21:31.471]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:21:31.472]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:21:31.472]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:21:31.472]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:21:31.472]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:21:31.472]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:21:31.472]          </block>
[14:21:31.472]          // end if-block "!hasDormant"
[14:21:31.472]        </control>
[14:21:31.472]        // end if-block "isSWJ"
[14:21:31.472]      </control>
[14:21:31.472]      <control if="!isSWJ" while="" timeout="0" info="">
[14:21:31.472]        // if-block "!isSWJ"
[14:21:31.472]          // =>  FALSE
[14:21:31.472]        // skip if-block "!isSWJ"
[14:21:31.472]      </control>
[14:21:31.472]      <block atomic="false" info="">
[14:21:31.472]        ReadDP(0x0);
[14:21:31.472]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:21:31.472]      </block>
[14:21:31.472]      // end if-block "protType == 2"
[14:21:31.472]    </control>
[14:21:31.472]  </sequence>
[14:21:31.472]  
[14:21:31.476]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:21:31.476]  
[14:21:31.476]  <debugvars>
[14:21:31.476]    // Pre-defined
[14:21:31.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:21:31.476]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:21:31.476]    __dp=0x00000000
[14:21:31.476]    __ap=0x00000000
[14:21:31.476]    __traceout=0x00000000      (Trace Disabled)
[14:21:31.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:21:31.476]    __FlashAddr=0x00000000
[14:21:31.476]    __FlashLen=0x00000000
[14:21:31.476]    __FlashArg=0x00000000
[14:21:31.476]    __FlashOp=0x00000000
[14:21:31.476]    __Result=0x00000000
[14:21:31.476]  </debugvars>
[14:21:31.476]  
[14:21:31.476]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:21:31.476]    <block atomic="false" info="">
[14:21:31.476]      __var SW_DP_ABORT       = 0x0;
[14:21:31.479]        // -> [SW_DP_ABORT <= 0x00000000]
[14:21:31.479]      __var DP_CTRL_STAT      = 0x4;
[14:21:31.479]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:21:31.479]      __var DP_SELECT         = 0x8;
[14:21:31.479]        // -> [DP_SELECT <= 0x00000008]
[14:21:31.479]      __var powered_down      = 0;
[14:21:31.479]        // -> [powered_down <= 0x00000000]
[14:21:31.479]      WriteDP(DP_SELECT, 0x00000000);
[14:21:31.480]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:21:31.480]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:21:31.480]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:21:31.480]        // -> [powered_down <= 0x00000001]
[14:21:31.480]    </block>
[14:21:31.480]    <control if="powered_down" while="" timeout="0" info="">
[14:21:31.480]      // if-block "powered_down"
[14:21:31.480]        // =>  TRUE
[14:21:31.480]      <block atomic="false" info="">
[14:21:31.480]        Message(0, "Debug/System power-up request sent");
[14:21:31.480]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:21:31.484]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:21:31.484]      </block>
[14:21:31.484]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:21:31.484]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:21:31.485]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:21:31.485]        // while-condition  =>  FALSE
[14:21:31.485]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:21:31.485]      </control>
[14:21:31.485]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:21:31.485]        // if-block "(__protocol & 0xFFFF) == 1"
[14:21:31.485]          // =>  FALSE
[14:21:31.485]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:21:31.485]      </control>
[14:21:31.485]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:21:31.485]        // if-block "(__protocol & 0xFFFF) == 2"
[14:21:31.485]          // =>  TRUE
[14:21:31.485]        <block atomic="false" info="">
[14:21:31.485]          Message(0, "executing SWD power up");
[14:21:31.488]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:21:31.488]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:21:31.488]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:21:31.488]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:21:31.488]        </block>
[14:21:31.488]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:21:31.488]      </control>
[14:21:31.488]      // end if-block "powered_down"
[14:21:31.488]    </control>
[14:21:31.488]    <block atomic="false" info="">
[14:21:31.488]      __var DEBUG_PORT_VAL    = 0;
[14:21:31.488]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:21:31.488]      __var ACCESS_POINT_VAL  = 0;
[14:21:31.488]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:21:31.488]      __ap = 1; 
[14:21:31.488]        // -> [__ap <= 0x00000001]
[14:21:31.488]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:21:31.492]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:21:31.492]      __ap = 4;
[14:21:31.492]        // -> [__ap <= 0x00000004]
[14:21:31.492]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:21:31.492]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:21:31.492]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:21:31.492]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:21:31.496]    </block>
[14:21:31.496]    <block atomic="false" info="">
[14:21:31.496]      __var nReset = 0x80;
[14:21:31.496]        // -> [nReset <= 0x00000080]
[14:21:31.496]      __var canReadPins = 0;
[14:21:31.496]        // -> [canReadPins <= 0x00000000]
[14:21:31.496]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:21:31.496]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:21:31.496]        // -> [canReadPins <= 0x00000001]
[14:21:31.496]    </block>
[14:21:31.496]    <control if="" while="1" timeout="200" info="">
[14:21:31.496]      // while "1"  (timeout="200")
[14:21:31.496]      // while-condition  =>  TRUE
[14:21:31.498]      // while "1"  (timeout="200")
[14:21:31.498]      // while-condition  =>  TRUE
[14:21:31.498]      // while "1"  (timeout="200")
[14:21:31.498]      // while-condition  =>  TRUE
[14:21:31.498]      // while "1"  (timeout="200")
[14:21:31.498]      // while-condition  =>  TRUE
[14:21:31.498]      // while "1"  (timeout="200")
[14:21:31.498]      // while-condition  =>  TRUE
[14:21:31.498]      // while "1"  (timeout="200")
[14:21:31.498]      // while-condition  =>  TRUE
[14:21:31.498]      // while "1"  (timeout="200")
[14:21:31.498]      // while-condition  =>  TRUE
[14:21:31.498]      // while "1"  (timeout="200")
[14:21:31.498]      // while-condition  =>  TRUE
[14:21:31.498]      // while "1"  (timeout="200")
[14:21:31.498]      // while-condition  =>  TRUE
[14:21:31.498]      // while "1"  (timeout="200")
[14:21:31.498]      // while-condition  =>  TRUE
[14:21:31.498]      // while "1"  (timeout="200")
[14:21:31.498]      // while-condition  =>  TRUE
[14:21:31.500]      // while "1"  (timeout="200")
[14:21:31.500]      // while-condition  =>  TRUE
[14:21:31.500]      // while "1"  (timeout="200")
[14:21:31.500]      // while-condition  =>  TRUE
[14:21:31.500]      // while "1"  (timeout="200")
[14:21:31.500]      // while-condition  =>  TRUE
[14:21:31.500]      // while "1"  (timeout="200")
[14:21:31.500]      // while-condition  =>  TRUE
[14:21:31.500]      // while "1"  (timeout="200")
[14:21:31.500]      // while-condition  =>  TRUE
[14:21:31.500]      // while "1"  (timeout="200")
[14:21:31.500]      // while-condition  =>  TRUE
[14:21:31.500]      // while "1"  (timeout="200")
[14:21:31.500]      // while-condition  =>  TRUE
[14:21:31.500]      // while "1"  (timeout="200")
[14:21:31.500]      // while-condition  =>  TRUE
[14:21:31.500]      // while "1"  (timeout="200")
[14:21:31.500]      // while-condition  =>  TRUE
[14:21:31.500]      // while "1"  (timeout="200")
[14:21:31.502]      // while-condition  =>  TRUE
[14:21:31.502]      // while "1"  (timeout="200")
[14:21:31.502]      // while-condition  =>  TRUE
[14:21:31.502]      // while "1"  (timeout="200")
[14:21:31.502]      // while-condition  =>  TRUE
[14:21:31.502]      // while "1"  (timeout="200")
[14:21:31.502]      // while-condition  =>  TRUE
[14:21:31.502]      // while "1"  (timeout="200")
[14:21:31.502]      // while-condition  =>  TRUE
[14:21:31.502]      // while "1"  (timeout="200")
[14:21:31.502]      // while-condition  =>  TRUE
[14:21:31.502]      // while "1"  (timeout="200")
[14:21:31.502]      // while-condition  =>  TRUE
[14:21:31.502]      // while "1"  (timeout="200")
[14:21:31.504]      // while-condition  =>  TRUE
[14:21:31.504]      // while "1"  (timeout="200")
[14:21:31.504]      // while-condition  =>  TRUE
[14:21:31.504]      // while "1"  (timeout="200")
[14:21:31.504]      // while-condition  =>  TRUE
[14:21:31.504]      // while "1"  (timeout="200")
[14:21:31.504]      // while-condition  =>  TRUE
[14:21:31.505]      // while "1"  (timeout="200")
[14:21:31.505]      // while  =>  TIMEOUT
[14:21:31.505]      // end while "1"
[14:21:31.505]    </control>
[14:21:31.505]    <control if="canReadPins" while="" timeout="0" info="">
[14:21:31.505]      // if-block "canReadPins"
[14:21:31.505]        // =>  TRUE
[14:21:31.505]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:21:31.505]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:21:31.505]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:21:31.505]        // while-condition  =>  FALSE
[14:21:31.505]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:21:31.505]      </control>
[14:21:31.505]      // end if-block "canReadPins"
[14:21:31.505]    </control>
[14:21:31.505]    <control if="!canReadPins" while="" timeout="0" info="">
[14:21:31.505]      // if-block "!canReadPins"
[14:21:31.505]        // =>  FALSE
[14:21:31.505]      // skip if-block "!canReadPins"
[14:21:31.505]    </control>
[14:21:31.505]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:21:31.505]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:21:31.508]        // =>  TRUE
[14:21:31.508]      <block atomic="false" info="">
[14:21:31.508]        WriteAP(0x00, 0x190008);
[14:21:31.508]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:21:31.508]        WriteAP(0xF0, 0x01);
[14:21:31.510]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:21:31.510]      </block>
[14:21:31.510]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:21:31.510]    </control>
[14:21:31.510]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:21:31.510]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:21:31.510]        // =>  FALSE
[14:21:31.510]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:21:31.510]    </control>
[14:21:31.510]    <block atomic="false" info="">
[14:21:31.510]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:21:31.510]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:21:31.510]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:21:31.510]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:21:31.513]      __ap = 0; //lets make sure we reset the access point selection
[14:21:31.513]        // -> [__ap <= 0x00000000]
[14:21:31.513]    </block>
[14:21:31.513]  </sequence>
[14:21:31.513]  
[14:21:31.520]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:21:31.520]  
[14:21:31.520]  <debugvars>
[14:21:31.520]    // Pre-defined
[14:21:31.520]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:21:31.520]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:21:31.520]    __dp=0x00000000
[14:21:31.520]    __ap=0x00000000
[14:21:31.520]    __traceout=0x00000000      (Trace Disabled)
[14:21:31.520]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:21:31.522]    __FlashAddr=0x00000000
[14:21:31.522]    __FlashLen=0x00000000
[14:21:31.522]    __FlashArg=0x00000000
[14:21:31.522]    __FlashOp=0x00000000
[14:21:31.522]    __Result=0x00000000
[14:21:31.522]  </debugvars>
[14:21:31.522]  
[14:21:31.522]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:21:31.522]    <block atomic="false" info="">
[14:21:31.522]      __var deviceID = 0;
[14:21:31.522]        // -> [deviceID <= 0x00000000]
[14:21:31.522]      __var version = 0;
[14:21:31.522]        // -> [version <= 0x00000000]
[14:21:31.522]      __var partNum = 0;
[14:21:31.522]        // -> [partNum <= 0x00000000]
[14:21:31.522]      __var manuf = 0;
[14:21:31.522]        // -> [manuf <= 0x00000000]
[14:21:31.522]      __var isMSPM0G1X0X_G3X0X = 0;
[14:21:31.522]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:21:31.522]      __var isProduction = 0;
[14:21:31.522]        // -> [isProduction <= 0x00000000]
[14:21:31.522]      __var continueId = 0;
[14:21:31.522]        // -> [continueId <= 0x00000000]
[14:21:31.522]      deviceID =   Read32(0x41C40004);
[14:21:31.526]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:21:31.526]        // -> [deviceID <= 0x2BB8802F]
[14:21:31.526]      version = deviceID >> 28;
[14:21:31.526]        // -> [version <= 0x00000002]
[14:21:31.526]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:21:31.526]        // -> [partNum <= 0x0000BB88]
[14:21:31.526]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:21:31.526]        // -> [manuf <= 0x00000017]
[14:21:31.526]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:21:31.526]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:21:31.526]      isProduction = (version > 0);
[14:21:31.526]        // -> [isProduction <= 0x00000001]
[14:21:31.526]    </block>
[14:21:31.526]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:21:31.526]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:21:31.526]        // =>  FALSE
[14:21:31.526]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:21:31.526]    </control>
[14:21:31.526]    <control if="continueId == 4" while="" timeout="0" info="">
[14:21:31.526]      // if-block "continueId == 4"
[14:21:31.526]        // =>  FALSE
[14:21:31.526]      // skip if-block "continueId == 4"
[14:21:31.526]    </control>
[14:21:31.526]    <control if="!isProduction" while="" timeout="0" info="">
[14:21:31.526]      // if-block "!isProduction"
[14:21:31.526]        // =>  FALSE
[14:21:31.526]      // skip if-block "!isProduction"
[14:21:31.526]    </control>
[14:21:31.526]  </sequence>
[14:21:31.526]  
[14:23:08.218]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:23:08.218]  
[14:23:08.230]  <debugvars>
[14:23:08.230]    // Pre-defined
[14:23:08.230]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:23:08.230]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:23:08.230]    __dp=0x00000000
[14:23:08.230]    __ap=0x00000000
[14:23:08.230]    __traceout=0x00000000      (Trace Disabled)
[14:23:08.230]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:23:08.231]    __FlashAddr=0x00000000
[14:23:08.231]    __FlashLen=0x00000000
[14:23:08.231]    __FlashArg=0x00000000
[14:23:08.231]    __FlashOp=0x00000000
[14:23:08.231]    __Result=0x00000000
[14:23:08.231]  </debugvars>
[14:23:08.231]  
[14:23:08.231]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:23:08.231]    <block atomic="false" info="">
[14:23:08.231]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:23:08.231]        // -> [isSWJ <= 0x00000001]
[14:23:08.231]      __var hasDormant = __protocol & 0x00020000;
[14:23:08.231]        // -> [hasDormant <= 0x00000000]
[14:23:08.231]      __var protType   = __protocol & 0x0000FFFF;
[14:23:08.231]        // -> [protType <= 0x00000002]
[14:23:08.231]    </block>
[14:23:08.231]    <control if="protType == 1" while="" timeout="0" info="">
[14:23:08.231]      // if-block "protType == 1"
[14:23:08.231]        // =>  FALSE
[14:23:08.231]      // skip if-block "protType == 1"
[14:23:08.231]    </control>
[14:23:08.231]    <control if="protType == 2" while="" timeout="0" info="">
[14:23:08.231]      // if-block "protType == 2"
[14:23:08.231]        // =>  TRUE
[14:23:08.231]      <control if="isSWJ" while="" timeout="0" info="">
[14:23:08.231]        // if-block "isSWJ"
[14:23:08.231]          // =>  TRUE
[14:23:08.231]        <control if="hasDormant" while="" timeout="0" info="">
[14:23:08.234]          // if-block "hasDormant"
[14:23:08.234]            // =>  FALSE
[14:23:08.234]          // skip if-block "hasDormant"
[14:23:08.234]        </control>
[14:23:08.234]        <control if="!hasDormant" while="" timeout="0" info="">
[14:23:08.234]          // if-block "!hasDormant"
[14:23:08.234]            // =>  TRUE
[14:23:08.234]          <block atomic="false" info="">
[14:23:08.234]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:23:08.234]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:23:08.234]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:23:08.234]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:23:08.234]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:23:08.234]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:23:08.234]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:23:08.234]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:23:08.234]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:23:08.234]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:23:08.234]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:23:08.234]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:23:08.234]          </block>
[14:23:08.234]          // end if-block "!hasDormant"
[14:23:08.234]        </control>
[14:23:08.238]        // end if-block "isSWJ"
[14:23:08.238]      </control>
[14:23:08.238]      <control if="!isSWJ" while="" timeout="0" info="">
[14:23:08.238]        // if-block "!isSWJ"
[14:23:08.238]          // =>  FALSE
[14:23:08.238]        // skip if-block "!isSWJ"
[14:23:08.238]      </control>
[14:23:08.238]      <block atomic="false" info="">
[14:23:08.238]        ReadDP(0x0);
[14:23:08.238]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:23:08.238]      </block>
[14:23:08.238]      // end if-block "protType == 2"
[14:23:08.238]    </control>
[14:23:08.238]  </sequence>
[14:23:08.238]  
[14:23:08.238]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:23:08.238]  
[14:23:08.238]  <debugvars>
[14:23:08.238]    // Pre-defined
[14:23:08.238]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:23:08.238]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:23:08.238]    __dp=0x00000000
[14:23:08.238]    __ap=0x00000000
[14:23:08.238]    __traceout=0x00000000      (Trace Disabled)
[14:23:08.238]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:23:08.238]    __FlashAddr=0x00000000
[14:23:08.238]    __FlashLen=0x00000000
[14:23:08.238]    __FlashArg=0x00000000
[14:23:08.242]    __FlashOp=0x00000000
[14:23:08.242]    __Result=0x00000000
[14:23:08.242]  </debugvars>
[14:23:08.242]  
[14:23:08.242]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:23:08.242]    <block atomic="false" info="">
[14:23:08.242]      __var SW_DP_ABORT       = 0x0;
[14:23:08.242]        // -> [SW_DP_ABORT <= 0x00000000]
[14:23:08.242]      __var DP_CTRL_STAT      = 0x4;
[14:23:08.242]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:23:08.242]      __var DP_SELECT         = 0x8;
[14:23:08.242]        // -> [DP_SELECT <= 0x00000008]
[14:23:08.242]      __var powered_down      = 0;
[14:23:08.242]        // -> [powered_down <= 0x00000000]
[14:23:08.242]      WriteDP(DP_SELECT, 0x00000000);
[14:23:08.242]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:23:08.242]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:23:08.242]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:23:08.242]        // -> [powered_down <= 0x00000001]
[14:23:08.242]    </block>
[14:23:08.242]    <control if="powered_down" while="" timeout="0" info="">
[14:23:08.242]      // if-block "powered_down"
[14:23:08.242]        // =>  TRUE
[14:23:08.242]      <block atomic="false" info="">
[14:23:08.242]        Message(0, "Debug/System power-up request sent");
[14:23:08.246]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:23:08.246]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:23:08.246]      </block>
[14:23:08.246]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:23:08.246]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:23:08.246]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:23:08.246]        // while-condition  =>  FALSE
[14:23:08.246]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:23:08.246]      </control>
[14:23:08.246]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:23:08.246]        // if-block "(__protocol & 0xFFFF) == 1"
[14:23:08.246]          // =>  FALSE
[14:23:08.246]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:23:08.246]      </control>
[14:23:08.246]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:23:08.246]        // if-block "(__protocol & 0xFFFF) == 2"
[14:23:08.250]          // =>  TRUE
[14:23:08.250]        <block atomic="false" info="">
[14:23:08.250]          Message(0, "executing SWD power up");
[14:23:08.250]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:23:08.250]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:23:08.250]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:23:08.250]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:23:08.250]        </block>
[14:23:08.250]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:23:08.250]      </control>
[14:23:08.250]      // end if-block "powered_down"
[14:23:08.250]    </control>
[14:23:08.250]    <block atomic="false" info="">
[14:23:08.254]      __var DEBUG_PORT_VAL    = 0;
[14:23:08.254]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:23:08.254]      __var ACCESS_POINT_VAL  = 0;
[14:23:08.254]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:23:08.254]      __ap = 1; 
[14:23:08.254]        // -> [__ap <= 0x00000001]
[14:23:08.254]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:23:08.254]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:23:08.254]      __ap = 4;
[14:23:08.254]        // -> [__ap <= 0x00000004]
[14:23:08.254]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:23:08.254]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:23:08.254]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:23:08.254]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:23:08.259]    </block>
[14:23:08.259]    <block atomic="false" info="">
[14:23:08.259]      __var nReset = 0x80;
[14:23:08.259]        // -> [nReset <= 0x00000080]
[14:23:08.259]      __var canReadPins = 0;
[14:23:08.259]        // -> [canReadPins <= 0x00000000]
[14:23:08.259]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:23:08.259]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:23:08.259]        // -> [canReadPins <= 0x00000001]
[14:23:08.259]    </block>
[14:23:08.259]    <control if="" while="1" timeout="200" info="">
[14:23:08.259]      // while "1"  (timeout="200")
[14:23:08.259]      // while-condition  =>  TRUE
[14:23:08.259]      // while "1"  (timeout="200")
[14:23:08.259]      // while-condition  =>  TRUE
[14:23:08.259]      // while "1"  (timeout="200")
[14:23:08.259]      // while-condition  =>  TRUE
[14:23:08.259]      // while "1"  (timeout="200")
[14:23:08.259]      // while-condition  =>  TRUE
[14:23:08.259]      // while "1"  (timeout="200")
[14:23:08.259]      // while-condition  =>  TRUE
[14:23:08.262]      // while "1"  (timeout="200")
[14:23:08.262]      // while-condition  =>  TRUE
[14:23:08.262]      // while "1"  (timeout="200")
[14:23:08.262]      // while-condition  =>  TRUE
[14:23:08.262]      // while "1"  (timeout="200")
[14:23:08.262]      // while-condition  =>  TRUE
[14:23:08.262]      // while "1"  (timeout="200")
[14:23:08.262]      // while-condition  =>  TRUE
[14:23:08.262]      // while "1"  (timeout="200")
[14:23:08.262]      // while-condition  =>  TRUE
[14:23:08.264]      // while "1"  (timeout="200")
[14:23:08.264]      // while-condition  =>  TRUE
[14:23:08.264]      // while "1"  (timeout="200")
[14:23:08.264]      // while-condition  =>  TRUE
[14:23:08.264]      // while "1"  (timeout="200")
[14:23:08.264]      // while-condition  =>  TRUE
[14:23:08.265]      // while "1"  (timeout="200")
[14:23:08.265]      // while-condition  =>  TRUE
[14:23:08.265]      // while "1"  (timeout="200")
[14:23:08.265]      // while-condition  =>  TRUE
[14:23:08.265]      // while "1"  (timeout="200")
[14:23:08.265]      // while-condition  =>  TRUE
[14:23:08.265]      // while "1"  (timeout="200")
[14:23:08.265]      // while-condition  =>  TRUE
[14:23:08.265]      // while "1"  (timeout="200")
[14:23:08.265]      // while-condition  =>  TRUE
[14:23:08.265]      // while "1"  (timeout="200")
[14:23:08.265]      // while-condition  =>  TRUE
[14:23:08.265]      // while "1"  (timeout="200")
[14:23:08.265]      // while-condition  =>  TRUE
[14:23:08.265]      // while "1"  (timeout="200")
[14:23:08.265]      // while-condition  =>  TRUE
[14:23:08.265]      // while "1"  (timeout="200")
[14:23:08.265]      // while-condition  =>  TRUE
[14:23:08.265]      // while "1"  (timeout="200")
[14:23:08.265]      // while-condition  =>  TRUE
[14:23:08.265]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.267]      // while "1"  (timeout="200")
[14:23:08.267]      // while-condition  =>  TRUE
[14:23:08.271]      // while "1"  (timeout="200")
[14:23:08.271]      // while  =>  TIMEOUT
[14:23:08.271]      // end while "1"
[14:23:08.271]    </control>
[14:23:08.271]    <control if="canReadPins" while="" timeout="0" info="">
[14:23:08.271]      // if-block "canReadPins"
[14:23:08.271]        // =>  TRUE
[14:23:08.271]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:23:08.271]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:23:08.271]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:23:08.271]        // while-condition  =>  FALSE
[14:23:08.271]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:23:08.271]      </control>
[14:23:08.271]      // end if-block "canReadPins"
[14:23:08.271]    </control>
[14:23:08.271]    <control if="!canReadPins" while="" timeout="0" info="">
[14:23:08.271]      // if-block "!canReadPins"
[14:23:08.271]        // =>  FALSE
[14:23:08.271]      // skip if-block "!canReadPins"
[14:23:08.271]    </control>
[14:23:08.271]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:23:08.271]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:23:08.271]        // =>  TRUE
[14:23:08.271]      <block atomic="false" info="">
[14:23:08.271]        WriteAP(0x00, 0x190008);
[14:23:08.271]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:23:08.271]        WriteAP(0xF0, 0x01);
[14:23:08.275]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:23:08.275]      </block>
[14:23:08.275]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:23:08.275]    </control>
[14:23:08.275]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:23:08.275]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:23:08.275]        // =>  FALSE
[14:23:08.275]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:23:08.275]    </control>
[14:23:08.275]    <block atomic="false" info="">
[14:23:08.275]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:23:08.275]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:23:08.275]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:23:08.275]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:23:08.279]      __ap = 0; //lets make sure we reset the access point selection
[14:23:08.279]        // -> [__ap <= 0x00000000]
[14:23:08.279]    </block>
[14:23:08.279]  </sequence>
[14:23:08.279]  
[14:23:08.287]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:23:08.287]  
[14:23:08.287]  <debugvars>
[14:23:08.287]    // Pre-defined
[14:23:08.287]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:23:08.288]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:23:08.288]    __dp=0x00000000
[14:23:08.288]    __ap=0x00000000
[14:23:08.288]    __traceout=0x00000000      (Trace Disabled)
[14:23:08.288]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:23:08.288]    __FlashAddr=0x00000000
[14:23:08.288]    __FlashLen=0x00000000
[14:23:08.288]    __FlashArg=0x00000000
[14:23:08.288]    __FlashOp=0x00000000
[14:23:08.288]    __Result=0x00000000
[14:23:08.288]  </debugvars>
[14:23:08.288]  
[14:23:08.288]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:23:08.288]    <block atomic="false" info="">
[14:23:08.288]      __var deviceID = 0;
[14:23:08.288]        // -> [deviceID <= 0x00000000]
[14:23:08.288]      __var version = 0;
[14:23:08.288]        // -> [version <= 0x00000000]
[14:23:08.288]      __var partNum = 0;
[14:23:08.288]        // -> [partNum <= 0x00000000]
[14:23:08.288]      __var manuf = 0;
[14:23:08.288]        // -> [manuf <= 0x00000000]
[14:23:08.291]      __var isMSPM0G1X0X_G3X0X = 0;
[14:23:08.291]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:23:08.291]      __var isProduction = 0;
[14:23:08.291]        // -> [isProduction <= 0x00000000]
[14:23:08.291]      __var continueId = 0;
[14:23:08.291]        // -> [continueId <= 0x00000000]
[14:23:08.291]      deviceID =   Read32(0x41C40004);
[14:23:08.291]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:23:08.291]        // -> [deviceID <= 0x2BB8802F]
[14:23:08.291]      version = deviceID >> 28;
[14:23:08.294]        // -> [version <= 0x00000002]
[14:23:08.294]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:23:08.294]        // -> [partNum <= 0x0000BB88]
[14:23:08.294]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:23:08.294]        // -> [manuf <= 0x00000017]
[14:23:08.294]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:23:08.294]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:23:08.294]      isProduction = (version > 0);
[14:23:08.294]        // -> [isProduction <= 0x00000001]
[14:23:08.294]    </block>
[14:23:08.294]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:23:08.294]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:23:08.294]        // =>  FALSE
[14:23:08.295]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:23:08.295]    </control>
[14:23:08.295]    <control if="continueId == 4" while="" timeout="0" info="">
[14:23:08.295]      // if-block "continueId == 4"
[14:23:08.295]        // =>  FALSE
[14:23:08.295]      // skip if-block "continueId == 4"
[14:23:08.295]    </control>
[14:23:08.295]    <control if="!isProduction" while="" timeout="0" info="">
[14:23:08.295]      // if-block "!isProduction"
[14:23:08.295]        // =>  FALSE
[14:23:08.295]      // skip if-block "!isProduction"
[14:23:08.295]    </control>
[14:23:08.295]  </sequence>
[14:23:08.295]  
[14:24:01.973]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:24:01.973]  
[14:24:01.983]  <debugvars>
[14:24:01.983]    // Pre-defined
[14:24:01.983]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:24:01.983]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:24:01.983]    __dp=0x00000000
[14:24:01.983]    __ap=0x00000000
[14:24:01.983]    __traceout=0x00000000      (Trace Disabled)
[14:24:01.983]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:24:01.983]    __FlashAddr=0x00000000
[14:24:01.983]    __FlashLen=0x00000000
[14:24:01.983]    __FlashArg=0x00000000
[14:24:01.983]    __FlashOp=0x00000000
[14:24:01.983]    __Result=0x00000000
[14:24:01.983]  </debugvars>
[14:24:01.983]  
[14:24:01.983]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:24:01.984]    <block atomic="false" info="">
[14:24:01.984]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:24:01.984]        // -> [isSWJ <= 0x00000001]
[14:24:01.984]      __var hasDormant = __protocol & 0x00020000;
[14:24:01.984]        // -> [hasDormant <= 0x00000000]
[14:24:01.984]      __var protType   = __protocol & 0x0000FFFF;
[14:24:01.984]        // -> [protType <= 0x00000002]
[14:24:01.984]    </block>
[14:24:01.984]    <control if="protType == 1" while="" timeout="0" info="">
[14:24:01.984]      // if-block "protType == 1"
[14:24:01.986]        // =>  FALSE
[14:24:01.986]      // skip if-block "protType == 1"
[14:24:01.986]    </control>
[14:24:01.986]    <control if="protType == 2" while="" timeout="0" info="">
[14:24:01.986]      // if-block "protType == 2"
[14:24:01.986]        // =>  TRUE
[14:24:01.986]      <control if="isSWJ" while="" timeout="0" info="">
[14:24:01.986]        // if-block "isSWJ"
[14:24:01.986]          // =>  TRUE
[14:24:01.986]        <control if="hasDormant" while="" timeout="0" info="">
[14:24:01.986]          // if-block "hasDormant"
[14:24:01.986]            // =>  FALSE
[14:24:01.986]          // skip if-block "hasDormant"
[14:24:01.986]        </control>
[14:24:01.986]        <control if="!hasDormant" while="" timeout="0" info="">
[14:24:01.986]          // if-block "!hasDormant"
[14:24:01.986]            // =>  TRUE
[14:24:01.986]          <block atomic="false" info="">
[14:24:01.986]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:24:01.988]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:24:01.988]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:24:01.988]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:24:01.988]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:24:01.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:24:01.989]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:24:01.989]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:24:01.989]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:24:01.989]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:24:01.989]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:24:01.989]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:24:01.989]          </block>
[14:24:01.991]          // end if-block "!hasDormant"
[14:24:01.991]        </control>
[14:24:01.991]        // end if-block "isSWJ"
[14:24:01.991]      </control>
[14:24:01.991]      <control if="!isSWJ" while="" timeout="0" info="">
[14:24:01.991]        // if-block "!isSWJ"
[14:24:01.991]          // =>  FALSE
[14:24:01.991]        // skip if-block "!isSWJ"
[14:24:01.992]      </control>
[14:24:01.992]      <block atomic="false" info="">
[14:24:01.992]        ReadDP(0x0);
[14:24:01.993]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:24:01.993]      </block>
[14:24:01.993]      // end if-block "protType == 2"
[14:24:01.993]    </control>
[14:24:01.993]  </sequence>
[14:24:01.993]  
[14:24:01.993]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:24:01.993]  
[14:24:01.993]  <debugvars>
[14:24:01.993]    // Pre-defined
[14:24:01.993]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:24:01.993]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:24:01.993]    __dp=0x00000000
[14:24:01.993]    __ap=0x00000000
[14:24:01.993]    __traceout=0x00000000      (Trace Disabled)
[14:24:01.993]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:24:01.993]    __FlashAddr=0x00000000
[14:24:01.993]    __FlashLen=0x00000000
[14:24:01.996]    __FlashArg=0x00000000
[14:24:01.996]    __FlashOp=0x00000000
[14:24:01.996]    __Result=0x00000000
[14:24:01.996]  </debugvars>
[14:24:01.996]  
[14:24:01.996]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:24:01.997]    <block atomic="false" info="">
[14:24:01.997]      __var SW_DP_ABORT       = 0x0;
[14:24:01.997]        // -> [SW_DP_ABORT <= 0x00000000]
[14:24:01.997]      __var DP_CTRL_STAT      = 0x4;
[14:24:01.997]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:24:01.997]      __var DP_SELECT         = 0x8;
[14:24:01.997]        // -> [DP_SELECT <= 0x00000008]
[14:24:01.997]      __var powered_down      = 0;
[14:24:01.997]        // -> [powered_down <= 0x00000000]
[14:24:01.997]      WriteDP(DP_SELECT, 0x00000000);
[14:24:01.998]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:24:01.998]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:24:01.998]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:24:01.998]        // -> [powered_down <= 0x00000001]
[14:24:01.998]    </block>
[14:24:01.998]    <control if="powered_down" while="" timeout="0" info="">
[14:24:01.998]      // if-block "powered_down"
[14:24:01.998]        // =>  TRUE
[14:24:02.000]      <block atomic="false" info="">
[14:24:02.000]        Message(0, "Debug/System power-up request sent");
[14:24:02.001]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:24:02.002]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:24:02.002]      </block>
[14:24:02.002]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:24:02.002]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:24:02.002]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:24:02.002]        // while-condition  =>  FALSE
[14:24:02.002]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:24:02.004]      </control>
[14:24:02.004]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:24:02.004]        // if-block "(__protocol & 0xFFFF) == 1"
[14:24:02.004]          // =>  FALSE
[14:24:02.004]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:24:02.004]      </control>
[14:24:02.004]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:24:02.004]        // if-block "(__protocol & 0xFFFF) == 2"
[14:24:02.004]          // =>  TRUE
[14:24:02.004]        <block atomic="false" info="">
[14:24:02.004]          Message(0, "executing SWD power up");
[14:24:02.006]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:24:02.006]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:24:02.006]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:24:02.006]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:24:02.006]        </block>
[14:24:02.006]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:24:02.006]      </control>
[14:24:02.006]      // end if-block "powered_down"
[14:24:02.009]    </control>
[14:24:02.009]    <block atomic="false" info="">
[14:24:02.009]      __var DEBUG_PORT_VAL    = 0;
[14:24:02.009]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:24:02.009]      __var ACCESS_POINT_VAL  = 0;
[14:24:02.009]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:24:02.009]      __ap = 1; 
[14:24:02.009]        // -> [__ap <= 0x00000001]
[14:24:02.009]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:24:02.010]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:24:02.010]      __ap = 4;
[14:24:02.011]        // -> [__ap <= 0x00000004]
[14:24:02.011]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:24:02.012]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:24:02.012]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:24:02.012]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:24:02.013]    </block>
[14:24:02.013]    <block atomic="false" info="">
[14:24:02.014]      __var nReset = 0x80;
[14:24:02.014]        // -> [nReset <= 0x00000080]
[14:24:02.014]      __var canReadPins = 0;
[14:24:02.014]        // -> [canReadPins <= 0x00000000]
[14:24:02.014]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:24:02.014]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:24:02.015]        // -> [canReadPins <= 0x00000001]
[14:24:02.015]    </block>
[14:24:02.015]    <control if="" while="1" timeout="200" info="">
[14:24:02.015]      // while "1"  (timeout="200")
[14:24:02.015]      // while-condition  =>  TRUE
[14:24:02.015]      // while "1"  (timeout="200")
[14:24:02.016]      // while-condition  =>  TRUE
[14:24:02.016]      // while "1"  (timeout="200")
[14:24:02.016]      // while-condition  =>  TRUE
[14:24:02.016]      // while "1"  (timeout="200")
[14:24:02.016]      // while-condition  =>  TRUE
[14:24:02.016]      // while "1"  (timeout="200")
[14:24:02.016]      // while-condition  =>  TRUE
[14:24:02.016]      // while "1"  (timeout="200")
[14:24:02.016]      // while-condition  =>  TRUE
[14:24:02.016]      // while "1"  (timeout="200")
[14:24:02.016]      // while-condition  =>  TRUE
[14:24:02.016]      // while "1"  (timeout="200")
[14:24:02.017]      // while-condition  =>  TRUE
[14:24:02.017]      // while "1"  (timeout="200")
[14:24:02.017]      // while-condition  =>  TRUE
[14:24:02.017]      // while "1"  (timeout="200")
[14:24:02.017]      // while-condition  =>  TRUE
[14:24:02.017]      // while "1"  (timeout="200")
[14:24:02.017]      // while-condition  =>  TRUE
[14:24:02.017]      // while "1"  (timeout="200")
[14:24:02.018]      // while-condition  =>  TRUE
[14:24:02.018]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.019]      // while "1"  (timeout="200")
[14:24:02.019]      // while-condition  =>  TRUE
[14:24:02.023]      // while "1"  (timeout="200")
[14:24:02.023]      // while  =>  TIMEOUT
[14:24:02.023]      // end while "1"
[14:24:02.023]    </control>
[14:24:02.023]    <control if="canReadPins" while="" timeout="0" info="">
[14:24:02.023]      // if-block "canReadPins"
[14:24:02.023]        // =>  TRUE
[14:24:02.023]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:24:02.023]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:24:02.024]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:24:02.024]        // while-condition  =>  FALSE
[14:24:02.024]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:24:02.024]      </control>
[14:24:02.024]      // end if-block "canReadPins"
[14:24:02.024]    </control>
[14:24:02.024]    <control if="!canReadPins" while="" timeout="0" info="">
[14:24:02.024]      // if-block "!canReadPins"
[14:24:02.024]        // =>  FALSE
[14:24:02.024]      // skip if-block "!canReadPins"
[14:24:02.024]    </control>
[14:24:02.024]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:24:02.024]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:24:02.024]        // =>  TRUE
[14:24:02.026]      <block atomic="false" info="">
[14:24:02.026]        WriteAP(0x00, 0x190008);
[14:24:02.026]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:24:02.026]        WriteAP(0xF0, 0x01);
[14:24:02.028]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:24:02.028]      </block>
[14:24:02.028]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:24:02.028]    </control>
[14:24:02.028]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:24:02.028]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:24:02.028]        // =>  FALSE
[14:24:02.028]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:24:02.028]    </control>
[14:24:02.028]    <block atomic="false" info="">
[14:24:02.029]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:24:02.030]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:24:02.030]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:24:02.030]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:24:02.032]      __ap = 0; //lets make sure we reset the access point selection
[14:24:02.033]        // -> [__ap <= 0x00000000]
[14:24:02.033]    </block>
[14:24:02.033]  </sequence>
[14:24:02.033]  
[14:24:02.035]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:24:02.035]  
[14:24:02.039]  <debugvars>
[14:24:02.039]    // Pre-defined
[14:24:02.039]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:24:02.039]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:24:02.039]    __dp=0x00000000
[14:24:02.039]    __ap=0x00000000
[14:24:02.039]    __traceout=0x00000000      (Trace Disabled)
[14:24:02.039]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:24:02.039]    __FlashAddr=0x00000000
[14:24:02.039]    __FlashLen=0x00000000
[14:24:02.040]    __FlashArg=0x00000000
[14:24:02.040]    __FlashOp=0x00000000
[14:24:02.040]    __Result=0x00000000
[14:24:02.040]  </debugvars>
[14:24:02.040]  
[14:24:02.040]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:24:02.040]    <block atomic="false" info="">
[14:24:02.040]      __var deviceID = 0;
[14:24:02.040]        // -> [deviceID <= 0x00000000]
[14:24:02.040]      __var version = 0;
[14:24:02.040]        // -> [version <= 0x00000000]
[14:24:02.040]      __var partNum = 0;
[14:24:02.040]        // -> [partNum <= 0x00000000]
[14:24:02.040]      __var manuf = 0;
[14:24:02.040]        // -> [manuf <= 0x00000000]
[14:24:02.040]      __var isMSPM0G1X0X_G3X0X = 0;
[14:24:02.040]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:24:02.040]      __var isProduction = 0;
[14:24:02.040]        // -> [isProduction <= 0x00000000]
[14:24:02.040]      __var continueId = 0;
[14:24:02.040]        // -> [continueId <= 0x00000000]
[14:24:02.040]      deviceID =   Read32(0x41C40004);
[14:24:02.043]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:24:02.043]        // -> [deviceID <= 0x2BB8802F]
[14:24:02.043]      version = deviceID >> 28;
[14:24:02.044]        // -> [version <= 0x00000002]
[14:24:02.044]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:24:02.044]        // -> [partNum <= 0x0000BB88]
[14:24:02.044]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:24:02.044]        // -> [manuf <= 0x00000017]
[14:24:02.044]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:24:02.044]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:24:02.044]      isProduction = (version > 0);
[14:24:02.044]        // -> [isProduction <= 0x00000001]
[14:24:02.044]    </block>
[14:24:02.045]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:24:02.045]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:24:02.045]        // =>  FALSE
[14:24:02.045]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:24:02.045]    </control>
[14:24:02.045]    <control if="continueId == 4" while="" timeout="0" info="">
[14:24:02.045]      // if-block "continueId == 4"
[14:24:02.045]        // =>  FALSE
[14:24:02.045]      // skip if-block "continueId == 4"
[14:24:02.045]    </control>
[14:24:02.045]    <control if="!isProduction" while="" timeout="0" info="">
[14:24:02.045]      // if-block "!isProduction"
[14:24:02.047]        // =>  FALSE
[14:24:02.047]      // skip if-block "!isProduction"
[14:24:02.047]    </control>
[14:24:02.047]  </sequence>
[14:24:02.047]  
[14:24:43.230]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:24:43.230]  
[14:24:43.230]  <debugvars>
[14:24:43.230]    // Pre-defined
[14:24:43.230]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:24:43.232]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:24:43.232]    __dp=0x00000000
[14:24:43.232]    __ap=0x00000000
[14:24:43.232]    __traceout=0x00000000      (Trace Disabled)
[14:24:43.232]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:24:43.232]    __FlashAddr=0x00000000
[14:24:43.232]    __FlashLen=0x00000000
[14:24:43.232]    __FlashArg=0x00000000
[14:24:43.233]    __FlashOp=0x00000000
[14:24:43.233]    __Result=0x00000000
[14:24:43.233]  </debugvars>
[14:24:43.233]  
[14:24:43.233]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:24:43.233]    <block atomic="false" info="">
[14:24:43.233]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:24:43.233]        // -> [isSWJ <= 0x00000001]
[14:24:43.233]      __var hasDormant = __protocol & 0x00020000;
[14:24:43.233]        // -> [hasDormant <= 0x00000000]
[14:24:43.233]      __var protType   = __protocol & 0x0000FFFF;
[14:24:43.233]        // -> [protType <= 0x00000002]
[14:24:43.234]    </block>
[14:24:43.234]    <control if="protType == 1" while="" timeout="0" info="">
[14:24:43.234]      // if-block "protType == 1"
[14:24:43.234]        // =>  FALSE
[14:24:43.234]      // skip if-block "protType == 1"
[14:24:43.234]    </control>
[14:24:43.234]    <control if="protType == 2" while="" timeout="0" info="">
[14:24:43.234]      // if-block "protType == 2"
[14:24:43.234]        // =>  TRUE
[14:24:43.234]      <control if="isSWJ" while="" timeout="0" info="">
[14:24:43.234]        // if-block "isSWJ"
[14:24:43.234]          // =>  TRUE
[14:24:43.234]        <control if="hasDormant" while="" timeout="0" info="">
[14:24:43.235]          // if-block "hasDormant"
[14:24:43.235]            // =>  FALSE
[14:24:43.235]          // skip if-block "hasDormant"
[14:24:43.236]        </control>
[14:24:43.236]        <control if="!hasDormant" while="" timeout="0" info="">
[14:24:43.236]          // if-block "!hasDormant"
[14:24:43.236]            // =>  TRUE
[14:24:43.236]          <block atomic="false" info="">
[14:24:43.236]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:24:43.236]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:24:43.237]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:24:43.237]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:24:43.237]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:24:43.238]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:24:43.238]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:24:43.238]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:24:43.238]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:24:43.238]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:24:43.239]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:24:43.239]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:24:43.239]          </block>
[14:24:43.239]          // end if-block "!hasDormant"
[14:24:43.239]        </control>
[14:24:43.239]        // end if-block "isSWJ"
[14:24:43.239]      </control>
[14:24:43.239]      <control if="!isSWJ" while="" timeout="0" info="">
[14:24:43.239]        // if-block "!isSWJ"
[14:24:43.239]          // =>  FALSE
[14:24:43.240]        // skip if-block "!isSWJ"
[14:24:43.240]      </control>
[14:24:43.240]      <block atomic="false" info="">
[14:24:43.240]        ReadDP(0x0);
[14:24:43.240]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:24:43.240]      </block>
[14:24:43.240]      // end if-block "protType == 2"
[14:24:43.240]    </control>
[14:24:43.240]  </sequence>
[14:24:43.242]  
[14:24:43.242]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:24:43.242]  
[14:24:43.242]  <debugvars>
[14:24:43.242]    // Pre-defined
[14:24:43.242]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:24:43.242]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:24:43.242]    __dp=0x00000000
[14:24:43.242]    __ap=0x00000000
[14:24:43.242]    __traceout=0x00000000      (Trace Disabled)
[14:24:43.243]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:24:43.243]    __FlashAddr=0x00000000
[14:24:43.243]    __FlashLen=0x00000000
[14:24:43.243]    __FlashArg=0x00000000
[14:24:43.243]    __FlashOp=0x00000000
[14:24:43.243]    __Result=0x00000000
[14:24:43.243]  </debugvars>
[14:24:43.243]  
[14:24:43.243]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:24:43.243]    <block atomic="false" info="">
[14:24:43.243]      __var SW_DP_ABORT       = 0x0;
[14:24:43.243]        // -> [SW_DP_ABORT <= 0x00000000]
[14:24:43.243]      __var DP_CTRL_STAT      = 0x4;
[14:24:43.243]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:24:43.243]      __var DP_SELECT         = 0x8;
[14:24:43.243]        // -> [DP_SELECT <= 0x00000008]
[14:24:43.243]      __var powered_down      = 0;
[14:24:43.243]        // -> [powered_down <= 0x00000000]
[14:24:43.243]      WriteDP(DP_SELECT, 0x00000000);
[14:24:43.243]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:24:43.243]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:24:43.243]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:24:43.243]        // -> [powered_down <= 0x00000001]
[14:24:43.243]    </block>
[14:24:43.243]    <control if="powered_down" while="" timeout="0" info="">
[14:24:43.243]      // if-block "powered_down"
[14:24:43.247]        // =>  TRUE
[14:24:43.247]      <block atomic="false" info="">
[14:24:43.247]        Message(0, "Debug/System power-up request sent");
[14:24:43.249]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:24:43.249]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:24:43.249]      </block>
[14:24:43.249]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:24:43.249]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:24:43.251]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:24:43.251]        // while-condition  =>  FALSE
[14:24:43.251]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:24:43.251]      </control>
[14:24:43.252]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:24:43.252]        // if-block "(__protocol & 0xFFFF) == 1"
[14:24:43.252]          // =>  FALSE
[14:24:43.252]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:24:43.252]      </control>
[14:24:43.252]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:24:43.252]        // if-block "(__protocol & 0xFFFF) == 2"
[14:24:43.252]          // =>  TRUE
[14:24:43.252]        <block atomic="false" info="">
[14:24:43.252]          Message(0, "executing SWD power up");
[14:24:43.253]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:24:43.253]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:24:43.253]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:24:43.256]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:24:43.256]        </block>
[14:24:43.256]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:24:43.256]      </control>
[14:24:43.256]      // end if-block "powered_down"
[14:24:43.256]    </control>
[14:24:43.256]    <block atomic="false" info="">
[14:24:43.256]      __var DEBUG_PORT_VAL    = 0;
[14:24:43.256]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:24:43.256]      __var ACCESS_POINT_VAL  = 0;
[14:24:43.257]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:24:43.257]      __ap = 1; 
[14:24:43.257]        // -> [__ap <= 0x00000001]
[14:24:43.257]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:24:43.257]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:24:43.257]      __ap = 4;
[14:24:43.257]        // -> [__ap <= 0x00000004]
[14:24:43.257]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:24:43.261]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:24:43.261]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:24:43.261]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:24:43.261]    </block>
[14:24:43.261]    <block atomic="false" info="">
[14:24:43.261]      __var nReset = 0x80;
[14:24:43.261]        // -> [nReset <= 0x00000080]
[14:24:43.261]      __var canReadPins = 0;
[14:24:43.261]        // -> [canReadPins <= 0x00000000]
[14:24:43.261]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:24:43.261]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:24:43.261]        // -> [canReadPins <= 0x00000001]
[14:24:43.261]    </block>
[14:24:43.261]    <control if="" while="1" timeout="200" info="">
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.264]      // while-condition  =>  TRUE
[14:24:43.264]      // while "1"  (timeout="200")
[14:24:43.268]      // while-condition  =>  TRUE
[14:24:43.268]      // while "1"  (timeout="200")
[14:24:43.268]      // while-condition  =>  TRUE
[14:24:43.268]      // while "1"  (timeout="200")
[14:24:43.268]      // while-condition  =>  TRUE
[14:24:43.268]      // while "1"  (timeout="200")
[14:24:43.268]      // while-condition  =>  TRUE
[14:24:43.268]      // while "1"  (timeout="200")
[14:24:43.268]      // while-condition  =>  TRUE
[14:24:43.269]      // while "1"  (timeout="200")
[14:24:43.269]      // while-condition  =>  TRUE
[14:24:43.269]      // while "1"  (timeout="200")
[14:24:43.269]      // while-condition  =>  TRUE
[14:24:43.269]      // while "1"  (timeout="200")
[14:24:43.269]      // while-condition  =>  TRUE
[14:24:43.269]      // while "1"  (timeout="200")
[14:24:43.269]      // while-condition  =>  TRUE
[14:24:43.269]      // while "1"  (timeout="200")
[14:24:43.269]      // while-condition  =>  TRUE
[14:24:43.269]      // while "1"  (timeout="200")
[14:24:43.269]      // while-condition  =>  TRUE
[14:24:43.269]      // while "1"  (timeout="200")
[14:24:43.269]      // while-condition  =>  TRUE
[14:24:43.269]      // while "1"  (timeout="200")
[14:24:43.269]      // while-condition  =>  TRUE
[14:24:43.269]      // while "1"  (timeout="200")
[14:24:43.269]      // while-condition  =>  TRUE
[14:24:43.269]      // while "1"  (timeout="200")
[14:24:43.272]      // while-condition  =>  TRUE
[14:24:43.272]      // while "1"  (timeout="200")
[14:24:43.272]      // while  =>  TIMEOUT
[14:24:43.272]      // end while "1"
[14:24:43.272]    </control>
[14:24:43.272]    <control if="canReadPins" while="" timeout="0" info="">
[14:24:43.272]      // if-block "canReadPins"
[14:24:43.272]        // =>  TRUE
[14:24:43.272]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:24:43.272]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:24:43.273]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:24:43.273]        // while-condition  =>  FALSE
[14:24:43.273]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:24:43.273]      </control>
[14:24:43.273]      // end if-block "canReadPins"
[14:24:43.274]    </control>
[14:24:43.274]    <control if="!canReadPins" while="" timeout="0" info="">
[14:24:43.274]      // if-block "!canReadPins"
[14:24:43.274]        // =>  FALSE
[14:24:43.274]      // skip if-block "!canReadPins"
[14:24:43.274]    </control>
[14:24:43.274]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:24:43.274]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:24:43.274]        // =>  TRUE
[14:24:43.274]      <block atomic="false" info="">
[14:24:43.274]        WriteAP(0x00, 0x190008);
[14:24:43.274]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:24:43.274]        WriteAP(0xF0, 0x01);
[14:24:43.276]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:24:43.277]      </block>
[14:24:43.277]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:24:43.277]    </control>
[14:24:43.277]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:24:43.277]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:24:43.277]        // =>  FALSE
[14:24:43.277]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:24:43.277]    </control>
[14:24:43.277]    <block atomic="false" info="">
[14:24:43.277]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:24:43.277]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:24:43.277]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:24:43.277]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:24:43.281]      __ap = 0; //lets make sure we reset the access point selection
[14:24:43.281]        // -> [__ap <= 0x00000000]
[14:24:43.281]    </block>
[14:24:43.281]  </sequence>
[14:24:43.281]  
[14:24:43.285]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:24:43.285]  
[14:24:43.285]  <debugvars>
[14:24:43.285]    // Pre-defined
[14:24:43.285]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:24:43.285]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:24:43.285]    __dp=0x00000000
[14:24:43.289]    __ap=0x00000000
[14:24:43.289]    __traceout=0x00000000      (Trace Disabled)
[14:24:43.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:24:43.289]    __FlashAddr=0x00000000
[14:24:43.289]    __FlashLen=0x00000000
[14:24:43.289]    __FlashArg=0x00000000
[14:24:43.289]    __FlashOp=0x00000000
[14:24:43.289]    __Result=0x00000000
[14:24:43.289]  </debugvars>
[14:24:43.290]  
[14:24:43.290]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:24:43.290]    <block atomic="false" info="">
[14:24:43.290]      __var deviceID = 0;
[14:24:43.290]        // -> [deviceID <= 0x00000000]
[14:24:43.290]      __var version = 0;
[14:24:43.290]        // -> [version <= 0x00000000]
[14:24:43.290]      __var partNum = 0;
[14:24:43.290]        // -> [partNum <= 0x00000000]
[14:24:43.290]      __var manuf = 0;
[14:24:43.290]        // -> [manuf <= 0x00000000]
[14:24:43.291]      __var isMSPM0G1X0X_G3X0X = 0;
[14:24:43.291]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:24:43.291]      __var isProduction = 0;
[14:24:43.291]        // -> [isProduction <= 0x00000000]
[14:24:43.291]      __var continueId = 0;
[14:24:43.291]        // -> [continueId <= 0x00000000]
[14:24:43.291]      deviceID =   Read32(0x41C40004);
[14:24:43.294]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:24:43.294]        // -> [deviceID <= 0x2BB8802F]
[14:24:43.294]      version = deviceID >> 28;
[14:24:43.294]        // -> [version <= 0x00000002]
[14:24:43.294]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:24:43.294]        // -> [partNum <= 0x0000BB88]
[14:24:43.294]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:24:43.294]        // -> [manuf <= 0x00000017]
[14:24:43.294]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:24:43.294]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:24:43.294]      isProduction = (version > 0);
[14:24:43.294]        // -> [isProduction <= 0x00000001]
[14:24:43.294]    </block>
[14:24:43.294]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:24:43.294]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:24:43.294]        // =>  FALSE
[14:24:43.294]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:24:43.294]    </control>
[14:24:43.294]    <control if="continueId == 4" while="" timeout="0" info="">
[14:24:43.294]      // if-block "continueId == 4"
[14:24:43.294]        // =>  FALSE
[14:24:43.294]      // skip if-block "continueId == 4"
[14:24:43.294]    </control>
[14:24:43.294]    <control if="!isProduction" while="" timeout="0" info="">
[14:24:43.294]      // if-block "!isProduction"
[14:24:43.294]        // =>  FALSE
[14:24:43.294]      // skip if-block "!isProduction"
[14:24:43.294]    </control>
[14:24:43.294]  </sequence>
[14:24:43.294]  
[14:28:58.359]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:28:58.359]  
[14:28:58.359]  <debugvars>
[14:28:58.359]    // Pre-defined
[14:28:58.359]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:28:58.359]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:28:58.359]    __dp=0x00000000
[14:28:58.359]    __ap=0x00000000
[14:28:58.359]    __traceout=0x00000000      (Trace Disabled)
[14:28:58.359]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:28:58.359]    __FlashAddr=0x00000000
[14:28:58.359]    __FlashLen=0x00000000
[14:28:58.359]    __FlashArg=0x00000000
[14:28:58.359]    __FlashOp=0x00000000
[14:28:58.361]    __Result=0x00000000
[14:28:58.361]  </debugvars>
[14:28:58.361]  
[14:28:58.361]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:28:58.361]    <block atomic="false" info="">
[14:28:58.361]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:28:58.361]        // -> [isSWJ <= 0x00000001]
[14:28:58.361]      __var hasDormant = __protocol & 0x00020000;
[14:28:58.361]        // -> [hasDormant <= 0x00000000]
[14:28:58.361]      __var protType   = __protocol & 0x0000FFFF;
[14:28:58.361]        // -> [protType <= 0x00000002]
[14:28:58.361]    </block>
[14:28:58.361]    <control if="protType == 1" while="" timeout="0" info="">
[14:28:58.361]      // if-block "protType == 1"
[14:28:58.363]        // =>  FALSE
[14:28:58.363]      // skip if-block "protType == 1"
[14:28:58.363]    </control>
[14:28:58.363]    <control if="protType == 2" while="" timeout="0" info="">
[14:28:58.363]      // if-block "protType == 2"
[14:28:58.363]        // =>  TRUE
[14:28:58.363]      <control if="isSWJ" while="" timeout="0" info="">
[14:28:58.363]        // if-block "isSWJ"
[14:28:58.363]          // =>  TRUE
[14:28:58.363]        <control if="hasDormant" while="" timeout="0" info="">
[14:28:58.363]          // if-block "hasDormant"
[14:28:58.363]            // =>  FALSE
[14:28:58.364]          // skip if-block "hasDormant"
[14:28:58.364]        </control>
[14:28:58.364]        <control if="!hasDormant" while="" timeout="0" info="">
[14:28:58.364]          // if-block "!hasDormant"
[14:28:58.364]            // =>  TRUE
[14:28:58.364]          <block atomic="false" info="">
[14:28:58.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:28:58.364]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:28:58.364]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:28:58.365]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:28:58.365]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:28:58.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:28:58.365]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:28:58.365]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:28:58.366]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:28:58.366]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:28:58.366]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:28:58.367]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:28:58.367]          </block>
[14:28:58.367]          // end if-block "!hasDormant"
[14:28:58.367]        </control>
[14:28:58.367]        // end if-block "isSWJ"
[14:28:58.367]      </control>
[14:28:58.367]      <control if="!isSWJ" while="" timeout="0" info="">
[14:28:58.367]        // if-block "!isSWJ"
[14:28:58.367]          // =>  FALSE
[14:28:58.367]        // skip if-block "!isSWJ"
[14:28:58.367]      </control>
[14:28:58.367]      <block atomic="false" info="">
[14:28:58.367]        ReadDP(0x0);
[14:28:58.367]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:28:58.367]      </block>
[14:28:58.369]      // end if-block "protType == 2"
[14:28:58.369]    </control>
[14:28:58.369]  </sequence>
[14:28:58.369]  
[14:28:58.369]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:28:58.369]  
[14:28:58.369]  <debugvars>
[14:28:58.370]    // Pre-defined
[14:28:58.370]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:28:58.370]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:28:58.370]    __dp=0x00000000
[14:28:58.370]    __ap=0x00000000
[14:28:58.370]    __traceout=0x00000000      (Trace Disabled)
[14:28:58.370]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:28:58.370]    __FlashAddr=0x00000000
[14:28:58.370]    __FlashLen=0x00000000
[14:28:58.370]    __FlashArg=0x00000000
[14:28:58.370]    __FlashOp=0x00000000
[14:28:58.370]    __Result=0x00000000
[14:28:58.371]  </debugvars>
[14:28:58.371]  
[14:28:58.371]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:28:58.371]    <block atomic="false" info="">
[14:28:58.371]      __var SW_DP_ABORT       = 0x0;
[14:28:58.371]        // -> [SW_DP_ABORT <= 0x00000000]
[14:28:58.371]      __var DP_CTRL_STAT      = 0x4;
[14:28:58.371]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:28:58.371]      __var DP_SELECT         = 0x8;
[14:28:58.371]        // -> [DP_SELECT <= 0x00000008]
[14:28:58.372]      __var powered_down      = 0;
[14:28:58.372]        // -> [powered_down <= 0x00000000]
[14:28:58.372]      WriteDP(DP_SELECT, 0x00000000);
[14:28:58.372]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:28:58.372]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:28:58.373]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:28:58.373]        // -> [powered_down <= 0x00000001]
[14:28:58.373]    </block>
[14:28:58.373]    <control if="powered_down" while="" timeout="0" info="">
[14:28:58.373]      // if-block "powered_down"
[14:28:58.373]        // =>  TRUE
[14:28:58.373]      <block atomic="false" info="">
[14:28:58.373]        Message(0, "Debug/System power-up request sent");
[14:28:58.375]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:28:58.376]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:28:58.376]      </block>
[14:28:58.376]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:28:58.376]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:28:58.377]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:28:58.377]        // while-condition  =>  FALSE
[14:28:58.377]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:28:58.377]      </control>
[14:28:58.377]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:28:58.377]        // if-block "(__protocol & 0xFFFF) == 1"
[14:28:58.377]          // =>  FALSE
[14:28:58.377]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:28:58.377]      </control>
[14:28:58.377]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:28:58.377]        // if-block "(__protocol & 0xFFFF) == 2"
[14:28:58.377]          // =>  TRUE
[14:28:58.377]        <block atomic="false" info="">
[14:28:58.378]          Message(0, "executing SWD power up");
[14:28:58.378]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:28:58.380]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:28:58.381]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:28:58.381]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:28:58.381]        </block>
[14:28:58.381]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:28:58.381]      </control>
[14:28:58.381]      // end if-block "powered_down"
[14:28:58.381]    </control>
[14:28:58.381]    <block atomic="false" info="">
[14:28:58.381]      __var DEBUG_PORT_VAL    = 0;
[14:28:58.381]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:28:58.381]      __var ACCESS_POINT_VAL  = 0;
[14:28:58.381]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:28:58.381]      __ap = 1; 
[14:28:58.381]        // -> [__ap <= 0x00000001]
[14:28:58.381]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:28:58.383]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:28:58.383]      __ap = 4;
[14:28:58.384]        // -> [__ap <= 0x00000004]
[14:28:58.384]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:28:58.384]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:28:58.384]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:28:58.384]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:28:58.384]    </block>
[14:28:58.384]    <block atomic="false" info="">
[14:28:58.384]      __var nReset = 0x80;
[14:28:58.384]        // -> [nReset <= 0x00000080]
[14:28:58.384]      __var canReadPins = 0;
[14:28:58.384]        // -> [canReadPins <= 0x00000000]
[14:28:58.384]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:28:58.384]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:28:58.384]        // -> [canReadPins <= 0x00000001]
[14:28:58.384]    </block>
[14:28:58.389]    <control if="" while="1" timeout="200" info="">
[14:28:58.389]      // while "1"  (timeout="200")
[14:28:58.389]      // while-condition  =>  TRUE
[14:28:58.389]      // while "1"  (timeout="200")
[14:28:58.389]      // while-condition  =>  TRUE
[14:28:58.389]      // while "1"  (timeout="200")
[14:28:58.389]      // while-condition  =>  TRUE
[14:28:58.389]      // while "1"  (timeout="200")
[14:28:58.389]      // while-condition  =>  TRUE
[14:28:58.389]      // while "1"  (timeout="200")
[14:28:58.390]      // while-condition  =>  TRUE
[14:28:58.390]      // while "1"  (timeout="200")
[14:28:58.390]      // while-condition  =>  TRUE
[14:28:58.390]      // while "1"  (timeout="200")
[14:28:58.390]      // while-condition  =>  TRUE
[14:28:58.390]      // while "1"  (timeout="200")
[14:28:58.390]      // while-condition  =>  TRUE
[14:28:58.390]      // while "1"  (timeout="200")
[14:28:58.390]      // while-condition  =>  TRUE
[14:28:58.390]      // while "1"  (timeout="200")
[14:28:58.390]      // while-condition  =>  TRUE
[14:28:58.390]      // while "1"  (timeout="200")
[14:28:58.391]      // while-condition  =>  TRUE
[14:28:58.391]      // while "1"  (timeout="200")
[14:28:58.391]      // while-condition  =>  TRUE
[14:28:58.391]      // while "1"  (timeout="200")
[14:28:58.391]      // while-condition  =>  TRUE
[14:28:58.391]      // while "1"  (timeout="200")
[14:28:58.391]      // while-condition  =>  TRUE
[14:28:58.391]      // while "1"  (timeout="200")
[14:28:58.391]      // while-condition  =>  TRUE
[14:28:58.391]      // while "1"  (timeout="200")
[14:28:58.391]      // while-condition  =>  TRUE
[14:28:58.391]      // while "1"  (timeout="200")
[14:28:58.391]      // while-condition  =>  TRUE
[14:28:58.391]      // while "1"  (timeout="200")
[14:28:58.391]      // while-condition  =>  TRUE
[14:28:58.391]      // while "1"  (timeout="200")
[14:28:58.391]      // while-condition  =>  TRUE
[14:28:58.393]      // while "1"  (timeout="200")
[14:28:58.393]      // while-condition  =>  TRUE
[14:28:58.393]      // while "1"  (timeout="200")
[14:28:58.393]      // while-condition  =>  TRUE
[14:28:58.393]      // while "1"  (timeout="200")
[14:28:58.393]      // while-condition  =>  TRUE
[14:28:58.393]      // while "1"  (timeout="200")
[14:28:58.393]      // while-condition  =>  TRUE
[14:28:58.393]      // while "1"  (timeout="200")
[14:28:58.393]      // while-condition  =>  TRUE
[14:28:58.393]      // while "1"  (timeout="200")
[14:28:58.393]      // while-condition  =>  TRUE
[14:28:58.393]      // while "1"  (timeout="200")
[14:28:58.393]      // while-condition  =>  TRUE
[14:28:58.393]      // while "1"  (timeout="200")
[14:28:58.393]      // while-condition  =>  TRUE
[14:28:58.393]      // while "1"  (timeout="200")
[14:28:58.393]      // while-condition  =>  TRUE
[14:28:58.393]      // while "1"  (timeout="200")
[14:28:58.393]      // while-condition  =>  TRUE
[14:28:58.393]      // while "1"  (timeout="200")
[14:28:58.393]      // while-condition  =>  TRUE
[14:28:58.395]      // while "1"  (timeout="200")
[14:28:58.395]      // while  =>  TIMEOUT
[14:28:58.395]      // end while "1"
[14:28:58.395]    </control>
[14:28:58.395]    <control if="canReadPins" while="" timeout="0" info="">
[14:28:58.395]      // if-block "canReadPins"
[14:28:58.395]        // =>  TRUE
[14:28:58.395]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:28:58.395]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:28:58.396]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:28:58.396]        // while-condition  =>  FALSE
[14:28:58.396]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:28:58.396]      </control>
[14:28:58.396]      // end if-block "canReadPins"
[14:28:58.396]    </control>
[14:28:58.396]    <control if="!canReadPins" while="" timeout="0" info="">
[14:28:58.396]      // if-block "!canReadPins"
[14:28:58.397]        // =>  FALSE
[14:28:58.397]      // skip if-block "!canReadPins"
[14:28:58.397]    </control>
[14:28:58.397]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:28:58.397]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:28:58.397]        // =>  TRUE
[14:28:58.397]      <block atomic="false" info="">
[14:28:58.397]        WriteAP(0x00, 0x190008);
[14:28:58.397]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:28:58.397]        WriteAP(0xF0, 0x01);
[14:28:58.397]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:28:58.397]      </block>
[14:28:58.397]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:28:58.397]    </control>
[14:28:58.397]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:28:58.397]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:28:58.397]        // =>  FALSE
[14:28:58.397]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:28:58.397]    </control>
[14:28:58.397]    <block atomic="false" info="">
[14:28:58.397]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:28:58.402]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:28:58.402]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:28:58.402]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:28:58.402]      __ap = 0; //lets make sure we reset the access point selection
[14:28:58.402]        // -> [__ap <= 0x00000000]
[14:28:58.402]    </block>
[14:28:58.402]  </sequence>
[14:28:58.402]  
[14:28:58.410]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:28:58.410]  
[14:28:58.410]  <debugvars>
[14:28:58.410]    // Pre-defined
[14:28:58.410]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:28:58.410]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:28:58.410]    __dp=0x00000000
[14:28:58.410]    __ap=0x00000000
[14:28:58.410]    __traceout=0x00000000      (Trace Disabled)
[14:28:58.410]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:28:58.410]    __FlashAddr=0x00000000
[14:28:58.410]    __FlashLen=0x00000000
[14:28:58.410]    __FlashArg=0x00000000
[14:28:58.410]    __FlashOp=0x00000000
[14:28:58.410]    __Result=0x00000000
[14:28:58.410]  </debugvars>
[14:28:58.413]  
[14:28:58.413]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:28:58.413]    <block atomic="false" info="">
[14:28:58.413]      __var deviceID = 0;
[14:28:58.413]        // -> [deviceID <= 0x00000000]
[14:28:58.413]      __var version = 0;
[14:28:58.413]        // -> [version <= 0x00000000]
[14:28:58.413]      __var partNum = 0;
[14:28:58.413]        // -> [partNum <= 0x00000000]
[14:28:58.413]      __var manuf = 0;
[14:28:58.413]        // -> [manuf <= 0x00000000]
[14:28:58.413]      __var isMSPM0G1X0X_G3X0X = 0;
[14:28:58.413]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:28:58.414]      __var isProduction = 0;
[14:28:58.414]        // -> [isProduction <= 0x00000000]
[14:28:58.414]      __var continueId = 0;
[14:28:58.414]        // -> [continueId <= 0x00000000]
[14:28:58.414]      deviceID =   Read32(0x41C40004);
[14:28:58.415]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:28:58.415]        // -> [deviceID <= 0x2BB8802F]
[14:28:58.415]      version = deviceID >> 28;
[14:28:58.415]        // -> [version <= 0x00000002]
[14:28:58.415]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:28:58.415]        // -> [partNum <= 0x0000BB88]
[14:28:58.415]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:28:58.415]        // -> [manuf <= 0x00000017]
[14:28:58.415]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:28:58.415]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:28:58.415]      isProduction = (version > 0);
[14:28:58.415]        // -> [isProduction <= 0x00000001]
[14:28:58.415]    </block>
[14:28:58.415]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:28:58.415]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:28:58.415]        // =>  FALSE
[14:28:58.415]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:28:58.415]    </control>
[14:28:58.415]    <control if="continueId == 4" while="" timeout="0" info="">
[14:28:58.415]      // if-block "continueId == 4"
[14:28:58.415]        // =>  FALSE
[14:28:58.415]      // skip if-block "continueId == 4"
[14:28:58.415]    </control>
[14:28:58.415]    <control if="!isProduction" while="" timeout="0" info="">
[14:28:58.415]      // if-block "!isProduction"
[14:28:58.415]        // =>  FALSE
[14:28:58.415]      // skip if-block "!isProduction"
[14:28:58.415]    </control>
[14:28:58.415]  </sequence>
[14:28:58.415]  
[14:30:43.824]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:30:43.824]  
[14:30:43.833]  <debugvars>
[14:30:43.833]    // Pre-defined
[14:30:43.833]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:30:43.833]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:30:43.833]    __dp=0x00000000
[14:30:43.833]    __ap=0x00000000
[14:30:43.833]    __traceout=0x00000000      (Trace Disabled)
[14:30:43.833]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:30:43.835]    __FlashAddr=0x00000000
[14:30:43.835]    __FlashLen=0x00000000
[14:30:43.835]    __FlashArg=0x00000000
[14:30:43.835]    __FlashOp=0x00000000
[14:30:43.835]    __Result=0x00000000
[14:30:43.835]  </debugvars>
[14:30:43.835]  
[14:30:43.835]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:30:43.835]    <block atomic="false" info="">
[14:30:43.835]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:30:43.835]        // -> [isSWJ <= 0x00000001]
[14:30:43.836]      __var hasDormant = __protocol & 0x00020000;
[14:30:43.836]        // -> [hasDormant <= 0x00000000]
[14:30:43.836]      __var protType   = __protocol & 0x0000FFFF;
[14:30:43.836]        // -> [protType <= 0x00000002]
[14:30:43.836]    </block>
[14:30:43.836]    <control if="protType == 1" while="" timeout="0" info="">
[14:30:43.836]      // if-block "protType == 1"
[14:30:43.836]        // =>  FALSE
[14:30:43.836]      // skip if-block "protType == 1"
[14:30:43.836]    </control>
[14:30:43.836]    <control if="protType == 2" while="" timeout="0" info="">
[14:30:43.836]      // if-block "protType == 2"
[14:30:43.836]        // =>  TRUE
[14:30:43.836]      <control if="isSWJ" while="" timeout="0" info="">
[14:30:43.836]        // if-block "isSWJ"
[14:30:43.836]          // =>  TRUE
[14:30:43.836]        <control if="hasDormant" while="" timeout="0" info="">
[14:30:43.836]          // if-block "hasDormant"
[14:30:43.836]            // =>  FALSE
[14:30:43.836]          // skip if-block "hasDormant"
[14:30:43.836]        </control>
[14:30:43.836]        <control if="!hasDormant" while="" timeout="0" info="">
[14:30:43.836]          // if-block "!hasDormant"
[14:30:43.838]            // =>  TRUE
[14:30:43.838]          <block atomic="false" info="">
[14:30:43.838]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:30:43.838]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:30:43.838]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:30:43.839]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:30:43.839]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:30:43.839]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:30:43.839]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:30:43.840]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:30:43.840]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:30:43.840]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:30:43.840]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:30:43.840]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:30:43.840]          </block>
[14:30:43.842]          // end if-block "!hasDormant"
[14:30:43.842]        </control>
[14:30:43.842]        // end if-block "isSWJ"
[14:30:43.842]      </control>
[14:30:43.842]      <control if="!isSWJ" while="" timeout="0" info="">
[14:30:43.842]        // if-block "!isSWJ"
[14:30:43.842]          // =>  FALSE
[14:30:43.842]        // skip if-block "!isSWJ"
[14:30:43.842]      </control>
[14:30:43.842]      <block atomic="false" info="">
[14:30:43.842]        ReadDP(0x0);
[14:30:43.843]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:30:43.843]      </block>
[14:30:43.843]      // end if-block "protType == 2"
[14:30:43.843]    </control>
[14:30:43.843]  </sequence>
[14:30:43.843]  
[14:30:43.843]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:30:43.843]  
[14:30:43.844]  <debugvars>
[14:30:43.844]    // Pre-defined
[14:30:43.844]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:30:43.844]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:30:43.844]    __dp=0x00000000
[14:30:43.844]    __ap=0x00000000
[14:30:43.844]    __traceout=0x00000000      (Trace Disabled)
[14:30:43.844]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:30:43.844]    __FlashAddr=0x00000000
[14:30:43.845]    __FlashLen=0x00000000
[14:30:43.845]    __FlashArg=0x00000000
[14:30:43.845]    __FlashOp=0x00000000
[14:30:43.845]    __Result=0x00000000
[14:30:43.845]  </debugvars>
[14:30:43.845]  
[14:30:43.845]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:30:43.845]    <block atomic="false" info="">
[14:30:43.845]      __var SW_DP_ABORT       = 0x0;
[14:30:43.846]        // -> [SW_DP_ABORT <= 0x00000000]
[14:30:43.846]      __var DP_CTRL_STAT      = 0x4;
[14:30:43.846]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:30:43.846]      __var DP_SELECT         = 0x8;
[14:30:43.846]        // -> [DP_SELECT <= 0x00000008]
[14:30:43.846]      __var powered_down      = 0;
[14:30:43.846]        // -> [powered_down <= 0x00000000]
[14:30:43.846]      WriteDP(DP_SELECT, 0x00000000);
[14:30:43.847]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:30:43.847]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:30:43.847]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:30:43.847]        // -> [powered_down <= 0x00000001]
[14:30:43.847]    </block>
[14:30:43.847]    <control if="powered_down" while="" timeout="0" info="">
[14:30:43.847]      // if-block "powered_down"
[14:30:43.847]        // =>  TRUE
[14:30:43.847]      <block atomic="false" info="">
[14:30:43.847]        Message(0, "Debug/System power-up request sent");
[14:30:43.850]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:30:43.851]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:30:43.851]      </block>
[14:30:43.851]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:30:43.851]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:30:43.851]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:30:43.851]        // while-condition  =>  FALSE
[14:30:43.851]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:30:43.851]      </control>
[14:30:43.851]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:30:43.851]        // if-block "(__protocol & 0xFFFF) == 1"
[14:30:43.851]          // =>  FALSE
[14:30:43.851]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:30:43.851]      </control>
[14:30:43.851]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:30:43.851]        // if-block "(__protocol & 0xFFFF) == 2"
[14:30:43.851]          // =>  TRUE
[14:30:43.851]        <block atomic="false" info="">
[14:30:43.851]          Message(0, "executing SWD power up");
[14:30:43.855]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:30:43.855]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:30:43.856]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:30:43.856]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:30:43.856]        </block>
[14:30:43.856]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:30:43.856]      </control>
[14:30:43.856]      // end if-block "powered_down"
[14:30:43.856]    </control>
[14:30:43.856]    <block atomic="false" info="">
[14:30:43.856]      __var DEBUG_PORT_VAL    = 0;
[14:30:43.856]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:30:43.858]      __var ACCESS_POINT_VAL  = 0;
[14:30:43.858]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:30:43.858]      __ap = 1; 
[14:30:43.858]        // -> [__ap <= 0x00000001]
[14:30:43.858]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:30:43.859]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:30:43.859]      __ap = 4;
[14:30:43.859]        // -> [__ap <= 0x00000004]
[14:30:43.859]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:30:43.860]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:30:43.860]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:30:43.860]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:30:43.862]    </block>
[14:30:43.862]    <block atomic="false" info="">
[14:30:43.862]      __var nReset = 0x80;
[14:30:43.862]        // -> [nReset <= 0x00000080]
[14:30:43.862]      __var canReadPins = 0;
[14:30:43.862]        // -> [canReadPins <= 0x00000000]
[14:30:43.863]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:30:43.863]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:30:43.863]        // -> [canReadPins <= 0x00000001]
[14:30:43.863]    </block>
[14:30:43.863]    <control if="" while="1" timeout="200" info="">
[14:30:43.863]      // while "1"  (timeout="200")
[14:30:43.863]      // while-condition  =>  TRUE
[14:30:43.863]      // while "1"  (timeout="200")
[14:30:43.865]      // while-condition  =>  TRUE
[14:30:43.865]      // while "1"  (timeout="200")
[14:30:43.865]      // while-condition  =>  TRUE
[14:30:43.865]      // while "1"  (timeout="200")
[14:30:43.865]      // while-condition  =>  TRUE
[14:30:43.865]      // while "1"  (timeout="200")
[14:30:43.865]      // while-condition  =>  TRUE
[14:30:43.865]      // while "1"  (timeout="200")
[14:30:43.865]      // while-condition  =>  TRUE
[14:30:43.865]      // while "1"  (timeout="200")
[14:30:43.865]      // while-condition  =>  TRUE
[14:30:43.865]      // while "1"  (timeout="200")
[14:30:43.865]      // while-condition  =>  TRUE
[14:30:43.865]      // while "1"  (timeout="200")
[14:30:43.867]      // while-condition  =>  TRUE
[14:30:43.867]      // while "1"  (timeout="200")
[14:30:43.867]      // while-condition  =>  TRUE
[14:30:43.867]      // while "1"  (timeout="200")
[14:30:43.867]      // while-condition  =>  TRUE
[14:30:43.867]      // while "1"  (timeout="200")
[14:30:43.867]      // while-condition  =>  TRUE
[14:30:43.867]      // while "1"  (timeout="200")
[14:30:43.868]      // while-condition  =>  TRUE
[14:30:43.868]      // while "1"  (timeout="200")
[14:30:43.868]      // while-condition  =>  TRUE
[14:30:43.868]      // while "1"  (timeout="200")
[14:30:43.868]      // while-condition  =>  TRUE
[14:30:43.868]      // while "1"  (timeout="200")
[14:30:43.868]      // while-condition  =>  TRUE
[14:30:43.868]      // while "1"  (timeout="200")
[14:30:43.868]      // while-condition  =>  TRUE
[14:30:43.868]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.869]      // while-condition  =>  TRUE
[14:30:43.869]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.872]      // while-condition  =>  TRUE
[14:30:43.872]      // while "1"  (timeout="200")
[14:30:43.875]      // while-condition  =>  TRUE
[14:30:43.875]      // while "1"  (timeout="200")
[14:30:43.875]      // while-condition  =>  TRUE
[14:30:43.875]      // while "1"  (timeout="200")
[14:30:43.875]      // while-condition  =>  TRUE
[14:30:43.875]      // while "1"  (timeout="200")
[14:30:43.875]      // while-condition  =>  TRUE
[14:30:43.875]      // while "1"  (timeout="200")
[14:30:43.875]      // while-condition  =>  TRUE
[14:30:43.875]      // while "1"  (timeout="200")
[14:30:43.875]      // while-condition  =>  TRUE
[14:30:43.876]      // while "1"  (timeout="200")
[14:30:43.876]      // while-condition  =>  TRUE
[14:30:43.876]      // while "1"  (timeout="200")
[14:30:43.876]      // while-condition  =>  TRUE
[14:30:43.876]      // while "1"  (timeout="200")
[14:30:43.876]      // while-condition  =>  TRUE
[14:30:43.876]      // while "1"  (timeout="200")
[14:30:43.877]      // while-condition  =>  TRUE
[14:30:43.877]      // while "1"  (timeout="200")
[14:30:43.877]      // while-condition  =>  TRUE
[14:30:43.877]      // while "1"  (timeout="200")
[14:30:43.878]      // while-condition  =>  TRUE
[14:30:43.878]      // while "1"  (timeout="200")
[14:30:43.878]      // while-condition  =>  TRUE
[14:30:43.878]      // while "1"  (timeout="200")
[14:30:43.878]      // while-condition  =>  TRUE
[14:30:43.878]      // while "1"  (timeout="200")
[14:30:43.878]      // while-condition  =>  TRUE
[14:30:43.878]      // while "1"  (timeout="200")
[14:30:43.878]      // while-condition  =>  TRUE
[14:30:43.878]      // while "1"  (timeout="200")
[14:30:43.878]      // while-condition  =>  TRUE
[14:30:43.878]      // while "1"  (timeout="200")
[14:30:43.879]      // while-condition  =>  TRUE
[14:30:43.879]      // while "1"  (timeout="200")
[14:30:43.879]      // while-condition  =>  TRUE
[14:30:43.879]      // while "1"  (timeout="200")
[14:30:43.879]      // while-condition  =>  TRUE
[14:30:43.879]      // while "1"  (timeout="200")
[14:30:43.879]      // while  =>  TIMEOUT
[14:30:43.879]      // end while "1"
[14:30:43.879]    </control>
[14:30:43.879]    <control if="canReadPins" while="" timeout="0" info="">
[14:30:43.879]      // if-block "canReadPins"
[14:30:43.880]        // =>  TRUE
[14:30:43.880]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:30:43.880]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:30:43.880]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:30:43.880]        // while-condition  =>  FALSE
[14:30:43.880]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:30:43.880]      </control>
[14:30:43.881]      // end if-block "canReadPins"
[14:30:43.881]    </control>
[14:30:43.881]    <control if="!canReadPins" while="" timeout="0" info="">
[14:30:43.881]      // if-block "!canReadPins"
[14:30:43.881]        // =>  FALSE
[14:30:43.881]      // skip if-block "!canReadPins"
[14:30:43.881]    </control>
[14:30:43.881]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:30:43.881]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:30:43.881]        // =>  TRUE
[14:30:43.882]      <block atomic="false" info="">
[14:30:43.882]        WriteAP(0x00, 0x190008);
[14:30:43.883]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:30:43.883]        WriteAP(0xF0, 0x01);
[14:30:43.884]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:30:43.884]      </block>
[14:30:43.884]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:30:43.884]    </control>
[14:30:43.884]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:30:43.884]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:30:43.885]        // =>  FALSE
[14:30:43.885]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:30:43.885]    </control>
[14:30:43.885]    <block atomic="false" info="">
[14:30:43.885]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:30:43.886]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:30:43.886]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:30:43.886]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:30:43.888]      __ap = 0; //lets make sure we reset the access point selection
[14:30:43.888]        // -> [__ap <= 0x00000000]
[14:30:43.888]    </block>
[14:30:43.888]  </sequence>
[14:30:43.888]  
[14:30:43.895]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:30:43.895]  
[14:30:43.895]  <debugvars>
[14:30:43.895]    // Pre-defined
[14:30:43.895]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:30:43.895]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:30:43.895]    __dp=0x00000000
[14:30:43.895]    __ap=0x00000000
[14:30:43.896]    __traceout=0x00000000      (Trace Disabled)
[14:30:43.896]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:30:43.896]    __FlashAddr=0x00000000
[14:30:43.896]    __FlashLen=0x00000000
[14:30:43.896]    __FlashArg=0x00000000
[14:30:43.896]    __FlashOp=0x00000000
[14:30:43.896]    __Result=0x00000000
[14:30:43.896]  </debugvars>
[14:30:43.896]  
[14:30:43.896]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:30:43.896]    <block atomic="false" info="">
[14:30:43.897]      __var deviceID = 0;
[14:30:43.897]        // -> [deviceID <= 0x00000000]
[14:30:43.897]      __var version = 0;
[14:30:43.897]        // -> [version <= 0x00000000]
[14:30:43.897]      __var partNum = 0;
[14:30:43.897]        // -> [partNum <= 0x00000000]
[14:30:43.897]      __var manuf = 0;
[14:30:43.897]        // -> [manuf <= 0x00000000]
[14:30:43.897]      __var isMSPM0G1X0X_G3X0X = 0;
[14:30:43.898]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:30:43.898]      __var isProduction = 0;
[14:30:43.898]        // -> [isProduction <= 0x00000000]
[14:30:43.898]      __var continueId = 0;
[14:30:43.898]        // -> [continueId <= 0x00000000]
[14:30:43.898]      deviceID =   Read32(0x41C40004);
[14:30:43.899]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:30:43.900]        // -> [deviceID <= 0x2BB8802F]
[14:30:43.900]      version = deviceID >> 28;
[14:30:43.900]        // -> [version <= 0x00000002]
[14:30:43.900]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:30:43.900]        // -> [partNum <= 0x0000BB88]
[14:30:43.900]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:30:43.900]        // -> [manuf <= 0x00000017]
[14:30:43.900]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:30:43.901]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:30:43.901]      isProduction = (version > 0);
[14:30:43.901]        // -> [isProduction <= 0x00000001]
[14:30:43.901]    </block>
[14:30:43.901]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:30:43.901]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:30:43.901]        // =>  FALSE
[14:30:43.902]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:30:43.902]    </control>
[14:30:43.902]    <control if="continueId == 4" while="" timeout="0" info="">
[14:30:43.902]      // if-block "continueId == 4"
[14:30:43.902]        // =>  FALSE
[14:30:43.902]      // skip if-block "continueId == 4"
[14:30:43.902]    </control>
[14:30:43.902]    <control if="!isProduction" while="" timeout="0" info="">
[14:30:43.902]      // if-block "!isProduction"
[14:30:43.903]        // =>  FALSE
[14:30:43.903]      // skip if-block "!isProduction"
[14:30:43.903]    </control>
[14:30:43.903]  </sequence>
[14:30:43.903]  
[14:33:00.094]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:33:00.094]  
[14:33:00.104]  <debugvars>
[14:33:00.104]    // Pre-defined
[14:33:00.104]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:33:00.104]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:33:00.104]    __dp=0x00000000
[14:33:00.104]    __ap=0x00000000
[14:33:00.104]    __traceout=0x00000000      (Trace Disabled)
[14:33:00.104]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:33:00.104]    __FlashAddr=0x00000000
[14:33:00.104]    __FlashLen=0x00000000
[14:33:00.104]    __FlashArg=0x00000000
[14:33:00.104]    __FlashOp=0x00000000
[14:33:00.104]    __Result=0x00000000
[14:33:00.104]  </debugvars>
[14:33:00.104]  
[14:33:00.104]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:33:00.104]    <block atomic="false" info="">
[14:33:00.104]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:33:00.104]        // -> [isSWJ <= 0x00000001]
[14:33:00.106]      __var hasDormant = __protocol & 0x00020000;
[14:33:00.106]        // -> [hasDormant <= 0x00000000]
[14:33:00.106]      __var protType   = __protocol & 0x0000FFFF;
[14:33:00.107]        // -> [protType <= 0x00000002]
[14:33:00.107]    </block>
[14:33:00.107]    <control if="protType == 1" while="" timeout="0" info="">
[14:33:00.107]      // if-block "protType == 1"
[14:33:00.107]        // =>  FALSE
[14:33:00.107]      // skip if-block "protType == 1"
[14:33:00.107]    </control>
[14:33:00.107]    <control if="protType == 2" while="" timeout="0" info="">
[14:33:00.107]      // if-block "protType == 2"
[14:33:00.107]        // =>  TRUE
[14:33:00.107]      <control if="isSWJ" while="" timeout="0" info="">
[14:33:00.107]        // if-block "isSWJ"
[14:33:00.107]          // =>  TRUE
[14:33:00.107]        <control if="hasDormant" while="" timeout="0" info="">
[14:33:00.107]          // if-block "hasDormant"
[14:33:00.107]            // =>  FALSE
[14:33:00.107]          // skip if-block "hasDormant"
[14:33:00.107]        </control>
[14:33:00.107]        <control if="!hasDormant" while="" timeout="0" info="">
[14:33:00.107]          // if-block "!hasDormant"
[14:33:00.107]            // =>  TRUE
[14:33:00.107]          <block atomic="false" info="">
[14:33:00.107]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:33:00.109]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:33:00.109]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:33:00.109]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:33:00.109]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:33:00.109]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:33:00.109]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:33:00.110]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:33:00.110]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:33:00.110]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:33:00.110]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:33:00.110]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:33:00.110]          </block>
[14:33:00.110]          // end if-block "!hasDormant"
[14:33:00.110]        </control>
[14:33:00.110]        // end if-block "isSWJ"
[14:33:00.110]      </control>
[14:33:00.110]      <control if="!isSWJ" while="" timeout="0" info="">
[14:33:00.110]        // if-block "!isSWJ"
[14:33:00.110]          // =>  FALSE
[14:33:00.110]        // skip if-block "!isSWJ"
[14:33:00.110]      </control>
[14:33:00.110]      <block atomic="false" info="">
[14:33:00.110]        ReadDP(0x0);
[14:33:00.110]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:33:00.110]      </block>
[14:33:00.110]      // end if-block "protType == 2"
[14:33:00.110]    </control>
[14:33:00.110]  </sequence>
[14:33:00.110]  
[14:33:00.110]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:33:00.110]  
[14:33:00.110]  <debugvars>
[14:33:00.110]    // Pre-defined
[14:33:00.110]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:33:00.110]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:33:00.110]    __dp=0x00000000
[14:33:00.110]    __ap=0x00000000
[14:33:00.110]    __traceout=0x00000000      (Trace Disabled)
[14:33:00.114]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:33:00.114]    __FlashAddr=0x00000000
[14:33:00.114]    __FlashLen=0x00000000
[14:33:00.114]    __FlashArg=0x00000000
[14:33:00.114]    __FlashOp=0x00000000
[14:33:00.114]    __Result=0x00000000
[14:33:00.114]  </debugvars>
[14:33:00.114]  
[14:33:00.114]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:33:00.114]    <block atomic="false" info="">
[14:33:00.114]      __var SW_DP_ABORT       = 0x0;
[14:33:00.114]        // -> [SW_DP_ABORT <= 0x00000000]
[14:33:00.114]      __var DP_CTRL_STAT      = 0x4;
[14:33:00.114]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:33:00.114]      __var DP_SELECT         = 0x8;
[14:33:00.114]        // -> [DP_SELECT <= 0x00000008]
[14:33:00.114]      __var powered_down      = 0;
[14:33:00.114]        // -> [powered_down <= 0x00000000]
[14:33:00.114]      WriteDP(DP_SELECT, 0x00000000);
[14:33:00.114]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:33:00.114]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:33:00.114]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:33:00.114]        // -> [powered_down <= 0x00000001]
[14:33:00.114]    </block>
[14:33:00.114]    <control if="powered_down" while="" timeout="0" info="">
[14:33:00.114]      // if-block "powered_down"
[14:33:00.114]        // =>  TRUE
[14:33:00.114]      <block atomic="false" info="">
[14:33:00.114]        Message(0, "Debug/System power-up request sent");
[14:33:00.120]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:33:00.120]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:33:00.120]      </block>
[14:33:00.120]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:33:00.120]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:33:00.120]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:33:00.120]        // while-condition  =>  FALSE
[14:33:00.120]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:33:00.120]      </control>
[14:33:00.120]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:33:00.120]        // if-block "(__protocol & 0xFFFF) == 1"
[14:33:00.120]          // =>  FALSE
[14:33:00.123]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:33:00.123]      </control>
[14:33:00.123]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:33:00.123]        // if-block "(__protocol & 0xFFFF) == 2"
[14:33:00.123]          // =>  TRUE
[14:33:00.123]        <block atomic="false" info="">
[14:33:00.123]          Message(0, "executing SWD power up");
[14:33:00.123]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:33:00.123]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:33:00.123]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:33:00.123]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:33:00.127]        </block>
[14:33:00.127]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:33:00.127]      </control>
[14:33:00.127]      // end if-block "powered_down"
[14:33:00.127]    </control>
[14:33:00.127]    <block atomic="false" info="">
[14:33:00.127]      __var DEBUG_PORT_VAL    = 0;
[14:33:00.127]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:33:00.127]      __var ACCESS_POINT_VAL  = 0;
[14:33:00.127]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:33:00.127]      __ap = 1; 
[14:33:00.127]        // -> [__ap <= 0x00000001]
[14:33:00.127]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:33:00.127]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:33:00.127]      __ap = 4;
[14:33:00.129]        // -> [__ap <= 0x00000004]
[14:33:00.129]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:33:00.130]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:33:00.130]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:33:00.131]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:33:00.131]    </block>
[14:33:00.131]    <block atomic="false" info="">
[14:33:00.131]      __var nReset = 0x80;
[14:33:00.131]        // -> [nReset <= 0x00000080]
[14:33:00.131]      __var canReadPins = 0;
[14:33:00.131]        // -> [canReadPins <= 0x00000000]
[14:33:00.131]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:33:00.131]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:33:00.131]        // -> [canReadPins <= 0x00000001]
[14:33:00.131]    </block>
[14:33:00.131]    <control if="" while="1" timeout="200" info="">
[14:33:00.131]      // while "1"  (timeout="200")
[14:33:00.131]      // while-condition  =>  TRUE
[14:33:00.131]      // while "1"  (timeout="200")
[14:33:00.131]      // while-condition  =>  TRUE
[14:33:00.131]      // while "1"  (timeout="200")
[14:33:00.131]      // while-condition  =>  TRUE
[14:33:00.131]      // while "1"  (timeout="200")
[14:33:00.131]      // while-condition  =>  TRUE
[14:33:00.131]      // while "1"  (timeout="200")
[14:33:00.131]      // while-condition  =>  TRUE
[14:33:00.131]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.135]      // while-condition  =>  TRUE
[14:33:00.135]      // while "1"  (timeout="200")
[14:33:00.139]      // while-condition  =>  TRUE
[14:33:00.139]      // while "1"  (timeout="200")
[14:33:00.139]      // while-condition  =>  TRUE
[14:33:00.139]      // while "1"  (timeout="200")
[14:33:00.139]      // while-condition  =>  TRUE
[14:33:00.139]      // while "1"  (timeout="200")
[14:33:00.139]      // while-condition  =>  TRUE
[14:33:00.139]      // while "1"  (timeout="200")
[14:33:00.140]      // while-condition  =>  TRUE
[14:33:00.140]      // while "1"  (timeout="200")
[14:33:00.140]      // while-condition  =>  TRUE
[14:33:00.140]      // while "1"  (timeout="200")
[14:33:00.140]      // while-condition  =>  TRUE
[14:33:00.141]      // while "1"  (timeout="200")
[14:33:00.141]      // while-condition  =>  TRUE
[14:33:00.141]      // while "1"  (timeout="200")
[14:33:00.141]      // while-condition  =>  TRUE
[14:33:00.141]      // while "1"  (timeout="200")
[14:33:00.141]      // while-condition  =>  TRUE
[14:33:00.141]      // while "1"  (timeout="200")
[14:33:00.141]      // while-condition  =>  TRUE
[14:33:00.141]      // while "1"  (timeout="200")
[14:33:00.141]      // while-condition  =>  TRUE
[14:33:00.141]      // while "1"  (timeout="200")
[14:33:00.142]      // while-condition  =>  TRUE
[14:33:00.142]      // while "1"  (timeout="200")
[14:33:00.142]      // while-condition  =>  TRUE
[14:33:00.142]      // while "1"  (timeout="200")
[14:33:00.142]      // while-condition  =>  TRUE
[14:33:00.142]      // while "1"  (timeout="200")
[14:33:00.142]      // while-condition  =>  TRUE
[14:33:00.142]      // while "1"  (timeout="200")
[14:33:00.142]      // while-condition  =>  TRUE
[14:33:00.143]      // while "1"  (timeout="200")
[14:33:00.143]      // while-condition  =>  TRUE
[14:33:00.143]      // while "1"  (timeout="200")
[14:33:00.143]      // while-condition  =>  TRUE
[14:33:00.143]      // while "1"  (timeout="200")
[14:33:00.143]      // while-condition  =>  TRUE
[14:33:00.143]      // while "1"  (timeout="200")
[14:33:00.143]      // while-condition  =>  TRUE
[14:33:00.143]      // while "1"  (timeout="200")
[14:33:00.143]      // while-condition  =>  TRUE
[14:33:00.144]      // while "1"  (timeout="200")
[14:33:00.144]      // while-condition  =>  TRUE
[14:33:00.144]      // while "1"  (timeout="200")
[14:33:00.144]      // while-condition  =>  TRUE
[14:33:00.144]      // while "1"  (timeout="200")
[14:33:00.144]      // while-condition  =>  TRUE
[14:33:00.144]      // while "1"  (timeout="200")
[14:33:00.144]      // while-condition  =>  TRUE
[14:33:00.144]      // while "1"  (timeout="200")
[14:33:00.144]      // while-condition  =>  TRUE
[14:33:00.144]      // while "1"  (timeout="200")
[14:33:00.144]      // while-condition  =>  TRUE
[14:33:00.144]      // while "1"  (timeout="200")
[14:33:00.146]      // while-condition  =>  TRUE
[14:33:00.146]      // while "1"  (timeout="200")
[14:33:00.146]      // while  =>  TIMEOUT
[14:33:00.146]      // end while "1"
[14:33:00.146]    </control>
[14:33:00.146]    <control if="canReadPins" while="" timeout="0" info="">
[14:33:00.146]      // if-block "canReadPins"
[14:33:00.146]        // =>  TRUE
[14:33:00.146]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:33:00.146]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:33:00.146]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:33:00.147]        // while-condition  =>  FALSE
[14:33:00.147]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:33:00.147]      </control>
[14:33:00.147]      // end if-block "canReadPins"
[14:33:00.147]    </control>
[14:33:00.147]    <control if="!canReadPins" while="" timeout="0" info="">
[14:33:00.147]      // if-block "!canReadPins"
[14:33:00.147]        // =>  FALSE
[14:33:00.147]      // skip if-block "!canReadPins"
[14:33:00.147]    </control>
[14:33:00.147]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:33:00.147]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:33:00.147]        // =>  TRUE
[14:33:00.147]      <block atomic="false" info="">
[14:33:00.147]        WriteAP(0x00, 0x190008);
[14:33:00.149]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:33:00.149]        WriteAP(0xF0, 0x01);
[14:33:00.150]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:33:00.150]      </block>
[14:33:00.150]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:33:00.151]    </control>
[14:33:00.151]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:33:00.151]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:33:00.151]        // =>  FALSE
[14:33:00.151]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:33:00.151]    </control>
[14:33:00.151]    <block atomic="false" info="">
[14:33:00.151]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:33:00.152]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:33:00.152]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:33:00.152]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:33:00.154]      __ap = 0; //lets make sure we reset the access point selection
[14:33:00.154]        // -> [__ap <= 0x00000000]
[14:33:00.154]    </block>
[14:33:00.154]  </sequence>
[14:33:00.154]  
[14:33:00.160]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:33:00.160]  
[14:33:00.160]  <debugvars>
[14:33:00.160]    // Pre-defined
[14:33:00.160]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:33:00.160]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:33:00.160]    __dp=0x00000000
[14:33:00.160]    __ap=0x00000000
[14:33:00.160]    __traceout=0x00000000      (Trace Disabled)
[14:33:00.160]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:33:00.160]    __FlashAddr=0x00000000
[14:33:00.160]    __FlashLen=0x00000000
[14:33:00.160]    __FlashArg=0x00000000
[14:33:00.160]    __FlashOp=0x00000000
[14:33:00.160]    __Result=0x00000000
[14:33:00.160]  </debugvars>
[14:33:00.160]  
[14:33:00.163]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:33:00.163]    <block atomic="false" info="">
[14:33:00.163]      __var deviceID = 0;
[14:33:00.163]        // -> [deviceID <= 0x00000000]
[14:33:00.163]      __var version = 0;
[14:33:00.163]        // -> [version <= 0x00000000]
[14:33:00.163]      __var partNum = 0;
[14:33:00.163]        // -> [partNum <= 0x00000000]
[14:33:00.163]      __var manuf = 0;
[14:33:00.163]        // -> [manuf <= 0x00000000]
[14:33:00.163]      __var isMSPM0G1X0X_G3X0X = 0;
[14:33:00.163]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:33:00.163]      __var isProduction = 0;
[14:33:00.163]        // -> [isProduction <= 0x00000000]
[14:33:00.163]      __var continueId = 0;
[14:33:00.163]        // -> [continueId <= 0x00000000]
[14:33:00.163]      deviceID =   Read32(0x41C40004);
[14:33:00.163]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:33:00.163]        // -> [deviceID <= 0x2BB8802F]
[14:33:00.163]      version = deviceID >> 28;
[14:33:00.163]        // -> [version <= 0x00000002]
[14:33:00.167]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:33:00.167]        // -> [partNum <= 0x0000BB88]
[14:33:00.167]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:33:00.167]        // -> [manuf <= 0x00000017]
[14:33:00.167]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:33:00.167]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:33:00.167]      isProduction = (version > 0);
[14:33:00.167]        // -> [isProduction <= 0x00000001]
[14:33:00.167]    </block>
[14:33:00.167]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:33:00.167]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:33:00.167]        // =>  FALSE
[14:33:00.167]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:33:00.167]    </control>
[14:33:00.169]    <control if="continueId == 4" while="" timeout="0" info="">
[14:33:00.169]      // if-block "continueId == 4"
[14:33:00.169]        // =>  FALSE
[14:33:00.169]      // skip if-block "continueId == 4"
[14:33:00.169]    </control>
[14:33:00.169]    <control if="!isProduction" while="" timeout="0" info="">
[14:33:00.169]      // if-block "!isProduction"
[14:33:00.169]        // =>  FALSE
[14:33:00.169]      // skip if-block "!isProduction"
[14:33:00.169]    </control>
[14:33:00.169]  </sequence>
[14:33:00.169]  
[14:37:45.767]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:37:45.767]  
[14:37:45.767]  <debugvars>
[14:37:45.767]    // Pre-defined
[14:37:45.767]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:37:45.767]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:37:45.767]    __dp=0x00000000
[14:37:45.767]    __ap=0x00000000
[14:37:45.771]    __traceout=0x00000000      (Trace Disabled)
[14:37:45.771]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:37:45.771]    __FlashAddr=0x00000000
[14:37:45.771]    __FlashLen=0x00000000
[14:37:45.771]    __FlashArg=0x00000000
[14:37:45.771]    __FlashOp=0x00000000
[14:37:45.771]    __Result=0x00000000
[14:37:45.771]  </debugvars>
[14:37:45.771]  
[14:37:45.771]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:37:45.772]    <block atomic="false" info="">
[14:37:45.773]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:37:45.773]        // -> [isSWJ <= 0x00000001]
[14:37:45.773]      __var hasDormant = __protocol & 0x00020000;
[14:37:45.773]        // -> [hasDormant <= 0x00000000]
[14:37:45.773]      __var protType   = __protocol & 0x0000FFFF;
[14:37:45.773]        // -> [protType <= 0x00000002]
[14:37:45.773]    </block>
[14:37:45.773]    <control if="protType == 1" while="" timeout="0" info="">
[14:37:45.774]      // if-block "protType == 1"
[14:37:45.774]        // =>  FALSE
[14:37:45.774]      // skip if-block "protType == 1"
[14:37:45.774]    </control>
[14:37:45.774]    <control if="protType == 2" while="" timeout="0" info="">
[14:37:45.774]      // if-block "protType == 2"
[14:37:45.774]        // =>  TRUE
[14:37:45.774]      <control if="isSWJ" while="" timeout="0" info="">
[14:37:45.774]        // if-block "isSWJ"
[14:37:45.774]          // =>  TRUE
[14:37:45.774]        <control if="hasDormant" while="" timeout="0" info="">
[14:37:45.774]          // if-block "hasDormant"
[14:37:45.774]            // =>  FALSE
[14:37:45.774]          // skip if-block "hasDormant"
[14:37:45.775]        </control>
[14:37:45.775]        <control if="!hasDormant" while="" timeout="0" info="">
[14:37:45.775]          // if-block "!hasDormant"
[14:37:45.775]            // =>  TRUE
[14:37:45.775]          <block atomic="false" info="">
[14:37:45.775]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:37:45.775]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:37:45.776]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:37:45.776]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:37:45.776]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:37:45.776]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:37:45.777]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:37:45.777]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:37:45.777]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:37:45.778]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:37:45.778]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:37:45.778]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:37:45.778]          </block>
[14:37:45.778]          // end if-block "!hasDormant"
[14:37:45.778]        </control>
[14:37:45.778]        // end if-block "isSWJ"
[14:37:45.778]      </control>
[14:37:45.779]      <control if="!isSWJ" while="" timeout="0" info="">
[14:37:45.779]        // if-block "!isSWJ"
[14:37:45.779]          // =>  FALSE
[14:37:45.779]        // skip if-block "!isSWJ"
[14:37:45.779]      </control>
[14:37:45.779]      <block atomic="false" info="">
[14:37:45.779]        ReadDP(0x0);
[14:37:45.780]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:37:45.781]      </block>
[14:37:45.781]      // end if-block "protType == 2"
[14:37:45.781]    </control>
[14:37:45.781]  </sequence>
[14:37:45.781]  
[14:37:45.781]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:37:45.781]  
[14:37:45.781]  <debugvars>
[14:37:45.782]    // Pre-defined
[14:37:45.782]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:37:45.782]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:37:45.782]    __dp=0x00000000
[14:37:45.782]    __ap=0x00000000
[14:37:45.782]    __traceout=0x00000000      (Trace Disabled)
[14:37:45.782]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:37:45.782]    __FlashAddr=0x00000000
[14:37:45.782]    __FlashLen=0x00000000
[14:37:45.782]    __FlashArg=0x00000000
[14:37:45.782]    __FlashOp=0x00000000
[14:37:45.782]    __Result=0x00000000
[14:37:45.782]  </debugvars>
[14:37:45.782]  
[14:37:45.782]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:37:45.784]    <block atomic="false" info="">
[14:37:45.784]      __var SW_DP_ABORT       = 0x0;
[14:37:45.784]        // -> [SW_DP_ABORT <= 0x00000000]
[14:37:45.784]      __var DP_CTRL_STAT      = 0x4;
[14:37:45.784]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:37:45.784]      __var DP_SELECT         = 0x8;
[14:37:45.784]        // -> [DP_SELECT <= 0x00000008]
[14:37:45.784]      __var powered_down      = 0;
[14:37:45.784]        // -> [powered_down <= 0x00000000]
[14:37:45.784]      WriteDP(DP_SELECT, 0x00000000);
[14:37:45.784]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:37:45.784]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:37:45.784]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:37:45.784]        // -> [powered_down <= 0x00000001]
[14:37:45.784]    </block>
[14:37:45.786]    <control if="powered_down" while="" timeout="0" info="">
[14:37:45.786]      // if-block "powered_down"
[14:37:45.786]        // =>  TRUE
[14:37:45.786]      <block atomic="false" info="">
[14:37:45.786]        Message(0, "Debug/System power-up request sent");
[14:37:45.788]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:37:45.788]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:37:45.788]      </block>
[14:37:45.788]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:37:45.788]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:37:45.788]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:37:45.788]        // while-condition  =>  FALSE
[14:37:45.788]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:37:45.788]      </control>
[14:37:45.788]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:37:45.788]        // if-block "(__protocol & 0xFFFF) == 1"
[14:37:45.788]          // =>  FALSE
[14:37:45.788]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:37:45.788]      </control>
[14:37:45.788]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:37:45.788]        // if-block "(__protocol & 0xFFFF) == 2"
[14:37:45.788]          // =>  TRUE
[14:37:45.788]        <block atomic="false" info="">
[14:37:45.788]          Message(0, "executing SWD power up");
[14:37:45.793]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:37:45.793]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:37:45.793]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:37:45.795]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:37:45.795]        </block>
[14:37:45.795]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:37:45.795]      </control>
[14:37:45.795]      // end if-block "powered_down"
[14:37:45.795]    </control>
[14:37:45.795]    <block atomic="false" info="">
[14:37:45.795]      __var DEBUG_PORT_VAL    = 0;
[14:37:45.796]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:37:45.796]      __var ACCESS_POINT_VAL  = 0;
[14:37:45.796]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:37:45.797]      __ap = 1; 
[14:37:45.797]        // -> [__ap <= 0x00000001]
[14:37:45.797]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:37:45.798]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:37:45.798]      __ap = 4;
[14:37:45.798]        // -> [__ap <= 0x00000004]
[14:37:45.798]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:37:45.800]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:37:45.800]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:37:45.800]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:37:45.801]    </block>
[14:37:45.802]    <block atomic="false" info="">
[14:37:45.802]      __var nReset = 0x80;
[14:37:45.802]        // -> [nReset <= 0x00000080]
[14:37:45.802]      __var canReadPins = 0;
[14:37:45.802]        // -> [canReadPins <= 0x00000000]
[14:37:45.802]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:37:45.802]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:37:45.803]        // -> [canReadPins <= 0x00000001]
[14:37:45.803]    </block>
[14:37:45.803]    <control if="" while="1" timeout="200" info="">
[14:37:45.803]      // while "1"  (timeout="200")
[14:37:45.803]      // while-condition  =>  TRUE
[14:37:45.803]      // while "1"  (timeout="200")
[14:37:45.803]      // while-condition  =>  TRUE
[14:37:45.803]      // while "1"  (timeout="200")
[14:37:45.803]      // while-condition  =>  TRUE
[14:37:45.805]      // while "1"  (timeout="200")
[14:37:45.805]      // while-condition  =>  TRUE
[14:37:45.805]      // while "1"  (timeout="200")
[14:37:45.805]      // while-condition  =>  TRUE
[14:37:45.805]      // while "1"  (timeout="200")
[14:37:45.805]      // while-condition  =>  TRUE
[14:37:45.805]      // while "1"  (timeout="200")
[14:37:45.805]      // while-condition  =>  TRUE
[14:37:45.805]      // while "1"  (timeout="200")
[14:37:45.805]      // while-condition  =>  TRUE
[14:37:45.805]      // while "1"  (timeout="200")
[14:37:45.805]      // while-condition  =>  TRUE
[14:37:45.805]      // while "1"  (timeout="200")
[14:37:45.805]      // while-condition  =>  TRUE
[14:37:45.805]      // while "1"  (timeout="200")
[14:37:45.805]      // while-condition  =>  TRUE
[14:37:45.805]      // while "1"  (timeout="200")
[14:37:45.805]      // while-condition  =>  TRUE
[14:37:45.807]      // while "1"  (timeout="200")
[14:37:45.807]      // while-condition  =>  TRUE
[14:37:45.807]      // while "1"  (timeout="200")
[14:37:45.807]      // while-condition  =>  TRUE
[14:37:45.807]      // while "1"  (timeout="200")
[14:37:45.807]      // while-condition  =>  TRUE
[14:37:45.807]      // while "1"  (timeout="200")
[14:37:45.807]      // while-condition  =>  TRUE
[14:37:45.807]      // while "1"  (timeout="200")
[14:37:45.807]      // while-condition  =>  TRUE
[14:37:45.807]      // while "1"  (timeout="200")
[14:37:45.808]      // while-condition  =>  TRUE
[14:37:45.808]      // while "1"  (timeout="200")
[14:37:45.808]      // while-condition  =>  TRUE
[14:37:45.808]      // while "1"  (timeout="200")
[14:37:45.808]      // while-condition  =>  TRUE
[14:37:45.808]      // while "1"  (timeout="200")
[14:37:45.808]      // while-condition  =>  TRUE
[14:37:45.808]      // while "1"  (timeout="200")
[14:37:45.808]      // while-condition  =>  TRUE
[14:37:45.808]      // while "1"  (timeout="200")
[14:37:45.809]      // while-condition  =>  TRUE
[14:37:45.809]      // while "1"  (timeout="200")
[14:37:45.809]      // while-condition  =>  TRUE
[14:37:45.809]      // while "1"  (timeout="200")
[14:37:45.809]      // while-condition  =>  TRUE
[14:37:45.809]      // while "1"  (timeout="200")
[14:37:45.809]      // while-condition  =>  TRUE
[14:37:45.809]      // while "1"  (timeout="200")
[14:37:45.809]      // while-condition  =>  TRUE
[14:37:45.810]      // while "1"  (timeout="200")
[14:37:45.810]      // while-condition  =>  TRUE
[14:37:45.810]      // while "1"  (timeout="200")
[14:37:45.810]      // while-condition  =>  TRUE
[14:37:45.810]      // while "1"  (timeout="200")
[14:37:45.810]      // while-condition  =>  TRUE
[14:37:45.810]      // while "1"  (timeout="200")
[14:37:45.810]      // while-condition  =>  TRUE
[14:37:45.810]      // while "1"  (timeout="200")
[14:37:45.811]      // while-condition  =>  TRUE
[14:37:45.811]      // while "1"  (timeout="200")
[14:37:45.811]      // while-condition  =>  TRUE
[14:37:45.811]      // while "1"  (timeout="200")
[14:37:45.811]      // while-condition  =>  TRUE
[14:37:45.811]      // while "1"  (timeout="200")
[14:37:45.811]      // while-condition  =>  TRUE
[14:37:45.811]      // while "1"  (timeout="200")
[14:37:45.811]      // while-condition  =>  TRUE
[14:37:45.811]      // while "1"  (timeout="200")
[14:37:45.811]      // while-condition  =>  TRUE
[14:37:45.812]      // while "1"  (timeout="200")
[14:37:45.812]      // while-condition  =>  TRUE
[14:37:45.812]      // while "1"  (timeout="200")
[14:37:45.812]      // while-condition  =>  TRUE
[14:37:45.812]      // while "1"  (timeout="200")
[14:37:45.812]      // while-condition  =>  TRUE
[14:37:45.812]      // while "1"  (timeout="200")
[14:37:45.812]      // while-condition  =>  TRUE
[14:37:45.812]      // while "1"  (timeout="200")
[14:37:45.812]      // while-condition  =>  TRUE
[14:37:45.813]      // while "1"  (timeout="200")
[14:37:45.813]      // while-condition  =>  TRUE
[14:37:45.813]      // while "1"  (timeout="200")
[14:37:45.813]      // while-condition  =>  TRUE
[14:37:45.813]      // while "1"  (timeout="200")
[14:37:45.813]      // while-condition  =>  TRUE
[14:37:45.813]      // while "1"  (timeout="200")
[14:37:45.813]      // while-condition  =>  TRUE
[14:37:45.813]      // while "1"  (timeout="200")
[14:37:45.813]      // while-condition  =>  TRUE
[14:37:45.813]      // while "1"  (timeout="200")
[14:37:45.813]      // while-condition  =>  TRUE
[14:37:45.813]      // while "1"  (timeout="200")
[14:37:45.813]      // while-condition  =>  TRUE
[14:37:45.813]      // while "1"  (timeout="200")
[14:37:45.813]      // while-condition  =>  TRUE
[14:37:45.813]      // while "1"  (timeout="200")
[14:37:45.813]      // while-condition  =>  TRUE
[14:37:45.813]      // while "1"  (timeout="200")
[14:37:45.813]      // while-condition  =>  TRUE
[14:37:45.813]      // while "1"  (timeout="200")
[14:37:45.813]      // while-condition  =>  TRUE
[14:37:45.813]      // while "1"  (timeout="200")
[14:37:45.813]      // while-condition  =>  TRUE
[14:37:45.816]      // while "1"  (timeout="200")
[14:37:45.816]      // while  =>  TIMEOUT
[14:37:45.816]      // end while "1"
[14:37:45.816]    </control>
[14:37:45.816]    <control if="canReadPins" while="" timeout="0" info="">
[14:37:45.817]      // if-block "canReadPins"
[14:37:45.817]        // =>  TRUE
[14:37:45.817]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:37:45.817]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:37:45.817]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:37:45.817]        // while-condition  =>  FALSE
[14:37:45.817]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:37:45.817]      </control>
[14:37:45.817]      // end if-block "canReadPins"
[14:37:45.817]    </control>
[14:37:45.817]    <control if="!canReadPins" while="" timeout="0" info="">
[14:37:45.819]      // if-block "!canReadPins"
[14:37:45.819]        // =>  FALSE
[14:37:45.819]      // skip if-block "!canReadPins"
[14:37:45.819]    </control>
[14:37:45.819]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:37:45.819]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:37:45.819]        // =>  TRUE
[14:37:45.820]      <block atomic="false" info="">
[14:37:45.820]        WriteAP(0x00, 0x190008);
[14:37:45.820]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:37:45.820]        WriteAP(0xF0, 0x01);
[14:37:45.821]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:37:45.821]      </block>
[14:37:45.821]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:37:45.821]    </control>
[14:37:45.821]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:37:45.821]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:37:45.821]        // =>  FALSE
[14:37:45.821]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:37:45.821]    </control>
[14:37:45.821]    <block atomic="false" info="">
[14:37:45.821]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:37:45.823]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:37:45.825]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:37:45.825]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:37:45.826]      __ap = 0; //lets make sure we reset the access point selection
[14:37:45.826]        // -> [__ap <= 0x00000000]
[14:37:45.826]    </block>
[14:37:45.827]  </sequence>
[14:37:45.827]  
[14:37:45.832]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:37:45.832]  
[14:37:45.832]  <debugvars>
[14:37:45.832]    // Pre-defined
[14:37:45.832]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:37:45.832]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:37:45.834]    __dp=0x00000000
[14:37:45.834]    __ap=0x00000000
[14:37:45.834]    __traceout=0x00000000      (Trace Disabled)
[14:37:45.834]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:37:45.834]    __FlashAddr=0x00000000
[14:37:45.834]    __FlashLen=0x00000000
[14:37:45.834]    __FlashArg=0x00000000
[14:37:45.834]    __FlashOp=0x00000000
[14:37:45.834]    __Result=0x00000000
[14:37:45.834]  </debugvars>
[14:37:45.834]  
[14:37:45.834]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:37:45.834]    <block atomic="false" info="">
[14:37:45.834]      __var deviceID = 0;
[14:37:45.834]        // -> [deviceID <= 0x00000000]
[14:37:45.834]      __var version = 0;
[14:37:45.834]        // -> [version <= 0x00000000]
[14:37:45.834]      __var partNum = 0;
[14:37:45.834]        // -> [partNum <= 0x00000000]
[14:37:45.834]      __var manuf = 0;
[14:37:45.834]        // -> [manuf <= 0x00000000]
[14:37:45.834]      __var isMSPM0G1X0X_G3X0X = 0;
[14:37:45.834]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:37:45.837]      __var isProduction = 0;
[14:37:45.837]        // -> [isProduction <= 0x00000000]
[14:37:45.837]      __var continueId = 0;
[14:37:45.837]        // -> [continueId <= 0x00000000]
[14:37:45.837]      deviceID =   Read32(0x41C40004);
[14:37:45.838]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:37:45.838]        // -> [deviceID <= 0x2BB8802F]
[14:37:45.838]      version = deviceID >> 28;
[14:37:45.838]        // -> [version <= 0x00000002]
[14:37:45.838]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:37:45.838]        // -> [partNum <= 0x0000BB88]
[14:37:45.838]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:37:45.838]        // -> [manuf <= 0x00000017]
[14:37:45.838]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:37:45.838]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:37:45.838]      isProduction = (version > 0);
[14:37:45.838]        // -> [isProduction <= 0x00000001]
[14:37:45.840]    </block>
[14:37:45.840]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:37:45.840]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:37:45.840]        // =>  FALSE
[14:37:45.840]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:37:45.840]    </control>
[14:37:45.840]    <control if="continueId == 4" while="" timeout="0" info="">
[14:37:45.840]      // if-block "continueId == 4"
[14:37:45.840]        // =>  FALSE
[14:37:45.840]      // skip if-block "continueId == 4"
[14:37:45.842]    </control>
[14:37:45.842]    <control if="!isProduction" while="" timeout="0" info="">
[14:37:45.842]      // if-block "!isProduction"
[14:37:45.842]        // =>  FALSE
[14:37:45.842]      // skip if-block "!isProduction"
[14:37:45.842]    </control>
[14:37:45.842]  </sequence>
[14:37:45.842]  
[14:38:10.545]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:38:10.545]  
[14:38:10.555]  <debugvars>
[14:38:10.555]    // Pre-defined
[14:38:10.555]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:38:10.555]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:38:10.555]    __dp=0x00000000
[14:38:10.555]    __ap=0x00000000
[14:38:10.555]    __traceout=0x00000000      (Trace Disabled)
[14:38:10.555]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:38:10.555]    __FlashAddr=0x00000000
[14:38:10.555]    __FlashLen=0x00000000
[14:38:10.555]    __FlashArg=0x00000000
[14:38:10.555]    __FlashOp=0x00000000
[14:38:10.555]    __Result=0x00000000
[14:38:10.555]  </debugvars>
[14:38:10.555]  
[14:38:10.555]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:38:10.555]    <block atomic="false" info="">
[14:38:10.555]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:38:10.555]        // -> [isSWJ <= 0x00000001]
[14:38:10.555]      __var hasDormant = __protocol & 0x00020000;
[14:38:10.557]        // -> [hasDormant <= 0x00000000]
[14:38:10.557]      __var protType   = __protocol & 0x0000FFFF;
[14:38:10.557]        // -> [protType <= 0x00000002]
[14:38:10.557]    </block>
[14:38:10.557]    <control if="protType == 1" while="" timeout="0" info="">
[14:38:10.557]      // if-block "protType == 1"
[14:38:10.557]        // =>  FALSE
[14:38:10.557]      // skip if-block "protType == 1"
[14:38:10.557]    </control>
[14:38:10.557]    <control if="protType == 2" while="" timeout="0" info="">
[14:38:10.557]      // if-block "protType == 2"
[14:38:10.557]        // =>  TRUE
[14:38:10.557]      <control if="isSWJ" while="" timeout="0" info="">
[14:38:10.557]        // if-block "isSWJ"
[14:38:10.557]          // =>  TRUE
[14:38:10.557]        <control if="hasDormant" while="" timeout="0" info="">
[14:38:10.557]          // if-block "hasDormant"
[14:38:10.557]            // =>  FALSE
[14:38:10.557]          // skip if-block "hasDormant"
[14:38:10.557]        </control>
[14:38:10.557]        <control if="!hasDormant" while="" timeout="0" info="">
[14:38:10.557]          // if-block "!hasDormant"
[14:38:10.557]            // =>  TRUE
[14:38:10.557]          <block atomic="false" info="">
[14:38:10.557]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:38:10.557]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:38:10.557]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:38:10.557]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:38:10.557]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:38:10.557]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:38:10.557]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:38:10.561]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:38:10.561]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:38:10.561]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:38:10.561]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:38:10.561]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:38:10.561]          </block>
[14:38:10.561]          // end if-block "!hasDormant"
[14:38:10.561]        </control>
[14:38:10.561]        // end if-block "isSWJ"
[14:38:10.561]      </control>
[14:38:10.561]      <control if="!isSWJ" while="" timeout="0" info="">
[14:38:10.561]        // if-block "!isSWJ"
[14:38:10.561]          // =>  FALSE
[14:38:10.561]        // skip if-block "!isSWJ"
[14:38:10.561]      </control>
[14:38:10.561]      <block atomic="false" info="">
[14:38:10.561]        ReadDP(0x0);
[14:38:10.561]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:38:10.561]      </block>
[14:38:10.561]      // end if-block "protType == 2"
[14:38:10.561]    </control>
[14:38:10.561]  </sequence>
[14:38:10.561]  
[14:38:10.561]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:38:10.561]  
[14:38:10.561]  <debugvars>
[14:38:10.565]    // Pre-defined
[14:38:10.565]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:38:10.565]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:38:10.565]    __dp=0x00000000
[14:38:10.565]    __ap=0x00000000
[14:38:10.565]    __traceout=0x00000000      (Trace Disabled)
[14:38:10.565]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:38:10.565]    __FlashAddr=0x00000000
[14:38:10.565]    __FlashLen=0x00000000
[14:38:10.565]    __FlashArg=0x00000000
[14:38:10.565]    __FlashOp=0x00000000
[14:38:10.565]    __Result=0x00000000
[14:38:10.565]  </debugvars>
[14:38:10.565]  
[14:38:10.565]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:38:10.565]    <block atomic="false" info="">
[14:38:10.565]      __var SW_DP_ABORT       = 0x0;
[14:38:10.565]        // -> [SW_DP_ABORT <= 0x00000000]
[14:38:10.565]      __var DP_CTRL_STAT      = 0x4;
[14:38:10.565]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:38:10.565]      __var DP_SELECT         = 0x8;
[14:38:10.565]        // -> [DP_SELECT <= 0x00000008]
[14:38:10.565]      __var powered_down      = 0;
[14:38:10.565]        // -> [powered_down <= 0x00000000]
[14:38:10.565]      WriteDP(DP_SELECT, 0x00000000);
[14:38:10.565]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:38:10.565]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:38:10.565]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:38:10.569]        // -> [powered_down <= 0x00000001]
[14:38:10.569]    </block>
[14:38:10.569]    <control if="powered_down" while="" timeout="0" info="">
[14:38:10.569]      // if-block "powered_down"
[14:38:10.569]        // =>  TRUE
[14:38:10.569]      <block atomic="false" info="">
[14:38:10.569]        Message(0, "Debug/System power-up request sent");
[14:38:10.569]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:38:10.573]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:38:10.573]      </block>
[14:38:10.573]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:38:10.573]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:38:10.573]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:38:10.573]        // while-condition  =>  FALSE
[14:38:10.573]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:38:10.573]      </control>
[14:38:10.573]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:38:10.573]        // if-block "(__protocol & 0xFFFF) == 1"
[14:38:10.573]          // =>  FALSE
[14:38:10.573]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:38:10.573]      </control>
[14:38:10.573]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:38:10.573]        // if-block "(__protocol & 0xFFFF) == 2"
[14:38:10.573]          // =>  TRUE
[14:38:10.573]        <block atomic="false" info="">
[14:38:10.573]          Message(0, "executing SWD power up");
[14:38:10.573]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:38:10.577]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:38:10.577]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:38:10.577]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:38:10.577]        </block>
[14:38:10.577]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:38:10.577]      </control>
[14:38:10.577]      // end if-block "powered_down"
[14:38:10.577]    </control>
[14:38:10.577]    <block atomic="false" info="">
[14:38:10.577]      __var DEBUG_PORT_VAL    = 0;
[14:38:10.577]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:38:10.577]      __var ACCESS_POINT_VAL  = 0;
[14:38:10.577]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:38:10.577]      __ap = 1; 
[14:38:10.577]        // -> [__ap <= 0x00000001]
[14:38:10.577]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:38:10.577]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:38:10.577]      __ap = 4;
[14:38:10.577]        // -> [__ap <= 0x00000004]
[14:38:10.577]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:38:10.581]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:38:10.581]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:38:10.581]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:38:10.581]    </block>
[14:38:10.581]    <block atomic="false" info="">
[14:38:10.581]      __var nReset = 0x80;
[14:38:10.581]        // -> [nReset <= 0x00000080]
[14:38:10.581]      __var canReadPins = 0;
[14:38:10.581]        // -> [canReadPins <= 0x00000000]
[14:38:10.581]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:38:10.581]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:38:10.581]        // -> [canReadPins <= 0x00000001]
[14:38:10.581]    </block>
[14:38:10.581]    <control if="" while="1" timeout="200" info="">
[14:38:10.581]      // while "1"  (timeout="200")
[14:38:10.581]      // while-condition  =>  TRUE
[14:38:10.581]      // while "1"  (timeout="200")
[14:38:10.581]      // while-condition  =>  TRUE
[14:38:10.585]      // while "1"  (timeout="200")
[14:38:10.585]      // while  =>  TIMEOUT
[14:38:10.585]      // end while "1"
[14:38:10.585]    </control>
[14:38:10.585]    <control if="canReadPins" while="" timeout="0" info="">
[14:38:10.585]      // if-block "canReadPins"
[14:38:10.585]        // =>  TRUE
[14:38:10.585]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:38:10.585]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:38:10.585]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:38:10.585]        // while-condition  =>  FALSE
[14:38:10.585]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:38:10.585]      </control>
[14:38:10.585]      // end if-block "canReadPins"
[14:38:10.585]    </control>
[14:38:10.585]    <control if="!canReadPins" while="" timeout="0" info="">
[14:38:10.585]      // if-block "!canReadPins"
[14:38:10.585]        // =>  FALSE
[14:38:10.585]      // skip if-block "!canReadPins"
[14:38:10.585]    </control>
[14:38:10.585]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:38:10.585]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:38:10.585]        // =>  TRUE
[14:38:10.585]      <block atomic="false" info="">
[14:38:10.585]        WriteAP(0x00, 0x190008);
[14:38:10.585]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:38:10.585]        WriteAP(0xF0, 0x01);
[14:38:10.589]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:38:10.589]      </block>
[14:38:10.589]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:38:10.589]    </control>
[14:38:10.589]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:38:10.589]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:38:10.589]        // =>  FALSE
[14:38:10.589]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:38:10.589]    </control>
[14:38:10.589]    <block atomic="false" info="">
[14:38:10.589]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:38:10.589]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:38:10.589]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:38:10.589]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:38:10.593]      __ap = 0; //lets make sure we reset the access point selection
[14:38:10.593]        // -> [__ap <= 0x00000000]
[14:38:10.593]    </block>
[14:38:10.593]  </sequence>
[14:38:10.593]  
[14:38:10.597]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:38:10.597]  
[14:38:10.597]  <debugvars>
[14:38:10.597]    // Pre-defined
[14:38:10.597]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:38:10.597]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:38:10.597]    __dp=0x00000000
[14:38:10.597]    __ap=0x00000000
[14:38:10.597]    __traceout=0x00000000      (Trace Disabled)
[14:38:10.597]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:38:10.597]    __FlashAddr=0x00000000
[14:38:10.597]    __FlashLen=0x00000000
[14:38:10.597]    __FlashArg=0x00000000
[14:38:10.597]    __FlashOp=0x00000000
[14:38:10.601]    __Result=0x00000000
[14:38:10.601]  </debugvars>
[14:38:10.601]  
[14:38:10.601]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:38:10.601]    <block atomic="false" info="">
[14:38:10.601]      __var deviceID = 0;
[14:38:10.601]        // -> [deviceID <= 0x00000000]
[14:38:10.601]      __var version = 0;
[14:38:10.601]        // -> [version <= 0x00000000]
[14:38:10.601]      __var partNum = 0;
[14:38:10.601]        // -> [partNum <= 0x00000000]
[14:38:10.601]      __var manuf = 0;
[14:38:10.601]        // -> [manuf <= 0x00000000]
[14:38:10.601]      __var isMSPM0G1X0X_G3X0X = 0;
[14:38:10.601]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:38:10.601]      __var isProduction = 0;
[14:38:10.601]        // -> [isProduction <= 0x00000000]
[14:38:10.601]      __var continueId = 0;
[14:38:10.601]        // -> [continueId <= 0x00000000]
[14:38:10.601]      deviceID =   Read32(0x41C40004);
[14:38:10.601]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:38:10.601]        // -> [deviceID <= 0x2BB8802F]
[14:38:10.601]      version = deviceID >> 28;
[14:38:10.601]        // -> [version <= 0x00000002]
[14:38:10.601]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:38:10.601]        // -> [partNum <= 0x0000BB88]
[14:38:10.605]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:38:10.605]        // -> [manuf <= 0x00000017]
[14:38:10.605]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:38:10.605]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:38:10.605]      isProduction = (version > 0);
[14:38:10.605]        // -> [isProduction <= 0x00000001]
[14:38:10.605]    </block>
[14:38:10.605]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:38:10.605]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:38:10.605]        // =>  FALSE
[14:38:10.605]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:38:10.605]    </control>
[14:38:10.605]    <control if="continueId == 4" while="" timeout="0" info="">
[14:38:10.605]      // if-block "continueId == 4"
[14:38:10.605]        // =>  FALSE
[14:38:10.605]      // skip if-block "continueId == 4"
[14:38:10.605]    </control>
[14:38:10.605]    <control if="!isProduction" while="" timeout="0" info="">
[14:38:10.605]      // if-block "!isProduction"
[14:38:10.605]        // =>  FALSE
[14:38:10.605]      // skip if-block "!isProduction"
[14:38:10.605]    </control>
[14:38:10.605]  </sequence>
[14:38:10.605]  
[14:40:23.453]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:40:23.453]  
[14:40:23.453]  <debugvars>
[14:40:23.454]    // Pre-defined
[14:40:23.454]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:40:23.454]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:40:23.454]    __dp=0x00000000
[14:40:23.454]    __ap=0x00000000
[14:40:23.454]    __traceout=0x00000000      (Trace Disabled)
[14:40:23.454]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:40:23.454]    __FlashAddr=0x00000000
[14:40:23.454]    __FlashLen=0x00000000
[14:40:23.454]    __FlashArg=0x00000000
[14:40:23.454]    __FlashOp=0x00000000
[14:40:23.454]    __Result=0x00000000
[14:40:23.455]  </debugvars>
[14:40:23.455]  
[14:40:23.455]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:40:23.455]    <block atomic="false" info="">
[14:40:23.455]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:40:23.455]        // -> [isSWJ <= 0x00000001]
[14:40:23.455]      __var hasDormant = __protocol & 0x00020000;
[14:40:23.455]        // -> [hasDormant <= 0x00000000]
[14:40:23.455]      __var protType   = __protocol & 0x0000FFFF;
[14:40:23.455]        // -> [protType <= 0x00000002]
[14:40:23.455]    </block>
[14:40:23.455]    <control if="protType == 1" while="" timeout="0" info="">
[14:40:23.455]      // if-block "protType == 1"
[14:40:23.455]        // =>  FALSE
[14:40:23.455]      // skip if-block "protType == 1"
[14:40:23.455]    </control>
[14:40:23.455]    <control if="protType == 2" while="" timeout="0" info="">
[14:40:23.455]      // if-block "protType == 2"
[14:40:23.455]        // =>  TRUE
[14:40:23.455]      <control if="isSWJ" while="" timeout="0" info="">
[14:40:23.455]        // if-block "isSWJ"
[14:40:23.457]          // =>  TRUE
[14:40:23.457]        <control if="hasDormant" while="" timeout="0" info="">
[14:40:23.457]          // if-block "hasDormant"
[14:40:23.457]            // =>  FALSE
[14:40:23.457]          // skip if-block "hasDormant"
[14:40:23.457]        </control>
[14:40:23.457]        <control if="!hasDormant" while="" timeout="0" info="">
[14:40:23.457]          // if-block "!hasDormant"
[14:40:23.457]            // =>  TRUE
[14:40:23.457]          <block atomic="false" info="">
[14:40:23.457]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:40:23.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:40:23.458]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:40:23.458]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:40:23.458]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:40:23.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:40:23.458]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:40:23.458]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:40:23.458]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:40:23.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:40:23.458]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:40:23.458]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:40:23.461]          </block>
[14:40:23.461]          // end if-block "!hasDormant"
[14:40:23.461]        </control>
[14:40:23.461]        // end if-block "isSWJ"
[14:40:23.461]      </control>
[14:40:23.461]      <control if="!isSWJ" while="" timeout="0" info="">
[14:40:23.461]        // if-block "!isSWJ"
[14:40:23.461]          // =>  FALSE
[14:40:23.461]        // skip if-block "!isSWJ"
[14:40:23.461]      </control>
[14:40:23.461]      <block atomic="false" info="">
[14:40:23.461]        ReadDP(0x0);
[14:40:23.463]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:40:23.463]      </block>
[14:40:23.463]      // end if-block "protType == 2"
[14:40:23.463]    </control>
[14:40:23.463]  </sequence>
[14:40:23.463]  
[14:40:23.463]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:40:23.463]  
[14:40:23.464]  <debugvars>
[14:40:23.464]    // Pre-defined
[14:40:23.464]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:40:23.464]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:40:23.464]    __dp=0x00000000
[14:40:23.464]    __ap=0x00000000
[14:40:23.464]    __traceout=0x00000000      (Trace Disabled)
[14:40:23.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:40:23.464]    __FlashAddr=0x00000000
[14:40:23.464]    __FlashLen=0x00000000
[14:40:23.464]    __FlashArg=0x00000000
[14:40:23.464]    __FlashOp=0x00000000
[14:40:23.464]    __Result=0x00000000
[14:40:23.464]  </debugvars>
[14:40:23.464]  
[14:40:23.464]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:40:23.464]    <block atomic="false" info="">
[14:40:23.464]      __var SW_DP_ABORT       = 0x0;
[14:40:23.464]        // -> [SW_DP_ABORT <= 0x00000000]
[14:40:23.464]      __var DP_CTRL_STAT      = 0x4;
[14:40:23.464]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:40:23.464]      __var DP_SELECT         = 0x8;
[14:40:23.464]        // -> [DP_SELECT <= 0x00000008]
[14:40:23.464]      __var powered_down      = 0;
[14:40:23.464]        // -> [powered_down <= 0x00000000]
[14:40:23.467]      WriteDP(DP_SELECT, 0x00000000);
[14:40:23.467]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:40:23.467]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:40:23.467]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:40:23.467]        // -> [powered_down <= 0x00000001]
[14:40:23.467]    </block>
[14:40:23.467]    <control if="powered_down" while="" timeout="0" info="">
[14:40:23.467]      // if-block "powered_down"
[14:40:23.467]        // =>  TRUE
[14:40:23.467]      <block atomic="false" info="">
[14:40:23.469]        Message(0, "Debug/System power-up request sent");
[14:40:23.469]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:40:23.469]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:40:23.469]      </block>
[14:40:23.469]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:40:23.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:40:23.472]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:40:23.472]        // while-condition  =>  FALSE
[14:40:23.472]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:40:23.472]      </control>
[14:40:23.472]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:40:23.472]        // if-block "(__protocol & 0xFFFF) == 1"
[14:40:23.472]          // =>  FALSE
[14:40:23.472]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:40:23.472]      </control>
[14:40:23.472]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:40:23.473]        // if-block "(__protocol & 0xFFFF) == 2"
[14:40:23.473]          // =>  TRUE
[14:40:23.473]        <block atomic="false" info="">
[14:40:23.473]          Message(0, "executing SWD power up");
[14:40:23.475]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:40:23.475]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:40:23.475]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:40:23.477]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:40:23.477]        </block>
[14:40:23.477]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:40:23.477]      </control>
[14:40:23.477]      // end if-block "powered_down"
[14:40:23.477]    </control>
[14:40:23.477]    <block atomic="false" info="">
[14:40:23.477]      __var DEBUG_PORT_VAL    = 0;
[14:40:23.477]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:40:23.477]      __var ACCESS_POINT_VAL  = 0;
[14:40:23.477]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:40:23.477]      __ap = 1; 
[14:40:23.477]        // -> [__ap <= 0x00000001]
[14:40:23.478]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:40:23.479]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:40:23.479]      __ap = 4;
[14:40:23.479]        // -> [__ap <= 0x00000004]
[14:40:23.479]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:40:23.480]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:40:23.480]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:40:23.480]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:40:23.481]    </block>
[14:40:23.481]    <block atomic="false" info="">
[14:40:23.481]      __var nReset = 0x80;
[14:40:23.481]        // -> [nReset <= 0x00000080]
[14:40:23.481]      __var canReadPins = 0;
[14:40:23.483]        // -> [canReadPins <= 0x00000000]
[14:40:23.483]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:40:23.483]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:40:23.483]        // -> [canReadPins <= 0x00000001]
[14:40:23.483]    </block>
[14:40:23.483]    <control if="" while="1" timeout="200" info="">
[14:40:23.483]      // while "1"  (timeout="200")
[14:40:23.483]      // while-condition  =>  TRUE
[14:40:23.483]      // while "1"  (timeout="200")
[14:40:23.483]      // while-condition  =>  TRUE
[14:40:23.483]      // while "1"  (timeout="200")
[14:40:23.483]      // while-condition  =>  TRUE
[14:40:23.485]      // while "1"  (timeout="200")
[14:40:23.485]      // while-condition  =>  TRUE
[14:40:23.485]      // while "1"  (timeout="200")
[14:40:23.485]      // while-condition  =>  TRUE
[14:40:23.485]      // while "1"  (timeout="200")
[14:40:23.485]      // while-condition  =>  TRUE
[14:40:23.485]      // while "1"  (timeout="200")
[14:40:23.485]      // while-condition  =>  TRUE
[14:40:23.485]      // while "1"  (timeout="200")
[14:40:23.486]      // while-condition  =>  TRUE
[14:40:23.486]      // while "1"  (timeout="200")
[14:40:23.486]      // while-condition  =>  TRUE
[14:40:23.486]      // while "1"  (timeout="200")
[14:40:23.486]      // while-condition  =>  TRUE
[14:40:23.486]      // while "1"  (timeout="200")
[14:40:23.486]      // while-condition  =>  TRUE
[14:40:23.486]      // while "1"  (timeout="200")
[14:40:23.486]      // while-condition  =>  TRUE
[14:40:23.486]      // while "1"  (timeout="200")
[14:40:23.486]      // while-condition  =>  TRUE
[14:40:23.486]      // while "1"  (timeout="200")
[14:40:23.486]      // while-condition  =>  TRUE
[14:40:23.486]      // while "1"  (timeout="200")
[14:40:23.486]      // while-condition  =>  TRUE
[14:40:23.486]      // while "1"  (timeout="200")
[14:40:23.486]      // while-condition  =>  TRUE
[14:40:23.486]      // while "1"  (timeout="200")
[14:40:23.488]      // while-condition  =>  TRUE
[14:40:23.488]      // while "1"  (timeout="200")
[14:40:23.488]      // while-condition  =>  TRUE
[14:40:23.488]      // while "1"  (timeout="200")
[14:40:23.488]      // while-condition  =>  TRUE
[14:40:23.488]      // while "1"  (timeout="200")
[14:40:23.488]      // while-condition  =>  TRUE
[14:40:23.488]      // while "1"  (timeout="200")
[14:40:23.488]      // while-condition  =>  TRUE
[14:40:23.488]      // while "1"  (timeout="200")
[14:40:23.488]      // while-condition  =>  TRUE
[14:40:23.488]      // while "1"  (timeout="200")
[14:40:23.489]      // while-condition  =>  TRUE
[14:40:23.489]      // while "1"  (timeout="200")
[14:40:23.489]      // while  =>  TIMEOUT
[14:40:23.489]      // end while "1"
[14:40:23.489]    </control>
[14:40:23.489]    <control if="canReadPins" while="" timeout="0" info="">
[14:40:23.489]      // if-block "canReadPins"
[14:40:23.489]        // =>  TRUE
[14:40:23.489]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:40:23.490]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:40:23.490]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:40:23.490]        // while-condition  =>  FALSE
[14:40:23.490]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:40:23.490]      </control>
[14:40:23.490]      // end if-block "canReadPins"
[14:40:23.490]    </control>
[14:40:23.490]    <control if="!canReadPins" while="" timeout="0" info="">
[14:40:23.490]      // if-block "!canReadPins"
[14:40:23.490]        // =>  FALSE
[14:40:23.490]      // skip if-block "!canReadPins"
[14:40:23.491]    </control>
[14:40:23.491]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:40:23.491]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:40:23.491]        // =>  TRUE
[14:40:23.491]      <block atomic="false" info="">
[14:40:23.491]        WriteAP(0x00, 0x190008);
[14:40:23.491]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:40:23.491]        WriteAP(0xF0, 0x01);
[14:40:23.493]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:40:23.493]      </block>
[14:40:23.493]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:40:23.494]    </control>
[14:40:23.494]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:40:23.494]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:40:23.494]        // =>  FALSE
[14:40:23.494]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:40:23.494]    </control>
[14:40:23.494]    <block atomic="false" info="">
[14:40:23.494]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:40:23.494]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:40:23.494]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:40:23.494]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:40:23.498]      __ap = 0; //lets make sure we reset the access point selection
[14:40:23.498]        // -> [__ap <= 0x00000000]
[14:40:23.498]    </block>
[14:40:23.498]  </sequence>
[14:40:23.498]  
[14:40:23.503]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:40:23.503]  
[14:40:23.504]  <debugvars>
[14:40:23.504]    // Pre-defined
[14:40:23.504]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:40:23.504]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:40:23.504]    __dp=0x00000000
[14:40:23.504]    __ap=0x00000000
[14:40:23.504]    __traceout=0x00000000      (Trace Disabled)
[14:40:23.504]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:40:23.504]    __FlashAddr=0x00000000
[14:40:23.504]    __FlashLen=0x00000000
[14:40:23.504]    __FlashArg=0x00000000
[14:40:23.504]    __FlashOp=0x00000000
[14:40:23.504]    __Result=0x00000000
[14:40:23.504]  </debugvars>
[14:40:23.504]  
[14:40:23.504]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:40:23.506]    <block atomic="false" info="">
[14:40:23.506]      __var deviceID = 0;
[14:40:23.506]        // -> [deviceID <= 0x00000000]
[14:40:23.506]      __var version = 0;
[14:40:23.506]        // -> [version <= 0x00000000]
[14:40:23.506]      __var partNum = 0;
[14:40:23.506]        // -> [partNum <= 0x00000000]
[14:40:23.506]      __var manuf = 0;
[14:40:23.506]        // -> [manuf <= 0x00000000]
[14:40:23.506]      __var isMSPM0G1X0X_G3X0X = 0;
[14:40:23.506]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:40:23.508]      __var isProduction = 0;
[14:40:23.508]        // -> [isProduction <= 0x00000000]
[14:40:23.508]      __var continueId = 0;
[14:40:23.508]        // -> [continueId <= 0x00000000]
[14:40:23.508]      deviceID =   Read32(0x41C40004);
[14:40:23.509]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:40:23.509]        // -> [deviceID <= 0x2BB8802F]
[14:40:23.509]      version = deviceID >> 28;
[14:40:23.509]        // -> [version <= 0x00000002]
[14:40:23.509]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:40:23.509]        // -> [partNum <= 0x0000BB88]
[14:40:23.509]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:40:23.509]        // -> [manuf <= 0x00000017]
[14:40:23.511]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:40:23.511]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:40:23.511]      isProduction = (version > 0);
[14:40:23.511]        // -> [isProduction <= 0x00000001]
[14:40:23.511]    </block>
[14:40:23.511]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:40:23.511]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:40:23.511]        // =>  FALSE
[14:40:23.511]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:40:23.512]    </control>
[14:40:23.512]    <control if="continueId == 4" while="" timeout="0" info="">
[14:40:23.512]      // if-block "continueId == 4"
[14:40:23.512]        // =>  FALSE
[14:40:23.512]      // skip if-block "continueId == 4"
[14:40:23.512]    </control>
[14:40:23.512]    <control if="!isProduction" while="" timeout="0" info="">
[14:40:23.512]      // if-block "!isProduction"
[14:40:23.512]        // =>  FALSE
[14:40:23.512]      // skip if-block "!isProduction"
[14:40:23.512]    </control>
[14:40:23.512]  </sequence>
[14:40:23.512]  
[14:41:22.769]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:41:22.769]  
[14:41:22.778]  <debugvars>
[14:41:22.778]    // Pre-defined
[14:41:22.778]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:41:22.778]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:41:22.778]    __dp=0x00000000
[14:41:22.778]    __ap=0x00000000
[14:41:22.778]    __traceout=0x00000000      (Trace Disabled)
[14:41:22.778]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:41:22.778]    __FlashAddr=0x00000000
[14:41:22.778]    __FlashLen=0x00000000
[14:41:22.778]    __FlashArg=0x00000000
[14:41:22.778]    __FlashOp=0x00000000
[14:41:22.778]    __Result=0x00000000
[14:41:22.778]  </debugvars>
[14:41:22.778]  
[14:41:22.778]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:41:22.778]    <block atomic="false" info="">
[14:41:22.778]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:41:22.778]        // -> [isSWJ <= 0x00000001]
[14:41:22.778]      __var hasDormant = __protocol & 0x00020000;
[14:41:22.778]        // -> [hasDormant <= 0x00000000]
[14:41:22.778]      __var protType   = __protocol & 0x0000FFFF;
[14:41:22.778]        // -> [protType <= 0x00000002]
[14:41:22.778]    </block>
[14:41:22.778]    <control if="protType == 1" while="" timeout="0" info="">
[14:41:22.778]      // if-block "protType == 1"
[14:41:22.778]        // =>  FALSE
[14:41:22.781]      // skip if-block "protType == 1"
[14:41:22.781]    </control>
[14:41:22.781]    <control if="protType == 2" while="" timeout="0" info="">
[14:41:22.781]      // if-block "protType == 2"
[14:41:22.781]        // =>  TRUE
[14:41:22.781]      <control if="isSWJ" while="" timeout="0" info="">
[14:41:22.782]        // if-block "isSWJ"
[14:41:22.782]          // =>  TRUE
[14:41:22.782]        <control if="hasDormant" while="" timeout="0" info="">
[14:41:22.782]          // if-block "hasDormant"
[14:41:22.782]            // =>  FALSE
[14:41:22.782]          // skip if-block "hasDormant"
[14:41:22.782]        </control>
[14:41:22.782]        <control if="!hasDormant" while="" timeout="0" info="">
[14:41:22.782]          // if-block "!hasDormant"
[14:41:22.782]            // =>  TRUE
[14:41:22.782]          <block atomic="false" info="">
[14:41:22.783]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:41:22.783]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:41:22.784]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:41:22.784]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:41:22.784]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:41:22.784]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:41:22.784]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:41:22.784]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:41:22.784]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:41:22.785]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:41:22.785]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:41:22.786]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:41:22.786]          </block>
[14:41:22.786]          // end if-block "!hasDormant"
[14:41:22.786]        </control>
[14:41:22.786]        // end if-block "isSWJ"
[14:41:22.786]      </control>
[14:41:22.786]      <control if="!isSWJ" while="" timeout="0" info="">
[14:41:22.786]        // if-block "!isSWJ"
[14:41:22.786]          // =>  FALSE
[14:41:22.786]        // skip if-block "!isSWJ"
[14:41:22.786]      </control>
[14:41:22.787]      <block atomic="false" info="">
[14:41:22.787]        ReadDP(0x0);
[14:41:22.787]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:41:22.787]      </block>
[14:41:22.787]      // end if-block "protType == 2"
[14:41:22.787]    </control>
[14:41:22.787]  </sequence>
[14:41:22.787]  
[14:41:22.788]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:41:22.788]  
[14:41:22.788]  <debugvars>
[14:41:22.788]    // Pre-defined
[14:41:22.788]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:41:22.788]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:41:22.788]    __dp=0x00000000
[14:41:22.788]    __ap=0x00000000
[14:41:22.788]    __traceout=0x00000000      (Trace Disabled)
[14:41:22.788]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:41:22.788]    __FlashAddr=0x00000000
[14:41:22.788]    __FlashLen=0x00000000
[14:41:22.788]    __FlashArg=0x00000000
[14:41:22.788]    __FlashOp=0x00000000
[14:41:22.788]    __Result=0x00000000
[14:41:22.788]  </debugvars>
[14:41:22.788]  
[14:41:22.788]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:41:22.788]    <block atomic="false" info="">
[14:41:22.788]      __var SW_DP_ABORT       = 0x0;
[14:41:22.791]        // -> [SW_DP_ABORT <= 0x00000000]
[14:41:22.791]      __var DP_CTRL_STAT      = 0x4;
[14:41:22.791]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:41:22.791]      __var DP_SELECT         = 0x8;
[14:41:22.791]        // -> [DP_SELECT <= 0x00000008]
[14:41:22.791]      __var powered_down      = 0;
[14:41:22.791]        // -> [powered_down <= 0x00000000]
[14:41:22.791]      WriteDP(DP_SELECT, 0x00000000);
[14:41:22.791]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:41:22.791]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:41:22.793]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:41:22.793]        // -> [powered_down <= 0x00000001]
[14:41:22.793]    </block>
[14:41:22.793]    <control if="powered_down" while="" timeout="0" info="">
[14:41:22.793]      // if-block "powered_down"
[14:41:22.793]        // =>  TRUE
[14:41:22.793]      <block atomic="false" info="">
[14:41:22.793]        Message(0, "Debug/System power-up request sent");
[14:41:22.794]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:41:22.794]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:41:22.794]      </block>
[14:41:22.794]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:41:22.797]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:41:22.797]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:41:22.797]        // while-condition  =>  FALSE
[14:41:22.797]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:41:22.797]      </control>
[14:41:22.797]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:41:22.797]        // if-block "(__protocol & 0xFFFF) == 1"
[14:41:22.797]          // =>  FALSE
[14:41:22.797]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:41:22.797]      </control>
[14:41:22.797]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:41:22.797]        // if-block "(__protocol & 0xFFFF) == 2"
[14:41:22.797]          // =>  TRUE
[14:41:22.797]        <block atomic="false" info="">
[14:41:22.797]          Message(0, "executing SWD power up");
[14:41:22.797]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:41:22.801]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:41:22.801]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:41:22.801]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:41:22.801]        </block>
[14:41:22.801]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:41:22.801]      </control>
[14:41:22.801]      // end if-block "powered_down"
[14:41:22.801]    </control>
[14:41:22.801]    <block atomic="false" info="">
[14:41:22.801]      __var DEBUG_PORT_VAL    = 0;
[14:41:22.801]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:41:22.801]      __var ACCESS_POINT_VAL  = 0;
[14:41:22.801]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:41:22.801]      __ap = 1; 
[14:41:22.801]        // -> [__ap <= 0x00000001]
[14:41:22.801]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:41:22.803]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:41:22.803]      __ap = 4;
[14:41:22.803]        // -> [__ap <= 0x00000004]
[14:41:22.803]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:41:22.804]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:41:22.804]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:41:22.804]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:41:22.804]    </block>
[14:41:22.804]    <block atomic="false" info="">
[14:41:22.804]      __var nReset = 0x80;
[14:41:22.804]        // -> [nReset <= 0x00000080]
[14:41:22.804]      __var canReadPins = 0;
[14:41:22.804]        // -> [canReadPins <= 0x00000000]
[14:41:22.804]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:41:22.804]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:41:22.804]        // -> [canReadPins <= 0x00000001]
[14:41:22.804]    </block>
[14:41:22.804]    <control if="" while="1" timeout="200" info="">
[14:41:22.804]      // while "1"  (timeout="200")
[14:41:22.809]      // while-condition  =>  TRUE
[14:41:22.809]      // while "1"  (timeout="200")
[14:41:22.809]      // while-condition  =>  TRUE
[14:41:22.809]      // while "1"  (timeout="200")
[14:41:22.809]      // while-condition  =>  TRUE
[14:41:22.809]      // while "1"  (timeout="200")
[14:41:22.809]      // while-condition  =>  TRUE
[14:41:22.809]      // while "1"  (timeout="200")
[14:41:22.809]      // while-condition  =>  TRUE
[14:41:22.809]      // while "1"  (timeout="200")
[14:41:22.809]      // while-condition  =>  TRUE
[14:41:22.809]      // while "1"  (timeout="200")
[14:41:22.809]      // while-condition  =>  TRUE
[14:41:22.809]      // while "1"  (timeout="200")
[14:41:22.809]      // while-condition  =>  TRUE
[14:41:22.809]      // while "1"  (timeout="200")
[14:41:22.809]      // while-condition  =>  TRUE
[14:41:22.809]      // while "1"  (timeout="200")
[14:41:22.809]      // while-condition  =>  TRUE
[14:41:22.809]      // while "1"  (timeout="200")
[14:41:22.809]      // while-condition  =>  TRUE
[14:41:22.809]      // while "1"  (timeout="200")
[14:41:22.809]      // while-condition  =>  TRUE
[14:41:22.809]      // while "1"  (timeout="200")
[14:41:22.809]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.811]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.811]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.811]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.811]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.811]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.811]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.811]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.811]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.811]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.811]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.811]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.811]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.811]      // while-condition  =>  TRUE
[14:41:22.811]      // while "1"  (timeout="200")
[14:41:22.814]      // while-condition  =>  TRUE
[14:41:22.814]      // while "1"  (timeout="200")
[14:41:22.814]      // while-condition  =>  TRUE
[14:41:22.814]      // while "1"  (timeout="200")
[14:41:22.814]      // while-condition  =>  TRUE
[14:41:22.814]      // while "1"  (timeout="200")
[14:41:22.814]      // while-condition  =>  TRUE
[14:41:22.814]      // while "1"  (timeout="200")
[14:41:22.814]      // while-condition  =>  TRUE
[14:41:22.814]      // while "1"  (timeout="200")
[14:41:22.814]      // while-condition  =>  TRUE
[14:41:22.814]      // while "1"  (timeout="200")
[14:41:22.814]      // while-condition  =>  TRUE
[14:41:22.814]      // while "1"  (timeout="200")
[14:41:22.814]      // while-condition  =>  TRUE
[14:41:22.814]      // while "1"  (timeout="200")
[14:41:22.814]      // while-condition  =>  TRUE
[14:41:22.814]      // while "1"  (timeout="200")
[14:41:22.814]      // while-condition  =>  TRUE
[14:41:22.814]      // while "1"  (timeout="200")
[14:41:22.814]      // while-condition  =>  TRUE
[14:41:22.814]      // while "1"  (timeout="200")
[14:41:22.814]      // while-condition  =>  TRUE
[14:41:22.814]      // while "1"  (timeout="200")
[14:41:22.816]      // while-condition  =>  TRUE
[14:41:22.816]      // while "1"  (timeout="200")
[14:41:22.816]      // while-condition  =>  TRUE
[14:41:22.816]      // while "1"  (timeout="200")
[14:41:22.816]      // while-condition  =>  TRUE
[14:41:22.816]      // while "1"  (timeout="200")
[14:41:22.816]      // while-condition  =>  TRUE
[14:41:22.816]      // while "1"  (timeout="200")
[14:41:22.816]      // while-condition  =>  TRUE
[14:41:22.816]      // while "1"  (timeout="200")
[14:41:22.816]      // while-condition  =>  TRUE
[14:41:22.816]      // while "1"  (timeout="200")
[14:41:22.816]      // while-condition  =>  TRUE
[14:41:22.817]      // while "1"  (timeout="200")
[14:41:22.817]      // while  =>  TIMEOUT
[14:41:22.817]      // end while "1"
[14:41:22.817]    </control>
[14:41:22.817]    <control if="canReadPins" while="" timeout="0" info="">
[14:41:22.817]      // if-block "canReadPins"
[14:41:22.817]        // =>  TRUE
[14:41:22.817]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:41:22.817]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:41:22.818]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:41:22.818]        // while-condition  =>  FALSE
[14:41:22.818]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:41:22.818]      </control>
[14:41:22.818]      // end if-block "canReadPins"
[14:41:22.818]    </control>
[14:41:22.818]    <control if="!canReadPins" while="" timeout="0" info="">
[14:41:22.818]      // if-block "!canReadPins"
[14:41:22.818]        // =>  FALSE
[14:41:22.818]      // skip if-block "!canReadPins"
[14:41:22.818]    </control>
[14:41:22.818]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:41:22.818]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:41:22.819]        // =>  TRUE
[14:41:22.819]      <block atomic="false" info="">
[14:41:22.819]        WriteAP(0x00, 0x190008);
[14:41:22.819]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:41:22.819]        WriteAP(0xF0, 0x01);
[14:41:22.821]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:41:22.821]      </block>
[14:41:22.821]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:41:22.821]    </control>
[14:41:22.821]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:41:22.822]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:41:22.822]        // =>  FALSE
[14:41:22.822]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:41:22.822]    </control>
[14:41:22.822]    <block atomic="false" info="">
[14:41:22.822]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:41:22.823]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:41:22.823]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:41:22.823]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:41:22.824]      __ap = 0; //lets make sure we reset the access point selection
[14:41:22.824]        // -> [__ap <= 0x00000000]
[14:41:22.824]    </block>
[14:41:22.824]  </sequence>
[14:41:22.824]  
[14:41:22.831]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:41:22.831]  
[14:41:22.831]  <debugvars>
[14:41:22.831]    // Pre-defined
[14:41:22.831]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:41:22.831]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:41:22.831]    __dp=0x00000000
[14:41:22.831]    __ap=0x00000000
[14:41:22.831]    __traceout=0x00000000      (Trace Disabled)
[14:41:22.831]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:41:22.831]    __FlashAddr=0x00000000
[14:41:22.831]    __FlashLen=0x00000000
[14:41:22.831]    __FlashArg=0x00000000
[14:41:22.831]    __FlashOp=0x00000000
[14:41:22.831]    __Result=0x00000000
[14:41:22.831]  </debugvars>
[14:41:22.831]  
[14:41:22.834]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:41:22.834]    <block atomic="false" info="">
[14:41:22.834]      __var deviceID = 0;
[14:41:22.834]        // -> [deviceID <= 0x00000000]
[14:41:22.834]      __var version = 0;
[14:41:22.834]        // -> [version <= 0x00000000]
[14:41:22.834]      __var partNum = 0;
[14:41:22.834]        // -> [partNum <= 0x00000000]
[14:41:22.834]      __var manuf = 0;
[14:41:22.835]        // -> [manuf <= 0x00000000]
[14:41:22.835]      __var isMSPM0G1X0X_G3X0X = 0;
[14:41:22.835]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:41:22.835]      __var isProduction = 0;
[14:41:22.835]        // -> [isProduction <= 0x00000000]
[14:41:22.835]      __var continueId = 0;
[14:41:22.835]        // -> [continueId <= 0x00000000]
[14:41:22.835]      deviceID =   Read32(0x41C40004);
[14:41:22.837]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:41:22.837]        // -> [deviceID <= 0x2BB8802F]
[14:41:22.838]      version = deviceID >> 28;
[14:41:22.838]        // -> [version <= 0x00000002]
[14:41:22.838]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:41:22.838]        // -> [partNum <= 0x0000BB88]
[14:41:22.838]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:41:22.838]        // -> [manuf <= 0x00000017]
[14:41:22.838]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:41:22.838]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:41:22.838]      isProduction = (version > 0);
[14:41:22.838]        // -> [isProduction <= 0x00000001]
[14:41:22.838]    </block>
[14:41:22.838]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:41:22.838]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:41:22.838]        // =>  FALSE
[14:41:22.838]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:41:22.838]    </control>
[14:41:22.838]    <control if="continueId == 4" while="" timeout="0" info="">
[14:41:22.838]      // if-block "continueId == 4"
[14:41:22.838]        // =>  FALSE
[14:41:22.838]      // skip if-block "continueId == 4"
[14:41:22.840]    </control>
[14:41:22.840]    <control if="!isProduction" while="" timeout="0" info="">
[14:41:22.840]      // if-block "!isProduction"
[14:41:22.840]        // =>  FALSE
[14:41:22.840]      // skip if-block "!isProduction"
[14:41:22.840]    </control>
[14:41:22.840]  </sequence>
[14:41:22.840]  
[14:41:52.453]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:41:52.453]  
[14:41:52.453]  <debugvars>
[14:41:52.453]    // Pre-defined
[14:41:52.453]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:41:52.453]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:41:52.453]    __dp=0x00000000
[14:41:52.453]    __ap=0x00000000
[14:41:52.453]    __traceout=0x00000000      (Trace Disabled)
[14:41:52.453]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:41:52.453]    __FlashAddr=0x00000000
[14:41:52.453]    __FlashLen=0x00000000
[14:41:52.453]    __FlashArg=0x00000000
[14:41:52.453]    __FlashOp=0x00000000
[14:41:52.453]    __Result=0x00000000
[14:41:52.453]  </debugvars>
[14:41:52.453]  
[14:41:52.453]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:41:52.453]    <block atomic="false" info="">
[14:41:52.456]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:41:52.456]        // -> [isSWJ <= 0x00000001]
[14:41:52.456]      __var hasDormant = __protocol & 0x00020000;
[14:41:52.456]        // -> [hasDormant <= 0x00000000]
[14:41:52.456]      __var protType   = __protocol & 0x0000FFFF;
[14:41:52.456]        // -> [protType <= 0x00000002]
[14:41:52.456]    </block>
[14:41:52.457]    <control if="protType == 1" while="" timeout="0" info="">
[14:41:52.457]      // if-block "protType == 1"
[14:41:52.457]        // =>  FALSE
[14:41:52.457]      // skip if-block "protType == 1"
[14:41:52.457]    </control>
[14:41:52.457]    <control if="protType == 2" while="" timeout="0" info="">
[14:41:52.457]      // if-block "protType == 2"
[14:41:52.457]        // =>  TRUE
[14:41:52.457]      <control if="isSWJ" while="" timeout="0" info="">
[14:41:52.457]        // if-block "isSWJ"
[14:41:52.457]          // =>  TRUE
[14:41:52.457]        <control if="hasDormant" while="" timeout="0" info="">
[14:41:52.457]          // if-block "hasDormant"
[14:41:52.457]            // =>  FALSE
[14:41:52.458]          // skip if-block "hasDormant"
[14:41:52.458]        </control>
[14:41:52.458]        <control if="!hasDormant" while="" timeout="0" info="">
[14:41:52.458]          // if-block "!hasDormant"
[14:41:52.458]            // =>  TRUE
[14:41:52.458]          <block atomic="false" info="">
[14:41:52.458]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:41:52.458]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:41:52.458]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:41:52.458]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:41:52.458]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:41:52.460]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:41:52.460]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:41:52.461]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:41:52.461]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:41:52.461]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:41:52.461]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:41:52.461]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:41:52.461]          </block>
[14:41:52.461]          // end if-block "!hasDormant"
[14:41:52.461]        </control>
[14:41:52.461]        // end if-block "isSWJ"
[14:41:52.461]      </control>
[14:41:52.461]      <control if="!isSWJ" while="" timeout="0" info="">
[14:41:52.461]        // if-block "!isSWJ"
[14:41:52.461]          // =>  FALSE
[14:41:52.461]        // skip if-block "!isSWJ"
[14:41:52.461]      </control>
[14:41:52.461]      <block atomic="false" info="">
[14:41:52.463]        ReadDP(0x0);
[14:41:52.463]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:41:52.463]      </block>
[14:41:52.463]      // end if-block "protType == 2"
[14:41:52.463]    </control>
[14:41:52.463]  </sequence>
[14:41:52.463]  
[14:41:52.463]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:41:52.463]  
[14:41:52.464]  <debugvars>
[14:41:52.464]    // Pre-defined
[14:41:52.464]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:41:52.464]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:41:52.464]    __dp=0x00000000
[14:41:52.464]    __ap=0x00000000
[14:41:52.464]    __traceout=0x00000000      (Trace Disabled)
[14:41:52.464]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:41:52.464]    __FlashAddr=0x00000000
[14:41:52.464]    __FlashLen=0x00000000
[14:41:52.464]    __FlashArg=0x00000000
[14:41:52.465]    __FlashOp=0x00000000
[14:41:52.465]    __Result=0x00000000
[14:41:52.465]  </debugvars>
[14:41:52.465]  
[14:41:52.465]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:41:52.465]    <block atomic="false" info="">
[14:41:52.465]      __var SW_DP_ABORT       = 0x0;
[14:41:52.465]        // -> [SW_DP_ABORT <= 0x00000000]
[14:41:52.465]      __var DP_CTRL_STAT      = 0x4;
[14:41:52.465]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:41:52.465]      __var DP_SELECT         = 0x8;
[14:41:52.465]        // -> [DP_SELECT <= 0x00000008]
[14:41:52.465]      __var powered_down      = 0;
[14:41:52.467]        // -> [powered_down <= 0x00000000]
[14:41:52.467]      WriteDP(DP_SELECT, 0x00000000);
[14:41:52.467]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:41:52.467]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:41:52.468]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:41:52.468]        // -> [powered_down <= 0x00000001]
[14:41:52.468]    </block>
[14:41:52.468]    <control if="powered_down" while="" timeout="0" info="">
[14:41:52.468]      // if-block "powered_down"
[14:41:52.468]        // =>  TRUE
[14:41:52.468]      <block atomic="false" info="">
[14:41:52.468]        Message(0, "Debug/System power-up request sent");
[14:41:52.469]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:41:52.469]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:41:52.469]      </block>
[14:41:52.469]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:41:52.469]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:41:52.471]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:41:52.471]        // while-condition  =>  FALSE
[14:41:52.471]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:41:52.471]      </control>
[14:41:52.471]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:41:52.471]        // if-block "(__protocol & 0xFFFF) == 1"
[14:41:52.471]          // =>  FALSE
[14:41:52.471]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:41:52.471]      </control>
[14:41:52.471]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:41:52.471]        // if-block "(__protocol & 0xFFFF) == 2"
[14:41:52.471]          // =>  TRUE
[14:41:52.471]        <block atomic="false" info="">
[14:41:52.471]          Message(0, "executing SWD power up");
[14:41:52.474]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:41:52.474]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:41:52.474]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:41:52.475]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:41:52.475]        </block>
[14:41:52.475]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:41:52.475]      </control>
[14:41:52.475]      // end if-block "powered_down"
[14:41:52.475]    </control>
[14:41:52.475]    <block atomic="false" info="">
[14:41:52.475]      __var DEBUG_PORT_VAL    = 0;
[14:41:52.475]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:41:52.475]      __var ACCESS_POINT_VAL  = 0;
[14:41:52.475]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:41:52.475]      __ap = 1; 
[14:41:52.475]        // -> [__ap <= 0x00000001]
[14:41:52.477]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:41:52.477]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:41:52.477]      __ap = 4;
[14:41:52.477]        // -> [__ap <= 0x00000004]
[14:41:52.477]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:41:52.477]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:41:52.477]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:41:52.477]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:41:52.477]    </block>
[14:41:52.481]    <block atomic="false" info="">
[14:41:52.481]      __var nReset = 0x80;
[14:41:52.481]        // -> [nReset <= 0x00000080]
[14:41:52.481]      __var canReadPins = 0;
[14:41:52.481]        // -> [canReadPins <= 0x00000000]
[14:41:52.481]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:41:52.481]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:41:52.481]        // -> [canReadPins <= 0x00000001]
[14:41:52.481]    </block>
[14:41:52.481]    <control if="" while="1" timeout="200" info="">
[14:41:52.481]      // while "1"  (timeout="200")
[14:41:52.481]      // while-condition  =>  TRUE
[14:41:52.481]      // while "1"  (timeout="200")
[14:41:52.481]      // while-condition  =>  TRUE
[14:41:52.481]      // while "1"  (timeout="200")
[14:41:52.481]      // while-condition  =>  TRUE
[14:41:52.481]      // while "1"  (timeout="200")
[14:41:52.481]      // while-condition  =>  TRUE
[14:41:52.481]      // while "1"  (timeout="200")
[14:41:52.481]      // while-condition  =>  TRUE
[14:41:52.483]      // while "1"  (timeout="200")
[14:41:52.483]      // while-condition  =>  TRUE
[14:41:52.483]      // while "1"  (timeout="200")
[14:41:52.483]      // while-condition  =>  TRUE
[14:41:52.483]      // while "1"  (timeout="200")
[14:41:52.483]      // while-condition  =>  TRUE
[14:41:52.483]      // while "1"  (timeout="200")
[14:41:52.483]      // while-condition  =>  TRUE
[14:41:52.483]      // while "1"  (timeout="200")
[14:41:52.484]      // while-condition  =>  TRUE
[14:41:52.484]      // while "1"  (timeout="200")
[14:41:52.484]      // while-condition  =>  TRUE
[14:41:52.484]      // while "1"  (timeout="200")
[14:41:52.484]      // while-condition  =>  TRUE
[14:41:52.484]      // while "1"  (timeout="200")
[14:41:52.484]      // while-condition  =>  TRUE
[14:41:52.484]      // while "1"  (timeout="200")
[14:41:52.484]      // while-condition  =>  TRUE
[14:41:52.484]      // while "1"  (timeout="200")
[14:41:52.484]      // while-condition  =>  TRUE
[14:41:52.484]      // while "1"  (timeout="200")
[14:41:52.484]      // while-condition  =>  TRUE
[14:41:52.484]      // while "1"  (timeout="200")
[14:41:52.484]      // while-condition  =>  TRUE
[14:41:52.486]      // while "1"  (timeout="200")
[14:41:52.486]      // while-condition  =>  TRUE
[14:41:52.486]      // while "1"  (timeout="200")
[14:41:52.486]      // while-condition  =>  TRUE
[14:41:52.486]      // while "1"  (timeout="200")
[14:41:52.486]      // while-condition  =>  TRUE
[14:41:52.486]      // while "1"  (timeout="200")
[14:41:52.486]      // while-condition  =>  TRUE
[14:41:52.487]      // while "1"  (timeout="200")
[14:41:52.487]      // while-condition  =>  TRUE
[14:41:52.487]      // while "1"  (timeout="200")
[14:41:52.487]      // while-condition  =>  TRUE
[14:41:52.487]      // while "1"  (timeout="200")
[14:41:52.487]      // while-condition  =>  TRUE
[14:41:52.487]      // while "1"  (timeout="200")
[14:41:52.487]      // while-condition  =>  TRUE
[14:41:52.487]      // while "1"  (timeout="200")
[14:41:52.487]      // while-condition  =>  TRUE
[14:41:52.487]      // while "1"  (timeout="200")
[14:41:52.487]      // while-condition  =>  TRUE
[14:41:52.487]      // while "1"  (timeout="200")
[14:41:52.487]      // while-condition  =>  TRUE
[14:41:52.487]      // while "1"  (timeout="200")
[14:41:52.487]      // while-condition  =>  TRUE
[14:41:52.488]      // while "1"  (timeout="200")
[14:41:52.488]      // while  =>  TIMEOUT
[14:41:52.488]      // end while "1"
[14:41:52.488]    </control>
[14:41:52.488]    <control if="canReadPins" while="" timeout="0" info="">
[14:41:52.488]      // if-block "canReadPins"
[14:41:52.488]        // =>  TRUE
[14:41:52.488]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:41:52.488]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:41:52.488]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:41:52.488]        // while-condition  =>  FALSE
[14:41:52.488]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:41:52.488]      </control>
[14:41:52.488]      // end if-block "canReadPins"
[14:41:52.488]    </control>
[14:41:52.491]    <control if="!canReadPins" while="" timeout="0" info="">
[14:41:52.491]      // if-block "!canReadPins"
[14:41:52.491]        // =>  FALSE
[14:41:52.491]      // skip if-block "!canReadPins"
[14:41:52.491]    </control>
[14:41:52.491]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:41:52.491]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:41:52.491]        // =>  TRUE
[14:41:52.491]      <block atomic="false" info="">
[14:41:52.491]        WriteAP(0x00, 0x190008);
[14:41:52.493]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:41:52.493]        WriteAP(0xF0, 0x01);
[14:41:52.493]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:41:52.493]      </block>
[14:41:52.493]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:41:52.493]    </control>
[14:41:52.493]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:41:52.493]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:41:52.493]        // =>  FALSE
[14:41:52.493]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:41:52.493]    </control>
[14:41:52.493]    <block atomic="false" info="">
[14:41:52.493]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:41:52.493]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:41:52.493]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:41:52.493]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:41:52.497]      __ap = 0; //lets make sure we reset the access point selection
[14:41:52.497]        // -> [__ap <= 0x00000000]
[14:41:52.497]    </block>
[14:41:52.497]  </sequence>
[14:41:52.498]  
[14:41:52.502]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:41:52.502]  
[14:41:52.502]  <debugvars>
[14:41:52.502]    // Pre-defined
[14:41:52.502]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:41:52.502]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[14:41:52.502]    __dp=0x00000000
[14:41:52.502]    __ap=0x00000000
[14:41:52.502]    __traceout=0x00000000      (Trace Disabled)
[14:41:52.502]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:41:52.502]    __FlashAddr=0x00000000
[14:41:52.502]    __FlashLen=0x00000000
[14:41:52.502]    __FlashArg=0x00000000
[14:41:52.502]    __FlashOp=0x00000000
[14:41:52.502]    __Result=0x00000000
[14:41:52.502]  </debugvars>
[14:41:52.502]  
[14:41:52.502]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:41:52.505]    <block atomic="false" info="">
[14:41:52.505]      __var deviceID = 0;
[14:41:52.505]        // -> [deviceID <= 0x00000000]
[14:41:52.505]      __var version = 0;
[14:41:52.505]        // -> [version <= 0x00000000]
[14:41:52.505]      __var partNum = 0;
[14:41:52.505]        // -> [partNum <= 0x00000000]
[14:41:52.505]      __var manuf = 0;
[14:41:52.505]        // -> [manuf <= 0x00000000]
[14:41:52.505]      __var isMSPM0G1X0X_G3X0X = 0;
[14:41:52.505]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:41:52.505]      __var isProduction = 0;
[14:41:52.505]        // -> [isProduction <= 0x00000000]
[14:41:52.507]      __var continueId = 0;
[14:41:52.507]        // -> [continueId <= 0x00000000]
[14:41:52.507]      deviceID =   Read32(0x41C40004);
[14:41:52.508]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:41:52.508]        // -> [deviceID <= 0x2BB8802F]
[14:41:52.508]      version = deviceID >> 28;
[14:41:52.508]        // -> [version <= 0x00000002]
[14:41:52.508]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:41:52.509]        // -> [partNum <= 0x0000BB88]
[14:41:52.509]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:41:52.509]        // -> [manuf <= 0x00000017]
[14:41:52.509]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:41:52.509]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:41:52.509]      isProduction = (version > 0);
[14:41:52.509]        // -> [isProduction <= 0x00000001]
[14:41:52.509]    </block>
[14:41:52.509]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:41:52.509]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:41:52.509]        // =>  FALSE
[14:41:52.509]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:41:52.510]    </control>
[14:41:52.510]    <control if="continueId == 4" while="" timeout="0" info="">
[14:41:52.510]      // if-block "continueId == 4"
[14:41:52.510]        // =>  FALSE
[14:41:52.510]      // skip if-block "continueId == 4"
[14:41:52.510]    </control>
[14:41:52.510]    <control if="!isProduction" while="" timeout="0" info="">
[14:41:52.510]      // if-block "!isProduction"
[14:41:52.510]        // =>  FALSE
[14:41:52.510]      // skip if-block "!isProduction"
[14:41:52.510]    </control>
[14:41:52.510]  </sequence>
[14:41:52.510]  
[14:45:23.585]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[14:45:23.585]  
[14:45:23.595]  <debugvars>
[14:45:23.595]    // Pre-defined
[14:45:23.595]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:45:23.595]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:45:23.595]    __dp=0x00000000
[14:45:23.595]    __ap=0x00000000
[14:45:23.595]    __traceout=0x00000000      (Trace Disabled)
[14:45:23.595]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:45:23.595]    __FlashAddr=0x00000000
[14:45:23.595]    __FlashLen=0x00000000
[14:45:23.595]    __FlashArg=0x00000000
[14:45:23.595]    __FlashOp=0x00000000
[14:45:23.595]    __Result=0x00000000
[14:45:23.595]  </debugvars>
[14:45:23.597]  
[14:45:23.597]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[14:45:23.597]    <block atomic="false" info="">
[14:45:23.597]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[14:45:23.597]        // -> [isSWJ <= 0x00000001]
[14:45:23.597]      __var hasDormant = __protocol & 0x00020000;
[14:45:23.597]        // -> [hasDormant <= 0x00000000]
[14:45:23.597]      __var protType   = __protocol & 0x0000FFFF;
[14:45:23.597]        // -> [protType <= 0x00000002]
[14:45:23.597]    </block>
[14:45:23.597]    <control if="protType == 1" while="" timeout="0" info="">
[14:45:23.597]      // if-block "protType == 1"
[14:45:23.597]        // =>  FALSE
[14:45:23.597]      // skip if-block "protType == 1"
[14:45:23.597]    </control>
[14:45:23.597]    <control if="protType == 2" while="" timeout="0" info="">
[14:45:23.597]      // if-block "protType == 2"
[14:45:23.597]        // =>  TRUE
[14:45:23.597]      <control if="isSWJ" while="" timeout="0" info="">
[14:45:23.597]        // if-block "isSWJ"
[14:45:23.597]          // =>  TRUE
[14:45:23.597]        <control if="hasDormant" while="" timeout="0" info="">
[14:45:23.597]          // if-block "hasDormant"
[14:45:23.597]            // =>  FALSE
[14:45:23.597]          // skip if-block "hasDormant"
[14:45:23.597]        </control>
[14:45:23.600]        <control if="!hasDormant" while="" timeout="0" info="">
[14:45:23.600]          // if-block "!hasDormant"
[14:45:23.600]            // =>  TRUE
[14:45:23.600]          <block atomic="false" info="">
[14:45:23.600]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[14:45:23.600]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:45:23.600]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[14:45:23.600]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[14:45:23.600]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[14:45:23.600]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:45:23.600]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[14:45:23.600]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[14:45:23.600]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[14:45:23.600]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[14:45:23.600]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[14:45:23.602]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[14:45:23.602]          </block>
[14:45:23.602]          // end if-block "!hasDormant"
[14:45:23.602]        </control>
[14:45:23.602]        // end if-block "isSWJ"
[14:45:23.602]      </control>
[14:45:23.602]      <control if="!isSWJ" while="" timeout="0" info="">
[14:45:23.602]        // if-block "!isSWJ"
[14:45:23.602]          // =>  FALSE
[14:45:23.602]        // skip if-block "!isSWJ"
[14:45:23.602]      </control>
[14:45:23.602]      <block atomic="false" info="">
[14:45:23.602]        ReadDP(0x0);
[14:45:23.604]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[14:45:23.604]      </block>
[14:45:23.604]      // end if-block "protType == 2"
[14:45:23.604]    </control>
[14:45:23.604]  </sequence>
[14:45:23.604]  
[14:45:23.604]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[14:45:23.604]  
[14:45:23.604]  <debugvars>
[14:45:23.604]    // Pre-defined
[14:45:23.604]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:45:23.604]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:45:23.604]    __dp=0x00000000
[14:45:23.604]    __ap=0x00000000
[14:45:23.604]    __traceout=0x00000000      (Trace Disabled)
[14:45:23.604]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:45:23.604]    __FlashAddr=0x00000000
[14:45:23.604]    __FlashLen=0x00000000
[14:45:23.604]    __FlashArg=0x00000000
[14:45:23.604]    __FlashOp=0x00000000
[14:45:23.604]    __Result=0x00000000
[14:45:23.604]  </debugvars>
[14:45:23.604]  
[14:45:23.604]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[14:45:23.604]    <block atomic="false" info="">
[14:45:23.604]      __var SW_DP_ABORT       = 0x0;
[14:45:23.604]        // -> [SW_DP_ABORT <= 0x00000000]
[14:45:23.604]      __var DP_CTRL_STAT      = 0x4;
[14:45:23.604]        // -> [DP_CTRL_STAT <= 0x00000004]
[14:45:23.604]      __var DP_SELECT         = 0x8;
[14:45:23.604]        // -> [DP_SELECT <= 0x00000008]
[14:45:23.604]      __var powered_down      = 0;
[14:45:23.604]        // -> [powered_down <= 0x00000000]
[14:45:23.604]      WriteDP(DP_SELECT, 0x00000000);
[14:45:23.604]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[14:45:23.604]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[14:45:23.604]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[14:45:23.604]        // -> [powered_down <= 0x00000001]
[14:45:23.609]    </block>
[14:45:23.609]    <control if="powered_down" while="" timeout="0" info="">
[14:45:23.609]      // if-block "powered_down"
[14:45:23.609]        // =>  TRUE
[14:45:23.609]      <block atomic="false" info="">
[14:45:23.609]        Message(0, "Debug/System power-up request sent");
[14:45:23.610]        WriteDP(DP_CTRL_STAT, 0x50000000);
[14:45:23.610]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[14:45:23.610]      </block>
[14:45:23.610]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[14:45:23.610]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[14:45:23.610]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[14:45:23.610]        // while-condition  =>  FALSE
[14:45:23.610]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[14:45:23.610]      </control>
[14:45:23.610]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[14:45:23.610]        // if-block "(__protocol & 0xFFFF) == 1"
[14:45:23.610]          // =>  FALSE
[14:45:23.610]        // skip if-block "(__protocol & 0xFFFF) == 1"
[14:45:23.610]      </control>
[14:45:23.610]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[14:45:23.610]        // if-block "(__protocol & 0xFFFF) == 2"
[14:45:23.610]          // =>  TRUE
[14:45:23.610]        <block atomic="false" info="">
[14:45:23.610]          Message(0, "executing SWD power up");
[14:45:23.617]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[14:45:23.617]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[14:45:23.617]          WriteDP(SW_DP_ABORT, 0x0000001E);
[14:45:23.617]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[14:45:23.617]        </block>
[14:45:23.617]        // end if-block "(__protocol & 0xFFFF) == 2"
[14:45:23.617]      </control>
[14:45:23.617]      // end if-block "powered_down"
[14:45:23.617]    </control>
[14:45:23.617]    <block atomic="false" info="">
[14:45:23.617]      __var DEBUG_PORT_VAL    = 0;
[14:45:23.619]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[14:45:23.619]      __var ACCESS_POINT_VAL  = 0;
[14:45:23.619]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[14:45:23.619]      __ap = 1; 
[14:45:23.619]        // -> [__ap <= 0x00000001]
[14:45:23.619]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[14:45:23.620]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[14:45:23.620]      __ap = 4;
[14:45:23.620]        // -> [__ap <= 0x00000004]
[14:45:23.620]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:45:23.620]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[14:45:23.620]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[14:45:23.620]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:45:23.620]    </block>
[14:45:23.620]    <block atomic="false" info="">
[14:45:23.620]      __var nReset = 0x80;
[14:45:23.620]        // -> [nReset <= 0x00000080]
[14:45:23.620]      __var canReadPins = 0;
[14:45:23.620]        // -> [canReadPins <= 0x00000000]
[14:45:23.625]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[14:45:23.625]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[14:45:23.625]        // -> [canReadPins <= 0x00000001]
[14:45:23.625]    </block>
[14:45:23.625]    <control if="" while="1" timeout="200" info="">
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.625]      // while "1"  (timeout="200")
[14:45:23.625]      // while-condition  =>  TRUE
[14:45:23.629]      // while "1"  (timeout="200")
[14:45:23.629]      // while  =>  TIMEOUT
[14:45:23.629]      // end while "1"
[14:45:23.629]    </control>
[14:45:23.629]    <control if="canReadPins" while="" timeout="0" info="">
[14:45:23.629]      // if-block "canReadPins"
[14:45:23.629]        // =>  TRUE
[14:45:23.629]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[14:45:23.629]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[14:45:23.629]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[14:45:23.629]        // while-condition  =>  FALSE
[14:45:23.629]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[14:45:23.629]      </control>
[14:45:23.629]      // end if-block "canReadPins"
[14:45:23.629]    </control>
[14:45:23.629]    <control if="!canReadPins" while="" timeout="0" info="">
[14:45:23.629]      // if-block "!canReadPins"
[14:45:23.629]        // =>  FALSE
[14:45:23.629]      // skip if-block "!canReadPins"
[14:45:23.629]    </control>
[14:45:23.629]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[14:45:23.629]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:45:23.629]        // =>  TRUE
[14:45:23.629]      <block atomic="false" info="">
[14:45:23.629]        WriteAP(0x00, 0x190008);
[14:45:23.629]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[14:45:23.629]        WriteAP(0xF0, 0x01);
[14:45:23.629]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[14:45:23.629]      </block>
[14:45:23.629]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[14:45:23.629]    </control>
[14:45:23.629]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[14:45:23.629]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:45:23.629]        // =>  FALSE
[14:45:23.629]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[14:45:23.629]    </control>
[14:45:23.629]    <block atomic="false" info="">
[14:45:23.629]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[14:45:23.636]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[14:45:23.636]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[14:45:23.636]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[14:45:23.637]      __ap = 0; //lets make sure we reset the access point selection
[14:45:23.637]        // -> [__ap <= 0x00000000]
[14:45:23.637]    </block>
[14:45:23.637]  </sequence>
[14:45:23.640]  
[14:45:23.645]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[14:45:23.645]  
[14:45:23.645]  <debugvars>
[14:45:23.645]    // Pre-defined
[14:45:23.645]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[14:45:23.645]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[14:45:23.645]    __dp=0x00000000
[14:45:23.645]    __ap=0x00000000
[14:45:23.645]    __traceout=0x00000000      (Trace Disabled)
[14:45:23.645]    __errorcontrol=0x00000000  (Skip Errors="False")
[14:45:23.645]    __FlashAddr=0x00000000
[14:45:23.645]    __FlashLen=0x00000000
[14:45:23.645]    __FlashArg=0x00000000
[14:45:23.645]    __FlashOp=0x00000000
[14:45:23.645]    __Result=0x00000000
[14:45:23.645]  </debugvars>
[14:45:23.645]  
[14:45:23.645]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[14:45:23.645]    <block atomic="false" info="">
[14:45:23.645]      __var deviceID = 0;
[14:45:23.645]        // -> [deviceID <= 0x00000000]
[14:45:23.645]      __var version = 0;
[14:45:23.645]        // -> [version <= 0x00000000]
[14:45:23.645]      __var partNum = 0;
[14:45:23.645]        // -> [partNum <= 0x00000000]
[14:45:23.645]      __var manuf = 0;
[14:45:23.645]        // -> [manuf <= 0x00000000]
[14:45:23.645]      __var isMSPM0G1X0X_G3X0X = 0;
[14:45:23.649]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[14:45:23.649]      __var isProduction = 0;
[14:45:23.649]        // -> [isProduction <= 0x00000000]
[14:45:23.649]      __var continueId = 0;
[14:45:23.649]        // -> [continueId <= 0x00000000]
[14:45:23.650]      deviceID =   Read32(0x41C40004);
[14:45:23.650]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[14:45:23.650]        // -> [deviceID <= 0x2BB8802F]
[14:45:23.650]      version = deviceID >> 28;
[14:45:23.650]        // -> [version <= 0x00000002]
[14:45:23.650]      partNum = (deviceID & 0x0FFFF000) >> 12;
[14:45:23.650]        // -> [partNum <= 0x0000BB88]
[14:45:23.650]      manuf = (deviceID & 0x00000FFE) >> 1;
[14:45:23.650]        // -> [manuf <= 0x00000017]
[14:45:23.650]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[14:45:23.650]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[14:45:23.650]      isProduction = (version > 0);
[14:45:23.650]        // -> [isProduction <= 0x00000001]
[14:45:23.650]    </block>
[14:45:23.650]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[14:45:23.650]      // if-block "!isMSPM0G1X0X_G3X0X"
[14:45:23.650]        // =>  FALSE
[14:45:23.650]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[14:45:23.650]    </control>
[14:45:23.650]    <control if="continueId == 4" while="" timeout="0" info="">
[14:45:23.650]      // if-block "continueId == 4"
[14:45:23.650]        // =>  FALSE
[14:45:23.650]      // skip if-block "continueId == 4"
[14:45:23.650]    </control>
[14:45:23.650]    <control if="!isProduction" while="" timeout="0" info="">
[14:45:23.650]      // if-block "!isProduction"
[14:45:23.650]        // =>  FALSE
[14:45:23.650]      // skip if-block "!isProduction"
[14:45:23.650]    </control>
[14:45:23.650]  </sequence>
[14:45:23.650]  
