/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0003.log
 *  Created     : 19:01:44 (22/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[19:01:44.765]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:01:44.765]  
[19:01:44.765]  <debugvars>
[19:01:44.766]    // Pre-defined
[19:01:44.766]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:01:44.766]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:01:44.766]    __dp=0x00000000
[19:01:44.766]    __ap=0x00000000
[19:01:44.766]    __traceout=0x00000000      (Trace Disabled)
[19:01:44.767]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:01:44.767]    __FlashAddr=0x00000000
[19:01:44.767]    __FlashLen=0x00000000
[19:01:44.767]    __FlashArg=0x00000000
[19:01:44.767]    __FlashOp=0x00000000
[19:01:44.767]    __Result=0x00000000
[19:01:44.767]  </debugvars>
[19:01:44.767]  
[19:01:44.767]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:01:44.767]    <block atomic="false" info="">
[19:01:44.767]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:01:44.767]        // -> [isSWJ <= 0x00000001]
[19:01:44.768]      __var hasDormant = __protocol & 0x00020000;
[19:01:44.768]        // -> [hasDormant <= 0x00000000]
[19:01:44.768]      __var protType   = __protocol & 0x0000FFFF;
[19:01:44.768]        // -> [protType <= 0x00000002]
[19:01:44.768]    </block>
[19:01:44.768]    <control if="protType == 1" while="" timeout="0" info="">
[19:01:44.768]      // if-block "protType == 1"
[19:01:44.768]        // =>  FALSE
[19:01:44.768]      // skip if-block "protType == 1"
[19:01:44.768]    </control>
[19:01:44.768]    <control if="protType == 2" while="" timeout="0" info="">
[19:01:44.769]      // if-block "protType == 2"
[19:01:44.769]        // =>  TRUE
[19:01:44.769]      <control if="isSWJ" while="" timeout="0" info="">
[19:01:44.769]        // if-block "isSWJ"
[19:01:44.769]          // =>  TRUE
[19:01:44.769]        <control if="hasDormant" while="" timeout="0" info="">
[19:01:44.769]          // if-block "hasDormant"
[19:01:44.769]            // =>  FALSE
[19:01:44.769]          // skip if-block "hasDormant"
[19:01:44.770]        </control>
[19:01:44.770]        <control if="!hasDormant" while="" timeout="0" info="">
[19:01:44.770]          // if-block "!hasDormant"
[19:01:44.770]            // =>  TRUE
[19:01:44.770]          <block atomic="false" info="">
[19:01:44.770]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:01:44.771]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:01:44.771]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:01:44.771]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:01:44.771]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:01:44.772]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:01:44.772]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:01:44.772]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:01:44.772]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:01:44.773]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:01:44.773]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:01:44.773]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:01:44.773]          </block>
[19:01:44.773]          // end if-block "!hasDormant"
[19:01:44.773]        </control>
[19:01:44.773]        // end if-block "isSWJ"
[19:01:44.773]      </control>
[19:01:44.773]      <control if="!isSWJ" while="" timeout="0" info="">
[19:01:44.773]        // if-block "!isSWJ"
[19:01:44.773]          // =>  FALSE
[19:01:44.775]        // skip if-block "!isSWJ"
[19:01:44.775]      </control>
[19:01:44.775]      <block atomic="false" info="">
[19:01:44.775]        ReadDP(0x0);
[19:01:44.775]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:01:44.776]      </block>
[19:01:44.776]      // end if-block "protType == 2"
[19:01:44.776]    </control>
[19:01:44.776]  </sequence>
[19:01:44.776]  
[19:01:44.776]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:01:44.776]  
[19:01:44.776]  <debugvars>
[19:01:44.776]    // Pre-defined
[19:01:44.777]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:01:44.777]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:01:44.777]    __dp=0x00000000
[19:01:44.777]    __ap=0x00000000
[19:01:44.777]    __traceout=0x00000000      (Trace Disabled)
[19:01:44.777]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:01:44.777]    __FlashAddr=0x00000000
[19:01:44.777]    __FlashLen=0x00000000
[19:01:44.777]    __FlashArg=0x00000000
[19:01:44.778]    __FlashOp=0x00000000
[19:01:44.778]    __Result=0x00000000
[19:01:44.778]  </debugvars>
[19:01:44.779]  
[19:01:44.779]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:01:44.779]    <block atomic="false" info="">
[19:01:44.779]      __var SW_DP_ABORT       = 0x0;
[19:01:44.779]        // -> [SW_DP_ABORT <= 0x00000000]
[19:01:44.779]      __var DP_CTRL_STAT      = 0x4;
[19:01:44.779]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:01:44.779]      __var DP_SELECT         = 0x8;
[19:01:44.780]        // -> [DP_SELECT <= 0x00000008]
[19:01:44.780]      __var powered_down      = 0;
[19:01:44.780]        // -> [powered_down <= 0x00000000]
[19:01:44.780]      WriteDP(DP_SELECT, 0x00000000);
[19:01:44.780]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:01:44.781]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:01:44.781]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:01:44.781]        // -> [powered_down <= 0x00000001]
[19:01:44.781]    </block>
[19:01:44.781]    <control if="powered_down" while="" timeout="0" info="">
[19:01:44.781]      // if-block "powered_down"
[19:01:44.781]        // =>  TRUE
[19:01:44.782]      <block atomic="false" info="">
[19:01:44.782]        Message(0, "Debug/System power-up request sent");
[19:01:44.784]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:01:44.784]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:01:44.785]      </block>
[19:01:44.785]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:01:44.785]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:01:44.785]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:01:44.785]        // while-condition  =>  FALSE
[19:01:44.785]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:01:44.785]      </control>
[19:01:44.785]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:01:44.785]        // if-block "(__protocol & 0xFFFF) == 1"
[19:01:44.786]          // =>  FALSE
[19:01:44.786]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:01:44.786]      </control>
[19:01:44.786]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:01:44.787]        // if-block "(__protocol & 0xFFFF) == 2"
[19:01:44.787]          // =>  TRUE
[19:01:44.787]        <block atomic="false" info="">
[19:01:44.787]          Message(0, "executing SWD power up");
[19:01:44.788]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:01:44.789]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:01:44.789]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:01:44.789]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:01:44.790]        </block>
[19:01:44.790]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:01:44.790]      </control>
[19:01:44.790]      // end if-block "powered_down"
[19:01:44.790]    </control>
[19:01:44.790]    <block atomic="false" info="">
[19:01:44.790]      __var DEBUG_PORT_VAL    = 0;
[19:01:44.791]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:01:44.791]      __var ACCESS_POINT_VAL  = 0;
[19:01:44.791]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:01:44.791]      __ap = 1; 
[19:01:44.791]        // -> [__ap <= 0x00000001]
[19:01:44.791]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:01:44.792]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:01:44.792]      __ap = 4;
[19:01:44.793]        // -> [__ap <= 0x00000004]
[19:01:44.793]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:01:44.795]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:01:44.795]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:01:44.795]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:01:44.797]    </block>
[19:01:44.797]    <block atomic="false" info="">
[19:01:44.797]      __var nReset = 0x80;
[19:01:44.797]        // -> [nReset <= 0x00000080]
[19:01:44.797]      __var canReadPins = 0;
[19:01:44.797]        // -> [canReadPins <= 0x00000000]
[19:01:44.797]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:01:44.797]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:01:44.798]        // -> [canReadPins <= 0x00000001]
[19:01:44.798]    </block>
[19:01:44.798]    <control if="" while="1" timeout="200" info="">
[19:01:44.798]      // while "1"  (timeout="200")
[19:01:44.798]      // while-condition  =>  TRUE
[19:01:44.798]      // while "1"  (timeout="200")
[19:01:44.798]      // while-condition  =>  TRUE
[19:01:44.798]      // while "1"  (timeout="200")
[19:01:44.799]      // while-condition  =>  TRUE
[19:01:44.799]      // while "1"  (timeout="200")
[19:01:44.799]      // while-condition  =>  TRUE
[19:01:44.799]      // while "1"  (timeout="200")
[19:01:44.799]      // while-condition  =>  TRUE
[19:01:44.799]      // while "1"  (timeout="200")
[19:01:44.799]      // while-condition  =>  TRUE
[19:01:44.799]      // while "1"  (timeout="200")
[19:01:44.799]      // while-condition  =>  TRUE
[19:01:44.800]      // while "1"  (timeout="200")
[19:01:44.800]      // while-condition  =>  TRUE
[19:01:44.800]      // while "1"  (timeout="200")
[19:01:44.800]      // while-condition  =>  TRUE
[19:01:44.800]      // while "1"  (timeout="200")
[19:01:44.800]      // while-condition  =>  TRUE
[19:01:44.800]      // while "1"  (timeout="200")
[19:01:44.800]      // while-condition  =>  TRUE
[19:01:44.800]      // while "1"  (timeout="200")
[19:01:44.800]      // while-condition  =>  TRUE
[19:01:44.801]      // while "1"  (timeout="200")
[19:01:44.801]      // while  =>  TIMEOUT
[19:01:44.801]      // end while "1"
[19:01:44.801]    </control>
[19:01:44.801]    <control if="canReadPins" while="" timeout="0" info="">
[19:01:44.801]      // if-block "canReadPins"
[19:01:44.801]        // =>  TRUE
[19:01:44.802]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:01:44.802]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:01:44.802]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:01:44.802]        // while-condition  =>  FALSE
[19:01:44.802]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:01:44.802]      </control>
[19:01:44.802]      // end if-block "canReadPins"
[19:01:44.803]    </control>
[19:01:44.803]    <control if="!canReadPins" while="" timeout="0" info="">
[19:01:44.803]      // if-block "!canReadPins"
[19:01:44.803]        // =>  FALSE
[19:01:44.803]      // skip if-block "!canReadPins"
[19:01:44.803]    </control>
[19:01:44.803]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:01:44.803]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:01:44.803]        // =>  TRUE
[19:01:44.803]      <block atomic="false" info="">
[19:01:44.803]        WriteAP(0x00, 0x190008);
[19:01:44.805]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:01:44.805]        WriteAP(0xF0, 0x01);
[19:01:44.807]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:01:44.807]      </block>
[19:01:44.807]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:01:44.807]    </control>
[19:01:44.807]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:01:44.807]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:01:44.808]        // =>  FALSE
[19:01:44.808]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:01:44.808]    </control>
[19:01:44.808]    <block atomic="false" info="">
[19:01:44.808]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:01:44.809]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:01:44.809]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:01:44.809]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:01:44.811]      __ap = 0; //lets make sure we reset the access point selection
[19:01:44.811]        // -> [__ap <= 0x00000000]
[19:01:44.811]    </block>
[19:01:44.812]  </sequence>
[19:01:44.812]  
[19:01:44.818]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:01:44.818]  
[19:01:44.818]  <debugvars>
[19:01:44.818]    // Pre-defined
[19:01:44.819]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:01:44.819]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:01:44.819]    __dp=0x00000000
[19:01:44.819]    __ap=0x00000000
[19:01:44.819]    __traceout=0x00000000      (Trace Disabled)
[19:01:44.819]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:01:44.819]    __FlashAddr=0x00000000
[19:01:44.820]    __FlashLen=0x00000000
[19:01:44.820]    __FlashArg=0x00000000
[19:01:44.820]    __FlashOp=0x00000000
[19:01:44.820]    __Result=0x00000000
[19:01:44.820]  </debugvars>
[19:01:44.820]  
[19:01:44.820]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:01:44.820]    <block atomic="false" info="">
[19:01:44.820]      __var deviceID = 0;
[19:01:44.820]        // -> [deviceID <= 0x00000000]
[19:01:44.821]      __var version = 0;
[19:01:44.821]        // -> [version <= 0x00000000]
[19:01:44.821]      __var partNum = 0;
[19:01:44.821]        // -> [partNum <= 0x00000000]
[19:01:44.821]      __var manuf = 0;
[19:01:44.821]        // -> [manuf <= 0x00000000]
[19:01:44.821]      __var isMSPM0G1X0X_G3X0X = 0;
[19:01:44.821]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:01:44.821]      __var isProduction = 0;
[19:01:44.822]        // -> [isProduction <= 0x00000000]
[19:01:44.822]      __var continueId = 0;
[19:01:44.822]        // -> [continueId <= 0x00000000]
[19:01:44.822]      deviceID =   Read32(0x41C40004);
[19:01:44.823]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:01:44.823]        // -> [deviceID <= 0x2BB8802F]
[19:01:44.824]      version = deviceID >> 28;
[19:01:44.824]        // -> [version <= 0x00000002]
[19:01:44.824]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:01:44.824]        // -> [partNum <= 0x0000BB88]
[19:01:44.824]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:01:44.824]        // -> [manuf <= 0x00000017]
[19:01:44.824]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:01:44.824]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:01:44.824]      isProduction = (version > 0);
[19:01:44.824]        // -> [isProduction <= 0x00000001]
[19:01:44.824]    </block>
[19:01:44.825]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:01:44.825]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:01:44.825]        // =>  FALSE
[19:01:44.825]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:01:44.825]    </control>
[19:01:44.825]    <control if="continueId == 4" while="" timeout="0" info="">
[19:01:44.825]      // if-block "continueId == 4"
[19:01:44.825]        // =>  FALSE
[19:01:44.826]      // skip if-block "continueId == 4"
[19:01:44.826]    </control>
[19:01:44.826]    <control if="!isProduction" while="" timeout="0" info="">
[19:01:44.826]      // if-block "!isProduction"
[19:01:44.826]        // =>  FALSE
[19:01:44.826]      // skip if-block "!isProduction"
[19:01:44.826]    </control>
[19:01:44.826]  </sequence>
[19:01:44.826]  
[19:01:48.741]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:01:48.741]  
[19:01:48.742]  <debugvars>
[19:01:48.742]    // Pre-defined
[19:01:48.742]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:01:48.742]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:01:48.742]    __dp=0x00000000
[19:01:48.742]    __ap=0x00000000
[19:01:48.743]    __traceout=0x00000000      (Trace Disabled)
[19:01:48.743]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:01:48.743]    __FlashAddr=0x00000000
[19:01:48.743]    __FlashLen=0x00000000
[19:01:48.743]    __FlashArg=0x00000000
[19:01:48.743]    __FlashOp=0x00000000
[19:01:48.743]    __Result=0x00000000
[19:01:48.743]  </debugvars>
[19:01:48.743]  
[19:01:48.743]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:01:48.745]    <block atomic="false" info="">
[19:01:48.745]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:01:48.745]        // -> [isSWJ <= 0x00000001]
[19:01:48.745]      __var hasDormant = __protocol & 0x00020000;
[19:01:48.745]        // -> [hasDormant <= 0x00000000]
[19:01:48.745]      __var protType   = __protocol & 0x0000FFFF;
[19:01:48.745]        // -> [protType <= 0x00000002]
[19:01:48.745]    </block>
[19:01:48.745]    <control if="protType == 1" while="" timeout="0" info="">
[19:01:48.745]      // if-block "protType == 1"
[19:01:48.745]        // =>  FALSE
[19:01:48.745]      // skip if-block "protType == 1"
[19:01:48.745]    </control>
[19:01:48.745]    <control if="protType == 2" while="" timeout="0" info="">
[19:01:48.746]      // if-block "protType == 2"
[19:01:48.746]        // =>  TRUE
[19:01:48.746]      <control if="isSWJ" while="" timeout="0" info="">
[19:01:48.746]        // if-block "isSWJ"
[19:01:48.746]          // =>  TRUE
[19:01:48.746]        <control if="hasDormant" while="" timeout="0" info="">
[19:01:48.746]          // if-block "hasDormant"
[19:01:48.746]            // =>  FALSE
[19:01:48.746]          // skip if-block "hasDormant"
[19:01:48.746]        </control>
[19:01:48.746]        <control if="!hasDormant" while="" timeout="0" info="">
[19:01:48.747]          // if-block "!hasDormant"
[19:01:48.747]            // =>  TRUE
[19:01:48.747]          <block atomic="false" info="">
[19:01:48.747]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:01:48.747]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:01:48.747]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:01:48.748]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:01:48.748]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:01:48.748]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:01:48.748]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:01:48.749]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:01:48.749]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:01:48.749]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:01:48.749]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:01:48.749]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:01:48.749]          </block>
[19:01:48.749]          // end if-block "!hasDormant"
[19:01:48.751]        </control>
[19:01:48.751]        // end if-block "isSWJ"
[19:01:48.751]      </control>
[19:01:48.751]      <control if="!isSWJ" while="" timeout="0" info="">
[19:01:48.751]        // if-block "!isSWJ"
[19:01:48.751]          // =>  FALSE
[19:01:48.751]        // skip if-block "!isSWJ"
[19:01:48.751]      </control>
[19:01:48.752]      <block atomic="false" info="">
[19:01:48.752]        ReadDP(0x0);
[19:01:48.752]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:01:48.752]      </block>
[19:01:48.752]      // end if-block "protType == 2"
[19:01:48.752]    </control>
[19:01:48.752]  </sequence>
[19:01:48.753]  
[19:01:48.753]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:01:48.753]  
[19:01:48.753]  <debugvars>
[19:01:48.753]    // Pre-defined
[19:01:48.753]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:01:48.753]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:01:48.753]    __dp=0x00000000
[19:01:48.753]    __ap=0x00000000
[19:01:48.753]    __traceout=0x00000000      (Trace Disabled)
[19:01:48.754]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:01:48.754]    __FlashAddr=0x00000000
[19:01:48.754]    __FlashLen=0x00000000
[19:01:48.754]    __FlashArg=0x00000000
[19:01:48.754]    __FlashOp=0x00000000
[19:01:48.754]    __Result=0x00000000
[19:01:48.755]  </debugvars>
[19:01:48.755]  
[19:01:48.755]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:01:48.755]    <block atomic="false" info="">
[19:01:48.755]      __var SW_DP_ABORT       = 0x0;
[19:01:48.755]        // -> [SW_DP_ABORT <= 0x00000000]
[19:01:48.755]      __var DP_CTRL_STAT      = 0x4;
[19:01:48.755]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:01:48.755]      __var DP_SELECT         = 0x8;
[19:01:48.755]        // -> [DP_SELECT <= 0x00000008]
[19:01:48.755]      __var powered_down      = 0;
[19:01:48.755]        // -> [powered_down <= 0x00000000]
[19:01:48.756]      WriteDP(DP_SELECT, 0x00000000);
[19:01:48.756]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:01:48.756]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:01:48.757]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:01:48.757]        // -> [powered_down <= 0x00000001]
[19:01:48.757]    </block>
[19:01:48.757]    <control if="powered_down" while="" timeout="0" info="">
[19:01:48.757]      // if-block "powered_down"
[19:01:48.757]        // =>  TRUE
[19:01:48.757]      <block atomic="false" info="">
[19:01:48.757]        Message(0, "Debug/System power-up request sent");
[19:01:48.760]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:01:48.761]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:01:48.761]      </block>
[19:01:48.761]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:01:48.761]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:01:48.762]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:01:48.762]        // while-condition  =>  FALSE
[19:01:48.762]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:01:48.762]      </control>
[19:01:48.762]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:01:48.762]        // if-block "(__protocol & 0xFFFF) == 1"
[19:01:48.762]          // =>  FALSE
[19:01:48.762]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:01:48.762]      </control>
[19:01:48.762]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:01:48.762]        // if-block "(__protocol & 0xFFFF) == 2"
[19:01:48.763]          // =>  TRUE
[19:01:48.763]        <block atomic="false" info="">
[19:01:48.763]          Message(0, "executing SWD power up");
[19:01:48.765]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:01:48.765]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:01:48.765]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:01:48.766]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:01:48.766]        </block>
[19:01:48.766]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:01:48.766]      </control>
[19:01:48.766]      // end if-block "powered_down"
[19:01:48.766]    </control>
[19:01:48.766]    <block atomic="false" info="">
[19:01:48.766]      __var DEBUG_PORT_VAL    = 0;
[19:01:48.767]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:01:48.767]      __var ACCESS_POINT_VAL  = 0;
[19:01:48.767]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:01:48.767]      __ap = 1; 
[19:01:48.767]        // -> [__ap <= 0x00000001]
[19:01:48.767]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:01:48.769]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:01:48.769]      __ap = 4;
[19:01:48.769]        // -> [__ap <= 0x00000004]
[19:01:48.769]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:01:48.770]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:01:48.770]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:01:48.770]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:01:48.771]    </block>
[19:01:48.771]    <block atomic="false" info="">
[19:01:48.772]      __var nReset = 0x80;
[19:01:48.772]        // -> [nReset <= 0x00000080]
[19:01:48.772]      __var canReadPins = 0;
[19:01:48.772]        // -> [canReadPins <= 0x00000000]
[19:01:48.772]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:01:48.772]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:01:48.772]        // -> [canReadPins <= 0x00000001]
[19:01:48.773]    </block>
[19:01:48.773]    <control if="" while="1" timeout="200" info="">
[19:01:48.773]      // while "1"  (timeout="200")
[19:01:48.773]      // while-condition  =>  TRUE
[19:01:48.773]      // while "1"  (timeout="200")
[19:01:48.773]      // while-condition  =>  TRUE
[19:01:48.773]      // while "1"  (timeout="200")
[19:01:48.773]      // while-condition  =>  TRUE
[19:01:48.774]      // while "1"  (timeout="200")
[19:01:48.774]      // while-condition  =>  TRUE
[19:01:48.774]      // while "1"  (timeout="200")
[19:01:48.774]      // while-condition  =>  TRUE
[19:01:48.774]      // while "1"  (timeout="200")
[19:01:48.774]      // while-condition  =>  TRUE
[19:01:48.774]      // while "1"  (timeout="200")
[19:01:48.775]      // while-condition  =>  TRUE
[19:01:48.775]      // while "1"  (timeout="200")
[19:01:48.775]      // while-condition  =>  TRUE
[19:01:48.775]      // while "1"  (timeout="200")
[19:01:48.775]      // while-condition  =>  TRUE
[19:01:48.775]      // while "1"  (timeout="200")
[19:01:48.775]      // while-condition  =>  TRUE
[19:01:48.775]      // while "1"  (timeout="200")
[19:01:48.775]      // while-condition  =>  TRUE
[19:01:48.775]      // while "1"  (timeout="200")
[19:01:48.776]      // while-condition  =>  TRUE
[19:01:48.776]      // while "1"  (timeout="200")
[19:01:48.776]      // while-condition  =>  TRUE
[19:01:48.776]      // while "1"  (timeout="200")
[19:01:48.776]      // while-condition  =>  TRUE
[19:01:48.776]      // while "1"  (timeout="200")
[19:01:48.776]      // while-condition  =>  TRUE
[19:01:48.777]      // while "1"  (timeout="200")
[19:01:48.777]      // while-condition  =>  TRUE
[19:01:48.777]      // while "1"  (timeout="200")
[19:01:48.777]      // while-condition  =>  TRUE
[19:01:48.777]      // while "1"  (timeout="200")
[19:01:48.777]      // while-condition  =>  TRUE
[19:01:48.777]      // while "1"  (timeout="200")
[19:01:48.777]      // while-condition  =>  TRUE
[19:01:48.777]      // while "1"  (timeout="200")
[19:01:48.777]      // while-condition  =>  TRUE
[19:01:48.778]      // while "1"  (timeout="200")
[19:01:48.778]      // while-condition  =>  TRUE
[19:01:48.778]      // while "1"  (timeout="200")
[19:01:48.778]      // while-condition  =>  TRUE
[19:01:48.778]      // while "1"  (timeout="200")
[19:01:48.778]      // while-condition  =>  TRUE
[19:01:48.778]      // while "1"  (timeout="200")
[19:01:48.778]      // while-condition  =>  TRUE
[19:01:48.778]      // while "1"  (timeout="200")
[19:01:48.778]      // while-condition  =>  TRUE
[19:01:48.778]      // while "1"  (timeout="200")
[19:01:48.778]      // while-condition  =>  TRUE
[19:01:48.778]      // while "1"  (timeout="200")
[19:01:48.778]      // while-condition  =>  TRUE
[19:01:48.779]      // while "1"  (timeout="200")
[19:01:48.779]      // while-condition  =>  TRUE
[19:01:48.779]      // while "1"  (timeout="200")
[19:01:48.779]      // while-condition  =>  TRUE
[19:01:48.779]      // while "1"  (timeout="200")
[19:01:48.779]      // while-condition  =>  TRUE
[19:01:48.779]      // while "1"  (timeout="200")
[19:01:48.780]      // while-condition  =>  TRUE
[19:01:48.780]      // while "1"  (timeout="200")
[19:01:48.780]      // while-condition  =>  TRUE
[19:01:48.780]      // while "1"  (timeout="200")
[19:01:48.780]      // while-condition  =>  TRUE
[19:01:48.780]      // while "1"  (timeout="200")
[19:01:48.780]      // while-condition  =>  TRUE
[19:01:48.780]      // while "1"  (timeout="200")
[19:01:48.780]      // while-condition  =>  TRUE
[19:01:48.780]      // while "1"  (timeout="200")
[19:01:48.781]      // while-condition  =>  TRUE
[19:01:48.781]      // while "1"  (timeout="200")
[19:01:48.781]      // while-condition  =>  TRUE
[19:01:48.781]      // while "1"  (timeout="200")
[19:01:48.781]      // while-condition  =>  TRUE
[19:01:48.781]      // while "1"  (timeout="200")
[19:01:48.781]      // while-condition  =>  TRUE
[19:01:48.782]      // while "1"  (timeout="200")
[19:01:48.782]      // while-condition  =>  TRUE
[19:01:48.782]      // while "1"  (timeout="200")
[19:01:48.782]      // while-condition  =>  TRUE
[19:01:48.782]      // while "1"  (timeout="200")
[19:01:48.782]      // while-condition  =>  TRUE
[19:01:48.782]      // while "1"  (timeout="200")
[19:01:48.782]      // while-condition  =>  TRUE
[19:01:48.782]      // while "1"  (timeout="200")
[19:01:48.782]      // while-condition  =>  TRUE
[19:01:48.783]      // while "1"  (timeout="200")
[19:01:48.783]      // while-condition  =>  TRUE
[19:01:48.783]      // while "1"  (timeout="200")
[19:01:48.783]      // while-condition  =>  TRUE
[19:01:48.783]      // while "1"  (timeout="200")
[19:01:48.783]      // while-condition  =>  TRUE
[19:01:48.783]      // while "1"  (timeout="200")
[19:01:48.783]      // while-condition  =>  TRUE
[19:01:48.783]      // while "1"  (timeout="200")
[19:01:48.783]      // while-condition  =>  TRUE
[19:01:48.783]      // while "1"  (timeout="200")
[19:01:48.783]      // while-condition  =>  TRUE
[19:01:48.783]      // while "1"  (timeout="200")
[19:01:48.783]      // while-condition  =>  TRUE
[19:01:48.783]      // while "1"  (timeout="200")
[19:01:48.783]      // while-condition  =>  TRUE
[19:01:48.783]      // while "1"  (timeout="200")
[19:01:48.785]      // while-condition  =>  TRUE
[19:01:48.785]      // while "1"  (timeout="200")
[19:01:48.785]      // while-condition  =>  TRUE
[19:01:48.785]      // while "1"  (timeout="200")
[19:01:48.785]      // while-condition  =>  TRUE
[19:01:48.785]      // while "1"  (timeout="200")
[19:01:48.785]      // while-condition  =>  TRUE
[19:01:48.785]      // while "1"  (timeout="200")
[19:01:48.785]      // while-condition  =>  TRUE
[19:01:48.786]      // while "1"  (timeout="200")
[19:01:48.786]      // while  =>  TIMEOUT
[19:01:48.786]      // end while "1"
[19:01:48.786]    </control>
[19:01:48.786]    <control if="canReadPins" while="" timeout="0" info="">
[19:01:48.786]      // if-block "canReadPins"
[19:01:48.786]        // =>  TRUE
[19:01:48.786]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:01:48.786]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:01:48.786]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:01:48.786]        // while-condition  =>  FALSE
[19:01:48.787]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:01:48.787]      </control>
[19:01:48.787]      // end if-block "canReadPins"
[19:01:48.787]    </control>
[19:01:48.787]    <control if="!canReadPins" while="" timeout="0" info="">
[19:01:48.787]      // if-block "!canReadPins"
[19:01:48.787]        // =>  FALSE
[19:01:48.787]      // skip if-block "!canReadPins"
[19:01:48.787]    </control>
[19:01:48.787]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:01:48.787]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:01:48.788]        // =>  TRUE
[19:01:48.788]      <block atomic="false" info="">
[19:01:48.788]        WriteAP(0x00, 0x190008);
[19:01:48.789]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:01:48.789]        WriteAP(0xF0, 0x01);
[19:01:48.791]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:01:48.791]      </block>
[19:01:48.791]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:01:48.791]    </control>
[19:01:48.791]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:01:48.791]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:01:48.791]        // =>  FALSE
[19:01:48.791]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:01:48.791]    </control>
[19:01:48.792]    <block atomic="false" info="">
[19:01:48.792]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:01:48.793]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:01:48.793]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:01:48.793]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:01:48.795]      __ap = 0; //lets make sure we reset the access point selection
[19:01:48.795]        // -> [__ap <= 0x00000000]
[19:01:48.795]    </block>
[19:01:48.795]  </sequence>
[19:01:48.795]  
[19:01:48.801]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:01:48.801]  
[19:01:48.801]  <debugvars>
[19:01:48.802]    // Pre-defined
[19:01:48.802]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:01:48.802]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:01:48.802]    __dp=0x00000000
[19:01:48.802]    __ap=0x00000000
[19:01:48.802]    __traceout=0x00000000      (Trace Disabled)
[19:01:48.802]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:01:48.802]    __FlashAddr=0x00000000
[19:01:48.802]    __FlashLen=0x00000000
[19:01:48.802]    __FlashArg=0x00000000
[19:01:48.802]    __FlashOp=0x00000000
[19:01:48.802]    __Result=0x00000000
[19:01:48.803]  </debugvars>
[19:01:48.803]  
[19:01:48.803]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:01:48.803]    <block atomic="false" info="">
[19:01:48.803]      __var deviceID = 0;
[19:01:48.803]        // -> [deviceID <= 0x00000000]
[19:01:48.803]      __var version = 0;
[19:01:48.803]        // -> [version <= 0x00000000]
[19:01:48.803]      __var partNum = 0;
[19:01:48.803]        // -> [partNum <= 0x00000000]
[19:01:48.804]      __var manuf = 0;
[19:01:48.804]        // -> [manuf <= 0x00000000]
[19:01:48.804]      __var isMSPM0G1X0X_G3X0X = 0;
[19:01:48.804]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:01:48.804]      __var isProduction = 0;
[19:01:48.804]        // -> [isProduction <= 0x00000000]
[19:01:48.804]      __var continueId = 0;
[19:01:48.804]        // -> [continueId <= 0x00000000]
[19:01:48.804]      deviceID =   Read32(0x41C40004);
[19:01:48.806]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:01:48.806]        // -> [deviceID <= 0x2BB8802F]
[19:01:48.806]      version = deviceID >> 28;
[19:01:48.806]        // -> [version <= 0x00000002]
[19:01:48.806]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:01:48.807]        // -> [partNum <= 0x0000BB88]
[19:01:48.807]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:01:48.807]        // -> [manuf <= 0x00000017]
[19:01:48.807]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:01:48.807]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:01:48.807]      isProduction = (version > 0);
[19:01:48.807]        // -> [isProduction <= 0x00000001]
[19:01:48.808]    </block>
[19:01:48.808]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:01:48.808]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:01:48.808]        // =>  FALSE
[19:01:48.808]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:01:48.808]    </control>
[19:01:48.808]    <control if="continueId == 4" while="" timeout="0" info="">
[19:01:48.808]      // if-block "continueId == 4"
[19:01:48.808]        // =>  FALSE
[19:01:48.808]      // skip if-block "continueId == 4"
[19:01:48.808]    </control>
[19:01:48.808]    <control if="!isProduction" while="" timeout="0" info="">
[19:01:48.808]      // if-block "!isProduction"
[19:01:48.808]        // =>  FALSE
[19:01:48.809]      // skip if-block "!isProduction"
[19:01:48.809]    </control>
[19:01:48.809]  </sequence>
[19:01:48.809]  
[19:03:16.475]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:03:16.475]  
[19:03:16.483]  <debugvars>
[19:03:16.483]    // Pre-defined
[19:03:16.484]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:03:16.484]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:03:16.484]    __dp=0x00000000
[19:03:16.484]    __ap=0x00000000
[19:03:16.484]    __traceout=0x00000000      (Trace Disabled)
[19:03:16.484]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:03:16.484]    __FlashAddr=0x00000000
[19:03:16.484]    __FlashLen=0x00000000
[19:03:16.484]    __FlashArg=0x00000000
[19:03:16.484]    __FlashOp=0x00000000
[19:03:16.485]    __Result=0x00000000
[19:03:16.485]  </debugvars>
[19:03:16.485]  
[19:03:16.485]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:03:16.485]    <block atomic="false" info="">
[19:03:16.485]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:03:16.485]        // -> [isSWJ <= 0x00000001]
[19:03:16.485]      __var hasDormant = __protocol & 0x00020000;
[19:03:16.485]        // -> [hasDormant <= 0x00000000]
[19:03:16.485]      __var protType   = __protocol & 0x0000FFFF;
[19:03:16.485]        // -> [protType <= 0x00000002]
[19:03:16.486]    </block>
[19:03:16.486]    <control if="protType == 1" while="" timeout="0" info="">
[19:03:16.486]      // if-block "protType == 1"
[19:03:16.486]        // =>  FALSE
[19:03:16.486]      // skip if-block "protType == 1"
[19:03:16.486]    </control>
[19:03:16.486]    <control if="protType == 2" while="" timeout="0" info="">
[19:03:16.486]      // if-block "protType == 2"
[19:03:16.486]        // =>  TRUE
[19:03:16.486]      <control if="isSWJ" while="" timeout="0" info="">
[19:03:16.486]        // if-block "isSWJ"
[19:03:16.486]          // =>  TRUE
[19:03:16.486]        <control if="hasDormant" while="" timeout="0" info="">
[19:03:16.486]          // if-block "hasDormant"
[19:03:16.486]            // =>  FALSE
[19:03:16.486]          // skip if-block "hasDormant"
[19:03:16.486]        </control>
[19:03:16.487]        <control if="!hasDormant" while="" timeout="0" info="">
[19:03:16.487]          // if-block "!hasDormant"
[19:03:16.487]            // =>  TRUE
[19:03:16.487]          <block atomic="false" info="">
[19:03:16.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:03:16.487]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:03:16.487]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:03:16.488]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:03:16.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:03:16.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:03:16.489]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:03:16.489]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:03:16.489]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:03:16.490]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:03:16.490]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:03:16.490]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:03:16.490]          </block>
[19:03:16.490]          // end if-block "!hasDormant"
[19:03:16.490]        </control>
[19:03:16.492]        // end if-block "isSWJ"
[19:03:16.492]      </control>
[19:03:16.492]      <control if="!isSWJ" while="" timeout="0" info="">
[19:03:16.492]        // if-block "!isSWJ"
[19:03:16.492]          // =>  FALSE
[19:03:16.492]        // skip if-block "!isSWJ"
[19:03:16.492]      </control>
[19:03:16.492]      <block atomic="false" info="">
[19:03:16.492]        ReadDP(0x0);
[19:03:16.493]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:03:16.493]      </block>
[19:03:16.493]      // end if-block "protType == 2"
[19:03:16.493]    </control>
[19:03:16.493]  </sequence>
[19:03:16.493]  
[19:03:16.493]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:03:16.493]  
[19:03:16.494]  <debugvars>
[19:03:16.494]    // Pre-defined
[19:03:16.494]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:03:16.494]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:03:16.494]    __dp=0x00000000
[19:03:16.494]    __ap=0x00000000
[19:03:16.495]    __traceout=0x00000000      (Trace Disabled)
[19:03:16.495]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:03:16.495]    __FlashAddr=0x00000000
[19:03:16.495]    __FlashLen=0x00000000
[19:03:16.495]    __FlashArg=0x00000000
[19:03:16.495]    __FlashOp=0x00000000
[19:03:16.495]    __Result=0x00000000
[19:03:16.495]  </debugvars>
[19:03:16.495]  
[19:03:16.495]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:03:16.495]    <block atomic="false" info="">
[19:03:16.496]      __var SW_DP_ABORT       = 0x0;
[19:03:16.496]        // -> [SW_DP_ABORT <= 0x00000000]
[19:03:16.496]      __var DP_CTRL_STAT      = 0x4;
[19:03:16.496]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:03:16.496]      __var DP_SELECT         = 0x8;
[19:03:16.496]        // -> [DP_SELECT <= 0x00000008]
[19:03:16.496]      __var powered_down      = 0;
[19:03:16.496]        // -> [powered_down <= 0x00000000]
[19:03:16.497]      WriteDP(DP_SELECT, 0x00000000);
[19:03:16.497]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:03:16.497]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:03:16.497]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:03:16.497]        // -> [powered_down <= 0x00000001]
[19:03:16.497]    </block>
[19:03:16.498]    <control if="powered_down" while="" timeout="0" info="">
[19:03:16.498]      // if-block "powered_down"
[19:03:16.498]        // =>  TRUE
[19:03:16.498]      <block atomic="false" info="">
[19:03:16.498]        Message(0, "Debug/System power-up request sent");
[19:03:16.501]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:03:16.501]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:03:16.501]      </block>
[19:03:16.501]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:03:16.501]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:03:16.503]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:03:16.503]        // while-condition  =>  FALSE
[19:03:16.503]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:03:16.503]      </control>
[19:03:16.503]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:03:16.503]        // if-block "(__protocol & 0xFFFF) == 1"
[19:03:16.503]          // =>  FALSE
[19:03:16.503]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:03:16.504]      </control>
[19:03:16.504]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:03:16.504]        // if-block "(__protocol & 0xFFFF) == 2"
[19:03:16.504]          // =>  TRUE
[19:03:16.504]        <block atomic="false" info="">
[19:03:16.504]          Message(0, "executing SWD power up");
[19:03:16.506]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:03:16.506]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:03:16.506]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:03:16.507]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:03:16.507]        </block>
[19:03:16.507]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:03:16.507]      </control>
[19:03:16.507]      // end if-block "powered_down"
[19:03:16.507]    </control>
[19:03:16.507]    <block atomic="false" info="">
[19:03:16.507]      __var DEBUG_PORT_VAL    = 0;
[19:03:16.507]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:03:16.507]      __var ACCESS_POINT_VAL  = 0;
[19:03:16.507]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:03:16.507]      __ap = 1; 
[19:03:16.508]        // -> [__ap <= 0x00000001]
[19:03:16.508]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:03:16.509]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:03:16.509]      __ap = 4;
[19:03:16.509]        // -> [__ap <= 0x00000004]
[19:03:16.509]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:03:16.510]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:03:16.510]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:03:16.510]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:03:16.513]    </block>
[19:03:16.513]    <block atomic="false" info="">
[19:03:16.513]      __var nReset = 0x80;
[19:03:16.513]        // -> [nReset <= 0x00000080]
[19:03:16.513]      __var canReadPins = 0;
[19:03:16.513]        // -> [canReadPins <= 0x00000000]
[19:03:16.513]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:03:16.513]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:03:16.513]        // -> [canReadPins <= 0x00000001]
[19:03:16.513]    </block>
[19:03:16.513]    <control if="" while="1" timeout="200" info="">
[19:03:16.513]      // while "1"  (timeout="200")
[19:03:16.513]      // while-condition  =>  TRUE
[19:03:16.513]      // while "1"  (timeout="200")
[19:03:16.515]      // while-condition  =>  TRUE
[19:03:16.515]      // while "1"  (timeout="200")
[19:03:16.515]      // while-condition  =>  TRUE
[19:03:16.515]      // while "1"  (timeout="200")
[19:03:16.515]      // while-condition  =>  TRUE
[19:03:16.515]      // while "1"  (timeout="200")
[19:03:16.515]      // while-condition  =>  TRUE
[19:03:16.515]      // while "1"  (timeout="200")
[19:03:16.515]      // while-condition  =>  TRUE
[19:03:16.515]      // while "1"  (timeout="200")
[19:03:16.516]      // while-condition  =>  TRUE
[19:03:16.516]      // while "1"  (timeout="200")
[19:03:16.516]      // while-condition  =>  TRUE
[19:03:16.516]      // while "1"  (timeout="200")
[19:03:16.516]      // while-condition  =>  TRUE
[19:03:16.517]      // while "1"  (timeout="200")
[19:03:16.517]      // while-condition  =>  TRUE
[19:03:16.517]      // while "1"  (timeout="200")
[19:03:16.517]      // while-condition  =>  TRUE
[19:03:16.517]      // while "1"  (timeout="200")
[19:03:16.517]      // while-condition  =>  TRUE
[19:03:16.518]      // while "1"  (timeout="200")
[19:03:16.518]      // while-condition  =>  TRUE
[19:03:16.518]      // while "1"  (timeout="200")
[19:03:16.518]      // while-condition  =>  TRUE
[19:03:16.518]      // while "1"  (timeout="200")
[19:03:16.518]      // while-condition  =>  TRUE
[19:03:16.518]      // while "1"  (timeout="200")
[19:03:16.518]      // while-condition  =>  TRUE
[19:03:16.518]      // while "1"  (timeout="200")
[19:03:16.518]      // while-condition  =>  TRUE
[19:03:16.518]      // while "1"  (timeout="200")
[19:03:16.518]      // while-condition  =>  TRUE
[19:03:16.518]      // while "1"  (timeout="200")
[19:03:16.518]      // while-condition  =>  TRUE
[19:03:16.518]      // while "1"  (timeout="200")
[19:03:16.518]      // while-condition  =>  TRUE
[19:03:16.518]      // while "1"  (timeout="200")
[19:03:16.519]      // while-condition  =>  TRUE
[19:03:16.519]      // while "1"  (timeout="200")
[19:03:16.519]      // while-condition  =>  TRUE
[19:03:16.519]      // while "1"  (timeout="200")
[19:03:16.519]      // while-condition  =>  TRUE
[19:03:16.519]      // while "1"  (timeout="200")
[19:03:16.519]      // while-condition  =>  TRUE
[19:03:16.519]      // while "1"  (timeout="200")
[19:03:16.519]      // while-condition  =>  TRUE
[19:03:16.519]      // while "1"  (timeout="200")
[19:03:16.519]      // while-condition  =>  TRUE
[19:03:16.519]      // while "1"  (timeout="200")
[19:03:16.519]      // while-condition  =>  TRUE
[19:03:16.519]      // while "1"  (timeout="200")
[19:03:16.519]      // while-condition  =>  TRUE
[19:03:16.519]      // while "1"  (timeout="200")
[19:03:16.521]      // while-condition  =>  TRUE
[19:03:16.521]      // while "1"  (timeout="200")
[19:03:16.521]      // while  =>  TIMEOUT
[19:03:16.521]      // end while "1"
[19:03:16.521]    </control>
[19:03:16.521]    <control if="canReadPins" while="" timeout="0" info="">
[19:03:16.521]      // if-block "canReadPins"
[19:03:16.521]        // =>  TRUE
[19:03:16.521]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:03:16.521]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:03:16.522]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:03:16.522]        // while-condition  =>  FALSE
[19:03:16.522]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:03:16.522]      </control>
[19:03:16.522]      // end if-block "canReadPins"
[19:03:16.522]    </control>
[19:03:16.522]    <control if="!canReadPins" while="" timeout="0" info="">
[19:03:16.522]      // if-block "!canReadPins"
[19:03:16.522]        // =>  FALSE
[19:03:16.523]      // skip if-block "!canReadPins"
[19:03:16.523]    </control>
[19:03:16.523]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:03:16.523]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:03:16.523]        // =>  TRUE
[19:03:16.523]      <block atomic="false" info="">
[19:03:16.523]        WriteAP(0x00, 0x190008);
[19:03:16.524]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:03:16.524]        WriteAP(0xF0, 0x01);
[19:03:16.526]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:03:16.526]      </block>
[19:03:16.526]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:03:16.526]    </control>
[19:03:16.526]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:03:16.526]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:03:16.526]        // =>  FALSE
[19:03:16.527]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:03:16.527]    </control>
[19:03:16.527]    <block atomic="false" info="">
[19:03:16.527]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:03:16.528]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:03:16.528]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:03:16.528]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:03:16.530]      __ap = 0; //lets make sure we reset the access point selection
[19:03:16.530]        // -> [__ap <= 0x00000000]
[19:03:16.531]    </block>
[19:03:16.531]  </sequence>
[19:03:16.531]  
[19:03:16.536]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:03:16.536]  
[19:03:16.537]  <debugvars>
[19:03:16.537]    // Pre-defined
[19:03:16.537]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:03:16.537]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:03:16.537]    __dp=0x00000000
[19:03:16.537]    __ap=0x00000000
[19:03:16.537]    __traceout=0x00000000      (Trace Disabled)
[19:03:16.537]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:03:16.537]    __FlashAddr=0x00000000
[19:03:16.538]    __FlashLen=0x00000000
[19:03:16.538]    __FlashArg=0x00000000
[19:03:16.538]    __FlashOp=0x00000000
[19:03:16.538]    __Result=0x00000000
[19:03:16.538]  </debugvars>
[19:03:16.538]  
[19:03:16.538]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:03:16.539]    <block atomic="false" info="">
[19:03:16.539]      __var deviceID = 0;
[19:03:16.539]        // -> [deviceID <= 0x00000000]
[19:03:16.539]      __var version = 0;
[19:03:16.539]        // -> [version <= 0x00000000]
[19:03:16.539]      __var partNum = 0;
[19:03:16.539]        // -> [partNum <= 0x00000000]
[19:03:16.539]      __var manuf = 0;
[19:03:16.539]        // -> [manuf <= 0x00000000]
[19:03:16.539]      __var isMSPM0G1X0X_G3X0X = 0;
[19:03:16.540]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:03:16.540]      __var isProduction = 0;
[19:03:16.540]        // -> [isProduction <= 0x00000000]
[19:03:16.540]      __var continueId = 0;
[19:03:16.540]        // -> [continueId <= 0x00000000]
[19:03:16.540]      deviceID =   Read32(0x41C40004);
[19:03:16.541]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:03:16.541]        // -> [deviceID <= 0x2BB8802F]
[19:03:16.542]      version = deviceID >> 28;
[19:03:16.542]        // -> [version <= 0x00000002]
[19:03:16.542]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:03:16.542]        // -> [partNum <= 0x0000BB88]
[19:03:16.542]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:03:16.542]        // -> [manuf <= 0x00000017]
[19:03:16.542]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:03:16.542]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:03:16.542]      isProduction = (version > 0);
[19:03:16.542]        // -> [isProduction <= 0x00000001]
[19:03:16.542]    </block>
[19:03:16.542]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:03:16.543]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:03:16.543]        // =>  FALSE
[19:03:16.543]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:03:16.543]    </control>
[19:03:16.543]    <control if="continueId == 4" while="" timeout="0" info="">
[19:03:16.543]      // if-block "continueId == 4"
[19:03:16.543]        // =>  FALSE
[19:03:16.543]      // skip if-block "continueId == 4"
[19:03:16.543]    </control>
[19:03:16.543]    <control if="!isProduction" while="" timeout="0" info="">
[19:03:16.543]      // if-block "!isProduction"
[19:03:16.545]        // =>  FALSE
[19:03:16.545]      // skip if-block "!isProduction"
[19:03:16.545]    </control>
[19:03:16.545]  </sequence>
[19:03:16.545]  
[19:03:20.481]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:03:20.481]  
[19:03:20.481]  <debugvars>
[19:03:20.481]    // Pre-defined
[19:03:20.481]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:03:20.481]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:03:20.482]    __dp=0x00000000
[19:03:20.482]    __ap=0x00000000
[19:03:20.482]    __traceout=0x00000000      (Trace Disabled)
[19:03:20.482]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:03:20.482]    __FlashAddr=0x00000000
[19:03:20.482]    __FlashLen=0x00000000
[19:03:20.482]    __FlashArg=0x00000000
[19:03:20.482]    __FlashOp=0x00000000
[19:03:20.482]    __Result=0x00000000
[19:03:20.482]  </debugvars>
[19:03:20.482]  
[19:03:20.483]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:03:20.483]    <block atomic="false" info="">
[19:03:20.483]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:03:20.483]        // -> [isSWJ <= 0x00000001]
[19:03:20.483]      __var hasDormant = __protocol & 0x00020000;
[19:03:20.483]        // -> [hasDormant <= 0x00000000]
[19:03:20.483]      __var protType   = __protocol & 0x0000FFFF;
[19:03:20.483]        // -> [protType <= 0x00000002]
[19:03:20.484]    </block>
[19:03:20.484]    <control if="protType == 1" while="" timeout="0" info="">
[19:03:20.484]      // if-block "protType == 1"
[19:03:20.484]        // =>  FALSE
[19:03:20.484]      // skip if-block "protType == 1"
[19:03:20.484]    </control>
[19:03:20.484]    <control if="protType == 2" while="" timeout="0" info="">
[19:03:20.484]      // if-block "protType == 2"
[19:03:20.484]        // =>  TRUE
[19:03:20.484]      <control if="isSWJ" while="" timeout="0" info="">
[19:03:20.484]        // if-block "isSWJ"
[19:03:20.484]          // =>  TRUE
[19:03:20.485]        <control if="hasDormant" while="" timeout="0" info="">
[19:03:20.485]          // if-block "hasDormant"
[19:03:20.485]            // =>  FALSE
[19:03:20.485]          // skip if-block "hasDormant"
[19:03:20.486]        </control>
[19:03:20.486]        <control if="!hasDormant" while="" timeout="0" info="">
[19:03:20.486]          // if-block "!hasDormant"
[19:03:20.486]            // =>  TRUE
[19:03:20.486]          <block atomic="false" info="">
[19:03:20.486]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:03:20.487]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:03:20.487]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:03:20.487]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:03:20.487]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:03:20.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:03:20.488]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:03:20.488]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:03:20.488]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:03:20.488]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:03:20.489]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:03:20.489]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:03:20.489]          </block>
[19:03:20.489]          // end if-block "!hasDormant"
[19:03:20.489]        </control>
[19:03:20.489]        // end if-block "isSWJ"
[19:03:20.490]      </control>
[19:03:20.490]      <control if="!isSWJ" while="" timeout="0" info="">
[19:03:20.490]        // if-block "!isSWJ"
[19:03:20.490]          // =>  FALSE
[19:03:20.490]        // skip if-block "!isSWJ"
[19:03:20.490]      </control>
[19:03:20.490]      <block atomic="false" info="">
[19:03:20.490]        ReadDP(0x0);
[19:03:20.491]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:03:20.491]      </block>
[19:03:20.491]      // end if-block "protType == 2"
[19:03:20.491]    </control>
[19:03:20.491]  </sequence>
[19:03:20.491]  
[19:03:20.492]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:03:20.492]  
[19:03:20.492]  <debugvars>
[19:03:20.492]    // Pre-defined
[19:03:20.492]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:03:20.492]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:03:20.492]    __dp=0x00000000
[19:03:20.492]    __ap=0x00000000
[19:03:20.492]    __traceout=0x00000000      (Trace Disabled)
[19:03:20.492]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:03:20.492]    __FlashAddr=0x00000000
[19:03:20.492]    __FlashLen=0x00000000
[19:03:20.493]    __FlashArg=0x00000000
[19:03:20.493]    __FlashOp=0x00000000
[19:03:20.493]    __Result=0x00000000
[19:03:20.493]  </debugvars>
[19:03:20.493]  
[19:03:20.493]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:03:20.493]    <block atomic="false" info="">
[19:03:20.494]      __var SW_DP_ABORT       = 0x0;
[19:03:20.494]        // -> [SW_DP_ABORT <= 0x00000000]
[19:03:20.494]      __var DP_CTRL_STAT      = 0x4;
[19:03:20.494]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:03:20.494]      __var DP_SELECT         = 0x8;
[19:03:20.494]        // -> [DP_SELECT <= 0x00000008]
[19:03:20.494]      __var powered_down      = 0;
[19:03:20.495]        // -> [powered_down <= 0x00000000]
[19:03:20.495]      WriteDP(DP_SELECT, 0x00000000);
[19:03:20.495]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:03:20.495]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:03:20.496]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:03:20.496]        // -> [powered_down <= 0x00000001]
[19:03:20.496]    </block>
[19:03:20.497]    <control if="powered_down" while="" timeout="0" info="">
[19:03:20.497]      // if-block "powered_down"
[19:03:20.497]        // =>  TRUE
[19:03:20.497]      <block atomic="false" info="">
[19:03:20.497]        Message(0, "Debug/System power-up request sent");
[19:03:20.498]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:03:20.499]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:03:20.499]      </block>
[19:03:20.499]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:03:20.499]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:03:20.499]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:03:20.500]        // while-condition  =>  FALSE
[19:03:20.500]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:03:20.500]      </control>
[19:03:20.500]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:03:20.500]        // if-block "(__protocol & 0xFFFF) == 1"
[19:03:20.500]          // =>  FALSE
[19:03:20.500]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:03:20.500]      </control>
[19:03:20.501]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:03:20.501]        // if-block "(__protocol & 0xFFFF) == 2"
[19:03:20.501]          // =>  TRUE
[19:03:20.501]        <block atomic="false" info="">
[19:03:20.501]          Message(0, "executing SWD power up");
[19:03:20.503]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:03:20.504]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:03:20.504]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:03:20.505]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:03:20.505]        </block>
[19:03:20.505]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:03:20.505]      </control>
[19:03:20.505]      // end if-block "powered_down"
[19:03:20.505]    </control>
[19:03:20.505]    <block atomic="false" info="">
[19:03:20.505]      __var DEBUG_PORT_VAL    = 0;
[19:03:20.505]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:03:20.505]      __var ACCESS_POINT_VAL  = 0;
[19:03:20.505]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:03:20.506]      __ap = 1; 
[19:03:20.506]        // -> [__ap <= 0x00000001]
[19:03:20.506]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:03:20.507]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:03:20.507]      __ap = 4;
[19:03:20.507]        // -> [__ap <= 0x00000004]
[19:03:20.507]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:03:20.508]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:03:20.508]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:03:20.508]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:03:20.509]    </block>
[19:03:20.509]    <block atomic="false" info="">
[19:03:20.509]      __var nReset = 0x80;
[19:03:20.509]        // -> [nReset <= 0x00000080]
[19:03:20.509]      __var canReadPins = 0;
[19:03:20.509]        // -> [canReadPins <= 0x00000000]
[19:03:20.509]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:03:20.509]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:03:20.511]        // -> [canReadPins <= 0x00000001]
[19:03:20.511]    </block>
[19:03:20.511]    <control if="" while="1" timeout="200" info="">
[19:03:20.512]      // while "1"  (timeout="200")
[19:03:20.512]      // while-condition  =>  TRUE
[19:03:20.512]      // while "1"  (timeout="200")
[19:03:20.512]      // while-condition  =>  TRUE
[19:03:20.512]      // while "1"  (timeout="200")
[19:03:20.512]      // while-condition  =>  TRUE
[19:03:20.512]      // while "1"  (timeout="200")
[19:03:20.512]      // while-condition  =>  TRUE
[19:03:20.512]      // while "1"  (timeout="200")
[19:03:20.512]      // while-condition  =>  TRUE
[19:03:20.512]      // while "1"  (timeout="200")
[19:03:20.512]      // while-condition  =>  TRUE
[19:03:20.512]      // while "1"  (timeout="200")
[19:03:20.512]      // while-condition  =>  TRUE
[19:03:20.512]      // while "1"  (timeout="200")
[19:03:20.513]      // while-condition  =>  TRUE
[19:03:20.513]      // while "1"  (timeout="200")
[19:03:20.513]      // while-condition  =>  TRUE
[19:03:20.513]      // while "1"  (timeout="200")
[19:03:20.513]      // while-condition  =>  TRUE
[19:03:20.513]      // while "1"  (timeout="200")
[19:03:20.513]      // while-condition  =>  TRUE
[19:03:20.513]      // while "1"  (timeout="200")
[19:03:20.513]      // while-condition  =>  TRUE
[19:03:20.514]      // while "1"  (timeout="200")
[19:03:20.514]      // while-condition  =>  TRUE
[19:03:20.514]      // while "1"  (timeout="200")
[19:03:20.514]      // while-condition  =>  TRUE
[19:03:20.514]      // while "1"  (timeout="200")
[19:03:20.515]      // while-condition  =>  TRUE
[19:03:20.515]      // while "1"  (timeout="200")
[19:03:20.515]      // while-condition  =>  TRUE
[19:03:20.515]      // while "1"  (timeout="200")
[19:03:20.515]      // while-condition  =>  TRUE
[19:03:20.515]      // while "1"  (timeout="200")
[19:03:20.516]      // while-condition  =>  TRUE
[19:03:20.516]      // while "1"  (timeout="200")
[19:03:20.516]      // while-condition  =>  TRUE
[19:03:20.516]      // while "1"  (timeout="200")
[19:03:20.516]      // while-condition  =>  TRUE
[19:03:20.516]      // while "1"  (timeout="200")
[19:03:20.517]      // while-condition  =>  TRUE
[19:03:20.517]      // while "1"  (timeout="200")
[19:03:20.517]      // while-condition  =>  TRUE
[19:03:20.517]      // while "1"  (timeout="200")
[19:03:20.517]      // while-condition  =>  TRUE
[19:03:20.517]      // while "1"  (timeout="200")
[19:03:20.517]      // while-condition  =>  TRUE
[19:03:20.517]      // while "1"  (timeout="200")
[19:03:20.517]      // while-condition  =>  TRUE
[19:03:20.517]      // while "1"  (timeout="200")
[19:03:20.518]      // while-condition  =>  TRUE
[19:03:20.518]      // while "1"  (timeout="200")
[19:03:20.518]      // while-condition  =>  TRUE
[19:03:20.518]      // while "1"  (timeout="200")
[19:03:20.518]      // while-condition  =>  TRUE
[19:03:20.518]      // while "1"  (timeout="200")
[19:03:20.518]      // while-condition  =>  TRUE
[19:03:20.518]      // while "1"  (timeout="200")
[19:03:20.518]      // while-condition  =>  TRUE
[19:03:20.518]      // while "1"  (timeout="200")
[19:03:20.519]      // while-condition  =>  TRUE
[19:03:20.519]      // while "1"  (timeout="200")
[19:03:20.519]      // while-condition  =>  TRUE
[19:03:20.519]      // while "1"  (timeout="200")
[19:03:20.519]      // while-condition  =>  TRUE
[19:03:20.519]      // while "1"  (timeout="200")
[19:03:20.519]      // while-condition  =>  TRUE
[19:03:20.519]      // while "1"  (timeout="200")
[19:03:20.519]      // while-condition  =>  TRUE
[19:03:20.519]      // while "1"  (timeout="200")
[19:03:20.519]      // while-condition  =>  TRUE
[19:03:20.519]      // while "1"  (timeout="200")
[19:03:20.519]      // while-condition  =>  TRUE
[19:03:20.519]      // while "1"  (timeout="200")
[19:03:20.519]      // while-condition  =>  TRUE
[19:03:20.520]      // while "1"  (timeout="200")
[19:03:20.520]      // while  =>  TIMEOUT
[19:03:20.520]      // end while "1"
[19:03:20.520]    </control>
[19:03:20.520]    <control if="canReadPins" while="" timeout="0" info="">
[19:03:20.520]      // if-block "canReadPins"
[19:03:20.520]        // =>  TRUE
[19:03:20.520]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:03:20.520]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:03:20.521]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:03:20.521]        // while-condition  =>  FALSE
[19:03:20.521]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:03:20.521]      </control>
[19:03:20.521]      // end if-block "canReadPins"
[19:03:20.521]    </control>
[19:03:20.521]    <control if="!canReadPins" while="" timeout="0" info="">
[19:03:20.521]      // if-block "!canReadPins"
[19:03:20.521]        // =>  FALSE
[19:03:20.523]      // skip if-block "!canReadPins"
[19:03:20.523]    </control>
[19:03:20.523]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:03:20.523]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:03:20.523]        // =>  TRUE
[19:03:20.523]      <block atomic="false" info="">
[19:03:20.523]        WriteAP(0x00, 0x190008);
[19:03:20.524]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:03:20.524]        WriteAP(0xF0, 0x01);
[19:03:20.525]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:03:20.525]      </block>
[19:03:20.525]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:03:20.525]    </control>
[19:03:20.526]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:03:20.526]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:03:20.526]        // =>  FALSE
[19:03:20.526]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:03:20.526]    </control>
[19:03:20.526]    <block atomic="false" info="">
[19:03:20.527]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:03:20.528]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:03:20.528]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:03:20.528]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:03:20.529]      __ap = 0; //lets make sure we reset the access point selection
[19:03:20.529]        // -> [__ap <= 0x00000000]
[19:03:20.529]    </block>
[19:03:20.529]  </sequence>
[19:03:20.529]  
[19:03:20.535]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:03:20.535]  
[19:03:20.535]  <debugvars>
[19:03:20.535]    // Pre-defined
[19:03:20.536]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:03:20.536]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:03:20.536]    __dp=0x00000000
[19:03:20.536]    __ap=0x00000000
[19:03:20.536]    __traceout=0x00000000      (Trace Disabled)
[19:03:20.536]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:03:20.536]    __FlashAddr=0x00000000
[19:03:20.536]    __FlashLen=0x00000000
[19:03:20.536]    __FlashArg=0x00000000
[19:03:20.536]    __FlashOp=0x00000000
[19:03:20.536]    __Result=0x00000000
[19:03:20.537]  </debugvars>
[19:03:20.537]  
[19:03:20.537]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:03:20.537]    <block atomic="false" info="">
[19:03:20.537]      __var deviceID = 0;
[19:03:20.537]        // -> [deviceID <= 0x00000000]
[19:03:20.537]      __var version = 0;
[19:03:20.537]        // -> [version <= 0x00000000]
[19:03:20.537]      __var partNum = 0;
[19:03:20.537]        // -> [partNum <= 0x00000000]
[19:03:20.537]      __var manuf = 0;
[19:03:20.538]        // -> [manuf <= 0x00000000]
[19:03:20.538]      __var isMSPM0G1X0X_G3X0X = 0;
[19:03:20.538]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:03:20.538]      __var isProduction = 0;
[19:03:20.538]        // -> [isProduction <= 0x00000000]
[19:03:20.538]      __var continueId = 0;
[19:03:20.538]        // -> [continueId <= 0x00000000]
[19:03:20.538]      deviceID =   Read32(0x41C40004);
[19:03:20.540]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:03:20.540]        // -> [deviceID <= 0x2BB8802F]
[19:03:20.540]      version = deviceID >> 28;
[19:03:20.540]        // -> [version <= 0x00000002]
[19:03:20.540]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:03:20.540]        // -> [partNum <= 0x0000BB88]
[19:03:20.541]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:03:20.541]        // -> [manuf <= 0x00000017]
[19:03:20.541]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:03:20.541]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:03:20.541]      isProduction = (version > 0);
[19:03:20.541]        // -> [isProduction <= 0x00000001]
[19:03:20.541]    </block>
[19:03:20.541]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:03:20.541]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:03:20.542]        // =>  FALSE
[19:03:20.542]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:03:20.542]    </control>
[19:03:20.542]    <control if="continueId == 4" while="" timeout="0" info="">
[19:03:20.542]      // if-block "continueId == 4"
[19:03:20.542]        // =>  FALSE
[19:03:20.542]      // skip if-block "continueId == 4"
[19:03:20.542]    </control>
[19:03:20.542]    <control if="!isProduction" while="" timeout="0" info="">
[19:03:20.542]      // if-block "!isProduction"
[19:03:20.542]        // =>  FALSE
[19:03:20.542]      // skip if-block "!isProduction"
[19:03:20.543]    </control>
[19:03:20.543]  </sequence>
[19:03:20.543]  
[19:33:11.388]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:33:11.388]  
[19:33:11.388]  <debugvars>
[19:33:11.388]    // Pre-defined
[19:33:11.388]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:11.388]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:33:11.388]    __dp=0x00000000
[19:33:11.388]    __ap=0x00000000
[19:33:11.388]    __traceout=0x00000000      (Trace Disabled)
[19:33:11.388]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:11.389]    __FlashAddr=0x00000000
[19:33:11.389]    __FlashLen=0x00000000
[19:33:11.389]    __FlashArg=0x00000000
[19:33:11.389]    __FlashOp=0x00000000
[19:33:11.389]    __Result=0x00000000
[19:33:11.389]  </debugvars>
[19:33:11.389]  
[19:33:11.389]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:33:11.389]    <block atomic="false" info="">
[19:33:11.389]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:33:11.389]        // -> [isSWJ <= 0x00000001]
[19:33:11.389]      __var hasDormant = __protocol & 0x00020000;
[19:33:11.390]        // -> [hasDormant <= 0x00000000]
[19:33:11.390]      __var protType   = __protocol & 0x0000FFFF;
[19:33:11.391]        // -> [protType <= 0x00000002]
[19:33:11.391]    </block>
[19:33:11.391]    <control if="protType == 1" while="" timeout="0" info="">
[19:33:11.391]      // if-block "protType == 1"
[19:33:11.391]        // =>  FALSE
[19:33:11.391]      // skip if-block "protType == 1"
[19:33:11.391]    </control>
[19:33:11.391]    <control if="protType == 2" while="" timeout="0" info="">
[19:33:11.391]      // if-block "protType == 2"
[19:33:11.391]        // =>  TRUE
[19:33:11.392]      <control if="isSWJ" while="" timeout="0" info="">
[19:33:11.392]        // if-block "isSWJ"
[19:33:11.392]          // =>  TRUE
[19:33:11.392]        <control if="hasDormant" while="" timeout="0" info="">
[19:33:11.392]          // if-block "hasDormant"
[19:33:11.392]            // =>  FALSE
[19:33:11.392]          // skip if-block "hasDormant"
[19:33:11.392]        </control>
[19:33:11.392]        <control if="!hasDormant" while="" timeout="0" info="">
[19:33:11.392]          // if-block "!hasDormant"
[19:33:11.392]            // =>  TRUE
[19:33:11.392]          <block atomic="false" info="">
[19:33:11.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:33:11.393]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:11.393]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:33:11.393]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:33:11.393]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:33:11.394]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:11.394]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:33:11.394]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:33:11.394]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:33:11.394]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:33:11.394]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:33:11.396]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:33:11.396]          </block>
[19:33:11.396]          // end if-block "!hasDormant"
[19:33:11.396]        </control>
[19:33:11.396]        // end if-block "isSWJ"
[19:33:11.396]      </control>
[19:33:11.397]      <control if="!isSWJ" while="" timeout="0" info="">
[19:33:11.397]        // if-block "!isSWJ"
[19:33:11.397]          // =>  FALSE
[19:33:11.397]        // skip if-block "!isSWJ"
[19:33:11.397]      </control>
[19:33:11.397]      <block atomic="false" info="">
[19:33:11.397]        ReadDP(0x0);
[19:33:11.398]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:33:11.398]      </block>
[19:33:11.398]      // end if-block "protType == 2"
[19:33:11.398]    </control>
[19:33:11.398]  </sequence>
[19:33:11.398]  
[19:33:11.399]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:33:11.399]  
[19:33:11.399]  <debugvars>
[19:33:11.399]    // Pre-defined
[19:33:11.399]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:11.399]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:33:11.400]    __dp=0x00000000
[19:33:11.400]    __ap=0x00000000
[19:33:11.400]    __traceout=0x00000000      (Trace Disabled)
[19:33:11.400]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:11.400]    __FlashAddr=0x00000000
[19:33:11.400]    __FlashLen=0x00000000
[19:33:11.400]    __FlashArg=0x00000000
[19:33:11.401]    __FlashOp=0x00000000
[19:33:11.401]    __Result=0x00000000
[19:33:11.401]  </debugvars>
[19:33:11.401]  
[19:33:11.401]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:33:11.401]    <block atomic="false" info="">
[19:33:11.402]      __var SW_DP_ABORT       = 0x0;
[19:33:11.402]        // -> [SW_DP_ABORT <= 0x00000000]
[19:33:11.402]      __var DP_CTRL_STAT      = 0x4;
[19:33:11.402]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:33:11.402]      __var DP_SELECT         = 0x8;
[19:33:11.402]        // -> [DP_SELECT <= 0x00000008]
[19:33:11.402]      __var powered_down      = 0;
[19:33:11.403]        // -> [powered_down <= 0x00000000]
[19:33:11.403]      WriteDP(DP_SELECT, 0x00000000);
[19:33:11.403]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:33:11.404]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:33:11.404]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:33:11.404]        // -> [powered_down <= 0x00000001]
[19:33:11.404]    </block>
[19:33:11.404]    <control if="powered_down" while="" timeout="0" info="">
[19:33:11.404]      // if-block "powered_down"
[19:33:11.405]        // =>  TRUE
[19:33:11.405]      <block atomic="false" info="">
[19:33:11.405]        Message(0, "Debug/System power-up request sent");
[19:33:11.408]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:33:11.408]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:33:11.408]      </block>
[19:33:11.408]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:33:11.409]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:33:11.409]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:33:11.409]        // while-condition  =>  FALSE
[19:33:11.409]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:33:11.409]      </control>
[19:33:11.409]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:33:11.409]        // if-block "(__protocol & 0xFFFF) == 1"
[19:33:11.409]          // =>  FALSE
[19:33:11.409]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:33:11.409]      </control>
[19:33:11.410]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:33:11.410]        // if-block "(__protocol & 0xFFFF) == 2"
[19:33:11.410]          // =>  TRUE
[19:33:11.410]        <block atomic="false" info="">
[19:33:11.410]          Message(0, "executing SWD power up");
[19:33:11.413]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:33:11.414]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:33:11.414]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:33:11.414]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:33:11.415]        </block>
[19:33:11.415]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:33:11.415]      </control>
[19:33:11.415]      // end if-block "powered_down"
[19:33:11.415]    </control>
[19:33:11.415]    <block atomic="false" info="">
[19:33:11.415]      __var DEBUG_PORT_VAL    = 0;
[19:33:11.415]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:33:11.415]      __var ACCESS_POINT_VAL  = 0;
[19:33:11.415]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:33:11.415]      __ap = 1; 
[19:33:11.415]        // -> [__ap <= 0x00000001]
[19:33:11.416]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:33:11.417]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:33:11.417]      __ap = 4;
[19:33:11.417]        // -> [__ap <= 0x00000004]
[19:33:11.417]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:33:11.418]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:33:11.418]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:33:11.418]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:33:11.420]    </block>
[19:33:11.420]    <block atomic="false" info="">
[19:33:11.420]      __var nReset = 0x80;
[19:33:11.420]        // -> [nReset <= 0x00000080]
[19:33:11.420]      __var canReadPins = 0;
[19:33:11.421]        // -> [canReadPins <= 0x00000000]
[19:33:11.421]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:33:11.421]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:33:11.421]        // -> [canReadPins <= 0x00000001]
[19:33:11.421]    </block>
[19:33:11.421]    <control if="" while="1" timeout="200" info="">
[19:33:11.422]      // while "1"  (timeout="200")
[19:33:11.422]      // while-condition  =>  TRUE
[19:33:11.422]      // while "1"  (timeout="200")
[19:33:11.422]      // while-condition  =>  TRUE
[19:33:11.422]      // while "1"  (timeout="200")
[19:33:11.422]      // while-condition  =>  TRUE
[19:33:11.422]      // while "1"  (timeout="200")
[19:33:11.422]      // while-condition  =>  TRUE
[19:33:11.422]      // while "1"  (timeout="200")
[19:33:11.422]      // while-condition  =>  TRUE
[19:33:11.422]      // while "1"  (timeout="200")
[19:33:11.423]      // while-condition  =>  TRUE
[19:33:11.423]      // while "1"  (timeout="200")
[19:33:11.423]      // while-condition  =>  TRUE
[19:33:11.423]      // while "1"  (timeout="200")
[19:33:11.423]      // while-condition  =>  TRUE
[19:33:11.423]      // while "1"  (timeout="200")
[19:33:11.423]      // while-condition  =>  TRUE
[19:33:11.423]      // while "1"  (timeout="200")
[19:33:11.423]      // while-condition  =>  TRUE
[19:33:11.423]      // while "1"  (timeout="200")
[19:33:11.423]      // while-condition  =>  TRUE
[19:33:11.423]      // while "1"  (timeout="200")
[19:33:11.423]      // while-condition  =>  TRUE
[19:33:11.423]      // while "1"  (timeout="200")
[19:33:11.425]      // while-condition  =>  TRUE
[19:33:11.425]      // while "1"  (timeout="200")
[19:33:11.425]      // while-condition  =>  TRUE
[19:33:11.425]      // while "1"  (timeout="200")
[19:33:11.425]      // while-condition  =>  TRUE
[19:33:11.425]      // while "1"  (timeout="200")
[19:33:11.425]      // while-condition  =>  TRUE
[19:33:11.425]      // while "1"  (timeout="200")
[19:33:11.425]      // while-condition  =>  TRUE
[19:33:11.425]      // while "1"  (timeout="200")
[19:33:11.425]      // while-condition  =>  TRUE
[19:33:11.426]      // while "1"  (timeout="200")
[19:33:11.426]      // while  =>  TIMEOUT
[19:33:11.426]      // end while "1"
[19:33:11.426]    </control>
[19:33:11.426]    <control if="canReadPins" while="" timeout="0" info="">
[19:33:11.426]      // if-block "canReadPins"
[19:33:11.426]        // =>  TRUE
[19:33:11.427]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:33:11.427]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:33:11.427]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:33:11.427]        // while-condition  =>  FALSE
[19:33:11.428]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:33:11.428]      </control>
[19:33:11.428]      // end if-block "canReadPins"
[19:33:11.428]    </control>
[19:33:11.428]    <control if="!canReadPins" while="" timeout="0" info="">
[19:33:11.428]      // if-block "!canReadPins"
[19:33:11.428]        // =>  FALSE
[19:33:11.428]      // skip if-block "!canReadPins"
[19:33:11.428]    </control>
[19:33:11.428]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:33:11.428]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:33:11.429]        // =>  TRUE
[19:33:11.429]      <block atomic="false" info="">
[19:33:11.429]        WriteAP(0x00, 0x190008);
[19:33:11.429]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:33:11.429]        WriteAP(0xF0, 0x01);
[19:33:11.430]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:33:11.430]      </block>
[19:33:11.431]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:33:11.431]    </control>
[19:33:11.431]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:33:11.431]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:33:11.431]        // =>  FALSE
[19:33:11.431]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:33:11.431]    </control>
[19:33:11.431]    <block atomic="false" info="">
[19:33:11.431]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:33:11.432]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:33:11.432]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:33:11.433]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:33:11.434]      __ap = 0; //lets make sure we reset the access point selection
[19:33:11.434]        // -> [__ap <= 0x00000000]
[19:33:11.434]    </block>
[19:33:11.434]  </sequence>
[19:33:11.434]  
[19:33:11.441]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:33:11.441]  
[19:33:11.441]  <debugvars>
[19:33:11.441]    // Pre-defined
[19:33:11.441]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:33:11.441]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:33:11.441]    __dp=0x00000000
[19:33:11.442]    __ap=0x00000000
[19:33:11.442]    __traceout=0x00000000      (Trace Disabled)
[19:33:11.442]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:33:11.442]    __FlashAddr=0x00000000
[19:33:11.442]    __FlashLen=0x00000000
[19:33:11.442]    __FlashArg=0x00000000
[19:33:11.442]    __FlashOp=0x00000000
[19:33:11.442]    __Result=0x00000000
[19:33:11.442]  </debugvars>
[19:33:11.442]  
[19:33:11.442]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:33:11.442]    <block atomic="false" info="">
[19:33:11.442]      __var deviceID = 0;
[19:33:11.442]        // -> [deviceID <= 0x00000000]
[19:33:11.442]      __var version = 0;
[19:33:11.443]        // -> [version <= 0x00000000]
[19:33:11.443]      __var partNum = 0;
[19:33:11.443]        // -> [partNum <= 0x00000000]
[19:33:11.443]      __var manuf = 0;
[19:33:11.443]        // -> [manuf <= 0x00000000]
[19:33:11.443]      __var isMSPM0G1X0X_G3X0X = 0;
[19:33:11.443]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:33:11.443]      __var isProduction = 0;
[19:33:11.443]        // -> [isProduction <= 0x00000000]
[19:33:11.444]      __var continueId = 0;
[19:33:11.444]        // -> [continueId <= 0x00000000]
[19:33:11.444]      deviceID =   Read32(0x41C40004);
[19:33:11.446]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:33:11.446]        // -> [deviceID <= 0x2BB8802F]
[19:33:11.447]      version = deviceID >> 28;
[19:33:11.447]        // -> [version <= 0x00000002]
[19:33:11.447]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:33:11.447]        // -> [partNum <= 0x0000BB88]
[19:33:11.447]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:33:11.447]        // -> [manuf <= 0x00000017]
[19:33:11.447]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:33:11.447]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:33:11.448]      isProduction = (version > 0);
[19:33:11.448]        // -> [isProduction <= 0x00000001]
[19:33:11.448]    </block>
[19:33:11.448]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:33:11.448]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:33:11.448]        // =>  FALSE
[19:33:11.448]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:33:11.448]    </control>
[19:33:11.448]    <control if="continueId == 4" while="" timeout="0" info="">
[19:33:11.448]      // if-block "continueId == 4"
[19:33:11.448]        // =>  FALSE
[19:33:11.448]      // skip if-block "continueId == 4"
[19:33:11.449]    </control>
[19:33:11.449]    <control if="!isProduction" while="" timeout="0" info="">
[19:33:11.449]      // if-block "!isProduction"
[19:33:11.449]        // =>  FALSE
[19:33:11.449]      // skip if-block "!isProduction"
[19:33:11.449]    </control>
[19:33:11.449]  </sequence>
[19:33:11.449]  
[19:38:16.475]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:38:16.475]  
[19:38:16.476]  <debugvars>
[19:38:16.476]    // Pre-defined
[19:38:16.476]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:38:16.476]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:38:16.476]    __dp=0x00000000
[19:38:16.476]    __ap=0x00000000
[19:38:16.476]    __traceout=0x00000000      (Trace Disabled)
[19:38:16.476]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:38:16.476]    __FlashAddr=0x00000000
[19:38:16.477]    __FlashLen=0x00000000
[19:38:16.477]    __FlashArg=0x00000000
[19:38:16.477]    __FlashOp=0x00000000
[19:38:16.477]    __Result=0x00000000
[19:38:16.477]  </debugvars>
[19:38:16.477]  
[19:38:16.477]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:38:16.477]    <block atomic="false" info="">
[19:38:16.477]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:38:16.477]        // -> [isSWJ <= 0x00000001]
[19:38:16.477]      __var hasDormant = __protocol & 0x00020000;
[19:38:16.479]        // -> [hasDormant <= 0x00000000]
[19:38:16.479]      __var protType   = __protocol & 0x0000FFFF;
[19:38:16.479]        // -> [protType <= 0x00000002]
[19:38:16.479]    </block>
[19:38:16.480]    <control if="protType == 1" while="" timeout="0" info="">
[19:38:16.480]      // if-block "protType == 1"
[19:38:16.480]        // =>  FALSE
[19:38:16.480]      // skip if-block "protType == 1"
[19:38:16.480]    </control>
[19:38:16.480]    <control if="protType == 2" while="" timeout="0" info="">
[19:38:16.480]      // if-block "protType == 2"
[19:38:16.480]        // =>  TRUE
[19:38:16.480]      <control if="isSWJ" while="" timeout="0" info="">
[19:38:16.480]        // if-block "isSWJ"
[19:38:16.480]          // =>  TRUE
[19:38:16.480]        <control if="hasDormant" while="" timeout="0" info="">
[19:38:16.480]          // if-block "hasDormant"
[19:38:16.481]            // =>  FALSE
[19:38:16.481]          // skip if-block "hasDormant"
[19:38:16.481]        </control>
[19:38:16.481]        <control if="!hasDormant" while="" timeout="0" info="">
[19:38:16.481]          // if-block "!hasDormant"
[19:38:16.481]            // =>  TRUE
[19:38:16.481]          <block atomic="false" info="">
[19:38:16.481]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:38:16.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:38:16.482]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:38:16.482]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:38:16.482]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:38:16.482]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:38:16.482]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:38:16.483]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:38:16.483]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:38:16.483]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:38:16.483]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:38:16.484]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:38:16.484]          </block>
[19:38:16.484]          // end if-block "!hasDormant"
[19:38:16.484]        </control>
[19:38:16.484]        // end if-block "isSWJ"
[19:38:16.484]      </control>
[19:38:16.484]      <control if="!isSWJ" while="" timeout="0" info="">
[19:38:16.484]        // if-block "!isSWJ"
[19:38:16.484]          // =>  FALSE
[19:38:16.484]        // skip if-block "!isSWJ"
[19:38:16.484]      </control>
[19:38:16.484]      <block atomic="false" info="">
[19:38:16.484]        ReadDP(0x0);
[19:38:16.485]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:38:16.485]      </block>
[19:38:16.486]      // end if-block "protType == 2"
[19:38:16.486]    </control>
[19:38:16.486]  </sequence>
[19:38:16.486]  
[19:38:16.486]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:38:16.486]  
[19:38:16.486]  <debugvars>
[19:38:16.486]    // Pre-defined
[19:38:16.486]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:38:16.486]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:38:16.486]    __dp=0x00000000
[19:38:16.486]    __ap=0x00000000
[19:38:16.486]    __traceout=0x00000000      (Trace Disabled)
[19:38:16.486]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:38:16.488]    __FlashAddr=0x00000000
[19:38:16.488]    __FlashLen=0x00000000
[19:38:16.488]    __FlashArg=0x00000000
[19:38:16.488]    __FlashOp=0x00000000
[19:38:16.488]    __Result=0x00000000
[19:38:16.488]  </debugvars>
[19:38:16.488]  
[19:38:16.488]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:38:16.488]    <block atomic="false" info="">
[19:38:16.488]      __var SW_DP_ABORT       = 0x0;
[19:38:16.488]        // -> [SW_DP_ABORT <= 0x00000000]
[19:38:16.488]      __var DP_CTRL_STAT      = 0x4;
[19:38:16.488]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:38:16.488]      __var DP_SELECT         = 0x8;
[19:38:16.488]        // -> [DP_SELECT <= 0x00000008]
[19:38:16.488]      __var powered_down      = 0;
[19:38:16.488]        // -> [powered_down <= 0x00000000]
[19:38:16.489]      WriteDP(DP_SELECT, 0x00000000);
[19:38:16.490]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:38:16.490]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:38:16.490]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:38:16.490]        // -> [powered_down <= 0x00000001]
[19:38:16.490]    </block>
[19:38:16.490]    <control if="powered_down" while="" timeout="0" info="">
[19:38:16.490]      // if-block "powered_down"
[19:38:16.490]        // =>  TRUE
[19:38:16.490]      <block atomic="false" info="">
[19:38:16.490]        Message(0, "Debug/System power-up request sent");
[19:38:16.494]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:38:16.494]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:38:16.494]      </block>
[19:38:16.494]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:38:16.494]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:38:16.496]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:38:16.496]        // while-condition  =>  FALSE
[19:38:16.496]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:38:16.496]      </control>
[19:38:16.496]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:38:16.496]        // if-block "(__protocol & 0xFFFF) == 1"
[19:38:16.496]          // =>  FALSE
[19:38:16.496]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:38:16.496]      </control>
[19:38:16.497]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:38:16.497]        // if-block "(__protocol & 0xFFFF) == 2"
[19:38:16.497]          // =>  TRUE
[19:38:16.497]        <block atomic="false" info="">
[19:38:16.497]          Message(0, "executing SWD power up");
[19:38:16.499]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:38:16.499]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:38:16.499]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:38:16.500]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:38:16.500]        </block>
[19:38:16.500]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:38:16.500]      </control>
[19:38:16.500]      // end if-block "powered_down"
[19:38:16.500]    </control>
[19:38:16.500]    <block atomic="false" info="">
[19:38:16.500]      __var DEBUG_PORT_VAL    = 0;
[19:38:16.500]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:38:16.500]      __var ACCESS_POINT_VAL  = 0;
[19:38:16.501]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:38:16.501]      __ap = 1; 
[19:38:16.501]        // -> [__ap <= 0x00000001]
[19:38:16.501]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:38:16.503]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:38:16.503]      __ap = 4;
[19:38:16.503]        // -> [__ap <= 0x00000004]
[19:38:16.503]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:38:16.504]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:38:16.504]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:38:16.504]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:38:16.506]    </block>
[19:38:16.506]    <block atomic="false" info="">
[19:38:16.506]      __var nReset = 0x80;
[19:38:16.507]        // -> [nReset <= 0x00000080]
[19:38:16.507]      __var canReadPins = 0;
[19:38:16.507]        // -> [canReadPins <= 0x00000000]
[19:38:16.507]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:38:16.507]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:38:16.507]        // -> [canReadPins <= 0x00000001]
[19:38:16.507]    </block>
[19:38:16.507]    <control if="" while="1" timeout="200" info="">
[19:38:16.507]      // while "1"  (timeout="200")
[19:38:16.507]      // while-condition  =>  TRUE
[19:38:16.509]      // while "1"  (timeout="200")
[19:38:16.509]      // while-condition  =>  TRUE
[19:38:16.509]      // while "1"  (timeout="200")
[19:38:16.509]      // while-condition  =>  TRUE
[19:38:16.509]      // while "1"  (timeout="200")
[19:38:16.509]      // while-condition  =>  TRUE
[19:38:16.509]      // while "1"  (timeout="200")
[19:38:16.509]      // while-condition  =>  TRUE
[19:38:16.510]      // while "1"  (timeout="200")
[19:38:16.510]      // while-condition  =>  TRUE
[19:38:16.510]      // while "1"  (timeout="200")
[19:38:16.510]      // while-condition  =>  TRUE
[19:38:16.510]      // while "1"  (timeout="200")
[19:38:16.510]      // while-condition  =>  TRUE
[19:38:16.510]      // while "1"  (timeout="200")
[19:38:16.510]      // while-condition  =>  TRUE
[19:38:16.510]      // while "1"  (timeout="200")
[19:38:16.510]      // while-condition  =>  TRUE
[19:38:16.510]      // while "1"  (timeout="200")
[19:38:16.511]      // while-condition  =>  TRUE
[19:38:16.511]      // while "1"  (timeout="200")
[19:38:16.511]      // while-condition  =>  TRUE
[19:38:16.511]      // while "1"  (timeout="200")
[19:38:16.511]      // while-condition  =>  TRUE
[19:38:16.511]      // while "1"  (timeout="200")
[19:38:16.511]      // while-condition  =>  TRUE
[19:38:16.511]      // while "1"  (timeout="200")
[19:38:16.511]      // while-condition  =>  TRUE
[19:38:16.512]      // while "1"  (timeout="200")
[19:38:16.512]      // while-condition  =>  TRUE
[19:38:16.512]      // while "1"  (timeout="200")
[19:38:16.512]      // while-condition  =>  TRUE
[19:38:16.512]      // while "1"  (timeout="200")
[19:38:16.512]      // while-condition  =>  TRUE
[19:38:16.512]      // while "1"  (timeout="200")
[19:38:16.512]      // while-condition  =>  TRUE
[19:38:16.512]      // while "1"  (timeout="200")
[19:38:16.512]      // while-condition  =>  TRUE
[19:38:16.512]      // while "1"  (timeout="200")
[19:38:16.512]      // while-condition  =>  TRUE
[19:38:16.513]      // while "1"  (timeout="200")
[19:38:16.513]      // while-condition  =>  TRUE
[19:38:16.513]      // while "1"  (timeout="200")
[19:38:16.513]      // while-condition  =>  TRUE
[19:38:16.513]      // while "1"  (timeout="200")
[19:38:16.513]      // while-condition  =>  TRUE
[19:38:16.513]      // while "1"  (timeout="200")
[19:38:16.513]      // while-condition  =>  TRUE
[19:38:16.513]      // while "1"  (timeout="200")
[19:38:16.513]      // while-condition  =>  TRUE
[19:38:16.513]      // while "1"  (timeout="200")
[19:38:16.513]      // while-condition  =>  TRUE
[19:38:16.514]      // while "1"  (timeout="200")
[19:38:16.514]      // while-condition  =>  TRUE
[19:38:16.514]      // while "1"  (timeout="200")
[19:38:16.514]      // while-condition  =>  TRUE
[19:38:16.514]      // while "1"  (timeout="200")
[19:38:16.514]      // while-condition  =>  TRUE
[19:38:16.514]      // while "1"  (timeout="200")
[19:38:16.514]      // while-condition  =>  TRUE
[19:38:16.514]      // while "1"  (timeout="200")
[19:38:16.514]      // while-condition  =>  TRUE
[19:38:16.514]      // while "1"  (timeout="200")
[19:38:16.514]      // while-condition  =>  TRUE
[19:38:16.514]      // while "1"  (timeout="200")
[19:38:16.514]      // while-condition  =>  TRUE
[19:38:16.514]      // while "1"  (timeout="200")
[19:38:16.516]      // while-condition  =>  TRUE
[19:38:16.516]      // while "1"  (timeout="200")
[19:38:16.516]      // while-condition  =>  TRUE
[19:38:16.516]      // while "1"  (timeout="200")
[19:38:16.516]      // while-condition  =>  TRUE
[19:38:16.516]      // while "1"  (timeout="200")
[19:38:16.517]      // while-condition  =>  TRUE
[19:38:16.517]      // while "1"  (timeout="200")
[19:38:16.517]      // while-condition  =>  TRUE
[19:38:16.517]      // while "1"  (timeout="200")
[19:38:16.517]      // while-condition  =>  TRUE
[19:38:16.517]      // while "1"  (timeout="200")
[19:38:16.517]      // while-condition  =>  TRUE
[19:38:16.517]      // while "1"  (timeout="200")
[19:38:16.517]      // while-condition  =>  TRUE
[19:38:16.517]      // while "1"  (timeout="200")
[19:38:16.517]      // while-condition  =>  TRUE
[19:38:16.518]      // while "1"  (timeout="200")
[19:38:16.518]      // while-condition  =>  TRUE
[19:38:16.518]      // while "1"  (timeout="200")
[19:38:16.518]      // while-condition  =>  TRUE
[19:38:16.518]      // while "1"  (timeout="200")
[19:38:16.518]      // while-condition  =>  TRUE
[19:38:16.518]      // while "1"  (timeout="200")
[19:38:16.518]      // while-condition  =>  TRUE
[19:38:16.518]      // while "1"  (timeout="200")
[19:38:16.518]      // while-condition  =>  TRUE
[19:38:16.518]      // while "1"  (timeout="200")
[19:38:16.518]      // while-condition  =>  TRUE
[19:38:16.519]      // while "1"  (timeout="200")
[19:38:16.519]      // while-condition  =>  TRUE
[19:38:16.519]      // while "1"  (timeout="200")
[19:38:16.519]      // while-condition  =>  TRUE
[19:38:16.519]      // while "1"  (timeout="200")
[19:38:16.519]      // while-condition  =>  TRUE
[19:38:16.520]      // while "1"  (timeout="200")
[19:38:16.520]      // while  =>  TIMEOUT
[19:38:16.520]      // end while "1"
[19:38:16.520]    </control>
[19:38:16.520]    <control if="canReadPins" while="" timeout="0" info="">
[19:38:16.520]      // if-block "canReadPins"
[19:38:16.520]        // =>  TRUE
[19:38:16.520]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:38:16.520]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:38:16.521]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:38:16.521]        // while-condition  =>  FALSE
[19:38:16.521]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:38:16.522]      </control>
[19:38:16.522]      // end if-block "canReadPins"
[19:38:16.522]    </control>
[19:38:16.522]    <control if="!canReadPins" while="" timeout="0" info="">
[19:38:16.522]      // if-block "!canReadPins"
[19:38:16.522]        // =>  FALSE
[19:38:16.522]      // skip if-block "!canReadPins"
[19:38:16.522]    </control>
[19:38:16.522]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:38:16.522]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:38:16.522]        // =>  TRUE
[19:38:16.522]      <block atomic="false" info="">
[19:38:16.522]        WriteAP(0x00, 0x190008);
[19:38:16.523]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:38:16.523]        WriteAP(0xF0, 0x01);
[19:38:16.524]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:38:16.524]      </block>
[19:38:16.524]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:38:16.524]    </control>
[19:38:16.524]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:38:16.526]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:38:16.526]        // =>  FALSE
[19:38:16.526]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:38:16.526]    </control>
[19:38:16.526]    <block atomic="false" info="">
[19:38:16.526]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:38:16.527]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:38:16.527]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:38:16.527]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:38:16.529]      __ap = 0; //lets make sure we reset the access point selection
[19:38:16.529]        // -> [__ap <= 0x00000000]
[19:38:16.529]    </block>
[19:38:16.529]  </sequence>
[19:38:16.529]  
[19:38:16.534]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:38:16.534]  
[19:38:16.534]  <debugvars>
[19:38:16.536]    // Pre-defined
[19:38:16.536]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:38:16.536]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:38:16.536]    __dp=0x00000000
[19:38:16.536]    __ap=0x00000000
[19:38:16.536]    __traceout=0x00000000      (Trace Disabled)
[19:38:16.536]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:38:16.536]    __FlashAddr=0x00000000
[19:38:16.536]    __FlashLen=0x00000000
[19:38:16.536]    __FlashArg=0x00000000
[19:38:16.537]    __FlashOp=0x00000000
[19:38:16.537]    __Result=0x00000000
[19:38:16.537]  </debugvars>
[19:38:16.537]  
[19:38:16.537]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:38:16.537]    <block atomic="false" info="">
[19:38:16.537]      __var deviceID = 0;
[19:38:16.537]        // -> [deviceID <= 0x00000000]
[19:38:16.537]      __var version = 0;
[19:38:16.537]        // -> [version <= 0x00000000]
[19:38:16.537]      __var partNum = 0;
[19:38:16.537]        // -> [partNum <= 0x00000000]
[19:38:16.538]      __var manuf = 0;
[19:38:16.538]        // -> [manuf <= 0x00000000]
[19:38:16.538]      __var isMSPM0G1X0X_G3X0X = 0;
[19:38:16.538]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:38:16.538]      __var isProduction = 0;
[19:38:16.538]        // -> [isProduction <= 0x00000000]
[19:38:16.538]      __var continueId = 0;
[19:38:16.539]        // -> [continueId <= 0x00000000]
[19:38:16.539]      deviceID =   Read32(0x41C40004);
[19:38:16.540]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:38:16.540]        // -> [deviceID <= 0x2BB8802F]
[19:38:16.540]      version = deviceID >> 28;
[19:38:16.540]        // -> [version <= 0x00000002]
[19:38:16.540]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:38:16.540]        // -> [partNum <= 0x0000BB88]
[19:38:16.541]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:38:16.541]        // -> [manuf <= 0x00000017]
[19:38:16.541]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:38:16.541]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:38:16.541]      isProduction = (version > 0);
[19:38:16.541]        // -> [isProduction <= 0x00000001]
[19:38:16.541]    </block>
[19:38:16.541]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:38:16.541]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:38:16.541]        // =>  FALSE
[19:38:16.541]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:38:16.541]    </control>
[19:38:16.541]    <control if="continueId == 4" while="" timeout="0" info="">
[19:38:16.542]      // if-block "continueId == 4"
[19:38:16.542]        // =>  FALSE
[19:38:16.542]      // skip if-block "continueId == 4"
[19:38:16.542]    </control>
[19:38:16.542]    <control if="!isProduction" while="" timeout="0" info="">
[19:38:16.542]      // if-block "!isProduction"
[19:38:16.542]        // =>  FALSE
[19:38:16.542]      // skip if-block "!isProduction"
[19:38:16.542]    </control>
[19:38:16.542]  </sequence>
[19:38:16.543]  
[19:41:44.653]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:41:44.653]  
[19:41:44.653]  <debugvars>
[19:41:44.653]    // Pre-defined
[19:41:44.653]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:44.653]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:41:44.653]    __dp=0x00000000
[19:41:44.654]    __ap=0x00000000
[19:41:44.654]    __traceout=0x00000000      (Trace Disabled)
[19:41:44.654]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:44.654]    __FlashAddr=0x00000000
[19:41:44.655]    __FlashLen=0x00000000
[19:41:44.655]    __FlashArg=0x00000000
[19:41:44.655]    __FlashOp=0x00000000
[19:41:44.655]    __Result=0x00000000
[19:41:44.655]  </debugvars>
[19:41:44.655]  
[19:41:44.655]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:41:44.655]    <block atomic="false" info="">
[19:41:44.655]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:41:44.656]        // -> [isSWJ <= 0x00000001]
[19:41:44.656]      __var hasDormant = __protocol & 0x00020000;
[19:41:44.656]        // -> [hasDormant <= 0x00000000]
[19:41:44.656]      __var protType   = __protocol & 0x0000FFFF;
[19:41:44.656]        // -> [protType <= 0x00000002]
[19:41:44.656]    </block>
[19:41:44.656]    <control if="protType == 1" while="" timeout="0" info="">
[19:41:44.656]      // if-block "protType == 1"
[19:41:44.656]        // =>  FALSE
[19:41:44.656]      // skip if-block "protType == 1"
[19:41:44.656]    </control>
[19:41:44.657]    <control if="protType == 2" while="" timeout="0" info="">
[19:41:44.657]      // if-block "protType == 2"
[19:41:44.657]        // =>  TRUE
[19:41:44.657]      <control if="isSWJ" while="" timeout="0" info="">
[19:41:44.657]        // if-block "isSWJ"
[19:41:44.657]          // =>  TRUE
[19:41:44.658]        <control if="hasDormant" while="" timeout="0" info="">
[19:41:44.658]          // if-block "hasDormant"
[19:41:44.658]            // =>  FALSE
[19:41:44.658]          // skip if-block "hasDormant"
[19:41:44.658]        </control>
[19:41:44.658]        <control if="!hasDormant" while="" timeout="0" info="">
[19:41:44.658]          // if-block "!hasDormant"
[19:41:44.659]            // =>  TRUE
[19:41:44.659]          <block atomic="false" info="">
[19:41:44.659]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:41:44.659]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:44.659]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:41:44.659]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:41:44.659]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:41:44.660]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:44.660]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:41:44.660]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:41:44.660]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:41:44.661]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:41:44.661]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:41:44.661]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:41:44.661]          </block>
[19:41:44.661]          // end if-block "!hasDormant"
[19:41:44.661]        </control>
[19:41:44.661]        // end if-block "isSWJ"
[19:41:44.661]      </control>
[19:41:44.661]      <control if="!isSWJ" while="" timeout="0" info="">
[19:41:44.663]        // if-block "!isSWJ"
[19:41:44.663]          // =>  FALSE
[19:41:44.663]        // skip if-block "!isSWJ"
[19:41:44.663]      </control>
[19:41:44.663]      <block atomic="false" info="">
[19:41:44.663]        ReadDP(0x0);
[19:41:44.663]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:41:44.664]      </block>
[19:41:44.664]      // end if-block "protType == 2"
[19:41:44.664]    </control>
[19:41:44.664]  </sequence>
[19:41:44.664]  
[19:41:44.665]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:41:44.665]  
[19:41:44.665]  <debugvars>
[19:41:44.665]    // Pre-defined
[19:41:44.665]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:44.665]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:41:44.665]    __dp=0x00000000
[19:41:44.665]    __ap=0x00000000
[19:41:44.665]    __traceout=0x00000000      (Trace Disabled)
[19:41:44.666]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:44.666]    __FlashAddr=0x00000000
[19:41:44.666]    __FlashLen=0x00000000
[19:41:44.666]    __FlashArg=0x00000000
[19:41:44.666]    __FlashOp=0x00000000
[19:41:44.666]    __Result=0x00000000
[19:41:44.666]  </debugvars>
[19:41:44.667]  
[19:41:44.667]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:41:44.667]    <block atomic="false" info="">
[19:41:44.667]      __var SW_DP_ABORT       = 0x0;
[19:41:44.667]        // -> [SW_DP_ABORT <= 0x00000000]
[19:41:44.667]      __var DP_CTRL_STAT      = 0x4;
[19:41:44.667]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:41:44.667]      __var DP_SELECT         = 0x8;
[19:41:44.667]        // -> [DP_SELECT <= 0x00000008]
[19:41:44.668]      __var powered_down      = 0;
[19:41:44.668]        // -> [powered_down <= 0x00000000]
[19:41:44.668]      WriteDP(DP_SELECT, 0x00000000);
[19:41:44.668]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:41:44.669]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:41:44.669]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:41:44.669]        // -> [powered_down <= 0x00000001]
[19:41:44.669]    </block>
[19:41:44.669]    <control if="powered_down" while="" timeout="0" info="">
[19:41:44.669]      // if-block "powered_down"
[19:41:44.670]        // =>  TRUE
[19:41:44.670]      <block atomic="false" info="">
[19:41:44.670]        Message(0, "Debug/System power-up request sent");
[19:41:44.671]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:41:44.673]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:41:44.673]      </block>
[19:41:44.673]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:41:44.673]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:41:44.674]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:41:44.674]        // while-condition  =>  FALSE
[19:41:44.674]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:41:44.674]      </control>
[19:41:44.674]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:41:44.674]        // if-block "(__protocol & 0xFFFF) == 1"
[19:41:44.674]          // =>  FALSE
[19:41:44.675]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:41:44.675]      </control>
[19:41:44.675]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:41:44.675]        // if-block "(__protocol & 0xFFFF) == 2"
[19:41:44.676]          // =>  TRUE
[19:41:44.676]        <block atomic="false" info="">
[19:41:44.676]          Message(0, "executing SWD power up");
[19:41:44.677]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:41:44.678]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:41:44.678]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:41:44.678]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:41:44.679]        </block>
[19:41:44.679]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:41:44.679]      </control>
[19:41:44.679]      // end if-block "powered_down"
[19:41:44.679]    </control>
[19:41:44.679]    <block atomic="false" info="">
[19:41:44.679]      __var DEBUG_PORT_VAL    = 0;
[19:41:44.679]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:41:44.679]      __var ACCESS_POINT_VAL  = 0;
[19:41:44.679]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:41:44.679]      __ap = 1; 
[19:41:44.681]        // -> [__ap <= 0x00000001]
[19:41:44.681]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:41:44.682]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:41:44.682]      __ap = 4;
[19:41:44.682]        // -> [__ap <= 0x00000004]
[19:41:44.682]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:41:44.683]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:41:44.683]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:41:44.683]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:41:44.685]    </block>
[19:41:44.685]    <block atomic="false" info="">
[19:41:44.685]      __var nReset = 0x80;
[19:41:44.685]        // -> [nReset <= 0x00000080]
[19:41:44.685]      __var canReadPins = 0;
[19:41:44.685]        // -> [canReadPins <= 0x00000000]
[19:41:44.685]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:41:44.686]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:41:44.686]        // -> [canReadPins <= 0x00000001]
[19:41:44.686]    </block>
[19:41:44.686]    <control if="" while="1" timeout="200" info="">
[19:41:44.686]      // while "1"  (timeout="200")
[19:41:44.686]      // while-condition  =>  TRUE
[19:41:44.686]      // while "1"  (timeout="200")
[19:41:44.686]      // while-condition  =>  TRUE
[19:41:44.686]      // while "1"  (timeout="200")
[19:41:44.686]      // while-condition  =>  TRUE
[19:41:44.686]      // while "1"  (timeout="200")
[19:41:44.686]      // while-condition  =>  TRUE
[19:41:44.686]      // while "1"  (timeout="200")
[19:41:44.686]      // while-condition  =>  TRUE
[19:41:44.687]      // while "1"  (timeout="200")
[19:41:44.687]      // while-condition  =>  TRUE
[19:41:44.687]      // while "1"  (timeout="200")
[19:41:44.687]      // while-condition  =>  TRUE
[19:41:44.687]      // while "1"  (timeout="200")
[19:41:44.687]      // while-condition  =>  TRUE
[19:41:44.687]      // while "1"  (timeout="200")
[19:41:44.687]      // while-condition  =>  TRUE
[19:41:44.687]      // while "1"  (timeout="200")
[19:41:44.687]      // while-condition  =>  TRUE
[19:41:44.688]      // while "1"  (timeout="200")
[19:41:44.688]      // while-condition  =>  TRUE
[19:41:44.688]      // while "1"  (timeout="200")
[19:41:44.688]      // while-condition  =>  TRUE
[19:41:44.688]      // while "1"  (timeout="200")
[19:41:44.688]      // while-condition  =>  TRUE
[19:41:44.688]      // while "1"  (timeout="200")
[19:41:44.688]      // while-condition  =>  TRUE
[19:41:44.689]      // while "1"  (timeout="200")
[19:41:44.689]      // while-condition  =>  TRUE
[19:41:44.689]      // while "1"  (timeout="200")
[19:41:44.689]      // while-condition  =>  TRUE
[19:41:44.689]      // while "1"  (timeout="200")
[19:41:44.689]      // while-condition  =>  TRUE
[19:41:44.689]      // while "1"  (timeout="200")
[19:41:44.689]      // while-condition  =>  TRUE
[19:41:44.689]      // while "1"  (timeout="200")
[19:41:44.689]      // while-condition  =>  TRUE
[19:41:44.689]      // while "1"  (timeout="200")
[19:41:44.690]      // while-condition  =>  TRUE
[19:41:44.690]      // while "1"  (timeout="200")
[19:41:44.690]      // while-condition  =>  TRUE
[19:41:44.690]      // while "1"  (timeout="200")
[19:41:44.690]      // while-condition  =>  TRUE
[19:41:44.690]      // while "1"  (timeout="200")
[19:41:44.690]      // while-condition  =>  TRUE
[19:41:44.690]      // while "1"  (timeout="200")
[19:41:44.690]      // while-condition  =>  TRUE
[19:41:44.690]      // while "1"  (timeout="200")
[19:41:44.690]      // while-condition  =>  TRUE
[19:41:44.691]      // while "1"  (timeout="200")
[19:41:44.691]      // while  =>  TIMEOUT
[19:41:44.691]      // end while "1"
[19:41:44.691]    </control>
[19:41:44.691]    <control if="canReadPins" while="" timeout="0" info="">
[19:41:44.691]      // if-block "canReadPins"
[19:41:44.691]        // =>  TRUE
[19:41:44.691]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:41:44.691]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:41:44.692]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:41:44.692]        // while-condition  =>  FALSE
[19:41:44.692]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:41:44.692]      </control>
[19:41:44.693]      // end if-block "canReadPins"
[19:41:44.693]    </control>
[19:41:44.693]    <control if="!canReadPins" while="" timeout="0" info="">
[19:41:44.693]      // if-block "!canReadPins"
[19:41:44.693]        // =>  FALSE
[19:41:44.693]      // skip if-block "!canReadPins"
[19:41:44.693]    </control>
[19:41:44.693]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:41:44.693]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:41:44.693]        // =>  TRUE
[19:41:44.694]      <block atomic="false" info="">
[19:41:44.694]        WriteAP(0x00, 0x190008);
[19:41:44.694]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:41:44.694]        WriteAP(0xF0, 0x01);
[19:41:44.696]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:41:44.696]      </block>
[19:41:44.696]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:41:44.696]    </control>
[19:41:44.696]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:41:44.696]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:41:44.696]        // =>  FALSE
[19:41:44.696]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:41:44.697]    </control>
[19:41:44.697]    <block atomic="false" info="">
[19:41:44.697]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:41:44.698]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:41:44.698]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:41:44.698]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:41:44.699]      __ap = 0; //lets make sure we reset the access point selection
[19:41:44.699]        // -> [__ap <= 0x00000000]
[19:41:44.700]    </block>
[19:41:44.700]  </sequence>
[19:41:44.700]  
[19:41:44.706]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:41:44.706]  
[19:41:44.706]  <debugvars>
[19:41:44.706]    // Pre-defined
[19:41:44.707]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:41:44.707]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:41:44.707]    __dp=0x00000000
[19:41:44.707]    __ap=0x00000000
[19:41:44.707]    __traceout=0x00000000      (Trace Disabled)
[19:41:44.707]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:41:44.707]    __FlashAddr=0x00000000
[19:41:44.707]    __FlashLen=0x00000000
[19:41:44.707]    __FlashArg=0x00000000
[19:41:44.708]    __FlashOp=0x00000000
[19:41:44.708]    __Result=0x00000000
[19:41:44.708]  </debugvars>
[19:41:44.708]  
[19:41:44.708]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:41:44.708]    <block atomic="false" info="">
[19:41:44.708]      __var deviceID = 0;
[19:41:44.708]        // -> [deviceID <= 0x00000000]
[19:41:44.708]      __var version = 0;
[19:41:44.708]        // -> [version <= 0x00000000]
[19:41:44.709]      __var partNum = 0;
[19:41:44.709]        // -> [partNum <= 0x00000000]
[19:41:44.709]      __var manuf = 0;
[19:41:44.709]        // -> [manuf <= 0x00000000]
[19:41:44.709]      __var isMSPM0G1X0X_G3X0X = 0;
[19:41:44.709]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:41:44.709]      __var isProduction = 0;
[19:41:44.709]        // -> [isProduction <= 0x00000000]
[19:41:44.709]      __var continueId = 0;
[19:41:44.709]        // -> [continueId <= 0x00000000]
[19:41:44.709]      deviceID =   Read32(0x41C40004);
[19:41:44.711]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:41:44.711]        // -> [deviceID <= 0x2BB8802F]
[19:41:44.711]      version = deviceID >> 28;
[19:41:44.711]        // -> [version <= 0x00000002]
[19:41:44.711]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:41:44.711]        // -> [partNum <= 0x0000BB88]
[19:41:44.711]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:41:44.713]        // -> [manuf <= 0x00000017]
[19:41:44.713]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:41:44.713]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:41:44.713]      isProduction = (version > 0);
[19:41:44.713]        // -> [isProduction <= 0x00000001]
[19:41:44.713]    </block>
[19:41:44.713]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:41:44.713]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:41:44.713]        // =>  FALSE
[19:41:44.713]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:41:44.713]    </control>
[19:41:44.713]    <control if="continueId == 4" while="" timeout="0" info="">
[19:41:44.713]      // if-block "continueId == 4"
[19:41:44.713]        // =>  FALSE
[19:41:44.713]      // skip if-block "continueId == 4"
[19:41:44.713]    </control>
[19:41:44.713]    <control if="!isProduction" while="" timeout="0" info="">
[19:41:44.713]      // if-block "!isProduction"
[19:41:44.713]        // =>  FALSE
[19:41:44.715]      // skip if-block "!isProduction"
[19:41:44.715]    </control>
[19:41:44.715]  </sequence>
[19:41:44.715]  
[19:45:20.092]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:45:20.092]  
[19:45:20.092]  <debugvars>
[19:45:20.092]    // Pre-defined
[19:45:20.093]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:45:20.093]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:45:20.093]    __dp=0x00000000
[19:45:20.094]    __ap=0x00000000
[19:45:20.094]    __traceout=0x00000000      (Trace Disabled)
[19:45:20.094]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:45:20.094]    __FlashAddr=0x00000000
[19:45:20.094]    __FlashLen=0x00000000
[19:45:20.094]    __FlashArg=0x00000000
[19:45:20.094]    __FlashOp=0x00000000
[19:45:20.094]    __Result=0x00000000
[19:45:20.094]  </debugvars>
[19:45:20.094]  
[19:45:20.094]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:45:20.094]    <block atomic="false" info="">
[19:45:20.094]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:45:20.094]        // -> [isSWJ <= 0x00000001]
[19:45:20.094]      __var hasDormant = __protocol & 0x00020000;
[19:45:20.094]        // -> [hasDormant <= 0x00000000]
[19:45:20.094]      __var protType   = __protocol & 0x0000FFFF;
[19:45:20.094]        // -> [protType <= 0x00000002]
[19:45:20.094]    </block>
[19:45:20.094]    <control if="protType == 1" while="" timeout="0" info="">
[19:45:20.095]      // if-block "protType == 1"
[19:45:20.095]        // =>  FALSE
[19:45:20.095]      // skip if-block "protType == 1"
[19:45:20.095]    </control>
[19:45:20.095]    <control if="protType == 2" while="" timeout="0" info="">
[19:45:20.095]      // if-block "protType == 2"
[19:45:20.095]        // =>  TRUE
[19:45:20.095]      <control if="isSWJ" while="" timeout="0" info="">
[19:45:20.095]        // if-block "isSWJ"
[19:45:20.095]          // =>  TRUE
[19:45:20.095]        <control if="hasDormant" while="" timeout="0" info="">
[19:45:20.095]          // if-block "hasDormant"
[19:45:20.095]            // =>  FALSE
[19:45:20.095]          // skip if-block "hasDormant"
[19:45:20.095]        </control>
[19:45:20.095]        <control if="!hasDormant" while="" timeout="0" info="">
[19:45:20.095]          // if-block "!hasDormant"
[19:45:20.095]            // =>  TRUE
[19:45:20.097]          <block atomic="false" info="">
[19:45:20.097]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:45:20.097]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:45:20.097]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:45:20.097]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:45:20.098]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:45:20.098]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:45:20.098]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:45:20.099]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:45:20.099]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:45:20.099]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:45:20.100]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:45:20.100]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:45:20.100]          </block>
[19:45:20.100]          // end if-block "!hasDormant"
[19:45:20.100]        </control>
[19:45:20.100]        // end if-block "isSWJ"
[19:45:20.101]      </control>
[19:45:20.101]      <control if="!isSWJ" while="" timeout="0" info="">
[19:45:20.101]        // if-block "!isSWJ"
[19:45:20.101]          // =>  FALSE
[19:45:20.101]        // skip if-block "!isSWJ"
[19:45:20.101]      </control>
[19:45:20.101]      <block atomic="false" info="">
[19:45:20.101]        ReadDP(0x0);
[19:45:20.102]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:45:20.102]      </block>
[19:45:20.102]      // end if-block "protType == 2"
[19:45:20.103]    </control>
[19:45:20.103]  </sequence>
[19:45:20.103]  
[19:45:20.103]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:45:20.103]  
[19:45:20.103]  <debugvars>
[19:45:20.103]    // Pre-defined
[19:45:20.103]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:45:20.103]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:45:20.104]    __dp=0x00000000
[19:45:20.104]    __ap=0x00000000
[19:45:20.104]    __traceout=0x00000000      (Trace Disabled)
[19:45:20.104]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:45:20.104]    __FlashAddr=0x00000000
[19:45:20.104]    __FlashLen=0x00000000
[19:45:20.104]    __FlashArg=0x00000000
[19:45:20.104]    __FlashOp=0x00000000
[19:45:20.104]    __Result=0x00000000
[19:45:20.104]  </debugvars>
[19:45:20.104]  
[19:45:20.104]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:45:20.104]    <block atomic="false" info="">
[19:45:20.105]      __var SW_DP_ABORT       = 0x0;
[19:45:20.105]        // -> [SW_DP_ABORT <= 0x00000000]
[19:45:20.105]      __var DP_CTRL_STAT      = 0x4;
[19:45:20.105]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:45:20.105]      __var DP_SELECT         = 0x8;
[19:45:20.105]        // -> [DP_SELECT <= 0x00000008]
[19:45:20.105]      __var powered_down      = 0;
[19:45:20.105]        // -> [powered_down <= 0x00000000]
[19:45:20.105]      WriteDP(DP_SELECT, 0x00000000);
[19:45:20.107]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:45:20.107]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:45:20.107]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:45:20.107]        // -> [powered_down <= 0x00000001]
[19:45:20.108]    </block>
[19:45:20.108]    <control if="powered_down" while="" timeout="0" info="">
[19:45:20.108]      // if-block "powered_down"
[19:45:20.108]        // =>  TRUE
[19:45:20.108]      <block atomic="false" info="">
[19:45:20.108]        Message(0, "Debug/System power-up request sent");
[19:45:20.110]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:45:20.111]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:45:20.111]      </block>
[19:45:20.111]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:45:20.111]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:45:20.112]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:45:20.112]        // while-condition  =>  FALSE
[19:45:20.112]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:45:20.112]      </control>
[19:45:20.112]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:45:20.112]        // if-block "(__protocol & 0xFFFF) == 1"
[19:45:20.112]          // =>  FALSE
[19:45:20.112]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:45:20.113]      </control>
[19:45:20.113]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:45:20.113]        // if-block "(__protocol & 0xFFFF) == 2"
[19:45:20.113]          // =>  TRUE
[19:45:20.113]        <block atomic="false" info="">
[19:45:20.113]          Message(0, "executing SWD power up");
[19:45:20.115]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:45:20.115]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:45:20.115]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:45:20.116]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:45:20.116]        </block>
[19:45:20.116]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:45:20.116]      </control>
[19:45:20.116]      // end if-block "powered_down"
[19:45:20.116]    </control>
[19:45:20.117]    <block atomic="false" info="">
[19:45:20.117]      __var DEBUG_PORT_VAL    = 0;
[19:45:20.117]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:45:20.117]      __var ACCESS_POINT_VAL  = 0;
[19:45:20.117]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:45:20.117]      __ap = 1; 
[19:45:20.117]        // -> [__ap <= 0x00000001]
[19:45:20.119]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:45:20.120]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:45:20.120]      __ap = 4;
[19:45:20.120]        // -> [__ap <= 0x00000004]
[19:45:20.120]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:45:20.121]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:45:20.121]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:45:20.121]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:45:20.123]    </block>
[19:45:20.123]    <block atomic="false" info="">
[19:45:20.123]      __var nReset = 0x80;
[19:45:20.123]        // -> [nReset <= 0x00000080]
[19:45:20.123]      __var canReadPins = 0;
[19:45:20.123]        // -> [canReadPins <= 0x00000000]
[19:45:20.124]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:45:20.124]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:45:20.124]        // -> [canReadPins <= 0x00000001]
[19:45:20.124]    </block>
[19:45:20.124]    <control if="" while="1" timeout="200" info="">
[19:45:20.124]      // while "1"  (timeout="200")
[19:45:20.124]      // while-condition  =>  TRUE
[19:45:20.124]      // while "1"  (timeout="200")
[19:45:20.124]      // while-condition  =>  TRUE
[19:45:20.124]      // while "1"  (timeout="200")
[19:45:20.125]      // while-condition  =>  TRUE
[19:45:20.125]      // while "1"  (timeout="200")
[19:45:20.125]      // while-condition  =>  TRUE
[19:45:20.125]      // while "1"  (timeout="200")
[19:45:20.125]      // while-condition  =>  TRUE
[19:45:20.125]      // while "1"  (timeout="200")
[19:45:20.125]      // while-condition  =>  TRUE
[19:45:20.125]      // while "1"  (timeout="200")
[19:45:20.125]      // while-condition  =>  TRUE
[19:45:20.125]      // while "1"  (timeout="200")
[19:45:20.125]      // while-condition  =>  TRUE
[19:45:20.126]      // while "1"  (timeout="200")
[19:45:20.126]      // while-condition  =>  TRUE
[19:45:20.126]      // while "1"  (timeout="200")
[19:45:20.126]      // while-condition  =>  TRUE
[19:45:20.126]      // while "1"  (timeout="200")
[19:45:20.126]      // while-condition  =>  TRUE
[19:45:20.126]      // while "1"  (timeout="200")
[19:45:20.126]      // while-condition  =>  TRUE
[19:45:20.126]      // while "1"  (timeout="200")
[19:45:20.126]      // while-condition  =>  TRUE
[19:45:20.126]      // while "1"  (timeout="200")
[19:45:20.127]      // while-condition  =>  TRUE
[19:45:20.127]      // while "1"  (timeout="200")
[19:45:20.127]      // while-condition  =>  TRUE
[19:45:20.127]      // while "1"  (timeout="200")
[19:45:20.127]      // while-condition  =>  TRUE
[19:45:20.127]      // while "1"  (timeout="200")
[19:45:20.128]      // while-condition  =>  TRUE
[19:45:20.128]      // while "1"  (timeout="200")
[19:45:20.128]      // while-condition  =>  TRUE
[19:45:20.128]      // while "1"  (timeout="200")
[19:45:20.128]      // while-condition  =>  TRUE
[19:45:20.128]      // while "1"  (timeout="200")
[19:45:20.128]      // while-condition  =>  TRUE
[19:45:20.128]      // while "1"  (timeout="200")
[19:45:20.130]      // while-condition  =>  TRUE
[19:45:20.130]      // while "1"  (timeout="200")
[19:45:20.130]      // while  =>  TIMEOUT
[19:45:20.130]      // end while "1"
[19:45:20.130]    </control>
[19:45:20.130]    <control if="canReadPins" while="" timeout="0" info="">
[19:45:20.130]      // if-block "canReadPins"
[19:45:20.130]        // =>  TRUE
[19:45:20.130]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:45:20.130]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:45:20.131]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:45:20.131]        // while-condition  =>  FALSE
[19:45:20.131]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:45:20.131]      </control>
[19:45:20.131]      // end if-block "canReadPins"
[19:45:20.131]    </control>
[19:45:20.131]    <control if="!canReadPins" while="" timeout="0" info="">
[19:45:20.131]      // if-block "!canReadPins"
[19:45:20.132]        // =>  FALSE
[19:45:20.132]      // skip if-block "!canReadPins"
[19:45:20.132]    </control>
[19:45:20.132]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:45:20.132]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:45:20.132]        // =>  TRUE
[19:45:20.132]      <block atomic="false" info="">
[19:45:20.132]        WriteAP(0x00, 0x190008);
[19:45:20.133]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:45:20.133]        WriteAP(0xF0, 0x01);
[19:45:20.134]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:45:20.134]      </block>
[19:45:20.134]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:45:20.134]    </control>
[19:45:20.134]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:45:20.134]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:45:20.134]        // =>  FALSE
[19:45:20.134]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:45:20.134]    </control>
[19:45:20.134]    <block atomic="false" info="">
[19:45:20.135]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:45:20.136]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:45:20.136]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:45:20.136]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:45:20.138]      __ap = 0; //lets make sure we reset the access point selection
[19:45:20.138]        // -> [__ap <= 0x00000000]
[19:45:20.139]    </block>
[19:45:20.139]  </sequence>
[19:45:20.139]  
[19:45:20.144]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:45:20.144]  
[19:45:20.145]  <debugvars>
[19:45:20.145]    // Pre-defined
[19:45:20.145]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:45:20.145]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:45:20.145]    __dp=0x00000000
[19:45:20.145]    __ap=0x00000000
[19:45:20.145]    __traceout=0x00000000      (Trace Disabled)
[19:45:20.145]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:45:20.145]    __FlashAddr=0x00000000
[19:45:20.146]    __FlashLen=0x00000000
[19:45:20.146]    __FlashArg=0x00000000
[19:45:20.146]    __FlashOp=0x00000000
[19:45:20.146]    __Result=0x00000000
[19:45:20.146]  </debugvars>
[19:45:20.146]  
[19:45:20.146]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:45:20.146]    <block atomic="false" info="">
[19:45:20.146]      __var deviceID = 0;
[19:45:20.148]        // -> [deviceID <= 0x00000000]
[19:45:20.148]      __var version = 0;
[19:45:20.148]        // -> [version <= 0x00000000]
[19:45:20.148]      __var partNum = 0;
[19:45:20.148]        // -> [partNum <= 0x00000000]
[19:45:20.148]      __var manuf = 0;
[19:45:20.148]        // -> [manuf <= 0x00000000]
[19:45:20.148]      __var isMSPM0G1X0X_G3X0X = 0;
[19:45:20.148]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:45:20.148]      __var isProduction = 0;
[19:45:20.149]        // -> [isProduction <= 0x00000000]
[19:45:20.149]      __var continueId = 0;
[19:45:20.149]        // -> [continueId <= 0x00000000]
[19:45:20.149]      deviceID =   Read32(0x41C40004);
[19:45:20.150]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:45:20.150]        // -> [deviceID <= 0x2BB8802F]
[19:45:20.150]      version = deviceID >> 28;
[19:45:20.150]        // -> [version <= 0x00000002]
[19:45:20.152]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:45:20.152]        // -> [partNum <= 0x0000BB88]
[19:45:20.152]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:45:20.152]        // -> [manuf <= 0x00000017]
[19:45:20.152]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:45:20.152]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:45:20.152]      isProduction = (version > 0);
[19:45:20.152]        // -> [isProduction <= 0x00000001]
[19:45:20.152]    </block>
[19:45:20.152]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:45:20.152]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:45:20.152]        // =>  FALSE
[19:45:20.152]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:45:20.153]    </control>
[19:45:20.153]    <control if="continueId == 4" while="" timeout="0" info="">
[19:45:20.153]      // if-block "continueId == 4"
[19:45:20.153]        // =>  FALSE
[19:45:20.153]      // skip if-block "continueId == 4"
[19:45:20.153]    </control>
[19:45:20.153]    <control if="!isProduction" while="" timeout="0" info="">
[19:45:20.153]      // if-block "!isProduction"
[19:45:20.153]        // =>  FALSE
[19:45:20.153]      // skip if-block "!isProduction"
[19:45:20.153]    </control>
[19:45:20.153]  </sequence>
[19:45:20.153]  
[19:45:24.047]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:45:24.047]  
[19:45:24.055]  <debugvars>
[19:45:24.055]    // Pre-defined
[19:45:24.055]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:45:24.055]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:45:24.055]    __dp=0x00000000
[19:45:24.055]    __ap=0x00000000
[19:45:24.055]    __traceout=0x00000000      (Trace Disabled)
[19:45:24.055]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:45:24.055]    __FlashAddr=0x00000000
[19:45:24.055]    __FlashLen=0x00000000
[19:45:24.055]    __FlashArg=0x00000000
[19:45:24.055]    __FlashOp=0x00000000
[19:45:24.055]    __Result=0x00000000
[19:45:24.055]  </debugvars>
[19:45:24.055]  
[19:45:24.057]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:45:24.057]    <block atomic="false" info="">
[19:45:24.057]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:45:24.057]        // -> [isSWJ <= 0x00000001]
[19:45:24.057]      __var hasDormant = __protocol & 0x00020000;
[19:45:24.057]        // -> [hasDormant <= 0x00000000]
[19:45:24.057]      __var protType   = __protocol & 0x0000FFFF;
[19:45:24.057]        // -> [protType <= 0x00000002]
[19:45:24.057]    </block>
[19:45:24.057]    <control if="protType == 1" while="" timeout="0" info="">
[19:45:24.057]      // if-block "protType == 1"
[19:45:24.058]        // =>  FALSE
[19:45:24.058]      // skip if-block "protType == 1"
[19:45:24.058]    </control>
[19:45:24.058]    <control if="protType == 2" while="" timeout="0" info="">
[19:45:24.058]      // if-block "protType == 2"
[19:45:24.058]        // =>  TRUE
[19:45:24.058]      <control if="isSWJ" while="" timeout="0" info="">
[19:45:24.058]        // if-block "isSWJ"
[19:45:24.058]          // =>  TRUE
[19:45:24.058]        <control if="hasDormant" while="" timeout="0" info="">
[19:45:24.059]          // if-block "hasDormant"
[19:45:24.059]            // =>  FALSE
[19:45:24.059]          // skip if-block "hasDormant"
[19:45:24.059]        </control>
[19:45:24.059]        <control if="!hasDormant" while="" timeout="0" info="">
[19:45:24.059]          // if-block "!hasDormant"
[19:45:24.059]            // =>  TRUE
[19:45:24.059]          <block atomic="false" info="">
[19:45:24.059]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:45:24.060]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:45:24.060]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:45:24.060]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:45:24.061]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:45:24.061]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:45:24.061]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:45:24.061]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:45:24.061]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:45:24.061]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:45:24.062]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:45:24.062]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:45:24.062]          </block>
[19:45:24.063]          // end if-block "!hasDormant"
[19:45:24.063]        </control>
[19:45:24.063]        // end if-block "isSWJ"
[19:45:24.063]      </control>
[19:45:24.063]      <control if="!isSWJ" while="" timeout="0" info="">
[19:45:24.063]        // if-block "!isSWJ"
[19:45:24.063]          // =>  FALSE
[19:45:24.063]        // skip if-block "!isSWJ"
[19:45:24.063]      </control>
[19:45:24.063]      <block atomic="false" info="">
[19:45:24.063]        ReadDP(0x0);
[19:45:24.063]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:45:24.064]      </block>
[19:45:24.064]      // end if-block "protType == 2"
[19:45:24.064]    </control>
[19:45:24.064]  </sequence>
[19:45:24.064]  
[19:45:24.064]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:45:24.064]  
[19:45:24.065]  <debugvars>
[19:45:24.065]    // Pre-defined
[19:45:24.065]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:45:24.065]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:45:24.065]    __dp=0x00000000
[19:45:24.065]    __ap=0x00000000
[19:45:24.065]    __traceout=0x00000000      (Trace Disabled)
[19:45:24.065]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:45:24.065]    __FlashAddr=0x00000000
[19:45:24.065]    __FlashLen=0x00000000
[19:45:24.065]    __FlashArg=0x00000000
[19:45:24.067]    __FlashOp=0x00000000
[19:45:24.067]    __Result=0x00000000
[19:45:24.067]  </debugvars>
[19:45:24.067]  
[19:45:24.067]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:45:24.067]    <block atomic="false" info="">
[19:45:24.067]      __var SW_DP_ABORT       = 0x0;
[19:45:24.067]        // -> [SW_DP_ABORT <= 0x00000000]
[19:45:24.067]      __var DP_CTRL_STAT      = 0x4;
[19:45:24.067]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:45:24.068]      __var DP_SELECT         = 0x8;
[19:45:24.068]        // -> [DP_SELECT <= 0x00000008]
[19:45:24.068]      __var powered_down      = 0;
[19:45:24.068]        // -> [powered_down <= 0x00000000]
[19:45:24.068]      WriteDP(DP_SELECT, 0x00000000);
[19:45:24.069]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:45:24.069]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:45:24.069]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:45:24.069]        // -> [powered_down <= 0x00000001]
[19:45:24.069]    </block>
[19:45:24.069]    <control if="powered_down" while="" timeout="0" info="">
[19:45:24.069]      // if-block "powered_down"
[19:45:24.069]        // =>  TRUE
[19:45:24.069]      <block atomic="false" info="">
[19:45:24.070]        Message(0, "Debug/System power-up request sent");
[19:45:24.071]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:45:24.072]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:45:24.072]      </block>
[19:45:24.072]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:45:24.072]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:45:24.072]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:45:24.073]        // while-condition  =>  FALSE
[19:45:24.073]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:45:24.073]      </control>
[19:45:24.073]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:45:24.073]        // if-block "(__protocol & 0xFFFF) == 1"
[19:45:24.073]          // =>  FALSE
[19:45:24.073]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:45:24.073]      </control>
[19:45:24.073]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:45:24.074]        // if-block "(__protocol & 0xFFFF) == 2"
[19:45:24.074]          // =>  TRUE
[19:45:24.074]        <block atomic="false" info="">
[19:45:24.074]          Message(0, "executing SWD power up");
[19:45:24.075]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:45:24.075]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:45:24.075]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:45:24.077]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:45:24.077]        </block>
[19:45:24.077]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:45:24.077]      </control>
[19:45:24.077]      // end if-block "powered_down"
[19:45:24.077]    </control>
[19:45:24.077]    <block atomic="false" info="">
[19:45:24.077]      __var DEBUG_PORT_VAL    = 0;
[19:45:24.077]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:45:24.077]      __var ACCESS_POINT_VAL  = 0;
[19:45:24.077]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:45:24.077]      __ap = 1; 
[19:45:24.078]        // -> [__ap <= 0x00000001]
[19:45:24.078]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:45:24.079]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:45:24.079]      __ap = 4;
[19:45:24.079]        // -> [__ap <= 0x00000004]
[19:45:24.079]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:45:24.081]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:45:24.081]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:45:24.081]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:45:24.082]    </block>
[19:45:24.082]    <block atomic="false" info="">
[19:45:24.082]      __var nReset = 0x80;
[19:45:24.082]        // -> [nReset <= 0x00000080]
[19:45:24.082]      __var canReadPins = 0;
[19:45:24.082]        // -> [canReadPins <= 0x00000000]
[19:45:24.082]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:45:24.083]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:45:24.083]        // -> [canReadPins <= 0x00000001]
[19:45:24.084]    </block>
[19:45:24.084]    <control if="" while="1" timeout="200" info="">
[19:45:24.084]      // while "1"  (timeout="200")
[19:45:24.084]      // while-condition  =>  TRUE
[19:45:24.084]      // while "1"  (timeout="200")
[19:45:24.084]      // while-condition  =>  TRUE
[19:45:24.084]      // while "1"  (timeout="200")
[19:45:24.084]      // while-condition  =>  TRUE
[19:45:24.084]      // while "1"  (timeout="200")
[19:45:24.084]      // while-condition  =>  TRUE
[19:45:24.084]      // while "1"  (timeout="200")
[19:45:24.084]      // while-condition  =>  TRUE
[19:45:24.084]      // while "1"  (timeout="200")
[19:45:24.084]      // while-condition  =>  TRUE
[19:45:24.084]      // while "1"  (timeout="200")
[19:45:24.084]      // while-condition  =>  TRUE
[19:45:24.084]      // while "1"  (timeout="200")
[19:45:24.085]      // while-condition  =>  TRUE
[19:45:24.085]      // while "1"  (timeout="200")
[19:45:24.085]      // while-condition  =>  TRUE
[19:45:24.085]      // while "1"  (timeout="200")
[19:45:24.085]      // while-condition  =>  TRUE
[19:45:24.085]      // while "1"  (timeout="200")
[19:45:24.085]      // while-condition  =>  TRUE
[19:45:24.085]      // while "1"  (timeout="200")
[19:45:24.085]      // while-condition  =>  TRUE
[19:45:24.085]      // while "1"  (timeout="200")
[19:45:24.087]      // while-condition  =>  TRUE
[19:45:24.087]      // while "1"  (timeout="200")
[19:45:24.087]      // while-condition  =>  TRUE
[19:45:24.087]      // while "1"  (timeout="200")
[19:45:24.088]      // while-condition  =>  TRUE
[19:45:24.088]      // while "1"  (timeout="200")
[19:45:24.088]      // while-condition  =>  TRUE
[19:45:24.088]      // while "1"  (timeout="200")
[19:45:24.088]      // while-condition  =>  TRUE
[19:45:24.088]      // while "1"  (timeout="200")
[19:45:24.088]      // while-condition  =>  TRUE
[19:45:24.088]      // while "1"  (timeout="200")
[19:45:24.088]      // while-condition  =>  TRUE
[19:45:24.089]      // while "1"  (timeout="200")
[19:45:24.089]      // while-condition  =>  TRUE
[19:45:24.089]      // while "1"  (timeout="200")
[19:45:24.089]      // while-condition  =>  TRUE
[19:45:24.089]      // while "1"  (timeout="200")
[19:45:24.089]      // while-condition  =>  TRUE
[19:45:24.089]      // while "1"  (timeout="200")
[19:45:24.089]      // while-condition  =>  TRUE
[19:45:24.089]      // while "1"  (timeout="200")
[19:45:24.090]      // while-condition  =>  TRUE
[19:45:24.090]      // while "1"  (timeout="200")
[19:45:24.090]      // while-condition  =>  TRUE
[19:45:24.090]      // while "1"  (timeout="200")
[19:45:24.090]      // while-condition  =>  TRUE
[19:45:24.090]      // while "1"  (timeout="200")
[19:45:24.090]      // while-condition  =>  TRUE
[19:45:24.091]      // while "1"  (timeout="200")
[19:45:24.091]      // while-condition  =>  TRUE
[19:45:24.091]      // while "1"  (timeout="200")
[19:45:24.091]      // while-condition  =>  TRUE
[19:45:24.091]      // while "1"  (timeout="200")
[19:45:24.091]      // while-condition  =>  TRUE
[19:45:24.092]      // while "1"  (timeout="200")
[19:45:24.092]      // while-condition  =>  TRUE
[19:45:24.092]      // while "1"  (timeout="200")
[19:45:24.092]      // while-condition  =>  TRUE
[19:45:24.092]      // while "1"  (timeout="200")
[19:45:24.092]      // while-condition  =>  TRUE
[19:45:24.092]      // while "1"  (timeout="200")
[19:45:24.092]      // while-condition  =>  TRUE
[19:45:24.092]      // while "1"  (timeout="200")
[19:45:24.092]      // while-condition  =>  TRUE
[19:45:24.092]      // while "1"  (timeout="200")
[19:45:24.092]      // while-condition  =>  TRUE
[19:45:24.093]      // while "1"  (timeout="200")
[19:45:24.093]      // while-condition  =>  TRUE
[19:45:24.093]      // while "1"  (timeout="200")
[19:45:24.093]      // while-condition  =>  TRUE
[19:45:24.093]      // while "1"  (timeout="200")
[19:45:24.093]      // while-condition  =>  TRUE
[19:45:24.093]      // while "1"  (timeout="200")
[19:45:24.093]      // while-condition  =>  TRUE
[19:45:24.093]      // while "1"  (timeout="200")
[19:45:24.094]      // while-condition  =>  TRUE
[19:45:24.094]      // while "1"  (timeout="200")
[19:45:24.094]      // while-condition  =>  TRUE
[19:45:24.094]      // while "1"  (timeout="200")
[19:45:24.094]      // while-condition  =>  TRUE
[19:45:24.094]      // while "1"  (timeout="200")
[19:45:24.094]      // while-condition  =>  TRUE
[19:45:24.094]      // while "1"  (timeout="200")
[19:45:24.094]      // while-condition  =>  TRUE
[19:45:24.095]      // while "1"  (timeout="200")
[19:45:24.095]      // while-condition  =>  TRUE
[19:45:24.095]      // while "1"  (timeout="200")
[19:45:24.095]      // while-condition  =>  TRUE
[19:45:24.095]      // while "1"  (timeout="200")
[19:45:24.095]      // while-condition  =>  TRUE
[19:45:24.095]      // while "1"  (timeout="200")
[19:45:24.095]      // while-condition  =>  TRUE
[19:45:24.095]      // while "1"  (timeout="200")
[19:45:24.095]      // while-condition  =>  TRUE
[19:45:24.095]      // while "1"  (timeout="200")
[19:45:24.095]      // while-condition  =>  TRUE
[19:45:24.095]      // while "1"  (timeout="200")
[19:45:24.095]      // while-condition  =>  TRUE
[19:45:24.097]      // while "1"  (timeout="200")
[19:45:24.097]      // while-condition  =>  TRUE
[19:45:24.097]      // while "1"  (timeout="200")
[19:45:24.097]      // while-condition  =>  TRUE
[19:45:24.097]      // while "1"  (timeout="200")
[19:45:24.097]      // while-condition  =>  TRUE
[19:45:24.097]      // while "1"  (timeout="200")
[19:45:24.097]      // while-condition  =>  TRUE
[19:45:24.097]      // while "1"  (timeout="200")
[19:45:24.097]      // while-condition  =>  TRUE
[19:45:24.097]      // while "1"  (timeout="200")
[19:45:24.097]      // while-condition  =>  TRUE
[19:45:24.098]      // while "1"  (timeout="200")
[19:45:24.098]      // while  =>  TIMEOUT
[19:45:24.098]      // end while "1"
[19:45:24.098]    </control>
[19:45:24.098]    <control if="canReadPins" while="" timeout="0" info="">
[19:45:24.098]      // if-block "canReadPins"
[19:45:24.098]        // =>  TRUE
[19:45:24.098]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:45:24.098]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:45:24.099]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:45:24.099]        // while-condition  =>  FALSE
[19:45:24.099]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:45:24.099]      </control>
[19:45:24.099]      // end if-block "canReadPins"
[19:45:24.099]    </control>
[19:45:24.099]    <control if="!canReadPins" while="" timeout="0" info="">
[19:45:24.099]      // if-block "!canReadPins"
[19:45:24.100]        // =>  FALSE
[19:45:24.100]      // skip if-block "!canReadPins"
[19:45:24.100]    </control>
[19:45:24.100]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:45:24.100]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:45:24.100]        // =>  TRUE
[19:45:24.100]      <block atomic="false" info="">
[19:45:24.100]        WriteAP(0x00, 0x190008);
[19:45:24.101]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:45:24.101]        WriteAP(0xF0, 0x01);
[19:45:24.102]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:45:24.102]      </block>
[19:45:24.103]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:45:24.103]    </control>
[19:45:24.103]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:45:24.103]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:45:24.103]        // =>  FALSE
[19:45:24.103]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:45:24.103]    </control>
[19:45:24.103]    <block atomic="false" info="">
[19:45:24.103]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:45:24.104]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:45:24.104]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:45:24.105]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:45:24.107]      __ap = 0; //lets make sure we reset the access point selection
[19:45:24.107]        // -> [__ap <= 0x00000000]
[19:45:24.107]    </block>
[19:45:24.107]  </sequence>
[19:45:24.107]  
[19:45:24.113]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:45:24.113]  
[19:45:24.113]  <debugvars>
[19:45:24.113]    // Pre-defined
[19:45:24.113]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:45:24.114]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:45:24.114]    __dp=0x00000000
[19:45:24.114]    __ap=0x00000000
[19:45:24.114]    __traceout=0x00000000      (Trace Disabled)
[19:45:24.114]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:45:24.114]    __FlashAddr=0x00000000
[19:45:24.114]    __FlashLen=0x00000000
[19:45:24.114]    __FlashArg=0x00000000
[19:45:24.114]    __FlashOp=0x00000000
[19:45:24.114]    __Result=0x00000000
[19:45:24.115]  </debugvars>
[19:45:24.115]  
[19:45:24.115]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:45:24.115]    <block atomic="false" info="">
[19:45:24.115]      __var deviceID = 0;
[19:45:24.115]        // -> [deviceID <= 0x00000000]
[19:45:24.115]      __var version = 0;
[19:45:24.115]        // -> [version <= 0x00000000]
[19:45:24.115]      __var partNum = 0;
[19:45:24.115]        // -> [partNum <= 0x00000000]
[19:45:24.116]      __var manuf = 0;
[19:45:24.116]        // -> [manuf <= 0x00000000]
[19:45:24.116]      __var isMSPM0G1X0X_G3X0X = 0;
[19:45:24.116]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:45:24.116]      __var isProduction = 0;
[19:45:24.116]        // -> [isProduction <= 0x00000000]
[19:45:24.116]      __var continueId = 0;
[19:45:24.116]        // -> [continueId <= 0x00000000]
[19:45:24.116]      deviceID =   Read32(0x41C40004);
[19:45:24.117]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:45:24.118]        // -> [deviceID <= 0x2BB8802F]
[19:45:24.118]      version = deviceID >> 28;
[19:45:24.118]        // -> [version <= 0x00000002]
[19:45:24.118]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:45:24.118]        // -> [partNum <= 0x0000BB88]
[19:45:24.118]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:45:24.118]        // -> [manuf <= 0x00000017]
[19:45:24.118]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:45:24.118]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:45:24.118]      isProduction = (version > 0);
[19:45:24.118]        // -> [isProduction <= 0x00000001]
[19:45:24.119]    </block>
[19:45:24.119]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:45:24.119]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:45:24.119]        // =>  FALSE
[19:45:24.119]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:45:24.119]    </control>
[19:45:24.119]    <control if="continueId == 4" while="" timeout="0" info="">
[19:45:24.119]      // if-block "continueId == 4"
[19:45:24.119]        // =>  FALSE
[19:45:24.119]      // skip if-block "continueId == 4"
[19:45:24.120]    </control>
[19:45:24.120]    <control if="!isProduction" while="" timeout="0" info="">
[19:45:24.120]      // if-block "!isProduction"
[19:45:24.120]        // =>  FALSE
[19:45:24.120]      // skip if-block "!isProduction"
[19:45:24.120]    </control>
[19:45:24.120]  </sequence>
[19:45:24.120]  
[19:49:02.890]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:49:02.890]  
[19:49:02.891]  <debugvars>
[19:49:02.891]    // Pre-defined
[19:49:02.891]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:02.891]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:49:02.891]    __dp=0x00000000
[19:49:02.891]    __ap=0x00000000
[19:49:02.891]    __traceout=0x00000000      (Trace Disabled)
[19:49:02.891]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:02.891]    __FlashAddr=0x00000000
[19:49:02.892]    __FlashLen=0x00000000
[19:49:02.892]    __FlashArg=0x00000000
[19:49:02.892]    __FlashOp=0x00000000
[19:49:02.892]    __Result=0x00000000
[19:49:02.892]  </debugvars>
[19:49:02.892]  
[19:49:02.892]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:02.892]    <block atomic="false" info="">
[19:49:02.892]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:02.892]        // -> [isSWJ <= 0x00000001]
[19:49:02.892]      __var hasDormant = __protocol & 0x00020000;
[19:49:02.893]        // -> [hasDormant <= 0x00000000]
[19:49:02.893]      __var protType   = __protocol & 0x0000FFFF;
[19:49:02.893]        // -> [protType <= 0x00000002]
[19:49:02.893]    </block>
[19:49:02.893]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:02.893]      // if-block "protType == 1"
[19:49:02.893]        // =>  FALSE
[19:49:02.893]      // skip if-block "protType == 1"
[19:49:02.894]    </control>
[19:49:02.894]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:02.894]      // if-block "protType == 2"
[19:49:02.894]        // =>  TRUE
[19:49:02.894]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:02.894]        // if-block "isSWJ"
[19:49:02.894]          // =>  TRUE
[19:49:02.894]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:02.894]          // if-block "hasDormant"
[19:49:02.894]            // =>  FALSE
[19:49:02.894]          // skip if-block "hasDormant"
[19:49:02.895]        </control>
[19:49:02.895]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:02.895]          // if-block "!hasDormant"
[19:49:02.895]            // =>  TRUE
[19:49:02.895]          <block atomic="false" info="">
[19:49:02.895]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:02.896]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:02.896]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:02.896]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:02.896]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:02.896]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:02.896]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:02.897]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:02.897]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:02.897]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:02.897]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:02.897]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:02.897]          </block>
[19:49:02.898]          // end if-block "!hasDormant"
[19:49:02.898]        </control>
[19:49:02.898]        // end if-block "isSWJ"
[19:49:02.898]      </control>
[19:49:02.898]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:02.898]        // if-block "!isSWJ"
[19:49:02.899]          // =>  FALSE
[19:49:02.900]        // skip if-block "!isSWJ"
[19:49:02.900]      </control>
[19:49:02.900]      <block atomic="false" info="">
[19:49:02.900]        ReadDP(0x0);
[19:49:02.900]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:02.901]      </block>
[19:49:02.901]      // end if-block "protType == 2"
[19:49:02.901]    </control>
[19:49:02.901]  </sequence>
[19:49:02.901]  
[19:49:02.901]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:49:02.901]  
[19:49:02.901]  <debugvars>
[19:49:02.901]    // Pre-defined
[19:49:02.901]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:02.902]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:49:02.902]    __dp=0x00000000
[19:49:02.902]    __ap=0x00000000
[19:49:02.902]    __traceout=0x00000000      (Trace Disabled)
[19:49:02.902]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:02.902]    __FlashAddr=0x00000000
[19:49:02.902]    __FlashLen=0x00000000
[19:49:02.902]    __FlashArg=0x00000000
[19:49:02.902]    __FlashOp=0x00000000
[19:49:02.902]    __Result=0x00000000
[19:49:02.902]  </debugvars>
[19:49:02.902]  
[19:49:02.902]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:49:02.902]    <block atomic="false" info="">
[19:49:02.903]      __var SW_DP_ABORT       = 0x0;
[19:49:02.903]        // -> [SW_DP_ABORT <= 0x00000000]
[19:49:02.903]      __var DP_CTRL_STAT      = 0x4;
[19:49:02.903]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:49:02.903]      __var DP_SELECT         = 0x8;
[19:49:02.903]        // -> [DP_SELECT <= 0x00000008]
[19:49:02.903]      __var powered_down      = 0;
[19:49:02.903]        // -> [powered_down <= 0x00000000]
[19:49:02.904]      WriteDP(DP_SELECT, 0x00000000);
[19:49:02.904]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:49:02.904]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:49:02.905]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:49:02.905]        // -> [powered_down <= 0x00000001]
[19:49:02.905]    </block>
[19:49:02.905]    <control if="powered_down" while="" timeout="0" info="">
[19:49:02.905]      // if-block "powered_down"
[19:49:02.905]        // =>  TRUE
[19:49:02.906]      <block atomic="false" info="">
[19:49:02.906]        Message(0, "Debug/System power-up request sent");
[19:49:02.908]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:49:02.908]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:49:02.908]      </block>
[19:49:02.908]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:49:02.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:49:02.909]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:49:02.909]        // while-condition  =>  FALSE
[19:49:02.909]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:49:02.909]      </control>
[19:49:02.909]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:49:02.909]        // if-block "(__protocol & 0xFFFF) == 1"
[19:49:02.909]          // =>  FALSE
[19:49:02.910]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:49:02.910]      </control>
[19:49:02.910]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:49:02.910]        // if-block "(__protocol & 0xFFFF) == 2"
[19:49:02.910]          // =>  TRUE
[19:49:02.910]        <block atomic="false" info="">
[19:49:02.910]          Message(0, "executing SWD power up");
[19:49:02.913]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:49:02.914]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:49:02.914]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:49:02.914]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:49:02.915]        </block>
[19:49:02.915]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:49:02.915]      </control>
[19:49:02.915]      // end if-block "powered_down"
[19:49:02.915]    </control>
[19:49:02.915]    <block atomic="false" info="">
[19:49:02.915]      __var DEBUG_PORT_VAL    = 0;
[19:49:02.915]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:49:02.915]      __var ACCESS_POINT_VAL  = 0;
[19:49:02.915]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:49:02.916]      __ap = 1; 
[19:49:02.916]        // -> [__ap <= 0x00000001]
[19:49:02.916]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:49:02.917]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:49:02.917]      __ap = 4;
[19:49:02.917]        // -> [__ap <= 0x00000004]
[19:49:02.918]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:49:02.919]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:49:02.919]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:49:02.920]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:49:02.921]    </block>
[19:49:02.922]    <block atomic="false" info="">
[19:49:02.922]      __var nReset = 0x80;
[19:49:02.922]        // -> [nReset <= 0x00000080]
[19:49:02.922]      __var canReadPins = 0;
[19:49:02.922]        // -> [canReadPins <= 0x00000000]
[19:49:02.922]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:49:02.923]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:49:02.923]        // -> [canReadPins <= 0x00000001]
[19:49:02.923]    </block>
[19:49:02.923]    <control if="" while="1" timeout="200" info="">
[19:49:02.923]      // while "1"  (timeout="200")
[19:49:02.923]      // while-condition  =>  TRUE
[19:49:02.923]      // while "1"  (timeout="200")
[19:49:02.923]      // while-condition  =>  TRUE
[19:49:02.923]      // while "1"  (timeout="200")
[19:49:02.924]      // while-condition  =>  TRUE
[19:49:02.924]      // while "1"  (timeout="200")
[19:49:02.924]      // while-condition  =>  TRUE
[19:49:02.924]      // while "1"  (timeout="200")
[19:49:02.924]      // while-condition  =>  TRUE
[19:49:02.924]      // while "1"  (timeout="200")
[19:49:02.924]      // while-condition  =>  TRUE
[19:49:02.924]      // while "1"  (timeout="200")
[19:49:02.924]      // while-condition  =>  TRUE
[19:49:02.925]      // while "1"  (timeout="200")
[19:49:02.925]      // while-condition  =>  TRUE
[19:49:02.925]      // while "1"  (timeout="200")
[19:49:02.925]      // while-condition  =>  TRUE
[19:49:02.925]      // while "1"  (timeout="200")
[19:49:02.925]      // while-condition  =>  TRUE
[19:49:02.925]      // while "1"  (timeout="200")
[19:49:02.925]      // while-condition  =>  TRUE
[19:49:02.925]      // while "1"  (timeout="200")
[19:49:02.925]      // while-condition  =>  TRUE
[19:49:02.925]      // while "1"  (timeout="200")
[19:49:02.926]      // while-condition  =>  TRUE
[19:49:02.926]      // while "1"  (timeout="200")
[19:49:02.926]      // while  =>  TIMEOUT
[19:49:02.926]      // end while "1"
[19:49:02.926]    </control>
[19:49:02.926]    <control if="canReadPins" while="" timeout="0" info="">
[19:49:02.926]      // if-block "canReadPins"
[19:49:02.926]        // =>  TRUE
[19:49:02.926]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:49:02.926]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:49:02.926]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:49:02.926]        // while-condition  =>  FALSE
[19:49:02.926]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:49:02.927]      </control>
[19:49:02.927]      // end if-block "canReadPins"
[19:49:02.927]    </control>
[19:49:02.927]    <control if="!canReadPins" while="" timeout="0" info="">
[19:49:02.927]      // if-block "!canReadPins"
[19:49:02.928]        // =>  FALSE
[19:49:02.928]      // skip if-block "!canReadPins"
[19:49:02.928]    </control>
[19:49:02.928]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:49:02.928]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:49:02.928]        // =>  TRUE
[19:49:02.928]      <block atomic="false" info="">
[19:49:02.928]        WriteAP(0x00, 0x190008);
[19:49:02.929]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:49:02.929]        WriteAP(0xF0, 0x01);
[19:49:02.931]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:49:02.931]      </block>
[19:49:02.931]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:49:02.931]    </control>
[19:49:02.931]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:49:02.931]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:49:02.931]        // =>  FALSE
[19:49:02.931]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:49:02.932]    </control>
[19:49:02.932]    <block atomic="false" info="">
[19:49:02.932]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:49:02.933]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:49:02.933]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:49:02.933]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:49:02.935]      __ap = 0; //lets make sure we reset the access point selection
[19:49:02.935]        // -> [__ap <= 0x00000000]
[19:49:02.935]    </block>
[19:49:02.935]  </sequence>
[19:49:02.935]  
[19:49:02.941]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:49:02.941]  
[19:49:02.941]  <debugvars>
[19:49:02.942]    // Pre-defined
[19:49:02.942]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:02.942]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[19:49:02.942]    __dp=0x00000000
[19:49:02.942]    __ap=0x00000000
[19:49:02.942]    __traceout=0x00000000      (Trace Disabled)
[19:49:02.943]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:02.943]    __FlashAddr=0x00000000
[19:49:02.943]    __FlashLen=0x00000000
[19:49:02.943]    __FlashArg=0x00000000
[19:49:02.943]    __FlashOp=0x00000000
[19:49:02.943]    __Result=0x00000000
[19:49:02.943]  </debugvars>
[19:49:02.943]  
[19:49:02.944]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:49:02.944]    <block atomic="false" info="">
[19:49:02.944]      __var deviceID = 0;
[19:49:02.944]        // -> [deviceID <= 0x00000000]
[19:49:02.944]      __var version = 0;
[19:49:02.944]        // -> [version <= 0x00000000]
[19:49:02.944]      __var partNum = 0;
[19:49:02.945]        // -> [partNum <= 0x00000000]
[19:49:02.945]      __var manuf = 0;
[19:49:02.945]        // -> [manuf <= 0x00000000]
[19:49:02.945]      __var isMSPM0G1X0X_G3X0X = 0;
[19:49:02.945]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:49:02.946]      __var isProduction = 0;
[19:49:02.946]        // -> [isProduction <= 0x00000000]
[19:49:02.946]      __var continueId = 0;
[19:49:02.946]        // -> [continueId <= 0x00000000]
[19:49:02.946]      deviceID =   Read32(0x41C40004);
[19:49:02.947]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:49:02.947]        // -> [deviceID <= 0x2BB8802F]
[19:49:02.947]      version = deviceID >> 28;
[19:49:02.947]        // -> [version <= 0x00000002]
[19:49:02.948]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:49:02.948]        // -> [partNum <= 0x0000BB88]
[19:49:02.948]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:49:02.948]        // -> [manuf <= 0x00000017]
[19:49:02.948]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:49:02.948]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:49:02.948]      isProduction = (version > 0);
[19:49:02.948]        // -> [isProduction <= 0x00000001]
[19:49:02.948]    </block>
[19:49:02.948]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:49:02.949]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:49:02.949]        // =>  FALSE
[19:49:02.949]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:49:02.949]    </control>
[19:49:02.949]    <control if="continueId == 4" while="" timeout="0" info="">
[19:49:02.949]      // if-block "continueId == 4"
[19:49:02.949]        // =>  FALSE
[19:49:02.949]      // skip if-block "continueId == 4"
[19:49:02.949]    </control>
[19:49:02.949]    <control if="!isProduction" while="" timeout="0" info="">
[19:49:02.949]      // if-block "!isProduction"
[19:49:02.949]        // =>  FALSE
[19:49:02.949]      // skip if-block "!isProduction"
[19:49:02.949]    </control>
[19:49:02.949]  </sequence>
[19:49:02.949]  
[19:49:06.919]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[19:49:06.919]  
[19:49:06.919]  <debugvars>
[19:49:06.919]    // Pre-defined
[19:49:06.919]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:06.919]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:06.919]    __dp=0x00000000
[19:49:06.921]    __ap=0x00000000
[19:49:06.921]    __traceout=0x00000000      (Trace Disabled)
[19:49:06.921]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:06.921]    __FlashAddr=0x00000000
[19:49:06.921]    __FlashLen=0x00000000
[19:49:06.921]    __FlashArg=0x00000000
[19:49:06.921]    __FlashOp=0x00000000
[19:49:06.922]    __Result=0x00000000
[19:49:06.922]  </debugvars>
[19:49:06.922]  
[19:49:06.922]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[19:49:06.922]    <block atomic="false" info="">
[19:49:06.922]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[19:49:06.922]        // -> [isSWJ <= 0x00000001]
[19:49:06.922]      __var hasDormant = __protocol & 0x00020000;
[19:49:06.922]        // -> [hasDormant <= 0x00000000]
[19:49:06.922]      __var protType   = __protocol & 0x0000FFFF;
[19:49:06.922]        // -> [protType <= 0x00000002]
[19:49:06.923]    </block>
[19:49:06.923]    <control if="protType == 1" while="" timeout="0" info="">
[19:49:06.923]      // if-block "protType == 1"
[19:49:06.923]        // =>  FALSE
[19:49:06.923]      // skip if-block "protType == 1"
[19:49:06.923]    </control>
[19:49:06.923]    <control if="protType == 2" while="" timeout="0" info="">
[19:49:06.923]      // if-block "protType == 2"
[19:49:06.923]        // =>  TRUE
[19:49:06.923]      <control if="isSWJ" while="" timeout="0" info="">
[19:49:06.923]        // if-block "isSWJ"
[19:49:06.924]          // =>  TRUE
[19:49:06.924]        <control if="hasDormant" while="" timeout="0" info="">
[19:49:06.924]          // if-block "hasDormant"
[19:49:06.924]            // =>  FALSE
[19:49:06.924]          // skip if-block "hasDormant"
[19:49:06.924]        </control>
[19:49:06.925]        <control if="!hasDormant" while="" timeout="0" info="">
[19:49:06.925]          // if-block "!hasDormant"
[19:49:06.925]            // =>  TRUE
[19:49:06.925]          <block atomic="false" info="">
[19:49:06.925]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[19:49:06.925]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:06.925]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[19:49:06.925]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[19:49:06.926]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[19:49:06.926]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:06.926]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[19:49:06.926]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[19:49:06.926]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[19:49:06.928]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[19:49:06.928]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[19:49:06.928]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[19:49:06.928]          </block>
[19:49:06.928]          // end if-block "!hasDormant"
[19:49:06.928]        </control>
[19:49:06.928]        // end if-block "isSWJ"
[19:49:06.929]      </control>
[19:49:06.929]      <control if="!isSWJ" while="" timeout="0" info="">
[19:49:06.929]        // if-block "!isSWJ"
[19:49:06.929]          // =>  FALSE
[19:49:06.929]        // skip if-block "!isSWJ"
[19:49:06.929]      </control>
[19:49:06.929]      <block atomic="false" info="">
[19:49:06.929]        ReadDP(0x0);
[19:49:06.930]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[19:49:06.930]      </block>
[19:49:06.930]      // end if-block "protType == 2"
[19:49:06.930]    </control>
[19:49:06.931]  </sequence>
[19:49:06.931]  
[19:49:06.931]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[19:49:06.931]  
[19:49:06.931]  <debugvars>
[19:49:06.931]    // Pre-defined
[19:49:06.931]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:06.932]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:06.932]    __dp=0x00000000
[19:49:06.932]    __ap=0x00000000
[19:49:06.932]    __traceout=0x00000000      (Trace Disabled)
[19:49:06.932]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:06.932]    __FlashAddr=0x00000000
[19:49:06.932]    __FlashLen=0x00000000
[19:49:06.932]    __FlashArg=0x00000000
[19:49:06.932]    __FlashOp=0x00000000
[19:49:06.932]    __Result=0x00000000
[19:49:06.932]  </debugvars>
[19:49:06.933]  
[19:49:06.933]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[19:49:06.933]    <block atomic="false" info="">
[19:49:06.933]      __var SW_DP_ABORT       = 0x0;
[19:49:06.933]        // -> [SW_DP_ABORT <= 0x00000000]
[19:49:06.933]      __var DP_CTRL_STAT      = 0x4;
[19:49:06.933]        // -> [DP_CTRL_STAT <= 0x00000004]
[19:49:06.933]      __var DP_SELECT         = 0x8;
[19:49:06.933]        // -> [DP_SELECT <= 0x00000008]
[19:49:06.933]      __var powered_down      = 0;
[19:49:06.933]        // -> [powered_down <= 0x00000000]
[19:49:06.934]      WriteDP(DP_SELECT, 0x00000000);
[19:49:06.934]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[19:49:06.934]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[19:49:06.935]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[19:49:06.935]        // -> [powered_down <= 0x00000001]
[19:49:06.935]    </block>
[19:49:06.935]    <control if="powered_down" while="" timeout="0" info="">
[19:49:06.935]      // if-block "powered_down"
[19:49:06.935]        // =>  TRUE
[19:49:06.935]      <block atomic="false" info="">
[19:49:06.935]        Message(0, "Debug/System power-up request sent");
[19:49:06.936]        WriteDP(DP_CTRL_STAT, 0x50000000);
[19:49:06.937]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[19:49:06.937]      </block>
[19:49:06.937]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[19:49:06.937]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[19:49:06.938]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[19:49:06.938]        // while-condition  =>  FALSE
[19:49:06.938]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[19:49:06.938]      </control>
[19:49:06.938]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[19:49:06.938]        // if-block "(__protocol & 0xFFFF) == 1"
[19:49:06.938]          // =>  FALSE
[19:49:06.938]        // skip if-block "(__protocol & 0xFFFF) == 1"
[19:49:06.939]      </control>
[19:49:06.939]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[19:49:06.939]        // if-block "(__protocol & 0xFFFF) == 2"
[19:49:06.939]          // =>  TRUE
[19:49:06.939]        <block atomic="false" info="">
[19:49:06.939]          Message(0, "executing SWD power up");
[19:49:06.941]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[19:49:06.941]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[19:49:06.941]          WriteDP(SW_DP_ABORT, 0x0000001E);
[19:49:06.942]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[19:49:06.942]        </block>
[19:49:06.942]        // end if-block "(__protocol & 0xFFFF) == 2"
[19:49:06.942]      </control>
[19:49:06.942]      // end if-block "powered_down"
[19:49:06.942]    </control>
[19:49:06.942]    <block atomic="false" info="">
[19:49:06.942]      __var DEBUG_PORT_VAL    = 0;
[19:49:06.943]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[19:49:06.943]      __var ACCESS_POINT_VAL  = 0;
[19:49:06.943]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[19:49:06.943]      __ap = 1; 
[19:49:06.943]        // -> [__ap <= 0x00000001]
[19:49:06.943]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[19:49:06.946]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[19:49:06.946]      __ap = 4;
[19:49:06.946]        // -> [__ap <= 0x00000004]
[19:49:06.946]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:49:06.946]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[19:49:06.946]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[19:49:06.947]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:49:06.949]    </block>
[19:49:06.949]    <block atomic="false" info="">
[19:49:06.949]      __var nReset = 0x80;
[19:49:06.949]        // -> [nReset <= 0x00000080]
[19:49:06.949]      __var canReadPins = 0;
[19:49:06.949]        // -> [canReadPins <= 0x00000000]
[19:49:06.949]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[19:49:06.949]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[19:49:06.949]        // -> [canReadPins <= 0x00000001]
[19:49:06.949]    </block>
[19:49:06.949]    <control if="" while="1" timeout="200" info="">
[19:49:06.951]      // while "1"  (timeout="200")
[19:49:06.951]      // while-condition  =>  TRUE
[19:49:06.951]      // while "1"  (timeout="200")
[19:49:06.951]      // while-condition  =>  TRUE
[19:49:06.951]      // while "1"  (timeout="200")
[19:49:06.951]      // while-condition  =>  TRUE
[19:49:06.951]      // while "1"  (timeout="200")
[19:49:06.951]      // while-condition  =>  TRUE
[19:49:06.951]      // while "1"  (timeout="200")
[19:49:06.951]      // while-condition  =>  TRUE
[19:49:06.952]      // while "1"  (timeout="200")
[19:49:06.952]      // while-condition  =>  TRUE
[19:49:06.952]      // while "1"  (timeout="200")
[19:49:06.952]      // while-condition  =>  TRUE
[19:49:06.952]      // while "1"  (timeout="200")
[19:49:06.952]      // while-condition  =>  TRUE
[19:49:06.952]      // while "1"  (timeout="200")
[19:49:06.952]      // while-condition  =>  TRUE
[19:49:06.952]      // while "1"  (timeout="200")
[19:49:06.952]      // while-condition  =>  TRUE
[19:49:06.952]      // while "1"  (timeout="200")
[19:49:06.953]      // while-condition  =>  TRUE
[19:49:06.953]      // while "1"  (timeout="200")
[19:49:06.953]      // while-condition  =>  TRUE
[19:49:06.953]      // while "1"  (timeout="200")
[19:49:06.953]      // while-condition  =>  TRUE
[19:49:06.953]      // while "1"  (timeout="200")
[19:49:06.953]      // while-condition  =>  TRUE
[19:49:06.953]      // while "1"  (timeout="200")
[19:49:06.953]      // while-condition  =>  TRUE
[19:49:06.953]      // while "1"  (timeout="200")
[19:49:06.953]      // while-condition  =>  TRUE
[19:49:06.954]      // while "1"  (timeout="200")
[19:49:06.954]      // while-condition  =>  TRUE
[19:49:06.954]      // while "1"  (timeout="200")
[19:49:06.954]      // while-condition  =>  TRUE
[19:49:06.954]      // while "1"  (timeout="200")
[19:49:06.954]      // while-condition  =>  TRUE
[19:49:06.954]      // while "1"  (timeout="200")
[19:49:06.954]      // while-condition  =>  TRUE
[19:49:06.954]      // while "1"  (timeout="200")
[19:49:06.954]      // while-condition  =>  TRUE
[19:49:06.954]      // while "1"  (timeout="200")
[19:49:06.955]      // while-condition  =>  TRUE
[19:49:06.955]      // while "1"  (timeout="200")
[19:49:06.955]      // while-condition  =>  TRUE
[19:49:06.955]      // while "1"  (timeout="200")
[19:49:06.955]      // while-condition  =>  TRUE
[19:49:06.955]      // while "1"  (timeout="200")
[19:49:06.955]      // while-condition  =>  TRUE
[19:49:06.955]      // while "1"  (timeout="200")
[19:49:06.955]      // while-condition  =>  TRUE
[19:49:06.955]      // while "1"  (timeout="200")
[19:49:06.955]      // while-condition  =>  TRUE
[19:49:06.955]      // while "1"  (timeout="200")
[19:49:06.956]      // while-condition  =>  TRUE
[19:49:06.956]      // while "1"  (timeout="200")
[19:49:06.956]      // while-condition  =>  TRUE
[19:49:06.956]      // while "1"  (timeout="200")
[19:49:06.956]      // while-condition  =>  TRUE
[19:49:06.956]      // while "1"  (timeout="200")
[19:49:06.956]      // while-condition  =>  TRUE
[19:49:06.956]      // while "1"  (timeout="200")
[19:49:06.956]      // while-condition  =>  TRUE
[19:49:06.956]      // while "1"  (timeout="200")
[19:49:06.956]      // while-condition  =>  TRUE
[19:49:06.956]      // while "1"  (timeout="200")
[19:49:06.956]      // while-condition  =>  TRUE
[19:49:06.956]      // while "1"  (timeout="200")
[19:49:06.956]      // while-condition  =>  TRUE
[19:49:06.956]      // while "1"  (timeout="200")
[19:49:06.957]      // while-condition  =>  TRUE
[19:49:06.957]      // while "1"  (timeout="200")
[19:49:06.957]      // while  =>  TIMEOUT
[19:49:06.957]      // end while "1"
[19:49:06.957]    </control>
[19:49:06.957]    <control if="canReadPins" while="" timeout="0" info="">
[19:49:06.958]      // if-block "canReadPins"
[19:49:06.958]        // =>  TRUE
[19:49:06.958]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[19:49:06.959]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[19:49:06.959]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[19:49:06.959]        // while-condition  =>  FALSE
[19:49:06.959]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[19:49:06.959]      </control>
[19:49:06.959]      // end if-block "canReadPins"
[19:49:06.959]    </control>
[19:49:06.959]    <control if="!canReadPins" while="" timeout="0" info="">
[19:49:06.959]      // if-block "!canReadPins"
[19:49:06.959]        // =>  FALSE
[19:49:06.960]      // skip if-block "!canReadPins"
[19:49:06.960]    </control>
[19:49:06.960]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[19:49:06.961]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:49:06.961]        // =>  TRUE
[19:49:06.961]      <block atomic="false" info="">
[19:49:06.961]        WriteAP(0x00, 0x190008);
[19:49:06.961]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[19:49:06.962]        WriteAP(0xF0, 0x01);
[19:49:06.963]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[19:49:06.963]      </block>
[19:49:06.963]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[19:49:06.963]    </control>
[19:49:06.964]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[19:49:06.964]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:49:06.964]        // =>  FALSE
[19:49:06.964]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[19:49:06.964]    </control>
[19:49:06.964]    <block atomic="false" info="">
[19:49:06.964]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[19:49:06.966]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[19:49:06.966]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[19:49:06.966]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[19:49:06.968]      __ap = 0; //lets make sure we reset the access point selection
[19:49:06.968]        // -> [__ap <= 0x00000000]
[19:49:06.968]    </block>
[19:49:06.968]  </sequence>
[19:49:06.968]  
[19:49:06.974]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[19:49:06.974]  
[19:49:06.975]  <debugvars>
[19:49:06.975]    // Pre-defined
[19:49:06.975]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[19:49:06.975]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[19:49:06.975]    __dp=0x00000000
[19:49:06.975]    __ap=0x00000000
[19:49:06.975]    __traceout=0x00000000      (Trace Disabled)
[19:49:06.975]    __errorcontrol=0x00000000  (Skip Errors="False")
[19:49:06.975]    __FlashAddr=0x00000000
[19:49:06.975]    __FlashLen=0x00000000
[19:49:06.976]    __FlashArg=0x00000000
[19:49:06.976]    __FlashOp=0x00000000
[19:49:06.976]    __Result=0x00000000
[19:49:06.976]  </debugvars>
[19:49:06.976]  
[19:49:06.976]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[19:49:06.976]    <block atomic="false" info="">
[19:49:06.976]      __var deviceID = 0;
[19:49:06.976]        // -> [deviceID <= 0x00000000]
[19:49:06.976]      __var version = 0;
[19:49:06.976]        // -> [version <= 0x00000000]
[19:49:06.976]      __var partNum = 0;
[19:49:06.976]        // -> [partNum <= 0x00000000]
[19:49:06.976]      __var manuf = 0;
[19:49:06.976]        // -> [manuf <= 0x00000000]
[19:49:06.976]      __var isMSPM0G1X0X_G3X0X = 0;
[19:49:06.976]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[19:49:06.977]      __var isProduction = 0;
[19:49:06.977]        // -> [isProduction <= 0x00000000]
[19:49:06.977]      __var continueId = 0;
[19:49:06.977]        // -> [continueId <= 0x00000000]
[19:49:06.977]      deviceID =   Read32(0x41C40004);
[19:49:06.979]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[19:49:06.979]        // -> [deviceID <= 0x2BB8802F]
[19:49:06.979]      version = deviceID >> 28;
[19:49:06.979]        // -> [version <= 0x00000002]
[19:49:06.979]      partNum = (deviceID & 0x0FFFF000) >> 12;
[19:49:06.979]        // -> [partNum <= 0x0000BB88]
[19:49:06.979]      manuf = (deviceID & 0x00000FFE) >> 1;
[19:49:06.979]        // -> [manuf <= 0x00000017]
[19:49:06.979]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[19:49:06.979]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[19:49:06.979]      isProduction = (version > 0);
[19:49:06.979]        // -> [isProduction <= 0x00000001]
[19:49:06.981]    </block>
[19:49:06.981]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[19:49:06.981]      // if-block "!isMSPM0G1X0X_G3X0X"
[19:49:06.981]        // =>  FALSE
[19:49:06.981]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[19:49:06.981]    </control>
[19:49:06.981]    <control if="continueId == 4" while="" timeout="0" info="">
[19:49:06.981]      // if-block "continueId == 4"
[19:49:06.981]        // =>  FALSE
[19:49:06.981]      // skip if-block "continueId == 4"
[19:49:06.981]    </control>
[19:49:06.982]    <control if="!isProduction" while="" timeout="0" info="">
[19:49:06.982]      // if-block "!isProduction"
[19:49:06.982]        // =>  FALSE
[19:49:06.982]      // skip if-block "!isProduction"
[19:49:06.982]    </control>
[19:49:06.982]  </sequence>
[19:49:06.982]  
[20:00:30.821]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:00:30.821]  
[20:00:30.830]  <debugvars>
[20:00:30.830]    // Pre-defined
[20:00:30.830]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:00:30.830]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:00:30.830]    __dp=0x00000000
[20:00:30.830]    __ap=0x00000000
[20:00:30.830]    __traceout=0x00000000      (Trace Disabled)
[20:00:30.830]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:00:30.830]    __FlashAddr=0x00000000
[20:00:30.830]    __FlashLen=0x00000000
[20:00:30.830]    __FlashArg=0x00000000
[20:00:30.831]    __FlashOp=0x00000000
[20:00:30.831]    __Result=0x00000000
[20:00:30.831]  </debugvars>
[20:00:30.831]  
[20:00:30.831]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:00:30.831]    <block atomic="false" info="">
[20:00:30.831]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:00:30.831]        // -> [isSWJ <= 0x00000001]
[20:00:30.831]      __var hasDormant = __protocol & 0x00020000;
[20:00:30.831]        // -> [hasDormant <= 0x00000000]
[20:00:30.831]      __var protType   = __protocol & 0x0000FFFF;
[20:00:30.831]        // -> [protType <= 0x00000002]
[20:00:30.832]    </block>
[20:00:30.832]    <control if="protType == 1" while="" timeout="0" info="">
[20:00:30.832]      // if-block "protType == 1"
[20:00:30.832]        // =>  FALSE
[20:00:30.832]      // skip if-block "protType == 1"
[20:00:30.832]    </control>
[20:00:30.832]    <control if="protType == 2" while="" timeout="0" info="">
[20:00:30.832]      // if-block "protType == 2"
[20:00:30.832]        // =>  TRUE
[20:00:30.832]      <control if="isSWJ" while="" timeout="0" info="">
[20:00:30.832]        // if-block "isSWJ"
[20:00:30.832]          // =>  TRUE
[20:00:30.832]        <control if="hasDormant" while="" timeout="0" info="">
[20:00:30.832]          // if-block "hasDormant"
[20:00:30.832]            // =>  FALSE
[20:00:30.832]          // skip if-block "hasDormant"
[20:00:30.832]        </control>
[20:00:30.833]        <control if="!hasDormant" while="" timeout="0" info="">
[20:00:30.833]          // if-block "!hasDormant"
[20:00:30.833]            // =>  TRUE
[20:00:30.833]          <block atomic="false" info="">
[20:00:30.833]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:00:30.834]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:00:30.834]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:00:30.835]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:00:30.835]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:00:30.835]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:00:30.835]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:00:30.835]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:00:30.835]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:00:30.836]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:00:30.836]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:00:30.836]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:00:30.837]          </block>
[20:00:30.838]          // end if-block "!hasDormant"
[20:00:30.838]        </control>
[20:00:30.838]        // end if-block "isSWJ"
[20:00:30.838]      </control>
[20:00:30.838]      <control if="!isSWJ" while="" timeout="0" info="">
[20:00:30.838]        // if-block "!isSWJ"
[20:00:30.838]          // =>  FALSE
[20:00:30.838]        // skip if-block "!isSWJ"
[20:00:30.838]      </control>
[20:00:30.838]      <block atomic="false" info="">
[20:00:30.838]        ReadDP(0x0);
[20:00:30.839]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:00:30.839]      </block>
[20:00:30.839]      // end if-block "protType == 2"
[20:00:30.839]    </control>
[20:00:30.839]  </sequence>
[20:00:30.839]  
[20:00:30.840]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:00:30.840]  
[20:00:30.840]  <debugvars>
[20:00:30.840]    // Pre-defined
[20:00:30.840]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:00:30.840]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:00:30.840]    __dp=0x00000000
[20:00:30.840]    __ap=0x00000000
[20:00:30.840]    __traceout=0x00000000      (Trace Disabled)
[20:00:30.840]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:00:30.841]    __FlashAddr=0x00000000
[20:00:30.841]    __FlashLen=0x00000000
[20:00:30.841]    __FlashArg=0x00000000
[20:00:30.841]    __FlashOp=0x00000000
[20:00:30.841]    __Result=0x00000000
[20:00:30.841]  </debugvars>
[20:00:30.841]  
[20:00:30.841]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:00:30.842]    <block atomic="false" info="">
[20:00:30.842]      __var SW_DP_ABORT       = 0x0;
[20:00:30.842]        // -> [SW_DP_ABORT <= 0x00000000]
[20:00:30.842]      __var DP_CTRL_STAT      = 0x4;
[20:00:30.842]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:00:30.842]      __var DP_SELECT         = 0x8;
[20:00:30.842]        // -> [DP_SELECT <= 0x00000008]
[20:00:30.842]      __var powered_down      = 0;
[20:00:30.842]        // -> [powered_down <= 0x00000000]
[20:00:30.842]      WriteDP(DP_SELECT, 0x00000000);
[20:00:30.843]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:00:30.843]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:00:30.843]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:00:30.844]        // -> [powered_down <= 0x00000001]
[20:00:30.844]    </block>
[20:00:30.844]    <control if="powered_down" while="" timeout="0" info="">
[20:00:30.844]      // if-block "powered_down"
[20:00:30.844]        // =>  TRUE
[20:00:30.844]      <block atomic="false" info="">
[20:00:30.844]        Message(0, "Debug/System power-up request sent");
[20:00:30.846]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:00:30.848]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:00:30.848]      </block>
[20:00:30.848]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:00:30.848]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:00:30.849]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:00:30.849]        // while-condition  =>  FALSE
[20:00:30.849]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:00:30.849]      </control>
[20:00:30.849]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:00:30.849]        // if-block "(__protocol & 0xFFFF) == 1"
[20:00:30.849]          // =>  FALSE
[20:00:30.849]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:00:30.849]      </control>
[20:00:30.849]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:00:30.850]        // if-block "(__protocol & 0xFFFF) == 2"
[20:00:30.850]          // =>  TRUE
[20:00:30.850]        <block atomic="false" info="">
[20:00:30.850]          Message(0, "executing SWD power up");
[20:00:30.852]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:00:30.853]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:00:30.853]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:00:30.853]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:00:30.853]        </block>
[20:00:30.853]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:00:30.855]      </control>
[20:00:30.855]      // end if-block "powered_down"
[20:00:30.855]    </control>
[20:00:30.855]    <block atomic="false" info="">
[20:00:30.855]      __var DEBUG_PORT_VAL    = 0;
[20:00:30.855]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:00:30.855]      __var ACCESS_POINT_VAL  = 0;
[20:00:30.855]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:00:30.855]      __ap = 1; 
[20:00:30.855]        // -> [__ap <= 0x00000001]
[20:00:30.855]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:00:30.856]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:00:30.856]      __ap = 4;
[20:00:30.856]        // -> [__ap <= 0x00000004]
[20:00:30.857]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:00:30.858]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:00:30.858]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:00:30.858]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:00:30.860]    </block>
[20:00:30.861]    <block atomic="false" info="">
[20:00:30.861]      __var nReset = 0x80;
[20:00:30.861]        // -> [nReset <= 0x00000080]
[20:00:30.861]      __var canReadPins = 0;
[20:00:30.861]        // -> [canReadPins <= 0x00000000]
[20:00:30.861]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:00:30.862]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:00:30.862]        // -> [canReadPins <= 0x00000001]
[20:00:30.862]    </block>
[20:00:30.862]    <control if="" while="1" timeout="200" info="">
[20:00:30.862]      // while "1"  (timeout="200")
[20:00:30.862]      // while-condition  =>  TRUE
[20:00:30.862]      // while "1"  (timeout="200")
[20:00:30.862]      // while-condition  =>  TRUE
[20:00:30.862]      // while "1"  (timeout="200")
[20:00:30.862]      // while-condition  =>  TRUE
[20:00:30.862]      // while "1"  (timeout="200")
[20:00:30.863]      // while-condition  =>  TRUE
[20:00:30.863]      // while "1"  (timeout="200")
[20:00:30.863]      // while  =>  TIMEOUT
[20:00:30.863]      // end while "1"
[20:00:30.863]    </control>
[20:00:30.863]    <control if="canReadPins" while="" timeout="0" info="">
[20:00:30.863]      // if-block "canReadPins"
[20:00:30.863]        // =>  TRUE
[20:00:30.863]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:00:30.863]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:00:30.864]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:00:30.864]        // while-condition  =>  FALSE
[20:00:30.864]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:00:30.864]      </control>
[20:00:30.864]      // end if-block "canReadPins"
[20:00:30.864]    </control>
[20:00:30.864]    <control if="!canReadPins" while="" timeout="0" info="">
[20:00:30.864]      // if-block "!canReadPins"
[20:00:30.864]        // =>  FALSE
[20:00:30.866]      // skip if-block "!canReadPins"
[20:00:30.866]    </control>
[20:00:30.866]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:00:30.866]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:00:30.866]        // =>  TRUE
[20:00:30.866]      <block atomic="false" info="">
[20:00:30.866]        WriteAP(0x00, 0x190008);
[20:00:30.866]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:00:30.867]        WriteAP(0xF0, 0x01);
[20:00:30.868]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:00:30.868]      </block>
[20:00:30.868]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:00:30.868]    </control>
[20:00:30.868]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:00:30.868]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:00:30.868]        // =>  FALSE
[20:00:30.868]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:00:30.868]    </control>
[20:00:30.868]    <block atomic="false" info="">
[20:00:30.868]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:00:30.870]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:00:30.870]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:00:30.870]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:00:30.872]      __ap = 0; //lets make sure we reset the access point selection
[20:00:30.872]        // -> [__ap <= 0x00000000]
[20:00:30.872]    </block>
[20:00:30.872]  </sequence>
[20:00:30.872]  
[20:00:30.879]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:00:30.879]  
[20:00:30.879]  <debugvars>
[20:00:30.879]    // Pre-defined
[20:00:30.880]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:00:30.880]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:00:30.880]    __dp=0x00000000
[20:00:30.880]    __ap=0x00000000
[20:00:30.880]    __traceout=0x00000000      (Trace Disabled)
[20:00:30.880]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:00:30.880]    __FlashAddr=0x00000000
[20:00:30.880]    __FlashLen=0x00000000
[20:00:30.880]    __FlashArg=0x00000000
[20:00:30.881]    __FlashOp=0x00000000
[20:00:30.881]    __Result=0x00000000
[20:00:30.881]  </debugvars>
[20:00:30.881]  
[20:00:30.881]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:00:30.881]    <block atomic="false" info="">
[20:00:30.881]      __var deviceID = 0;
[20:00:30.881]        // -> [deviceID <= 0x00000000]
[20:00:30.882]      __var version = 0;
[20:00:30.882]        // -> [version <= 0x00000000]
[20:00:30.882]      __var partNum = 0;
[20:00:30.882]        // -> [partNum <= 0x00000000]
[20:00:30.882]      __var manuf = 0;
[20:00:30.882]        // -> [manuf <= 0x00000000]
[20:00:30.882]      __var isMSPM0G1X0X_G3X0X = 0;
[20:00:30.882]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:00:30.882]      __var isProduction = 0;
[20:00:30.882]        // -> [isProduction <= 0x00000000]
[20:00:30.882]      __var continueId = 0;
[20:00:30.882]        // -> [continueId <= 0x00000000]
[20:00:30.882]      deviceID =   Read32(0x41C40004);
[20:00:30.883]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:00:30.884]        // -> [deviceID <= 0x2BB8802F]
[20:00:30.884]      version = deviceID >> 28;
[20:00:30.884]        // -> [version <= 0x00000002]
[20:00:30.884]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:00:30.884]        // -> [partNum <= 0x0000BB88]
[20:00:30.884]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:00:30.884]        // -> [manuf <= 0x00000017]
[20:00:30.884]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:00:30.884]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:00:30.884]      isProduction = (version > 0);
[20:00:30.884]        // -> [isProduction <= 0x00000001]
[20:00:30.885]    </block>
[20:00:30.885]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:00:30.885]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:00:30.885]        // =>  FALSE
[20:00:30.885]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:00:30.885]    </control>
[20:00:30.885]    <control if="continueId == 4" while="" timeout="0" info="">
[20:00:30.885]      // if-block "continueId == 4"
[20:00:30.885]        // =>  FALSE
[20:00:30.885]      // skip if-block "continueId == 4"
[20:00:30.885]    </control>
[20:00:30.886]    <control if="!isProduction" while="" timeout="0" info="">
[20:00:30.886]      // if-block "!isProduction"
[20:00:30.886]        // =>  FALSE
[20:00:30.886]      // skip if-block "!isProduction"
[20:00:30.886]    </control>
[20:00:30.886]  </sequence>
[20:00:30.887]  
[20:01:25.047]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:01:25.047]  
[20:01:25.056]  <debugvars>
[20:01:25.056]    // Pre-defined
[20:01:25.056]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:01:25.056]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:01:25.057]    __dp=0x00000000
[20:01:25.057]    __ap=0x00000000
[20:01:25.057]    __traceout=0x00000000      (Trace Disabled)
[20:01:25.057]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:01:25.057]    __FlashAddr=0x00000000
[20:01:25.057]    __FlashLen=0x00000000
[20:01:25.057]    __FlashArg=0x00000000
[20:01:25.057]    __FlashOp=0x00000000
[20:01:25.058]    __Result=0x00000000
[20:01:25.058]  </debugvars>
[20:01:25.058]  
[20:01:25.058]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:01:25.058]    <block atomic="false" info="">
[20:01:25.058]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:01:25.058]        // -> [isSWJ <= 0x00000001]
[20:01:25.058]      __var hasDormant = __protocol & 0x00020000;
[20:01:25.059]        // -> [hasDormant <= 0x00000000]
[20:01:25.059]      __var protType   = __protocol & 0x0000FFFF;
[20:01:25.059]        // -> [protType <= 0x00000002]
[20:01:25.059]    </block>
[20:01:25.059]    <control if="protType == 1" while="" timeout="0" info="">
[20:01:25.059]      // if-block "protType == 1"
[20:01:25.059]        // =>  FALSE
[20:01:25.060]      // skip if-block "protType == 1"
[20:01:25.060]    </control>
[20:01:25.060]    <control if="protType == 2" while="" timeout="0" info="">
[20:01:25.060]      // if-block "protType == 2"
[20:01:25.060]        // =>  TRUE
[20:01:25.060]      <control if="isSWJ" while="" timeout="0" info="">
[20:01:25.060]        // if-block "isSWJ"
[20:01:25.060]          // =>  TRUE
[20:01:25.061]        <control if="hasDormant" while="" timeout="0" info="">
[20:01:25.061]          // if-block "hasDormant"
[20:01:25.061]            // =>  FALSE
[20:01:25.061]          // skip if-block "hasDormant"
[20:01:25.061]        </control>
[20:01:25.061]        <control if="!hasDormant" while="" timeout="0" info="">
[20:01:25.061]          // if-block "!hasDormant"
[20:01:25.061]            // =>  TRUE
[20:01:25.061]          <block atomic="false" info="">
[20:01:25.062]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:01:25.062]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:01:25.062]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:01:25.063]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:01:25.063]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:01:25.064]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:01:25.064]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:01:25.064]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:01:25.064]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:01:25.065]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:01:25.066]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:01:25.066]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:01:25.066]          </block>
[20:01:25.066]          // end if-block "!hasDormant"
[20:01:25.066]        </control>
[20:01:25.067]        // end if-block "isSWJ"
[20:01:25.067]      </control>
[20:01:25.067]      <control if="!isSWJ" while="" timeout="0" info="">
[20:01:25.067]        // if-block "!isSWJ"
[20:01:25.067]          // =>  FALSE
[20:01:25.067]        // skip if-block "!isSWJ"
[20:01:25.068]      </control>
[20:01:25.068]      <block atomic="false" info="">
[20:01:25.068]        ReadDP(0x0);
[20:01:25.068]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:01:25.068]      </block>
[20:01:25.069]      // end if-block "protType == 2"
[20:01:25.069]    </control>
[20:01:25.069]  </sequence>
[20:01:25.069]  
[20:01:25.070]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:01:25.070]  
[20:01:25.070]  <debugvars>
[20:01:25.070]    // Pre-defined
[20:01:25.070]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:01:25.070]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:01:25.071]    __dp=0x00000000
[20:01:25.071]    __ap=0x00000000
[20:01:25.071]    __traceout=0x00000000      (Trace Disabled)
[20:01:25.071]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:01:25.071]    __FlashAddr=0x00000000
[20:01:25.071]    __FlashLen=0x00000000
[20:01:25.071]    __FlashArg=0x00000000
[20:01:25.071]    __FlashOp=0x00000000
[20:01:25.072]    __Result=0x00000000
[20:01:25.072]  </debugvars>
[20:01:25.072]  
[20:01:25.072]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:01:25.073]    <block atomic="false" info="">
[20:01:25.073]      __var SW_DP_ABORT       = 0x0;
[20:01:25.073]        // -> [SW_DP_ABORT <= 0x00000000]
[20:01:25.073]      __var DP_CTRL_STAT      = 0x4;
[20:01:25.073]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:01:25.074]      __var DP_SELECT         = 0x8;
[20:01:25.074]        // -> [DP_SELECT <= 0x00000008]
[20:01:25.074]      __var powered_down      = 0;
[20:01:25.074]        // -> [powered_down <= 0x00000000]
[20:01:25.074]      WriteDP(DP_SELECT, 0x00000000);
[20:01:25.075]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:01:25.075]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:01:25.075]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:01:25.075]        // -> [powered_down <= 0x00000001]
[20:01:25.075]    </block>
[20:01:25.076]    <control if="powered_down" while="" timeout="0" info="">
[20:01:25.076]      // if-block "powered_down"
[20:01:25.076]        // =>  TRUE
[20:01:25.076]      <block atomic="false" info="">
[20:01:25.076]        Message(0, "Debug/System power-up request sent");
[20:01:25.078]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:01:25.079]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:01:25.079]      </block>
[20:01:25.079]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:01:25.079]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:01:25.080]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:01:25.080]        // while-condition  =>  FALSE
[20:01:25.080]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:01:25.080]      </control>
[20:01:25.080]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:01:25.080]        // if-block "(__protocol & 0xFFFF) == 1"
[20:01:25.080]          // =>  FALSE
[20:01:25.080]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:01:25.081]      </control>
[20:01:25.081]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:01:25.081]        // if-block "(__protocol & 0xFFFF) == 2"
[20:01:25.081]          // =>  TRUE
[20:01:25.081]        <block atomic="false" info="">
[20:01:25.081]          Message(0, "executing SWD power up");
[20:01:25.083]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:01:25.084]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:01:25.084]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:01:25.084]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:01:25.084]        </block>
[20:01:25.084]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:01:25.084]      </control>
[20:01:25.085]      // end if-block "powered_down"
[20:01:25.085]    </control>
[20:01:25.085]    <block atomic="false" info="">
[20:01:25.085]      __var DEBUG_PORT_VAL    = 0;
[20:01:25.085]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:01:25.085]      __var ACCESS_POINT_VAL  = 0;
[20:01:25.085]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:01:25.085]      __ap = 1; 
[20:01:25.085]        // -> [__ap <= 0x00000001]
[20:01:25.085]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:01:25.086]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:01:25.087]      __ap = 4;
[20:01:25.088]        // -> [__ap <= 0x00000004]
[20:01:25.088]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:01:25.089]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:01:25.089]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:01:25.089]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:01:25.091]    </block>
[20:01:25.091]    <block atomic="false" info="">
[20:01:25.091]      __var nReset = 0x80;
[20:01:25.091]        // -> [nReset <= 0x00000080]
[20:01:25.091]      __var canReadPins = 0;
[20:01:25.092]        // -> [canReadPins <= 0x00000000]
[20:01:25.092]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:01:25.092]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:01:25.092]        // -> [canReadPins <= 0x00000001]
[20:01:25.093]    </block>
[20:01:25.093]    <control if="" while="1" timeout="200" info="">
[20:01:25.093]      // while "1"  (timeout="200")
[20:01:25.093]      // while-condition  =>  TRUE
[20:01:25.093]      // while "1"  (timeout="200")
[20:01:25.093]      // while-condition  =>  TRUE
[20:01:25.093]      // while "1"  (timeout="200")
[20:01:25.093]      // while-condition  =>  TRUE
[20:01:25.093]      // while "1"  (timeout="200")
[20:01:25.093]      // while-condition  =>  TRUE
[20:01:25.093]      // while "1"  (timeout="200")
[20:01:25.093]      // while-condition  =>  TRUE
[20:01:25.093]      // while "1"  (timeout="200")
[20:01:25.093]      // while-condition  =>  TRUE
[20:01:25.093]      // while "1"  (timeout="200")
[20:01:25.093]      // while-condition  =>  TRUE
[20:01:25.094]      // while "1"  (timeout="200")
[20:01:25.094]      // while-condition  =>  TRUE
[20:01:25.094]      // while "1"  (timeout="200")
[20:01:25.094]      // while-condition  =>  TRUE
[20:01:25.094]      // while "1"  (timeout="200")
[20:01:25.094]      // while-condition  =>  TRUE
[20:01:25.094]      // while "1"  (timeout="200")
[20:01:25.094]      // while-condition  =>  TRUE
[20:01:25.094]      // while "1"  (timeout="200")
[20:01:25.094]      // while-condition  =>  TRUE
[20:01:25.094]      // while "1"  (timeout="200")
[20:01:25.094]      // while-condition  =>  TRUE
[20:01:25.095]      // while "1"  (timeout="200")
[20:01:25.095]      // while-condition  =>  TRUE
[20:01:25.095]      // while "1"  (timeout="200")
[20:01:25.095]      // while-condition  =>  TRUE
[20:01:25.095]      // while "1"  (timeout="200")
[20:01:25.095]      // while-condition  =>  TRUE
[20:01:25.095]      // while "1"  (timeout="200")
[20:01:25.095]      // while-condition  =>  TRUE
[20:01:25.095]      // while "1"  (timeout="200")
[20:01:25.095]      // while-condition  =>  TRUE
[20:01:25.095]      // while "1"  (timeout="200")
[20:01:25.095]      // while-condition  =>  TRUE
[20:01:25.096]      // while "1"  (timeout="200")
[20:01:25.096]      // while-condition  =>  TRUE
[20:01:25.096]      // while "1"  (timeout="200")
[20:01:25.096]      // while-condition  =>  TRUE
[20:01:25.096]      // while "1"  (timeout="200")
[20:01:25.096]      // while-condition  =>  TRUE
[20:01:25.096]      // while "1"  (timeout="200")
[20:01:25.097]      // while-condition  =>  TRUE
[20:01:25.097]      // while "1"  (timeout="200")
[20:01:25.097]      // while-condition  =>  TRUE
[20:01:25.097]      // while "1"  (timeout="200")
[20:01:25.097]      // while-condition  =>  TRUE
[20:01:25.097]      // while "1"  (timeout="200")
[20:01:25.097]      // while-condition  =>  TRUE
[20:01:25.097]      // while "1"  (timeout="200")
[20:01:25.097]      // while-condition  =>  TRUE
[20:01:25.097]      // while "1"  (timeout="200")
[20:01:25.097]      // while-condition  =>  TRUE
[20:01:25.097]      // while "1"  (timeout="200")
[20:01:25.098]      // while-condition  =>  TRUE
[20:01:25.098]      // while "1"  (timeout="200")
[20:01:25.099]      // while  =>  TIMEOUT
[20:01:25.099]      // end while "1"
[20:01:25.099]    </control>
[20:01:25.099]    <control if="canReadPins" while="" timeout="0" info="">
[20:01:25.099]      // if-block "canReadPins"
[20:01:25.099]        // =>  TRUE
[20:01:25.099]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:01:25.099]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:01:25.100]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:01:25.100]        // while-condition  =>  FALSE
[20:01:25.100]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:01:25.100]      </control>
[20:01:25.100]      // end if-block "canReadPins"
[20:01:25.100]    </control>
[20:01:25.100]    <control if="!canReadPins" while="" timeout="0" info="">
[20:01:25.101]      // if-block "!canReadPins"
[20:01:25.101]        // =>  FALSE
[20:01:25.101]      // skip if-block "!canReadPins"
[20:01:25.101]    </control>
[20:01:25.101]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:01:25.101]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:01:25.101]        // =>  TRUE
[20:01:25.101]      <block atomic="false" info="">
[20:01:25.101]        WriteAP(0x00, 0x190008);
[20:01:25.102]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:01:25.102]        WriteAP(0xF0, 0x01);
[20:01:25.103]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:01:25.103]      </block>
[20:01:25.103]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:01:25.103]    </control>
[20:01:25.103]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:01:25.103]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:01:25.103]        // =>  FALSE
[20:01:25.103]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:01:25.103]    </control>
[20:01:25.104]    <block atomic="false" info="">
[20:01:25.104]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:01:25.105]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:01:25.105]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:01:25.105]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:01:25.107]      __ap = 0; //lets make sure we reset the access point selection
[20:01:25.107]        // -> [__ap <= 0x00000000]
[20:01:25.107]    </block>
[20:01:25.107]  </sequence>
[20:01:25.107]  
[20:01:25.113]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:01:25.113]  
[20:01:25.114]  <debugvars>
[20:01:25.114]    // Pre-defined
[20:01:25.114]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:01:25.114]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:01:25.114]    __dp=0x00000000
[20:01:25.114]    __ap=0x00000000
[20:01:25.114]    __traceout=0x00000000      (Trace Disabled)
[20:01:25.114]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:01:25.115]    __FlashAddr=0x00000000
[20:01:25.115]    __FlashLen=0x00000000
[20:01:25.115]    __FlashArg=0x00000000
[20:01:25.115]    __FlashOp=0x00000000
[20:01:25.115]    __Result=0x00000000
[20:01:25.115]  </debugvars>
[20:01:25.115]  
[20:01:25.115]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:01:25.115]    <block atomic="false" info="">
[20:01:25.116]      __var deviceID = 0;
[20:01:25.116]        // -> [deviceID <= 0x00000000]
[20:01:25.116]      __var version = 0;
[20:01:25.116]        // -> [version <= 0x00000000]
[20:01:25.116]      __var partNum = 0;
[20:01:25.117]        // -> [partNum <= 0x00000000]
[20:01:25.117]      __var manuf = 0;
[20:01:25.117]        // -> [manuf <= 0x00000000]
[20:01:25.117]      __var isMSPM0G1X0X_G3X0X = 0;
[20:01:25.117]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:01:25.117]      __var isProduction = 0;
[20:01:25.117]        // -> [isProduction <= 0x00000000]
[20:01:25.117]      __var continueId = 0;
[20:01:25.117]        // -> [continueId <= 0x00000000]
[20:01:25.117]      deviceID =   Read32(0x41C40004);
[20:01:25.119]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:01:25.119]        // -> [deviceID <= 0x2BB8802F]
[20:01:25.119]      version = deviceID >> 28;
[20:01:25.119]        // -> [version <= 0x00000002]
[20:01:25.119]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:01:25.119]        // -> [partNum <= 0x0000BB88]
[20:01:25.119]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:01:25.119]        // -> [manuf <= 0x00000017]
[20:01:25.121]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:01:25.121]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:01:25.121]      isProduction = (version > 0);
[20:01:25.121]        // -> [isProduction <= 0x00000001]
[20:01:25.121]    </block>
[20:01:25.121]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:01:25.121]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:01:25.121]        // =>  FALSE
[20:01:25.121]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:01:25.121]    </control>
[20:01:25.121]    <control if="continueId == 4" while="" timeout="0" info="">
[20:01:25.121]      // if-block "continueId == 4"
[20:01:25.122]        // =>  FALSE
[20:01:25.122]      // skip if-block "continueId == 4"
[20:01:25.122]    </control>
[20:01:25.122]    <control if="!isProduction" while="" timeout="0" info="">
[20:01:25.122]      // if-block "!isProduction"
[20:01:25.122]        // =>  FALSE
[20:01:25.122]      // skip if-block "!isProduction"
[20:01:25.122]    </control>
[20:01:25.122]  </sequence>
[20:01:25.122]  
[20:01:47.353]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:01:47.353]  
[20:01:47.363]  <debugvars>
[20:01:47.363]    // Pre-defined
[20:01:47.363]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:01:47.363]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:01:47.363]    __dp=0x00000000
[20:01:47.364]    __ap=0x00000000
[20:01:47.364]    __traceout=0x00000000      (Trace Disabled)
[20:01:47.364]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:01:47.364]    __FlashAddr=0x00000000
[20:01:47.364]    __FlashLen=0x00000000
[20:01:47.364]    __FlashArg=0x00000000
[20:01:47.364]    __FlashOp=0x00000000
[20:01:47.364]    __Result=0x00000000
[20:01:47.365]  </debugvars>
[20:01:47.365]  
[20:01:47.365]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:01:47.365]    <block atomic="false" info="">
[20:01:47.365]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:01:47.365]        // -> [isSWJ <= 0x00000001]
[20:01:47.365]      __var hasDormant = __protocol & 0x00020000;
[20:01:47.365]        // -> [hasDormant <= 0x00000000]
[20:01:47.366]      __var protType   = __protocol & 0x0000FFFF;
[20:01:47.366]        // -> [protType <= 0x00000002]
[20:01:47.366]    </block>
[20:01:47.366]    <control if="protType == 1" while="" timeout="0" info="">
[20:01:47.366]      // if-block "protType == 1"
[20:01:47.366]        // =>  FALSE
[20:01:47.366]      // skip if-block "protType == 1"
[20:01:47.366]    </control>
[20:01:47.366]    <control if="protType == 2" while="" timeout="0" info="">
[20:01:47.366]      // if-block "protType == 2"
[20:01:47.367]        // =>  TRUE
[20:01:47.367]      <control if="isSWJ" while="" timeout="0" info="">
[20:01:47.367]        // if-block "isSWJ"
[20:01:47.367]          // =>  TRUE
[20:01:47.367]        <control if="hasDormant" while="" timeout="0" info="">
[20:01:47.367]          // if-block "hasDormant"
[20:01:47.367]            // =>  FALSE
[20:01:47.367]          // skip if-block "hasDormant"
[20:01:47.367]        </control>
[20:01:47.367]        <control if="!hasDormant" while="" timeout="0" info="">
[20:01:47.368]          // if-block "!hasDormant"
[20:01:47.368]            // =>  TRUE
[20:01:47.368]          <block atomic="false" info="">
[20:01:47.368]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:01:47.368]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:01:47.368]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:01:47.369]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:01:47.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:01:47.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:01:47.370]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:01:47.370]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:01:47.370]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:01:47.371]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:01:47.371]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:01:47.371]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:01:47.371]          </block>
[20:01:47.371]          // end if-block "!hasDormant"
[20:01:47.371]        </control>
[20:01:47.371]        // end if-block "isSWJ"
[20:01:47.372]      </control>
[20:01:47.372]      <control if="!isSWJ" while="" timeout="0" info="">
[20:01:47.372]        // if-block "!isSWJ"
[20:01:47.372]          // =>  FALSE
[20:01:47.372]        // skip if-block "!isSWJ"
[20:01:47.373]      </control>
[20:01:47.373]      <block atomic="false" info="">
[20:01:47.373]        ReadDP(0x0);
[20:01:47.373]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:01:47.373]      </block>
[20:01:47.374]      // end if-block "protType == 2"
[20:01:47.374]    </control>
[20:01:47.374]  </sequence>
[20:01:47.374]  
[20:01:47.374]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:01:47.374]  
[20:01:47.375]  <debugvars>
[20:01:47.375]    // Pre-defined
[20:01:47.375]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:01:47.375]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:01:47.375]    __dp=0x00000000
[20:01:47.375]    __ap=0x00000000
[20:01:47.375]    __traceout=0x00000000      (Trace Disabled)
[20:01:47.375]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:01:47.375]    __FlashAddr=0x00000000
[20:01:47.375]    __FlashLen=0x00000000
[20:01:47.375]    __FlashArg=0x00000000
[20:01:47.375]    __FlashOp=0x00000000
[20:01:47.376]    __Result=0x00000000
[20:01:47.376]  </debugvars>
[20:01:47.376]  
[20:01:47.376]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:01:47.376]    <block atomic="false" info="">
[20:01:47.376]      __var SW_DP_ABORT       = 0x0;
[20:01:47.376]        // -> [SW_DP_ABORT <= 0x00000000]
[20:01:47.376]      __var DP_CTRL_STAT      = 0x4;
[20:01:47.376]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:01:47.376]      __var DP_SELECT         = 0x8;
[20:01:47.376]        // -> [DP_SELECT <= 0x00000008]
[20:01:47.377]      __var powered_down      = 0;
[20:01:47.377]        // -> [powered_down <= 0x00000000]
[20:01:47.377]      WriteDP(DP_SELECT, 0x00000000);
[20:01:47.377]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:01:47.378]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:01:47.378]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:01:47.378]        // -> [powered_down <= 0x00000001]
[20:01:47.378]    </block>
[20:01:47.378]    <control if="powered_down" while="" timeout="0" info="">
[20:01:47.378]      // if-block "powered_down"
[20:01:47.378]        // =>  TRUE
[20:01:47.379]      <block atomic="false" info="">
[20:01:47.379]        Message(0, "Debug/System power-up request sent");
[20:01:47.382]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:01:47.383]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:01:47.383]      </block>
[20:01:47.383]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:01:47.383]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:01:47.383]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:01:47.383]        // while-condition  =>  FALSE
[20:01:47.384]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:01:47.384]      </control>
[20:01:47.384]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:01:47.384]        // if-block "(__protocol & 0xFFFF) == 1"
[20:01:47.384]          // =>  FALSE
[20:01:47.384]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:01:47.384]      </control>
[20:01:47.384]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:01:47.384]        // if-block "(__protocol & 0xFFFF) == 2"
[20:01:47.384]          // =>  TRUE
[20:01:47.385]        <block atomic="false" info="">
[20:01:47.385]          Message(0, "executing SWD power up");
[20:01:47.386]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:01:47.387]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:01:47.387]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:01:47.388]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:01:47.388]        </block>
[20:01:47.388]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:01:47.388]      </control>
[20:01:47.389]      // end if-block "powered_down"
[20:01:47.389]    </control>
[20:01:47.389]    <block atomic="false" info="">
[20:01:47.389]      __var DEBUG_PORT_VAL    = 0;
[20:01:47.389]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:01:47.389]      __var ACCESS_POINT_VAL  = 0;
[20:01:47.389]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:01:47.389]      __ap = 1; 
[20:01:47.389]        // -> [__ap <= 0x00000001]
[20:01:47.389]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:01:47.390]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:01:47.391]      __ap = 4;
[20:01:47.391]        // -> [__ap <= 0x00000004]
[20:01:47.391]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:01:47.392]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:01:47.392]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:01:47.392]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:01:47.394]    </block>
[20:01:47.394]    <block atomic="false" info="">
[20:01:47.394]      __var nReset = 0x80;
[20:01:47.394]        // -> [nReset <= 0x00000080]
[20:01:47.394]      __var canReadPins = 0;
[20:01:47.395]        // -> [canReadPins <= 0x00000000]
[20:01:47.395]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:01:47.395]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:01:47.395]        // -> [canReadPins <= 0x00000001]
[20:01:47.395]    </block>
[20:01:47.395]    <control if="" while="1" timeout="200" info="">
[20:01:47.395]      // while "1"  (timeout="200")
[20:01:47.395]      // while-condition  =>  TRUE
[20:01:47.396]      // while "1"  (timeout="200")
[20:01:47.396]      // while-condition  =>  TRUE
[20:01:47.396]      // while "1"  (timeout="200")
[20:01:47.396]      // while-condition  =>  TRUE
[20:01:47.396]      // while "1"  (timeout="200")
[20:01:47.396]      // while-condition  =>  TRUE
[20:01:47.396]      // while "1"  (timeout="200")
[20:01:47.396]      // while-condition  =>  TRUE
[20:01:47.396]      // while "1"  (timeout="200")
[20:01:47.396]      // while-condition  =>  TRUE
[20:01:47.396]      // while "1"  (timeout="200")
[20:01:47.397]      // while-condition  =>  TRUE
[20:01:47.397]      // while "1"  (timeout="200")
[20:01:47.397]      // while-condition  =>  TRUE
[20:01:47.397]      // while "1"  (timeout="200")
[20:01:47.397]      // while-condition  =>  TRUE
[20:01:47.397]      // while "1"  (timeout="200")
[20:01:47.397]      // while-condition  =>  TRUE
[20:01:47.397]      // while "1"  (timeout="200")
[20:01:47.397]      // while-condition  =>  TRUE
[20:01:47.398]      // while "1"  (timeout="200")
[20:01:47.398]      // while-condition  =>  TRUE
[20:01:47.398]      // while "1"  (timeout="200")
[20:01:47.398]      // while-condition  =>  TRUE
[20:01:47.398]      // while "1"  (timeout="200")
[20:01:47.398]      // while-condition  =>  TRUE
[20:01:47.398]      // while "1"  (timeout="200")
[20:01:47.398]      // while-condition  =>  TRUE
[20:01:47.398]      // while "1"  (timeout="200")
[20:01:47.398]      // while-condition  =>  TRUE
[20:01:47.398]      // while "1"  (timeout="200")
[20:01:47.399]      // while-condition  =>  TRUE
[20:01:47.399]      // while "1"  (timeout="200")
[20:01:47.399]      // while-condition  =>  TRUE
[20:01:47.399]      // while "1"  (timeout="200")
[20:01:47.399]      // while-condition  =>  TRUE
[20:01:47.399]      // while "1"  (timeout="200")
[20:01:47.399]      // while-condition  =>  TRUE
[20:01:47.399]      // while "1"  (timeout="200")
[20:01:47.399]      // while-condition  =>  TRUE
[20:01:47.399]      // while "1"  (timeout="200")
[20:01:47.399]      // while-condition  =>  TRUE
[20:01:47.400]      // while "1"  (timeout="200")
[20:01:47.400]      // while-condition  =>  TRUE
[20:01:47.400]      // while "1"  (timeout="200")
[20:01:47.400]      // while-condition  =>  TRUE
[20:01:47.400]      // while "1"  (timeout="200")
[20:01:47.400]      // while-condition  =>  TRUE
[20:01:47.400]      // while "1"  (timeout="200")
[20:01:47.400]      // while-condition  =>  TRUE
[20:01:47.400]      // while "1"  (timeout="200")
[20:01:47.400]      // while-condition  =>  TRUE
[20:01:47.400]      // while "1"  (timeout="200")
[20:01:47.401]      // while-condition  =>  TRUE
[20:01:47.401]      // while "1"  (timeout="200")
[20:01:47.401]      // while-condition  =>  TRUE
[20:01:47.401]      // while "1"  (timeout="200")
[20:01:47.401]      // while-condition  =>  TRUE
[20:01:47.401]      // while "1"  (timeout="200")
[20:01:47.401]      // while-condition  =>  TRUE
[20:01:47.401]      // while "1"  (timeout="200")
[20:01:47.401]      // while-condition  =>  TRUE
[20:01:47.402]      // while "1"  (timeout="200")
[20:01:47.402]      // while-condition  =>  TRUE
[20:01:47.402]      // while "1"  (timeout="200")
[20:01:47.402]      // while-condition  =>  TRUE
[20:01:47.402]      // while "1"  (timeout="200")
[20:01:47.402]      // while-condition  =>  TRUE
[20:01:47.402]      // while "1"  (timeout="200")
[20:01:47.402]      // while-condition  =>  TRUE
[20:01:47.402]      // while "1"  (timeout="200")
[20:01:47.402]      // while-condition  =>  TRUE
[20:01:47.402]      // while "1"  (timeout="200")
[20:01:47.403]      // while-condition  =>  TRUE
[20:01:47.403]      // while "1"  (timeout="200")
[20:01:47.403]      // while-condition  =>  TRUE
[20:01:47.403]      // while "1"  (timeout="200")
[20:01:47.403]      // while-condition  =>  TRUE
[20:01:47.403]      // while "1"  (timeout="200")
[20:01:47.403]      // while-condition  =>  TRUE
[20:01:47.403]      // while "1"  (timeout="200")
[20:01:47.403]      // while-condition  =>  TRUE
[20:01:47.403]      // while "1"  (timeout="200")
[20:01:47.403]      // while-condition  =>  TRUE
[20:01:47.403]      // while "1"  (timeout="200")
[20:01:47.403]      // while-condition  =>  TRUE
[20:01:47.403]      // while "1"  (timeout="200")
[20:01:47.403]      // while-condition  =>  TRUE
[20:01:47.403]      // while "1"  (timeout="200")
[20:01:47.405]      // while-condition  =>  TRUE
[20:01:47.405]      // while "1"  (timeout="200")
[20:01:47.405]      // while-condition  =>  TRUE
[20:01:47.405]      // while "1"  (timeout="200")
[20:01:47.405]      // while-condition  =>  TRUE
[20:01:47.405]      // while "1"  (timeout="200")
[20:01:47.405]      // while-condition  =>  TRUE
[20:01:47.405]      // while "1"  (timeout="200")
[20:01:47.405]      // while-condition  =>  TRUE
[20:01:47.405]      // while "1"  (timeout="200")
[20:01:47.405]      // while-condition  =>  TRUE
[20:01:47.406]      // while "1"  (timeout="200")
[20:01:47.406]      // while-condition  =>  TRUE
[20:01:47.406]      // while "1"  (timeout="200")
[20:01:47.406]      // while-condition  =>  TRUE
[20:01:47.406]      // while "1"  (timeout="200")
[20:01:47.406]      // while-condition  =>  TRUE
[20:01:47.406]      // while "1"  (timeout="200")
[20:01:47.407]      // while-condition  =>  TRUE
[20:01:47.407]      // while "1"  (timeout="200")
[20:01:47.407]      // while-condition  =>  TRUE
[20:01:47.407]      // while "1"  (timeout="200")
[20:01:47.407]      // while-condition  =>  TRUE
[20:01:47.407]      // while "1"  (timeout="200")
[20:01:47.407]      // while-condition  =>  TRUE
[20:01:47.407]      // while "1"  (timeout="200")
[20:01:47.407]      // while-condition  =>  TRUE
[20:01:47.407]      // while "1"  (timeout="200")
[20:01:47.407]      // while-condition  =>  TRUE
[20:01:47.408]      // while "1"  (timeout="200")
[20:01:47.408]      // while-condition  =>  TRUE
[20:01:47.408]      // while "1"  (timeout="200")
[20:01:47.408]      // while-condition  =>  TRUE
[20:01:47.408]      // while "1"  (timeout="200")
[20:01:47.408]      // while-condition  =>  TRUE
[20:01:47.408]      // while "1"  (timeout="200")
[20:01:47.408]      // while-condition  =>  TRUE
[20:01:47.408]      // while "1"  (timeout="200")
[20:01:47.408]      // while-condition  =>  TRUE
[20:01:47.408]      // while "1"  (timeout="200")
[20:01:47.409]      // while-condition  =>  TRUE
[20:01:47.409]      // while "1"  (timeout="200")
[20:01:47.409]      // while-condition  =>  TRUE
[20:01:47.409]      // while "1"  (timeout="200")
[20:01:47.409]      // while-condition  =>  TRUE
[20:01:47.409]      // while "1"  (timeout="200")
[20:01:47.409]      // while-condition  =>  TRUE
[20:01:47.409]      // while "1"  (timeout="200")
[20:01:47.409]      // while-condition  =>  TRUE
[20:01:47.409]      // while "1"  (timeout="200")
[20:01:47.409]      // while-condition  =>  TRUE
[20:01:47.409]      // while "1"  (timeout="200")
[20:01:47.410]      // while-condition  =>  TRUE
[20:01:47.410]      // while "1"  (timeout="200")
[20:01:47.410]      // while  =>  TIMEOUT
[20:01:47.410]      // end while "1"
[20:01:47.410]    </control>
[20:01:47.410]    <control if="canReadPins" while="" timeout="0" info="">
[20:01:47.410]      // if-block "canReadPins"
[20:01:47.410]        // =>  TRUE
[20:01:47.410]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:01:47.410]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:01:47.411]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:01:47.411]        // while-condition  =>  FALSE
[20:01:47.411]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:01:47.411]      </control>
[20:01:47.411]      // end if-block "canReadPins"
[20:01:47.411]    </control>
[20:01:47.411]    <control if="!canReadPins" while="" timeout="0" info="">
[20:01:47.411]      // if-block "!canReadPins"
[20:01:47.412]        // =>  FALSE
[20:01:47.412]      // skip if-block "!canReadPins"
[20:01:47.412]    </control>
[20:01:47.412]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:01:47.412]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:01:47.412]        // =>  TRUE
[20:01:47.412]      <block atomic="false" info="">
[20:01:47.412]        WriteAP(0x00, 0x190008);
[20:01:47.413]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:01:47.413]        WriteAP(0xF0, 0x01);
[20:01:47.415]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:01:47.415]      </block>
[20:01:47.415]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:01:47.415]    </control>
[20:01:47.415]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:01:47.416]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:01:47.416]        // =>  FALSE
[20:01:47.416]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:01:47.416]    </control>
[20:01:47.416]    <block atomic="false" info="">
[20:01:47.416]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:01:47.417]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:01:47.417]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:01:47.417]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:01:47.420]      __ap = 0; //lets make sure we reset the access point selection
[20:01:47.420]        // -> [__ap <= 0x00000000]
[20:01:47.420]    </block>
[20:01:47.420]  </sequence>
[20:01:47.420]  
[20:01:47.427]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:01:47.427]  
[20:01:47.427]  <debugvars>
[20:01:47.427]    // Pre-defined
[20:01:47.427]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:01:47.427]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:01:47.427]    __dp=0x00000000
[20:01:47.427]    __ap=0x00000000
[20:01:47.427]    __traceout=0x00000000      (Trace Disabled)
[20:01:47.427]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:01:47.428]    __FlashAddr=0x00000000
[20:01:47.428]    __FlashLen=0x00000000
[20:01:47.428]    __FlashArg=0x00000000
[20:01:47.428]    __FlashOp=0x00000000
[20:01:47.428]    __Result=0x00000000
[20:01:47.428]  </debugvars>
[20:01:47.428]  
[20:01:47.428]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:01:47.428]    <block atomic="false" info="">
[20:01:47.428]      __var deviceID = 0;
[20:01:47.428]        // -> [deviceID <= 0x00000000]
[20:01:47.429]      __var version = 0;
[20:01:47.429]        // -> [version <= 0x00000000]
[20:01:47.429]      __var partNum = 0;
[20:01:47.429]        // -> [partNum <= 0x00000000]
[20:01:47.429]      __var manuf = 0;
[20:01:47.429]        // -> [manuf <= 0x00000000]
[20:01:47.429]      __var isMSPM0G1X0X_G3X0X = 0;
[20:01:47.429]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:01:47.429]      __var isProduction = 0;
[20:01:47.429]        // -> [isProduction <= 0x00000000]
[20:01:47.429]      __var continueId = 0;
[20:01:47.429]        // -> [continueId <= 0x00000000]
[20:01:47.430]      deviceID =   Read32(0x41C40004);
[20:01:47.431]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:01:47.431]        // -> [deviceID <= 0x2BB8802F]
[20:01:47.431]      version = deviceID >> 28;
[20:01:47.431]        // -> [version <= 0x00000002]
[20:01:47.432]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:01:47.432]        // -> [partNum <= 0x0000BB88]
[20:01:47.433]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:01:47.433]        // -> [manuf <= 0x00000017]
[20:01:47.433]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:01:47.433]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:01:47.433]      isProduction = (version > 0);
[20:01:47.433]        // -> [isProduction <= 0x00000001]
[20:01:47.433]    </block>
[20:01:47.433]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:01:47.433]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:01:47.433]        // =>  FALSE
[20:01:47.433]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:01:47.433]    </control>
[20:01:47.433]    <control if="continueId == 4" while="" timeout="0" info="">
[20:01:47.433]      // if-block "continueId == 4"
[20:01:47.435]        // =>  FALSE
[20:01:47.435]      // skip if-block "continueId == 4"
[20:01:47.435]    </control>
[20:01:47.435]    <control if="!isProduction" while="" timeout="0" info="">
[20:01:47.435]      // if-block "!isProduction"
[20:01:47.435]        // =>  FALSE
[20:01:47.435]      // skip if-block "!isProduction"
[20:01:47.435]    </control>
[20:01:47.435]  </sequence>
[20:01:47.435]  
[20:26:16.486]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:26:16.486]  
[20:26:16.494]  <debugvars>
[20:26:16.494]    // Pre-defined
[20:26:16.494]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:26:16.494]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:26:16.494]    __dp=0x00000000
[20:26:16.494]    __ap=0x00000000
[20:26:16.494]    __traceout=0x00000000      (Trace Disabled)
[20:26:16.494]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:26:16.494]    __FlashAddr=0x00000000
[20:26:16.494]    __FlashLen=0x00000000
[20:26:16.495]    __FlashArg=0x00000000
[20:26:16.495]    __FlashOp=0x00000000
[20:26:16.495]    __Result=0x00000000
[20:26:16.495]  </debugvars>
[20:26:16.495]  
[20:26:16.495]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:26:16.495]    <block atomic="false" info="">
[20:26:16.495]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:26:16.495]        // -> [isSWJ <= 0x00000001]
[20:26:16.496]      __var hasDormant = __protocol & 0x00020000;
[20:26:16.496]        // -> [hasDormant <= 0x00000000]
[20:26:16.496]      __var protType   = __protocol & 0x0000FFFF;
[20:26:16.496]        // -> [protType <= 0x00000002]
[20:26:16.496]    </block>
[20:26:16.496]    <control if="protType == 1" while="" timeout="0" info="">
[20:26:16.496]      // if-block "protType == 1"
[20:26:16.496]        // =>  FALSE
[20:26:16.496]      // skip if-block "protType == 1"
[20:26:16.496]    </control>
[20:26:16.497]    <control if="protType == 2" while="" timeout="0" info="">
[20:26:16.497]      // if-block "protType == 2"
[20:26:16.497]        // =>  TRUE
[20:26:16.497]      <control if="isSWJ" while="" timeout="0" info="">
[20:26:16.497]        // if-block "isSWJ"
[20:26:16.497]          // =>  TRUE
[20:26:16.497]        <control if="hasDormant" while="" timeout="0" info="">
[20:26:16.497]          // if-block "hasDormant"
[20:26:16.497]            // =>  FALSE
[20:26:16.497]          // skip if-block "hasDormant"
[20:26:16.497]        </control>
[20:26:16.498]        <control if="!hasDormant" while="" timeout="0" info="">
[20:26:16.498]          // if-block "!hasDormant"
[20:26:16.498]            // =>  TRUE
[20:26:16.498]          <block atomic="false" info="">
[20:26:16.498]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:26:16.499]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:26:16.499]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:26:16.499]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:26:16.499]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:26:16.500]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:26:16.500]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:26:16.500]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:26:16.500]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:26:16.501]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:26:16.501]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:26:16.501]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:26:16.501]          </block>
[20:26:16.501]          // end if-block "!hasDormant"
[20:26:16.501]        </control>
[20:26:16.502]        // end if-block "isSWJ"
[20:26:16.502]      </control>
[20:26:16.502]      <control if="!isSWJ" while="" timeout="0" info="">
[20:26:16.503]        // if-block "!isSWJ"
[20:26:16.503]          // =>  FALSE
[20:26:16.503]        // skip if-block "!isSWJ"
[20:26:16.503]      </control>
[20:26:16.503]      <block atomic="false" info="">
[20:26:16.503]        ReadDP(0x0);
[20:26:16.504]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:26:16.504]      </block>
[20:26:16.504]      // end if-block "protType == 2"
[20:26:16.504]    </control>
[20:26:16.504]  </sequence>
[20:26:16.504]  
[20:26:16.504]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:26:16.504]  
[20:26:16.504]  <debugvars>
[20:26:16.505]    // Pre-defined
[20:26:16.505]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:26:16.505]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:26:16.505]    __dp=0x00000000
[20:26:16.505]    __ap=0x00000000
[20:26:16.505]    __traceout=0x00000000      (Trace Disabled)
[20:26:16.505]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:26:16.505]    __FlashAddr=0x00000000
[20:26:16.505]    __FlashLen=0x00000000
[20:26:16.505]    __FlashArg=0x00000000
[20:26:16.505]    __FlashOp=0x00000000
[20:26:16.505]    __Result=0x00000000
[20:26:16.506]  </debugvars>
[20:26:16.506]  
[20:26:16.506]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:26:16.506]    <block atomic="false" info="">
[20:26:16.506]      __var SW_DP_ABORT       = 0x0;
[20:26:16.506]        // -> [SW_DP_ABORT <= 0x00000000]
[20:26:16.506]      __var DP_CTRL_STAT      = 0x4;
[20:26:16.506]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:26:16.506]      __var DP_SELECT         = 0x8;
[20:26:16.507]        // -> [DP_SELECT <= 0x00000008]
[20:26:16.507]      __var powered_down      = 0;
[20:26:16.507]        // -> [powered_down <= 0x00000000]
[20:26:16.507]      WriteDP(DP_SELECT, 0x00000000);
[20:26:16.507]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:26:16.507]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:26:16.508]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:26:16.508]        // -> [powered_down <= 0x00000001]
[20:26:16.508]    </block>
[20:26:16.510]    <control if="powered_down" while="" timeout="0" info="">
[20:26:16.510]      // if-block "powered_down"
[20:26:16.510]        // =>  TRUE
[20:26:16.510]      <block atomic="false" info="">
[20:26:16.510]        Message(0, "Debug/System power-up request sent");
[20:26:16.511]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:26:16.512]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:26:16.512]      </block>
[20:26:16.512]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:26:16.512]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:26:16.512]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:26:16.512]        // while-condition  =>  FALSE
[20:26:16.512]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:26:16.513]      </control>
[20:26:16.513]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:26:16.513]        // if-block "(__protocol & 0xFFFF) == 1"
[20:26:16.513]          // =>  FALSE
[20:26:16.513]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:26:16.513]      </control>
[20:26:16.513]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:26:16.513]        // if-block "(__protocol & 0xFFFF) == 2"
[20:26:16.513]          // =>  TRUE
[20:26:16.513]        <block atomic="false" info="">
[20:26:16.513]          Message(0, "executing SWD power up");
[20:26:16.515]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:26:16.516]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:26:16.516]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:26:16.516]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:26:16.516]        </block>
[20:26:16.516]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:26:16.516]      </control>
[20:26:16.518]      // end if-block "powered_down"
[20:26:16.518]    </control>
[20:26:16.518]    <block atomic="false" info="">
[20:26:16.518]      __var DEBUG_PORT_VAL    = 0;
[20:26:16.518]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:26:16.518]      __var ACCESS_POINT_VAL  = 0;
[20:26:16.518]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:26:16.519]      __ap = 1; 
[20:26:16.519]        // -> [__ap <= 0x00000001]
[20:26:16.519]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:26:16.520]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:26:16.520]      __ap = 4;
[20:26:16.520]        // -> [__ap <= 0x00000004]
[20:26:16.520]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:26:16.521]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:26:16.521]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:26:16.521]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:26:16.523]    </block>
[20:26:16.523]    <block atomic="false" info="">
[20:26:16.523]      __var nReset = 0x80;
[20:26:16.523]        // -> [nReset <= 0x00000080]
[20:26:16.523]      __var canReadPins = 0;
[20:26:16.523]        // -> [canReadPins <= 0x00000000]
[20:26:16.523]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:26:16.525]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:26:16.525]        // -> [canReadPins <= 0x00000001]
[20:26:16.525]    </block>
[20:26:16.525]    <control if="" while="1" timeout="200" info="">
[20:26:16.525]      // while "1"  (timeout="200")
[20:26:16.525]      // while-condition  =>  TRUE
[20:26:16.525]      // while "1"  (timeout="200")
[20:26:16.525]      // while-condition  =>  TRUE
[20:26:16.525]      // while "1"  (timeout="200")
[20:26:16.525]      // while-condition  =>  TRUE
[20:26:16.525]      // while "1"  (timeout="200")
[20:26:16.525]      // while-condition  =>  TRUE
[20:26:16.525]      // while "1"  (timeout="200")
[20:26:16.526]      // while-condition  =>  TRUE
[20:26:16.526]      // while "1"  (timeout="200")
[20:26:16.526]      // while-condition  =>  TRUE
[20:26:16.526]      // while "1"  (timeout="200")
[20:26:16.526]      // while-condition  =>  TRUE
[20:26:16.526]      // while "1"  (timeout="200")
[20:26:16.526]      // while-condition  =>  TRUE
[20:26:16.526]      // while "1"  (timeout="200")
[20:26:16.526]      // while-condition  =>  TRUE
[20:26:16.526]      // while "1"  (timeout="200")
[20:26:16.526]      // while-condition  =>  TRUE
[20:26:16.526]      // while "1"  (timeout="200")
[20:26:16.526]      // while-condition  =>  TRUE
[20:26:16.526]      // while "1"  (timeout="200")
[20:26:16.526]      // while-condition  =>  TRUE
[20:26:16.526]      // while "1"  (timeout="200")
[20:26:16.527]      // while-condition  =>  TRUE
[20:26:16.527]      // while "1"  (timeout="200")
[20:26:16.527]      // while-condition  =>  TRUE
[20:26:16.527]      // while "1"  (timeout="200")
[20:26:16.527]      // while-condition  =>  TRUE
[20:26:16.527]      // while "1"  (timeout="200")
[20:26:16.527]      // while-condition  =>  TRUE
[20:26:16.527]      // while "1"  (timeout="200")
[20:26:16.527]      // while-condition  =>  TRUE
[20:26:16.527]      // while "1"  (timeout="200")
[20:26:16.527]      // while-condition  =>  TRUE
[20:26:16.527]      // while "1"  (timeout="200")
[20:26:16.527]      // while-condition  =>  TRUE
[20:26:16.528]      // while "1"  (timeout="200")
[20:26:16.528]      // while-condition  =>  TRUE
[20:26:16.528]      // while "1"  (timeout="200")
[20:26:16.528]      // while-condition  =>  TRUE
[20:26:16.528]      // while "1"  (timeout="200")
[20:26:16.528]      // while-condition  =>  TRUE
[20:26:16.528]      // while "1"  (timeout="200")
[20:26:16.528]      // while-condition  =>  TRUE
[20:26:16.528]      // while "1"  (timeout="200")
[20:26:16.528]      // while-condition  =>  TRUE
[20:26:16.528]      // while "1"  (timeout="200")
[20:26:16.528]      // while-condition  =>  TRUE
[20:26:16.529]      // while "1"  (timeout="200")
[20:26:16.529]      // while-condition  =>  TRUE
[20:26:16.529]      // while "1"  (timeout="200")
[20:26:16.529]      // while-condition  =>  TRUE
[20:26:16.529]      // while "1"  (timeout="200")
[20:26:16.529]      // while-condition  =>  TRUE
[20:26:16.529]      // while "1"  (timeout="200")
[20:26:16.529]      // while-condition  =>  TRUE
[20:26:16.529]      // while "1"  (timeout="200")
[20:26:16.530]      // while-condition  =>  TRUE
[20:26:16.530]      // while "1"  (timeout="200")
[20:26:16.530]      // while-condition  =>  TRUE
[20:26:16.530]      // while "1"  (timeout="200")
[20:26:16.530]      // while-condition  =>  TRUE
[20:26:16.530]      // while "1"  (timeout="200")
[20:26:16.530]      // while-condition  =>  TRUE
[20:26:16.530]      // while "1"  (timeout="200")
[20:26:16.530]      // while-condition  =>  TRUE
[20:26:16.530]      // while "1"  (timeout="200")
[20:26:16.530]      // while-condition  =>  TRUE
[20:26:16.530]      // while "1"  (timeout="200")
[20:26:16.530]      // while-condition  =>  TRUE
[20:26:16.530]      // while "1"  (timeout="200")
[20:26:16.530]      // while-condition  =>  TRUE
[20:26:16.532]      // while "1"  (timeout="200")
[20:26:16.532]      // while-condition  =>  TRUE
[20:26:16.532]      // while "1"  (timeout="200")
[20:26:16.532]      // while-condition  =>  TRUE
[20:26:16.532]      // while "1"  (timeout="200")
[20:26:16.532]      // while-condition  =>  TRUE
[20:26:16.532]      // while "1"  (timeout="200")
[20:26:16.532]      // while-condition  =>  TRUE
[20:26:16.532]      // while "1"  (timeout="200")
[20:26:16.532]      // while-condition  =>  TRUE
[20:26:16.532]      // while "1"  (timeout="200")
[20:26:16.532]      // while-condition  =>  TRUE
[20:26:16.533]      // while "1"  (timeout="200")
[20:26:16.533]      // while-condition  =>  TRUE
[20:26:16.533]      // while "1"  (timeout="200")
[20:26:16.533]      // while-condition  =>  TRUE
[20:26:16.533]      // while "1"  (timeout="200")
[20:26:16.533]      // while-condition  =>  TRUE
[20:26:16.533]      // while "1"  (timeout="200")
[20:26:16.533]      // while-condition  =>  TRUE
[20:26:16.534]      // while "1"  (timeout="200")
[20:26:16.534]      // while-condition  =>  TRUE
[20:26:16.534]      // while "1"  (timeout="200")
[20:26:16.534]      // while-condition  =>  TRUE
[20:26:16.534]      // while "1"  (timeout="200")
[20:26:16.535]      // while-condition  =>  TRUE
[20:26:16.535]      // while "1"  (timeout="200")
[20:26:16.535]      // while-condition  =>  TRUE
[20:26:16.535]      // while "1"  (timeout="200")
[20:26:16.535]      // while-condition  =>  TRUE
[20:26:16.535]      // while "1"  (timeout="200")
[20:26:16.535]      // while-condition  =>  TRUE
[20:26:16.535]      // while "1"  (timeout="200")
[20:26:16.535]      // while-condition  =>  TRUE
[20:26:16.535]      // while "1"  (timeout="200")
[20:26:16.535]      // while-condition  =>  TRUE
[20:26:16.535]      // while "1"  (timeout="200")
[20:26:16.535]      // while-condition  =>  TRUE
[20:26:16.535]      // while "1"  (timeout="200")
[20:26:16.535]      // while-condition  =>  TRUE
[20:26:16.535]      // while "1"  (timeout="200")
[20:26:16.535]      // while-condition  =>  TRUE
[20:26:16.536]      // while "1"  (timeout="200")
[20:26:16.536]      // while  =>  TIMEOUT
[20:26:16.536]      // end while "1"
[20:26:16.536]    </control>
[20:26:16.536]    <control if="canReadPins" while="" timeout="0" info="">
[20:26:16.536]      // if-block "canReadPins"
[20:26:16.536]        // =>  TRUE
[20:26:16.536]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:26:16.537]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:26:16.537]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:26:16.537]        // while-condition  =>  FALSE
[20:26:16.537]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:26:16.539]      </control>
[20:26:16.539]      // end if-block "canReadPins"
[20:26:16.539]    </control>
[20:26:16.539]    <control if="!canReadPins" while="" timeout="0" info="">
[20:26:16.539]      // if-block "!canReadPins"
[20:26:16.539]        // =>  FALSE
[20:26:16.539]      // skip if-block "!canReadPins"
[20:26:16.539]    </control>
[20:26:16.539]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:26:16.539]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:26:16.539]        // =>  TRUE
[20:26:16.539]      <block atomic="false" info="">
[20:26:16.540]        WriteAP(0x00, 0x190008);
[20:26:16.540]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:26:16.540]        WriteAP(0xF0, 0x01);
[20:26:16.541]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:26:16.541]      </block>
[20:26:16.542]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:26:16.542]    </control>
[20:26:16.542]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:26:16.542]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:26:16.542]        // =>  FALSE
[20:26:16.542]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:26:16.542]    </control>
[20:26:16.542]    <block atomic="false" info="">
[20:26:16.542]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:26:16.543]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:26:16.543]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:26:16.543]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:26:16.545]      __ap = 0; //lets make sure we reset the access point selection
[20:26:16.546]        // -> [__ap <= 0x00000000]
[20:26:16.546]    </block>
[20:26:16.546]  </sequence>
[20:26:16.546]  
[20:26:16.552]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:26:16.552]  
[20:26:16.552]  <debugvars>
[20:26:16.552]    // Pre-defined
[20:26:16.552]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:26:16.552]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:26:16.552]    __dp=0x00000000
[20:26:16.552]    __ap=0x00000000
[20:26:16.552]    __traceout=0x00000000      (Trace Disabled)
[20:26:16.553]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:26:16.553]    __FlashAddr=0x00000000
[20:26:16.553]    __FlashLen=0x00000000
[20:26:16.553]    __FlashArg=0x00000000
[20:26:16.553]    __FlashOp=0x00000000
[20:26:16.553]    __Result=0x00000000
[20:26:16.553]  </debugvars>
[20:26:16.553]  
[20:26:16.553]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:26:16.553]    <block atomic="false" info="">
[20:26:16.553]      __var deviceID = 0;
[20:26:16.553]        // -> [deviceID <= 0x00000000]
[20:26:16.554]      __var version = 0;
[20:26:16.554]        // -> [version <= 0x00000000]
[20:26:16.554]      __var partNum = 0;
[20:26:16.554]        // -> [partNum <= 0x00000000]
[20:26:16.554]      __var manuf = 0;
[20:26:16.554]        // -> [manuf <= 0x00000000]
[20:26:16.555]      __var isMSPM0G1X0X_G3X0X = 0;
[20:26:16.555]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:26:16.555]      __var isProduction = 0;
[20:26:16.555]        // -> [isProduction <= 0x00000000]
[20:26:16.555]      __var continueId = 0;
[20:26:16.555]        // -> [continueId <= 0x00000000]
[20:26:16.555]      deviceID =   Read32(0x41C40004);
[20:26:16.556]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:26:16.557]        // -> [deviceID <= 0x2BB8802F]
[20:26:16.557]      version = deviceID >> 28;
[20:26:16.557]        // -> [version <= 0x00000002]
[20:26:16.557]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:26:16.557]        // -> [partNum <= 0x0000BB88]
[20:26:16.557]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:26:16.557]        // -> [manuf <= 0x00000017]
[20:26:16.557]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:26:16.557]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:26:16.557]      isProduction = (version > 0);
[20:26:16.557]        // -> [isProduction <= 0x00000001]
[20:26:16.558]    </block>
[20:26:16.558]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:26:16.558]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:26:16.558]        // =>  FALSE
[20:26:16.558]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:26:16.558]    </control>
[20:26:16.558]    <control if="continueId == 4" while="" timeout="0" info="">
[20:26:16.558]      // if-block "continueId == 4"
[20:26:16.558]        // =>  FALSE
[20:26:16.558]      // skip if-block "continueId == 4"
[20:26:16.558]    </control>
[20:26:16.558]    <control if="!isProduction" while="" timeout="0" info="">
[20:26:16.559]      // if-block "!isProduction"
[20:26:16.559]        // =>  FALSE
[20:26:16.559]      // skip if-block "!isProduction"
[20:26:16.559]    </control>
[20:26:16.559]  </sequence>
[20:26:16.559]  
[20:27:19.591]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:27:19.591]  
[20:27:19.595]  <debugvars>
[20:27:19.595]    // Pre-defined
[20:27:19.595]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:27:19.595]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:27:19.595]    __dp=0x00000000
[20:27:19.595]    __ap=0x00000000
[20:27:19.596]    __traceout=0x00000000      (Trace Disabled)
[20:27:19.596]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:27:19.596]    __FlashAddr=0x00000000
[20:27:19.596]    __FlashLen=0x00000000
[20:27:19.596]    __FlashArg=0x00000000
[20:27:19.596]    __FlashOp=0x00000000
[20:27:19.596]    __Result=0x00000000
[20:27:19.596]  </debugvars>
[20:27:19.596]  
[20:27:19.596]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:27:19.596]    <block atomic="false" info="">
[20:27:19.596]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:27:19.598]        // -> [isSWJ <= 0x00000001]
[20:27:19.598]      __var hasDormant = __protocol & 0x00020000;
[20:27:19.598]        // -> [hasDormant <= 0x00000000]
[20:27:19.598]      __var protType   = __protocol & 0x0000FFFF;
[20:27:19.598]        // -> [protType <= 0x00000002]
[20:27:19.598]    </block>
[20:27:19.598]    <control if="protType == 1" while="" timeout="0" info="">
[20:27:19.598]      // if-block "protType == 1"
[20:27:19.599]        // =>  FALSE
[20:27:19.599]      // skip if-block "protType == 1"
[20:27:19.599]    </control>
[20:27:19.599]    <control if="protType == 2" while="" timeout="0" info="">
[20:27:19.599]      // if-block "protType == 2"
[20:27:19.599]        // =>  TRUE
[20:27:19.599]      <control if="isSWJ" while="" timeout="0" info="">
[20:27:19.599]        // if-block "isSWJ"
[20:27:19.599]          // =>  TRUE
[20:27:19.600]        <control if="hasDormant" while="" timeout="0" info="">
[20:27:19.600]          // if-block "hasDormant"
[20:27:19.600]            // =>  FALSE
[20:27:19.600]          // skip if-block "hasDormant"
[20:27:19.600]        </control>
[20:27:19.600]        <control if="!hasDormant" while="" timeout="0" info="">
[20:27:19.600]          // if-block "!hasDormant"
[20:27:19.602]            // =>  TRUE
[20:27:19.602]          <block atomic="false" info="">
[20:27:19.602]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:27:19.602]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:27:19.602]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:27:19.602]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:27:19.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:27:19.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:27:19.603]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:27:19.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:27:19.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:27:19.604]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:27:19.604]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:27:19.604]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:27:19.604]          </block>
[20:27:19.604]          // end if-block "!hasDormant"
[20:27:19.605]        </control>
[20:27:19.605]        // end if-block "isSWJ"
[20:27:19.605]      </control>
[20:27:19.605]      <control if="!isSWJ" while="" timeout="0" info="">
[20:27:19.605]        // if-block "!isSWJ"
[20:27:19.605]          // =>  FALSE
[20:27:19.605]        // skip if-block "!isSWJ"
[20:27:19.605]      </control>
[20:27:19.605]      <block atomic="false" info="">
[20:27:19.605]        ReadDP(0x0);
[20:27:19.607]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:27:19.607]      </block>
[20:27:19.607]      // end if-block "protType == 2"
[20:27:19.607]    </control>
[20:27:19.607]  </sequence>
[20:27:19.608]  
[20:27:19.608]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:27:19.608]  
[20:27:19.608]  <debugvars>
[20:27:19.608]    // Pre-defined
[20:27:19.609]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:27:19.609]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:27:19.609]    __dp=0x00000000
[20:27:19.609]    __ap=0x00000000
[20:27:19.609]    __traceout=0x00000000      (Trace Disabled)
[20:27:19.609]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:27:19.609]    __FlashAddr=0x00000000
[20:27:19.609]    __FlashLen=0x00000000
[20:27:19.609]    __FlashArg=0x00000000
[20:27:19.610]    __FlashOp=0x00000000
[20:27:19.610]    __Result=0x00000000
[20:27:19.610]  </debugvars>
[20:27:19.610]  
[20:27:19.610]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:27:19.610]    <block atomic="false" info="">
[20:27:19.610]      __var SW_DP_ABORT       = 0x0;
[20:27:19.610]        // -> [SW_DP_ABORT <= 0x00000000]
[20:27:19.610]      __var DP_CTRL_STAT      = 0x4;
[20:27:19.611]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:27:19.611]      __var DP_SELECT         = 0x8;
[20:27:19.611]        // -> [DP_SELECT <= 0x00000008]
[20:27:19.611]      __var powered_down      = 0;
[20:27:19.611]        // -> [powered_down <= 0x00000000]
[20:27:19.612]      WriteDP(DP_SELECT, 0x00000000);
[20:27:19.612]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:27:19.612]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:27:19.613]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:27:19.613]        // -> [powered_down <= 0x00000001]
[20:27:19.613]    </block>
[20:27:19.613]    <control if="powered_down" while="" timeout="0" info="">
[20:27:19.613]      // if-block "powered_down"
[20:27:19.614]        // =>  TRUE
[20:27:19.614]      <block atomic="false" info="">
[20:27:19.614]        Message(0, "Debug/System power-up request sent");
[20:27:19.616]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:27:19.617]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:27:19.617]      </block>
[20:27:19.617]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:27:19.617]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:27:19.618]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:27:19.618]        // while-condition  =>  FALSE
[20:27:19.618]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:27:19.618]      </control>
[20:27:19.618]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:27:19.618]        // if-block "(__protocol & 0xFFFF) == 1"
[20:27:19.618]          // =>  FALSE
[20:27:19.618]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:27:19.620]      </control>
[20:27:19.620]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:27:19.620]        // if-block "(__protocol & 0xFFFF) == 2"
[20:27:19.620]          // =>  TRUE
[20:27:19.620]        <block atomic="false" info="">
[20:27:19.620]          Message(0, "executing SWD power up");
[20:27:19.622]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:27:19.622]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:27:19.622]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:27:19.623]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:27:19.623]        </block>
[20:27:19.623]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:27:19.623]      </control>
[20:27:19.624]      // end if-block "powered_down"
[20:27:19.624]    </control>
[20:27:19.624]    <block atomic="false" info="">
[20:27:19.624]      __var DEBUG_PORT_VAL    = 0;
[20:27:19.624]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:27:19.624]      __var ACCESS_POINT_VAL  = 0;
[20:27:19.624]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:27:19.624]      __ap = 1; 
[20:27:19.624]        // -> [__ap <= 0x00000001]
[20:27:19.624]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:27:19.625]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:27:19.625]      __ap = 4;
[20:27:19.625]        // -> [__ap <= 0x00000004]
[20:27:19.627]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:27:19.627]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:27:19.627]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:27:19.627]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:27:19.630]    </block>
[20:27:19.631]    <block atomic="false" info="">
[20:27:19.631]      __var nReset = 0x80;
[20:27:19.631]        // -> [nReset <= 0x00000080]
[20:27:19.631]      __var canReadPins = 0;
[20:27:19.631]        // -> [canReadPins <= 0x00000000]
[20:27:19.631]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:27:19.631]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:27:19.631]        // -> [canReadPins <= 0x00000001]
[20:27:19.632]    </block>
[20:27:19.632]    <control if="" while="1" timeout="200" info="">
[20:27:19.632]      // while "1"  (timeout="200")
[20:27:19.632]      // while-condition  =>  TRUE
[20:27:19.632]      // while "1"  (timeout="200")
[20:27:19.632]      // while-condition  =>  TRUE
[20:27:19.632]      // while "1"  (timeout="200")
[20:27:19.632]      // while-condition  =>  TRUE
[20:27:19.632]      // while "1"  (timeout="200")
[20:27:19.633]      // while-condition  =>  TRUE
[20:27:19.633]      // while "1"  (timeout="200")
[20:27:19.633]      // while-condition  =>  TRUE
[20:27:19.633]      // while "1"  (timeout="200")
[20:27:19.633]      // while-condition  =>  TRUE
[20:27:19.634]      // while "1"  (timeout="200")
[20:27:19.634]      // while-condition  =>  TRUE
[20:27:19.634]      // while "1"  (timeout="200")
[20:27:19.634]      // while-condition  =>  TRUE
[20:27:19.634]      // while "1"  (timeout="200")
[20:27:19.634]      // while-condition  =>  TRUE
[20:27:19.634]      // while "1"  (timeout="200")
[20:27:19.634]      // while-condition  =>  TRUE
[20:27:19.634]      // while "1"  (timeout="200")
[20:27:19.634]      // while-condition  =>  TRUE
[20:27:19.634]      // while "1"  (timeout="200")
[20:27:19.634]      // while-condition  =>  TRUE
[20:27:19.634]      // while "1"  (timeout="200")
[20:27:19.635]      // while-condition  =>  TRUE
[20:27:19.635]      // while "1"  (timeout="200")
[20:27:19.635]      // while-condition  =>  TRUE
[20:27:19.635]      // while "1"  (timeout="200")
[20:27:19.635]      // while-condition  =>  TRUE
[20:27:19.635]      // while "1"  (timeout="200")
[20:27:19.635]      // while-condition  =>  TRUE
[20:27:19.635]      // while "1"  (timeout="200")
[20:27:19.635]      // while-condition  =>  TRUE
[20:27:19.636]      // while "1"  (timeout="200")
[20:27:19.636]      // while-condition  =>  TRUE
[20:27:19.636]      // while "1"  (timeout="200")
[20:27:19.636]      // while-condition  =>  TRUE
[20:27:19.636]      // while "1"  (timeout="200")
[20:27:19.636]      // while-condition  =>  TRUE
[20:27:19.636]      // while "1"  (timeout="200")
[20:27:19.636]      // while-condition  =>  TRUE
[20:27:19.637]      // while "1"  (timeout="200")
[20:27:19.637]      // while-condition  =>  TRUE
[20:27:19.637]      // while "1"  (timeout="200")
[20:27:19.637]      // while-condition  =>  TRUE
[20:27:19.638]      // while "1"  (timeout="200")
[20:27:19.638]      // while-condition  =>  TRUE
[20:27:19.638]      // while "1"  (timeout="200")
[20:27:19.638]      // while-condition  =>  TRUE
[20:27:19.638]      // while "1"  (timeout="200")
[20:27:19.638]      // while-condition  =>  TRUE
[20:27:19.638]      // while "1"  (timeout="200")
[20:27:19.638]      // while-condition  =>  TRUE
[20:27:19.638]      // while "1"  (timeout="200")
[20:27:19.638]      // while-condition  =>  TRUE
[20:27:19.638]      // while "1"  (timeout="200")
[20:27:19.639]      // while-condition  =>  TRUE
[20:27:19.639]      // while "1"  (timeout="200")
[20:27:19.639]      // while-condition  =>  TRUE
[20:27:19.639]      // while "1"  (timeout="200")
[20:27:19.639]      // while-condition  =>  TRUE
[20:27:19.639]      // while "1"  (timeout="200")
[20:27:19.640]      // while-condition  =>  TRUE
[20:27:19.640]      // while "1"  (timeout="200")
[20:27:19.640]      // while-condition  =>  TRUE
[20:27:19.640]      // while "1"  (timeout="200")
[20:27:19.640]      // while-condition  =>  TRUE
[20:27:19.640]      // while "1"  (timeout="200")
[20:27:19.640]      // while-condition  =>  TRUE
[20:27:19.640]      // while "1"  (timeout="200")
[20:27:19.640]      // while-condition  =>  TRUE
[20:27:19.640]      // while "1"  (timeout="200")
[20:27:19.641]      // while-condition  =>  TRUE
[20:27:19.641]      // while "1"  (timeout="200")
[20:27:19.641]      // while-condition  =>  TRUE
[20:27:19.641]      // while "1"  (timeout="200")
[20:27:19.641]      // while-condition  =>  TRUE
[20:27:19.641]      // while "1"  (timeout="200")
[20:27:19.641]      // while-condition  =>  TRUE
[20:27:19.641]      // while "1"  (timeout="200")
[20:27:19.641]      // while-condition  =>  TRUE
[20:27:19.641]      // while "1"  (timeout="200")
[20:27:19.641]      // while-condition  =>  TRUE
[20:27:19.641]      // while "1"  (timeout="200")
[20:27:19.641]      // while-condition  =>  TRUE
[20:27:19.641]      // while "1"  (timeout="200")
[20:27:19.642]      // while-condition  =>  TRUE
[20:27:19.642]      // while "1"  (timeout="200")
[20:27:19.642]      // while-condition  =>  TRUE
[20:27:19.642]      // while "1"  (timeout="200")
[20:27:19.642]      // while-condition  =>  TRUE
[20:27:19.642]      // while "1"  (timeout="200")
[20:27:19.642]      // while-condition  =>  TRUE
[20:27:19.642]      // while "1"  (timeout="200")
[20:27:19.643]      // while-condition  =>  TRUE
[20:27:19.643]      // while "1"  (timeout="200")
[20:27:19.643]      // while-condition  =>  TRUE
[20:27:19.643]      // while "1"  (timeout="200")
[20:27:19.644]      // while-condition  =>  TRUE
[20:27:19.644]      // while "1"  (timeout="200")
[20:27:19.644]      // while-condition  =>  TRUE
[20:27:19.644]      // while "1"  (timeout="200")
[20:27:19.644]      // while-condition  =>  TRUE
[20:27:19.644]      // while "1"  (timeout="200")
[20:27:19.644]      // while-condition  =>  TRUE
[20:27:19.645]      // while "1"  (timeout="200")
[20:27:19.645]      // while  =>  TIMEOUT
[20:27:19.645]      // end while "1"
[20:27:19.645]    </control>
[20:27:19.645]    <control if="canReadPins" while="" timeout="0" info="">
[20:27:19.645]      // if-block "canReadPins"
[20:27:19.645]        // =>  TRUE
[20:27:19.645]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:27:19.645]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:27:19.646]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:27:19.646]        // while-condition  =>  FALSE
[20:27:19.646]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:27:19.646]      </control>
[20:27:19.646]      // end if-block "canReadPins"
[20:27:19.646]    </control>
[20:27:19.647]    <control if="!canReadPins" while="" timeout="0" info="">
[20:27:19.647]      // if-block "!canReadPins"
[20:27:19.647]        // =>  FALSE
[20:27:19.647]      // skip if-block "!canReadPins"
[20:27:19.647]    </control>
[20:27:19.647]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:27:19.647]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:27:19.647]        // =>  TRUE
[20:27:19.647]      <block atomic="false" info="">
[20:27:19.647]        WriteAP(0x00, 0x190008);
[20:27:19.648]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:27:19.648]        WriteAP(0xF0, 0x01);
[20:27:19.649]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:27:19.649]      </block>
[20:27:19.649]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:27:19.650]    </control>
[20:27:19.650]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:27:19.650]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:27:19.650]        // =>  FALSE
[20:27:19.650]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:27:19.650]    </control>
[20:27:19.650]    <block atomic="false" info="">
[20:27:19.650]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:27:19.651]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:27:19.651]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:27:19.651]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:27:19.654]      __ap = 0; //lets make sure we reset the access point selection
[20:27:19.654]        // -> [__ap <= 0x00000000]
[20:27:19.654]    </block>
[20:27:19.654]  </sequence>
[20:27:19.654]  
[20:27:19.660]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:27:19.660]  
[20:27:19.660]  <debugvars>
[20:27:19.660]    // Pre-defined
[20:27:19.660]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:27:19.661]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:27:19.661]    __dp=0x00000000
[20:27:19.661]    __ap=0x00000000
[20:27:19.661]    __traceout=0x00000000      (Trace Disabled)
[20:27:19.661]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:27:19.661]    __FlashAddr=0x00000000
[20:27:19.661]    __FlashLen=0x00000000
[20:27:19.661]    __FlashArg=0x00000000
[20:27:19.661]    __FlashOp=0x00000000
[20:27:19.661]    __Result=0x00000000
[20:27:19.661]  </debugvars>
[20:27:19.661]  
[20:27:19.662]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:27:19.662]    <block atomic="false" info="">
[20:27:19.662]      __var deviceID = 0;
[20:27:19.662]        // -> [deviceID <= 0x00000000]
[20:27:19.662]      __var version = 0;
[20:27:19.662]        // -> [version <= 0x00000000]
[20:27:19.662]      __var partNum = 0;
[20:27:19.662]        // -> [partNum <= 0x00000000]
[20:27:19.662]      __var manuf = 0;
[20:27:19.662]        // -> [manuf <= 0x00000000]
[20:27:19.663]      __var isMSPM0G1X0X_G3X0X = 0;
[20:27:19.663]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:27:19.663]      __var isProduction = 0;
[20:27:19.663]        // -> [isProduction <= 0x00000000]
[20:27:19.663]      __var continueId = 0;
[20:27:19.663]        // -> [continueId <= 0x00000000]
[20:27:19.663]      deviceID =   Read32(0x41C40004);
[20:27:19.665]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:27:19.665]        // -> [deviceID <= 0x2BB8802F]
[20:27:19.665]      version = deviceID >> 28;
[20:27:19.665]        // -> [version <= 0x00000002]
[20:27:19.665]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:27:19.665]        // -> [partNum <= 0x0000BB88]
[20:27:19.666]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:27:19.666]        // -> [manuf <= 0x00000017]
[20:27:19.666]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:27:19.666]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:27:19.666]      isProduction = (version > 0);
[20:27:19.666]        // -> [isProduction <= 0x00000001]
[20:27:19.666]    </block>
[20:27:19.666]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:27:19.666]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:27:19.666]        // =>  FALSE
[20:27:19.666]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:27:19.666]    </control>
[20:27:19.666]    <control if="continueId == 4" while="" timeout="0" info="">
[20:27:19.666]      // if-block "continueId == 4"
[20:27:19.666]        // =>  FALSE
[20:27:19.668]      // skip if-block "continueId == 4"
[20:27:19.668]    </control>
[20:27:19.668]    <control if="!isProduction" while="" timeout="0" info="">
[20:27:19.668]      // if-block "!isProduction"
[20:27:19.668]        // =>  FALSE
[20:27:19.668]      // skip if-block "!isProduction"
[20:27:19.669]    </control>
[20:27:19.669]  </sequence>
[20:27:19.669]  
[20:27:57.608]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:27:57.608]  
[20:27:57.615]  <debugvars>
[20:27:57.615]    // Pre-defined
[20:27:57.616]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:27:57.616]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:27:57.616]    __dp=0x00000000
[20:27:57.616]    __ap=0x00000000
[20:27:57.616]    __traceout=0x00000000      (Trace Disabled)
[20:27:57.616]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:27:57.616]    __FlashAddr=0x00000000
[20:27:57.617]    __FlashLen=0x00000000
[20:27:57.617]    __FlashArg=0x00000000
[20:27:57.617]    __FlashOp=0x00000000
[20:27:57.617]    __Result=0x00000000
[20:27:57.617]  </debugvars>
[20:27:57.617]  
[20:27:57.617]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:27:57.617]    <block atomic="false" info="">
[20:27:57.617]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:27:57.617]        // -> [isSWJ <= 0x00000001]
[20:27:57.617]      __var hasDormant = __protocol & 0x00020000;
[20:27:57.617]        // -> [hasDormant <= 0x00000000]
[20:27:57.618]      __var protType   = __protocol & 0x0000FFFF;
[20:27:57.618]        // -> [protType <= 0x00000002]
[20:27:57.618]    </block>
[20:27:57.618]    <control if="protType == 1" while="" timeout="0" info="">
[20:27:57.618]      // if-block "protType == 1"
[20:27:57.618]        // =>  FALSE
[20:27:57.618]      // skip if-block "protType == 1"
[20:27:57.618]    </control>
[20:27:57.618]    <control if="protType == 2" while="" timeout="0" info="">
[20:27:57.618]      // if-block "protType == 2"
[20:27:57.620]        // =>  TRUE
[20:27:57.620]      <control if="isSWJ" while="" timeout="0" info="">
[20:27:57.620]        // if-block "isSWJ"
[20:27:57.620]          // =>  TRUE
[20:27:57.620]        <control if="hasDormant" while="" timeout="0" info="">
[20:27:57.620]          // if-block "hasDormant"
[20:27:57.620]            // =>  FALSE
[20:27:57.620]          // skip if-block "hasDormant"
[20:27:57.620]        </control>
[20:27:57.621]        <control if="!hasDormant" while="" timeout="0" info="">
[20:27:57.621]          // if-block "!hasDormant"
[20:27:57.621]            // =>  TRUE
[20:27:57.621]          <block atomic="false" info="">
[20:27:57.621]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:27:57.621]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:27:57.621]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:27:57.622]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:27:57.622]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:27:57.622]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:27:57.622]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:27:57.623]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:27:57.623]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:27:57.623]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:27:57.623]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:27:57.623]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:27:57.624]          </block>
[20:27:57.624]          // end if-block "!hasDormant"
[20:27:57.624]        </control>
[20:27:57.624]        // end if-block "isSWJ"
[20:27:57.624]      </control>
[20:27:57.624]      <control if="!isSWJ" while="" timeout="0" info="">
[20:27:57.624]        // if-block "!isSWJ"
[20:27:57.624]          // =>  FALSE
[20:27:57.624]        // skip if-block "!isSWJ"
[20:27:57.624]      </control>
[20:27:57.624]      <block atomic="false" info="">
[20:27:57.625]        ReadDP(0x0);
[20:27:57.625]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:27:57.625]      </block>
[20:27:57.625]      // end if-block "protType == 2"
[20:27:57.625]    </control>
[20:27:57.625]  </sequence>
[20:27:57.625]  
[20:27:57.626]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:27:57.626]  
[20:27:57.626]  <debugvars>
[20:27:57.626]    // Pre-defined
[20:27:57.626]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:27:57.626]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:27:57.626]    __dp=0x00000000
[20:27:57.627]    __ap=0x00000000
[20:27:57.627]    __traceout=0x00000000      (Trace Disabled)
[20:27:57.627]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:27:57.627]    __FlashAddr=0x00000000
[20:27:57.627]    __FlashLen=0x00000000
[20:27:57.627]    __FlashArg=0x00000000
[20:27:57.627]    __FlashOp=0x00000000
[20:27:57.627]    __Result=0x00000000
[20:27:57.627]  </debugvars>
[20:27:57.627]  
[20:27:57.627]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:27:57.627]    <block atomic="false" info="">
[20:27:57.627]      __var SW_DP_ABORT       = 0x0;
[20:27:57.627]        // -> [SW_DP_ABORT <= 0x00000000]
[20:27:57.628]      __var DP_CTRL_STAT      = 0x4;
[20:27:57.628]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:27:57.628]      __var DP_SELECT         = 0x8;
[20:27:57.628]        // -> [DP_SELECT <= 0x00000008]
[20:27:57.628]      __var powered_down      = 0;
[20:27:57.628]        // -> [powered_down <= 0x00000000]
[20:27:57.628]      WriteDP(DP_SELECT, 0x00000000);
[20:27:57.629]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:27:57.629]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:27:57.629]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:27:57.629]        // -> [powered_down <= 0x00000001]
[20:27:57.629]    </block>
[20:27:57.629]    <control if="powered_down" while="" timeout="0" info="">
[20:27:57.630]      // if-block "powered_down"
[20:27:57.630]        // =>  TRUE
[20:27:57.630]      <block atomic="false" info="">
[20:27:57.630]        Message(0, "Debug/System power-up request sent");
[20:27:57.632]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:27:57.634]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:27:57.634]      </block>
[20:27:57.634]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:27:57.634]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:27:57.634]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:27:57.635]        // while-condition  =>  FALSE
[20:27:57.635]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:27:57.635]      </control>
[20:27:57.635]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:27:57.635]        // if-block "(__protocol & 0xFFFF) == 1"
[20:27:57.635]          // =>  FALSE
[20:27:57.635]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:27:57.635]      </control>
[20:27:57.635]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:27:57.635]        // if-block "(__protocol & 0xFFFF) == 2"
[20:27:57.635]          // =>  TRUE
[20:27:57.635]        <block atomic="false" info="">
[20:27:57.635]          Message(0, "executing SWD power up");
[20:27:57.637]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:27:57.638]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:27:57.638]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:27:57.639]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:27:57.639]        </block>
[20:27:57.639]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:27:57.639]      </control>
[20:27:57.639]      // end if-block "powered_down"
[20:27:57.639]    </control>
[20:27:57.639]    <block atomic="false" info="">
[20:27:57.639]      __var DEBUG_PORT_VAL    = 0;
[20:27:57.639]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:27:57.639]      __var ACCESS_POINT_VAL  = 0;
[20:27:57.639]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:27:57.640]      __ap = 1; 
[20:27:57.640]        // -> [__ap <= 0x00000001]
[20:27:57.640]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:27:57.641]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:27:57.641]      __ap = 4;
[20:27:57.641]        // -> [__ap <= 0x00000004]
[20:27:57.641]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:27:57.642]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:27:57.642]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:27:57.642]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:27:57.644]    </block>
[20:27:57.644]    <block atomic="false" info="">
[20:27:57.645]      __var nReset = 0x80;
[20:27:57.645]        // -> [nReset <= 0x00000080]
[20:27:57.645]      __var canReadPins = 0;
[20:27:57.645]        // -> [canReadPins <= 0x00000000]
[20:27:57.645]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:27:57.646]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:27:57.646]        // -> [canReadPins <= 0x00000001]
[20:27:57.646]    </block>
[20:27:57.646]    <control if="" while="1" timeout="200" info="">
[20:27:57.646]      // while "1"  (timeout="200")
[20:27:57.646]      // while-condition  =>  TRUE
[20:27:57.646]      // while "1"  (timeout="200")
[20:27:57.646]      // while-condition  =>  TRUE
[20:27:57.646]      // while "1"  (timeout="200")
[20:27:57.647]      // while-condition  =>  TRUE
[20:27:57.647]      // while "1"  (timeout="200")
[20:27:57.647]      // while-condition  =>  TRUE
[20:27:57.647]      // while "1"  (timeout="200")
[20:27:57.647]      // while-condition  =>  TRUE
[20:27:57.647]      // while "1"  (timeout="200")
[20:27:57.647]      // while-condition  =>  TRUE
[20:27:57.647]      // while "1"  (timeout="200")
[20:27:57.647]      // while-condition  =>  TRUE
[20:27:57.647]      // while "1"  (timeout="200")
[20:27:57.647]      // while-condition  =>  TRUE
[20:27:57.647]      // while "1"  (timeout="200")
[20:27:57.647]      // while-condition  =>  TRUE
[20:27:57.648]      // while "1"  (timeout="200")
[20:27:57.648]      // while-condition  =>  TRUE
[20:27:57.648]      // while "1"  (timeout="200")
[20:27:57.648]      // while-condition  =>  TRUE
[20:27:57.648]      // while "1"  (timeout="200")
[20:27:57.648]      // while-condition  =>  TRUE
[20:27:57.648]      // while "1"  (timeout="200")
[20:27:57.649]      // while-condition  =>  TRUE
[20:27:57.649]      // while "1"  (timeout="200")
[20:27:57.649]      // while-condition  =>  TRUE
[20:27:57.649]      // while "1"  (timeout="200")
[20:27:57.649]      // while-condition  =>  TRUE
[20:27:57.649]      // while "1"  (timeout="200")
[20:27:57.649]      // while-condition  =>  TRUE
[20:27:57.649]      // while "1"  (timeout="200")
[20:27:57.649]      // while-condition  =>  TRUE
[20:27:57.650]      // while "1"  (timeout="200")
[20:27:57.650]      // while-condition  =>  TRUE
[20:27:57.650]      // while "1"  (timeout="200")
[20:27:57.650]      // while-condition  =>  TRUE
[20:27:57.650]      // while "1"  (timeout="200")
[20:27:57.650]      // while-condition  =>  TRUE
[20:27:57.650]      // while "1"  (timeout="200")
[20:27:57.650]      // while-condition  =>  TRUE
[20:27:57.650]      // while "1"  (timeout="200")
[20:27:57.650]      // while-condition  =>  TRUE
[20:27:57.650]      // while "1"  (timeout="200")
[20:27:57.650]      // while-condition  =>  TRUE
[20:27:57.651]      // while "1"  (timeout="200")
[20:27:57.651]      // while-condition  =>  TRUE
[20:27:57.651]      // while "1"  (timeout="200")
[20:27:57.651]      // while-condition  =>  TRUE
[20:27:57.651]      // while "1"  (timeout="200")
[20:27:57.651]      // while-condition  =>  TRUE
[20:27:57.651]      // while "1"  (timeout="200")
[20:27:57.651]      // while-condition  =>  TRUE
[20:27:57.651]      // while "1"  (timeout="200")
[20:27:57.651]      // while-condition  =>  TRUE
[20:27:57.652]      // while "1"  (timeout="200")
[20:27:57.652]      // while-condition  =>  TRUE
[20:27:57.652]      // while "1"  (timeout="200")
[20:27:57.652]      // while-condition  =>  TRUE
[20:27:57.652]      // while "1"  (timeout="200")
[20:27:57.652]      // while-condition  =>  TRUE
[20:27:57.653]      // while "1"  (timeout="200")
[20:27:57.653]      // while-condition  =>  TRUE
[20:27:57.653]      // while "1"  (timeout="200")
[20:27:57.653]      // while-condition  =>  TRUE
[20:27:57.653]      // while "1"  (timeout="200")
[20:27:57.654]      // while-condition  =>  TRUE
[20:27:57.654]      // while "1"  (timeout="200")
[20:27:57.654]      // while-condition  =>  TRUE
[20:27:57.654]      // while "1"  (timeout="200")
[20:27:57.654]      // while-condition  =>  TRUE
[20:27:57.654]      // while "1"  (timeout="200")
[20:27:57.654]      // while-condition  =>  TRUE
[20:27:57.654]      // while "1"  (timeout="200")
[20:27:57.654]      // while-condition  =>  TRUE
[20:27:57.654]      // while "1"  (timeout="200")
[20:27:57.654]      // while-condition  =>  TRUE
[20:27:57.654]      // while "1"  (timeout="200")
[20:27:57.654]      // while-condition  =>  TRUE
[20:27:57.654]      // while "1"  (timeout="200")
[20:27:57.654]      // while-condition  =>  TRUE
[20:27:57.654]      // while "1"  (timeout="200")
[20:27:57.654]      // while-condition  =>  TRUE
[20:27:57.655]      // while "1"  (timeout="200")
[20:27:57.655]      // while-condition  =>  TRUE
[20:27:57.655]      // while "1"  (timeout="200")
[20:27:57.655]      // while-condition  =>  TRUE
[20:27:57.655]      // while "1"  (timeout="200")
[20:27:57.655]      // while-condition  =>  TRUE
[20:27:57.655]      // while "1"  (timeout="200")
[20:27:57.655]      // while-condition  =>  TRUE
[20:27:57.655]      // while "1"  (timeout="200")
[20:27:57.655]      // while-condition  =>  TRUE
[20:27:57.655]      // while "1"  (timeout="200")
[20:27:57.655]      // while-condition  =>  TRUE
[20:27:57.656]      // while "1"  (timeout="200")
[20:27:57.656]      // while-condition  =>  TRUE
[20:27:57.656]      // while "1"  (timeout="200")
[20:27:57.656]      // while-condition  =>  TRUE
[20:27:57.656]      // while "1"  (timeout="200")
[20:27:57.656]      // while-condition  =>  TRUE
[20:27:57.656]      // while "1"  (timeout="200")
[20:27:57.656]      // while-condition  =>  TRUE
[20:27:57.656]      // while "1"  (timeout="200")
[20:27:57.656]      // while-condition  =>  TRUE
[20:27:57.656]      // while "1"  (timeout="200")
[20:27:57.656]      // while-condition  =>  TRUE
[20:27:57.656]      // while "1"  (timeout="200")
[20:27:57.656]      // while-condition  =>  TRUE
[20:27:57.656]      // while "1"  (timeout="200")
[20:27:57.658]      // while-condition  =>  TRUE
[20:27:57.658]      // while "1"  (timeout="200")
[20:27:57.658]      // while-condition  =>  TRUE
[20:27:57.658]      // while "1"  (timeout="200")
[20:27:57.658]      // while-condition  =>  TRUE
[20:27:57.658]      // while "1"  (timeout="200")
[20:27:57.658]      // while-condition  =>  TRUE
[20:27:57.658]      // while "1"  (timeout="200")
[20:27:57.658]      // while-condition  =>  TRUE
[20:27:57.658]      // while "1"  (timeout="200")
[20:27:57.659]      // while-condition  =>  TRUE
[20:27:57.659]      // while "1"  (timeout="200")
[20:27:57.659]      // while-condition  =>  TRUE
[20:27:57.659]      // while "1"  (timeout="200")
[20:27:57.659]      // while-condition  =>  TRUE
[20:27:57.659]      // while "1"  (timeout="200")
[20:27:57.659]      // while-condition  =>  TRUE
[20:27:57.659]      // while "1"  (timeout="200")
[20:27:57.659]      // while-condition  =>  TRUE
[20:27:57.659]      // while "1"  (timeout="200")
[20:27:57.659]      // while-condition  =>  TRUE
[20:27:57.659]      // while "1"  (timeout="200")
[20:27:57.659]      // while-condition  =>  TRUE
[20:27:57.660]      // while "1"  (timeout="200")
[20:27:57.660]      // while-condition  =>  TRUE
[20:27:57.660]      // while "1"  (timeout="200")
[20:27:57.660]      // while-condition  =>  TRUE
[20:27:57.660]      // while "1"  (timeout="200")
[20:27:57.660]      // while-condition  =>  TRUE
[20:27:57.660]      // while "1"  (timeout="200")
[20:27:57.660]      // while-condition  =>  TRUE
[20:27:57.661]      // while "1"  (timeout="200")
[20:27:57.661]      // while  =>  TIMEOUT
[20:27:57.661]      // end while "1"
[20:27:57.661]    </control>
[20:27:57.661]    <control if="canReadPins" while="" timeout="0" info="">
[20:27:57.661]      // if-block "canReadPins"
[20:27:57.661]        // =>  TRUE
[20:27:57.661]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:27:57.661]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:27:57.661]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:27:57.661]        // while-condition  =>  FALSE
[20:27:57.662]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:27:57.662]      </control>
[20:27:57.662]      // end if-block "canReadPins"
[20:27:57.662]    </control>
[20:27:57.662]    <control if="!canReadPins" while="" timeout="0" info="">
[20:27:57.662]      // if-block "!canReadPins"
[20:27:57.662]        // =>  FALSE
[20:27:57.662]      // skip if-block "!canReadPins"
[20:27:57.662]    </control>
[20:27:57.662]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:27:57.662]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:27:57.663]        // =>  TRUE
[20:27:57.663]      <block atomic="false" info="">
[20:27:57.663]        WriteAP(0x00, 0x190008);
[20:27:57.664]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:27:57.664]        WriteAP(0xF0, 0x01);
[20:27:57.666]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:27:57.666]      </block>
[20:27:57.666]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:27:57.666]    </control>
[20:27:57.666]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:27:57.666]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:27:57.666]        // =>  FALSE
[20:27:57.666]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:27:57.666]    </control>
[20:27:57.666]    <block atomic="false" info="">
[20:27:57.667]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:27:57.668]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:27:57.668]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:27:57.668]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:27:57.669]      __ap = 0; //lets make sure we reset the access point selection
[20:27:57.670]        // -> [__ap <= 0x00000000]
[20:27:57.670]    </block>
[20:27:57.670]  </sequence>
[20:27:57.670]  
[20:27:57.675]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:27:57.676]  
[20:27:57.676]  <debugvars>
[20:27:57.676]    // Pre-defined
[20:27:57.676]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:27:57.676]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:27:57.676]    __dp=0x00000000
[20:27:57.676]    __ap=0x00000000
[20:27:57.677]    __traceout=0x00000000      (Trace Disabled)
[20:27:57.677]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:27:57.677]    __FlashAddr=0x00000000
[20:27:57.677]    __FlashLen=0x00000000
[20:27:57.677]    __FlashArg=0x00000000
[20:27:57.677]    __FlashOp=0x00000000
[20:27:57.677]    __Result=0x00000000
[20:27:57.677]  </debugvars>
[20:27:57.677]  
[20:27:57.677]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:27:57.679]    <block atomic="false" info="">
[20:27:57.679]      __var deviceID = 0;
[20:27:57.679]        // -> [deviceID <= 0x00000000]
[20:27:57.679]      __var version = 0;
[20:27:57.679]        // -> [version <= 0x00000000]
[20:27:57.679]      __var partNum = 0;
[20:27:57.679]        // -> [partNum <= 0x00000000]
[20:27:57.679]      __var manuf = 0;
[20:27:57.679]        // -> [manuf <= 0x00000000]
[20:27:57.679]      __var isMSPM0G1X0X_G3X0X = 0;
[20:27:57.680]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:27:57.680]      __var isProduction = 0;
[20:27:57.680]        // -> [isProduction <= 0x00000000]
[20:27:57.680]      __var continueId = 0;
[20:27:57.680]        // -> [continueId <= 0x00000000]
[20:27:57.680]      deviceID =   Read32(0x41C40004);
[20:27:57.681]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:27:57.682]        // -> [deviceID <= 0x2BB8802F]
[20:27:57.682]      version = deviceID >> 28;
[20:27:57.682]        // -> [version <= 0x00000002]
[20:27:57.682]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:27:57.682]        // -> [partNum <= 0x0000BB88]
[20:27:57.682]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:27:57.682]        // -> [manuf <= 0x00000017]
[20:27:57.682]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:27:57.682]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:27:57.683]      isProduction = (version > 0);
[20:27:57.683]        // -> [isProduction <= 0x00000001]
[20:27:57.683]    </block>
[20:27:57.683]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:27:57.683]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:27:57.683]        // =>  FALSE
[20:27:57.684]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:27:57.684]    </control>
[20:27:57.684]    <control if="continueId == 4" while="" timeout="0" info="">
[20:27:57.684]      // if-block "continueId == 4"
[20:27:57.684]        // =>  FALSE
[20:27:57.684]      // skip if-block "continueId == 4"
[20:27:57.684]    </control>
[20:27:57.684]    <control if="!isProduction" while="" timeout="0" info="">
[20:27:57.684]      // if-block "!isProduction"
[20:27:57.684]        // =>  FALSE
[20:27:57.685]      // skip if-block "!isProduction"
[20:27:57.685]    </control>
[20:27:57.685]  </sequence>
[20:27:57.685]  
[20:32:28.796]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:32:28.796]  
[20:32:28.796]  <debugvars>
[20:32:28.796]    // Pre-defined
[20:32:28.796]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:32:28.797]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:32:28.797]    __dp=0x00000000
[20:32:28.797]    __ap=0x00000000
[20:32:28.797]    __traceout=0x00000000      (Trace Disabled)
[20:32:28.797]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:32:28.797]    __FlashAddr=0x00000000
[20:32:28.798]    __FlashLen=0x00000000
[20:32:28.798]    __FlashArg=0x00000000
[20:32:28.798]    __FlashOp=0x00000000
[20:32:28.798]    __Result=0x00000000
[20:32:28.798]  </debugvars>
[20:32:28.798]  
[20:32:28.798]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:32:28.798]    <block atomic="false" info="">
[20:32:28.798]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:32:28.798]        // -> [isSWJ <= 0x00000001]
[20:32:28.799]      __var hasDormant = __protocol & 0x00020000;
[20:32:28.799]        // -> [hasDormant <= 0x00000000]
[20:32:28.799]      __var protType   = __protocol & 0x0000FFFF;
[20:32:28.799]        // -> [protType <= 0x00000002]
[20:32:28.799]    </block>
[20:32:28.799]    <control if="protType == 1" while="" timeout="0" info="">
[20:32:28.799]      // if-block "protType == 1"
[20:32:28.799]        // =>  FALSE
[20:32:28.799]      // skip if-block "protType == 1"
[20:32:28.799]    </control>
[20:32:28.800]    <control if="protType == 2" while="" timeout="0" info="">
[20:32:28.800]      // if-block "protType == 2"
[20:32:28.800]        // =>  TRUE
[20:32:28.800]      <control if="isSWJ" while="" timeout="0" info="">
[20:32:28.800]        // if-block "isSWJ"
[20:32:28.800]          // =>  TRUE
[20:32:28.800]        <control if="hasDormant" while="" timeout="0" info="">
[20:32:28.800]          // if-block "hasDormant"
[20:32:28.800]            // =>  FALSE
[20:32:28.800]          // skip if-block "hasDormant"
[20:32:28.800]        </control>
[20:32:28.801]        <control if="!hasDormant" while="" timeout="0" info="">
[20:32:28.801]          // if-block "!hasDormant"
[20:32:28.801]            // =>  TRUE
[20:32:28.801]          <block atomic="false" info="">
[20:32:28.801]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:32:28.801]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:32:28.802]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:32:28.802]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:32:28.802]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:32:28.802]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:32:28.803]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:32:28.803]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:32:28.803]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:32:28.803]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:32:28.803]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:32:28.804]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:32:28.804]          </block>
[20:32:28.804]          // end if-block "!hasDormant"
[20:32:28.804]        </control>
[20:32:28.804]        // end if-block "isSWJ"
[20:32:28.804]      </control>
[20:32:28.804]      <control if="!isSWJ" while="" timeout="0" info="">
[20:32:28.804]        // if-block "!isSWJ"
[20:32:28.804]          // =>  FALSE
[20:32:28.804]        // skip if-block "!isSWJ"
[20:32:28.805]      </control>
[20:32:28.805]      <block atomic="false" info="">
[20:32:28.805]        ReadDP(0x0);
[20:32:28.805]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:32:28.805]      </block>
[20:32:28.805]      // end if-block "protType == 2"
[20:32:28.805]    </control>
[20:32:28.805]  </sequence>
[20:32:28.806]  
[20:32:28.806]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:32:28.806]  
[20:32:28.807]  <debugvars>
[20:32:28.807]    // Pre-defined
[20:32:28.807]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:32:28.807]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:32:28.807]    __dp=0x00000000
[20:32:28.807]    __ap=0x00000000
[20:32:28.807]    __traceout=0x00000000      (Trace Disabled)
[20:32:28.807]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:32:28.807]    __FlashAddr=0x00000000
[20:32:28.807]    __FlashLen=0x00000000
[20:32:28.807]    __FlashArg=0x00000000
[20:32:28.807]    __FlashOp=0x00000000
[20:32:28.807]    __Result=0x00000000
[20:32:28.807]  </debugvars>
[20:32:28.807]  
[20:32:28.807]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:32:28.807]    <block atomic="false" info="">
[20:32:28.808]      __var SW_DP_ABORT       = 0x0;
[20:32:28.808]        // -> [SW_DP_ABORT <= 0x00000000]
[20:32:28.808]      __var DP_CTRL_STAT      = 0x4;
[20:32:28.808]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:32:28.808]      __var DP_SELECT         = 0x8;
[20:32:28.808]        // -> [DP_SELECT <= 0x00000008]
[20:32:28.808]      __var powered_down      = 0;
[20:32:28.808]        // -> [powered_down <= 0x00000000]
[20:32:28.808]      WriteDP(DP_SELECT, 0x00000000);
[20:32:28.809]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:32:28.809]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:32:28.809]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:32:28.809]        // -> [powered_down <= 0x00000001]
[20:32:28.809]    </block>
[20:32:28.809]    <control if="powered_down" while="" timeout="0" info="">
[20:32:28.809]      // if-block "powered_down"
[20:32:28.809]        // =>  TRUE
[20:32:28.809]      <block atomic="false" info="">
[20:32:28.809]        Message(0, "Debug/System power-up request sent");
[20:32:28.812]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:32:28.814]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:32:28.814]      </block>
[20:32:28.814]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:32:28.814]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:32:28.814]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:32:28.814]        // while-condition  =>  FALSE
[20:32:28.815]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:32:28.815]      </control>
[20:32:28.815]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:32:28.815]        // if-block "(__protocol & 0xFFFF) == 1"
[20:32:28.815]          // =>  FALSE
[20:32:28.815]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:32:28.815]      </control>
[20:32:28.815]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:32:28.815]        // if-block "(__protocol & 0xFFFF) == 2"
[20:32:28.816]          // =>  TRUE
[20:32:28.816]        <block atomic="false" info="">
[20:32:28.816]          Message(0, "executing SWD power up");
[20:32:28.817]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:32:28.818]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:32:28.818]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:32:28.818]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:32:28.819]        </block>
[20:32:28.819]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:32:28.819]      </control>
[20:32:28.819]      // end if-block "powered_down"
[20:32:28.819]    </control>
[20:32:28.819]    <block atomic="false" info="">
[20:32:28.819]      __var DEBUG_PORT_VAL    = 0;
[20:32:28.819]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:32:28.819]      __var ACCESS_POINT_VAL  = 0;
[20:32:28.819]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:32:28.819]      __ap = 1; 
[20:32:28.820]        // -> [__ap <= 0x00000001]
[20:32:28.820]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:32:28.821]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:32:28.821]      __ap = 4;
[20:32:28.821]        // -> [__ap <= 0x00000004]
[20:32:28.821]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:32:28.822]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:32:28.822]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:32:28.822]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:32:28.824]    </block>
[20:32:28.824]    <block atomic="false" info="">
[20:32:28.824]      __var nReset = 0x80;
[20:32:28.824]        // -> [nReset <= 0x00000080]
[20:32:28.824]      __var canReadPins = 0;
[20:32:28.824]        // -> [canReadPins <= 0x00000000]
[20:32:28.824]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:32:28.825]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:32:28.825]        // -> [canReadPins <= 0x00000001]
[20:32:28.825]    </block>
[20:32:28.825]    <control if="" while="1" timeout="200" info="">
[20:32:28.825]      // while "1"  (timeout="200")
[20:32:28.825]      // while-condition  =>  TRUE
[20:32:28.826]      // while "1"  (timeout="200")
[20:32:28.826]      // while-condition  =>  TRUE
[20:32:28.826]      // while "1"  (timeout="200")
[20:32:28.826]      // while-condition  =>  TRUE
[20:32:28.826]      // while "1"  (timeout="200")
[20:32:28.826]      // while-condition  =>  TRUE
[20:32:28.826]      // while "1"  (timeout="200")
[20:32:28.826]      // while-condition  =>  TRUE
[20:32:28.827]      // while "1"  (timeout="200")
[20:32:28.827]      // while-condition  =>  TRUE
[20:32:28.827]      // while "1"  (timeout="200")
[20:32:28.827]      // while-condition  =>  TRUE
[20:32:28.828]      // while "1"  (timeout="200")
[20:32:28.828]      // while-condition  =>  TRUE
[20:32:28.828]      // while "1"  (timeout="200")
[20:32:28.828]      // while-condition  =>  TRUE
[20:32:28.828]      // while "1"  (timeout="200")
[20:32:28.828]      // while-condition  =>  TRUE
[20:32:28.828]      // while "1"  (timeout="200")
[20:32:28.828]      // while-condition  =>  TRUE
[20:32:28.828]      // while "1"  (timeout="200")
[20:32:28.829]      // while-condition  =>  TRUE
[20:32:28.829]      // while "1"  (timeout="200")
[20:32:28.829]      // while-condition  =>  TRUE
[20:32:28.829]      // while "1"  (timeout="200")
[20:32:28.829]      // while-condition  =>  TRUE
[20:32:28.829]      // while "1"  (timeout="200")
[20:32:28.829]      // while-condition  =>  TRUE
[20:32:28.829]      // while "1"  (timeout="200")
[20:32:28.829]      // while-condition  =>  TRUE
[20:32:28.829]      // while "1"  (timeout="200")
[20:32:28.830]      // while-condition  =>  TRUE
[20:32:28.830]      // while "1"  (timeout="200")
[20:32:28.830]      // while-condition  =>  TRUE
[20:32:28.830]      // while "1"  (timeout="200")
[20:32:28.830]      // while-condition  =>  TRUE
[20:32:28.830]      // while "1"  (timeout="200")
[20:32:28.830]      // while-condition  =>  TRUE
[20:32:28.830]      // while "1"  (timeout="200")
[20:32:28.830]      // while-condition  =>  TRUE
[20:32:28.831]      // while "1"  (timeout="200")
[20:32:28.831]      // while-condition  =>  TRUE
[20:32:28.831]      // while "1"  (timeout="200")
[20:32:28.831]      // while-condition  =>  TRUE
[20:32:28.831]      // while "1"  (timeout="200")
[20:32:28.831]      // while-condition  =>  TRUE
[20:32:28.831]      // while "1"  (timeout="200")
[20:32:28.831]      // while-condition  =>  TRUE
[20:32:28.831]      // while "1"  (timeout="200")
[20:32:28.831]      // while-condition  =>  TRUE
[20:32:28.831]      // while "1"  (timeout="200")
[20:32:28.832]      // while-condition  =>  TRUE
[20:32:28.832]      // while "1"  (timeout="200")
[20:32:28.832]      // while  =>  TIMEOUT
[20:32:28.832]      // end while "1"
[20:32:28.832]    </control>
[20:32:28.832]    <control if="canReadPins" while="" timeout="0" info="">
[20:32:28.832]      // if-block "canReadPins"
[20:32:28.832]        // =>  TRUE
[20:32:28.832]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:32:28.832]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:32:28.833]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:32:28.833]        // while-condition  =>  FALSE
[20:32:28.833]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:32:28.833]      </control>
[20:32:28.833]      // end if-block "canReadPins"
[20:32:28.833]    </control>
[20:32:28.833]    <control if="!canReadPins" while="" timeout="0" info="">
[20:32:28.833]      // if-block "!canReadPins"
[20:32:28.833]        // =>  FALSE
[20:32:28.833]      // skip if-block "!canReadPins"
[20:32:28.834]    </control>
[20:32:28.834]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:32:28.834]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:32:28.834]        // =>  TRUE
[20:32:28.834]      <block atomic="false" info="">
[20:32:28.834]        WriteAP(0x00, 0x190008);
[20:32:28.835]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:32:28.835]        WriteAP(0xF0, 0x01);
[20:32:28.836]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:32:28.836]      </block>
[20:32:28.836]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:32:28.836]    </control>
[20:32:28.837]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:32:28.837]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:32:28.837]        // =>  FALSE
[20:32:28.837]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:32:28.837]    </control>
[20:32:28.837]    <block atomic="false" info="">
[20:32:28.837]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:32:28.839]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:32:28.839]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:32:28.839]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:32:28.840]      __ap = 0; //lets make sure we reset the access point selection
[20:32:28.841]        // -> [__ap <= 0x00000000]
[20:32:28.841]    </block>
[20:32:28.841]  </sequence>
[20:32:28.841]  
[20:32:28.848]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:32:28.848]  
[20:32:28.848]  <debugvars>
[20:32:28.848]    // Pre-defined
[20:32:28.848]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:32:28.848]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:32:28.848]    __dp=0x00000000
[20:32:28.848]    __ap=0x00000000
[20:32:28.848]    __traceout=0x00000000      (Trace Disabled)
[20:32:28.849]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:32:28.849]    __FlashAddr=0x00000000
[20:32:28.849]    __FlashLen=0x00000000
[20:32:28.849]    __FlashArg=0x00000000
[20:32:28.849]    __FlashOp=0x00000000
[20:32:28.849]    __Result=0x00000000
[20:32:28.849]  </debugvars>
[20:32:28.849]  
[20:32:28.849]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:32:28.849]    <block atomic="false" info="">
[20:32:28.849]      __var deviceID = 0;
[20:32:28.850]        // -> [deviceID <= 0x00000000]
[20:32:28.850]      __var version = 0;
[20:32:28.850]        // -> [version <= 0x00000000]
[20:32:28.850]      __var partNum = 0;
[20:32:28.850]        // -> [partNum <= 0x00000000]
[20:32:28.850]      __var manuf = 0;
[20:32:28.850]        // -> [manuf <= 0x00000000]
[20:32:28.850]      __var isMSPM0G1X0X_G3X0X = 0;
[20:32:28.850]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:32:28.850]      __var isProduction = 0;
[20:32:28.850]        // -> [isProduction <= 0x00000000]
[20:32:28.850]      __var continueId = 0;
[20:32:28.850]        // -> [continueId <= 0x00000000]
[20:32:28.850]      deviceID =   Read32(0x41C40004);
[20:32:28.852]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:32:28.852]        // -> [deviceID <= 0x2BB8802F]
[20:32:28.853]      version = deviceID >> 28;
[20:32:28.853]        // -> [version <= 0x00000002]
[20:32:28.853]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:32:28.853]        // -> [partNum <= 0x0000BB88]
[20:32:28.853]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:32:28.853]        // -> [manuf <= 0x00000017]
[20:32:28.853]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:32:28.853]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:32:28.853]      isProduction = (version > 0);
[20:32:28.853]        // -> [isProduction <= 0x00000001]
[20:32:28.853]    </block>
[20:32:28.853]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:32:28.853]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:32:28.854]        // =>  FALSE
[20:32:28.854]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:32:28.854]    </control>
[20:32:28.854]    <control if="continueId == 4" while="" timeout="0" info="">
[20:32:28.854]      // if-block "continueId == 4"
[20:32:28.854]        // =>  FALSE
[20:32:28.855]      // skip if-block "continueId == 4"
[20:32:28.855]    </control>
[20:32:28.855]    <control if="!isProduction" while="" timeout="0" info="">
[20:32:28.855]      // if-block "!isProduction"
[20:32:28.855]        // =>  FALSE
[20:32:28.855]      // skip if-block "!isProduction"
[20:32:28.856]    </control>
[20:32:28.856]  </sequence>
[20:32:28.856]  
[20:33:20.967]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:33:20.967]  
[20:33:20.967]  <debugvars>
[20:33:20.968]    // Pre-defined
[20:33:20.968]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:33:20.968]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:33:20.968]    __dp=0x00000000
[20:33:20.968]    __ap=0x00000000
[20:33:20.968]    __traceout=0x00000000      (Trace Disabled)
[20:33:20.969]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:33:20.969]    __FlashAddr=0x00000000
[20:33:20.969]    __FlashLen=0x00000000
[20:33:20.969]    __FlashArg=0x00000000
[20:33:20.969]    __FlashOp=0x00000000
[20:33:20.969]    __Result=0x00000000
[20:33:20.969]  </debugvars>
[20:33:20.969]  
[20:33:20.969]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:33:20.970]    <block atomic="false" info="">
[20:33:20.970]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:33:20.970]        // -> [isSWJ <= 0x00000001]
[20:33:20.970]      __var hasDormant = __protocol & 0x00020000;
[20:33:20.970]        // -> [hasDormant <= 0x00000000]
[20:33:20.970]      __var protType   = __protocol & 0x0000FFFF;
[20:33:20.970]        // -> [protType <= 0x00000002]
[20:33:20.970]    </block>
[20:33:20.970]    <control if="protType == 1" while="" timeout="0" info="">
[20:33:20.970]      // if-block "protType == 1"
[20:33:20.970]        // =>  FALSE
[20:33:20.970]      // skip if-block "protType == 1"
[20:33:20.970]    </control>
[20:33:20.971]    <control if="protType == 2" while="" timeout="0" info="">
[20:33:20.971]      // if-block "protType == 2"
[20:33:20.972]        // =>  TRUE
[20:33:20.972]      <control if="isSWJ" while="" timeout="0" info="">
[20:33:20.972]        // if-block "isSWJ"
[20:33:20.972]          // =>  TRUE
[20:33:20.972]        <control if="hasDormant" while="" timeout="0" info="">
[20:33:20.972]          // if-block "hasDormant"
[20:33:20.972]            // =>  FALSE
[20:33:20.972]          // skip if-block "hasDormant"
[20:33:20.973]        </control>
[20:33:20.973]        <control if="!hasDormant" while="" timeout="0" info="">
[20:33:20.973]          // if-block "!hasDormant"
[20:33:20.973]            // =>  TRUE
[20:33:20.973]          <block atomic="false" info="">
[20:33:20.973]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:33:20.973]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:33:20.974]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:33:20.974]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:33:20.974]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:33:20.975]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:33:20.975]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:33:20.975]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:33:20.975]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:33:20.976]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:33:20.976]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:33:20.976]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:33:20.976]          </block>
[20:33:20.976]          // end if-block "!hasDormant"
[20:33:20.976]        </control>
[20:33:20.976]        // end if-block "isSWJ"
[20:33:20.976]      </control>
[20:33:20.976]      <control if="!isSWJ" while="" timeout="0" info="">
[20:33:20.976]        // if-block "!isSWJ"
[20:33:20.977]          // =>  FALSE
[20:33:20.977]        // skip if-block "!isSWJ"
[20:33:20.977]      </control>
[20:33:20.977]      <block atomic="false" info="">
[20:33:20.977]        ReadDP(0x0);
[20:33:20.977]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:33:20.977]      </block>
[20:33:20.978]      // end if-block "protType == 2"
[20:33:20.978]    </control>
[20:33:20.978]  </sequence>
[20:33:20.978]  
[20:33:20.978]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:33:20.978]  
[20:33:20.978]  <debugvars>
[20:33:20.979]    // Pre-defined
[20:33:20.979]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:33:20.979]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:33:20.979]    __dp=0x00000000
[20:33:20.979]    __ap=0x00000000
[20:33:20.979]    __traceout=0x00000000      (Trace Disabled)
[20:33:20.979]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:33:20.979]    __FlashAddr=0x00000000
[20:33:20.979]    __FlashLen=0x00000000
[20:33:20.980]    __FlashArg=0x00000000
[20:33:20.980]    __FlashOp=0x00000000
[20:33:20.980]    __Result=0x00000000
[20:33:20.980]  </debugvars>
[20:33:20.980]  
[20:33:20.980]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:33:20.980]    <block atomic="false" info="">
[20:33:20.980]      __var SW_DP_ABORT       = 0x0;
[20:33:20.980]        // -> [SW_DP_ABORT <= 0x00000000]
[20:33:20.981]      __var DP_CTRL_STAT      = 0x4;
[20:33:20.981]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:33:20.981]      __var DP_SELECT         = 0x8;
[20:33:20.981]        // -> [DP_SELECT <= 0x00000008]
[20:33:20.981]      __var powered_down      = 0;
[20:33:20.981]        // -> [powered_down <= 0x00000000]
[20:33:20.981]      WriteDP(DP_SELECT, 0x00000000);
[20:33:20.982]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:33:20.982]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:33:20.982]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:33:20.983]        // -> [powered_down <= 0x00000001]
[20:33:20.983]    </block>
[20:33:20.983]    <control if="powered_down" while="" timeout="0" info="">
[20:33:20.983]      // if-block "powered_down"
[20:33:20.983]        // =>  TRUE
[20:33:20.983]      <block atomic="false" info="">
[20:33:20.983]        Message(0, "Debug/System power-up request sent");
[20:33:20.986]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:33:20.987]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:33:20.987]      </block>
[20:33:20.987]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:33:20.987]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:33:20.989]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:33:20.989]        // while-condition  =>  FALSE
[20:33:20.989]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:33:20.989]      </control>
[20:33:20.989]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:33:20.990]        // if-block "(__protocol & 0xFFFF) == 1"
[20:33:20.990]          // =>  FALSE
[20:33:20.990]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:33:20.990]      </control>
[20:33:20.990]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:33:20.990]        // if-block "(__protocol & 0xFFFF) == 2"
[20:33:20.990]          // =>  TRUE
[20:33:20.990]        <block atomic="false" info="">
[20:33:20.990]          Message(0, "executing SWD power up");
[20:33:20.992]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:33:20.992]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:33:20.992]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:33:20.993]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:33:20.993]        </block>
[20:33:20.993]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:33:20.993]      </control>
[20:33:20.993]      // end if-block "powered_down"
[20:33:20.993]    </control>
[20:33:20.993]    <block atomic="false" info="">
[20:33:20.993]      __var DEBUG_PORT_VAL    = 0;
[20:33:20.993]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:33:20.995]      __var ACCESS_POINT_VAL  = 0;
[20:33:20.995]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:33:20.995]      __ap = 1; 
[20:33:20.995]        // -> [__ap <= 0x00000001]
[20:33:20.995]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:33:20.996]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:33:20.996]      __ap = 4;
[20:33:20.996]        // -> [__ap <= 0x00000004]
[20:33:20.996]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:33:20.997]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:33:20.998]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:33:20.998]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:33:20.999]    </block>
[20:33:20.999]    <block atomic="false" info="">
[20:33:20.999]      __var nReset = 0x80;
[20:33:21.000]        // -> [nReset <= 0x00000080]
[20:33:21.000]      __var canReadPins = 0;
[20:33:21.000]        // -> [canReadPins <= 0x00000000]
[20:33:21.000]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:33:21.000]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:33:21.000]        // -> [canReadPins <= 0x00000001]
[20:33:21.000]    </block>
[20:33:21.001]    <control if="" while="1" timeout="200" info="">
[20:33:21.001]      // while "1"  (timeout="200")
[20:33:21.001]      // while-condition  =>  TRUE
[20:33:21.001]      // while "1"  (timeout="200")
[20:33:21.001]      // while-condition  =>  TRUE
[20:33:21.001]      // while "1"  (timeout="200")
[20:33:21.001]      // while-condition  =>  TRUE
[20:33:21.001]      // while "1"  (timeout="200")
[20:33:21.002]      // while-condition  =>  TRUE
[20:33:21.002]      // while "1"  (timeout="200")
[20:33:21.002]      // while-condition  =>  TRUE
[20:33:21.002]      // while "1"  (timeout="200")
[20:33:21.002]      // while-condition  =>  TRUE
[20:33:21.002]      // while "1"  (timeout="200")
[20:33:21.002]      // while-condition  =>  TRUE
[20:33:21.002]      // while "1"  (timeout="200")
[20:33:21.002]      // while-condition  =>  TRUE
[20:33:21.002]      // while "1"  (timeout="200")
[20:33:21.002]      // while-condition  =>  TRUE
[20:33:21.002]      // while "1"  (timeout="200")
[20:33:21.002]      // while-condition  =>  TRUE
[20:33:21.004]      // while "1"  (timeout="200")
[20:33:21.004]      // while  =>  TIMEOUT
[20:33:21.004]      // end while "1"
[20:33:21.004]    </control>
[20:33:21.004]    <control if="canReadPins" while="" timeout="0" info="">
[20:33:21.004]      // if-block "canReadPins"
[20:33:21.004]        // =>  TRUE
[20:33:21.004]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:33:21.004]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:33:21.005]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:33:21.005]        // while-condition  =>  FALSE
[20:33:21.005]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:33:21.005]      </control>
[20:33:21.005]      // end if-block "canReadPins"
[20:33:21.005]    </control>
[20:33:21.005]    <control if="!canReadPins" while="" timeout="0" info="">
[20:33:21.005]      // if-block "!canReadPins"
[20:33:21.006]        // =>  FALSE
[20:33:21.006]      // skip if-block "!canReadPins"
[20:33:21.006]    </control>
[20:33:21.006]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:33:21.006]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:33:21.006]        // =>  TRUE
[20:33:21.006]      <block atomic="false" info="">
[20:33:21.006]        WriteAP(0x00, 0x190008);
[20:33:21.007]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:33:21.007]        WriteAP(0xF0, 0x01);
[20:33:21.008]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:33:21.008]      </block>
[20:33:21.008]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:33:21.008]    </control>
[20:33:21.008]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:33:21.008]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:33:21.009]        // =>  FALSE
[20:33:21.009]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:33:21.009]    </control>
[20:33:21.009]    <block atomic="false" info="">
[20:33:21.009]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:33:21.011]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:33:21.011]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:33:21.011]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:33:21.013]      __ap = 0; //lets make sure we reset the access point selection
[20:33:21.013]        // -> [__ap <= 0x00000000]
[20:33:21.013]    </block>
[20:33:21.013]  </sequence>
[20:33:21.013]  
[20:33:21.020]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:33:21.020]  
[20:33:21.020]  <debugvars>
[20:33:21.020]    // Pre-defined
[20:33:21.020]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:33:21.020]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[20:33:21.020]    __dp=0x00000000
[20:33:21.020]    __ap=0x00000000
[20:33:21.022]    __traceout=0x00000000      (Trace Disabled)
[20:33:21.022]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:33:21.022]    __FlashAddr=0x00000000
[20:33:21.022]    __FlashLen=0x00000000
[20:33:21.022]    __FlashArg=0x00000000
[20:33:21.022]    __FlashOp=0x00000000
[20:33:21.022]    __Result=0x00000000
[20:33:21.022]  </debugvars>
[20:33:21.022]  
[20:33:21.022]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:33:21.023]    <block atomic="false" info="">
[20:33:21.023]      __var deviceID = 0;
[20:33:21.023]        // -> [deviceID <= 0x00000000]
[20:33:21.023]      __var version = 0;
[20:33:21.023]        // -> [version <= 0x00000000]
[20:33:21.023]      __var partNum = 0;
[20:33:21.023]        // -> [partNum <= 0x00000000]
[20:33:21.023]      __var manuf = 0;
[20:33:21.023]        // -> [manuf <= 0x00000000]
[20:33:21.023]      __var isMSPM0G1X0X_G3X0X = 0;
[20:33:21.023]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:33:21.024]      __var isProduction = 0;
[20:33:21.024]        // -> [isProduction <= 0x00000000]
[20:33:21.024]      __var continueId = 0;
[20:33:21.024]        // -> [continueId <= 0x00000000]
[20:33:21.024]      deviceID =   Read32(0x41C40004);
[20:33:21.026]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:33:21.026]        // -> [deviceID <= 0x2BB8802F]
[20:33:21.026]      version = deviceID >> 28;
[20:33:21.026]        // -> [version <= 0x00000002]
[20:33:21.026]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:33:21.026]        // -> [partNum <= 0x0000BB88]
[20:33:21.026]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:33:21.026]        // -> [manuf <= 0x00000017]
[20:33:21.026]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:33:21.026]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:33:21.026]      isProduction = (version > 0);
[20:33:21.027]        // -> [isProduction <= 0x00000001]
[20:33:21.027]    </block>
[20:33:21.027]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:33:21.027]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:33:21.027]        // =>  FALSE
[20:33:21.027]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:33:21.027]    </control>
[20:33:21.028]    <control if="continueId == 4" while="" timeout="0" info="">
[20:33:21.028]      // if-block "continueId == 4"
[20:33:21.028]        // =>  FALSE
[20:33:21.028]      // skip if-block "continueId == 4"
[20:33:21.028]    </control>
[20:33:21.028]    <control if="!isProduction" while="" timeout="0" info="">
[20:33:21.028]      // if-block "!isProduction"
[20:33:21.028]        // =>  FALSE
[20:33:21.028]      // skip if-block "!isProduction"
[20:33:21.028]    </control>
[20:33:21.028]  </sequence>
[20:33:21.028]  
[20:34:15.073]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[20:34:15.073]  
[20:34:15.082]  <debugvars>
[20:34:15.082]    // Pre-defined
[20:34:15.082]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:15.082]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:15.082]    __dp=0x00000000
[20:34:15.082]    __ap=0x00000000
[20:34:15.082]    __traceout=0x00000000      (Trace Disabled)
[20:34:15.082]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:15.082]    __FlashAddr=0x00000000
[20:34:15.082]    __FlashLen=0x00000000
[20:34:15.082]    __FlashArg=0x00000000
[20:34:15.082]    __FlashOp=0x00000000
[20:34:15.082]    __Result=0x00000000
[20:34:15.082]  </debugvars>
[20:34:15.082]  
[20:34:15.082]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:34:15.083]    <block atomic="false" info="">
[20:34:15.083]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:34:15.083]        // -> [isSWJ <= 0x00000001]
[20:34:15.083]      __var hasDormant = __protocol & 0x00020000;
[20:34:15.083]        // -> [hasDormant <= 0x00000000]
[20:34:15.083]      __var protType   = __protocol & 0x0000FFFF;
[20:34:15.083]        // -> [protType <= 0x00000002]
[20:34:15.083]    </block>
[20:34:15.083]    <control if="protType == 1" while="" timeout="0" info="">
[20:34:15.083]      // if-block "protType == 1"
[20:34:15.083]        // =>  FALSE
[20:34:15.083]      // skip if-block "protType == 1"
[20:34:15.083]    </control>
[20:34:15.085]    <control if="protType == 2" while="" timeout="0" info="">
[20:34:15.085]      // if-block "protType == 2"
[20:34:15.085]        // =>  TRUE
[20:34:15.085]      <control if="isSWJ" while="" timeout="0" info="">
[20:34:15.086]        // if-block "isSWJ"
[20:34:15.086]          // =>  TRUE
[20:34:15.086]        <control if="hasDormant" while="" timeout="0" info="">
[20:34:15.086]          // if-block "hasDormant"
[20:34:15.086]            // =>  FALSE
[20:34:15.086]          // skip if-block "hasDormant"
[20:34:15.086]        </control>
[20:34:15.086]        <control if="!hasDormant" while="" timeout="0" info="">
[20:34:15.086]          // if-block "!hasDormant"
[20:34:15.087]            // =>  TRUE
[20:34:15.087]          <block atomic="false" info="">
[20:34:15.087]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:34:15.087]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:34:15.087]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[20:34:15.088]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[20:34:15.088]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[20:34:15.088]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:34:15.089]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[20:34:15.089]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[20:34:15.089]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[20:34:15.089]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[20:34:15.089]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[20:34:15.089]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[20:34:15.089]          </block>
[20:34:15.089]          // end if-block "!hasDormant"
[20:34:15.089]        </control>
[20:34:15.090]        // end if-block "isSWJ"
[20:34:15.090]      </control>
[20:34:15.090]      <control if="!isSWJ" while="" timeout="0" info="">
[20:34:15.090]        // if-block "!isSWJ"
[20:34:15.090]          // =>  FALSE
[20:34:15.090]        // skip if-block "!isSWJ"
[20:34:15.090]      </control>
[20:34:15.090]      <block atomic="false" info="">
[20:34:15.090]        ReadDP(0x0);
[20:34:15.091]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[20:34:15.091]      </block>
[20:34:15.091]      // end if-block "protType == 2"
[20:34:15.091]    </control>
[20:34:15.091]  </sequence>
[20:34:15.091]  
[20:34:15.092]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[20:34:15.092]  
[20:34:15.092]  <debugvars>
[20:34:15.092]    // Pre-defined
[20:34:15.092]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:15.092]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:15.092]    __dp=0x00000000
[20:34:15.092]    __ap=0x00000000
[20:34:15.093]    __traceout=0x00000000      (Trace Disabled)
[20:34:15.093]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:15.093]    __FlashAddr=0x00000000
[20:34:15.093]    __FlashLen=0x00000000
[20:34:15.093]    __FlashArg=0x00000000
[20:34:15.093]    __FlashOp=0x00000000
[20:34:15.093]    __Result=0x00000000
[20:34:15.093]  </debugvars>
[20:34:15.093]  
[20:34:15.093]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[20:34:15.095]    <block atomic="false" info="">
[20:34:15.095]      __var SW_DP_ABORT       = 0x0;
[20:34:15.095]        // -> [SW_DP_ABORT <= 0x00000000]
[20:34:15.095]      __var DP_CTRL_STAT      = 0x4;
[20:34:15.095]        // -> [DP_CTRL_STAT <= 0x00000004]
[20:34:15.095]      __var DP_SELECT         = 0x8;
[20:34:15.095]        // -> [DP_SELECT <= 0x00000008]
[20:34:15.095]      __var powered_down      = 0;
[20:34:15.095]        // -> [powered_down <= 0x00000000]
[20:34:15.095]      WriteDP(DP_SELECT, 0x00000000);
[20:34:15.096]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[20:34:15.097]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[20:34:15.097]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[20:34:15.097]        // -> [powered_down <= 0x00000001]
[20:34:15.097]    </block>
[20:34:15.097]    <control if="powered_down" while="" timeout="0" info="">
[20:34:15.097]      // if-block "powered_down"
[20:34:15.097]        // =>  TRUE
[20:34:15.097]      <block atomic="false" info="">
[20:34:15.097]        Message(0, "Debug/System power-up request sent");
[20:34:15.099]        WriteDP(DP_CTRL_STAT, 0x50000000);
[20:34:15.100]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[20:34:15.100]      </block>
[20:34:15.100]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[20:34:15.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[20:34:15.100]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[20:34:15.100]        // while-condition  =>  FALSE
[20:34:15.101]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[20:34:15.101]      </control>
[20:34:15.101]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[20:34:15.101]        // if-block "(__protocol & 0xFFFF) == 1"
[20:34:15.101]          // =>  FALSE
[20:34:15.101]        // skip if-block "(__protocol & 0xFFFF) == 1"
[20:34:15.101]      </control>
[20:34:15.101]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[20:34:15.101]        // if-block "(__protocol & 0xFFFF) == 2"
[20:34:15.101]          // =>  TRUE
[20:34:15.102]        <block atomic="false" info="">
[20:34:15.102]          Message(0, "executing SWD power up");
[20:34:15.104]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[20:34:15.104]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[20:34:15.104]          WriteDP(SW_DP_ABORT, 0x0000001E);
[20:34:15.105]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[20:34:15.105]        </block>
[20:34:15.105]        // end if-block "(__protocol & 0xFFFF) == 2"
[20:34:15.105]      </control>
[20:34:15.105]      // end if-block "powered_down"
[20:34:15.105]    </control>
[20:34:15.105]    <block atomic="false" info="">
[20:34:15.106]      __var DEBUG_PORT_VAL    = 0;
[20:34:15.106]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[20:34:15.106]      __var ACCESS_POINT_VAL  = 0;
[20:34:15.106]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[20:34:15.106]      __ap = 1; 
[20:34:15.106]        // -> [__ap <= 0x00000001]
[20:34:15.106]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[20:34:15.107]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[20:34:15.108]      __ap = 4;
[20:34:15.108]        // -> [__ap <= 0x00000004]
[20:34:15.108]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:34:15.109]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[20:34:15.109]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[20:34:15.109]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:34:15.111]    </block>
[20:34:15.111]    <block atomic="false" info="">
[20:34:15.111]      __var nReset = 0x80;
[20:34:15.111]        // -> [nReset <= 0x00000080]
[20:34:15.111]      __var canReadPins = 0;
[20:34:15.111]        // -> [canReadPins <= 0x00000000]
[20:34:15.111]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[20:34:15.112]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[20:34:15.112]        // -> [canReadPins <= 0x00000001]
[20:34:15.112]    </block>
[20:34:15.112]    <control if="" while="1" timeout="200" info="">
[20:34:15.112]      // while "1"  (timeout="200")
[20:34:15.112]      // while-condition  =>  TRUE
[20:34:15.112]      // while "1"  (timeout="200")
[20:34:15.112]      // while-condition  =>  TRUE
[20:34:15.113]      // while "1"  (timeout="200")
[20:34:15.113]      // while-condition  =>  TRUE
[20:34:15.113]      // while "1"  (timeout="200")
[20:34:15.113]      // while-condition  =>  TRUE
[20:34:15.113]      // while "1"  (timeout="200")
[20:34:15.113]      // while-condition  =>  TRUE
[20:34:15.113]      // while "1"  (timeout="200")
[20:34:15.114]      // while-condition  =>  TRUE
[20:34:15.114]      // while "1"  (timeout="200")
[20:34:15.114]      // while  =>  TIMEOUT
[20:34:15.115]      // end while "1"
[20:34:15.115]    </control>
[20:34:15.115]    <control if="canReadPins" while="" timeout="0" info="">
[20:34:15.115]      // if-block "canReadPins"
[20:34:15.115]        // =>  TRUE
[20:34:15.115]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[20:34:15.115]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[20:34:15.116]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[20:34:15.116]        // while-condition  =>  FALSE
[20:34:15.116]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[20:34:15.116]      </control>
[20:34:15.116]      // end if-block "canReadPins"
[20:34:15.116]    </control>
[20:34:15.116]    <control if="!canReadPins" while="" timeout="0" info="">
[20:34:15.116]      // if-block "!canReadPins"
[20:34:15.116]        // =>  FALSE
[20:34:15.116]      // skip if-block "!canReadPins"
[20:34:15.117]    </control>
[20:34:15.117]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[20:34:15.117]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:34:15.117]        // =>  TRUE
[20:34:15.117]      <block atomic="false" info="">
[20:34:15.117]        WriteAP(0x00, 0x190008);
[20:34:15.118]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[20:34:15.118]        WriteAP(0xF0, 0x01);
[20:34:15.119]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[20:34:15.119]      </block>
[20:34:15.119]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[20:34:15.119]    </control>
[20:34:15.119]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[20:34:15.119]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:34:15.120]        // =>  FALSE
[20:34:15.120]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[20:34:15.120]    </control>
[20:34:15.120]    <block atomic="false" info="">
[20:34:15.120]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[20:34:15.121]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[20:34:15.121]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[20:34:15.121]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[20:34:15.122]      __ap = 0; //lets make sure we reset the access point selection
[20:34:15.122]        // -> [__ap <= 0x00000000]
[20:34:15.122]    </block>
[20:34:15.122]  </sequence>
[20:34:15.122]  
[20:34:15.128]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[20:34:15.128]  
[20:34:15.128]  <debugvars>
[20:34:15.129]    // Pre-defined
[20:34:15.129]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:15.129]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:15.129]    __dp=0x00000000
[20:34:15.129]    __ap=0x00000000
[20:34:15.129]    __traceout=0x00000000      (Trace Disabled)
[20:34:15.129]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:15.129]    __FlashAddr=0x00000000
[20:34:15.129]    __FlashLen=0x00000000
[20:34:15.129]    __FlashArg=0x00000000
[20:34:15.129]    __FlashOp=0x00000000
[20:34:15.129]    __Result=0x00000000
[20:34:15.129]  </debugvars>
[20:34:15.129]  
[20:34:15.131]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[20:34:15.131]    <block atomic="false" info="">
[20:34:15.131]      __var deviceID = 0;
[20:34:15.131]        // -> [deviceID <= 0x00000000]
[20:34:15.131]      __var version = 0;
[20:34:15.131]        // -> [version <= 0x00000000]
[20:34:15.131]      __var partNum = 0;
[20:34:15.131]        // -> [partNum <= 0x00000000]
[20:34:15.131]      __var manuf = 0;
[20:34:15.131]        // -> [manuf <= 0x00000000]
[20:34:15.131]      __var isMSPM0G1X0X_G3X0X = 0;
[20:34:15.132]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[20:34:15.132]      __var isProduction = 0;
[20:34:15.132]        // -> [isProduction <= 0x00000000]
[20:34:15.132]      __var continueId = 0;
[20:34:15.132]        // -> [continueId <= 0x00000000]
[20:34:15.132]      deviceID =   Read32(0x41C40004);
[20:34:15.134]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[20:34:15.134]        // -> [deviceID <= 0x2BB8802F]
[20:34:15.134]      version = deviceID >> 28;
[20:34:15.134]        // -> [version <= 0x00000002]
[20:34:15.134]      partNum = (deviceID & 0x0FFFF000) >> 12;
[20:34:15.134]        // -> [partNum <= 0x0000BB88]
[20:34:15.134]      manuf = (deviceID & 0x00000FFE) >> 1;
[20:34:15.134]        // -> [manuf <= 0x00000017]
[20:34:15.134]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[20:34:15.135]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[20:34:15.135]      isProduction = (version > 0);
[20:34:15.135]        // -> [isProduction <= 0x00000001]
[20:34:15.135]    </block>
[20:34:15.135]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[20:34:15.135]      // if-block "!isMSPM0G1X0X_G3X0X"
[20:34:15.135]        // =>  FALSE
[20:34:15.135]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[20:34:15.135]    </control>
[20:34:15.135]    <control if="continueId == 4" while="" timeout="0" info="">
[20:34:15.135]      // if-block "continueId == 4"
[20:34:15.135]        // =>  FALSE
[20:34:15.136]      // skip if-block "continueId == 4"
[20:34:15.136]    </control>
[20:34:15.136]    <control if="!isProduction" while="" timeout="0" info="">
[20:34:15.136]      // if-block "!isProduction"
[20:34:15.136]        // =>  FALSE
[20:34:15.136]      // skip if-block "!isProduction"
[20:34:15.136]    </control>
[20:34:15.136]  </sequence>
[20:34:15.136]  
[20:34:35.917]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[20:34:35.917]  
[20:34:35.917]  <debugvars>
[20:34:35.917]    // Pre-defined
[20:34:35.917]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:35.917]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:35.917]    __dp=0x00000000
[20:34:35.918]    __ap=0x00000000
[20:34:35.918]    __traceout=0x00000000      (Trace Disabled)
[20:34:35.918]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:35.918]    __FlashAddr=0x00000000
[20:34:35.918]    __FlashLen=0x00000000
[20:34:35.918]    __FlashArg=0x00000000
[20:34:35.918]    __FlashOp=0x00000000
[20:34:35.918]    __Result=0x00000000
[20:34:35.918]  </debugvars>
[20:34:35.918]  
[20:34:35.918]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:34:35.918]    <block atomic="false" info="">
[20:34:35.918]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:34:35.918]        // -> [isSWJ <= 0x00000001]
[20:34:35.919]      __var hasDormant = __protocol & 0x00020000;
[20:34:35.919]        // -> [hasDormant <= 0x00000000]
[20:34:35.919]      __var protType   = __protocol & 0x0000FFFF;
[20:34:35.919]        // -> [protType <= 0x00000002]
[20:34:35.919]    </block>
[20:34:35.919]    <control if="protType == 1" while="" timeout="0" info="">
[20:34:35.919]      // if-block "protType == 1"
[20:34:35.919]        // =>  FALSE
[20:34:35.919]      // skip if-block "protType == 1"
[20:34:35.919]    </control>
[20:34:35.920]    <control if="protType == 2" while="" timeout="0" info="">
[20:34:35.920]      // if-block "protType == 2"
[20:34:35.920]        // =>  TRUE
[20:34:35.920]      <control if="isSWJ" while="" timeout="0" info="">
[20:34:35.920]        // if-block "isSWJ"
[20:34:35.920]          // =>  TRUE
[20:34:35.920]        <control if="hasDormant" while="" timeout="0" info="">
[20:34:35.920]          // if-block "hasDormant"
[20:34:35.920]            // =>  FALSE
[20:34:35.920]          // skip if-block "hasDormant"
[20:34:35.921]        </control>
[20:34:35.921]        <control if="!hasDormant" while="" timeout="0" info="">
[20:34:35.921]          // if-block "!hasDormant"
[20:34:35.922]            // =>  TRUE
[20:34:35.922]          <block atomic="false" info="">
[20:34:35.922]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:34:36.941]  
[20:34:36.941]  !!! E320 : DAP access error
[20:34:36.941]  
[20:34:36.942]          </block>
[20:34:36.942]          // end if-block "!hasDormant"
[20:34:36.942]        </control>
[20:34:36.942]        // end if-block "isSWJ"
[20:34:36.942]      </control>
[20:34:36.942]      // end if-block "protType == 2"
[20:34:36.943]    </control>
[20:34:36.943]  </sequence>
[20:34:36.943]  
[20:34:37.002]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[20:34:37.002]  
[20:34:37.002]  <debugvars>
[20:34:37.002]    // Pre-defined
[20:34:37.003]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:37.003]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:37.003]    __dp=0x00000000
[20:34:37.003]    __ap=0x00000000
[20:34:37.003]    __traceout=0x00000000      (Trace Disabled)
[20:34:37.003]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:37.003]    __FlashAddr=0x00000000
[20:34:37.003]    __FlashLen=0x00000000
[20:34:37.003]    __FlashArg=0x00000000
[20:34:37.003]    __FlashOp=0x00000000
[20:34:37.003]    __Result=0x00000000
[20:34:37.003]  </debugvars>
[20:34:37.003]  
[20:34:37.003]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:34:37.003]    <block atomic="false" info="">
[20:34:37.004]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:34:37.004]        // -> [isSWJ <= 0x00000001]
[20:34:37.004]      __var hasDormant = __protocol & 0x00020000;
[20:34:37.004]        // -> [hasDormant <= 0x00000000]
[20:34:37.004]      __var protType   = __protocol & 0x0000FFFF;
[20:34:37.004]        // -> [protType <= 0x00000002]
[20:34:37.005]    </block>
[20:34:37.005]    <control if="protType == 1" while="" timeout="0" info="">
[20:34:37.005]      // if-block "protType == 1"
[20:34:37.005]        // =>  FALSE
[20:34:37.005]      // skip if-block "protType == 1"
[20:34:37.005]    </control>
[20:34:37.005]    <control if="protType == 2" while="" timeout="0" info="">
[20:34:37.005]      // if-block "protType == 2"
[20:34:37.005]        // =>  TRUE
[20:34:37.005]      <control if="isSWJ" while="" timeout="0" info="">
[20:34:37.005]        // if-block "isSWJ"
[20:34:37.005]          // =>  TRUE
[20:34:37.006]        <control if="hasDormant" while="" timeout="0" info="">
[20:34:37.006]          // if-block "hasDormant"
[20:34:37.006]            // =>  FALSE
[20:34:37.006]          // skip if-block "hasDormant"
[20:34:37.006]        </control>
[20:34:37.006]        <control if="!hasDormant" while="" timeout="0" info="">
[20:34:37.006]          // if-block "!hasDormant"
[20:34:37.006]            // =>  TRUE
[20:34:37.006]          <block atomic="false" info="">
[20:34:37.006]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:34:38.025]  
[20:34:38.025]  !!! E320 : DAP access error
[20:34:38.025]  
[20:34:38.033]          </block>
[20:34:38.033]          // end if-block "!hasDormant"
[20:34:38.033]        </control>
[20:34:38.035]        // end if-block "isSWJ"
[20:34:38.035]      </control>
[20:34:38.035]      // end if-block "protType == 2"
[20:34:38.035]    </control>
[20:34:38.035]  </sequence>
[20:34:38.036]  
[20:34:38.091]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[20:34:38.091]  
[20:34:38.091]  <debugvars>
[20:34:38.091]    // Pre-defined
[20:34:38.091]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:38.091]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:38.091]    __dp=0x00000000
[20:34:38.091]    __ap=0x00000000
[20:34:38.091]    __traceout=0x00000000      (Trace Disabled)
[20:34:38.092]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:38.092]    __FlashAddr=0x00000000
[20:34:38.092]    __FlashLen=0x00000000
[20:34:38.092]    __FlashArg=0x00000000
[20:34:38.092]    __FlashOp=0x00000000
[20:34:38.092]    __Result=0x00000000
[20:34:38.092]  </debugvars>
[20:34:38.093]  
[20:34:38.093]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:34:38.093]    <block atomic="false" info="">
[20:34:38.093]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:34:38.093]        // -> [isSWJ <= 0x00000001]
[20:34:38.093]      __var hasDormant = __protocol & 0x00020000;
[20:34:38.094]        // -> [hasDormant <= 0x00000000]
[20:34:38.094]      __var protType   = __protocol & 0x0000FFFF;
[20:34:38.094]        // -> [protType <= 0x00000002]
[20:34:38.095]    </block>
[20:34:38.095]    <control if="protType == 1" while="" timeout="0" info="">
[20:34:38.095]      // if-block "protType == 1"
[20:34:38.095]        // =>  FALSE
[20:34:38.095]      // skip if-block "protType == 1"
[20:34:38.095]    </control>
[20:34:38.095]    <control if="protType == 2" while="" timeout="0" info="">
[20:34:38.095]      // if-block "protType == 2"
[20:34:38.095]        // =>  TRUE
[20:34:38.096]      <control if="isSWJ" while="" timeout="0" info="">
[20:34:38.096]        // if-block "isSWJ"
[20:34:38.096]          // =>  TRUE
[20:34:38.096]        <control if="hasDormant" while="" timeout="0" info="">
[20:34:38.096]          // if-block "hasDormant"
[20:34:38.096]            // =>  FALSE
[20:34:38.096]          // skip if-block "hasDormant"
[20:34:38.096]        </control>
[20:34:38.096]        <control if="!hasDormant" while="" timeout="0" info="">
[20:34:38.096]          // if-block "!hasDormant"
[20:34:38.096]            // =>  TRUE
[20:34:38.096]          <block atomic="false" info="">
[20:34:38.096]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:34:39.119]  
[20:34:39.119]  !!! E320 : DAP access error
[20:34:39.119]  
[20:34:39.129]          </block>
[20:34:39.129]          // end if-block "!hasDormant"
[20:34:39.129]        </control>
[20:34:39.129]        // end if-block "isSWJ"
[20:34:39.129]      </control>
[20:34:39.130]      // end if-block "protType == 2"
[20:34:39.130]    </control>
[20:34:39.130]  </sequence>
[20:34:39.130]  
[20:34:39.191]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[20:34:39.191]  
[20:34:39.191]  <debugvars>
[20:34:39.191]    // Pre-defined
[20:34:39.191]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:39.191]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:39.191]    __dp=0x00000000
[20:34:39.192]    __ap=0x00000000
[20:34:39.192]    __traceout=0x00000000      (Trace Disabled)
[20:34:39.192]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:39.192]    __FlashAddr=0x00000000
[20:34:39.192]    __FlashLen=0x00000000
[20:34:39.192]    __FlashArg=0x00000000
[20:34:39.192]    __FlashOp=0x00000000
[20:34:39.192]    __Result=0x00000000
[20:34:39.192]  </debugvars>
[20:34:39.193]  
[20:34:39.193]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:34:39.193]    <block atomic="false" info="">
[20:34:39.193]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:34:39.193]        // -> [isSWJ <= 0x00000001]
[20:34:39.193]      __var hasDormant = __protocol & 0x00020000;
[20:34:39.193]        // -> [hasDormant <= 0x00000000]
[20:34:39.193]      __var protType   = __protocol & 0x0000FFFF;
[20:34:39.193]        // -> [protType <= 0x00000002]
[20:34:39.193]    </block>
[20:34:39.193]    <control if="protType == 1" while="" timeout="0" info="">
[20:34:39.195]      // if-block "protType == 1"
[20:34:39.195]        // =>  FALSE
[20:34:39.195]      // skip if-block "protType == 1"
[20:34:39.195]    </control>
[20:34:39.195]    <control if="protType == 2" while="" timeout="0" info="">
[20:34:39.195]      // if-block "protType == 2"
[20:34:39.195]        // =>  TRUE
[20:34:39.195]      <control if="isSWJ" while="" timeout="0" info="">
[20:34:39.196]        // if-block "isSWJ"
[20:34:39.196]          // =>  TRUE
[20:34:39.196]        <control if="hasDormant" while="" timeout="0" info="">
[20:34:39.196]          // if-block "hasDormant"
[20:34:39.196]            // =>  FALSE
[20:34:39.196]          // skip if-block "hasDormant"
[20:34:39.196]        </control>
[20:34:39.196]        <control if="!hasDormant" while="" timeout="0" info="">
[20:34:39.197]          // if-block "!hasDormant"
[20:34:39.197]            // =>  TRUE
[20:34:39.197]          <block atomic="false" info="">
[20:34:39.197]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:34:40.211]  
[20:34:40.211]  !!! E320 : DAP access error
[20:34:40.211]  
[20:34:40.221]          </block>
[20:34:40.222]          // end if-block "!hasDormant"
[20:34:40.222]        </control>
[20:34:40.222]        // end if-block "isSWJ"
[20:34:40.222]      </control>
[20:34:40.222]      // end if-block "protType == 2"
[20:34:40.222]    </control>
[20:34:40.222]  </sequence>
[20:34:40.222]  
[20:34:40.276]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[20:34:40.276]  
[20:34:40.276]  <debugvars>
[20:34:40.277]    // Pre-defined
[20:34:40.277]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:40.277]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:40.277]    __dp=0x00000000
[20:34:40.277]    __ap=0x00000000
[20:34:40.277]    __traceout=0x00000000      (Trace Disabled)
[20:34:40.277]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:40.277]    __FlashAddr=0x00000000
[20:34:40.277]    __FlashLen=0x00000000
[20:34:40.278]    __FlashArg=0x00000000
[20:34:40.278]    __FlashOp=0x00000000
[20:34:40.278]    __Result=0x00000000
[20:34:40.278]  </debugvars>
[20:34:40.278]  
[20:34:40.278]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:34:40.278]    <block atomic="false" info="">
[20:34:40.278]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:34:40.278]        // -> [isSWJ <= 0x00000001]
[20:34:40.278]      __var hasDormant = __protocol & 0x00020000;
[20:34:40.278]        // -> [hasDormant <= 0x00000000]
[20:34:40.279]      __var protType   = __protocol & 0x0000FFFF;
[20:34:40.279]        // -> [protType <= 0x00000002]
[20:34:40.279]    </block>
[20:34:40.279]    <control if="protType == 1" while="" timeout="0" info="">
[20:34:40.279]      // if-block "protType == 1"
[20:34:40.279]        // =>  FALSE
[20:34:40.279]      // skip if-block "protType == 1"
[20:34:40.279]    </control>
[20:34:40.279]    <control if="protType == 2" while="" timeout="0" info="">
[20:34:40.279]      // if-block "protType == 2"
[20:34:40.279]        // =>  TRUE
[20:34:40.281]      <control if="isSWJ" while="" timeout="0" info="">
[20:34:40.281]        // if-block "isSWJ"
[20:34:40.281]          // =>  TRUE
[20:34:40.281]        <control if="hasDormant" while="" timeout="0" info="">
[20:34:40.281]          // if-block "hasDormant"
[20:34:40.281]            // =>  FALSE
[20:34:40.281]          // skip if-block "hasDormant"
[20:34:40.281]        </control>
[20:34:40.281]        <control if="!hasDormant" while="" timeout="0" info="">
[20:34:40.282]          // if-block "!hasDormant"
[20:34:40.282]            // =>  TRUE
[20:34:40.282]          <block atomic="false" info="">
[20:34:40.282]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:34:41.297]  
[20:34:41.297]  !!! E320 : DAP access error
[20:34:41.297]  
[20:34:41.307]          </block>
[20:34:41.307]          // end if-block "!hasDormant"
[20:34:41.307]        </control>
[20:34:41.308]        // end if-block "isSWJ"
[20:34:41.308]      </control>
[20:34:41.308]      // end if-block "protType == 2"
[20:34:41.308]    </control>
[20:34:41.308]  </sequence>
[20:34:41.308]  
[20:34:41.360]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[20:34:41.360]  
[20:34:41.360]  <debugvars>
[20:34:41.360]    // Pre-defined
[20:34:41.360]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:41.361]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:41.361]    __dp=0x00000000
[20:34:41.361]    __ap=0x00000000
[20:34:41.361]    __traceout=0x00000000      (Trace Disabled)
[20:34:41.361]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:41.361]    __FlashAddr=0x00000000
[20:34:41.361]    __FlashLen=0x00000000
[20:34:41.361]    __FlashArg=0x00000000
[20:34:41.361]    __FlashOp=0x00000000
[20:34:41.361]    __Result=0x00000000
[20:34:41.363]  </debugvars>
[20:34:41.363]  
[20:34:41.363]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:34:41.363]    <block atomic="false" info="">
[20:34:41.363]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:34:41.363]        // -> [isSWJ <= 0x00000001]
[20:34:41.364]      __var hasDormant = __protocol & 0x00020000;
[20:34:41.364]        // -> [hasDormant <= 0x00000000]
[20:34:41.364]      __var protType   = __protocol & 0x0000FFFF;
[20:34:41.364]        // -> [protType <= 0x00000002]
[20:34:41.364]    </block>
[20:34:41.364]    <control if="protType == 1" while="" timeout="0" info="">
[20:34:41.364]      // if-block "protType == 1"
[20:34:41.365]        // =>  FALSE
[20:34:41.365]      // skip if-block "protType == 1"
[20:34:41.365]    </control>
[20:34:41.365]    <control if="protType == 2" while="" timeout="0" info="">
[20:34:41.365]      // if-block "protType == 2"
[20:34:41.365]        // =>  TRUE
[20:34:41.365]      <control if="isSWJ" while="" timeout="0" info="">
[20:34:41.366]        // if-block "isSWJ"
[20:34:41.366]          // =>  TRUE
[20:34:41.366]        <control if="hasDormant" while="" timeout="0" info="">
[20:34:41.366]          // if-block "hasDormant"
[20:34:41.366]            // =>  FALSE
[20:34:41.366]          // skip if-block "hasDormant"
[20:34:41.366]        </control>
[20:34:41.367]        <control if="!hasDormant" while="" timeout="0" info="">
[20:34:41.367]          // if-block "!hasDormant"
[20:34:41.367]            // =>  TRUE
[20:34:41.367]          <block atomic="false" info="">
[20:34:41.367]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:34:42.381]  
[20:34:42.381]  !!! E320 : DAP access error
[20:34:42.381]  
[20:34:42.391]          </block>
[20:34:42.392]          // end if-block "!hasDormant"
[20:34:42.393]        </control>
[20:34:42.393]        // end if-block "isSWJ"
[20:34:42.393]      </control>
[20:34:42.393]      // end if-block "protType == 2"
[20:34:42.393]    </control>
[20:34:42.393]  </sequence>
[20:34:42.393]  
[20:34:42.445]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[20:34:42.445]  
[20:34:42.446]  <debugvars>
[20:34:42.446]    // Pre-defined
[20:34:42.446]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:42.446]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:42.446]    __dp=0x00000000
[20:34:42.446]    __ap=0x00000000
[20:34:42.446]    __traceout=0x00000000      (Trace Disabled)
[20:34:42.447]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:42.447]    __FlashAddr=0x00000000
[20:34:42.447]    __FlashLen=0x00000000
[20:34:42.447]    __FlashArg=0x00000000
[20:34:42.447]    __FlashOp=0x00000000
[20:34:42.447]    __Result=0x00000000
[20:34:42.447]  </debugvars>
[20:34:42.447]  
[20:34:42.447]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:34:42.447]    <block atomic="false" info="">
[20:34:42.447]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:34:42.447]        // -> [isSWJ <= 0x00000001]
[20:34:42.448]      __var hasDormant = __protocol & 0x00020000;
[20:34:42.448]        // -> [hasDormant <= 0x00000000]
[20:34:42.448]      __var protType   = __protocol & 0x0000FFFF;
[20:34:42.448]        // -> [protType <= 0x00000002]
[20:34:42.448]    </block>
[20:34:42.448]    <control if="protType == 1" while="" timeout="0" info="">
[20:34:42.448]      // if-block "protType == 1"
[20:34:42.448]        // =>  FALSE
[20:34:42.448]      // skip if-block "protType == 1"
[20:34:42.449]    </control>
[20:34:42.449]    <control if="protType == 2" while="" timeout="0" info="">
[20:34:42.449]      // if-block "protType == 2"
[20:34:42.449]        // =>  TRUE
[20:34:42.449]      <control if="isSWJ" while="" timeout="0" info="">
[20:34:42.449]        // if-block "isSWJ"
[20:34:42.449]          // =>  TRUE
[20:34:42.449]        <control if="hasDormant" while="" timeout="0" info="">
[20:34:42.449]          // if-block "hasDormant"
[20:34:42.450]            // =>  FALSE
[20:34:42.450]          // skip if-block "hasDormant"
[20:34:42.450]        </control>
[20:34:42.450]        <control if="!hasDormant" while="" timeout="0" info="">
[20:34:42.450]          // if-block "!hasDormant"
[20:34:42.450]            // =>  TRUE
[20:34:42.450]          <block atomic="false" info="">
[20:34:42.450]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[20:34:44.434]  
[20:34:44.434]  !!! E320 : DAP access error
[20:34:44.434]  
[20:34:44.437]          </block>
[20:34:44.437]          // end if-block "!hasDormant"
[20:34:44.437]        </control>
[20:34:44.438]        // end if-block "isSWJ"
[20:34:44.438]      </control>
[20:34:44.438]      // end if-block "protType == 2"
[20:34:44.438]    </control>
[20:34:44.438]  </sequence>
[20:34:44.438]  
[20:34:44.692]  **********  Sequence "DebugPortSetup"  (Context="Recovery", Pname="", info="")
[20:34:44.692]  
[20:34:44.700]  <debugvars>
[20:34:44.700]    // Pre-defined
[20:34:44.700]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[20:34:44.700]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[20:34:44.700]    __dp=0x00000000
[20:34:44.700]    __ap=0x00000000
[20:34:44.700]    __traceout=0x00000000      (Trace Disabled)
[20:34:44.700]    __errorcontrol=0x00000000  (Skip Errors="False")
[20:34:44.700]    __FlashAddr=0x00000000
[20:34:44.701]    __FlashLen=0x00000000
[20:34:44.701]    __FlashArg=0x00000000
[20:34:44.701]    __FlashOp=0x00000000
[20:34:44.701]    __Result=0x00000000
[20:34:44.701]  </debugvars>
[20:34:44.701]  
[20:34:44.701]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[20:34:44.701]    <block atomic="false" info="">
[20:34:44.701]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[20:34:44.701]        // -> [isSWJ <= 0x00000001]
[20:34:44.701]      __var hasDormant = __protocol & 0x00020000;
[20:34:44.701]        // -> [hasDormant <= 0x00000000]
[20:34:44.701]      __var protType   = __protocol & 0x0000FFFF;
[20:34:44.703]        // -> [protType <= 0x00000002]
[20:34:44.703]    </block>
[20:34:44.703]    <control if="protType == 1" while="" timeout="0" info="">
[20:34:44.703]      // if-block "protType == 1"
[20:34:44.703]        // =>  FALSE
[20:34:44.703]      // skip if-block "protType == 1"
[20:34:44.703]    </control>
[20:34:44.703]    <control if="protType == 2" while="" timeout="0" info="">
[20:34:44.703]      // if-block "protType == 2"
[20:34:44.704]        // =>  TRUE
[20:34:44.704]      <control if="isSWJ" while="" timeout="0" info="">
[20:34:44.704]        // if-block "isSWJ"
[20:34:44.704]          // =>  TRUE
[20:34:44.704]        <control if="hasDormant" while="" timeout="0" info="">
[20:34:44.704]          // if-block "hasDormant"
[20:34:44.704]            // =>  FALSE
[20:34:44.705]          // skip if-block "hasDormant"
[20:34:44.705]        </control>
[20:34:44.705]        <control if="!hasDormant" while="" timeout="0" info="">
[20:34:44.705]          // if-block "!hasDormant"
[20:34:44.705]            // =>  TRUE
[20:34:44.705]          <block atomic="false" info="">
[20:34:44.705]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
