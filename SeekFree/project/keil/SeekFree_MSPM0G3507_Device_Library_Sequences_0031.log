/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0031.log
 *  Created     : 23:47:25 (28/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[23:47:25.205]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:47:25.205]  
[23:47:25.205]  <debugvars>
[23:47:25.206]    // Pre-defined
[23:47:25.206]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:47:25.206]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[23:47:25.206]    __dp=0x00000000
[23:47:25.206]    __ap=0x00000000
[23:47:25.206]    __traceout=0x00000000      (Trace Disabled)
[23:47:25.206]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:47:25.206]    __FlashAddr=0x00000000
[23:47:25.206]    __FlashLen=0x00000000
[23:47:25.206]    __FlashArg=0x00000000
[23:47:25.206]    __FlashOp=0x00000000
[23:47:25.206]    __Result=0x00000000
[23:47:25.206]  </debugvars>
[23:47:25.206]  
[23:47:25.206]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:47:25.206]    <block atomic="false" info="">
[23:47:25.206]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:47:25.206]        // -> [isSWJ <= 0x00000001]
[23:47:25.208]      __var hasDormant = __protocol & 0x00020000;
[23:47:25.208]        // -> [hasDormant <= 0x00000000]
[23:47:25.208]      __var protType   = __protocol & 0x0000FFFF;
[23:47:25.208]        // -> [protType <= 0x00000002]
[23:47:25.208]    </block>
[23:47:25.208]    <control if="protType == 1" while="" timeout="0" info="">
[23:47:25.208]      // if-block "protType == 1"
[23:47:25.208]        // =>  FALSE
[23:47:25.208]      // skip if-block "protType == 1"
[23:47:25.208]    </control>
[23:47:25.208]    <control if="protType == 2" while="" timeout="0" info="">
[23:47:25.209]      // if-block "protType == 2"
[23:47:25.210]        // =>  TRUE
[23:47:25.210]      <control if="isSWJ" while="" timeout="0" info="">
[23:47:25.210]        // if-block "isSWJ"
[23:47:25.210]          // =>  TRUE
[23:47:25.210]        <control if="hasDormant" while="" timeout="0" info="">
[23:47:25.210]          // if-block "hasDormant"
[23:47:25.210]            // =>  FALSE
[23:47:25.210]          // skip if-block "hasDormant"
[23:47:25.210]        </control>
[23:47:25.210]        <control if="!hasDormant" while="" timeout="0" info="">
[23:47:25.210]          // if-block "!hasDormant"
[23:47:25.210]            // =>  TRUE
[23:47:25.211]          <block atomic="false" info="">
[23:47:25.211]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:47:25.212]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:47:25.212]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:47:25.214]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:47:25.214]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:47:25.215]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:47:25.215]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:47:25.216]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:47:25.216]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:47:25.218]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:47:25.218]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:47:25.219]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:47:25.219]          </block>
[23:47:25.219]          // end if-block "!hasDormant"
[23:47:25.219]        </control>
[23:47:25.219]        // end if-block "isSWJ"
[23:47:25.219]      </control>
[23:47:25.219]      <control if="!isSWJ" while="" timeout="0" info="">
[23:47:25.219]        // if-block "!isSWJ"
[23:47:25.219]          // =>  FALSE
[23:47:25.219]        // skip if-block "!isSWJ"
[23:47:25.220]      </control>
[23:47:25.220]      <block atomic="false" info="">
[23:47:25.220]        ReadDP(0x0);
[23:47:25.222]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:47:25.222]      </block>
[23:47:25.222]      // end if-block "protType == 2"
[23:47:25.222]    </control>
[23:47:25.222]  </sequence>
[23:47:25.222]  
[23:47:27.281]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:47:27.281]  
[23:47:27.289]  <debugvars>
[23:47:27.289]    // Pre-defined
[23:47:27.289]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:47:27.289]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:47:27.289]    __dp=0x00000000
[23:47:27.289]    __ap=0x00000000
[23:47:27.289]    __traceout=0x00000000      (Trace Disabled)
[23:47:27.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:47:27.289]    __FlashAddr=0x00000000
[23:47:27.289]    __FlashLen=0x00000000
[23:47:27.289]    __FlashArg=0x00000000
[23:47:27.289]    __FlashOp=0x00000000
[23:47:27.289]    __Result=0x00000000
[23:47:27.289]  </debugvars>
[23:47:27.289]  
[23:47:27.289]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:47:27.289]    <block atomic="false" info="">
[23:47:27.289]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:47:27.289]        // -> [isSWJ <= 0x00000001]
[23:47:27.292]      __var hasDormant = __protocol & 0x00020000;
[23:47:27.292]        // -> [hasDormant <= 0x00000000]
[23:47:27.292]      __var protType   = __protocol & 0x0000FFFF;
[23:47:27.292]        // -> [protType <= 0x00000002]
[23:47:27.292]    </block>
[23:47:27.292]    <control if="protType == 1" while="" timeout="0" info="">
[23:47:27.292]      // if-block "protType == 1"
[23:47:27.292]        // =>  FALSE
[23:47:27.292]      // skip if-block "protType == 1"
[23:47:27.292]    </control>
[23:47:27.292]    <control if="protType == 2" while="" timeout="0" info="">
[23:47:27.293]      // if-block "protType == 2"
[23:47:27.293]        // =>  TRUE
[23:47:27.293]      <control if="isSWJ" while="" timeout="0" info="">
[23:47:27.293]        // if-block "isSWJ"
[23:47:27.293]          // =>  TRUE
[23:47:27.293]        <control if="hasDormant" while="" timeout="0" info="">
[23:47:27.293]          // if-block "hasDormant"
[23:47:27.293]            // =>  FALSE
[23:47:27.293]          // skip if-block "hasDormant"
[23:47:27.293]        </control>
[23:47:27.293]        <control if="!hasDormant" while="" timeout="0" info="">
[23:47:27.294]          // if-block "!hasDormant"
[23:47:27.294]            // =>  TRUE
[23:47:27.294]          <block atomic="false" info="">
[23:47:27.294]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:47:27.295]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:47:27.295]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:47:27.297]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:47:27.298]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:47:27.300]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:47:27.301]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:47:27.302]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:47:27.303]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:47:27.304]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:47:27.304]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:47:27.308]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:47:27.308]          </block>
[23:47:27.309]          // end if-block "!hasDormant"
[23:47:27.309]        </control>
[23:47:27.309]        // end if-block "isSWJ"
[23:47:27.309]      </control>
[23:47:27.309]      <control if="!isSWJ" while="" timeout="0" info="">
[23:47:27.309]        // if-block "!isSWJ"
[23:47:27.309]          // =>  FALSE
[23:47:27.309]        // skip if-block "!isSWJ"
[23:47:27.310]      </control>
[23:47:27.310]      <block atomic="false" info="">
[23:47:27.310]        ReadDP(0x0);
[23:47:27.311]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:47:27.311]      </block>
[23:47:27.311]      // end if-block "protType == 2"
[23:47:27.311]    </control>
[23:47:27.311]  </sequence>
[23:47:27.311]  
[23:47:27.316]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:47:27.316]  
[23:47:27.316]  <debugvars>
[23:47:27.316]    // Pre-defined
[23:47:27.316]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:47:27.316]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:47:27.317]    __dp=0x00000000
[23:47:27.317]    __ap=0x00000000
[23:47:27.317]    __traceout=0x00000000      (Trace Disabled)
[23:47:27.317]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:47:27.317]    __FlashAddr=0x00000000
[23:47:27.317]    __FlashLen=0x00000000
[23:47:27.317]    __FlashArg=0x00000000
[23:47:27.317]    __FlashOp=0x00000000
[23:47:27.317]    __Result=0x00000000
[23:47:27.317]  </debugvars>
[23:47:27.317]  
[23:47:27.317]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:47:27.317]    <block atomic="false" info="">
[23:47:27.317]      __var SW_DP_ABORT       = 0x0;
[23:47:27.317]        // -> [SW_DP_ABORT <= 0x00000000]
[23:47:27.317]      __var DP_CTRL_STAT      = 0x4;
[23:47:27.319]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:47:27.319]      __var DP_SELECT         = 0x8;
[23:47:27.319]        // -> [DP_SELECT <= 0x00000008]
[23:47:27.319]      __var powered_down      = 0;
[23:47:27.319]        // -> [powered_down <= 0x00000000]
[23:47:27.319]      WriteDP(DP_SELECT, 0x00000000);
[23:47:27.321]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:47:27.321]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:47:27.322]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:47:27.323]        // -> [powered_down <= 0x00000001]
[23:47:27.323]    </block>
[23:47:27.323]    <control if="powered_down" while="" timeout="0" info="">
[23:47:27.323]      // if-block "powered_down"
[23:47:27.323]        // =>  TRUE
[23:47:27.323]      <block atomic="false" info="">
[23:47:27.323]        Message(0, "Debug/System power-up request sent");
[23:47:27.326]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:47:27.327]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:47:27.327]      </block>
[23:47:27.327]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:47:27.327]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:47:27.328]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:47:27.328]        // while-condition  =>  FALSE
[23:47:27.330]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:47:27.330]      </control>
[23:47:27.330]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:47:27.330]        // if-block "(__protocol & 0xFFFF) == 1"
[23:47:27.330]          // =>  FALSE
[23:47:27.330]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:47:27.330]      </control>
[23:47:27.330]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:47:27.330]        // if-block "(__protocol & 0xFFFF) == 2"
[23:47:27.330]          // =>  TRUE
[23:47:27.330]        <block atomic="false" info="">
[23:47:27.330]          Message(0, "executing SWD power up");
[23:47:27.332]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:47:27.336]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:47:27.336]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:47:27.340]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:47:27.340]        </block>
[23:47:27.340]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:47:27.340]      </control>
[23:47:27.340]      // end if-block "powered_down"
[23:47:27.340]    </control>
[23:47:27.340]    <block atomic="false" info="">
[23:47:27.340]      __var DEBUG_PORT_VAL    = 0;
[23:47:27.340]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:47:27.340]      __var ACCESS_POINT_VAL  = 0;
[23:47:27.340]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:47:27.341]      __ap = 1; 
[23:47:27.341]        // -> [__ap <= 0x00000001]
[23:47:27.341]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:47:27.344]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:47:27.344]      __ap = 4;
[23:47:27.344]        // -> [__ap <= 0x00000004]
[23:47:27.344]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:47:27.347]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:47:27.347]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:47:27.347]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:47:27.349]    </block>
[23:47:27.349]    <block atomic="false" info="">
[23:47:27.350]      __var nReset = 0x80;
[23:47:27.350]        // -> [nReset <= 0x00000080]
[23:47:27.350]      __var canReadPins = 0;
[23:47:27.350]        // -> [canReadPins <= 0x00000000]
[23:47:27.350]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:47:27.352]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:47:27.353]        // -> [canReadPins <= 0x00000001]
[23:47:27.353]    </block>
[23:47:27.353]    <control if="" while="1" timeout="200" info="">
[23:47:27.353]      // while "1"  (timeout="200")
[23:47:27.353]      // while-condition  =>  TRUE
[23:47:27.353]      // while "1"  (timeout="200")
[23:47:27.354]      // while-condition  =>  TRUE
[23:47:27.354]      // while "1"  (timeout="200")
[23:47:27.354]      // while-condition  =>  TRUE
[23:47:27.354]      // while "1"  (timeout="200")
[23:47:27.354]      // while-condition  =>  TRUE
[23:47:27.354]      // while "1"  (timeout="200")
[23:47:27.354]      // while-condition  =>  TRUE
[23:47:27.354]      // while "1"  (timeout="200")
[23:47:27.354]      // while-condition  =>  TRUE
[23:47:27.354]      // while "1"  (timeout="200")
[23:47:27.356]      // while-condition  =>  TRUE
[23:47:27.356]      // while "1"  (timeout="200")
[23:47:27.356]      // while-condition  =>  TRUE
[23:47:27.356]      // while "1"  (timeout="200")
[23:47:27.356]      // while-condition  =>  TRUE
[23:47:27.356]      // while "1"  (timeout="200")
[23:47:27.356]      // while-condition  =>  TRUE
[23:47:27.356]      // while "1"  (timeout="200")
[23:47:27.356]      // while-condition  =>  TRUE
[23:47:27.356]      // while "1"  (timeout="200")
[23:47:27.356]      // while-condition  =>  TRUE
[23:47:27.356]      // while "1"  (timeout="200")
[23:47:27.356]      // while-condition  =>  TRUE
[23:47:27.356]      // while "1"  (timeout="200")
[23:47:27.356]      // while-condition  =>  TRUE
[23:47:27.356]      // while "1"  (timeout="200")
[23:47:27.356]      // while-condition  =>  TRUE
[23:47:27.356]      // while "1"  (timeout="200")
[23:47:27.356]      // while-condition  =>  TRUE
[23:47:27.356]      // while "1"  (timeout="200")
[23:47:27.356]      // while-condition  =>  TRUE
[23:47:27.356]      // while "1"  (timeout="200")
[23:47:27.356]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.358]      // while "1"  (timeout="200")
[23:47:27.358]      // while-condition  =>  TRUE
[23:47:27.361]      // while "1"  (timeout="200")
[23:47:27.361]      // while  =>  TIMEOUT
[23:47:27.361]      // end while "1"
[23:47:27.361]    </control>
[23:47:27.361]    <control if="canReadPins" while="" timeout="0" info="">
[23:47:27.361]      // if-block "canReadPins"
[23:47:27.362]        // =>  TRUE
[23:47:27.362]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:47:27.362]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:47:27.363]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:47:27.363]        // while-condition  =>  FALSE
[23:47:27.363]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:47:27.363]      </control>
[23:47:27.363]      // end if-block "canReadPins"
[23:47:27.363]    </control>
[23:47:27.363]    <control if="!canReadPins" while="" timeout="0" info="">
[23:47:27.363]      // if-block "!canReadPins"
[23:47:27.363]        // =>  FALSE
[23:47:27.363]      // skip if-block "!canReadPins"
[23:47:27.365]    </control>
[23:47:27.365]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:47:27.365]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:47:27.365]        // =>  TRUE
[23:47:27.365]      <block atomic="false" info="">
[23:47:27.365]        WriteAP(0x00, 0x190008);
[23:47:27.367]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:47:27.367]        WriteAP(0xF0, 0x01);
[23:47:27.370]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:47:27.371]      </block>
[23:47:27.371]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:47:27.371]    </control>
[23:47:27.371]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:47:27.371]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:47:27.372]        // =>  FALSE
[23:47:27.372]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:47:27.372]    </control>
[23:47:27.372]    <block atomic="false" info="">
[23:47:27.372]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:47:27.375]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:47:27.375]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:47:27.375]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:47:27.377]      __ap = 0; //lets make sure we reset the access point selection
[23:47:27.377]        // -> [__ap <= 0x00000000]
[23:47:27.377]    </block>
[23:47:27.377]  </sequence>
[23:47:27.377]  
[23:47:27.407]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:47:27.407]  
[23:47:27.407]  <debugvars>
[23:47:27.407]    // Pre-defined
[23:47:27.407]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:47:27.407]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:47:27.407]    __dp=0x00000000
[23:47:27.407]    __ap=0x00000000
[23:47:27.407]    __traceout=0x00000000      (Trace Disabled)
[23:47:27.407]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:47:27.407]    __FlashAddr=0x00000000
[23:47:27.407]    __FlashLen=0x00000000
[23:47:27.407]    __FlashArg=0x00000000
[23:47:27.407]    __FlashOp=0x00000000
[23:47:27.407]    __Result=0x00000000
[23:47:27.407]  </debugvars>
[23:47:27.407]  
[23:47:27.407]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:47:27.407]    <block atomic="false" info="">
[23:47:27.407]      __var deviceID = 0;
[23:47:27.410]        // -> [deviceID <= 0x00000000]
[23:47:27.410]      __var version = 0;
[23:47:27.410]        // -> [version <= 0x00000000]
[23:47:27.410]      __var partNum = 0;
[23:47:27.410]        // -> [partNum <= 0x00000000]
[23:47:27.410]      __var manuf = 0;
[23:47:27.410]        // -> [manuf <= 0x00000000]
[23:47:27.410]      __var isMSPM0G1X0X_G3X0X = 0;
[23:47:27.410]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:47:27.410]      __var isProduction = 0;
[23:47:27.411]        // -> [isProduction <= 0x00000000]
[23:47:27.411]      __var continueId = 0;
[23:47:27.411]        // -> [continueId <= 0x00000000]
[23:47:27.411]      deviceID =   Read32(0x41C40004);
[23:47:27.415]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:47:27.416]        // -> [deviceID <= 0x2BB8802F]
[23:47:27.416]      version = deviceID >> 28;
[23:47:27.416]        // -> [version <= 0x00000002]
[23:47:27.416]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:47:27.417]        // -> [partNum <= 0x0000BB88]
[23:47:27.417]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:47:27.417]        // -> [manuf <= 0x00000017]
[23:47:27.417]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:47:27.417]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:47:27.417]      isProduction = (version > 0);
[23:47:27.417]        // -> [isProduction <= 0x00000001]
[23:47:27.417]    </block>
[23:47:27.417]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:47:27.417]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:47:27.417]        // =>  FALSE
[23:47:27.417]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:47:27.418]    </control>
[23:47:27.418]    <control if="continueId == 4" while="" timeout="0" info="">
[23:47:27.418]      // if-block "continueId == 4"
[23:47:27.418]        // =>  FALSE
[23:47:27.418]      // skip if-block "continueId == 4"
[23:47:27.418]    </control>
[23:47:27.418]    <control if="!isProduction" while="" timeout="0" info="">
[23:47:27.419]      // if-block "!isProduction"
[23:47:27.419]        // =>  FALSE
[23:47:27.419]      // skip if-block "!isProduction"
[23:47:27.419]    </control>
[23:47:27.419]  </sequence>
[23:47:27.419]  
[23:48:11.266]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:48:11.266]  
[23:48:11.267]  <debugvars>
[23:48:11.267]    // Pre-defined
[23:48:11.267]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:48:11.267]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:48:11.267]    __dp=0x00000000
[23:48:11.267]    __ap=0x00000000
[23:48:11.267]    __traceout=0x00000000      (Trace Disabled)
[23:48:11.267]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:48:11.267]    __FlashAddr=0x00000000
[23:48:11.267]    __FlashLen=0x00000000
[23:48:11.267]    __FlashArg=0x00000000
[23:48:11.267]    __FlashOp=0x00000000
[23:48:11.267]    __Result=0x00000000
[23:48:11.267]  </debugvars>
[23:48:11.267]  
[23:48:11.267]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:48:11.267]    <block atomic="false" info="">
[23:48:11.267]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:48:11.267]        // -> [isSWJ <= 0x00000001]
[23:48:11.267]      __var hasDormant = __protocol & 0x00020000;
[23:48:11.267]        // -> [hasDormant <= 0x00000000]
[23:48:11.267]      __var protType   = __protocol & 0x0000FFFF;
[23:48:11.267]        // -> [protType <= 0x00000002]
[23:48:11.269]    </block>
[23:48:11.269]    <control if="protType == 1" while="" timeout="0" info="">
[23:48:11.269]      // if-block "protType == 1"
[23:48:11.269]        // =>  FALSE
[23:48:11.269]      // skip if-block "protType == 1"
[23:48:11.269]    </control>
[23:48:11.269]    <control if="protType == 2" while="" timeout="0" info="">
[23:48:11.269]      // if-block "protType == 2"
[23:48:11.269]        // =>  TRUE
[23:48:11.269]      <control if="isSWJ" while="" timeout="0" info="">
[23:48:11.269]        // if-block "isSWJ"
[23:48:11.269]          // =>  TRUE
[23:48:11.269]        <control if="hasDormant" while="" timeout="0" info="">
[23:48:11.270]          // if-block "hasDormant"
[23:48:11.270]            // =>  FALSE
[23:48:11.270]          // skip if-block "hasDormant"
[23:48:11.270]        </control>
[23:48:11.270]        <control if="!hasDormant" while="" timeout="0" info="">
[23:48:11.270]          // if-block "!hasDormant"
[23:48:11.270]            // =>  TRUE
[23:48:11.270]          <block atomic="false" info="">
[23:48:11.270]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:48:11.273]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:48:11.273]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:48:11.275]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:48:11.276]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:48:11.278]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:48:11.278]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:48:11.279]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:48:11.279]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:48:11.281]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:48:11.281]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:48:11.282]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:48:11.282]          </block>
[23:48:11.282]          // end if-block "!hasDormant"
[23:48:11.282]        </control>
[23:48:11.282]        // end if-block "isSWJ"
[23:48:11.282]      </control>
[23:48:11.282]      <control if="!isSWJ" while="" timeout="0" info="">
[23:48:11.282]        // if-block "!isSWJ"
[23:48:11.282]          // =>  FALSE
[23:48:11.282]        // skip if-block "!isSWJ"
[23:48:11.282]      </control>
[23:48:11.282]      <block atomic="false" info="">
[23:48:11.283]        ReadDP(0x0);
[23:48:11.285]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:48:11.285]      </block>
[23:48:11.285]      // end if-block "protType == 2"
[23:48:11.285]    </control>
[23:48:11.285]  </sequence>
[23:48:11.285]  
[23:48:11.289]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:48:11.289]  
[23:48:11.289]  <debugvars>
[23:48:11.289]    // Pre-defined
[23:48:11.289]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:48:11.289]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:48:11.289]    __dp=0x00000000
[23:48:11.289]    __ap=0x00000000
[23:48:11.289]    __traceout=0x00000000      (Trace Disabled)
[23:48:11.289]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:48:11.289]    __FlashAddr=0x00000000
[23:48:11.289]    __FlashLen=0x00000000
[23:48:11.289]    __FlashArg=0x00000000
[23:48:11.289]    __FlashOp=0x00000000
[23:48:11.289]    __Result=0x00000000
[23:48:11.289]  </debugvars>
[23:48:11.289]  
[23:48:11.289]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:48:11.289]    <block atomic="false" info="">
[23:48:11.289]      __var SW_DP_ABORT       = 0x0;
[23:48:11.289]        // -> [SW_DP_ABORT <= 0x00000000]
[23:48:11.289]      __var DP_CTRL_STAT      = 0x4;
[23:48:11.289]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:48:11.289]      __var DP_SELECT         = 0x8;
[23:48:11.289]        // -> [DP_SELECT <= 0x00000008]
[23:48:11.291]      __var powered_down      = 0;
[23:48:11.291]        // -> [powered_down <= 0x00000000]
[23:48:11.291]      WriteDP(DP_SELECT, 0x00000000);
[23:48:11.297]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:48:11.297]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:48:11.298]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:48:11.298]        // -> [powered_down <= 0x00000001]
[23:48:11.298]    </block>
[23:48:11.298]    <control if="powered_down" while="" timeout="0" info="">
[23:48:11.299]      // if-block "powered_down"
[23:48:11.299]        // =>  TRUE
[23:48:11.299]      <block atomic="false" info="">
[23:48:11.299]        Message(0, "Debug/System power-up request sent");
[23:48:11.299]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:48:11.300]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:48:11.300]      </block>
[23:48:11.300]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:48:11.300]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:48:11.303]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:48:11.303]        // while-condition  =>  FALSE
[23:48:11.303]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:48:11.303]      </control>
[23:48:11.303]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:48:11.303]        // if-block "(__protocol & 0xFFFF) == 1"
[23:48:11.303]          // =>  FALSE
[23:48:11.303]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:48:11.303]      </control>
[23:48:11.303]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:48:11.303]        // if-block "(__protocol & 0xFFFF) == 2"
[23:48:11.303]          // =>  TRUE
[23:48:11.304]        <block atomic="false" info="">
[23:48:11.304]          Message(0, "executing SWD power up");
[23:48:11.307]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:48:11.312]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:48:11.313]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:48:11.314]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:48:11.314]        </block>
[23:48:11.314]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:48:11.314]      </control>
[23:48:11.315]      // end if-block "powered_down"
[23:48:11.315]    </control>
[23:48:11.315]    <block atomic="false" info="">
[23:48:11.315]      __var DEBUG_PORT_VAL    = 0;
[23:48:11.315]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:48:11.315]      __var ACCESS_POINT_VAL  = 0;
[23:48:11.315]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:48:11.315]      __ap = 1; 
[23:48:11.315]        // -> [__ap <= 0x00000001]
[23:48:11.315]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:48:11.319]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:48:11.319]      __ap = 4;
[23:48:11.319]        // -> [__ap <= 0x00000004]
[23:48:11.320]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:48:11.323]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:48:11.323]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:48:11.323]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:48:11.325]    </block>
[23:48:11.325]    <block atomic="false" info="">
[23:48:11.325]      __var nReset = 0x80;
[23:48:11.325]        // -> [nReset <= 0x00000080]
[23:48:11.325]      __var canReadPins = 0;
[23:48:11.325]        // -> [canReadPins <= 0x00000000]
[23:48:11.325]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:48:11.327]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:48:11.327]        // -> [canReadPins <= 0x00000001]
[23:48:11.328]    </block>
[23:48:11.328]    <control if="" while="1" timeout="200" info="">
[23:48:11.328]      // while "1"  (timeout="200")
[23:48:11.328]      // while-condition  =>  TRUE
[23:48:11.328]      // while "1"  (timeout="200")
[23:48:11.328]      // while-condition  =>  TRUE
[23:48:11.328]      // while "1"  (timeout="200")
[23:48:11.328]      // while-condition  =>  TRUE
[23:48:11.328]      // while "1"  (timeout="200")
[23:48:11.328]      // while-condition  =>  TRUE
[23:48:11.329]      // while "1"  (timeout="200")
[23:48:11.329]      // while-condition  =>  TRUE
[23:48:11.329]      // while "1"  (timeout="200")
[23:48:11.329]      // while-condition  =>  TRUE
[23:48:11.329]      // while "1"  (timeout="200")
[23:48:11.329]      // while-condition  =>  TRUE
[23:48:11.329]      // while "1"  (timeout="200")
[23:48:11.330]      // while-condition  =>  TRUE
[23:48:11.330]      // while "1"  (timeout="200")
[23:48:11.330]      // while  =>  TIMEOUT
[23:48:11.330]      // end while "1"
[23:48:11.330]    </control>
[23:48:11.330]    <control if="canReadPins" while="" timeout="0" info="">
[23:48:11.330]      // if-block "canReadPins"
[23:48:11.330]        // =>  TRUE
[23:48:11.330]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:48:11.330]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:48:11.332]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:48:11.332]        // while-condition  =>  FALSE
[23:48:11.332]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:48:11.332]      </control>
[23:48:11.332]      // end if-block "canReadPins"
[23:48:11.332]    </control>
[23:48:11.332]    <control if="!canReadPins" while="" timeout="0" info="">
[23:48:11.332]      // if-block "!canReadPins"
[23:48:11.332]        // =>  FALSE
[23:48:11.332]      // skip if-block "!canReadPins"
[23:48:11.332]    </control>
[23:48:11.332]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:48:11.332]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:48:11.332]        // =>  TRUE
[23:48:11.332]      <block atomic="false" info="">
[23:48:11.334]        WriteAP(0x00, 0x190008);
[23:48:11.335]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:48:11.335]        WriteAP(0xF0, 0x01);
[23:48:11.339]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:48:11.339]      </block>
[23:48:11.339]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:48:11.339]    </control>
[23:48:11.339]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:48:11.339]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:48:11.339]        // =>  FALSE
[23:48:11.339]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:48:11.339]    </control>
[23:48:11.339]    <block atomic="false" info="">
[23:48:11.339]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:48:11.343]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:48:11.343]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:48:11.343]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:48:11.345]      __ap = 0; //lets make sure we reset the access point selection
[23:48:11.345]        // -> [__ap <= 0x00000000]
[23:48:11.345]    </block>
[23:48:11.345]  </sequence>
[23:48:11.345]  
[23:48:11.383]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:48:11.383]  
[23:48:11.383]  <debugvars>
[23:48:11.383]    // Pre-defined
[23:48:11.383]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:48:11.383]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:48:11.383]    __dp=0x00000000
[23:48:11.383]    __ap=0x00000000
[23:48:11.383]    __traceout=0x00000000      (Trace Disabled)
[23:48:11.383]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:48:11.383]    __FlashAddr=0x00000000
[23:48:11.383]    __FlashLen=0x00000000
[23:48:11.383]    __FlashArg=0x00000000
[23:48:11.383]    __FlashOp=0x00000000
[23:48:11.383]    __Result=0x00000000
[23:48:11.383]  </debugvars>
[23:48:11.385]  
[23:48:11.385]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:48:11.385]    <block atomic="false" info="">
[23:48:11.385]      __var deviceID = 0;
[23:48:11.385]        // -> [deviceID <= 0x00000000]
[23:48:11.385]      __var version = 0;
[23:48:11.385]        // -> [version <= 0x00000000]
[23:48:11.385]      __var partNum = 0;
[23:48:11.385]        // -> [partNum <= 0x00000000]
[23:48:11.385]      __var manuf = 0;
[23:48:11.385]        // -> [manuf <= 0x00000000]
[23:48:11.386]      __var isMSPM0G1X0X_G3X0X = 0;
[23:48:11.386]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:48:11.386]      __var isProduction = 0;
[23:48:11.386]        // -> [isProduction <= 0x00000000]
[23:48:11.386]      __var continueId = 0;
[23:48:11.386]        // -> [continueId <= 0x00000000]
[23:48:11.386]      deviceID =   Read32(0x41C40004);
[23:48:11.391]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:48:11.391]        // -> [deviceID <= 0x2BB8802F]
[23:48:11.391]      version = deviceID >> 28;
[23:48:11.391]        // -> [version <= 0x00000002]
[23:48:11.391]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:48:11.391]        // -> [partNum <= 0x0000BB88]
[23:48:11.391]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:48:11.391]        // -> [manuf <= 0x00000017]
[23:48:11.391]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:48:11.391]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:48:11.391]      isProduction = (version > 0);
[23:48:11.392]        // -> [isProduction <= 0x00000001]
[23:48:11.392]    </block>
[23:48:11.392]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:48:11.392]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:48:11.392]        // =>  FALSE
[23:48:11.393]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:48:11.393]    </control>
[23:48:11.393]    <control if="continueId == 4" while="" timeout="0" info="">
[23:48:11.393]      // if-block "continueId == 4"
[23:48:11.393]        // =>  FALSE
[23:48:11.393]      // skip if-block "continueId == 4"
[23:48:11.393]    </control>
[23:48:11.393]    <control if="!isProduction" while="" timeout="0" info="">
[23:48:11.394]      // if-block "!isProduction"
[23:48:11.394]        // =>  FALSE
[23:48:11.394]      // skip if-block "!isProduction"
[23:48:11.394]    </control>
[23:48:11.395]  </sequence>
[23:48:11.395]  
[23:54:49.719]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[23:54:49.719]  
[23:54:49.719]  <debugvars>
[23:54:49.719]    // Pre-defined
[23:54:49.719]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:54:49.719]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:54:49.725]    __dp=0x00000000
[23:54:49.725]    __ap=0x00000000
[23:54:49.725]    __traceout=0x00000000      (Trace Disabled)
[23:54:49.725]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:54:49.725]    __FlashAddr=0x00000000
[23:54:49.725]    __FlashLen=0x00000000
[23:54:49.725]    __FlashArg=0x00000000
[23:54:49.725]    __FlashOp=0x00000000
[23:54:49.725]    __Result=0x00000000
[23:54:49.725]  </debugvars>
[23:54:49.725]  
[23:54:49.726]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[23:54:49.726]    <block atomic="false" info="">
[23:54:49.726]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[23:54:49.726]        // -> [isSWJ <= 0x00000001]
[23:54:49.726]      __var hasDormant = __protocol & 0x00020000;
[23:54:49.726]        // -> [hasDormant <= 0x00000000]
[23:54:49.726]      __var protType   = __protocol & 0x0000FFFF;
[23:54:49.726]        // -> [protType <= 0x00000002]
[23:54:49.726]    </block>
[23:54:49.726]    <control if="protType == 1" while="" timeout="0" info="">
[23:54:49.727]      // if-block "protType == 1"
[23:54:49.727]        // =>  FALSE
[23:54:49.727]      // skip if-block "protType == 1"
[23:54:49.727]    </control>
[23:54:49.727]    <control if="protType == 2" while="" timeout="0" info="">
[23:54:49.727]      // if-block "protType == 2"
[23:54:49.727]        // =>  TRUE
[23:54:49.727]      <control if="isSWJ" while="" timeout="0" info="">
[23:54:49.727]        // if-block "isSWJ"
[23:54:49.727]          // =>  TRUE
[23:54:49.727]        <control if="hasDormant" while="" timeout="0" info="">
[23:54:49.727]          // if-block "hasDormant"
[23:54:49.727]            // =>  FALSE
[23:54:49.727]          // skip if-block "hasDormant"
[23:54:49.727]        </control>
[23:54:49.727]        <control if="!hasDormant" while="" timeout="0" info="">
[23:54:49.727]          // if-block "!hasDormant"
[23:54:49.727]            // =>  TRUE
[23:54:49.727]          <block atomic="false" info="">
[23:54:49.727]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[23:54:49.727]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:54:49.727]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[23:54:49.736]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[23:54:49.736]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[23:54:49.737]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:54:49.737]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[23:54:49.738]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[23:54:49.738]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[23:54:49.738]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[23:54:49.738]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[23:54:49.738]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[23:54:49.738]          </block>
[23:54:49.738]          // end if-block "!hasDormant"
[23:54:49.738]        </control>
[23:54:49.738]        // end if-block "isSWJ"
[23:54:49.738]      </control>
[23:54:49.738]      <control if="!isSWJ" while="" timeout="0" info="">
[23:54:49.738]        // if-block "!isSWJ"
[23:54:49.738]          // =>  FALSE
[23:54:49.738]        // skip if-block "!isSWJ"
[23:54:49.738]      </control>
[23:54:49.738]      <block atomic="false" info="">
[23:54:49.744]        ReadDP(0x0);
[23:54:49.745]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[23:54:49.746]      </block>
[23:54:49.746]      // end if-block "protType == 2"
[23:54:49.746]    </control>
[23:54:49.746]  </sequence>
[23:54:49.746]  
[23:54:49.746]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[23:54:49.746]  
[23:54:49.746]  <debugvars>
[23:54:49.746]    // Pre-defined
[23:54:49.746]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:54:49.746]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:54:49.746]    __dp=0x00000000
[23:54:49.746]    __ap=0x00000000
[23:54:49.746]    __traceout=0x00000000      (Trace Disabled)
[23:54:49.746]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:54:49.746]    __FlashAddr=0x00000000
[23:54:49.746]    __FlashLen=0x00000000
[23:54:49.746]    __FlashArg=0x00000000
[23:54:49.746]    __FlashOp=0x00000000
[23:54:49.746]    __Result=0x00000000
[23:54:49.746]  </debugvars>
[23:54:49.746]  
[23:54:49.746]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[23:54:49.746]    <block atomic="false" info="">
[23:54:49.746]      __var SW_DP_ABORT       = 0x0;
[23:54:49.746]        // -> [SW_DP_ABORT <= 0x00000000]
[23:54:49.746]      __var DP_CTRL_STAT      = 0x4;
[23:54:49.746]        // -> [DP_CTRL_STAT <= 0x00000004]
[23:54:49.746]      __var DP_SELECT         = 0x8;
[23:54:49.746]        // -> [DP_SELECT <= 0x00000008]
[23:54:49.746]      __var powered_down      = 0;
[23:54:49.751]        // -> [powered_down <= 0x00000000]
[23:54:49.751]      WriteDP(DP_SELECT, 0x00000000);
[23:54:49.751]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[23:54:49.751]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[23:54:49.755]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[23:54:49.755]        // -> [powered_down <= 0x00000001]
[23:54:49.756]    </block>
[23:54:49.756]    <control if="powered_down" while="" timeout="0" info="">
[23:54:49.756]      // if-block "powered_down"
[23:54:49.756]        // =>  TRUE
[23:54:49.756]      <block atomic="false" info="">
[23:54:49.756]        Message(0, "Debug/System power-up request sent");
[23:54:49.758]        WriteDP(DP_CTRL_STAT, 0x50000000);
[23:54:49.758]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[23:54:49.758]      </block>
[23:54:49.758]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[23:54:49.758]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[23:54:49.758]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[23:54:49.758]        // while-condition  =>  FALSE
[23:54:49.758]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[23:54:49.758]      </control>
[23:54:49.758]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[23:54:49.758]        // if-block "(__protocol & 0xFFFF) == 1"
[23:54:49.758]          // =>  FALSE
[23:54:49.765]        // skip if-block "(__protocol & 0xFFFF) == 1"
[23:54:49.765]      </control>
[23:54:49.765]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[23:54:49.765]        // if-block "(__protocol & 0xFFFF) == 2"
[23:54:49.765]          // =>  TRUE
[23:54:49.765]        <block atomic="false" info="">
[23:54:49.765]          Message(0, "executing SWD power up");
[23:54:49.766]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[23:54:49.768]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[23:54:49.768]          WriteDP(SW_DP_ABORT, 0x0000001E);
[23:54:49.768]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[23:54:49.768]        </block>
[23:54:49.768]        // end if-block "(__protocol & 0xFFFF) == 2"
[23:54:49.768]      </control>
[23:54:49.768]      // end if-block "powered_down"
[23:54:49.768]    </control>
[23:54:49.768]    <block atomic="false" info="">
[23:54:49.768]      __var DEBUG_PORT_VAL    = 0;
[23:54:49.768]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[23:54:49.768]      __var ACCESS_POINT_VAL  = 0;
[23:54:49.768]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[23:54:49.768]      __ap = 1; 
[23:54:49.772]        // -> [__ap <= 0x00000001]
[23:54:49.772]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[23:54:49.777]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[23:54:49.777]      __ap = 4;
[23:54:49.777]        // -> [__ap <= 0x00000004]
[23:54:49.777]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:54:49.779]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[23:54:49.779]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[23:54:49.779]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:54:49.779]    </block>
[23:54:49.779]    <block atomic="false" info="">
[23:54:49.779]      __var nReset = 0x80;
[23:54:49.779]        // -> [nReset <= 0x00000080]
[23:54:49.779]      __var canReadPins = 0;
[23:54:49.779]        // -> [canReadPins <= 0x00000000]
[23:54:49.779]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[23:54:49.788]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[23:54:49.788]        // -> [canReadPins <= 0x00000001]
[23:54:49.788]    </block>
[23:54:49.788]    <control if="" while="1" timeout="200" info="">
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.788]      // while-condition  =>  TRUE
[23:54:49.788]      // while "1"  (timeout="200")
[23:54:49.793]      // while-condition  =>  TRUE
[23:54:49.793]      // while "1"  (timeout="200")
[23:54:49.793]      // while-condition  =>  TRUE
[23:54:49.793]      // while "1"  (timeout="200")
[23:54:49.793]      // while-condition  =>  TRUE
[23:54:49.793]      // while "1"  (timeout="200")
[23:54:49.793]      // while-condition  =>  TRUE
[23:54:49.793]      // while "1"  (timeout="200")
[23:54:49.793]      // while-condition  =>  TRUE
[23:54:49.793]      // while "1"  (timeout="200")
[23:54:49.793]      // while-condition  =>  TRUE
[23:54:49.793]      // while "1"  (timeout="200")
[23:54:49.793]      // while-condition  =>  TRUE
[23:54:49.793]      // while "1"  (timeout="200")
[23:54:49.793]      // while-condition  =>  TRUE
[23:54:49.793]      // while "1"  (timeout="200")
[23:54:49.793]      // while-condition  =>  TRUE
[23:54:49.793]      // while "1"  (timeout="200")
[23:54:49.793]      // while-condition  =>  TRUE
[23:54:49.793]      // while "1"  (timeout="200")
[23:54:49.793]      // while-condition  =>  TRUE
[23:54:49.795]      // while "1"  (timeout="200")
[23:54:49.795]      // while-condition  =>  TRUE
[23:54:49.795]      // while "1"  (timeout="200")
[23:54:49.795]      // while-condition  =>  TRUE
[23:54:49.795]      // while "1"  (timeout="200")
[23:54:49.795]      // while-condition  =>  TRUE
[23:54:49.795]      // while "1"  (timeout="200")
[23:54:49.795]      // while-condition  =>  TRUE
[23:54:49.795]      // while "1"  (timeout="200")
[23:54:49.795]      // while-condition  =>  TRUE
[23:54:49.795]      // while "1"  (timeout="200")
[23:54:49.796]      // while-condition  =>  TRUE
[23:54:49.796]      // while "1"  (timeout="200")
[23:54:49.796]      // while-condition  =>  TRUE
[23:54:49.796]      // while "1"  (timeout="200")
[23:54:49.796]      // while-condition  =>  TRUE
[23:54:49.796]      // while "1"  (timeout="200")
[23:54:49.796]      // while-condition  =>  TRUE
[23:54:49.796]      // while "1"  (timeout="200")
[23:54:49.796]      // while-condition  =>  TRUE
[23:54:49.797]      // while "1"  (timeout="200")
[23:54:49.797]      // while-condition  =>  TRUE
[23:54:49.797]      // while "1"  (timeout="200")
[23:54:49.797]      // while-condition  =>  TRUE
[23:54:49.797]      // while "1"  (timeout="200")
[23:54:49.797]      // while-condition  =>  TRUE
[23:54:49.797]      // while "1"  (timeout="200")
[23:54:49.797]      // while-condition  =>  TRUE
[23:54:49.797]      // while "1"  (timeout="200")
[23:54:49.797]      // while-condition  =>  TRUE
[23:54:49.797]      // while "1"  (timeout="200")
[23:54:49.797]      // while-condition  =>  TRUE
[23:54:49.797]      // while "1"  (timeout="200")
[23:54:49.797]      // while-condition  =>  TRUE
[23:54:49.797]      // while "1"  (timeout="200")
[23:54:49.797]      // while-condition  =>  TRUE
[23:54:49.797]      // while "1"  (timeout="200")
[23:54:49.797]      // while-condition  =>  TRUE
[23:54:49.797]      // while "1"  (timeout="200")
[23:54:49.797]      // while-condition  =>  TRUE
[23:54:49.797]      // while "1"  (timeout="200")
[23:54:49.797]      // while-condition  =>  TRUE
[23:54:49.797]      // while "1"  (timeout="200")
[23:54:49.797]      // while-condition  =>  TRUE
[23:54:49.800]      // while "1"  (timeout="200")
[23:54:49.800]      // while  =>  TIMEOUT
[23:54:49.800]      // end while "1"
[23:54:49.800]    </control>
[23:54:49.800]    <control if="canReadPins" while="" timeout="0" info="">
[23:54:49.800]      // if-block "canReadPins"
[23:54:49.800]        // =>  TRUE
[23:54:49.800]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[23:54:49.801]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[23:54:49.803]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[23:54:49.803]        // while-condition  =>  FALSE
[23:54:49.803]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[23:54:49.803]      </control>
[23:54:49.803]      // end if-block "canReadPins"
[23:54:49.803]    </control>
[23:54:49.803]    <control if="!canReadPins" while="" timeout="0" info="">
[23:54:49.803]      // if-block "!canReadPins"
[23:54:49.803]        // =>  FALSE
[23:54:49.803]      // skip if-block "!canReadPins"
[23:54:49.805]    </control>
[23:54:49.805]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[23:54:49.805]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:54:49.805]        // =>  TRUE
[23:54:49.805]      <block atomic="false" info="">
[23:54:49.805]        WriteAP(0x00, 0x190008);
[23:54:49.807]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[23:54:49.807]        WriteAP(0xF0, 0x01);
[23:54:49.807]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[23:54:49.807]      </block>
[23:54:49.807]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[23:54:49.807]    </control>
[23:54:49.807]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[23:54:49.807]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:54:49.807]        // =>  FALSE
[23:54:49.807]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[23:54:49.807]    </control>
[23:54:49.807]    <block atomic="false" info="">
[23:54:49.807]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[23:54:49.815]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[23:54:49.815]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[23:54:49.815]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[23:54:49.817]      __ap = 0; //lets make sure we reset the access point selection
[23:54:49.817]        // -> [__ap <= 0x00000000]
[23:54:49.817]    </block>
[23:54:49.817]  </sequence>
[23:54:49.817]  
[23:54:49.850]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[23:54:49.850]  
[23:54:49.850]  <debugvars>
[23:54:49.850]    // Pre-defined
[23:54:49.850]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[23:54:49.855]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[23:54:49.855]    __dp=0x00000000
[23:54:49.855]    __ap=0x00000000
[23:54:49.855]    __traceout=0x00000000      (Trace Disabled)
[23:54:49.855]    __errorcontrol=0x00000000  (Skip Errors="False")
[23:54:49.856]    __FlashAddr=0x00000000
[23:54:49.856]    __FlashLen=0x00000000
[23:54:49.856]    __FlashArg=0x00000000
[23:54:49.856]    __FlashOp=0x00000000
[23:54:49.856]    __Result=0x00000000
[23:54:49.856]  </debugvars>
[23:54:49.856]  
[23:54:49.856]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[23:54:49.856]    <block atomic="false" info="">
[23:54:49.856]      __var deviceID = 0;
[23:54:49.857]        // -> [deviceID <= 0x00000000]
[23:54:49.857]      __var version = 0;
[23:54:49.857]        // -> [version <= 0x00000000]
[23:54:49.857]      __var partNum = 0;
[23:54:49.857]        // -> [partNum <= 0x00000000]
[23:54:49.857]      __var manuf = 0;
[23:54:49.857]        // -> [manuf <= 0x00000000]
[23:54:49.857]      __var isMSPM0G1X0X_G3X0X = 0;
[23:54:49.857]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[23:54:49.857]      __var isProduction = 0;
[23:54:49.857]        // -> [isProduction <= 0x00000000]
[23:54:49.857]      __var continueId = 0;
[23:54:49.857]        // -> [continueId <= 0x00000000]
[23:54:49.857]      deviceID =   Read32(0x41C40004);
[23:54:49.866]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[23:54:49.866]        // -> [deviceID <= 0x2BB8802F]
[23:54:49.866]      version = deviceID >> 28;
[23:54:49.866]        // -> [version <= 0x00000002]
[23:54:49.866]      partNum = (deviceID & 0x0FFFF000) >> 12;
[23:54:49.867]        // -> [partNum <= 0x0000BB88]
[23:54:49.867]      manuf = (deviceID & 0x00000FFE) >> 1;
[23:54:49.867]        // -> [manuf <= 0x00000017]
[23:54:49.867]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[23:54:49.867]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[23:54:49.867]      isProduction = (version > 0);
[23:54:49.867]        // -> [isProduction <= 0x00000001]
[23:54:49.867]    </block>
[23:54:49.867]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[23:54:49.867]      // if-block "!isMSPM0G1X0X_G3X0X"
[23:54:49.867]        // =>  FALSE
[23:54:49.867]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[23:54:49.867]    </control>
[23:54:49.867]    <control if="continueId == 4" while="" timeout="0" info="">
[23:54:49.867]      // if-block "continueId == 4"
[23:54:49.867]        // =>  FALSE
[23:54:49.867]      // skip if-block "continueId == 4"
[23:54:49.867]    </control>
[23:54:49.867]    <control if="!isProduction" while="" timeout="0" info="">
[23:54:49.867]      // if-block "!isProduction"
[23:54:49.867]        // =>  FALSE
[23:54:49.867]      // skip if-block "!isProduction"
[23:54:49.867]    </control>
[23:54:49.867]  </sequence>
[23:54:49.867]  
[00:00:05.550]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:00:05.550]  
[00:00:05.550]  <debugvars>
[00:00:05.550]    // Pre-defined
[00:00:05.550]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:00:05.550]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:00:05.550]    __dp=0x00000000
[00:00:05.550]    __ap=0x00000000
[00:00:05.550]    __traceout=0x00000000      (Trace Disabled)
[00:00:05.550]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:00:05.550]    __FlashAddr=0x00000000
[00:00:05.550]    __FlashLen=0x00000000
[00:00:05.550]    __FlashArg=0x00000000
[00:00:05.550]    __FlashOp=0x00000000
[00:00:05.550]    __Result=0x00000000
[00:00:05.550]  </debugvars>
[00:00:05.555]  
[00:00:05.555]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:00:05.555]    <block atomic="false" info="">
[00:00:05.555]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:00:05.555]        // -> [isSWJ <= 0x00000001]
[00:00:05.555]      __var hasDormant = __protocol & 0x00020000;
[00:00:05.555]        // -> [hasDormant <= 0x00000000]
[00:00:05.555]      __var protType   = __protocol & 0x0000FFFF;
[00:00:05.555]        // -> [protType <= 0x00000002]
[00:00:05.555]    </block>
[00:00:05.555]    <control if="protType == 1" while="" timeout="0" info="">
[00:00:05.555]      // if-block "protType == 1"
[00:00:05.555]        // =>  FALSE
[00:00:05.555]      // skip if-block "protType == 1"
[00:00:05.555]    </control>
[00:00:05.557]    <control if="protType == 2" while="" timeout="0" info="">
[00:00:05.557]      // if-block "protType == 2"
[00:00:05.557]        // =>  TRUE
[00:00:05.557]      <control if="isSWJ" while="" timeout="0" info="">
[00:00:05.557]        // if-block "isSWJ"
[00:00:05.557]          // =>  TRUE
[00:00:05.557]        <control if="hasDormant" while="" timeout="0" info="">
[00:00:05.557]          // if-block "hasDormant"
[00:00:05.557]            // =>  FALSE
[00:00:05.557]          // skip if-block "hasDormant"
[00:00:05.557]        </control>
[00:00:05.557]        <control if="!hasDormant" while="" timeout="0" info="">
[00:00:05.558]          // if-block "!hasDormant"
[00:00:05.558]            // =>  TRUE
[00:00:05.558]          <block atomic="false" info="">
[00:00:05.558]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:00:05.559]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:00:05.559]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:00:05.563]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:00:05.563]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:00:05.567]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:00:05.567]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:00:05.572]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:00:05.572]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:00:05.572]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:00:05.572]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:00:05.576]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:00:05.576]          </block>
[00:00:05.576]          // end if-block "!hasDormant"
[00:00:05.576]        </control>
[00:00:05.576]        // end if-block "isSWJ"
[00:00:05.576]      </control>
[00:00:05.577]      <control if="!isSWJ" while="" timeout="0" info="">
[00:00:05.577]        // if-block "!isSWJ"
[00:00:05.577]          // =>  FALSE
[00:00:05.577]        // skip if-block "!isSWJ"
[00:00:05.577]      </control>
[00:00:05.577]      <block atomic="false" info="">
[00:00:05.577]        ReadDP(0x0);
[00:00:05.578]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:00:05.578]      </block>
[00:00:05.578]      // end if-block "protType == 2"
[00:00:05.578]    </control>
[00:00:05.578]  </sequence>
[00:00:05.579]  
[00:00:05.582]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:00:05.582]  
[00:00:05.582]  <debugvars>
[00:00:05.582]    // Pre-defined
[00:00:05.582]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:00:05.582]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:00:05.582]    __dp=0x00000000
[00:00:05.582]    __ap=0x00000000
[00:00:05.583]    __traceout=0x00000000      (Trace Disabled)
[00:00:05.583]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:00:05.583]    __FlashAddr=0x00000000
[00:00:05.583]    __FlashLen=0x00000000
[00:00:05.583]    __FlashArg=0x00000000
[00:00:05.583]    __FlashOp=0x00000000
[00:00:05.583]    __Result=0x00000000
[00:00:05.583]  </debugvars>
[00:00:05.583]  
[00:00:05.583]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:00:05.583]    <block atomic="false" info="">
[00:00:05.583]      __var SW_DP_ABORT       = 0x0;
[00:00:05.583]        // -> [SW_DP_ABORT <= 0x00000000]
[00:00:05.583]      __var DP_CTRL_STAT      = 0x4;
[00:00:05.583]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:00:05.583]      __var DP_SELECT         = 0x8;
[00:00:05.583]        // -> [DP_SELECT <= 0x00000008]
[00:00:05.583]      __var powered_down      = 0;
[00:00:05.585]        // -> [powered_down <= 0x00000000]
[00:00:05.585]      WriteDP(DP_SELECT, 0x00000000);
[00:00:05.585]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:00:05.585]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:00:05.589]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:00:05.589]        // -> [powered_down <= 0x00000001]
[00:00:05.589]    </block>
[00:00:05.589]    <control if="powered_down" while="" timeout="0" info="">
[00:00:05.589]      // if-block "powered_down"
[00:00:05.589]        // =>  TRUE
[00:00:05.589]      <block atomic="false" info="">
[00:00:05.590]        Message(0, "Debug/System power-up request sent");
[00:00:05.590]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:00:05.590]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:00:05.595]      </block>
[00:00:05.595]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:00:05.595]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:00:05.598]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:00:05.598]        // while-condition  =>  FALSE
[00:00:05.598]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:00:05.598]      </control>
[00:00:05.598]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:00:05.598]        // if-block "(__protocol & 0xFFFF) == 1"
[00:00:05.598]          // =>  FALSE
[00:00:05.598]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:00:05.598]      </control>
[00:00:05.598]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:00:05.599]        // if-block "(__protocol & 0xFFFF) == 2"
[00:00:05.599]          // =>  TRUE
[00:00:05.599]        <block atomic="false" info="">
[00:00:05.599]          Message(0, "executing SWD power up");
[00:00:05.600]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:00:05.606]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:00:05.607]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:00:05.609]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:00:05.609]        </block>
[00:00:05.609]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:00:05.609]      </control>
[00:00:05.609]      // end if-block "powered_down"
[00:00:05.609]    </control>
[00:00:05.609]    <block atomic="false" info="">
[00:00:05.609]      __var DEBUG_PORT_VAL    = 0;
[00:00:05.609]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:00:05.609]      __var ACCESS_POINT_VAL  = 0;
[00:00:05.609]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:00:05.609]      __ap = 1; 
[00:00:05.609]        // -> [__ap <= 0x00000001]
[00:00:05.609]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:00:05.612]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:00:05.612]      __ap = 4;
[00:00:05.612]        // -> [__ap <= 0x00000004]
[00:00:05.612]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:00:05.615]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:00:05.617]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:00:05.617]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:00:05.618]    </block>
[00:00:05.618]    <block atomic="false" info="">
[00:00:05.618]      __var nReset = 0x80;
[00:00:05.618]        // -> [nReset <= 0x00000080]
[00:00:05.618]      __var canReadPins = 0;
[00:00:05.618]        // -> [canReadPins <= 0x00000000]
[00:00:05.618]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:00:05.618]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:00:05.618]        // -> [canReadPins <= 0x00000001]
[00:00:05.618]    </block>
[00:00:05.618]    <control if="" while="1" timeout="200" info="">
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.618]      // while "1"  (timeout="200")
[00:00:05.618]      // while-condition  =>  TRUE
[00:00:05.625]      // while "1"  (timeout="200")
[00:00:05.625]      // while-condition  =>  TRUE
[00:00:05.626]      // while "1"  (timeout="200")
[00:00:05.626]      // while-condition  =>  TRUE
[00:00:05.626]      // while "1"  (timeout="200")
[00:00:05.626]      // while-condition  =>  TRUE
[00:00:05.626]      // while "1"  (timeout="200")
[00:00:05.626]      // while-condition  =>  TRUE
[00:00:05.626]      // while "1"  (timeout="200")
[00:00:05.626]      // while-condition  =>  TRUE
[00:00:05.626]      // while "1"  (timeout="200")
[00:00:05.626]      // while-condition  =>  TRUE
[00:00:05.626]      // while "1"  (timeout="200")
[00:00:05.626]      // while-condition  =>  TRUE
[00:00:05.626]      // while "1"  (timeout="200")
[00:00:05.626]      // while-condition  =>  TRUE
[00:00:05.626]      // while "1"  (timeout="200")
[00:00:05.626]      // while-condition  =>  TRUE
[00:00:05.626]      // while "1"  (timeout="200")
[00:00:05.627]      // while-condition  =>  TRUE
[00:00:05.627]      // while "1"  (timeout="200")
[00:00:05.627]      // while  =>  TIMEOUT
[00:00:05.627]      // end while "1"
[00:00:05.627]    </control>
[00:00:05.627]    <control if="canReadPins" while="" timeout="0" info="">
[00:00:05.627]      // if-block "canReadPins"
[00:00:05.627]        // =>  TRUE
[00:00:05.627]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:00:05.627]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:00:05.630]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:00:05.630]        // while-condition  =>  FALSE
[00:00:05.630]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:00:05.630]      </control>
[00:00:05.630]      // end if-block "canReadPins"
[00:00:05.630]    </control>
[00:00:05.632]    <control if="!canReadPins" while="" timeout="0" info="">
[00:00:05.632]      // if-block "!canReadPins"
[00:00:05.632]        // =>  FALSE
[00:00:05.632]      // skip if-block "!canReadPins"
[00:00:05.632]    </control>
[00:00:05.632]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:00:05.632]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:00:05.632]        // =>  TRUE
[00:00:05.632]      <block atomic="false" info="">
[00:00:05.632]        WriteAP(0x00, 0x190008);
[00:00:05.633]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:00:05.633]        WriteAP(0xF0, 0x01);
[00:00:05.639]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:00:05.639]      </block>
[00:00:05.639]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:00:05.639]    </control>
[00:00:05.639]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:00:05.639]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:00:05.639]        // =>  FALSE
[00:00:05.639]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:00:05.639]    </control>
[00:00:05.639]    <block atomic="false" info="">
[00:00:05.639]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:00:05.646]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:00:05.646]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:00:05.646]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:00:05.648]      __ap = 0; //lets make sure we reset the access point selection
[00:00:05.648]        // -> [__ap <= 0x00000000]
[00:00:05.648]    </block>
[00:00:05.648]  </sequence>
[00:00:05.648]  
[00:00:05.678]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:00:05.678]  
[00:00:05.678]  <debugvars>
[00:00:05.678]    // Pre-defined
[00:00:05.678]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:00:05.678]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:00:05.678]    __dp=0x00000000
[00:00:05.678]    __ap=0x00000000
[00:00:05.678]    __traceout=0x00000000      (Trace Disabled)
[00:00:05.678]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:00:05.678]    __FlashAddr=0x00000000
[00:00:05.678]    __FlashLen=0x00000000
[00:00:05.680]    __FlashArg=0x00000000
[00:00:05.680]    __FlashOp=0x00000000
[00:00:05.680]    __Result=0x00000000
[00:00:05.680]  </debugvars>
[00:00:05.680]  
[00:00:05.680]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:00:05.680]    <block atomic="false" info="">
[00:00:05.680]      __var deviceID = 0;
[00:00:05.680]        // -> [deviceID <= 0x00000000]
[00:00:05.680]      __var version = 0;
[00:00:05.680]        // -> [version <= 0x00000000]
[00:00:05.680]      __var partNum = 0;
[00:00:05.680]        // -> [partNum <= 0x00000000]
[00:00:05.680]      __var manuf = 0;
[00:00:05.680]        // -> [manuf <= 0x00000000]
[00:00:05.680]      __var isMSPM0G1X0X_G3X0X = 0;
[00:00:05.680]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:00:05.680]      __var isProduction = 0;
[00:00:05.680]        // -> [isProduction <= 0x00000000]
[00:00:05.680]      __var continueId = 0;
[00:00:05.680]        // -> [continueId <= 0x00000000]
[00:00:05.680]      deviceID =   Read32(0x41C40004);
[00:00:05.680]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:00:05.680]        // -> [deviceID <= 0x2BB8802F]
[00:00:05.687]      version = deviceID >> 28;
[00:00:05.687]        // -> [version <= 0x00000002]
[00:00:05.687]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:00:05.687]        // -> [partNum <= 0x0000BB88]
[00:00:05.687]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:00:05.687]        // -> [manuf <= 0x00000017]
[00:00:05.688]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:00:05.688]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:00:05.688]      isProduction = (version > 0);
[00:00:05.688]        // -> [isProduction <= 0x00000001]
[00:00:05.688]    </block>
[00:00:05.688]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:00:05.688]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:00:05.688]        // =>  FALSE
[00:00:05.688]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:00:05.688]    </control>
[00:00:05.688]    <control if="continueId == 4" while="" timeout="0" info="">
[00:00:05.689]      // if-block "continueId == 4"
[00:00:05.689]        // =>  FALSE
[00:00:05.689]      // skip if-block "continueId == 4"
[00:00:05.689]    </control>
[00:00:05.689]    <control if="!isProduction" while="" timeout="0" info="">
[00:00:05.689]      // if-block "!isProduction"
[00:00:05.689]        // =>  FALSE
[00:00:05.690]      // skip if-block "!isProduction"
[00:00:05.690]    </control>
[00:00:05.690]  </sequence>
[00:00:05.690]  
[00:05:25.058]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:05:25.058]  
[00:05:25.069]  <debugvars>
[00:05:25.069]    // Pre-defined
[00:05:25.069]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:05:25.069]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:05:25.069]    __dp=0x00000000
[00:05:25.069]    __ap=0x00000000
[00:05:25.069]    __traceout=0x00000000      (Trace Disabled)
[00:05:25.069]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:05:25.069]    __FlashAddr=0x00000000
[00:05:25.069]    __FlashLen=0x00000000
[00:05:25.069]    __FlashArg=0x00000000
[00:05:25.069]    __FlashOp=0x00000000
[00:05:25.069]    __Result=0x00000000
[00:05:25.069]  </debugvars>
[00:05:25.069]  
[00:05:25.069]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:05:25.069]    <block atomic="false" info="">
[00:05:25.069]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:05:25.069]        // -> [isSWJ <= 0x00000001]
[00:05:25.069]      __var hasDormant = __protocol & 0x00020000;
[00:05:25.069]        // -> [hasDormant <= 0x00000000]
[00:05:25.069]      __var protType   = __protocol & 0x0000FFFF;
[00:05:25.069]        // -> [protType <= 0x00000002]
[00:05:25.069]    </block>
[00:05:25.069]    <control if="protType == 1" while="" timeout="0" info="">
[00:05:25.069]      // if-block "protType == 1"
[00:05:25.069]        // =>  FALSE
[00:05:25.069]      // skip if-block "protType == 1"
[00:05:25.069]    </control>
[00:05:25.069]    <control if="protType == 2" while="" timeout="0" info="">
[00:05:25.069]      // if-block "protType == 2"
[00:05:25.069]        // =>  TRUE
[00:05:25.069]      <control if="isSWJ" while="" timeout="0" info="">
[00:05:25.069]        // if-block "isSWJ"
[00:05:25.069]          // =>  TRUE
[00:05:25.069]        <control if="hasDormant" while="" timeout="0" info="">
[00:05:25.069]          // if-block "hasDormant"
[00:05:25.069]            // =>  FALSE
[00:05:25.069]          // skip if-block "hasDormant"
[00:05:25.069]        </control>
[00:05:25.069]        <control if="!hasDormant" while="" timeout="0" info="">
[00:05:25.069]          // if-block "!hasDormant"
[00:05:25.069]            // =>  TRUE
[00:05:25.069]          <block atomic="false" info="">
[00:05:25.069]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:05:25.075]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:05:25.075]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:05:25.076]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:05:25.076]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:05:25.077]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:05:25.077]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:05:25.077]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:05:25.077]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:05:25.082]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:05:25.082]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:05:25.083]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:05:25.083]          </block>
[00:05:25.083]          // end if-block "!hasDormant"
[00:05:25.083]        </control>
[00:05:25.083]        // end if-block "isSWJ"
[00:05:25.083]      </control>
[00:05:25.083]      <control if="!isSWJ" while="" timeout="0" info="">
[00:05:25.083]        // if-block "!isSWJ"
[00:05:25.083]          // =>  FALSE
[00:05:25.083]        // skip if-block "!isSWJ"
[00:05:25.083]      </control>
[00:05:25.083]      <block atomic="false" info="">
[00:05:25.083]        ReadDP(0x0);
[00:05:25.089]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:05:25.089]      </block>
[00:05:25.089]      // end if-block "protType == 2"
[00:05:25.089]    </control>
[00:05:25.089]  </sequence>
[00:05:25.089]  
[00:05:25.089]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:05:25.089]  
[00:05:25.089]  <debugvars>
[00:05:25.089]    // Pre-defined
[00:05:25.089]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:05:25.089]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:05:25.089]    __dp=0x00000000
[00:05:25.089]    __ap=0x00000000
[00:05:25.089]    __traceout=0x00000000      (Trace Disabled)
[00:05:25.089]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:05:25.089]    __FlashAddr=0x00000000
[00:05:25.089]    __FlashLen=0x00000000
[00:05:25.089]    __FlashArg=0x00000000
[00:05:25.089]    __FlashOp=0x00000000
[00:05:25.089]    __Result=0x00000000
[00:05:25.089]  </debugvars>
[00:05:25.089]  
[00:05:25.089]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:05:25.089]    <block atomic="false" info="">
[00:05:25.089]      __var SW_DP_ABORT       = 0x0;
[00:05:25.089]        // -> [SW_DP_ABORT <= 0x00000000]
[00:05:25.089]      __var DP_CTRL_STAT      = 0x4;
[00:05:25.089]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:05:25.089]      __var DP_SELECT         = 0x8;
[00:05:25.089]        // -> [DP_SELECT <= 0x00000008]
[00:05:25.095]      __var powered_down      = 0;
[00:05:25.095]        // -> [powered_down <= 0x00000000]
[00:05:25.095]      WriteDP(DP_SELECT, 0x00000000);
[00:05:25.099]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:05:25.099]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:05:25.103]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:05:25.103]        // -> [powered_down <= 0x00000001]
[00:05:25.103]    </block>
[00:05:25.103]    <control if="powered_down" while="" timeout="0" info="">
[00:05:25.103]      // if-block "powered_down"
[00:05:25.103]        // =>  TRUE
[00:05:25.103]      <block atomic="false" info="">
[00:05:25.103]        Message(0, "Debug/System power-up request sent");
[00:05:25.103]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:05:25.107]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:05:25.107]      </block>
[00:05:25.107]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:05:25.108]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:05:25.110]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:05:25.110]        // while-condition  =>  FALSE
[00:05:25.110]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:05:25.110]      </control>
[00:05:25.110]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:05:25.110]        // if-block "(__protocol & 0xFFFF) == 1"
[00:05:25.110]          // =>  FALSE
[00:05:25.110]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:05:25.110]      </control>
[00:05:25.111]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:05:25.111]        // if-block "(__protocol & 0xFFFF) == 2"
[00:05:25.111]          // =>  TRUE
[00:05:25.111]        <block atomic="false" info="">
[00:05:25.111]          Message(0, "executing SWD power up");
[00:05:25.111]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:05:25.116]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:05:25.116]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:05:25.117]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:05:25.117]        </block>
[00:05:25.117]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:05:25.117]      </control>
[00:05:25.117]      // end if-block "powered_down"
[00:05:25.117]    </control>
[00:05:25.118]    <block atomic="false" info="">
[00:05:25.118]      __var DEBUG_PORT_VAL    = 0;
[00:05:25.118]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:05:25.118]      __var ACCESS_POINT_VAL  = 0;
[00:05:25.118]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:05:25.118]      __ap = 1; 
[00:05:25.118]        // -> [__ap <= 0x00000001]
[00:05:25.118]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:05:25.128]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:05:25.128]      __ap = 4;
[00:05:25.128]        // -> [__ap <= 0x00000004]
[00:05:25.128]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:05:25.132]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:05:25.132]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:05:25.132]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:05:25.132]    </block>
[00:05:25.132]    <block atomic="false" info="">
[00:05:25.132]      __var nReset = 0x80;
[00:05:25.132]        // -> [nReset <= 0x00000080]
[00:05:25.132]      __var canReadPins = 0;
[00:05:25.132]        // -> [canReadPins <= 0x00000000]
[00:05:25.132]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:05:25.137]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:05:25.137]        // -> [canReadPins <= 0x00000001]
[00:05:25.137]    </block>
[00:05:25.139]    <control if="" while="1" timeout="200" info="">
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.139]      // while "1"  (timeout="200")
[00:05:25.139]      // while-condition  =>  TRUE
[00:05:25.145]      // while "1"  (timeout="200")
[00:05:25.145]      // while  =>  TIMEOUT
[00:05:25.145]      // end while "1"
[00:05:25.145]    </control>
[00:05:25.145]    <control if="canReadPins" while="" timeout="0" info="">
[00:05:25.145]      // if-block "canReadPins"
[00:05:25.145]        // =>  TRUE
[00:05:25.145]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:05:25.145]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:05:25.148]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:05:25.148]        // while-condition  =>  FALSE
[00:05:25.148]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:05:25.148]      </control>
[00:05:25.148]      // end if-block "canReadPins"
[00:05:25.148]    </control>
[00:05:25.148]    <control if="!canReadPins" while="" timeout="0" info="">
[00:05:25.148]      // if-block "!canReadPins"
[00:05:25.148]        // =>  FALSE
[00:05:25.151]      // skip if-block "!canReadPins"
[00:05:25.151]    </control>
[00:05:25.151]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:05:25.151]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:05:25.151]        // =>  TRUE
[00:05:25.151]      <block atomic="false" info="">
[00:05:25.151]        WriteAP(0x00, 0x190008);
[00:05:25.151]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:05:25.151]        WriteAP(0xF0, 0x01);
[00:05:25.160]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:05:25.160]      </block>
[00:05:25.160]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:05:25.160]    </control>
[00:05:25.160]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:05:25.160]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:05:25.160]        // =>  FALSE
[00:05:25.160]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:05:25.160]    </control>
[00:05:25.160]    <block atomic="false" info="">
[00:05:25.160]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:05:25.187]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:05:25.187]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:05:25.187]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:05:25.187]      __ap = 0; //lets make sure we reset the access point selection
[00:05:25.188]        // -> [__ap <= 0x00000000]
[00:05:25.188]    </block>
[00:05:25.188]  </sequence>
[00:05:25.188]  
[00:05:25.221]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:05:25.221]  
[00:05:25.221]  <debugvars>
[00:05:25.221]    // Pre-defined
[00:05:25.221]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:05:25.221]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:05:25.221]    __dp=0x00000000
[00:05:25.221]    __ap=0x00000000
[00:05:25.221]    __traceout=0x00000000      (Trace Disabled)
[00:05:25.221]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:05:25.221]    __FlashAddr=0x00000000
[00:05:25.221]    __FlashLen=0x00000000
[00:05:25.221]    __FlashArg=0x00000000
[00:05:25.221]    __FlashOp=0x00000000
[00:05:25.221]    __Result=0x00000000
[00:05:25.221]  </debugvars>
[00:05:25.221]  
[00:05:25.221]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:05:25.221]    <block atomic="false" info="">
[00:05:25.221]      __var deviceID = 0;
[00:05:25.221]        // -> [deviceID <= 0x00000000]
[00:05:25.221]      __var version = 0;
[00:05:25.221]        // -> [version <= 0x00000000]
[00:05:25.221]      __var partNum = 0;
[00:05:25.221]        // -> [partNum <= 0x00000000]
[00:05:25.221]      __var manuf = 0;
[00:05:25.221]        // -> [manuf <= 0x00000000]
[00:05:25.221]      __var isMSPM0G1X0X_G3X0X = 0;
[00:05:25.221]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:05:25.221]      __var isProduction = 0;
[00:05:25.221]        // -> [isProduction <= 0x00000000]
[00:05:25.221]      __var continueId = 0;
[00:05:25.221]        // -> [continueId <= 0x00000000]
[00:05:25.221]      deviceID =   Read32(0x41C40004);
[00:05:25.229]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:05:25.229]        // -> [deviceID <= 0x2BB8802F]
[00:05:25.235]      version = deviceID >> 28;
[00:05:25.235]        // -> [version <= 0x00000002]
[00:05:25.235]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:05:25.235]        // -> [partNum <= 0x0000BB88]
[00:05:25.235]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:05:25.235]        // -> [manuf <= 0x00000017]
[00:05:25.236]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:05:25.236]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:05:25.236]      isProduction = (version > 0);
[00:05:25.236]        // -> [isProduction <= 0x00000001]
[00:05:25.236]    </block>
[00:05:25.236]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:05:25.236]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:05:25.236]        // =>  FALSE
[00:05:25.236]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:05:25.236]    </control>
[00:05:25.237]    <control if="continueId == 4" while="" timeout="0" info="">
[00:05:25.237]      // if-block "continueId == 4"
[00:05:25.237]        // =>  FALSE
[00:05:25.237]      // skip if-block "continueId == 4"
[00:05:25.237]    </control>
[00:05:25.237]    <control if="!isProduction" while="" timeout="0" info="">
[00:05:25.237]      // if-block "!isProduction"
[00:05:25.237]        // =>  FALSE
[00:05:25.237]      // skip if-block "!isProduction"
[00:05:25.237]    </control>
[00:05:25.237]  </sequence>
[00:05:25.237]  
[00:06:32.964]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:06:32.964]  
[00:06:32.965]  <debugvars>
[00:06:32.965]    // Pre-defined
[00:06:32.965]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:06:32.965]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:06:32.965]    __dp=0x00000000
[00:06:32.965]    __ap=0x00000000
[00:06:32.965]    __traceout=0x00000000      (Trace Disabled)
[00:06:32.965]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:06:32.965]    __FlashAddr=0x00000000
[00:06:32.965]    __FlashLen=0x00000000
[00:06:32.965]    __FlashArg=0x00000000
[00:06:32.965]    __FlashOp=0x00000000
[00:06:32.965]    __Result=0x00000000
[00:06:32.965]  </debugvars>
[00:06:32.965]  
[00:06:32.965]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:06:32.965]    <block atomic="false" info="">
[00:06:32.965]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:06:32.965]        // -> [isSWJ <= 0x00000001]
[00:06:32.965]      __var hasDormant = __protocol & 0x00020000;
[00:06:32.967]        // -> [hasDormant <= 0x00000000]
[00:06:32.967]      __var protType   = __protocol & 0x0000FFFF;
[00:06:32.967]        // -> [protType <= 0x00000002]
[00:06:32.967]    </block>
[00:06:32.968]    <control if="protType == 1" while="" timeout="0" info="">
[00:06:32.968]      // if-block "protType == 1"
[00:06:32.968]        // =>  FALSE
[00:06:32.968]      // skip if-block "protType == 1"
[00:06:32.968]    </control>
[00:06:32.969]    <control if="protType == 2" while="" timeout="0" info="">
[00:06:32.969]      // if-block "protType == 2"
[00:06:32.969]        // =>  TRUE
[00:06:32.969]      <control if="isSWJ" while="" timeout="0" info="">
[00:06:32.969]        // if-block "isSWJ"
[00:06:32.969]          // =>  TRUE
[00:06:32.969]        <control if="hasDormant" while="" timeout="0" info="">
[00:06:32.970]          // if-block "hasDormant"
[00:06:32.970]            // =>  FALSE
[00:06:32.970]          // skip if-block "hasDormant"
[00:06:32.970]        </control>
[00:06:32.970]        <control if="!hasDormant" while="" timeout="0" info="">
[00:06:32.970]          // if-block "!hasDormant"
[00:06:32.970]            // =>  TRUE
[00:06:32.970]          <block atomic="false" info="">
[00:06:32.970]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:06:32.971]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:06:32.971]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:06:32.973]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:06:32.973]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:06:32.974]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:06:32.974]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:06:32.974]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:06:32.974]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:06:32.978]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:06:32.978]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:06:32.978]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:06:32.978]          </block>
[00:06:32.978]          // end if-block "!hasDormant"
[00:06:32.978]        </control>
[00:06:32.978]        // end if-block "isSWJ"
[00:06:32.978]      </control>
[00:06:32.978]      <control if="!isSWJ" while="" timeout="0" info="">
[00:06:32.978]        // if-block "!isSWJ"
[00:06:32.978]          // =>  FALSE
[00:06:32.978]        // skip if-block "!isSWJ"
[00:06:32.978]      </control>
[00:06:32.978]      <block atomic="false" info="">
[00:06:32.978]        ReadDP(0x0);
[00:06:32.983]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:06:32.983]      </block>
[00:06:32.983]      // end if-block "protType == 2"
[00:06:32.983]    </control>
[00:06:32.983]  </sequence>
[00:06:32.983]  
[00:06:32.984]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:06:32.984]  
[00:06:32.984]  <debugvars>
[00:06:32.984]    // Pre-defined
[00:06:32.984]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:06:32.984]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:06:32.984]    __dp=0x00000000
[00:06:32.984]    __ap=0x00000000
[00:06:32.984]    __traceout=0x00000000      (Trace Disabled)
[00:06:32.984]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:06:32.984]    __FlashAddr=0x00000000
[00:06:32.984]    __FlashLen=0x00000000
[00:06:32.984]    __FlashArg=0x00000000
[00:06:32.984]    __FlashOp=0x00000000
[00:06:32.984]    __Result=0x00000000
[00:06:32.984]  </debugvars>
[00:06:32.984]  
[00:06:32.984]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:06:32.984]    <block atomic="false" info="">
[00:06:32.984]      __var SW_DP_ABORT       = 0x0;
[00:06:32.984]        // -> [SW_DP_ABORT <= 0x00000000]
[00:06:32.984]      __var DP_CTRL_STAT      = 0x4;
[00:06:32.984]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:06:32.984]      __var DP_SELECT         = 0x8;
[00:06:32.984]        // -> [DP_SELECT <= 0x00000008]
[00:06:32.984]      __var powered_down      = 0;
[00:06:32.984]        // -> [powered_down <= 0x00000000]
[00:06:32.984]      WriteDP(DP_SELECT, 0x00000000);
[00:06:32.990]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:06:32.990]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:06:32.992]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:06:32.992]        // -> [powered_down <= 0x00000001]
[00:06:32.992]    </block>
[00:06:32.992]    <control if="powered_down" while="" timeout="0" info="">
[00:06:32.993]      // if-block "powered_down"
[00:06:32.993]        // =>  TRUE
[00:06:32.993]      <block atomic="false" info="">
[00:06:32.993]        Message(0, "Debug/System power-up request sent");
[00:06:32.994]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:06:32.997]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:06:32.997]      </block>
[00:06:32.998]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:06:32.998]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:06:33.000]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:06:33.000]        // while-condition  =>  FALSE
[00:06:33.000]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:06:33.000]      </control>
[00:06:33.000]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:06:33.000]        // if-block "(__protocol & 0xFFFF) == 1"
[00:06:33.000]          // =>  FALSE
[00:06:33.000]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:06:33.001]      </control>
[00:06:33.001]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:06:33.001]        // if-block "(__protocol & 0xFFFF) == 2"
[00:06:33.001]          // =>  TRUE
[00:06:33.001]        <block atomic="false" info="">
[00:06:33.002]          Message(0, "executing SWD power up");
[00:06:33.004]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:06:33.004]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:06:33.004]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:06:33.007]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:06:33.007]        </block>
[00:06:33.007]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:06:33.007]      </control>
[00:06:33.007]      // end if-block "powered_down"
[00:06:33.007]    </control>
[00:06:33.007]    <block atomic="false" info="">
[00:06:33.007]      __var DEBUG_PORT_VAL    = 0;
[00:06:33.007]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:06:33.007]      __var ACCESS_POINT_VAL  = 0;
[00:06:33.007]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:06:33.007]      __ap = 1; 
[00:06:33.007]        // -> [__ap <= 0x00000001]
[00:06:33.007]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:06:33.013]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:06:33.013]      __ap = 4;
[00:06:33.013]        // -> [__ap <= 0x00000004]
[00:06:33.013]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:06:33.016]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:06:33.016]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:06:33.016]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:06:33.016]    </block>
[00:06:33.016]    <block atomic="false" info="">
[00:06:33.016]      __var nReset = 0x80;
[00:06:33.016]        // -> [nReset <= 0x00000080]
[00:06:33.016]      __var canReadPins = 0;
[00:06:33.016]        // -> [canReadPins <= 0x00000000]
[00:06:33.016]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:06:33.021]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:06:33.021]        // -> [canReadPins <= 0x00000001]
[00:06:33.021]    </block>
[00:06:33.021]    <control if="" while="1" timeout="200" info="">
[00:06:33.021]      // while "1"  (timeout="200")
[00:06:33.021]      // while-condition  =>  TRUE
[00:06:33.021]      // while "1"  (timeout="200")
[00:06:33.021]      // while-condition  =>  TRUE
[00:06:33.021]      // while "1"  (timeout="200")
[00:06:33.021]      // while-condition  =>  TRUE
[00:06:33.021]      // while "1"  (timeout="200")
[00:06:33.022]      // while-condition  =>  TRUE
[00:06:33.022]      // while "1"  (timeout="200")
[00:06:33.022]      // while-condition  =>  TRUE
[00:06:33.022]      // while "1"  (timeout="200")
[00:06:33.022]      // while-condition  =>  TRUE
[00:06:33.022]      // while "1"  (timeout="200")
[00:06:33.022]      // while-condition  =>  TRUE
[00:06:33.022]      // while "1"  (timeout="200")
[00:06:33.022]      // while-condition  =>  TRUE
[00:06:33.022]      // while "1"  (timeout="200")
[00:06:33.022]      // while-condition  =>  TRUE
[00:06:33.022]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.023]      // while-condition  =>  TRUE
[00:06:33.023]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.028]      // while "1"  (timeout="200")
[00:06:33.028]      // while-condition  =>  TRUE
[00:06:33.031]      // while "1"  (timeout="200")
[00:06:33.031]      // while-condition  =>  TRUE
[00:06:33.032]      // while "1"  (timeout="200")
[00:06:33.032]      // while-condition  =>  TRUE
[00:06:33.032]      // while "1"  (timeout="200")
[00:06:33.032]      // while-condition  =>  TRUE
[00:06:33.032]      // while "1"  (timeout="200")
[00:06:33.032]      // while-condition  =>  TRUE
[00:06:33.032]      // while "1"  (timeout="200")
[00:06:33.032]      // while-condition  =>  TRUE
[00:06:33.032]      // while "1"  (timeout="200")
[00:06:33.032]      // while-condition  =>  TRUE
[00:06:33.032]      // while "1"  (timeout="200")
[00:06:33.032]      // while-condition  =>  TRUE
[00:06:33.034]      // while "1"  (timeout="200")
[00:06:33.034]      // while  =>  TIMEOUT
[00:06:33.034]      // end while "1"
[00:06:33.034]    </control>
[00:06:33.034]    <control if="canReadPins" while="" timeout="0" info="">
[00:06:33.034]      // if-block "canReadPins"
[00:06:33.035]        // =>  TRUE
[00:06:33.035]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:06:33.035]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:06:33.036]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:06:33.036]        // while-condition  =>  FALSE
[00:06:33.036]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:06:33.036]      </control>
[00:06:33.036]      // end if-block "canReadPins"
[00:06:33.036]    </control>
[00:06:33.036]    <control if="!canReadPins" while="" timeout="0" info="">
[00:06:33.036]      // if-block "!canReadPins"
[00:06:33.036]        // =>  FALSE
[00:06:33.036]      // skip if-block "!canReadPins"
[00:06:33.036]    </control>
[00:06:33.036]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:06:33.036]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:06:33.036]        // =>  TRUE
[00:06:33.036]      <block atomic="false" info="">
[00:06:33.036]        WriteAP(0x00, 0x190008);
[00:06:33.036]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:06:33.036]        WriteAP(0xF0, 0x01);
[00:06:33.044]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:06:33.044]      </block>
[00:06:33.044]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:06:33.044]    </control>
[00:06:33.044]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:06:33.044]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:06:33.048]        // =>  FALSE
[00:06:33.049]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:06:33.049]    </control>
[00:06:33.049]    <block atomic="false" info="">
[00:06:33.049]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:06:33.052]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:06:33.052]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:06:33.052]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:06:33.055]      __ap = 0; //lets make sure we reset the access point selection
[00:06:33.055]        // -> [__ap <= 0x00000000]
[00:06:33.055]    </block>
[00:06:33.055]  </sequence>
[00:06:33.055]  
[00:06:33.093]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:06:33.093]  
[00:06:33.093]  <debugvars>
[00:06:33.093]    // Pre-defined
[00:06:33.093]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:06:33.093]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:06:33.093]    __dp=0x00000000
[00:06:33.093]    __ap=0x00000000
[00:06:33.093]    __traceout=0x00000000      (Trace Disabled)
[00:06:33.093]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:06:33.093]    __FlashAddr=0x00000000
[00:06:33.093]    __FlashLen=0x00000000
[00:06:33.093]    __FlashArg=0x00000000
[00:06:33.093]    __FlashOp=0x00000000
[00:06:33.093]    __Result=0x00000000
[00:06:33.093]  </debugvars>
[00:06:33.093]  
[00:06:33.093]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:06:33.093]    <block atomic="false" info="">
[00:06:33.093]      __var deviceID = 0;
[00:06:33.093]        // -> [deviceID <= 0x00000000]
[00:06:33.093]      __var version = 0;
[00:06:33.095]        // -> [version <= 0x00000000]
[00:06:33.095]      __var partNum = 0;
[00:06:33.095]        // -> [partNum <= 0x00000000]
[00:06:33.095]      __var manuf = 0;
[00:06:33.095]        // -> [manuf <= 0x00000000]
[00:06:33.095]      __var isMSPM0G1X0X_G3X0X = 0;
[00:06:33.095]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:06:33.095]      __var isProduction = 0;
[00:06:33.095]        // -> [isProduction <= 0x00000000]
[00:06:33.095]      __var continueId = 0;
[00:06:33.095]        // -> [continueId <= 0x00000000]
[00:06:33.095]      deviceID =   Read32(0x41C40004);
[00:06:33.098]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:06:33.101]        // -> [deviceID <= 0x2BB8802F]
[00:06:33.101]      version = deviceID >> 28;
[00:06:33.101]        // -> [version <= 0x00000002]
[00:06:33.101]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:06:33.101]        // -> [partNum <= 0x0000BB88]
[00:06:33.101]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:06:33.101]        // -> [manuf <= 0x00000017]
[00:06:33.101]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:06:33.101]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:06:33.101]      isProduction = (version > 0);
[00:06:33.101]        // -> [isProduction <= 0x00000001]
[00:06:33.102]    </block>
[00:06:33.102]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:06:33.102]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:06:33.102]        // =>  FALSE
[00:06:33.102]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:06:33.102]    </control>
[00:06:33.102]    <control if="continueId == 4" while="" timeout="0" info="">
[00:06:33.102]      // if-block "continueId == 4"
[00:06:33.102]        // =>  FALSE
[00:06:33.102]      // skip if-block "continueId == 4"
[00:06:33.102]    </control>
[00:06:33.102]    <control if="!isProduction" while="" timeout="0" info="">
[00:06:33.103]      // if-block "!isProduction"
[00:06:33.103]        // =>  FALSE
[00:06:33.103]      // skip if-block "!isProduction"
[00:06:33.103]    </control>
[00:06:33.103]  </sequence>
[00:06:33.103]  
[00:07:42.599]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:07:42.599]  
[00:07:42.599]  <debugvars>
[00:07:42.599]    // Pre-defined
[00:07:42.599]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:07:42.599]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:07:42.599]    __dp=0x00000000
[00:07:42.599]    __ap=0x00000000
[00:07:42.599]    __traceout=0x00000000      (Trace Disabled)
[00:07:42.599]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:07:42.599]    __FlashAddr=0x00000000
[00:07:42.599]    __FlashLen=0x00000000
[00:07:42.601]    __FlashArg=0x00000000
[00:07:42.601]    __FlashOp=0x00000000
[00:07:42.601]    __Result=0x00000000
[00:07:42.601]  </debugvars>
[00:07:42.601]  
[00:07:42.601]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:07:42.602]    <block atomic="false" info="">
[00:07:42.602]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:07:42.602]        // -> [isSWJ <= 0x00000001]
[00:07:42.602]      __var hasDormant = __protocol & 0x00020000;
[00:07:42.602]        // -> [hasDormant <= 0x00000000]
[00:07:42.602]      __var protType   = __protocol & 0x0000FFFF;
[00:07:42.602]        // -> [protType <= 0x00000002]
[00:07:42.602]    </block>
[00:07:42.602]    <control if="protType == 1" while="" timeout="0" info="">
[00:07:42.602]      // if-block "protType == 1"
[00:07:42.602]        // =>  FALSE
[00:07:42.602]      // skip if-block "protType == 1"
[00:07:42.602]    </control>
[00:07:42.602]    <control if="protType == 2" while="" timeout="0" info="">
[00:07:42.602]      // if-block "protType == 2"
[00:07:42.602]        // =>  TRUE
[00:07:42.602]      <control if="isSWJ" while="" timeout="0" info="">
[00:07:42.602]        // if-block "isSWJ"
[00:07:42.602]          // =>  TRUE
[00:07:42.602]        <control if="hasDormant" while="" timeout="0" info="">
[00:07:42.602]          // if-block "hasDormant"
[00:07:42.602]            // =>  FALSE
[00:07:42.602]          // skip if-block "hasDormant"
[00:07:42.604]        </control>
[00:07:42.604]        <control if="!hasDormant" while="" timeout="0" info="">
[00:07:42.604]          // if-block "!hasDormant"
[00:07:42.604]            // =>  TRUE
[00:07:42.604]          <block atomic="false" info="">
[00:07:42.604]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:07:42.605]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:07:42.605]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:07:42.607]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:07:42.607]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:07:42.609]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:07:42.609]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:07:42.610]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:07:42.611]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:07:42.612]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:07:42.612]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:07:42.614]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:07:42.614]          </block>
[00:07:42.614]          // end if-block "!hasDormant"
[00:07:42.614]        </control>
[00:07:42.614]        // end if-block "isSWJ"
[00:07:42.614]      </control>
[00:07:42.614]      <control if="!isSWJ" while="" timeout="0" info="">
[00:07:42.614]        // if-block "!isSWJ"
[00:07:42.614]          // =>  FALSE
[00:07:42.614]        // skip if-block "!isSWJ"
[00:07:42.614]      </control>
[00:07:42.614]      <block atomic="false" info="">
[00:07:42.614]        ReadDP(0x0);
[00:07:42.619]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:07:42.619]      </block>
[00:07:42.619]      // end if-block "protType == 2"
[00:07:42.619]    </control>
[00:07:42.619]  </sequence>
[00:07:42.619]  
[00:07:42.622]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:07:42.622]  
[00:07:42.622]  <debugvars>
[00:07:42.622]    // Pre-defined
[00:07:42.622]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:07:42.622]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:07:42.622]    __dp=0x00000000
[00:07:42.622]    __ap=0x00000000
[00:07:42.622]    __traceout=0x00000000      (Trace Disabled)
[00:07:42.622]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:07:42.622]    __FlashAddr=0x00000000
[00:07:42.622]    __FlashLen=0x00000000
[00:07:42.622]    __FlashArg=0x00000000
[00:07:42.622]    __FlashOp=0x00000000
[00:07:42.622]    __Result=0x00000000
[00:07:42.622]  </debugvars>
[00:07:42.622]  
[00:07:42.622]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:07:42.622]    <block atomic="false" info="">
[00:07:42.622]      __var SW_DP_ABORT       = 0x0;
[00:07:42.622]        // -> [SW_DP_ABORT <= 0x00000000]
[00:07:42.622]      __var DP_CTRL_STAT      = 0x4;
[00:07:42.622]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:07:42.622]      __var DP_SELECT         = 0x8;
[00:07:42.622]        // -> [DP_SELECT <= 0x00000008]
[00:07:42.622]      __var powered_down      = 0;
[00:07:42.622]        // -> [powered_down <= 0x00000000]
[00:07:42.622]      WriteDP(DP_SELECT, 0x00000000);
[00:07:42.626]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:07:42.626]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:07:42.632]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:07:42.632]        // -> [powered_down <= 0x00000001]
[00:07:42.632]    </block>
[00:07:42.632]    <control if="powered_down" while="" timeout="0" info="">
[00:07:42.632]      // if-block "powered_down"
[00:07:42.632]        // =>  TRUE
[00:07:42.632]      <block atomic="false" info="">
[00:07:42.632]        Message(0, "Debug/System power-up request sent");
[00:07:42.633]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:07:42.636]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:07:42.636]      </block>
[00:07:42.636]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:07:42.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:07:42.638]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:07:42.638]        // while-condition  =>  FALSE
[00:07:42.638]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:07:42.638]      </control>
[00:07:42.638]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:07:42.638]        // if-block "(__protocol & 0xFFFF) == 1"
[00:07:42.638]          // =>  FALSE
[00:07:42.638]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:07:42.638]      </control>
[00:07:42.638]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:07:42.638]        // if-block "(__protocol & 0xFFFF) == 2"
[00:07:42.638]          // =>  TRUE
[00:07:42.638]        <block atomic="false" info="">
[00:07:42.638]          Message(0, "executing SWD power up");
[00:07:42.641]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:07:42.642]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:07:42.642]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:07:42.642]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:07:42.642]        </block>
[00:07:42.642]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:07:42.642]      </control>
[00:07:42.642]      // end if-block "powered_down"
[00:07:42.642]    </control>
[00:07:42.642]    <block atomic="false" info="">
[00:07:42.642]      __var DEBUG_PORT_VAL    = 0;
[00:07:42.642]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:07:42.642]      __var ACCESS_POINT_VAL  = 0;
[00:07:42.642]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:07:42.642]      __ap = 1; 
[00:07:42.642]        // -> [__ap <= 0x00000001]
[00:07:42.642]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:07:42.650]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:07:42.650]      __ap = 4;
[00:07:42.650]        // -> [__ap <= 0x00000004]
[00:07:42.650]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:07:42.654]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:07:42.654]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:07:42.654]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:07:42.656]    </block>
[00:07:42.656]    <block atomic="false" info="">
[00:07:42.656]      __var nReset = 0x80;
[00:07:42.656]        // -> [nReset <= 0x00000080]
[00:07:42.658]      __var canReadPins = 0;
[00:07:42.658]        // -> [canReadPins <= 0x00000000]
[00:07:42.658]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:07:42.663]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:07:42.663]        // -> [canReadPins <= 0x00000001]
[00:07:42.663]    </block>
[00:07:42.663]    <control if="" while="1" timeout="200" info="">
[00:07:42.663]      // while "1"  (timeout="200")
[00:07:42.663]      // while-condition  =>  TRUE
[00:07:42.663]      // while "1"  (timeout="200")
[00:07:42.663]      // while-condition  =>  TRUE
[00:07:42.663]      // while "1"  (timeout="200")
[00:07:42.663]      // while-condition  =>  TRUE
[00:07:42.663]      // while "1"  (timeout="200")
[00:07:42.663]      // while-condition  =>  TRUE
[00:07:42.663]      // while "1"  (timeout="200")
[00:07:42.663]      // while-condition  =>  TRUE
[00:07:42.663]      // while "1"  (timeout="200")
[00:07:42.663]      // while-condition  =>  TRUE
[00:07:42.663]      // while "1"  (timeout="200")
[00:07:42.663]      // while-condition  =>  TRUE
[00:07:42.668]      // while "1"  (timeout="200")
[00:07:42.668]      // while-condition  =>  TRUE
[00:07:42.668]      // while "1"  (timeout="200")
[00:07:42.668]      // while-condition  =>  TRUE
[00:07:42.668]      // while "1"  (timeout="200")
[00:07:42.668]      // while-condition  =>  TRUE
[00:07:42.668]      // while "1"  (timeout="200")
[00:07:42.668]      // while-condition  =>  TRUE
[00:07:42.668]      // while "1"  (timeout="200")
[00:07:42.668]      // while-condition  =>  TRUE
[00:07:42.668]      // while "1"  (timeout="200")
[00:07:42.668]      // while-condition  =>  TRUE
[00:07:42.668]      // while "1"  (timeout="200")
[00:07:42.668]      // while-condition  =>  TRUE
[00:07:42.668]      // while "1"  (timeout="200")
[00:07:42.669]      // while-condition  =>  TRUE
[00:07:42.669]      // while "1"  (timeout="200")
[00:07:42.669]      // while-condition  =>  TRUE
[00:07:42.670]      // while "1"  (timeout="200")
[00:07:42.670]      // while-condition  =>  TRUE
[00:07:42.670]      // while "1"  (timeout="200")
[00:07:42.670]      // while-condition  =>  TRUE
[00:07:42.670]      // while "1"  (timeout="200")
[00:07:42.670]      // while-condition  =>  TRUE
[00:07:42.670]      // while "1"  (timeout="200")
[00:07:42.670]      // while-condition  =>  TRUE
[00:07:42.670]      // while "1"  (timeout="200")
[00:07:42.670]      // while-condition  =>  TRUE
[00:07:42.670]      // while "1"  (timeout="200")
[00:07:42.670]      // while-condition  =>  TRUE
[00:07:42.670]      // while "1"  (timeout="200")
[00:07:42.670]      // while-condition  =>  TRUE
[00:07:42.670]      // while "1"  (timeout="200")
[00:07:42.670]      // while-condition  =>  TRUE
[00:07:42.671]      // while "1"  (timeout="200")
[00:07:42.671]      // while-condition  =>  TRUE
[00:07:42.671]      // while "1"  (timeout="200")
[00:07:42.671]      // while-condition  =>  TRUE
[00:07:42.671]      // while "1"  (timeout="200")
[00:07:42.671]      // while-condition  =>  TRUE
[00:07:42.671]      // while "1"  (timeout="200")
[00:07:42.671]      // while-condition  =>  TRUE
[00:07:42.671]      // while "1"  (timeout="200")
[00:07:42.671]      // while-condition  =>  TRUE
[00:07:42.672]      // while "1"  (timeout="200")
[00:07:42.672]      // while-condition  =>  TRUE
[00:07:42.672]      // while "1"  (timeout="200")
[00:07:42.672]      // while-condition  =>  TRUE
[00:07:42.672]      // while "1"  (timeout="200")
[00:07:42.672]      // while-condition  =>  TRUE
[00:07:42.672]      // while "1"  (timeout="200")
[00:07:42.672]      // while-condition  =>  TRUE
[00:07:42.673]      // while "1"  (timeout="200")
[00:07:42.673]      // while  =>  TIMEOUT
[00:07:42.673]      // end while "1"
[00:07:42.673]    </control>
[00:07:42.673]    <control if="canReadPins" while="" timeout="0" info="">
[00:07:42.673]      // if-block "canReadPins"
[00:07:42.673]        // =>  TRUE
[00:07:42.673]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:07:42.673]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:07:42.674]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:07:42.674]        // while-condition  =>  FALSE
[00:07:42.675]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:07:42.675]      </control>
[00:07:42.675]      // end if-block "canReadPins"
[00:07:42.675]    </control>
[00:07:42.675]    <control if="!canReadPins" while="" timeout="0" info="">
[00:07:42.675]      // if-block "!canReadPins"
[00:07:42.675]        // =>  FALSE
[00:07:42.675]      // skip if-block "!canReadPins"
[00:07:42.675]    </control>
[00:07:42.675]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:07:42.675]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:07:42.675]        // =>  TRUE
[00:07:42.675]      <block atomic="false" info="">
[00:07:42.675]        WriteAP(0x00, 0x190008);
[00:07:42.677]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:07:42.677]        WriteAP(0xF0, 0x01);
[00:07:42.682]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:07:42.682]      </block>
[00:07:42.682]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:07:42.682]    </control>
[00:07:42.682]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:07:42.682]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:07:42.682]        // =>  FALSE
[00:07:42.684]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:07:42.684]    </control>
[00:07:42.684]    <block atomic="false" info="">
[00:07:42.684]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:07:42.686]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:07:42.686]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:07:42.686]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:07:42.689]      __ap = 0; //lets make sure we reset the access point selection
[00:07:42.689]        // -> [__ap <= 0x00000000]
[00:07:42.689]    </block>
[00:07:42.689]  </sequence>
[00:07:42.689]  
[00:07:42.713]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:07:42.713]  
[00:07:42.713]  <debugvars>
[00:07:42.713]    // Pre-defined
[00:07:42.713]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:07:42.713]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:07:42.713]    __dp=0x00000000
[00:07:42.713]    __ap=0x00000000
[00:07:42.713]    __traceout=0x00000000      (Trace Disabled)
[00:07:42.713]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:07:42.713]    __FlashAddr=0x00000000
[00:07:42.713]    __FlashLen=0x00000000
[00:07:42.713]    __FlashArg=0x00000000
[00:07:42.713]    __FlashOp=0x00000000
[00:07:42.713]    __Result=0x00000000
[00:07:42.713]  </debugvars>
[00:07:42.713]  
[00:07:42.713]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:07:42.713]    <block atomic="false" info="">
[00:07:42.713]      __var deviceID = 0;
[00:07:42.715]        // -> [deviceID <= 0x00000000]
[00:07:42.715]      __var version = 0;
[00:07:42.715]        // -> [version <= 0x00000000]
[00:07:42.715]      __var partNum = 0;
[00:07:42.715]        // -> [partNum <= 0x00000000]
[00:07:42.715]      __var manuf = 0;
[00:07:42.715]        // -> [manuf <= 0x00000000]
[00:07:42.715]      __var isMSPM0G1X0X_G3X0X = 0;
[00:07:42.715]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:07:42.715]      __var isProduction = 0;
[00:07:42.715]        // -> [isProduction <= 0x00000000]
[00:07:42.715]      __var continueId = 0;
[00:07:42.715]        // -> [continueId <= 0x00000000]
[00:07:42.715]      deviceID =   Read32(0x41C40004);
[00:07:42.723]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:07:42.723]        // -> [deviceID <= 0x2BB8802F]
[00:07:42.723]      version = deviceID >> 28;
[00:07:42.723]        // -> [version <= 0x00000002]
[00:07:42.724]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:07:42.724]        // -> [partNum <= 0x0000BB88]
[00:07:42.724]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:07:42.724]        // -> [manuf <= 0x00000017]
[00:07:42.724]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:07:42.724]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:07:42.724]      isProduction = (version > 0);
[00:07:42.724]        // -> [isProduction <= 0x00000001]
[00:07:42.724]    </block>
[00:07:42.724]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:07:42.724]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:07:42.724]        // =>  FALSE
[00:07:42.724]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:07:42.725]    </control>
[00:07:42.725]    <control if="continueId == 4" while="" timeout="0" info="">
[00:07:42.725]      // if-block "continueId == 4"
[00:07:42.725]        // =>  FALSE
[00:07:42.725]      // skip if-block "continueId == 4"
[00:07:42.725]    </control>
[00:07:42.725]    <control if="!isProduction" while="" timeout="0" info="">
[00:07:42.725]      // if-block "!isProduction"
[00:07:42.725]        // =>  FALSE
[00:07:42.725]      // skip if-block "!isProduction"
[00:07:42.725]    </control>
[00:07:42.725]  </sequence>
[00:07:42.725]  
[00:08:17.946]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:08:17.946]  
[00:08:17.956]  <debugvars>
[00:08:17.956]    // Pre-defined
[00:08:17.956]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:08:17.956]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:08:17.956]    __dp=0x00000000
[00:08:17.956]    __ap=0x00000000
[00:08:17.956]    __traceout=0x00000000      (Trace Disabled)
[00:08:17.956]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:08:17.956]    __FlashAddr=0x00000000
[00:08:17.956]    __FlashLen=0x00000000
[00:08:17.956]    __FlashArg=0x00000000
[00:08:17.956]    __FlashOp=0x00000000
[00:08:17.956]    __Result=0x00000000
[00:08:17.958]  </debugvars>
[00:08:17.958]  
[00:08:17.958]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:08:17.958]    <block atomic="false" info="">
[00:08:17.958]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:08:17.958]        // -> [isSWJ <= 0x00000001]
[00:08:17.958]      __var hasDormant = __protocol & 0x00020000;
[00:08:17.958]        // -> [hasDormant <= 0x00000000]
[00:08:17.958]      __var protType   = __protocol & 0x0000FFFF;
[00:08:17.958]        // -> [protType <= 0x00000002]
[00:08:17.959]    </block>
[00:08:17.959]    <control if="protType == 1" while="" timeout="0" info="">
[00:08:17.959]      // if-block "protType == 1"
[00:08:17.959]        // =>  FALSE
[00:08:17.959]      // skip if-block "protType == 1"
[00:08:17.959]    </control>
[00:08:17.959]    <control if="protType == 2" while="" timeout="0" info="">
[00:08:17.959]      // if-block "protType == 2"
[00:08:17.959]        // =>  TRUE
[00:08:17.959]      <control if="isSWJ" while="" timeout="0" info="">
[00:08:17.959]        // if-block "isSWJ"
[00:08:17.960]          // =>  TRUE
[00:08:17.960]        <control if="hasDormant" while="" timeout="0" info="">
[00:08:17.960]          // if-block "hasDormant"
[00:08:17.960]            // =>  FALSE
[00:08:17.960]          // skip if-block "hasDormant"
[00:08:17.960]        </control>
[00:08:17.960]        <control if="!hasDormant" while="" timeout="0" info="">
[00:08:17.960]          // if-block "!hasDormant"
[00:08:17.960]            // =>  TRUE
[00:08:17.961]          <block atomic="false" info="">
[00:08:17.961]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:08:17.963]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:08:17.963]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:08:17.969]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:08:17.969]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:08:17.971]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:08:17.971]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:08:17.973]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:08:17.973]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:08:17.978]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:08:17.979]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:08:17.980]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:08:17.980]          </block>
[00:08:17.980]          // end if-block "!hasDormant"
[00:08:17.980]        </control>
[00:08:17.981]        // end if-block "isSWJ"
[00:08:17.981]      </control>
[00:08:17.981]      <control if="!isSWJ" while="" timeout="0" info="">
[00:08:17.981]        // if-block "!isSWJ"
[00:08:17.981]          // =>  FALSE
[00:08:17.981]        // skip if-block "!isSWJ"
[00:08:17.981]      </control>
[00:08:17.982]      <block atomic="false" info="">
[00:08:17.982]        ReadDP(0x0);
[00:08:17.986]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:08:17.986]      </block>
[00:08:17.986]      // end if-block "protType == 2"
[00:08:17.986]    </control>
[00:08:17.986]  </sequence>
[00:08:17.986]  
[00:08:17.992]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:08:17.992]  
[00:08:17.992]  <debugvars>
[00:08:17.992]    // Pre-defined
[00:08:17.992]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:08:17.992]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:08:17.992]    __dp=0x00000000
[00:08:17.992]    __ap=0x00000000
[00:08:17.992]    __traceout=0x00000000      (Trace Disabled)
[00:08:17.992]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:08:17.992]    __FlashAddr=0x00000000
[00:08:17.992]    __FlashLen=0x00000000
[00:08:17.992]    __FlashArg=0x00000000
[00:08:17.992]    __FlashOp=0x00000000
[00:08:17.992]    __Result=0x00000000
[00:08:17.992]  </debugvars>
[00:08:17.992]  
[00:08:17.992]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:08:17.992]    <block atomic="false" info="">
[00:08:17.995]      __var SW_DP_ABORT       = 0x0;
[00:08:17.995]        // -> [SW_DP_ABORT <= 0x00000000]
[00:08:17.995]      __var DP_CTRL_STAT      = 0x4;
[00:08:17.995]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:08:17.995]      __var DP_SELECT         = 0x8;
[00:08:17.995]        // -> [DP_SELECT <= 0x00000008]
[00:08:17.995]      __var powered_down      = 0;
[00:08:17.995]        // -> [powered_down <= 0x00000000]
[00:08:17.995]      WriteDP(DP_SELECT, 0x00000000);
[00:08:17.996]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:08:17.998]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:08:17.998]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:08:17.998]        // -> [powered_down <= 0x00000001]
[00:08:17.998]    </block>
[00:08:17.998]    <control if="powered_down" while="" timeout="0" info="">
[00:08:17.998]      // if-block "powered_down"
[00:08:17.998]        // =>  TRUE
[00:08:17.998]      <block atomic="false" info="">
[00:08:17.998]        Message(0, "Debug/System power-up request sent");
[00:08:18.003]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:08:18.004]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:08:18.004]      </block>
[00:08:18.004]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:08:18.004]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:08:18.012]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:08:18.012]        // while-condition  =>  FALSE
[00:08:18.012]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:08:18.012]      </control>
[00:08:18.012]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:08:18.012]        // if-block "(__protocol & 0xFFFF) == 1"
[00:08:18.012]          // =>  FALSE
[00:08:18.012]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:08:18.012]      </control>
[00:08:18.012]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:08:18.012]        // if-block "(__protocol & 0xFFFF) == 2"
[00:08:18.012]          // =>  TRUE
[00:08:18.012]        <block atomic="false" info="">
[00:08:18.012]          Message(0, "executing SWD power up");
[00:08:18.012]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:08:18.016]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:08:18.017]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:08:18.017]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:08:18.017]        </block>
[00:08:18.017]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:08:18.019]      </control>
[00:08:18.019]      // end if-block "powered_down"
[00:08:18.019]    </control>
[00:08:18.019]    <block atomic="false" info="">
[00:08:18.019]      __var DEBUG_PORT_VAL    = 0;
[00:08:18.019]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:08:18.019]      __var ACCESS_POINT_VAL  = 0;
[00:08:18.019]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:08:18.019]      __ap = 1; 
[00:08:18.019]        // -> [__ap <= 0x00000001]
[00:08:18.019]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:08:18.023]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:08:18.023]      __ap = 4;
[00:08:18.023]        // -> [__ap <= 0x00000004]
[00:08:18.023]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:08:18.024]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:08:18.024]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:08:18.024]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:08:18.030]    </block>
[00:08:18.030]    <block atomic="false" info="">
[00:08:18.030]      __var nReset = 0x80;
[00:08:18.031]        // -> [nReset <= 0x00000080]
[00:08:18.031]      __var canReadPins = 0;
[00:08:18.031]        // -> [canReadPins <= 0x00000000]
[00:08:18.031]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:08:18.032]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:08:18.032]        // -> [canReadPins <= 0x00000001]
[00:08:18.032]    </block>
[00:08:18.032]    <control if="" while="1" timeout="200" info="">
[00:08:18.032]      // while "1"  (timeout="200")
[00:08:18.032]      // while-condition  =>  TRUE
[00:08:18.032]      // while "1"  (timeout="200")
[00:08:18.032]      // while-condition  =>  TRUE
[00:08:18.032]      // while "1"  (timeout="200")
[00:08:18.032]      // while-condition  =>  TRUE
[00:08:18.032]      // while "1"  (timeout="200")
[00:08:18.032]      // while-condition  =>  TRUE
[00:08:18.032]      // while "1"  (timeout="200")
[00:08:18.032]      // while-condition  =>  TRUE
[00:08:18.032]      // while "1"  (timeout="200")
[00:08:18.032]      // while-condition  =>  TRUE
[00:08:18.032]      // while "1"  (timeout="200")
[00:08:18.032]      // while-condition  =>  TRUE
[00:08:18.032]      // while "1"  (timeout="200")
[00:08:18.032]      // while-condition  =>  TRUE
[00:08:18.032]      // while "1"  (timeout="200")
[00:08:18.032]      // while-condition  =>  TRUE
[00:08:18.032]      // while "1"  (timeout="200")
[00:08:18.032]      // while-condition  =>  TRUE
[00:08:18.032]      // while "1"  (timeout="200")
[00:08:18.032]      // while-condition  =>  TRUE
[00:08:18.036]      // while "1"  (timeout="200")
[00:08:18.036]      // while  =>  TIMEOUT
[00:08:18.036]      // end while "1"
[00:08:18.036]    </control>
[00:08:18.036]    <control if="canReadPins" while="" timeout="0" info="">
[00:08:18.036]      // if-block "canReadPins"
[00:08:18.036]        // =>  TRUE
[00:08:18.036]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:08:18.036]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:08:18.039]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:08:18.039]        // while-condition  =>  FALSE
[00:08:18.039]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:08:18.039]      </control>
[00:08:18.039]      // end if-block "canReadPins"
[00:08:18.039]    </control>
[00:08:18.039]    <control if="!canReadPins" while="" timeout="0" info="">
[00:08:18.039]      // if-block "!canReadPins"
[00:08:18.039]        // =>  FALSE
[00:08:18.039]      // skip if-block "!canReadPins"
[00:08:18.039]    </control>
[00:08:18.039]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:08:18.039]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:08:18.039]        // =>  TRUE
[00:08:18.039]      <block atomic="false" info="">
[00:08:18.039]        WriteAP(0x00, 0x190008);
[00:08:18.042]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:08:18.042]        WriteAP(0xF0, 0x01);
[00:08:18.050]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:08:18.050]      </block>
[00:08:18.051]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:08:18.051]    </control>
[00:08:18.051]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:08:18.051]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:08:18.051]        // =>  FALSE
[00:08:18.051]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:08:18.051]    </control>
[00:08:18.051]    <block atomic="false" info="">
[00:08:18.051]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:08:18.052]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:08:18.052]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:08:18.052]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:08:18.057]      __ap = 0; //lets make sure we reset the access point selection
[00:08:18.057]        // -> [__ap <= 0x00000000]
[00:08:18.057]    </block>
[00:08:18.057]  </sequence>
[00:08:18.057]  
[00:08:18.086]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:08:18.086]  
[00:08:18.086]  <debugvars>
[00:08:18.086]    // Pre-defined
[00:08:18.086]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:08:18.086]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:08:18.086]    __dp=0x00000000
[00:08:18.086]    __ap=0x00000000
[00:08:18.086]    __traceout=0x00000000      (Trace Disabled)
[00:08:18.086]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:08:18.086]    __FlashAddr=0x00000000
[00:08:18.086]    __FlashLen=0x00000000
[00:08:18.086]    __FlashArg=0x00000000
[00:08:18.086]    __FlashOp=0x00000000
[00:08:18.086]    __Result=0x00000000
[00:08:18.086]  </debugvars>
[00:08:18.086]  
[00:08:18.086]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:08:18.086]    <block atomic="false" info="">
[00:08:18.086]      __var deviceID = 0;
[00:08:18.086]        // -> [deviceID <= 0x00000000]
[00:08:18.086]      __var version = 0;
[00:08:18.086]        // -> [version <= 0x00000000]
[00:08:18.086]      __var partNum = 0;
[00:08:18.086]        // -> [partNum <= 0x00000000]
[00:08:18.086]      __var manuf = 0;
[00:08:18.086]        // -> [manuf <= 0x00000000]
[00:08:18.086]      __var isMSPM0G1X0X_G3X0X = 0;
[00:08:18.086]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:08:18.086]      __var isProduction = 0;
[00:08:18.086]        // -> [isProduction <= 0x00000000]
[00:08:18.086]      __var continueId = 0;
[00:08:18.086]        // -> [continueId <= 0x00000000]
[00:08:18.086]      deviceID =   Read32(0x41C40004);
[00:08:18.099]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:08:18.099]        // -> [deviceID <= 0x2BB8802F]
[00:08:18.100]      version = deviceID >> 28;
[00:08:18.100]        // -> [version <= 0x00000002]
[00:08:18.100]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:08:18.100]        // -> [partNum <= 0x0000BB88]
[00:08:18.100]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:08:18.100]        // -> [manuf <= 0x00000017]
[00:08:18.100]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:08:18.100]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:08:18.100]      isProduction = (version > 0);
[00:08:18.101]        // -> [isProduction <= 0x00000001]
[00:08:18.101]    </block>
[00:08:18.101]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:08:18.101]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:08:18.101]        // =>  FALSE
[00:08:18.102]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:08:18.102]    </control>
[00:08:18.102]    <control if="continueId == 4" while="" timeout="0" info="">
[00:08:18.102]      // if-block "continueId == 4"
[00:08:18.102]        // =>  FALSE
[00:08:18.102]      // skip if-block "continueId == 4"
[00:08:18.102]    </control>
[00:08:18.102]    <control if="!isProduction" while="" timeout="0" info="">
[00:08:18.102]      // if-block "!isProduction"
[00:08:18.102]        // =>  FALSE
[00:08:18.102]      // skip if-block "!isProduction"
[00:08:18.103]    </control>
[00:08:18.103]  </sequence>
[00:08:18.103]  
[00:10:06.853]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:10:06.853]  
[00:10:06.862]  <debugvars>
[00:10:06.862]    // Pre-defined
[00:10:06.862]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:10:06.862]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:10:06.862]    __dp=0x00000000
[00:10:06.862]    __ap=0x00000000
[00:10:06.862]    __traceout=0x00000000      (Trace Disabled)
[00:10:06.862]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:10:06.863]    __FlashAddr=0x00000000
[00:10:06.863]    __FlashLen=0x00000000
[00:10:06.863]    __FlashArg=0x00000000
[00:10:06.863]    __FlashOp=0x00000000
[00:10:06.863]    __Result=0x00000000
[00:10:06.863]  </debugvars>
[00:10:06.863]  
[00:10:06.863]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:10:06.863]    <block atomic="false" info="">
[00:10:06.863]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:10:06.863]        // -> [isSWJ <= 0x00000001]
[00:10:06.863]      __var hasDormant = __protocol & 0x00020000;
[00:10:06.863]        // -> [hasDormant <= 0x00000000]
[00:10:06.863]      __var protType   = __protocol & 0x0000FFFF;
[00:10:06.863]        // -> [protType <= 0x00000002]
[00:10:06.863]    </block>
[00:10:06.863]    <control if="protType == 1" while="" timeout="0" info="">
[00:10:06.863]      // if-block "protType == 1"
[00:10:06.863]        // =>  FALSE
[00:10:06.863]      // skip if-block "protType == 1"
[00:10:06.863]    </control>
[00:10:06.863]    <control if="protType == 2" while="" timeout="0" info="">
[00:10:06.863]      // if-block "protType == 2"
[00:10:06.865]        // =>  TRUE
[00:10:06.865]      <control if="isSWJ" while="" timeout="0" info="">
[00:10:06.865]        // if-block "isSWJ"
[00:10:06.865]          // =>  TRUE
[00:10:06.865]        <control if="hasDormant" while="" timeout="0" info="">
[00:10:06.865]          // if-block "hasDormant"
[00:10:06.865]            // =>  FALSE
[00:10:06.865]          // skip if-block "hasDormant"
[00:10:06.865]        </control>
[00:10:06.865]        <control if="!hasDormant" while="" timeout="0" info="">
[00:10:06.865]          // if-block "!hasDormant"
[00:10:06.865]            // =>  TRUE
[00:10:06.865]          <block atomic="false" info="">
[00:10:06.866]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:10:06.869]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:10:06.869]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:10:06.872]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:10:06.872]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:10:06.879]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:10:06.879]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:10:06.880]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:10:06.880]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:10:06.887]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:10:06.887]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:10:06.895]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:10:06.895]          </block>
[00:10:06.895]          // end if-block "!hasDormant"
[00:10:06.895]        </control>
[00:10:06.895]        // end if-block "isSWJ"
[00:10:06.895]      </control>
[00:10:06.895]      <control if="!isSWJ" while="" timeout="0" info="">
[00:10:06.895]        // if-block "!isSWJ"
[00:10:06.895]          // =>  FALSE
[00:10:06.895]        // skip if-block "!isSWJ"
[00:10:06.895]      </control>
[00:10:06.895]      <block atomic="false" info="">
[00:10:06.896]        ReadDP(0x0);
[00:10:06.900]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:10:06.900]      </block>
[00:10:06.900]      // end if-block "protType == 2"
[00:10:06.900]    </control>
[00:10:06.900]  </sequence>
[00:10:06.900]  
[00:10:06.902]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:10:06.902]  
[00:10:06.902]  <debugvars>
[00:10:06.902]    // Pre-defined
[00:10:06.902]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:10:06.902]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:10:06.902]    __dp=0x00000000
[00:10:06.902]    __ap=0x00000000
[00:10:06.902]    __traceout=0x00000000      (Trace Disabled)
[00:10:06.902]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:10:06.902]    __FlashAddr=0x00000000
[00:10:06.902]    __FlashLen=0x00000000
[00:10:06.902]    __FlashArg=0x00000000
[00:10:06.902]    __FlashOp=0x00000000
[00:10:06.902]    __Result=0x00000000
[00:10:06.902]  </debugvars>
[00:10:06.902]  
[00:10:06.902]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:10:06.902]    <block atomic="false" info="">
[00:10:06.902]      __var SW_DP_ABORT       = 0x0;
[00:10:06.902]        // -> [SW_DP_ABORT <= 0x00000000]
[00:10:06.902]      __var DP_CTRL_STAT      = 0x4;
[00:10:06.902]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:10:06.902]      __var DP_SELECT         = 0x8;
[00:10:06.902]        // -> [DP_SELECT <= 0x00000008]
[00:10:06.902]      __var powered_down      = 0;
[00:10:06.902]        // -> [powered_down <= 0x00000000]
[00:10:06.902]      WriteDP(DP_SELECT, 0x00000000);
[00:10:06.908]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:10:06.908]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:10:06.908]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:10:06.908]        // -> [powered_down <= 0x00000001]
[00:10:06.908]    </block>
[00:10:06.908]    <control if="powered_down" while="" timeout="0" info="">
[00:10:06.908]      // if-block "powered_down"
[00:10:06.908]        // =>  TRUE
[00:10:06.908]      <block atomic="false" info="">
[00:10:06.908]        Message(0, "Debug/System power-up request sent");
[00:10:06.908]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:10:06.908]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:10:06.908]      </block>
[00:10:06.908]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:10:06.908]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:10:06.914]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:10:06.914]        // while-condition  =>  FALSE
[00:10:06.914]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:10:06.914]      </control>
[00:10:06.914]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:10:06.914]        // if-block "(__protocol & 0xFFFF) == 1"
[00:10:06.914]          // =>  FALSE
[00:10:06.914]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:10:06.914]      </control>
[00:10:06.914]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:10:06.914]        // if-block "(__protocol & 0xFFFF) == 2"
[00:10:06.914]          // =>  TRUE
[00:10:06.914]        <block atomic="false" info="">
[00:10:06.914]          Message(0, "executing SWD power up");
[00:10:06.917]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:10:06.918]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:10:06.918]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:10:06.920]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:10:06.920]        </block>
[00:10:06.920]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:10:06.920]      </control>
[00:10:06.922]      // end if-block "powered_down"
[00:10:06.922]    </control>
[00:10:06.922]    <block atomic="false" info="">
[00:10:06.922]      __var DEBUG_PORT_VAL    = 0;
[00:10:06.922]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:10:06.922]      __var ACCESS_POINT_VAL  = 0;
[00:10:06.922]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:10:06.922]      __ap = 1; 
[00:10:06.922]        // -> [__ap <= 0x00000001]
[00:10:06.922]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:10:06.925]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:10:06.925]      __ap = 4;
[00:10:06.926]        // -> [__ap <= 0x00000004]
[00:10:06.926]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:10:06.929]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:10:06.929]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:10:06.929]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:10:06.929]    </block>
[00:10:06.929]    <block atomic="false" info="">
[00:10:06.929]      __var nReset = 0x80;
[00:10:06.929]        // -> [nReset <= 0x00000080]
[00:10:06.929]      __var canReadPins = 0;
[00:10:06.929]        // -> [canReadPins <= 0x00000000]
[00:10:06.929]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:10:06.935]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:10:06.935]        // -> [canReadPins <= 0x00000001]
[00:10:06.935]    </block>
[00:10:06.935]    <control if="" while="1" timeout="200" info="">
[00:10:06.936]      // while "1"  (timeout="200")
[00:10:06.936]      // while-condition  =>  TRUE
[00:10:06.936]      // while "1"  (timeout="200")
[00:10:06.936]      // while-condition  =>  TRUE
[00:10:06.936]      // while "1"  (timeout="200")
[00:10:06.936]      // while-condition  =>  TRUE
[00:10:06.936]      // while "1"  (timeout="200")
[00:10:06.936]      // while-condition  =>  TRUE
[00:10:06.936]      // while "1"  (timeout="200")
[00:10:06.936]      // while-condition  =>  TRUE
[00:10:06.936]      // while "1"  (timeout="200")
[00:10:06.936]      // while-condition  =>  TRUE
[00:10:06.937]      // while "1"  (timeout="200")
[00:10:06.937]      // while-condition  =>  TRUE
[00:10:06.937]      // while "1"  (timeout="200")
[00:10:06.937]      // while-condition  =>  TRUE
[00:10:06.937]      // while "1"  (timeout="200")
[00:10:06.937]      // while-condition  =>  TRUE
[00:10:06.937]      // while "1"  (timeout="200")
[00:10:06.937]      // while-condition  =>  TRUE
[00:10:06.937]      // while "1"  (timeout="200")
[00:10:06.937]      // while-condition  =>  TRUE
[00:10:06.937]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.938]      // while-condition  =>  TRUE
[00:10:06.938]      // while "1"  (timeout="200")
[00:10:06.941]      // while-condition  =>  TRUE
[00:10:06.941]      // while "1"  (timeout="200")
[00:10:06.941]      // while  =>  TIMEOUT
[00:10:06.941]      // end while "1"
[00:10:06.941]    </control>
[00:10:06.941]    <control if="canReadPins" while="" timeout="0" info="">
[00:10:06.941]      // if-block "canReadPins"
[00:10:06.941]        // =>  TRUE
[00:10:06.941]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:10:06.941]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:10:06.943]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:10:06.944]        // while-condition  =>  FALSE
[00:10:06.944]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:10:06.944]      </control>
[00:10:06.944]      // end if-block "canReadPins"
[00:10:06.944]    </control>
[00:10:06.944]    <control if="!canReadPins" while="" timeout="0" info="">
[00:10:06.944]      // if-block "!canReadPins"
[00:10:06.944]        // =>  FALSE
[00:10:06.944]      // skip if-block "!canReadPins"
[00:10:06.944]    </control>
[00:10:06.944]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:10:06.944]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:10:06.944]        // =>  TRUE
[00:10:06.944]      <block atomic="false" info="">
[00:10:06.944]        WriteAP(0x00, 0x190008);
[00:10:06.946]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:10:06.946]        WriteAP(0xF0, 0x01);
[00:10:06.948]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:10:06.948]      </block>
[00:10:06.948]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:10:06.948]    </control>
[00:10:06.948]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:10:06.948]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:10:06.948]        // =>  FALSE
[00:10:06.948]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:10:06.948]    </control>
[00:10:06.948]    <block atomic="false" info="">
[00:10:06.948]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:10:06.948]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:10:06.948]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:10:06.948]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:10:06.956]      __ap = 0; //lets make sure we reset the access point selection
[00:10:06.956]        // -> [__ap <= 0x00000000]
[00:10:06.956]    </block>
[00:10:06.956]  </sequence>
[00:10:06.956]  
[00:10:06.980]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:10:06.980]  
[00:10:06.980]  <debugvars>
[00:10:06.980]    // Pre-defined
[00:10:06.983]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:10:06.983]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:10:06.983]    __dp=0x00000000
[00:10:06.983]    __ap=0x00000000
[00:10:06.983]    __traceout=0x00000000      (Trace Disabled)
[00:10:06.983]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:10:06.983]    __FlashAddr=0x00000000
[00:10:06.983]    __FlashLen=0x00000000
[00:10:06.983]    __FlashArg=0x00000000
[00:10:06.983]    __FlashOp=0x00000000
[00:10:06.983]    __Result=0x00000000
[00:10:06.983]  </debugvars>
[00:10:06.983]  
[00:10:06.983]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:10:06.983]    <block atomic="false" info="">
[00:10:06.983]      __var deviceID = 0;
[00:10:06.985]        // -> [deviceID <= 0x00000000]
[00:10:06.985]      __var version = 0;
[00:10:06.985]        // -> [version <= 0x00000000]
[00:10:06.985]      __var partNum = 0;
[00:10:06.985]        // -> [partNum <= 0x00000000]
[00:10:06.985]      __var manuf = 0;
[00:10:06.985]        // -> [manuf <= 0x00000000]
[00:10:06.985]      __var isMSPM0G1X0X_G3X0X = 0;
[00:10:06.985]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:10:06.985]      __var isProduction = 0;
[00:10:06.985]        // -> [isProduction <= 0x00000000]
[00:10:06.985]      __var continueId = 0;
[00:10:06.986]        // -> [continueId <= 0x00000000]
[00:10:06.986]      deviceID =   Read32(0x41C40004);
[00:10:06.992]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:10:06.992]        // -> [deviceID <= 0x2BB8802F]
[00:10:06.992]      version = deviceID >> 28;
[00:10:06.992]        // -> [version <= 0x00000002]
[00:10:06.992]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:10:06.992]        // -> [partNum <= 0x0000BB88]
[00:10:06.992]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:10:06.992]        // -> [manuf <= 0x00000017]
[00:10:06.992]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:10:06.992]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:10:06.992]      isProduction = (version > 0);
[00:10:06.992]        // -> [isProduction <= 0x00000001]
[00:10:06.992]    </block>
[00:10:06.992]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:10:06.992]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:10:06.992]        // =>  FALSE
[00:10:06.992]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:10:06.992]    </control>
[00:10:06.992]    <control if="continueId == 4" while="" timeout="0" info="">
[00:10:06.992]      // if-block "continueId == 4"
[00:10:06.992]        // =>  FALSE
[00:10:06.992]      // skip if-block "continueId == 4"
[00:10:06.992]    </control>
[00:10:06.992]    <control if="!isProduction" while="" timeout="0" info="">
[00:10:06.992]      // if-block "!isProduction"
[00:10:06.996]        // =>  FALSE
[00:10:06.996]      // skip if-block "!isProduction"
[00:10:06.996]    </control>
[00:10:06.996]  </sequence>
[00:10:06.997]  
[00:10:54.971]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:10:54.971]  
[00:10:54.972]  <debugvars>
[00:10:54.972]    // Pre-defined
[00:10:54.972]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:10:54.972]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:10:54.972]    __dp=0x00000000
[00:10:54.972]    __ap=0x00000000
[00:10:54.972]    __traceout=0x00000000      (Trace Disabled)
[00:10:54.972]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:10:54.972]    __FlashAddr=0x00000000
[00:10:54.972]    __FlashLen=0x00000000
[00:10:54.972]    __FlashArg=0x00000000
[00:10:54.972]    __FlashOp=0x00000000
[00:10:54.972]    __Result=0x00000000
[00:10:54.972]  </debugvars>
[00:10:54.972]  
[00:10:54.972]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:10:54.973]    <block atomic="false" info="">
[00:10:54.973]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:10:54.973]        // -> [isSWJ <= 0x00000001]
[00:10:54.973]      __var hasDormant = __protocol & 0x00020000;
[00:10:54.973]        // -> [hasDormant <= 0x00000000]
[00:10:54.973]      __var protType   = __protocol & 0x0000FFFF;
[00:10:54.973]        // -> [protType <= 0x00000002]
[00:10:54.973]    </block>
[00:10:54.973]    <control if="protType == 1" while="" timeout="0" info="">
[00:10:54.973]      // if-block "protType == 1"
[00:10:54.973]        // =>  FALSE
[00:10:54.973]      // skip if-block "protType == 1"
[00:10:54.974]    </control>
[00:10:54.974]    <control if="protType == 2" while="" timeout="0" info="">
[00:10:54.974]      // if-block "protType == 2"
[00:10:54.974]        // =>  TRUE
[00:10:54.974]      <control if="isSWJ" while="" timeout="0" info="">
[00:10:54.974]        // if-block "isSWJ"
[00:10:54.974]          // =>  TRUE
[00:10:54.974]        <control if="hasDormant" while="" timeout="0" info="">
[00:10:54.974]          // if-block "hasDormant"
[00:10:54.974]            // =>  FALSE
[00:10:54.974]          // skip if-block "hasDormant"
[00:10:54.976]        </control>
[00:10:54.976]        <control if="!hasDormant" while="" timeout="0" info="">
[00:10:54.976]          // if-block "!hasDormant"
[00:10:54.976]            // =>  TRUE
[00:10:54.976]          <block atomic="false" info="">
[00:10:54.976]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:10:54.977]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:10:54.977]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:10:54.978]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:10:54.978]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:10:54.978]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:10:54.978]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:10:54.978]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:10:54.978]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:10:54.984]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:10:54.986]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:10:54.987]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:10:54.987]          </block>
[00:10:54.987]          // end if-block "!hasDormant"
[00:10:54.987]        </control>
[00:10:54.987]        // end if-block "isSWJ"
[00:10:54.987]      </control>
[00:10:54.987]      <control if="!isSWJ" while="" timeout="0" info="">
[00:10:54.987]        // if-block "!isSWJ"
[00:10:54.988]          // =>  FALSE
[00:10:54.988]        // skip if-block "!isSWJ"
[00:10:54.988]      </control>
[00:10:54.988]      <block atomic="false" info="">
[00:10:54.988]        ReadDP(0x0);
[00:10:54.988]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:10:54.991]      </block>
[00:10:54.991]      // end if-block "protType == 2"
[00:10:54.991]    </control>
[00:10:54.991]  </sequence>
[00:10:54.991]  
[00:10:54.994]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:10:54.994]  
[00:10:54.994]  <debugvars>
[00:10:54.994]    // Pre-defined
[00:10:54.994]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:10:54.994]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:10:54.994]    __dp=0x00000000
[00:10:54.994]    __ap=0x00000000
[00:10:54.994]    __traceout=0x00000000      (Trace Disabled)
[00:10:54.994]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:10:54.994]    __FlashAddr=0x00000000
[00:10:54.994]    __FlashLen=0x00000000
[00:10:54.994]    __FlashArg=0x00000000
[00:10:54.994]    __FlashOp=0x00000000
[00:10:54.994]    __Result=0x00000000
[00:10:54.994]  </debugvars>
[00:10:54.994]  
[00:10:54.994]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:10:54.994]    <block atomic="false" info="">
[00:10:54.994]      __var SW_DP_ABORT       = 0x0;
[00:10:54.994]        // -> [SW_DP_ABORT <= 0x00000000]
[00:10:54.994]      __var DP_CTRL_STAT      = 0x4;
[00:10:54.994]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:10:54.994]      __var DP_SELECT         = 0x8;
[00:10:54.994]        // -> [DP_SELECT <= 0x00000008]
[00:10:54.996]      __var powered_down      = 0;
[00:10:54.996]        // -> [powered_down <= 0x00000000]
[00:10:54.996]      WriteDP(DP_SELECT, 0x00000000);
[00:10:54.998]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:10:54.998]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:10:54.998]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:10:54.998]        // -> [powered_down <= 0x00000001]
[00:10:54.998]    </block>
[00:10:54.998]    <control if="powered_down" while="" timeout="0" info="">
[00:10:55.000]      // if-block "powered_down"
[00:10:55.000]        // =>  TRUE
[00:10:55.000]      <block atomic="false" info="">
[00:10:55.000]        Message(0, "Debug/System power-up request sent");
[00:10:55.000]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:10:55.001]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:10:55.001]      </block>
[00:10:55.001]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:10:55.001]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:10:55.004]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:10:55.004]        // while-condition  =>  FALSE
[00:10:55.005]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:10:55.005]      </control>
[00:10:55.005]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:10:55.005]        // if-block "(__protocol & 0xFFFF) == 1"
[00:10:55.005]          // =>  FALSE
[00:10:55.005]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:10:55.005]      </control>
[00:10:55.005]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:10:55.005]        // if-block "(__protocol & 0xFFFF) == 2"
[00:10:55.005]          // =>  TRUE
[00:10:55.005]        <block atomic="false" info="">
[00:10:55.005]          Message(0, "executing SWD power up");
[00:10:55.008]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:10:55.010]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:10:55.010]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:10:55.012]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:10:55.012]        </block>
[00:10:55.012]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:10:55.012]      </control>
[00:10:55.012]      // end if-block "powered_down"
[00:10:55.012]    </control>
[00:10:55.012]    <block atomic="false" info="">
[00:10:55.012]      __var DEBUG_PORT_VAL    = 0;
[00:10:55.012]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:10:55.012]      __var ACCESS_POINT_VAL  = 0;
[00:10:55.012]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:10:55.012]      __ap = 1; 
[00:10:55.012]        // -> [__ap <= 0x00000001]
[00:10:55.012]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:10:55.016]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:10:55.017]      __ap = 4;
[00:10:55.017]        // -> [__ap <= 0x00000004]
[00:10:55.017]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:10:55.021]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:10:55.021]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:10:55.021]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:10:55.021]    </block>
[00:10:55.021]    <block atomic="false" info="">
[00:10:55.021]      __var nReset = 0x80;
[00:10:55.021]        // -> [nReset <= 0x00000080]
[00:10:55.021]      __var canReadPins = 0;
[00:10:55.021]        // -> [canReadPins <= 0x00000000]
[00:10:55.021]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:10:55.023]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:10:55.025]        // -> [canReadPins <= 0x00000001]
[00:10:55.025]    </block>
[00:10:55.025]    <control if="" while="1" timeout="200" info="">
[00:10:55.025]      // while "1"  (timeout="200")
[00:10:55.025]      // while-condition  =>  TRUE
[00:10:55.025]      // while "1"  (timeout="200")
[00:10:55.025]      // while-condition  =>  TRUE
[00:10:55.025]      // while "1"  (timeout="200")
[00:10:55.025]      // while-condition  =>  TRUE
[00:10:55.025]      // while "1"  (timeout="200")
[00:10:55.026]      // while-condition  =>  TRUE
[00:10:55.026]      // while "1"  (timeout="200")
[00:10:55.026]      // while-condition  =>  TRUE
[00:10:55.026]      // while "1"  (timeout="200")
[00:10:55.027]      // while-condition  =>  TRUE
[00:10:55.027]      // while "1"  (timeout="200")
[00:10:55.027]      // while-condition  =>  TRUE
[00:10:55.027]      // while "1"  (timeout="200")
[00:10:55.027]      // while-condition  =>  TRUE
[00:10:55.027]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.028]      // while "1"  (timeout="200")
[00:10:55.028]      // while-condition  =>  TRUE
[00:10:55.032]      // while "1"  (timeout="200")
[00:10:55.032]      // while-condition  =>  TRUE
[00:10:55.032]      // while "1"  (timeout="200")
[00:10:55.032]      // while  =>  TIMEOUT
[00:10:55.032]      // end while "1"
[00:10:55.032]    </control>
[00:10:55.032]    <control if="canReadPins" while="" timeout="0" info="">
[00:10:55.032]      // if-block "canReadPins"
[00:10:55.032]        // =>  TRUE
[00:10:55.032]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:10:55.032]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:10:55.032]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:10:55.032]        // while-condition  =>  FALSE
[00:10:55.032]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:10:55.032]      </control>
[00:10:55.032]      // end if-block "canReadPins"
[00:10:55.032]    </control>
[00:10:55.032]    <control if="!canReadPins" while="" timeout="0" info="">
[00:10:55.032]      // if-block "!canReadPins"
[00:10:55.032]        // =>  FALSE
[00:10:55.032]      // skip if-block "!canReadPins"
[00:10:55.032]    </control>
[00:10:55.032]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:10:55.037]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:10:55.037]        // =>  TRUE
[00:10:55.037]      <block atomic="false" info="">
[00:10:55.037]        WriteAP(0x00, 0x190008);
[00:10:55.041]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:10:55.041]        WriteAP(0xF0, 0x01);
[00:10:55.041]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:10:55.041]      </block>
[00:10:55.041]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:10:55.041]    </control>
[00:10:55.041]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:10:55.041]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:10:55.041]        // =>  FALSE
[00:10:55.046]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:10:55.046]    </control>
[00:10:55.046]    <block atomic="false" info="">
[00:10:55.046]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:10:55.047]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:10:55.047]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:10:55.047]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:10:55.053]      __ap = 0; //lets make sure we reset the access point selection
[00:10:55.053]        // -> [__ap <= 0x00000000]
[00:10:55.053]    </block>
[00:10:55.053]  </sequence>
[00:10:55.053]  
[00:10:55.077]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:10:55.077]  
[00:10:55.077]  <debugvars>
[00:10:55.077]    // Pre-defined
[00:10:55.077]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:10:55.077]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:10:55.078]    __dp=0x00000000
[00:10:55.078]    __ap=0x00000000
[00:10:55.078]    __traceout=0x00000000      (Trace Disabled)
[00:10:55.078]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:10:55.078]    __FlashAddr=0x00000000
[00:10:55.078]    __FlashLen=0x00000000
[00:10:55.078]    __FlashArg=0x00000000
[00:10:55.078]    __FlashOp=0x00000000
[00:10:55.078]    __Result=0x00000000
[00:10:55.078]  </debugvars>
[00:10:55.078]  
[00:10:55.078]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:10:55.078]    <block atomic="false" info="">
[00:10:55.078]      __var deviceID = 0;
[00:10:55.078]        // -> [deviceID <= 0x00000000]
[00:10:55.078]      __var version = 0;
[00:10:55.078]        // -> [version <= 0x00000000]
[00:10:55.078]      __var partNum = 0;
[00:10:55.078]        // -> [partNum <= 0x00000000]
[00:10:55.078]      __var manuf = 0;
[00:10:55.078]        // -> [manuf <= 0x00000000]
[00:10:55.078]      __var isMSPM0G1X0X_G3X0X = 0;
[00:10:55.078]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:10:55.078]      __var isProduction = 0;
[00:10:55.080]        // -> [isProduction <= 0x00000000]
[00:10:55.080]      __var continueId = 0;
[00:10:55.080]        // -> [continueId <= 0x00000000]
[00:10:55.080]      deviceID =   Read32(0x41C40004);
[00:10:55.093]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:10:55.093]        // -> [deviceID <= 0x2BB8802F]
[00:10:55.093]      version = deviceID >> 28;
[00:10:55.093]        // -> [version <= 0x00000002]
[00:10:55.093]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:10:55.095]        // -> [partNum <= 0x0000BB88]
[00:10:55.095]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:10:55.095]        // -> [manuf <= 0x00000017]
[00:10:55.095]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:10:55.095]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:10:55.095]      isProduction = (version > 0);
[00:10:55.095]        // -> [isProduction <= 0x00000001]
[00:10:55.095]    </block>
[00:10:55.095]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:10:55.095]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:10:55.095]        // =>  FALSE
[00:10:55.095]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:10:55.096]    </control>
[00:10:55.096]    <control if="continueId == 4" while="" timeout="0" info="">
[00:10:55.096]      // if-block "continueId == 4"
[00:10:55.096]        // =>  FALSE
[00:10:55.096]      // skip if-block "continueId == 4"
[00:10:55.097]    </control>
[00:10:55.097]    <control if="!isProduction" while="" timeout="0" info="">
[00:10:55.097]      // if-block "!isProduction"
[00:10:55.097]        // =>  FALSE
[00:10:55.097]      // skip if-block "!isProduction"
[00:10:55.097]    </control>
[00:10:55.097]  </sequence>
[00:10:55.097]  
[00:11:46.354]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:11:46.354]  
[00:11:46.356]  <debugvars>
[00:11:46.356]    // Pre-defined
[00:11:46.356]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:11:46.356]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:11:46.356]    __dp=0x00000000
[00:11:46.356]    __ap=0x00000000
[00:11:46.356]    __traceout=0x00000000      (Trace Disabled)
[00:11:46.356]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:11:46.356]    __FlashAddr=0x00000000
[00:11:46.356]    __FlashLen=0x00000000
[00:11:46.356]    __FlashArg=0x00000000
[00:11:46.356]    __FlashOp=0x00000000
[00:11:46.356]    __Result=0x00000000
[00:11:46.356]  </debugvars>
[00:11:46.356]  
[00:11:46.357]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:11:46.357]    <block atomic="false" info="">
[00:11:46.357]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:11:46.357]        // -> [isSWJ <= 0x00000001]
[00:11:46.357]      __var hasDormant = __protocol & 0x00020000;
[00:11:46.357]        // -> [hasDormant <= 0x00000000]
[00:11:46.357]      __var protType   = __protocol & 0x0000FFFF;
[00:11:46.357]        // -> [protType <= 0x00000002]
[00:11:46.357]    </block>
[00:11:46.358]    <control if="protType == 1" while="" timeout="0" info="">
[00:11:46.358]      // if-block "protType == 1"
[00:11:46.358]        // =>  FALSE
[00:11:46.358]      // skip if-block "protType == 1"
[00:11:46.358]    </control>
[00:11:46.358]    <control if="protType == 2" while="" timeout="0" info="">
[00:11:46.358]      // if-block "protType == 2"
[00:11:46.358]        // =>  TRUE
[00:11:46.358]      <control if="isSWJ" while="" timeout="0" info="">
[00:11:46.358]        // if-block "isSWJ"
[00:11:46.358]          // =>  TRUE
[00:11:46.358]        <control if="hasDormant" while="" timeout="0" info="">
[00:11:46.358]          // if-block "hasDormant"
[00:11:46.359]            // =>  FALSE
[00:11:46.360]          // skip if-block "hasDormant"
[00:11:46.360]        </control>
[00:11:46.360]        <control if="!hasDormant" while="" timeout="0" info="">
[00:11:46.360]          // if-block "!hasDormant"
[00:11:46.360]            // =>  TRUE
[00:11:46.360]          <block atomic="false" info="">
[00:11:46.360]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:11:46.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:11:46.361]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:11:46.364]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:11:46.364]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:11:46.365]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:11:46.365]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:11:46.368]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:11:46.369]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:11:46.369]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:11:46.369]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:11:46.376]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:11:46.376]          </block>
[00:11:46.376]          // end if-block "!hasDormant"
[00:11:46.376]        </control>
[00:11:46.376]        // end if-block "isSWJ"
[00:11:46.376]      </control>
[00:11:46.376]      <control if="!isSWJ" while="" timeout="0" info="">
[00:11:46.376]        // if-block "!isSWJ"
[00:11:46.376]          // =>  FALSE
[00:11:46.376]        // skip if-block "!isSWJ"
[00:11:46.376]      </control>
[00:11:46.376]      <block atomic="false" info="">
[00:11:46.377]        ReadDP(0x0);
[00:11:46.378]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:11:46.378]      </block>
[00:11:46.378]      // end if-block "protType == 2"
[00:11:46.378]    </control>
[00:11:46.378]  </sequence>
[00:11:46.378]  
[00:11:46.381]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:11:46.381]  
[00:11:46.381]  <debugvars>
[00:11:46.381]    // Pre-defined
[00:11:46.382]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:11:46.382]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:11:46.382]    __dp=0x00000000
[00:11:46.382]    __ap=0x00000000
[00:11:46.382]    __traceout=0x00000000      (Trace Disabled)
[00:11:46.382]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:11:46.382]    __FlashAddr=0x00000000
[00:11:46.382]    __FlashLen=0x00000000
[00:11:46.382]    __FlashArg=0x00000000
[00:11:46.382]    __FlashOp=0x00000000
[00:11:46.382]    __Result=0x00000000
[00:11:46.382]  </debugvars>
[00:11:46.382]  
[00:11:46.382]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:11:46.383]    <block atomic="false" info="">
[00:11:46.383]      __var SW_DP_ABORT       = 0x0;
[00:11:46.383]        // -> [SW_DP_ABORT <= 0x00000000]
[00:11:46.383]      __var DP_CTRL_STAT      = 0x4;
[00:11:46.383]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:11:46.383]      __var DP_SELECT         = 0x8;
[00:11:46.383]        // -> [DP_SELECT <= 0x00000008]
[00:11:46.383]      __var powered_down      = 0;
[00:11:46.383]        // -> [powered_down <= 0x00000000]
[00:11:46.383]      WriteDP(DP_SELECT, 0x00000000);
[00:11:46.385]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:11:46.385]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:11:46.387]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:11:46.387]        // -> [powered_down <= 0x00000001]
[00:11:46.387]    </block>
[00:11:46.387]    <control if="powered_down" while="" timeout="0" info="">
[00:11:46.387]      // if-block "powered_down"
[00:11:46.387]        // =>  TRUE
[00:11:46.387]      <block atomic="false" info="">
[00:11:46.387]        Message(0, "Debug/System power-up request sent");
[00:11:46.389]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:11:46.392]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:11:46.392]      </block>
[00:11:46.392]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:11:46.392]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:11:46.393]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:11:46.393]        // while-condition  =>  FALSE
[00:11:46.394]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:11:46.394]      </control>
[00:11:46.394]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:11:46.394]        // if-block "(__protocol & 0xFFFF) == 1"
[00:11:46.394]          // =>  FALSE
[00:11:46.394]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:11:46.394]      </control>
[00:11:46.394]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:11:46.394]        // if-block "(__protocol & 0xFFFF) == 2"
[00:11:46.394]          // =>  TRUE
[00:11:46.394]        <block atomic="false" info="">
[00:11:46.394]          Message(0, "executing SWD power up");
[00:11:46.397]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:11:46.398]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:11:46.398]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:11:46.400]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:11:46.400]        </block>
[00:11:46.400]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:11:46.401]      </control>
[00:11:46.401]      // end if-block "powered_down"
[00:11:46.401]    </control>
[00:11:46.401]    <block atomic="false" info="">
[00:11:46.401]      __var DEBUG_PORT_VAL    = 0;
[00:11:46.401]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:11:46.401]      __var ACCESS_POINT_VAL  = 0;
[00:11:46.401]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:11:46.401]      __ap = 1; 
[00:11:46.401]        // -> [__ap <= 0x00000001]
[00:11:46.401]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:11:46.404]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:11:46.404]      __ap = 4;
[00:11:46.404]        // -> [__ap <= 0x00000004]
[00:11:46.404]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:11:46.411]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:11:46.411]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:11:46.411]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:11:46.413]    </block>
[00:11:46.413]    <block atomic="false" info="">
[00:11:46.413]      __var nReset = 0x80;
[00:11:46.413]        // -> [nReset <= 0x00000080]
[00:11:46.413]      __var canReadPins = 0;
[00:11:46.413]        // -> [canReadPins <= 0x00000000]
[00:11:46.413]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:11:46.416]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:11:46.416]        // -> [canReadPins <= 0x00000001]
[00:11:46.416]    </block>
[00:11:46.416]    <control if="" while="1" timeout="200" info="">
[00:11:46.417]      // while "1"  (timeout="200")
[00:11:46.417]      // while-condition  =>  TRUE
[00:11:46.417]      // while "1"  (timeout="200")
[00:11:46.417]      // while-condition  =>  TRUE
[00:11:46.418]      // while "1"  (timeout="200")
[00:11:46.418]      // while-condition  =>  TRUE
[00:11:46.418]      // while "1"  (timeout="200")
[00:11:46.418]      // while-condition  =>  TRUE
[00:11:46.418]      // while "1"  (timeout="200")
[00:11:46.418]      // while-condition  =>  TRUE
[00:11:46.418]      // while "1"  (timeout="200")
[00:11:46.418]      // while-condition  =>  TRUE
[00:11:46.418]      // while "1"  (timeout="200")
[00:11:46.418]      // while-condition  =>  TRUE
[00:11:46.418]      // while "1"  (timeout="200")
[00:11:46.418]      // while-condition  =>  TRUE
[00:11:46.418]      // while "1"  (timeout="200")
[00:11:46.418]      // while-condition  =>  TRUE
[00:11:46.418]      // while "1"  (timeout="200")
[00:11:46.418]      // while-condition  =>  TRUE
[00:11:46.418]      // while "1"  (timeout="200")
[00:11:46.418]      // while-condition  =>  TRUE
[00:11:46.419]      // while "1"  (timeout="200")
[00:11:46.419]      // while-condition  =>  TRUE
[00:11:46.419]      // while "1"  (timeout="200")
[00:11:46.419]      // while-condition  =>  TRUE
[00:11:46.419]      // while "1"  (timeout="200")
[00:11:46.419]      // while-condition  =>  TRUE
[00:11:46.419]      // while "1"  (timeout="200")
[00:11:46.419]      // while-condition  =>  TRUE
[00:11:46.419]      // while "1"  (timeout="200")
[00:11:46.419]      // while-condition  =>  TRUE
[00:11:46.419]      // while "1"  (timeout="200")
[00:11:46.421]      // while-condition  =>  TRUE
[00:11:46.421]      // while "1"  (timeout="200")
[00:11:46.421]      // while-condition  =>  TRUE
[00:11:46.421]      // while "1"  (timeout="200")
[00:11:46.421]      // while-condition  =>  TRUE
[00:11:46.421]      // while "1"  (timeout="200")
[00:11:46.421]      // while-condition  =>  TRUE
[00:11:46.421]      // while "1"  (timeout="200")
[00:11:46.421]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.422]      // while "1"  (timeout="200")
[00:11:46.422]      // while-condition  =>  TRUE
[00:11:46.426]      // while "1"  (timeout="200")
[00:11:46.426]      // while  =>  TIMEOUT
[00:11:46.426]      // end while "1"
[00:11:46.426]    </control>
[00:11:46.426]    <control if="canReadPins" while="" timeout="0" info="">
[00:11:46.426]      // if-block "canReadPins"
[00:11:46.426]        // =>  TRUE
[00:11:46.426]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:11:46.426]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:11:46.427]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:11:46.427]        // while-condition  =>  FALSE
[00:11:46.427]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:11:46.428]      </control>
[00:11:46.428]      // end if-block "canReadPins"
[00:11:46.428]    </control>
[00:11:46.428]    <control if="!canReadPins" while="" timeout="0" info="">
[00:11:46.428]      // if-block "!canReadPins"
[00:11:46.428]        // =>  FALSE
[00:11:46.428]      // skip if-block "!canReadPins"
[00:11:46.428]    </control>
[00:11:46.428]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:11:46.429]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:11:46.429]        // =>  TRUE
[00:11:46.429]      <block atomic="false" info="">
[00:11:46.429]        WriteAP(0x00, 0x190008);
[00:11:46.430]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:11:46.430]        WriteAP(0xF0, 0x01);
[00:11:46.436]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:11:46.436]      </block>
[00:11:46.437]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:11:46.437]    </control>
[00:11:46.437]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:11:46.437]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:11:46.437]        // =>  FALSE
[00:11:46.437]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:11:46.437]    </control>
[00:11:46.437]    <block atomic="false" info="">
[00:11:46.438]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:11:46.441]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:11:46.441]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:11:46.441]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:11:46.442]      __ap = 0; //lets make sure we reset the access point selection
[00:11:46.443]        // -> [__ap <= 0x00000000]
[00:11:46.443]    </block>
[00:11:46.443]  </sequence>
[00:11:46.443]  
[00:11:46.471]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:11:46.471]  
[00:11:46.471]  <debugvars>
[00:11:46.471]    // Pre-defined
[00:11:46.471]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:11:46.471]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:11:46.471]    __dp=0x00000000
[00:11:46.471]    __ap=0x00000000
[00:11:46.471]    __traceout=0x00000000      (Trace Disabled)
[00:11:46.471]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:11:46.471]    __FlashAddr=0x00000000
[00:11:46.471]    __FlashLen=0x00000000
[00:11:46.471]    __FlashArg=0x00000000
[00:11:46.471]    __FlashOp=0x00000000
[00:11:46.471]    __Result=0x00000000
[00:11:46.471]  </debugvars>
[00:11:46.471]  
[00:11:46.471]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:11:46.471]    <block atomic="false" info="">
[00:11:46.471]      __var deviceID = 0;
[00:11:46.471]        // -> [deviceID <= 0x00000000]
[00:11:46.471]      __var version = 0;
[00:11:46.471]        // -> [version <= 0x00000000]
[00:11:46.471]      __var partNum = 0;
[00:11:46.471]        // -> [partNum <= 0x00000000]
[00:11:46.471]      __var manuf = 0;
[00:11:46.471]        // -> [manuf <= 0x00000000]
[00:11:46.471]      __var isMSPM0G1X0X_G3X0X = 0;
[00:11:46.471]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:11:46.471]      __var isProduction = 0;
[00:11:46.471]        // -> [isProduction <= 0x00000000]
[00:11:46.471]      __var continueId = 0;
[00:11:46.471]        // -> [continueId <= 0x00000000]
[00:11:46.471]      deviceID =   Read32(0x41C40004);
[00:11:46.479]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:11:46.479]        // -> [deviceID <= 0x2BB8802F]
[00:11:46.480]      version = deviceID >> 28;
[00:11:46.480]        // -> [version <= 0x00000002]
[00:11:46.480]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:11:46.480]        // -> [partNum <= 0x0000BB88]
[00:11:46.480]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:11:46.480]        // -> [manuf <= 0x00000017]
[00:11:46.480]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:11:46.480]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:11:46.480]      isProduction = (version > 0);
[00:11:46.480]        // -> [isProduction <= 0x00000001]
[00:11:46.480]    </block>
[00:11:46.480]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:11:46.480]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:11:46.480]        // =>  FALSE
[00:11:46.480]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:11:46.481]    </control>
[00:11:46.481]    <control if="continueId == 4" while="" timeout="0" info="">
[00:11:46.481]      // if-block "continueId == 4"
[00:11:46.481]        // =>  FALSE
[00:11:46.481]      // skip if-block "continueId == 4"
[00:11:46.481]    </control>
[00:11:46.481]    <control if="!isProduction" while="" timeout="0" info="">
[00:11:46.481]      // if-block "!isProduction"
[00:11:46.481]        // =>  FALSE
[00:11:46.481]      // skip if-block "!isProduction"
[00:11:46.481]    </control>
[00:11:46.481]  </sequence>
[00:11:46.481]  
[00:12:09.391]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:12:09.391]  
[00:12:09.403]  <debugvars>
[00:12:09.403]    // Pre-defined
[00:12:09.403]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:12:09.403]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:12:09.403]    __dp=0x00000000
[00:12:09.403]    __ap=0x00000000
[00:12:09.403]    __traceout=0x00000000      (Trace Disabled)
[00:12:09.403]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:12:09.403]    __FlashAddr=0x00000000
[00:12:09.403]    __FlashLen=0x00000000
[00:12:09.404]    __FlashArg=0x00000000
[00:12:09.404]    __FlashOp=0x00000000
[00:12:09.404]    __Result=0x00000000
[00:12:09.404]  </debugvars>
[00:12:09.404]  
[00:12:09.404]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:12:09.404]    <block atomic="false" info="">
[00:12:09.404]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:12:09.404]        // -> [isSWJ <= 0x00000001]
[00:12:09.405]      __var hasDormant = __protocol & 0x00020000;
[00:12:09.405]        // -> [hasDormant <= 0x00000000]
[00:12:09.405]      __var protType   = __protocol & 0x0000FFFF;
[00:12:09.405]        // -> [protType <= 0x00000002]
[00:12:09.405]    </block>
[00:12:09.405]    <control if="protType == 1" while="" timeout="0" info="">
[00:12:09.405]      // if-block "protType == 1"
[00:12:09.405]        // =>  FALSE
[00:12:09.405]      // skip if-block "protType == 1"
[00:12:09.405]    </control>
[00:12:09.405]    <control if="protType == 2" while="" timeout="0" info="">
[00:12:09.405]      // if-block "protType == 2"
[00:12:09.405]        // =>  TRUE
[00:12:09.405]      <control if="isSWJ" while="" timeout="0" info="">
[00:12:09.405]        // if-block "isSWJ"
[00:12:09.405]          // =>  TRUE
[00:12:09.405]        <control if="hasDormant" while="" timeout="0" info="">
[00:12:09.406]          // if-block "hasDormant"
[00:12:09.406]            // =>  FALSE
[00:12:09.406]          // skip if-block "hasDormant"
[00:12:09.406]        </control>
[00:12:09.406]        <control if="!hasDormant" while="" timeout="0" info="">
[00:12:09.406]          // if-block "!hasDormant"
[00:12:09.406]            // =>  TRUE
[00:12:09.406]          <block atomic="false" info="">
[00:12:09.406]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:12:09.408]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:12:09.409]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:12:09.409]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:12:09.409]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:12:09.409]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:12:09.409]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:12:09.415]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:12:09.415]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:12:09.418]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:12:09.421]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:12:09.424]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:12:09.424]          </block>
[00:12:09.424]          // end if-block "!hasDormant"
[00:12:09.424]        </control>
[00:12:09.424]        // end if-block "isSWJ"
[00:12:09.425]      </control>
[00:12:09.425]      <control if="!isSWJ" while="" timeout="0" info="">
[00:12:09.425]        // if-block "!isSWJ"
[00:12:09.425]          // =>  FALSE
[00:12:09.425]        // skip if-block "!isSWJ"
[00:12:09.425]      </control>
[00:12:09.425]      <block atomic="false" info="">
[00:12:09.425]        ReadDP(0x0);
[00:12:09.428]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:12:09.428]      </block>
[00:12:09.428]      // end if-block "protType == 2"
[00:12:09.428]    </control>
[00:12:09.428]  </sequence>
[00:12:09.428]  
[00:12:09.432]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:12:09.432]  
[00:12:09.432]  <debugvars>
[00:12:09.432]    // Pre-defined
[00:12:09.432]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:12:09.432]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:12:09.432]    __dp=0x00000000
[00:12:09.432]    __ap=0x00000000
[00:12:09.432]    __traceout=0x00000000      (Trace Disabled)
[00:12:09.432]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:12:09.432]    __FlashAddr=0x00000000
[00:12:09.432]    __FlashLen=0x00000000
[00:12:09.432]    __FlashArg=0x00000000
[00:12:09.432]    __FlashOp=0x00000000
[00:12:09.432]    __Result=0x00000000
[00:12:09.432]  </debugvars>
[00:12:09.432]  
[00:12:09.432]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:12:09.432]    <block atomic="false" info="">
[00:12:09.432]      __var SW_DP_ABORT       = 0x0;
[00:12:09.432]        // -> [SW_DP_ABORT <= 0x00000000]
[00:12:09.432]      __var DP_CTRL_STAT      = 0x4;
[00:12:09.432]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:12:09.432]      __var DP_SELECT         = 0x8;
[00:12:09.432]        // -> [DP_SELECT <= 0x00000008]
[00:12:09.432]      __var powered_down      = 0;
[00:12:09.432]        // -> [powered_down <= 0x00000000]
[00:12:09.432]      WriteDP(DP_SELECT, 0x00000000);
[00:12:09.437]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:12:09.437]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:12:09.438]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:12:09.438]        // -> [powered_down <= 0x00000001]
[00:12:09.438]    </block>
[00:12:09.438]    <control if="powered_down" while="" timeout="0" info="">
[00:12:09.438]      // if-block "powered_down"
[00:12:09.438]        // =>  TRUE
[00:12:09.438]      <block atomic="false" info="">
[00:12:09.438]        Message(0, "Debug/System power-up request sent");
[00:12:09.438]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:12:09.438]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:12:09.443]      </block>
[00:12:09.443]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:12:09.444]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:12:09.445]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:12:09.445]        // while-condition  =>  FALSE
[00:12:09.445]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:12:09.445]      </control>
[00:12:09.445]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:12:09.445]        // if-block "(__protocol & 0xFFFF) == 1"
[00:12:09.445]          // =>  FALSE
[00:12:09.446]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:12:09.446]      </control>
[00:12:09.446]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:12:09.446]        // if-block "(__protocol & 0xFFFF) == 2"
[00:12:09.446]          // =>  TRUE
[00:12:09.446]        <block atomic="false" info="">
[00:12:09.446]          Message(0, "executing SWD power up");
[00:12:09.447]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:12:09.450]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:12:09.450]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:12:09.452]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:12:09.452]        </block>
[00:12:09.452]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:12:09.452]      </control>
[00:12:09.453]      // end if-block "powered_down"
[00:12:09.453]    </control>
[00:12:09.453]    <block atomic="false" info="">
[00:12:09.453]      __var DEBUG_PORT_VAL    = 0;
[00:12:09.453]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:12:09.453]      __var ACCESS_POINT_VAL  = 0;
[00:12:09.453]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:12:09.453]      __ap = 1; 
[00:12:09.453]        // -> [__ap <= 0x00000001]
[00:12:09.453]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:12:09.457]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:12:09.457]      __ap = 4;
[00:12:09.457]        // -> [__ap <= 0x00000004]
[00:12:09.457]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:12:09.457]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:12:09.457]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:12:09.457]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:12:09.465]    </block>
[00:12:09.465]    <block atomic="false" info="">
[00:12:09.465]      __var nReset = 0x80;
[00:12:09.466]        // -> [nReset <= 0x00000080]
[00:12:09.466]      __var canReadPins = 0;
[00:12:09.466]        // -> [canReadPins <= 0x00000000]
[00:12:09.466]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:12:09.467]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:12:09.467]        // -> [canReadPins <= 0x00000001]
[00:12:09.467]    </block>
[00:12:09.468]    <control if="" while="1" timeout="200" info="">
[00:12:09.468]      // while "1"  (timeout="200")
[00:12:09.468]      // while-condition  =>  TRUE
[00:12:09.468]      // while "1"  (timeout="200")
[00:12:09.468]      // while-condition  =>  TRUE
[00:12:09.468]      // while "1"  (timeout="200")
[00:12:09.468]      // while-condition  =>  TRUE
[00:12:09.468]      // while "1"  (timeout="200")
[00:12:09.468]      // while-condition  =>  TRUE
[00:12:09.468]      // while "1"  (timeout="200")
[00:12:09.468]      // while-condition  =>  TRUE
[00:12:09.468]      // while "1"  (timeout="200")
[00:12:09.468]      // while-condition  =>  TRUE
[00:12:09.468]      // while "1"  (timeout="200")
[00:12:09.468]      // while-condition  =>  TRUE
[00:12:09.468]      // while "1"  (timeout="200")
[00:12:09.468]      // while-condition  =>  TRUE
[00:12:09.468]      // while "1"  (timeout="200")
[00:12:09.468]      // while-condition  =>  TRUE
[00:12:09.468]      // while "1"  (timeout="200")
[00:12:09.468]      // while-condition  =>  TRUE
[00:12:09.468]      // while "1"  (timeout="200")
[00:12:09.468]      // while-condition  =>  TRUE
[00:12:09.468]      // while "1"  (timeout="200")
[00:12:09.468]      // while-condition  =>  TRUE
[00:12:09.468]      // while "1"  (timeout="200")
[00:12:09.471]      // while-condition  =>  TRUE
[00:12:09.471]      // while "1"  (timeout="200")
[00:12:09.471]      // while  =>  TIMEOUT
[00:12:09.471]      // end while "1"
[00:12:09.471]    </control>
[00:12:09.471]    <control if="canReadPins" while="" timeout="0" info="">
[00:12:09.471]      // if-block "canReadPins"
[00:12:09.471]        // =>  TRUE
[00:12:09.471]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:12:09.471]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:12:09.473]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:12:09.473]        // while-condition  =>  FALSE
[00:12:09.473]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:12:09.473]      </control>
[00:12:09.473]      // end if-block "canReadPins"
[00:12:09.473]    </control>
[00:12:09.473]    <control if="!canReadPins" while="" timeout="0" info="">
[00:12:09.473]      // if-block "!canReadPins"
[00:12:09.473]        // =>  FALSE
[00:12:09.473]      // skip if-block "!canReadPins"
[00:12:09.473]    </control>
[00:12:09.473]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:12:09.473]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:12:09.473]        // =>  TRUE
[00:12:09.473]      <block atomic="false" info="">
[00:12:09.473]        WriteAP(0x00, 0x190008);
[00:12:09.475]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:12:09.476]        WriteAP(0xF0, 0x01);
[00:12:09.478]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:12:09.478]      </block>
[00:12:09.478]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:12:09.478]    </control>
[00:12:09.478]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:12:09.478]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:12:09.478]        // =>  FALSE
[00:12:09.478]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:12:09.478]    </control>
[00:12:09.478]    <block atomic="false" info="">
[00:12:09.478]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:12:09.486]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:12:09.487]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:12:09.487]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:12:09.488]      __ap = 0; //lets make sure we reset the access point selection
[00:12:09.489]        // -> [__ap <= 0x00000000]
[00:12:09.489]    </block>
[00:12:09.489]  </sequence>
[00:12:09.489]  
[00:12:09.509]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:12:09.509]  
[00:12:09.509]  <debugvars>
[00:12:09.509]    // Pre-defined
[00:12:09.509]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:12:09.509]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:12:09.509]    __dp=0x00000000
[00:12:09.509]    __ap=0x00000000
[00:12:09.509]    __traceout=0x00000000      (Trace Disabled)
[00:12:09.509]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:12:09.509]    __FlashAddr=0x00000000
[00:12:09.509]    __FlashLen=0x00000000
[00:12:09.509]    __FlashArg=0x00000000
[00:12:09.509]    __FlashOp=0x00000000
[00:12:09.509]    __Result=0x00000000
[00:12:09.509]  </debugvars>
[00:12:09.509]  
[00:12:09.509]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:12:09.509]    <block atomic="false" info="">
[00:12:09.509]      __var deviceID = 0;
[00:12:09.509]        // -> [deviceID <= 0x00000000]
[00:12:09.513]      __var version = 0;
[00:12:09.513]        // -> [version <= 0x00000000]
[00:12:09.513]      __var partNum = 0;
[00:12:09.513]        // -> [partNum <= 0x00000000]
[00:12:09.513]      __var manuf = 0;
[00:12:09.513]        // -> [manuf <= 0x00000000]
[00:12:09.513]      __var isMSPM0G1X0X_G3X0X = 0;
[00:12:09.513]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:12:09.513]      __var isProduction = 0;
[00:12:09.513]        // -> [isProduction <= 0x00000000]
[00:12:09.513]      __var continueId = 0;
[00:12:09.513]        // -> [continueId <= 0x00000000]
[00:12:09.513]      deviceID =   Read32(0x41C40004);
[00:12:09.518]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:12:09.520]        // -> [deviceID <= 0x2BB8802F]
[00:12:09.520]      version = deviceID >> 28;
[00:12:09.520]        // -> [version <= 0x00000002]
[00:12:09.520]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:12:09.520]        // -> [partNum <= 0x0000BB88]
[00:12:09.520]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:12:09.520]        // -> [manuf <= 0x00000017]
[00:12:09.520]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:12:09.520]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:12:09.520]      isProduction = (version > 0);
[00:12:09.520]        // -> [isProduction <= 0x00000001]
[00:12:09.520]    </block>
[00:12:09.520]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:12:09.520]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:12:09.520]        // =>  FALSE
[00:12:09.520]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:12:09.520]    </control>
[00:12:09.520]    <control if="continueId == 4" while="" timeout="0" info="">
[00:12:09.520]      // if-block "continueId == 4"
[00:12:09.520]        // =>  FALSE
[00:12:09.520]      // skip if-block "continueId == 4"
[00:12:09.520]    </control>
[00:12:09.520]    <control if="!isProduction" while="" timeout="0" info="">
[00:12:09.520]      // if-block "!isProduction"
[00:12:09.520]        // =>  FALSE
[00:12:09.520]      // skip if-block "!isProduction"
[00:12:09.520]    </control>
[00:12:09.520]  </sequence>
[00:12:09.520]  
[00:12:41.257]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:12:41.257]  
[00:12:41.257]  <debugvars>
[00:12:41.257]    // Pre-defined
[00:12:41.257]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:12:41.263]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:12:41.263]    __dp=0x00000000
[00:12:41.264]    __ap=0x00000000
[00:12:41.264]    __traceout=0x00000000      (Trace Disabled)
[00:12:41.264]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:12:41.264]    __FlashAddr=0x00000000
[00:12:41.264]    __FlashLen=0x00000000
[00:12:41.264]    __FlashArg=0x00000000
[00:12:41.264]    __FlashOp=0x00000000
[00:12:41.264]    __Result=0x00000000
[00:12:41.264]  </debugvars>
[00:12:41.265]  
[00:12:41.265]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:12:41.265]    <block atomic="false" info="">
[00:12:41.265]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:12:41.265]        // -> [isSWJ <= 0x00000001]
[00:12:41.265]      __var hasDormant = __protocol & 0x00020000;
[00:12:41.265]        // -> [hasDormant <= 0x00000000]
[00:12:41.265]      __var protType   = __protocol & 0x0000FFFF;
[00:12:41.265]        // -> [protType <= 0x00000002]
[00:12:41.265]    </block>
[00:12:41.266]    <control if="protType == 1" while="" timeout="0" info="">
[00:12:41.266]      // if-block "protType == 1"
[00:12:41.266]        // =>  FALSE
[00:12:41.266]      // skip if-block "protType == 1"
[00:12:41.266]    </control>
[00:12:41.266]    <control if="protType == 2" while="" timeout="0" info="">
[00:12:41.266]      // if-block "protType == 2"
[00:12:41.266]        // =>  TRUE
[00:12:41.266]      <control if="isSWJ" while="" timeout="0" info="">
[00:12:41.266]        // if-block "isSWJ"
[00:12:41.266]          // =>  TRUE
[00:12:41.267]        <control if="hasDormant" while="" timeout="0" info="">
[00:12:41.267]          // if-block "hasDormant"
[00:12:41.267]            // =>  FALSE
[00:12:41.267]          // skip if-block "hasDormant"
[00:12:41.267]        </control>
[00:12:41.267]        <control if="!hasDormant" while="" timeout="0" info="">
[00:12:41.267]          // if-block "!hasDormant"
[00:12:41.267]            // =>  TRUE
[00:12:41.267]          <block atomic="false" info="">
[00:12:41.267]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:12:41.268]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:12:41.268]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:12:41.270]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:12:41.270]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:12:41.270]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:12:41.270]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:12:41.270]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:12:41.270]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:12:41.277]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:12:41.277]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:12:41.277]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:12:41.277]          </block>
[00:12:41.277]          // end if-block "!hasDormant"
[00:12:41.277]        </control>
[00:12:41.277]        // end if-block "isSWJ"
[00:12:41.277]      </control>
[00:12:41.277]      <control if="!isSWJ" while="" timeout="0" info="">
[00:12:41.277]        // if-block "!isSWJ"
[00:12:41.277]          // =>  FALSE
[00:12:41.277]        // skip if-block "!isSWJ"
[00:12:41.277]      </control>
[00:12:41.277]      <block atomic="false" info="">
[00:12:41.277]        ReadDP(0x0);
[00:12:41.277]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:12:41.277]      </block>
[00:12:41.277]      // end if-block "protType == 2"
[00:12:41.277]    </control>
[00:12:41.277]  </sequence>
[00:12:41.277]  
[00:12:41.288]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:12:41.288]  
[00:12:41.288]  <debugvars>
[00:12:41.288]    // Pre-defined
[00:12:41.288]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:12:41.288]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:12:41.288]    __dp=0x00000000
[00:12:41.288]    __ap=0x00000000
[00:12:41.288]    __traceout=0x00000000      (Trace Disabled)
[00:12:41.288]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:12:41.288]    __FlashAddr=0x00000000
[00:12:41.288]    __FlashLen=0x00000000
[00:12:41.288]    __FlashArg=0x00000000
[00:12:41.288]    __FlashOp=0x00000000
[00:12:41.288]    __Result=0x00000000
[00:12:41.288]  </debugvars>
[00:12:41.288]  
[00:12:41.288]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:12:41.288]    <block atomic="false" info="">
[00:12:41.288]      __var SW_DP_ABORT       = 0x0;
[00:12:41.288]        // -> [SW_DP_ABORT <= 0x00000000]
[00:12:41.288]      __var DP_CTRL_STAT      = 0x4;
[00:12:41.288]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:12:41.288]      __var DP_SELECT         = 0x8;
[00:12:41.288]        // -> [DP_SELECT <= 0x00000008]
[00:12:41.291]      __var powered_down      = 0;
[00:12:41.291]        // -> [powered_down <= 0x00000000]
[00:12:41.291]      WriteDP(DP_SELECT, 0x00000000);
[00:12:41.291]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:12:41.291]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:12:41.297]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:12:41.297]        // -> [powered_down <= 0x00000001]
[00:12:41.297]    </block>
[00:12:41.297]    <control if="powered_down" while="" timeout="0" info="">
[00:12:41.298]      // if-block "powered_down"
[00:12:41.298]        // =>  TRUE
[00:12:41.298]      <block atomic="false" info="">
[00:12:41.298]        Message(0, "Debug/System power-up request sent");
[00:12:41.298]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:12:41.301]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:12:41.301]      </block>
[00:12:41.301]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:12:41.301]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:12:41.305]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:12:41.305]        // while-condition  =>  FALSE
[00:12:41.305]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:12:41.305]      </control>
[00:12:41.305]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:12:41.306]        // if-block "(__protocol & 0xFFFF) == 1"
[00:12:41.306]          // =>  FALSE
[00:12:41.306]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:12:41.306]      </control>
[00:12:41.306]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:12:41.306]        // if-block "(__protocol & 0xFFFF) == 2"
[00:12:41.306]          // =>  TRUE
[00:12:41.307]        <block atomic="false" info="">
[00:12:41.307]          Message(0, "executing SWD power up");
[00:12:41.310]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:12:41.311]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:12:41.311]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:12:41.314]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:12:41.314]        </block>
[00:12:41.314]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:12:41.314]      </control>
[00:12:41.314]      // end if-block "powered_down"
[00:12:41.314]    </control>
[00:12:41.314]    <block atomic="false" info="">
[00:12:41.314]      __var DEBUG_PORT_VAL    = 0;
[00:12:41.314]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:12:41.314]      __var ACCESS_POINT_VAL  = 0;
[00:12:41.315]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:12:41.315]      __ap = 1; 
[00:12:41.315]        // -> [__ap <= 0x00000001]
[00:12:41.315]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:12:41.318]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:12:41.319]      __ap = 4;
[00:12:41.319]        // -> [__ap <= 0x00000004]
[00:12:41.319]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:12:41.323]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:12:41.323]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:12:41.323]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:12:41.325]    </block>
[00:12:41.325]    <block atomic="false" info="">
[00:12:41.325]      __var nReset = 0x80;
[00:12:41.325]        // -> [nReset <= 0x00000080]
[00:12:41.325]      __var canReadPins = 0;
[00:12:41.325]        // -> [canReadPins <= 0x00000000]
[00:12:41.325]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:12:41.329]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:12:41.329]        // -> [canReadPins <= 0x00000001]
[00:12:41.329]    </block>
[00:12:41.329]    <control if="" while="1" timeout="200" info="">
[00:12:41.329]      // while "1"  (timeout="200")
[00:12:41.329]      // while-condition  =>  TRUE
[00:12:41.329]      // while "1"  (timeout="200")
[00:12:41.330]      // while-condition  =>  TRUE
[00:12:41.330]      // while "1"  (timeout="200")
[00:12:41.330]      // while  =>  TIMEOUT
[00:12:41.330]      // end while "1"
[00:12:41.330]    </control>
[00:12:41.330]    <control if="canReadPins" while="" timeout="0" info="">
[00:12:41.330]      // if-block "canReadPins"
[00:12:41.330]        // =>  TRUE
[00:12:41.330]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:12:41.330]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:12:41.332]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:12:41.332]        // while-condition  =>  FALSE
[00:12:41.332]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:12:41.332]      </control>
[00:12:41.332]      // end if-block "canReadPins"
[00:12:41.332]    </control>
[00:12:41.332]    <control if="!canReadPins" while="" timeout="0" info="">
[00:12:41.332]      // if-block "!canReadPins"
[00:12:41.334]        // =>  FALSE
[00:12:41.334]      // skip if-block "!canReadPins"
[00:12:41.334]    </control>
[00:12:41.334]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:12:41.334]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:12:41.334]        // =>  TRUE
[00:12:41.334]      <block atomic="false" info="">
[00:12:41.334]        WriteAP(0x00, 0x190008);
[00:12:41.335]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:12:41.335]        WriteAP(0xF0, 0x01);
[00:12:41.339]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:12:41.339]      </block>
[00:12:41.339]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:12:41.341]    </control>
[00:12:41.341]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:12:41.341]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:12:41.341]        // =>  FALSE
[00:12:41.341]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:12:41.341]    </control>
[00:12:41.341]    <block atomic="false" info="">
[00:12:41.341]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:12:41.344]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:12:41.344]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:12:41.344]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:12:41.347]      __ap = 0; //lets make sure we reset the access point selection
[00:12:41.347]        // -> [__ap <= 0x00000000]
[00:12:41.348]    </block>
[00:12:41.348]  </sequence>
[00:12:41.348]  
[00:12:41.375]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:12:41.375]  
[00:12:41.375]  <debugvars>
[00:12:41.375]    // Pre-defined
[00:12:41.375]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:12:41.375]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:12:41.376]    __dp=0x00000000
[00:12:41.376]    __ap=0x00000000
[00:12:41.376]    __traceout=0x00000000      (Trace Disabled)
[00:12:41.376]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:12:41.376]    __FlashAddr=0x00000000
[00:12:41.376]    __FlashLen=0x00000000
[00:12:41.376]    __FlashArg=0x00000000
[00:12:41.376]    __FlashOp=0x00000000
[00:12:41.376]    __Result=0x00000000
[00:12:41.376]  </debugvars>
[00:12:41.376]  
[00:12:41.376]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:12:41.376]    <block atomic="false" info="">
[00:12:41.376]      __var deviceID = 0;
[00:12:41.376]        // -> [deviceID <= 0x00000000]
[00:12:41.376]      __var version = 0;
[00:12:41.377]        // -> [version <= 0x00000000]
[00:12:41.377]      __var partNum = 0;
[00:12:41.377]        // -> [partNum <= 0x00000000]
[00:12:41.377]      __var manuf = 0;
[00:12:41.377]        // -> [manuf <= 0x00000000]
[00:12:41.377]      __var isMSPM0G1X0X_G3X0X = 0;
[00:12:41.377]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:12:41.377]      __var isProduction = 0;
[00:12:41.378]        // -> [isProduction <= 0x00000000]
[00:12:41.378]      __var continueId = 0;
[00:12:41.378]        // -> [continueId <= 0x00000000]
[00:12:41.378]      deviceID =   Read32(0x41C40004);
[00:12:41.386]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:12:41.386]        // -> [deviceID <= 0x2BB8802F]
[00:12:41.386]      version = deviceID >> 28;
[00:12:41.386]        // -> [version <= 0x00000002]
[00:12:41.386]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:12:41.387]        // -> [partNum <= 0x0000BB88]
[00:12:41.387]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:12:41.387]        // -> [manuf <= 0x00000017]
[00:12:41.387]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:12:41.387]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:12:41.387]      isProduction = (version > 0);
[00:12:41.388]        // -> [isProduction <= 0x00000001]
[00:12:41.388]    </block>
[00:12:41.388]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:12:41.388]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:12:41.388]        // =>  FALSE
[00:12:41.388]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:12:41.388]    </control>
[00:12:41.388]    <control if="continueId == 4" while="" timeout="0" info="">
[00:12:41.388]      // if-block "continueId == 4"
[00:12:41.388]        // =>  FALSE
[00:12:41.388]      // skip if-block "continueId == 4"
[00:12:41.388]    </control>
[00:12:41.388]    <control if="!isProduction" while="" timeout="0" info="">
[00:12:41.388]      // if-block "!isProduction"
[00:12:41.388]        // =>  FALSE
[00:12:41.388]      // skip if-block "!isProduction"
[00:12:41.388]    </control>
[00:12:41.388]  </sequence>
[00:12:41.388]  
[00:14:40.981]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:14:40.981]  
[00:14:40.990]  <debugvars>
[00:14:40.990]    // Pre-defined
[00:14:40.990]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:40.991]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:40.991]    __dp=0x00000000
[00:14:40.991]    __ap=0x00000000
[00:14:40.991]    __traceout=0x00000000      (Trace Disabled)
[00:14:40.991]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:40.991]    __FlashAddr=0x00000000
[00:14:40.991]    __FlashLen=0x00000000
[00:14:40.991]    __FlashArg=0x00000000
[00:14:40.991]    __FlashOp=0x00000000
[00:14:40.991]    __Result=0x00000000
[00:14:40.991]  </debugvars>
[00:14:40.991]  
[00:14:40.991]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:14:40.991]    <block atomic="false" info="">
[00:14:40.991]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:14:40.991]        // -> [isSWJ <= 0x00000001]
[00:14:40.991]      __var hasDormant = __protocol & 0x00020000;
[00:14:40.991]        // -> [hasDormant <= 0x00000000]
[00:14:40.991]      __var protType   = __protocol & 0x0000FFFF;
[00:14:40.991]        // -> [protType <= 0x00000002]
[00:14:40.991]    </block>
[00:14:40.991]    <control if="protType == 1" while="" timeout="0" info="">
[00:14:40.991]      // if-block "protType == 1"
[00:14:40.991]        // =>  FALSE
[00:14:40.991]      // skip if-block "protType == 1"
[00:14:40.991]    </control>
[00:14:40.991]    <control if="protType == 2" while="" timeout="0" info="">
[00:14:40.991]      // if-block "protType == 2"
[00:14:40.991]        // =>  TRUE
[00:14:40.991]      <control if="isSWJ" while="" timeout="0" info="">
[00:14:40.991]        // if-block "isSWJ"
[00:14:40.991]          // =>  TRUE
[00:14:40.991]        <control if="hasDormant" while="" timeout="0" info="">
[00:14:40.991]          // if-block "hasDormant"
[00:14:40.991]            // =>  FALSE
[00:14:40.991]          // skip if-block "hasDormant"
[00:14:40.991]        </control>
[00:14:40.991]        <control if="!hasDormant" while="" timeout="0" info="">
[00:14:40.991]          // if-block "!hasDormant"
[00:14:40.991]            // =>  TRUE
[00:14:40.991]          <block atomic="false" info="">
[00:14:40.991]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:14:40.995]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:40.996]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:14:40.997]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:14:40.997]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:14:41.000]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:41.000]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:14:41.004]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:14:41.004]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:14:41.007]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:14:41.007]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:14:41.013]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:14:41.014]          </block>
[00:14:41.014]          // end if-block "!hasDormant"
[00:14:41.014]        </control>
[00:14:41.014]        // end if-block "isSWJ"
[00:14:41.014]      </control>
[00:14:41.014]      <control if="!isSWJ" while="" timeout="0" info="">
[00:14:41.014]        // if-block "!isSWJ"
[00:14:41.014]          // =>  FALSE
[00:14:41.014]        // skip if-block "!isSWJ"
[00:14:41.014]      </control>
[00:14:41.014]      <block atomic="false" info="">
[00:14:41.014]        ReadDP(0x0);
[00:14:41.015]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:14:41.015]      </block>
[00:14:41.015]      // end if-block "protType == 2"
[00:14:41.015]    </control>
[00:14:41.015]  </sequence>
[00:14:41.015]  
[00:14:41.019]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:14:41.019]  
[00:14:41.019]  <debugvars>
[00:14:41.019]    // Pre-defined
[00:14:41.019]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:41.019]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:41.019]    __dp=0x00000000
[00:14:41.019]    __ap=0x00000000
[00:14:41.019]    __traceout=0x00000000      (Trace Disabled)
[00:14:41.019]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:41.019]    __FlashAddr=0x00000000
[00:14:41.019]    __FlashLen=0x00000000
[00:14:41.019]    __FlashArg=0x00000000
[00:14:41.019]    __FlashOp=0x00000000
[00:14:41.019]    __Result=0x00000000
[00:14:41.019]  </debugvars>
[00:14:41.019]  
[00:14:41.019]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:14:41.019]    <block atomic="false" info="">
[00:14:41.019]      __var SW_DP_ABORT       = 0x0;
[00:14:41.019]        // -> [SW_DP_ABORT <= 0x00000000]
[00:14:41.019]      __var DP_CTRL_STAT      = 0x4;
[00:14:41.019]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:14:41.019]      __var DP_SELECT         = 0x8;
[00:14:41.019]        // -> [DP_SELECT <= 0x00000008]
[00:14:41.019]      __var powered_down      = 0;
[00:14:41.019]        // -> [powered_down <= 0x00000000]
[00:14:41.019]      WriteDP(DP_SELECT, 0x00000000);
[00:14:41.023]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:14:41.023]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:14:41.025]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:14:41.025]        // -> [powered_down <= 0x00000001]
[00:14:41.025]    </block>
[00:14:41.025]    <control if="powered_down" while="" timeout="0" info="">
[00:14:41.025]      // if-block "powered_down"
[00:14:41.025]        // =>  TRUE
[00:14:41.025]      <block atomic="false" info="">
[00:14:41.025]        Message(0, "Debug/System power-up request sent");
[00:14:41.025]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:14:41.030]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:14:41.030]      </block>
[00:14:41.030]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:14:41.030]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:14:41.030]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:14:41.030]        // while-condition  =>  FALSE
[00:14:41.030]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:14:41.030]      </control>
[00:14:41.030]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:14:41.030]        // if-block "(__protocol & 0xFFFF) == 1"
[00:14:41.030]          // =>  FALSE
[00:14:41.030]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:14:41.030]      </control>
[00:14:41.030]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:14:41.030]        // if-block "(__protocol & 0xFFFF) == 2"
[00:14:41.030]          // =>  TRUE
[00:14:41.030]        <block atomic="false" info="">
[00:14:41.030]          Message(0, "executing SWD power up");
[00:14:41.037]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:14:41.038]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:14:41.039]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:14:41.040]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:14:41.040]        </block>
[00:14:41.040]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:14:41.040]      </control>
[00:14:41.040]      // end if-block "powered_down"
[00:14:41.040]    </control>
[00:14:41.040]    <block atomic="false" info="">
[00:14:41.040]      __var DEBUG_PORT_VAL    = 0;
[00:14:41.040]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:14:41.040]      __var ACCESS_POINT_VAL  = 0;
[00:14:41.040]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:14:41.040]      __ap = 1; 
[00:14:41.040]        // -> [__ap <= 0x00000001]
[00:14:41.040]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:14:41.043]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:14:41.043]      __ap = 4;
[00:14:41.043]        // -> [__ap <= 0x00000004]
[00:14:41.043]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:14:41.048]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:14:41.048]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:14:41.048]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:14:41.050]    </block>
[00:14:41.050]    <block atomic="false" info="">
[00:14:41.050]      __var nReset = 0x80;
[00:14:41.050]        // -> [nReset <= 0x00000080]
[00:14:41.050]      __var canReadPins = 0;
[00:14:41.050]        // -> [canReadPins <= 0x00000000]
[00:14:41.050]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:14:41.051]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:14:41.051]        // -> [canReadPins <= 0x00000001]
[00:14:41.051]    </block>
[00:14:41.051]    <control if="" while="1" timeout="200" info="">
[00:14:41.051]      // while "1"  (timeout="200")
[00:14:41.051]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.053]      // while-condition  =>  TRUE
[00:14:41.053]      // while "1"  (timeout="200")
[00:14:41.057]      // while-condition  =>  TRUE
[00:14:41.057]      // while "1"  (timeout="200")
[00:14:41.057]      // while-condition  =>  TRUE
[00:14:41.057]      // while "1"  (timeout="200")
[00:14:41.057]      // while-condition  =>  TRUE
[00:14:41.058]      // while "1"  (timeout="200")
[00:14:41.058]      // while-condition  =>  TRUE
[00:14:41.058]      // while "1"  (timeout="200")
[00:14:41.058]      // while-condition  =>  TRUE
[00:14:41.058]      // while "1"  (timeout="200")
[00:14:41.058]      // while-condition  =>  TRUE
[00:14:41.058]      // while "1"  (timeout="200")
[00:14:41.058]      // while-condition  =>  TRUE
[00:14:41.059]      // while "1"  (timeout="200")
[00:14:41.059]      // while-condition  =>  TRUE
[00:14:41.059]      // while "1"  (timeout="200")
[00:14:41.059]      // while-condition  =>  TRUE
[00:14:41.059]      // while "1"  (timeout="200")
[00:14:41.059]      // while-condition  =>  TRUE
[00:14:41.059]      // while "1"  (timeout="200")
[00:14:41.059]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.060]      // while "1"  (timeout="200")
[00:14:41.060]      // while-condition  =>  TRUE
[00:14:41.063]      // while "1"  (timeout="200")
[00:14:41.063]      // while-condition  =>  TRUE
[00:14:41.063]      // while "1"  (timeout="200")
[00:14:41.063]      // while-condition  =>  TRUE
[00:14:41.063]      // while "1"  (timeout="200")
[00:14:41.063]      // while-condition  =>  TRUE
[00:14:41.063]      // while "1"  (timeout="200")
[00:14:41.063]      // while-condition  =>  TRUE
[00:14:41.063]      // while "1"  (timeout="200")
[00:14:41.063]      // while-condition  =>  TRUE
[00:14:41.063]      // while "1"  (timeout="200")
[00:14:41.063]      // while-condition  =>  TRUE
[00:14:41.064]      // while "1"  (timeout="200")
[00:14:41.064]      // while  =>  TIMEOUT
[00:14:41.064]      // end while "1"
[00:14:41.064]    </control>
[00:14:41.064]    <control if="canReadPins" while="" timeout="0" info="">
[00:14:41.064]      // if-block "canReadPins"
[00:14:41.064]        // =>  TRUE
[00:14:41.064]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:14:41.064]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:14:41.065]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:14:41.065]        // while-condition  =>  FALSE
[00:14:41.065]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:14:41.067]      </control>
[00:14:41.067]      // end if-block "canReadPins"
[00:14:41.067]    </control>
[00:14:41.067]    <control if="!canReadPins" while="" timeout="0" info="">
[00:14:41.067]      // if-block "!canReadPins"
[00:14:41.067]        // =>  FALSE
[00:14:41.067]      // skip if-block "!canReadPins"
[00:14:41.067]    </control>
[00:14:41.067]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:14:41.067]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:14:41.067]        // =>  TRUE
[00:14:41.067]      <block atomic="false" info="">
[00:14:41.068]        WriteAP(0x00, 0x190008);
[00:14:41.069]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:14:41.069]        WriteAP(0xF0, 0x01);
[00:14:41.076]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:14:41.076]      </block>
[00:14:41.076]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:14:41.076]    </control>
[00:14:41.076]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:14:41.076]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:14:41.076]        // =>  FALSE
[00:14:41.076]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:14:41.076]    </control>
[00:14:41.076]    <block atomic="false" info="">
[00:14:41.076]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:14:41.080]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:14:41.080]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:14:41.080]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:14:41.081]      __ap = 0; //lets make sure we reset the access point selection
[00:14:41.081]        // -> [__ap <= 0x00000000]
[00:14:41.081]    </block>
[00:14:41.081]  </sequence>
[00:14:41.081]  
[00:14:41.100]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:14:41.100]  
[00:14:41.100]  <debugvars>
[00:14:41.100]    // Pre-defined
[00:14:41.100]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:14:41.100]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:14:41.100]    __dp=0x00000000
[00:14:41.100]    __ap=0x00000000
[00:14:41.100]    __traceout=0x00000000      (Trace Disabled)
[00:14:41.100]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:14:41.100]    __FlashAddr=0x00000000
[00:14:41.100]    __FlashLen=0x00000000
[00:14:41.100]    __FlashArg=0x00000000
[00:14:41.100]    __FlashOp=0x00000000
[00:14:41.100]    __Result=0x00000000
[00:14:41.100]  </debugvars>
[00:14:41.100]  
[00:14:41.100]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:14:41.100]    <block atomic="false" info="">
[00:14:41.100]      __var deviceID = 0;
[00:14:41.100]        // -> [deviceID <= 0x00000000]
[00:14:41.100]      __var version = 0;
[00:14:41.100]        // -> [version <= 0x00000000]
[00:14:41.100]      __var partNum = 0;
[00:14:41.100]        // -> [partNum <= 0x00000000]
[00:14:41.100]      __var manuf = 0;
[00:14:41.100]        // -> [manuf <= 0x00000000]
[00:14:41.106]      __var isMSPM0G1X0X_G3X0X = 0;
[00:14:41.106]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:14:41.106]      __var isProduction = 0;
[00:14:41.106]        // -> [isProduction <= 0x00000000]
[00:14:41.106]      __var continueId = 0;
[00:14:41.106]        // -> [continueId <= 0x00000000]
[00:14:41.106]      deviceID =   Read32(0x41C40004);
[00:14:41.108]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:14:41.108]        // -> [deviceID <= 0x2BB8802F]
[00:14:41.108]      version = deviceID >> 28;
[00:14:41.108]        // -> [version <= 0x00000002]
[00:14:41.108]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:14:41.108]        // -> [partNum <= 0x0000BB88]
[00:14:41.108]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:14:41.113]        // -> [manuf <= 0x00000017]
[00:14:41.113]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:14:41.113]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:14:41.113]      isProduction = (version > 0);
[00:14:41.113]        // -> [isProduction <= 0x00000001]
[00:14:41.113]    </block>
[00:14:41.113]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:14:41.113]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:14:41.113]        // =>  FALSE
[00:14:41.113]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:14:41.113]    </control>
[00:14:41.114]    <control if="continueId == 4" while="" timeout="0" info="">
[00:14:41.114]      // if-block "continueId == 4"
[00:14:41.114]        // =>  FALSE
[00:14:41.114]      // skip if-block "continueId == 4"
[00:14:41.114]    </control>
[00:14:41.114]    <control if="!isProduction" while="" timeout="0" info="">
[00:14:41.114]      // if-block "!isProduction"
[00:14:41.114]        // =>  FALSE
[00:14:41.114]      // skip if-block "!isProduction"
[00:14:41.114]    </control>
[00:14:41.114]  </sequence>
[00:14:41.114]  
[00:15:19.738]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:15:19.738]  
[00:15:19.748]  <debugvars>
[00:15:19.748]    // Pre-defined
[00:15:19.748]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:15:19.748]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:15:19.749]    __dp=0x00000000
[00:15:19.749]    __ap=0x00000000
[00:15:19.749]    __traceout=0x00000000      (Trace Disabled)
[00:15:19.749]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:15:19.749]    __FlashAddr=0x00000000
[00:15:19.749]    __FlashLen=0x00000000
[00:15:19.749]    __FlashArg=0x00000000
[00:15:19.749]    __FlashOp=0x00000000
[00:15:19.749]    __Result=0x00000000
[00:15:19.749]  </debugvars>
[00:15:19.749]  
[00:15:19.749]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:15:19.749]    <block atomic="false" info="">
[00:15:19.749]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:15:19.749]        // -> [isSWJ <= 0x00000001]
[00:15:19.749]      __var hasDormant = __protocol & 0x00020000;
[00:15:19.749]        // -> [hasDormant <= 0x00000000]
[00:15:19.749]      __var protType   = __protocol & 0x0000FFFF;
[00:15:19.749]        // -> [protType <= 0x00000002]
[00:15:19.749]    </block>
[00:15:19.749]    <control if="protType == 1" while="" timeout="0" info="">
[00:15:19.749]      // if-block "protType == 1"
[00:15:19.749]        // =>  FALSE
[00:15:19.749]      // skip if-block "protType == 1"
[00:15:19.749]    </control>
[00:15:19.752]    <control if="protType == 2" while="" timeout="0" info="">
[00:15:19.752]      // if-block "protType == 2"
[00:15:19.752]        // =>  TRUE
[00:15:19.752]      <control if="isSWJ" while="" timeout="0" info="">
[00:15:19.752]        // if-block "isSWJ"
[00:15:19.752]          // =>  TRUE
[00:15:19.752]        <control if="hasDormant" while="" timeout="0" info="">
[00:15:19.752]          // if-block "hasDormant"
[00:15:19.752]            // =>  FALSE
[00:15:19.752]          // skip if-block "hasDormant"
[00:15:19.752]        </control>
[00:15:19.752]        <control if="!hasDormant" while="" timeout="0" info="">
[00:15:19.752]          // if-block "!hasDormant"
[00:15:19.752]            // =>  TRUE
[00:15:19.752]          <block atomic="false" info="">
[00:15:19.752]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:15:19.756]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:15:19.756]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:15:19.761]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:15:19.761]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:15:19.761]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:15:19.761]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:15:19.761]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:15:19.761]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:15:19.767]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:15:19.767]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:15:19.768]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:15:19.768]          </block>
[00:15:19.769]          // end if-block "!hasDormant"
[00:15:19.769]        </control>
[00:15:19.769]        // end if-block "isSWJ"
[00:15:19.769]      </control>
[00:15:19.769]      <control if="!isSWJ" while="" timeout="0" info="">
[00:15:19.769]        // if-block "!isSWJ"
[00:15:19.769]          // =>  FALSE
[00:15:19.769]        // skip if-block "!isSWJ"
[00:15:19.769]      </control>
[00:15:19.769]      <block atomic="false" info="">
[00:15:19.769]        ReadDP(0x0);
[00:15:19.773]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:15:19.777]      </block>
[00:15:19.777]      // end if-block "protType == 2"
[00:15:19.777]    </control>
[00:15:19.777]  </sequence>
[00:15:19.777]  
[00:15:19.783]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:15:19.783]  
[00:15:19.783]  <debugvars>
[00:15:19.783]    // Pre-defined
[00:15:19.783]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:15:19.783]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:15:19.783]    __dp=0x00000000
[00:15:19.783]    __ap=0x00000000
[00:15:19.783]    __traceout=0x00000000      (Trace Disabled)
[00:15:19.783]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:15:19.783]    __FlashAddr=0x00000000
[00:15:19.787]    __FlashLen=0x00000000
[00:15:19.787]    __FlashArg=0x00000000
[00:15:19.787]    __FlashOp=0x00000000
[00:15:19.787]    __Result=0x00000000
[00:15:19.787]  </debugvars>
[00:15:19.787]  
[00:15:19.787]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:15:19.788]    <block atomic="false" info="">
[00:15:19.788]      __var SW_DP_ABORT       = 0x0;
[00:15:19.788]        // -> [SW_DP_ABORT <= 0x00000000]
[00:15:19.788]      __var DP_CTRL_STAT      = 0x4;
[00:15:19.788]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:15:19.788]      __var DP_SELECT         = 0x8;
[00:15:19.788]        // -> [DP_SELECT <= 0x00000008]
[00:15:19.788]      __var powered_down      = 0;
[00:15:19.788]        // -> [powered_down <= 0x00000000]
[00:15:19.788]      WriteDP(DP_SELECT, 0x00000000);
[00:15:19.790]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:15:19.790]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:15:19.796]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:15:19.797]        // -> [powered_down <= 0x00000001]
[00:15:19.797]    </block>
[00:15:19.797]    <control if="powered_down" while="" timeout="0" info="">
[00:15:19.797]      // if-block "powered_down"
[00:15:19.797]        // =>  TRUE
[00:15:19.797]      <block atomic="false" info="">
[00:15:19.797]        Message(0, "Debug/System power-up request sent");
[00:15:19.797]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:15:19.801]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:15:19.801]      </block>
[00:15:19.801]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:15:19.801]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:15:19.801]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:15:19.801]        // while-condition  =>  FALSE
[00:15:19.804]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:15:19.804]      </control>
[00:15:19.804]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:15:19.804]        // if-block "(__protocol & 0xFFFF) == 1"
[00:15:19.804]          // =>  FALSE
[00:15:19.804]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:15:19.804]      </control>
[00:15:19.804]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:15:19.804]        // if-block "(__protocol & 0xFFFF) == 2"
[00:15:19.804]          // =>  TRUE
[00:15:19.805]        <block atomic="false" info="">
[00:15:19.805]          Message(0, "executing SWD power up");
[00:15:19.808]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:15:19.808]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:15:19.810]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:15:19.811]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:15:19.811]        </block>
[00:15:19.811]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:15:19.811]      </control>
[00:15:19.811]      // end if-block "powered_down"
[00:15:19.811]    </control>
[00:15:19.811]    <block atomic="false" info="">
[00:15:19.811]      __var DEBUG_PORT_VAL    = 0;
[00:15:19.811]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:15:19.811]      __var ACCESS_POINT_VAL  = 0;
[00:15:19.811]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:15:19.811]      __ap = 1; 
[00:15:19.811]        // -> [__ap <= 0x00000001]
[00:15:19.811]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:15:19.819]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:15:19.819]      __ap = 4;
[00:15:19.819]        // -> [__ap <= 0x00000004]
[00:15:19.820]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:15:19.829]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:15:19.829]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:15:19.829]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:15:19.829]    </block>
[00:15:19.829]    <block atomic="false" info="">
[00:15:19.829]      __var nReset = 0x80;
[00:15:19.829]        // -> [nReset <= 0x00000080]
[00:15:19.829]      __var canReadPins = 0;
[00:15:19.829]        // -> [canReadPins <= 0x00000000]
[00:15:19.829]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:15:19.829]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:15:19.829]        // -> [canReadPins <= 0x00000001]
[00:15:19.829]    </block>
[00:15:19.829]    <control if="" while="1" timeout="200" info="">
[00:15:19.829]      // while "1"  (timeout="200")
[00:15:19.835]      // while-condition  =>  TRUE
[00:15:19.835]      // while "1"  (timeout="200")
[00:15:19.836]      // while  =>  TIMEOUT
[00:15:19.836]      // end while "1"
[00:15:19.836]    </control>
[00:15:19.836]    <control if="canReadPins" while="" timeout="0" info="">
[00:15:19.836]      // if-block "canReadPins"
[00:15:19.836]        // =>  TRUE
[00:15:19.836]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:15:19.836]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:15:19.838]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:15:19.838]        // while-condition  =>  FALSE
[00:15:19.838]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:15:19.839]      </control>
[00:15:19.839]      // end if-block "canReadPins"
[00:15:19.839]    </control>
[00:15:19.839]    <control if="!canReadPins" while="" timeout="0" info="">
[00:15:19.839]      // if-block "!canReadPins"
[00:15:19.839]        // =>  FALSE
[00:15:19.839]      // skip if-block "!canReadPins"
[00:15:19.839]    </control>
[00:15:19.839]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:15:19.839]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:15:19.839]        // =>  TRUE
[00:15:19.839]      <block atomic="false" info="">
[00:15:19.839]        WriteAP(0x00, 0x190008);
[00:15:19.839]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:15:19.839]        WriteAP(0xF0, 0x01);
[00:15:19.843]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:15:19.843]      </block>
[00:15:19.843]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:15:19.843]    </control>
[00:15:19.843]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:15:19.843]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:15:19.843]        // =>  FALSE
[00:15:19.843]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:15:19.843]    </control>
[00:15:19.843]    <block atomic="false" info="">
[00:15:19.843]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:15:19.849]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:15:19.850]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:15:19.850]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:15:19.852]      __ap = 0; //lets make sure we reset the access point selection
[00:15:19.852]        // -> [__ap <= 0x00000000]
[00:15:19.852]    </block>
[00:15:19.852]  </sequence>
[00:15:19.852]  
[00:15:19.907]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:15:19.907]  
[00:15:19.907]  <debugvars>
[00:15:19.907]    // Pre-defined
[00:15:19.907]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:15:19.907]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:15:19.907]    __dp=0x00000000
[00:15:19.907]    __ap=0x00000000
[00:15:19.907]    __traceout=0x00000000      (Trace Disabled)
[00:15:19.907]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:15:19.907]    __FlashAddr=0x00000000
[00:15:19.907]    __FlashLen=0x00000000
[00:15:19.907]    __FlashArg=0x00000000
[00:15:19.907]    __FlashOp=0x00000000
[00:15:19.907]    __Result=0x00000000
[00:15:19.907]  </debugvars>
[00:15:19.907]  
[00:15:19.908]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:15:19.908]    <block atomic="false" info="">
[00:15:19.908]      __var deviceID = 0;
[00:15:19.908]        // -> [deviceID <= 0x00000000]
[00:15:19.908]      __var version = 0;
[00:15:19.908]        // -> [version <= 0x00000000]
[00:15:19.908]      __var partNum = 0;
[00:15:19.908]        // -> [partNum <= 0x00000000]
[00:15:19.908]      __var manuf = 0;
[00:15:19.910]        // -> [manuf <= 0x00000000]
[00:15:19.910]      __var isMSPM0G1X0X_G3X0X = 0;
[00:15:19.910]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:15:19.910]      __var isProduction = 0;
[00:15:19.910]        // -> [isProduction <= 0x00000000]
[00:15:19.910]      __var continueId = 0;
[00:15:19.910]        // -> [continueId <= 0x00000000]
[00:15:19.910]      deviceID =   Read32(0x41C40004);
[00:15:19.919]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:15:19.919]        // -> [deviceID <= 0x2BB8802F]
[00:15:19.919]      version = deviceID >> 28;
[00:15:19.919]        // -> [version <= 0x00000002]
[00:15:19.919]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:15:19.919]        // -> [partNum <= 0x0000BB88]
[00:15:19.919]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:15:19.919]        // -> [manuf <= 0x00000017]
[00:15:19.919]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:15:19.919]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:15:19.919]      isProduction = (version > 0);
[00:15:19.919]        // -> [isProduction <= 0x00000001]
[00:15:19.919]    </block>
[00:15:19.919]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:15:19.919]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:15:19.919]        // =>  FALSE
[00:15:19.919]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:15:19.919]    </control>
[00:15:19.919]    <control if="continueId == 4" while="" timeout="0" info="">
[00:15:19.919]      // if-block "continueId == 4"
[00:15:19.919]        // =>  FALSE
[00:15:19.919]      // skip if-block "continueId == 4"
[00:15:19.919]    </control>
[00:15:19.919]    <control if="!isProduction" while="" timeout="0" info="">
[00:15:19.919]      // if-block "!isProduction"
[00:15:19.919]        // =>  FALSE
[00:15:19.919]      // skip if-block "!isProduction"
[00:15:19.919]    </control>
[00:15:19.919]  </sequence>
[00:15:19.919]  
[00:15:51.344]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:15:51.344]  
[00:15:51.344]  <debugvars>
[00:15:51.344]    // Pre-defined
[00:15:51.344]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:15:51.344]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:15:51.344]    __dp=0x00000000
[00:15:51.344]    __ap=0x00000000
[00:15:51.344]    __traceout=0x00000000      (Trace Disabled)
[00:15:51.344]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:15:51.344]    __FlashAddr=0x00000000
[00:15:51.344]    __FlashLen=0x00000000
[00:15:51.344]    __FlashArg=0x00000000
[00:15:51.344]    __FlashOp=0x00000000
[00:15:51.344]    __Result=0x00000000
[00:15:51.344]  </debugvars>
[00:15:51.344]  
[00:15:51.344]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:15:51.346]    <block atomic="false" info="">
[00:15:51.346]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:15:51.346]        // -> [isSWJ <= 0x00000001]
[00:15:51.346]      __var hasDormant = __protocol & 0x00020000;
[00:15:51.346]        // -> [hasDormant <= 0x00000000]
[00:15:51.346]      __var protType   = __protocol & 0x0000FFFF;
[00:15:51.346]        // -> [protType <= 0x00000002]
[00:15:51.346]    </block>
[00:15:51.346]    <control if="protType == 1" while="" timeout="0" info="">
[00:15:51.346]      // if-block "protType == 1"
[00:15:51.346]        // =>  FALSE
[00:15:51.346]      // skip if-block "protType == 1"
[00:15:51.346]    </control>
[00:15:51.346]    <control if="protType == 2" while="" timeout="0" info="">
[00:15:51.346]      // if-block "protType == 2"
[00:15:51.348]        // =>  TRUE
[00:15:51.348]      <control if="isSWJ" while="" timeout="0" info="">
[00:15:51.348]        // if-block "isSWJ"
[00:15:51.348]          // =>  TRUE
[00:15:51.348]        <control if="hasDormant" while="" timeout="0" info="">
[00:15:51.348]          // if-block "hasDormant"
[00:15:51.348]            // =>  FALSE
[00:15:51.348]          // skip if-block "hasDormant"
[00:15:51.348]        </control>
[00:15:51.348]        <control if="!hasDormant" while="" timeout="0" info="">
[00:15:51.348]          // if-block "!hasDormant"
[00:15:51.348]            // =>  TRUE
[00:15:51.349]          <block atomic="false" info="">
[00:15:51.349]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:15:51.350]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:15:51.350]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:15:51.350]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:15:51.350]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:15:51.350]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:15:51.350]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:15:51.350]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:15:51.350]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:15:51.361]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:15:51.361]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:15:51.364]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:15:51.364]          </block>
[00:15:51.364]          // end if-block "!hasDormant"
[00:15:51.364]        </control>
[00:15:51.364]        // end if-block "isSWJ"
[00:15:51.364]      </control>
[00:15:51.364]      <control if="!isSWJ" while="" timeout="0" info="">
[00:15:51.364]        // if-block "!isSWJ"
[00:15:51.364]          // =>  FALSE
[00:15:51.364]        // skip if-block "!isSWJ"
[00:15:51.364]      </control>
[00:15:51.364]      <block atomic="false" info="">
[00:15:51.364]        ReadDP(0x0);
[00:15:51.367]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:15:51.367]      </block>
[00:15:51.367]      // end if-block "protType == 2"
[00:15:51.367]    </control>
[00:15:51.367]  </sequence>
[00:15:51.367]  
[00:15:51.369]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:15:51.369]  
[00:15:51.370]  <debugvars>
[00:15:51.370]    // Pre-defined
[00:15:51.370]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:15:51.370]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:15:51.370]    __dp=0x00000000
[00:15:51.370]    __ap=0x00000000
[00:15:51.371]    __traceout=0x00000000      (Trace Disabled)
[00:15:51.371]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:15:51.371]    __FlashAddr=0x00000000
[00:15:51.371]    __FlashLen=0x00000000
[00:15:51.371]    __FlashArg=0x00000000
[00:15:51.371]    __FlashOp=0x00000000
[00:15:51.371]    __Result=0x00000000
[00:15:51.371]  </debugvars>
[00:15:51.371]  
[00:15:51.371]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:15:51.371]    <block atomic="false" info="">
[00:15:51.371]      __var SW_DP_ABORT       = 0x0;
[00:15:51.371]        // -> [SW_DP_ABORT <= 0x00000000]
[00:15:51.371]      __var DP_CTRL_STAT      = 0x4;
[00:15:51.371]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:15:51.372]      __var DP_SELECT         = 0x8;
[00:15:51.372]        // -> [DP_SELECT <= 0x00000008]
[00:15:51.372]      __var powered_down      = 0;
[00:15:51.372]        // -> [powered_down <= 0x00000000]
[00:15:51.372]      WriteDP(DP_SELECT, 0x00000000);
[00:15:51.373]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:15:51.373]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:15:51.373]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:15:51.373]        // -> [powered_down <= 0x00000001]
[00:15:51.373]    </block>
[00:15:51.373]    <control if="powered_down" while="" timeout="0" info="">
[00:15:51.373]      // if-block "powered_down"
[00:15:51.373]        // =>  TRUE
[00:15:51.377]      <block atomic="false" info="">
[00:15:51.377]        Message(0, "Debug/System power-up request sent");
[00:15:51.377]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:15:51.378]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:15:51.378]      </block>
[00:15:51.378]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:15:51.378]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:15:51.380]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:15:51.380]        // while-condition  =>  FALSE
[00:15:51.380]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:15:51.380]      </control>
[00:15:51.380]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:15:51.380]        // if-block "(__protocol & 0xFFFF) == 1"
[00:15:51.380]          // =>  FALSE
[00:15:51.380]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:15:51.380]      </control>
[00:15:51.380]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:15:51.384]        // if-block "(__protocol & 0xFFFF) == 2"
[00:15:51.384]          // =>  TRUE
[00:15:51.384]        <block atomic="false" info="">
[00:15:51.384]          Message(0, "executing SWD power up");
[00:15:51.388]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:15:51.390]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:15:51.390]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:15:51.393]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:15:51.393]        </block>
[00:15:51.393]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:15:51.393]      </control>
[00:15:51.393]      // end if-block "powered_down"
[00:15:51.393]    </control>
[00:15:51.393]    <block atomic="false" info="">
[00:15:51.393]      __var DEBUG_PORT_VAL    = 0;
[00:15:51.393]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:15:51.394]      __var ACCESS_POINT_VAL  = 0;
[00:15:51.394]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:15:51.394]      __ap = 1; 
[00:15:51.394]        // -> [__ap <= 0x00000001]
[00:15:51.394]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:15:51.394]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:15:51.397]      __ap = 4;
[00:15:51.398]        // -> [__ap <= 0x00000004]
[00:15:51.398]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:15:51.400]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:15:51.400]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:15:51.400]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:15:51.400]    </block>
[00:15:51.400]    <block atomic="false" info="">
[00:15:51.400]      __var nReset = 0x80;
[00:15:51.400]        // -> [nReset <= 0x00000080]
[00:15:51.400]      __var canReadPins = 0;
[00:15:51.400]        // -> [canReadPins <= 0x00000000]
[00:15:51.400]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:15:51.408]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:15:51.408]        // -> [canReadPins <= 0x00000001]
[00:15:51.408]    </block>
[00:15:51.408]    <control if="" while="1" timeout="200" info="">
[00:15:51.408]      // while "1"  (timeout="200")
[00:15:51.409]      // while-condition  =>  TRUE
[00:15:51.409]      // while "1"  (timeout="200")
[00:15:51.409]      // while-condition  =>  TRUE
[00:15:51.409]      // while "1"  (timeout="200")
[00:15:51.409]      // while-condition  =>  TRUE
[00:15:51.409]      // while "1"  (timeout="200")
[00:15:51.409]      // while-condition  =>  TRUE
[00:15:51.409]      // while "1"  (timeout="200")
[00:15:51.409]      // while-condition  =>  TRUE
[00:15:51.409]      // while "1"  (timeout="200")
[00:15:51.409]      // while-condition  =>  TRUE
[00:15:51.409]      // while "1"  (timeout="200")
[00:15:51.409]      // while-condition  =>  TRUE
[00:15:51.409]      // while "1"  (timeout="200")
[00:15:51.409]      // while-condition  =>  TRUE
[00:15:51.409]      // while "1"  (timeout="200")
[00:15:51.409]      // while-condition  =>  TRUE
[00:15:51.411]      // while "1"  (timeout="200")
[00:15:51.411]      // while-condition  =>  TRUE
[00:15:51.411]      // while "1"  (timeout="200")
[00:15:51.411]      // while-condition  =>  TRUE
[00:15:51.411]      // while "1"  (timeout="200")
[00:15:51.411]      // while-condition  =>  TRUE
[00:15:51.411]      // while "1"  (timeout="200")
[00:15:51.411]      // while-condition  =>  TRUE
[00:15:51.411]      // while "1"  (timeout="200")
[00:15:51.411]      // while-condition  =>  TRUE
[00:15:51.411]      // while "1"  (timeout="200")
[00:15:51.411]      // while-condition  =>  TRUE
[00:15:51.411]      // while "1"  (timeout="200")
[00:15:51.411]      // while-condition  =>  TRUE
[00:15:51.412]      // while "1"  (timeout="200")
[00:15:51.412]      // while-condition  =>  TRUE
[00:15:51.412]      // while "1"  (timeout="200")
[00:15:51.412]      // while-condition  =>  TRUE
[00:15:51.412]      // while "1"  (timeout="200")
[00:15:51.412]      // while-condition  =>  TRUE
[00:15:51.412]      // while "1"  (timeout="200")
[00:15:51.412]      // while-condition  =>  TRUE
[00:15:51.412]      // while "1"  (timeout="200")
[00:15:51.414]      // while-condition  =>  TRUE
[00:15:51.414]      // while "1"  (timeout="200")
[00:15:51.414]      // while-condition  =>  TRUE
[00:15:51.414]      // while "1"  (timeout="200")
[00:15:51.414]      // while-condition  =>  TRUE
[00:15:51.414]      // while "1"  (timeout="200")
[00:15:51.414]      // while-condition  =>  TRUE
[00:15:51.414]      // while "1"  (timeout="200")
[00:15:51.414]      // while-condition  =>  TRUE
[00:15:51.414]      // while "1"  (timeout="200")
[00:15:51.414]      // while-condition  =>  TRUE
[00:15:51.414]      // while "1"  (timeout="200")
[00:15:51.414]      // while-condition  =>  TRUE
[00:15:51.414]      // while "1"  (timeout="200")
[00:15:51.414]      // while-condition  =>  TRUE
[00:15:51.414]      // while "1"  (timeout="200")
[00:15:51.414]      // while-condition  =>  TRUE
[00:15:51.414]      // while "1"  (timeout="200")
[00:15:51.414]      // while-condition  =>  TRUE
[00:15:51.415]      // while "1"  (timeout="200")
[00:15:51.415]      // while-condition  =>  TRUE
[00:15:51.415]      // while "1"  (timeout="200")
[00:15:51.415]      // while-condition  =>  TRUE
[00:15:51.415]      // while "1"  (timeout="200")
[00:15:51.415]      // while-condition  =>  TRUE
[00:15:51.415]      // while "1"  (timeout="200")
[00:15:51.415]      // while-condition  =>  TRUE
[00:15:51.415]      // while "1"  (timeout="200")
[00:15:51.415]      // while-condition  =>  TRUE
[00:15:51.415]      // while "1"  (timeout="200")
[00:15:51.415]      // while-condition  =>  TRUE
[00:15:51.416]      // while "1"  (timeout="200")
[00:15:51.416]      // while-condition  =>  TRUE
[00:15:51.416]      // while "1"  (timeout="200")
[00:15:51.416]      // while-condition  =>  TRUE
[00:15:51.416]      // while "1"  (timeout="200")
[00:15:51.416]      // while-condition  =>  TRUE
[00:15:51.416]      // while "1"  (timeout="200")
[00:15:51.416]      // while-condition  =>  TRUE
[00:15:51.416]      // while "1"  (timeout="200")
[00:15:51.416]      // while-condition  =>  TRUE
[00:15:51.416]      // while "1"  (timeout="200")
[00:15:51.416]      // while-condition  =>  TRUE
[00:15:51.416]      // while "1"  (timeout="200")
[00:15:51.416]      // while-condition  =>  TRUE
[00:15:51.416]      // while "1"  (timeout="200")
[00:15:51.416]      // while-condition  =>  TRUE
[00:15:51.418]      // while "1"  (timeout="200")
[00:15:51.418]      // while-condition  =>  TRUE
[00:15:51.418]      // while "1"  (timeout="200")
[00:15:51.418]      // while-condition  =>  TRUE
[00:15:51.418]      // while "1"  (timeout="200")
[00:15:51.418]      // while-condition  =>  TRUE
[00:15:51.418]      // while "1"  (timeout="200")
[00:15:51.418]      // while-condition  =>  TRUE
[00:15:51.418]      // while "1"  (timeout="200")
[00:15:51.418]      // while-condition  =>  TRUE
[00:15:51.418]      // while "1"  (timeout="200")
[00:15:51.419]      // while-condition  =>  TRUE
[00:15:51.419]      // while "1"  (timeout="200")
[00:15:51.419]      // while-condition  =>  TRUE
[00:15:51.419]      // while "1"  (timeout="200")
[00:15:51.419]      // while-condition  =>  TRUE
[00:15:51.419]      // while "1"  (timeout="200")
[00:15:51.419]      // while-condition  =>  TRUE
[00:15:51.419]      // while "1"  (timeout="200")
[00:15:51.419]      // while-condition  =>  TRUE
[00:15:51.419]      // while "1"  (timeout="200")
[00:15:51.420]      // while-condition  =>  TRUE
[00:15:51.420]      // while "1"  (timeout="200")
[00:15:51.420]      // while-condition  =>  TRUE
[00:15:51.420]      // while "1"  (timeout="200")
[00:15:51.420]      // while-condition  =>  TRUE
[00:15:51.420]      // while "1"  (timeout="200")
[00:15:51.420]      // while-condition  =>  TRUE
[00:15:51.420]      // while "1"  (timeout="200")
[00:15:51.420]      // while-condition  =>  TRUE
[00:15:51.420]      // while "1"  (timeout="200")
[00:15:51.420]      // while-condition  =>  TRUE
[00:15:51.420]      // while "1"  (timeout="200")
[00:15:51.420]      // while-condition  =>  TRUE
[00:15:51.420]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.421]      // while-condition  =>  TRUE
[00:15:51.421]      // while "1"  (timeout="200")
[00:15:51.426]      // while-condition  =>  TRUE
[00:15:51.426]      // while "1"  (timeout="200")
[00:15:51.426]      // while  =>  TIMEOUT
[00:15:51.426]      // end while "1"
[00:15:51.426]    </control>
[00:15:51.426]    <control if="canReadPins" while="" timeout="0" info="">
[00:15:51.426]      // if-block "canReadPins"
[00:15:51.426]        // =>  TRUE
[00:15:51.426]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:15:51.426]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:15:51.428]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:15:51.428]        // while-condition  =>  FALSE
[00:15:51.428]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:15:51.428]      </control>
[00:15:51.428]      // end if-block "canReadPins"
[00:15:51.428]    </control>
[00:15:51.428]    <control if="!canReadPins" while="" timeout="0" info="">
[00:15:51.428]      // if-block "!canReadPins"
[00:15:51.428]        // =>  FALSE
[00:15:51.428]      // skip if-block "!canReadPins"
[00:15:51.428]    </control>
[00:15:51.428]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:15:51.428]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:15:51.428]        // =>  TRUE
[00:15:51.428]      <block atomic="false" info="">
[00:15:51.428]        WriteAP(0x00, 0x190008);
[00:15:51.434]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:15:51.434]        WriteAP(0xF0, 0x01);
[00:15:51.440]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:15:51.440]      </block>
[00:15:51.440]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:15:51.440]    </control>
[00:15:51.441]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:15:51.441]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:15:51.441]        // =>  FALSE
[00:15:51.441]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:15:51.441]    </control>
[00:15:51.441]    <block atomic="false" info="">
[00:15:51.441]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:15:51.441]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:15:51.445]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:15:51.445]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:15:51.445]      __ap = 0; //lets make sure we reset the access point selection
[00:15:51.445]        // -> [__ap <= 0x00000000]
[00:15:51.445]    </block>
[00:15:51.445]  </sequence>
[00:15:51.447]  
[00:15:51.469]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:15:51.469]  
[00:15:51.469]  <debugvars>
[00:15:51.469]    // Pre-defined
[00:15:51.469]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:15:51.469]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:15:51.469]    __dp=0x00000000
[00:15:51.469]    __ap=0x00000000
[00:15:51.469]    __traceout=0x00000000      (Trace Disabled)
[00:15:51.469]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:15:51.469]    __FlashAddr=0x00000000
[00:15:51.469]    __FlashLen=0x00000000
[00:15:51.469]    __FlashArg=0x00000000
[00:15:51.469]    __FlashOp=0x00000000
[00:15:51.469]    __Result=0x00000000
[00:15:51.469]  </debugvars>
[00:15:51.469]  
[00:15:51.471]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:15:51.471]    <block atomic="false" info="">
[00:15:51.471]      __var deviceID = 0;
[00:15:51.471]        // -> [deviceID <= 0x00000000]
[00:15:51.471]      __var version = 0;
[00:15:51.471]        // -> [version <= 0x00000000]
[00:15:51.471]      __var partNum = 0;
[00:15:51.471]        // -> [partNum <= 0x00000000]
[00:15:51.471]      __var manuf = 0;
[00:15:51.471]        // -> [manuf <= 0x00000000]
[00:15:51.471]      __var isMSPM0G1X0X_G3X0X = 0;
[00:15:51.471]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:15:51.471]      __var isProduction = 0;
[00:15:51.473]        // -> [isProduction <= 0x00000000]
[00:15:51.473]      __var continueId = 0;
[00:15:51.473]        // -> [continueId <= 0x00000000]
[00:15:51.473]      deviceID =   Read32(0x41C40004);
[00:15:51.480]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:15:51.480]        // -> [deviceID <= 0x2BB8802F]
[00:15:51.480]      version = deviceID >> 28;
[00:15:51.480]        // -> [version <= 0x00000002]
[00:15:51.480]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:15:51.482]        // -> [partNum <= 0x0000BB88]
[00:15:51.482]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:15:51.482]        // -> [manuf <= 0x00000017]
[00:15:51.482]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:15:51.482]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:15:51.482]      isProduction = (version > 0);
[00:15:51.482]        // -> [isProduction <= 0x00000001]
[00:15:51.482]    </block>
[00:15:51.482]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:15:51.482]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:15:51.482]        // =>  FALSE
[00:15:51.482]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:15:51.482]    </control>
[00:15:51.482]    <control if="continueId == 4" while="" timeout="0" info="">
[00:15:51.482]      // if-block "continueId == 4"
[00:15:51.482]        // =>  FALSE
[00:15:51.482]      // skip if-block "continueId == 4"
[00:15:51.482]    </control>
[00:15:51.482]    <control if="!isProduction" while="" timeout="0" info="">
[00:15:51.482]      // if-block "!isProduction"
[00:15:51.482]        // =>  FALSE
[00:15:51.482]      // skip if-block "!isProduction"
[00:15:51.482]    </control>
[00:15:51.482]  </sequence>
[00:15:51.482]  
[00:17:28.742]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:17:28.742]  
[00:17:28.742]  <debugvars>
[00:17:28.742]    // Pre-defined
[00:17:28.742]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:17:28.742]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:17:28.748]    __dp=0x00000000
[00:17:28.748]    __ap=0x00000000
[00:17:28.748]    __traceout=0x00000000      (Trace Disabled)
[00:17:28.748]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:17:28.748]    __FlashAddr=0x00000000
[00:17:28.748]    __FlashLen=0x00000000
[00:17:28.748]    __FlashArg=0x00000000
[00:17:28.749]    __FlashOp=0x00000000
[00:17:28.749]    __Result=0x00000000
[00:17:28.749]  </debugvars>
[00:17:28.749]  
[00:17:28.749]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:17:28.749]    <block atomic="false" info="">
[00:17:28.749]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:17:28.750]        // -> [isSWJ <= 0x00000001]
[00:17:28.750]      __var hasDormant = __protocol & 0x00020000;
[00:17:28.750]        // -> [hasDormant <= 0x00000000]
[00:17:28.750]      __var protType   = __protocol & 0x0000FFFF;
[00:17:28.750]        // -> [protType <= 0x00000002]
[00:17:28.750]    </block>
[00:17:28.750]    <control if="protType == 1" while="" timeout="0" info="">
[00:17:28.750]      // if-block "protType == 1"
[00:17:28.750]        // =>  FALSE
[00:17:28.750]      // skip if-block "protType == 1"
[00:17:28.750]    </control>
[00:17:28.750]    <control if="protType == 2" while="" timeout="0" info="">
[00:17:28.750]      // if-block "protType == 2"
[00:17:28.750]        // =>  TRUE
[00:17:28.750]      <control if="isSWJ" while="" timeout="0" info="">
[00:17:28.750]        // if-block "isSWJ"
[00:17:28.750]          // =>  TRUE
[00:17:28.750]        <control if="hasDormant" while="" timeout="0" info="">
[00:17:28.750]          // if-block "hasDormant"
[00:17:28.750]            // =>  FALSE
[00:17:28.750]          // skip if-block "hasDormant"
[00:17:28.750]        </control>
[00:17:28.750]        <control if="!hasDormant" while="" timeout="0" info="">
[00:17:28.750]          // if-block "!hasDormant"
[00:17:28.750]            // =>  TRUE
[00:17:28.750]          <block atomic="false" info="">
[00:17:28.750]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:17:28.750]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:17:28.750]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:17:28.755]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:17:28.755]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:17:28.758]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:17:28.759]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:17:28.759]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:17:28.759]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:17:28.763]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:17:28.763]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:17:28.763]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:17:28.763]          </block>
[00:17:28.763]          // end if-block "!hasDormant"
[00:17:28.763]        </control>
[00:17:28.763]        // end if-block "isSWJ"
[00:17:28.763]      </control>
[00:17:28.763]      <control if="!isSWJ" while="" timeout="0" info="">
[00:17:28.763]        // if-block "!isSWJ"
[00:17:28.766]          // =>  FALSE
[00:17:28.766]        // skip if-block "!isSWJ"
[00:17:28.766]      </control>
[00:17:28.766]      <block atomic="false" info="">
[00:17:28.766]        ReadDP(0x0);
[00:17:28.771]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:17:28.771]      </block>
[00:17:28.773]      // end if-block "protType == 2"
[00:17:28.773]    </control>
[00:17:28.773]  </sequence>
[00:17:28.773]  
[00:17:28.779]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:17:28.779]  
[00:17:28.779]  <debugvars>
[00:17:28.781]    // Pre-defined
[00:17:28.781]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:17:28.781]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:17:28.781]    __dp=0x00000000
[00:17:28.781]    __ap=0x00000000
[00:17:28.781]    __traceout=0x00000000      (Trace Disabled)
[00:17:28.781]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:17:28.781]    __FlashAddr=0x00000000
[00:17:28.781]    __FlashLen=0x00000000
[00:17:28.782]    __FlashArg=0x00000000
[00:17:28.782]    __FlashOp=0x00000000
[00:17:28.782]    __Result=0x00000000
[00:17:28.782]  </debugvars>
[00:17:28.782]  
[00:17:28.782]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:17:28.782]    <block atomic="false" info="">
[00:17:28.782]      __var SW_DP_ABORT       = 0x0;
[00:17:28.782]        // -> [SW_DP_ABORT <= 0x00000000]
[00:17:28.782]      __var DP_CTRL_STAT      = 0x4;
[00:17:28.782]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:17:28.782]      __var DP_SELECT         = 0x8;
[00:17:28.782]        // -> [DP_SELECT <= 0x00000008]
[00:17:28.782]      __var powered_down      = 0;
[00:17:28.782]        // -> [powered_down <= 0x00000000]
[00:17:28.782]      WriteDP(DP_SELECT, 0x00000000);
[00:17:28.782]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:17:28.782]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:17:28.786]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:17:28.787]        // -> [powered_down <= 0x00000001]
[00:17:28.787]    </block>
[00:17:28.787]    <control if="powered_down" while="" timeout="0" info="">
[00:17:28.787]      // if-block "powered_down"
[00:17:28.787]        // =>  TRUE
[00:17:28.787]      <block atomic="false" info="">
[00:17:28.787]        Message(0, "Debug/System power-up request sent");
[00:17:28.788]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:17:28.789]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:17:28.789]      </block>
[00:17:28.789]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:17:28.789]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:17:28.794]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:17:28.794]        // while-condition  =>  FALSE
[00:17:28.794]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:17:28.794]      </control>
[00:17:28.794]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:17:28.794]        // if-block "(__protocol & 0xFFFF) == 1"
[00:17:28.794]          // =>  FALSE
[00:17:28.794]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:17:28.796]      </control>
[00:17:28.796]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:17:28.796]        // if-block "(__protocol & 0xFFFF) == 2"
[00:17:28.796]          // =>  TRUE
[00:17:28.796]        <block atomic="false" info="">
[00:17:28.796]          Message(0, "executing SWD power up");
[00:17:28.800]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:17:28.800]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:17:28.802]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:17:28.804]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:17:28.804]        </block>
[00:17:28.804]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:17:28.804]      </control>
[00:17:28.804]      // end if-block "powered_down"
[00:17:28.804]    </control>
[00:17:28.804]    <block atomic="false" info="">
[00:17:28.804]      __var DEBUG_PORT_VAL    = 0;
[00:17:28.804]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:17:28.805]      __var ACCESS_POINT_VAL  = 0;
[00:17:28.805]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:17:28.805]      __ap = 1; 
[00:17:28.805]        // -> [__ap <= 0x00000001]
[00:17:28.805]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:17:28.810]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:17:28.810]      __ap = 4;
[00:17:28.810]        // -> [__ap <= 0x00000004]
[00:17:28.810]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:17:28.810]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:17:28.810]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:17:28.810]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:17:28.818]    </block>
[00:17:28.818]    <block atomic="false" info="">
[00:17:28.818]      __var nReset = 0x80;
[00:17:28.818]        // -> [nReset <= 0x00000080]
[00:17:28.818]      __var canReadPins = 0;
[00:17:28.818]        // -> [canReadPins <= 0x00000000]
[00:17:28.818]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:17:28.822]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:17:28.822]        // -> [canReadPins <= 0x00000001]
[00:17:28.822]    </block>
[00:17:28.822]    <control if="" while="1" timeout="200" info="">
[00:17:28.822]      // while "1"  (timeout="200")
[00:17:28.824]      // while-condition  =>  TRUE
[00:17:28.824]      // while "1"  (timeout="200")
[00:17:28.824]      // while-condition  =>  TRUE
[00:17:28.824]      // while "1"  (timeout="200")
[00:17:28.824]      // while-condition  =>  TRUE
[00:17:28.824]      // while "1"  (timeout="200")
[00:17:28.824]      // while-condition  =>  TRUE
[00:17:28.824]      // while "1"  (timeout="200")
[00:17:28.824]      // while-condition  =>  TRUE
[00:17:28.824]      // while "1"  (timeout="200")
[00:17:28.824]      // while-condition  =>  TRUE
[00:17:28.824]      // while "1"  (timeout="200")
[00:17:28.824]      // while-condition  =>  TRUE
[00:17:28.824]      // while "1"  (timeout="200")
[00:17:28.824]      // while-condition  =>  TRUE
[00:17:28.824]      // while "1"  (timeout="200")
[00:17:28.824]      // while-condition  =>  TRUE
[00:17:28.824]      // while "1"  (timeout="200")
[00:17:28.824]      // while-condition  =>  TRUE
[00:17:28.824]      // while "1"  (timeout="200")
[00:17:28.824]      // while-condition  =>  TRUE
[00:17:28.824]      // while "1"  (timeout="200")
[00:17:28.824]      // while-condition  =>  TRUE
[00:17:28.824]      // while "1"  (timeout="200")
[00:17:28.824]      // while-condition  =>  TRUE
[00:17:28.824]      // while "1"  (timeout="200")
[00:17:28.828]      // while-condition  =>  TRUE
[00:17:28.828]      // while "1"  (timeout="200")
[00:17:28.828]      // while-condition  =>  TRUE
[00:17:28.828]      // while "1"  (timeout="200")
[00:17:28.828]      // while-condition  =>  TRUE
[00:17:28.828]      // while "1"  (timeout="200")
[00:17:28.828]      // while-condition  =>  TRUE
[00:17:28.828]      // while "1"  (timeout="200")
[00:17:28.828]      // while-condition  =>  TRUE
[00:17:28.829]      // while "1"  (timeout="200")
[00:17:28.829]      // while-condition  =>  TRUE
[00:17:28.829]      // while "1"  (timeout="200")
[00:17:28.829]      // while-condition  =>  TRUE
[00:17:28.829]      // while "1"  (timeout="200")
[00:17:28.829]      // while-condition  =>  TRUE
[00:17:28.829]      // while "1"  (timeout="200")
[00:17:28.829]      // while-condition  =>  TRUE
[00:17:28.829]      // while "1"  (timeout="200")
[00:17:28.829]      // while-condition  =>  TRUE
[00:17:28.829]      // while "1"  (timeout="200")
[00:17:28.829]      // while-condition  =>  TRUE
[00:17:28.829]      // while "1"  (timeout="200")
[00:17:28.829]      // while-condition  =>  TRUE
[00:17:28.829]      // while "1"  (timeout="200")
[00:17:28.830]      // while-condition  =>  TRUE
[00:17:28.830]      // while "1"  (timeout="200")
[00:17:28.830]      // while  =>  TIMEOUT
[00:17:28.830]      // end while "1"
[00:17:28.830]    </control>
[00:17:28.830]    <control if="canReadPins" while="" timeout="0" info="">
[00:17:28.830]      // if-block "canReadPins"
[00:17:28.831]        // =>  TRUE
[00:17:28.831]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:17:28.831]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:17:28.836]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:17:28.836]        // while-condition  =>  FALSE
[00:17:28.836]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:17:28.836]      </control>
[00:17:28.836]      // end if-block "canReadPins"
[00:17:28.836]    </control>
[00:17:28.837]    <control if="!canReadPins" while="" timeout="0" info="">
[00:17:28.837]      // if-block "!canReadPins"
[00:17:28.837]        // =>  FALSE
[00:17:28.838]      // skip if-block "!canReadPins"
[00:17:28.838]    </control>
[00:17:28.838]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:17:28.838]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:17:28.838]        // =>  TRUE
[00:17:28.838]      <block atomic="false" info="">
[00:17:28.838]        WriteAP(0x00, 0x190008);
[00:17:28.838]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:17:28.838]        WriteAP(0xF0, 0x01);
[00:17:28.845]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:17:28.845]      </block>
[00:17:28.845]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:17:28.845]    </control>
[00:17:28.845]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:17:28.845]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:17:28.845]        // =>  FALSE
[00:17:28.845]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:17:28.845]    </control>
[00:17:28.845]    <block atomic="false" info="">
[00:17:28.845]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:17:28.849]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:17:28.849]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:17:28.849]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:17:28.849]      __ap = 0; //lets make sure we reset the access point selection
[00:17:28.849]        // -> [__ap <= 0x00000000]
[00:17:28.849]    </block>
[00:17:28.849]  </sequence>
[00:17:28.849]  
[00:17:28.881]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:17:28.881]  
[00:17:28.886]  <debugvars>
[00:17:28.887]    // Pre-defined
[00:17:28.887]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:17:28.887]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:17:28.887]    __dp=0x00000000
[00:17:28.887]    __ap=0x00000000
[00:17:28.887]    __traceout=0x00000000      (Trace Disabled)
[00:17:28.887]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:17:28.887]    __FlashAddr=0x00000000
[00:17:28.887]    __FlashLen=0x00000000
[00:17:28.888]    __FlashArg=0x00000000
[00:17:28.888]    __FlashOp=0x00000000
[00:17:28.888]    __Result=0x00000000
[00:17:28.888]  </debugvars>
[00:17:28.888]  
[00:17:28.888]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:17:28.888]    <block atomic="false" info="">
[00:17:28.888]      __var deviceID = 0;
[00:17:28.888]        // -> [deviceID <= 0x00000000]
[00:17:28.888]      __var version = 0;
[00:17:28.889]        // -> [version <= 0x00000000]
[00:17:28.889]      __var partNum = 0;
[00:17:28.889]        // -> [partNum <= 0x00000000]
[00:17:28.889]      __var manuf = 0;
[00:17:28.889]        // -> [manuf <= 0x00000000]
[00:17:28.889]      __var isMSPM0G1X0X_G3X0X = 0;
[00:17:28.889]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:17:28.889]      __var isProduction = 0;
[00:17:28.889]        // -> [isProduction <= 0x00000000]
[00:17:28.889]      __var continueId = 0;
[00:17:28.889]        // -> [continueId <= 0x00000000]
[00:17:28.889]      deviceID =   Read32(0x41C40004);
[00:17:28.894]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:17:28.895]        // -> [deviceID <= 0x2BB8802F]
[00:17:28.895]      version = deviceID >> 28;
[00:17:28.895]        // -> [version <= 0x00000002]
[00:17:28.895]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:17:28.895]        // -> [partNum <= 0x0000BB88]
[00:17:28.895]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:17:28.895]        // -> [manuf <= 0x00000017]
[00:17:28.895]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:17:28.895]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:17:28.895]      isProduction = (version > 0);
[00:17:28.895]        // -> [isProduction <= 0x00000001]
[00:17:28.895]    </block>
[00:17:28.895]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:17:28.895]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:17:28.895]        // =>  FALSE
[00:17:28.895]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:17:28.895]    </control>
[00:17:28.895]    <control if="continueId == 4" while="" timeout="0" info="">
[00:17:28.895]      // if-block "continueId == 4"
[00:17:28.895]        // =>  FALSE
[00:17:28.895]      // skip if-block "continueId == 4"
[00:17:28.895]    </control>
[00:17:28.895]    <control if="!isProduction" while="" timeout="0" info="">
[00:17:28.895]      // if-block "!isProduction"
[00:17:28.895]        // =>  FALSE
[00:17:28.895]      // skip if-block "!isProduction"
[00:17:28.895]    </control>
[00:17:28.895]  </sequence>
[00:17:28.895]  
[00:17:58.525]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:17:58.525]  
[00:17:58.525]  <debugvars>
[00:17:58.526]    // Pre-defined
[00:17:58.526]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:17:58.526]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:17:58.526]    __dp=0x00000000
[00:17:58.526]    __ap=0x00000000
[00:17:58.526]    __traceout=0x00000000      (Trace Disabled)
[00:17:58.526]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:17:58.526]    __FlashAddr=0x00000000
[00:17:58.526]    __FlashLen=0x00000000
[00:17:58.526]    __FlashArg=0x00000000
[00:17:58.526]    __FlashOp=0x00000000
[00:17:58.526]    __Result=0x00000000
[00:17:58.527]  </debugvars>
[00:17:58.527]  
[00:17:58.527]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:17:58.527]    <block atomic="false" info="">
[00:17:58.527]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:17:58.527]        // -> [isSWJ <= 0x00000001]
[00:17:58.527]      __var hasDormant = __protocol & 0x00020000;
[00:17:58.527]        // -> [hasDormant <= 0x00000000]
[00:17:58.527]      __var protType   = __protocol & 0x0000FFFF;
[00:17:58.527]        // -> [protType <= 0x00000002]
[00:17:58.527]    </block>
[00:17:58.527]    <control if="protType == 1" while="" timeout="0" info="">
[00:17:58.527]      // if-block "protType == 1"
[00:17:58.527]        // =>  FALSE
[00:17:58.527]      // skip if-block "protType == 1"
[00:17:58.527]    </control>
[00:17:58.527]    <control if="protType == 2" while="" timeout="0" info="">
[00:17:58.527]      // if-block "protType == 2"
[00:17:58.527]        // =>  TRUE
[00:17:58.527]      <control if="isSWJ" while="" timeout="0" info="">
[00:17:58.527]        // if-block "isSWJ"
[00:17:58.527]          // =>  TRUE
[00:17:58.527]        <control if="hasDormant" while="" timeout="0" info="">
[00:17:58.527]          // if-block "hasDormant"
[00:17:58.527]            // =>  FALSE
[00:17:58.527]          // skip if-block "hasDormant"
[00:17:58.527]        </control>
[00:17:58.527]        <control if="!hasDormant" while="" timeout="0" info="">
[00:17:58.527]          // if-block "!hasDormant"
[00:17:58.527]            // =>  TRUE
[00:17:58.527]          <block atomic="false" info="">
[00:17:58.527]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:17:58.527]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:17:58.527]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:17:58.533]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:17:58.533]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:17:58.534]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:17:58.534]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:17:58.536]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:17:58.536]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:17:58.540]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:17:58.540]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:17:58.542]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:17:58.542]          </block>
[00:17:58.542]          // end if-block "!hasDormant"
[00:17:58.542]        </control>
[00:17:58.543]        // end if-block "isSWJ"
[00:17:58.543]      </control>
[00:17:58.543]      <control if="!isSWJ" while="" timeout="0" info="">
[00:17:58.543]        // if-block "!isSWJ"
[00:17:58.543]          // =>  FALSE
[00:17:58.543]        // skip if-block "!isSWJ"
[00:17:58.543]      </control>
[00:17:58.543]      <block atomic="false" info="">
[00:17:58.543]        ReadDP(0x0);
[00:17:58.543]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:17:58.543]      </block>
[00:17:58.543]      // end if-block "protType == 2"
[00:17:58.543]    </control>
[00:17:58.543]  </sequence>
[00:17:58.545]  
[00:17:58.549]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:17:58.549]  
[00:17:58.549]  <debugvars>
[00:17:58.549]    // Pre-defined
[00:17:58.549]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:17:58.549]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:17:58.549]    __dp=0x00000000
[00:17:58.549]    __ap=0x00000000
[00:17:58.549]    __traceout=0x00000000      (Trace Disabled)
[00:17:58.549]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:17:58.549]    __FlashAddr=0x00000000
[00:17:58.549]    __FlashLen=0x00000000
[00:17:58.549]    __FlashArg=0x00000000
[00:17:58.549]    __FlashOp=0x00000000
[00:17:58.549]    __Result=0x00000000
[00:17:58.549]  </debugvars>
[00:17:58.549]  
[00:17:58.549]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:17:58.549]    <block atomic="false" info="">
[00:17:58.549]      __var SW_DP_ABORT       = 0x0;
[00:17:58.549]        // -> [SW_DP_ABORT <= 0x00000000]
[00:17:58.549]      __var DP_CTRL_STAT      = 0x4;
[00:17:58.549]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:17:58.549]      __var DP_SELECT         = 0x8;
[00:17:58.549]        // -> [DP_SELECT <= 0x00000008]
[00:17:58.549]      __var powered_down      = 0;
[00:17:58.549]        // -> [powered_down <= 0x00000000]
[00:17:58.549]      WriteDP(DP_SELECT, 0x00000000);
[00:17:58.553]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:17:58.554]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:17:58.558]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:17:58.558]        // -> [powered_down <= 0x00000001]
[00:17:58.558]    </block>
[00:17:58.558]    <control if="powered_down" while="" timeout="0" info="">
[00:17:58.558]      // if-block "powered_down"
[00:17:58.558]        // =>  TRUE
[00:17:58.558]      <block atomic="false" info="">
[00:17:58.558]        Message(0, "Debug/System power-up request sent");
[00:17:58.558]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:17:58.561]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:17:58.561]      </block>
[00:17:58.561]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:17:58.561]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:17:58.562]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:17:58.562]        // while-condition  =>  FALSE
[00:17:58.562]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:17:58.562]      </control>
[00:17:58.562]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:17:58.562]        // if-block "(__protocol & 0xFFFF) == 1"
[00:17:58.562]          // =>  FALSE
[00:17:58.562]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:17:58.563]      </control>
[00:17:58.563]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:17:58.563]        // if-block "(__protocol & 0xFFFF) == 2"
[00:17:58.563]          // =>  TRUE
[00:17:58.563]        <block atomic="false" info="">
[00:17:58.563]          Message(0, "executing SWD power up");
[00:17:58.563]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:17:58.568]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:17:58.568]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:17:58.568]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:17:58.570]        </block>
[00:17:58.570]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:17:58.570]      </control>
[00:17:58.570]      // end if-block "powered_down"
[00:17:58.570]    </control>
[00:17:58.570]    <block atomic="false" info="">
[00:17:58.570]      __var DEBUG_PORT_VAL    = 0;
[00:17:58.570]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:17:58.570]      __var ACCESS_POINT_VAL  = 0;
[00:17:58.571]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:17:58.571]      __ap = 1; 
[00:17:58.571]        // -> [__ap <= 0x00000001]
[00:17:58.571]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:17:58.575]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:17:58.575]      __ap = 4;
[00:17:58.575]        // -> [__ap <= 0x00000004]
[00:17:58.575]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:17:58.578]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:17:58.578]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:17:58.578]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:17:58.578]    </block>
[00:17:58.581]    <block atomic="false" info="">
[00:17:58.581]      __var nReset = 0x80;
[00:17:58.581]        // -> [nReset <= 0x00000080]
[00:17:58.581]      __var canReadPins = 0;
[00:17:58.582]        // -> [canReadPins <= 0x00000000]
[00:17:58.582]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:17:58.583]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:17:58.583]        // -> [canReadPins <= 0x00000001]
[00:17:58.583]    </block>
[00:17:58.583]    <control if="" while="1" timeout="200" info="">
[00:17:58.583]      // while "1"  (timeout="200")
[00:17:58.583]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.584]      // while "1"  (timeout="200")
[00:17:58.584]      // while-condition  =>  TRUE
[00:17:58.587]      // while "1"  (timeout="200")
[00:17:58.587]      // while-condition  =>  TRUE
[00:17:58.587]      // while "1"  (timeout="200")
[00:17:58.587]      // while-condition  =>  TRUE
[00:17:58.587]      // while "1"  (timeout="200")
[00:17:58.587]      // while-condition  =>  TRUE
[00:17:58.587]      // while "1"  (timeout="200")
[00:17:58.587]      // while-condition  =>  TRUE
[00:17:58.587]      // while "1"  (timeout="200")
[00:17:58.587]      // while-condition  =>  TRUE
[00:17:58.587]      // while "1"  (timeout="200")
[00:17:58.587]      // while-condition  =>  TRUE
[00:17:58.587]      // while "1"  (timeout="200")
[00:17:58.588]      // while-condition  =>  TRUE
[00:17:58.589]      // while "1"  (timeout="200")
[00:17:58.589]      // while-condition  =>  TRUE
[00:17:58.589]      // while "1"  (timeout="200")
[00:17:58.589]      // while-condition  =>  TRUE
[00:17:58.589]      // while "1"  (timeout="200")
[00:17:58.589]      // while-condition  =>  TRUE
[00:17:58.589]      // while "1"  (timeout="200")
[00:17:58.589]      // while-condition  =>  TRUE
[00:17:58.589]      // while "1"  (timeout="200")
[00:17:58.589]      // while-condition  =>  TRUE
[00:17:58.589]      // while "1"  (timeout="200")
[00:17:58.589]      // while-condition  =>  TRUE
[00:17:58.589]      // while "1"  (timeout="200")
[00:17:58.589]      // while-condition  =>  TRUE
[00:17:58.589]      // while "1"  (timeout="200")
[00:17:58.589]      // while-condition  =>  TRUE
[00:17:58.589]      // while "1"  (timeout="200")
[00:17:58.589]      // while-condition  =>  TRUE
[00:17:58.589]      // while "1"  (timeout="200")
[00:17:58.589]      // while-condition  =>  TRUE
[00:17:58.591]      // while "1"  (timeout="200")
[00:17:58.591]      // while-condition  =>  TRUE
[00:17:58.591]      // while "1"  (timeout="200")
[00:17:58.591]      // while-condition  =>  TRUE
[00:17:58.591]      // while "1"  (timeout="200")
[00:17:58.591]      // while-condition  =>  TRUE
[00:17:58.591]      // while "1"  (timeout="200")
[00:17:58.591]      // while-condition  =>  TRUE
[00:17:58.591]      // while "1"  (timeout="200")
[00:17:58.591]      // while-condition  =>  TRUE
[00:17:58.591]      // while "1"  (timeout="200")
[00:17:58.591]      // while-condition  =>  TRUE
[00:17:58.591]      // while "1"  (timeout="200")
[00:17:58.591]      // while-condition  =>  TRUE
[00:17:58.591]      // while "1"  (timeout="200")
[00:17:58.592]      // while-condition  =>  TRUE
[00:17:58.592]      // while "1"  (timeout="200")
[00:17:58.592]      // while-condition  =>  TRUE
[00:17:58.592]      // while "1"  (timeout="200")
[00:17:58.592]      // while-condition  =>  TRUE
[00:17:58.592]      // while "1"  (timeout="200")
[00:17:58.592]      // while-condition  =>  TRUE
[00:17:58.592]      // while "1"  (timeout="200")
[00:17:58.593]      // while-condition  =>  TRUE
[00:17:58.593]      // while "1"  (timeout="200")
[00:17:58.593]      // while-condition  =>  TRUE
[00:17:58.593]      // while "1"  (timeout="200")
[00:17:58.593]      // while-condition  =>  TRUE
[00:17:58.593]      // while "1"  (timeout="200")
[00:17:58.593]      // while-condition  =>  TRUE
[00:17:58.593]      // while "1"  (timeout="200")
[00:17:58.593]      // while-condition  =>  TRUE
[00:17:58.593]      // while "1"  (timeout="200")
[00:17:58.593]      // while-condition  =>  TRUE
[00:17:58.593]      // while "1"  (timeout="200")
[00:17:58.593]      // while-condition  =>  TRUE
[00:17:58.593]      // while "1"  (timeout="200")
[00:17:58.593]      // while-condition  =>  TRUE
[00:17:58.593]      // while "1"  (timeout="200")
[00:17:58.593]      // while-condition  =>  TRUE
[00:17:58.593]      // while "1"  (timeout="200")
[00:17:58.593]      // while-condition  =>  TRUE
[00:17:58.593]      // while "1"  (timeout="200")
[00:17:58.593]      // while-condition  =>  TRUE
[00:17:58.595]      // while "1"  (timeout="200")
[00:17:58.596]      // while  =>  TIMEOUT
[00:17:58.596]      // end while "1"
[00:17:58.596]    </control>
[00:17:58.596]    <control if="canReadPins" while="" timeout="0" info="">
[00:17:58.596]      // if-block "canReadPins"
[00:17:58.596]        // =>  TRUE
[00:17:58.596]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:17:58.596]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:17:58.596]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:17:58.598]        // while-condition  =>  FALSE
[00:17:58.598]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:17:58.598]      </control>
[00:17:58.598]      // end if-block "canReadPins"
[00:17:58.598]    </control>
[00:17:58.598]    <control if="!canReadPins" while="" timeout="0" info="">
[00:17:58.598]      // if-block "!canReadPins"
[00:17:58.598]        // =>  FALSE
[00:17:58.598]      // skip if-block "!canReadPins"
[00:17:58.598]    </control>
[00:17:58.598]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:17:58.598]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:17:58.598]        // =>  TRUE
[00:17:58.598]      <block atomic="false" info="">
[00:17:58.598]        WriteAP(0x00, 0x190008);
[00:17:58.598]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:17:58.602]        WriteAP(0xF0, 0x01);
[00:17:58.606]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:17:58.606]      </block>
[00:17:58.606]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:17:58.606]    </control>
[00:17:58.606]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:17:58.606]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:17:58.606]        // =>  FALSE
[00:17:58.609]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:17:58.609]    </control>
[00:17:58.609]    <block atomic="false" info="">
[00:17:58.609]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:17:58.613]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:17:58.613]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:17:58.613]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:17:58.613]      __ap = 0; //lets make sure we reset the access point selection
[00:17:58.613]        // -> [__ap <= 0x00000000]
[00:17:58.613]    </block>
[00:17:58.613]  </sequence>
[00:17:58.613]  
[00:17:58.648]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:17:58.648]  
[00:17:58.648]  <debugvars>
[00:17:58.648]    // Pre-defined
[00:17:58.648]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:17:58.648]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:17:58.648]    __dp=0x00000000
[00:17:58.648]    __ap=0x00000000
[00:17:58.648]    __traceout=0x00000000      (Trace Disabled)
[00:17:58.648]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:17:58.651]    __FlashAddr=0x00000000
[00:17:58.651]    __FlashLen=0x00000000
[00:17:58.651]    __FlashArg=0x00000000
[00:17:58.651]    __FlashOp=0x00000000
[00:17:58.651]    __Result=0x00000000
[00:17:58.651]  </debugvars>
[00:17:58.651]  
[00:17:58.651]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:17:58.651]    <block atomic="false" info="">
[00:17:58.652]      __var deviceID = 0;
[00:17:58.652]        // -> [deviceID <= 0x00000000]
[00:17:58.652]      __var version = 0;
[00:17:58.652]        // -> [version <= 0x00000000]
[00:17:58.653]      __var partNum = 0;
[00:17:58.653]        // -> [partNum <= 0x00000000]
[00:17:58.653]      __var manuf = 0;
[00:17:58.653]        // -> [manuf <= 0x00000000]
[00:17:58.653]      __var isMSPM0G1X0X_G3X0X = 0;
[00:17:58.653]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:17:58.653]      __var isProduction = 0;
[00:17:58.653]        // -> [isProduction <= 0x00000000]
[00:17:58.653]      __var continueId = 0;
[00:17:58.653]        // -> [continueId <= 0x00000000]
[00:17:58.653]      deviceID =   Read32(0x41C40004);
[00:17:58.665]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:17:58.665]        // -> [deviceID <= 0x2BB8802F]
[00:17:58.665]      version = deviceID >> 28;
[00:17:58.665]        // -> [version <= 0x00000002]
[00:17:58.665]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:17:58.665]        // -> [partNum <= 0x0000BB88]
[00:17:58.665]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:17:58.665]        // -> [manuf <= 0x00000017]
[00:17:58.665]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:17:58.665]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:17:58.665]      isProduction = (version > 0);
[00:17:58.665]        // -> [isProduction <= 0x00000001]
[00:17:58.665]    </block>
[00:17:58.665]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:17:58.667]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:17:58.667]        // =>  FALSE
[00:17:58.667]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:17:58.667]    </control>
[00:17:58.667]    <control if="continueId == 4" while="" timeout="0" info="">
[00:17:58.667]      // if-block "continueId == 4"
[00:17:58.667]        // =>  FALSE
[00:17:58.667]      // skip if-block "continueId == 4"
[00:17:58.667]    </control>
[00:17:58.667]    <control if="!isProduction" while="" timeout="0" info="">
[00:17:58.667]      // if-block "!isProduction"
[00:17:58.667]        // =>  FALSE
[00:17:58.667]      // skip if-block "!isProduction"
[00:17:58.667]    </control>
[00:17:58.667]  </sequence>
[00:17:58.667]  
