/*
 *  CMSIS Pack Debug Access Sequence Log
 *  File        : D:\µçÈü_project\2025_EDC_FUBEN\SeekFree\project\keil\SeekFree_MSPM0G3507_Device_Library_Sequences_0025.log
 *  Created     : 00:15:45 (28/07/2025)
 *  Device      : MSPM0G3507
 *  PDSC File   : D:\Keil5\TexasInstruments\MSPM0G1X0X_G3X0X_DFP\1.3.0\TexasInstruments.MSPM0G1X0X_G3X0X_DFP.pdsc
 *
 */

[00:15:45.494]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:15:45.494]  
[00:15:45.495]  <debugvars>
[00:15:45.495]    // Pre-defined
[00:15:45.495]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:15:45.495]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:15:45.496]    __dp=0x00000000
[00:15:45.496]    __ap=0x00000000
[00:15:45.496]    __traceout=0x00000000      (Trace Disabled)
[00:15:45.496]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:15:45.496]    __FlashAddr=0x00000000
[00:15:45.496]    __FlashLen=0x00000000
[00:15:45.496]    __FlashArg=0x00000000
[00:15:45.496]    __FlashOp=0x00000000
[00:15:45.496]    __Result=0x00000000
[00:15:45.496]  </debugvars>
[00:15:45.497]  
[00:15:45.497]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:15:45.497]    <block atomic="false" info="">
[00:15:45.497]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:15:45.497]        // -> [isSWJ <= 0x00000001]
[00:15:45.497]      __var hasDormant = __protocol & 0x00020000;
[00:15:45.497]        // -> [hasDormant <= 0x00000000]
[00:15:45.497]      __var protType   = __protocol & 0x0000FFFF;
[00:15:45.497]        // -> [protType <= 0x00000002]
[00:15:45.497]    </block>
[00:15:45.497]    <control if="protType == 1" while="" timeout="0" info="">
[00:15:45.497]      // if-block "protType == 1"
[00:15:45.497]        // =>  FALSE
[00:15:45.498]      // skip if-block "protType == 1"
[00:15:45.498]    </control>
[00:15:45.498]    <control if="protType == 2" while="" timeout="0" info="">
[00:15:45.498]      // if-block "protType == 2"
[00:15:45.498]        // =>  TRUE
[00:15:45.498]      <control if="isSWJ" while="" timeout="0" info="">
[00:15:45.498]        // if-block "isSWJ"
[00:15:45.498]          // =>  TRUE
[00:15:45.499]        <control if="hasDormant" while="" timeout="0" info="">
[00:15:45.499]          // if-block "hasDormant"
[00:15:45.499]            // =>  FALSE
[00:15:45.499]          // skip if-block "hasDormant"
[00:15:45.499]        </control>
[00:15:45.499]        <control if="!hasDormant" while="" timeout="0" info="">
[00:15:45.499]          // if-block "!hasDormant"
[00:15:45.499]            // =>  TRUE
[00:15:45.499]          <block atomic="false" info="">
[00:15:45.499]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:15:45.501]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:15:45.502]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:15:45.503]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:15:45.503]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:15:45.504]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:15:45.505]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:15:45.506]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:15:45.506]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:15:45.507]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:15:45.507]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:15:45.510]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:15:45.510]          </block>
[00:15:45.510]          // end if-block "!hasDormant"
[00:15:45.510]        </control>
[00:15:45.510]        // end if-block "isSWJ"
[00:15:45.510]      </control>
[00:15:45.510]      <control if="!isSWJ" while="" timeout="0" info="">
[00:15:45.510]        // if-block "!isSWJ"
[00:15:45.510]          // =>  FALSE
[00:15:45.510]        // skip if-block "!isSWJ"
[00:15:45.512]      </control>
[00:15:45.512]      <block atomic="false" info="">
[00:15:45.512]        ReadDP(0x0);
[00:15:45.513]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:15:45.513]      </block>
[00:15:45.513]      // end if-block "protType == 2"
[00:15:45.514]    </control>
[00:15:45.514]  </sequence>
[00:15:45.514]  
[00:15:45.516]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:15:45.516]  
[00:15:45.516]  <debugvars>
[00:15:45.516]    // Pre-defined
[00:15:45.516]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:15:45.516]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:15:45.516]    __dp=0x00000000
[00:15:45.517]    __ap=0x00000000
[00:15:45.517]    __traceout=0x00000000      (Trace Disabled)
[00:15:45.517]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:15:45.517]    __FlashAddr=0x00000000
[00:15:45.517]    __FlashLen=0x00000000
[00:15:45.517]    __FlashArg=0x00000000
[00:15:45.517]    __FlashOp=0x00000000
[00:15:45.517]    __Result=0x00000000
[00:15:45.517]  </debugvars>
[00:15:45.517]  
[00:15:45.518]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:15:45.518]    <block atomic="false" info="">
[00:15:45.518]      __var SW_DP_ABORT       = 0x0;
[00:15:45.518]        // -> [SW_DP_ABORT <= 0x00000000]
[00:15:45.518]      __var DP_CTRL_STAT      = 0x4;
[00:15:45.518]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:15:45.518]      __var DP_SELECT         = 0x8;
[00:15:45.518]        // -> [DP_SELECT <= 0x00000008]
[00:15:45.518]      __var powered_down      = 0;
[00:15:45.518]        // -> [powered_down <= 0x00000000]
[00:15:45.518]      WriteDP(DP_SELECT, 0x00000000);
[00:15:45.520]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:15:45.520]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:15:45.521]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:15:45.521]        // -> [powered_down <= 0x00000001]
[00:15:45.521]    </block>
[00:15:45.522]    <control if="powered_down" while="" timeout="0" info="">
[00:15:45.522]      // if-block "powered_down"
[00:15:45.522]        // =>  TRUE
[00:15:45.522]      <block atomic="false" info="">
[00:15:45.522]        Message(0, "Debug/System power-up request sent");
[00:15:45.523]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:15:45.525]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:15:45.525]      </block>
[00:15:45.525]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:15:45.525]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:15:45.526]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:15:45.526]        // while-condition  =>  FALSE
[00:15:45.527]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:15:45.527]      </control>
[00:15:45.527]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:15:45.527]        // if-block "(__protocol & 0xFFFF) == 1"
[00:15:45.527]          // =>  FALSE
[00:15:45.527]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:15:45.527]      </control>
[00:15:45.527]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:15:45.527]        // if-block "(__protocol & 0xFFFF) == 2"
[00:15:45.527]          // =>  TRUE
[00:15:45.527]        <block atomic="false" info="">
[00:15:45.528]          Message(0, "executing SWD power up");
[00:15:45.528]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:15:45.529]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:15:45.529]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:15:45.531]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:15:45.531]        </block>
[00:15:45.531]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:15:45.531]      </control>
[00:15:45.531]      // end if-block "powered_down"
[00:15:45.531]    </control>
[00:15:45.531]    <block atomic="false" info="">
[00:15:45.531]      __var DEBUG_PORT_VAL    = 0;
[00:15:45.531]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:15:45.531]      __var ACCESS_POINT_VAL  = 0;
[00:15:45.533]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:15:45.533]      __ap = 1; 
[00:15:45.533]        // -> [__ap <= 0x00000001]
[00:15:45.533]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:15:45.535]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:15:45.536]      __ap = 4;
[00:15:45.536]        // -> [__ap <= 0x00000004]
[00:15:45.536]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:15:45.542]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:15:45.542]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:15:45.542]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:15:45.542]    </block>
[00:15:45.542]    <block atomic="false" info="">
[00:15:45.542]      __var nReset = 0x80;
[00:15:45.542]        // -> [nReset <= 0x00000080]
[00:15:45.542]      __var canReadPins = 0;
[00:15:45.542]        // -> [canReadPins <= 0x00000000]
[00:15:45.544]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:15:45.545]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:15:45.545]        // -> [canReadPins <= 0x00000001]
[00:15:45.545]    </block>
[00:15:45.545]    <control if="" while="1" timeout="200" info="">
[00:15:45.545]      // while "1"  (timeout="200")
[00:15:45.545]      // while-condition  =>  TRUE
[00:15:45.545]      // while "1"  (timeout="200")
[00:15:45.546]      // while-condition  =>  TRUE
[00:15:45.546]      // while "1"  (timeout="200")
[00:15:45.546]      // while  =>  TIMEOUT
[00:15:45.546]      // end while "1"
[00:15:45.546]    </control>
[00:15:45.547]    <control if="canReadPins" while="" timeout="0" info="">
[00:15:45.547]      // if-block "canReadPins"
[00:15:45.547]        // =>  TRUE
[00:15:45.547]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:15:45.547]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:15:45.549]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:15:45.549]        // while-condition  =>  FALSE
[00:15:45.549]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:15:45.549]      </control>
[00:15:45.549]      // end if-block "canReadPins"
[00:15:45.549]    </control>
[00:15:45.549]    <control if="!canReadPins" while="" timeout="0" info="">
[00:15:45.549]      // if-block "!canReadPins"
[00:15:45.549]        // =>  FALSE
[00:15:45.550]      // skip if-block "!canReadPins"
[00:15:45.550]    </control>
[00:15:45.550]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:15:45.550]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:15:45.550]        // =>  TRUE
[00:15:45.550]      <block atomic="false" info="">
[00:15:45.550]        WriteAP(0x00, 0x190008);
[00:15:45.552]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:15:45.552]        WriteAP(0xF0, 0x01);
[00:15:45.556]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:15:45.556]      </block>
[00:15:45.556]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:15:45.556]    </control>
[00:15:45.557]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:15:45.557]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:15:45.557]        // =>  FALSE
[00:15:45.557]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:15:45.557]    </control>
[00:15:45.557]    <block atomic="false" info="">
[00:15:45.557]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:15:45.565]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:15:45.565]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:15:45.565]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:15:45.570]      __ap = 0; //lets make sure we reset the access point selection
[00:15:45.570]        // -> [__ap <= 0x00000000]
[00:15:45.570]    </block>
[00:15:45.570]  </sequence>
[00:15:45.570]  
[00:15:45.597]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:15:45.597]  
[00:15:45.597]  <debugvars>
[00:15:45.597]    // Pre-defined
[00:15:45.597]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:15:45.597]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:15:45.597]    __dp=0x00000000
[00:15:45.597]    __ap=0x00000000
[00:15:45.597]    __traceout=0x00000000      (Trace Disabled)
[00:15:45.597]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:15:45.598]    __FlashAddr=0x00000000
[00:15:45.598]    __FlashLen=0x00000000
[00:15:45.598]    __FlashArg=0x00000000
[00:15:45.598]    __FlashOp=0x00000000
[00:15:45.598]    __Result=0x00000000
[00:15:45.598]  </debugvars>
[00:15:45.598]  
[00:15:45.598]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:15:45.598]    <block atomic="false" info="">
[00:15:45.598]      __var deviceID = 0;
[00:15:45.598]        // -> [deviceID <= 0x00000000]
[00:15:45.599]      __var version = 0;
[00:15:45.599]        // -> [version <= 0x00000000]
[00:15:45.599]      __var partNum = 0;
[00:15:45.599]        // -> [partNum <= 0x00000000]
[00:15:45.599]      __var manuf = 0;
[00:15:45.599]        // -> [manuf <= 0x00000000]
[00:15:45.599]      __var isMSPM0G1X0X_G3X0X = 0;
[00:15:45.599]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:15:45.599]      __var isProduction = 0;
[00:15:45.599]        // -> [isProduction <= 0x00000000]
[00:15:45.599]      __var continueId = 0;
[00:15:45.600]        // -> [continueId <= 0x00000000]
[00:15:45.600]      deviceID =   Read32(0x41C40004);
[00:15:45.605]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:15:45.605]        // -> [deviceID <= 0x2BB8802F]
[00:15:45.605]      version = deviceID >> 28;
[00:15:45.605]        // -> [version <= 0x00000002]
[00:15:45.605]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:15:45.605]        // -> [partNum <= 0x0000BB88]
[00:15:45.606]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:15:45.606]        // -> [manuf <= 0x00000017]
[00:15:45.606]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:15:45.606]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:15:45.606]      isProduction = (version > 0);
[00:15:45.606]        // -> [isProduction <= 0x00000001]
[00:15:45.606]    </block>
[00:15:45.606]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:15:45.606]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:15:45.606]        // =>  FALSE
[00:15:45.606]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:15:45.606]    </control>
[00:15:45.607]    <control if="continueId == 4" while="" timeout="0" info="">
[00:15:45.607]      // if-block "continueId == 4"
[00:15:45.607]        // =>  FALSE
[00:15:45.607]      // skip if-block "continueId == 4"
[00:15:45.607]    </control>
[00:15:45.608]    <control if="!isProduction" while="" timeout="0" info="">
[00:15:45.608]      // if-block "!isProduction"
[00:15:45.608]        // =>  FALSE
[00:15:45.608]      // skip if-block "!isProduction"
[00:15:45.608]    </control>
[00:15:45.608]  </sequence>
[00:15:45.608]  
[00:16:01.831]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:16:01.831]  
[00:16:01.839]  <debugvars>
[00:16:01.839]    // Pre-defined
[00:16:01.839]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:01.839]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:01.839]    __dp=0x00000000
[00:16:01.839]    __ap=0x00000000
[00:16:01.839]    __traceout=0x00000000      (Trace Disabled)
[00:16:01.839]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:01.840]    __FlashAddr=0x00000000
[00:16:01.840]    __FlashLen=0x00000000
[00:16:01.840]    __FlashArg=0x00000000
[00:16:01.840]    __FlashOp=0x00000000
[00:16:01.840]    __Result=0x00000000
[00:16:01.840]  </debugvars>
[00:16:01.840]  
[00:16:01.840]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:01.841]    <block atomic="false" info="">
[00:16:01.841]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:01.841]        // -> [isSWJ <= 0x00000001]
[00:16:01.841]      __var hasDormant = __protocol & 0x00020000;
[00:16:01.841]        // -> [hasDormant <= 0x00000000]
[00:16:01.841]      __var protType   = __protocol & 0x0000FFFF;
[00:16:01.842]        // -> [protType <= 0x00000002]
[00:16:01.842]    </block>
[00:16:01.842]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:01.842]      // if-block "protType == 1"
[00:16:01.842]        // =>  FALSE
[00:16:01.842]      // skip if-block "protType == 1"
[00:16:01.842]    </control>
[00:16:01.842]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:01.842]      // if-block "protType == 2"
[00:16:01.842]        // =>  TRUE
[00:16:01.842]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:01.842]        // if-block "isSWJ"
[00:16:01.842]          // =>  TRUE
[00:16:01.842]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:01.842]          // if-block "hasDormant"
[00:16:01.842]            // =>  FALSE
[00:16:01.843]          // skip if-block "hasDormant"
[00:16:01.843]        </control>
[00:16:01.843]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:01.843]          // if-block "!hasDormant"
[00:16:01.843]            // =>  TRUE
[00:16:01.843]          <block atomic="false" info="">
[00:16:01.843]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:01.845]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:16:01.845]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:16:01.846]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:16:01.846]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:16:01.848]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:16:01.848]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:16:01.849]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:16:01.849]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:16:01.850]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:16:01.850]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:16:01.852]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:16:01.852]          </block>
[00:16:01.852]          // end if-block "!hasDormant"
[00:16:01.853]        </control>
[00:16:01.853]        // end if-block "isSWJ"
[00:16:01.853]      </control>
[00:16:01.853]      <control if="!isSWJ" while="" timeout="0" info="">
[00:16:01.853]        // if-block "!isSWJ"
[00:16:01.853]          // =>  FALSE
[00:16:01.853]        // skip if-block "!isSWJ"
[00:16:01.853]      </control>
[00:16:01.853]      <block atomic="false" info="">
[00:16:01.854]        ReadDP(0x0);
[00:16:01.856]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:16:01.856]      </block>
[00:16:01.857]      // end if-block "protType == 2"
[00:16:01.857]    </control>
[00:16:01.857]  </sequence>
[00:16:01.857]  
[00:16:01.860]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:16:01.860]  
[00:16:01.860]  <debugvars>
[00:16:01.860]    // Pre-defined
[00:16:01.860]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:01.860]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:01.861]    __dp=0x00000000
[00:16:01.861]    __ap=0x00000000
[00:16:01.861]    __traceout=0x00000000      (Trace Disabled)
[00:16:01.861]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:01.861]    __FlashAddr=0x00000000
[00:16:01.861]    __FlashLen=0x00000000
[00:16:01.861]    __FlashArg=0x00000000
[00:16:01.861]    __FlashOp=0x00000000
[00:16:01.862]    __Result=0x00000000
[00:16:01.862]  </debugvars>
[00:16:01.862]  
[00:16:01.862]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:16:01.862]    <block atomic="false" info="">
[00:16:01.862]      __var SW_DP_ABORT       = 0x0;
[00:16:01.862]        // -> [SW_DP_ABORT <= 0x00000000]
[00:16:01.862]      __var DP_CTRL_STAT      = 0x4;
[00:16:01.862]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:16:01.862]      __var DP_SELECT         = 0x8;
[00:16:01.862]        // -> [DP_SELECT <= 0x00000008]
[00:16:01.862]      __var powered_down      = 0;
[00:16:01.862]        // -> [powered_down <= 0x00000000]
[00:16:01.862]      WriteDP(DP_SELECT, 0x00000000);
[00:16:01.871]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:16:01.871]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:16:01.872]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:16:01.873]        // -> [powered_down <= 0x00000001]
[00:16:01.873]    </block>
[00:16:01.873]    <control if="powered_down" while="" timeout="0" info="">
[00:16:01.873]      // if-block "powered_down"
[00:16:01.873]        // =>  TRUE
[00:16:01.873]      <block atomic="false" info="">
[00:16:01.873]        Message(0, "Debug/System power-up request sent");
[00:16:01.875]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:16:01.877]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:16:01.877]      </block>
[00:16:01.877]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:16:01.877]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:16:01.878]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:16:01.879]        // while-condition  =>  FALSE
[00:16:01.879]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:16:01.879]      </control>
[00:16:01.879]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:16:01.879]        // if-block "(__protocol & 0xFFFF) == 1"
[00:16:01.879]          // =>  FALSE
[00:16:01.879]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:16:01.879]      </control>
[00:16:01.879]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:16:01.879]        // if-block "(__protocol & 0xFFFF) == 2"
[00:16:01.880]          // =>  TRUE
[00:16:01.880]        <block atomic="false" info="">
[00:16:01.880]          Message(0, "executing SWD power up");
[00:16:01.881]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:16:01.883]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:16:01.883]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:16:01.885]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:16:01.885]        </block>
[00:16:01.885]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:16:01.885]      </control>
[00:16:01.885]      // end if-block "powered_down"
[00:16:01.885]    </control>
[00:16:01.885]    <block atomic="false" info="">
[00:16:01.885]      __var DEBUG_PORT_VAL    = 0;
[00:16:01.886]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:16:01.886]      __var ACCESS_POINT_VAL  = 0;
[00:16:01.886]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:16:01.886]      __ap = 1; 
[00:16:01.886]        // -> [__ap <= 0x00000001]
[00:16:01.886]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:16:01.890]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:16:01.890]      __ap = 4;
[00:16:01.890]        // -> [__ap <= 0x00000004]
[00:16:01.890]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:16:01.900]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:16:01.900]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:16:01.900]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:16:01.901]    </block>
[00:16:01.902]    <block atomic="false" info="">
[00:16:01.902]      __var nReset = 0x80;
[00:16:01.902]        // -> [nReset <= 0x00000080]
[00:16:01.902]      __var canReadPins = 0;
[00:16:01.902]        // -> [canReadPins <= 0x00000000]
[00:16:01.902]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:16:01.905]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:16:01.905]        // -> [canReadPins <= 0x00000001]
[00:16:01.905]    </block>
[00:16:01.905]    <control if="" while="1" timeout="200" info="">
[00:16:01.905]      // while "1"  (timeout="200")
[00:16:01.905]      // while-condition  =>  TRUE
[00:16:01.905]      // while "1"  (timeout="200")
[00:16:01.905]      // while-condition  =>  TRUE
[00:16:01.905]      // while "1"  (timeout="200")
[00:16:01.906]      // while-condition  =>  TRUE
[00:16:01.906]      // while "1"  (timeout="200")
[00:16:01.906]      // while  =>  TIMEOUT
[00:16:01.906]      // end while "1"
[00:16:01.906]    </control>
[00:16:01.906]    <control if="canReadPins" while="" timeout="0" info="">
[00:16:01.906]      // if-block "canReadPins"
[00:16:01.907]        // =>  TRUE
[00:16:01.907]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:16:01.907]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:16:01.908]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:16:01.908]        // while-condition  =>  FALSE
[00:16:01.908]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:16:01.908]      </control>
[00:16:01.909]      // end if-block "canReadPins"
[00:16:01.909]    </control>
[00:16:01.909]    <control if="!canReadPins" while="" timeout="0" info="">
[00:16:01.909]      // if-block "!canReadPins"
[00:16:01.909]        // =>  FALSE
[00:16:01.909]      // skip if-block "!canReadPins"
[00:16:01.909]    </control>
[00:16:01.909]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:16:01.910]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:16:01.910]        // =>  TRUE
[00:16:01.910]      <block atomic="false" info="">
[00:16:01.910]        WriteAP(0x00, 0x190008);
[00:16:01.911]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:16:01.911]        WriteAP(0xF0, 0x01);
[00:16:01.915]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:16:01.916]      </block>
[00:16:01.916]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:16:01.916]    </control>
[00:16:01.916]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:16:01.916]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:16:01.916]        // =>  FALSE
[00:16:01.916]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:16:01.916]    </control>
[00:16:01.916]    <block atomic="false" info="">
[00:16:01.916]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:16:01.935]  
[00:16:01.935]  !!! E310 : Debug access failed - cannot read AP register 0x00000000 (AP '0x00000004'))
[00:16:01.935]  
[00:16:01.937]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:16:01.937]    </block>
[00:16:01.937]  </sequence>
[00:16:01.937]  
[00:16:13.064]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:16:13.064]  
[00:16:13.065]  <debugvars>
[00:16:13.065]    // Pre-defined
[00:16:13.065]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:13.065]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:13.065]    __dp=0x00000000
[00:16:13.065]    __ap=0x00000000
[00:16:13.066]    __traceout=0x00000000      (Trace Disabled)
[00:16:13.066]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:13.066]    __FlashAddr=0x00000000
[00:16:13.066]    __FlashLen=0x00000000
[00:16:13.066]    __FlashArg=0x00000000
[00:16:13.066]    __FlashOp=0x00000000
[00:16:13.066]    __Result=0x00000000
[00:16:13.066]  </debugvars>
[00:16:13.067]  
[00:16:13.067]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:16:13.067]    <block atomic="false" info="">
[00:16:13.067]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:16:13.067]        // -> [isSWJ <= 0x00000001]
[00:16:13.067]      __var hasDormant = __protocol & 0x00020000;
[00:16:13.067]        // -> [hasDormant <= 0x00000000]
[00:16:13.067]      __var protType   = __protocol & 0x0000FFFF;
[00:16:13.067]        // -> [protType <= 0x00000002]
[00:16:13.067]    </block>
[00:16:13.067]    <control if="protType == 1" while="" timeout="0" info="">
[00:16:13.068]      // if-block "protType == 1"
[00:16:13.068]        // =>  FALSE
[00:16:13.068]      // skip if-block "protType == 1"
[00:16:13.068]    </control>
[00:16:13.068]    <control if="protType == 2" while="" timeout="0" info="">
[00:16:13.068]      // if-block "protType == 2"
[00:16:13.068]        // =>  TRUE
[00:16:13.069]      <control if="isSWJ" while="" timeout="0" info="">
[00:16:13.069]        // if-block "isSWJ"
[00:16:13.069]          // =>  TRUE
[00:16:13.069]        <control if="hasDormant" while="" timeout="0" info="">
[00:16:13.069]          // if-block "hasDormant"
[00:16:13.069]            // =>  FALSE
[00:16:13.069]          // skip if-block "hasDormant"
[00:16:13.069]        </control>
[00:16:13.069]        <control if="!hasDormant" while="" timeout="0" info="">
[00:16:13.069]          // if-block "!hasDormant"
[00:16:13.070]            // =>  TRUE
[00:16:13.070]          <block atomic="false" info="">
[00:16:13.070]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:16:13.073]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:16:13.073]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:16:13.074]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:16:13.075]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:16:13.077]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:16:13.077]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:16:13.079]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:16:13.079]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:16:13.081]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:16:13.081]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:16:13.082]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:16:13.082]          </block>
[00:16:13.082]          // end if-block "!hasDormant"
[00:16:13.082]        </control>
[00:16:13.083]        // end if-block "isSWJ"
[00:16:13.083]      </control>
[00:16:13.083]      <control if="!isSWJ" while="" timeout="0" info="">
[00:16:13.083]        // if-block "!isSWJ"
[00:16:13.083]          // =>  FALSE
[00:16:13.083]        // skip if-block "!isSWJ"
[00:16:13.083]      </control>
[00:16:13.083]      <block atomic="false" info="">
[00:16:13.084]        ReadDP(0x0);
[00:16:13.085]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:16:13.085]      </block>
[00:16:13.085]      // end if-block "protType == 2"
[00:16:13.085]    </control>
[00:16:13.085]  </sequence>
[00:16:13.085]  
[00:16:13.088]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:16:13.088]  
[00:16:13.088]  <debugvars>
[00:16:13.088]    // Pre-defined
[00:16:13.088]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:13.088]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:13.088]    __dp=0x00000000
[00:16:13.088]    __ap=0x00000000
[00:16:13.088]    __traceout=0x00000000      (Trace Disabled)
[00:16:13.088]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:13.089]    __FlashAddr=0x00000000
[00:16:13.089]    __FlashLen=0x00000000
[00:16:13.089]    __FlashArg=0x00000000
[00:16:13.089]    __FlashOp=0x00000000
[00:16:13.089]    __Result=0x00000000
[00:16:13.089]  </debugvars>
[00:16:13.089]  
[00:16:13.089]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:16:13.089]    <block atomic="false" info="">
[00:16:13.089]      __var SW_DP_ABORT       = 0x0;
[00:16:13.090]        // -> [SW_DP_ABORT <= 0x00000000]
[00:16:13.090]      __var DP_CTRL_STAT      = 0x4;
[00:16:13.090]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:16:13.090]      __var DP_SELECT         = 0x8;
[00:16:13.090]        // -> [DP_SELECT <= 0x00000008]
[00:16:13.090]      __var powered_down      = 0;
[00:16:13.090]        // -> [powered_down <= 0x00000000]
[00:16:13.090]      WriteDP(DP_SELECT, 0x00000000);
[00:16:13.093]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:16:13.093]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:16:13.094]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:16:13.094]        // -> [powered_down <= 0x00000001]
[00:16:13.094]    </block>
[00:16:13.095]    <control if="powered_down" while="" timeout="0" info="">
[00:16:13.095]      // if-block "powered_down"
[00:16:13.095]        // =>  TRUE
[00:16:13.095]      <block atomic="false" info="">
[00:16:13.095]        Message(0, "Debug/System power-up request sent");
[00:16:13.097]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:16:13.100]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:16:13.100]      </block>
[00:16:13.100]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:16:13.100]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:16:13.102]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:16:13.102]        // while-condition  =>  FALSE
[00:16:13.102]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:16:13.102]      </control>
[00:16:13.102]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:16:13.102]        // if-block "(__protocol & 0xFFFF) == 1"
[00:16:13.102]          // =>  FALSE
[00:16:13.103]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:16:13.103]      </control>
[00:16:13.103]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:16:13.103]        // if-block "(__protocol & 0xFFFF) == 2"
[00:16:13.103]          // =>  TRUE
[00:16:13.103]        <block atomic="false" info="">
[00:16:13.103]          Message(0, "executing SWD power up");
[00:16:13.104]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:16:13.106]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:16:13.106]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:16:13.108]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:16:13.108]        </block>
[00:16:13.108]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:16:13.108]      </control>
[00:16:13.109]      // end if-block "powered_down"
[00:16:13.109]    </control>
[00:16:13.109]    <block atomic="false" info="">
[00:16:13.109]      __var DEBUG_PORT_VAL    = 0;
[00:16:13.109]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:16:13.109]      __var ACCESS_POINT_VAL  = 0;
[00:16:13.109]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:16:13.109]      __ap = 1; 
[00:16:13.110]        // -> [__ap <= 0x00000001]
[00:16:13.110]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:16:13.115]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:16:13.115]      __ap = 4;
[00:16:13.115]        // -> [__ap <= 0x00000004]
[00:16:13.116]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:16:13.119]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:16:13.119]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:16:13.119]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:16:13.120]    </block>
[00:16:13.120]    <block atomic="false" info="">
[00:16:13.121]      __var nReset = 0x80;
[00:16:13.121]        // -> [nReset <= 0x00000080]
[00:16:13.121]      __var canReadPins = 0;
[00:16:13.121]        // -> [canReadPins <= 0x00000000]
[00:16:13.121]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:16:13.122]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:16:13.122]        // -> [canReadPins <= 0x00000001]
[00:16:13.124]    </block>
[00:16:13.124]    <control if="" while="1" timeout="200" info="">
[00:16:13.124]      // while "1"  (timeout="200")
[00:16:13.124]      // while-condition  =>  TRUE
[00:16:13.124]      // while "1"  (timeout="200")
[00:16:13.124]      // while-condition  =>  TRUE
[00:16:13.124]      // while "1"  (timeout="200")
[00:16:13.124]      // while-condition  =>  TRUE
[00:16:13.124]      // while "1"  (timeout="200")
[00:16:13.124]      // while-condition  =>  TRUE
[00:16:13.124]      // while "1"  (timeout="200")
[00:16:13.125]      // while-condition  =>  TRUE
[00:16:13.125]      // while "1"  (timeout="200")
[00:16:13.125]      // while  =>  TIMEOUT
[00:16:13.125]      // end while "1"
[00:16:13.125]    </control>
[00:16:13.125]    <control if="canReadPins" while="" timeout="0" info="">
[00:16:13.126]      // if-block "canReadPins"
[00:16:13.126]        // =>  TRUE
[00:16:13.126]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:16:13.126]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:16:13.127]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:16:13.127]        // while-condition  =>  FALSE
[00:16:13.128]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:16:13.128]      </control>
[00:16:13.128]      // end if-block "canReadPins"
[00:16:13.128]    </control>
[00:16:13.128]    <control if="!canReadPins" while="" timeout="0" info="">
[00:16:13.128]      // if-block "!canReadPins"
[00:16:13.128]        // =>  FALSE
[00:16:13.128]      // skip if-block "!canReadPins"
[00:16:13.128]    </control>
[00:16:13.128]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:16:13.128]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:16:13.128]        // =>  TRUE
[00:16:13.128]      <block atomic="false" info="">
[00:16:13.128]        WriteAP(0x00, 0x190008);
[00:16:13.132]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:16:13.132]        WriteAP(0xF0, 0x01);
[00:16:13.135]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:16:13.136]      </block>
[00:16:13.136]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:16:13.136]    </control>
[00:16:13.136]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:16:13.136]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:16:13.137]        // =>  FALSE
[00:16:13.137]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:16:13.137]    </control>
[00:16:13.137]    <block atomic="false" info="">
[00:16:13.137]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:16:13.141]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:16:13.141]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:16:13.141]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:16:13.143]      __ap = 0; //lets make sure we reset the access point selection
[00:16:13.143]        // -> [__ap <= 0x00000000]
[00:16:13.143]    </block>
[00:16:13.143]  </sequence>
[00:16:13.143]  
[00:16:13.166]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:16:13.166]  
[00:16:13.166]  <debugvars>
[00:16:13.166]    // Pre-defined
[00:16:13.166]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:16:13.166]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:16:13.166]    __dp=0x00000000
[00:16:13.166]    __ap=0x00000000
[00:16:13.166]    __traceout=0x00000000      (Trace Disabled)
[00:16:13.166]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:16:13.166]    __FlashAddr=0x00000000
[00:16:13.167]    __FlashLen=0x00000000
[00:16:13.167]    __FlashArg=0x00000000
[00:16:13.167]    __FlashOp=0x00000000
[00:16:13.167]    __Result=0x00000000
[00:16:13.167]  </debugvars>
[00:16:13.167]  
[00:16:13.167]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:16:13.167]    <block atomic="false" info="">
[00:16:13.167]      __var deviceID = 0;
[00:16:13.168]        // -> [deviceID <= 0x00000000]
[00:16:13.168]      __var version = 0;
[00:16:13.168]        // -> [version <= 0x00000000]
[00:16:13.168]      __var partNum = 0;
[00:16:13.168]        // -> [partNum <= 0x00000000]
[00:16:13.168]      __var manuf = 0;
[00:16:13.169]        // -> [manuf <= 0x00000000]
[00:16:13.169]      __var isMSPM0G1X0X_G3X0X = 0;
[00:16:13.169]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:16:13.169]      __var isProduction = 0;
[00:16:13.169]        // -> [isProduction <= 0x00000000]
[00:16:13.169]      __var continueId = 0;
[00:16:13.169]        // -> [continueId <= 0x00000000]
[00:16:13.169]      deviceID =   Read32(0x41C40004);
[00:16:13.173]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:16:13.173]        // -> [deviceID <= 0x2BB8802F]
[00:16:13.173]      version = deviceID >> 28;
[00:16:13.174]        // -> [version <= 0x00000002]
[00:16:13.174]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:16:13.174]        // -> [partNum <= 0x0000BB88]
[00:16:13.174]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:16:13.174]        // -> [manuf <= 0x00000017]
[00:16:13.174]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:16:13.174]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:16:13.174]      isProduction = (version > 0);
[00:16:13.174]        // -> [isProduction <= 0x00000001]
[00:16:13.174]    </block>
[00:16:13.174]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:16:13.176]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:16:13.176]        // =>  FALSE
[00:16:13.176]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:16:13.176]    </control>
[00:16:13.176]    <control if="continueId == 4" while="" timeout="0" info="">
[00:16:13.176]      // if-block "continueId == 4"
[00:16:13.176]        // =>  FALSE
[00:16:13.176]      // skip if-block "continueId == 4"
[00:16:13.176]    </control>
[00:16:13.176]    <control if="!isProduction" while="" timeout="0" info="">
[00:16:13.176]      // if-block "!isProduction"
[00:16:13.177]        // =>  FALSE
[00:16:13.177]      // skip if-block "!isProduction"
[00:16:13.177]    </control>
[00:16:13.177]  </sequence>
[00:16:13.177]  
[00:20:53.427]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:20:53.427]  
[00:20:53.436]  <debugvars>
[00:20:53.436]    // Pre-defined
[00:20:53.436]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:20:53.436]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:20:53.436]    __dp=0x00000000
[00:20:53.436]    __ap=0x00000000
[00:20:53.436]    __traceout=0x00000000      (Trace Disabled)
[00:20:53.436]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:20:53.436]    __FlashAddr=0x00000000
[00:20:53.436]    __FlashLen=0x00000000
[00:20:53.436]    __FlashArg=0x00000000
[00:20:53.437]    __FlashOp=0x00000000
[00:20:53.437]    __Result=0x00000000
[00:20:53.437]  </debugvars>
[00:20:53.437]  
[00:20:53.437]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:20:53.437]    <block atomic="false" info="">
[00:20:53.437]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:20:53.437]        // -> [isSWJ <= 0x00000001]
[00:20:53.437]      __var hasDormant = __protocol & 0x00020000;
[00:20:53.439]        // -> [hasDormant <= 0x00000000]
[00:20:53.439]      __var protType   = __protocol & 0x0000FFFF;
[00:20:53.439]        // -> [protType <= 0x00000002]
[00:20:53.439]    </block>
[00:20:53.439]    <control if="protType == 1" while="" timeout="0" info="">
[00:20:53.439]      // if-block "protType == 1"
[00:20:53.439]        // =>  FALSE
[00:20:53.439]      // skip if-block "protType == 1"
[00:20:53.439]    </control>
[00:20:53.439]    <control if="protType == 2" while="" timeout="0" info="">
[00:20:53.440]      // if-block "protType == 2"
[00:20:53.440]        // =>  TRUE
[00:20:53.440]      <control if="isSWJ" while="" timeout="0" info="">
[00:20:53.440]        // if-block "isSWJ"
[00:20:53.440]          // =>  TRUE
[00:20:53.440]        <control if="hasDormant" while="" timeout="0" info="">
[00:20:53.440]          // if-block "hasDormant"
[00:20:53.440]            // =>  FALSE
[00:20:53.440]          // skip if-block "hasDormant"
[00:20:53.441]        </control>
[00:20:53.441]        <control if="!hasDormant" while="" timeout="0" info="">
[00:20:53.441]          // if-block "!hasDormant"
[00:20:53.441]            // =>  TRUE
[00:20:53.441]          <block atomic="false" info="">
[00:20:53.441]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:20:53.446]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:20:53.446]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:20:53.450]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:20:53.450]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:20:53.451]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:20:53.451]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:20:53.453]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:20:53.453]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:20:53.454]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:20:53.455]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:20:53.456]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:20:53.456]          </block>
[00:20:53.456]          // end if-block "!hasDormant"
[00:20:53.456]        </control>
[00:20:53.456]        // end if-block "isSWJ"
[00:20:53.456]      </control>
[00:20:53.456]      <control if="!isSWJ" while="" timeout="0" info="">
[00:20:53.456]        // if-block "!isSWJ"
[00:20:53.456]          // =>  FALSE
[00:20:53.456]        // skip if-block "!isSWJ"
[00:20:53.456]      </control>
[00:20:53.456]      <block atomic="false" info="">
[00:20:53.456]        ReadDP(0x0);
[00:20:53.459]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:20:53.459]      </block>
[00:20:53.459]      // end if-block "protType == 2"
[00:20:53.459]    </control>
[00:20:53.459]  </sequence>
[00:20:53.460]  
[00:20:53.462]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:20:53.462]  
[00:20:53.462]  <debugvars>
[00:20:53.462]    // Pre-defined
[00:20:53.462]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:20:53.462]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:20:53.462]    __dp=0x00000000
[00:20:53.462]    __ap=0x00000000
[00:20:53.462]    __traceout=0x00000000      (Trace Disabled)
[00:20:53.462]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:20:53.463]    __FlashAddr=0x00000000
[00:20:53.463]    __FlashLen=0x00000000
[00:20:53.463]    __FlashArg=0x00000000
[00:20:53.463]    __FlashOp=0x00000000
[00:20:53.463]    __Result=0x00000000
[00:20:53.463]  </debugvars>
[00:20:53.463]  
[00:20:53.463]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:20:53.463]    <block atomic="false" info="">
[00:20:53.463]      __var SW_DP_ABORT       = 0x0;
[00:20:53.463]        // -> [SW_DP_ABORT <= 0x00000000]
[00:20:53.463]      __var DP_CTRL_STAT      = 0x4;
[00:20:53.463]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:20:53.463]      __var DP_SELECT         = 0x8;
[00:20:53.463]        // -> [DP_SELECT <= 0x00000008]
[00:20:53.463]      __var powered_down      = 0;
[00:20:53.463]        // -> [powered_down <= 0x00000000]
[00:20:53.463]      WriteDP(DP_SELECT, 0x00000000);
[00:20:53.463]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:20:53.463]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:20:53.463]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:20:53.463]        // -> [powered_down <= 0x00000001]
[00:20:53.469]    </block>
[00:20:53.469]    <control if="powered_down" while="" timeout="0" info="">
[00:20:53.469]      // if-block "powered_down"
[00:20:53.469]        // =>  TRUE
[00:20:53.469]      <block atomic="false" info="">
[00:20:53.469]        Message(0, "Debug/System power-up request sent");
[00:20:53.471]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:20:53.473]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:20:53.473]      </block>
[00:20:53.473]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:20:53.474]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:20:53.475]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:20:53.476]        // while-condition  =>  FALSE
[00:20:53.476]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:20:53.476]      </control>
[00:20:53.476]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:20:53.476]        // if-block "(__protocol & 0xFFFF) == 1"
[00:20:53.476]          // =>  FALSE
[00:20:53.476]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:20:53.476]      </control>
[00:20:53.476]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:20:53.476]        // if-block "(__protocol & 0xFFFF) == 2"
[00:20:53.476]          // =>  TRUE
[00:20:53.477]        <block atomic="false" info="">
[00:20:53.477]          Message(0, "executing SWD power up");
[00:20:53.478]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:20:53.480]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:20:53.480]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:20:53.481]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:20:53.481]        </block>
[00:20:53.482]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:20:53.482]      </control>
[00:20:53.482]      // end if-block "powered_down"
[00:20:53.482]    </control>
[00:20:53.483]    <block atomic="false" info="">
[00:20:53.483]      __var DEBUG_PORT_VAL    = 0;
[00:20:53.483]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:20:53.483]      __var ACCESS_POINT_VAL  = 0;
[00:20:53.483]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:20:53.483]      __ap = 1; 
[00:20:53.483]        // -> [__ap <= 0x00000001]
[00:20:53.483]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:20:53.486]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:20:53.487]      __ap = 4;
[00:20:53.487]        // -> [__ap <= 0x00000004]
[00:20:53.487]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:20:53.490]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:20:53.490]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:20:53.490]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:20:53.495]    </block>
[00:20:53.496]    <block atomic="false" info="">
[00:20:53.496]      __var nReset = 0x80;
[00:20:53.496]        // -> [nReset <= 0x00000080]
[00:20:53.496]      __var canReadPins = 0;
[00:20:53.496]        // -> [canReadPins <= 0x00000000]
[00:20:53.496]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:20:53.497]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:20:53.497]        // -> [canReadPins <= 0x00000001]
[00:20:53.497]    </block>
[00:20:53.497]    <control if="" while="1" timeout="200" info="">
[00:20:53.497]      // while "1"  (timeout="200")
[00:20:53.497]      // while-condition  =>  TRUE
[00:20:53.497]      // while "1"  (timeout="200")
[00:20:53.498]      // while-condition  =>  TRUE
[00:20:53.498]      // while "1"  (timeout="200")
[00:20:53.498]      // while-condition  =>  TRUE
[00:20:53.498]      // while "1"  (timeout="200")
[00:20:53.499]      // while-condition  =>  TRUE
[00:20:53.499]      // while "1"  (timeout="200")
[00:20:53.499]      // while-condition  =>  TRUE
[00:20:53.499]      // while "1"  (timeout="200")
[00:20:53.499]      // while-condition  =>  TRUE
[00:20:53.499]      // while "1"  (timeout="200")
[00:20:53.499]      // while-condition  =>  TRUE
[00:20:53.499]      // while "1"  (timeout="200")
[00:20:53.499]      // while-condition  =>  TRUE
[00:20:53.499]      // while "1"  (timeout="200")
[00:20:53.500]      // while-condition  =>  TRUE
[00:20:53.500]      // while "1"  (timeout="200")
[00:20:53.500]      // while  =>  TIMEOUT
[00:20:53.500]      // end while "1"
[00:20:53.500]    </control>
[00:20:53.500]    <control if="canReadPins" while="" timeout="0" info="">
[00:20:53.500]      // if-block "canReadPins"
[00:20:53.500]        // =>  TRUE
[00:20:53.500]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:20:53.500]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:20:53.501]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:20:53.501]        // while-condition  =>  FALSE
[00:20:53.501]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:20:53.501]      </control>
[00:20:53.501]      // end if-block "canReadPins"
[00:20:53.501]    </control>
[00:20:53.501]    <control if="!canReadPins" while="" timeout="0" info="">
[00:20:53.501]      // if-block "!canReadPins"
[00:20:53.501]        // =>  FALSE
[00:20:53.501]      // skip if-block "!canReadPins"
[00:20:53.504]    </control>
[00:20:53.504]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:20:53.504]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:20:53.504]        // =>  TRUE
[00:20:53.504]      <block atomic="false" info="">
[00:20:53.504]        WriteAP(0x00, 0x190008);
[00:20:53.507]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:20:53.507]        WriteAP(0xF0, 0x01);
[00:20:53.512]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:20:53.512]      </block>
[00:20:53.513]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:20:53.513]    </control>
[00:20:53.513]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:20:53.514]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:20:53.514]        // =>  FALSE
[00:20:53.514]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:20:53.514]    </control>
[00:20:53.514]    <block atomic="false" info="">
[00:20:53.514]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:20:53.517]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:20:53.518]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:20:53.518]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:20:53.520]      __ap = 0; //lets make sure we reset the access point selection
[00:20:53.520]        // -> [__ap <= 0x00000000]
[00:20:53.521]    </block>
[00:20:53.521]  </sequence>
[00:20:53.521]  
[00:20:53.543]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:20:53.543]  
[00:20:53.543]  <debugvars>
[00:20:53.543]    // Pre-defined
[00:20:53.543]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:20:53.543]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:20:53.543]    __dp=0x00000000
[00:20:53.544]    __ap=0x00000000
[00:20:53.544]    __traceout=0x00000000      (Trace Disabled)
[00:20:53.544]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:20:53.544]    __FlashAddr=0x00000000
[00:20:53.544]    __FlashLen=0x00000000
[00:20:53.544]    __FlashArg=0x00000000
[00:20:53.544]    __FlashOp=0x00000000
[00:20:53.544]    __Result=0x00000000
[00:20:53.544]  </debugvars>
[00:20:53.545]  
[00:20:53.545]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:20:53.545]    <block atomic="false" info="">
[00:20:53.545]      __var deviceID = 0;
[00:20:53.545]        // -> [deviceID <= 0x00000000]
[00:20:53.545]      __var version = 0;
[00:20:53.545]        // -> [version <= 0x00000000]
[00:20:53.545]      __var partNum = 0;
[00:20:53.545]        // -> [partNum <= 0x00000000]
[00:20:53.545]      __var manuf = 0;
[00:20:53.545]        // -> [manuf <= 0x00000000]
[00:20:53.545]      __var isMSPM0G1X0X_G3X0X = 0;
[00:20:53.545]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:20:53.546]      __var isProduction = 0;
[00:20:53.546]        // -> [isProduction <= 0x00000000]
[00:20:53.546]      __var continueId = 0;
[00:20:53.546]        // -> [continueId <= 0x00000000]
[00:20:53.547]      deviceID =   Read32(0x41C40004);
[00:20:53.553]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:20:53.553]        // -> [deviceID <= 0x2BB8802F]
[00:20:53.553]      version = deviceID >> 28;
[00:20:53.553]        // -> [version <= 0x00000002]
[00:20:53.554]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:20:53.554]        // -> [partNum <= 0x0000BB88]
[00:20:53.554]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:20:53.554]        // -> [manuf <= 0x00000017]
[00:20:53.554]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:20:53.554]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:20:53.554]      isProduction = (version > 0);
[00:20:53.555]        // -> [isProduction <= 0x00000001]
[00:20:53.555]    </block>
[00:20:53.555]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:20:53.555]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:20:53.555]        // =>  FALSE
[00:20:53.555]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:20:53.555]    </control>
[00:20:53.555]    <control if="continueId == 4" while="" timeout="0" info="">
[00:20:53.555]      // if-block "continueId == 4"
[00:20:53.555]        // =>  FALSE
[00:20:53.555]      // skip if-block "continueId == 4"
[00:20:53.556]    </control>
[00:20:53.556]    <control if="!isProduction" while="" timeout="0" info="">
[00:20:53.556]      // if-block "!isProduction"
[00:20:53.556]        // =>  FALSE
[00:20:53.556]      // skip if-block "!isProduction"
[00:20:53.556]    </control>
[00:20:53.556]  </sequence>
[00:20:53.556]  
[00:21:03.596]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:21:03.596]  
[00:21:03.596]  <debugvars>
[00:21:03.597]    // Pre-defined
[00:21:03.597]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:21:03.597]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:21:03.597]    __dp=0x00000000
[00:21:03.597]    __ap=0x00000000
[00:21:03.597]    __traceout=0x00000000      (Trace Disabled)
[00:21:03.597]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:21:03.597]    __FlashAddr=0x00000000
[00:21:03.597]    __FlashLen=0x00000000
[00:21:03.597]    __FlashArg=0x00000000
[00:21:03.597]    __FlashOp=0x00000000
[00:21:03.597]    __Result=0x00000000
[00:21:03.597]  </debugvars>
[00:21:03.597]  
[00:21:03.597]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:21:03.597]    <block atomic="false" info="">
[00:21:03.597]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:21:03.597]        // -> [isSWJ <= 0x00000001]
[00:21:03.597]      __var hasDormant = __protocol & 0x00020000;
[00:21:03.597]        // -> [hasDormant <= 0x00000000]
[00:21:03.599]      __var protType   = __protocol & 0x0000FFFF;
[00:21:03.599]        // -> [protType <= 0x00000002]
[00:21:03.599]    </block>
[00:21:03.599]    <control if="protType == 1" while="" timeout="0" info="">
[00:21:03.599]      // if-block "protType == 1"
[00:21:03.599]        // =>  FALSE
[00:21:03.599]      // skip if-block "protType == 1"
[00:21:03.599]    </control>
[00:21:03.599]    <control if="protType == 2" while="" timeout="0" info="">
[00:21:03.599]      // if-block "protType == 2"
[00:21:03.599]        // =>  TRUE
[00:21:03.599]      <control if="isSWJ" while="" timeout="0" info="">
[00:21:03.600]        // if-block "isSWJ"
[00:21:03.600]          // =>  TRUE
[00:21:03.600]        <control if="hasDormant" while="" timeout="0" info="">
[00:21:03.600]          // if-block "hasDormant"
[00:21:03.600]            // =>  FALSE
[00:21:03.600]          // skip if-block "hasDormant"
[00:21:03.600]        </control>
[00:21:03.600]        <control if="!hasDormant" while="" timeout="0" info="">
[00:21:03.600]          // if-block "!hasDormant"
[00:21:03.601]            // =>  TRUE
[00:21:03.601]          <block atomic="false" info="">
[00:21:03.601]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:21:03.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:21:03.603]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:21:03.603]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:21:03.603]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:21:03.603]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:21:03.603]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:21:03.608]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:21:03.608]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:21:03.610]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:21:03.610]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:21:03.611]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:21:03.611]          </block>
[00:21:03.611]          // end if-block "!hasDormant"
[00:21:03.611]        </control>
[00:21:03.612]        // end if-block "isSWJ"
[00:21:03.612]      </control>
[00:21:03.612]      <control if="!isSWJ" while="" timeout="0" info="">
[00:21:03.612]        // if-block "!isSWJ"
[00:21:03.612]          // =>  FALSE
[00:21:03.612]        // skip if-block "!isSWJ"
[00:21:03.612]      </control>
[00:21:03.612]      <block atomic="false" info="">
[00:21:03.612]        ReadDP(0x0);
[00:21:03.619]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:21:03.619]      </block>
[00:21:03.619]      // end if-block "protType == 2"
[00:21:03.619]    </control>
[00:21:03.619]  </sequence>
[00:21:03.619]  
[00:21:03.622]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:21:03.622]  
[00:21:03.622]  <debugvars>
[00:21:03.622]    // Pre-defined
[00:21:03.623]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:21:03.623]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:21:03.623]    __dp=0x00000000
[00:21:03.623]    __ap=0x00000000
[00:21:03.623]    __traceout=0x00000000      (Trace Disabled)
[00:21:03.623]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:21:03.623]    __FlashAddr=0x00000000
[00:21:03.623]    __FlashLen=0x00000000
[00:21:03.623]    __FlashArg=0x00000000
[00:21:03.624]    __FlashOp=0x00000000
[00:21:03.624]    __Result=0x00000000
[00:21:03.625]  </debugvars>
[00:21:03.625]  
[00:21:03.625]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:21:03.625]    <block atomic="false" info="">
[00:21:03.625]      __var SW_DP_ABORT       = 0x0;
[00:21:03.625]        // -> [SW_DP_ABORT <= 0x00000000]
[00:21:03.625]      __var DP_CTRL_STAT      = 0x4;
[00:21:03.625]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:21:03.625]      __var DP_SELECT         = 0x8;
[00:21:03.625]        // -> [DP_SELECT <= 0x00000008]
[00:21:03.625]      __var powered_down      = 0;
[00:21:03.625]        // -> [powered_down <= 0x00000000]
[00:21:03.625]      WriteDP(DP_SELECT, 0x00000000);
[00:21:03.627]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:21:03.627]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:21:03.628]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:21:03.629]        // -> [powered_down <= 0x00000001]
[00:21:03.629]    </block>
[00:21:03.629]    <control if="powered_down" while="" timeout="0" info="">
[00:21:03.629]      // if-block "powered_down"
[00:21:03.630]        // =>  TRUE
[00:21:03.630]      <block atomic="false" info="">
[00:21:03.630]        Message(0, "Debug/System power-up request sent");
[00:21:03.632]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:21:03.635]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:21:03.635]      </block>
[00:21:03.636]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:21:03.636]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:21:03.637]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:21:03.637]        // while-condition  =>  FALSE
[00:21:03.637]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:21:03.637]      </control>
[00:21:03.637]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:21:03.637]        // if-block "(__protocol & 0xFFFF) == 1"
[00:21:03.637]          // =>  FALSE
[00:21:03.637]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:21:03.637]      </control>
[00:21:03.637]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:21:03.637]        // if-block "(__protocol & 0xFFFF) == 2"
[00:21:03.637]          // =>  TRUE
[00:21:03.639]        <block atomic="false" info="">
[00:21:03.639]          Message(0, "executing SWD power up");
[00:21:03.641]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:21:03.643]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:21:03.643]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:21:03.645]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:21:03.646]        </block>
[00:21:03.646]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:21:03.646]      </control>
[00:21:03.646]      // end if-block "powered_down"
[00:21:03.646]    </control>
[00:21:03.646]    <block atomic="false" info="">
[00:21:03.646]      __var DEBUG_PORT_VAL    = 0;
[00:21:03.646]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:21:03.647]      __var ACCESS_POINT_VAL  = 0;
[00:21:03.647]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:21:03.647]      __ap = 1; 
[00:21:03.647]        // -> [__ap <= 0x00000001]
[00:21:03.647]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:21:03.651]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:21:03.651]      __ap = 4;
[00:21:03.651]        // -> [__ap <= 0x00000004]
[00:21:03.651]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:21:03.654]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:21:03.654]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:21:03.654]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:21:03.656]    </block>
[00:21:03.656]    <block atomic="false" info="">
[00:21:03.656]      __var nReset = 0x80;
[00:21:03.656]        // -> [nReset <= 0x00000080]
[00:21:03.656]      __var canReadPins = 0;
[00:21:03.656]        // -> [canReadPins <= 0x00000000]
[00:21:03.657]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:21:03.659]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:21:03.659]        // -> [canReadPins <= 0x00000001]
[00:21:03.659]    </block>
[00:21:03.659]    <control if="" while="1" timeout="200" info="">
[00:21:03.659]      // while "1"  (timeout="200")
[00:21:03.659]      // while-condition  =>  TRUE
[00:21:03.659]      // while "1"  (timeout="200")
[00:21:03.660]      // while-condition  =>  TRUE
[00:21:03.660]      // while "1"  (timeout="200")
[00:21:03.660]      // while-condition  =>  TRUE
[00:21:03.660]      // while "1"  (timeout="200")
[00:21:03.660]      // while-condition  =>  TRUE
[00:21:03.660]      // while "1"  (timeout="200")
[00:21:03.660]      // while-condition  =>  TRUE
[00:21:03.660]      // while "1"  (timeout="200")
[00:21:03.660]      // while-condition  =>  TRUE
[00:21:03.660]      // while "1"  (timeout="200")
[00:21:03.660]      // while-condition  =>  TRUE
[00:21:03.660]      // while "1"  (timeout="200")
[00:21:03.661]      // while-condition  =>  TRUE
[00:21:03.661]      // while "1"  (timeout="200")
[00:21:03.661]      // while-condition  =>  TRUE
[00:21:03.661]      // while "1"  (timeout="200")
[00:21:03.661]      // while-condition  =>  TRUE
[00:21:03.661]      // while "1"  (timeout="200")
[00:21:03.661]      // while-condition  =>  TRUE
[00:21:03.661]      // while "1"  (timeout="200")
[00:21:03.661]      // while-condition  =>  TRUE
[00:21:03.661]      // while "1"  (timeout="200")
[00:21:03.661]      // while-condition  =>  TRUE
[00:21:03.661]      // while "1"  (timeout="200")
[00:21:03.661]      // while-condition  =>  TRUE
[00:21:03.661]      // while "1"  (timeout="200")
[00:21:03.661]      // while-condition  =>  TRUE
[00:21:03.661]      // while "1"  (timeout="200")
[00:21:03.661]      // while-condition  =>  TRUE
[00:21:03.662]      // while "1"  (timeout="200")
[00:21:03.662]      // while-condition  =>  TRUE
[00:21:03.662]      // while "1"  (timeout="200")
[00:21:03.662]      // while-condition  =>  TRUE
[00:21:03.662]      // while "1"  (timeout="200")
[00:21:03.662]      // while-condition  =>  TRUE
[00:21:03.662]      // while "1"  (timeout="200")
[00:21:03.662]      // while-condition  =>  TRUE
[00:21:03.662]      // while "1"  (timeout="200")
[00:21:03.662]      // while-condition  =>  TRUE
[00:21:03.662]      // while "1"  (timeout="200")
[00:21:03.663]      // while-condition  =>  TRUE
[00:21:03.663]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.664]      // while-condition  =>  TRUE
[00:21:03.664]      // while "1"  (timeout="200")
[00:21:03.669]      // while-condition  =>  TRUE
[00:21:03.669]      // while "1"  (timeout="200")
[00:21:03.669]      // while-condition  =>  TRUE
[00:21:03.669]      // while "1"  (timeout="200")
[00:21:03.669]      // while-condition  =>  TRUE
[00:21:03.670]      // while "1"  (timeout="200")
[00:21:03.670]      // while-condition  =>  TRUE
[00:21:03.670]      // while "1"  (timeout="200")
[00:21:03.671]      // while-condition  =>  TRUE
[00:21:03.671]      // while "1"  (timeout="200")
[00:21:03.671]      // while-condition  =>  TRUE
[00:21:03.671]      // while "1"  (timeout="200")
[00:21:03.671]      // while-condition  =>  TRUE
[00:21:03.671]      // while "1"  (timeout="200")
[00:21:03.671]      // while-condition  =>  TRUE
[00:21:03.671]      // while "1"  (timeout="200")
[00:21:03.672]      // while-condition  =>  TRUE
[00:21:03.672]      // while "1"  (timeout="200")
[00:21:03.672]      // while  =>  TIMEOUT
[00:21:03.672]      // end while "1"
[00:21:03.672]    </control>
[00:21:03.672]    <control if="canReadPins" while="" timeout="0" info="">
[00:21:03.672]      // if-block "canReadPins"
[00:21:03.672]        // =>  TRUE
[00:21:03.673]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:21:03.673]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:21:03.675]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:21:03.676]        // while-condition  =>  FALSE
[00:21:03.676]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:21:03.676]      </control>
[00:21:03.676]      // end if-block "canReadPins"
[00:21:03.676]    </control>
[00:21:03.676]    <control if="!canReadPins" while="" timeout="0" info="">
[00:21:03.676]      // if-block "!canReadPins"
[00:21:03.676]        // =>  FALSE
[00:21:03.676]      // skip if-block "!canReadPins"
[00:21:03.676]    </control>
[00:21:03.677]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:21:03.677]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:21:03.677]        // =>  TRUE
[00:21:03.677]      <block atomic="false" info="">
[00:21:03.677]        WriteAP(0x00, 0x190008);
[00:21:03.679]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:21:03.679]        WriteAP(0xF0, 0x01);
[00:21:03.682]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:21:03.683]      </block>
[00:21:03.683]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:21:03.683]    </control>
[00:21:03.683]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:21:03.683]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:21:03.683]        // =>  FALSE
[00:21:03.683]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:21:03.683]    </control>
[00:21:03.684]    <block atomic="false" info="">
[00:21:03.684]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:21:03.687]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:21:03.687]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:21:03.687]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:21:03.688]      __ap = 0; //lets make sure we reset the access point selection
[00:21:03.688]        // -> [__ap <= 0x00000000]
[00:21:03.688]    </block>
[00:21:03.689]  </sequence>
[00:21:03.689]  
[00:21:03.711]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:21:03.711]  
[00:21:03.711]  <debugvars>
[00:21:03.711]    // Pre-defined
[00:21:03.711]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:21:03.711]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:21:03.712]    __dp=0x00000000
[00:21:03.712]    __ap=0x00000000
[00:21:03.712]    __traceout=0x00000000      (Trace Disabled)
[00:21:03.712]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:21:03.712]    __FlashAddr=0x00000000
[00:21:03.713]    __FlashLen=0x00000000
[00:21:03.713]    __FlashArg=0x00000000
[00:21:03.713]    __FlashOp=0x00000000
[00:21:03.713]    __Result=0x00000000
[00:21:03.713]  </debugvars>
[00:21:03.713]  
[00:21:03.714]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:21:03.714]    <block atomic="false" info="">
[00:21:03.714]      __var deviceID = 0;
[00:21:03.714]        // -> [deviceID <= 0x00000000]
[00:21:03.714]      __var version = 0;
[00:21:03.714]        // -> [version <= 0x00000000]
[00:21:03.714]      __var partNum = 0;
[00:21:03.714]        // -> [partNum <= 0x00000000]
[00:21:03.714]      __var manuf = 0;
[00:21:03.714]        // -> [manuf <= 0x00000000]
[00:21:03.714]      __var isMSPM0G1X0X_G3X0X = 0;
[00:21:03.714]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:21:03.714]      __var isProduction = 0;
[00:21:03.715]        // -> [isProduction <= 0x00000000]
[00:21:03.715]      __var continueId = 0;
[00:21:03.715]        // -> [continueId <= 0x00000000]
[00:21:03.715]      deviceID =   Read32(0x41C40004);
[00:21:03.719]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:21:03.720]        // -> [deviceID <= 0x2BB8802F]
[00:21:03.720]      version = deviceID >> 28;
[00:21:03.720]        // -> [version <= 0x00000002]
[00:21:03.720]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:21:03.720]        // -> [partNum <= 0x0000BB88]
[00:21:03.720]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:21:03.720]        // -> [manuf <= 0x00000017]
[00:21:03.720]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:21:03.720]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:21:03.721]      isProduction = (version > 0);
[00:21:03.721]        // -> [isProduction <= 0x00000001]
[00:21:03.721]    </block>
[00:21:03.721]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:21:03.721]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:21:03.721]        // =>  FALSE
[00:21:03.721]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:21:03.721]    </control>
[00:21:03.721]    <control if="continueId == 4" while="" timeout="0" info="">
[00:21:03.721]      // if-block "continueId == 4"
[00:21:03.721]        // =>  FALSE
[00:21:03.721]      // skip if-block "continueId == 4"
[00:21:03.723]    </control>
[00:21:03.723]    <control if="!isProduction" while="" timeout="0" info="">
[00:21:03.723]      // if-block "!isProduction"
[00:21:03.723]        // =>  FALSE
[00:21:03.723]      // skip if-block "!isProduction"
[00:21:03.723]    </control>
[00:21:03.723]  </sequence>
[00:21:03.723]  
[00:23:20.183]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:23:20.183]  
[00:23:20.183]  <debugvars>
[00:23:20.183]    // Pre-defined
[00:23:20.183]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:20.183]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:23:20.183]    __dp=0x00000000
[00:23:20.183]    __ap=0x00000000
[00:23:20.183]    __traceout=0x00000000      (Trace Disabled)
[00:23:20.184]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:20.184]    __FlashAddr=0x00000000
[00:23:20.184]    __FlashLen=0x00000000
[00:23:20.184]    __FlashArg=0x00000000
[00:23:20.184]    __FlashOp=0x00000000
[00:23:20.184]    __Result=0x00000000
[00:23:20.184]  </debugvars>
[00:23:20.184]  
[00:23:20.184]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:23:20.184]    <block atomic="false" info="">
[00:23:20.185]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:23:20.185]        // -> [isSWJ <= 0x00000001]
[00:23:20.185]      __var hasDormant = __protocol & 0x00020000;
[00:23:20.185]        // -> [hasDormant <= 0x00000000]
[00:23:20.185]      __var protType   = __protocol & 0x0000FFFF;
[00:23:20.185]        // -> [protType <= 0x00000002]
[00:23:20.185]    </block>
[00:23:20.185]    <control if="protType == 1" while="" timeout="0" info="">
[00:23:20.185]      // if-block "protType == 1"
[00:23:20.185]        // =>  FALSE
[00:23:20.185]      // skip if-block "protType == 1"
[00:23:20.186]    </control>
[00:23:20.186]    <control if="protType == 2" while="" timeout="0" info="">
[00:23:20.186]      // if-block "protType == 2"
[00:23:20.186]        // =>  TRUE
[00:23:20.186]      <control if="isSWJ" while="" timeout="0" info="">
[00:23:20.186]        // if-block "isSWJ"
[00:23:20.186]          // =>  TRUE
[00:23:20.186]        <control if="hasDormant" while="" timeout="0" info="">
[00:23:20.186]          // if-block "hasDormant"
[00:23:20.186]            // =>  FALSE
[00:23:20.187]          // skip if-block "hasDormant"
[00:23:20.187]        </control>
[00:23:20.187]        <control if="!hasDormant" while="" timeout="0" info="">
[00:23:20.187]          // if-block "!hasDormant"
[00:23:20.187]            // =>  TRUE
[00:23:20.187]          <block atomic="false" info="">
[00:23:20.187]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:23:20.188]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:20.189]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:23:20.190]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:23:20.190]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:23:20.191]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:20.191]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:23:20.192]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:23:20.193]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:23:20.193]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:20.195]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:23:20.196]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:23:20.196]          </block>
[00:23:20.196]          // end if-block "!hasDormant"
[00:23:20.196]        </control>
[00:23:20.197]        // end if-block "isSWJ"
[00:23:20.197]      </control>
[00:23:20.197]      <control if="!isSWJ" while="" timeout="0" info="">
[00:23:20.197]        // if-block "!isSWJ"
[00:23:20.197]          // =>  FALSE
[00:23:20.197]        // skip if-block "!isSWJ"
[00:23:20.197]      </control>
[00:23:20.197]      <block atomic="false" info="">
[00:23:20.197]        ReadDP(0x0);
[00:23:20.200]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:23:20.200]      </block>
[00:23:20.200]      // end if-block "protType == 2"
[00:23:20.200]    </control>
[00:23:20.200]  </sequence>
[00:23:20.200]  
[00:23:20.203]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:23:20.203]  
[00:23:20.203]  <debugvars>
[00:23:20.203]    // Pre-defined
[00:23:20.204]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:20.204]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:23:20.204]    __dp=0x00000000
[00:23:20.204]    __ap=0x00000000
[00:23:20.204]    __traceout=0x00000000      (Trace Disabled)
[00:23:20.204]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:20.204]    __FlashAddr=0x00000000
[00:23:20.204]    __FlashLen=0x00000000
[00:23:20.205]    __FlashArg=0x00000000
[00:23:20.205]    __FlashOp=0x00000000
[00:23:20.205]    __Result=0x00000000
[00:23:20.205]  </debugvars>
[00:23:20.205]  
[00:23:20.205]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:23:20.205]    <block atomic="false" info="">
[00:23:20.205]      __var SW_DP_ABORT       = 0x0;
[00:23:20.205]        // -> [SW_DP_ABORT <= 0x00000000]
[00:23:20.206]      __var DP_CTRL_STAT      = 0x4;
[00:23:20.206]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:23:20.206]      __var DP_SELECT         = 0x8;
[00:23:20.206]        // -> [DP_SELECT <= 0x00000008]
[00:23:20.206]      __var powered_down      = 0;
[00:23:20.206]        // -> [powered_down <= 0x00000000]
[00:23:20.206]      WriteDP(DP_SELECT, 0x00000000);
[00:23:20.208]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:23:20.208]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:23:20.209]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:23:20.209]        // -> [powered_down <= 0x00000001]
[00:23:20.210]    </block>
[00:23:20.210]    <control if="powered_down" while="" timeout="0" info="">
[00:23:20.210]      // if-block "powered_down"
[00:23:20.210]        // =>  TRUE
[00:23:20.210]      <block atomic="false" info="">
[00:23:20.210]        Message(0, "Debug/System power-up request sent");
[00:23:20.214]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:23:20.216]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:23:20.216]      </block>
[00:23:20.216]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:23:20.216]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:23:20.218]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:23:20.218]        // while-condition  =>  FALSE
[00:23:20.218]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:23:20.218]      </control>
[00:23:20.218]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:23:20.218]        // if-block "(__protocol & 0xFFFF) == 1"
[00:23:20.218]          // =>  FALSE
[00:23:20.218]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:23:20.219]      </control>
[00:23:20.219]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:23:20.219]        // if-block "(__protocol & 0xFFFF) == 2"
[00:23:20.219]          // =>  TRUE
[00:23:20.219]        <block atomic="false" info="">
[00:23:20.219]          Message(0, "executing SWD power up");
[00:23:20.222]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:23:20.225]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:23:20.225]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:23:20.227]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:23:20.227]        </block>
[00:23:20.227]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:23:20.227]      </control>
[00:23:20.227]      // end if-block "powered_down"
[00:23:20.227]    </control>
[00:23:20.228]    <block atomic="false" info="">
[00:23:20.228]      __var DEBUG_PORT_VAL    = 0;
[00:23:20.228]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:23:20.228]      __var ACCESS_POINT_VAL  = 0;
[00:23:20.228]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:23:20.228]      __ap = 1; 
[00:23:20.228]        // -> [__ap <= 0x00000001]
[00:23:20.228]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:23:20.232]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:23:20.232]      __ap = 4;
[00:23:20.232]        // -> [__ap <= 0x00000004]
[00:23:20.232]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:23:20.235]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:23:20.235]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:23:20.235]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:23:20.238]    </block>
[00:23:20.238]    <block atomic="false" info="">
[00:23:20.238]      __var nReset = 0x80;
[00:23:20.238]        // -> [nReset <= 0x00000080]
[00:23:20.238]      __var canReadPins = 0;
[00:23:20.238]        // -> [canReadPins <= 0x00000000]
[00:23:20.239]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:23:20.240]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:23:20.240]        // -> [canReadPins <= 0x00000001]
[00:23:20.240]    </block>
[00:23:20.240]    <control if="" while="1" timeout="200" info="">
[00:23:20.240]      // while "1"  (timeout="200")
[00:23:20.240]      // while-condition  =>  TRUE
[00:23:20.240]      // while "1"  (timeout="200")
[00:23:20.240]      // while-condition  =>  TRUE
[00:23:20.240]      // while "1"  (timeout="200")
[00:23:20.242]      // while-condition  =>  TRUE
[00:23:20.242]      // while "1"  (timeout="200")
[00:23:20.242]      // while-condition  =>  TRUE
[00:23:20.242]      // while "1"  (timeout="200")
[00:23:20.242]      // while-condition  =>  TRUE
[00:23:20.242]      // while "1"  (timeout="200")
[00:23:20.242]      // while-condition  =>  TRUE
[00:23:20.242]      // while "1"  (timeout="200")
[00:23:20.242]      // while-condition  =>  TRUE
[00:23:20.242]      // while "1"  (timeout="200")
[00:23:20.242]      // while-condition  =>  TRUE
[00:23:20.242]      // while "1"  (timeout="200")
[00:23:20.243]      // while-condition  =>  TRUE
[00:23:20.243]      // while "1"  (timeout="200")
[00:23:20.243]      // while-condition  =>  TRUE
[00:23:20.243]      // while "1"  (timeout="200")
[00:23:20.243]      // while-condition  =>  TRUE
[00:23:20.243]      // while "1"  (timeout="200")
[00:23:20.243]      // while-condition  =>  TRUE
[00:23:20.243]      // while "1"  (timeout="200")
[00:23:20.243]      // while-condition  =>  TRUE
[00:23:20.244]      // while "1"  (timeout="200")
[00:23:20.244]      // while-condition  =>  TRUE
[00:23:20.244]      // while "1"  (timeout="200")
[00:23:20.244]      // while-condition  =>  TRUE
[00:23:20.244]      // while "1"  (timeout="200")
[00:23:20.245]      // while-condition  =>  TRUE
[00:23:20.245]      // while "1"  (timeout="200")
[00:23:20.245]      // while-condition  =>  TRUE
[00:23:20.245]      // while "1"  (timeout="200")
[00:23:20.245]      // while-condition  =>  TRUE
[00:23:20.245]      // while "1"  (timeout="200")
[00:23:20.245]      // while-condition  =>  TRUE
[00:23:20.245]      // while "1"  (timeout="200")
[00:23:20.245]      // while-condition  =>  TRUE
[00:23:20.246]      // while "1"  (timeout="200")
[00:23:20.246]      // while-condition  =>  TRUE
[00:23:20.246]      // while "1"  (timeout="200")
[00:23:20.246]      // while-condition  =>  TRUE
[00:23:20.246]      // while "1"  (timeout="200")
[00:23:20.246]      // while-condition  =>  TRUE
[00:23:20.246]      // while "1"  (timeout="200")
[00:23:20.246]      // while-condition  =>  TRUE
[00:23:20.246]      // while "1"  (timeout="200")
[00:23:20.247]      // while-condition  =>  TRUE
[00:23:20.247]      // while "1"  (timeout="200")
[00:23:20.247]      // while-condition  =>  TRUE
[00:23:20.247]      // while "1"  (timeout="200")
[00:23:20.247]      // while-condition  =>  TRUE
[00:23:20.247]      // while "1"  (timeout="200")
[00:23:20.247]      // while-condition  =>  TRUE
[00:23:20.247]      // while "1"  (timeout="200")
[00:23:20.248]      // while-condition  =>  TRUE
[00:23:20.248]      // while "1"  (timeout="200")
[00:23:20.248]      // while-condition  =>  TRUE
[00:23:20.248]      // while "1"  (timeout="200")
[00:23:20.248]      // while-condition  =>  TRUE
[00:23:20.248]      // while "1"  (timeout="200")
[00:23:20.249]      // while-condition  =>  TRUE
[00:23:20.249]      // while "1"  (timeout="200")
[00:23:20.249]      // while-condition  =>  TRUE
[00:23:20.249]      // while "1"  (timeout="200")
[00:23:20.249]      // while-condition  =>  TRUE
[00:23:20.249]      // while "1"  (timeout="200")
[00:23:20.250]      // while-condition  =>  TRUE
[00:23:20.250]      // while "1"  (timeout="200")
[00:23:20.250]      // while  =>  TIMEOUT
[00:23:20.250]      // end while "1"
[00:23:20.250]    </control>
[00:23:20.250]    <control if="canReadPins" while="" timeout="0" info="">
[00:23:20.250]      // if-block "canReadPins"
[00:23:20.250]        // =>  TRUE
[00:23:20.250]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:23:20.251]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:23:20.255]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:23:20.255]        // while-condition  =>  FALSE
[00:23:20.256]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:23:20.256]      </control>
[00:23:20.256]      // end if-block "canReadPins"
[00:23:20.256]    </control>
[00:23:20.256]    <control if="!canReadPins" while="" timeout="0" info="">
[00:23:20.256]      // if-block "!canReadPins"
[00:23:20.256]        // =>  FALSE
[00:23:20.256]      // skip if-block "!canReadPins"
[00:23:20.258]    </control>
[00:23:20.258]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:23:20.258]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:23:20.258]        // =>  TRUE
[00:23:20.258]      <block atomic="false" info="">
[00:23:20.258]        WriteAP(0x00, 0x190008);
[00:23:20.259]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:23:20.260]        WriteAP(0xF0, 0x01);
[00:23:20.263]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:23:20.263]      </block>
[00:23:20.264]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:23:20.264]    </control>
[00:23:20.264]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:23:20.264]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:23:20.264]        // =>  FALSE
[00:23:20.264]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:23:20.264]    </control>
[00:23:20.264]    <block atomic="false" info="">
[00:23:20.264]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:23:20.268]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:23:20.268]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:23:20.268]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:23:20.270]      __ap = 0; //lets make sure we reset the access point selection
[00:23:20.270]        // -> [__ap <= 0x00000000]
[00:23:20.270]    </block>
[00:23:20.270]  </sequence>
[00:23:20.270]  
[00:23:20.295]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:23:20.295]  
[00:23:20.295]  <debugvars>
[00:23:20.295]    // Pre-defined
[00:23:20.295]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:20.295]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:23:20.295]    __dp=0x00000000
[00:23:20.295]    __ap=0x00000000
[00:23:20.296]    __traceout=0x00000000      (Trace Disabled)
[00:23:20.296]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:20.296]    __FlashAddr=0x00000000
[00:23:20.296]    __FlashLen=0x00000000
[00:23:20.296]    __FlashArg=0x00000000
[00:23:20.296]    __FlashOp=0x00000000
[00:23:20.296]    __Result=0x00000000
[00:23:20.296]  </debugvars>
[00:23:20.296]  
[00:23:20.296]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:23:20.297]    <block atomic="false" info="">
[00:23:20.297]      __var deviceID = 0;
[00:23:20.297]        // -> [deviceID <= 0x00000000]
[00:23:20.297]      __var version = 0;
[00:23:20.297]        // -> [version <= 0x00000000]
[00:23:20.297]      __var partNum = 0;
[00:23:20.297]        // -> [partNum <= 0x00000000]
[00:23:20.297]      __var manuf = 0;
[00:23:20.297]        // -> [manuf <= 0x00000000]
[00:23:20.297]      __var isMSPM0G1X0X_G3X0X = 0;
[00:23:20.297]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:23:20.298]      __var isProduction = 0;
[00:23:20.298]        // -> [isProduction <= 0x00000000]
[00:23:20.298]      __var continueId = 0;
[00:23:20.298]        // -> [continueId <= 0x00000000]
[00:23:20.298]      deviceID =   Read32(0x41C40004);
[00:23:20.302]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:23:20.303]        // -> [deviceID <= 0x2BB8802F]
[00:23:20.303]      version = deviceID >> 28;
[00:23:20.303]        // -> [version <= 0x00000002]
[00:23:20.303]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:23:20.303]        // -> [partNum <= 0x0000BB88]
[00:23:20.303]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:23:20.304]        // -> [manuf <= 0x00000017]
[00:23:20.304]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:23:20.304]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:23:20.304]      isProduction = (version > 0);
[00:23:20.304]        // -> [isProduction <= 0x00000001]
[00:23:20.304]    </block>
[00:23:20.304]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:23:20.305]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:23:20.305]        // =>  FALSE
[00:23:20.305]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:23:20.305]    </control>
[00:23:20.305]    <control if="continueId == 4" while="" timeout="0" info="">
[00:23:20.305]      // if-block "continueId == 4"
[00:23:20.305]        // =>  FALSE
[00:23:20.305]      // skip if-block "continueId == 4"
[00:23:20.305]    </control>
[00:23:20.305]    <control if="!isProduction" while="" timeout="0" info="">
[00:23:20.305]      // if-block "!isProduction"
[00:23:20.305]        // =>  FALSE
[00:23:20.305]      // skip if-block "!isProduction"
[00:23:20.305]    </control>
[00:23:20.305]  </sequence>
[00:23:20.305]  
[00:23:25.377]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:23:25.377]  
[00:23:25.385]  <debugvars>
[00:23:25.385]    // Pre-defined
[00:23:25.385]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:25.385]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:23:25.386]    __dp=0x00000000
[00:23:25.386]    __ap=0x00000000
[00:23:25.386]    __traceout=0x00000000      (Trace Disabled)
[00:23:25.386]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:25.386]    __FlashAddr=0x00000000
[00:23:25.387]    __FlashLen=0x00000000
[00:23:25.387]    __FlashArg=0x00000000
[00:23:25.387]    __FlashOp=0x00000000
[00:23:25.387]    __Result=0x00000000
[00:23:25.387]  </debugvars>
[00:23:25.387]  
[00:23:25.388]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:23:25.388]    <block atomic="false" info="">
[00:23:25.388]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:23:25.388]        // -> [isSWJ <= 0x00000001]
[00:23:25.388]      __var hasDormant = __protocol & 0x00020000;
[00:23:25.388]        // -> [hasDormant <= 0x00000000]
[00:23:25.389]      __var protType   = __protocol & 0x0000FFFF;
[00:23:25.389]        // -> [protType <= 0x00000002]
[00:23:25.389]    </block>
[00:23:25.389]    <control if="protType == 1" while="" timeout="0" info="">
[00:23:25.390]      // if-block "protType == 1"
[00:23:25.390]        // =>  FALSE
[00:23:25.390]      // skip if-block "protType == 1"
[00:23:25.390]    </control>
[00:23:25.390]    <control if="protType == 2" while="" timeout="0" info="">
[00:23:25.390]      // if-block "protType == 2"
[00:23:25.390]        // =>  TRUE
[00:23:25.390]      <control if="isSWJ" while="" timeout="0" info="">
[00:23:25.390]        // if-block "isSWJ"
[00:23:25.390]          // =>  TRUE
[00:23:25.391]        <control if="hasDormant" while="" timeout="0" info="">
[00:23:25.391]          // if-block "hasDormant"
[00:23:25.391]            // =>  FALSE
[00:23:25.391]          // skip if-block "hasDormant"
[00:23:25.391]        </control>
[00:23:25.391]        <control if="!hasDormant" while="" timeout="0" info="">
[00:23:25.391]          // if-block "!hasDormant"
[00:23:25.391]            // =>  TRUE
[00:23:25.391]          <block atomic="false" info="">
[00:23:25.392]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:23:25.393]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:25.393]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:23:25.395]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:23:25.395]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:23:25.396]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:25.396]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:23:25.398]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:23:25.399]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:23:25.401]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:23:25.401]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:23:25.402]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:23:25.403]          </block>
[00:23:25.403]          // end if-block "!hasDormant"
[00:23:25.403]        </control>
[00:23:25.403]        // end if-block "isSWJ"
[00:23:25.403]      </control>
[00:23:25.403]      <control if="!isSWJ" while="" timeout="0" info="">
[00:23:25.403]        // if-block "!isSWJ"
[00:23:25.403]          // =>  FALSE
[00:23:25.403]        // skip if-block "!isSWJ"
[00:23:25.403]      </control>
[00:23:25.404]      <block atomic="false" info="">
[00:23:25.404]        ReadDP(0x0);
[00:23:25.405]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:23:25.405]      </block>
[00:23:25.405]      // end if-block "protType == 2"
[00:23:25.405]    </control>
[00:23:25.405]  </sequence>
[00:23:25.405]  
[00:23:25.409]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:23:25.409]  
[00:23:25.409]  <debugvars>
[00:23:25.409]    // Pre-defined
[00:23:25.409]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:25.409]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:23:25.409]    __dp=0x00000000
[00:23:25.409]    __ap=0x00000000
[00:23:25.410]    __traceout=0x00000000      (Trace Disabled)
[00:23:25.410]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:25.410]    __FlashAddr=0x00000000
[00:23:25.410]    __FlashLen=0x00000000
[00:23:25.411]    __FlashArg=0x00000000
[00:23:25.411]    __FlashOp=0x00000000
[00:23:25.411]    __Result=0x00000000
[00:23:25.411]  </debugvars>
[00:23:25.411]  
[00:23:25.411]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:23:25.411]    <block atomic="false" info="">
[00:23:25.411]      __var SW_DP_ABORT       = 0x0;
[00:23:25.411]        // -> [SW_DP_ABORT <= 0x00000000]
[00:23:25.411]      __var DP_CTRL_STAT      = 0x4;
[00:23:25.412]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:23:25.412]      __var DP_SELECT         = 0x8;
[00:23:25.412]        // -> [DP_SELECT <= 0x00000008]
[00:23:25.412]      __var powered_down      = 0;
[00:23:25.412]        // -> [powered_down <= 0x00000000]
[00:23:25.412]      WriteDP(DP_SELECT, 0x00000000);
[00:23:25.414]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:23:25.414]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:23:25.415]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:23:25.415]        // -> [powered_down <= 0x00000001]
[00:23:25.415]    </block>
[00:23:25.415]    <control if="powered_down" while="" timeout="0" info="">
[00:23:25.415]      // if-block "powered_down"
[00:23:25.415]        // =>  TRUE
[00:23:25.415]      <block atomic="false" info="">
[00:23:25.415]        Message(0, "Debug/System power-up request sent");
[00:23:25.418]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:23:25.420]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:23:25.420]      </block>
[00:23:25.420]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:23:25.420]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:23:25.421]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:23:25.421]        // while-condition  =>  FALSE
[00:23:25.422]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:23:25.422]      </control>
[00:23:25.422]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:23:25.422]        // if-block "(__protocol & 0xFFFF) == 1"
[00:23:25.422]          // =>  FALSE
[00:23:25.422]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:23:25.422]      </control>
[00:23:25.423]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:23:25.423]        // if-block "(__protocol & 0xFFFF) == 2"
[00:23:25.423]          // =>  TRUE
[00:23:25.423]        <block atomic="false" info="">
[00:23:25.423]          Message(0, "executing SWD power up");
[00:23:25.425]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:23:25.427]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:23:25.427]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:23:25.430]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:23:25.430]        </block>
[00:23:25.431]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:23:25.431]      </control>
[00:23:25.431]      // end if-block "powered_down"
[00:23:25.431]    </control>
[00:23:25.431]    <block atomic="false" info="">
[00:23:25.431]      __var DEBUG_PORT_VAL    = 0;
[00:23:25.432]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:23:25.432]      __var ACCESS_POINT_VAL  = 0;
[00:23:25.432]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:23:25.432]      __ap = 1; 
[00:23:25.432]        // -> [__ap <= 0x00000001]
[00:23:25.432]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:23:25.436]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:23:25.436]      __ap = 4;
[00:23:25.436]        // -> [__ap <= 0x00000004]
[00:23:25.437]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:23:25.440]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:23:25.441]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:23:25.441]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:23:25.442]    </block>
[00:23:25.442]    <block atomic="false" info="">
[00:23:25.442]      __var nReset = 0x80;
[00:23:25.443]        // -> [nReset <= 0x00000080]
[00:23:25.443]      __var canReadPins = 0;
[00:23:25.443]        // -> [canReadPins <= 0x00000000]
[00:23:25.443]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:23:25.446]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:23:25.446]        // -> [canReadPins <= 0x00000001]
[00:23:25.446]    </block>
[00:23:25.446]    <control if="" while="1" timeout="200" info="">
[00:23:25.446]      // while "1"  (timeout="200")
[00:23:25.446]      // while-condition  =>  TRUE
[00:23:25.446]      // while "1"  (timeout="200")
[00:23:25.446]      // while-condition  =>  TRUE
[00:23:25.447]      // while "1"  (timeout="200")
[00:23:25.447]      // while-condition  =>  TRUE
[00:23:25.447]      // while "1"  (timeout="200")
[00:23:25.447]      // while-condition  =>  TRUE
[00:23:25.447]      // while "1"  (timeout="200")
[00:23:25.447]      // while-condition  =>  TRUE
[00:23:25.447]      // while "1"  (timeout="200")
[00:23:25.447]      // while-condition  =>  TRUE
[00:23:25.447]      // while "1"  (timeout="200")
[00:23:25.447]      // while-condition  =>  TRUE
[00:23:25.449]      // while "1"  (timeout="200")
[00:23:25.449]      // while-condition  =>  TRUE
[00:23:25.449]      // while "1"  (timeout="200")
[00:23:25.449]      // while-condition  =>  TRUE
[00:23:25.449]      // while "1"  (timeout="200")
[00:23:25.449]      // while-condition  =>  TRUE
[00:23:25.449]      // while "1"  (timeout="200")
[00:23:25.449]      // while-condition  =>  TRUE
[00:23:25.449]      // while "1"  (timeout="200")
[00:23:25.449]      // while-condition  =>  TRUE
[00:23:25.450]      // while "1"  (timeout="200")
[00:23:25.450]      // while-condition  =>  TRUE
[00:23:25.450]      // while "1"  (timeout="200")
[00:23:25.450]      // while-condition  =>  TRUE
[00:23:25.450]      // while "1"  (timeout="200")
[00:23:25.450]      // while-condition  =>  TRUE
[00:23:25.450]      // while "1"  (timeout="200")
[00:23:25.450]      // while-condition  =>  TRUE
[00:23:25.450]      // while "1"  (timeout="200")
[00:23:25.450]      // while-condition  =>  TRUE
[00:23:25.451]      // while "1"  (timeout="200")
[00:23:25.451]      // while-condition  =>  TRUE
[00:23:25.451]      // while "1"  (timeout="200")
[00:23:25.451]      // while-condition  =>  TRUE
[00:23:25.451]      // while "1"  (timeout="200")
[00:23:25.451]      // while-condition  =>  TRUE
[00:23:25.451]      // while "1"  (timeout="200")
[00:23:25.451]      // while-condition  =>  TRUE
[00:23:25.452]      // while "1"  (timeout="200")
[00:23:25.452]      // while-condition  =>  TRUE
[00:23:25.452]      // while "1"  (timeout="200")
[00:23:25.452]      // while-condition  =>  TRUE
[00:23:25.452]      // while "1"  (timeout="200")
[00:23:25.452]      // while-condition  =>  TRUE
[00:23:25.452]      // while "1"  (timeout="200")
[00:23:25.452]      // while-condition  =>  TRUE
[00:23:25.452]      // while "1"  (timeout="200")
[00:23:25.453]      // while-condition  =>  TRUE
[00:23:25.453]      // while "1"  (timeout="200")
[00:23:25.453]      // while  =>  TIMEOUT
[00:23:25.453]      // end while "1"
[00:23:25.453]    </control>
[00:23:25.453]    <control if="canReadPins" while="" timeout="0" info="">
[00:23:25.453]      // if-block "canReadPins"
[00:23:25.453]        // =>  TRUE
[00:23:25.453]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:23:25.453]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:23:25.455]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:23:25.455]        // while-condition  =>  FALSE
[00:23:25.455]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:23:25.456]      </control>
[00:23:25.456]      // end if-block "canReadPins"
[00:23:25.456]    </control>
[00:23:25.456]    <control if="!canReadPins" while="" timeout="0" info="">
[00:23:25.456]      // if-block "!canReadPins"
[00:23:25.456]        // =>  FALSE
[00:23:25.456]      // skip if-block "!canReadPins"
[00:23:25.456]    </control>
[00:23:25.456]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:23:25.456]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:23:25.456]        // =>  TRUE
[00:23:25.457]      <block atomic="false" info="">
[00:23:25.457]        WriteAP(0x00, 0x190008);
[00:23:25.458]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:23:25.458]        WriteAP(0xF0, 0x01);
[00:23:25.463]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:23:25.463]      </block>
[00:23:25.463]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:23:25.464]    </control>
[00:23:25.464]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:23:25.464]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:23:25.464]        // =>  FALSE
[00:23:25.464]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:23:25.464]    </control>
[00:23:25.464]    <block atomic="false" info="">
[00:23:25.464]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:23:25.467]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:23:25.468]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:23:25.468]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:23:25.469]      __ap = 0; //lets make sure we reset the access point selection
[00:23:25.469]        // -> [__ap <= 0x00000000]
[00:23:25.469]    </block>
[00:23:25.470]  </sequence>
[00:23:25.470]  
[00:23:25.501]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:23:25.501]  
[00:23:25.501]  <debugvars>
[00:23:25.501]    // Pre-defined
[00:23:25.501]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:23:25.502]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:23:25.502]    __dp=0x00000000
[00:23:25.502]    __ap=0x00000000
[00:23:25.502]    __traceout=0x00000000      (Trace Disabled)
[00:23:25.502]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:23:25.502]    __FlashAddr=0x00000000
[00:23:25.502]    __FlashLen=0x00000000
[00:23:25.503]    __FlashArg=0x00000000
[00:23:25.503]    __FlashOp=0x00000000
[00:23:25.503]    __Result=0x00000000
[00:23:25.503]  </debugvars>
[00:23:25.503]  
[00:23:25.503]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:23:25.503]    <block atomic="false" info="">
[00:23:25.503]      __var deviceID = 0;
[00:23:25.503]        // -> [deviceID <= 0x00000000]
[00:23:25.503]      __var version = 0;
[00:23:25.503]        // -> [version <= 0x00000000]
[00:23:25.504]      __var partNum = 0;
[00:23:25.504]        // -> [partNum <= 0x00000000]
[00:23:25.504]      __var manuf = 0;
[00:23:25.504]        // -> [manuf <= 0x00000000]
[00:23:25.504]      __var isMSPM0G1X0X_G3X0X = 0;
[00:23:25.504]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:23:25.504]      __var isProduction = 0;
[00:23:25.504]        // -> [isProduction <= 0x00000000]
[00:23:25.504]      __var continueId = 0;
[00:23:25.504]        // -> [continueId <= 0x00000000]
[00:23:25.504]      deviceID =   Read32(0x41C40004);
[00:23:25.513]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:23:25.513]        // -> [deviceID <= 0x2BB8802F]
[00:23:25.513]      version = deviceID >> 28;
[00:23:25.513]        // -> [version <= 0x00000002]
[00:23:25.514]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:23:25.514]        // -> [partNum <= 0x0000BB88]
[00:23:25.514]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:23:25.514]        // -> [manuf <= 0x00000017]
[00:23:25.514]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:23:25.514]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:23:25.514]      isProduction = (version > 0);
[00:23:25.514]        // -> [isProduction <= 0x00000001]
[00:23:25.515]    </block>
[00:23:25.515]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:23:25.515]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:23:25.515]        // =>  FALSE
[00:23:25.515]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:23:25.515]    </control>
[00:23:25.515]    <control if="continueId == 4" while="" timeout="0" info="">
[00:23:25.515]      // if-block "continueId == 4"
[00:23:25.516]        // =>  FALSE
[00:23:25.516]      // skip if-block "continueId == 4"
[00:23:25.516]    </control>
[00:23:25.516]    <control if="!isProduction" while="" timeout="0" info="">
[00:23:25.516]      // if-block "!isProduction"
[00:23:25.516]        // =>  FALSE
[00:23:25.516]      // skip if-block "!isProduction"
[00:23:25.516]    </control>
[00:23:25.516]  </sequence>
[00:23:25.516]  
[00:32:15.163]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:32:15.163]  
[00:32:15.171]  <debugvars>
[00:32:15.171]    // Pre-defined
[00:32:15.172]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:15.172]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:32:15.172]    __dp=0x00000000
[00:32:15.172]    __ap=0x00000000
[00:32:15.172]    __traceout=0x00000000      (Trace Disabled)
[00:32:15.172]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:15.172]    __FlashAddr=0x00000000
[00:32:15.172]    __FlashLen=0x00000000
[00:32:15.172]    __FlashArg=0x00000000
[00:32:15.172]    __FlashOp=0x00000000
[00:32:15.172]    __Result=0x00000000
[00:32:15.172]  </debugvars>
[00:32:15.172]  
[00:32:15.172]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:32:15.173]    <block atomic="false" info="">
[00:32:15.173]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:32:15.173]        // -> [isSWJ <= 0x00000001]
[00:32:15.173]      __var hasDormant = __protocol & 0x00020000;
[00:32:15.173]        // -> [hasDormant <= 0x00000000]
[00:32:15.173]      __var protType   = __protocol & 0x0000FFFF;
[00:32:15.173]        // -> [protType <= 0x00000002]
[00:32:15.173]    </block>
[00:32:15.173]    <control if="protType == 1" while="" timeout="0" info="">
[00:32:15.173]      // if-block "protType == 1"
[00:32:15.173]        // =>  FALSE
[00:32:15.173]      // skip if-block "protType == 1"
[00:32:15.173]    </control>
[00:32:15.174]    <control if="protType == 2" while="" timeout="0" info="">
[00:32:15.174]      // if-block "protType == 2"
[00:32:15.174]        // =>  TRUE
[00:32:15.174]      <control if="isSWJ" while="" timeout="0" info="">
[00:32:15.174]        // if-block "isSWJ"
[00:32:15.174]          // =>  TRUE
[00:32:15.174]        <control if="hasDormant" while="" timeout="0" info="">
[00:32:15.175]          // if-block "hasDormant"
[00:32:15.175]            // =>  FALSE
[00:32:15.175]          // skip if-block "hasDormant"
[00:32:15.175]        </control>
[00:32:15.175]        <control if="!hasDormant" while="" timeout="0" info="">
[00:32:15.175]          // if-block "!hasDormant"
[00:32:15.176]            // =>  TRUE
[00:32:15.176]          <block atomic="false" info="">
[00:32:15.176]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:32:15.177]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:15.177]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:32:15.179]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:32:15.179]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:32:15.181]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:15.181]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:32:15.181]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:32:15.181]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:32:15.184]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:15.184]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:32:15.185]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:32:15.185]          </block>
[00:32:15.185]          // end if-block "!hasDormant"
[00:32:15.185]        </control>
[00:32:15.185]        // end if-block "isSWJ"
[00:32:15.185]      </control>
[00:32:15.185]      <control if="!isSWJ" while="" timeout="0" info="">
[00:32:15.185]        // if-block "!isSWJ"
[00:32:15.186]          // =>  FALSE
[00:32:15.186]        // skip if-block "!isSWJ"
[00:32:15.186]      </control>
[00:32:15.186]      <block atomic="false" info="">
[00:32:15.186]        ReadDP(0x0);
[00:32:15.188]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:32:15.188]      </block>
[00:32:15.188]      // end if-block "protType == 2"
[00:32:15.188]    </control>
[00:32:15.188]  </sequence>
[00:32:15.188]  
[00:32:15.197]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:32:15.197]  
[00:32:15.197]  <debugvars>
[00:32:15.197]    // Pre-defined
[00:32:15.198]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:15.198]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:32:15.198]    __dp=0x00000000
[00:32:15.198]    __ap=0x00000000
[00:32:15.198]    __traceout=0x00000000      (Trace Disabled)
[00:32:15.198]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:15.198]    __FlashAddr=0x00000000
[00:32:15.198]    __FlashLen=0x00000000
[00:32:15.198]    __FlashArg=0x00000000
[00:32:15.198]    __FlashOp=0x00000000
[00:32:15.199]    __Result=0x00000000
[00:32:15.199]  </debugvars>
[00:32:15.199]  
[00:32:15.199]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:32:15.199]    <block atomic="false" info="">
[00:32:15.199]      __var SW_DP_ABORT       = 0x0;
[00:32:15.199]        // -> [SW_DP_ABORT <= 0x00000000]
[00:32:15.199]      __var DP_CTRL_STAT      = 0x4;
[00:32:15.199]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:32:15.199]      __var DP_SELECT         = 0x8;
[00:32:15.199]        // -> [DP_SELECT <= 0x00000008]
[00:32:15.199]      __var powered_down      = 0;
[00:32:15.199]        // -> [powered_down <= 0x00000000]
[00:32:15.199]      WriteDP(DP_SELECT, 0x00000000);
[00:32:15.201]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:32:15.202]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:32:15.204]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:32:15.205]        // -> [powered_down <= 0x00000001]
[00:32:15.205]    </block>
[00:32:15.205]    <control if="powered_down" while="" timeout="0" info="">
[00:32:15.205]      // if-block "powered_down"
[00:32:15.205]        // =>  TRUE
[00:32:15.205]      <block atomic="false" info="">
[00:32:15.205]        Message(0, "Debug/System power-up request sent");
[00:32:15.208]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:32:15.210]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:32:15.210]      </block>
[00:32:15.211]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:32:15.211]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:32:15.212]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:32:15.213]        // while-condition  =>  FALSE
[00:32:15.213]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:32:15.213]      </control>
[00:32:15.213]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:32:15.213]        // if-block "(__protocol & 0xFFFF) == 1"
[00:32:15.213]          // =>  FALSE
[00:32:15.213]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:32:15.213]      </control>
[00:32:15.213]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:32:15.213]        // if-block "(__protocol & 0xFFFF) == 2"
[00:32:15.213]          // =>  TRUE
[00:32:15.213]        <block atomic="false" info="">
[00:32:15.213]          Message(0, "executing SWD power up");
[00:32:15.215]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:32:15.217]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:32:15.217]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:32:15.218]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:32:15.218]        </block>
[00:32:15.219]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:32:15.219]      </control>
[00:32:15.219]      // end if-block "powered_down"
[00:32:15.219]    </control>
[00:32:15.219]    <block atomic="false" info="">
[00:32:15.219]      __var DEBUG_PORT_VAL    = 0;
[00:32:15.219]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:32:15.219]      __var ACCESS_POINT_VAL  = 0;
[00:32:15.219]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:32:15.220]      __ap = 1; 
[00:32:15.220]        // -> [__ap <= 0x00000001]
[00:32:15.220]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:32:15.228]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:32:15.228]      __ap = 4;
[00:32:15.228]        // -> [__ap <= 0x00000004]
[00:32:15.228]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:32:15.232]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:32:15.233]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:32:15.234]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:32:15.235]    </block>
[00:32:15.235]    <block atomic="false" info="">
[00:32:15.235]      __var nReset = 0x80;
[00:32:15.235]        // -> [nReset <= 0x00000080]
[00:32:15.236]      __var canReadPins = 0;
[00:32:15.236]        // -> [canReadPins <= 0x00000000]
[00:32:15.236]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:32:15.238]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:32:15.238]        // -> [canReadPins <= 0x00000001]
[00:32:15.238]    </block>
[00:32:15.238]    <control if="" while="1" timeout="200" info="">
[00:32:15.238]      // while "1"  (timeout="200")
[00:32:15.238]      // while-condition  =>  TRUE
[00:32:15.239]      // while "1"  (timeout="200")
[00:32:15.239]      // while-condition  =>  TRUE
[00:32:15.239]      // while "1"  (timeout="200")
[00:32:15.239]      // while-condition  =>  TRUE
[00:32:15.239]      // while "1"  (timeout="200")
[00:32:15.239]      // while-condition  =>  TRUE
[00:32:15.239]      // while "1"  (timeout="200")
[00:32:15.239]      // while-condition  =>  TRUE
[00:32:15.239]      // while "1"  (timeout="200")
[00:32:15.239]      // while-condition  =>  TRUE
[00:32:15.239]      // while "1"  (timeout="200")
[00:32:15.240]      // while-condition  =>  TRUE
[00:32:15.240]      // while "1"  (timeout="200")
[00:32:15.241]      // while-condition  =>  TRUE
[00:32:15.241]      // while "1"  (timeout="200")
[00:32:15.241]      // while-condition  =>  TRUE
[00:32:15.241]      // while "1"  (timeout="200")
[00:32:15.241]      // while-condition  =>  TRUE
[00:32:15.241]      // while "1"  (timeout="200")
[00:32:15.241]      // while-condition  =>  TRUE
[00:32:15.241]      // while "1"  (timeout="200")
[00:32:15.241]      // while-condition  =>  TRUE
[00:32:15.241]      // while "1"  (timeout="200")
[00:32:15.241]      // while-condition  =>  TRUE
[00:32:15.241]      // while "1"  (timeout="200")
[00:32:15.242]      // while-condition  =>  TRUE
[00:32:15.242]      // while "1"  (timeout="200")
[00:32:15.242]      // while-condition  =>  TRUE
[00:32:15.242]      // while "1"  (timeout="200")
[00:32:15.242]      // while-condition  =>  TRUE
[00:32:15.242]      // while "1"  (timeout="200")
[00:32:15.242]      // while-condition  =>  TRUE
[00:32:15.242]      // while "1"  (timeout="200")
[00:32:15.242]      // while-condition  =>  TRUE
[00:32:15.242]      // while "1"  (timeout="200")
[00:32:15.243]      // while-condition  =>  TRUE
[00:32:15.243]      // while "1"  (timeout="200")
[00:32:15.243]      // while-condition  =>  TRUE
[00:32:15.243]      // while "1"  (timeout="200")
[00:32:15.243]      // while-condition  =>  TRUE
[00:32:15.243]      // while "1"  (timeout="200")
[00:32:15.243]      // while-condition  =>  TRUE
[00:32:15.243]      // while "1"  (timeout="200")
[00:32:15.244]      // while-condition  =>  TRUE
[00:32:15.244]      // while "1"  (timeout="200")
[00:32:15.244]      // while-condition  =>  TRUE
[00:32:15.245]      // while "1"  (timeout="200")
[00:32:15.245]      // while-condition  =>  TRUE
[00:32:15.245]      // while "1"  (timeout="200")
[00:32:15.245]      // while-condition  =>  TRUE
[00:32:15.245]      // while "1"  (timeout="200")
[00:32:15.245]      // while-condition  =>  TRUE
[00:32:15.245]      // while "1"  (timeout="200")
[00:32:15.245]      // while-condition  =>  TRUE
[00:32:15.245]      // while "1"  (timeout="200")
[00:32:15.245]      // while-condition  =>  TRUE
[00:32:15.245]      // while "1"  (timeout="200")
[00:32:15.245]      // while-condition  =>  TRUE
[00:32:15.245]      // while "1"  (timeout="200")
[00:32:15.245]      // while-condition  =>  TRUE
[00:32:15.246]      // while "1"  (timeout="200")
[00:32:15.246]      // while-condition  =>  TRUE
[00:32:15.246]      // while "1"  (timeout="200")
[00:32:15.246]      // while-condition  =>  TRUE
[00:32:15.246]      // while "1"  (timeout="200")
[00:32:15.246]      // while-condition  =>  TRUE
[00:32:15.246]      // while "1"  (timeout="200")
[00:32:15.246]      // while-condition  =>  TRUE
[00:32:15.246]      // while "1"  (timeout="200")
[00:32:15.246]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.247]      // while "1"  (timeout="200")
[00:32:15.247]      // while-condition  =>  TRUE
[00:32:15.250]      // while "1"  (timeout="200")
[00:32:15.250]      // while  =>  TIMEOUT
[00:32:15.250]      // end while "1"
[00:32:15.250]    </control>
[00:32:15.250]    <control if="canReadPins" while="" timeout="0" info="">
[00:32:15.250]      // if-block "canReadPins"
[00:32:15.250]        // =>  TRUE
[00:32:15.250]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:32:15.250]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:32:15.252]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:32:15.252]        // while-condition  =>  FALSE
[00:32:15.252]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:32:15.252]      </control>
[00:32:15.252]      // end if-block "canReadPins"
[00:32:15.252]    </control>
[00:32:15.253]    <control if="!canReadPins" while="" timeout="0" info="">
[00:32:15.253]      // if-block "!canReadPins"
[00:32:15.253]        // =>  FALSE
[00:32:15.253]      // skip if-block "!canReadPins"
[00:32:15.253]    </control>
[00:32:15.253]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:32:15.253]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:32:15.253]        // =>  TRUE
[00:32:15.254]      <block atomic="false" info="">
[00:32:15.254]        WriteAP(0x00, 0x190008);
[00:32:15.255]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:32:15.255]        WriteAP(0xF0, 0x01);
[00:32:15.258]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:32:15.258]      </block>
[00:32:15.258]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:32:15.258]    </control>
[00:32:15.259]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:32:15.259]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:32:15.259]        // =>  FALSE
[00:32:15.259]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:32:15.259]    </control>
[00:32:15.259]    <block atomic="false" info="">
[00:32:15.259]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:32:15.263]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:32:15.263]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:32:15.263]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:32:15.265]      __ap = 0; //lets make sure we reset the access point selection
[00:32:15.265]        // -> [__ap <= 0x00000000]
[00:32:15.265]    </block>
[00:32:15.265]  </sequence>
[00:32:15.265]  
[00:32:15.292]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:32:15.292]  
[00:32:15.293]  <debugvars>
[00:32:15.293]    // Pre-defined
[00:32:15.293]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:15.293]    __connection=0x00000202    (Connection Type="Flash", Reset Type="System Reset")
[00:32:15.293]    __dp=0x00000000
[00:32:15.293]    __ap=0x00000000
[00:32:15.293]    __traceout=0x00000000      (Trace Disabled)
[00:32:15.294]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:15.294]    __FlashAddr=0x00000000
[00:32:15.294]    __FlashLen=0x00000000
[00:32:15.294]    __FlashArg=0x00000000
[00:32:15.294]    __FlashOp=0x00000000
[00:32:15.294]    __Result=0x00000000
[00:32:15.294]  </debugvars>
[00:32:15.294]  
[00:32:15.294]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:32:15.294]    <block atomic="false" info="">
[00:32:15.295]      __var deviceID = 0;
[00:32:15.295]        // -> [deviceID <= 0x00000000]
[00:32:15.295]      __var version = 0;
[00:32:15.295]        // -> [version <= 0x00000000]
[00:32:15.295]      __var partNum = 0;
[00:32:15.295]        // -> [partNum <= 0x00000000]
[00:32:15.295]      __var manuf = 0;
[00:32:15.295]        // -> [manuf <= 0x00000000]
[00:32:15.295]      __var isMSPM0G1X0X_G3X0X = 0;
[00:32:15.295]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:32:15.296]      __var isProduction = 0;
[00:32:15.296]        // -> [isProduction <= 0x00000000]
[00:32:15.296]      __var continueId = 0;
[00:32:15.296]        // -> [continueId <= 0x00000000]
[00:32:15.296]      deviceID =   Read32(0x41C40004);
[00:32:15.302]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:32:15.302]        // -> [deviceID <= 0x2BB8802F]
[00:32:15.302]      version = deviceID >> 28;
[00:32:15.302]        // -> [version <= 0x00000002]
[00:32:15.302]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:32:15.302]        // -> [partNum <= 0x0000BB88]
[00:32:15.302]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:32:15.302]        // -> [manuf <= 0x00000017]
[00:32:15.302]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:32:15.303]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:32:15.303]      isProduction = (version > 0);
[00:32:15.303]        // -> [isProduction <= 0x00000001]
[00:32:15.303]    </block>
[00:32:15.303]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:32:15.303]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:32:15.303]        // =>  FALSE
[00:32:15.303]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:32:15.303]    </control>
[00:32:15.303]    <control if="continueId == 4" while="" timeout="0" info="">
[00:32:15.303]      // if-block "continueId == 4"
[00:32:15.303]        // =>  FALSE
[00:32:15.304]      // skip if-block "continueId == 4"
[00:32:15.304]    </control>
[00:32:15.304]    <control if="!isProduction" while="" timeout="0" info="">
[00:32:15.304]      // if-block "!isProduction"
[00:32:15.304]        // =>  FALSE
[00:32:15.304]      // skip if-block "!isProduction"
[00:32:15.304]    </control>
[00:32:15.304]  </sequence>
[00:32:15.304]  
[00:32:27.805]  **********  Sequence "DebugPortSetup"  (Context="Connect", Pname="", info="")
[00:32:27.805]  
[00:32:27.813]  <debugvars>
[00:32:27.813]    // Pre-defined
[00:32:27.813]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:27.813]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:32:27.813]    __dp=0x00000000
[00:32:27.813]    __ap=0x00000000
[00:32:27.813]    __traceout=0x00000000      (Trace Disabled)
[00:32:27.813]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:27.813]    __FlashAddr=0x00000000
[00:32:27.813]    __FlashLen=0x00000000
[00:32:27.813]    __FlashArg=0x00000000
[00:32:27.814]    __FlashOp=0x00000000
[00:32:27.814]    __Result=0x00000000
[00:32:27.814]  </debugvars>
[00:32:27.814]  
[00:32:27.814]  <sequence name="DebugPortSetup" Pname="" disable="false" info="">
[00:32:27.814]    <block atomic="false" info="">
[00:32:27.814]      __var isSWJ      = ((__protocol & 0x00010000) != 0);
[00:32:27.814]        // -> [isSWJ <= 0x00000001]
[00:32:27.814]      __var hasDormant = __protocol & 0x00020000;
[00:32:27.814]        // -> [hasDormant <= 0x00000000]
[00:32:27.815]      __var protType   = __protocol & 0x0000FFFF;
[00:32:27.815]        // -> [protType <= 0x00000002]
[00:32:27.815]    </block>
[00:32:27.815]    <control if="protType == 1" while="" timeout="0" info="">
[00:32:27.815]      // if-block "protType == 1"
[00:32:27.815]        // =>  FALSE
[00:32:27.815]      // skip if-block "protType == 1"
[00:32:27.815]    </control>
[00:32:27.816]    <control if="protType == 2" while="" timeout="0" info="">
[00:32:27.816]      // if-block "protType == 2"
[00:32:27.816]        // =>  TRUE
[00:32:27.816]      <control if="isSWJ" while="" timeout="0" info="">
[00:32:27.816]        // if-block "isSWJ"
[00:32:27.816]          // =>  TRUE
[00:32:27.816]        <control if="hasDormant" while="" timeout="0" info="">
[00:32:27.816]          // if-block "hasDormant"
[00:32:27.816]            // =>  FALSE
[00:32:27.817]          // skip if-block "hasDormant"
[00:32:27.817]        </control>
[00:32:27.817]        <control if="!hasDormant" while="" timeout="0" info="">
[00:32:27.817]          // if-block "!hasDormant"
[00:32:27.817]            // =>  TRUE
[00:32:27.817]          <block atomic="false" info="">
[00:32:27.817]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //lets put the JTAG line in a reset state
[00:32:27.823]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:27.823]            DAP_SWJ_Sequence(16,0xE73C); //SWD to JTAG, this is to ensure the state machine is initialized
[00:32:27.825]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E73C)]
[00:32:27.825]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF); //Put it back in reset
[00:32:27.826]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:27.826]            DAP_SWJ_Sequence(16, 0xE79E); //JTAG to SWD switch
[00:32:27.829]              // -> [DAP_SWJ_Sequence(16, 0x000000000000E79E)]
[00:32:27.829]            DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF);  //Ensure the switch is successful 
[00:32:27.831]              // -> [DAP_SWJ_Sequence(51, 0x0007FFFFFFFFFFFF)]
[00:32:27.831]            DAP_SWJ_Sequence(7,  0x00); //Give the line some time to initialize
[00:32:27.832]              // -> [DAP_SWJ_Sequence(7, 0x0000000000000000)]
[00:32:27.832]          </block>
[00:32:27.832]          // end if-block "!hasDormant"
[00:32:27.833]        </control>
[00:32:27.833]        // end if-block "isSWJ"
[00:32:27.833]      </control>
[00:32:27.833]      <control if="!isSWJ" while="" timeout="0" info="">
[00:32:27.833]        // if-block "!isSWJ"
[00:32:27.833]          // =>  FALSE
[00:32:27.833]        // skip if-block "!isSWJ"
[00:32:27.833]      </control>
[00:32:27.833]      <block atomic="false" info="">
[00:32:27.833]        ReadDP(0x0);
[00:32:27.835]          // -> [ReadDP(0x00000000) => 0x6BA02477]   (__dp=0x00000000)
[00:32:27.835]      </block>
[00:32:27.835]      // end if-block "protType == 2"
[00:32:27.835]    </control>
[00:32:27.835]  </sequence>
[00:32:27.836]  
[00:32:27.839]  **********  Sequence "DebugPortStart"  (Context="Connect", Pname="", info="")
[00:32:27.839]  
[00:32:27.839]  <debugvars>
[00:32:27.839]    // Pre-defined
[00:32:27.839]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:27.839]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:32:27.839]    __dp=0x00000000
[00:32:27.840]    __ap=0x00000000
[00:32:27.840]    __traceout=0x00000000      (Trace Disabled)
[00:32:27.840]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:27.840]    __FlashAddr=0x00000000
[00:32:27.840]    __FlashLen=0x00000000
[00:32:27.840]    __FlashArg=0x00000000
[00:32:27.840]    __FlashOp=0x00000000
[00:32:27.840]    __Result=0x00000000
[00:32:27.840]  </debugvars>
[00:32:27.840]  
[00:32:27.840]  <sequence name="DebugPortStart" Pname="" disable="false" info="">
[00:32:27.841]    <block atomic="false" info="">
[00:32:27.841]      __var SW_DP_ABORT       = 0x0;
[00:32:27.841]        // -> [SW_DP_ABORT <= 0x00000000]
[00:32:27.841]      __var DP_CTRL_STAT      = 0x4;
[00:32:27.841]        // -> [DP_CTRL_STAT <= 0x00000004]
[00:32:27.841]      __var DP_SELECT         = 0x8;
[00:32:27.841]        // -> [DP_SELECT <= 0x00000008]
[00:32:27.841]      __var powered_down      = 0;
[00:32:27.841]        // -> [powered_down <= 0x00000000]
[00:32:27.841]      WriteDP(DP_SELECT, 0x00000000);
[00:32:27.844]        // -> [WriteDP(0x00000008, 0x00000000)]   (__dp=0x00000000)
[00:32:27.844]      powered_down = ((ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000);
[00:32:27.845]        // -> [ReadDP(0x00000004) => 0x00000040]   (__dp=0x00000000)
[00:32:27.845]        // -> [powered_down <= 0x00000001]
[00:32:27.845]    </block>
[00:32:27.845]    <control if="powered_down" while="" timeout="0" info="">
[00:32:27.845]      // if-block "powered_down"
[00:32:27.846]        // =>  TRUE
[00:32:27.846]      <block atomic="false" info="">
[00:32:27.846]        Message(0, "Debug/System power-up request sent");
[00:32:27.848]        WriteDP(DP_CTRL_STAT, 0x50000000);
[00:32:27.853]          // -> [WriteDP(0x00000004, 0x50000000)]   (__dp=0x00000000)
[00:32:27.853]      </block>
[00:32:27.853]      <control if="" while="(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000" timeout="1000000" info="">
[00:32:27.853]        // while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"  (timeout="1000000")
[00:32:27.855]          // -> [ReadDP(0x00000004) => 0xF0000040]   (__dp=0x00000000)
[00:32:27.855]        // while-condition  =>  FALSE
[00:32:27.855]        // end while "(ReadDP(DP_CTRL_STAT) & 0xA0000000) != 0xA0000000"
[00:32:27.855]      </control>
[00:32:27.856]      <control if="(__protocol & 0xFFFF) == 1" while="" timeout="0" info="">
[00:32:27.856]        // if-block "(__protocol & 0xFFFF) == 1"
[00:32:27.856]          // =>  FALSE
[00:32:27.857]        // skip if-block "(__protocol & 0xFFFF) == 1"
[00:32:27.857]      </control>
[00:32:27.857]      <control if="(__protocol & 0xFFFF) == 2" while="" timeout="0" info="">
[00:32:27.857]        // if-block "(__protocol & 0xFFFF) == 2"
[00:32:27.857]          // =>  TRUE
[00:32:27.857]        <block atomic="false" info="">
[00:32:27.857]          Message(0, "executing SWD power up");
[00:32:27.858]          WriteDP(DP_CTRL_STAT, 0x50000F00);
[00:32:27.860]            // -> [WriteDP(0x00000004, 0x50000F00)]   (__dp=0x00000000)
[00:32:27.860]          WriteDP(SW_DP_ABORT, 0x0000001E);
[00:32:27.861]            // -> [WriteDP(0x00000000, 0x0000001E)]   (__dp=0x00000000)
[00:32:27.862]        </block>
[00:32:27.862]        // end if-block "(__protocol & 0xFFFF) == 2"
[00:32:27.862]      </control>
[00:32:27.862]      // end if-block "powered_down"
[00:32:27.862]    </control>
[00:32:27.862]    <block atomic="false" info="">
[00:32:27.862]      __var DEBUG_PORT_VAL    = 0;
[00:32:27.862]        // -> [DEBUG_PORT_VAL <= 0x00000000]
[00:32:27.862]      __var ACCESS_POINT_VAL  = 0;
[00:32:27.862]        // -> [ACCESS_POINT_VAL <= 0x00000000]
[00:32:27.863]      __ap = 1; 
[00:32:27.863]        // -> [__ap <= 0x00000001]
[00:32:27.863]      WriteAP(0x0C, 0x04); //lets use the mini pwr-ap as backup
[00:32:27.866]        // -> [WriteAP(0x0000000C, 0x00000004)]   (__dp=0x00000000, __ap=0x00000001)
[00:32:27.866]      __ap = 4;
[00:32:27.866]        // -> [__ap <= 0x00000004]
[00:32:27.866]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:32:27.869]        // -> [ReadAP(0x00000000) => 0x00080027]   (__dp=0x00000000, __ap=0x00000004)
[00:32:27.869]        // -> [ACCESS_POINT_VAL <= 0x00080027]
[00:32:27.869]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:32:27.872]    </block>
[00:32:27.872]    <block atomic="false" info="">
[00:32:27.872]      __var nReset = 0x80;
[00:32:27.872]        // -> [nReset <= 0x00000080]
[00:32:27.872]      __var canReadPins = 0;
[00:32:27.872]        // -> [canReadPins <= 0x00000000]
[00:32:27.872]      canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);
[00:32:27.873]        // -> [DAP_SWJ_Pins(0x00, 0x80, 0) => 0x03]   (Out: nRESET=0  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=0)
[00:32:27.873]        // -> [canReadPins <= 0x00000001]
[00:32:27.875]    </block>
[00:32:27.875]    <control if="" while="1" timeout="200" info="">
[00:32:27.875]      // while "1"  (timeout="200")
[00:32:27.875]      // while-condition  =>  TRUE
[00:32:27.875]      // while "1"  (timeout="200")
[00:32:27.875]      // while-condition  =>  TRUE
[00:32:27.875]      // while "1"  (timeout="200")
[00:32:27.875]      // while-condition  =>  TRUE
[00:32:27.875]      // while "1"  (timeout="200")
[00:32:27.875]      // while-condition  =>  TRUE
[00:32:27.875]      // while "1"  (timeout="200")
[00:32:27.875]      // while-condition  =>  TRUE
[00:32:27.875]      // while "1"  (timeout="200")
[00:32:27.875]      // while-condition  =>  TRUE
[00:32:27.876]      // while "1"  (timeout="200")
[00:32:27.876]      // while-condition  =>  TRUE
[00:32:27.876]      // while "1"  (timeout="200")
[00:32:27.876]      // while-condition  =>  TRUE
[00:32:27.876]      // while "1"  (timeout="200")
[00:32:27.876]      // while-condition  =>  TRUE
[00:32:27.876]      // while "1"  (timeout="200")
[00:32:27.876]      // while-condition  =>  TRUE
[00:32:27.876]      // while "1"  (timeout="200")
[00:32:27.876]      // while-condition  =>  TRUE
[00:32:27.877]      // while "1"  (timeout="200")
[00:32:27.877]      // while-condition  =>  TRUE
[00:32:27.877]      // while "1"  (timeout="200")
[00:32:27.877]      // while-condition  =>  TRUE
[00:32:27.877]      // while "1"  (timeout="200")
[00:32:27.877]      // while-condition  =>  TRUE
[00:32:27.877]      // while "1"  (timeout="200")
[00:32:27.877]      // while-condition  =>  TRUE
[00:32:27.879]      // while "1"  (timeout="200")
[00:32:27.879]      // while-condition  =>  TRUE
[00:32:27.879]      // while "1"  (timeout="200")
[00:32:27.879]      // while-condition  =>  TRUE
[00:32:27.879]      // while "1"  (timeout="200")
[00:32:27.879]      // while-condition  =>  TRUE
[00:32:27.880]      // while "1"  (timeout="200")
[00:32:27.880]      // while-condition  =>  TRUE
[00:32:27.880]      // while "1"  (timeout="200")
[00:32:27.880]      // while-condition  =>  TRUE
[00:32:27.880]      // while "1"  (timeout="200")
[00:32:27.880]      // while-condition  =>  TRUE
[00:32:27.880]      // while "1"  (timeout="200")
[00:32:27.880]      // while-condition  =>  TRUE
[00:32:27.880]      // while "1"  (timeout="200")
[00:32:27.881]      // while-condition  =>  TRUE
[00:32:27.881]      // while "1"  (timeout="200")
[00:32:27.881]      // while-condition  =>  TRUE
[00:32:27.881]      // while "1"  (timeout="200")
[00:32:27.881]      // while-condition  =>  TRUE
[00:32:27.881]      // while "1"  (timeout="200")
[00:32:27.881]      // while-condition  =>  TRUE
[00:32:27.881]      // while "1"  (timeout="200")
[00:32:27.881]      // while-condition  =>  TRUE
[00:32:27.881]      // while "1"  (timeout="200")
[00:32:27.881]      // while-condition  =>  TRUE
[00:32:27.882]      // while "1"  (timeout="200")
[00:32:27.882]      // while-condition  =>  TRUE
[00:32:27.882]      // while "1"  (timeout="200")
[00:32:27.882]      // while-condition  =>  TRUE
[00:32:27.882]      // while "1"  (timeout="200")
[00:32:27.882]      // while-condition  =>  TRUE
[00:32:27.882]      // while "1"  (timeout="200")
[00:32:27.882]      // while-condition  =>  TRUE
[00:32:27.882]      // while "1"  (timeout="200")
[00:32:27.882]      // while-condition  =>  TRUE
[00:32:27.882]      // while "1"  (timeout="200")
[00:32:27.883]      // while-condition  =>  TRUE
[00:32:27.883]      // while "1"  (timeout="200")
[00:32:27.883]      // while-condition  =>  TRUE
[00:32:27.883]      // while "1"  (timeout="200")
[00:32:27.883]      // while-condition  =>  TRUE
[00:32:27.883]      // while "1"  (timeout="200")
[00:32:27.883]      // while-condition  =>  TRUE
[00:32:27.884]      // while "1"  (timeout="200")
[00:32:27.884]      // while-condition  =>  TRUE
[00:32:27.884]      // while "1"  (timeout="200")
[00:32:27.884]      // while-condition  =>  TRUE
[00:32:27.884]      // while "1"  (timeout="200")
[00:32:27.884]      // while-condition  =>  TRUE
[00:32:27.884]      // while "1"  (timeout="200")
[00:32:27.884]      // while-condition  =>  TRUE
[00:32:27.884]      // while "1"  (timeout="200")
[00:32:27.885]      // while-condition  =>  TRUE
[00:32:27.885]      // while "1"  (timeout="200")
[00:32:27.885]      // while-condition  =>  TRUE
[00:32:27.885]      // while "1"  (timeout="200")
[00:32:27.885]      // while-condition  =>  TRUE
[00:32:27.885]      // while "1"  (timeout="200")
[00:32:27.885]      // while-condition  =>  TRUE
[00:32:27.885]      // while "1"  (timeout="200")
[00:32:27.885]      // while-condition  =>  TRUE
[00:32:27.885]      // while "1"  (timeout="200")
[00:32:27.886]      // while-condition  =>  TRUE
[00:32:27.886]      // while "1"  (timeout="200")
[00:32:27.886]      // while-condition  =>  TRUE
[00:32:27.886]      // while "1"  (timeout="200")
[00:32:27.886]      // while-condition  =>  TRUE
[00:32:27.886]      // while "1"  (timeout="200")
[00:32:27.886]      // while-condition  =>  TRUE
[00:32:27.886]      // while "1"  (timeout="200")
[00:32:27.886]      // while-condition  =>  TRUE
[00:32:27.886]      // while "1"  (timeout="200")
[00:32:27.886]      // while-condition  =>  TRUE
[00:32:27.886]      // while "1"  (timeout="200")
[00:32:27.887]      // while-condition  =>  TRUE
[00:32:27.887]      // while "1"  (timeout="200")
[00:32:27.887]      // while-condition  =>  TRUE
[00:32:27.887]      // while "1"  (timeout="200")
[00:32:27.887]      // while-condition  =>  TRUE
[00:32:27.887]      // while "1"  (timeout="200")
[00:32:27.887]      // while-condition  =>  TRUE
[00:32:27.887]      // while "1"  (timeout="200")
[00:32:27.887]      // while-condition  =>  TRUE
[00:32:27.887]      // while "1"  (timeout="200")
[00:32:27.888]      // while-condition  =>  TRUE
[00:32:27.888]      // while "1"  (timeout="200")
[00:32:27.888]      // while-condition  =>  TRUE
[00:32:27.888]      // while "1"  (timeout="200")
[00:32:27.888]      // while-condition  =>  TRUE
[00:32:27.888]      // while "1"  (timeout="200")
[00:32:27.888]      // while-condition  =>  TRUE
[00:32:27.888]      // while "1"  (timeout="200")
[00:32:27.888]      // while-condition  =>  TRUE
[00:32:27.888]      // while "1"  (timeout="200")
[00:32:27.889]      // while-condition  =>  TRUE
[00:32:27.889]      // while "1"  (timeout="200")
[00:32:27.889]      // while-condition  =>  TRUE
[00:32:27.889]      // while "1"  (timeout="200")
[00:32:27.889]      // while-condition  =>  TRUE
[00:32:27.889]      // while "1"  (timeout="200")
[00:32:27.889]      // while-condition  =>  TRUE
[00:32:27.889]      // while "1"  (timeout="200")
[00:32:27.890]      // while-condition  =>  TRUE
[00:32:27.890]      // while "1"  (timeout="200")
[00:32:27.890]      // while  =>  TIMEOUT
[00:32:27.890]      // end while "1"
[00:32:27.890]    </control>
[00:32:27.890]    <control if="canReadPins" while="" timeout="0" info="">
[00:32:27.890]      // if-block "canReadPins"
[00:32:27.890]        // =>  TRUE
[00:32:27.890]      <control if="" while="(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0" timeout="1000000" info="">
[00:32:27.890]        // while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"  (timeout="1000000")
[00:32:27.893]          // -> [DAP_SWJ_Pins(0x80, 0x80, 0) => 0x83]   (Out: nRESET=1  =>  In: SWCLK/TCK=1, SWDIO/TMS=1, TDI=0, TDO=0, nTRST=0, nRESET=1)
[00:32:27.893]        // while-condition  =>  FALSE
[00:32:27.893]        // end while "(DAP_SWJ_Pins(nReset, nReset, 0) & nReset) == 0"
[00:32:27.893]      </control>
[00:32:27.893]      // end if-block "canReadPins"
[00:32:27.893]    </control>
[00:32:27.893]    <control if="!canReadPins" while="" timeout="0" info="">
[00:32:27.894]      // if-block "!canReadPins"
[00:32:27.894]        // =>  FALSE
[00:32:27.894]      // skip if-block "!canReadPins"
[00:32:27.894]    </control>
[00:32:27.894]    <control if="(ACCESS_POINT_VAL & 0x00E00000) == 0" while="" timeout="0" info="">
[00:32:27.894]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:32:27.894]        // =>  TRUE
[00:32:27.895]      <block atomic="false" info="">
[00:32:27.895]        WriteAP(0x00, 0x190008);
[00:32:27.898]          // -> [WriteAP(0x00000000, 0x00190008)]   (__dp=0x00000000, __ap=0x00000004)
[00:32:27.898]        WriteAP(0xF0, 0x01);
[00:32:27.901]          // -> [WriteAP(0x000000F0, 0x00000001)]   (__dp=0x00000000, __ap=0x00000004)
[00:32:27.901]      </block>
[00:32:27.901]      // end if-block "(ACCESS_POINT_VAL & 0x00E00000) == 0"
[00:32:27.901]    </control>
[00:32:27.901]    <control if="(ACCESS_POINT_VAL & 0x00E00000) != 0" while="" timeout="0" info="">
[00:32:27.901]      // if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:32:27.901]        // =>  FALSE
[00:32:27.902]      // skip if-block "(ACCESS_POINT_VAL & 0x00E00000) != 0"
[00:32:27.902]    </control>
[00:32:27.902]    <block atomic="false" info="">
[00:32:27.902]      ACCESS_POINT_VAL = ReadAP(0x00);//Reading current state of access point
[00:32:27.905]        // -> [ReadAP(0x00000000) => 0x0079002F]   (__dp=0x00000000, __ap=0x00000004)
[00:32:27.905]        // -> [ACCESS_POINT_VAL <= 0x0079002F]
[00:32:27.905]      Message(0, "Current state of access point is: %x",ACCESS_POINT_VAL);
[00:32:27.907]      __ap = 0; //lets make sure we reset the access point selection
[00:32:27.907]        // -> [__ap <= 0x00000000]
[00:32:27.907]    </block>
[00:32:27.907]  </sequence>
[00:32:27.907]  
[00:32:27.928]  **********  Sequence "DebugDeviceUnlock"  (Context="Connect", Pname="", info="")
[00:32:27.928]  
[00:32:27.928]  <debugvars>
[00:32:27.928]    // Pre-defined
[00:32:27.928]    __protocol=0x00010002      (Protocol="SWD", SWJ-DP="True")
[00:32:27.928]    __connection=0x00000201    (Connection Type="Debug", Reset Type="System Reset")
[00:32:27.929]    __dp=0x00000000
[00:32:27.929]    __ap=0x00000000
[00:32:27.929]    __traceout=0x00000000      (Trace Disabled)
[00:32:27.929]    __errorcontrol=0x00000000  (Skip Errors="False")
[00:32:27.929]    __FlashAddr=0x00000000
[00:32:27.929]    __FlashLen=0x00000000
[00:32:27.929]    __FlashArg=0x00000000
[00:32:27.929]    __FlashOp=0x00000000
[00:32:27.929]    __Result=0x00000000
[00:32:27.929]  </debugvars>
[00:32:27.929]  
[00:32:27.930]  <sequence name="DebugDeviceUnlock" Pname="" disable="false" info="">
[00:32:27.930]    <block atomic="false" info="">
[00:32:27.930]      __var deviceID = 0;
[00:32:27.930]        // -> [deviceID <= 0x00000000]
[00:32:27.930]      __var version = 0;
[00:32:27.930]        // -> [version <= 0x00000000]
[00:32:27.930]      __var partNum = 0;
[00:32:27.930]        // -> [partNum <= 0x00000000]
[00:32:27.930]      __var manuf = 0;
[00:32:27.930]        // -> [manuf <= 0x00000000]
[00:32:27.930]      __var isMSPM0G1X0X_G3X0X = 0;
[00:32:27.931]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000000]
[00:32:27.931]      __var isProduction = 0;
[00:32:27.931]        // -> [isProduction <= 0x00000000]
[00:32:27.931]      __var continueId = 0;
[00:32:27.931]        // -> [continueId <= 0x00000000]
[00:32:27.931]      deviceID =   Read32(0x41C40004);
[00:32:27.935]        // -> [Read32(0x41C40004) => 0x2BB8802F]   (__dp=0x00000000, __ap=0x00000000)
[00:32:27.935]        // -> [deviceID <= 0x2BB8802F]
[00:32:27.935]      version = deviceID >> 28;
[00:32:27.936]        // -> [version <= 0x00000002]
[00:32:27.936]      partNum = (deviceID & 0x0FFFF000) >> 12;
[00:32:27.936]        // -> [partNum <= 0x0000BB88]
[00:32:27.936]      manuf = (deviceID & 0x00000FFE) >> 1;
[00:32:27.936]        // -> [manuf <= 0x00000017]
[00:32:27.936]      isMSPM0G1X0X_G3X0X = (partNum == 0xBB88) && (manuf == 0x17);
[00:32:27.936]        // -> [isMSPM0G1X0X_G3X0X <= 0x00000001]
[00:32:27.936]      isProduction = (version > 0);
[00:32:27.936]        // -> [isProduction <= 0x00000001]
[00:32:27.936]    </block>
[00:32:27.936]    <control if="!isMSPM0G1X0X_G3X0X" while="" timeout="0" info="">
[00:32:27.937]      // if-block "!isMSPM0G1X0X_G3X0X"
[00:32:27.937]        // =>  FALSE
[00:32:27.937]      // skip if-block "!isMSPM0G1X0X_G3X0X"
[00:32:27.937]    </control>
[00:32:27.937]    <control if="continueId == 4" while="" timeout="0" info="">
[00:32:27.937]      // if-block "continueId == 4"
[00:32:27.937]        // =>  FALSE
[00:32:27.937]      // skip if-block "continueId == 4"
[00:32:27.937]    </control>
[00:32:27.939]    <control if="!isProduction" while="" timeout="0" info="">
[00:32:27.939]      // if-block "!isProduction"
[00:32:27.939]        // =>  FALSE
[00:32:27.939]      // skip if-block "!isProduction"
[00:32:27.939]    </control>
[00:32:27.939]  </sequence>
[00:32:27.939]  
